
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf08  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  0800cfc8  0800cfc8  0000dfc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db58  0800db58  0000fa24  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800db58  0800db58  0000eb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db60  0800db60  0000fa24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db60  0800db60  0000eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db64  0800db64  0000eb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a24  20000000  0800db68  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  20000a28  0800e58c  0000fa28  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200010d8  0800e58c  000100d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000fa24  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8da  00000000  00000000  0000fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003562  00000000  00000000  0002b326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  0002e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001410  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb68  00000000  00000000  00031530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eafd  00000000  00000000  00051098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb0d3  00000000  00000000  0006fb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ac68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006610  00000000  00000000  0013acac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001412bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a28 	.word	0x20000a28
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cfac 	.word	0x0800cfac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a2c 	.word	0x20000a2c
 8000100:	0800cfac 	.word	0x0800cfac

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f002 f955 	bl	80026d8 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f002 f899 	bl	8002570 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f002 f947 	bl	80026d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f93d 	bl	80026d8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f8c3 	bl	80025f8 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f8b9 	bl	80025f8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	0008      	movs	r0, r1
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fccd 	bl	8000e3c <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fc55 	bl	8000d5c <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fcbf 	bl	8000e3c <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fcb5 	bl	8000e3c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc63 	bl	8000dac <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc59 	bl	8000dac <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	0008      	movs	r0, r1
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	@ (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	@ (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f83c 	bl	80005b4 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			@ (mov r8, r8)

08000548 <__aeabi_f2uiz>:
 8000548:	219e      	movs	r1, #158	@ 0x9e
 800054a:	b510      	push	{r4, lr}
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	1c04      	adds	r4, r0, #0
 8000550:	f7ff ffd0 	bl	80004f4 <__aeabi_fcmpge>
 8000554:	2800      	cmp	r0, #0
 8000556:	d103      	bne.n	8000560 <__aeabi_f2uiz+0x18>
 8000558:	1c20      	adds	r0, r4, #0
 800055a:	f001 f875 	bl	8001648 <__aeabi_f2iz>
 800055e:	bd10      	pop	{r4, pc}
 8000560:	219e      	movs	r1, #158	@ 0x9e
 8000562:	1c20      	adds	r0, r4, #0
 8000564:	05c9      	lsls	r1, r1, #23
 8000566:	f000 fe0b 	bl	8001180 <__aeabi_fsub>
 800056a:	f001 f86d 	bl	8001648 <__aeabi_f2iz>
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	061b      	lsls	r3, r3, #24
 8000572:	469c      	mov	ip, r3
 8000574:	4460      	add	r0, ip
 8000576:	e7f2      	b.n	800055e <__aeabi_f2uiz+0x16>

08000578 <__aeabi_d2uiz>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	2200      	movs	r2, #0
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <__aeabi_d2uiz+0x38>)
 800057e:	0004      	movs	r4, r0
 8000580:	000d      	movs	r5, r1
 8000582:	f7ff ff7d 	bl	8000480 <__aeabi_dcmpge>
 8000586:	2800      	cmp	r0, #0
 8000588:	d104      	bne.n	8000594 <__aeabi_d2uiz+0x1c>
 800058a:	0020      	movs	r0, r4
 800058c:	0029      	movs	r1, r5
 800058e:	f003 f823 	bl	80035d8 <__aeabi_d2iz>
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <__aeabi_d2uiz+0x38>)
 8000596:	2200      	movs	r2, #0
 8000598:	0020      	movs	r0, r4
 800059a:	0029      	movs	r1, r5
 800059c:	f002 fbf0 	bl	8002d80 <__aeabi_dsub>
 80005a0:	f003 f81a 	bl	80035d8 <__aeabi_d2iz>
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	469c      	mov	ip, r3
 80005aa:	4460      	add	r0, ip
 80005ac:	e7f1      	b.n	8000592 <__aeabi_d2uiz+0x1a>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	41e00000 	.word	0x41e00000

080005b4 <__udivmoddi4>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	4657      	mov	r7, sl
 80005b8:	464e      	mov	r6, r9
 80005ba:	4645      	mov	r5, r8
 80005bc:	46de      	mov	lr, fp
 80005be:	b5e0      	push	{r5, r6, r7, lr}
 80005c0:	0004      	movs	r4, r0
 80005c2:	000d      	movs	r5, r1
 80005c4:	4692      	mov	sl, r2
 80005c6:	4699      	mov	r9, r3
 80005c8:	b083      	sub	sp, #12
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d830      	bhi.n	8000630 <__udivmoddi4+0x7c>
 80005ce:	d02d      	beq.n	800062c <__udivmoddi4+0x78>
 80005d0:	4649      	mov	r1, r9
 80005d2:	4650      	mov	r0, sl
 80005d4:	f003 f8c6 	bl	8003764 <__clzdi2>
 80005d8:	0029      	movs	r1, r5
 80005da:	0006      	movs	r6, r0
 80005dc:	0020      	movs	r0, r4
 80005de:	f003 f8c1 	bl	8003764 <__clzdi2>
 80005e2:	1a33      	subs	r3, r6, r0
 80005e4:	4698      	mov	r8, r3
 80005e6:	3b20      	subs	r3, #32
 80005e8:	d434      	bmi.n	8000654 <__udivmoddi4+0xa0>
 80005ea:	469b      	mov	fp, r3
 80005ec:	4653      	mov	r3, sl
 80005ee:	465a      	mov	r2, fp
 80005f0:	4093      	lsls	r3, r2
 80005f2:	4642      	mov	r2, r8
 80005f4:	001f      	movs	r7, r3
 80005f6:	4653      	mov	r3, sl
 80005f8:	4093      	lsls	r3, r2
 80005fa:	001e      	movs	r6, r3
 80005fc:	42af      	cmp	r7, r5
 80005fe:	d83b      	bhi.n	8000678 <__udivmoddi4+0xc4>
 8000600:	42af      	cmp	r7, r5
 8000602:	d100      	bne.n	8000606 <__udivmoddi4+0x52>
 8000604:	e079      	b.n	80006fa <__udivmoddi4+0x146>
 8000606:	465b      	mov	r3, fp
 8000608:	1ba4      	subs	r4, r4, r6
 800060a:	41bd      	sbcs	r5, r7
 800060c:	2b00      	cmp	r3, #0
 800060e:	da00      	bge.n	8000612 <__udivmoddi4+0x5e>
 8000610:	e076      	b.n	8000700 <__udivmoddi4+0x14c>
 8000612:	2200      	movs	r2, #0
 8000614:	2300      	movs	r3, #0
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2301      	movs	r3, #1
 800061c:	465a      	mov	r2, fp
 800061e:	4093      	lsls	r3, r2
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2301      	movs	r3, #1
 8000624:	4642      	mov	r2, r8
 8000626:	4093      	lsls	r3, r2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	e029      	b.n	8000680 <__udivmoddi4+0xcc>
 800062c:	4282      	cmp	r2, r0
 800062e:	d9cf      	bls.n	80005d0 <__udivmoddi4+0x1c>
 8000630:	2200      	movs	r2, #0
 8000632:	2300      	movs	r3, #0
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <__udivmoddi4+0x8e>
 800063e:	601c      	str	r4, [r3, #0]
 8000640:	605d      	str	r5, [r3, #4]
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	b003      	add	sp, #12
 8000648:	bcf0      	pop	{r4, r5, r6, r7}
 800064a:	46bb      	mov	fp, r7
 800064c:	46b2      	mov	sl, r6
 800064e:	46a9      	mov	r9, r5
 8000650:	46a0      	mov	r8, r4
 8000652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000654:	4642      	mov	r2, r8
 8000656:	469b      	mov	fp, r3
 8000658:	2320      	movs	r3, #32
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	4652      	mov	r2, sl
 800065e:	40da      	lsrs	r2, r3
 8000660:	4641      	mov	r1, r8
 8000662:	0013      	movs	r3, r2
 8000664:	464a      	mov	r2, r9
 8000666:	408a      	lsls	r2, r1
 8000668:	0017      	movs	r7, r2
 800066a:	4642      	mov	r2, r8
 800066c:	431f      	orrs	r7, r3
 800066e:	4653      	mov	r3, sl
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d9c3      	bls.n	8000600 <__udivmoddi4+0x4c>
 8000678:	2200      	movs	r2, #0
 800067a:	2300      	movs	r3, #0
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	4643      	mov	r3, r8
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0d8      	beq.n	8000638 <__udivmoddi4+0x84>
 8000686:	07fb      	lsls	r3, r7, #31
 8000688:	0872      	lsrs	r2, r6, #1
 800068a:	431a      	orrs	r2, r3
 800068c:	4646      	mov	r6, r8
 800068e:	087b      	lsrs	r3, r7, #1
 8000690:	e00e      	b.n	80006b0 <__udivmoddi4+0xfc>
 8000692:	42ab      	cmp	r3, r5
 8000694:	d101      	bne.n	800069a <__udivmoddi4+0xe6>
 8000696:	42a2      	cmp	r2, r4
 8000698:	d80c      	bhi.n	80006b4 <__udivmoddi4+0x100>
 800069a:	1aa4      	subs	r4, r4, r2
 800069c:	419d      	sbcs	r5, r3
 800069e:	2001      	movs	r0, #1
 80006a0:	1924      	adds	r4, r4, r4
 80006a2:	416d      	adcs	r5, r5
 80006a4:	2100      	movs	r1, #0
 80006a6:	3e01      	subs	r6, #1
 80006a8:	1824      	adds	r4, r4, r0
 80006aa:	414d      	adcs	r5, r1
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d006      	beq.n	80006be <__udivmoddi4+0x10a>
 80006b0:	42ab      	cmp	r3, r5
 80006b2:	d9ee      	bls.n	8000692 <__udivmoddi4+0xde>
 80006b4:	3e01      	subs	r6, #1
 80006b6:	1924      	adds	r4, r4, r4
 80006b8:	416d      	adcs	r5, r5
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d1f8      	bne.n	80006b0 <__udivmoddi4+0xfc>
 80006be:	9800      	ldr	r0, [sp, #0]
 80006c0:	9901      	ldr	r1, [sp, #4]
 80006c2:	465b      	mov	r3, fp
 80006c4:	1900      	adds	r0, r0, r4
 80006c6:	4169      	adcs	r1, r5
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db24      	blt.n	8000716 <__udivmoddi4+0x162>
 80006cc:	002b      	movs	r3, r5
 80006ce:	465a      	mov	r2, fp
 80006d0:	4644      	mov	r4, r8
 80006d2:	40d3      	lsrs	r3, r2
 80006d4:	002a      	movs	r2, r5
 80006d6:	40e2      	lsrs	r2, r4
 80006d8:	001c      	movs	r4, r3
 80006da:	465b      	mov	r3, fp
 80006dc:	0015      	movs	r5, r2
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db2a      	blt.n	8000738 <__udivmoddi4+0x184>
 80006e2:	0026      	movs	r6, r4
 80006e4:	409e      	lsls	r6, r3
 80006e6:	0033      	movs	r3, r6
 80006e8:	0026      	movs	r6, r4
 80006ea:	4647      	mov	r7, r8
 80006ec:	40be      	lsls	r6, r7
 80006ee:	0032      	movs	r2, r6
 80006f0:	1a80      	subs	r0, r0, r2
 80006f2:	4199      	sbcs	r1, r3
 80006f4:	9000      	str	r0, [sp, #0]
 80006f6:	9101      	str	r1, [sp, #4]
 80006f8:	e79e      	b.n	8000638 <__udivmoddi4+0x84>
 80006fa:	42a3      	cmp	r3, r4
 80006fc:	d8bc      	bhi.n	8000678 <__udivmoddi4+0xc4>
 80006fe:	e782      	b.n	8000606 <__udivmoddi4+0x52>
 8000700:	4642      	mov	r2, r8
 8000702:	2320      	movs	r3, #32
 8000704:	2100      	movs	r1, #0
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	9100      	str	r1, [sp, #0]
 800070c:	9201      	str	r2, [sp, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	40da      	lsrs	r2, r3
 8000712:	9201      	str	r2, [sp, #4]
 8000714:	e785      	b.n	8000622 <__udivmoddi4+0x6e>
 8000716:	4642      	mov	r2, r8
 8000718:	2320      	movs	r3, #32
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	002a      	movs	r2, r5
 800071e:	4646      	mov	r6, r8
 8000720:	409a      	lsls	r2, r3
 8000722:	0023      	movs	r3, r4
 8000724:	40f3      	lsrs	r3, r6
 8000726:	4644      	mov	r4, r8
 8000728:	4313      	orrs	r3, r2
 800072a:	002a      	movs	r2, r5
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	465b      	mov	r3, fp
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	dad4      	bge.n	80006e2 <__udivmoddi4+0x12e>
 8000738:	4642      	mov	r2, r8
 800073a:	002f      	movs	r7, r5
 800073c:	2320      	movs	r3, #32
 800073e:	0026      	movs	r6, r4
 8000740:	4097      	lsls	r7, r2
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	40de      	lsrs	r6, r3
 8000746:	003b      	movs	r3, r7
 8000748:	4333      	orrs	r3, r6
 800074a:	e7cd      	b.n	80006e8 <__udivmoddi4+0x134>

0800074c <__aeabi_fadd>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	024b      	lsls	r3, r1, #9
 8000750:	0a5a      	lsrs	r2, r3, #9
 8000752:	4694      	mov	ip, r2
 8000754:	004a      	lsls	r2, r1, #1
 8000756:	0fc9      	lsrs	r1, r1, #31
 8000758:	46ce      	mov	lr, r9
 800075a:	4647      	mov	r7, r8
 800075c:	4689      	mov	r9, r1
 800075e:	0045      	lsls	r5, r0, #1
 8000760:	0246      	lsls	r6, r0, #9
 8000762:	0e2d      	lsrs	r5, r5, #24
 8000764:	0e12      	lsrs	r2, r2, #24
 8000766:	b580      	push	{r7, lr}
 8000768:	0999      	lsrs	r1, r3, #6
 800076a:	0a77      	lsrs	r7, r6, #9
 800076c:	0fc4      	lsrs	r4, r0, #31
 800076e:	09b6      	lsrs	r6, r6, #6
 8000770:	1aab      	subs	r3, r5, r2
 8000772:	454c      	cmp	r4, r9
 8000774:	d020      	beq.n	80007b8 <__aeabi_fadd+0x6c>
 8000776:	2b00      	cmp	r3, #0
 8000778:	dd0c      	ble.n	8000794 <__aeabi_fadd+0x48>
 800077a:	2a00      	cmp	r2, #0
 800077c:	d134      	bne.n	80007e8 <__aeabi_fadd+0x9c>
 800077e:	2900      	cmp	r1, #0
 8000780:	d02a      	beq.n	80007d8 <__aeabi_fadd+0x8c>
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	2b01      	cmp	r3, #1
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0x3e>
 8000788:	e08f      	b.n	80008aa <__aeabi_fadd+0x15e>
 800078a:	2bff      	cmp	r3, #255	@ 0xff
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x44>
 800078e:	e0cd      	b.n	800092c <__aeabi_fadd+0x1e0>
 8000790:	0013      	movs	r3, r2
 8000792:	e02f      	b.n	80007f4 <__aeabi_fadd+0xa8>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d060      	beq.n	800085a <__aeabi_fadd+0x10e>
 8000798:	1b53      	subs	r3, r2, r5
 800079a:	2d00      	cmp	r5, #0
 800079c:	d000      	beq.n	80007a0 <__aeabi_fadd+0x54>
 800079e:	e0ee      	b.n	800097e <__aeabi_fadd+0x232>
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_fadd+0x5a>
 80007a4:	e13e      	b.n	8000a24 <__aeabi_fadd+0x2d8>
 80007a6:	1e5c      	subs	r4, r3, #1
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d100      	bne.n	80007ae <__aeabi_fadd+0x62>
 80007ac:	e16b      	b.n	8000a86 <__aeabi_fadd+0x33a>
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x68>
 80007b2:	e0b9      	b.n	8000928 <__aeabi_fadd+0x1dc>
 80007b4:	0023      	movs	r3, r4
 80007b6:	e0e7      	b.n	8000988 <__aeabi_fadd+0x23c>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dc00      	bgt.n	80007be <__aeabi_fadd+0x72>
 80007bc:	e0a4      	b.n	8000908 <__aeabi_fadd+0x1bc>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d069      	beq.n	8000896 <__aeabi_fadd+0x14a>
 80007c2:	2dff      	cmp	r5, #255	@ 0xff
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x7c>
 80007c6:	e0b1      	b.n	800092c <__aeabi_fadd+0x1e0>
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	04d2      	lsls	r2, r2, #19
 80007cc:	4311      	orrs	r1, r2
 80007ce:	2b1b      	cmp	r3, #27
 80007d0:	dc00      	bgt.n	80007d4 <__aeabi_fadd+0x88>
 80007d2:	e0e9      	b.n	80009a8 <__aeabi_fadd+0x25c>
 80007d4:	002b      	movs	r3, r5
 80007d6:	3605      	adds	r6, #5
 80007d8:	08f7      	lsrs	r7, r6, #3
 80007da:	2bff      	cmp	r3, #255	@ 0xff
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fadd+0x94>
 80007de:	e0a5      	b.n	800092c <__aeabi_fadd+0x1e0>
 80007e0:	027a      	lsls	r2, r7, #9
 80007e2:	0a52      	lsrs	r2, r2, #9
 80007e4:	b2d8      	uxtb	r0, r3
 80007e6:	e030      	b.n	800084a <__aeabi_fadd+0xfe>
 80007e8:	2dff      	cmp	r5, #255	@ 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0xa2>
 80007ec:	e09e      	b.n	800092c <__aeabi_fadd+0x1e0>
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	04d2      	lsls	r2, r2, #19
 80007f2:	4311      	orrs	r1, r2
 80007f4:	2001      	movs	r0, #1
 80007f6:	2b1b      	cmp	r3, #27
 80007f8:	dc08      	bgt.n	800080c <__aeabi_fadd+0xc0>
 80007fa:	0008      	movs	r0, r1
 80007fc:	2220      	movs	r2, #32
 80007fe:	40d8      	lsrs	r0, r3
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	4099      	lsls	r1, r3
 8000804:	000b      	movs	r3, r1
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	4193      	sbcs	r3, r2
 800080a:	4318      	orrs	r0, r3
 800080c:	1a36      	subs	r6, r6, r0
 800080e:	0173      	lsls	r3, r6, #5
 8000810:	d400      	bmi.n	8000814 <__aeabi_fadd+0xc8>
 8000812:	e071      	b.n	80008f8 <__aeabi_fadd+0x1ac>
 8000814:	01b6      	lsls	r6, r6, #6
 8000816:	09b7      	lsrs	r7, r6, #6
 8000818:	0038      	movs	r0, r7
 800081a:	f002 ff85 	bl	8003728 <__clzsi2>
 800081e:	003b      	movs	r3, r7
 8000820:	3805      	subs	r0, #5
 8000822:	4083      	lsls	r3, r0
 8000824:	4285      	cmp	r5, r0
 8000826:	dd4d      	ble.n	80008c4 <__aeabi_fadd+0x178>
 8000828:	4eb4      	ldr	r6, [pc, #720]	@ (8000afc <__aeabi_fadd+0x3b0>)
 800082a:	1a2d      	subs	r5, r5, r0
 800082c:	401e      	ands	r6, r3
 800082e:	075a      	lsls	r2, r3, #29
 8000830:	d068      	beq.n	8000904 <__aeabi_fadd+0x1b8>
 8000832:	220f      	movs	r2, #15
 8000834:	4013      	ands	r3, r2
 8000836:	2b04      	cmp	r3, #4
 8000838:	d064      	beq.n	8000904 <__aeabi_fadd+0x1b8>
 800083a:	3604      	adds	r6, #4
 800083c:	0173      	lsls	r3, r6, #5
 800083e:	d561      	bpl.n	8000904 <__aeabi_fadd+0x1b8>
 8000840:	1c68      	adds	r0, r5, #1
 8000842:	2dfe      	cmp	r5, #254	@ 0xfe
 8000844:	d154      	bne.n	80008f0 <__aeabi_fadd+0x1a4>
 8000846:	20ff      	movs	r0, #255	@ 0xff
 8000848:	2200      	movs	r2, #0
 800084a:	05c0      	lsls	r0, r0, #23
 800084c:	4310      	orrs	r0, r2
 800084e:	07e4      	lsls	r4, r4, #31
 8000850:	4320      	orrs	r0, r4
 8000852:	bcc0      	pop	{r6, r7}
 8000854:	46b9      	mov	r9, r7
 8000856:	46b0      	mov	r8, r6
 8000858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085a:	22fe      	movs	r2, #254	@ 0xfe
 800085c:	4690      	mov	r8, r2
 800085e:	1c68      	adds	r0, r5, #1
 8000860:	0002      	movs	r2, r0
 8000862:	4640      	mov	r0, r8
 8000864:	4210      	tst	r0, r2
 8000866:	d16b      	bne.n	8000940 <__aeabi_fadd+0x1f4>
 8000868:	2d00      	cmp	r5, #0
 800086a:	d000      	beq.n	800086e <__aeabi_fadd+0x122>
 800086c:	e0dd      	b.n	8000a2a <__aeabi_fadd+0x2de>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x128>
 8000872:	e102      	b.n	8000a7a <__aeabi_fadd+0x32e>
 8000874:	2900      	cmp	r1, #0
 8000876:	d0b3      	beq.n	80007e0 <__aeabi_fadd+0x94>
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	1a77      	subs	r7, r6, r1
 800087c:	04d2      	lsls	r2, r2, #19
 800087e:	4217      	tst	r7, r2
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x138>
 8000882:	e136      	b.n	8000af2 <__aeabi_fadd+0x3a6>
 8000884:	464c      	mov	r4, r9
 8000886:	1b8e      	subs	r6, r1, r6
 8000888:	d061      	beq.n	800094e <__aeabi_fadd+0x202>
 800088a:	2001      	movs	r0, #1
 800088c:	4216      	tst	r6, r2
 800088e:	d130      	bne.n	80008f2 <__aeabi_fadd+0x1a6>
 8000890:	2300      	movs	r3, #0
 8000892:	08f7      	lsrs	r7, r6, #3
 8000894:	e7a4      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000896:	2900      	cmp	r1, #0
 8000898:	d09e      	beq.n	80007d8 <__aeabi_fadd+0x8c>
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	2b01      	cmp	r3, #1
 800089e:	d100      	bne.n	80008a2 <__aeabi_fadd+0x156>
 80008a0:	e0ca      	b.n	8000a38 <__aeabi_fadd+0x2ec>
 80008a2:	2bff      	cmp	r3, #255	@ 0xff
 80008a4:	d042      	beq.n	800092c <__aeabi_fadd+0x1e0>
 80008a6:	0013      	movs	r3, r2
 80008a8:	e791      	b.n	80007ce <__aeabi_fadd+0x82>
 80008aa:	1a71      	subs	r1, r6, r1
 80008ac:	014b      	lsls	r3, r1, #5
 80008ae:	d400      	bmi.n	80008b2 <__aeabi_fadd+0x166>
 80008b0:	e0d1      	b.n	8000a56 <__aeabi_fadd+0x30a>
 80008b2:	018f      	lsls	r7, r1, #6
 80008b4:	09bf      	lsrs	r7, r7, #6
 80008b6:	0038      	movs	r0, r7
 80008b8:	f002 ff36 	bl	8003728 <__clzsi2>
 80008bc:	003b      	movs	r3, r7
 80008be:	3805      	subs	r0, #5
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2501      	movs	r5, #1
 80008c4:	2220      	movs	r2, #32
 80008c6:	1b40      	subs	r0, r0, r5
 80008c8:	3001      	adds	r0, #1
 80008ca:	1a12      	subs	r2, r2, r0
 80008cc:	001e      	movs	r6, r3
 80008ce:	4093      	lsls	r3, r2
 80008d0:	40c6      	lsrs	r6, r0
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	4193      	sbcs	r3, r2
 80008d6:	431e      	orrs	r6, r3
 80008d8:	d039      	beq.n	800094e <__aeabi_fadd+0x202>
 80008da:	0773      	lsls	r3, r6, #29
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x194>
 80008de:	e11b      	b.n	8000b18 <__aeabi_fadd+0x3cc>
 80008e0:	230f      	movs	r3, #15
 80008e2:	2500      	movs	r5, #0
 80008e4:	4033      	ands	r3, r6
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d1a7      	bne.n	800083a <__aeabi_fadd+0xee>
 80008ea:	2001      	movs	r0, #1
 80008ec:	0172      	lsls	r2, r6, #5
 80008ee:	d57c      	bpl.n	80009ea <__aeabi_fadd+0x29e>
 80008f0:	b2c0      	uxtb	r0, r0
 80008f2:	01b2      	lsls	r2, r6, #6
 80008f4:	0a52      	lsrs	r2, r2, #9
 80008f6:	e7a8      	b.n	800084a <__aeabi_fadd+0xfe>
 80008f8:	0773      	lsls	r3, r6, #29
 80008fa:	d003      	beq.n	8000904 <__aeabi_fadd+0x1b8>
 80008fc:	230f      	movs	r3, #15
 80008fe:	4033      	ands	r3, r6
 8000900:	2b04      	cmp	r3, #4
 8000902:	d19a      	bne.n	800083a <__aeabi_fadd+0xee>
 8000904:	002b      	movs	r3, r5
 8000906:	e767      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d023      	beq.n	8000954 <__aeabi_fadd+0x208>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d17b      	bne.n	8000a0a <__aeabi_fadd+0x2be>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fadd+0x1cc>
 8000916:	e086      	b.n	8000a26 <__aeabi_fadd+0x2da>
 8000918:	1e5d      	subs	r5, r3, #1
 800091a:	2b01      	cmp	r3, #1
 800091c:	d100      	bne.n	8000920 <__aeabi_fadd+0x1d4>
 800091e:	e08b      	b.n	8000a38 <__aeabi_fadd+0x2ec>
 8000920:	2bff      	cmp	r3, #255	@ 0xff
 8000922:	d002      	beq.n	800092a <__aeabi_fadd+0x1de>
 8000924:	002b      	movs	r3, r5
 8000926:	e075      	b.n	8000a14 <__aeabi_fadd+0x2c8>
 8000928:	464c      	mov	r4, r9
 800092a:	4667      	mov	r7, ip
 800092c:	2f00      	cmp	r7, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x1e6>
 8000930:	e789      	b.n	8000846 <__aeabi_fadd+0xfa>
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	03d2      	lsls	r2, r2, #15
 8000936:	433a      	orrs	r2, r7
 8000938:	0252      	lsls	r2, r2, #9
 800093a:	20ff      	movs	r0, #255	@ 0xff
 800093c:	0a52      	lsrs	r2, r2, #9
 800093e:	e784      	b.n	800084a <__aeabi_fadd+0xfe>
 8000940:	1a77      	subs	r7, r6, r1
 8000942:	017b      	lsls	r3, r7, #5
 8000944:	d46b      	bmi.n	8000a1e <__aeabi_fadd+0x2d2>
 8000946:	2f00      	cmp	r7, #0
 8000948:	d000      	beq.n	800094c <__aeabi_fadd+0x200>
 800094a:	e765      	b.n	8000818 <__aeabi_fadd+0xcc>
 800094c:	2400      	movs	r4, #0
 800094e:	2000      	movs	r0, #0
 8000950:	2200      	movs	r2, #0
 8000952:	e77a      	b.n	800084a <__aeabi_fadd+0xfe>
 8000954:	22fe      	movs	r2, #254	@ 0xfe
 8000956:	1c6b      	adds	r3, r5, #1
 8000958:	421a      	tst	r2, r3
 800095a:	d149      	bne.n	80009f0 <__aeabi_fadd+0x2a4>
 800095c:	2d00      	cmp	r5, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_fadd+0x216>
 8000960:	e09f      	b.n	8000aa2 <__aeabi_fadd+0x356>
 8000962:	2e00      	cmp	r6, #0
 8000964:	d100      	bne.n	8000968 <__aeabi_fadd+0x21c>
 8000966:	e0ba      	b.n	8000ade <__aeabi_fadd+0x392>
 8000968:	2900      	cmp	r1, #0
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0x222>
 800096c:	e0cf      	b.n	8000b0e <__aeabi_fadd+0x3c2>
 800096e:	1872      	adds	r2, r6, r1
 8000970:	0153      	lsls	r3, r2, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x22a>
 8000974:	e0cd      	b.n	8000b12 <__aeabi_fadd+0x3c6>
 8000976:	0192      	lsls	r2, r2, #6
 8000978:	2001      	movs	r0, #1
 800097a:	0a52      	lsrs	r2, r2, #9
 800097c:	e765      	b.n	800084a <__aeabi_fadd+0xfe>
 800097e:	2aff      	cmp	r2, #255	@ 0xff
 8000980:	d0d2      	beq.n	8000928 <__aeabi_fadd+0x1dc>
 8000982:	2080      	movs	r0, #128	@ 0x80
 8000984:	04c0      	lsls	r0, r0, #19
 8000986:	4306      	orrs	r6, r0
 8000988:	2001      	movs	r0, #1
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dc08      	bgt.n	80009a0 <__aeabi_fadd+0x254>
 800098e:	0030      	movs	r0, r6
 8000990:	2420      	movs	r4, #32
 8000992:	40d8      	lsrs	r0, r3
 8000994:	1ae3      	subs	r3, r4, r3
 8000996:	409e      	lsls	r6, r3
 8000998:	0033      	movs	r3, r6
 800099a:	1e5c      	subs	r4, r3, #1
 800099c:	41a3      	sbcs	r3, r4
 800099e:	4318      	orrs	r0, r3
 80009a0:	464c      	mov	r4, r9
 80009a2:	0015      	movs	r5, r2
 80009a4:	1a0e      	subs	r6, r1, r0
 80009a6:	e732      	b.n	800080e <__aeabi_fadd+0xc2>
 80009a8:	0008      	movs	r0, r1
 80009aa:	2220      	movs	r2, #32
 80009ac:	40d8      	lsrs	r0, r3
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	4099      	lsls	r1, r3
 80009b2:	000b      	movs	r3, r1
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	4193      	sbcs	r3, r2
 80009b8:	4303      	orrs	r3, r0
 80009ba:	18f6      	adds	r6, r6, r3
 80009bc:	0173      	lsls	r3, r6, #5
 80009be:	d59b      	bpl.n	80008f8 <__aeabi_fadd+0x1ac>
 80009c0:	3501      	adds	r5, #1
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fadd+0x27c>
 80009c6:	e73e      	b.n	8000846 <__aeabi_fadd+0xfa>
 80009c8:	2301      	movs	r3, #1
 80009ca:	494d      	ldr	r1, [pc, #308]	@ (8000b00 <__aeabi_fadd+0x3b4>)
 80009cc:	0872      	lsrs	r2, r6, #1
 80009ce:	4033      	ands	r3, r6
 80009d0:	400a      	ands	r2, r1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	0016      	movs	r6, r2
 80009d6:	0753      	lsls	r3, r2, #29
 80009d8:	d004      	beq.n	80009e4 <__aeabi_fadd+0x298>
 80009da:	230f      	movs	r3, #15
 80009dc:	4013      	ands	r3, r2
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fadd+0x298>
 80009e2:	e72a      	b.n	800083a <__aeabi_fadd+0xee>
 80009e4:	0173      	lsls	r3, r6, #5
 80009e6:	d500      	bpl.n	80009ea <__aeabi_fadd+0x29e>
 80009e8:	e72a      	b.n	8000840 <__aeabi_fadd+0xf4>
 80009ea:	002b      	movs	r3, r5
 80009ec:	08f7      	lsrs	r7, r6, #3
 80009ee:	e6f7      	b.n	80007e0 <__aeabi_fadd+0x94>
 80009f0:	2bff      	cmp	r3, #255	@ 0xff
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fadd+0x2aa>
 80009f4:	e727      	b.n	8000846 <__aeabi_fadd+0xfa>
 80009f6:	1871      	adds	r1, r6, r1
 80009f8:	0849      	lsrs	r1, r1, #1
 80009fa:	074a      	lsls	r2, r1, #29
 80009fc:	d02f      	beq.n	8000a5e <__aeabi_fadd+0x312>
 80009fe:	220f      	movs	r2, #15
 8000a00:	400a      	ands	r2, r1
 8000a02:	2a04      	cmp	r2, #4
 8000a04:	d02b      	beq.n	8000a5e <__aeabi_fadd+0x312>
 8000a06:	1d0e      	adds	r6, r1, #4
 8000a08:	e6e6      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a0a:	2aff      	cmp	r2, #255	@ 0xff
 8000a0c:	d08d      	beq.n	800092a <__aeabi_fadd+0x1de>
 8000a0e:	2080      	movs	r0, #128	@ 0x80
 8000a10:	04c0      	lsls	r0, r0, #19
 8000a12:	4306      	orrs	r6, r0
 8000a14:	2b1b      	cmp	r3, #27
 8000a16:	dd24      	ble.n	8000a62 <__aeabi_fadd+0x316>
 8000a18:	0013      	movs	r3, r2
 8000a1a:	1d4e      	adds	r6, r1, #5
 8000a1c:	e6dc      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a1e:	464c      	mov	r4, r9
 8000a20:	1b8f      	subs	r7, r1, r6
 8000a22:	e6f9      	b.n	8000818 <__aeabi_fadd+0xcc>
 8000a24:	464c      	mov	r4, r9
 8000a26:	000e      	movs	r6, r1
 8000a28:	e6d6      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d149      	bne.n	8000ac2 <__aeabi_fadd+0x376>
 8000a2e:	2900      	cmp	r1, #0
 8000a30:	d068      	beq.n	8000b04 <__aeabi_fadd+0x3b8>
 8000a32:	4667      	mov	r7, ip
 8000a34:	464c      	mov	r4, r9
 8000a36:	e77c      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000a38:	1870      	adds	r0, r6, r1
 8000a3a:	0143      	lsls	r3, r0, #5
 8000a3c:	d574      	bpl.n	8000b28 <__aeabi_fadd+0x3dc>
 8000a3e:	4930      	ldr	r1, [pc, #192]	@ (8000b00 <__aeabi_fadd+0x3b4>)
 8000a40:	0840      	lsrs	r0, r0, #1
 8000a42:	4001      	ands	r1, r0
 8000a44:	0743      	lsls	r3, r0, #29
 8000a46:	d009      	beq.n	8000a5c <__aeabi_fadd+0x310>
 8000a48:	230f      	movs	r3, #15
 8000a4a:	4003      	ands	r3, r0
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d005      	beq.n	8000a5c <__aeabi_fadd+0x310>
 8000a50:	2302      	movs	r3, #2
 8000a52:	1d0e      	adds	r6, r1, #4
 8000a54:	e6c0      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a56:	2301      	movs	r3, #1
 8000a58:	08cf      	lsrs	r7, r1, #3
 8000a5a:	e6c1      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	08cf      	lsrs	r7, r1, #3
 8000a60:	e6be      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000a62:	2520      	movs	r5, #32
 8000a64:	0030      	movs	r0, r6
 8000a66:	40d8      	lsrs	r0, r3
 8000a68:	1aeb      	subs	r3, r5, r3
 8000a6a:	409e      	lsls	r6, r3
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	1e5d      	subs	r5, r3, #1
 8000a70:	41ab      	sbcs	r3, r5
 8000a72:	4303      	orrs	r3, r0
 8000a74:	0015      	movs	r5, r2
 8000a76:	185e      	adds	r6, r3, r1
 8000a78:	e7a0      	b.n	80009bc <__aeabi_fadd+0x270>
 8000a7a:	2900      	cmp	r1, #0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x334>
 8000a7e:	e765      	b.n	800094c <__aeabi_fadd+0x200>
 8000a80:	464c      	mov	r4, r9
 8000a82:	4667      	mov	r7, ip
 8000a84:	e6ac      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000a86:	1b8f      	subs	r7, r1, r6
 8000a88:	017b      	lsls	r3, r7, #5
 8000a8a:	d52e      	bpl.n	8000aea <__aeabi_fadd+0x39e>
 8000a8c:	01bf      	lsls	r7, r7, #6
 8000a8e:	09bf      	lsrs	r7, r7, #6
 8000a90:	0038      	movs	r0, r7
 8000a92:	f002 fe49 	bl	8003728 <__clzsi2>
 8000a96:	003b      	movs	r3, r7
 8000a98:	3805      	subs	r0, #5
 8000a9a:	4083      	lsls	r3, r0
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	3501      	adds	r5, #1
 8000aa0:	e710      	b.n	80008c4 <__aeabi_fadd+0x178>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fadd+0x35c>
 8000aa6:	e740      	b.n	800092a <__aeabi_fadd+0x1de>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fadd+0x362>
 8000aac:	e741      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	429f      	cmp	r7, r3
 8000ab4:	d200      	bcs.n	8000ab8 <__aeabi_fadd+0x36c>
 8000ab6:	e73c      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ab8:	459c      	cmp	ip, r3
 8000aba:	d300      	bcc.n	8000abe <__aeabi_fadd+0x372>
 8000abc:	e739      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000abe:	4667      	mov	r7, ip
 8000ac0:	e737      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fadd+0x37c>
 8000ac6:	e734      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	03db      	lsls	r3, r3, #15
 8000acc:	429f      	cmp	r7, r3
 8000ace:	d200      	bcs.n	8000ad2 <__aeabi_fadd+0x386>
 8000ad0:	e72f      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ad2:	459c      	cmp	ip, r3
 8000ad4:	d300      	bcc.n	8000ad8 <__aeabi_fadd+0x38c>
 8000ad6:	e72c      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ad8:	464c      	mov	r4, r9
 8000ada:	4667      	mov	r7, ip
 8000adc:	e729      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_fadd+0x398>
 8000ae2:	e734      	b.n	800094e <__aeabi_fadd+0x202>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	08cf      	lsrs	r7, r1, #3
 8000ae8:	e67a      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000aea:	464c      	mov	r4, r9
 8000aec:	2301      	movs	r3, #1
 8000aee:	08ff      	lsrs	r7, r7, #3
 8000af0:	e676      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fadd+0x3ac>
 8000af6:	e729      	b.n	800094c <__aeabi_fadd+0x200>
 8000af8:	08ff      	lsrs	r7, r7, #3
 8000afa:	e671      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000afc:	fbffffff 	.word	0xfbffffff
 8000b00:	7dffffff 	.word	0x7dffffff
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	2400      	movs	r4, #0
 8000b08:	20ff      	movs	r0, #255	@ 0xff
 8000b0a:	03d2      	lsls	r2, r2, #15
 8000b0c:	e69d      	b.n	800084a <__aeabi_fadd+0xfe>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e666      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b12:	2300      	movs	r3, #0
 8000b14:	08d7      	lsrs	r7, r2, #3
 8000b16:	e663      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	0172      	lsls	r2, r6, #5
 8000b1c:	d500      	bpl.n	8000b20 <__aeabi_fadd+0x3d4>
 8000b1e:	e6e7      	b.n	80008f0 <__aeabi_fadd+0x1a4>
 8000b20:	0031      	movs	r1, r6
 8000b22:	2300      	movs	r3, #0
 8000b24:	08cf      	lsrs	r7, r1, #3
 8000b26:	e65b      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	08c7      	lsrs	r7, r0, #3
 8000b2c:	e658      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b2e:	46c0      	nop			@ (mov r8, r8)

08000b30 <__aeabi_fdiv>:
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	4646      	mov	r6, r8
 8000b34:	464f      	mov	r7, r9
 8000b36:	46d6      	mov	lr, sl
 8000b38:	0245      	lsls	r5, r0, #9
 8000b3a:	b5c0      	push	{r6, r7, lr}
 8000b3c:	0fc3      	lsrs	r3, r0, #31
 8000b3e:	0047      	lsls	r7, r0, #1
 8000b40:	4698      	mov	r8, r3
 8000b42:	1c0e      	adds	r6, r1, #0
 8000b44:	0a6d      	lsrs	r5, r5, #9
 8000b46:	0e3f      	lsrs	r7, r7, #24
 8000b48:	d05b      	beq.n	8000c02 <__aeabi_fdiv+0xd2>
 8000b4a:	2fff      	cmp	r7, #255	@ 0xff
 8000b4c:	d021      	beq.n	8000b92 <__aeabi_fdiv+0x62>
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	00ed      	lsls	r5, r5, #3
 8000b52:	04db      	lsls	r3, r3, #19
 8000b54:	431d      	orrs	r5, r3
 8000b56:	2300      	movs	r3, #0
 8000b58:	4699      	mov	r9, r3
 8000b5a:	469a      	mov	sl, r3
 8000b5c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b5e:	0274      	lsls	r4, r6, #9
 8000b60:	0073      	lsls	r3, r6, #1
 8000b62:	0a64      	lsrs	r4, r4, #9
 8000b64:	0e1b      	lsrs	r3, r3, #24
 8000b66:	0ff6      	lsrs	r6, r6, #31
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d020      	beq.n	8000bae <__aeabi_fdiv+0x7e>
 8000b6c:	2bff      	cmp	r3, #255	@ 0xff
 8000b6e:	d043      	beq.n	8000bf8 <__aeabi_fdiv+0xc8>
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	2000      	movs	r0, #0
 8000b74:	00e4      	lsls	r4, r4, #3
 8000b76:	04d2      	lsls	r2, r2, #19
 8000b78:	4314      	orrs	r4, r2
 8000b7a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	1aff      	subs	r7, r7, r3
 8000b80:	464b      	mov	r3, r9
 8000b82:	4072      	eors	r2, r6
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d900      	bls.n	8000b8a <__aeabi_fdiv+0x5a>
 8000b88:	e09d      	b.n	8000cc6 <__aeabi_fdiv+0x196>
 8000b8a:	4971      	ldr	r1, [pc, #452]	@ (8000d50 <__aeabi_fdiv+0x220>)
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	58cb      	ldr	r3, [r1, r3]
 8000b90:	469f      	mov	pc, r3
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d15a      	bne.n	8000c4c <__aeabi_fdiv+0x11c>
 8000b96:	2308      	movs	r3, #8
 8000b98:	4699      	mov	r9, r3
 8000b9a:	3b06      	subs	r3, #6
 8000b9c:	0274      	lsls	r4, r6, #9
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	0073      	lsls	r3, r6, #1
 8000ba2:	27ff      	movs	r7, #255	@ 0xff
 8000ba4:	0a64      	lsrs	r4, r4, #9
 8000ba6:	0e1b      	lsrs	r3, r3, #24
 8000ba8:	0ff6      	lsrs	r6, r6, #31
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1de      	bne.n	8000b6c <__aeabi_fdiv+0x3c>
 8000bae:	2c00      	cmp	r4, #0
 8000bb0:	d13b      	bne.n	8000c2a <__aeabi_fdiv+0xfa>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4642      	mov	r2, r8
 8000bb6:	4649      	mov	r1, r9
 8000bb8:	4072      	eors	r2, r6
 8000bba:	4319      	orrs	r1, r3
 8000bbc:	290e      	cmp	r1, #14
 8000bbe:	d818      	bhi.n	8000bf2 <__aeabi_fdiv+0xc2>
 8000bc0:	4864      	ldr	r0, [pc, #400]	@ (8000d54 <__aeabi_fdiv+0x224>)
 8000bc2:	0089      	lsls	r1, r1, #2
 8000bc4:	5841      	ldr	r1, [r0, r1]
 8000bc6:	468f      	mov	pc, r1
 8000bc8:	4653      	mov	r3, sl
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fdiv+0xa0>
 8000bce:	e0b8      	b.n	8000d42 <__aeabi_fdiv+0x212>
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d06e      	beq.n	8000cb2 <__aeabi_fdiv+0x182>
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	002c      	movs	r4, r5
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d140      	bne.n	8000c5e <__aeabi_fdiv+0x12e>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2400      	movs	r4, #0
 8000be0:	05c0      	lsls	r0, r0, #23
 8000be2:	4320      	orrs	r0, r4
 8000be4:	07d2      	lsls	r2, r2, #31
 8000be6:	4310      	orrs	r0, r2
 8000be8:	bce0      	pop	{r5, r6, r7}
 8000bea:	46ba      	mov	sl, r7
 8000bec:	46b1      	mov	r9, r6
 8000bee:	46a8      	mov	r8, r5
 8000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf2:	20ff      	movs	r0, #255	@ 0xff
 8000bf4:	2400      	movs	r4, #0
 8000bf6:	e7f3      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000bf8:	2c00      	cmp	r4, #0
 8000bfa:	d120      	bne.n	8000c3e <__aeabi_fdiv+0x10e>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	3fff      	subs	r7, #255	@ 0xff
 8000c00:	e7d8      	b.n	8000bb4 <__aeabi_fdiv+0x84>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d105      	bne.n	8000c12 <__aeabi_fdiv+0xe2>
 8000c06:	2304      	movs	r3, #4
 8000c08:	4699      	mov	r9, r3
 8000c0a:	3b03      	subs	r3, #3
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	469a      	mov	sl, r3
 8000c10:	e7a5      	b.n	8000b5e <__aeabi_fdiv+0x2e>
 8000c12:	0028      	movs	r0, r5
 8000c14:	f002 fd88 	bl	8003728 <__clzsi2>
 8000c18:	2776      	movs	r7, #118	@ 0x76
 8000c1a:	1f43      	subs	r3, r0, #5
 8000c1c:	409d      	lsls	r5, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	427f      	negs	r7, r7
 8000c22:	4699      	mov	r9, r3
 8000c24:	469a      	mov	sl, r3
 8000c26:	1a3f      	subs	r7, r7, r0
 8000c28:	e799      	b.n	8000b5e <__aeabi_fdiv+0x2e>
 8000c2a:	0020      	movs	r0, r4
 8000c2c:	f002 fd7c 	bl	8003728 <__clzsi2>
 8000c30:	1f43      	subs	r3, r0, #5
 8000c32:	409c      	lsls	r4, r3
 8000c34:	2376      	movs	r3, #118	@ 0x76
 8000c36:	425b      	negs	r3, r3
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	e79e      	b.n	8000b7c <__aeabi_fdiv+0x4c>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	464a      	mov	r2, r9
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4691      	mov	r9, r2
 8000c46:	2003      	movs	r0, #3
 8000c48:	33fc      	adds	r3, #252	@ 0xfc
 8000c4a:	e797      	b.n	8000b7c <__aeabi_fdiv+0x4c>
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	4699      	mov	r9, r3
 8000c50:	3b09      	subs	r3, #9
 8000c52:	27ff      	movs	r7, #255	@ 0xff
 8000c54:	469a      	mov	sl, r3
 8000c56:	e782      	b.n	8000b5e <__aeabi_fdiv+0x2e>
 8000c58:	2803      	cmp	r0, #3
 8000c5a:	d02c      	beq.n	8000cb6 <__aeabi_fdiv+0x186>
 8000c5c:	0032      	movs	r2, r6
 8000c5e:	0038      	movs	r0, r7
 8000c60:	307f      	adds	r0, #127	@ 0x7f
 8000c62:	2800      	cmp	r0, #0
 8000c64:	dd47      	ble.n	8000cf6 <__aeabi_fdiv+0x1c6>
 8000c66:	0763      	lsls	r3, r4, #29
 8000c68:	d004      	beq.n	8000c74 <__aeabi_fdiv+0x144>
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	4023      	ands	r3, r4
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fdiv+0x144>
 8000c72:	3404      	adds	r4, #4
 8000c74:	0123      	lsls	r3, r4, #4
 8000c76:	d503      	bpl.n	8000c80 <__aeabi_fdiv+0x150>
 8000c78:	0038      	movs	r0, r7
 8000c7a:	4b37      	ldr	r3, [pc, #220]	@ (8000d58 <__aeabi_fdiv+0x228>)
 8000c7c:	3080      	adds	r0, #128	@ 0x80
 8000c7e:	401c      	ands	r4, r3
 8000c80:	28fe      	cmp	r0, #254	@ 0xfe
 8000c82:	dcb6      	bgt.n	8000bf2 <__aeabi_fdiv+0xc2>
 8000c84:	01a4      	lsls	r4, r4, #6
 8000c86:	0a64      	lsrs	r4, r4, #9
 8000c88:	b2c0      	uxtb	r0, r0
 8000c8a:	e7a9      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000c8c:	2480      	movs	r4, #128	@ 0x80
 8000c8e:	2200      	movs	r2, #0
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	03e4      	lsls	r4, r4, #15
 8000c94:	e7a4      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	03db      	lsls	r3, r3, #15
 8000c9a:	421d      	tst	r5, r3
 8000c9c:	d001      	beq.n	8000ca2 <__aeabi_fdiv+0x172>
 8000c9e:	421c      	tst	r4, r3
 8000ca0:	d00b      	beq.n	8000cba <__aeabi_fdiv+0x18a>
 8000ca2:	2480      	movs	r4, #128	@ 0x80
 8000ca4:	03e4      	lsls	r4, r4, #15
 8000ca6:	432c      	orrs	r4, r5
 8000ca8:	0264      	lsls	r4, r4, #9
 8000caa:	4642      	mov	r2, r8
 8000cac:	20ff      	movs	r0, #255	@ 0xff
 8000cae:	0a64      	lsrs	r4, r4, #9
 8000cb0:	e796      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000cb2:	4646      	mov	r6, r8
 8000cb4:	002c      	movs	r4, r5
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	03db      	lsls	r3, r3, #15
 8000cba:	431c      	orrs	r4, r3
 8000cbc:	0264      	lsls	r4, r4, #9
 8000cbe:	0032      	movs	r2, r6
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	0a64      	lsrs	r4, r4, #9
 8000cc4:	e78c      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000cc6:	016d      	lsls	r5, r5, #5
 8000cc8:	0160      	lsls	r0, r4, #5
 8000cca:	4285      	cmp	r5, r0
 8000ccc:	d22d      	bcs.n	8000d2a <__aeabi_fdiv+0x1fa>
 8000cce:	231b      	movs	r3, #27
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	3f01      	subs	r7, #1
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	0029      	movs	r1, r5
 8000cd8:	0064      	lsls	r4, r4, #1
 8000cda:	006d      	lsls	r5, r5, #1
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	db01      	blt.n	8000ce4 <__aeabi_fdiv+0x1b4>
 8000ce0:	4285      	cmp	r5, r0
 8000ce2:	d301      	bcc.n	8000ce8 <__aeabi_fdiv+0x1b8>
 8000ce4:	1a2d      	subs	r5, r5, r0
 8000ce6:	4334      	orrs	r4, r6
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f3      	bne.n	8000cd6 <__aeabi_fdiv+0x1a6>
 8000cee:	1e6b      	subs	r3, r5, #1
 8000cf0:	419d      	sbcs	r5, r3
 8000cf2:	432c      	orrs	r4, r5
 8000cf4:	e7b3      	b.n	8000c5e <__aeabi_fdiv+0x12e>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	1a1b      	subs	r3, r3, r0
 8000cfa:	2b1b      	cmp	r3, #27
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_fdiv+0x1d0>
 8000cfe:	e76d      	b.n	8000bdc <__aeabi_fdiv+0xac>
 8000d00:	0021      	movs	r1, r4
 8000d02:	379e      	adds	r7, #158	@ 0x9e
 8000d04:	40d9      	lsrs	r1, r3
 8000d06:	40bc      	lsls	r4, r7
 8000d08:	000b      	movs	r3, r1
 8000d0a:	1e61      	subs	r1, r4, #1
 8000d0c:	418c      	sbcs	r4, r1
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	0759      	lsls	r1, r3, #29
 8000d12:	d004      	beq.n	8000d1e <__aeabi_fdiv+0x1ee>
 8000d14:	210f      	movs	r1, #15
 8000d16:	4019      	ands	r1, r3
 8000d18:	2904      	cmp	r1, #4
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fdiv+0x1ee>
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	0159      	lsls	r1, r3, #5
 8000d20:	d413      	bmi.n	8000d4a <__aeabi_fdiv+0x21a>
 8000d22:	019b      	lsls	r3, r3, #6
 8000d24:	2000      	movs	r0, #0
 8000d26:	0a5c      	lsrs	r4, r3, #9
 8000d28:	e75a      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d2a:	231a      	movs	r3, #26
 8000d2c:	2401      	movs	r4, #1
 8000d2e:	1a2d      	subs	r5, r5, r0
 8000d30:	e7d0      	b.n	8000cd4 <__aeabi_fdiv+0x1a4>
 8000d32:	1e98      	subs	r0, r3, #2
 8000d34:	4243      	negs	r3, r0
 8000d36:	4158      	adcs	r0, r3
 8000d38:	4240      	negs	r0, r0
 8000d3a:	0032      	movs	r2, r6
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	b2c0      	uxtb	r0, r0
 8000d40:	e74e      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d42:	4642      	mov	r2, r8
 8000d44:	20ff      	movs	r0, #255	@ 0xff
 8000d46:	2400      	movs	r4, #0
 8000d48:	e74a      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	e747      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d50:	0800d22c 	.word	0x0800d22c
 8000d54:	0800d26c 	.word	0x0800d26c
 8000d58:	f7ffffff 	.word	0xf7ffffff

08000d5c <__eqsf2>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	0042      	lsls	r2, r0, #1
 8000d60:	024e      	lsls	r6, r1, #9
 8000d62:	004c      	lsls	r4, r1, #1
 8000d64:	0245      	lsls	r5, r0, #9
 8000d66:	0a6d      	lsrs	r5, r5, #9
 8000d68:	0e12      	lsrs	r2, r2, #24
 8000d6a:	0fc3      	lsrs	r3, r0, #31
 8000d6c:	0a76      	lsrs	r6, r6, #9
 8000d6e:	0e24      	lsrs	r4, r4, #24
 8000d70:	0fc9      	lsrs	r1, r1, #31
 8000d72:	2aff      	cmp	r2, #255	@ 0xff
 8000d74:	d010      	beq.n	8000d98 <__eqsf2+0x3c>
 8000d76:	2cff      	cmp	r4, #255	@ 0xff
 8000d78:	d00c      	beq.n	8000d94 <__eqsf2+0x38>
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	42a2      	cmp	r2, r4
 8000d7e:	d10a      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d80:	42b5      	cmp	r5, r6
 8000d82:	d108      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d00f      	beq.n	8000da8 <__eqsf2+0x4c>
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	d104      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d8c:	0028      	movs	r0, r5
 8000d8e:	1e43      	subs	r3, r0, #1
 8000d90:	4198      	sbcs	r0, r3
 8000d92:	e000      	b.n	8000d96 <__eqsf2+0x3a>
 8000d94:	2001      	movs	r0, #1
 8000d96:	bd70      	pop	{r4, r5, r6, pc}
 8000d98:	2001      	movs	r0, #1
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d1fb      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d9e:	4335      	orrs	r5, r6
 8000da0:	d1f9      	bne.n	8000d96 <__eqsf2+0x3a>
 8000da2:	404b      	eors	r3, r1
 8000da4:	0018      	movs	r0, r3
 8000da6:	e7f6      	b.n	8000d96 <__eqsf2+0x3a>
 8000da8:	2000      	movs	r0, #0
 8000daa:	e7f4      	b.n	8000d96 <__eqsf2+0x3a>

08000dac <__gesf2>:
 8000dac:	b530      	push	{r4, r5, lr}
 8000dae:	0042      	lsls	r2, r0, #1
 8000db0:	0244      	lsls	r4, r0, #9
 8000db2:	024d      	lsls	r5, r1, #9
 8000db4:	0fc3      	lsrs	r3, r0, #31
 8000db6:	0048      	lsls	r0, r1, #1
 8000db8:	0a64      	lsrs	r4, r4, #9
 8000dba:	0e12      	lsrs	r2, r2, #24
 8000dbc:	0a6d      	lsrs	r5, r5, #9
 8000dbe:	0e00      	lsrs	r0, r0, #24
 8000dc0:	0fc9      	lsrs	r1, r1, #31
 8000dc2:	2aff      	cmp	r2, #255	@ 0xff
 8000dc4:	d018      	beq.n	8000df8 <__gesf2+0x4c>
 8000dc6:	28ff      	cmp	r0, #255	@ 0xff
 8000dc8:	d00a      	beq.n	8000de0 <__gesf2+0x34>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d11e      	bne.n	8000e0c <__gesf2+0x60>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d10a      	bne.n	8000de8 <__gesf2+0x3c>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d029      	beq.n	8000e2a <__gesf2+0x7e>
 8000dd6:	2c00      	cmp	r4, #0
 8000dd8:	d12d      	bne.n	8000e36 <__gesf2+0x8a>
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	3801      	subs	r0, #1
 8000dde:	bd30      	pop	{r4, r5, pc}
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d125      	bne.n	8000e30 <__gesf2+0x84>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d101      	bne.n	8000dec <__gesf2+0x40>
 8000de8:	2c00      	cmp	r4, #0
 8000dea:	d0f6      	beq.n	8000dda <__gesf2+0x2e>
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d019      	beq.n	8000e24 <__gesf2+0x78>
 8000df0:	2001      	movs	r0, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	4318      	orrs	r0, r3
 8000df6:	e7f2      	b.n	8000dde <__gesf2+0x32>
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d119      	bne.n	8000e30 <__gesf2+0x84>
 8000dfc:	28ff      	cmp	r0, #255	@ 0xff
 8000dfe:	d1f7      	bne.n	8000df0 <__gesf2+0x44>
 8000e00:	2d00      	cmp	r5, #0
 8000e02:	d115      	bne.n	8000e30 <__gesf2+0x84>
 8000e04:	2000      	movs	r0, #0
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d1f2      	bne.n	8000df0 <__gesf2+0x44>
 8000e0a:	e7e8      	b.n	8000dde <__gesf2+0x32>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d0ef      	beq.n	8000df0 <__gesf2+0x44>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d1ed      	bne.n	8000df0 <__gesf2+0x44>
 8000e14:	4282      	cmp	r2, r0
 8000e16:	dceb      	bgt.n	8000df0 <__gesf2+0x44>
 8000e18:	db04      	blt.n	8000e24 <__gesf2+0x78>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d8e8      	bhi.n	8000df0 <__gesf2+0x44>
 8000e1e:	2000      	movs	r0, #0
 8000e20:	42ac      	cmp	r4, r5
 8000e22:	d2dc      	bcs.n	8000dde <__gesf2+0x32>
 8000e24:	0058      	lsls	r0, r3, #1
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7d9      	b.n	8000dde <__gesf2+0x32>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d0d7      	beq.n	8000dde <__gesf2+0x32>
 8000e2e:	e7df      	b.n	8000df0 <__gesf2+0x44>
 8000e30:	2002      	movs	r0, #2
 8000e32:	4240      	negs	r0, r0
 8000e34:	e7d3      	b.n	8000dde <__gesf2+0x32>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d1da      	bne.n	8000df0 <__gesf2+0x44>
 8000e3a:	e7ee      	b.n	8000e1a <__gesf2+0x6e>

08000e3c <__lesf2>:
 8000e3c:	b530      	push	{r4, r5, lr}
 8000e3e:	0042      	lsls	r2, r0, #1
 8000e40:	0244      	lsls	r4, r0, #9
 8000e42:	024d      	lsls	r5, r1, #9
 8000e44:	0fc3      	lsrs	r3, r0, #31
 8000e46:	0048      	lsls	r0, r1, #1
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	0e12      	lsrs	r2, r2, #24
 8000e4c:	0a6d      	lsrs	r5, r5, #9
 8000e4e:	0e00      	lsrs	r0, r0, #24
 8000e50:	0fc9      	lsrs	r1, r1, #31
 8000e52:	2aff      	cmp	r2, #255	@ 0xff
 8000e54:	d017      	beq.n	8000e86 <__lesf2+0x4a>
 8000e56:	28ff      	cmp	r0, #255	@ 0xff
 8000e58:	d00a      	beq.n	8000e70 <__lesf2+0x34>
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	d11b      	bne.n	8000e96 <__lesf2+0x5a>
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d10a      	bne.n	8000e78 <__lesf2+0x3c>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d01d      	beq.n	8000ea2 <__lesf2+0x66>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d12d      	bne.n	8000ec6 <__lesf2+0x8a>
 8000e6a:	0048      	lsls	r0, r1, #1
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e011      	b.n	8000e94 <__lesf2+0x58>
 8000e70:	2d00      	cmp	r5, #0
 8000e72:	d10e      	bne.n	8000e92 <__lesf2+0x56>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d101      	bne.n	8000e7c <__lesf2+0x40>
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d0f6      	beq.n	8000e6a <__lesf2+0x2e>
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d10c      	bne.n	8000e9a <__lesf2+0x5e>
 8000e80:	0058      	lsls	r0, r3, #1
 8000e82:	3801      	subs	r0, #1
 8000e84:	e006      	b.n	8000e94 <__lesf2+0x58>
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d103      	bne.n	8000e92 <__lesf2+0x56>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d105      	bne.n	8000e9a <__lesf2+0x5e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d015      	beq.n	8000ebe <__lesf2+0x82>
 8000e92:	2002      	movs	r0, #2
 8000e94:	bd30      	pop	{r4, r5, pc}
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d106      	bne.n	8000ea8 <__lesf2+0x6c>
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	4318      	orrs	r0, r3
 8000ea0:	e7f8      	b.n	8000e94 <__lesf2+0x58>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f6      	beq.n	8000e94 <__lesf2+0x58>
 8000ea6:	e7f8      	b.n	8000e9a <__lesf2+0x5e>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1f6      	bne.n	8000e9a <__lesf2+0x5e>
 8000eac:	4282      	cmp	r2, r0
 8000eae:	dcf4      	bgt.n	8000e9a <__lesf2+0x5e>
 8000eb0:	dbe6      	blt.n	8000e80 <__lesf2+0x44>
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d8f1      	bhi.n	8000e9a <__lesf2+0x5e>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	42ac      	cmp	r4, r5
 8000eba:	d2eb      	bcs.n	8000e94 <__lesf2+0x58>
 8000ebc:	e7e0      	b.n	8000e80 <__lesf2+0x44>
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d1ea      	bne.n	8000e9a <__lesf2+0x5e>
 8000ec4:	e7e6      	b.n	8000e94 <__lesf2+0x58>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d1e7      	bne.n	8000e9a <__lesf2+0x5e>
 8000eca:	e7f2      	b.n	8000eb2 <__lesf2+0x76>

08000ecc <__aeabi_fmul>:
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	464f      	mov	r7, r9
 8000ed0:	4646      	mov	r6, r8
 8000ed2:	46d6      	mov	lr, sl
 8000ed4:	0044      	lsls	r4, r0, #1
 8000ed6:	b5c0      	push	{r6, r7, lr}
 8000ed8:	0246      	lsls	r6, r0, #9
 8000eda:	1c0f      	adds	r7, r1, #0
 8000edc:	0a76      	lsrs	r6, r6, #9
 8000ede:	0e24      	lsrs	r4, r4, #24
 8000ee0:	0fc5      	lsrs	r5, r0, #31
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fmul+0x1c>
 8000ee6:	e0da      	b.n	800109e <__aeabi_fmul+0x1d2>
 8000ee8:	2cff      	cmp	r4, #255	@ 0xff
 8000eea:	d074      	beq.n	8000fd6 <__aeabi_fmul+0x10a>
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	00f6      	lsls	r6, r6, #3
 8000ef0:	04db      	lsls	r3, r3, #19
 8000ef2:	431e      	orrs	r6, r3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	469a      	mov	sl, r3
 8000efa:	3c7f      	subs	r4, #127	@ 0x7f
 8000efc:	027b      	lsls	r3, r7, #9
 8000efe:	0a5b      	lsrs	r3, r3, #9
 8000f00:	4698      	mov	r8, r3
 8000f02:	007b      	lsls	r3, r7, #1
 8000f04:	0e1b      	lsrs	r3, r3, #24
 8000f06:	0fff      	lsrs	r7, r7, #31
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d074      	beq.n	8000ff6 <__aeabi_fmul+0x12a>
 8000f0c:	2bff      	cmp	r3, #255	@ 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fmul+0x46>
 8000f10:	e08e      	b.n	8001030 <__aeabi_fmul+0x164>
 8000f12:	4642      	mov	r2, r8
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	00d2      	lsls	r2, r2, #3
 8000f18:	04c9      	lsls	r1, r1, #19
 8000f1a:	4311      	orrs	r1, r2
 8000f1c:	3b7f      	subs	r3, #127	@ 0x7f
 8000f1e:	002a      	movs	r2, r5
 8000f20:	18e4      	adds	r4, r4, r3
 8000f22:	464b      	mov	r3, r9
 8000f24:	407a      	eors	r2, r7
 8000f26:	4688      	mov	r8, r1
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	dc75      	bgt.n	800101a <__aeabi_fmul+0x14e>
 8000f2e:	464b      	mov	r3, r9
 8000f30:	2000      	movs	r0, #0
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	dd0f      	ble.n	8000f56 <__aeabi_fmul+0x8a>
 8000f36:	4649      	mov	r1, r9
 8000f38:	2301      	movs	r3, #1
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	21a6      	movs	r1, #166	@ 0xa6
 8000f3e:	00c9      	lsls	r1, r1, #3
 8000f40:	420b      	tst	r3, r1
 8000f42:	d169      	bne.n	8001018 <__aeabi_fmul+0x14c>
 8000f44:	2190      	movs	r1, #144	@ 0x90
 8000f46:	0089      	lsls	r1, r1, #2
 8000f48:	420b      	tst	r3, r1
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fmul+0x82>
 8000f4c:	e100      	b.n	8001150 <__aeabi_fmul+0x284>
 8000f4e:	2188      	movs	r1, #136	@ 0x88
 8000f50:	4219      	tst	r1, r3
 8000f52:	d000      	beq.n	8000f56 <__aeabi_fmul+0x8a>
 8000f54:	e0f5      	b.n	8001142 <__aeabi_fmul+0x276>
 8000f56:	4641      	mov	r1, r8
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c09      	lsrs	r1, r1, #16
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	0008      	movs	r0, r1
 8000f60:	0c35      	lsrs	r5, r6, #16
 8000f62:	0436      	lsls	r6, r6, #16
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	0c36      	lsrs	r6, r6, #16
 8000f68:	4370      	muls	r0, r6
 8000f6a:	4369      	muls	r1, r5
 8000f6c:	435e      	muls	r6, r3
 8000f6e:	435d      	muls	r5, r3
 8000f70:	1876      	adds	r6, r6, r1
 8000f72:	0c03      	lsrs	r3, r0, #16
 8000f74:	199b      	adds	r3, r3, r6
 8000f76:	4299      	cmp	r1, r3
 8000f78:	d903      	bls.n	8000f82 <__aeabi_fmul+0xb6>
 8000f7a:	2180      	movs	r1, #128	@ 0x80
 8000f7c:	0249      	lsls	r1, r1, #9
 8000f7e:	468c      	mov	ip, r1
 8000f80:	4465      	add	r5, ip
 8000f82:	0400      	lsls	r0, r0, #16
 8000f84:	0419      	lsls	r1, r3, #16
 8000f86:	0c00      	lsrs	r0, r0, #16
 8000f88:	1809      	adds	r1, r1, r0
 8000f8a:	018e      	lsls	r6, r1, #6
 8000f8c:	1e70      	subs	r0, r6, #1
 8000f8e:	4186      	sbcs	r6, r0
 8000f90:	0c1b      	lsrs	r3, r3, #16
 8000f92:	0e89      	lsrs	r1, r1, #26
 8000f94:	195b      	adds	r3, r3, r5
 8000f96:	430e      	orrs	r6, r1
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	d46c      	bmi.n	800107a <__aeabi_fmul+0x1ae>
 8000fa0:	0023      	movs	r3, r4
 8000fa2:	337f      	adds	r3, #127	@ 0x7f
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_fmul+0xde>
 8000fa8:	e0b1      	b.n	800110e <__aeabi_fmul+0x242>
 8000faa:	0015      	movs	r5, r2
 8000fac:	0771      	lsls	r1, r6, #29
 8000fae:	d00b      	beq.n	8000fc8 <__aeabi_fmul+0xfc>
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	4030      	ands	r0, r6
 8000fb6:	2804      	cmp	r0, #4
 8000fb8:	d006      	beq.n	8000fc8 <__aeabi_fmul+0xfc>
 8000fba:	3604      	adds	r6, #4
 8000fbc:	0132      	lsls	r2, r6, #4
 8000fbe:	d503      	bpl.n	8000fc8 <__aeabi_fmul+0xfc>
 8000fc0:	4b6e      	ldr	r3, [pc, #440]	@ (800117c <__aeabi_fmul+0x2b0>)
 8000fc2:	401e      	ands	r6, r3
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	3380      	adds	r3, #128	@ 0x80
 8000fc8:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fca:	dd00      	ble.n	8000fce <__aeabi_fmul+0x102>
 8000fcc:	e0bd      	b.n	800114a <__aeabi_fmul+0x27e>
 8000fce:	01b2      	lsls	r2, r6, #6
 8000fd0:	0a52      	lsrs	r2, r2, #9
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	e048      	b.n	8001068 <__aeabi_fmul+0x19c>
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fmul+0x110>
 8000fda:	e092      	b.n	8001102 <__aeabi_fmul+0x236>
 8000fdc:	2308      	movs	r3, #8
 8000fde:	4699      	mov	r9, r3
 8000fe0:	3b06      	subs	r3, #6
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	027b      	lsls	r3, r7, #9
 8000fe6:	0a5b      	lsrs	r3, r3, #9
 8000fe8:	4698      	mov	r8, r3
 8000fea:	007b      	lsls	r3, r7, #1
 8000fec:	24ff      	movs	r4, #255	@ 0xff
 8000fee:	0e1b      	lsrs	r3, r3, #24
 8000ff0:	0fff      	lsrs	r7, r7, #31
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d18a      	bne.n	8000f0c <__aeabi_fmul+0x40>
 8000ff6:	4642      	mov	r2, r8
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d164      	bne.n	80010c6 <__aeabi_fmul+0x1fa>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	3201      	adds	r2, #1
 8001000:	4311      	orrs	r1, r2
 8001002:	4689      	mov	r9, r1
 8001004:	290a      	cmp	r1, #10
 8001006:	dc08      	bgt.n	800101a <__aeabi_fmul+0x14e>
 8001008:	407d      	eors	r5, r7
 800100a:	2001      	movs	r0, #1
 800100c:	b2ea      	uxtb	r2, r5
 800100e:	2902      	cmp	r1, #2
 8001010:	dc91      	bgt.n	8000f36 <__aeabi_fmul+0x6a>
 8001012:	0015      	movs	r5, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e027      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001018:	0015      	movs	r5, r2
 800101a:	4653      	mov	r3, sl
 800101c:	2b02      	cmp	r3, #2
 800101e:	d100      	bne.n	8001022 <__aeabi_fmul+0x156>
 8001020:	e093      	b.n	800114a <__aeabi_fmul+0x27e>
 8001022:	2b03      	cmp	r3, #3
 8001024:	d01a      	beq.n	800105c <__aeabi_fmul+0x190>
 8001026:	2b01      	cmp	r3, #1
 8001028:	d12c      	bne.n	8001084 <__aeabi_fmul+0x1b8>
 800102a:	2300      	movs	r3, #0
 800102c:	2200      	movs	r2, #0
 800102e:	e01b      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001030:	4643      	mov	r3, r8
 8001032:	34ff      	adds	r4, #255	@ 0xff
 8001034:	2b00      	cmp	r3, #0
 8001036:	d055      	beq.n	80010e4 <__aeabi_fmul+0x218>
 8001038:	2103      	movs	r1, #3
 800103a:	464b      	mov	r3, r9
 800103c:	430b      	orrs	r3, r1
 800103e:	0019      	movs	r1, r3
 8001040:	2b0a      	cmp	r3, #10
 8001042:	dc00      	bgt.n	8001046 <__aeabi_fmul+0x17a>
 8001044:	e092      	b.n	800116c <__aeabi_fmul+0x2a0>
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d000      	beq.n	800104c <__aeabi_fmul+0x180>
 800104a:	e08c      	b.n	8001166 <__aeabi_fmul+0x29a>
 800104c:	2280      	movs	r2, #128	@ 0x80
 800104e:	03d2      	lsls	r2, r2, #15
 8001050:	4216      	tst	r6, r2
 8001052:	d003      	beq.n	800105c <__aeabi_fmul+0x190>
 8001054:	4643      	mov	r3, r8
 8001056:	4213      	tst	r3, r2
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x190>
 800105a:	e07d      	b.n	8001158 <__aeabi_fmul+0x28c>
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	03d2      	lsls	r2, r2, #15
 8001060:	4332      	orrs	r2, r6
 8001062:	0252      	lsls	r2, r2, #9
 8001064:	0a52      	lsrs	r2, r2, #9
 8001066:	23ff      	movs	r3, #255	@ 0xff
 8001068:	05d8      	lsls	r0, r3, #23
 800106a:	07ed      	lsls	r5, r5, #31
 800106c:	4310      	orrs	r0, r2
 800106e:	4328      	orrs	r0, r5
 8001070:	bce0      	pop	{r5, r6, r7}
 8001072:	46ba      	mov	sl, r7
 8001074:	46b1      	mov	r9, r6
 8001076:	46a8      	mov	r8, r5
 8001078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107a:	2301      	movs	r3, #1
 800107c:	0015      	movs	r5, r2
 800107e:	0871      	lsrs	r1, r6, #1
 8001080:	401e      	ands	r6, r3
 8001082:	430e      	orrs	r6, r1
 8001084:	0023      	movs	r3, r4
 8001086:	3380      	adds	r3, #128	@ 0x80
 8001088:	1c61      	adds	r1, r4, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	dd41      	ble.n	8001112 <__aeabi_fmul+0x246>
 800108e:	0772      	lsls	r2, r6, #29
 8001090:	d094      	beq.n	8000fbc <__aeabi_fmul+0xf0>
 8001092:	220f      	movs	r2, #15
 8001094:	4032      	ands	r2, r6
 8001096:	2a04      	cmp	r2, #4
 8001098:	d000      	beq.n	800109c <__aeabi_fmul+0x1d0>
 800109a:	e78e      	b.n	8000fba <__aeabi_fmul+0xee>
 800109c:	e78e      	b.n	8000fbc <__aeabi_fmul+0xf0>
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d105      	bne.n	80010ae <__aeabi_fmul+0x1e2>
 80010a2:	2304      	movs	r3, #4
 80010a4:	4699      	mov	r9, r3
 80010a6:	3b03      	subs	r3, #3
 80010a8:	2400      	movs	r4, #0
 80010aa:	469a      	mov	sl, r3
 80010ac:	e726      	b.n	8000efc <__aeabi_fmul+0x30>
 80010ae:	0030      	movs	r0, r6
 80010b0:	f002 fb3a 	bl	8003728 <__clzsi2>
 80010b4:	2476      	movs	r4, #118	@ 0x76
 80010b6:	1f43      	subs	r3, r0, #5
 80010b8:	409e      	lsls	r6, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	4264      	negs	r4, r4
 80010be:	4699      	mov	r9, r3
 80010c0:	469a      	mov	sl, r3
 80010c2:	1a24      	subs	r4, r4, r0
 80010c4:	e71a      	b.n	8000efc <__aeabi_fmul+0x30>
 80010c6:	4640      	mov	r0, r8
 80010c8:	f002 fb2e 	bl	8003728 <__clzsi2>
 80010cc:	464b      	mov	r3, r9
 80010ce:	1a24      	subs	r4, r4, r0
 80010d0:	3c76      	subs	r4, #118	@ 0x76
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	dca1      	bgt.n	800101a <__aeabi_fmul+0x14e>
 80010d6:	4643      	mov	r3, r8
 80010d8:	3805      	subs	r0, #5
 80010da:	4083      	lsls	r3, r0
 80010dc:	407d      	eors	r5, r7
 80010de:	4698      	mov	r8, r3
 80010e0:	b2ea      	uxtb	r2, r5
 80010e2:	e724      	b.n	8000f2e <__aeabi_fmul+0x62>
 80010e4:	464a      	mov	r2, r9
 80010e6:	3302      	adds	r3, #2
 80010e8:	4313      	orrs	r3, r2
 80010ea:	002a      	movs	r2, r5
 80010ec:	407a      	eors	r2, r7
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	2b0a      	cmp	r3, #10
 80010f2:	dc92      	bgt.n	800101a <__aeabi_fmul+0x14e>
 80010f4:	4649      	mov	r1, r9
 80010f6:	0015      	movs	r5, r2
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d026      	beq.n	800114a <__aeabi_fmul+0x27e>
 80010fc:	4699      	mov	r9, r3
 80010fe:	2002      	movs	r0, #2
 8001100:	e719      	b.n	8000f36 <__aeabi_fmul+0x6a>
 8001102:	230c      	movs	r3, #12
 8001104:	4699      	mov	r9, r3
 8001106:	3b09      	subs	r3, #9
 8001108:	24ff      	movs	r4, #255	@ 0xff
 800110a:	469a      	mov	sl, r3
 800110c:	e6f6      	b.n	8000efc <__aeabi_fmul+0x30>
 800110e:	0015      	movs	r5, r2
 8001110:	0021      	movs	r1, r4
 8001112:	2201      	movs	r2, #1
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b1b      	cmp	r3, #27
 8001118:	dd00      	ble.n	800111c <__aeabi_fmul+0x250>
 800111a:	e786      	b.n	800102a <__aeabi_fmul+0x15e>
 800111c:	319e      	adds	r1, #158	@ 0x9e
 800111e:	0032      	movs	r2, r6
 8001120:	408e      	lsls	r6, r1
 8001122:	40da      	lsrs	r2, r3
 8001124:	1e73      	subs	r3, r6, #1
 8001126:	419e      	sbcs	r6, r3
 8001128:	4332      	orrs	r2, r6
 800112a:	0753      	lsls	r3, r2, #29
 800112c:	d004      	beq.n	8001138 <__aeabi_fmul+0x26c>
 800112e:	230f      	movs	r3, #15
 8001130:	4013      	ands	r3, r2
 8001132:	2b04      	cmp	r3, #4
 8001134:	d000      	beq.n	8001138 <__aeabi_fmul+0x26c>
 8001136:	3204      	adds	r2, #4
 8001138:	0153      	lsls	r3, r2, #5
 800113a:	d510      	bpl.n	800115e <__aeabi_fmul+0x292>
 800113c:	2301      	movs	r3, #1
 800113e:	2200      	movs	r2, #0
 8001140:	e792      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001142:	003d      	movs	r5, r7
 8001144:	4646      	mov	r6, r8
 8001146:	4682      	mov	sl, r0
 8001148:	e767      	b.n	800101a <__aeabi_fmul+0x14e>
 800114a:	23ff      	movs	r3, #255	@ 0xff
 800114c:	2200      	movs	r2, #0
 800114e:	e78b      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	2500      	movs	r5, #0
 8001154:	03d2      	lsls	r2, r2, #15
 8001156:	e786      	b.n	8001066 <__aeabi_fmul+0x19a>
 8001158:	003d      	movs	r5, r7
 800115a:	431a      	orrs	r2, r3
 800115c:	e783      	b.n	8001066 <__aeabi_fmul+0x19a>
 800115e:	0192      	lsls	r2, r2, #6
 8001160:	2300      	movs	r3, #0
 8001162:	0a52      	lsrs	r2, r2, #9
 8001164:	e780      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001166:	003d      	movs	r5, r7
 8001168:	4646      	mov	r6, r8
 800116a:	e777      	b.n	800105c <__aeabi_fmul+0x190>
 800116c:	002a      	movs	r2, r5
 800116e:	2301      	movs	r3, #1
 8001170:	407a      	eors	r2, r7
 8001172:	408b      	lsls	r3, r1
 8001174:	2003      	movs	r0, #3
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	e6e9      	b.n	8000f4e <__aeabi_fmul+0x82>
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	f7ffffff 	.word	0xf7ffffff

08001180 <__aeabi_fsub>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	4647      	mov	r7, r8
 8001184:	46ce      	mov	lr, r9
 8001186:	0243      	lsls	r3, r0, #9
 8001188:	b580      	push	{r7, lr}
 800118a:	0a5f      	lsrs	r7, r3, #9
 800118c:	099b      	lsrs	r3, r3, #6
 800118e:	0045      	lsls	r5, r0, #1
 8001190:	004a      	lsls	r2, r1, #1
 8001192:	469c      	mov	ip, r3
 8001194:	024b      	lsls	r3, r1, #9
 8001196:	0fc4      	lsrs	r4, r0, #31
 8001198:	0fce      	lsrs	r6, r1, #31
 800119a:	0e2d      	lsrs	r5, r5, #24
 800119c:	0a58      	lsrs	r0, r3, #9
 800119e:	0e12      	lsrs	r2, r2, #24
 80011a0:	0999      	lsrs	r1, r3, #6
 80011a2:	2aff      	cmp	r2, #255	@ 0xff
 80011a4:	d06b      	beq.n	800127e <__aeabi_fsub+0xfe>
 80011a6:	2301      	movs	r3, #1
 80011a8:	405e      	eors	r6, r3
 80011aa:	1aab      	subs	r3, r5, r2
 80011ac:	42b4      	cmp	r4, r6
 80011ae:	d04b      	beq.n	8001248 <__aeabi_fsub+0xc8>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_fsub+0x36>
 80011b4:	e0ff      	b.n	80013b6 <__aeabi_fsub+0x236>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x3c>
 80011ba:	e088      	b.n	80012ce <__aeabi_fsub+0x14e>
 80011bc:	2dff      	cmp	r5, #255	@ 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x42>
 80011c0:	e0ef      	b.n	80013a2 <__aeabi_fsub+0x222>
 80011c2:	2280      	movs	r2, #128	@ 0x80
 80011c4:	04d2      	lsls	r2, r2, #19
 80011c6:	4311      	orrs	r1, r2
 80011c8:	2001      	movs	r0, #1
 80011ca:	2b1b      	cmp	r3, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0x60>
 80011ce:	0008      	movs	r0, r1
 80011d0:	2220      	movs	r2, #32
 80011d2:	40d8      	lsrs	r0, r3
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	4099      	lsls	r1, r3
 80011d8:	000b      	movs	r3, r1
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	4193      	sbcs	r3, r2
 80011de:	4318      	orrs	r0, r3
 80011e0:	4663      	mov	r3, ip
 80011e2:	1a1b      	subs	r3, r3, r0
 80011e4:	469c      	mov	ip, r3
 80011e6:	4663      	mov	r3, ip
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	d400      	bmi.n	80011ee <__aeabi_fsub+0x6e>
 80011ec:	e0cd      	b.n	800138a <__aeabi_fsub+0x20a>
 80011ee:	4663      	mov	r3, ip
 80011f0:	019f      	lsls	r7, r3, #6
 80011f2:	09bf      	lsrs	r7, r7, #6
 80011f4:	0038      	movs	r0, r7
 80011f6:	f002 fa97 	bl	8003728 <__clzsi2>
 80011fa:	003b      	movs	r3, r7
 80011fc:	3805      	subs	r0, #5
 80011fe:	4083      	lsls	r3, r0
 8001200:	4285      	cmp	r5, r0
 8001202:	dc00      	bgt.n	8001206 <__aeabi_fsub+0x86>
 8001204:	e0a2      	b.n	800134c <__aeabi_fsub+0x1cc>
 8001206:	4ab7      	ldr	r2, [pc, #732]	@ (80014e4 <__aeabi_fsub+0x364>)
 8001208:	1a2d      	subs	r5, r5, r0
 800120a:	401a      	ands	r2, r3
 800120c:	4694      	mov	ip, r2
 800120e:	075a      	lsls	r2, r3, #29
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x94>
 8001212:	e0c3      	b.n	800139c <__aeabi_fsub+0x21c>
 8001214:	220f      	movs	r2, #15
 8001216:	4013      	ands	r3, r2
 8001218:	2b04      	cmp	r3, #4
 800121a:	d100      	bne.n	800121e <__aeabi_fsub+0x9e>
 800121c:	e0be      	b.n	800139c <__aeabi_fsub+0x21c>
 800121e:	2304      	movs	r3, #4
 8001220:	4698      	mov	r8, r3
 8001222:	44c4      	add	ip, r8
 8001224:	4663      	mov	r3, ip
 8001226:	015b      	lsls	r3, r3, #5
 8001228:	d400      	bmi.n	800122c <__aeabi_fsub+0xac>
 800122a:	e0b7      	b.n	800139c <__aeabi_fsub+0x21c>
 800122c:	1c68      	adds	r0, r5, #1
 800122e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0xb4>
 8001232:	e0a5      	b.n	8001380 <__aeabi_fsub+0x200>
 8001234:	20ff      	movs	r0, #255	@ 0xff
 8001236:	2200      	movs	r2, #0
 8001238:	05c0      	lsls	r0, r0, #23
 800123a:	4310      	orrs	r0, r2
 800123c:	07e4      	lsls	r4, r4, #31
 800123e:	4320      	orrs	r0, r4
 8001240:	bcc0      	pop	{r6, r7}
 8001242:	46b9      	mov	r9, r7
 8001244:	46b0      	mov	r8, r6
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001248:	2b00      	cmp	r3, #0
 800124a:	dc00      	bgt.n	800124e <__aeabi_fsub+0xce>
 800124c:	e1eb      	b.n	8001626 <__aeabi_fsub+0x4a6>
 800124e:	2a00      	cmp	r2, #0
 8001250:	d046      	beq.n	80012e0 <__aeabi_fsub+0x160>
 8001252:	2dff      	cmp	r5, #255	@ 0xff
 8001254:	d100      	bne.n	8001258 <__aeabi_fsub+0xd8>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x222>
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	04d2      	lsls	r2, r2, #19
 800125c:	4311      	orrs	r1, r2
 800125e:	2b1b      	cmp	r3, #27
 8001260:	dc00      	bgt.n	8001264 <__aeabi_fsub+0xe4>
 8001262:	e0fb      	b.n	800145c <__aeabi_fsub+0x2dc>
 8001264:	2305      	movs	r3, #5
 8001266:	4698      	mov	r8, r3
 8001268:	002b      	movs	r3, r5
 800126a:	44c4      	add	ip, r8
 800126c:	4662      	mov	r2, ip
 800126e:	08d7      	lsrs	r7, r2, #3
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d100      	bne.n	8001276 <__aeabi_fsub+0xf6>
 8001274:	e095      	b.n	80013a2 <__aeabi_fsub+0x222>
 8001276:	027a      	lsls	r2, r7, #9
 8001278:	0a52      	lsrs	r2, r2, #9
 800127a:	b2d8      	uxtb	r0, r3
 800127c:	e7dc      	b.n	8001238 <__aeabi_fsub+0xb8>
 800127e:	002b      	movs	r3, r5
 8001280:	3bff      	subs	r3, #255	@ 0xff
 8001282:	4699      	mov	r9, r3
 8001284:	2900      	cmp	r1, #0
 8001286:	d118      	bne.n	80012ba <__aeabi_fsub+0x13a>
 8001288:	2301      	movs	r3, #1
 800128a:	405e      	eors	r6, r3
 800128c:	42b4      	cmp	r4, r6
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x112>
 8001290:	e0ca      	b.n	8001428 <__aeabi_fsub+0x2a8>
 8001292:	464b      	mov	r3, r9
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02d      	beq.n	80012f4 <__aeabi_fsub+0x174>
 8001298:	2d00      	cmp	r5, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x11e>
 800129c:	e13c      	b.n	8001518 <__aeabi_fsub+0x398>
 800129e:	23ff      	movs	r3, #255	@ 0xff
 80012a0:	4664      	mov	r4, ip
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x128>
 80012a6:	e15f      	b.n	8001568 <__aeabi_fsub+0x3e8>
 80012a8:	1e5d      	subs	r5, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_fsub+0x130>
 80012ae:	e174      	b.n	800159a <__aeabi_fsub+0x41a>
 80012b0:	0034      	movs	r4, r6
 80012b2:	2bff      	cmp	r3, #255	@ 0xff
 80012b4:	d074      	beq.n	80013a0 <__aeabi_fsub+0x220>
 80012b6:	002b      	movs	r3, r5
 80012b8:	e103      	b.n	80014c2 <__aeabi_fsub+0x342>
 80012ba:	42b4      	cmp	r4, r6
 80012bc:	d100      	bne.n	80012c0 <__aeabi_fsub+0x140>
 80012be:	e09c      	b.n	80013fa <__aeabi_fsub+0x27a>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d017      	beq.n	80012f4 <__aeabi_fsub+0x174>
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	d0ea      	beq.n	800129e <__aeabi_fsub+0x11e>
 80012c8:	0007      	movs	r7, r0
 80012ca:	0034      	movs	r4, r6
 80012cc:	e06c      	b.n	80013a8 <__aeabi_fsub+0x228>
 80012ce:	2900      	cmp	r1, #0
 80012d0:	d0cc      	beq.n	800126c <__aeabi_fsub+0xec>
 80012d2:	1e5a      	subs	r2, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d02b      	beq.n	8001330 <__aeabi_fsub+0x1b0>
 80012d8:	2bff      	cmp	r3, #255	@ 0xff
 80012da:	d062      	beq.n	80013a2 <__aeabi_fsub+0x222>
 80012dc:	0013      	movs	r3, r2
 80012de:	e773      	b.n	80011c8 <__aeabi_fsub+0x48>
 80012e0:	2900      	cmp	r1, #0
 80012e2:	d0c3      	beq.n	800126c <__aeabi_fsub+0xec>
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d100      	bne.n	80012ec <__aeabi_fsub+0x16c>
 80012ea:	e11e      	b.n	800152a <__aeabi_fsub+0x3aa>
 80012ec:	2bff      	cmp	r3, #255	@ 0xff
 80012ee:	d058      	beq.n	80013a2 <__aeabi_fsub+0x222>
 80012f0:	0013      	movs	r3, r2
 80012f2:	e7b4      	b.n	800125e <__aeabi_fsub+0xde>
 80012f4:	22fe      	movs	r2, #254	@ 0xfe
 80012f6:	1c6b      	adds	r3, r5, #1
 80012f8:	421a      	tst	r2, r3
 80012fa:	d10d      	bne.n	8001318 <__aeabi_fsub+0x198>
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d060      	beq.n	80013c2 <__aeabi_fsub+0x242>
 8001300:	4663      	mov	r3, ip
 8001302:	2b00      	cmp	r3, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_fsub+0x188>
 8001306:	e120      	b.n	800154a <__aeabi_fsub+0x3ca>
 8001308:	2900      	cmp	r1, #0
 800130a:	d000      	beq.n	800130e <__aeabi_fsub+0x18e>
 800130c:	e128      	b.n	8001560 <__aeabi_fsub+0x3e0>
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	2400      	movs	r4, #0
 8001312:	20ff      	movs	r0, #255	@ 0xff
 8001314:	03d2      	lsls	r2, r2, #15
 8001316:	e78f      	b.n	8001238 <__aeabi_fsub+0xb8>
 8001318:	4663      	mov	r3, ip
 800131a:	1a5f      	subs	r7, r3, r1
 800131c:	017b      	lsls	r3, r7, #5
 800131e:	d500      	bpl.n	8001322 <__aeabi_fsub+0x1a2>
 8001320:	e0fe      	b.n	8001520 <__aeabi_fsub+0x3a0>
 8001322:	2f00      	cmp	r7, #0
 8001324:	d000      	beq.n	8001328 <__aeabi_fsub+0x1a8>
 8001326:	e765      	b.n	80011f4 <__aeabi_fsub+0x74>
 8001328:	2400      	movs	r4, #0
 800132a:	2000      	movs	r0, #0
 800132c:	2200      	movs	r2, #0
 800132e:	e783      	b.n	8001238 <__aeabi_fsub+0xb8>
 8001330:	4663      	mov	r3, ip
 8001332:	1a59      	subs	r1, r3, r1
 8001334:	014b      	lsls	r3, r1, #5
 8001336:	d400      	bmi.n	800133a <__aeabi_fsub+0x1ba>
 8001338:	e119      	b.n	800156e <__aeabi_fsub+0x3ee>
 800133a:	018f      	lsls	r7, r1, #6
 800133c:	09bf      	lsrs	r7, r7, #6
 800133e:	0038      	movs	r0, r7
 8001340:	f002 f9f2 	bl	8003728 <__clzsi2>
 8001344:	003b      	movs	r3, r7
 8001346:	3805      	subs	r0, #5
 8001348:	4083      	lsls	r3, r0
 800134a:	2501      	movs	r5, #1
 800134c:	2220      	movs	r2, #32
 800134e:	1b40      	subs	r0, r0, r5
 8001350:	3001      	adds	r0, #1
 8001352:	1a12      	subs	r2, r2, r0
 8001354:	0019      	movs	r1, r3
 8001356:	4093      	lsls	r3, r2
 8001358:	40c1      	lsrs	r1, r0
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	4193      	sbcs	r3, r2
 800135e:	4319      	orrs	r1, r3
 8001360:	468c      	mov	ip, r1
 8001362:	1e0b      	subs	r3, r1, #0
 8001364:	d0e1      	beq.n	800132a <__aeabi_fsub+0x1aa>
 8001366:	075b      	lsls	r3, r3, #29
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x1ec>
 800136a:	e152      	b.n	8001612 <__aeabi_fsub+0x492>
 800136c:	230f      	movs	r3, #15
 800136e:	2500      	movs	r5, #0
 8001370:	400b      	ands	r3, r1
 8001372:	2b04      	cmp	r3, #4
 8001374:	d000      	beq.n	8001378 <__aeabi_fsub+0x1f8>
 8001376:	e752      	b.n	800121e <__aeabi_fsub+0x9e>
 8001378:	2001      	movs	r0, #1
 800137a:	014a      	lsls	r2, r1, #5
 800137c:	d400      	bmi.n	8001380 <__aeabi_fsub+0x200>
 800137e:	e092      	b.n	80014a6 <__aeabi_fsub+0x326>
 8001380:	b2c0      	uxtb	r0, r0
 8001382:	4663      	mov	r3, ip
 8001384:	019a      	lsls	r2, r3, #6
 8001386:	0a52      	lsrs	r2, r2, #9
 8001388:	e756      	b.n	8001238 <__aeabi_fsub+0xb8>
 800138a:	4663      	mov	r3, ip
 800138c:	075b      	lsls	r3, r3, #29
 800138e:	d005      	beq.n	800139c <__aeabi_fsub+0x21c>
 8001390:	230f      	movs	r3, #15
 8001392:	4662      	mov	r2, ip
 8001394:	4013      	ands	r3, r2
 8001396:	2b04      	cmp	r3, #4
 8001398:	d000      	beq.n	800139c <__aeabi_fsub+0x21c>
 800139a:	e740      	b.n	800121e <__aeabi_fsub+0x9e>
 800139c:	002b      	movs	r3, r5
 800139e:	e765      	b.n	800126c <__aeabi_fsub+0xec>
 80013a0:	0007      	movs	r7, r0
 80013a2:	2f00      	cmp	r7, #0
 80013a4:	d100      	bne.n	80013a8 <__aeabi_fsub+0x228>
 80013a6:	e745      	b.n	8001234 <__aeabi_fsub+0xb4>
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	03d2      	lsls	r2, r2, #15
 80013ac:	433a      	orrs	r2, r7
 80013ae:	0252      	lsls	r2, r2, #9
 80013b0:	20ff      	movs	r0, #255	@ 0xff
 80013b2:	0a52      	lsrs	r2, r2, #9
 80013b4:	e740      	b.n	8001238 <__aeabi_fsub+0xb8>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d179      	bne.n	80014ae <__aeabi_fsub+0x32e>
 80013ba:	22fe      	movs	r2, #254	@ 0xfe
 80013bc:	1c6b      	adds	r3, r5, #1
 80013be:	421a      	tst	r2, r3
 80013c0:	d1aa      	bne.n	8001318 <__aeabi_fsub+0x198>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_fsub+0x24a>
 80013c8:	e0f5      	b.n	80015b6 <__aeabi_fsub+0x436>
 80013ca:	2900      	cmp	r1, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_fsub+0x250>
 80013ce:	e0d1      	b.n	8001574 <__aeabi_fsub+0x3f4>
 80013d0:	1a5f      	subs	r7, r3, r1
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	04db      	lsls	r3, r3, #19
 80013d6:	421f      	tst	r7, r3
 80013d8:	d100      	bne.n	80013dc <__aeabi_fsub+0x25c>
 80013da:	e10e      	b.n	80015fa <__aeabi_fsub+0x47a>
 80013dc:	4662      	mov	r2, ip
 80013de:	2401      	movs	r4, #1
 80013e0:	1a8a      	subs	r2, r1, r2
 80013e2:	4694      	mov	ip, r2
 80013e4:	2000      	movs	r0, #0
 80013e6:	4034      	ands	r4, r6
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d100      	bne.n	80013ee <__aeabi_fsub+0x26e>
 80013ec:	e724      	b.n	8001238 <__aeabi_fsub+0xb8>
 80013ee:	2001      	movs	r0, #1
 80013f0:	421a      	tst	r2, r3
 80013f2:	d1c6      	bne.n	8001382 <__aeabi_fsub+0x202>
 80013f4:	2300      	movs	r3, #0
 80013f6:	08d7      	lsrs	r7, r2, #3
 80013f8:	e73d      	b.n	8001276 <__aeabi_fsub+0xf6>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d017      	beq.n	800142e <__aeabi_fsub+0x2ae>
 80013fe:	2d00      	cmp	r5, #0
 8001400:	d000      	beq.n	8001404 <__aeabi_fsub+0x284>
 8001402:	e0af      	b.n	8001564 <__aeabi_fsub+0x3e4>
 8001404:	23ff      	movs	r3, #255	@ 0xff
 8001406:	4665      	mov	r5, ip
 8001408:	2d00      	cmp	r5, #0
 800140a:	d100      	bne.n	800140e <__aeabi_fsub+0x28e>
 800140c:	e0ad      	b.n	800156a <__aeabi_fsub+0x3ea>
 800140e:	1e5e      	subs	r6, r3, #1
 8001410:	2b01      	cmp	r3, #1
 8001412:	d100      	bne.n	8001416 <__aeabi_fsub+0x296>
 8001414:	e089      	b.n	800152a <__aeabi_fsub+0x3aa>
 8001416:	2bff      	cmp	r3, #255	@ 0xff
 8001418:	d0c2      	beq.n	80013a0 <__aeabi_fsub+0x220>
 800141a:	2e1b      	cmp	r6, #27
 800141c:	dc00      	bgt.n	8001420 <__aeabi_fsub+0x2a0>
 800141e:	e0ab      	b.n	8001578 <__aeabi_fsub+0x3f8>
 8001420:	1d4b      	adds	r3, r1, #5
 8001422:	469c      	mov	ip, r3
 8001424:	0013      	movs	r3, r2
 8001426:	e721      	b.n	800126c <__aeabi_fsub+0xec>
 8001428:	464b      	mov	r3, r9
 800142a:	2b00      	cmp	r3, #0
 800142c:	d170      	bne.n	8001510 <__aeabi_fsub+0x390>
 800142e:	22fe      	movs	r2, #254	@ 0xfe
 8001430:	1c6b      	adds	r3, r5, #1
 8001432:	421a      	tst	r2, r3
 8001434:	d15e      	bne.n	80014f4 <__aeabi_fsub+0x374>
 8001436:	2d00      	cmp	r5, #0
 8001438:	d000      	beq.n	800143c <__aeabi_fsub+0x2bc>
 800143a:	e0c3      	b.n	80015c4 <__aeabi_fsub+0x444>
 800143c:	4663      	mov	r3, ip
 800143e:	2b00      	cmp	r3, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x2c4>
 8001442:	e0d0      	b.n	80015e6 <__aeabi_fsub+0x466>
 8001444:	2900      	cmp	r1, #0
 8001446:	d100      	bne.n	800144a <__aeabi_fsub+0x2ca>
 8001448:	e094      	b.n	8001574 <__aeabi_fsub+0x3f4>
 800144a:	000a      	movs	r2, r1
 800144c:	4462      	add	r2, ip
 800144e:	0153      	lsls	r3, r2, #5
 8001450:	d400      	bmi.n	8001454 <__aeabi_fsub+0x2d4>
 8001452:	e0d8      	b.n	8001606 <__aeabi_fsub+0x486>
 8001454:	0192      	lsls	r2, r2, #6
 8001456:	2001      	movs	r0, #1
 8001458:	0a52      	lsrs	r2, r2, #9
 800145a:	e6ed      	b.n	8001238 <__aeabi_fsub+0xb8>
 800145c:	0008      	movs	r0, r1
 800145e:	2220      	movs	r2, #32
 8001460:	40d8      	lsrs	r0, r3
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4099      	lsls	r1, r3
 8001466:	000b      	movs	r3, r1
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	4193      	sbcs	r3, r2
 800146c:	4303      	orrs	r3, r0
 800146e:	449c      	add	ip, r3
 8001470:	4663      	mov	r3, ip
 8001472:	015b      	lsls	r3, r3, #5
 8001474:	d589      	bpl.n	800138a <__aeabi_fsub+0x20a>
 8001476:	3501      	adds	r5, #1
 8001478:	2dff      	cmp	r5, #255	@ 0xff
 800147a:	d100      	bne.n	800147e <__aeabi_fsub+0x2fe>
 800147c:	e6da      	b.n	8001234 <__aeabi_fsub+0xb4>
 800147e:	4662      	mov	r2, ip
 8001480:	2301      	movs	r3, #1
 8001482:	4919      	ldr	r1, [pc, #100]	@ (80014e8 <__aeabi_fsub+0x368>)
 8001484:	4013      	ands	r3, r2
 8001486:	0852      	lsrs	r2, r2, #1
 8001488:	400a      	ands	r2, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	4694      	mov	ip, r2
 8001490:	075b      	lsls	r3, r3, #29
 8001492:	d004      	beq.n	800149e <__aeabi_fsub+0x31e>
 8001494:	230f      	movs	r3, #15
 8001496:	4013      	ands	r3, r2
 8001498:	2b04      	cmp	r3, #4
 800149a:	d000      	beq.n	800149e <__aeabi_fsub+0x31e>
 800149c:	e6bf      	b.n	800121e <__aeabi_fsub+0x9e>
 800149e:	4663      	mov	r3, ip
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	d500      	bpl.n	80014a6 <__aeabi_fsub+0x326>
 80014a4:	e6c2      	b.n	800122c <__aeabi_fsub+0xac>
 80014a6:	4663      	mov	r3, ip
 80014a8:	08df      	lsrs	r7, r3, #3
 80014aa:	002b      	movs	r3, r5
 80014ac:	e6e3      	b.n	8001276 <__aeabi_fsub+0xf6>
 80014ae:	1b53      	subs	r3, r2, r5
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_fsub+0x336>
 80014b4:	e6f4      	b.n	80012a0 <__aeabi_fsub+0x120>
 80014b6:	2080      	movs	r0, #128	@ 0x80
 80014b8:	4664      	mov	r4, ip
 80014ba:	04c0      	lsls	r0, r0, #19
 80014bc:	4304      	orrs	r4, r0
 80014be:	46a4      	mov	ip, r4
 80014c0:	0034      	movs	r4, r6
 80014c2:	2001      	movs	r0, #1
 80014c4:	2b1b      	cmp	r3, #27
 80014c6:	dc09      	bgt.n	80014dc <__aeabi_fsub+0x35c>
 80014c8:	2520      	movs	r5, #32
 80014ca:	4660      	mov	r0, ip
 80014cc:	40d8      	lsrs	r0, r3
 80014ce:	1aeb      	subs	r3, r5, r3
 80014d0:	4665      	mov	r5, ip
 80014d2:	409d      	lsls	r5, r3
 80014d4:	002b      	movs	r3, r5
 80014d6:	1e5d      	subs	r5, r3, #1
 80014d8:	41ab      	sbcs	r3, r5
 80014da:	4318      	orrs	r0, r3
 80014dc:	1a0b      	subs	r3, r1, r0
 80014de:	469c      	mov	ip, r3
 80014e0:	0015      	movs	r5, r2
 80014e2:	e680      	b.n	80011e6 <__aeabi_fsub+0x66>
 80014e4:	fbffffff 	.word	0xfbffffff
 80014e8:	7dffffff 	.word	0x7dffffff
 80014ec:	22fe      	movs	r2, #254	@ 0xfe
 80014ee:	1c6b      	adds	r3, r5, #1
 80014f0:	4213      	tst	r3, r2
 80014f2:	d0a3      	beq.n	800143c <__aeabi_fsub+0x2bc>
 80014f4:	2bff      	cmp	r3, #255	@ 0xff
 80014f6:	d100      	bne.n	80014fa <__aeabi_fsub+0x37a>
 80014f8:	e69c      	b.n	8001234 <__aeabi_fsub+0xb4>
 80014fa:	4461      	add	r1, ip
 80014fc:	0849      	lsrs	r1, r1, #1
 80014fe:	074a      	lsls	r2, r1, #29
 8001500:	d049      	beq.n	8001596 <__aeabi_fsub+0x416>
 8001502:	220f      	movs	r2, #15
 8001504:	400a      	ands	r2, r1
 8001506:	2a04      	cmp	r2, #4
 8001508:	d045      	beq.n	8001596 <__aeabi_fsub+0x416>
 800150a:	1d0a      	adds	r2, r1, #4
 800150c:	4694      	mov	ip, r2
 800150e:	e6ad      	b.n	800126c <__aeabi_fsub+0xec>
 8001510:	2d00      	cmp	r5, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x396>
 8001514:	e776      	b.n	8001404 <__aeabi_fsub+0x284>
 8001516:	e68d      	b.n	8001234 <__aeabi_fsub+0xb4>
 8001518:	0034      	movs	r4, r6
 800151a:	20ff      	movs	r0, #255	@ 0xff
 800151c:	2200      	movs	r2, #0
 800151e:	e68b      	b.n	8001238 <__aeabi_fsub+0xb8>
 8001520:	4663      	mov	r3, ip
 8001522:	2401      	movs	r4, #1
 8001524:	1acf      	subs	r7, r1, r3
 8001526:	4034      	ands	r4, r6
 8001528:	e664      	b.n	80011f4 <__aeabi_fsub+0x74>
 800152a:	4461      	add	r1, ip
 800152c:	014b      	lsls	r3, r1, #5
 800152e:	d56d      	bpl.n	800160c <__aeabi_fsub+0x48c>
 8001530:	0848      	lsrs	r0, r1, #1
 8001532:	4944      	ldr	r1, [pc, #272]	@ (8001644 <__aeabi_fsub+0x4c4>)
 8001534:	4001      	ands	r1, r0
 8001536:	0743      	lsls	r3, r0, #29
 8001538:	d02c      	beq.n	8001594 <__aeabi_fsub+0x414>
 800153a:	230f      	movs	r3, #15
 800153c:	4003      	ands	r3, r0
 800153e:	2b04      	cmp	r3, #4
 8001540:	d028      	beq.n	8001594 <__aeabi_fsub+0x414>
 8001542:	1d0b      	adds	r3, r1, #4
 8001544:	469c      	mov	ip, r3
 8001546:	2302      	movs	r3, #2
 8001548:	e690      	b.n	800126c <__aeabi_fsub+0xec>
 800154a:	2900      	cmp	r1, #0
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x3d0>
 800154e:	e72b      	b.n	80013a8 <__aeabi_fsub+0x228>
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	03db      	lsls	r3, r3, #15
 8001554:	429f      	cmp	r7, r3
 8001556:	d200      	bcs.n	800155a <__aeabi_fsub+0x3da>
 8001558:	e726      	b.n	80013a8 <__aeabi_fsub+0x228>
 800155a:	4298      	cmp	r0, r3
 800155c:	d300      	bcc.n	8001560 <__aeabi_fsub+0x3e0>
 800155e:	e723      	b.n	80013a8 <__aeabi_fsub+0x228>
 8001560:	2401      	movs	r4, #1
 8001562:	4034      	ands	r4, r6
 8001564:	0007      	movs	r7, r0
 8001566:	e71f      	b.n	80013a8 <__aeabi_fsub+0x228>
 8001568:	0034      	movs	r4, r6
 800156a:	468c      	mov	ip, r1
 800156c:	e67e      	b.n	800126c <__aeabi_fsub+0xec>
 800156e:	2301      	movs	r3, #1
 8001570:	08cf      	lsrs	r7, r1, #3
 8001572:	e680      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001574:	2300      	movs	r3, #0
 8001576:	e67e      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001578:	2020      	movs	r0, #32
 800157a:	4665      	mov	r5, ip
 800157c:	1b80      	subs	r0, r0, r6
 800157e:	4085      	lsls	r5, r0
 8001580:	4663      	mov	r3, ip
 8001582:	0028      	movs	r0, r5
 8001584:	40f3      	lsrs	r3, r6
 8001586:	1e45      	subs	r5, r0, #1
 8001588:	41a8      	sbcs	r0, r5
 800158a:	4303      	orrs	r3, r0
 800158c:	469c      	mov	ip, r3
 800158e:	0015      	movs	r5, r2
 8001590:	448c      	add	ip, r1
 8001592:	e76d      	b.n	8001470 <__aeabi_fsub+0x2f0>
 8001594:	2302      	movs	r3, #2
 8001596:	08cf      	lsrs	r7, r1, #3
 8001598:	e66d      	b.n	8001276 <__aeabi_fsub+0xf6>
 800159a:	1b0f      	subs	r7, r1, r4
 800159c:	017b      	lsls	r3, r7, #5
 800159e:	d528      	bpl.n	80015f2 <__aeabi_fsub+0x472>
 80015a0:	01bf      	lsls	r7, r7, #6
 80015a2:	09bf      	lsrs	r7, r7, #6
 80015a4:	0038      	movs	r0, r7
 80015a6:	f002 f8bf 	bl	8003728 <__clzsi2>
 80015aa:	003b      	movs	r3, r7
 80015ac:	3805      	subs	r0, #5
 80015ae:	4083      	lsls	r3, r0
 80015b0:	0034      	movs	r4, r6
 80015b2:	2501      	movs	r5, #1
 80015b4:	e6ca      	b.n	800134c <__aeabi_fsub+0x1cc>
 80015b6:	2900      	cmp	r1, #0
 80015b8:	d100      	bne.n	80015bc <__aeabi_fsub+0x43c>
 80015ba:	e6b5      	b.n	8001328 <__aeabi_fsub+0x1a8>
 80015bc:	2401      	movs	r4, #1
 80015be:	0007      	movs	r7, r0
 80015c0:	4034      	ands	r4, r6
 80015c2:	e658      	b.n	8001276 <__aeabi_fsub+0xf6>
 80015c4:	4663      	mov	r3, ip
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_fsub+0x44c>
 80015ca:	e6e9      	b.n	80013a0 <__aeabi_fsub+0x220>
 80015cc:	2900      	cmp	r1, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_fsub+0x452>
 80015d0:	e6ea      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	03db      	lsls	r3, r3, #15
 80015d6:	429f      	cmp	r7, r3
 80015d8:	d200      	bcs.n	80015dc <__aeabi_fsub+0x45c>
 80015da:	e6e5      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015dc:	4298      	cmp	r0, r3
 80015de:	d300      	bcc.n	80015e2 <__aeabi_fsub+0x462>
 80015e0:	e6e2      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015e2:	0007      	movs	r7, r0
 80015e4:	e6e0      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015e6:	2900      	cmp	r1, #0
 80015e8:	d100      	bne.n	80015ec <__aeabi_fsub+0x46c>
 80015ea:	e69e      	b.n	800132a <__aeabi_fsub+0x1aa>
 80015ec:	2300      	movs	r3, #0
 80015ee:	08cf      	lsrs	r7, r1, #3
 80015f0:	e641      	b.n	8001276 <__aeabi_fsub+0xf6>
 80015f2:	0034      	movs	r4, r6
 80015f4:	2301      	movs	r3, #1
 80015f6:	08ff      	lsrs	r7, r7, #3
 80015f8:	e63d      	b.n	8001276 <__aeabi_fsub+0xf6>
 80015fa:	2f00      	cmp	r7, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_fsub+0x480>
 80015fe:	e693      	b.n	8001328 <__aeabi_fsub+0x1a8>
 8001600:	2300      	movs	r3, #0
 8001602:	08ff      	lsrs	r7, r7, #3
 8001604:	e637      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001606:	2300      	movs	r3, #0
 8001608:	08d7      	lsrs	r7, r2, #3
 800160a:	e634      	b.n	8001276 <__aeabi_fsub+0xf6>
 800160c:	2301      	movs	r3, #1
 800160e:	08cf      	lsrs	r7, r1, #3
 8001610:	e631      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	000b      	movs	r3, r1
 8001616:	04d2      	lsls	r2, r2, #19
 8001618:	2001      	movs	r0, #1
 800161a:	4013      	ands	r3, r2
 800161c:	4211      	tst	r1, r2
 800161e:	d000      	beq.n	8001622 <__aeabi_fsub+0x4a2>
 8001620:	e6ae      	b.n	8001380 <__aeabi_fsub+0x200>
 8001622:	08cf      	lsrs	r7, r1, #3
 8001624:	e627      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d100      	bne.n	800162c <__aeabi_fsub+0x4ac>
 800162a:	e75f      	b.n	80014ec <__aeabi_fsub+0x36c>
 800162c:	1b56      	subs	r6, r2, r5
 800162e:	2d00      	cmp	r5, #0
 8001630:	d101      	bne.n	8001636 <__aeabi_fsub+0x4b6>
 8001632:	0033      	movs	r3, r6
 8001634:	e6e7      	b.n	8001406 <__aeabi_fsub+0x286>
 8001636:	2380      	movs	r3, #128	@ 0x80
 8001638:	4660      	mov	r0, ip
 800163a:	04db      	lsls	r3, r3, #19
 800163c:	4318      	orrs	r0, r3
 800163e:	4684      	mov	ip, r0
 8001640:	e6eb      	b.n	800141a <__aeabi_fsub+0x29a>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	7dffffff 	.word	0x7dffffff

08001648 <__aeabi_f2iz>:
 8001648:	0241      	lsls	r1, r0, #9
 800164a:	0042      	lsls	r2, r0, #1
 800164c:	0fc3      	lsrs	r3, r0, #31
 800164e:	0a49      	lsrs	r1, r1, #9
 8001650:	2000      	movs	r0, #0
 8001652:	0e12      	lsrs	r2, r2, #24
 8001654:	2a7e      	cmp	r2, #126	@ 0x7e
 8001656:	dd03      	ble.n	8001660 <__aeabi_f2iz+0x18>
 8001658:	2a9d      	cmp	r2, #157	@ 0x9d
 800165a:	dd02      	ble.n	8001662 <__aeabi_f2iz+0x1a>
 800165c:	4a09      	ldr	r2, [pc, #36]	@ (8001684 <__aeabi_f2iz+0x3c>)
 800165e:	1898      	adds	r0, r3, r2
 8001660:	4770      	bx	lr
 8001662:	2080      	movs	r0, #128	@ 0x80
 8001664:	0400      	lsls	r0, r0, #16
 8001666:	4301      	orrs	r1, r0
 8001668:	2a95      	cmp	r2, #149	@ 0x95
 800166a:	dc07      	bgt.n	800167c <__aeabi_f2iz+0x34>
 800166c:	2096      	movs	r0, #150	@ 0x96
 800166e:	1a82      	subs	r2, r0, r2
 8001670:	40d1      	lsrs	r1, r2
 8001672:	4248      	negs	r0, r1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f3      	bne.n	8001660 <__aeabi_f2iz+0x18>
 8001678:	0008      	movs	r0, r1
 800167a:	e7f1      	b.n	8001660 <__aeabi_f2iz+0x18>
 800167c:	3a96      	subs	r2, #150	@ 0x96
 800167e:	4091      	lsls	r1, r2
 8001680:	e7f7      	b.n	8001672 <__aeabi_f2iz+0x2a>
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	7fffffff 	.word	0x7fffffff

08001688 <__aeabi_i2f>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	2800      	cmp	r0, #0
 800168c:	d012      	beq.n	80016b4 <__aeabi_i2f+0x2c>
 800168e:	17c3      	asrs	r3, r0, #31
 8001690:	18c5      	adds	r5, r0, r3
 8001692:	405d      	eors	r5, r3
 8001694:	0fc4      	lsrs	r4, r0, #31
 8001696:	0028      	movs	r0, r5
 8001698:	f002 f846 	bl	8003728 <__clzsi2>
 800169c:	239e      	movs	r3, #158	@ 0x9e
 800169e:	1a1b      	subs	r3, r3, r0
 80016a0:	2b96      	cmp	r3, #150	@ 0x96
 80016a2:	dc0f      	bgt.n	80016c4 <__aeabi_i2f+0x3c>
 80016a4:	2808      	cmp	r0, #8
 80016a6:	d038      	beq.n	800171a <__aeabi_i2f+0x92>
 80016a8:	3808      	subs	r0, #8
 80016aa:	4085      	lsls	r5, r0
 80016ac:	026d      	lsls	r5, r5, #9
 80016ae:	0a6d      	lsrs	r5, r5, #9
 80016b0:	b2d8      	uxtb	r0, r3
 80016b2:	e002      	b.n	80016ba <__aeabi_i2f+0x32>
 80016b4:	2400      	movs	r4, #0
 80016b6:	2000      	movs	r0, #0
 80016b8:	2500      	movs	r5, #0
 80016ba:	05c0      	lsls	r0, r0, #23
 80016bc:	4328      	orrs	r0, r5
 80016be:	07e4      	lsls	r4, r4, #31
 80016c0:	4320      	orrs	r0, r4
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	2b99      	cmp	r3, #153	@ 0x99
 80016c6:	dc14      	bgt.n	80016f2 <__aeabi_i2f+0x6a>
 80016c8:	1f42      	subs	r2, r0, #5
 80016ca:	4095      	lsls	r5, r2
 80016cc:	002a      	movs	r2, r5
 80016ce:	4915      	ldr	r1, [pc, #84]	@ (8001724 <__aeabi_i2f+0x9c>)
 80016d0:	4011      	ands	r1, r2
 80016d2:	0755      	lsls	r5, r2, #29
 80016d4:	d01c      	beq.n	8001710 <__aeabi_i2f+0x88>
 80016d6:	250f      	movs	r5, #15
 80016d8:	402a      	ands	r2, r5
 80016da:	2a04      	cmp	r2, #4
 80016dc:	d018      	beq.n	8001710 <__aeabi_i2f+0x88>
 80016de:	3104      	adds	r1, #4
 80016e0:	08ca      	lsrs	r2, r1, #3
 80016e2:	0149      	lsls	r1, r1, #5
 80016e4:	d515      	bpl.n	8001712 <__aeabi_i2f+0x8a>
 80016e6:	239f      	movs	r3, #159	@ 0x9f
 80016e8:	0252      	lsls	r2, r2, #9
 80016ea:	1a18      	subs	r0, r3, r0
 80016ec:	0a55      	lsrs	r5, r2, #9
 80016ee:	b2c0      	uxtb	r0, r0
 80016f0:	e7e3      	b.n	80016ba <__aeabi_i2f+0x32>
 80016f2:	2205      	movs	r2, #5
 80016f4:	0029      	movs	r1, r5
 80016f6:	1a12      	subs	r2, r2, r0
 80016f8:	40d1      	lsrs	r1, r2
 80016fa:	0002      	movs	r2, r0
 80016fc:	321b      	adds	r2, #27
 80016fe:	4095      	lsls	r5, r2
 8001700:	002a      	movs	r2, r5
 8001702:	1e55      	subs	r5, r2, #1
 8001704:	41aa      	sbcs	r2, r5
 8001706:	430a      	orrs	r2, r1
 8001708:	4906      	ldr	r1, [pc, #24]	@ (8001724 <__aeabi_i2f+0x9c>)
 800170a:	4011      	ands	r1, r2
 800170c:	0755      	lsls	r5, r2, #29
 800170e:	d1e2      	bne.n	80016d6 <__aeabi_i2f+0x4e>
 8001710:	08ca      	lsrs	r2, r1, #3
 8001712:	0252      	lsls	r2, r2, #9
 8001714:	0a55      	lsrs	r5, r2, #9
 8001716:	b2d8      	uxtb	r0, r3
 8001718:	e7cf      	b.n	80016ba <__aeabi_i2f+0x32>
 800171a:	026d      	lsls	r5, r5, #9
 800171c:	0a6d      	lsrs	r5, r5, #9
 800171e:	308e      	adds	r0, #142	@ 0x8e
 8001720:	e7cb      	b.n	80016ba <__aeabi_i2f+0x32>
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	fbffffff 	.word	0xfbffffff

08001728 <__aeabi_ui2f>:
 8001728:	b510      	push	{r4, lr}
 800172a:	1e04      	subs	r4, r0, #0
 800172c:	d00d      	beq.n	800174a <__aeabi_ui2f+0x22>
 800172e:	f001 fffb 	bl	8003728 <__clzsi2>
 8001732:	239e      	movs	r3, #158	@ 0x9e
 8001734:	1a1b      	subs	r3, r3, r0
 8001736:	2b96      	cmp	r3, #150	@ 0x96
 8001738:	dc0c      	bgt.n	8001754 <__aeabi_ui2f+0x2c>
 800173a:	2808      	cmp	r0, #8
 800173c:	d034      	beq.n	80017a8 <__aeabi_ui2f+0x80>
 800173e:	3808      	subs	r0, #8
 8001740:	4084      	lsls	r4, r0
 8001742:	0264      	lsls	r4, r4, #9
 8001744:	0a64      	lsrs	r4, r4, #9
 8001746:	b2d8      	uxtb	r0, r3
 8001748:	e001      	b.n	800174e <__aeabi_ui2f+0x26>
 800174a:	2000      	movs	r0, #0
 800174c:	2400      	movs	r4, #0
 800174e:	05c0      	lsls	r0, r0, #23
 8001750:	4320      	orrs	r0, r4
 8001752:	bd10      	pop	{r4, pc}
 8001754:	2b99      	cmp	r3, #153	@ 0x99
 8001756:	dc13      	bgt.n	8001780 <__aeabi_ui2f+0x58>
 8001758:	1f42      	subs	r2, r0, #5
 800175a:	4094      	lsls	r4, r2
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <__aeabi_ui2f+0x88>)
 800175e:	4022      	ands	r2, r4
 8001760:	0761      	lsls	r1, r4, #29
 8001762:	d01c      	beq.n	800179e <__aeabi_ui2f+0x76>
 8001764:	210f      	movs	r1, #15
 8001766:	4021      	ands	r1, r4
 8001768:	2904      	cmp	r1, #4
 800176a:	d018      	beq.n	800179e <__aeabi_ui2f+0x76>
 800176c:	3204      	adds	r2, #4
 800176e:	08d4      	lsrs	r4, r2, #3
 8001770:	0152      	lsls	r2, r2, #5
 8001772:	d515      	bpl.n	80017a0 <__aeabi_ui2f+0x78>
 8001774:	239f      	movs	r3, #159	@ 0x9f
 8001776:	0264      	lsls	r4, r4, #9
 8001778:	1a18      	subs	r0, r3, r0
 800177a:	0a64      	lsrs	r4, r4, #9
 800177c:	b2c0      	uxtb	r0, r0
 800177e:	e7e6      	b.n	800174e <__aeabi_ui2f+0x26>
 8001780:	0002      	movs	r2, r0
 8001782:	0021      	movs	r1, r4
 8001784:	321b      	adds	r2, #27
 8001786:	4091      	lsls	r1, r2
 8001788:	000a      	movs	r2, r1
 800178a:	1e51      	subs	r1, r2, #1
 800178c:	418a      	sbcs	r2, r1
 800178e:	2105      	movs	r1, #5
 8001790:	1a09      	subs	r1, r1, r0
 8001792:	40cc      	lsrs	r4, r1
 8001794:	4314      	orrs	r4, r2
 8001796:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <__aeabi_ui2f+0x88>)
 8001798:	4022      	ands	r2, r4
 800179a:	0761      	lsls	r1, r4, #29
 800179c:	d1e2      	bne.n	8001764 <__aeabi_ui2f+0x3c>
 800179e:	08d4      	lsrs	r4, r2, #3
 80017a0:	0264      	lsls	r4, r4, #9
 80017a2:	0a64      	lsrs	r4, r4, #9
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	e7d2      	b.n	800174e <__aeabi_ui2f+0x26>
 80017a8:	0264      	lsls	r4, r4, #9
 80017aa:	0a64      	lsrs	r4, r4, #9
 80017ac:	308e      	adds	r0, #142	@ 0x8e
 80017ae:	e7ce      	b.n	800174e <__aeabi_ui2f+0x26>
 80017b0:	fbffffff 	.word	0xfbffffff

080017b4 <__aeabi_dadd>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	464f      	mov	r7, r9
 80017b8:	4646      	mov	r6, r8
 80017ba:	46d6      	mov	lr, sl
 80017bc:	b5c0      	push	{r6, r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	9000      	str	r0, [sp, #0]
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	030e      	lsls	r6, r1, #12
 80017c6:	004c      	lsls	r4, r1, #1
 80017c8:	0fcd      	lsrs	r5, r1, #31
 80017ca:	0a71      	lsrs	r1, r6, #9
 80017cc:	9e00      	ldr	r6, [sp, #0]
 80017ce:	005f      	lsls	r7, r3, #1
 80017d0:	0f76      	lsrs	r6, r6, #29
 80017d2:	430e      	orrs	r6, r1
 80017d4:	9900      	ldr	r1, [sp, #0]
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4689      	mov	r9, r1
 80017de:	0319      	lsls	r1, r3, #12
 80017e0:	0d7b      	lsrs	r3, r7, #21
 80017e2:	4698      	mov	r8, r3
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	0a49      	lsrs	r1, r1, #9
 80017e8:	0fdb      	lsrs	r3, r3, #31
 80017ea:	469c      	mov	ip, r3
 80017ec:	9b00      	ldr	r3, [sp, #0]
 80017ee:	9a00      	ldr	r2, [sp, #0]
 80017f0:	0f5b      	lsrs	r3, r3, #29
 80017f2:	430b      	orrs	r3, r1
 80017f4:	4641      	mov	r1, r8
 80017f6:	0d64      	lsrs	r4, r4, #21
 80017f8:	00d2      	lsls	r2, r2, #3
 80017fa:	1a61      	subs	r1, r4, r1
 80017fc:	4565      	cmp	r5, ip
 80017fe:	d100      	bne.n	8001802 <__aeabi_dadd+0x4e>
 8001800:	e0a6      	b.n	8001950 <__aeabi_dadd+0x19c>
 8001802:	2900      	cmp	r1, #0
 8001804:	dd72      	ble.n	80018ec <__aeabi_dadd+0x138>
 8001806:	4647      	mov	r7, r8
 8001808:	2f00      	cmp	r7, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x5a>
 800180c:	e0dd      	b.n	80019ca <__aeabi_dadd+0x216>
 800180e:	4fcc      	ldr	r7, [pc, #816]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001810:	42bc      	cmp	r4, r7
 8001812:	d100      	bne.n	8001816 <__aeabi_dadd+0x62>
 8001814:	e19a      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001816:	2701      	movs	r7, #1
 8001818:	2938      	cmp	r1, #56	@ 0x38
 800181a:	dc17      	bgt.n	800184c <__aeabi_dadd+0x98>
 800181c:	2780      	movs	r7, #128	@ 0x80
 800181e:	043f      	lsls	r7, r7, #16
 8001820:	433b      	orrs	r3, r7
 8001822:	291f      	cmp	r1, #31
 8001824:	dd00      	ble.n	8001828 <__aeabi_dadd+0x74>
 8001826:	e1dd      	b.n	8001be4 <__aeabi_dadd+0x430>
 8001828:	2720      	movs	r7, #32
 800182a:	1a78      	subs	r0, r7, r1
 800182c:	001f      	movs	r7, r3
 800182e:	4087      	lsls	r7, r0
 8001830:	46ba      	mov	sl, r7
 8001832:	0017      	movs	r7, r2
 8001834:	40cf      	lsrs	r7, r1
 8001836:	4684      	mov	ip, r0
 8001838:	0038      	movs	r0, r7
 800183a:	4657      	mov	r7, sl
 800183c:	4307      	orrs	r7, r0
 800183e:	4660      	mov	r0, ip
 8001840:	4082      	lsls	r2, r0
 8001842:	40cb      	lsrs	r3, r1
 8001844:	1e50      	subs	r0, r2, #1
 8001846:	4182      	sbcs	r2, r0
 8001848:	1af6      	subs	r6, r6, r3
 800184a:	4317      	orrs	r7, r2
 800184c:	464b      	mov	r3, r9
 800184e:	1bdf      	subs	r7, r3, r7
 8001850:	45b9      	cmp	r9, r7
 8001852:	4180      	sbcs	r0, r0
 8001854:	4240      	negs	r0, r0
 8001856:	1a36      	subs	r6, r6, r0
 8001858:	0233      	lsls	r3, r6, #8
 800185a:	d400      	bmi.n	800185e <__aeabi_dadd+0xaa>
 800185c:	e0ff      	b.n	8001a5e <__aeabi_dadd+0x2aa>
 800185e:	0276      	lsls	r6, r6, #9
 8001860:	0a76      	lsrs	r6, r6, #9
 8001862:	2e00      	cmp	r6, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0xb4>
 8001866:	e13c      	b.n	8001ae2 <__aeabi_dadd+0x32e>
 8001868:	0030      	movs	r0, r6
 800186a:	f001 ff5d 	bl	8003728 <__clzsi2>
 800186e:	0003      	movs	r3, r0
 8001870:	3b08      	subs	r3, #8
 8001872:	2120      	movs	r1, #32
 8001874:	0038      	movs	r0, r7
 8001876:	1aca      	subs	r2, r1, r3
 8001878:	40d0      	lsrs	r0, r2
 800187a:	409e      	lsls	r6, r3
 800187c:	0002      	movs	r2, r0
 800187e:	409f      	lsls	r7, r3
 8001880:	4332      	orrs	r2, r6
 8001882:	429c      	cmp	r4, r3
 8001884:	dd00      	ble.n	8001888 <__aeabi_dadd+0xd4>
 8001886:	e1a6      	b.n	8001bd6 <__aeabi_dadd+0x422>
 8001888:	1b18      	subs	r0, r3, r4
 800188a:	3001      	adds	r0, #1
 800188c:	1a09      	subs	r1, r1, r0
 800188e:	003e      	movs	r6, r7
 8001890:	408f      	lsls	r7, r1
 8001892:	40c6      	lsrs	r6, r0
 8001894:	1e7b      	subs	r3, r7, #1
 8001896:	419f      	sbcs	r7, r3
 8001898:	0013      	movs	r3, r2
 800189a:	408b      	lsls	r3, r1
 800189c:	4337      	orrs	r7, r6
 800189e:	431f      	orrs	r7, r3
 80018a0:	40c2      	lsrs	r2, r0
 80018a2:	003b      	movs	r3, r7
 80018a4:	0016      	movs	r6, r2
 80018a6:	2400      	movs	r4, #0
 80018a8:	4313      	orrs	r3, r2
 80018aa:	d100      	bne.n	80018ae <__aeabi_dadd+0xfa>
 80018ac:	e1df      	b.n	8001c6e <__aeabi_dadd+0x4ba>
 80018ae:	077b      	lsls	r3, r7, #29
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dadd+0x100>
 80018b2:	e332      	b.n	8001f1a <__aeabi_dadd+0x766>
 80018b4:	230f      	movs	r3, #15
 80018b6:	003a      	movs	r2, r7
 80018b8:	403b      	ands	r3, r7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d004      	beq.n	80018c8 <__aeabi_dadd+0x114>
 80018be:	1d3a      	adds	r2, r7, #4
 80018c0:	42ba      	cmp	r2, r7
 80018c2:	41bf      	sbcs	r7, r7
 80018c4:	427f      	negs	r7, r7
 80018c6:	19f6      	adds	r6, r6, r7
 80018c8:	0233      	lsls	r3, r6, #8
 80018ca:	d400      	bmi.n	80018ce <__aeabi_dadd+0x11a>
 80018cc:	e323      	b.n	8001f16 <__aeabi_dadd+0x762>
 80018ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80018d0:	3401      	adds	r4, #1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dadd+0x124>
 80018d6:	e0b4      	b.n	8001a42 <__aeabi_dadd+0x28e>
 80018d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b44 <__aeabi_dadd+0x390>)
 80018da:	0564      	lsls	r4, r4, #21
 80018dc:	401e      	ands	r6, r3
 80018de:	0d64      	lsrs	r4, r4, #21
 80018e0:	0777      	lsls	r7, r6, #29
 80018e2:	08d2      	lsrs	r2, r2, #3
 80018e4:	0276      	lsls	r6, r6, #9
 80018e6:	4317      	orrs	r7, r2
 80018e8:	0b36      	lsrs	r6, r6, #12
 80018ea:	e0ac      	b.n	8001a46 <__aeabi_dadd+0x292>
 80018ec:	2900      	cmp	r1, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dadd+0x13e>
 80018f0:	e07e      	b.n	80019f0 <__aeabi_dadd+0x23c>
 80018f2:	4641      	mov	r1, r8
 80018f4:	1b09      	subs	r1, r1, r4
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	d000      	beq.n	80018fc <__aeabi_dadd+0x148>
 80018fa:	e160      	b.n	8001bbe <__aeabi_dadd+0x40a>
 80018fc:	0034      	movs	r4, r6
 80018fe:	4648      	mov	r0, r9
 8001900:	4304      	orrs	r4, r0
 8001902:	d100      	bne.n	8001906 <__aeabi_dadd+0x152>
 8001904:	e1c9      	b.n	8001c9a <__aeabi_dadd+0x4e6>
 8001906:	1e4c      	subs	r4, r1, #1
 8001908:	2901      	cmp	r1, #1
 800190a:	d100      	bne.n	800190e <__aeabi_dadd+0x15a>
 800190c:	e22e      	b.n	8001d6c <__aeabi_dadd+0x5b8>
 800190e:	4d8c      	ldr	r5, [pc, #560]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001910:	42a9      	cmp	r1, r5
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x162>
 8001914:	e224      	b.n	8001d60 <__aeabi_dadd+0x5ac>
 8001916:	2701      	movs	r7, #1
 8001918:	2c38      	cmp	r4, #56	@ 0x38
 800191a:	dc11      	bgt.n	8001940 <__aeabi_dadd+0x18c>
 800191c:	0021      	movs	r1, r4
 800191e:	291f      	cmp	r1, #31
 8001920:	dd00      	ble.n	8001924 <__aeabi_dadd+0x170>
 8001922:	e20b      	b.n	8001d3c <__aeabi_dadd+0x588>
 8001924:	2420      	movs	r4, #32
 8001926:	0037      	movs	r7, r6
 8001928:	4648      	mov	r0, r9
 800192a:	1a64      	subs	r4, r4, r1
 800192c:	40a7      	lsls	r7, r4
 800192e:	40c8      	lsrs	r0, r1
 8001930:	4307      	orrs	r7, r0
 8001932:	4648      	mov	r0, r9
 8001934:	40a0      	lsls	r0, r4
 8001936:	40ce      	lsrs	r6, r1
 8001938:	1e44      	subs	r4, r0, #1
 800193a:	41a0      	sbcs	r0, r4
 800193c:	1b9b      	subs	r3, r3, r6
 800193e:	4307      	orrs	r7, r0
 8001940:	1bd7      	subs	r7, r2, r7
 8001942:	42ba      	cmp	r2, r7
 8001944:	4192      	sbcs	r2, r2
 8001946:	4252      	negs	r2, r2
 8001948:	4665      	mov	r5, ip
 800194a:	4644      	mov	r4, r8
 800194c:	1a9e      	subs	r6, r3, r2
 800194e:	e783      	b.n	8001858 <__aeabi_dadd+0xa4>
 8001950:	2900      	cmp	r1, #0
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dadd+0x1a2>
 8001954:	e09c      	b.n	8001a90 <__aeabi_dadd+0x2dc>
 8001956:	4647      	mov	r7, r8
 8001958:	2f00      	cmp	r7, #0
 800195a:	d167      	bne.n	8001a2c <__aeabi_dadd+0x278>
 800195c:	001f      	movs	r7, r3
 800195e:	4317      	orrs	r7, r2
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x1b0>
 8001962:	e0e4      	b.n	8001b2e <__aeabi_dadd+0x37a>
 8001964:	1e48      	subs	r0, r1, #1
 8001966:	2901      	cmp	r1, #1
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x1b8>
 800196a:	e19b      	b.n	8001ca4 <__aeabi_dadd+0x4f0>
 800196c:	4f74      	ldr	r7, [pc, #464]	@ (8001b40 <__aeabi_dadd+0x38c>)
 800196e:	42b9      	cmp	r1, r7
 8001970:	d100      	bne.n	8001974 <__aeabi_dadd+0x1c0>
 8001972:	e0eb      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001974:	2701      	movs	r7, #1
 8001976:	0001      	movs	r1, r0
 8001978:	2838      	cmp	r0, #56	@ 0x38
 800197a:	dc11      	bgt.n	80019a0 <__aeabi_dadd+0x1ec>
 800197c:	291f      	cmp	r1, #31
 800197e:	dd00      	ble.n	8001982 <__aeabi_dadd+0x1ce>
 8001980:	e1c7      	b.n	8001d12 <__aeabi_dadd+0x55e>
 8001982:	2720      	movs	r7, #32
 8001984:	1a78      	subs	r0, r7, r1
 8001986:	001f      	movs	r7, r3
 8001988:	4684      	mov	ip, r0
 800198a:	4087      	lsls	r7, r0
 800198c:	0010      	movs	r0, r2
 800198e:	40c8      	lsrs	r0, r1
 8001990:	4307      	orrs	r7, r0
 8001992:	4660      	mov	r0, ip
 8001994:	4082      	lsls	r2, r0
 8001996:	40cb      	lsrs	r3, r1
 8001998:	1e50      	subs	r0, r2, #1
 800199a:	4182      	sbcs	r2, r0
 800199c:	18f6      	adds	r6, r6, r3
 800199e:	4317      	orrs	r7, r2
 80019a0:	444f      	add	r7, r9
 80019a2:	454f      	cmp	r7, r9
 80019a4:	4180      	sbcs	r0, r0
 80019a6:	4240      	negs	r0, r0
 80019a8:	1836      	adds	r6, r6, r0
 80019aa:	0233      	lsls	r3, r6, #8
 80019ac:	d557      	bpl.n	8001a5e <__aeabi_dadd+0x2aa>
 80019ae:	4b64      	ldr	r3, [pc, #400]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80019b0:	3401      	adds	r4, #1
 80019b2:	429c      	cmp	r4, r3
 80019b4:	d045      	beq.n	8001a42 <__aeabi_dadd+0x28e>
 80019b6:	2101      	movs	r1, #1
 80019b8:	4b62      	ldr	r3, [pc, #392]	@ (8001b44 <__aeabi_dadd+0x390>)
 80019ba:	087a      	lsrs	r2, r7, #1
 80019bc:	401e      	ands	r6, r3
 80019be:	4039      	ands	r1, r7
 80019c0:	430a      	orrs	r2, r1
 80019c2:	07f7      	lsls	r7, r6, #31
 80019c4:	4317      	orrs	r7, r2
 80019c6:	0876      	lsrs	r6, r6, #1
 80019c8:	e771      	b.n	80018ae <__aeabi_dadd+0xfa>
 80019ca:	001f      	movs	r7, r3
 80019cc:	4317      	orrs	r7, r2
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x21e>
 80019d0:	e0ad      	b.n	8001b2e <__aeabi_dadd+0x37a>
 80019d2:	1e4f      	subs	r7, r1, #1
 80019d4:	46bc      	mov	ip, r7
 80019d6:	2901      	cmp	r1, #1
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x228>
 80019da:	e182      	b.n	8001ce2 <__aeabi_dadd+0x52e>
 80019dc:	4f58      	ldr	r7, [pc, #352]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80019de:	42b9      	cmp	r1, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dadd+0x230>
 80019e2:	e190      	b.n	8001d06 <__aeabi_dadd+0x552>
 80019e4:	4661      	mov	r1, ip
 80019e6:	2701      	movs	r7, #1
 80019e8:	2938      	cmp	r1, #56	@ 0x38
 80019ea:	dd00      	ble.n	80019ee <__aeabi_dadd+0x23a>
 80019ec:	e72e      	b.n	800184c <__aeabi_dadd+0x98>
 80019ee:	e718      	b.n	8001822 <__aeabi_dadd+0x6e>
 80019f0:	4f55      	ldr	r7, [pc, #340]	@ (8001b48 <__aeabi_dadd+0x394>)
 80019f2:	1c61      	adds	r1, r4, #1
 80019f4:	4239      	tst	r1, r7
 80019f6:	d000      	beq.n	80019fa <__aeabi_dadd+0x246>
 80019f8:	e0d0      	b.n	8001b9c <__aeabi_dadd+0x3e8>
 80019fa:	0031      	movs	r1, r6
 80019fc:	4648      	mov	r0, r9
 80019fe:	001f      	movs	r7, r3
 8001a00:	4301      	orrs	r1, r0
 8001a02:	4317      	orrs	r7, r2
 8001a04:	2c00      	cmp	r4, #0
 8001a06:	d000      	beq.n	8001a0a <__aeabi_dadd+0x256>
 8001a08:	e13d      	b.n	8001c86 <__aeabi_dadd+0x4d2>
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x25c>
 8001a0e:	e1bc      	b.n	8001d8a <__aeabi_dadd+0x5d6>
 8001a10:	2f00      	cmp	r7, #0
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x262>
 8001a14:	e1bf      	b.n	8001d96 <__aeabi_dadd+0x5e2>
 8001a16:	464b      	mov	r3, r9
 8001a18:	2100      	movs	r1, #0
 8001a1a:	08d8      	lsrs	r0, r3, #3
 8001a1c:	0777      	lsls	r7, r6, #29
 8001a1e:	4307      	orrs	r7, r0
 8001a20:	08f0      	lsrs	r0, r6, #3
 8001a22:	0306      	lsls	r6, r0, #12
 8001a24:	054c      	lsls	r4, r1, #21
 8001a26:	0b36      	lsrs	r6, r6, #12
 8001a28:	0d64      	lsrs	r4, r4, #21
 8001a2a:	e00c      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001a2c:	4f44      	ldr	r7, [pc, #272]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a2e:	42bc      	cmp	r4, r7
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dadd+0x280>
 8001a32:	e08b      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001a34:	2701      	movs	r7, #1
 8001a36:	2938      	cmp	r1, #56	@ 0x38
 8001a38:	dcb2      	bgt.n	80019a0 <__aeabi_dadd+0x1ec>
 8001a3a:	2780      	movs	r7, #128	@ 0x80
 8001a3c:	043f      	lsls	r7, r7, #16
 8001a3e:	433b      	orrs	r3, r7
 8001a40:	e79c      	b.n	800197c <__aeabi_dadd+0x1c8>
 8001a42:	2600      	movs	r6, #0
 8001a44:	2700      	movs	r7, #0
 8001a46:	0524      	lsls	r4, r4, #20
 8001a48:	4334      	orrs	r4, r6
 8001a4a:	07ed      	lsls	r5, r5, #31
 8001a4c:	432c      	orrs	r4, r5
 8001a4e:	0038      	movs	r0, r7
 8001a50:	0021      	movs	r1, r4
 8001a52:	b002      	add	sp, #8
 8001a54:	bce0      	pop	{r5, r6, r7}
 8001a56:	46ba      	mov	sl, r7
 8001a58:	46b1      	mov	r9, r6
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	077b      	lsls	r3, r7, #29
 8001a60:	d004      	beq.n	8001a6c <__aeabi_dadd+0x2b8>
 8001a62:	230f      	movs	r3, #15
 8001a64:	403b      	ands	r3, r7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d000      	beq.n	8001a6c <__aeabi_dadd+0x2b8>
 8001a6a:	e728      	b.n	80018be <__aeabi_dadd+0x10a>
 8001a6c:	08f8      	lsrs	r0, r7, #3
 8001a6e:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a70:	0777      	lsls	r7, r6, #29
 8001a72:	4307      	orrs	r7, r0
 8001a74:	08f0      	lsrs	r0, r6, #3
 8001a76:	429c      	cmp	r4, r3
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dadd+0x2c8>
 8001a7a:	e24a      	b.n	8001f12 <__aeabi_dadd+0x75e>
 8001a7c:	003b      	movs	r3, r7
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	d059      	beq.n	8001b36 <__aeabi_dadd+0x382>
 8001a82:	2680      	movs	r6, #128	@ 0x80
 8001a84:	0336      	lsls	r6, r6, #12
 8001a86:	4306      	orrs	r6, r0
 8001a88:	0336      	lsls	r6, r6, #12
 8001a8a:	4c2d      	ldr	r4, [pc, #180]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a8c:	0b36      	lsrs	r6, r6, #12
 8001a8e:	e7da      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001a90:	2900      	cmp	r1, #0
 8001a92:	d061      	beq.n	8001b58 <__aeabi_dadd+0x3a4>
 8001a94:	4641      	mov	r1, r8
 8001a96:	1b09      	subs	r1, r1, r4
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x2ea>
 8001a9c:	e0b9      	b.n	8001c12 <__aeabi_dadd+0x45e>
 8001a9e:	4c28      	ldr	r4, [pc, #160]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001aa0:	45a0      	cmp	r8, r4
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x2f2>
 8001aa4:	e1a5      	b.n	8001df2 <__aeabi_dadd+0x63e>
 8001aa6:	2701      	movs	r7, #1
 8001aa8:	2938      	cmp	r1, #56	@ 0x38
 8001aaa:	dc13      	bgt.n	8001ad4 <__aeabi_dadd+0x320>
 8001aac:	2480      	movs	r4, #128	@ 0x80
 8001aae:	0424      	lsls	r4, r4, #16
 8001ab0:	4326      	orrs	r6, r4
 8001ab2:	291f      	cmp	r1, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dadd+0x304>
 8001ab6:	e1c8      	b.n	8001e4a <__aeabi_dadd+0x696>
 8001ab8:	2420      	movs	r4, #32
 8001aba:	0037      	movs	r7, r6
 8001abc:	4648      	mov	r0, r9
 8001abe:	1a64      	subs	r4, r4, r1
 8001ac0:	40a7      	lsls	r7, r4
 8001ac2:	40c8      	lsrs	r0, r1
 8001ac4:	4307      	orrs	r7, r0
 8001ac6:	4648      	mov	r0, r9
 8001ac8:	40a0      	lsls	r0, r4
 8001aca:	40ce      	lsrs	r6, r1
 8001acc:	1e44      	subs	r4, r0, #1
 8001ace:	41a0      	sbcs	r0, r4
 8001ad0:	199b      	adds	r3, r3, r6
 8001ad2:	4307      	orrs	r7, r0
 8001ad4:	18bf      	adds	r7, r7, r2
 8001ad6:	4297      	cmp	r7, r2
 8001ad8:	4192      	sbcs	r2, r2
 8001ada:	4252      	negs	r2, r2
 8001adc:	4644      	mov	r4, r8
 8001ade:	18d6      	adds	r6, r2, r3
 8001ae0:	e763      	b.n	80019aa <__aeabi_dadd+0x1f6>
 8001ae2:	0038      	movs	r0, r7
 8001ae4:	f001 fe20 	bl	8003728 <__clzsi2>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	3318      	adds	r3, #24
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dadd+0x33e>
 8001af0:	e6bf      	b.n	8001872 <__aeabi_dadd+0xbe>
 8001af2:	003a      	movs	r2, r7
 8001af4:	3808      	subs	r0, #8
 8001af6:	4082      	lsls	r2, r0
 8001af8:	429c      	cmp	r4, r3
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dadd+0x34a>
 8001afc:	e083      	b.n	8001c06 <__aeabi_dadd+0x452>
 8001afe:	1b1b      	subs	r3, r3, r4
 8001b00:	1c58      	adds	r0, r3, #1
 8001b02:	281f      	cmp	r0, #31
 8001b04:	dc00      	bgt.n	8001b08 <__aeabi_dadd+0x354>
 8001b06:	e1b4      	b.n	8001e72 <__aeabi_dadd+0x6be>
 8001b08:	0017      	movs	r7, r2
 8001b0a:	3b1f      	subs	r3, #31
 8001b0c:	40df      	lsrs	r7, r3
 8001b0e:	2820      	cmp	r0, #32
 8001b10:	d005      	beq.n	8001b1e <__aeabi_dadd+0x36a>
 8001b12:	2340      	movs	r3, #64	@ 0x40
 8001b14:	1a1b      	subs	r3, r3, r0
 8001b16:	409a      	lsls	r2, r3
 8001b18:	1e53      	subs	r3, r2, #1
 8001b1a:	419a      	sbcs	r2, r3
 8001b1c:	4317      	orrs	r7, r2
 8001b1e:	2400      	movs	r4, #0
 8001b20:	2f00      	cmp	r7, #0
 8001b22:	d00a      	beq.n	8001b3a <__aeabi_dadd+0x386>
 8001b24:	077b      	lsls	r3, r7, #29
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dadd+0x376>
 8001b28:	e6c4      	b.n	80018b4 <__aeabi_dadd+0x100>
 8001b2a:	0026      	movs	r6, r4
 8001b2c:	e79e      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001b2e:	464b      	mov	r3, r9
 8001b30:	000c      	movs	r4, r1
 8001b32:	08d8      	lsrs	r0, r3, #3
 8001b34:	e79b      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001b36:	2700      	movs	r7, #0
 8001b38:	4c01      	ldr	r4, [pc, #4]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	e783      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	ff7fffff 	.word	0xff7fffff
 8001b48:	000007fe 	.word	0x000007fe
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	0777      	lsls	r7, r6, #29
 8001b50:	08d8      	lsrs	r0, r3, #3
 8001b52:	4307      	orrs	r7, r0
 8001b54:	08f0      	lsrs	r0, r6, #3
 8001b56:	e791      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001b58:	4fcd      	ldr	r7, [pc, #820]	@ (8001e90 <__aeabi_dadd+0x6dc>)
 8001b5a:	1c61      	adds	r1, r4, #1
 8001b5c:	4239      	tst	r1, r7
 8001b5e:	d16b      	bne.n	8001c38 <__aeabi_dadd+0x484>
 8001b60:	0031      	movs	r1, r6
 8001b62:	4648      	mov	r0, r9
 8001b64:	4301      	orrs	r1, r0
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dadd+0x3b8>
 8001b6a:	e14b      	b.n	8001e04 <__aeabi_dadd+0x650>
 8001b6c:	001f      	movs	r7, r3
 8001b6e:	4317      	orrs	r7, r2
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dadd+0x3c2>
 8001b74:	e181      	b.n	8001e7a <__aeabi_dadd+0x6c6>
 8001b76:	2f00      	cmp	r7, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x3c8>
 8001b7a:	e74c      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001b7c:	444a      	add	r2, r9
 8001b7e:	454a      	cmp	r2, r9
 8001b80:	4180      	sbcs	r0, r0
 8001b82:	18f6      	adds	r6, r6, r3
 8001b84:	4240      	negs	r0, r0
 8001b86:	1836      	adds	r6, r6, r0
 8001b88:	0233      	lsls	r3, r6, #8
 8001b8a:	d500      	bpl.n	8001b8e <__aeabi_dadd+0x3da>
 8001b8c:	e1b0      	b.n	8001ef0 <__aeabi_dadd+0x73c>
 8001b8e:	0017      	movs	r7, r2
 8001b90:	4691      	mov	r9, r2
 8001b92:	4337      	orrs	r7, r6
 8001b94:	d000      	beq.n	8001b98 <__aeabi_dadd+0x3e4>
 8001b96:	e73e      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001b98:	2600      	movs	r6, #0
 8001b9a:	e754      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	1a89      	subs	r1, r1, r2
 8001ba0:	4688      	mov	r8, r1
 8001ba2:	45c1      	cmp	r9, r8
 8001ba4:	41bf      	sbcs	r7, r7
 8001ba6:	1af1      	subs	r1, r6, r3
 8001ba8:	427f      	negs	r7, r7
 8001baa:	1bc9      	subs	r1, r1, r7
 8001bac:	020f      	lsls	r7, r1, #8
 8001bae:	d461      	bmi.n	8001c74 <__aeabi_dadd+0x4c0>
 8001bb0:	4647      	mov	r7, r8
 8001bb2:	430f      	orrs	r7, r1
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dadd+0x404>
 8001bb6:	e0bd      	b.n	8001d34 <__aeabi_dadd+0x580>
 8001bb8:	000e      	movs	r6, r1
 8001bba:	4647      	mov	r7, r8
 8001bbc:	e651      	b.n	8001862 <__aeabi_dadd+0xae>
 8001bbe:	4cb5      	ldr	r4, [pc, #724]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001bc0:	45a0      	cmp	r8, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dadd+0x412>
 8001bc4:	e100      	b.n	8001dc8 <__aeabi_dadd+0x614>
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	2938      	cmp	r1, #56	@ 0x38
 8001bca:	dd00      	ble.n	8001bce <__aeabi_dadd+0x41a>
 8001bcc:	e6b8      	b.n	8001940 <__aeabi_dadd+0x18c>
 8001bce:	2480      	movs	r4, #128	@ 0x80
 8001bd0:	0424      	lsls	r4, r4, #16
 8001bd2:	4326      	orrs	r6, r4
 8001bd4:	e6a3      	b.n	800191e <__aeabi_dadd+0x16a>
 8001bd6:	4eb0      	ldr	r6, [pc, #704]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001bd8:	1ae4      	subs	r4, r4, r3
 8001bda:	4016      	ands	r6, r2
 8001bdc:	077b      	lsls	r3, r7, #29
 8001bde:	d000      	beq.n	8001be2 <__aeabi_dadd+0x42e>
 8001be0:	e73f      	b.n	8001a62 <__aeabi_dadd+0x2ae>
 8001be2:	e743      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001be4:	000f      	movs	r7, r1
 8001be6:	0018      	movs	r0, r3
 8001be8:	3f20      	subs	r7, #32
 8001bea:	40f8      	lsrs	r0, r7
 8001bec:	4684      	mov	ip, r0
 8001bee:	2920      	cmp	r1, #32
 8001bf0:	d003      	beq.n	8001bfa <__aeabi_dadd+0x446>
 8001bf2:	2740      	movs	r7, #64	@ 0x40
 8001bf4:	1a79      	subs	r1, r7, r1
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	1e53      	subs	r3, r2, #1
 8001bfc:	419a      	sbcs	r2, r3
 8001bfe:	4663      	mov	r3, ip
 8001c00:	0017      	movs	r7, r2
 8001c02:	431f      	orrs	r7, r3
 8001c04:	e622      	b.n	800184c <__aeabi_dadd+0x98>
 8001c06:	48a4      	ldr	r0, [pc, #656]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001c08:	1ae1      	subs	r1, r4, r3
 8001c0a:	4010      	ands	r0, r2
 8001c0c:	0747      	lsls	r7, r0, #29
 8001c0e:	08c0      	lsrs	r0, r0, #3
 8001c10:	e707      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001c12:	0034      	movs	r4, r6
 8001c14:	4648      	mov	r0, r9
 8001c16:	4304      	orrs	r4, r0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dadd+0x468>
 8001c1a:	e0fa      	b.n	8001e12 <__aeabi_dadd+0x65e>
 8001c1c:	1e4c      	subs	r4, r1, #1
 8001c1e:	2901      	cmp	r1, #1
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dadd+0x470>
 8001c22:	e0d7      	b.n	8001dd4 <__aeabi_dadd+0x620>
 8001c24:	4f9b      	ldr	r7, [pc, #620]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c26:	42b9      	cmp	r1, r7
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dadd+0x478>
 8001c2a:	e0e2      	b.n	8001df2 <__aeabi_dadd+0x63e>
 8001c2c:	2701      	movs	r7, #1
 8001c2e:	2c38      	cmp	r4, #56	@ 0x38
 8001c30:	dd00      	ble.n	8001c34 <__aeabi_dadd+0x480>
 8001c32:	e74f      	b.n	8001ad4 <__aeabi_dadd+0x320>
 8001c34:	0021      	movs	r1, r4
 8001c36:	e73c      	b.n	8001ab2 <__aeabi_dadd+0x2fe>
 8001c38:	4c96      	ldr	r4, [pc, #600]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c3a:	42a1      	cmp	r1, r4
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dadd+0x48c>
 8001c3e:	e0dd      	b.n	8001dfc <__aeabi_dadd+0x648>
 8001c40:	444a      	add	r2, r9
 8001c42:	454a      	cmp	r2, r9
 8001c44:	4180      	sbcs	r0, r0
 8001c46:	18f3      	adds	r3, r6, r3
 8001c48:	4240      	negs	r0, r0
 8001c4a:	1818      	adds	r0, r3, r0
 8001c4c:	07c7      	lsls	r7, r0, #31
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	4317      	orrs	r7, r2
 8001c52:	0846      	lsrs	r6, r0, #1
 8001c54:	0752      	lsls	r2, r2, #29
 8001c56:	d005      	beq.n	8001c64 <__aeabi_dadd+0x4b0>
 8001c58:	220f      	movs	r2, #15
 8001c5a:	000c      	movs	r4, r1
 8001c5c:	403a      	ands	r2, r7
 8001c5e:	2a04      	cmp	r2, #4
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dadd+0x4b0>
 8001c62:	e62c      	b.n	80018be <__aeabi_dadd+0x10a>
 8001c64:	0776      	lsls	r6, r6, #29
 8001c66:	08ff      	lsrs	r7, r7, #3
 8001c68:	4337      	orrs	r7, r6
 8001c6a:	0900      	lsrs	r0, r0, #4
 8001c6c:	e6d9      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001c6e:	2700      	movs	r7, #0
 8001c70:	2600      	movs	r6, #0
 8001c72:	e6e8      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001c74:	4649      	mov	r1, r9
 8001c76:	1a57      	subs	r7, r2, r1
 8001c78:	42ba      	cmp	r2, r7
 8001c7a:	4192      	sbcs	r2, r2
 8001c7c:	1b9e      	subs	r6, r3, r6
 8001c7e:	4252      	negs	r2, r2
 8001c80:	4665      	mov	r5, ip
 8001c82:	1ab6      	subs	r6, r6, r2
 8001c84:	e5ed      	b.n	8001862 <__aeabi_dadd+0xae>
 8001c86:	2900      	cmp	r1, #0
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dadd+0x4d8>
 8001c8a:	e0c6      	b.n	8001e1a <__aeabi_dadd+0x666>
 8001c8c:	2f00      	cmp	r7, #0
 8001c8e:	d167      	bne.n	8001d60 <__aeabi_dadd+0x5ac>
 8001c90:	2680      	movs	r6, #128	@ 0x80
 8001c92:	2500      	movs	r5, #0
 8001c94:	4c7f      	ldr	r4, [pc, #508]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c96:	0336      	lsls	r6, r6, #12
 8001c98:	e6d5      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001c9a:	4665      	mov	r5, ip
 8001c9c:	000c      	movs	r4, r1
 8001c9e:	001e      	movs	r6, r3
 8001ca0:	08d0      	lsrs	r0, r2, #3
 8001ca2:	e6e4      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001ca4:	444a      	add	r2, r9
 8001ca6:	454a      	cmp	r2, r9
 8001ca8:	4180      	sbcs	r0, r0
 8001caa:	18f3      	adds	r3, r6, r3
 8001cac:	4240      	negs	r0, r0
 8001cae:	1818      	adds	r0, r3, r0
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0203      	lsls	r3, r0, #8
 8001cb4:	d400      	bmi.n	8001cb8 <__aeabi_dadd+0x504>
 8001cb6:	e096      	b.n	8001de6 <__aeabi_dadd+0x632>
 8001cb8:	4b77      	ldr	r3, [pc, #476]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001cba:	0849      	lsrs	r1, r1, #1
 8001cbc:	4018      	ands	r0, r3
 8001cbe:	07c3      	lsls	r3, r0, #31
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	0844      	lsrs	r4, r0, #1
 8001cc4:	0749      	lsls	r1, r1, #29
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dadd+0x516>
 8001cc8:	e129      	b.n	8001f1e <__aeabi_dadd+0x76a>
 8001cca:	220f      	movs	r2, #15
 8001ccc:	401a      	ands	r2, r3
 8001cce:	2a04      	cmp	r2, #4
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dadd+0x520>
 8001cd2:	e0ea      	b.n	8001eaa <__aeabi_dadd+0x6f6>
 8001cd4:	1d1f      	adds	r7, r3, #4
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	41b6      	sbcs	r6, r6
 8001cda:	4276      	negs	r6, r6
 8001cdc:	1936      	adds	r6, r6, r4
 8001cde:	2402      	movs	r4, #2
 8001ce0:	e6c4      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	1a8f      	subs	r7, r1, r2
 8001ce6:	45b9      	cmp	r9, r7
 8001ce8:	4180      	sbcs	r0, r0
 8001cea:	1af6      	subs	r6, r6, r3
 8001cec:	4240      	negs	r0, r0
 8001cee:	1a36      	subs	r6, r6, r0
 8001cf0:	0233      	lsls	r3, r6, #8
 8001cf2:	d406      	bmi.n	8001d02 <__aeabi_dadd+0x54e>
 8001cf4:	0773      	lsls	r3, r6, #29
 8001cf6:	08ff      	lsrs	r7, r7, #3
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	431f      	orrs	r7, r3
 8001cfc:	08f0      	lsrs	r0, r6, #3
 8001cfe:	e690      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001d00:	4665      	mov	r5, ip
 8001d02:	2401      	movs	r4, #1
 8001d04:	e5ab      	b.n	800185e <__aeabi_dadd+0xaa>
 8001d06:	464b      	mov	r3, r9
 8001d08:	0777      	lsls	r7, r6, #29
 8001d0a:	08d8      	lsrs	r0, r3, #3
 8001d0c:	4307      	orrs	r7, r0
 8001d0e:	08f0      	lsrs	r0, r6, #3
 8001d10:	e6b4      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001d12:	000f      	movs	r7, r1
 8001d14:	0018      	movs	r0, r3
 8001d16:	3f20      	subs	r7, #32
 8001d18:	40f8      	lsrs	r0, r7
 8001d1a:	4684      	mov	ip, r0
 8001d1c:	2920      	cmp	r1, #32
 8001d1e:	d003      	beq.n	8001d28 <__aeabi_dadd+0x574>
 8001d20:	2740      	movs	r7, #64	@ 0x40
 8001d22:	1a79      	subs	r1, r7, r1
 8001d24:	408b      	lsls	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	1e53      	subs	r3, r2, #1
 8001d2a:	419a      	sbcs	r2, r3
 8001d2c:	4663      	mov	r3, ip
 8001d2e:	0017      	movs	r7, r2
 8001d30:	431f      	orrs	r7, r3
 8001d32:	e635      	b.n	80019a0 <__aeabi_dadd+0x1ec>
 8001d34:	2500      	movs	r5, #0
 8001d36:	2400      	movs	r4, #0
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e684      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001d3c:	000c      	movs	r4, r1
 8001d3e:	0035      	movs	r5, r6
 8001d40:	3c20      	subs	r4, #32
 8001d42:	40e5      	lsrs	r5, r4
 8001d44:	2920      	cmp	r1, #32
 8001d46:	d005      	beq.n	8001d54 <__aeabi_dadd+0x5a0>
 8001d48:	2440      	movs	r4, #64	@ 0x40
 8001d4a:	1a61      	subs	r1, r4, r1
 8001d4c:	408e      	lsls	r6, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	4331      	orrs	r1, r6
 8001d52:	4689      	mov	r9, r1
 8001d54:	4648      	mov	r0, r9
 8001d56:	1e41      	subs	r1, r0, #1
 8001d58:	4188      	sbcs	r0, r1
 8001d5a:	0007      	movs	r7, r0
 8001d5c:	432f      	orrs	r7, r5
 8001d5e:	e5ef      	b.n	8001940 <__aeabi_dadd+0x18c>
 8001d60:	08d2      	lsrs	r2, r2, #3
 8001d62:	075f      	lsls	r7, r3, #29
 8001d64:	4665      	mov	r5, ip
 8001d66:	4317      	orrs	r7, r2
 8001d68:	08d8      	lsrs	r0, r3, #3
 8001d6a:	e687      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001d6c:	1a17      	subs	r7, r2, r0
 8001d6e:	42ba      	cmp	r2, r7
 8001d70:	4192      	sbcs	r2, r2
 8001d72:	1b9e      	subs	r6, r3, r6
 8001d74:	4252      	negs	r2, r2
 8001d76:	1ab6      	subs	r6, r6, r2
 8001d78:	0233      	lsls	r3, r6, #8
 8001d7a:	d4c1      	bmi.n	8001d00 <__aeabi_dadd+0x54c>
 8001d7c:	0773      	lsls	r3, r6, #29
 8001d7e:	08ff      	lsrs	r7, r7, #3
 8001d80:	4665      	mov	r5, ip
 8001d82:	2101      	movs	r1, #1
 8001d84:	431f      	orrs	r7, r3
 8001d86:	08f0      	lsrs	r0, r6, #3
 8001d88:	e64b      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001d8a:	2f00      	cmp	r7, #0
 8001d8c:	d07b      	beq.n	8001e86 <__aeabi_dadd+0x6d2>
 8001d8e:	4665      	mov	r5, ip
 8001d90:	001e      	movs	r6, r3
 8001d92:	4691      	mov	r9, r2
 8001d94:	e63f      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001d96:	1a81      	subs	r1, r0, r2
 8001d98:	4688      	mov	r8, r1
 8001d9a:	45c1      	cmp	r9, r8
 8001d9c:	41a4      	sbcs	r4, r4
 8001d9e:	1af1      	subs	r1, r6, r3
 8001da0:	4264      	negs	r4, r4
 8001da2:	1b09      	subs	r1, r1, r4
 8001da4:	2480      	movs	r4, #128	@ 0x80
 8001da6:	0424      	lsls	r4, r4, #16
 8001da8:	4221      	tst	r1, r4
 8001daa:	d077      	beq.n	8001e9c <__aeabi_dadd+0x6e8>
 8001dac:	1a10      	subs	r0, r2, r0
 8001dae:	4282      	cmp	r2, r0
 8001db0:	4192      	sbcs	r2, r2
 8001db2:	0007      	movs	r7, r0
 8001db4:	1b9e      	subs	r6, r3, r6
 8001db6:	4252      	negs	r2, r2
 8001db8:	1ab6      	subs	r6, r6, r2
 8001dba:	4337      	orrs	r7, r6
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dadd+0x60c>
 8001dbe:	e0a0      	b.n	8001f02 <__aeabi_dadd+0x74e>
 8001dc0:	4665      	mov	r5, ip
 8001dc2:	2400      	movs	r4, #0
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	e63e      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001dc8:	075f      	lsls	r7, r3, #29
 8001dca:	08d2      	lsrs	r2, r2, #3
 8001dcc:	4665      	mov	r5, ip
 8001dce:	4317      	orrs	r7, r2
 8001dd0:	08d8      	lsrs	r0, r3, #3
 8001dd2:	e653      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001dd4:	1881      	adds	r1, r0, r2
 8001dd6:	4291      	cmp	r1, r2
 8001dd8:	4192      	sbcs	r2, r2
 8001dda:	18f0      	adds	r0, r6, r3
 8001ddc:	4252      	negs	r2, r2
 8001dde:	1880      	adds	r0, r0, r2
 8001de0:	0203      	lsls	r3, r0, #8
 8001de2:	d500      	bpl.n	8001de6 <__aeabi_dadd+0x632>
 8001de4:	e768      	b.n	8001cb8 <__aeabi_dadd+0x504>
 8001de6:	0747      	lsls	r7, r0, #29
 8001de8:	08c9      	lsrs	r1, r1, #3
 8001dea:	430f      	orrs	r7, r1
 8001dec:	08c0      	lsrs	r0, r0, #3
 8001dee:	2101      	movs	r1, #1
 8001df0:	e617      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001df2:	08d2      	lsrs	r2, r2, #3
 8001df4:	075f      	lsls	r7, r3, #29
 8001df6:	4317      	orrs	r7, r2
 8001df8:	08d8      	lsrs	r0, r3, #3
 8001dfa:	e63f      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	2600      	movs	r6, #0
 8001e00:	2700      	movs	r7, #0
 8001e02:	e620      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001e04:	2900      	cmp	r1, #0
 8001e06:	d156      	bne.n	8001eb6 <__aeabi_dadd+0x702>
 8001e08:	075f      	lsls	r7, r3, #29
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	4317      	orrs	r7, r2
 8001e0e:	08d8      	lsrs	r0, r3, #3
 8001e10:	e634      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001e12:	000c      	movs	r4, r1
 8001e14:	001e      	movs	r6, r3
 8001e16:	08d0      	lsrs	r0, r2, #3
 8001e18:	e629      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001e1a:	08c1      	lsrs	r1, r0, #3
 8001e1c:	0770      	lsls	r0, r6, #29
 8001e1e:	4301      	orrs	r1, r0
 8001e20:	08f0      	lsrs	r0, r6, #3
 8001e22:	2f00      	cmp	r7, #0
 8001e24:	d062      	beq.n	8001eec <__aeabi_dadd+0x738>
 8001e26:	2480      	movs	r4, #128	@ 0x80
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	4220      	tst	r0, r4
 8001e2c:	d007      	beq.n	8001e3e <__aeabi_dadd+0x68a>
 8001e2e:	08de      	lsrs	r6, r3, #3
 8001e30:	4226      	tst	r6, r4
 8001e32:	d104      	bne.n	8001e3e <__aeabi_dadd+0x68a>
 8001e34:	4665      	mov	r5, ip
 8001e36:	0030      	movs	r0, r6
 8001e38:	08d1      	lsrs	r1, r2, #3
 8001e3a:	075b      	lsls	r3, r3, #29
 8001e3c:	4319      	orrs	r1, r3
 8001e3e:	0f4f      	lsrs	r7, r1, #29
 8001e40:	00c9      	lsls	r1, r1, #3
 8001e42:	08c9      	lsrs	r1, r1, #3
 8001e44:	077f      	lsls	r7, r7, #29
 8001e46:	430f      	orrs	r7, r1
 8001e48:	e618      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001e4a:	000c      	movs	r4, r1
 8001e4c:	0030      	movs	r0, r6
 8001e4e:	3c20      	subs	r4, #32
 8001e50:	40e0      	lsrs	r0, r4
 8001e52:	4684      	mov	ip, r0
 8001e54:	2920      	cmp	r1, #32
 8001e56:	d005      	beq.n	8001e64 <__aeabi_dadd+0x6b0>
 8001e58:	2440      	movs	r4, #64	@ 0x40
 8001e5a:	1a61      	subs	r1, r4, r1
 8001e5c:	408e      	lsls	r6, r1
 8001e5e:	4649      	mov	r1, r9
 8001e60:	4331      	orrs	r1, r6
 8001e62:	4689      	mov	r9, r1
 8001e64:	4648      	mov	r0, r9
 8001e66:	1e41      	subs	r1, r0, #1
 8001e68:	4188      	sbcs	r0, r1
 8001e6a:	4661      	mov	r1, ip
 8001e6c:	0007      	movs	r7, r0
 8001e6e:	430f      	orrs	r7, r1
 8001e70:	e630      	b.n	8001ad4 <__aeabi_dadd+0x320>
 8001e72:	2120      	movs	r1, #32
 8001e74:	2700      	movs	r7, #0
 8001e76:	1a09      	subs	r1, r1, r0
 8001e78:	e50e      	b.n	8001898 <__aeabi_dadd+0xe4>
 8001e7a:	001e      	movs	r6, r3
 8001e7c:	2f00      	cmp	r7, #0
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dadd+0x6ce>
 8001e80:	e522      	b.n	80018c8 <__aeabi_dadd+0x114>
 8001e82:	2400      	movs	r4, #0
 8001e84:	e758      	b.n	8001d38 <__aeabi_dadd+0x584>
 8001e86:	2500      	movs	r5, #0
 8001e88:	2400      	movs	r4, #0
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	e5db      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	000007fe 	.word	0x000007fe
 8001e94:	000007ff 	.word	0x000007ff
 8001e98:	ff7fffff 	.word	0xff7fffff
 8001e9c:	4647      	mov	r7, r8
 8001e9e:	430f      	orrs	r7, r1
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dadd+0x6f0>
 8001ea2:	e747      	b.n	8001d34 <__aeabi_dadd+0x580>
 8001ea4:	000e      	movs	r6, r1
 8001ea6:	46c1      	mov	r9, r8
 8001ea8:	e5b5      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001eaa:	08df      	lsrs	r7, r3, #3
 8001eac:	0764      	lsls	r4, r4, #29
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4327      	orrs	r7, r4
 8001eb2:	0900      	lsrs	r0, r0, #4
 8001eb4:	e5b5      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	08c0      	lsrs	r0, r0, #3
 8001eba:	0777      	lsls	r7, r6, #29
 8001ebc:	4307      	orrs	r7, r0
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	08f0      	lsrs	r0, r6, #3
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dadd+0x714>
 8001ec6:	e5d9      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	0309      	lsls	r1, r1, #12
 8001ecc:	4208      	tst	r0, r1
 8001ece:	d007      	beq.n	8001ee0 <__aeabi_dadd+0x72c>
 8001ed0:	08dc      	lsrs	r4, r3, #3
 8001ed2:	420c      	tst	r4, r1
 8001ed4:	d104      	bne.n	8001ee0 <__aeabi_dadd+0x72c>
 8001ed6:	08d2      	lsrs	r2, r2, #3
 8001ed8:	075b      	lsls	r3, r3, #29
 8001eda:	431a      	orrs	r2, r3
 8001edc:	0017      	movs	r7, r2
 8001ede:	0020      	movs	r0, r4
 8001ee0:	0f7b      	lsrs	r3, r7, #29
 8001ee2:	00ff      	lsls	r7, r7, #3
 8001ee4:	08ff      	lsrs	r7, r7, #3
 8001ee6:	075b      	lsls	r3, r3, #29
 8001ee8:	431f      	orrs	r7, r3
 8001eea:	e5c7      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001eec:	000f      	movs	r7, r1
 8001eee:	e5c5      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <__aeabi_dadd+0x788>)
 8001ef2:	08d2      	lsrs	r2, r2, #3
 8001ef4:	4033      	ands	r3, r6
 8001ef6:	075f      	lsls	r7, r3, #29
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	2401      	movs	r4, #1
 8001efc:	4317      	orrs	r7, r2
 8001efe:	0b1e      	lsrs	r6, r3, #12
 8001f00:	e5a1      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001f02:	4226      	tst	r6, r4
 8001f04:	d012      	beq.n	8001f2c <__aeabi_dadd+0x778>
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <__aeabi_dadd+0x788>)
 8001f08:	4665      	mov	r5, ip
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	2401      	movs	r4, #1
 8001f0e:	401e      	ands	r6, r3
 8001f10:	e4e6      	b.n	80018e0 <__aeabi_dadd+0x12c>
 8001f12:	0021      	movs	r1, r4
 8001f14:	e585      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f16:	0017      	movs	r7, r2
 8001f18:	e5a8      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001f1a:	003a      	movs	r2, r7
 8001f1c:	e4d4      	b.n	80018c8 <__aeabi_dadd+0x114>
 8001f1e:	08db      	lsrs	r3, r3, #3
 8001f20:	0764      	lsls	r4, r4, #29
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0027      	movs	r7, r4
 8001f26:	2102      	movs	r1, #2
 8001f28:	0900      	lsrs	r0, r0, #4
 8001f2a:	e57a      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f2c:	08c0      	lsrs	r0, r0, #3
 8001f2e:	0777      	lsls	r7, r6, #29
 8001f30:	4307      	orrs	r7, r0
 8001f32:	4665      	mov	r5, ip
 8001f34:	2100      	movs	r1, #0
 8001f36:	08f0      	lsrs	r0, r6, #3
 8001f38:	e573      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	ff7fffff 	.word	0xff7fffff

08001f40 <__aeabi_ddiv>:
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f42:	46de      	mov	lr, fp
 8001f44:	4645      	mov	r5, r8
 8001f46:	4657      	mov	r7, sl
 8001f48:	464e      	mov	r6, r9
 8001f4a:	b5e0      	push	{r5, r6, r7, lr}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	9200      	str	r2, [sp, #0]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	030b      	lsls	r3, r1, #12
 8001f54:	0b1b      	lsrs	r3, r3, #12
 8001f56:	469b      	mov	fp, r3
 8001f58:	0fca      	lsrs	r2, r1, #31
 8001f5a:	004b      	lsls	r3, r1, #1
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	4680      	mov	r8, r0
 8001f60:	0d5b      	lsrs	r3, r3, #21
 8001f62:	9202      	str	r2, [sp, #8]
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x28>
 8001f66:	e098      	b.n	800209a <__aeabi_ddiv+0x15a>
 8001f68:	4a7c      	ldr	r2, [pc, #496]	@ (800215c <__aeabi_ddiv+0x21c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d037      	beq.n	8001fde <__aeabi_ddiv+0x9e>
 8001f6e:	4659      	mov	r1, fp
 8001f70:	0f42      	lsrs	r2, r0, #29
 8001f72:	00c9      	lsls	r1, r1, #3
 8001f74:	430a      	orrs	r2, r1
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	0409      	lsls	r1, r1, #16
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	00c2      	lsls	r2, r0, #3
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4a77      	ldr	r2, [pc, #476]	@ (8002160 <__aeabi_ddiv+0x220>)
 8001f82:	4689      	mov	r9, r1
 8001f84:	4692      	mov	sl, r2
 8001f86:	449a      	add	sl, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	9e00      	ldr	r6, [sp, #0]
 8001f90:	9f01      	ldr	r7, [sp, #4]
 8001f92:	033b      	lsls	r3, r7, #12
 8001f94:	0b1b      	lsrs	r3, r3, #12
 8001f96:	469b      	mov	fp, r3
 8001f98:	007b      	lsls	r3, r7, #1
 8001f9a:	0030      	movs	r0, r6
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	0ffd      	lsrs	r5, r7, #31
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d059      	beq.n	8002058 <__aeabi_ddiv+0x118>
 8001fa4:	4a6d      	ldr	r2, [pc, #436]	@ (800215c <__aeabi_ddiv+0x21c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d048      	beq.n	800203c <__aeabi_ddiv+0xfc>
 8001faa:	4659      	mov	r1, fp
 8001fac:	0f72      	lsrs	r2, r6, #29
 8001fae:	00c9      	lsls	r1, r1, #3
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	0409      	lsls	r1, r1, #16
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	468b      	mov	fp, r1
 8001fba:	4969      	ldr	r1, [pc, #420]	@ (8002160 <__aeabi_ddiv+0x220>)
 8001fbc:	00f2      	lsls	r2, r6, #3
 8001fbe:	468c      	mov	ip, r1
 8001fc0:	4651      	mov	r1, sl
 8001fc2:	4463      	add	r3, ip
 8001fc4:	1acb      	subs	r3, r1, r3
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	9e02      	ldr	r6, [sp, #8]
 8001fcc:	406e      	eors	r6, r5
 8001fce:	b2f6      	uxtb	r6, r6
 8001fd0:	2c0f      	cmp	r4, #15
 8001fd2:	d900      	bls.n	8001fd6 <__aeabi_ddiv+0x96>
 8001fd4:	e0ce      	b.n	8002174 <__aeabi_ddiv+0x234>
 8001fd6:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <__aeabi_ddiv+0x224>)
 8001fd8:	00a4      	lsls	r4, r4, #2
 8001fda:	591b      	ldr	r3, [r3, r4]
 8001fdc:	469f      	mov	pc, r3
 8001fde:	465a      	mov	r2, fp
 8001fe0:	4302      	orrs	r2, r0
 8001fe2:	4691      	mov	r9, r2
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_ddiv+0xa8>
 8001fe6:	e090      	b.n	800210a <__aeabi_ddiv+0x1ca>
 8001fe8:	469a      	mov	sl, r3
 8001fea:	2302      	movs	r3, #2
 8001fec:	4690      	mov	r8, r2
 8001fee:	2408      	movs	r4, #8
 8001ff0:	9303      	str	r3, [sp, #12]
 8001ff2:	e7cc      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 8001ff4:	46cb      	mov	fp, r9
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	9d02      	ldr	r5, [sp, #8]
 8001ffa:	9903      	ldr	r1, [sp, #12]
 8001ffc:	2902      	cmp	r1, #2
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0xc2>
 8002000:	e1de      	b.n	80023c0 <__aeabi_ddiv+0x480>
 8002002:	2903      	cmp	r1, #3
 8002004:	d100      	bne.n	8002008 <__aeabi_ddiv+0xc8>
 8002006:	e08d      	b.n	8002124 <__aeabi_ddiv+0x1e4>
 8002008:	2901      	cmp	r1, #1
 800200a:	d000      	beq.n	800200e <__aeabi_ddiv+0xce>
 800200c:	e179      	b.n	8002302 <__aeabi_ddiv+0x3c2>
 800200e:	002e      	movs	r6, r5
 8002010:	2200      	movs	r2, #0
 8002012:	2300      	movs	r3, #0
 8002014:	2400      	movs	r4, #0
 8002016:	4690      	mov	r8, r2
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	4323      	orrs	r3, r4
 800201c:	07f6      	lsls	r6, r6, #31
 800201e:	4333      	orrs	r3, r6
 8002020:	4640      	mov	r0, r8
 8002022:	0019      	movs	r1, r3
 8002024:	b007      	add	sp, #28
 8002026:	bcf0      	pop	{r4, r5, r6, r7}
 8002028:	46bb      	mov	fp, r7
 800202a:	46b2      	mov	sl, r6
 800202c:	46a9      	mov	r9, r5
 800202e:	46a0      	mov	r8, r4
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	2200      	movs	r2, #0
 8002034:	2400      	movs	r4, #0
 8002036:	4690      	mov	r8, r2
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <__aeabi_ddiv+0x21c>)
 800203a:	e7ed      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800203c:	465a      	mov	r2, fp
 800203e:	9b00      	ldr	r3, [sp, #0]
 8002040:	431a      	orrs	r2, r3
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <__aeabi_ddiv+0x228>)
 8002044:	469c      	mov	ip, r3
 8002046:	44e2      	add	sl, ip
 8002048:	2a00      	cmp	r2, #0
 800204a:	d159      	bne.n	8002100 <__aeabi_ddiv+0x1c0>
 800204c:	2302      	movs	r3, #2
 800204e:	431c      	orrs	r4, r3
 8002050:	2300      	movs	r3, #0
 8002052:	2102      	movs	r1, #2
 8002054:	469b      	mov	fp, r3
 8002056:	e7b8      	b.n	8001fca <__aeabi_ddiv+0x8a>
 8002058:	465a      	mov	r2, fp
 800205a:	9b00      	ldr	r3, [sp, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	d049      	beq.n	80020f4 <__aeabi_ddiv+0x1b4>
 8002060:	465b      	mov	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_ddiv+0x128>
 8002066:	e19c      	b.n	80023a2 <__aeabi_ddiv+0x462>
 8002068:	4658      	mov	r0, fp
 800206a:	f001 fb5d 	bl	8003728 <__clzsi2>
 800206e:	0002      	movs	r2, r0
 8002070:	0003      	movs	r3, r0
 8002072:	3a0b      	subs	r2, #11
 8002074:	271d      	movs	r7, #29
 8002076:	9e00      	ldr	r6, [sp, #0]
 8002078:	1aba      	subs	r2, r7, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4658      	mov	r0, fp
 800207e:	40d6      	lsrs	r6, r2
 8002080:	3908      	subs	r1, #8
 8002082:	4088      	lsls	r0, r1
 8002084:	0032      	movs	r2, r6
 8002086:	4302      	orrs	r2, r0
 8002088:	4693      	mov	fp, r2
 800208a:	9a00      	ldr	r2, [sp, #0]
 800208c:	408a      	lsls	r2, r1
 800208e:	4937      	ldr	r1, [pc, #220]	@ (800216c <__aeabi_ddiv+0x22c>)
 8002090:	4453      	add	r3, sl
 8002092:	468a      	mov	sl, r1
 8002094:	2100      	movs	r1, #0
 8002096:	449a      	add	sl, r3
 8002098:	e797      	b.n	8001fca <__aeabi_ddiv+0x8a>
 800209a:	465b      	mov	r3, fp
 800209c:	4303      	orrs	r3, r0
 800209e:	4699      	mov	r9, r3
 80020a0:	d021      	beq.n	80020e6 <__aeabi_ddiv+0x1a6>
 80020a2:	465b      	mov	r3, fp
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d100      	bne.n	80020aa <__aeabi_ddiv+0x16a>
 80020a8:	e169      	b.n	800237e <__aeabi_ddiv+0x43e>
 80020aa:	4658      	mov	r0, fp
 80020ac:	f001 fb3c 	bl	8003728 <__clzsi2>
 80020b0:	230b      	movs	r3, #11
 80020b2:	425b      	negs	r3, r3
 80020b4:	469c      	mov	ip, r3
 80020b6:	0002      	movs	r2, r0
 80020b8:	4484      	add	ip, r0
 80020ba:	4666      	mov	r6, ip
 80020bc:	231d      	movs	r3, #29
 80020be:	1b9b      	subs	r3, r3, r6
 80020c0:	0026      	movs	r6, r4
 80020c2:	0011      	movs	r1, r2
 80020c4:	4658      	mov	r0, fp
 80020c6:	40de      	lsrs	r6, r3
 80020c8:	3908      	subs	r1, #8
 80020ca:	4088      	lsls	r0, r1
 80020cc:	0033      	movs	r3, r6
 80020ce:	4303      	orrs	r3, r0
 80020d0:	4699      	mov	r9, r3
 80020d2:	0023      	movs	r3, r4
 80020d4:	408b      	lsls	r3, r1
 80020d6:	4698      	mov	r8, r3
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <__aeabi_ddiv+0x230>)
 80020da:	2400      	movs	r4, #0
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	469a      	mov	sl, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	9303      	str	r3, [sp, #12]
 80020e4:	e753      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4698      	mov	r8, r3
 80020ea:	469a      	mov	sl, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	2404      	movs	r4, #4
 80020f0:	9303      	str	r3, [sp, #12]
 80020f2:	e74c      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 80020f4:	2301      	movs	r3, #1
 80020f6:	431c      	orrs	r4, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	2101      	movs	r1, #1
 80020fc:	469b      	mov	fp, r3
 80020fe:	e764      	b.n	8001fca <__aeabi_ddiv+0x8a>
 8002100:	2303      	movs	r3, #3
 8002102:	0032      	movs	r2, r6
 8002104:	2103      	movs	r1, #3
 8002106:	431c      	orrs	r4, r3
 8002108:	e75f      	b.n	8001fca <__aeabi_ddiv+0x8a>
 800210a:	469a      	mov	sl, r3
 800210c:	2303      	movs	r3, #3
 800210e:	46d9      	mov	r9, fp
 8002110:	240c      	movs	r4, #12
 8002112:	9303      	str	r3, [sp, #12]
 8002114:	e73b      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 8002116:	2300      	movs	r3, #0
 8002118:	2480      	movs	r4, #128	@ 0x80
 800211a:	4698      	mov	r8, r3
 800211c:	2600      	movs	r6, #0
 800211e:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002120:	0324      	lsls	r4, r4, #12
 8002122:	e779      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002124:	2480      	movs	r4, #128	@ 0x80
 8002126:	465b      	mov	r3, fp
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	431c      	orrs	r4, r3
 800212c:	0324      	lsls	r4, r4, #12
 800212e:	002e      	movs	r6, r5
 8002130:	4690      	mov	r8, r2
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002134:	0b24      	lsrs	r4, r4, #12
 8002136:	e76f      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002138:	2480      	movs	r4, #128	@ 0x80
 800213a:	464b      	mov	r3, r9
 800213c:	0324      	lsls	r4, r4, #12
 800213e:	4223      	tst	r3, r4
 8002140:	d002      	beq.n	8002148 <__aeabi_ddiv+0x208>
 8002142:	465b      	mov	r3, fp
 8002144:	4223      	tst	r3, r4
 8002146:	d0f0      	beq.n	800212a <__aeabi_ddiv+0x1ea>
 8002148:	2480      	movs	r4, #128	@ 0x80
 800214a:	464b      	mov	r3, r9
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	431c      	orrs	r4, r3
 8002150:	0324      	lsls	r4, r4, #12
 8002152:	9e02      	ldr	r6, [sp, #8]
 8002154:	4b01      	ldr	r3, [pc, #4]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002156:	0b24      	lsrs	r4, r4, #12
 8002158:	e75e      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	000007ff 	.word	0x000007ff
 8002160:	fffffc01 	.word	0xfffffc01
 8002164:	0800d2a8 	.word	0x0800d2a8
 8002168:	fffff801 	.word	0xfffff801
 800216c:	000003f3 	.word	0x000003f3
 8002170:	fffffc0d 	.word	0xfffffc0d
 8002174:	45cb      	cmp	fp, r9
 8002176:	d200      	bcs.n	800217a <__aeabi_ddiv+0x23a>
 8002178:	e0f8      	b.n	800236c <__aeabi_ddiv+0x42c>
 800217a:	d100      	bne.n	800217e <__aeabi_ddiv+0x23e>
 800217c:	e0f3      	b.n	8002366 <__aeabi_ddiv+0x426>
 800217e:	2301      	movs	r3, #1
 8002180:	425b      	negs	r3, r3
 8002182:	469c      	mov	ip, r3
 8002184:	4644      	mov	r4, r8
 8002186:	4648      	mov	r0, r9
 8002188:	2500      	movs	r5, #0
 800218a:	44e2      	add	sl, ip
 800218c:	465b      	mov	r3, fp
 800218e:	0e17      	lsrs	r7, r2, #24
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	431f      	orrs	r7, r3
 8002194:	0c19      	lsrs	r1, r3, #16
 8002196:	043b      	lsls	r3, r7, #16
 8002198:	0212      	lsls	r2, r2, #8
 800219a:	9700      	str	r7, [sp, #0]
 800219c:	0c1f      	lsrs	r7, r3, #16
 800219e:	4691      	mov	r9, r2
 80021a0:	9102      	str	r1, [sp, #8]
 80021a2:	9703      	str	r7, [sp, #12]
 80021a4:	f7fe f848 	bl	8000238 <__aeabi_uidivmod>
 80021a8:	0002      	movs	r2, r0
 80021aa:	437a      	muls	r2, r7
 80021ac:	040b      	lsls	r3, r1, #16
 80021ae:	0c21      	lsrs	r1, r4, #16
 80021b0:	4680      	mov	r8, r0
 80021b2:	4319      	orrs	r1, r3
 80021b4:	428a      	cmp	r2, r1
 80021b6:	d909      	bls.n	80021cc <__aeabi_ddiv+0x28c>
 80021b8:	9f00      	ldr	r7, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	46bc      	mov	ip, r7
 80021be:	425b      	negs	r3, r3
 80021c0:	4461      	add	r1, ip
 80021c2:	469c      	mov	ip, r3
 80021c4:	44e0      	add	r8, ip
 80021c6:	428f      	cmp	r7, r1
 80021c8:	d800      	bhi.n	80021cc <__aeabi_ddiv+0x28c>
 80021ca:	e15c      	b.n	8002486 <__aeabi_ddiv+0x546>
 80021cc:	1a88      	subs	r0, r1, r2
 80021ce:	9902      	ldr	r1, [sp, #8]
 80021d0:	f7fe f832 	bl	8000238 <__aeabi_uidivmod>
 80021d4:	9a03      	ldr	r2, [sp, #12]
 80021d6:	0424      	lsls	r4, r4, #16
 80021d8:	4342      	muls	r2, r0
 80021da:	0409      	lsls	r1, r1, #16
 80021dc:	0c24      	lsrs	r4, r4, #16
 80021de:	0003      	movs	r3, r0
 80021e0:	430c      	orrs	r4, r1
 80021e2:	42a2      	cmp	r2, r4
 80021e4:	d906      	bls.n	80021f4 <__aeabi_ddiv+0x2b4>
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	468c      	mov	ip, r1
 80021ec:	4464      	add	r4, ip
 80021ee:	42a1      	cmp	r1, r4
 80021f0:	d800      	bhi.n	80021f4 <__aeabi_ddiv+0x2b4>
 80021f2:	e142      	b.n	800247a <__aeabi_ddiv+0x53a>
 80021f4:	1aa0      	subs	r0, r4, r2
 80021f6:	4642      	mov	r2, r8
 80021f8:	0412      	lsls	r2, r2, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	4693      	mov	fp, r2
 80021fe:	464b      	mov	r3, r9
 8002200:	4659      	mov	r1, fp
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	001f      	movs	r7, r3
 8002206:	9304      	str	r3, [sp, #16]
 8002208:	040b      	lsls	r3, r1, #16
 800220a:	4649      	mov	r1, r9
 800220c:	0409      	lsls	r1, r1, #16
 800220e:	0c09      	lsrs	r1, r1, #16
 8002210:	000c      	movs	r4, r1
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	435c      	muls	r4, r3
 8002216:	0c12      	lsrs	r2, r2, #16
 8002218:	437b      	muls	r3, r7
 800221a:	4688      	mov	r8, r1
 800221c:	4351      	muls	r1, r2
 800221e:	437a      	muls	r2, r7
 8002220:	0c27      	lsrs	r7, r4, #16
 8002222:	46bc      	mov	ip, r7
 8002224:	185b      	adds	r3, r3, r1
 8002226:	4463      	add	r3, ip
 8002228:	4299      	cmp	r1, r3
 800222a:	d903      	bls.n	8002234 <__aeabi_ddiv+0x2f4>
 800222c:	2180      	movs	r1, #128	@ 0x80
 800222e:	0249      	lsls	r1, r1, #9
 8002230:	468c      	mov	ip, r1
 8002232:	4462      	add	r2, ip
 8002234:	0c19      	lsrs	r1, r3, #16
 8002236:	0424      	lsls	r4, r4, #16
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	0c24      	lsrs	r4, r4, #16
 800223c:	188a      	adds	r2, r1, r2
 800223e:	191c      	adds	r4, r3, r4
 8002240:	4290      	cmp	r0, r2
 8002242:	d302      	bcc.n	800224a <__aeabi_ddiv+0x30a>
 8002244:	d116      	bne.n	8002274 <__aeabi_ddiv+0x334>
 8002246:	42a5      	cmp	r5, r4
 8002248:	d214      	bcs.n	8002274 <__aeabi_ddiv+0x334>
 800224a:	465b      	mov	r3, fp
 800224c:	9f00      	ldr	r7, [sp, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	444d      	add	r5, r9
 8002252:	9305      	str	r3, [sp, #20]
 8002254:	454d      	cmp	r5, r9
 8002256:	419b      	sbcs	r3, r3
 8002258:	46bc      	mov	ip, r7
 800225a:	425b      	negs	r3, r3
 800225c:	4463      	add	r3, ip
 800225e:	18c0      	adds	r0, r0, r3
 8002260:	4287      	cmp	r7, r0
 8002262:	d300      	bcc.n	8002266 <__aeabi_ddiv+0x326>
 8002264:	e102      	b.n	800246c <__aeabi_ddiv+0x52c>
 8002266:	4282      	cmp	r2, r0
 8002268:	d900      	bls.n	800226c <__aeabi_ddiv+0x32c>
 800226a:	e129      	b.n	80024c0 <__aeabi_ddiv+0x580>
 800226c:	d100      	bne.n	8002270 <__aeabi_ddiv+0x330>
 800226e:	e124      	b.n	80024ba <__aeabi_ddiv+0x57a>
 8002270:	9b05      	ldr	r3, [sp, #20]
 8002272:	469b      	mov	fp, r3
 8002274:	1b2c      	subs	r4, r5, r4
 8002276:	42a5      	cmp	r5, r4
 8002278:	41ad      	sbcs	r5, r5
 800227a:	9b00      	ldr	r3, [sp, #0]
 800227c:	1a80      	subs	r0, r0, r2
 800227e:	426d      	negs	r5, r5
 8002280:	1b40      	subs	r0, r0, r5
 8002282:	4283      	cmp	r3, r0
 8002284:	d100      	bne.n	8002288 <__aeabi_ddiv+0x348>
 8002286:	e10f      	b.n	80024a8 <__aeabi_ddiv+0x568>
 8002288:	9902      	ldr	r1, [sp, #8]
 800228a:	f7fd ffd5 	bl	8000238 <__aeabi_uidivmod>
 800228e:	9a03      	ldr	r2, [sp, #12]
 8002290:	040b      	lsls	r3, r1, #16
 8002292:	4342      	muls	r2, r0
 8002294:	0c21      	lsrs	r1, r4, #16
 8002296:	0005      	movs	r5, r0
 8002298:	4319      	orrs	r1, r3
 800229a:	428a      	cmp	r2, r1
 800229c:	d900      	bls.n	80022a0 <__aeabi_ddiv+0x360>
 800229e:	e0cb      	b.n	8002438 <__aeabi_ddiv+0x4f8>
 80022a0:	1a88      	subs	r0, r1, r2
 80022a2:	9902      	ldr	r1, [sp, #8]
 80022a4:	f7fd ffc8 	bl	8000238 <__aeabi_uidivmod>
 80022a8:	9a03      	ldr	r2, [sp, #12]
 80022aa:	0424      	lsls	r4, r4, #16
 80022ac:	4342      	muls	r2, r0
 80022ae:	0409      	lsls	r1, r1, #16
 80022b0:	0c24      	lsrs	r4, r4, #16
 80022b2:	0003      	movs	r3, r0
 80022b4:	430c      	orrs	r4, r1
 80022b6:	42a2      	cmp	r2, r4
 80022b8:	d900      	bls.n	80022bc <__aeabi_ddiv+0x37c>
 80022ba:	e0ca      	b.n	8002452 <__aeabi_ddiv+0x512>
 80022bc:	4641      	mov	r1, r8
 80022be:	1aa4      	subs	r4, r4, r2
 80022c0:	042a      	lsls	r2, r5, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	9f04      	ldr	r7, [sp, #16]
 80022c6:	0413      	lsls	r3, r2, #16
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	4359      	muls	r1, r3
 80022cc:	4640      	mov	r0, r8
 80022ce:	437b      	muls	r3, r7
 80022d0:	469c      	mov	ip, r3
 80022d2:	0c15      	lsrs	r5, r2, #16
 80022d4:	4368      	muls	r0, r5
 80022d6:	0c0b      	lsrs	r3, r1, #16
 80022d8:	4484      	add	ip, r0
 80022da:	4463      	add	r3, ip
 80022dc:	437d      	muls	r5, r7
 80022de:	4298      	cmp	r0, r3
 80022e0:	d903      	bls.n	80022ea <__aeabi_ddiv+0x3aa>
 80022e2:	2080      	movs	r0, #128	@ 0x80
 80022e4:	0240      	lsls	r0, r0, #9
 80022e6:	4684      	mov	ip, r0
 80022e8:	4465      	add	r5, ip
 80022ea:	0c18      	lsrs	r0, r3, #16
 80022ec:	0409      	lsls	r1, r1, #16
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	0c09      	lsrs	r1, r1, #16
 80022f2:	1940      	adds	r0, r0, r5
 80022f4:	185b      	adds	r3, r3, r1
 80022f6:	4284      	cmp	r4, r0
 80022f8:	d327      	bcc.n	800234a <__aeabi_ddiv+0x40a>
 80022fa:	d023      	beq.n	8002344 <__aeabi_ddiv+0x404>
 80022fc:	2301      	movs	r3, #1
 80022fe:	0035      	movs	r5, r6
 8002300:	431a      	orrs	r2, r3
 8002302:	4b94      	ldr	r3, [pc, #592]	@ (8002554 <__aeabi_ddiv+0x614>)
 8002304:	4453      	add	r3, sl
 8002306:	2b00      	cmp	r3, #0
 8002308:	dd60      	ble.n	80023cc <__aeabi_ddiv+0x48c>
 800230a:	0751      	lsls	r1, r2, #29
 800230c:	d000      	beq.n	8002310 <__aeabi_ddiv+0x3d0>
 800230e:	e086      	b.n	800241e <__aeabi_ddiv+0x4de>
 8002310:	002e      	movs	r6, r5
 8002312:	08d1      	lsrs	r1, r2, #3
 8002314:	465a      	mov	r2, fp
 8002316:	01d2      	lsls	r2, r2, #7
 8002318:	d506      	bpl.n	8002328 <__aeabi_ddiv+0x3e8>
 800231a:	465a      	mov	r2, fp
 800231c:	4b8e      	ldr	r3, [pc, #568]	@ (8002558 <__aeabi_ddiv+0x618>)
 800231e:	401a      	ands	r2, r3
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	4693      	mov	fp, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4453      	add	r3, sl
 8002328:	4a8c      	ldr	r2, [pc, #560]	@ (800255c <__aeabi_ddiv+0x61c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	dd00      	ble.n	8002330 <__aeabi_ddiv+0x3f0>
 800232e:	e680      	b.n	8002032 <__aeabi_ddiv+0xf2>
 8002330:	465a      	mov	r2, fp
 8002332:	0752      	lsls	r2, r2, #29
 8002334:	430a      	orrs	r2, r1
 8002336:	4690      	mov	r8, r2
 8002338:	465a      	mov	r2, fp
 800233a:	055b      	lsls	r3, r3, #21
 800233c:	0254      	lsls	r4, r2, #9
 800233e:	0b24      	lsrs	r4, r4, #12
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	e669      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002344:	0035      	movs	r5, r6
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0db      	beq.n	8002302 <__aeabi_ddiv+0x3c2>
 800234a:	9d00      	ldr	r5, [sp, #0]
 800234c:	1e51      	subs	r1, r2, #1
 800234e:	46ac      	mov	ip, r5
 8002350:	4464      	add	r4, ip
 8002352:	42ac      	cmp	r4, r5
 8002354:	d200      	bcs.n	8002358 <__aeabi_ddiv+0x418>
 8002356:	e09e      	b.n	8002496 <__aeabi_ddiv+0x556>
 8002358:	4284      	cmp	r4, r0
 800235a:	d200      	bcs.n	800235e <__aeabi_ddiv+0x41e>
 800235c:	e0e1      	b.n	8002522 <__aeabi_ddiv+0x5e2>
 800235e:	d100      	bne.n	8002362 <__aeabi_ddiv+0x422>
 8002360:	e0ee      	b.n	8002540 <__aeabi_ddiv+0x600>
 8002362:	000a      	movs	r2, r1
 8002364:	e7ca      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 8002366:	4542      	cmp	r2, r8
 8002368:	d900      	bls.n	800236c <__aeabi_ddiv+0x42c>
 800236a:	e708      	b.n	800217e <__aeabi_ddiv+0x23e>
 800236c:	464b      	mov	r3, r9
 800236e:	07dc      	lsls	r4, r3, #31
 8002370:	0858      	lsrs	r0, r3, #1
 8002372:	4643      	mov	r3, r8
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	431c      	orrs	r4, r3
 8002378:	4643      	mov	r3, r8
 800237a:	07dd      	lsls	r5, r3, #31
 800237c:	e706      	b.n	800218c <__aeabi_ddiv+0x24c>
 800237e:	f001 f9d3 	bl	8003728 <__clzsi2>
 8002382:	2315      	movs	r3, #21
 8002384:	469c      	mov	ip, r3
 8002386:	4484      	add	ip, r0
 8002388:	0002      	movs	r2, r0
 800238a:	4663      	mov	r3, ip
 800238c:	3220      	adds	r2, #32
 800238e:	2b1c      	cmp	r3, #28
 8002390:	dc00      	bgt.n	8002394 <__aeabi_ddiv+0x454>
 8002392:	e692      	b.n	80020ba <__aeabi_ddiv+0x17a>
 8002394:	0023      	movs	r3, r4
 8002396:	3808      	subs	r0, #8
 8002398:	4083      	lsls	r3, r0
 800239a:	4699      	mov	r9, r3
 800239c:	2300      	movs	r3, #0
 800239e:	4698      	mov	r8, r3
 80023a0:	e69a      	b.n	80020d8 <__aeabi_ddiv+0x198>
 80023a2:	f001 f9c1 	bl	8003728 <__clzsi2>
 80023a6:	0002      	movs	r2, r0
 80023a8:	0003      	movs	r3, r0
 80023aa:	3215      	adds	r2, #21
 80023ac:	3320      	adds	r3, #32
 80023ae:	2a1c      	cmp	r2, #28
 80023b0:	dc00      	bgt.n	80023b4 <__aeabi_ddiv+0x474>
 80023b2:	e65f      	b.n	8002074 <__aeabi_ddiv+0x134>
 80023b4:	9900      	ldr	r1, [sp, #0]
 80023b6:	3808      	subs	r0, #8
 80023b8:	4081      	lsls	r1, r0
 80023ba:	2200      	movs	r2, #0
 80023bc:	468b      	mov	fp, r1
 80023be:	e666      	b.n	800208e <__aeabi_ddiv+0x14e>
 80023c0:	2200      	movs	r2, #0
 80023c2:	002e      	movs	r6, r5
 80023c4:	2400      	movs	r4, #0
 80023c6:	4690      	mov	r8, r2
 80023c8:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <__aeabi_ddiv+0x620>)
 80023ca:	e625      	b.n	8002018 <__aeabi_ddiv+0xd8>
 80023cc:	002e      	movs	r6, r5
 80023ce:	2101      	movs	r1, #1
 80023d0:	1ac9      	subs	r1, r1, r3
 80023d2:	2938      	cmp	r1, #56	@ 0x38
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_ddiv+0x498>
 80023d6:	e61b      	b.n	8002010 <__aeabi_ddiv+0xd0>
 80023d8:	291f      	cmp	r1, #31
 80023da:	dc7e      	bgt.n	80024da <__aeabi_ddiv+0x59a>
 80023dc:	4861      	ldr	r0, [pc, #388]	@ (8002564 <__aeabi_ddiv+0x624>)
 80023de:	0014      	movs	r4, r2
 80023e0:	4450      	add	r0, sl
 80023e2:	465b      	mov	r3, fp
 80023e4:	4082      	lsls	r2, r0
 80023e6:	4083      	lsls	r3, r0
 80023e8:	40cc      	lsrs	r4, r1
 80023ea:	1e50      	subs	r0, r2, #1
 80023ec:	4182      	sbcs	r2, r0
 80023ee:	4323      	orrs	r3, r4
 80023f0:	431a      	orrs	r2, r3
 80023f2:	465b      	mov	r3, fp
 80023f4:	40cb      	lsrs	r3, r1
 80023f6:	0751      	lsls	r1, r2, #29
 80023f8:	d009      	beq.n	800240e <__aeabi_ddiv+0x4ce>
 80023fa:	210f      	movs	r1, #15
 80023fc:	4011      	ands	r1, r2
 80023fe:	2904      	cmp	r1, #4
 8002400:	d005      	beq.n	800240e <__aeabi_ddiv+0x4ce>
 8002402:	1d11      	adds	r1, r2, #4
 8002404:	4291      	cmp	r1, r2
 8002406:	4192      	sbcs	r2, r2
 8002408:	4252      	negs	r2, r2
 800240a:	189b      	adds	r3, r3, r2
 800240c:	000a      	movs	r2, r1
 800240e:	0219      	lsls	r1, r3, #8
 8002410:	d400      	bmi.n	8002414 <__aeabi_ddiv+0x4d4>
 8002412:	e09b      	b.n	800254c <__aeabi_ddiv+0x60c>
 8002414:	2200      	movs	r2, #0
 8002416:	2301      	movs	r3, #1
 8002418:	2400      	movs	r4, #0
 800241a:	4690      	mov	r8, r2
 800241c:	e5fc      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800241e:	210f      	movs	r1, #15
 8002420:	4011      	ands	r1, r2
 8002422:	2904      	cmp	r1, #4
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x4e8>
 8002426:	e773      	b.n	8002310 <__aeabi_ddiv+0x3d0>
 8002428:	1d11      	adds	r1, r2, #4
 800242a:	4291      	cmp	r1, r2
 800242c:	4192      	sbcs	r2, r2
 800242e:	4252      	negs	r2, r2
 8002430:	002e      	movs	r6, r5
 8002432:	08c9      	lsrs	r1, r1, #3
 8002434:	4493      	add	fp, r2
 8002436:	e76d      	b.n	8002314 <__aeabi_ddiv+0x3d4>
 8002438:	9b00      	ldr	r3, [sp, #0]
 800243a:	3d01      	subs	r5, #1
 800243c:	469c      	mov	ip, r3
 800243e:	4461      	add	r1, ip
 8002440:	428b      	cmp	r3, r1
 8002442:	d900      	bls.n	8002446 <__aeabi_ddiv+0x506>
 8002444:	e72c      	b.n	80022a0 <__aeabi_ddiv+0x360>
 8002446:	428a      	cmp	r2, r1
 8002448:	d800      	bhi.n	800244c <__aeabi_ddiv+0x50c>
 800244a:	e729      	b.n	80022a0 <__aeabi_ddiv+0x360>
 800244c:	1e85      	subs	r5, r0, #2
 800244e:	4461      	add	r1, ip
 8002450:	e726      	b.n	80022a0 <__aeabi_ddiv+0x360>
 8002452:	9900      	ldr	r1, [sp, #0]
 8002454:	3b01      	subs	r3, #1
 8002456:	468c      	mov	ip, r1
 8002458:	4464      	add	r4, ip
 800245a:	42a1      	cmp	r1, r4
 800245c:	d900      	bls.n	8002460 <__aeabi_ddiv+0x520>
 800245e:	e72d      	b.n	80022bc <__aeabi_ddiv+0x37c>
 8002460:	42a2      	cmp	r2, r4
 8002462:	d800      	bhi.n	8002466 <__aeabi_ddiv+0x526>
 8002464:	e72a      	b.n	80022bc <__aeabi_ddiv+0x37c>
 8002466:	1e83      	subs	r3, r0, #2
 8002468:	4464      	add	r4, ip
 800246a:	e727      	b.n	80022bc <__aeabi_ddiv+0x37c>
 800246c:	4287      	cmp	r7, r0
 800246e:	d000      	beq.n	8002472 <__aeabi_ddiv+0x532>
 8002470:	e6fe      	b.n	8002270 <__aeabi_ddiv+0x330>
 8002472:	45a9      	cmp	r9, r5
 8002474:	d900      	bls.n	8002478 <__aeabi_ddiv+0x538>
 8002476:	e6fb      	b.n	8002270 <__aeabi_ddiv+0x330>
 8002478:	e6f5      	b.n	8002266 <__aeabi_ddiv+0x326>
 800247a:	42a2      	cmp	r2, r4
 800247c:	d800      	bhi.n	8002480 <__aeabi_ddiv+0x540>
 800247e:	e6b9      	b.n	80021f4 <__aeabi_ddiv+0x2b4>
 8002480:	1e83      	subs	r3, r0, #2
 8002482:	4464      	add	r4, ip
 8002484:	e6b6      	b.n	80021f4 <__aeabi_ddiv+0x2b4>
 8002486:	428a      	cmp	r2, r1
 8002488:	d800      	bhi.n	800248c <__aeabi_ddiv+0x54c>
 800248a:	e69f      	b.n	80021cc <__aeabi_ddiv+0x28c>
 800248c:	46bc      	mov	ip, r7
 800248e:	1e83      	subs	r3, r0, #2
 8002490:	4698      	mov	r8, r3
 8002492:	4461      	add	r1, ip
 8002494:	e69a      	b.n	80021cc <__aeabi_ddiv+0x28c>
 8002496:	000a      	movs	r2, r1
 8002498:	4284      	cmp	r4, r0
 800249a:	d000      	beq.n	800249e <__aeabi_ddiv+0x55e>
 800249c:	e72e      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 800249e:	454b      	cmp	r3, r9
 80024a0:	d000      	beq.n	80024a4 <__aeabi_ddiv+0x564>
 80024a2:	e72b      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 80024a4:	0035      	movs	r5, r6
 80024a6:	e72c      	b.n	8002302 <__aeabi_ddiv+0x3c2>
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <__aeabi_ddiv+0x614>)
 80024aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002568 <__aeabi_ddiv+0x628>)
 80024ac:	4453      	add	r3, sl
 80024ae:	4592      	cmp	sl, r2
 80024b0:	db43      	blt.n	800253a <__aeabi_ddiv+0x5fa>
 80024b2:	2201      	movs	r2, #1
 80024b4:	2100      	movs	r1, #0
 80024b6:	4493      	add	fp, r2
 80024b8:	e72c      	b.n	8002314 <__aeabi_ddiv+0x3d4>
 80024ba:	42ac      	cmp	r4, r5
 80024bc:	d800      	bhi.n	80024c0 <__aeabi_ddiv+0x580>
 80024be:	e6d7      	b.n	8002270 <__aeabi_ddiv+0x330>
 80024c0:	2302      	movs	r3, #2
 80024c2:	425b      	negs	r3, r3
 80024c4:	469c      	mov	ip, r3
 80024c6:	9900      	ldr	r1, [sp, #0]
 80024c8:	444d      	add	r5, r9
 80024ca:	454d      	cmp	r5, r9
 80024cc:	419b      	sbcs	r3, r3
 80024ce:	44e3      	add	fp, ip
 80024d0:	468c      	mov	ip, r1
 80024d2:	425b      	negs	r3, r3
 80024d4:	4463      	add	r3, ip
 80024d6:	18c0      	adds	r0, r0, r3
 80024d8:	e6cc      	b.n	8002274 <__aeabi_ddiv+0x334>
 80024da:	201f      	movs	r0, #31
 80024dc:	4240      	negs	r0, r0
 80024de:	1ac3      	subs	r3, r0, r3
 80024e0:	4658      	mov	r0, fp
 80024e2:	40d8      	lsrs	r0, r3
 80024e4:	2920      	cmp	r1, #32
 80024e6:	d004      	beq.n	80024f2 <__aeabi_ddiv+0x5b2>
 80024e8:	4659      	mov	r1, fp
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <__aeabi_ddiv+0x62c>)
 80024ec:	4453      	add	r3, sl
 80024ee:	4099      	lsls	r1, r3
 80024f0:	430a      	orrs	r2, r1
 80024f2:	1e53      	subs	r3, r2, #1
 80024f4:	419a      	sbcs	r2, r3
 80024f6:	2307      	movs	r3, #7
 80024f8:	0019      	movs	r1, r3
 80024fa:	4302      	orrs	r2, r0
 80024fc:	2400      	movs	r4, #0
 80024fe:	4011      	ands	r1, r2
 8002500:	4213      	tst	r3, r2
 8002502:	d009      	beq.n	8002518 <__aeabi_ddiv+0x5d8>
 8002504:	3308      	adds	r3, #8
 8002506:	4013      	ands	r3, r2
 8002508:	2b04      	cmp	r3, #4
 800250a:	d01d      	beq.n	8002548 <__aeabi_ddiv+0x608>
 800250c:	1d13      	adds	r3, r2, #4
 800250e:	4293      	cmp	r3, r2
 8002510:	4189      	sbcs	r1, r1
 8002512:	001a      	movs	r2, r3
 8002514:	4249      	negs	r1, r1
 8002516:	0749      	lsls	r1, r1, #29
 8002518:	08d2      	lsrs	r2, r2, #3
 800251a:	430a      	orrs	r2, r1
 800251c:	4690      	mov	r8, r2
 800251e:	2300      	movs	r3, #0
 8002520:	e57a      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002522:	4649      	mov	r1, r9
 8002524:	9f00      	ldr	r7, [sp, #0]
 8002526:	004d      	lsls	r5, r1, #1
 8002528:	454d      	cmp	r5, r9
 800252a:	4189      	sbcs	r1, r1
 800252c:	46bc      	mov	ip, r7
 800252e:	4249      	negs	r1, r1
 8002530:	4461      	add	r1, ip
 8002532:	46a9      	mov	r9, r5
 8002534:	3a02      	subs	r2, #2
 8002536:	1864      	adds	r4, r4, r1
 8002538:	e7ae      	b.n	8002498 <__aeabi_ddiv+0x558>
 800253a:	2201      	movs	r2, #1
 800253c:	4252      	negs	r2, r2
 800253e:	e746      	b.n	80023ce <__aeabi_ddiv+0x48e>
 8002540:	4599      	cmp	r9, r3
 8002542:	d3ee      	bcc.n	8002522 <__aeabi_ddiv+0x5e2>
 8002544:	000a      	movs	r2, r1
 8002546:	e7aa      	b.n	800249e <__aeabi_ddiv+0x55e>
 8002548:	2100      	movs	r1, #0
 800254a:	e7e5      	b.n	8002518 <__aeabi_ddiv+0x5d8>
 800254c:	0759      	lsls	r1, r3, #29
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	0b1c      	lsrs	r4, r3, #12
 8002552:	e7e1      	b.n	8002518 <__aeabi_ddiv+0x5d8>
 8002554:	000003ff 	.word	0x000003ff
 8002558:	feffffff 	.word	0xfeffffff
 800255c:	000007fe 	.word	0x000007fe
 8002560:	000007ff 	.word	0x000007ff
 8002564:	0000041e 	.word	0x0000041e
 8002568:	fffffc02 	.word	0xfffffc02
 800256c:	0000043e 	.word	0x0000043e

08002570 <__eqdf2>:
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	4657      	mov	r7, sl
 8002574:	46de      	mov	lr, fp
 8002576:	464e      	mov	r6, r9
 8002578:	4645      	mov	r5, r8
 800257a:	b5e0      	push	{r5, r6, r7, lr}
 800257c:	000d      	movs	r5, r1
 800257e:	0004      	movs	r4, r0
 8002580:	0fe8      	lsrs	r0, r5, #31
 8002582:	4683      	mov	fp, r0
 8002584:	0309      	lsls	r1, r1, #12
 8002586:	0fd8      	lsrs	r0, r3, #31
 8002588:	0b09      	lsrs	r1, r1, #12
 800258a:	4682      	mov	sl, r0
 800258c:	4819      	ldr	r0, [pc, #100]	@ (80025f4 <__eqdf2+0x84>)
 800258e:	468c      	mov	ip, r1
 8002590:	031f      	lsls	r7, r3, #12
 8002592:	0069      	lsls	r1, r5, #1
 8002594:	005e      	lsls	r6, r3, #1
 8002596:	0d49      	lsrs	r1, r1, #21
 8002598:	0b3f      	lsrs	r7, r7, #12
 800259a:	0d76      	lsrs	r6, r6, #21
 800259c:	4281      	cmp	r1, r0
 800259e:	d018      	beq.n	80025d2 <__eqdf2+0x62>
 80025a0:	4286      	cmp	r6, r0
 80025a2:	d00f      	beq.n	80025c4 <__eqdf2+0x54>
 80025a4:	2001      	movs	r0, #1
 80025a6:	42b1      	cmp	r1, r6
 80025a8:	d10d      	bne.n	80025c6 <__eqdf2+0x56>
 80025aa:	45bc      	cmp	ip, r7
 80025ac:	d10b      	bne.n	80025c6 <__eqdf2+0x56>
 80025ae:	4294      	cmp	r4, r2
 80025b0:	d109      	bne.n	80025c6 <__eqdf2+0x56>
 80025b2:	45d3      	cmp	fp, sl
 80025b4:	d01c      	beq.n	80025f0 <__eqdf2+0x80>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d105      	bne.n	80025c6 <__eqdf2+0x56>
 80025ba:	4660      	mov	r0, ip
 80025bc:	4320      	orrs	r0, r4
 80025be:	1e43      	subs	r3, r0, #1
 80025c0:	4198      	sbcs	r0, r3
 80025c2:	e000      	b.n	80025c6 <__eqdf2+0x56>
 80025c4:	2001      	movs	r0, #1
 80025c6:	bcf0      	pop	{r4, r5, r6, r7}
 80025c8:	46bb      	mov	fp, r7
 80025ca:	46b2      	mov	sl, r6
 80025cc:	46a9      	mov	r9, r5
 80025ce:	46a0      	mov	r8, r4
 80025d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d2:	2001      	movs	r0, #1
 80025d4:	428e      	cmp	r6, r1
 80025d6:	d1f6      	bne.n	80025c6 <__eqdf2+0x56>
 80025d8:	4661      	mov	r1, ip
 80025da:	4339      	orrs	r1, r7
 80025dc:	000f      	movs	r7, r1
 80025de:	4317      	orrs	r7, r2
 80025e0:	4327      	orrs	r7, r4
 80025e2:	d1f0      	bne.n	80025c6 <__eqdf2+0x56>
 80025e4:	465b      	mov	r3, fp
 80025e6:	4652      	mov	r2, sl
 80025e8:	1a98      	subs	r0, r3, r2
 80025ea:	1e43      	subs	r3, r0, #1
 80025ec:	4198      	sbcs	r0, r3
 80025ee:	e7ea      	b.n	80025c6 <__eqdf2+0x56>
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7e8      	b.n	80025c6 <__eqdf2+0x56>
 80025f4:	000007ff 	.word	0x000007ff

080025f8 <__gedf2>:
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	4657      	mov	r7, sl
 80025fc:	464e      	mov	r6, r9
 80025fe:	4645      	mov	r5, r8
 8002600:	46de      	mov	lr, fp
 8002602:	b5e0      	push	{r5, r6, r7, lr}
 8002604:	000d      	movs	r5, r1
 8002606:	030e      	lsls	r6, r1, #12
 8002608:	0049      	lsls	r1, r1, #1
 800260a:	0d49      	lsrs	r1, r1, #21
 800260c:	468a      	mov	sl, r1
 800260e:	0fdf      	lsrs	r7, r3, #31
 8002610:	0fe9      	lsrs	r1, r5, #31
 8002612:	46bc      	mov	ip, r7
 8002614:	b083      	sub	sp, #12
 8002616:	4f2f      	ldr	r7, [pc, #188]	@ (80026d4 <__gedf2+0xdc>)
 8002618:	0004      	movs	r4, r0
 800261a:	4680      	mov	r8, r0
 800261c:	9101      	str	r1, [sp, #4]
 800261e:	0058      	lsls	r0, r3, #1
 8002620:	0319      	lsls	r1, r3, #12
 8002622:	4691      	mov	r9, r2
 8002624:	0b36      	lsrs	r6, r6, #12
 8002626:	0b09      	lsrs	r1, r1, #12
 8002628:	0d40      	lsrs	r0, r0, #21
 800262a:	45ba      	cmp	sl, r7
 800262c:	d01d      	beq.n	800266a <__gedf2+0x72>
 800262e:	42b8      	cmp	r0, r7
 8002630:	d00d      	beq.n	800264e <__gedf2+0x56>
 8002632:	4657      	mov	r7, sl
 8002634:	2f00      	cmp	r7, #0
 8002636:	d12a      	bne.n	800268e <__gedf2+0x96>
 8002638:	4334      	orrs	r4, r6
 800263a:	2800      	cmp	r0, #0
 800263c:	d124      	bne.n	8002688 <__gedf2+0x90>
 800263e:	430a      	orrs	r2, r1
 8002640:	d036      	beq.n	80026b0 <__gedf2+0xb8>
 8002642:	2c00      	cmp	r4, #0
 8002644:	d141      	bne.n	80026ca <__gedf2+0xd2>
 8002646:	4663      	mov	r3, ip
 8002648:	0058      	lsls	r0, r3, #1
 800264a:	3801      	subs	r0, #1
 800264c:	e015      	b.n	800267a <__gedf2+0x82>
 800264e:	4311      	orrs	r1, r2
 8002650:	d138      	bne.n	80026c4 <__gedf2+0xcc>
 8002652:	4653      	mov	r3, sl
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <__gedf2+0x64>
 8002658:	4326      	orrs	r6, r4
 800265a:	d0f4      	beq.n	8002646 <__gedf2+0x4e>
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	4563      	cmp	r3, ip
 8002660:	d107      	bne.n	8002672 <__gedf2+0x7a>
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	0058      	lsls	r0, r3, #1
 8002666:	3801      	subs	r0, #1
 8002668:	e007      	b.n	800267a <__gedf2+0x82>
 800266a:	4326      	orrs	r6, r4
 800266c:	d12a      	bne.n	80026c4 <__gedf2+0xcc>
 800266e:	4550      	cmp	r0, sl
 8002670:	d021      	beq.n	80026b6 <__gedf2+0xbe>
 8002672:	2001      	movs	r0, #1
 8002674:	9b01      	ldr	r3, [sp, #4]
 8002676:	425f      	negs	r7, r3
 8002678:	4338      	orrs	r0, r7
 800267a:	b003      	add	sp, #12
 800267c:	bcf0      	pop	{r4, r5, r6, r7}
 800267e:	46bb      	mov	fp, r7
 8002680:	46b2      	mov	sl, r6
 8002682:	46a9      	mov	r9, r5
 8002684:	46a0      	mov	r8, r4
 8002686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002688:	2c00      	cmp	r4, #0
 800268a:	d0dc      	beq.n	8002646 <__gedf2+0x4e>
 800268c:	e7e6      	b.n	800265c <__gedf2+0x64>
 800268e:	2800      	cmp	r0, #0
 8002690:	d0ef      	beq.n	8002672 <__gedf2+0x7a>
 8002692:	9b01      	ldr	r3, [sp, #4]
 8002694:	4563      	cmp	r3, ip
 8002696:	d1ec      	bne.n	8002672 <__gedf2+0x7a>
 8002698:	4582      	cmp	sl, r0
 800269a:	dcea      	bgt.n	8002672 <__gedf2+0x7a>
 800269c:	dbe1      	blt.n	8002662 <__gedf2+0x6a>
 800269e:	428e      	cmp	r6, r1
 80026a0:	d8e7      	bhi.n	8002672 <__gedf2+0x7a>
 80026a2:	d1de      	bne.n	8002662 <__gedf2+0x6a>
 80026a4:	45c8      	cmp	r8, r9
 80026a6:	d8e4      	bhi.n	8002672 <__gedf2+0x7a>
 80026a8:	2000      	movs	r0, #0
 80026aa:	45c8      	cmp	r8, r9
 80026ac:	d2e5      	bcs.n	800267a <__gedf2+0x82>
 80026ae:	e7d8      	b.n	8002662 <__gedf2+0x6a>
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	d0e2      	beq.n	800267a <__gedf2+0x82>
 80026b4:	e7dd      	b.n	8002672 <__gedf2+0x7a>
 80026b6:	4311      	orrs	r1, r2
 80026b8:	d104      	bne.n	80026c4 <__gedf2+0xcc>
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	4563      	cmp	r3, ip
 80026be:	d1d8      	bne.n	8002672 <__gedf2+0x7a>
 80026c0:	2000      	movs	r0, #0
 80026c2:	e7da      	b.n	800267a <__gedf2+0x82>
 80026c4:	2002      	movs	r0, #2
 80026c6:	4240      	negs	r0, r0
 80026c8:	e7d7      	b.n	800267a <__gedf2+0x82>
 80026ca:	9b01      	ldr	r3, [sp, #4]
 80026cc:	4563      	cmp	r3, ip
 80026ce:	d0e6      	beq.n	800269e <__gedf2+0xa6>
 80026d0:	e7cf      	b.n	8002672 <__gedf2+0x7a>
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	000007ff 	.word	0x000007ff

080026d8 <__ledf2>:
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	4657      	mov	r7, sl
 80026dc:	464e      	mov	r6, r9
 80026de:	4645      	mov	r5, r8
 80026e0:	46de      	mov	lr, fp
 80026e2:	b5e0      	push	{r5, r6, r7, lr}
 80026e4:	000d      	movs	r5, r1
 80026e6:	030e      	lsls	r6, r1, #12
 80026e8:	0049      	lsls	r1, r1, #1
 80026ea:	0d49      	lsrs	r1, r1, #21
 80026ec:	468a      	mov	sl, r1
 80026ee:	0fdf      	lsrs	r7, r3, #31
 80026f0:	0fe9      	lsrs	r1, r5, #31
 80026f2:	46bc      	mov	ip, r7
 80026f4:	b083      	sub	sp, #12
 80026f6:	4f2e      	ldr	r7, [pc, #184]	@ (80027b0 <__ledf2+0xd8>)
 80026f8:	0004      	movs	r4, r0
 80026fa:	4680      	mov	r8, r0
 80026fc:	9101      	str	r1, [sp, #4]
 80026fe:	0058      	lsls	r0, r3, #1
 8002700:	0319      	lsls	r1, r3, #12
 8002702:	4691      	mov	r9, r2
 8002704:	0b36      	lsrs	r6, r6, #12
 8002706:	0b09      	lsrs	r1, r1, #12
 8002708:	0d40      	lsrs	r0, r0, #21
 800270a:	45ba      	cmp	sl, r7
 800270c:	d01e      	beq.n	800274c <__ledf2+0x74>
 800270e:	42b8      	cmp	r0, r7
 8002710:	d00d      	beq.n	800272e <__ledf2+0x56>
 8002712:	4657      	mov	r7, sl
 8002714:	2f00      	cmp	r7, #0
 8002716:	d127      	bne.n	8002768 <__ledf2+0x90>
 8002718:	4334      	orrs	r4, r6
 800271a:	2800      	cmp	r0, #0
 800271c:	d133      	bne.n	8002786 <__ledf2+0xae>
 800271e:	430a      	orrs	r2, r1
 8002720:	d034      	beq.n	800278c <__ledf2+0xb4>
 8002722:	2c00      	cmp	r4, #0
 8002724:	d140      	bne.n	80027a8 <__ledf2+0xd0>
 8002726:	4663      	mov	r3, ip
 8002728:	0058      	lsls	r0, r3, #1
 800272a:	3801      	subs	r0, #1
 800272c:	e015      	b.n	800275a <__ledf2+0x82>
 800272e:	4311      	orrs	r1, r2
 8002730:	d112      	bne.n	8002758 <__ledf2+0x80>
 8002732:	4653      	mov	r3, sl
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <__ledf2+0x64>
 8002738:	4326      	orrs	r6, r4
 800273a:	d0f4      	beq.n	8002726 <__ledf2+0x4e>
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	4563      	cmp	r3, ip
 8002740:	d01d      	beq.n	800277e <__ledf2+0xa6>
 8002742:	2001      	movs	r0, #1
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	425f      	negs	r7, r3
 8002748:	4338      	orrs	r0, r7
 800274a:	e006      	b.n	800275a <__ledf2+0x82>
 800274c:	4326      	orrs	r6, r4
 800274e:	d103      	bne.n	8002758 <__ledf2+0x80>
 8002750:	4550      	cmp	r0, sl
 8002752:	d1f6      	bne.n	8002742 <__ledf2+0x6a>
 8002754:	4311      	orrs	r1, r2
 8002756:	d01c      	beq.n	8002792 <__ledf2+0xba>
 8002758:	2002      	movs	r0, #2
 800275a:	b003      	add	sp, #12
 800275c:	bcf0      	pop	{r4, r5, r6, r7}
 800275e:	46bb      	mov	fp, r7
 8002760:	46b2      	mov	sl, r6
 8002762:	46a9      	mov	r9, r5
 8002764:	46a0      	mov	r8, r4
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002768:	2800      	cmp	r0, #0
 800276a:	d0ea      	beq.n	8002742 <__ledf2+0x6a>
 800276c:	9b01      	ldr	r3, [sp, #4]
 800276e:	4563      	cmp	r3, ip
 8002770:	d1e7      	bne.n	8002742 <__ledf2+0x6a>
 8002772:	4582      	cmp	sl, r0
 8002774:	dce5      	bgt.n	8002742 <__ledf2+0x6a>
 8002776:	db02      	blt.n	800277e <__ledf2+0xa6>
 8002778:	428e      	cmp	r6, r1
 800277a:	d8e2      	bhi.n	8002742 <__ledf2+0x6a>
 800277c:	d00e      	beq.n	800279c <__ledf2+0xc4>
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	0058      	lsls	r0, r3, #1
 8002782:	3801      	subs	r0, #1
 8002784:	e7e9      	b.n	800275a <__ledf2+0x82>
 8002786:	2c00      	cmp	r4, #0
 8002788:	d0cd      	beq.n	8002726 <__ledf2+0x4e>
 800278a:	e7d7      	b.n	800273c <__ledf2+0x64>
 800278c:	2c00      	cmp	r4, #0
 800278e:	d0e4      	beq.n	800275a <__ledf2+0x82>
 8002790:	e7d7      	b.n	8002742 <__ledf2+0x6a>
 8002792:	9b01      	ldr	r3, [sp, #4]
 8002794:	2000      	movs	r0, #0
 8002796:	4563      	cmp	r3, ip
 8002798:	d0df      	beq.n	800275a <__ledf2+0x82>
 800279a:	e7d2      	b.n	8002742 <__ledf2+0x6a>
 800279c:	45c8      	cmp	r8, r9
 800279e:	d8d0      	bhi.n	8002742 <__ledf2+0x6a>
 80027a0:	2000      	movs	r0, #0
 80027a2:	45c8      	cmp	r8, r9
 80027a4:	d2d9      	bcs.n	800275a <__ledf2+0x82>
 80027a6:	e7ea      	b.n	800277e <__ledf2+0xa6>
 80027a8:	9b01      	ldr	r3, [sp, #4]
 80027aa:	4563      	cmp	r3, ip
 80027ac:	d0e4      	beq.n	8002778 <__ledf2+0xa0>
 80027ae:	e7c8      	b.n	8002742 <__ledf2+0x6a>
 80027b0:	000007ff 	.word	0x000007ff

080027b4 <__aeabi_dmul>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	4657      	mov	r7, sl
 80027b8:	464e      	mov	r6, r9
 80027ba:	46de      	mov	lr, fp
 80027bc:	4645      	mov	r5, r8
 80027be:	b5e0      	push	{r5, r6, r7, lr}
 80027c0:	001f      	movs	r7, r3
 80027c2:	030b      	lsls	r3, r1, #12
 80027c4:	0b1b      	lsrs	r3, r3, #12
 80027c6:	0016      	movs	r6, r2
 80027c8:	469a      	mov	sl, r3
 80027ca:	0fca      	lsrs	r2, r1, #31
 80027cc:	004b      	lsls	r3, r1, #1
 80027ce:	0004      	movs	r4, r0
 80027d0:	4691      	mov	r9, r2
 80027d2:	b085      	sub	sp, #20
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	d100      	bne.n	80027da <__aeabi_dmul+0x26>
 80027d8:	e1cf      	b.n	8002b7a <__aeabi_dmul+0x3c6>
 80027da:	4acd      	ldr	r2, [pc, #820]	@ (8002b10 <__aeabi_dmul+0x35c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d055      	beq.n	800288c <__aeabi_dmul+0xd8>
 80027e0:	4651      	mov	r1, sl
 80027e2:	0f42      	lsrs	r2, r0, #29
 80027e4:	00c9      	lsls	r1, r1, #3
 80027e6:	430a      	orrs	r2, r1
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	0409      	lsls	r1, r1, #16
 80027ec:	4311      	orrs	r1, r2
 80027ee:	00c2      	lsls	r2, r0, #3
 80027f0:	4690      	mov	r8, r2
 80027f2:	4ac8      	ldr	r2, [pc, #800]	@ (8002b14 <__aeabi_dmul+0x360>)
 80027f4:	468a      	mov	sl, r1
 80027f6:	4693      	mov	fp, r2
 80027f8:	449b      	add	fp, r3
 80027fa:	2300      	movs	r3, #0
 80027fc:	2500      	movs	r5, #0
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	033c      	lsls	r4, r7, #12
 8002802:	007b      	lsls	r3, r7, #1
 8002804:	0ffa      	lsrs	r2, r7, #31
 8002806:	9601      	str	r6, [sp, #4]
 8002808:	0b24      	lsrs	r4, r4, #12
 800280a:	0d5b      	lsrs	r3, r3, #21
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	d100      	bne.n	8002812 <__aeabi_dmul+0x5e>
 8002810:	e188      	b.n	8002b24 <__aeabi_dmul+0x370>
 8002812:	4abf      	ldr	r2, [pc, #764]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <__aeabi_dmul+0x66>
 8002818:	e092      	b.n	8002940 <__aeabi_dmul+0x18c>
 800281a:	4abe      	ldr	r2, [pc, #760]	@ (8002b14 <__aeabi_dmul+0x360>)
 800281c:	4694      	mov	ip, r2
 800281e:	4463      	add	r3, ip
 8002820:	449b      	add	fp, r3
 8002822:	2d0a      	cmp	r5, #10
 8002824:	dc42      	bgt.n	80028ac <__aeabi_dmul+0xf8>
 8002826:	00e4      	lsls	r4, r4, #3
 8002828:	0f73      	lsrs	r3, r6, #29
 800282a:	4323      	orrs	r3, r4
 800282c:	2480      	movs	r4, #128	@ 0x80
 800282e:	4649      	mov	r1, r9
 8002830:	0424      	lsls	r4, r4, #16
 8002832:	431c      	orrs	r4, r3
 8002834:	00f3      	lsls	r3, r6, #3
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	9b00      	ldr	r3, [sp, #0]
 800283a:	2000      	movs	r0, #0
 800283c:	4059      	eors	r1, r3
 800283e:	b2cb      	uxtb	r3, r1
 8002840:	9303      	str	r3, [sp, #12]
 8002842:	2d02      	cmp	r5, #2
 8002844:	dc00      	bgt.n	8002848 <__aeabi_dmul+0x94>
 8002846:	e094      	b.n	8002972 <__aeabi_dmul+0x1be>
 8002848:	2301      	movs	r3, #1
 800284a:	40ab      	lsls	r3, r5
 800284c:	001d      	movs	r5, r3
 800284e:	23a6      	movs	r3, #166	@ 0xa6
 8002850:	002a      	movs	r2, r5
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	401a      	ands	r2, r3
 8002856:	421d      	tst	r5, r3
 8002858:	d000      	beq.n	800285c <__aeabi_dmul+0xa8>
 800285a:	e229      	b.n	8002cb0 <__aeabi_dmul+0x4fc>
 800285c:	2390      	movs	r3, #144	@ 0x90
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	421d      	tst	r5, r3
 8002862:	d100      	bne.n	8002866 <__aeabi_dmul+0xb2>
 8002864:	e24d      	b.n	8002d02 <__aeabi_dmul+0x54e>
 8002866:	2300      	movs	r3, #0
 8002868:	2480      	movs	r4, #128	@ 0x80
 800286a:	4699      	mov	r9, r3
 800286c:	0324      	lsls	r4, r4, #12
 800286e:	4ba8      	ldr	r3, [pc, #672]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002870:	0010      	movs	r0, r2
 8002872:	464a      	mov	r2, r9
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	4323      	orrs	r3, r4
 8002878:	07d2      	lsls	r2, r2, #31
 800287a:	4313      	orrs	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	b005      	add	sp, #20
 8002880:	bcf0      	pop	{r4, r5, r6, r7}
 8002882:	46bb      	mov	fp, r7
 8002884:	46b2      	mov	sl, r6
 8002886:	46a9      	mov	r9, r5
 8002888:	46a0      	mov	r8, r4
 800288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288c:	4652      	mov	r2, sl
 800288e:	4302      	orrs	r2, r0
 8002890:	4690      	mov	r8, r2
 8002892:	d000      	beq.n	8002896 <__aeabi_dmul+0xe2>
 8002894:	e1ac      	b.n	8002bf0 <__aeabi_dmul+0x43c>
 8002896:	469b      	mov	fp, r3
 8002898:	2302      	movs	r3, #2
 800289a:	4692      	mov	sl, r2
 800289c:	2508      	movs	r5, #8
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	e7ae      	b.n	8002800 <__aeabi_dmul+0x4c>
 80028a2:	9b00      	ldr	r3, [sp, #0]
 80028a4:	46a2      	mov	sl, r4
 80028a6:	4699      	mov	r9, r3
 80028a8:	9b01      	ldr	r3, [sp, #4]
 80028aa:	4698      	mov	r8, r3
 80028ac:	9b02      	ldr	r3, [sp, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dmul+0x100>
 80028b2:	e1ca      	b.n	8002c4a <__aeabi_dmul+0x496>
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d100      	bne.n	80028ba <__aeabi_dmul+0x106>
 80028b8:	e192      	b.n	8002be0 <__aeabi_dmul+0x42c>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d110      	bne.n	80028e0 <__aeabi_dmul+0x12c>
 80028be:	2300      	movs	r3, #0
 80028c0:	2400      	movs	r4, #0
 80028c2:	2200      	movs	r2, #0
 80028c4:	e7d4      	b.n	8002870 <__aeabi_dmul+0xbc>
 80028c6:	2201      	movs	r2, #1
 80028c8:	087b      	lsrs	r3, r7, #1
 80028ca:	403a      	ands	r2, r7
 80028cc:	4313      	orrs	r3, r2
 80028ce:	4652      	mov	r2, sl
 80028d0:	07d2      	lsls	r2, r2, #31
 80028d2:	4313      	orrs	r3, r2
 80028d4:	4698      	mov	r8, r3
 80028d6:	4653      	mov	r3, sl
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	469a      	mov	sl, r3
 80028dc:	9b03      	ldr	r3, [sp, #12]
 80028de:	4699      	mov	r9, r3
 80028e0:	465b      	mov	r3, fp
 80028e2:	1c58      	adds	r0, r3, #1
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	445b      	add	r3, fp
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_dmul+0x13c>
 80028ee:	e1b1      	b.n	8002c54 <__aeabi_dmul+0x4a0>
 80028f0:	4642      	mov	r2, r8
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	d00b      	beq.n	800290e <__aeabi_dmul+0x15a>
 80028f6:	220f      	movs	r2, #15
 80028f8:	4641      	mov	r1, r8
 80028fa:	400a      	ands	r2, r1
 80028fc:	2a04      	cmp	r2, #4
 80028fe:	d006      	beq.n	800290e <__aeabi_dmul+0x15a>
 8002900:	4642      	mov	r2, r8
 8002902:	1d11      	adds	r1, r2, #4
 8002904:	4541      	cmp	r1, r8
 8002906:	4192      	sbcs	r2, r2
 8002908:	4688      	mov	r8, r1
 800290a:	4252      	negs	r2, r2
 800290c:	4492      	add	sl, r2
 800290e:	4652      	mov	r2, sl
 8002910:	01d2      	lsls	r2, r2, #7
 8002912:	d506      	bpl.n	8002922 <__aeabi_dmul+0x16e>
 8002914:	4652      	mov	r2, sl
 8002916:	4b80      	ldr	r3, [pc, #512]	@ (8002b18 <__aeabi_dmul+0x364>)
 8002918:	401a      	ands	r2, r3
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	4692      	mov	sl, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	18c3      	adds	r3, r0, r3
 8002922:	4a7e      	ldr	r2, [pc, #504]	@ (8002b1c <__aeabi_dmul+0x368>)
 8002924:	4293      	cmp	r3, r2
 8002926:	dd00      	ble.n	800292a <__aeabi_dmul+0x176>
 8002928:	e18f      	b.n	8002c4a <__aeabi_dmul+0x496>
 800292a:	4642      	mov	r2, r8
 800292c:	08d1      	lsrs	r1, r2, #3
 800292e:	4652      	mov	r2, sl
 8002930:	0752      	lsls	r2, r2, #29
 8002932:	430a      	orrs	r2, r1
 8002934:	4651      	mov	r1, sl
 8002936:	055b      	lsls	r3, r3, #21
 8002938:	024c      	lsls	r4, r1, #9
 800293a:	0b24      	lsrs	r4, r4, #12
 800293c:	0d5b      	lsrs	r3, r3, #21
 800293e:	e797      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002940:	4b73      	ldr	r3, [pc, #460]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002942:	4326      	orrs	r6, r4
 8002944:	469c      	mov	ip, r3
 8002946:	44e3      	add	fp, ip
 8002948:	2e00      	cmp	r6, #0
 800294a:	d100      	bne.n	800294e <__aeabi_dmul+0x19a>
 800294c:	e16f      	b.n	8002c2e <__aeabi_dmul+0x47a>
 800294e:	2303      	movs	r3, #3
 8002950:	4649      	mov	r1, r9
 8002952:	431d      	orrs	r5, r3
 8002954:	9b00      	ldr	r3, [sp, #0]
 8002956:	4059      	eors	r1, r3
 8002958:	b2cb      	uxtb	r3, r1
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	2d0a      	cmp	r5, #10
 800295e:	dd00      	ble.n	8002962 <__aeabi_dmul+0x1ae>
 8002960:	e133      	b.n	8002bca <__aeabi_dmul+0x416>
 8002962:	2301      	movs	r3, #1
 8002964:	40ab      	lsls	r3, r5
 8002966:	001d      	movs	r5, r3
 8002968:	2303      	movs	r3, #3
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	2288      	movs	r2, #136	@ 0x88
 800296e:	422a      	tst	r2, r5
 8002970:	d197      	bne.n	80028a2 <__aeabi_dmul+0xee>
 8002972:	4642      	mov	r2, r8
 8002974:	4643      	mov	r3, r8
 8002976:	0412      	lsls	r2, r2, #16
 8002978:	0c12      	lsrs	r2, r2, #16
 800297a:	0016      	movs	r6, r2
 800297c:	9801      	ldr	r0, [sp, #4]
 800297e:	0c1d      	lsrs	r5, r3, #16
 8002980:	0c03      	lsrs	r3, r0, #16
 8002982:	0400      	lsls	r0, r0, #16
 8002984:	0c00      	lsrs	r0, r0, #16
 8002986:	4346      	muls	r6, r0
 8002988:	46b4      	mov	ip, r6
 800298a:	001e      	movs	r6, r3
 800298c:	436e      	muls	r6, r5
 800298e:	9600      	str	r6, [sp, #0]
 8002990:	0016      	movs	r6, r2
 8002992:	0007      	movs	r7, r0
 8002994:	435e      	muls	r6, r3
 8002996:	4661      	mov	r1, ip
 8002998:	46b0      	mov	r8, r6
 800299a:	436f      	muls	r7, r5
 800299c:	0c0e      	lsrs	r6, r1, #16
 800299e:	44b8      	add	r8, r7
 80029a0:	4446      	add	r6, r8
 80029a2:	42b7      	cmp	r7, r6
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x1fe>
 80029a6:	2180      	movs	r1, #128	@ 0x80
 80029a8:	0249      	lsls	r1, r1, #9
 80029aa:	4688      	mov	r8, r1
 80029ac:	9f00      	ldr	r7, [sp, #0]
 80029ae:	4447      	add	r7, r8
 80029b0:	9700      	str	r7, [sp, #0]
 80029b2:	4661      	mov	r1, ip
 80029b4:	0409      	lsls	r1, r1, #16
 80029b6:	0c09      	lsrs	r1, r1, #16
 80029b8:	0c37      	lsrs	r7, r6, #16
 80029ba:	0436      	lsls	r6, r6, #16
 80029bc:	468c      	mov	ip, r1
 80029be:	0031      	movs	r1, r6
 80029c0:	4461      	add	r1, ip
 80029c2:	9101      	str	r1, [sp, #4]
 80029c4:	0011      	movs	r1, r2
 80029c6:	0c26      	lsrs	r6, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	4361      	muls	r1, r4
 80029ce:	468c      	mov	ip, r1
 80029d0:	0021      	movs	r1, r4
 80029d2:	4369      	muls	r1, r5
 80029d4:	4689      	mov	r9, r1
 80029d6:	4661      	mov	r1, ip
 80029d8:	0c09      	lsrs	r1, r1, #16
 80029da:	4688      	mov	r8, r1
 80029dc:	4372      	muls	r2, r6
 80029de:	444a      	add	r2, r9
 80029e0:	4442      	add	r2, r8
 80029e2:	4375      	muls	r5, r6
 80029e4:	4591      	cmp	r9, r2
 80029e6:	d903      	bls.n	80029f0 <__aeabi_dmul+0x23c>
 80029e8:	2180      	movs	r1, #128	@ 0x80
 80029ea:	0249      	lsls	r1, r1, #9
 80029ec:	4688      	mov	r8, r1
 80029ee:	4445      	add	r5, r8
 80029f0:	0c11      	lsrs	r1, r2, #16
 80029f2:	4688      	mov	r8, r1
 80029f4:	4661      	mov	r1, ip
 80029f6:	0409      	lsls	r1, r1, #16
 80029f8:	0c09      	lsrs	r1, r1, #16
 80029fa:	468c      	mov	ip, r1
 80029fc:	0412      	lsls	r2, r2, #16
 80029fe:	4462      	add	r2, ip
 8002a00:	18b9      	adds	r1, r7, r2
 8002a02:	9102      	str	r1, [sp, #8]
 8002a04:	4651      	mov	r1, sl
 8002a06:	0c09      	lsrs	r1, r1, #16
 8002a08:	468c      	mov	ip, r1
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	040f      	lsls	r7, r1, #16
 8002a0e:	0c3f      	lsrs	r7, r7, #16
 8002a10:	0039      	movs	r1, r7
 8002a12:	4341      	muls	r1, r0
 8002a14:	4445      	add	r5, r8
 8002a16:	4688      	mov	r8, r1
 8002a18:	4661      	mov	r1, ip
 8002a1a:	4341      	muls	r1, r0
 8002a1c:	468a      	mov	sl, r1
 8002a1e:	4641      	mov	r1, r8
 8002a20:	4660      	mov	r0, ip
 8002a22:	0c09      	lsrs	r1, r1, #16
 8002a24:	4689      	mov	r9, r1
 8002a26:	4358      	muls	r0, r3
 8002a28:	437b      	muls	r3, r7
 8002a2a:	4453      	add	r3, sl
 8002a2c:	444b      	add	r3, r9
 8002a2e:	459a      	cmp	sl, r3
 8002a30:	d903      	bls.n	8002a3a <__aeabi_dmul+0x286>
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0249      	lsls	r1, r1, #9
 8002a36:	4689      	mov	r9, r1
 8002a38:	4448      	add	r0, r9
 8002a3a:	0c19      	lsrs	r1, r3, #16
 8002a3c:	4689      	mov	r9, r1
 8002a3e:	4641      	mov	r1, r8
 8002a40:	0409      	lsls	r1, r1, #16
 8002a42:	0c09      	lsrs	r1, r1, #16
 8002a44:	4688      	mov	r8, r1
 8002a46:	0039      	movs	r1, r7
 8002a48:	4361      	muls	r1, r4
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	4443      	add	r3, r8
 8002a4e:	4688      	mov	r8, r1
 8002a50:	4661      	mov	r1, ip
 8002a52:	434c      	muls	r4, r1
 8002a54:	4371      	muls	r1, r6
 8002a56:	468c      	mov	ip, r1
 8002a58:	4641      	mov	r1, r8
 8002a5a:	4377      	muls	r7, r6
 8002a5c:	0c0e      	lsrs	r6, r1, #16
 8002a5e:	193f      	adds	r7, r7, r4
 8002a60:	19f6      	adds	r6, r6, r7
 8002a62:	4448      	add	r0, r9
 8002a64:	42b4      	cmp	r4, r6
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x2bc>
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0249      	lsls	r1, r1, #9
 8002a6c:	4689      	mov	r9, r1
 8002a6e:	44cc      	add	ip, r9
 8002a70:	9902      	ldr	r1, [sp, #8]
 8002a72:	9f00      	ldr	r7, [sp, #0]
 8002a74:	4689      	mov	r9, r1
 8002a76:	0431      	lsls	r1, r6, #16
 8002a78:	444f      	add	r7, r9
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	4297      	cmp	r7, r2
 8002a80:	4192      	sbcs	r2, r2
 8002a82:	040c      	lsls	r4, r1, #16
 8002a84:	0c24      	lsrs	r4, r4, #16
 8002a86:	444c      	add	r4, r9
 8002a88:	18ff      	adds	r7, r7, r3
 8002a8a:	4252      	negs	r2, r2
 8002a8c:	1964      	adds	r4, r4, r5
 8002a8e:	18a1      	adds	r1, r4, r2
 8002a90:	429f      	cmp	r7, r3
 8002a92:	419b      	sbcs	r3, r3
 8002a94:	4688      	mov	r8, r1
 8002a96:	4682      	mov	sl, r0
 8002a98:	425b      	negs	r3, r3
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4590      	cmp	r8, r2
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	42ac      	cmp	r4, r5
 8002aa2:	41a4      	sbcs	r4, r4
 8002aa4:	44c2      	add	sl, r8
 8002aa6:	44d1      	add	r9, sl
 8002aa8:	4252      	negs	r2, r2
 8002aaa:	4264      	negs	r4, r4
 8002aac:	4314      	orrs	r4, r2
 8002aae:	4599      	cmp	r9, r3
 8002ab0:	419b      	sbcs	r3, r3
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4192      	sbcs	r2, r2
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	4252      	negs	r2, r2
 8002aba:	4313      	orrs	r3, r2
 8002abc:	464a      	mov	r2, r9
 8002abe:	0c36      	lsrs	r6, r6, #16
 8002ac0:	19a4      	adds	r4, r4, r6
 8002ac2:	18e3      	adds	r3, r4, r3
 8002ac4:	4463      	add	r3, ip
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	0dd2      	lsrs	r2, r2, #23
 8002aca:	431a      	orrs	r2, r3
 8002acc:	9901      	ldr	r1, [sp, #4]
 8002ace:	4692      	mov	sl, r2
 8002ad0:	027a      	lsls	r2, r7, #9
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	1e50      	subs	r0, r2, #1
 8002ad6:	4182      	sbcs	r2, r0
 8002ad8:	0dff      	lsrs	r7, r7, #23
 8002ada:	4317      	orrs	r7, r2
 8002adc:	464a      	mov	r2, r9
 8002ade:	0252      	lsls	r2, r2, #9
 8002ae0:	4317      	orrs	r7, r2
 8002ae2:	46b8      	mov	r8, r7
 8002ae4:	01db      	lsls	r3, r3, #7
 8002ae6:	d500      	bpl.n	8002aea <__aeabi_dmul+0x336>
 8002ae8:	e6ed      	b.n	80028c6 <__aeabi_dmul+0x112>
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <__aeabi_dmul+0x36c>)
 8002aec:	9a03      	ldr	r2, [sp, #12]
 8002aee:	445b      	add	r3, fp
 8002af0:	4691      	mov	r9, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	dc00      	bgt.n	8002af8 <__aeabi_dmul+0x344>
 8002af6:	e0ac      	b.n	8002c52 <__aeabi_dmul+0x49e>
 8002af8:	003a      	movs	r2, r7
 8002afa:	0752      	lsls	r2, r2, #29
 8002afc:	d100      	bne.n	8002b00 <__aeabi_dmul+0x34c>
 8002afe:	e710      	b.n	8002922 <__aeabi_dmul+0x16e>
 8002b00:	220f      	movs	r2, #15
 8002b02:	4658      	mov	r0, fp
 8002b04:	403a      	ands	r2, r7
 8002b06:	2a04      	cmp	r2, #4
 8002b08:	d000      	beq.n	8002b0c <__aeabi_dmul+0x358>
 8002b0a:	e6f9      	b.n	8002900 <__aeabi_dmul+0x14c>
 8002b0c:	e709      	b.n	8002922 <__aeabi_dmul+0x16e>
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	000007ff 	.word	0x000007ff
 8002b14:	fffffc01 	.word	0xfffffc01
 8002b18:	feffffff 	.word	0xfeffffff
 8002b1c:	000007fe 	.word	0x000007fe
 8002b20:	000003ff 	.word	0x000003ff
 8002b24:	0022      	movs	r2, r4
 8002b26:	4332      	orrs	r2, r6
 8002b28:	d06f      	beq.n	8002c0a <__aeabi_dmul+0x456>
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dmul+0x37c>
 8002b2e:	e0c2      	b.n	8002cb6 <__aeabi_dmul+0x502>
 8002b30:	0020      	movs	r0, r4
 8002b32:	f000 fdf9 	bl	8003728 <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3a0b      	subs	r2, #11
 8002b3c:	201d      	movs	r0, #29
 8002b3e:	1a82      	subs	r2, r0, r2
 8002b40:	0030      	movs	r0, r6
 8002b42:	0019      	movs	r1, r3
 8002b44:	40d0      	lsrs	r0, r2
 8002b46:	3908      	subs	r1, #8
 8002b48:	408c      	lsls	r4, r1
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	4322      	orrs	r2, r4
 8002b4e:	0034      	movs	r4, r6
 8002b50:	408c      	lsls	r4, r1
 8002b52:	4659      	mov	r1, fp
 8002b54:	1acb      	subs	r3, r1, r3
 8002b56:	4986      	ldr	r1, [pc, #536]	@ (8002d70 <__aeabi_dmul+0x5bc>)
 8002b58:	468b      	mov	fp, r1
 8002b5a:	449b      	add	fp, r3
 8002b5c:	2d0a      	cmp	r5, #10
 8002b5e:	dd00      	ble.n	8002b62 <__aeabi_dmul+0x3ae>
 8002b60:	e6a4      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002b62:	4649      	mov	r1, r9
 8002b64:	9b00      	ldr	r3, [sp, #0]
 8002b66:	9401      	str	r4, [sp, #4]
 8002b68:	4059      	eors	r1, r3
 8002b6a:	b2cb      	uxtb	r3, r1
 8002b6c:	0014      	movs	r4, r2
 8002b6e:	2000      	movs	r0, #0
 8002b70:	9303      	str	r3, [sp, #12]
 8002b72:	2d02      	cmp	r5, #2
 8002b74:	dd00      	ble.n	8002b78 <__aeabi_dmul+0x3c4>
 8002b76:	e667      	b.n	8002848 <__aeabi_dmul+0x94>
 8002b78:	e6fb      	b.n	8002972 <__aeabi_dmul+0x1be>
 8002b7a:	4653      	mov	r3, sl
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	4698      	mov	r8, r3
 8002b80:	d03c      	beq.n	8002bfc <__aeabi_dmul+0x448>
 8002b82:	4653      	mov	r3, sl
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dmul+0x3d6>
 8002b88:	e0a3      	b.n	8002cd2 <__aeabi_dmul+0x51e>
 8002b8a:	4650      	mov	r0, sl
 8002b8c:	f000 fdcc 	bl	8003728 <__clzsi2>
 8002b90:	230b      	movs	r3, #11
 8002b92:	425b      	negs	r3, r3
 8002b94:	469c      	mov	ip, r3
 8002b96:	0002      	movs	r2, r0
 8002b98:	4484      	add	ip, r0
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	4650      	mov	r0, sl
 8002b9e:	3908      	subs	r1, #8
 8002ba0:	4088      	lsls	r0, r1
 8002ba2:	231d      	movs	r3, #29
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	4660      	mov	r0, ip
 8002ba8:	1a1b      	subs	r3, r3, r0
 8002baa:	0020      	movs	r0, r4
 8002bac:	40d8      	lsrs	r0, r3
 8002bae:	0003      	movs	r3, r0
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4303      	orrs	r3, r0
 8002bb4:	469a      	mov	sl, r3
 8002bb6:	0023      	movs	r3, r4
 8002bb8:	408b      	lsls	r3, r1
 8002bba:	4698      	mov	r8, r3
 8002bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d70 <__aeabi_dmul+0x5bc>)
 8002bbe:	2500      	movs	r5, #0
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	469b      	mov	fp, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	e61a      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002bca:	2d0f      	cmp	r5, #15
 8002bcc:	d000      	beq.n	8002bd0 <__aeabi_dmul+0x41c>
 8002bce:	e0c9      	b.n	8002d64 <__aeabi_dmul+0x5b0>
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	4652      	mov	r2, sl
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	421a      	tst	r2, r3
 8002bd8:	d002      	beq.n	8002be0 <__aeabi_dmul+0x42c>
 8002bda:	421c      	tst	r4, r3
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dmul+0x42c>
 8002bde:	e092      	b.n	8002d06 <__aeabi_dmul+0x552>
 8002be0:	2480      	movs	r4, #128	@ 0x80
 8002be2:	4653      	mov	r3, sl
 8002be4:	0324      	lsls	r4, r4, #12
 8002be6:	431c      	orrs	r4, r3
 8002be8:	0324      	lsls	r4, r4, #12
 8002bea:	4642      	mov	r2, r8
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	e63e      	b.n	800286e <__aeabi_dmul+0xba>
 8002bf0:	469b      	mov	fp, r3
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	250c      	movs	r5, #12
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	e601      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	469a      	mov	sl, r3
 8002c00:	469b      	mov	fp, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	2504      	movs	r5, #4
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	e5fa      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	430d      	orrs	r5, r1
 8002c0e:	2d0a      	cmp	r5, #10
 8002c10:	dd00      	ble.n	8002c14 <__aeabi_dmul+0x460>
 8002c12:	e64b      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002c14:	4649      	mov	r1, r9
 8002c16:	9800      	ldr	r0, [sp, #0]
 8002c18:	4041      	eors	r1, r0
 8002c1a:	b2c9      	uxtb	r1, r1
 8002c1c:	9103      	str	r1, [sp, #12]
 8002c1e:	2d02      	cmp	r5, #2
 8002c20:	dc00      	bgt.n	8002c24 <__aeabi_dmul+0x470>
 8002c22:	e096      	b.n	8002d52 <__aeabi_dmul+0x59e>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2400      	movs	r4, #0
 8002c28:	2001      	movs	r0, #1
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	e60c      	b.n	8002848 <__aeabi_dmul+0x94>
 8002c2e:	4649      	mov	r1, r9
 8002c30:	2302      	movs	r3, #2
 8002c32:	9a00      	ldr	r2, [sp, #0]
 8002c34:	432b      	orrs	r3, r5
 8002c36:	4051      	eors	r1, r2
 8002c38:	b2ca      	uxtb	r2, r1
 8002c3a:	9203      	str	r2, [sp, #12]
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	dd00      	ble.n	8002c42 <__aeabi_dmul+0x48e>
 8002c40:	e634      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d157      	bne.n	8002cf6 <__aeabi_dmul+0x542>
 8002c46:	9b03      	ldr	r3, [sp, #12]
 8002c48:	4699      	mov	r9, r3
 8002c4a:	2400      	movs	r4, #0
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4b49      	ldr	r3, [pc, #292]	@ (8002d74 <__aeabi_dmul+0x5c0>)
 8002c50:	e60e      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002c52:	4658      	mov	r0, fp
 8002c54:	2101      	movs	r1, #1
 8002c56:	1ac9      	subs	r1, r1, r3
 8002c58:	2938      	cmp	r1, #56	@ 0x38
 8002c5a:	dd00      	ble.n	8002c5e <__aeabi_dmul+0x4aa>
 8002c5c:	e62f      	b.n	80028be <__aeabi_dmul+0x10a>
 8002c5e:	291f      	cmp	r1, #31
 8002c60:	dd56      	ble.n	8002d10 <__aeabi_dmul+0x55c>
 8002c62:	221f      	movs	r2, #31
 8002c64:	4654      	mov	r4, sl
 8002c66:	4252      	negs	r2, r2
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	40dc      	lsrs	r4, r3
 8002c6c:	2920      	cmp	r1, #32
 8002c6e:	d007      	beq.n	8002c80 <__aeabi_dmul+0x4cc>
 8002c70:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <__aeabi_dmul+0x5c4>)
 8002c72:	4642      	mov	r2, r8
 8002c74:	469c      	mov	ip, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	4460      	add	r0, ip
 8002c7a:	4083      	lsls	r3, r0
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	4690      	mov	r8, r2
 8002c80:	4642      	mov	r2, r8
 8002c82:	2107      	movs	r1, #7
 8002c84:	1e53      	subs	r3, r2, #1
 8002c86:	419a      	sbcs	r2, r3
 8002c88:	000b      	movs	r3, r1
 8002c8a:	4322      	orrs	r2, r4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2400      	movs	r4, #0
 8002c90:	4211      	tst	r1, r2
 8002c92:	d009      	beq.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002c94:	230f      	movs	r3, #15
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d05d      	beq.n	8002d58 <__aeabi_dmul+0x5a4>
 8002c9c:	1d11      	adds	r1, r2, #4
 8002c9e:	4291      	cmp	r1, r2
 8002ca0:	419b      	sbcs	r3, r3
 8002ca2:	000a      	movs	r2, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	075b      	lsls	r3, r3, #29
 8002ca8:	08d2      	lsrs	r2, r2, #3
 8002caa:	431a      	orrs	r2, r3
 8002cac:	2300      	movs	r3, #0
 8002cae:	e5df      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	4699      	mov	r9, r3
 8002cb4:	e5fa      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002cb6:	9801      	ldr	r0, [sp, #4]
 8002cb8:	f000 fd36 	bl	8003728 <__clzsi2>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	3215      	adds	r2, #21
 8002cc2:	3320      	adds	r3, #32
 8002cc4:	2a1c      	cmp	r2, #28
 8002cc6:	dc00      	bgt.n	8002cca <__aeabi_dmul+0x516>
 8002cc8:	e738      	b.n	8002b3c <__aeabi_dmul+0x388>
 8002cca:	9a01      	ldr	r2, [sp, #4]
 8002ccc:	3808      	subs	r0, #8
 8002cce:	4082      	lsls	r2, r0
 8002cd0:	e73f      	b.n	8002b52 <__aeabi_dmul+0x39e>
 8002cd2:	f000 fd29 	bl	8003728 <__clzsi2>
 8002cd6:	2315      	movs	r3, #21
 8002cd8:	469c      	mov	ip, r3
 8002cda:	4484      	add	ip, r0
 8002cdc:	0002      	movs	r2, r0
 8002cde:	4663      	mov	r3, ip
 8002ce0:	3220      	adds	r2, #32
 8002ce2:	2b1c      	cmp	r3, #28
 8002ce4:	dc00      	bgt.n	8002ce8 <__aeabi_dmul+0x534>
 8002ce6:	e758      	b.n	8002b9a <__aeabi_dmul+0x3e6>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4698      	mov	r8, r3
 8002cec:	0023      	movs	r3, r4
 8002cee:	3808      	subs	r0, #8
 8002cf0:	4083      	lsls	r3, r0
 8002cf2:	469a      	mov	sl, r3
 8002cf4:	e762      	b.n	8002bbc <__aeabi_dmul+0x408>
 8002cf6:	001d      	movs	r5, r3
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2400      	movs	r4, #0
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	e5a2      	b.n	8002848 <__aeabi_dmul+0x94>
 8002d02:	9002      	str	r0, [sp, #8]
 8002d04:	e632      	b.n	800296c <__aeabi_dmul+0x1b8>
 8002d06:	431c      	orrs	r4, r3
 8002d08:	9b00      	ldr	r3, [sp, #0]
 8002d0a:	9a01      	ldr	r2, [sp, #4]
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	e5ae      	b.n	800286e <__aeabi_dmul+0xba>
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <__aeabi_dmul+0x5c8>)
 8002d12:	4652      	mov	r2, sl
 8002d14:	18c3      	adds	r3, r0, r3
 8002d16:	4640      	mov	r0, r8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	40c8      	lsrs	r0, r1
 8002d1c:	4302      	orrs	r2, r0
 8002d1e:	4640      	mov	r0, r8
 8002d20:	4098      	lsls	r0, r3
 8002d22:	0003      	movs	r3, r0
 8002d24:	1e58      	subs	r0, r3, #1
 8002d26:	4183      	sbcs	r3, r0
 8002d28:	4654      	mov	r4, sl
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	40cc      	lsrs	r4, r1
 8002d2e:	0753      	lsls	r3, r2, #29
 8002d30:	d009      	beq.n	8002d46 <__aeabi_dmul+0x592>
 8002d32:	230f      	movs	r3, #15
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d005      	beq.n	8002d46 <__aeabi_dmul+0x592>
 8002d3a:	1d13      	adds	r3, r2, #4
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	4192      	sbcs	r2, r2
 8002d40:	4252      	negs	r2, r2
 8002d42:	18a4      	adds	r4, r4, r2
 8002d44:	001a      	movs	r2, r3
 8002d46:	0223      	lsls	r3, r4, #8
 8002d48:	d508      	bpl.n	8002d5c <__aeabi_dmul+0x5a8>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	e58e      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002d52:	4689      	mov	r9, r1
 8002d54:	2400      	movs	r4, #0
 8002d56:	e58b      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e7a5      	b.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002d5c:	0763      	lsls	r3, r4, #29
 8002d5e:	0264      	lsls	r4, r4, #9
 8002d60:	0b24      	lsrs	r4, r4, #12
 8002d62:	e7a1      	b.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002d64:	9b00      	ldr	r3, [sp, #0]
 8002d66:	46a2      	mov	sl, r4
 8002d68:	4699      	mov	r9, r3
 8002d6a:	9b01      	ldr	r3, [sp, #4]
 8002d6c:	4698      	mov	r8, r3
 8002d6e:	e737      	b.n	8002be0 <__aeabi_dmul+0x42c>
 8002d70:	fffffc0d 	.word	0xfffffc0d
 8002d74:	000007ff 	.word	0x000007ff
 8002d78:	0000043e 	.word	0x0000043e
 8002d7c:	0000041e 	.word	0x0000041e

08002d80 <__aeabi_dsub>:
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	4657      	mov	r7, sl
 8002d84:	464e      	mov	r6, r9
 8002d86:	4645      	mov	r5, r8
 8002d88:	46de      	mov	lr, fp
 8002d8a:	b5e0      	push	{r5, r6, r7, lr}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	9000      	str	r0, [sp, #0]
 8002d90:	9101      	str	r1, [sp, #4]
 8002d92:	030c      	lsls	r4, r1, #12
 8002d94:	004d      	lsls	r5, r1, #1
 8002d96:	0fce      	lsrs	r6, r1, #31
 8002d98:	0a61      	lsrs	r1, r4, #9
 8002d9a:	9c00      	ldr	r4, [sp, #0]
 8002d9c:	005f      	lsls	r7, r3, #1
 8002d9e:	0f64      	lsrs	r4, r4, #29
 8002da0:	430c      	orrs	r4, r1
 8002da2:	9900      	ldr	r1, [sp, #0]
 8002da4:	9200      	str	r2, [sp, #0]
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	00c8      	lsls	r0, r1, #3
 8002daa:	0319      	lsls	r1, r3, #12
 8002dac:	0d7b      	lsrs	r3, r7, #21
 8002dae:	4699      	mov	r9, r3
 8002db0:	9b01      	ldr	r3, [sp, #4]
 8002db2:	4fcc      	ldr	r7, [pc, #816]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002db4:	0fdb      	lsrs	r3, r3, #31
 8002db6:	469c      	mov	ip, r3
 8002db8:	0a4b      	lsrs	r3, r1, #9
 8002dba:	9900      	ldr	r1, [sp, #0]
 8002dbc:	4680      	mov	r8, r0
 8002dbe:	0f49      	lsrs	r1, r1, #29
 8002dc0:	4319      	orrs	r1, r3
 8002dc2:	9b00      	ldr	r3, [sp, #0]
 8002dc4:	468b      	mov	fp, r1
 8002dc6:	00da      	lsls	r2, r3, #3
 8002dc8:	4692      	mov	sl, r2
 8002dca:	0d6d      	lsrs	r5, r5, #21
 8002dcc:	45b9      	cmp	r9, r7
 8002dce:	d100      	bne.n	8002dd2 <__aeabi_dsub+0x52>
 8002dd0:	e0bf      	b.n	8002f52 <__aeabi_dsub+0x1d2>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	4661      	mov	r1, ip
 8002dd6:	4059      	eors	r1, r3
 8002dd8:	464b      	mov	r3, r9
 8002dda:	468c      	mov	ip, r1
 8002ddc:	1aeb      	subs	r3, r5, r3
 8002dde:	428e      	cmp	r6, r1
 8002de0:	d075      	beq.n	8002ece <__aeabi_dsub+0x14e>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dc00      	bgt.n	8002de8 <__aeabi_dsub+0x68>
 8002de6:	e2a3      	b.n	8003330 <__aeabi_dsub+0x5b0>
 8002de8:	4649      	mov	r1, r9
 8002dea:	2900      	cmp	r1, #0
 8002dec:	d100      	bne.n	8002df0 <__aeabi_dsub+0x70>
 8002dee:	e0ce      	b.n	8002f8e <__aeabi_dsub+0x20e>
 8002df0:	42bd      	cmp	r5, r7
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x76>
 8002df4:	e200      	b.n	80031f8 <__aeabi_dsub+0x478>
 8002df6:	2701      	movs	r7, #1
 8002df8:	2b38      	cmp	r3, #56	@ 0x38
 8002dfa:	dc19      	bgt.n	8002e30 <__aeabi_dsub+0xb0>
 8002dfc:	2780      	movs	r7, #128	@ 0x80
 8002dfe:	4659      	mov	r1, fp
 8002e00:	043f      	lsls	r7, r7, #16
 8002e02:	4339      	orrs	r1, r7
 8002e04:	468b      	mov	fp, r1
 8002e06:	2b1f      	cmp	r3, #31
 8002e08:	dd00      	ble.n	8002e0c <__aeabi_dsub+0x8c>
 8002e0a:	e1fa      	b.n	8003202 <__aeabi_dsub+0x482>
 8002e0c:	2720      	movs	r7, #32
 8002e0e:	1af9      	subs	r1, r7, r3
 8002e10:	468c      	mov	ip, r1
 8002e12:	4659      	mov	r1, fp
 8002e14:	4667      	mov	r7, ip
 8002e16:	40b9      	lsls	r1, r7
 8002e18:	000f      	movs	r7, r1
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	40d9      	lsrs	r1, r3
 8002e1e:	430f      	orrs	r7, r1
 8002e20:	4661      	mov	r1, ip
 8002e22:	408a      	lsls	r2, r1
 8002e24:	1e51      	subs	r1, r2, #1
 8002e26:	418a      	sbcs	r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	40d9      	lsrs	r1, r3
 8002e2c:	4317      	orrs	r7, r2
 8002e2e:	1a64      	subs	r4, r4, r1
 8002e30:	1bc7      	subs	r7, r0, r7
 8002e32:	42b8      	cmp	r0, r7
 8002e34:	4180      	sbcs	r0, r0
 8002e36:	4240      	negs	r0, r0
 8002e38:	1a24      	subs	r4, r4, r0
 8002e3a:	0223      	lsls	r3, r4, #8
 8002e3c:	d400      	bmi.n	8002e40 <__aeabi_dsub+0xc0>
 8002e3e:	e140      	b.n	80030c2 <__aeabi_dsub+0x342>
 8002e40:	0264      	lsls	r4, r4, #9
 8002e42:	0a64      	lsrs	r4, r4, #9
 8002e44:	2c00      	cmp	r4, #0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0xca>
 8002e48:	e154      	b.n	80030f4 <__aeabi_dsub+0x374>
 8002e4a:	0020      	movs	r0, r4
 8002e4c:	f000 fc6c 	bl	8003728 <__clzsi2>
 8002e50:	0003      	movs	r3, r0
 8002e52:	3b08      	subs	r3, #8
 8002e54:	2120      	movs	r1, #32
 8002e56:	0038      	movs	r0, r7
 8002e58:	1aca      	subs	r2, r1, r3
 8002e5a:	40d0      	lsrs	r0, r2
 8002e5c:	409c      	lsls	r4, r3
 8002e5e:	0002      	movs	r2, r0
 8002e60:	409f      	lsls	r7, r3
 8002e62:	4322      	orrs	r2, r4
 8002e64:	429d      	cmp	r5, r3
 8002e66:	dd00      	ble.n	8002e6a <__aeabi_dsub+0xea>
 8002e68:	e1a6      	b.n	80031b8 <__aeabi_dsub+0x438>
 8002e6a:	1b58      	subs	r0, r3, r5
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	1a09      	subs	r1, r1, r0
 8002e70:	003c      	movs	r4, r7
 8002e72:	408f      	lsls	r7, r1
 8002e74:	40c4      	lsrs	r4, r0
 8002e76:	1e7b      	subs	r3, r7, #1
 8002e78:	419f      	sbcs	r7, r3
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	408b      	lsls	r3, r1
 8002e7e:	4327      	orrs	r7, r4
 8002e80:	431f      	orrs	r7, r3
 8002e82:	40c2      	lsrs	r2, r0
 8002e84:	003b      	movs	r3, r7
 8002e86:	0014      	movs	r4, r2
 8002e88:	2500      	movs	r5, #0
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <__aeabi_dsub+0x110>
 8002e8e:	e1f7      	b.n	8003280 <__aeabi_dsub+0x500>
 8002e90:	077b      	lsls	r3, r7, #29
 8002e92:	d100      	bne.n	8002e96 <__aeabi_dsub+0x116>
 8002e94:	e377      	b.n	8003586 <__aeabi_dsub+0x806>
 8002e96:	230f      	movs	r3, #15
 8002e98:	0038      	movs	r0, r7
 8002e9a:	403b      	ands	r3, r7
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d004      	beq.n	8002eaa <__aeabi_dsub+0x12a>
 8002ea0:	1d38      	adds	r0, r7, #4
 8002ea2:	42b8      	cmp	r0, r7
 8002ea4:	41bf      	sbcs	r7, r7
 8002ea6:	427f      	negs	r7, r7
 8002ea8:	19e4      	adds	r4, r4, r7
 8002eaa:	0223      	lsls	r3, r4, #8
 8002eac:	d400      	bmi.n	8002eb0 <__aeabi_dsub+0x130>
 8002eae:	e368      	b.n	8003582 <__aeabi_dsub+0x802>
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002eb2:	3501      	adds	r5, #1
 8002eb4:	429d      	cmp	r5, r3
 8002eb6:	d100      	bne.n	8002eba <__aeabi_dsub+0x13a>
 8002eb8:	e0f4      	b.n	80030a4 <__aeabi_dsub+0x324>
 8002eba:	4b8b      	ldr	r3, [pc, #556]	@ (80030e8 <__aeabi_dsub+0x368>)
 8002ebc:	056d      	lsls	r5, r5, #21
 8002ebe:	401c      	ands	r4, r3
 8002ec0:	0d6d      	lsrs	r5, r5, #21
 8002ec2:	0767      	lsls	r7, r4, #29
 8002ec4:	08c0      	lsrs	r0, r0, #3
 8002ec6:	0264      	lsls	r4, r4, #9
 8002ec8:	4307      	orrs	r7, r0
 8002eca:	0b24      	lsrs	r4, r4, #12
 8002ecc:	e0ec      	b.n	80030a8 <__aeabi_dsub+0x328>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc00      	bgt.n	8002ed4 <__aeabi_dsub+0x154>
 8002ed2:	e329      	b.n	8003528 <__aeabi_dsub+0x7a8>
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d000      	beq.n	8002edc <__aeabi_dsub+0x15c>
 8002eda:	e0d6      	b.n	800308a <__aeabi_dsub+0x30a>
 8002edc:	4659      	mov	r1, fp
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	d100      	bne.n	8002ee4 <__aeabi_dsub+0x164>
 8002ee2:	e12e      	b.n	8003142 <__aeabi_dsub+0x3c2>
 8002ee4:	1e59      	subs	r1, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x16c>
 8002eea:	e1e6      	b.n	80032ba <__aeabi_dsub+0x53a>
 8002eec:	42bb      	cmp	r3, r7
 8002eee:	d100      	bne.n	8002ef2 <__aeabi_dsub+0x172>
 8002ef0:	e182      	b.n	80031f8 <__aeabi_dsub+0x478>
 8002ef2:	2701      	movs	r7, #1
 8002ef4:	000b      	movs	r3, r1
 8002ef6:	2938      	cmp	r1, #56	@ 0x38
 8002ef8:	dc14      	bgt.n	8002f24 <__aeabi_dsub+0x1a4>
 8002efa:	2b1f      	cmp	r3, #31
 8002efc:	dd00      	ble.n	8002f00 <__aeabi_dsub+0x180>
 8002efe:	e23c      	b.n	800337a <__aeabi_dsub+0x5fa>
 8002f00:	2720      	movs	r7, #32
 8002f02:	1af9      	subs	r1, r7, r3
 8002f04:	468c      	mov	ip, r1
 8002f06:	4659      	mov	r1, fp
 8002f08:	4667      	mov	r7, ip
 8002f0a:	40b9      	lsls	r1, r7
 8002f0c:	000f      	movs	r7, r1
 8002f0e:	0011      	movs	r1, r2
 8002f10:	40d9      	lsrs	r1, r3
 8002f12:	430f      	orrs	r7, r1
 8002f14:	4661      	mov	r1, ip
 8002f16:	408a      	lsls	r2, r1
 8002f18:	1e51      	subs	r1, r2, #1
 8002f1a:	418a      	sbcs	r2, r1
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	40d9      	lsrs	r1, r3
 8002f20:	4317      	orrs	r7, r2
 8002f22:	1864      	adds	r4, r4, r1
 8002f24:	183f      	adds	r7, r7, r0
 8002f26:	4287      	cmp	r7, r0
 8002f28:	4180      	sbcs	r0, r0
 8002f2a:	4240      	negs	r0, r0
 8002f2c:	1824      	adds	r4, r4, r0
 8002f2e:	0223      	lsls	r3, r4, #8
 8002f30:	d400      	bmi.n	8002f34 <__aeabi_dsub+0x1b4>
 8002f32:	e0c6      	b.n	80030c2 <__aeabi_dsub+0x342>
 8002f34:	4b6b      	ldr	r3, [pc, #428]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002f36:	3501      	adds	r5, #1
 8002f38:	429d      	cmp	r5, r3
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x1be>
 8002f3c:	e0b2      	b.n	80030a4 <__aeabi_dsub+0x324>
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4b69      	ldr	r3, [pc, #420]	@ (80030e8 <__aeabi_dsub+0x368>)
 8002f42:	087a      	lsrs	r2, r7, #1
 8002f44:	401c      	ands	r4, r3
 8002f46:	4039      	ands	r1, r7
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	07e7      	lsls	r7, r4, #31
 8002f4c:	4317      	orrs	r7, r2
 8002f4e:	0864      	lsrs	r4, r4, #1
 8002f50:	e79e      	b.n	8002e90 <__aeabi_dsub+0x110>
 8002f52:	4b66      	ldr	r3, [pc, #408]	@ (80030ec <__aeabi_dsub+0x36c>)
 8002f54:	4311      	orrs	r1, r2
 8002f56:	468a      	mov	sl, r1
 8002f58:	18eb      	adds	r3, r5, r3
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	d028      	beq.n	8002fb0 <__aeabi_dsub+0x230>
 8002f5e:	4566      	cmp	r6, ip
 8002f60:	d02c      	beq.n	8002fbc <__aeabi_dsub+0x23c>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d05b      	beq.n	800301e <__aeabi_dsub+0x29e>
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	d100      	bne.n	8002f6c <__aeabi_dsub+0x1ec>
 8002f6a:	e12c      	b.n	80031c6 <__aeabi_dsub+0x446>
 8002f6c:	465b      	mov	r3, fp
 8002f6e:	4666      	mov	r6, ip
 8002f70:	075f      	lsls	r7, r3, #29
 8002f72:	08d2      	lsrs	r2, r2, #3
 8002f74:	4317      	orrs	r7, r2
 8002f76:	08dd      	lsrs	r5, r3, #3
 8002f78:	003b      	movs	r3, r7
 8002f7a:	432b      	orrs	r3, r5
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x200>
 8002f7e:	e0e2      	b.n	8003146 <__aeabi_dsub+0x3c6>
 8002f80:	2480      	movs	r4, #128	@ 0x80
 8002f82:	0324      	lsls	r4, r4, #12
 8002f84:	432c      	orrs	r4, r5
 8002f86:	0324      	lsls	r4, r4, #12
 8002f88:	4d56      	ldr	r5, [pc, #344]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002f8a:	0b24      	lsrs	r4, r4, #12
 8002f8c:	e08c      	b.n	80030a8 <__aeabi_dsub+0x328>
 8002f8e:	4659      	mov	r1, fp
 8002f90:	4311      	orrs	r1, r2
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x216>
 8002f94:	e0d5      	b.n	8003142 <__aeabi_dsub+0x3c2>
 8002f96:	1e59      	subs	r1, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d100      	bne.n	8002f9e <__aeabi_dsub+0x21e>
 8002f9c:	e1b9      	b.n	8003312 <__aeabi_dsub+0x592>
 8002f9e:	42bb      	cmp	r3, r7
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x224>
 8002fa2:	e1b1      	b.n	8003308 <__aeabi_dsub+0x588>
 8002fa4:	2701      	movs	r7, #1
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	2938      	cmp	r1, #56	@ 0x38
 8002faa:	dd00      	ble.n	8002fae <__aeabi_dsub+0x22e>
 8002fac:	e740      	b.n	8002e30 <__aeabi_dsub+0xb0>
 8002fae:	e72a      	b.n	8002e06 <__aeabi_dsub+0x86>
 8002fb0:	4661      	mov	r1, ip
 8002fb2:	2701      	movs	r7, #1
 8002fb4:	4079      	eors	r1, r7
 8002fb6:	468c      	mov	ip, r1
 8002fb8:	4566      	cmp	r6, ip
 8002fba:	d1d2      	bne.n	8002f62 <__aeabi_dsub+0x1e2>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d100      	bne.n	8002fc2 <__aeabi_dsub+0x242>
 8002fc0:	e0c5      	b.n	800314e <__aeabi_dsub+0x3ce>
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	d000      	beq.n	8002fc8 <__aeabi_dsub+0x248>
 8002fc6:	e155      	b.n	8003274 <__aeabi_dsub+0x4f4>
 8002fc8:	464b      	mov	r3, r9
 8002fca:	0025      	movs	r5, r4
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x252>
 8002fd0:	e212      	b.n	80033f8 <__aeabi_dsub+0x678>
 8002fd2:	1e59      	subs	r1, r3, #1
 8002fd4:	468c      	mov	ip, r1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x25c>
 8002fda:	e249      	b.n	8003470 <__aeabi_dsub+0x6f0>
 8002fdc:	4d41      	ldr	r5, [pc, #260]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x264>
 8002fe2:	e28f      	b.n	8003504 <__aeabi_dsub+0x784>
 8002fe4:	2701      	movs	r7, #1
 8002fe6:	2938      	cmp	r1, #56	@ 0x38
 8002fe8:	dc11      	bgt.n	800300e <__aeabi_dsub+0x28e>
 8002fea:	4663      	mov	r3, ip
 8002fec:	2b1f      	cmp	r3, #31
 8002fee:	dd00      	ble.n	8002ff2 <__aeabi_dsub+0x272>
 8002ff0:	e25b      	b.n	80034aa <__aeabi_dsub+0x72a>
 8002ff2:	4661      	mov	r1, ip
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	0027      	movs	r7, r4
 8002ff8:	1a5b      	subs	r3, r3, r1
 8002ffa:	0005      	movs	r5, r0
 8002ffc:	4098      	lsls	r0, r3
 8002ffe:	409f      	lsls	r7, r3
 8003000:	40cd      	lsrs	r5, r1
 8003002:	1e43      	subs	r3, r0, #1
 8003004:	4198      	sbcs	r0, r3
 8003006:	40cc      	lsrs	r4, r1
 8003008:	432f      	orrs	r7, r5
 800300a:	4307      	orrs	r7, r0
 800300c:	44a3      	add	fp, r4
 800300e:	18bf      	adds	r7, r7, r2
 8003010:	4297      	cmp	r7, r2
 8003012:	4192      	sbcs	r2, r2
 8003014:	4252      	negs	r2, r2
 8003016:	445a      	add	r2, fp
 8003018:	0014      	movs	r4, r2
 800301a:	464d      	mov	r5, r9
 800301c:	e787      	b.n	8002f2e <__aeabi_dsub+0x1ae>
 800301e:	4f34      	ldr	r7, [pc, #208]	@ (80030f0 <__aeabi_dsub+0x370>)
 8003020:	1c6b      	adds	r3, r5, #1
 8003022:	423b      	tst	r3, r7
 8003024:	d000      	beq.n	8003028 <__aeabi_dsub+0x2a8>
 8003026:	e0b6      	b.n	8003196 <__aeabi_dsub+0x416>
 8003028:	4659      	mov	r1, fp
 800302a:	0023      	movs	r3, r4
 800302c:	4311      	orrs	r1, r2
 800302e:	000f      	movs	r7, r1
 8003030:	4303      	orrs	r3, r0
 8003032:	2d00      	cmp	r5, #0
 8003034:	d000      	beq.n	8003038 <__aeabi_dsub+0x2b8>
 8003036:	e126      	b.n	8003286 <__aeabi_dsub+0x506>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <__aeabi_dsub+0x2be>
 800303c:	e1c0      	b.n	80033c0 <__aeabi_dsub+0x640>
 800303e:	2900      	cmp	r1, #0
 8003040:	d100      	bne.n	8003044 <__aeabi_dsub+0x2c4>
 8003042:	e0a1      	b.n	8003188 <__aeabi_dsub+0x408>
 8003044:	1a83      	subs	r3, r0, r2
 8003046:	4698      	mov	r8, r3
 8003048:	465b      	mov	r3, fp
 800304a:	4540      	cmp	r0, r8
 800304c:	41ad      	sbcs	r5, r5
 800304e:	1ae3      	subs	r3, r4, r3
 8003050:	426d      	negs	r5, r5
 8003052:	1b5b      	subs	r3, r3, r5
 8003054:	2580      	movs	r5, #128	@ 0x80
 8003056:	042d      	lsls	r5, r5, #16
 8003058:	422b      	tst	r3, r5
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x2de>
 800305c:	e14b      	b.n	80032f6 <__aeabi_dsub+0x576>
 800305e:	465b      	mov	r3, fp
 8003060:	1a10      	subs	r0, r2, r0
 8003062:	4282      	cmp	r2, r0
 8003064:	4192      	sbcs	r2, r2
 8003066:	1b1c      	subs	r4, r3, r4
 8003068:	0007      	movs	r7, r0
 800306a:	2601      	movs	r6, #1
 800306c:	4663      	mov	r3, ip
 800306e:	4252      	negs	r2, r2
 8003070:	1aa4      	subs	r4, r4, r2
 8003072:	4327      	orrs	r7, r4
 8003074:	401e      	ands	r6, r3
 8003076:	2f00      	cmp	r7, #0
 8003078:	d100      	bne.n	800307c <__aeabi_dsub+0x2fc>
 800307a:	e142      	b.n	8003302 <__aeabi_dsub+0x582>
 800307c:	422c      	tst	r4, r5
 800307e:	d100      	bne.n	8003082 <__aeabi_dsub+0x302>
 8003080:	e26d      	b.n	800355e <__aeabi_dsub+0x7de>
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <__aeabi_dsub+0x368>)
 8003084:	2501      	movs	r5, #1
 8003086:	401c      	ands	r4, r3
 8003088:	e71b      	b.n	8002ec2 <__aeabi_dsub+0x142>
 800308a:	42bd      	cmp	r5, r7
 800308c:	d100      	bne.n	8003090 <__aeabi_dsub+0x310>
 800308e:	e13b      	b.n	8003308 <__aeabi_dsub+0x588>
 8003090:	2701      	movs	r7, #1
 8003092:	2b38      	cmp	r3, #56	@ 0x38
 8003094:	dd00      	ble.n	8003098 <__aeabi_dsub+0x318>
 8003096:	e745      	b.n	8002f24 <__aeabi_dsub+0x1a4>
 8003098:	2780      	movs	r7, #128	@ 0x80
 800309a:	4659      	mov	r1, fp
 800309c:	043f      	lsls	r7, r7, #16
 800309e:	4339      	orrs	r1, r7
 80030a0:	468b      	mov	fp, r1
 80030a2:	e72a      	b.n	8002efa <__aeabi_dsub+0x17a>
 80030a4:	2400      	movs	r4, #0
 80030a6:	2700      	movs	r7, #0
 80030a8:	052d      	lsls	r5, r5, #20
 80030aa:	4325      	orrs	r5, r4
 80030ac:	07f6      	lsls	r6, r6, #31
 80030ae:	4335      	orrs	r5, r6
 80030b0:	0038      	movs	r0, r7
 80030b2:	0029      	movs	r1, r5
 80030b4:	b003      	add	sp, #12
 80030b6:	bcf0      	pop	{r4, r5, r6, r7}
 80030b8:	46bb      	mov	fp, r7
 80030ba:	46b2      	mov	sl, r6
 80030bc:	46a9      	mov	r9, r5
 80030be:	46a0      	mov	r8, r4
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c2:	077b      	lsls	r3, r7, #29
 80030c4:	d004      	beq.n	80030d0 <__aeabi_dsub+0x350>
 80030c6:	230f      	movs	r3, #15
 80030c8:	403b      	ands	r3, r7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d000      	beq.n	80030d0 <__aeabi_dsub+0x350>
 80030ce:	e6e7      	b.n	8002ea0 <__aeabi_dsub+0x120>
 80030d0:	002b      	movs	r3, r5
 80030d2:	08f8      	lsrs	r0, r7, #3
 80030d4:	4a03      	ldr	r2, [pc, #12]	@ (80030e4 <__aeabi_dsub+0x364>)
 80030d6:	0767      	lsls	r7, r4, #29
 80030d8:	4307      	orrs	r7, r0
 80030da:	08e5      	lsrs	r5, r4, #3
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <__aeabi_dsub+0x362>
 80030e0:	e74a      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80030e2:	e0a5      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80030e4:	000007ff 	.word	0x000007ff
 80030e8:	ff7fffff 	.word	0xff7fffff
 80030ec:	fffff801 	.word	0xfffff801
 80030f0:	000007fe 	.word	0x000007fe
 80030f4:	0038      	movs	r0, r7
 80030f6:	f000 fb17 	bl	8003728 <__clzsi2>
 80030fa:	0003      	movs	r3, r0
 80030fc:	3318      	adds	r3, #24
 80030fe:	2b1f      	cmp	r3, #31
 8003100:	dc00      	bgt.n	8003104 <__aeabi_dsub+0x384>
 8003102:	e6a7      	b.n	8002e54 <__aeabi_dsub+0xd4>
 8003104:	003a      	movs	r2, r7
 8003106:	3808      	subs	r0, #8
 8003108:	4082      	lsls	r2, r0
 800310a:	429d      	cmp	r5, r3
 800310c:	dd00      	ble.n	8003110 <__aeabi_dsub+0x390>
 800310e:	e08a      	b.n	8003226 <__aeabi_dsub+0x4a6>
 8003110:	1b5b      	subs	r3, r3, r5
 8003112:	1c58      	adds	r0, r3, #1
 8003114:	281f      	cmp	r0, #31
 8003116:	dc00      	bgt.n	800311a <__aeabi_dsub+0x39a>
 8003118:	e1d8      	b.n	80034cc <__aeabi_dsub+0x74c>
 800311a:	0017      	movs	r7, r2
 800311c:	3b1f      	subs	r3, #31
 800311e:	40df      	lsrs	r7, r3
 8003120:	2820      	cmp	r0, #32
 8003122:	d005      	beq.n	8003130 <__aeabi_dsub+0x3b0>
 8003124:	2340      	movs	r3, #64	@ 0x40
 8003126:	1a1b      	subs	r3, r3, r0
 8003128:	409a      	lsls	r2, r3
 800312a:	1e53      	subs	r3, r2, #1
 800312c:	419a      	sbcs	r2, r3
 800312e:	4317      	orrs	r7, r2
 8003130:	2500      	movs	r5, #0
 8003132:	2f00      	cmp	r7, #0
 8003134:	d100      	bne.n	8003138 <__aeabi_dsub+0x3b8>
 8003136:	e0e5      	b.n	8003304 <__aeabi_dsub+0x584>
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	d000      	beq.n	800313e <__aeabi_dsub+0x3be>
 800313c:	e6ab      	b.n	8002e96 <__aeabi_dsub+0x116>
 800313e:	002c      	movs	r4, r5
 8003140:	e7c6      	b.n	80030d0 <__aeabi_dsub+0x350>
 8003142:	08c0      	lsrs	r0, r0, #3
 8003144:	e7c6      	b.n	80030d4 <__aeabi_dsub+0x354>
 8003146:	2700      	movs	r7, #0
 8003148:	2400      	movs	r4, #0
 800314a:	4dd1      	ldr	r5, [pc, #836]	@ (8003490 <__aeabi_dsub+0x710>)
 800314c:	e7ac      	b.n	80030a8 <__aeabi_dsub+0x328>
 800314e:	4fd1      	ldr	r7, [pc, #836]	@ (8003494 <__aeabi_dsub+0x714>)
 8003150:	1c6b      	adds	r3, r5, #1
 8003152:	423b      	tst	r3, r7
 8003154:	d171      	bne.n	800323a <__aeabi_dsub+0x4ba>
 8003156:	0023      	movs	r3, r4
 8003158:	4303      	orrs	r3, r0
 800315a:	2d00      	cmp	r5, #0
 800315c:	d000      	beq.n	8003160 <__aeabi_dsub+0x3e0>
 800315e:	e14e      	b.n	80033fe <__aeabi_dsub+0x67e>
 8003160:	4657      	mov	r7, sl
 8003162:	2b00      	cmp	r3, #0
 8003164:	d100      	bne.n	8003168 <__aeabi_dsub+0x3e8>
 8003166:	e1b5      	b.n	80034d4 <__aeabi_dsub+0x754>
 8003168:	2f00      	cmp	r7, #0
 800316a:	d00d      	beq.n	8003188 <__aeabi_dsub+0x408>
 800316c:	1883      	adds	r3, r0, r2
 800316e:	4283      	cmp	r3, r0
 8003170:	4180      	sbcs	r0, r0
 8003172:	445c      	add	r4, fp
 8003174:	4240      	negs	r0, r0
 8003176:	1824      	adds	r4, r4, r0
 8003178:	0222      	lsls	r2, r4, #8
 800317a:	d500      	bpl.n	800317e <__aeabi_dsub+0x3fe>
 800317c:	e1c8      	b.n	8003510 <__aeabi_dsub+0x790>
 800317e:	001f      	movs	r7, r3
 8003180:	4698      	mov	r8, r3
 8003182:	4327      	orrs	r7, r4
 8003184:	d100      	bne.n	8003188 <__aeabi_dsub+0x408>
 8003186:	e0bc      	b.n	8003302 <__aeabi_dsub+0x582>
 8003188:	4643      	mov	r3, r8
 800318a:	0767      	lsls	r7, r4, #29
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	431f      	orrs	r7, r3
 8003190:	08e5      	lsrs	r5, r4, #3
 8003192:	2300      	movs	r3, #0
 8003194:	e04c      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003196:	1a83      	subs	r3, r0, r2
 8003198:	4698      	mov	r8, r3
 800319a:	465b      	mov	r3, fp
 800319c:	4540      	cmp	r0, r8
 800319e:	41bf      	sbcs	r7, r7
 80031a0:	1ae3      	subs	r3, r4, r3
 80031a2:	427f      	negs	r7, r7
 80031a4:	1bdb      	subs	r3, r3, r7
 80031a6:	021f      	lsls	r7, r3, #8
 80031a8:	d47c      	bmi.n	80032a4 <__aeabi_dsub+0x524>
 80031aa:	4647      	mov	r7, r8
 80031ac:	431f      	orrs	r7, r3
 80031ae:	d100      	bne.n	80031b2 <__aeabi_dsub+0x432>
 80031b0:	e0a6      	b.n	8003300 <__aeabi_dsub+0x580>
 80031b2:	001c      	movs	r4, r3
 80031b4:	4647      	mov	r7, r8
 80031b6:	e645      	b.n	8002e44 <__aeabi_dsub+0xc4>
 80031b8:	4cb7      	ldr	r4, [pc, #732]	@ (8003498 <__aeabi_dsub+0x718>)
 80031ba:	1aed      	subs	r5, r5, r3
 80031bc:	4014      	ands	r4, r2
 80031be:	077b      	lsls	r3, r7, #29
 80031c0:	d000      	beq.n	80031c4 <__aeabi_dsub+0x444>
 80031c2:	e780      	b.n	80030c6 <__aeabi_dsub+0x346>
 80031c4:	e784      	b.n	80030d0 <__aeabi_dsub+0x350>
 80031c6:	464b      	mov	r3, r9
 80031c8:	0025      	movs	r5, r4
 80031ca:	4305      	orrs	r5, r0
 80031cc:	d066      	beq.n	800329c <__aeabi_dsub+0x51c>
 80031ce:	1e5f      	subs	r7, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d100      	bne.n	80031d6 <__aeabi_dsub+0x456>
 80031d4:	e0fc      	b.n	80033d0 <__aeabi_dsub+0x650>
 80031d6:	4dae      	ldr	r5, [pc, #696]	@ (8003490 <__aeabi_dsub+0x710>)
 80031d8:	42ab      	cmp	r3, r5
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x45e>
 80031dc:	e15e      	b.n	800349c <__aeabi_dsub+0x71c>
 80031de:	4666      	mov	r6, ip
 80031e0:	2f38      	cmp	r7, #56	@ 0x38
 80031e2:	dc00      	bgt.n	80031e6 <__aeabi_dsub+0x466>
 80031e4:	e0b4      	b.n	8003350 <__aeabi_dsub+0x5d0>
 80031e6:	2001      	movs	r0, #1
 80031e8:	1a17      	subs	r7, r2, r0
 80031ea:	42ba      	cmp	r2, r7
 80031ec:	4192      	sbcs	r2, r2
 80031ee:	465b      	mov	r3, fp
 80031f0:	4252      	negs	r2, r2
 80031f2:	464d      	mov	r5, r9
 80031f4:	1a9c      	subs	r4, r3, r2
 80031f6:	e620      	b.n	8002e3a <__aeabi_dsub+0xba>
 80031f8:	0767      	lsls	r7, r4, #29
 80031fa:	08c0      	lsrs	r0, r0, #3
 80031fc:	4307      	orrs	r7, r0
 80031fe:	08e5      	lsrs	r5, r4, #3
 8003200:	e6ba      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003202:	001f      	movs	r7, r3
 8003204:	4659      	mov	r1, fp
 8003206:	3f20      	subs	r7, #32
 8003208:	40f9      	lsrs	r1, r7
 800320a:	000f      	movs	r7, r1
 800320c:	2b20      	cmp	r3, #32
 800320e:	d005      	beq.n	800321c <__aeabi_dsub+0x49c>
 8003210:	2140      	movs	r1, #64	@ 0x40
 8003212:	1acb      	subs	r3, r1, r3
 8003214:	4659      	mov	r1, fp
 8003216:	4099      	lsls	r1, r3
 8003218:	430a      	orrs	r2, r1
 800321a:	4692      	mov	sl, r2
 800321c:	4653      	mov	r3, sl
 800321e:	1e5a      	subs	r2, r3, #1
 8003220:	4193      	sbcs	r3, r2
 8003222:	431f      	orrs	r7, r3
 8003224:	e604      	b.n	8002e30 <__aeabi_dsub+0xb0>
 8003226:	1aeb      	subs	r3, r5, r3
 8003228:	4d9b      	ldr	r5, [pc, #620]	@ (8003498 <__aeabi_dsub+0x718>)
 800322a:	4015      	ands	r5, r2
 800322c:	076f      	lsls	r7, r5, #29
 800322e:	08ed      	lsrs	r5, r5, #3
 8003230:	032c      	lsls	r4, r5, #12
 8003232:	055d      	lsls	r5, r3, #21
 8003234:	0b24      	lsrs	r4, r4, #12
 8003236:	0d6d      	lsrs	r5, r5, #21
 8003238:	e736      	b.n	80030a8 <__aeabi_dsub+0x328>
 800323a:	4d95      	ldr	r5, [pc, #596]	@ (8003490 <__aeabi_dsub+0x710>)
 800323c:	42ab      	cmp	r3, r5
 800323e:	d100      	bne.n	8003242 <__aeabi_dsub+0x4c2>
 8003240:	e0d6      	b.n	80033f0 <__aeabi_dsub+0x670>
 8003242:	1882      	adds	r2, r0, r2
 8003244:	0021      	movs	r1, r4
 8003246:	4282      	cmp	r2, r0
 8003248:	4180      	sbcs	r0, r0
 800324a:	4459      	add	r1, fp
 800324c:	4240      	negs	r0, r0
 800324e:	1808      	adds	r0, r1, r0
 8003250:	07c7      	lsls	r7, r0, #31
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	4317      	orrs	r7, r2
 8003256:	0844      	lsrs	r4, r0, #1
 8003258:	0752      	lsls	r2, r2, #29
 800325a:	d400      	bmi.n	800325e <__aeabi_dsub+0x4de>
 800325c:	e185      	b.n	800356a <__aeabi_dsub+0x7ea>
 800325e:	220f      	movs	r2, #15
 8003260:	001d      	movs	r5, r3
 8003262:	403a      	ands	r2, r7
 8003264:	2a04      	cmp	r2, #4
 8003266:	d000      	beq.n	800326a <__aeabi_dsub+0x4ea>
 8003268:	e61a      	b.n	8002ea0 <__aeabi_dsub+0x120>
 800326a:	08ff      	lsrs	r7, r7, #3
 800326c:	0764      	lsls	r4, r4, #29
 800326e:	4327      	orrs	r7, r4
 8003270:	0905      	lsrs	r5, r0, #4
 8003272:	e7dd      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003274:	465b      	mov	r3, fp
 8003276:	08d2      	lsrs	r2, r2, #3
 8003278:	075f      	lsls	r7, r3, #29
 800327a:	4317      	orrs	r7, r2
 800327c:	08dd      	lsrs	r5, r3, #3
 800327e:	e67b      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003280:	2700      	movs	r7, #0
 8003282:	2400      	movs	r4, #0
 8003284:	e710      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d000      	beq.n	800328c <__aeabi_dsub+0x50c>
 800328a:	e0d6      	b.n	800343a <__aeabi_dsub+0x6ba>
 800328c:	2900      	cmp	r1, #0
 800328e:	d000      	beq.n	8003292 <__aeabi_dsub+0x512>
 8003290:	e12f      	b.n	80034f2 <__aeabi_dsub+0x772>
 8003292:	2480      	movs	r4, #128	@ 0x80
 8003294:	2600      	movs	r6, #0
 8003296:	4d7e      	ldr	r5, [pc, #504]	@ (8003490 <__aeabi_dsub+0x710>)
 8003298:	0324      	lsls	r4, r4, #12
 800329a:	e705      	b.n	80030a8 <__aeabi_dsub+0x328>
 800329c:	4666      	mov	r6, ip
 800329e:	465c      	mov	r4, fp
 80032a0:	08d0      	lsrs	r0, r2, #3
 80032a2:	e717      	b.n	80030d4 <__aeabi_dsub+0x354>
 80032a4:	465b      	mov	r3, fp
 80032a6:	1a17      	subs	r7, r2, r0
 80032a8:	42ba      	cmp	r2, r7
 80032aa:	4192      	sbcs	r2, r2
 80032ac:	1b1c      	subs	r4, r3, r4
 80032ae:	2601      	movs	r6, #1
 80032b0:	4663      	mov	r3, ip
 80032b2:	4252      	negs	r2, r2
 80032b4:	1aa4      	subs	r4, r4, r2
 80032b6:	401e      	ands	r6, r3
 80032b8:	e5c4      	b.n	8002e44 <__aeabi_dsub+0xc4>
 80032ba:	1883      	adds	r3, r0, r2
 80032bc:	4283      	cmp	r3, r0
 80032be:	4180      	sbcs	r0, r0
 80032c0:	445c      	add	r4, fp
 80032c2:	4240      	negs	r0, r0
 80032c4:	1825      	adds	r5, r4, r0
 80032c6:	022a      	lsls	r2, r5, #8
 80032c8:	d400      	bmi.n	80032cc <__aeabi_dsub+0x54c>
 80032ca:	e0da      	b.n	8003482 <__aeabi_dsub+0x702>
 80032cc:	4a72      	ldr	r2, [pc, #456]	@ (8003498 <__aeabi_dsub+0x718>)
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	4015      	ands	r5, r2
 80032d2:	07ea      	lsls	r2, r5, #31
 80032d4:	431a      	orrs	r2, r3
 80032d6:	0869      	lsrs	r1, r5, #1
 80032d8:	075b      	lsls	r3, r3, #29
 80032da:	d400      	bmi.n	80032de <__aeabi_dsub+0x55e>
 80032dc:	e14a      	b.n	8003574 <__aeabi_dsub+0x7f4>
 80032de:	230f      	movs	r3, #15
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d100      	bne.n	80032e8 <__aeabi_dsub+0x568>
 80032e6:	e0fc      	b.n	80034e2 <__aeabi_dsub+0x762>
 80032e8:	1d17      	adds	r7, r2, #4
 80032ea:	4297      	cmp	r7, r2
 80032ec:	41a4      	sbcs	r4, r4
 80032ee:	4264      	negs	r4, r4
 80032f0:	2502      	movs	r5, #2
 80032f2:	1864      	adds	r4, r4, r1
 80032f4:	e6ec      	b.n	80030d0 <__aeabi_dsub+0x350>
 80032f6:	4647      	mov	r7, r8
 80032f8:	001c      	movs	r4, r3
 80032fa:	431f      	orrs	r7, r3
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x580>
 80032fe:	e743      	b.n	8003188 <__aeabi_dsub+0x408>
 8003300:	2600      	movs	r6, #0
 8003302:	2500      	movs	r5, #0
 8003304:	2400      	movs	r4, #0
 8003306:	e6cf      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003308:	08c0      	lsrs	r0, r0, #3
 800330a:	0767      	lsls	r7, r4, #29
 800330c:	4307      	orrs	r7, r0
 800330e:	08e5      	lsrs	r5, r4, #3
 8003310:	e632      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003312:	1a87      	subs	r7, r0, r2
 8003314:	465b      	mov	r3, fp
 8003316:	42b8      	cmp	r0, r7
 8003318:	4180      	sbcs	r0, r0
 800331a:	1ae4      	subs	r4, r4, r3
 800331c:	4240      	negs	r0, r0
 800331e:	1a24      	subs	r4, r4, r0
 8003320:	0223      	lsls	r3, r4, #8
 8003322:	d428      	bmi.n	8003376 <__aeabi_dsub+0x5f6>
 8003324:	0763      	lsls	r3, r4, #29
 8003326:	08ff      	lsrs	r7, r7, #3
 8003328:	431f      	orrs	r7, r3
 800332a:	08e5      	lsrs	r5, r4, #3
 800332c:	2301      	movs	r3, #1
 800332e:	e77f      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d100      	bne.n	8003336 <__aeabi_dsub+0x5b6>
 8003334:	e673      	b.n	800301e <__aeabi_dsub+0x29e>
 8003336:	464b      	mov	r3, r9
 8003338:	1b5f      	subs	r7, r3, r5
 800333a:	003b      	movs	r3, r7
 800333c:	2d00      	cmp	r5, #0
 800333e:	d100      	bne.n	8003342 <__aeabi_dsub+0x5c2>
 8003340:	e742      	b.n	80031c8 <__aeabi_dsub+0x448>
 8003342:	2f38      	cmp	r7, #56	@ 0x38
 8003344:	dd00      	ble.n	8003348 <__aeabi_dsub+0x5c8>
 8003346:	e0ec      	b.n	8003522 <__aeabi_dsub+0x7a2>
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	000e      	movs	r6, r1
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431c      	orrs	r4, r3
 8003350:	2f1f      	cmp	r7, #31
 8003352:	dc25      	bgt.n	80033a0 <__aeabi_dsub+0x620>
 8003354:	2520      	movs	r5, #32
 8003356:	0023      	movs	r3, r4
 8003358:	1bed      	subs	r5, r5, r7
 800335a:	0001      	movs	r1, r0
 800335c:	40a8      	lsls	r0, r5
 800335e:	40ab      	lsls	r3, r5
 8003360:	40f9      	lsrs	r1, r7
 8003362:	1e45      	subs	r5, r0, #1
 8003364:	41a8      	sbcs	r0, r5
 8003366:	430b      	orrs	r3, r1
 8003368:	40fc      	lsrs	r4, r7
 800336a:	4318      	orrs	r0, r3
 800336c:	465b      	mov	r3, fp
 800336e:	1b1b      	subs	r3, r3, r4
 8003370:	469b      	mov	fp, r3
 8003372:	e739      	b.n	80031e8 <__aeabi_dsub+0x468>
 8003374:	4666      	mov	r6, ip
 8003376:	2501      	movs	r5, #1
 8003378:	e562      	b.n	8002e40 <__aeabi_dsub+0xc0>
 800337a:	001f      	movs	r7, r3
 800337c:	4659      	mov	r1, fp
 800337e:	3f20      	subs	r7, #32
 8003380:	40f9      	lsrs	r1, r7
 8003382:	468c      	mov	ip, r1
 8003384:	2b20      	cmp	r3, #32
 8003386:	d005      	beq.n	8003394 <__aeabi_dsub+0x614>
 8003388:	2740      	movs	r7, #64	@ 0x40
 800338a:	4659      	mov	r1, fp
 800338c:	1afb      	subs	r3, r7, r3
 800338e:	4099      	lsls	r1, r3
 8003390:	430a      	orrs	r2, r1
 8003392:	4692      	mov	sl, r2
 8003394:	4657      	mov	r7, sl
 8003396:	1e7b      	subs	r3, r7, #1
 8003398:	419f      	sbcs	r7, r3
 800339a:	4663      	mov	r3, ip
 800339c:	431f      	orrs	r7, r3
 800339e:	e5c1      	b.n	8002f24 <__aeabi_dsub+0x1a4>
 80033a0:	003b      	movs	r3, r7
 80033a2:	0025      	movs	r5, r4
 80033a4:	3b20      	subs	r3, #32
 80033a6:	40dd      	lsrs	r5, r3
 80033a8:	2f20      	cmp	r7, #32
 80033aa:	d004      	beq.n	80033b6 <__aeabi_dsub+0x636>
 80033ac:	2340      	movs	r3, #64	@ 0x40
 80033ae:	1bdb      	subs	r3, r3, r7
 80033b0:	409c      	lsls	r4, r3
 80033b2:	4320      	orrs	r0, r4
 80033b4:	4680      	mov	r8, r0
 80033b6:	4640      	mov	r0, r8
 80033b8:	1e43      	subs	r3, r0, #1
 80033ba:	4198      	sbcs	r0, r3
 80033bc:	4328      	orrs	r0, r5
 80033be:	e713      	b.n	80031e8 <__aeabi_dsub+0x468>
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d09d      	beq.n	8003300 <__aeabi_dsub+0x580>
 80033c4:	2601      	movs	r6, #1
 80033c6:	4663      	mov	r3, ip
 80033c8:	465c      	mov	r4, fp
 80033ca:	4690      	mov	r8, r2
 80033cc:	401e      	ands	r6, r3
 80033ce:	e6db      	b.n	8003188 <__aeabi_dsub+0x408>
 80033d0:	1a17      	subs	r7, r2, r0
 80033d2:	465b      	mov	r3, fp
 80033d4:	42ba      	cmp	r2, r7
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	1b1c      	subs	r4, r3, r4
 80033da:	4252      	negs	r2, r2
 80033dc:	1aa4      	subs	r4, r4, r2
 80033de:	0223      	lsls	r3, r4, #8
 80033e0:	d4c8      	bmi.n	8003374 <__aeabi_dsub+0x5f4>
 80033e2:	0763      	lsls	r3, r4, #29
 80033e4:	08ff      	lsrs	r7, r7, #3
 80033e6:	431f      	orrs	r7, r3
 80033e8:	4666      	mov	r6, ip
 80033ea:	2301      	movs	r3, #1
 80033ec:	08e5      	lsrs	r5, r4, #3
 80033ee:	e71f      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80033f0:	001d      	movs	r5, r3
 80033f2:	2400      	movs	r4, #0
 80033f4:	2700      	movs	r7, #0
 80033f6:	e657      	b.n	80030a8 <__aeabi_dsub+0x328>
 80033f8:	465c      	mov	r4, fp
 80033fa:	08d0      	lsrs	r0, r2, #3
 80033fc:	e66a      	b.n	80030d4 <__aeabi_dsub+0x354>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d100      	bne.n	8003404 <__aeabi_dsub+0x684>
 8003402:	e737      	b.n	8003274 <__aeabi_dsub+0x4f4>
 8003404:	4653      	mov	r3, sl
 8003406:	08c0      	lsrs	r0, r0, #3
 8003408:	0767      	lsls	r7, r4, #29
 800340a:	4307      	orrs	r7, r0
 800340c:	08e5      	lsrs	r5, r4, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d100      	bne.n	8003414 <__aeabi_dsub+0x694>
 8003412:	e5b1      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	031b      	lsls	r3, r3, #12
 8003418:	421d      	tst	r5, r3
 800341a:	d008      	beq.n	800342e <__aeabi_dsub+0x6ae>
 800341c:	4659      	mov	r1, fp
 800341e:	08c8      	lsrs	r0, r1, #3
 8003420:	4218      	tst	r0, r3
 8003422:	d104      	bne.n	800342e <__aeabi_dsub+0x6ae>
 8003424:	08d2      	lsrs	r2, r2, #3
 8003426:	0749      	lsls	r1, r1, #29
 8003428:	430a      	orrs	r2, r1
 800342a:	0017      	movs	r7, r2
 800342c:	0005      	movs	r5, r0
 800342e:	0f7b      	lsrs	r3, r7, #29
 8003430:	00ff      	lsls	r7, r7, #3
 8003432:	08ff      	lsrs	r7, r7, #3
 8003434:	075b      	lsls	r3, r3, #29
 8003436:	431f      	orrs	r7, r3
 8003438:	e59e      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 800343a:	08c0      	lsrs	r0, r0, #3
 800343c:	0763      	lsls	r3, r4, #29
 800343e:	4318      	orrs	r0, r3
 8003440:	08e5      	lsrs	r5, r4, #3
 8003442:	2900      	cmp	r1, #0
 8003444:	d053      	beq.n	80034ee <__aeabi_dsub+0x76e>
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	421d      	tst	r5, r3
 800344c:	d00a      	beq.n	8003464 <__aeabi_dsub+0x6e4>
 800344e:	4659      	mov	r1, fp
 8003450:	08cc      	lsrs	r4, r1, #3
 8003452:	421c      	tst	r4, r3
 8003454:	d106      	bne.n	8003464 <__aeabi_dsub+0x6e4>
 8003456:	2601      	movs	r6, #1
 8003458:	4663      	mov	r3, ip
 800345a:	0025      	movs	r5, r4
 800345c:	08d0      	lsrs	r0, r2, #3
 800345e:	0749      	lsls	r1, r1, #29
 8003460:	4308      	orrs	r0, r1
 8003462:	401e      	ands	r6, r3
 8003464:	0f47      	lsrs	r7, r0, #29
 8003466:	00c0      	lsls	r0, r0, #3
 8003468:	08c0      	lsrs	r0, r0, #3
 800346a:	077f      	lsls	r7, r7, #29
 800346c:	4307      	orrs	r7, r0
 800346e:	e583      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003470:	1883      	adds	r3, r0, r2
 8003472:	4293      	cmp	r3, r2
 8003474:	4192      	sbcs	r2, r2
 8003476:	445c      	add	r4, fp
 8003478:	4252      	negs	r2, r2
 800347a:	18a5      	adds	r5, r4, r2
 800347c:	022a      	lsls	r2, r5, #8
 800347e:	d500      	bpl.n	8003482 <__aeabi_dsub+0x702>
 8003480:	e724      	b.n	80032cc <__aeabi_dsub+0x54c>
 8003482:	076f      	lsls	r7, r5, #29
 8003484:	08db      	lsrs	r3, r3, #3
 8003486:	431f      	orrs	r7, r3
 8003488:	08ed      	lsrs	r5, r5, #3
 800348a:	2301      	movs	r3, #1
 800348c:	e6d0      	b.n	8003230 <__aeabi_dsub+0x4b0>
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	000007ff 	.word	0x000007ff
 8003494:	000007fe 	.word	0x000007fe
 8003498:	ff7fffff 	.word	0xff7fffff
 800349c:	465b      	mov	r3, fp
 800349e:	08d2      	lsrs	r2, r2, #3
 80034a0:	075f      	lsls	r7, r3, #29
 80034a2:	4666      	mov	r6, ip
 80034a4:	4317      	orrs	r7, r2
 80034a6:	08dd      	lsrs	r5, r3, #3
 80034a8:	e566      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80034aa:	0025      	movs	r5, r4
 80034ac:	3b20      	subs	r3, #32
 80034ae:	40dd      	lsrs	r5, r3
 80034b0:	4663      	mov	r3, ip
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d005      	beq.n	80034c2 <__aeabi_dsub+0x742>
 80034b6:	2340      	movs	r3, #64	@ 0x40
 80034b8:	4661      	mov	r1, ip
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	409c      	lsls	r4, r3
 80034be:	4320      	orrs	r0, r4
 80034c0:	4680      	mov	r8, r0
 80034c2:	4647      	mov	r7, r8
 80034c4:	1e7b      	subs	r3, r7, #1
 80034c6:	419f      	sbcs	r7, r3
 80034c8:	432f      	orrs	r7, r5
 80034ca:	e5a0      	b.n	800300e <__aeabi_dsub+0x28e>
 80034cc:	2120      	movs	r1, #32
 80034ce:	2700      	movs	r7, #0
 80034d0:	1a09      	subs	r1, r1, r0
 80034d2:	e4d2      	b.n	8002e7a <__aeabi_dsub+0xfa>
 80034d4:	2f00      	cmp	r7, #0
 80034d6:	d100      	bne.n	80034da <__aeabi_dsub+0x75a>
 80034d8:	e713      	b.n	8003302 <__aeabi_dsub+0x582>
 80034da:	465c      	mov	r4, fp
 80034dc:	0017      	movs	r7, r2
 80034de:	2500      	movs	r5, #0
 80034e0:	e5f6      	b.n	80030d0 <__aeabi_dsub+0x350>
 80034e2:	08d7      	lsrs	r7, r2, #3
 80034e4:	0749      	lsls	r1, r1, #29
 80034e6:	2302      	movs	r3, #2
 80034e8:	430f      	orrs	r7, r1
 80034ea:	092d      	lsrs	r5, r5, #4
 80034ec:	e6a0      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80034ee:	0007      	movs	r7, r0
 80034f0:	e542      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80034f2:	465b      	mov	r3, fp
 80034f4:	2601      	movs	r6, #1
 80034f6:	075f      	lsls	r7, r3, #29
 80034f8:	08dd      	lsrs	r5, r3, #3
 80034fa:	4663      	mov	r3, ip
 80034fc:	08d2      	lsrs	r2, r2, #3
 80034fe:	4317      	orrs	r7, r2
 8003500:	401e      	ands	r6, r3
 8003502:	e539      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003504:	465b      	mov	r3, fp
 8003506:	08d2      	lsrs	r2, r2, #3
 8003508:	075f      	lsls	r7, r3, #29
 800350a:	4317      	orrs	r7, r2
 800350c:	08dd      	lsrs	r5, r3, #3
 800350e:	e533      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003510:	4a1e      	ldr	r2, [pc, #120]	@ (800358c <__aeabi_dsub+0x80c>)
 8003512:	08db      	lsrs	r3, r3, #3
 8003514:	4022      	ands	r2, r4
 8003516:	0757      	lsls	r7, r2, #29
 8003518:	0252      	lsls	r2, r2, #9
 800351a:	2501      	movs	r5, #1
 800351c:	431f      	orrs	r7, r3
 800351e:	0b14      	lsrs	r4, r2, #12
 8003520:	e5c2      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003522:	000e      	movs	r6, r1
 8003524:	2001      	movs	r0, #1
 8003526:	e65f      	b.n	80031e8 <__aeabi_dsub+0x468>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <__aeabi_dsub+0x7c8>
 800352c:	464b      	mov	r3, r9
 800352e:	1b5b      	subs	r3, r3, r5
 8003530:	469c      	mov	ip, r3
 8003532:	2d00      	cmp	r5, #0
 8003534:	d100      	bne.n	8003538 <__aeabi_dsub+0x7b8>
 8003536:	e548      	b.n	8002fca <__aeabi_dsub+0x24a>
 8003538:	2701      	movs	r7, #1
 800353a:	2b38      	cmp	r3, #56	@ 0x38
 800353c:	dd00      	ble.n	8003540 <__aeabi_dsub+0x7c0>
 800353e:	e566      	b.n	800300e <__aeabi_dsub+0x28e>
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431c      	orrs	r4, r3
 8003546:	e550      	b.n	8002fea <__aeabi_dsub+0x26a>
 8003548:	1c6b      	adds	r3, r5, #1
 800354a:	4d11      	ldr	r5, [pc, #68]	@ (8003590 <__aeabi_dsub+0x810>)
 800354c:	422b      	tst	r3, r5
 800354e:	d000      	beq.n	8003552 <__aeabi_dsub+0x7d2>
 8003550:	e673      	b.n	800323a <__aeabi_dsub+0x4ba>
 8003552:	4659      	mov	r1, fp
 8003554:	0023      	movs	r3, r4
 8003556:	4311      	orrs	r1, r2
 8003558:	468a      	mov	sl, r1
 800355a:	4303      	orrs	r3, r0
 800355c:	e600      	b.n	8003160 <__aeabi_dsub+0x3e0>
 800355e:	0767      	lsls	r7, r4, #29
 8003560:	08c0      	lsrs	r0, r0, #3
 8003562:	2300      	movs	r3, #0
 8003564:	4307      	orrs	r7, r0
 8003566:	08e5      	lsrs	r5, r4, #3
 8003568:	e662      	b.n	8003230 <__aeabi_dsub+0x4b0>
 800356a:	0764      	lsls	r4, r4, #29
 800356c:	08ff      	lsrs	r7, r7, #3
 800356e:	4327      	orrs	r7, r4
 8003570:	0905      	lsrs	r5, r0, #4
 8003572:	e65d      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003574:	08d2      	lsrs	r2, r2, #3
 8003576:	0749      	lsls	r1, r1, #29
 8003578:	4311      	orrs	r1, r2
 800357a:	000f      	movs	r7, r1
 800357c:	2302      	movs	r3, #2
 800357e:	092d      	lsrs	r5, r5, #4
 8003580:	e656      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003582:	0007      	movs	r7, r0
 8003584:	e5a4      	b.n	80030d0 <__aeabi_dsub+0x350>
 8003586:	0038      	movs	r0, r7
 8003588:	e48f      	b.n	8002eaa <__aeabi_dsub+0x12a>
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	ff7fffff 	.word	0xff7fffff
 8003590:	000007fe 	.word	0x000007fe

08003594 <__aeabi_dcmpun>:
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	46c6      	mov	lr, r8
 8003598:	031e      	lsls	r6, r3, #12
 800359a:	0b36      	lsrs	r6, r6, #12
 800359c:	46b0      	mov	r8, r6
 800359e:	4e0d      	ldr	r6, [pc, #52]	@ (80035d4 <__aeabi_dcmpun+0x40>)
 80035a0:	030c      	lsls	r4, r1, #12
 80035a2:	004d      	lsls	r5, r1, #1
 80035a4:	005f      	lsls	r7, r3, #1
 80035a6:	b500      	push	{lr}
 80035a8:	0b24      	lsrs	r4, r4, #12
 80035aa:	0d6d      	lsrs	r5, r5, #21
 80035ac:	0d7f      	lsrs	r7, r7, #21
 80035ae:	42b5      	cmp	r5, r6
 80035b0:	d00b      	beq.n	80035ca <__aeabi_dcmpun+0x36>
 80035b2:	4908      	ldr	r1, [pc, #32]	@ (80035d4 <__aeabi_dcmpun+0x40>)
 80035b4:	2000      	movs	r0, #0
 80035b6:	428f      	cmp	r7, r1
 80035b8:	d104      	bne.n	80035c4 <__aeabi_dcmpun+0x30>
 80035ba:	4646      	mov	r6, r8
 80035bc:	4316      	orrs	r6, r2
 80035be:	0030      	movs	r0, r6
 80035c0:	1e43      	subs	r3, r0, #1
 80035c2:	4198      	sbcs	r0, r3
 80035c4:	bc80      	pop	{r7}
 80035c6:	46b8      	mov	r8, r7
 80035c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ca:	4304      	orrs	r4, r0
 80035cc:	2001      	movs	r0, #1
 80035ce:	2c00      	cmp	r4, #0
 80035d0:	d1f8      	bne.n	80035c4 <__aeabi_dcmpun+0x30>
 80035d2:	e7ee      	b.n	80035b2 <__aeabi_dcmpun+0x1e>
 80035d4:	000007ff 	.word	0x000007ff

080035d8 <__aeabi_d2iz>:
 80035d8:	000b      	movs	r3, r1
 80035da:	0002      	movs	r2, r0
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4d16      	ldr	r5, [pc, #88]	@ (8003638 <__aeabi_d2iz+0x60>)
 80035e0:	030c      	lsls	r4, r1, #12
 80035e2:	b082      	sub	sp, #8
 80035e4:	0049      	lsls	r1, r1, #1
 80035e6:	2000      	movs	r0, #0
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	0b24      	lsrs	r4, r4, #12
 80035ee:	0d49      	lsrs	r1, r1, #21
 80035f0:	0fde      	lsrs	r6, r3, #31
 80035f2:	42a9      	cmp	r1, r5
 80035f4:	dd04      	ble.n	8003600 <__aeabi_d2iz+0x28>
 80035f6:	4811      	ldr	r0, [pc, #68]	@ (800363c <__aeabi_d2iz+0x64>)
 80035f8:	4281      	cmp	r1, r0
 80035fa:	dd03      	ble.n	8003604 <__aeabi_d2iz+0x2c>
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <__aeabi_d2iz+0x68>)
 80035fe:	18f0      	adds	r0, r6, r3
 8003600:	b002      	add	sp, #8
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	2080      	movs	r0, #128	@ 0x80
 8003606:	0340      	lsls	r0, r0, #13
 8003608:	4320      	orrs	r0, r4
 800360a:	4c0e      	ldr	r4, [pc, #56]	@ (8003644 <__aeabi_d2iz+0x6c>)
 800360c:	1a64      	subs	r4, r4, r1
 800360e:	2c1f      	cmp	r4, #31
 8003610:	dd08      	ble.n	8003624 <__aeabi_d2iz+0x4c>
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <__aeabi_d2iz+0x70>)
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	40d8      	lsrs	r0, r3
 8003618:	0003      	movs	r3, r0
 800361a:	4258      	negs	r0, r3
 800361c:	2e00      	cmp	r6, #0
 800361e:	d1ef      	bne.n	8003600 <__aeabi_d2iz+0x28>
 8003620:	0018      	movs	r0, r3
 8003622:	e7ed      	b.n	8003600 <__aeabi_d2iz+0x28>
 8003624:	4b09      	ldr	r3, [pc, #36]	@ (800364c <__aeabi_d2iz+0x74>)
 8003626:	9a00      	ldr	r2, [sp, #0]
 8003628:	469c      	mov	ip, r3
 800362a:	0003      	movs	r3, r0
 800362c:	4461      	add	r1, ip
 800362e:	408b      	lsls	r3, r1
 8003630:	40e2      	lsrs	r2, r4
 8003632:	4313      	orrs	r3, r2
 8003634:	e7f1      	b.n	800361a <__aeabi_d2iz+0x42>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	000003fe 	.word	0x000003fe
 800363c:	0000041d 	.word	0x0000041d
 8003640:	7fffffff 	.word	0x7fffffff
 8003644:	00000433 	.word	0x00000433
 8003648:	00000413 	.word	0x00000413
 800364c:	fffffbed 	.word	0xfffffbed

08003650 <__aeabi_ui2d>:
 8003650:	b510      	push	{r4, lr}
 8003652:	1e04      	subs	r4, r0, #0
 8003654:	d010      	beq.n	8003678 <__aeabi_ui2d+0x28>
 8003656:	f000 f867 	bl	8003728 <__clzsi2>
 800365a:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <__aeabi_ui2d+0x44>)
 800365c:	1a1b      	subs	r3, r3, r0
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	0d5b      	lsrs	r3, r3, #21
 8003662:	280a      	cmp	r0, #10
 8003664:	dc0f      	bgt.n	8003686 <__aeabi_ui2d+0x36>
 8003666:	220b      	movs	r2, #11
 8003668:	0021      	movs	r1, r4
 800366a:	1a12      	subs	r2, r2, r0
 800366c:	40d1      	lsrs	r1, r2
 800366e:	3015      	adds	r0, #21
 8003670:	030a      	lsls	r2, r1, #12
 8003672:	4084      	lsls	r4, r0
 8003674:	0b12      	lsrs	r2, r2, #12
 8003676:	e001      	b.n	800367c <__aeabi_ui2d+0x2c>
 8003678:	2300      	movs	r3, #0
 800367a:	2200      	movs	r2, #0
 800367c:	051b      	lsls	r3, r3, #20
 800367e:	4313      	orrs	r3, r2
 8003680:	0020      	movs	r0, r4
 8003682:	0019      	movs	r1, r3
 8003684:	bd10      	pop	{r4, pc}
 8003686:	0022      	movs	r2, r4
 8003688:	380b      	subs	r0, #11
 800368a:	4082      	lsls	r2, r0
 800368c:	0312      	lsls	r2, r2, #12
 800368e:	2400      	movs	r4, #0
 8003690:	0b12      	lsrs	r2, r2, #12
 8003692:	e7f3      	b.n	800367c <__aeabi_ui2d+0x2c>
 8003694:	0000041e 	.word	0x0000041e

08003698 <__aeabi_f2d>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	0242      	lsls	r2, r0, #9
 800369c:	0043      	lsls	r3, r0, #1
 800369e:	0fc4      	lsrs	r4, r0, #31
 80036a0:	20fe      	movs	r0, #254	@ 0xfe
 80036a2:	0e1b      	lsrs	r3, r3, #24
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	0a55      	lsrs	r5, r2, #9
 80036a8:	4208      	tst	r0, r1
 80036aa:	d00c      	beq.n	80036c6 <__aeabi_f2d+0x2e>
 80036ac:	21e0      	movs	r1, #224	@ 0xe0
 80036ae:	0089      	lsls	r1, r1, #2
 80036b0:	468c      	mov	ip, r1
 80036b2:	076d      	lsls	r5, r5, #29
 80036b4:	0b12      	lsrs	r2, r2, #12
 80036b6:	4463      	add	r3, ip
 80036b8:	051b      	lsls	r3, r3, #20
 80036ba:	4313      	orrs	r3, r2
 80036bc:	07e4      	lsls	r4, r4, #31
 80036be:	4323      	orrs	r3, r4
 80036c0:	0028      	movs	r0, r5
 80036c2:	0019      	movs	r1, r3
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d114      	bne.n	80036f4 <__aeabi_f2d+0x5c>
 80036ca:	2d00      	cmp	r5, #0
 80036cc:	d01b      	beq.n	8003706 <__aeabi_f2d+0x6e>
 80036ce:	0028      	movs	r0, r5
 80036d0:	f000 f82a 	bl	8003728 <__clzsi2>
 80036d4:	280a      	cmp	r0, #10
 80036d6:	dc1c      	bgt.n	8003712 <__aeabi_f2d+0x7a>
 80036d8:	230b      	movs	r3, #11
 80036da:	002a      	movs	r2, r5
 80036dc:	1a1b      	subs	r3, r3, r0
 80036de:	40da      	lsrs	r2, r3
 80036e0:	0003      	movs	r3, r0
 80036e2:	3315      	adds	r3, #21
 80036e4:	409d      	lsls	r5, r3
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <__aeabi_f2d+0x88>)
 80036e8:	0312      	lsls	r2, r2, #12
 80036ea:	1a1b      	subs	r3, r3, r0
 80036ec:	055b      	lsls	r3, r3, #21
 80036ee:	0b12      	lsrs	r2, r2, #12
 80036f0:	0d5b      	lsrs	r3, r3, #21
 80036f2:	e7e1      	b.n	80036b8 <__aeabi_f2d+0x20>
 80036f4:	2d00      	cmp	r5, #0
 80036f6:	d009      	beq.n	800370c <__aeabi_f2d+0x74>
 80036f8:	0b13      	lsrs	r3, r2, #12
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	0312      	lsls	r2, r2, #12
 80036fe:	431a      	orrs	r2, r3
 8003700:	076d      	lsls	r5, r5, #29
 8003702:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <__aeabi_f2d+0x8c>)
 8003704:	e7d8      	b.n	80036b8 <__aeabi_f2d+0x20>
 8003706:	2300      	movs	r3, #0
 8003708:	2200      	movs	r2, #0
 800370a:	e7d5      	b.n	80036b8 <__aeabi_f2d+0x20>
 800370c:	2200      	movs	r2, #0
 800370e:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <__aeabi_f2d+0x8c>)
 8003710:	e7d2      	b.n	80036b8 <__aeabi_f2d+0x20>
 8003712:	0003      	movs	r3, r0
 8003714:	002a      	movs	r2, r5
 8003716:	3b0b      	subs	r3, #11
 8003718:	409a      	lsls	r2, r3
 800371a:	2500      	movs	r5, #0
 800371c:	e7e3      	b.n	80036e6 <__aeabi_f2d+0x4e>
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	00000389 	.word	0x00000389
 8003724:	000007ff 	.word	0x000007ff

08003728 <__clzsi2>:
 8003728:	211c      	movs	r1, #28
 800372a:	2301      	movs	r3, #1
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	4298      	cmp	r0, r3
 8003730:	d301      	bcc.n	8003736 <__clzsi2+0xe>
 8003732:	0c00      	lsrs	r0, r0, #16
 8003734:	3910      	subs	r1, #16
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	4298      	cmp	r0, r3
 800373a:	d301      	bcc.n	8003740 <__clzsi2+0x18>
 800373c:	0a00      	lsrs	r0, r0, #8
 800373e:	3908      	subs	r1, #8
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	4298      	cmp	r0, r3
 8003744:	d301      	bcc.n	800374a <__clzsi2+0x22>
 8003746:	0900      	lsrs	r0, r0, #4
 8003748:	3904      	subs	r1, #4
 800374a:	a202      	add	r2, pc, #8	@ (adr r2, 8003754 <__clzsi2+0x2c>)
 800374c:	5c10      	ldrb	r0, [r2, r0]
 800374e:	1840      	adds	r0, r0, r1
 8003750:	4770      	bx	lr
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	02020304 	.word	0x02020304
 8003758:	01010101 	.word	0x01010101
	...

08003764 <__clzdi2>:
 8003764:	b510      	push	{r4, lr}
 8003766:	2900      	cmp	r1, #0
 8003768:	d103      	bne.n	8003772 <__clzdi2+0xe>
 800376a:	f7ff ffdd 	bl	8003728 <__clzsi2>
 800376e:	3020      	adds	r0, #32
 8003770:	e002      	b.n	8003778 <__clzdi2+0x14>
 8003772:	0008      	movs	r0, r1
 8003774:	f7ff ffd8 	bl	8003728 <__clzsi2>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	46c0      	nop			@ (mov r8, r8)

0800377c <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	0004      	movs	r4, r0
 8003784:	0008      	movs	r0, r1
 8003786:	0011      	movs	r1, r2
 8003788:	1dbb      	adds	r3, r7, #6
 800378a:	1c22      	adds	r2, r4, #0
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	1c02      	adds	r2, r0, #0
 8003792:	801a      	strh	r2, [r3, #0]
 8003794:	1cbb      	adds	r3, r7, #2
 8003796:	1c0a      	adds	r2, r1, #0
 8003798:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	8818      	ldrh	r0, [r3, #0]
 800379e:	1dbb      	adds	r3, r7, #6
 80037a0:	8819      	ldrh	r1, [r3, #0]
 80037a2:	1cbb      	adds	r3, r7, #2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	001a      	movs	r2, r3
 80037a8:	f000 fee8 	bl	800457c <ST7735_DrawPixel>
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b003      	add	sp, #12
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	46c6      	mov	lr, r8
 80037b8:	b500      	push	{lr}
 80037ba:	b090      	sub	sp, #64	@ 0x40
 80037bc:	af04      	add	r7, sp, #16
 80037be:	468c      	mov	ip, r1
 80037c0:	0016      	movs	r6, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	221e      	movs	r2, #30
 80037c6:	18ba      	adds	r2, r7, r2
 80037c8:	1c03      	adds	r3, r0, #0
 80037ca:	8013      	strh	r3, [r2, #0]
 80037cc:	231c      	movs	r3, #28
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	4662      	mov	r2, ip
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	201a      	movs	r0, #26
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	1c32      	adds	r2, r6, #0
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	2018      	movs	r0, #24
 80037de:	183b      	adds	r3, r7, r0
 80037e0:	1c0a      	adds	r2, r1, #0
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	466b      	mov	r3, sp
 80037e6:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 80037e8:	230c      	movs	r3, #12
 80037ea:	0001      	movs	r1, r0
 80037ec:	185e      	adds	r6, r3, r1
 80037ee:	19f2      	adds	r2, r6, r7
 80037f0:	2030      	movs	r0, #48	@ 0x30
 80037f2:	1846      	adds	r6, r0, r1
 80037f4:	19f3      	adds	r3, r6, r7
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 80037fa:	201a      	movs	r0, #26
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	2200      	movs	r2, #0
 8003800:	5e9b      	ldrsh	r3, [r3, r2]
 8003802:	187a      	adds	r2, r7, r1
 8003804:	2000      	movs	r0, #0
 8003806:	5e12      	ldrsh	r2, [r2, r0]
 8003808:	4353      	muls	r3, r2
 800380a:	1e5a      	subs	r2, r3, #1
 800380c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380e:	001a      	movs	r2, r3
 8003810:	60ba      	str	r2, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	60fa      	str	r2, [r7, #12]
 8003816:	68b8      	ldr	r0, [r7, #8]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	0002      	movs	r2, r0
 800381c:	0ed2      	lsrs	r2, r2, #27
 800381e:	000e      	movs	r6, r1
 8003820:	0176      	lsls	r6, r6, #5
 8003822:	617e      	str	r6, [r7, #20]
 8003824:	697e      	ldr	r6, [r7, #20]
 8003826:	4316      	orrs	r6, r2
 8003828:	617e      	str	r6, [r7, #20]
 800382a:	0002      	movs	r2, r0
 800382c:	0152      	lsls	r2, r2, #5
 800382e:	613a      	str	r2, [r7, #16]
 8003830:	001a      	movs	r2, r3
 8003832:	603a      	str	r2, [r7, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	0002      	movs	r2, r0
 800383e:	0ed2      	lsrs	r2, r2, #27
 8003840:	000e      	movs	r6, r1
 8003842:	0175      	lsls	r5, r6, #5
 8003844:	4315      	orrs	r5, r2
 8003846:	0002      	movs	r2, r0
 8003848:	0154      	lsls	r4, r2, #5
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	3307      	adds	r3, #7
 800384e:	08db      	lsrs	r3, r3, #3
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	466a      	mov	r2, sp
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	4695      	mov	sp, r2
 8003858:	ab04      	add	r3, sp, #16
 800385a:	3301      	adds	r3, #1
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	2200      	movs	r2, #0
 8003866:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8003868:	201a      	movs	r0, #26
 800386a:	183b      	adds	r3, r7, r0
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	2118      	movs	r1, #24
 8003870:	187a      	adds	r2, r7, r1
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	4353      	muls	r3, r2
 8003876:	b29a      	uxth	r2, r3
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 800387c:	221e      	movs	r2, #30
 800387e:	18bb      	adds	r3, r7, r2
 8003880:	881c      	ldrh	r4, [r3, #0]
 8003882:	231c      	movs	r3, #28
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	881d      	ldrh	r5, [r3, #0]
 8003888:	183b      	adds	r3, r7, r0
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	0008      	movs	r0, r1
 800388e:	187a      	adds	r2, r7, r1
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	210c      	movs	r1, #12
 8003894:	1809      	adds	r1, r1, r0
 8003896:	19c9      	adds	r1, r1, r7
 8003898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800389a:	2601      	movs	r6, #1
 800389c:	46b4      	mov	ip, r6
 800389e:	4666      	mov	r6, ip
 80038a0:	9602      	str	r6, [sp, #8]
 80038a2:	9201      	str	r2, [sp, #4]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	002b      	movs	r3, r5
 80038a8:	0022      	movs	r2, r4
 80038aa:	f000 fbc5 	bl	8004038 <drawImage>
 80038ae:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b00c      	add	sp, #48	@ 0x30
 80038b6:	bc80      	pop	{r7}
 80038b8:	46b8      	mov	r8, r7
 80038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038bc <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	0004      	movs	r4, r0
 80038c4:	0008      	movs	r0, r1
 80038c6:	0011      	movs	r1, r2
 80038c8:	1dbb      	adds	r3, r7, #6
 80038ca:	1c22      	adds	r2, r4, #0
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	1c02      	adds	r2, r0, #0
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	1cbb      	adds	r3, r7, #2
 80038d6:	1c0a      	adds	r2, r1, #0
 80038d8:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 80038da:	1cbb      	adds	r3, r7, #2
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	5e59      	ldrsh	r1, [r3, r1]
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	2000      	movs	r0, #0
 80038e8:	5e1b      	ldrsh	r3, [r3, r0]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff ff46 	bl	800377c <drawPixel>
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b003      	add	sp, #12
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	0005      	movs	r5, r0
 8003900:	000c      	movs	r4, r1
 8003902:	0010      	movs	r0, r2
 8003904:	0019      	movs	r1, r3
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	1c2a      	adds	r2, r5, #0
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	1c22      	adds	r2, r4, #0
 8003910:	801a      	strh	r2, [r3, #0]
 8003912:	1cbb      	adds	r3, r7, #2
 8003914:	1c02      	adds	r2, r0, #0
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	003b      	movs	r3, r7
 800391a:	1c0a      	adds	r2, r1, #0
 800391c:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800391e:	003b      	movs	r3, r7
 8003920:	2200      	movs	r2, #0
 8003922:	5e9a      	ldrsh	r2, [r3, r2]
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	2100      	movs	r1, #0
 8003928:	5e5b      	ldrsh	r3, [r3, r1]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	17d9      	asrs	r1, r3, #31
 800392e:	185a      	adds	r2, r3, r1
 8003930:	404a      	eors	r2, r1
 8003932:	1cbb      	adds	r3, r7, #2
 8003934:	2100      	movs	r1, #0
 8003936:	5e59      	ldrsh	r1, [r3, r1]
 8003938:	1dbb      	adds	r3, r7, #6
 800393a:	2000      	movs	r0, #0
 800393c:	5e1b      	ldrsh	r3, [r3, r0]
 800393e:	1acb      	subs	r3, r1, r3
 8003940:	17d9      	asrs	r1, r3, #31
 8003942:	185b      	adds	r3, r3, r1
 8003944:	404b      	eors	r3, r1
 8003946:	2101      	movs	r1, #1
 8003948:	429a      	cmp	r2, r3
 800394a:	dc01      	bgt.n	8003950 <writeLine+0x58>
 800394c:	2300      	movs	r3, #0
 800394e:	1c19      	adds	r1, r3, #0
 8003950:	b2ca      	uxtb	r2, r1
 8003952:	211a      	movs	r1, #26
 8003954:	187b      	adds	r3, r7, r1
 8003956:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003958:	187b      	adds	r3, r7, r1
 800395a:	2200      	movs	r2, #0
 800395c:	5e9b      	ldrsh	r3, [r3, r2]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d019      	beq.n	8003996 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8003962:	2118      	movs	r1, #24
 8003964:	187b      	adds	r3, r7, r1
 8003966:	1dba      	adds	r2, r7, #6
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	1d3a      	adds	r2, r7, #4
 8003970:	8812      	ldrh	r2, [r2, #0]
 8003972:	801a      	strh	r2, [r3, #0]
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	187a      	adds	r2, r7, r1
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 800397c:	2116      	movs	r1, #22
 800397e:	187b      	adds	r3, r7, r1
 8003980:	1cba      	adds	r2, r7, #2
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	1cbb      	adds	r3, r7, #2
 8003988:	003a      	movs	r2, r7
 800398a:	8812      	ldrh	r2, [r2, #0]
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	003b      	movs	r3, r7
 8003990:	187a      	adds	r2, r7, r1
 8003992:	8812      	ldrh	r2, [r2, #0]
 8003994:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003996:	1dba      	adds	r2, r7, #6
 8003998:	1cbb      	adds	r3, r7, #2
 800399a:	2100      	movs	r1, #0
 800399c:	5e52      	ldrsh	r2, [r2, r1]
 800399e:	2100      	movs	r1, #0
 80039a0:	5e5b      	ldrsh	r3, [r3, r1]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	dd19      	ble.n	80039da <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 80039a6:	2114      	movs	r1, #20
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	1dba      	adds	r2, r7, #6
 80039ac:	8812      	ldrh	r2, [r2, #0]
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	1dbb      	adds	r3, r7, #6
 80039b2:	1cba      	adds	r2, r7, #2
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	1cbb      	adds	r3, r7, #2
 80039ba:	187a      	adds	r2, r7, r1
 80039bc:	8812      	ldrh	r2, [r2, #0]
 80039be:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 80039c0:	2112      	movs	r1, #18
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	1d3a      	adds	r2, r7, #4
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	003a      	movs	r2, r7
 80039ce:	8812      	ldrh	r2, [r2, #0]
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	003b      	movs	r3, r7
 80039d4:	187a      	adds	r2, r7, r1
 80039d6:	8812      	ldrh	r2, [r2, #0]
 80039d8:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80039da:	1cbb      	adds	r3, r7, #2
 80039dc:	881a      	ldrh	r2, [r3, #0]
 80039de:	1dbb      	adds	r3, r7, #6
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	2010      	movs	r0, #16
 80039e8:	183b      	adds	r3, r7, r0
 80039ea:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 80039ec:	003b      	movs	r3, r7
 80039ee:	2200      	movs	r2, #0
 80039f0:	5e9a      	ldrsh	r2, [r3, r2]
 80039f2:	1d3b      	adds	r3, r7, #4
 80039f4:	2100      	movs	r1, #0
 80039f6:	5e5b      	ldrsh	r3, [r3, r1]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	17d9      	asrs	r1, r3, #31
 80039fc:	185a      	adds	r2, r3, r1
 80039fe:	404a      	eors	r2, r1
 8003a00:	230e      	movs	r3, #14
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8003a06:	231e      	movs	r3, #30
 8003a08:	18fa      	adds	r2, r7, r3
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5e5b      	ldrsh	r3, [r3, r1]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da00      	bge.n	8003a16 <writeLine+0x11e>
 8003a14:	3301      	adds	r3, #1
 8003a16:	105b      	asrs	r3, r3, #1
 8003a18:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8003a1a:	1d3a      	adds	r2, r7, #4
 8003a1c:	003b      	movs	r3, r7
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5e52      	ldrsh	r2, [r2, r1]
 8003a22:	2100      	movs	r1, #0
 8003a24:	5e5b      	ldrsh	r3, [r3, r1]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	da04      	bge.n	8003a34 <writeLine+0x13c>
        ystep = 1;
 8003a2a:	231c      	movs	r3, #28
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2201      	movs	r2, #1
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	e04d      	b.n	8003ad0 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003a34:	231c      	movs	r3, #28
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4252      	negs	r2, r2
 8003a3c:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8003a3e:	e047      	b.n	8003ad0 <writeLine+0x1d8>
        if (steep) {
 8003a40:	231a      	movs	r3, #26
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	5e9b      	ldrsh	r3, [r3, r2]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003a4c:	2330      	movs	r3, #48	@ 0x30
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	881a      	ldrh	r2, [r3, #0]
 8003a52:	1dbb      	adds	r3, r7, #6
 8003a54:	2100      	movs	r1, #0
 8003a56:	5e59      	ldrsh	r1, [r3, r1]
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	5e1b      	ldrsh	r3, [r3, r0]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7ff ff2c 	bl	80038bc <writePixel>
 8003a64:	e00b      	b.n	8003a7e <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8003a66:	2330      	movs	r3, #48	@ 0x30
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5e59      	ldrsh	r1, [r3, r1]
 8003a72:	1dbb      	adds	r3, r7, #6
 8003a74:	2000      	movs	r0, #0
 8003a76:	5e1b      	ldrsh	r3, [r3, r0]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff ff1f 	bl	80038bc <writePixel>
        }
        err -= dy;
 8003a7e:	211e      	movs	r1, #30
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	230e      	movs	r3, #14
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	2200      	movs	r2, #0
 8003a96:	5e9b      	ldrsh	r3, [r3, r2]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da11      	bge.n	8003ac0 <writeLine+0x1c8>
            y0 += ystep;
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	231c      	movs	r3, #28
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	1dbb      	adds	r3, r7, #6
 8003ace:	801a      	strh	r2, [r3, #0]
 8003ad0:	1dba      	adds	r2, r7, #6
 8003ad2:	1cbb      	adds	r3, r7, #2
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5e52      	ldrsh	r2, [r2, r1]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	5e5b      	ldrsh	r3, [r3, r1]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	ddaf      	ble.n	8003a40 <writeLine+0x148>
        }
    }
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b008      	add	sp, #32
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}

08003aea <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003aea:	b5b0      	push	{r4, r5, r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af02      	add	r7, sp, #8
 8003af0:	0005      	movs	r5, r0
 8003af2:	000c      	movs	r4, r1
 8003af4:	0010      	movs	r0, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	1c2a      	adds	r2, r5, #0
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	1c22      	adds	r2, r4, #0
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	1cbb      	adds	r3, r7, #2
 8003b06:	1c02      	adds	r2, r0, #0
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	003b      	movs	r3, r7
 8003b0c:	1c0a      	adds	r2, r1, #0
 8003b0e:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	881a      	ldrh	r2, [r3, #0]
 8003b14:	1cbb      	adds	r3, r7, #2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b21c      	sxth	r4, r3
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	2200      	movs	r2, #0
 8003b26:	5e9a      	ldrsh	r2, [r3, r2]
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5e59      	ldrsh	r1, [r3, r1]
 8003b2e:	1dbb      	adds	r3, r7, #6
 8003b30:	2000      	movs	r0, #0
 8003b32:	5e18      	ldrsh	r0, [r3, r0]
 8003b34:	003b      	movs	r3, r7
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	0023      	movs	r3, r4
 8003b3c:	f7ff fedc 	bl	80038f8 <writeLine>
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bdb0      	pop	{r4, r5, r7, pc}

08003b48 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	0005      	movs	r5, r0
 8003b50:	000c      	movs	r4, r1
 8003b52:	0010      	movs	r0, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	1c2a      	adds	r2, r5, #0
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	1c22      	adds	r2, r4, #0
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	1cbb      	adds	r3, r7, #2
 8003b64:	1c02      	adds	r2, r0, #0
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	003b      	movs	r3, r7
 8003b6a:	1c0a      	adds	r2, r1, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	1cbb      	adds	r3, r7, #2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	2400      	movs	r4, #0
 8003b84:	5f1c      	ldrsh	r4, [r3, r4]
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5e59      	ldrsh	r1, [r3, r1]
 8003b8c:	1dbb      	adds	r3, r7, #6
 8003b8e:	2000      	movs	r0, #0
 8003b90:	5e18      	ldrsh	r0, [r3, r0]
 8003b92:	003b      	movs	r3, r7
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	0023      	movs	r3, r4
 8003b9a:	f7ff fead 	bl	80038f8 <writeLine>
}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b002      	add	sp, #8
 8003ba4:	bdb0      	pop	{r4, r5, r7, pc}

08003ba6 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003ba6:	b5b0      	push	{r4, r5, r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	0005      	movs	r5, r0
 8003bae:	000c      	movs	r4, r1
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	1dbb      	adds	r3, r7, #6
 8003bb6:	1c2a      	adds	r2, r5, #0
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	1c22      	adds	r2, r4, #0
 8003bbe:	801a      	strh	r2, [r3, #0]
 8003bc0:	1cbb      	adds	r3, r7, #2
 8003bc2:	1c02      	adds	r2, r0, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	003b      	movs	r3, r7
 8003bc8:	1c0a      	adds	r2, r1, #0
 8003bca:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003bcc:	1dba      	adds	r2, r7, #6
 8003bce:	1cbb      	adds	r3, r7, #2
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5e52      	ldrsh	r2, [r2, r1]
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5e5b      	ldrsh	r3, [r3, r1]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d12a      	bne.n	8003c32 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003bdc:	1d3a      	adds	r2, r7, #4
 8003bde:	003b      	movs	r3, r7
 8003be0:	2100      	movs	r1, #0
 8003be2:	5e52      	ldrsh	r2, [r2, r1]
 8003be4:	2100      	movs	r1, #0
 8003be6:	5e5b      	ldrsh	r3, [r3, r1]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	dd0c      	ble.n	8003c06 <drawLine+0x60>
 8003bec:	210c      	movs	r1, #12
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	1d3a      	adds	r2, r7, #4
 8003bf2:	8812      	ldrh	r2, [r2, #0]
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	003a      	movs	r2, r7
 8003bfa:	8812      	ldrh	r2, [r2, #0]
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	003b      	movs	r3, r7
 8003c00:	187a      	adds	r2, r7, r1
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003c06:	003b      	movs	r3, r7
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	b21a      	sxth	r2, r3
 8003c18:	2320      	movs	r3, #32
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	881c      	ldrh	r4, [r3, #0]
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	2100      	movs	r1, #0
 8003c22:	5e59      	ldrsh	r1, [r3, r1]
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	2000      	movs	r0, #0
 8003c28:	5e18      	ldrsh	r0, [r3, r0]
 8003c2a:	0023      	movs	r3, r4
 8003c2c:	f7ff ff5d 	bl	8003aea <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003c30:	e045      	b.n	8003cbe <drawLine+0x118>
    } else if(y0 == y1){
 8003c32:	1d3a      	adds	r2, r7, #4
 8003c34:	003b      	movs	r3, r7
 8003c36:	2100      	movs	r1, #0
 8003c38:	5e52      	ldrsh	r2, [r2, r1]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5e5b      	ldrsh	r3, [r3, r1]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d12a      	bne.n	8003c98 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003c42:	1dba      	adds	r2, r7, #6
 8003c44:	1cbb      	adds	r3, r7, #2
 8003c46:	2100      	movs	r1, #0
 8003c48:	5e52      	ldrsh	r2, [r2, r1]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5e5b      	ldrsh	r3, [r3, r1]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	dd0c      	ble.n	8003c6c <drawLine+0xc6>
 8003c52:	210e      	movs	r1, #14
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	1dba      	adds	r2, r7, #6
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	1cba      	adds	r2, r7, #2
 8003c60:	8812      	ldrh	r2, [r2, #0]
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	1cbb      	adds	r3, r7, #2
 8003c66:	187a      	adds	r2, r7, r1
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003c6c:	1cbb      	adds	r3, r7, #2
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b21a      	sxth	r2, r3
 8003c7e:	2320      	movs	r3, #32
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	881c      	ldrh	r4, [r3, #0]
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	5e59      	ldrsh	r1, [r3, r1]
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	5e18      	ldrsh	r0, [r3, r0]
 8003c90:	0023      	movs	r3, r4
 8003c92:	f7ff ff59 	bl	8003b48 <drawFastHLine>
}
 8003c96:	e012      	b.n	8003cbe <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003c98:	003b      	movs	r3, r7
 8003c9a:	2400      	movs	r4, #0
 8003c9c:	5f1c      	ldrsh	r4, [r3, r4]
 8003c9e:	1cbb      	adds	r3, r7, #2
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	5e9a      	ldrsh	r2, [r3, r2]
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5e59      	ldrsh	r1, [r3, r1]
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	2000      	movs	r0, #0
 8003cae:	5e18      	ldrsh	r0, [r3, r0]
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	0023      	movs	r3, r4
 8003cba:	f7ff fe1d 	bl	80038f8 <writeLine>
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bdb0      	pop	{r4, r5, r7, pc}

08003cc6 <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc8:	b089      	sub	sp, #36	@ 0x24
 8003cca:	af02      	add	r7, sp, #8
 8003ccc:	0004      	movs	r4, r0
 8003cce:	0008      	movs	r0, r1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	230e      	movs	r3, #14
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	1c22      	adds	r2, r4, #0
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	230c      	movs	r3, #12
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	1c02      	adds	r2, r0, #0
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	1dbb      	adds	r3, r7, #6
 8003ce6:	1c0a      	adds	r2, r1, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003cea:	2316      	movs	r3, #22
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003cf2:	e03f      	b.n	8003d74 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003cf4:	2516      	movs	r5, #22
 8003cf6:	197b      	adds	r3, r7, r5
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	469c      	mov	ip, r3
 8003d02:	1dbb      	adds	r3, r7, #6
 8003d04:	2400      	movs	r4, #0
 8003d06:	5f1c      	ldrsh	r4, [r3, r4]
 8003d08:	230c      	movs	r3, #12
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5e59      	ldrsh	r1, [r3, r1]
 8003d10:	260e      	movs	r6, #14
 8003d12:	19bb      	adds	r3, r7, r6
 8003d14:	2000      	movs	r0, #0
 8003d16:	5e18      	ldrsh	r0, [r3, r0]
 8003d18:	232c      	movs	r3, #44	@ 0x2c
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	189b      	adds	r3, r3, r2
 8003d1e:	19db      	adds	r3, r3, r7
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	2328      	movs	r3, #40	@ 0x28
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	5e9b      	ldrsh	r3, [r3, r2]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0023      	movs	r3, r4
 8003d32:	4662      	mov	r2, ip
 8003d34:	f000 f82c 	bl	8003d90 <drawChar>
		x+=(size*6)+spacing;
 8003d38:	232c      	movs	r3, #44	@ 0x2c
 8003d3a:	2108      	movs	r1, #8
 8003d3c:	185b      	adds	r3, r3, r1
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	1c1a      	adds	r2, r3, #0
 8003d46:	1c13      	adds	r3, r2, #0
 8003d48:	18db      	adds	r3, r3, r3
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	18db      	adds	r3, r3, r3
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	2330      	movs	r3, #48	@ 0x30
 8003d52:	185b      	adds	r3, r3, r1
 8003d54:	19db      	adds	r3, r3, r7
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	18d3      	adds	r3, r2, r3
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	19bb      	adds	r3, r7, r6
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	19bb      	adds	r3, r7, r6
 8003d68:	801a      	strh	r2, [r3, #0]
		i++;
 8003d6a:	197b      	adds	r3, r7, r5
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	197b      	adds	r3, r7, r5
 8003d70:	3201      	adds	r2, #1
 8003d72:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8003d74:	2316      	movs	r3, #22
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	18d3      	adds	r3, r2, r3
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1b7      	bne.n	8003cf4 <drawString+0x2e>
	}
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b007      	add	sp, #28
 8003d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d90 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003d90:	b5b0      	push	{r4, r5, r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	0005      	movs	r5, r0
 8003d98:	000c      	movs	r4, r1
 8003d9a:	0010      	movs	r0, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	1dbb      	adds	r3, r7, #6
 8003da0:	1c2a      	adds	r2, r5, #0
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	1c22      	adds	r2, r4, #0
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	1cfb      	adds	r3, r7, #3
 8003dac:	1c02      	adds	r2, r0, #0
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	003b      	movs	r3, r7
 8003db2:	1c0a      	adds	r2, r1, #0
 8003db4:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e0bd      	b.n	8003f38 <drawChar+0x1a8>
    if ((i) == 5)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d104      	bne.n	8003dcc <drawChar+0x3c>
      line = 0x0;
 8003dc2:	2317      	movs	r3, #23
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e00b      	b.n	8003de4 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003dcc:	1cfb      	adds	r3, r7, #3
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	189a      	adds	r2, r3, r2
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	18d2      	adds	r2, r2, r3
 8003dda:	2317      	movs	r3, #23
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	495b      	ldr	r1, [pc, #364]	@ (8003f4c <drawChar+0x1bc>)
 8003de0:	5c8a      	ldrb	r2, [r1, r2]
 8003de2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e09f      	b.n	8003f2a <drawChar+0x19a>
      if (line & 0x1) {
 8003dea:	2317      	movs	r3, #23
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d043      	beq.n	8003e7e <drawChar+0xee>
        if (size == 1)
 8003df6:	232c      	movs	r3, #44	@ 0x2c
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d115      	bne.n	8003e2c <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	1dbb      	adds	r3, r7, #6
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	18d3      	adds	r3, r2, r3
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b218      	sxth	r0, r3
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b219      	sxth	r1, r3
 8003e20:	003b      	movs	r3, r7
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	001a      	movs	r2, r3
 8003e26:	f7ff fd49 	bl	80038bc <writePixel>
 8003e2a:	e075      	b.n	8003f18 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8003e2c:	212c      	movs	r1, #44	@ 0x2c
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	b292      	uxth	r2, r2
 8003e38:	4353      	muls	r3, r2
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	1dbb      	adds	r3, r7, #6
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	18d3      	adds	r3, r2, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	b218      	sxth	r0, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2207      	movs	r2, #7
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	000c      	movs	r4, r1
 8003e50:	187a      	adds	r2, r7, r1
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	b292      	uxth	r2, r2
 8003e56:	4353      	muls	r3, r2
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b219      	sxth	r1, r3
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b21a      	sxth	r2, r3
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b21c      	sxth	r4, r3
 8003e70:	003b      	movs	r3, r7
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	0023      	movs	r3, r4
 8003e78:	f7ff fc9c 	bl	80037b4 <fillRect>
 8003e7c:	e04c      	b.n	8003f18 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003e7e:	2428      	movs	r4, #40	@ 0x28
 8003e80:	193b      	adds	r3, r7, r4
 8003e82:	0039      	movs	r1, r7
 8003e84:	2200      	movs	r2, #0
 8003e86:	5e9a      	ldrsh	r2, [r3, r2]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	5ecb      	ldrsh	r3, [r1, r3]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d043      	beq.n	8003f18 <drawChar+0x188>
        if (size == 1) // default size
 8003e90:	232c      	movs	r3, #44	@ 0x2c
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d115      	bne.n	8003ec6 <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	1dbb      	adds	r3, r7, #6
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b218      	sxth	r0, r3
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3307      	adds	r3, #7
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	b219      	sxth	r1, r3
 8003eba:	193b      	adds	r3, r7, r4
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	f7ff fcfc 	bl	80038bc <writePixel>
 8003ec4:	e028      	b.n	8003f18 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8003ec6:	212c      	movs	r1, #44	@ 0x2c
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	4353      	muls	r3, r2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	1dbb      	adds	r3, r7, #6
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	18d3      	adds	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b218      	sxth	r0, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	000c      	movs	r4, r1
 8003eea:	187a      	adds	r2, r7, r1
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	4353      	muls	r3, r2
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	b219      	sxth	r1, r3
 8003efe:	193b      	adds	r3, r7, r4
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b21a      	sxth	r2, r3
 8003f04:	193b      	adds	r3, r7, r4
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b21c      	sxth	r4, r3
 8003f0a:	2328      	movs	r3, #40	@ 0x28
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	0023      	movs	r3, r4
 8003f14:	f7ff fc4e 	bl	80037b4 <fillRect>
        }
      }
      line >>= 1;
 8003f18:	2217      	movs	r2, #23
 8003f1a:	18bb      	adds	r3, r7, r2
 8003f1c:	18ba      	adds	r2, r7, r2
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	0852      	lsrs	r2, r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	dc00      	bgt.n	8003f32 <drawChar+0x1a2>
 8003f30:	e75b      	b.n	8003dea <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	3301      	adds	r3, #1
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	dc00      	bgt.n	8003f40 <drawChar+0x1b0>
 8003f3e:	e73d      	b.n	8003dbc <drawChar+0x2c>
    }
  }
}
 8003f40:	46c0      	nop			@ (mov r8, r8)
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b006      	add	sp, #24
 8003f48:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	0800d2e8 	.word	0x0800d2e8

08003f50 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b091      	sub	sp, #68	@ 0x44
 8003f54:	af04      	add	r7, sp, #16
 8003f56:	231e      	movs	r3, #30
 8003f58:	18f9      	adds	r1, r7, r3
 8003f5a:	8008      	strh	r0, [r1, #0]
 8003f5c:	4669      	mov	r1, sp
 8003f5e:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8003f60:	210c      	movs	r1, #12
 8003f62:	2318      	movs	r3, #24
 8003f64:	18cb      	adds	r3, r1, r3
 8003f66:	19d9      	adds	r1, r3, r7
 8003f68:	231e      	movs	r3, #30
 8003f6a:	18f8      	adds	r0, r7, r3
 8003f6c:	8800      	ldrh	r0, [r0, #0]
 8003f6e:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8003f70:	492f      	ldr	r1, [pc, #188]	@ (8004030 <fillScreen+0xe0>)
 8003f72:	2300      	movs	r3, #0
 8003f74:	5ec9      	ldrsh	r1, [r1, r3]
 8003f76:	0008      	movs	r0, r1
 8003f78:	492e      	ldr	r1, [pc, #184]	@ (8004034 <fillScreen+0xe4>)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	5ec9      	ldrsh	r1, [r1, r3]
 8003f7e:	4341      	muls	r1, r0
 8003f80:	1e48      	subs	r0, r1, #1
 8003f82:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003f84:	0008      	movs	r0, r1
 8003f86:	6138      	str	r0, [r7, #16]
 8003f88:	2000      	movs	r0, #0
 8003f8a:	6178      	str	r0, [r7, #20]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	0010      	movs	r0, r2
 8003f92:	0ec0      	lsrs	r0, r0, #27
 8003f94:	613a      	str	r2, [r7, #16]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	015d      	lsls	r5, r3, #5
 8003f9a:	4305      	orrs	r5, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015c      	lsls	r4, r3, #5
 8003fa0:	0008      	movs	r0, r1
 8003fa2:	6038      	str	r0, [r7, #0]
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	683c      	ldr	r4, [r7, #0]
 8003faa:	687d      	ldr	r5, [r7, #4]
 8003fac:	0023      	movs	r3, r4
 8003fae:	0ed8      	lsrs	r0, r3, #27
 8003fb0:	002b      	movs	r3, r5
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4303      	orrs	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	0023      	movs	r3, r4
 8003fbe:	015b      	lsls	r3, r3, #5
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3307      	adds	r3, #7
 8003fc8:	08db      	lsrs	r3, r3, #3
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	466a      	mov	r2, sp
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	469d      	mov	sp, r3
 8003fd2:	ab04      	add	r3, sp, #16
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	2200      	movs	r2, #0
 8003fe0:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8003fe2:	4b13      	ldr	r3, [pc, #76]	@ (8004030 <fillScreen+0xe0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	5e9b      	ldrsh	r3, [r3, r2]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	4a12      	ldr	r2, [pc, #72]	@ (8004034 <fillScreen+0xe4>)
 8003fec:	2000      	movs	r0, #0
 8003fee:	5e12      	ldrsh	r2, [r2, r0]
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	4353      	muls	r3, r2
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <fillScreen+0xe0>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	5e9b      	ldrsh	r3, [r3, r2]
 8004000:	b29b      	uxth	r3, r3
 8004002:	4a0c      	ldr	r2, [pc, #48]	@ (8004034 <fillScreen+0xe4>)
 8004004:	2000      	movs	r0, #0
 8004006:	5e12      	ldrsh	r2, [r2, r0]
 8004008:	b292      	uxth	r2, r2
 800400a:	210c      	movs	r1, #12
 800400c:	2018      	movs	r0, #24
 800400e:	1809      	adds	r1, r1, r0
 8004010:	19c9      	adds	r1, r1, r7
 8004012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004014:	2401      	movs	r4, #1
 8004016:	9402      	str	r4, [sp, #8]
 8004018:	9201      	str	r2, [sp, #4]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2300      	movs	r3, #0
 800401e:	2200      	movs	r2, #0
 8004020:	f000 f80a 	bl	8004038 <drawImage>
 8004024:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b00d      	add	sp, #52	@ 0x34
 800402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	20000a44 	.word	0x20000a44
 8004034:	20000a46 	.word	0x20000a46

08004038 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	46c6      	mov	lr, r8
 800403c:	b500      	push	{lr}
 800403e:	b092      	sub	sp, #72	@ 0x48
 8004040:	af02      	add	r7, sp, #8
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24
 8004044:	6239      	str	r1, [r7, #32]
 8004046:	0019      	movs	r1, r3
 8004048:	231e      	movs	r3, #30
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	231c      	movs	r3, #28
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	1c0a      	adds	r2, r1, #0
 8004054:	801a      	strh	r2, [r3, #0]
 8004056:	466b      	mov	r3, sp
 8004058:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 800405a:	2322      	movs	r3, #34	@ 0x22
 800405c:	2118      	movs	r1, #24
 800405e:	185b      	adds	r3, r3, r1
 8004060:	19db      	adds	r3, r3, r7
 8004062:	2200      	movs	r2, #0
 8004064:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8004066:	2340      	movs	r3, #64	@ 0x40
 8004068:	185b      	adds	r3, r3, r1
 800406a:	19db      	adds	r3, r3, r7
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	2244      	movs	r2, #68	@ 0x44
 8004070:	1852      	adds	r2, r2, r1
 8004072:	19d2      	adds	r2, r2, r7
 8004074:	8812      	ldrh	r2, [r2, #0]
 8004076:	4353      	muls	r3, r2
 8004078:	1e5a      	subs	r2, r3, #1
 800407a:	637a      	str	r2, [r7, #52]	@ 0x34
 800407c:	001a      	movs	r2, r3
 800407e:	60ba      	str	r2, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	0002      	movs	r2, r0
 800408a:	0f12      	lsrs	r2, r2, #28
 800408c:	000e      	movs	r6, r1
 800408e:	0136      	lsls	r6, r6, #4
 8004090:	617e      	str	r6, [r7, #20]
 8004092:	697e      	ldr	r6, [r7, #20]
 8004094:	4316      	orrs	r6, r2
 8004096:	617e      	str	r6, [r7, #20]
 8004098:	0002      	movs	r2, r0
 800409a:	0112      	lsls	r2, r2, #4
 800409c:	613a      	str	r2, [r7, #16]
 800409e:	001a      	movs	r2, r3
 80040a0:	603a      	str	r2, [r7, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	0002      	movs	r2, r0
 80040ac:	0f12      	lsrs	r2, r2, #28
 80040ae:	000e      	movs	r6, r1
 80040b0:	0135      	lsls	r5, r6, #4
 80040b2:	4315      	orrs	r5, r2
 80040b4:	0002      	movs	r2, r0
 80040b6:	0114      	lsls	r4, r2, #4
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	3307      	adds	r3, #7
 80040bc:	08db      	lsrs	r3, r3, #3
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	466a      	mov	r2, sp
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	469d      	mov	sp, r3
 80040c6:	ab02      	add	r3, sp, #8
 80040c8:	3301      	adds	r3, #1
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 80040d0:	2326      	movs	r3, #38	@ 0x26
 80040d2:	2118      	movs	r1, #24
 80040d4:	185b      	adds	r3, r3, r1
 80040d6:	19db      	adds	r3, r3, r7
 80040d8:	2200      	movs	r2, #0
 80040da:	801a      	strh	r2, [r3, #0]
 80040dc:	e04d      	b.n	800417a <drawImage+0x142>
{
	ind = image[i][0];
 80040de:	2126      	movs	r1, #38	@ 0x26
 80040e0:	2018      	movs	r0, #24
 80040e2:	180b      	adds	r3, r1, r0
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	18d2      	adds	r2, r2, r3
 80040ee:	2316      	movs	r3, #22
 80040f0:	181b      	adds	r3, r3, r0
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 80040f8:	180b      	adds	r3, r1, r0
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004102:	18d2      	adds	r2, r2, r3
 8004104:	2314      	movs	r3, #20
 8004106:	181b      	adds	r3, r3, r0
 8004108:	19db      	adds	r3, r3, r7
 800410a:	8852      	ldrh	r2, [r2, #2]
 800410c:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 800410e:	2324      	movs	r3, #36	@ 0x24
 8004110:	181b      	adds	r3, r3, r0
 8004112:	19db      	adds	r3, r3, r7
 8004114:	2200      	movs	r2, #0
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	e01c      	b.n	8004154 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 800411a:	2316      	movs	r3, #22
 800411c:	2418      	movs	r4, #24
 800411e:	191b      	adds	r3, r3, r4
 8004120:	19db      	adds	r3, r3, r7
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	18d2      	adds	r2, r2, r3
 800412a:	2122      	movs	r1, #34	@ 0x22
 800412c:	190b      	adds	r3, r1, r4
 800412e:	19db      	adds	r3, r3, r7
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	1909      	adds	r1, r1, r4
 8004134:	19c9      	adds	r1, r1, r7
 8004136:	1c58      	adds	r0, r3, #1
 8004138:	8008      	strh	r0, [r1, #0]
 800413a:	0018      	movs	r0, r3
 800413c:	8811      	ldrh	r1, [r2, #0]
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	0042      	lsls	r2, r0, #1
 8004142:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8004144:	2124      	movs	r1, #36	@ 0x24
 8004146:	190b      	adds	r3, r1, r4
 8004148:	19db      	adds	r3, r3, r7
 800414a:	881a      	ldrh	r2, [r3, #0]
 800414c:	190b      	adds	r3, r1, r4
 800414e:	19db      	adds	r3, r3, r7
 8004150:	3201      	adds	r2, #1
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	2324      	movs	r3, #36	@ 0x24
 8004156:	2018      	movs	r0, #24
 8004158:	181b      	adds	r3, r3, r0
 800415a:	19da      	adds	r2, r3, r7
 800415c:	2314      	movs	r3, #20
 800415e:	181b      	adds	r3, r3, r0
 8004160:	19db      	adds	r3, r3, r7
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d3d7      	bcc.n	800411a <drawImage+0xe2>
for(i=0; i<c; i++)
 800416a:	2126      	movs	r1, #38	@ 0x26
 800416c:	180b      	adds	r3, r1, r0
 800416e:	19db      	adds	r3, r3, r7
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	180b      	adds	r3, r1, r0
 8004174:	19db      	adds	r3, r3, r7
 8004176:	3201      	adds	r2, #1
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	2326      	movs	r3, #38	@ 0x26
 800417c:	2118      	movs	r1, #24
 800417e:	185b      	adds	r3, r3, r1
 8004180:	19da      	adds	r2, r3, r7
 8004182:	2348      	movs	r3, #72	@ 0x48
 8004184:	185b      	adds	r3, r3, r1
 8004186:	19db      	adds	r3, r3, r7
 8004188:	8812      	ldrh	r2, [r2, #0]
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d3a6      	bcc.n	80040de <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8004190:	2344      	movs	r3, #68	@ 0x44
 8004192:	185b      	adds	r3, r3, r1
 8004194:	19db      	adds	r3, r3, r7
 8004196:	881c      	ldrh	r4, [r3, #0]
 8004198:	2340      	movs	r3, #64	@ 0x40
 800419a:	185b      	adds	r3, r3, r1
 800419c:	19db      	adds	r3, r3, r7
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	231e      	movs	r3, #30
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	8819      	ldrh	r1, [r3, #0]
 80041a6:	231c      	movs	r3, #28
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	8818      	ldrh	r0, [r3, #0]
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	0023      	movs	r3, r4
 80041b2:	f000 fa31 	bl	8004618 <ST7735_DrawImage>
 80041b6:	46c5      	mov	sp, r8
}
 80041b8:	46c0      	nop			@ (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b010      	add	sp, #64	@ 0x40
 80041be:	bc80      	pop	{r7}
 80041c0:	46b8      	mov	r8, r7
 80041c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041c4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80041c8:	23a0      	movs	r3, #160	@ 0xa0
 80041ca:	05db      	lsls	r3, r3, #23
 80041cc:	2200      	movs	r2, #0
 80041ce:	2120      	movs	r1, #32
 80041d0:	0018      	movs	r0, r3
 80041d2:	f003 f9ee 	bl	80075b2 <HAL_GPIO_WritePin>
}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <ST7735_Unselect>:

void ST7735_Unselect()
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80041e0:	23a0      	movs	r3, #160	@ 0xa0
 80041e2:	05db      	lsls	r3, r3, #23
 80041e4:	2201      	movs	r2, #1
 80041e6:	2120      	movs	r1, #32
 80041e8:	0018      	movs	r0, r3
 80041ea:	f003 f9e2 	bl	80075b2 <HAL_GPIO_WritePin>
}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <ST7735_Reset>:

void ST7735_Reset()
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80041f8:	2380      	movs	r3, #128	@ 0x80
 80041fa:	0219      	lsls	r1, r3, #8
 80041fc:	23a0      	movs	r3, #160	@ 0xa0
 80041fe:	05db      	lsls	r3, r3, #23
 8004200:	2200      	movs	r2, #0
 8004202:	0018      	movs	r0, r3
 8004204:	f003 f9d5 	bl	80075b2 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004208:	2005      	movs	r0, #5
 800420a:	f002 ff31 	bl	8007070 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	0219      	lsls	r1, r3, #8
 8004212:	23a0      	movs	r3, #160	@ 0xa0
 8004214:	05db      	lsls	r3, r3, #23
 8004216:	2201      	movs	r2, #1
 8004218:	0018      	movs	r0, r3
 800421a:	f003 f9ca 	bl	80075b2 <HAL_GPIO_WritePin>
}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	0002      	movs	r2, r0
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8004230:	23a0      	movs	r3, #160	@ 0xa0
 8004232:	05db      	lsls	r3, r3, #23
 8004234:	2200      	movs	r2, #0
 8004236:	2110      	movs	r1, #16
 8004238:	0018      	movs	r0, r3
 800423a:	f003 f9ba 	bl	80075b2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800423e:	2301      	movs	r3, #1
 8004240:	425b      	negs	r3, r3
 8004242:	1df9      	adds	r1, r7, #7
 8004244:	4803      	ldr	r0, [pc, #12]	@ (8004254 <ST7735_WriteCommand+0x30>)
 8004246:	2201      	movs	r2, #1
 8004248:	f005 fe6c 	bl	8009f24 <HAL_SPI_Transmit>
}
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b002      	add	sp, #8
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000db0 	.word	0x20000db0

08004258 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8004262:	23a0      	movs	r3, #160	@ 0xa0
 8004264:	05db      	lsls	r3, r3, #23
 8004266:	2201      	movs	r2, #1
 8004268:	2110      	movs	r1, #16
 800426a:	0018      	movs	r0, r3
 800426c:	f003 f9a1 	bl	80075b2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b29a      	uxth	r2, r3
 8004274:	2301      	movs	r3, #1
 8004276:	425b      	negs	r3, r3
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4803      	ldr	r0, [pc, #12]	@ (8004288 <ST7735_WriteData+0x30>)
 800427c:	f005 fe52 	bl	8009f24 <HAL_SPI_Transmit>
}
 8004280:	46c0      	nop			@ (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000db0 	.word	0x20000db0

0800428c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	220f      	movs	r2, #15
 800429c:	18ba      	adds	r2, r7, r2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80042a2:	e04a      	b.n	800433a <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	210b      	movs	r1, #11
 80042ac:	187a      	adds	r2, r7, r1
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff ffb4 	bl	8004224 <ST7735_WriteCommand>

        numArgs = *addr++;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	200a      	movs	r0, #10
 80042c4:	183a      	adds	r2, r7, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80042ca:	183b      	adds	r3, r7, r0
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	230c      	movs	r3, #12
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	2180      	movs	r1, #128	@ 0x80
 80042d6:	400a      	ands	r2, r1
 80042d8:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	183a      	adds	r2, r7, r0
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	217f      	movs	r1, #127	@ 0x7f
 80042e2:	400a      	ands	r2, r1
 80042e4:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80042e6:	183b      	adds	r3, r7, r0
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80042ee:	0004      	movs	r4, r0
 80042f0:	183b      	adds	r3, r7, r0
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff ffad 	bl	8004258 <ST7735_WriteData>
            addr += numArgs;
 80042fe:	193b      	adds	r3, r7, r4
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	18d3      	adds	r3, r2, r3
 8004306:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8004308:	210c      	movs	r1, #12
 800430a:	187b      	adds	r3, r7, r1
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d013      	beq.n	800433a <DisplayInit+0xae>
            ms = *addr++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	187b      	adds	r3, r7, r1
 800431c:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800431e:	187b      	adds	r3, r7, r1
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2bff      	cmp	r3, #255	@ 0xff
 8004324:	d103      	bne.n	800432e <DisplayInit+0xa2>
 8004326:	187b      	adds	r3, r7, r1
 8004328:	22fa      	movs	r2, #250	@ 0xfa
 800432a:	0052      	lsls	r2, r2, #1
 800432c:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800432e:	230c      	movs	r3, #12
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	0018      	movs	r0, r3
 8004336:	f002 fe9b 	bl	8007070 <HAL_Delay>
    while(numCommands--) {
 800433a:	220f      	movs	r2, #15
 800433c:	18bb      	adds	r3, r7, r2
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	18ba      	adds	r2, r7, r2
 8004342:	1e59      	subs	r1, r3, #1
 8004344:	7011      	strb	r1, [r2, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ac      	bne.n	80042a4 <DisplayInit+0x18>
        }
    }
}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	46c0      	nop			@ (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b005      	add	sp, #20
 8004352:	bd90      	pop	{r4, r7, pc}

08004354 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	0005      	movs	r5, r0
 800435c:	000c      	movs	r4, r1
 800435e:	0010      	movs	r0, r2
 8004360:	0019      	movs	r1, r3
 8004362:	1dfb      	adds	r3, r7, #7
 8004364:	1c2a      	adds	r2, r5, #0
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	1dbb      	adds	r3, r7, #6
 800436a:	1c22      	adds	r2, r4, #0
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	1d7b      	adds	r3, r7, #5
 8004370:	1c02      	adds	r2, r0, #0
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	1c0a      	adds	r2, r1, #0
 8004378:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800437a:	202a      	movs	r0, #42	@ 0x2a
 800437c:	f7ff ff52 	bl	8004224 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8004380:	210c      	movs	r1, #12
 8004382:	187b      	adds	r3, r7, r1
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	4b1c      	ldr	r3, [pc, #112]	@ (80043fc <ST7735_SetAddressWindow+0xa8>)
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	1dfb      	adds	r3, r7, #7
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	18d3      	adds	r3, r2, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	187b      	adds	r3, r7, r1
 8004396:	705a      	strb	r2, [r3, #1]
 8004398:	187b      	adds	r3, r7, r1
 800439a:	2200      	movs	r2, #0
 800439c:	709a      	strb	r2, [r3, #2]
 800439e:	4b17      	ldr	r3, [pc, #92]	@ (80043fc <ST7735_SetAddressWindow+0xa8>)
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	1d7b      	adds	r3, r7, #5
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	18d3      	adds	r3, r2, r3
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80043ae:	000c      	movs	r4, r1
 80043b0:	187b      	adds	r3, r7, r1
 80043b2:	2104      	movs	r1, #4
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff ff4f 	bl	8004258 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80043ba:	202b      	movs	r0, #43	@ 0x2b
 80043bc:	f7ff ff32 	bl	8004224 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80043c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <ST7735_SetAddressWindow+0xac>)
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	1dbb      	adds	r3, r7, #6
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	0021      	movs	r1, r4
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <ST7735_SetAddressWindow+0xac>)
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	2104      	movs	r1, #4
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7ff ff36 	bl	8004258 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80043ec:	202c      	movs	r0, #44	@ 0x2c
 80043ee:	f7ff ff19 	bl	8004224 <ST7735_WriteCommand>
}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bdb0      	pop	{r4, r5, r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	20000a4b 	.word	0x20000a4b
 8004400:	20000a4c 	.word	0x20000a4c

08004404 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	0002      	movs	r2, r0
 800440c:	1dfb      	adds	r3, r7, #7
 800440e:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8004410:	f7ff fed8 	bl	80041c4 <ST7735_Select>
    ST7735_Reset();
 8004414:	f7ff feee 	bl	80041f4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8004418:	4b0e      	ldr	r3, [pc, #56]	@ (8004454 <ST7735_Init+0x50>)
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff ff36 	bl	800428c <DisplayInit>
    DisplayInit(init_cmds2);
 8004420:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <ST7735_Init+0x54>)
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff ff32 	bl	800428c <DisplayInit>
    DisplayInit(init_cmds3);
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <ST7735_Init+0x58>)
 800442a:	0018      	movs	r0, r3
 800442c:	f7ff ff2e 	bl	800428c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <ST7735_Init+0x5c>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <ST7735_Init+0x60>)
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	0018      	movs	r0, r3
 8004442:	f000 f811 	bl	8004468 <ST7735_SetRotation>
    ST7735_Unselect();
 8004446:	f7ff fec9 	bl	80041dc <ST7735_Unselect>

}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	46bd      	mov	sp, r7
 800444e:	b002      	add	sp, #8
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	0800d7e4 	.word	0x0800d7e4
 8004458:	0800d81c 	.word	0x0800d81c
 800445c:	0800d82c 	.word	0x0800d82c
 8004460:	20000a49 	.word	0x20000a49
 8004464:	20000a4a 	.word	0x20000a4a

08004468 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	0002      	movs	r2, r0
 8004470:	1dfb      	adds	r3, r7, #7
 8004472:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8004474:	230f      	movs	r3, #15
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 800447c:	1dfb      	adds	r3, r7, #7
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2203      	movs	r2, #3
 8004482:	4013      	ands	r3, r2
 8004484:	b2da      	uxtb	r2, r3
 8004486:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <ST7735_SetRotation+0xf8>)
 8004488:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800448a:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <ST7735_SetRotation+0xf8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d041      	beq.n	8004516 <ST7735_SetRotation+0xae>
 8004492:	dc53      	bgt.n	800453c <ST7735_SetRotation+0xd4>
 8004494:	2b02      	cmp	r3, #2
 8004496:	d02b      	beq.n	80044f0 <ST7735_SetRotation+0x88>
 8004498:	dc50      	bgt.n	800453c <ST7735_SetRotation+0xd4>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <ST7735_SetRotation+0x3c>
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d013      	beq.n	80044ca <ST7735_SetRotation+0x62>
 80044a2:	e04b      	b.n	800453c <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80044a4:	230f      	movs	r3, #15
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	22c0      	movs	r2, #192	@ 0xc0
 80044aa:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80044ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004564 <ST7735_SetRotation+0xfc>)
 80044ae:	22a0      	movs	r2, #160	@ 0xa0
 80044b0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80044b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <ST7735_SetRotation+0x100>)
 80044b4:	2280      	movs	r2, #128	@ 0x80
 80044b6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80044b8:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <ST7735_SetRotation+0x104>)
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <ST7735_SetRotation+0x108>)
 80044be:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80044c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004574 <ST7735_SetRotation+0x10c>)
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004578 <ST7735_SetRotation+0x110>)
 80044c6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80044c8:	e038      	b.n	800453c <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80044ca:	230f      	movs	r3, #15
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	22a0      	movs	r2, #160	@ 0xa0
 80044d0:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80044d2:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <ST7735_SetRotation+0x100>)
 80044d4:	22a0      	movs	r2, #160	@ 0xa0
 80044d6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80044d8:	4b22      	ldr	r3, [pc, #136]	@ (8004564 <ST7735_SetRotation+0xfc>)
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80044de:	4b23      	ldr	r3, [pc, #140]	@ (800456c <ST7735_SetRotation+0x104>)
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <ST7735_SetRotation+0x110>)
 80044e4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80044e6:	4b23      	ldr	r3, [pc, #140]	@ (8004574 <ST7735_SetRotation+0x10c>)
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	4b21      	ldr	r3, [pc, #132]	@ (8004570 <ST7735_SetRotation+0x108>)
 80044ec:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80044ee:	e025      	b.n	800453c <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80044f0:	230f      	movs	r3, #15
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <ST7735_SetRotation+0xfc>)
 80044fa:	22a0      	movs	r2, #160	@ 0xa0
 80044fc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80044fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004568 <ST7735_SetRotation+0x100>)
 8004500:	2280      	movs	r2, #128	@ 0x80
 8004502:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8004504:	4b19      	ldr	r3, [pc, #100]	@ (800456c <ST7735_SetRotation+0x104>)
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <ST7735_SetRotation+0x108>)
 800450a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800450c:	4b19      	ldr	r3, [pc, #100]	@ (8004574 <ST7735_SetRotation+0x10c>)
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <ST7735_SetRotation+0x110>)
 8004512:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004514:	e012      	b.n	800453c <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004516:	230f      	movs	r3, #15
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2260      	movs	r2, #96	@ 0x60
 800451c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <ST7735_SetRotation+0x100>)
 8004520:	22a0      	movs	r2, #160	@ 0xa0
 8004522:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004524:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <ST7735_SetRotation+0xfc>)
 8004526:	2280      	movs	r2, #128	@ 0x80
 8004528:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800452a:	4b10      	ldr	r3, [pc, #64]	@ (800456c <ST7735_SetRotation+0x104>)
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <ST7735_SetRotation+0x110>)
 8004530:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <ST7735_SetRotation+0x10c>)
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <ST7735_SetRotation+0x108>)
 8004538:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800453a:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 800453c:	f7ff fe42 	bl	80041c4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8004540:	2036      	movs	r0, #54	@ 0x36
 8004542:	f7ff fe6f 	bl	8004224 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8004546:	230f      	movs	r3, #15
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	2101      	movs	r1, #1
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff fe83 	bl	8004258 <ST7735_WriteData>
  ST7735_Unselect();
 8004552:	f7ff fe43 	bl	80041dc <ST7735_Unselect>
}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b004      	add	sp, #16
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	20000a48 	.word	0x20000a48
 8004564:	20000a46 	.word	0x20000a46
 8004568:	20000a44 	.word	0x20000a44
 800456c:	20000a49 	.word	0x20000a49
 8004570:	20000a4b 	.word	0x20000a4b
 8004574:	20000a4a 	.word	0x20000a4a
 8004578:	20000a4c 	.word	0x20000a4c

0800457c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	0004      	movs	r4, r0
 8004584:	0008      	movs	r0, r1
 8004586:	0011      	movs	r1, r2
 8004588:	1dbb      	adds	r3, r7, #6
 800458a:	1c22      	adds	r2, r4, #0
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	1c02      	adds	r2, r0, #0
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	1cbb      	adds	r3, r7, #2
 8004596:	1c0a      	adds	r2, r1, #0
 8004598:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 800459a:	1dbb      	adds	r3, r7, #6
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	4a1c      	ldr	r2, [pc, #112]	@ (8004610 <ST7735_DrawPixel+0x94>)
 80045a0:	2100      	movs	r1, #0
 80045a2:	5e52      	ldrsh	r2, [r2, r1]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	da2f      	bge.n	8004608 <ST7735_DrawPixel+0x8c>
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	4a19      	ldr	r2, [pc, #100]	@ (8004614 <ST7735_DrawPixel+0x98>)
 80045ae:	2100      	movs	r1, #0
 80045b0:	5e52      	ldrsh	r2, [r2, r1]
 80045b2:	4293      	cmp	r3, r2
 80045b4:	da28      	bge.n	8004608 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 80045b6:	f7ff fe05 	bl	80041c4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80045ba:	1dbb      	adds	r3, r7, #6
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b2d9      	uxtb	r1, r3
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3301      	adds	r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f7ff febb 	bl	8004354 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80045de:	1cbb      	adds	r3, r7, #2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	210c      	movs	r1, #12
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	1cbb      	adds	r3, r7, #2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80045f8:	187b      	adds	r3, r7, r1
 80045fa:	2102      	movs	r1, #2
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff fe2b 	bl	8004258 <ST7735_WriteData>

    ST7735_Unselect();
 8004602:	f7ff fdeb 	bl	80041dc <ST7735_Unselect>
 8004606:	e000      	b.n	800460a <ST7735_DrawPixel+0x8e>
        return;
 8004608:	46c0      	nop			@ (mov r8, r8)
}
 800460a:	46bd      	mov	sp, r7
 800460c:	b005      	add	sp, #20
 800460e:	bd90      	pop	{r4, r7, pc}
 8004610:	20000a44 	.word	0x20000a44
 8004614:	20000a46 	.word	0x20000a46

08004618 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004618:	b5b0      	push	{r4, r5, r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	0005      	movs	r5, r0
 8004620:	000c      	movs	r4, r1
 8004622:	0010      	movs	r0, r2
 8004624:	0019      	movs	r1, r3
 8004626:	1dbb      	adds	r3, r7, #6
 8004628:	1c2a      	adds	r2, r5, #0
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	1d3b      	adds	r3, r7, #4
 800462e:	1c22      	adds	r2, r4, #0
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	1cbb      	adds	r3, r7, #2
 8004634:	1c02      	adds	r2, r0, #0
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	003b      	movs	r3, r7
 800463a:	1c0a      	adds	r2, r1, #0
 800463c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 800463e:	1dbb      	adds	r3, r7, #6
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	4a2a      	ldr	r2, [pc, #168]	@ (80046ec <ST7735_DrawImage+0xd4>)
 8004644:	2100      	movs	r1, #0
 8004646:	5e52      	ldrsh	r2, [r2, r1]
 8004648:	4293      	cmp	r3, r2
 800464a:	da47      	bge.n	80046dc <ST7735_DrawImage+0xc4>
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	4a27      	ldr	r2, [pc, #156]	@ (80046f0 <ST7735_DrawImage+0xd8>)
 8004652:	2100      	movs	r1, #0
 8004654:	5e52      	ldrsh	r2, [r2, r1]
 8004656:	4293      	cmp	r3, r2
 8004658:	da40      	bge.n	80046dc <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 800465a:	1dbb      	adds	r3, r7, #6
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	1cbb      	adds	r3, r7, #2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	4a21      	ldr	r2, [pc, #132]	@ (80046ec <ST7735_DrawImage+0xd4>)
 8004666:	2100      	movs	r1, #0
 8004668:	5e52      	ldrsh	r2, [r2, r1]
 800466a:	4293      	cmp	r3, r2
 800466c:	dc38      	bgt.n	80046e0 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	003b      	movs	r3, r7
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	18d3      	adds	r3, r2, r3
 8004678:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <ST7735_DrawImage+0xd8>)
 800467a:	2100      	movs	r1, #0
 800467c:	5e52      	ldrsh	r2, [r2, r1]
 800467e:	4293      	cmp	r3, r2
 8004680:	dc30      	bgt.n	80046e4 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8004682:	f7ff fd9f 	bl	80041c4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004686:	1dbb      	adds	r3, r7, #6
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b2d8      	uxtb	r0, r3
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b2d9      	uxtb	r1, r3
 8004692:	1dbb      	adds	r3, r7, #6
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	1cbb      	adds	r3, r7, #2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	18d3      	adds	r3, r2, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b2dc      	uxtb	r4, r3
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	003b      	movs	r3, r7
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	18d3      	adds	r3, r2, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	0022      	movs	r2, r4
 80046bc:	f7ff fe4a 	bl	8004354 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80046c0:	1cbb      	adds	r3, r7, #2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	003a      	movs	r2, r7
 80046c6:	8812      	ldrh	r2, [r2, #0]
 80046c8:	4353      	muls	r3, r2
 80046ca:	005a      	lsls	r2, r3, #1
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fdc1 	bl	8004258 <ST7735_WriteData>
    ST7735_Unselect();
 80046d6:	f7ff fd81 	bl	80041dc <ST7735_Unselect>
 80046da:	e004      	b.n	80046e6 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	e002      	b.n	80046e6 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	e000      	b.n	80046e6 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 80046e4:	46c0      	nop			@ (mov r8, r8)
}
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b002      	add	sp, #8
 80046ea:	bdb0      	pop	{r4, r5, r7, pc}
 80046ec:	20000a44 	.word	0x20000a44
 80046f0:	20000a46 	.word	0x20000a46

080046f4 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80046f4:	b5b0      	push	{r4, r5, r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <minmea_tocoord+0x14>
        return NAN;
 8004704:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <minmea_tocoord+0x84>)
 8004706:	e033      	b.n	8004770 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2164      	movs	r1, #100	@ 0x64
 8004712:	434b      	muls	r3, r1
 8004714:	0019      	movs	r1, r3
 8004716:	0010      	movs	r0, r2
 8004718:	f7fb fd92 	bl	8000240 <__divsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2164      	movs	r1, #100	@ 0x64
 800472a:	434b      	muls	r3, r1
 800472c:	0019      	movs	r1, r3
 800472e:	0010      	movs	r0, r2
 8004730:	f7fb fe6c 	bl	800040c <__aeabi_idivmod>
 8004734:	000b      	movs	r3, r1
 8004736:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7fc ffa5 	bl	8001688 <__aeabi_i2f>
 800473e:	1c04      	adds	r4, r0, #0
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f7fc ffa1 	bl	8001688 <__aeabi_i2f>
 8004746:	1c05      	adds	r5, r0, #0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	0013      	movs	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	0018      	movs	r0, r3
 8004756:	f7fc ff97 	bl	8001688 <__aeabi_i2f>
 800475a:	1c03      	adds	r3, r0, #0
 800475c:	1c19      	adds	r1, r3, #0
 800475e:	1c28      	adds	r0, r5, #0
 8004760:	f7fc f9e6 	bl	8000b30 <__aeabi_fdiv>
 8004764:	1c03      	adds	r3, r0, #0
 8004766:	1c19      	adds	r1, r3, #0
 8004768:	1c20      	adds	r0, r4, #0
 800476a:	f7fb ffef 	bl	800074c <__aeabi_fadd>
 800476e:	1c03      	adds	r3, r0, #0
}
 8004770:	1c18      	adds	r0, r3, #0
 8004772:	46bd      	mov	sp, r7
 8004774:	b004      	add	sp, #16
 8004776:	bdb0      	pop	{r4, r5, r7, pc}
 8004778:	7fc00000 	.word	0x7fc00000

0800477c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b08e      	sub	sp, #56	@ 0x38
 8004780:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004782:	f002 fbef 	bl	8006f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004786:	f000 fd25 	bl	80051d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 800478a:	4be0      	ldr	r3, [pc, #896]	@ (8004b0c <main+0x390>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8004790:	4bdf      	ldr	r3, [pc, #892]	@ (8004b10 <main+0x394>)
 8004792:	4ae0      	ldr	r2, [pc, #896]	@ (8004b14 <main+0x398>)
 8004794:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8004796:	4bde      	ldr	r3, [pc, #888]	@ (8004b10 <main+0x394>)
 8004798:	2234      	movs	r2, #52	@ 0x34
 800479a:	32ff      	adds	r2, #255	@ 0xff
 800479c:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 800479e:	4bde      	ldr	r3, [pc, #888]	@ (8004b18 <main+0x39c>)
 80047a0:	4ade      	ldr	r2, [pc, #888]	@ (8004b1c <main+0x3a0>)
 80047a2:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 80047a4:	4bdc      	ldr	r3, [pc, #880]	@ (8004b18 <main+0x39c>)
 80047a6:	2232      	movs	r2, #50	@ 0x32
 80047a8:	32ff      	adds	r2, #255	@ 0xff
 80047aa:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 80047ac:	4bdc      	ldr	r3, [pc, #880]	@ (8004b20 <main+0x3a4>)
 80047ae:	4ad8      	ldr	r2, [pc, #864]	@ (8004b10 <main+0x394>)
 80047b0:	ca03      	ldmia	r2!, {r0, r1}
 80047b2:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 80047b4:	4bda      	ldr	r3, [pc, #872]	@ (8004b20 <main+0x3a4>)
 80047b6:	4ad8      	ldr	r2, [pc, #864]	@ (8004b18 <main+0x39c>)
 80047b8:	3308      	adds	r3, #8
 80047ba:	ca03      	ldmia	r2!, {r0, r1}
 80047bc:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 80047be:	4bd9      	ldr	r3, [pc, #868]	@ (8004b24 <main+0x3a8>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 80047c4:	4ad7      	ldr	r2, [pc, #860]	@ (8004b24 <main+0x3a8>)
 80047c6:	2398      	movs	r3, #152	@ 0x98
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2168      	movs	r1, #104	@ 0x68
 80047cc:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 80047ce:	4ad5      	ldr	r2, [pc, #852]	@ (8004b24 <main+0x3a8>)
 80047d0:	2332      	movs	r3, #50	@ 0x32
 80047d2:	33ff      	adds	r3, #255	@ 0xff
 80047d4:	2169      	movs	r1, #105	@ 0x69
 80047d6:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 80047d8:	4ad2      	ldr	r2, [pc, #840]	@ (8004b24 <main+0x3a8>)
 80047da:	238c      	movs	r3, #140	@ 0x8c
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2100      	movs	r1, #0
 80047e0:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 80047e2:	4bd0      	ldr	r3, [pc, #832]	@ (8004b24 <main+0x3a8>)
 80047e4:	2264      	movs	r2, #100	@ 0x64
 80047e6:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 80047e8:	4bce      	ldr	r3, [pc, #824]	@ (8004b24 <main+0x3a8>)
 80047ea:	2203      	movs	r2, #3
 80047ec:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 80047ee:	4acd      	ldr	r2, [pc, #820]	@ (8004b24 <main+0x3a8>)
 80047f0:	2390      	movs	r3, #144	@ 0x90
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2100      	movs	r1, #0
 80047f6:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 80047f8:	4aca      	ldr	r2, [pc, #808]	@ (8004b24 <main+0x3a8>)
 80047fa:	238e      	movs	r3, #142	@ 0x8e
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2100      	movs	r1, #0
 8004800:	50d1      	str	r1, [r2, r3]
  game.dailyGoal=2000;
 8004802:	4ac8      	ldr	r2, [pc, #800]	@ (8004b24 <main+0x3a8>)
 8004804:	2394      	movs	r3, #148	@ 0x94
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	21fa      	movs	r1, #250	@ 0xfa
 800480a:	00c9      	lsls	r1, r1, #3
 800480c:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 800480e:	4bc6      	ldr	r3, [pc, #792]	@ (8004b28 <main+0x3ac>)
 8004810:	4ac6      	ldr	r2, [pc, #792]	@ (8004b2c <main+0x3b0>)
 8004812:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8004814:	4bc4      	ldr	r3, [pc, #784]	@ (8004b28 <main+0x3ac>)
 8004816:	4ac6      	ldr	r2, [pc, #792]	@ (8004b30 <main+0x3b4>)
 8004818:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 800481a:	4bc2      	ldr	r3, [pc, #776]	@ (8004b24 <main+0x3a8>)
 800481c:	4ac2      	ldr	r2, [pc, #776]	@ (8004b28 <main+0x3ac>)
 800481e:	3318      	adds	r3, #24
 8004820:	ca03      	ldmia	r2!, {r0, r1}
 8004822:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8004824:	4bbf      	ldr	r3, [pc, #764]	@ (8004b24 <main+0x3a8>)
 8004826:	4ac0      	ldr	r2, [pc, #768]	@ (8004b28 <main+0x3ac>)
 8004828:	3320      	adds	r3, #32
 800482a:	ca03      	ldmia	r2!, {r0, r1}
 800482c:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 800482e:	4bbd      	ldr	r3, [pc, #756]	@ (8004b24 <main+0x3a8>)
 8004830:	4abd      	ldr	r2, [pc, #756]	@ (8004b28 <main+0x3ac>)
 8004832:	3328      	adds	r3, #40	@ 0x28
 8004834:	ca03      	ldmia	r2!, {r0, r1}
 8004836:	c303      	stmia	r3!, {r0, r1}
  game.time.hours=0;
 8004838:	4bba      	ldr	r3, [pc, #744]	@ (8004b24 <main+0x3a8>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
  gpsThreshold = .0001;
 800483e:	4bbd      	ldr	r3, [pc, #756]	@ (8004b34 <main+0x3b8>)
 8004840:	4abd      	ldr	r2, [pc, #756]	@ (8004b38 <main+0x3bc>)
 8004842:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004844:	f000 ff7c 	bl	8005740 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004848:	f000 fd26 	bl	8005298 <MX_I2C1_Init>
  MX_SPI1_Init();
 800484c:	f000 fe14 	bl	8005478 <MX_SPI1_Init>
  MX_TIM17_Init();
 8004850:	f000 fe52 	bl	80054f8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8004854:	f000 fed8 	bl	8005608 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004858:	f000 ff24 	bl	80056a4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800485c:	f000 fd5c 	bl	8005318 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8004860:	f7ff fcbc 	bl	80041dc <ST7735_Unselect>
  ST7735_Init(1);
 8004864:	2001      	movs	r0, #1
 8004866:	f7ff fdcd 	bl	8004404 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 800486a:	4bb4      	ldr	r3, [pc, #720]	@ (8004b3c <main+0x3c0>)
 800486c:	2241      	movs	r2, #65	@ 0x41
 800486e:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8004870:	4bb2      	ldr	r3, [pc, #712]	@ (8004b3c <main+0x3c0>)
 8004872:	2242      	movs	r2, #66	@ 0x42
 8004874:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8004876:	4bb2      	ldr	r3, [pc, #712]	@ (8004b40 <main+0x3c4>)
 8004878:	2205      	movs	r2, #5
 800487a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 800487c:	4bb0      	ldr	r3, [pc, #704]	@ (8004b40 <main+0x3c4>)
 800487e:	2240      	movs	r2, #64	@ 0x40
 8004880:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8004882:	2327      	movs	r3, #39	@ 0x27
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 800488a:	2102      	movs	r1, #2
 800488c:	2019      	movs	r0, #25
 800488e:	f001 f9ed 	bl	8005c6c <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8004892:	2101      	movs	r1, #1
 8004894:	207c      	movs	r0, #124	@ 0x7c
 8004896:	f001 f9e9 	bl	8005c6c <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 800489a:	2138      	movs	r1, #56	@ 0x38
 800489c:	201a      	movs	r0, #26
 800489e:	f001 f9e5 	bl	8005c6c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 80048a2:	2104      	movs	r1, #4
 80048a4:	201b      	movs	r0, #27
 80048a6:	f001 f9e1 	bl	8005c6c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 80048aa:	2180      	movs	r1, #128	@ 0x80
 80048ac:	201f      	movs	r0, #31
 80048ae:	f001 f9dd 	bl	8005c6c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 80048b2:	2180      	movs	r1, #128	@ 0x80
 80048b4:	2021      	movs	r0, #33	@ 0x21
 80048b6:	f001 f9d9 	bl	8005c6c <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 80048ba:	2101      	movs	r1, #1
 80048bc:	2018      	movs	r0, #24
 80048be:	f001 f9d5 	bl	8005c6c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 80048c2:	2101      	movs	r1, #1
 80048c4:	2020      	movs	r0, #32
 80048c6:	f001 f9d1 	bl	8005c6c <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 80048ca:	2000      	movs	r0, #0
 80048cc:	f7ff fb40 	bl	8003f50 <fillScreen>
  while (1)
  {
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 80048d0:	4b8e      	ldr	r3, [pc, #568]	@ (8004b0c <main+0x390>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	0019      	movs	r1, r3
 80048d6:	2015      	movs	r0, #21
 80048d8:	f001 f996 	bl	8005c08 <_ADXL343_ReadReg8>

	  //SendData();
	  //ReceiveData();
	  //_ADXL343_ReadReg8(0x00, &steps, 1);
	  if(checkTime){
 80048dc:	4b99      	ldr	r3, [pc, #612]	@ (8004b44 <main+0x3c8>)
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02b      	beq.n	800493c <main+0x1c0>
	  if(((game.time.minutes%dayLength)==0) && game.time.seconds>0){
 80048e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004b24 <main+0x3a8>)
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b97      	ldr	r3, [pc, #604]	@ (8004b48 <main+0x3cc>)
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	0019      	movs	r1, r3
 80048ee:	0010      	movs	r0, r2
 80048f0:	f7fb fd8c 	bl	800040c <__aeabi_idivmod>
 80048f4:	1e0b      	subs	r3, r1, #0
 80048f6:	d10b      	bne.n	8004910 <main+0x194>
 80048f8:	4b8a      	ldr	r3, [pc, #552]	@ (8004b24 <main+0x3a8>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dd07      	ble.n	8004910 <main+0x194>
		  game.stepsToday=0;
 8004900:	4a88      	ldr	r2, [pc, #544]	@ (8004b24 <main+0x3a8>)
 8004902:	2390      	movs	r3, #144	@ 0x90
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2100      	movs	r1, #0
 8004908:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 800490a:	4b8e      	ldr	r3, [pc, #568]	@ (8004b44 <main+0x3c8>)
 800490c:	2200      	movs	r2, #0
 800490e:	801a      	strh	r2, [r3, #0]
	  }

	  if(((game.time.minutes%weekLength)==0) && game.time.seconds>0){
 8004910:	4b84      	ldr	r3, [pc, #528]	@ (8004b24 <main+0x3a8>)
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	4b8d      	ldr	r3, [pc, #564]	@ (8004b4c <main+0x3d0>)
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	0019      	movs	r1, r3
 800491a:	0010      	movs	r0, r2
 800491c:	f7fb fd76 	bl	800040c <__aeabi_idivmod>
 8004920:	1e0b      	subs	r3, r1, #0
 8004922:	d10b      	bne.n	800493c <main+0x1c0>
 8004924:	4b7f      	ldr	r3, [pc, #508]	@ (8004b24 <main+0x3a8>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	dd07      	ble.n	800493c <main+0x1c0>
		  game.weeklySteps=0;
 800492c:	4a7d      	ldr	r2, [pc, #500]	@ (8004b24 <main+0x3a8>)
 800492e:	238e      	movs	r3, #142	@ 0x8e
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	2100      	movs	r1, #0
 8004934:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 8004936:	4b83      	ldr	r3, [pc, #524]	@ (8004b44 <main+0x3c8>)
 8004938:	2200      	movs	r2, #0
 800493a:	801a      	strh	r2, [r3, #0]
	  }
	  }
	  if((game.time.minutes%dayLength)==1) checkTime=1;
 800493c:	4b79      	ldr	r3, [pc, #484]	@ (8004b24 <main+0x3a8>)
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4b81      	ldr	r3, [pc, #516]	@ (8004b48 <main+0x3cc>)
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	0019      	movs	r1, r3
 8004946:	0010      	movs	r0, r2
 8004948:	f7fb fd60 	bl	800040c <__aeabi_idivmod>
 800494c:	000b      	movs	r3, r1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d102      	bne.n	8004958 <main+0x1dc>
 8004952:	4b7c      	ldr	r3, [pc, #496]	@ (8004b44 <main+0x3c8>)
 8004954:	2201      	movs	r2, #1
 8004956:	801a      	strh	r2, [r3, #0]
	  if(steps!=0){
 8004958:	4b6c      	ldr	r3, [pc, #432]	@ (8004b0c <main+0x390>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d033      	beq.n	80049c8 <main+0x24c>
	  game.stepsToday +=steps*game.numLocations;
 8004960:	4a70      	ldr	r2, [pc, #448]	@ (8004b24 <main+0x3a8>)
 8004962:	2390      	movs	r3, #144	@ 0x90
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	58d2      	ldr	r2, [r2, r3]
 8004968:	4b68      	ldr	r3, [pc, #416]	@ (8004b0c <main+0x390>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	0019      	movs	r1, r3
 800496e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b24 <main+0x3a8>)
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	434b      	muls	r3, r1
 8004974:	18d1      	adds	r1, r2, r3
 8004976:	4a6b      	ldr	r2, [pc, #428]	@ (8004b24 <main+0x3a8>)
 8004978:	2390      	movs	r3, #144	@ 0x90
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps*game.numLocations;
 800497e:	4a69      	ldr	r2, [pc, #420]	@ (8004b24 <main+0x3a8>)
 8004980:	238e      	movs	r3, #142	@ 0x8e
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	58d2      	ldr	r2, [r2, r3]
 8004986:	4b61      	ldr	r3, [pc, #388]	@ (8004b0c <main+0x390>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	0019      	movs	r1, r3
 800498c:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <main+0x3a8>)
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	434b      	muls	r3, r1
 8004992:	18d1      	adds	r1, r2, r3
 8004994:	4a63      	ldr	r2, [pc, #396]	@ (8004b24 <main+0x3a8>)
 8004996:	238e      	movs	r3, #142	@ 0x8e
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	50d1      	str	r1, [r2, r3]
	  game.allSteps+=steps*game.numLocations;
 800499c:	4a61      	ldr	r2, [pc, #388]	@ (8004b24 <main+0x3a8>)
 800499e:	238c      	movs	r3, #140	@ 0x8c
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	58d2      	ldr	r2, [r2, r3]
 80049a4:	4b59      	ldr	r3, [pc, #356]	@ (8004b0c <main+0x390>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	0019      	movs	r1, r3
 80049aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004b24 <main+0x3a8>)
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	434b      	muls	r3, r1
 80049b0:	18d1      	adds	r1, r2, r3
 80049b2:	4a5c      	ldr	r2, [pc, #368]	@ (8004b24 <main+0x3a8>)
 80049b4:	238c      	movs	r3, #140	@ 0x8c
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	50d1      	str	r1, [r2, r3]
	  steps=0;
 80049ba:	4b54      	ldr	r3, [pc, #336]	@ (8004b0c <main+0x390>)
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]
	  _ADXL343_WriteReg8(0x7E, 0xB1);
 80049c0:	21b1      	movs	r1, #177	@ 0xb1
 80049c2:	207e      	movs	r0, #126	@ 0x7e
 80049c4:	f001 f952 	bl	8005c6c <_ADXL343_WriteReg8>
	  }
	  ++updateScreen;
 80049c8:	4b61      	ldr	r3, [pc, #388]	@ (8004b50 <main+0x3d4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	4b60      	ldr	r3, [pc, #384]	@ (8004b50 <main+0x3d4>)
 80049d0:	601a      	str	r2, [r3, #0]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 80049d2:	4b60      	ldr	r3, [pc, #384]	@ (8004b54 <main+0x3d8>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d100      	bne.n	80049dc <main+0x260>
 80049da:	e2a9      	b.n	8004f30 <main+0x7b4>
 80049dc:	dd01      	ble.n	80049e2 <main+0x266>
 80049de:	f000 fbc8 	bl	8005172 <main+0x9f6>
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d100      	bne.n	80049e8 <main+0x26c>
 80049e6:	e23c      	b.n	8004e62 <main+0x6e6>
 80049e8:	dd01      	ble.n	80049ee <main+0x272>
 80049ea:	f000 fbc2 	bl	8005172 <main+0x9f6>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d100      	bne.n	80049f4 <main+0x278>
 80049f2:	e0c1      	b.n	8004b78 <main+0x3fc>
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d001      	beq.n	80049fc <main+0x280>
 80049f8:	f000 fbbb 	bl	8005172 <main+0x9f6>
	  case Main:
		  if((totalFrames)%600==0) GetLatLon();
 80049fc:	4b56      	ldr	r3, [pc, #344]	@ (8004b58 <main+0x3dc>)
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	2296      	movs	r2, #150	@ 0x96
 8004a02:	0091      	lsls	r1, r2, #2
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fb fc17 	bl	8000238 <__aeabi_uidivmod>
 8004a0a:	000b      	movs	r3, r1
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <main+0x29a>
 8004a12:	f001 f953 	bl	8005cbc <GetLatLon>
		  if(updateScreen>=5)
 8004a16:	4b4e      	ldr	r3, [pc, #312]	@ (8004b50 <main+0x3d4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d92a      	bls.n	8004a74 <main+0x2f8>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8004a1e:	4b40      	ldr	r3, [pc, #256]	@ (8004b20 <main+0x3a4>)
 8004a20:	2101      	movs	r1, #1
 8004a22:	0018      	movs	r0, r3
 8004a24:	f001 f8be 	bl	8005ba4 <Animate>
			  updateScreen = 0;
 8004a28:	4b49      	ldr	r3, [pc, #292]	@ (8004b50 <main+0x3d4>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
			  //Update steps
			  drawString(0,150,"-SILLY LITTLE GUY-",WHITE,BLACK,1,1);
 8004a2e:	2301      	movs	r3, #1
 8004a30:	425b      	negs	r3, r3
 8004a32:	4a4a      	ldr	r2, [pc, #296]	@ (8004b5c <main+0x3e0>)
 8004a34:	2101      	movs	r1, #1
 8004a36:	9102      	str	r1, [sp, #8]
 8004a38:	2101      	movs	r1, #1
 8004a3a:	9101      	str	r1, [sp, #4]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	9100      	str	r1, [sp, #0]
 8004a40:	2196      	movs	r1, #150	@ 0x96
 8004a42:	2000      	movs	r0, #0
 8004a44:	f7ff f93f 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Steps: %d ", game.stepsToday);
 8004a48:	4a36      	ldr	r2, [pc, #216]	@ (8004b24 <main+0x3a8>)
 8004a4a:	2390      	movs	r3, #144	@ 0x90
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	58d2      	ldr	r2, [r2, r3]
 8004a50:	4943      	ldr	r1, [pc, #268]	@ (8004b60 <main+0x3e4>)
 8004a52:	4b44      	ldr	r3, [pc, #272]	@ (8004b64 <main+0x3e8>)
 8004a54:	0018      	movs	r0, r3
 8004a56:	f007 fd01 	bl	800c45c <siprintf>
			  drawString(0, 10, buffer2, WHITE, BLACK, 1, 1);
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	425b      	negs	r3, r3
 8004a5e:	4a41      	ldr	r2, [pc, #260]	@ (8004b64 <main+0x3e8>)
 8004a60:	2101      	movs	r1, #1
 8004a62:	9102      	str	r1, [sp, #8]
 8004a64:	2101      	movs	r1, #1
 8004a66:	9101      	str	r1, [sp, #4]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	9100      	str	r1, [sp, #0]
 8004a6c:	210a      	movs	r1, #10
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f7ff f929 	bl	8003cc6 <drawString>
		  }

		  //Interact with the SLG
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET)
 8004a74:	4b3c      	ldr	r3, [pc, #240]	@ (8004b68 <main+0x3ec>)
 8004a76:	2102      	movs	r1, #2
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f002 fd7d 	bl	8007578 <HAL_GPIO_ReadPin>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d107      	bne.n	8004a94 <main+0x318>
		  {
			  effect = Evolution;
 8004a84:	4b39      	ldr	r3, [pc, #228]	@ (8004b6c <main+0x3f0>)
 8004a86:	2206      	movs	r2, #6
 8004a88:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004a8a:	4b38      	ldr	r3, [pc, #224]	@ (8004b6c <main+0x3f0>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 ff24 	bl	80058dc <PlayEffect>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ) {
 8004a94:	4b36      	ldr	r3, [pc, #216]	@ (8004b70 <main+0x3f4>)
 8004a96:	2104      	movs	r1, #4
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f002 fd6d 	bl	8007578 <HAL_GPIO_ReadPin>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d111      	bne.n	8004ac8 <main+0x34c>
			  effect = MenuBeep;
 8004aa4:	4b31      	ldr	r3, [pc, #196]	@ (8004b6c <main+0x3f0>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004aaa:	4b30      	ldr	r3, [pc, #192]	@ (8004b6c <main+0x3f0>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 ff14 	bl	80058dc <PlayEffect>

			  currentMenu = Settings;
 8004ab4:	4b27      	ldr	r3, [pc, #156]	@ (8004b54 <main+0x3d8>)
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004aba:	4b2e      	ldr	r3, [pc, #184]	@ (8004b74 <main+0x3f8>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f7ff fa45 	bl	8003f50 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8004ac6:	e354      	b.n	8005172 <main+0x9f6>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	011a      	lsls	r2, r3, #4
 8004acc:	23a0      	movs	r3, #160	@ 0xa0
 8004ace:	05db      	lsls	r3, r3, #23
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f002 fd50 	bl	8007578 <HAL_GPIO_ReadPin>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d111      	bne.n	8004b02 <main+0x386>
			  effect = MenuBeep;
 8004ade:	4b23      	ldr	r3, [pc, #140]	@ (8004b6c <main+0x3f0>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004ae4:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <main+0x3f0>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 fef7 	bl	80058dc <PlayEffect>
			  currentMenu = StatsDisplay;
 8004aee:	4b19      	ldr	r3, [pc, #100]	@ (8004b54 <main+0x3d8>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004af4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b74 <main+0x3f8>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f7ff fa28 	bl	8003f50 <fillScreen>
		  break;
 8004b00:	e337      	b.n	8005172 <main+0x9f6>
			  canChange = 1;
 8004b02:	4b1c      	ldr	r3, [pc, #112]	@ (8004b74 <main+0x3f8>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
		  break;
 8004b08:	e333      	b.n	8005172 <main+0x9f6>
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	20000d20 	.word	0x20000d20
 8004b10:	20000c84 	.word	0x20000c84
 8004b14:	20000008 	.word	0x20000008
 8004b18:	20000c8c 	.word	0x20000c8c
 8004b1c:	200004d4 	.word	0x200004d4
 8004b20:	20000c94 	.word	0x20000c94
 8004b24:	20000a54 	.word	0x20000a54
 8004b28:	20000ba4 	.word	0x20000ba4
 8004b2c:	414587dd 	.word	0x414587dd
 8004b30:	c2b233c5 	.word	0xc2b233c5
 8004b34:	20000ca8 	.word	0x20000ca8
 8004b38:	38d1b717 	.word	0x38d1b717
 8004b3c:	20000c00 	.word	0x20000c00
 8004b40:	40014800 	.word	0x40014800
 8004b44:	20000000 	.word	0x20000000
 8004b48:	20000002 	.word	0x20000002
 8004b4c:	20000004 	.word	0x20000004
 8004b50:	20000c80 	.word	0x20000c80
 8004b54:	200009c4 	.word	0x200009c4
 8004b58:	20000bfc 	.word	0x20000bfc
 8004b5c:	0800cfc8 	.word	0x0800cfc8
 8004b60:	0800cfdc 	.word	0x0800cfdc
 8004b64:	20000cbc 	.word	0x20000cbc
 8004b68:	50000800 	.word	0x50000800
 8004b6c:	20000a50 	.word	0x20000a50
 8004b70:	50000400 	.word	0x50000400
 8004b74:	200009c5 	.word	0x200009c5
	  case StatsDisplay:

		  if(updateScreen>=5)
 8004b78:	4bd4      	ldr	r3, [pc, #848]	@ (8004ecc <main+0x750>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d800      	bhi.n	8004b82 <main+0x406>
 8004b80:	e151      	b.n	8004e26 <main+0x6aa>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004b82:	2301      	movs	r3, #1
 8004b84:	425b      	negs	r3, r3
 8004b86:	4ad2      	ldr	r2, [pc, #840]	@ (8004ed0 <main+0x754>)
 8004b88:	2101      	movs	r1, #1
 8004b8a:	9102      	str	r1, [sp, #8]
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	9101      	str	r1, [sp, #4]
 8004b90:	2100      	movs	r1, #0
 8004b92:	9100      	str	r1, [sp, #0]
 8004b94:	2196      	movs	r1, #150	@ 0x96
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7ff f895 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004b9c:	4acd      	ldr	r2, [pc, #820]	@ (8004ed4 <main+0x758>)
 8004b9e:	2390      	movs	r3, #144	@ 0x90
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	58d2      	ldr	r2, [r2, r3]
 8004ba4:	49cc      	ldr	r1, [pc, #816]	@ (8004ed8 <main+0x75c>)
 8004ba6:	4bcd      	ldr	r3, [pc, #820]	@ (8004edc <main+0x760>)
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f007 fc57 	bl	800c45c <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004bae:	2301      	movs	r3, #1
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	4aca      	ldr	r2, [pc, #808]	@ (8004edc <main+0x760>)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	9102      	str	r1, [sp, #8]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	9101      	str	r1, [sp, #4]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	9100      	str	r1, [sp, #0]
 8004bc0:	218c      	movs	r1, #140	@ 0x8c
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7ff f87f 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004bc8:	4ac2      	ldr	r2, [pc, #776]	@ (8004ed4 <main+0x758>)
 8004bca:	238e      	movs	r3, #142	@ 0x8e
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	58d2      	ldr	r2, [r2, r3]
 8004bd0:	49c3      	ldr	r1, [pc, #780]	@ (8004ee0 <main+0x764>)
 8004bd2:	4bc2      	ldr	r3, [pc, #776]	@ (8004edc <main+0x760>)
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f007 fc41 	bl	800c45c <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004bda:	2301      	movs	r3, #1
 8004bdc:	425b      	negs	r3, r3
 8004bde:	4abf      	ldr	r2, [pc, #764]	@ (8004edc <main+0x760>)
 8004be0:	2101      	movs	r1, #1
 8004be2:	9102      	str	r1, [sp, #8]
 8004be4:	2101      	movs	r1, #1
 8004be6:	9101      	str	r1, [sp, #4]
 8004be8:	2100      	movs	r1, #0
 8004bea:	9100      	str	r1, [sp, #0]
 8004bec:	2182      	movs	r1, #130	@ 0x82
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7ff f869 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 8004bf4:	4ab7      	ldr	r2, [pc, #732]	@ (8004ed4 <main+0x758>)
 8004bf6:	238c      	movs	r3, #140	@ 0x8c
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	58d2      	ldr	r2, [r2, r3]
 8004bfc:	49b9      	ldr	r1, [pc, #740]	@ (8004ee4 <main+0x768>)
 8004bfe:	4bb7      	ldr	r3, [pc, #732]	@ (8004edc <main+0x760>)
 8004c00:	0018      	movs	r0, r3
 8004c02:	f007 fc2b 	bl	800c45c <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004c06:	2301      	movs	r3, #1
 8004c08:	425b      	negs	r3, r3
 8004c0a:	4ab4      	ldr	r2, [pc, #720]	@ (8004edc <main+0x760>)
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	9102      	str	r1, [sp, #8]
 8004c10:	2101      	movs	r1, #1
 8004c12:	9101      	str	r1, [sp, #4]
 8004c14:	2100      	movs	r1, #0
 8004c16:	9100      	str	r1, [sp, #0]
 8004c18:	2178      	movs	r1, #120	@ 0x78
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f7ff f853 	bl	8003cc6 <drawString>
			  drawString(0, 110, "POSITIONS", WHITE, BLACK, 1,1);
 8004c20:	2301      	movs	r3, #1
 8004c22:	425b      	negs	r3, r3
 8004c24:	4ab0      	ldr	r2, [pc, #704]	@ (8004ee8 <main+0x76c>)
 8004c26:	2101      	movs	r1, #1
 8004c28:	9102      	str	r1, [sp, #8]
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	9101      	str	r1, [sp, #4]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	9100      	str	r1, [sp, #0]
 8004c32:	216e      	movs	r1, #110	@ 0x6e
 8004c34:	2000      	movs	r0, #0
 8004c36:	f7ff f846 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004c3a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ed4 <main+0x758>)
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	49ab      	ldr	r1, [pc, #684]	@ (8004eec <main+0x770>)
 8004c40:	4ba6      	ldr	r3, [pc, #664]	@ (8004edc <main+0x760>)
 8004c42:	0018      	movs	r0, r3
 8004c44:	f007 fc0a 	bl	800c45c <siprintf>
			  drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004c48:	2301      	movs	r3, #1
 8004c4a:	425b      	negs	r3, r3
 8004c4c:	4aa3      	ldr	r2, [pc, #652]	@ (8004edc <main+0x760>)
 8004c4e:	2101      	movs	r1, #1
 8004c50:	9102      	str	r1, [sp, #8]
 8004c52:	2101      	movs	r1, #1
 8004c54:	9101      	str	r1, [sp, #4]
 8004c56:	2100      	movs	r1, #0
 8004c58:	9100      	str	r1, [sp, #0]
 8004c5a:	2164      	movs	r1, #100	@ 0x64
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f7ff f832 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Old Lat: %d.%d", (int)(game.positions[game.numLocations-1].lat), abs((int)(((game.positions[game.numLocations-1].lat)*10000))%10000));
 8004c62:	4b9c      	ldr	r3, [pc, #624]	@ (8004ed4 <main+0x758>)
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	4b9a      	ldr	r3, [pc, #616]	@ (8004ed4 <main+0x758>)
 8004c6a:	3203      	adds	r2, #3
 8004c6c:	00d2      	lsls	r2, r2, #3
 8004c6e:	58d3      	ldr	r3, [r2, r3]
 8004c70:	1c18      	adds	r0, r3, #0
 8004c72:	f7fc fce9 	bl	8001648 <__aeabi_f2iz>
 8004c76:	0004      	movs	r4, r0
 8004c78:	4b96      	ldr	r3, [pc, #600]	@ (8004ed4 <main+0x758>)
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	4b95      	ldr	r3, [pc, #596]	@ (8004ed4 <main+0x758>)
 8004c80:	3203      	adds	r2, #3
 8004c82:	00d2      	lsls	r2, r2, #3
 8004c84:	58d3      	ldr	r3, [r2, r3]
 8004c86:	499a      	ldr	r1, [pc, #616]	@ (8004ef0 <main+0x774>)
 8004c88:	1c18      	adds	r0, r3, #0
 8004c8a:	f7fc f91f 	bl	8000ecc <__aeabi_fmul>
 8004c8e:	1c03      	adds	r3, r0, #0
 8004c90:	1c18      	adds	r0, r3, #0
 8004c92:	f7fc fcd9 	bl	8001648 <__aeabi_f2iz>
 8004c96:	0003      	movs	r3, r0
 8004c98:	4996      	ldr	r1, [pc, #600]	@ (8004ef4 <main+0x778>)
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fb fbb6 	bl	800040c <__aeabi_idivmod>
 8004ca0:	000b      	movs	r3, r1
 8004ca2:	17da      	asrs	r2, r3, #31
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	4053      	eors	r3, r2
 8004ca8:	4993      	ldr	r1, [pc, #588]	@ (8004ef8 <main+0x77c>)
 8004caa:	488c      	ldr	r0, [pc, #560]	@ (8004edc <main+0x760>)
 8004cac:	0022      	movs	r2, r4
 8004cae:	f007 fbd5 	bl	800c45c <siprintf>
			  drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	425b      	negs	r3, r3
 8004cb6:	4a89      	ldr	r2, [pc, #548]	@ (8004edc <main+0x760>)
 8004cb8:	2101      	movs	r1, #1
 8004cba:	9102      	str	r1, [sp, #8]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	9101      	str	r1, [sp, #4]
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	9100      	str	r1, [sp, #0]
 8004cc4:	215a      	movs	r1, #90	@ 0x5a
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f7fe fffd 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Old Lon: %d.%d", (int)(game.positions[game.numLocations-1].lon), abs((int)(((game.positions[game.numLocations-1].lon)*10000))%10000));
 8004ccc:	4b81      	ldr	r3, [pc, #516]	@ (8004ed4 <main+0x758>)
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	4a80      	ldr	r2, [pc, #512]	@ (8004ed4 <main+0x758>)
 8004cd4:	3303      	adds	r3, #3
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	18d3      	adds	r3, r2, r3
 8004cda:	3304      	adds	r3, #4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	1c18      	adds	r0, r3, #0
 8004ce0:	f7fc fcb2 	bl	8001648 <__aeabi_f2iz>
 8004ce4:	0004      	movs	r4, r0
 8004ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed4 <main+0x758>)
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4a79      	ldr	r2, [pc, #484]	@ (8004ed4 <main+0x758>)
 8004cee:	3303      	adds	r3, #3
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	18d3      	adds	r3, r2, r3
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	497d      	ldr	r1, [pc, #500]	@ (8004ef0 <main+0x774>)
 8004cfa:	1c18      	adds	r0, r3, #0
 8004cfc:	f7fc f8e6 	bl	8000ecc <__aeabi_fmul>
 8004d00:	1c03      	adds	r3, r0, #0
 8004d02:	1c18      	adds	r0, r3, #0
 8004d04:	f7fc fca0 	bl	8001648 <__aeabi_f2iz>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	497a      	ldr	r1, [pc, #488]	@ (8004ef4 <main+0x778>)
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7fb fb7d 	bl	800040c <__aeabi_idivmod>
 8004d12:	000b      	movs	r3, r1
 8004d14:	17da      	asrs	r2, r3, #31
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	4053      	eors	r3, r2
 8004d1a:	4978      	ldr	r1, [pc, #480]	@ (8004efc <main+0x780>)
 8004d1c:	486f      	ldr	r0, [pc, #444]	@ (8004edc <main+0x760>)
 8004d1e:	0022      	movs	r2, r4
 8004d20:	f007 fb9c 	bl	800c45c <siprintf>
			  drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004d24:	2301      	movs	r3, #1
 8004d26:	425b      	negs	r3, r3
 8004d28:	4a6c      	ldr	r2, [pc, #432]	@ (8004edc <main+0x760>)
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	9102      	str	r1, [sp, #8]
 8004d2e:	2101      	movs	r1, #1
 8004d30:	9101      	str	r1, [sp, #4]
 8004d32:	2100      	movs	r1, #0
 8004d34:	9100      	str	r1, [sp, #0]
 8004d36:	2150      	movs	r1, #80	@ 0x50
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7fe ffc4 	bl	8003cc6 <drawString>
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET){
 8004d3e:	4b70      	ldr	r3, [pc, #448]	@ (8004f00 <main+0x784>)
 8004d40:	2102      	movs	r1, #2
 8004d42:	0018      	movs	r0, r3
 8004d44:	f002 fc18 	bl	8007578 <HAL_GPIO_ReadPin>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d168      	bne.n	8004e20 <main+0x6a4>
			  sprintf(buffer2, "Lat: %d.%d", (int)(GetJustLatLon().lat), abs(((int)((GetJustLatLon().lat)*10000))%10000));
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	0018      	movs	r0, r3
 8004d52:	f001 f90b 	bl	8005f6c <GetJustLatLon>
 8004d56:	1d3b      	adds	r3, r7, #4
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1c18      	adds	r0, r3, #0
 8004d5c:	f7fc fc74 	bl	8001648 <__aeabi_f2iz>
 8004d60:	0004      	movs	r4, r0
 8004d62:	250c      	movs	r5, #12
 8004d64:	197b      	adds	r3, r7, r5
 8004d66:	0018      	movs	r0, r3
 8004d68:	f001 f900 	bl	8005f6c <GetJustLatLon>
 8004d6c:	197b      	adds	r3, r7, r5
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	495f      	ldr	r1, [pc, #380]	@ (8004ef0 <main+0x774>)
 8004d72:	1c18      	adds	r0, r3, #0
 8004d74:	f7fc f8aa 	bl	8000ecc <__aeabi_fmul>
 8004d78:	1c03      	adds	r3, r0, #0
 8004d7a:	1c18      	adds	r0, r3, #0
 8004d7c:	f7fc fc64 	bl	8001648 <__aeabi_f2iz>
 8004d80:	0003      	movs	r3, r0
 8004d82:	495c      	ldr	r1, [pc, #368]	@ (8004ef4 <main+0x778>)
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7fb fb41 	bl	800040c <__aeabi_idivmod>
 8004d8a:	000b      	movs	r3, r1
 8004d8c:	17da      	asrs	r2, r3, #31
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	4053      	eors	r3, r2
 8004d92:	495c      	ldr	r1, [pc, #368]	@ (8004f04 <main+0x788>)
 8004d94:	4851      	ldr	r0, [pc, #324]	@ (8004edc <main+0x760>)
 8004d96:	0022      	movs	r2, r4
 8004d98:	f007 fb60 	bl	800c45c <siprintf>
			  drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	425b      	negs	r3, r3
 8004da0:	4a4e      	ldr	r2, [pc, #312]	@ (8004edc <main+0x760>)
 8004da2:	2101      	movs	r1, #1
 8004da4:	9102      	str	r1, [sp, #8]
 8004da6:	2101      	movs	r1, #1
 8004da8:	9101      	str	r1, [sp, #4]
 8004daa:	2100      	movs	r1, #0
 8004dac:	9100      	str	r1, [sp, #0]
 8004dae:	2146      	movs	r1, #70	@ 0x46
 8004db0:	2000      	movs	r0, #0
 8004db2:	f7fe ff88 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Lon: %d.%d", (int)(GetJustLatLon().lon), abs((int)(((GetJustLatLon().lon)*10000))%10000));
 8004db6:	2414      	movs	r4, #20
 8004db8:	193b      	adds	r3, r7, r4
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f001 f8d6 	bl	8005f6c <GetJustLatLon>
 8004dc0:	193b      	adds	r3, r7, r4
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	1c18      	adds	r0, r3, #0
 8004dc6:	f7fc fc3f 	bl	8001648 <__aeabi_f2iz>
 8004dca:	0004      	movs	r4, r0
 8004dcc:	251c      	movs	r5, #28
 8004dce:	197b      	adds	r3, r7, r5
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f001 f8cb 	bl	8005f6c <GetJustLatLon>
 8004dd6:	197b      	adds	r3, r7, r5
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4945      	ldr	r1, [pc, #276]	@ (8004ef0 <main+0x774>)
 8004ddc:	1c18      	adds	r0, r3, #0
 8004dde:	f7fc f875 	bl	8000ecc <__aeabi_fmul>
 8004de2:	1c03      	adds	r3, r0, #0
 8004de4:	1c18      	adds	r0, r3, #0
 8004de6:	f7fc fc2f 	bl	8001648 <__aeabi_f2iz>
 8004dea:	0003      	movs	r3, r0
 8004dec:	4941      	ldr	r1, [pc, #260]	@ (8004ef4 <main+0x778>)
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fb fb0c 	bl	800040c <__aeabi_idivmod>
 8004df4:	000b      	movs	r3, r1
 8004df6:	17da      	asrs	r2, r3, #31
 8004df8:	189b      	adds	r3, r3, r2
 8004dfa:	4053      	eors	r3, r2
 8004dfc:	4942      	ldr	r1, [pc, #264]	@ (8004f08 <main+0x78c>)
 8004dfe:	4837      	ldr	r0, [pc, #220]	@ (8004edc <main+0x760>)
 8004e00:	0022      	movs	r2, r4
 8004e02:	f007 fb2b 	bl	800c45c <siprintf>
			  drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 8004e06:	2301      	movs	r3, #1
 8004e08:	425b      	negs	r3, r3
 8004e0a:	4a34      	ldr	r2, [pc, #208]	@ (8004edc <main+0x760>)
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	9102      	str	r1, [sp, #8]
 8004e10:	2101      	movs	r1, #1
 8004e12:	9101      	str	r1, [sp, #4]
 8004e14:	2100      	movs	r1, #0
 8004e16:	9100      	str	r1, [sp, #0]
 8004e18:	213c      	movs	r1, #60	@ 0x3c
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f7fe ff53 	bl	8003cc6 <drawString>
			  }
			  updateScreen = 0;
 8004e20:	4b2a      	ldr	r3, [pc, #168]	@ (8004ecc <main+0x750>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ){
 8004e26:	4b39      	ldr	r3, [pc, #228]	@ (8004f0c <main+0x790>)
 8004e28:	2104      	movs	r1, #4
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f002 fba4 	bl	8007578 <HAL_GPIO_ReadPin>
 8004e30:	0003      	movs	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d111      	bne.n	8004e5a <main+0x6de>
	  		effect = MenuBeep;
 8004e36:	4b36      	ldr	r3, [pc, #216]	@ (8004f10 <main+0x794>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
	  		PlayEffect(effect);
 8004e3c:	4b34      	ldr	r3, [pc, #208]	@ (8004f10 <main+0x794>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 fd4b 	bl	80058dc <PlayEffect>

	  		currentMenu = Main;
 8004e46:	4b33      	ldr	r3, [pc, #204]	@ (8004f14 <main+0x798>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8004e4c:	4b32      	ldr	r3, [pc, #200]	@ (8004f18 <main+0x79c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff f87c 	bl	8003f50 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8004e58:	e18b      	b.n	8005172 <main+0x9f6>
	  	      canChange = 1;
 8004e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f18 <main+0x79c>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
	  	  break;
 8004e60:	e187      	b.n	8005172 <main+0x9f6>
	  case MusicTest:
		  //fillScreen(BLUE);
		  if((totalFrames++)%1000000==0){
 8004e62:	4b2e      	ldr	r3, [pc, #184]	@ (8004f1c <main+0x7a0>)
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	b291      	uxth	r1, r2
 8004e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <main+0x7a0>)
 8004e6c:	8011      	strh	r1, [r2, #0]
 8004e6e:	492c      	ldr	r1, [pc, #176]	@ (8004f20 <main+0x7a4>)
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7fb facb 	bl	800040c <__aeabi_idivmod>
 8004e76:	1e0b      	subs	r3, r1, #0
 8004e78:	d000      	beq.n	8004e7c <main+0x700>
 8004e7a:	e179      	b.n	8005170 <main+0x9f4>
			  freq = scale[toneIndex++%13];
 8004e7c:	4b29      	ldr	r3, [pc, #164]	@ (8004f24 <main+0x7a8>)
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	b291      	uxth	r1, r2
 8004e86:	4a27      	ldr	r2, [pc, #156]	@ (8004f24 <main+0x7a8>)
 8004e88:	8011      	strh	r1, [r2, #0]
 8004e8a:	210d      	movs	r1, #13
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7fb f9d3 	bl	8000238 <__aeabi_uidivmod>
 8004e92:	000b      	movs	r3, r1
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	001a      	movs	r2, r3
 8004e98:	4b23      	ldr	r3, [pc, #140]	@ (8004f28 <main+0x7ac>)
 8004e9a:	0052      	lsls	r2, r2, #1
 8004e9c:	5ad3      	ldrh	r3, [r2, r3]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fe fbd5 	bl	8003650 <__aeabi_ui2d>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	000b      	movs	r3, r1
 8004eaa:	4920      	ldr	r1, [pc, #128]	@ (8004f2c <main+0x7b0>)
 8004eac:	600a      	str	r2, [r1, #0]
 8004eae:	604b      	str	r3, [r1, #4]
			  ChangeNote(freq);
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f2c <main+0x7b0>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0010      	movs	r0, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	f7fb fb5d 	bl	8000578 <__aeabi_d2uiz>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 fcea 	bl	800589c <ChangeNote>
		  }
		  break;
 8004ec8:	e152      	b.n	8005170 <main+0x9f4>
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	20000c80 	.word	0x20000c80
 8004ed0:	0800cfe8 	.word	0x0800cfe8
 8004ed4:	20000a54 	.word	0x20000a54
 8004ed8:	0800cff0 	.word	0x0800cff0
 8004edc:	20000cbc 	.word	0x20000cbc
 8004ee0:	0800cffc 	.word	0x0800cffc
 8004ee4:	0800d00c 	.word	0x0800d00c
 8004ee8:	0800d01c 	.word	0x0800d01c
 8004eec:	0800d028 	.word	0x0800d028
 8004ef0:	461c4000 	.word	0x461c4000
 8004ef4:	00002710 	.word	0x00002710
 8004ef8:	0800d038 	.word	0x0800d038
 8004efc:	0800d048 	.word	0x0800d048
 8004f00:	50000800 	.word	0x50000800
 8004f04:	0800d058 	.word	0x0800d058
 8004f08:	0800d064 	.word	0x0800d064
 8004f0c:	50000400 	.word	0x50000400
 8004f10:	20000a50 	.word	0x20000a50
 8004f14:	200009c4 	.word	0x200009c4
 8004f18:	200009c5 	.word	0x200009c5
 8004f1c:	20000bfc 	.word	0x20000bfc
 8004f20:	000f4240 	.word	0x000f4240
 8004f24:	20000cb8 	.word	0x20000cb8
 8004f28:	20000998 	.word	0x20000998
 8004f2c:	20000cb0 	.word	0x20000cb0
		  //{
			  //SendData();
			  //ReceiveData();
		  //}

		  if(updateScreen>=2)
 8004f30:	4b94      	ldr	r3, [pc, #592]	@ (8005184 <main+0xa08>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d800      	bhi.n	8004f3a <main+0x7be>
 8004f38:	e0f5      	b.n	8005126 <main+0x9aa>
		  {
			  updateScreen = 0;
 8004f3a:	4b92      	ldr	r3, [pc, #584]	@ (8005184 <main+0xa08>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]
			  drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 8004f40:	2301      	movs	r3, #1
 8004f42:	425b      	negs	r3, r3
 8004f44:	4a90      	ldr	r2, [pc, #576]	@ (8005188 <main+0xa0c>)
 8004f46:	2101      	movs	r1, #1
 8004f48:	9102      	str	r1, [sp, #8]
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	9101      	str	r1, [sp, #4]
 8004f4e:	2100      	movs	r1, #0
 8004f50:	9100      	str	r1, [sp, #0]
 8004f52:	2196      	movs	r1, #150	@ 0x96
 8004f54:	2000      	movs	r0, #0
 8004f56:	f7fe feb6 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 8004f5a:	4a8c      	ldr	r2, [pc, #560]	@ (800518c <main+0xa10>)
 8004f5c:	2394      	movs	r3, #148	@ 0x94
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	58d2      	ldr	r2, [r2, r3]
 8004f62:	498b      	ldr	r1, [pc, #556]	@ (8005190 <main+0xa14>)
 8004f64:	4b8b      	ldr	r3, [pc, #556]	@ (8005194 <main+0xa18>)
 8004f66:	0018      	movs	r0, r3
 8004f68:	f007 fa78 	bl	800c45c <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	425b      	negs	r3, r3
 8004f70:	4a88      	ldr	r2, [pc, #544]	@ (8005194 <main+0xa18>)
 8004f72:	2101      	movs	r1, #1
 8004f74:	9102      	str	r1, [sp, #8]
 8004f76:	2101      	movs	r1, #1
 8004f78:	9101      	str	r1, [sp, #4]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	9100      	str	r1, [sp, #0]
 8004f7e:	2182      	movs	r1, #130	@ 0x82
 8004f80:	2000      	movs	r0, #0
 8004f82:	f7fe fea0 	bl	8003cc6 <drawString>
			  drawString(0,110,"UPLOAD DATA",WHITE,BLACK,1,1);
 8004f86:	2301      	movs	r3, #1
 8004f88:	425b      	negs	r3, r3
 8004f8a:	4a83      	ldr	r2, [pc, #524]	@ (8005198 <main+0xa1c>)
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	9102      	str	r1, [sp, #8]
 8004f90:	2101      	movs	r1, #1
 8004f92:	9101      	str	r1, [sp, #4]
 8004f94:	2100      	movs	r1, #0
 8004f96:	9100      	str	r1, [sp, #0]
 8004f98:	216e      	movs	r1, #110	@ 0x6e
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7fe fe93 	bl	8003cc6 <drawString>
			  if(editDifficulty)
 8004fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800519c <main+0xa20>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d063      	beq.n	8005070 <main+0x8f4>
			  {
				  //Editing difficulty
				  drawLine(0,125,128,125,WHITE);
 8004fa8:	4b7d      	ldr	r3, [pc, #500]	@ (80051a0 <main+0xa24>)
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	237d      	movs	r3, #125	@ 0x7d
 8004fae:	2280      	movs	r2, #128	@ 0x80
 8004fb0:	217d      	movs	r1, #125	@ 0x7d
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f7fe fdf7 	bl	8003ba6 <drawLine>
				  //GET OUT when the center button is pressed!
				  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8004fb8:	4b7a      	ldr	r3, [pc, #488]	@ (80051a4 <main+0xa28>)
 8004fba:	2102      	movs	r1, #2
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f002 fadb 	bl	8007578 <HAL_GPIO_ReadPin>
 8004fc2:	1e03      	subs	r3, r0, #0
 8004fc4:	d00b      	beq.n	8004fde <main+0x862>
				  {
					  editDifficulty = 0;
 8004fc6:	4b75      	ldr	r3, [pc, #468]	@ (800519c <main+0xa20>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
					  drawLine(0,125,128,125,BLACK);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	237d      	movs	r3, #125	@ 0x7d
 8004fd2:	2280      	movs	r2, #128	@ 0x80
 8004fd4:	217d      	movs	r1, #125	@ 0x7d
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f7fe fde5 	bl	8003ba6 <drawLine>
 8004fdc:	e026      	b.n	800502c <main+0x8b0>
				  }
				  //Right increments the goal
				  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 8004fde:	4b72      	ldr	r3, [pc, #456]	@ (80051a8 <main+0xa2c>)
 8004fe0:	2104      	movs	r1, #4
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f002 fac8 	bl	8007578 <HAL_GPIO_ReadPin>
 8004fe8:	1e03      	subs	r3, r0, #0
 8004fea:	d00b      	beq.n	8005004 <main+0x888>
				  {
					  game.dailyGoal += 1000;
 8004fec:	4a67      	ldr	r2, [pc, #412]	@ (800518c <main+0xa10>)
 8004fee:	2394      	movs	r3, #148	@ 0x94
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	58d3      	ldr	r3, [r2, r3]
 8004ff4:	22fa      	movs	r2, #250	@ 0xfa
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	1899      	adds	r1, r3, r2
 8004ffa:	4a64      	ldr	r2, [pc, #400]	@ (800518c <main+0xa10>)
 8004ffc:	2394      	movs	r3, #148	@ 0x94
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	50d1      	str	r1, [r2, r3]
 8005002:	e013      	b.n	800502c <main+0x8b0>
				  }
				  //Left decrements the goal
				  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	011a      	lsls	r2, r3, #4
 8005008:	23a0      	movs	r3, #160	@ 0xa0
 800500a:	05db      	lsls	r3, r3, #23
 800500c:	0011      	movs	r1, r2
 800500e:	0018      	movs	r0, r3
 8005010:	f002 fab2 	bl	8007578 <HAL_GPIO_ReadPin>
 8005014:	1e03      	subs	r3, r0, #0
 8005016:	d009      	beq.n	800502c <main+0x8b0>
				  {
					  game.dailyGoal -= 1000;
 8005018:	4a5c      	ldr	r2, [pc, #368]	@ (800518c <main+0xa10>)
 800501a:	2394      	movs	r3, #148	@ 0x94
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	58d3      	ldr	r3, [r2, r3]
 8005020:	4a62      	ldr	r2, [pc, #392]	@ (80051ac <main+0xa30>)
 8005022:	1899      	adds	r1, r3, r2
 8005024:	4a59      	ldr	r2, [pc, #356]	@ (800518c <main+0xa10>)
 8005026:	2394      	movs	r3, #148	@ 0x94
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	50d1      	str	r1, [r2, r3]
				  }

				  if(game.dailyGoal>=999000)
 800502c:	4a57      	ldr	r2, [pc, #348]	@ (800518c <main+0xa10>)
 800502e:	2394      	movs	r3, #148	@ 0x94
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	58d3      	ldr	r3, [r2, r3]
 8005034:	4a5e      	ldr	r2, [pc, #376]	@ (80051b0 <main+0xa34>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d905      	bls.n	8005046 <main+0x8ca>
				  {
					  game.dailyGoal = 0;
 800503a:	4a54      	ldr	r2, [pc, #336]	@ (800518c <main+0xa10>)
 800503c:	2394      	movs	r3, #148	@ 0x94
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	2100      	movs	r1, #0
 8005042:	50d1      	str	r1, [r2, r3]
 8005044:	e00a      	b.n	800505c <main+0x8e0>
				  }
				  else if (game.dailyGoal<=0)
 8005046:	4a51      	ldr	r2, [pc, #324]	@ (800518c <main+0xa10>)
 8005048:	2394      	movs	r3, #148	@ 0x94
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	58d3      	ldr	r3, [r2, r3]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <main+0x8e0>
				  {
					  game.dailyGoal=999000;
 8005052:	4a4e      	ldr	r2, [pc, #312]	@ (800518c <main+0xa10>)
 8005054:	2394      	movs	r3, #148	@ 0x94
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4956      	ldr	r1, [pc, #344]	@ (80051b4 <main+0xa38>)
 800505a:	50d1      	str	r1, [r2, r3]
				  }
				  sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 800505c:	4a4b      	ldr	r2, [pc, #300]	@ (800518c <main+0xa10>)
 800505e:	2394      	movs	r3, #148	@ 0x94
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	58d2      	ldr	r2, [r2, r3]
 8005064:	4954      	ldr	r1, [pc, #336]	@ (80051b8 <main+0xa3c>)
 8005066:	4b4b      	ldr	r3, [pc, #300]	@ (8005194 <main+0xa18>)
 8005068:	0018      	movs	r0, r3
 800506a:	f007 f9f7 	bl	800c45c <siprintf>
 800506e:	e05a      	b.n	8005126 <main+0x9aa>

			  }
			  else{
			  //Difficulty
			  if(currentSetting==0)
 8005070:	4b52      	ldr	r3, [pc, #328]	@ (80051bc <main+0xa40>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <main+0x91e>
			  {
				  //Try to underline the option being selected
				  drawLine(0,125,20,125,WHITE);
 8005078:	4b49      	ldr	r3, [pc, #292]	@ (80051a0 <main+0xa24>)
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	237d      	movs	r3, #125	@ 0x7d
 800507e:	2214      	movs	r2, #20
 8005080:	217d      	movs	r1, #125	@ 0x7d
 8005082:	2000      	movs	r0, #0
 8005084:	f7fe fd8f 	bl	8003ba6 <drawLine>
				  //Then erase the highlight under the other option not being selected
				  drawLine(0,105,20,105,BLACK);
 8005088:	2300      	movs	r3, #0
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	2369      	movs	r3, #105	@ 0x69
 800508e:	2214      	movs	r2, #20
 8005090:	2169      	movs	r1, #105	@ 0x69
 8005092:	2000      	movs	r0, #0
 8005094:	f7fe fd87 	bl	8003ba6 <drawLine>
 8005098:	e013      	b.n	80050c2 <main+0x946>
			  }
			  //Upload
			  else if(currentSetting==1)
 800509a:	4b48      	ldr	r3, [pc, #288]	@ (80051bc <main+0xa40>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10f      	bne.n	80050c2 <main+0x946>
			  {
				  drawLine(0,105,20,105,WHITE);
 80050a2:	4b3f      	ldr	r3, [pc, #252]	@ (80051a0 <main+0xa24>)
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2369      	movs	r3, #105	@ 0x69
 80050a8:	2214      	movs	r2, #20
 80050aa:	2169      	movs	r1, #105	@ 0x69
 80050ac:	2000      	movs	r0, #0
 80050ae:	f7fe fd7a 	bl	8003ba6 <drawLine>
				  drawLine(0,125,20,125,BLACK);
 80050b2:	2300      	movs	r3, #0
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	237d      	movs	r3, #125	@ 0x7d
 80050b8:	2214      	movs	r2, #20
 80050ba:	217d      	movs	r1, #125	@ 0x7d
 80050bc:	2000      	movs	r0, #0
 80050be:	f7fe fd72 	bl	8003ba6 <drawLine>
			  }
			  //IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 80050c2:	4b39      	ldr	r3, [pc, #228]	@ (80051a8 <main+0xa2c>)
 80050c4:	2104      	movs	r1, #4
 80050c6:	0018      	movs	r0, r3
 80050c8:	f002 fa56 	bl	8007578 <HAL_GPIO_ReadPin>
 80050cc:	0003      	movs	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10c      	bne.n	80050ec <main+0x970>
			  {
				  ++currentSetting;
 80050d2:	4b3a      	ldr	r3, [pc, #232]	@ (80051bc <main+0xa40>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	4b38      	ldr	r3, [pc, #224]	@ (80051bc <main+0xa40>)
 80050da:	601a      	str	r2, [r3, #0]
				  if(currentSetting>1)
 80050dc:	4b37      	ldr	r3, [pc, #220]	@ (80051bc <main+0xa40>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d920      	bls.n	8005126 <main+0x9aa>
					  currentSetting=0;
 80050e4:	4b35      	ldr	r3, [pc, #212]	@ (80051bc <main+0xa40>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e01c      	b.n	8005126 <main+0x9aa>
			  }
			  //PD6=Center button
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==0)
 80050ec:	4b2d      	ldr	r3, [pc, #180]	@ (80051a4 <main+0xa28>)
 80050ee:	2102      	movs	r1, #2
 80050f0:	0018      	movs	r0, r3
 80050f2:	f002 fa41 	bl	8007578 <HAL_GPIO_ReadPin>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d007      	beq.n	800510a <main+0x98e>
 80050fa:	4b30      	ldr	r3, [pc, #192]	@ (80051bc <main+0xa40>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <main+0x98e>
			  {
				  editDifficulty=1;
 8005102:	4b26      	ldr	r3, [pc, #152]	@ (800519c <main+0xa20>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e00d      	b.n	8005126 <main+0x9aa>
			  }
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==1)
 800510a:	4b26      	ldr	r3, [pc, #152]	@ (80051a4 <main+0xa28>)
 800510c:	2102      	movs	r1, #2
 800510e:	0018      	movs	r0, r3
 8005110:	f002 fa32 	bl	8007578 <HAL_GPIO_ReadPin>
 8005114:	1e03      	subs	r3, r0, #0
 8005116:	d006      	beq.n	8005126 <main+0x9aa>
 8005118:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <main+0xa40>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d102      	bne.n	8005126 <main+0x9aa>
			  {
				  userUpload=1;
 8005120:	4b27      	ldr	r3, [pc, #156]	@ (80051c0 <main+0xa44>)
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
			  }
		  }
		  }

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET && !editDifficulty) {
 8005126:	2380      	movs	r3, #128	@ 0x80
 8005128:	011a      	lsls	r2, r3, #4
 800512a:	23a0      	movs	r3, #160	@ 0xa0
 800512c:	05db      	lsls	r3, r3, #23
 800512e:	0011      	movs	r1, r2
 8005130:	0018      	movs	r0, r3
 8005132:	f002 fa21 	bl	8007578 <HAL_GPIO_ReadPin>
 8005136:	0003      	movs	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d115      	bne.n	8005168 <main+0x9ec>
 800513c:	4b17      	ldr	r3, [pc, #92]	@ (800519c <main+0xa20>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <main+0x9ec>
			  effect = MenuBeep;
 8005144:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <main+0xa48>)
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 800514a:	4b1e      	ldr	r3, [pc, #120]	@ (80051c4 <main+0xa48>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	0018      	movs	r0, r3
 8005150:	f000 fbc4 	bl	80058dc <PlayEffect>

			  currentMenu = Main;
 8005154:	4b1c      	ldr	r3, [pc, #112]	@ (80051c8 <main+0xa4c>)
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 800515a:	4b1c      	ldr	r3, [pc, #112]	@ (80051cc <main+0xa50>)
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8005160:	2000      	movs	r0, #0
 8005162:	f7fe fef5 	bl	8003f50 <fillScreen>
		  }
		  else
			  canChange = 1;
		  break;
 8005166:	e004      	b.n	8005172 <main+0x9f6>
			  canChange = 1;
 8005168:	4b18      	ldr	r3, [pc, #96]	@ (80051cc <main+0xa50>)
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
		  break;
 800516e:	e000      	b.n	8005172 <main+0x9f6>
		  break;
 8005170:	46c0      	nop			@ (mov r8, r8)
		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);

		  break;*/

	  }
	  totalFrames++;
 8005172:	4b17      	ldr	r3, [pc, #92]	@ (80051d0 <main+0xa54>)
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	3301      	adds	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <main+0xa54>)
 800517c:	801a      	strh	r2, [r3, #0]
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 800517e:	f7ff fba7 	bl	80048d0 <main+0x154>
 8005182:	46c0      	nop			@ (mov r8, r8)
 8005184:	20000c80 	.word	0x20000c80
 8005188:	0800d070 	.word	0x0800d070
 800518c:	20000a54 	.word	0x20000a54
 8005190:	0800d07c 	.word	0x0800d07c
 8005194:	20000cbc 	.word	0x20000cbc
 8005198:	0800d088 	.word	0x0800d088
 800519c:	20000d28 	.word	0x20000d28
 80051a0:	0000ffff 	.word	0x0000ffff
 80051a4:	50000800 	.word	0x50000800
 80051a8:	50000400 	.word	0x50000400
 80051ac:	fffffc18 	.word	0xfffffc18
 80051b0:	000f3e57 	.word	0x000f3e57
 80051b4:	000f3e58 	.word	0x000f3e58
 80051b8:	0800d094 	.word	0x0800d094
 80051bc:	20000d24 	.word	0x20000d24
 80051c0:	20000d2c 	.word	0x20000d2c
 80051c4:	20000a50 	.word	0x20000a50
 80051c8:	200009c4 	.word	0x200009c4
 80051cc:	200009c5 	.word	0x200009c5
 80051d0:	20000bfc 	.word	0x20000bfc

080051d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051d4:	b590      	push	{r4, r7, lr}
 80051d6:	b095      	sub	sp, #84	@ 0x54
 80051d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051da:	2414      	movs	r4, #20
 80051dc:	193b      	adds	r3, r7, r4
 80051de:	0018      	movs	r0, r3
 80051e0:	233c      	movs	r3, #60	@ 0x3c
 80051e2:	001a      	movs	r2, r3
 80051e4:	2100      	movs	r1, #0
 80051e6:	f007 f95b 	bl	800c4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	0018      	movs	r0, r3
 80051ee:	2310      	movs	r3, #16
 80051f0:	001a      	movs	r2, r3
 80051f2:	2100      	movs	r1, #0
 80051f4:	f007 f954 	bl	800c4a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	0018      	movs	r0, r3
 80051fe:	f003 f86d 	bl	80082dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005202:	193b      	adds	r3, r7, r4
 8005204:	220a      	movs	r2, #10
 8005206:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005208:	193b      	adds	r3, r7, r4
 800520a:	2280      	movs	r2, #128	@ 0x80
 800520c:	0052      	lsls	r2, r2, #1
 800520e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005210:	0021      	movs	r1, r4
 8005212:	187b      	adds	r3, r7, r1
 8005214:	2200      	movs	r2, #0
 8005216:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005218:	187b      	adds	r3, r7, r1
 800521a:	2240      	movs	r2, #64	@ 0x40
 800521c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800521e:	187b      	adds	r3, r7, r1
 8005220:	2201      	movs	r2, #1
 8005222:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005224:	187b      	adds	r3, r7, r1
 8005226:	2202      	movs	r2, #2
 8005228:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800522a:	187b      	adds	r3, r7, r1
 800522c:	2202      	movs	r2, #2
 800522e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005230:	187b      	adds	r3, r7, r1
 8005232:	2200      	movs	r2, #0
 8005234:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005236:	187b      	adds	r3, r7, r1
 8005238:	2208      	movs	r2, #8
 800523a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800523c:	187b      	adds	r3, r7, r1
 800523e:	2280      	movs	r2, #128	@ 0x80
 8005240:	0292      	lsls	r2, r2, #10
 8005242:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005244:	187b      	adds	r3, r7, r1
 8005246:	2280      	movs	r2, #128	@ 0x80
 8005248:	0492      	lsls	r2, r2, #18
 800524a:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800524c:	187b      	adds	r3, r7, r1
 800524e:	2280      	movs	r2, #128	@ 0x80
 8005250:	0592      	lsls	r2, r2, #22
 8005252:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005254:	187b      	adds	r3, r7, r1
 8005256:	0018      	movs	r0, r3
 8005258:	f003 f88c 	bl	8008374 <HAL_RCC_OscConfig>
 800525c:	1e03      	subs	r3, r0, #0
 800525e:	d001      	beq.n	8005264 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005260:	f000 ff40 	bl	80060e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	2207      	movs	r2, #7
 8005268:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800526a:	1d3b      	adds	r3, r7, #4
 800526c:	2202      	movs	r2, #2
 800526e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005270:	1d3b      	adds	r3, r7, #4
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	2200      	movs	r2, #0
 800527a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	2102      	movs	r1, #2
 8005280:	0018      	movs	r0, r3
 8005282:	f003 fbd7 	bl	8008a34 <HAL_RCC_ClockConfig>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d001      	beq.n	800528e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800528a:	f000 ff2b 	bl	80060e4 <Error_Handler>
  }
}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	46bd      	mov	sp, r7
 8005292:	b015      	add	sp, #84	@ 0x54
 8005294:	bd90      	pop	{r4, r7, pc}
	...

08005298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800529c:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <MX_I2C1_Init+0x74>)
 800529e:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <MX_I2C1_Init+0x78>)
 80052a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80052a2:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <MX_I2C1_Init+0x74>)
 80052a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005314 <MX_I2C1_Init+0x7c>)
 80052a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80052a8:	4b18      	ldr	r3, [pc, #96]	@ (800530c <MX_I2C1_Init+0x74>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052ae:	4b17      	ldr	r3, [pc, #92]	@ (800530c <MX_I2C1_Init+0x74>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052b4:	4b15      	ldr	r3, [pc, #84]	@ (800530c <MX_I2C1_Init+0x74>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80052ba:	4b14      	ldr	r3, [pc, #80]	@ (800530c <MX_I2C1_Init+0x74>)
 80052bc:	2200      	movs	r2, #0
 80052be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052c0:	4b12      	ldr	r3, [pc, #72]	@ (800530c <MX_I2C1_Init+0x74>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052c6:	4b11      	ldr	r3, [pc, #68]	@ (800530c <MX_I2C1_Init+0x74>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052cc:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <MX_I2C1_Init+0x74>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052d2:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <MX_I2C1_Init+0x74>)
 80052d4:	0018      	movs	r0, r3
 80052d6:	f002 f9bd 	bl	8007654 <HAL_I2C_Init>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d001      	beq.n	80052e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80052de:	f000 ff01 	bl	80060e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052e2:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <MX_I2C1_Init+0x74>)
 80052e4:	2100      	movs	r1, #0
 80052e6:	0018      	movs	r0, r3
 80052e8:	f002 ff60 	bl	80081ac <HAL_I2CEx_ConfigAnalogFilter>
 80052ec:	1e03      	subs	r3, r0, #0
 80052ee:	d001      	beq.n	80052f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80052f0:	f000 fef8 	bl	80060e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <MX_I2C1_Init+0x74>)
 80052f6:	2100      	movs	r1, #0
 80052f8:	0018      	movs	r0, r3
 80052fa:	f002 ffa3 	bl	8008244 <HAL_I2CEx_ConfigDigitalFilter>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d001      	beq.n	8005306 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005302:	f000 feef 	bl	80060e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000d30 	.word	0x20000d30
 8005310:	40005400 	.word	0x40005400
 8005314:	10b17db5 	.word	0x10b17db5

08005318 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b090      	sub	sp, #64	@ 0x40
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800531e:	232c      	movs	r3, #44	@ 0x2c
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	0018      	movs	r0, r3
 8005324:	2314      	movs	r3, #20
 8005326:	001a      	movs	r2, r3
 8005328:	2100      	movs	r1, #0
 800532a:	f007 f8b9 	bl	800c4a0 <memset>
  RTC_DateTypeDef sDate = {0};
 800532e:	2328      	movs	r3, #40	@ 0x28
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8005336:	003b      	movs	r3, r7
 8005338:	0018      	movs	r0, r3
 800533a:	2328      	movs	r3, #40	@ 0x28
 800533c:	001a      	movs	r2, r3
 800533e:	2100      	movs	r1, #0
 8005340:	f007 f8ae 	bl	800c4a0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005344:	4b49      	ldr	r3, [pc, #292]	@ (800546c <MX_RTC_Init+0x154>)
 8005346:	4a4a      	ldr	r2, [pc, #296]	@ (8005470 <MX_RTC_Init+0x158>)
 8005348:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800534a:	4b48      	ldr	r3, [pc, #288]	@ (800546c <MX_RTC_Init+0x154>)
 800534c:	2200      	movs	r2, #0
 800534e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8005350:	4b46      	ldr	r3, [pc, #280]	@ (800546c <MX_RTC_Init+0x154>)
 8005352:	227f      	movs	r2, #127	@ 0x7f
 8005354:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8005356:	4b45      	ldr	r3, [pc, #276]	@ (800546c <MX_RTC_Init+0x154>)
 8005358:	22ff      	movs	r2, #255	@ 0xff
 800535a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800535c:	4b43      	ldr	r3, [pc, #268]	@ (800546c <MX_RTC_Init+0x154>)
 800535e:	2200      	movs	r2, #0
 8005360:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005362:	4b42      	ldr	r3, [pc, #264]	@ (800546c <MX_RTC_Init+0x154>)
 8005364:	2200      	movs	r2, #0
 8005366:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005368:	4b40      	ldr	r3, [pc, #256]	@ (800546c <MX_RTC_Init+0x154>)
 800536a:	2200      	movs	r2, #0
 800536c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800536e:	4b3f      	ldr	r3, [pc, #252]	@ (800546c <MX_RTC_Init+0x154>)
 8005370:	2280      	movs	r2, #128	@ 0x80
 8005372:	05d2      	lsls	r2, r2, #23
 8005374:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005376:	4b3d      	ldr	r3, [pc, #244]	@ (800546c <MX_RTC_Init+0x154>)
 8005378:	2200      	movs	r2, #0
 800537a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800537c:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <MX_RTC_Init+0x154>)
 800537e:	0018      	movs	r0, r3
 8005380:	f003 ff3e 	bl	8009200 <HAL_RTC_Init>
 8005384:	1e03      	subs	r3, r0, #0
 8005386:	d001      	beq.n	800538c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8005388:	f000 feac 	bl	80060e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800538c:	212c      	movs	r1, #44	@ 0x2c
 800538e:	187b      	adds	r3, r7, r1
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8005394:	187b      	adds	r3, r7, r1
 8005396:	2200      	movs	r2, #0
 8005398:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800539a:	187b      	adds	r3, r7, r1
 800539c:	2200      	movs	r2, #0
 800539e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80053a0:	187b      	adds	r3, r7, r1
 80053a2:	2200      	movs	r2, #0
 80053a4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	2200      	movs	r2, #0
 80053aa:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80053ac:	187b      	adds	r3, r7, r1
 80053ae:	2200      	movs	r2, #0
 80053b0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80053b2:	1879      	adds	r1, r7, r1
 80053b4:	4b2d      	ldr	r3, [pc, #180]	@ (800546c <MX_RTC_Init+0x154>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	0018      	movs	r0, r3
 80053ba:	f003 ffc3 	bl	8009344 <HAL_RTC_SetTime>
 80053be:	1e03      	subs	r3, r0, #0
 80053c0:	d001      	beq.n	80053c6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80053c2:	f000 fe8f 	bl	80060e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80053c6:	2128      	movs	r1, #40	@ 0x28
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	2201      	movs	r2, #1
 80053d2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	2201      	movs	r2, #1
 80053d8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	2200      	movs	r2, #0
 80053de:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80053e0:	1879      	adds	r1, r7, r1
 80053e2:	4b22      	ldr	r3, [pc, #136]	@ (800546c <MX_RTC_Init+0x154>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	0018      	movs	r0, r3
 80053e8:	f004 f854 	bl	8009494 <HAL_RTC_SetDate>
 80053ec:	1e03      	subs	r3, r0, #0
 80053ee:	d001      	beq.n	80053f4 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80053f0:	f000 fe78 	bl	80060e4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80053f4:	003b      	movs	r3, r7
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80053fa:	003b      	movs	r3, r7
 80053fc:	2200      	movs	r2, #0
 80053fe:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8005400:	003b      	movs	r3, r7
 8005402:	2201      	movs	r2, #1
 8005404:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8005406:	003b      	movs	r3, r7
 8005408:	2200      	movs	r2, #0
 800540a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800540c:	003b      	movs	r3, r7
 800540e:	2200      	movs	r2, #0
 8005410:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005412:	003b      	movs	r3, r7
 8005414:	2200      	movs	r2, #0
 8005416:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005418:	003b      	movs	r3, r7
 800541a:	2200      	movs	r2, #0
 800541c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800541e:	003b      	movs	r3, r7
 8005420:	2200      	movs	r2, #0
 8005422:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005424:	003b      	movs	r3, r7
 8005426:	2200      	movs	r2, #0
 8005428:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800542a:	003b      	movs	r3, r7
 800542c:	2220      	movs	r2, #32
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8005432:	003b      	movs	r3, r7
 8005434:	2280      	movs	r2, #128	@ 0x80
 8005436:	0052      	lsls	r2, r2, #1
 8005438:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800543a:	0039      	movs	r1, r7
 800543c:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <MX_RTC_Init+0x154>)
 800543e:	2201      	movs	r2, #1
 8005440:	0018      	movs	r0, r3
 8005442:	f004 f8b9 	bl	80095b8 <HAL_RTC_SetAlarm_IT>
 8005446:	1e03      	subs	r3, r0, #0
 8005448:	d001      	beq.n	800544e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800544a:	f000 fe4b 	bl	80060e4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800544e:	4909      	ldr	r1, [pc, #36]	@ (8005474 <MX_RTC_Init+0x15c>)
 8005450:	4b06      	ldr	r3, [pc, #24]	@ (800546c <MX_RTC_Init+0x154>)
 8005452:	2200      	movs	r2, #0
 8005454:	0018      	movs	r0, r3
 8005456:	f004 fbe5 	bl	8009c24 <HAL_RTCEx_SetWakeUpTimer_IT>
 800545a:	1e03      	subs	r3, r0, #0
 800545c:	d001      	beq.n	8005462 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 800545e:	f000 fe41 	bl	80060e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b010      	add	sp, #64	@ 0x40
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	20000d84 	.word	0x20000d84
 8005470:	40002800 	.word	0x40002800
 8005474:	0000500b 	.word	0x0000500b

08005478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800547c:	4b1c      	ldr	r3, [pc, #112]	@ (80054f0 <MX_SPI1_Init+0x78>)
 800547e:	4a1d      	ldr	r2, [pc, #116]	@ (80054f4 <MX_SPI1_Init+0x7c>)
 8005480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005482:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <MX_SPI1_Init+0x78>)
 8005484:	2282      	movs	r2, #130	@ 0x82
 8005486:	0052      	lsls	r2, r2, #1
 8005488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800548a:	4b19      	ldr	r3, [pc, #100]	@ (80054f0 <MX_SPI1_Init+0x78>)
 800548c:	2280      	movs	r2, #128	@ 0x80
 800548e:	0212      	lsls	r2, r2, #8
 8005490:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005492:	4b17      	ldr	r3, [pc, #92]	@ (80054f0 <MX_SPI1_Init+0x78>)
 8005494:	22e0      	movs	r2, #224	@ 0xe0
 8005496:	00d2      	lsls	r2, r2, #3
 8005498:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800549a:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <MX_SPI1_Init+0x78>)
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80054a0:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80054a6:	4b12      	ldr	r3, [pc, #72]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054a8:	2280      	movs	r2, #128	@ 0x80
 80054aa:	0092      	lsls	r2, r2, #2
 80054ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80054ae:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054b0:	2220      	movs	r2, #32
 80054b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80054b4:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054bc:	2200      	movs	r2, #0
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80054c6:	4b0a      	ldr	r3, [pc, #40]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054c8:	2207      	movs	r2, #7
 80054ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80054cc:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054d4:	2208      	movs	r2, #8
 80054d6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80054d8:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <MX_SPI1_Init+0x78>)
 80054da:	0018      	movs	r0, r3
 80054dc:	f004 fc6a 	bl	8009db4 <HAL_SPI_Init>
 80054e0:	1e03      	subs	r3, r0, #0
 80054e2:	d001      	beq.n	80054e8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80054e4:	f000 fdfe 	bl	80060e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80054e8:	46c0      	nop			@ (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	46c0      	nop			@ (mov r8, r8)
 80054f0:	20000db0 	.word	0x20000db0
 80054f4:	40013000 	.word	0x40013000

080054f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b094      	sub	sp, #80	@ 0x50
 80054fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80054fe:	2334      	movs	r3, #52	@ 0x34
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	0018      	movs	r0, r3
 8005504:	231c      	movs	r3, #28
 8005506:	001a      	movs	r2, r3
 8005508:	2100      	movs	r1, #0
 800550a:	f006 ffc9 	bl	800c4a0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800550e:	003b      	movs	r3, r7
 8005510:	0018      	movs	r0, r3
 8005512:	2334      	movs	r3, #52	@ 0x34
 8005514:	001a      	movs	r2, r3
 8005516:	2100      	movs	r1, #0
 8005518:	f006 ffc2 	bl	800c4a0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800551c:	4b37      	ldr	r3, [pc, #220]	@ (80055fc <MX_TIM17_Init+0x104>)
 800551e:	4a38      	ldr	r2, [pc, #224]	@ (8005600 <MX_TIM17_Init+0x108>)
 8005520:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8005522:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <MX_TIM17_Init+0x104>)
 8005524:	2200      	movs	r2, #0
 8005526:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005528:	4b34      	ldr	r3, [pc, #208]	@ (80055fc <MX_TIM17_Init+0x104>)
 800552a:	2200      	movs	r2, #0
 800552c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800552e:	4b33      	ldr	r3, [pc, #204]	@ (80055fc <MX_TIM17_Init+0x104>)
 8005530:	4a34      	ldr	r2, [pc, #208]	@ (8005604 <MX_TIM17_Init+0x10c>)
 8005532:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005534:	4b31      	ldr	r3, [pc, #196]	@ (80055fc <MX_TIM17_Init+0x104>)
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800553a:	4b30      	ldr	r3, [pc, #192]	@ (80055fc <MX_TIM17_Init+0x104>)
 800553c:	2200      	movs	r2, #0
 800553e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005540:	4b2e      	ldr	r3, [pc, #184]	@ (80055fc <MX_TIM17_Init+0x104>)
 8005542:	2200      	movs	r2, #0
 8005544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005546:	4b2d      	ldr	r3, [pc, #180]	@ (80055fc <MX_TIM17_Init+0x104>)
 8005548:	0018      	movs	r0, r3
 800554a:	f004 ffc1 	bl	800a4d0 <HAL_TIM_Base_Init>
 800554e:	1e03      	subs	r3, r0, #0
 8005550:	d001      	beq.n	8005556 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8005552:	f000 fdc7 	bl	80060e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8005556:	4b29      	ldr	r3, [pc, #164]	@ (80055fc <MX_TIM17_Init+0x104>)
 8005558:	0018      	movs	r0, r3
 800555a:	f005 f811 	bl	800a580 <HAL_TIM_PWM_Init>
 800555e:	1e03      	subs	r3, r0, #0
 8005560:	d001      	beq.n	8005566 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8005562:	f000 fdbf 	bl	80060e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005566:	2134      	movs	r1, #52	@ 0x34
 8005568:	187b      	adds	r3, r7, r1
 800556a:	2260      	movs	r2, #96	@ 0x60
 800556c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800556e:	187b      	adds	r3, r7, r1
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005574:	187b      	adds	r3, r7, r1
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800557a:	187b      	adds	r3, r7, r1
 800557c:	2200      	movs	r2, #0
 800557e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005580:	187b      	adds	r3, r7, r1
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005586:	187b      	adds	r3, r7, r1
 8005588:	2200      	movs	r2, #0
 800558a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800558c:	187b      	adds	r3, r7, r1
 800558e:	2200      	movs	r2, #0
 8005590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005592:	1879      	adds	r1, r7, r1
 8005594:	4b19      	ldr	r3, [pc, #100]	@ (80055fc <MX_TIM17_Init+0x104>)
 8005596:	2200      	movs	r2, #0
 8005598:	0018      	movs	r0, r3
 800559a:	f005 f9cd 	bl	800a938 <HAL_TIM_PWM_ConfigChannel>
 800559e:	1e03      	subs	r3, r0, #0
 80055a0:	d001      	beq.n	80055a6 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80055a2:	f000 fd9f 	bl	80060e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80055a6:	003b      	movs	r3, r7
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80055ac:	003b      	movs	r3, r7
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80055b2:	003b      	movs	r3, r7
 80055b4:	2200      	movs	r2, #0
 80055b6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80055b8:	003b      	movs	r3, r7
 80055ba:	2200      	movs	r2, #0
 80055bc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80055be:	003b      	movs	r3, r7
 80055c0:	2200      	movs	r2, #0
 80055c2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80055c4:	003b      	movs	r3, r7
 80055c6:	2280      	movs	r2, #128	@ 0x80
 80055c8:	0192      	lsls	r2, r2, #6
 80055ca:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80055cc:	003b      	movs	r3, r7
 80055ce:	2200      	movs	r2, #0
 80055d0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80055d2:	003b      	movs	r3, r7
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80055d8:	003a      	movs	r2, r7
 80055da:	4b08      	ldr	r3, [pc, #32]	@ (80055fc <MX_TIM17_Init+0x104>)
 80055dc:	0011      	movs	r1, r2
 80055de:	0018      	movs	r0, r3
 80055e0:	f005 fe2a 	bl	800b238 <HAL_TIMEx_ConfigBreakDeadTime>
 80055e4:	1e03      	subs	r3, r0, #0
 80055e6:	d001      	beq.n	80055ec <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80055e8:	f000 fd7c 	bl	80060e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80055ec:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <MX_TIM17_Init+0x104>)
 80055ee:	0018      	movs	r0, r3
 80055f0:	f001 fb28 	bl	8006c44 <HAL_TIM_MspPostInit>

}
 80055f4:	46c0      	nop			@ (mov r8, r8)
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b014      	add	sp, #80	@ 0x50
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000e14 	.word	0x20000e14
 8005600:	40014800 	.word	0x40014800
 8005604:	0000ffff 	.word	0x0000ffff

08005608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800560c:	4b23      	ldr	r3, [pc, #140]	@ (800569c <MX_USART1_UART_Init+0x94>)
 800560e:	4a24      	ldr	r2, [pc, #144]	@ (80056a0 <MX_USART1_UART_Init+0x98>)
 8005610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005612:	4b22      	ldr	r3, [pc, #136]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005614:	2296      	movs	r2, #150	@ 0x96
 8005616:	0192      	lsls	r2, r2, #6
 8005618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800561a:	4b20      	ldr	r3, [pc, #128]	@ (800569c <MX_USART1_UART_Init+0x94>)
 800561c:	2200      	movs	r2, #0
 800561e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005620:	4b1e      	ldr	r3, [pc, #120]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005622:	2200      	movs	r2, #0
 8005624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005626:	4b1d      	ldr	r3, [pc, #116]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800562c:	4b1b      	ldr	r3, [pc, #108]	@ (800569c <MX_USART1_UART_Init+0x94>)
 800562e:	220c      	movs	r2, #12
 8005630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005632:	4b1a      	ldr	r3, [pc, #104]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005638:	4b18      	ldr	r3, [pc, #96]	@ (800569c <MX_USART1_UART_Init+0x94>)
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800563e:	4b17      	ldr	r3, [pc, #92]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005640:	2200      	movs	r2, #0
 8005642:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005644:	4b15      	ldr	r3, [pc, #84]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005646:	2200      	movs	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800564a:	4b14      	ldr	r3, [pc, #80]	@ (800569c <MX_USART1_UART_Init+0x94>)
 800564c:	2200      	movs	r2, #0
 800564e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005650:	4b12      	ldr	r3, [pc, #72]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005652:	0018      	movs	r0, r3
 8005654:	f005 fe8c 	bl	800b370 <HAL_UART_Init>
 8005658:	1e03      	subs	r3, r0, #0
 800565a:	d001      	beq.n	8005660 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800565c:	f000 fd42 	bl	80060e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005660:	4b0e      	ldr	r3, [pc, #56]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005662:	2100      	movs	r1, #0
 8005664:	0018      	movs	r0, r3
 8005666:	f006 fd83 	bl	800c170 <HAL_UARTEx_SetTxFifoThreshold>
 800566a:	1e03      	subs	r3, r0, #0
 800566c:	d001      	beq.n	8005672 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800566e:	f000 fd39 	bl	80060e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005672:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005674:	2100      	movs	r1, #0
 8005676:	0018      	movs	r0, r3
 8005678:	f006 fdba 	bl	800c1f0 <HAL_UARTEx_SetRxFifoThreshold>
 800567c:	1e03      	subs	r3, r0, #0
 800567e:	d001      	beq.n	8005684 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005680:	f000 fd30 	bl	80060e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <MX_USART1_UART_Init+0x94>)
 8005686:	0018      	movs	r0, r3
 8005688:	f006 fd38 	bl	800c0fc <HAL_UARTEx_DisableFifoMode>
 800568c:	1e03      	subs	r3, r0, #0
 800568e:	d001      	beq.n	8005694 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005690:	f000 fd28 	bl	80060e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005694:	46c0      	nop			@ (mov r8, r8)
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	20000e60 	.word	0x20000e60
 80056a0:	40013800 	.word	0x40013800

080056a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80056a8:	4b23      	ldr	r3, [pc, #140]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056aa:	4a24      	ldr	r2, [pc, #144]	@ (800573c <MX_USART2_UART_Init+0x98>)
 80056ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80056ae:	4b22      	ldr	r3, [pc, #136]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056b0:	22e1      	movs	r2, #225	@ 0xe1
 80056b2:	0252      	lsls	r2, r2, #9
 80056b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056b6:	4b20      	ldr	r3, [pc, #128]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80056bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056be:	2200      	movs	r2, #0
 80056c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80056c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80056c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056ca:	220c      	movs	r2, #12
 80056cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056d4:	4b18      	ldr	r3, [pc, #96]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80056da:	4b17      	ldr	r3, [pc, #92]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056dc:	2200      	movs	r2, #0
 80056de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80056e0:	4b15      	ldr	r3, [pc, #84]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056e6:	4b14      	ldr	r3, [pc, #80]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80056ec:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056ee:	0018      	movs	r0, r3
 80056f0:	f005 fe3e 	bl	800b370 <HAL_UART_Init>
 80056f4:	1e03      	subs	r3, r0, #0
 80056f6:	d001      	beq.n	80056fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80056f8:	f000 fcf4 	bl	80060e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80056fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 80056fe:	2100      	movs	r1, #0
 8005700:	0018      	movs	r0, r3
 8005702:	f006 fd35 	bl	800c170 <HAL_UARTEx_SetTxFifoThreshold>
 8005706:	1e03      	subs	r3, r0, #0
 8005708:	d001      	beq.n	800570e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800570a:	f000 fceb 	bl	80060e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800570e:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 8005710:	2100      	movs	r1, #0
 8005712:	0018      	movs	r0, r3
 8005714:	f006 fd6c 	bl	800c1f0 <HAL_UARTEx_SetRxFifoThreshold>
 8005718:	1e03      	subs	r3, r0, #0
 800571a:	d001      	beq.n	8005720 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800571c:	f000 fce2 	bl	80060e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <MX_USART2_UART_Init+0x94>)
 8005722:	0018      	movs	r0, r3
 8005724:	f006 fcea 	bl	800c0fc <HAL_UARTEx_DisableFifoMode>
 8005728:	1e03      	subs	r3, r0, #0
 800572a:	d001      	beq.n	8005730 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800572c:	f000 fcda 	bl	80060e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005730:	46c0      	nop			@ (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	20000ef4 	.word	0x20000ef4
 800573c:	40004400 	.word	0x40004400

08005740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b08b      	sub	sp, #44	@ 0x2c
 8005744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005746:	2414      	movs	r4, #20
 8005748:	193b      	adds	r3, r7, r4
 800574a:	0018      	movs	r0, r3
 800574c:	2314      	movs	r3, #20
 800574e:	001a      	movs	r2, r3
 8005750:	2100      	movs	r1, #0
 8005752:	f006 fea5 	bl	800c4a0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005756:	4b4d      	ldr	r3, [pc, #308]	@ (800588c <MX_GPIO_Init+0x14c>)
 8005758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800575a:	4b4c      	ldr	r3, [pc, #304]	@ (800588c <MX_GPIO_Init+0x14c>)
 800575c:	2104      	movs	r1, #4
 800575e:	430a      	orrs	r2, r1
 8005760:	635a      	str	r2, [r3, #52]	@ 0x34
 8005762:	4b4a      	ldr	r3, [pc, #296]	@ (800588c <MX_GPIO_Init+0x14c>)
 8005764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005766:	2204      	movs	r2, #4
 8005768:	4013      	ands	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800576e:	4b47      	ldr	r3, [pc, #284]	@ (800588c <MX_GPIO_Init+0x14c>)
 8005770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005772:	4b46      	ldr	r3, [pc, #280]	@ (800588c <MX_GPIO_Init+0x14c>)
 8005774:	2101      	movs	r1, #1
 8005776:	430a      	orrs	r2, r1
 8005778:	635a      	str	r2, [r3, #52]	@ 0x34
 800577a:	4b44      	ldr	r3, [pc, #272]	@ (800588c <MX_GPIO_Init+0x14c>)
 800577c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577e:	2201      	movs	r2, #1
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005786:	4b41      	ldr	r3, [pc, #260]	@ (800588c <MX_GPIO_Init+0x14c>)
 8005788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578a:	4b40      	ldr	r3, [pc, #256]	@ (800588c <MX_GPIO_Init+0x14c>)
 800578c:	2102      	movs	r1, #2
 800578e:	430a      	orrs	r2, r1
 8005790:	635a      	str	r2, [r3, #52]	@ 0x34
 8005792:	4b3e      	ldr	r3, [pc, #248]	@ (800588c <MX_GPIO_Init+0x14c>)
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	2202      	movs	r2, #2
 8005798:	4013      	ands	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800579e:	4b3b      	ldr	r3, [pc, #236]	@ (800588c <MX_GPIO_Init+0x14c>)
 80057a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057a2:	4b3a      	ldr	r3, [pc, #232]	@ (800588c <MX_GPIO_Init+0x14c>)
 80057a4:	2108      	movs	r1, #8
 80057a6:	430a      	orrs	r2, r1
 80057a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80057aa:	4b38      	ldr	r3, [pc, #224]	@ (800588c <MX_GPIO_Init+0x14c>)
 80057ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ae:	2208      	movs	r2, #8
 80057b0:	4013      	ands	r3, r2
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 80057b6:	4936      	ldr	r1, [pc, #216]	@ (8005890 <MX_GPIO_Init+0x150>)
 80057b8:	23a0      	movs	r3, #160	@ 0xa0
 80057ba:	05db      	lsls	r3, r3, #23
 80057bc:	2200      	movs	r2, #0
 80057be:	0018      	movs	r0, r3
 80057c0:	f001 fef7 	bl	80075b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80057c4:	193b      	adds	r3, r7, r4
 80057c6:	2202      	movs	r2, #2
 80057c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057ca:	193b      	adds	r3, r7, r4
 80057cc:	2288      	movs	r2, #136	@ 0x88
 80057ce:	0352      	lsls	r2, r2, #13
 80057d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d2:	193b      	adds	r3, r7, r4
 80057d4:	2200      	movs	r2, #0
 80057d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057d8:	193b      	adds	r3, r7, r4
 80057da:	4a2e      	ldr	r2, [pc, #184]	@ (8005894 <MX_GPIO_Init+0x154>)
 80057dc:	0019      	movs	r1, r3
 80057de:	0010      	movs	r0, r2
 80057e0:	f001 fd5e 	bl	80072a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 80057e4:	193b      	adds	r3, r7, r4
 80057e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005890 <MX_GPIO_Init+0x150>)
 80057e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057ea:	193b      	adds	r3, r7, r4
 80057ec:	2201      	movs	r2, #1
 80057ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f0:	193b      	adds	r3, r7, r4
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f6:	193b      	adds	r3, r7, r4
 80057f8:	2200      	movs	r2, #0
 80057fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057fc:	193a      	adds	r2, r7, r4
 80057fe:	23a0      	movs	r3, #160	@ 0xa0
 8005800:	05db      	lsls	r3, r3, #23
 8005802:	0011      	movs	r1, r2
 8005804:	0018      	movs	r0, r3
 8005806:	f001 fd4b 	bl	80072a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800580a:	0021      	movs	r1, r4
 800580c:	187b      	adds	r3, r7, r1
 800580e:	2204      	movs	r2, #4
 8005810:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005812:	187b      	adds	r3, r7, r1
 8005814:	2288      	movs	r2, #136	@ 0x88
 8005816:	0352      	lsls	r2, r2, #13
 8005818:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581a:	187b      	adds	r3, r7, r1
 800581c:	2200      	movs	r2, #0
 800581e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005820:	000c      	movs	r4, r1
 8005822:	187b      	adds	r3, r7, r1
 8005824:	4a1c      	ldr	r2, [pc, #112]	@ (8005898 <MX_GPIO_Init+0x158>)
 8005826:	0019      	movs	r1, r3
 8005828:	0010      	movs	r0, r2
 800582a:	f001 fd39 	bl	80072a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800582e:	0021      	movs	r1, r4
 8005830:	187b      	adds	r3, r7, r1
 8005832:	2280      	movs	r2, #128	@ 0x80
 8005834:	0112      	lsls	r2, r2, #4
 8005836:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005838:	187b      	adds	r3, r7, r1
 800583a:	2288      	movs	r2, #136	@ 0x88
 800583c:	0352      	lsls	r2, r2, #13
 800583e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005840:	187b      	adds	r3, r7, r1
 8005842:	2200      	movs	r2, #0
 8005844:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005846:	187a      	adds	r2, r7, r1
 8005848:	23a0      	movs	r3, #160	@ 0xa0
 800584a:	05db      	lsls	r3, r3, #23
 800584c:	0011      	movs	r1, r2
 800584e:	0018      	movs	r0, r3
 8005850:	f001 fd26 	bl	80072a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005854:	2200      	movs	r2, #0
 8005856:	2100      	movs	r1, #0
 8005858:	2005      	movs	r0, #5
 800585a:	f001 fcef 	bl	800723c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800585e:	2005      	movs	r0, #5
 8005860:	f001 fd01 	bl	8007266 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8005864:	2200      	movs	r2, #0
 8005866:	2100      	movs	r1, #0
 8005868:	2006      	movs	r0, #6
 800586a:	f001 fce7 	bl	800723c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800586e:	2006      	movs	r0, #6
 8005870:	f001 fcf9 	bl	8007266 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005874:	2200      	movs	r2, #0
 8005876:	2100      	movs	r1, #0
 8005878:	2007      	movs	r0, #7
 800587a:	f001 fcdf 	bl	800723c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800587e:	2007      	movs	r0, #7
 8005880:	f001 fcf1 	bl	8007266 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005884:	46c0      	nop			@ (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b00b      	add	sp, #44	@ 0x2c
 800588a:	bd90      	pop	{r4, r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	00008030 	.word	0x00008030
 8005894:	50000800 	.word	0x50000800
 8005898:	50000400 	.word	0x50000400

0800589c <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	0002      	movs	r2, r0
 80058a4:	1dbb      	adds	r3, r7, #6
 80058a6:	801a      	strh	r2, [r3, #0]
    TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 80058a8:	1dbb      	adds	r3, r7, #6
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7fb ff3b 	bl	8001728 <__aeabi_ui2f>
 80058b2:	1c03      	adds	r3, r0, #0
 80058b4:	1c19      	adds	r1, r3, #0
 80058b6:	4807      	ldr	r0, [pc, #28]	@ (80058d4 <ChangeNote+0x38>)
 80058b8:	f7fb f93a 	bl	8000b30 <__aeabi_fdiv>
 80058bc:	1c03      	adds	r3, r0, #0
 80058be:	4c06      	ldr	r4, [pc, #24]	@ (80058d8 <ChangeNote+0x3c>)
 80058c0:	1c18      	adds	r0, r3, #0
 80058c2:	f7fa fe41 	bl	8000548 <__aeabi_f2uiz>
 80058c6:	0003      	movs	r3, r0
 80058c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 80058ca:	46c0      	nop			@ (mov r8, r8)
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b003      	add	sp, #12
 80058d0:	bd90      	pop	{r4, r7, pc}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	4970f780 	.word	0x4970f780
 80058d8:	40014800 	.word	0x40014800

080058dc <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	0002      	movs	r2, r0
 80058e4:	1dfb      	adds	r3, r7, #7
 80058e6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80058e8:	4ba0      	ldr	r3, [pc, #640]	@ (8005b6c <PlayEffect+0x290>)
 80058ea:	2100      	movs	r1, #0
 80058ec:	0018      	movs	r0, r3
 80058ee:	f004 fea7 	bl	800a640 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 80058f2:	2005      	movs	r0, #5
 80058f4:	f001 fbbc 	bl	8007070 <HAL_Delay>
    switch(effect){
 80058f8:	1dfb      	adds	r3, r7, #7
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d900      	bls.n	8005902 <PlayEffect+0x26>
 8005900:	e12a      	b.n	8005b58 <PlayEffect+0x27c>
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	4b9a      	ldr	r3, [pc, #616]	@ (8005b70 <PlayEffect+0x294>)
 8005906:	18d3      	adds	r3, r2, r3
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	469f      	mov	pc, r3
        case MenuBeep:

        	curNote = G*3;
 800590c:	4b99      	ldr	r3, [pc, #612]	@ (8005b74 <PlayEffect+0x298>)
 800590e:	2293      	movs	r2, #147	@ 0x93
 8005910:	0112      	lsls	r2, r2, #4
 8005912:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005914:	4b97      	ldr	r3, [pc, #604]	@ (8005b74 <PlayEffect+0x298>)
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	0018      	movs	r0, r3
 800591a:	f7ff ffbf 	bl	800589c <ChangeNote>
        	HAL_Delay(25);
 800591e:	2019      	movs	r0, #25
 8005920:	f001 fba6 	bl	8007070 <HAL_Delay>

        	curNote = G*2;
 8005924:	4b93      	ldr	r3, [pc, #588]	@ (8005b74 <PlayEffect+0x298>)
 8005926:	22c4      	movs	r2, #196	@ 0xc4
 8005928:	00d2      	lsls	r2, r2, #3
 800592a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800592c:	4b91      	ldr	r3, [pc, #580]	@ (8005b74 <PlayEffect+0x298>)
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	0018      	movs	r0, r3
 8005932:	f7ff ffb3 	bl	800589c <ChangeNote>
        	HAL_Delay(25);
 8005936:	2019      	movs	r0, #25
 8005938:	f001 fb9a 	bl	8007070 <HAL_Delay>

            break;
 800593c:	e10c      	b.n	8005b58 <PlayEffect+0x27c>
        case EggNoise:

        	curNote = A;
 800593e:	4b8d      	ldr	r3, [pc, #564]	@ (8005b74 <PlayEffect+0x298>)
 8005940:	22dc      	movs	r2, #220	@ 0xdc
 8005942:	0052      	lsls	r2, r2, #1
 8005944:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005946:	4b8b      	ldr	r3, [pc, #556]	@ (8005b74 <PlayEffect+0x298>)
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff ffa6 	bl	800589c <ChangeNote>
        	HAL_Delay(20);
 8005950:	2014      	movs	r0, #20
 8005952:	f001 fb8d 	bl	8007070 <HAL_Delay>

        	curNote = C;
 8005956:	4b87      	ldr	r3, [pc, #540]	@ (8005b74 <PlayEffect+0x298>)
 8005958:	4a87      	ldr	r2, [pc, #540]	@ (8005b78 <PlayEffect+0x29c>)
 800595a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800595c:	4b85      	ldr	r3, [pc, #532]	@ (8005b74 <PlayEffect+0x298>)
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	0018      	movs	r0, r3
 8005962:	f7ff ff9b 	bl	800589c <ChangeNote>
        	HAL_Delay(20);
 8005966:	2014      	movs	r0, #20
 8005968:	f001 fb82 	bl	8007070 <HAL_Delay>

        	curNote = A;
 800596c:	4b81      	ldr	r3, [pc, #516]	@ (8005b74 <PlayEffect+0x298>)
 800596e:	22dc      	movs	r2, #220	@ 0xdc
 8005970:	0052      	lsls	r2, r2, #1
 8005972:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005974:	4b7f      	ldr	r3, [pc, #508]	@ (8005b74 <PlayEffect+0x298>)
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	0018      	movs	r0, r3
 800597a:	f7ff ff8f 	bl	800589c <ChangeNote>
        	HAL_Delay(20);
 800597e:	2014      	movs	r0, #20
 8005980:	f001 fb76 	bl	8007070 <HAL_Delay>

        	curNote = C;
 8005984:	4b7b      	ldr	r3, [pc, #492]	@ (8005b74 <PlayEffect+0x298>)
 8005986:	4a7c      	ldr	r2, [pc, #496]	@ (8005b78 <PlayEffect+0x29c>)
 8005988:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800598a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b74 <PlayEffect+0x298>)
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	0018      	movs	r0, r3
 8005990:	f7ff ff84 	bl	800589c <ChangeNote>
        	HAL_Delay(20);
 8005994:	2014      	movs	r0, #20
 8005996:	f001 fb6b 	bl	8007070 <HAL_Delay>

            break;
 800599a:	e0dd      	b.n	8005b58 <PlayEffect+0x27c>
        case YoungNoiseHappy:

        	curNote = F*4;
 800599c:	4b75      	ldr	r3, [pc, #468]	@ (8005b74 <PlayEffect+0x298>)
 800599e:	4a77      	ldr	r2, [pc, #476]	@ (8005b7c <PlayEffect+0x2a0>)
 80059a0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059a2:	4b74      	ldr	r3, [pc, #464]	@ (8005b74 <PlayEffect+0x298>)
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7ff ff78 	bl	800589c <ChangeNote>
        	HAL_Delay(35);
 80059ac:	2023      	movs	r0, #35	@ 0x23
 80059ae:	f001 fb5f 	bl	8007070 <HAL_Delay>

        	curNote = B*4;
 80059b2:	4b70      	ldr	r3, [pc, #448]	@ (8005b74 <PlayEffect+0x298>)
 80059b4:	22f7      	movs	r2, #247	@ 0xf7
 80059b6:	00d2      	lsls	r2, r2, #3
 80059b8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059ba:	4b6e      	ldr	r3, [pc, #440]	@ (8005b74 <PlayEffect+0x298>)
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	0018      	movs	r0, r3
 80059c0:	f7ff ff6c 	bl	800589c <ChangeNote>
        	HAL_Delay(15);
 80059c4:	200f      	movs	r0, #15
 80059c6:	f001 fb53 	bl	8007070 <HAL_Delay>

            break;
 80059ca:	e0c5      	b.n	8005b58 <PlayEffect+0x27c>
        case YoungNoiseSad:

        	curNote = B*4;
 80059cc:	4b69      	ldr	r3, [pc, #420]	@ (8005b74 <PlayEffect+0x298>)
 80059ce:	22f7      	movs	r2, #247	@ 0xf7
 80059d0:	00d2      	lsls	r2, r2, #3
 80059d2:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059d4:	4b67      	ldr	r3, [pc, #412]	@ (8005b74 <PlayEffect+0x298>)
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	0018      	movs	r0, r3
 80059da:	f7ff ff5f 	bl	800589c <ChangeNote>
        	HAL_Delay(35);
 80059de:	2023      	movs	r0, #35	@ 0x23
 80059e0:	f001 fb46 	bl	8007070 <HAL_Delay>

        	curNote = B*3;
 80059e4:	4b63      	ldr	r3, [pc, #396]	@ (8005b74 <PlayEffect+0x298>)
 80059e6:	4a66      	ldr	r2, [pc, #408]	@ (8005b80 <PlayEffect+0x2a4>)
 80059e8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059ea:	4b62      	ldr	r3, [pc, #392]	@ (8005b74 <PlayEffect+0x298>)
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7ff ff54 	bl	800589c <ChangeNote>
        	HAL_Delay(15);
 80059f4:	200f      	movs	r0, #15
 80059f6:	f001 fb3b 	bl	8007070 <HAL_Delay>

            break;
 80059fa:	e0ad      	b.n	8005b58 <PlayEffect+0x27c>
        case AdultNoiseHappy:

        	curNote = F/4;
 80059fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005b74 <PlayEffect+0x298>)
 80059fe:	22ae      	movs	r2, #174	@ 0xae
 8005a00:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a02:	4b5c      	ldr	r3, [pc, #368]	@ (8005b74 <PlayEffect+0x298>)
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	0018      	movs	r0, r3
 8005a08:	f7ff ff48 	bl	800589c <ChangeNote>
        	HAL_Delay(35);
 8005a0c:	2023      	movs	r0, #35	@ 0x23
 8005a0e:	f001 fb2f 	bl	8007070 <HAL_Delay>

        	curNote = B/4;
 8005a12:	4b58      	ldr	r3, [pc, #352]	@ (8005b74 <PlayEffect+0x298>)
 8005a14:	227b      	movs	r2, #123	@ 0x7b
 8005a16:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a18:	4b56      	ldr	r3, [pc, #344]	@ (8005b74 <PlayEffect+0x298>)
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7ff ff3d 	bl	800589c <ChangeNote>
        	HAL_Delay(15);
 8005a22:	200f      	movs	r0, #15
 8005a24:	f001 fb24 	bl	8007070 <HAL_Delay>

            break;
 8005a28:	e096      	b.n	8005b58 <PlayEffect+0x27c>
        case AdultNoiseSad:

        	curNote = C/4;
 8005a2a:	4b52      	ldr	r3, [pc, #328]	@ (8005b74 <PlayEffect+0x298>)
 8005a2c:	2282      	movs	r2, #130	@ 0x82
 8005a2e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a30:	4b50      	ldr	r3, [pc, #320]	@ (8005b74 <PlayEffect+0x298>)
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7ff ff31 	bl	800589c <ChangeNote>
        	HAL_Delay(35);
 8005a3a:	2023      	movs	r0, #35	@ 0x23
 8005a3c:	f001 fb18 	bl	8007070 <HAL_Delay>

        	curNote = A/4;
 8005a40:	4b4c      	ldr	r3, [pc, #304]	@ (8005b74 <PlayEffect+0x298>)
 8005a42:	226e      	movs	r2, #110	@ 0x6e
 8005a44:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a46:	4b4b      	ldr	r3, [pc, #300]	@ (8005b74 <PlayEffect+0x298>)
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f7ff ff26 	bl	800589c <ChangeNote>
        	HAL_Delay(15);
 8005a50:	200f      	movs	r0, #15
 8005a52:	f001 fb0d 	bl	8007070 <HAL_Delay>

        	break;
 8005a56:	e07f      	b.n	8005b58 <PlayEffect+0x27c>
        case Evolution:

        	curNote = A*2;
 8005a58:	4b46      	ldr	r3, [pc, #280]	@ (8005b74 <PlayEffect+0x298>)
 8005a5a:	22dc      	movs	r2, #220	@ 0xdc
 8005a5c:	0092      	lsls	r2, r2, #2
 8005a5e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a60:	4b44      	ldr	r3, [pc, #272]	@ (8005b74 <PlayEffect+0x298>)
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7ff ff19 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005a6a:	2032      	movs	r0, #50	@ 0x32
 8005a6c:	f001 fb00 	bl	8007070 <HAL_Delay>

        	curNote = B*2;
 8005a70:	4b40      	ldr	r3, [pc, #256]	@ (8005b74 <PlayEffect+0x298>)
 8005a72:	22f7      	movs	r2, #247	@ 0xf7
 8005a74:	0092      	lsls	r2, r2, #2
 8005a76:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a78:	4b3e      	ldr	r3, [pc, #248]	@ (8005b74 <PlayEffect+0x298>)
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7ff ff0d 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005a82:	2032      	movs	r0, #50	@ 0x32
 8005a84:	f001 faf4 	bl	8007070 <HAL_Delay>

        	curNote = C*2;
 8005a88:	4b3a      	ldr	r3, [pc, #232]	@ (8005b74 <PlayEffect+0x298>)
 8005a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8005b84 <PlayEffect+0x2a8>)
 8005a8c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a8e:	4b39      	ldr	r3, [pc, #228]	@ (8005b74 <PlayEffect+0x298>)
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7ff ff02 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005a98:	2032      	movs	r0, #50	@ 0x32
 8005a9a:	f001 fae9 	bl	8007070 <HAL_Delay>

        	curNote = A*2;
 8005a9e:	4b35      	ldr	r3, [pc, #212]	@ (8005b74 <PlayEffect+0x298>)
 8005aa0:	22dc      	movs	r2, #220	@ 0xdc
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005aa6:	4b33      	ldr	r3, [pc, #204]	@ (8005b74 <PlayEffect+0x298>)
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f7ff fef6 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005ab0:	2032      	movs	r0, #50	@ 0x32
 8005ab2:	f001 fadd 	bl	8007070 <HAL_Delay>

        	curNote = C*2;
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8005b74 <PlayEffect+0x298>)
 8005ab8:	4a32      	ldr	r2, [pc, #200]	@ (8005b84 <PlayEffect+0x2a8>)
 8005aba:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005abc:	4b2d      	ldr	r3, [pc, #180]	@ (8005b74 <PlayEffect+0x298>)
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7ff feeb 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005ac6:	2032      	movs	r0, #50	@ 0x32
 8005ac8:	f001 fad2 	bl	8007070 <HAL_Delay>

        	curNote = D*2;
 8005acc:	4b29      	ldr	r3, [pc, #164]	@ (8005b74 <PlayEffect+0x298>)
 8005ace:	4a2e      	ldr	r2, [pc, #184]	@ (8005b88 <PlayEffect+0x2ac>)
 8005ad0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005ad2:	4b28      	ldr	r3, [pc, #160]	@ (8005b74 <PlayEffect+0x298>)
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7ff fee0 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005adc:	2032      	movs	r0, #50	@ 0x32
 8005ade:	f001 fac7 	bl	8007070 <HAL_Delay>

        	curNote = B*2;
 8005ae2:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <PlayEffect+0x298>)
 8005ae4:	22f7      	movs	r2, #247	@ 0xf7
 8005ae6:	0092      	lsls	r2, r2, #2
 8005ae8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005aea:	4b22      	ldr	r3, [pc, #136]	@ (8005b74 <PlayEffect+0x298>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f7ff fed4 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005af4:	2032      	movs	r0, #50	@ 0x32
 8005af6:	f001 fabb 	bl	8007070 <HAL_Delay>

        	curNote = D*2;
 8005afa:	4b1e      	ldr	r3, [pc, #120]	@ (8005b74 <PlayEffect+0x298>)
 8005afc:	4a22      	ldr	r2, [pc, #136]	@ (8005b88 <PlayEffect+0x2ac>)
 8005afe:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b00:	4b1c      	ldr	r3, [pc, #112]	@ (8005b74 <PlayEffect+0x298>)
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff fec9 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005b0a:	2032      	movs	r0, #50	@ 0x32
 8005b0c:	f001 fab0 	bl	8007070 <HAL_Delay>

        	curNote = E*2;
 8005b10:	4b18      	ldr	r3, [pc, #96]	@ (8005b74 <PlayEffect+0x298>)
 8005b12:	4a1e      	ldr	r2, [pc, #120]	@ (8005b8c <PlayEffect+0x2b0>)
 8005b14:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b16:	4b17      	ldr	r3, [pc, #92]	@ (8005b74 <PlayEffect+0x298>)
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7ff febe 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005b20:	2032      	movs	r0, #50	@ 0x32
 8005b22:	f001 faa5 	bl	8007070 <HAL_Delay>

        	curNote = G*2;
 8005b26:	4b13      	ldr	r3, [pc, #76]	@ (8005b74 <PlayEffect+0x298>)
 8005b28:	22c4      	movs	r2, #196	@ 0xc4
 8005b2a:	00d2      	lsls	r2, r2, #3
 8005b2c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b2e:	4b11      	ldr	r3, [pc, #68]	@ (8005b74 <PlayEffect+0x298>)
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f7ff feb2 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005b38:	2032      	movs	r0, #50	@ 0x32
 8005b3a:	f001 fa99 	bl	8007070 <HAL_Delay>

        	curNote = G*2;
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <PlayEffect+0x298>)
 8005b40:	22c4      	movs	r2, #196	@ 0xc4
 8005b42:	00d2      	lsls	r2, r2, #3
 8005b44:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b46:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <PlayEffect+0x298>)
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f7ff fea6 	bl	800589c <ChangeNote>
        	HAL_Delay(50);
 8005b50:	2032      	movs	r0, #50	@ 0x32
 8005b52:	f001 fa8d 	bl	8007070 <HAL_Delay>

        	break;
 8005b56:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005b58:	4b04      	ldr	r3, [pc, #16]	@ (8005b6c <PlayEffect+0x290>)
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f004 fe5f 	bl	800a820 <HAL_TIM_PWM_Stop>
}
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b002      	add	sp, #8
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	20000e14 	.word	0x20000e14
 8005b70:	0800d858 	.word	0x0800d858
 8005b74:	20000a4e 	.word	0x20000a4e
 8005b78:	0000020b 	.word	0x0000020b
 8005b7c:	00000ae8 	.word	0x00000ae8
 8005b80:	000005ca 	.word	0x000005ca
 8005b84:	00000416 	.word	0x00000416
 8005b88:	00000496 	.word	0x00000496
 8005b8c:	00000526 	.word	0x00000526

08005b90 <HAL_GPIO_EXTI_Rising_Callback>:
//EXTI STUFF HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	0002      	movs	r2, r0
 8005b98:	1dbb      	adds	r3, r7, #6
 8005b9a:	801a      	strh	r2, [r3, #0]

}
 8005b9c:	46c0      	nop			@ (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <Animate>:


//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af04      	add	r7, sp, #16
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	++currentFrame;
 8005bae:	4b14      	ldr	r3, [pc, #80]	@ (8005c00 <Animate+0x5c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <Animate+0x5c>)
 8005bb6:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8005bb8:	4b11      	ldr	r3, [pc, #68]	@ (8005c00 <Animate+0x5c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d202      	bcs.n	8005bc8 <Animate+0x24>
	{
		currentFrame = 0;
 8005bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8005c00 <Animate+0x5c>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 30, 40, 64, 64, animation[currentFrame].Size);
 8005bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <Animate+0x5c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	18d3      	adds	r3, r2, r3
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <Animate+0x5c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	18d3      	adds	r3, r2, r3
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	4908      	ldr	r1, [pc, #32]	@ (8005c04 <Animate+0x60>)
 8005be4:	9302      	str	r3, [sp, #8]
 8005be6:	2340      	movs	r3, #64	@ 0x40
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	2340      	movs	r3, #64	@ 0x40
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	2328      	movs	r3, #40	@ 0x28
 8005bf0:	221e      	movs	r2, #30
 8005bf2:	f7fe fa21 	bl	8004038 <drawImage>
	return;
 8005bf6:	46c0      	nop			@ (mov r8, r8)
}
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b002      	add	sp, #8
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	20000ca4 	.word	0x20000ca4
 8005c04:	200009b4 	.word	0x200009b4

08005c08 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6039      	str	r1, [r7, #0]
 8005c10:	0011      	movs	r1, r2
 8005c12:	1dfb      	adds	r3, r7, #7
 8005c14:	1c02      	adds	r2, r0, #0
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	1dbb      	adds	r3, r7, #6
 8005c1a:	1c0a      	adds	r2, r1, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8005c1e:	1dfa      	adds	r2, r7, #7
 8005c20:	4811      	ldr	r0, [pc, #68]	@ (8005c68 <_ADXL343_ReadReg8+0x60>)
 8005c22:	23fa      	movs	r3, #250	@ 0xfa
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	2128      	movs	r1, #40	@ 0x28
 8005c2c:	f001 fdb8 	bl	80077a0 <HAL_I2C_Master_Transmit>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d002      	beq.n	8005c3a <_ADXL343_ReadReg8+0x32>
      return -1;
 8005c34:	2301      	movs	r3, #1
 8005c36:	425b      	negs	r3, r3
 8005c38:	e011      	b.n	8005c5e <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8005c3a:	1dbb      	adds	r3, r7, #6
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b299      	uxth	r1, r3
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	4809      	ldr	r0, [pc, #36]	@ (8005c68 <_ADXL343_ReadReg8+0x60>)
 8005c44:	23fa      	movs	r3, #250	@ 0xfa
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	000b      	movs	r3, r1
 8005c4c:	2128      	movs	r1, #40	@ 0x28
 8005c4e:	f001 fed1 	bl	80079f4 <HAL_I2C_Master_Receive>
 8005c52:	1e03      	subs	r3, r0, #0
 8005c54:	d002      	beq.n	8005c5c <_ADXL343_ReadReg8+0x54>
    return -2;
 8005c56:	2302      	movs	r3, #2
 8005c58:	425b      	negs	r3, r3
 8005c5a:	e000      	b.n	8005c5e <_ADXL343_ReadReg8+0x56>

  return 0;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	0018      	movs	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b002      	add	sp, #8
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	20000d30 	.word	0x20000d30

08005c6c <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	0002      	movs	r2, r0
 8005c74:	1dfb      	adds	r3, r7, #7
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	1dbb      	adds	r3, r7, #6
 8005c7a:	1c0a      	adds	r2, r1, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8005c7e:	210c      	movs	r1, #12
 8005c80:	187b      	adds	r3, r7, r1
 8005c82:	1dfa      	adds	r2, r7, #7
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	1dba      	adds	r2, r7, #6
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 1000)==HAL_OK)
 8005c90:	187a      	adds	r2, r7, r1
 8005c92:	4809      	ldr	r0, [pc, #36]	@ (8005cb8 <_ADXL343_WriteReg8+0x4c>)
 8005c94:	23fa      	movs	r3, #250	@ 0xfa
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	2128      	movs	r1, #40	@ 0x28
 8005c9e:	f001 fd7f 	bl	80077a0 <HAL_I2C_Master_Transmit>
 8005ca2:	1e03      	subs	r3, r0, #0
 8005ca4:	d102      	bne.n	8005cac <_ADXL343_WriteReg8+0x40>
      return -1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	425b      	negs	r3, r3
 8005caa:	e000      	b.n	8005cae <_ADXL343_WriteReg8+0x42>

  return 0;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	0018      	movs	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b004      	add	sp, #16
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	20000d30 	.word	0x20000d30

08005cbc <GetLatLon>:
	}
}

}
void GetLatLon()
{
 8005cbc:	b5b0      	push	{r4, r5, r7, lr}
 8005cbe:	b08a      	sub	sp, #40	@ 0x28
 8005cc0:	af00      	add	r7, sp, #0
	int gpsI=0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	623b      	str	r3, [r7, #32]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005cca:	e122      	b.n	8005f12 <GetLatLon+0x256>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8005f40 <GetLatLon+0x284>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	e00d      	b.n	8005cf0 <GetLatLon+0x34>
 8005cd4:	4b9a      	ldr	r3, [pc, #616]	@ (8005f40 <GetLatLon+0x284>)
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	001a      	movs	r2, r3
 8005cdc:	4b99      	ldr	r3, [pc, #612]	@ (8005f44 <GetLatLon+0x288>)
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5499      	strb	r1, [r3, r2]
 8005ce2:	4b97      	ldr	r3, [pc, #604]	@ (8005f40 <GetLatLon+0x284>)
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3301      	adds	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	4b94      	ldr	r3, [pc, #592]	@ (8005f40 <GetLatLon+0x284>)
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	4b93      	ldr	r3, [pc, #588]	@ (8005f40 <GetLatLon+0x284>)
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cf8:	d9ec      	bls.n	8005cd4 <GetLatLon+0x18>
								buffer[0]='$';
 8005cfa:	4b92      	ldr	r3, [pc, #584]	@ (8005f44 <GetLatLon+0x288>)
 8005cfc:	2224      	movs	r2, #36	@ 0x24
 8005cfe:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8005d04:	4a8f      	ldr	r2, [pc, #572]	@ (8005f44 <GetLatLon+0x288>)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	18d3      	adds	r3, r2, r3
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b0a      	cmp	r3, #10
 8005d0e:	d000      	beq.n	8005d12 <GetLatLon+0x56>
 8005d10:	e0fc      	b.n	8005f0c <GetLatLon+0x250>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8005d12:	4a8c      	ldr	r2, [pc, #560]	@ (8005f44 <GetLatLon+0x288>)
 8005d14:	4b8c      	ldr	r3, [pc, #560]	@ (8005f48 <GetLatLon+0x28c>)
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 fd9f 	bl	800685c <minmea_parse_gga>
 8005d1e:	1e03      	subs	r3, r0, #0
 8005d20:	d100      	bne.n	8005d24 <GetLatLon+0x68>
 8005d22:	e0dc      	b.n	8005ede <GetLatLon+0x222>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8005d24:	4b89      	ldr	r3, [pc, #548]	@ (8005f4c <GetLatLon+0x290>)
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7fe fce4 	bl	80046f4 <minmea_tocoord>
 8005d2c:	1c02      	adds	r2, r0, #0
 8005d2e:	2408      	movs	r4, #8
 8005d30:	193b      	adds	r3, r7, r4
 8005d32:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8005d34:	4b86      	ldr	r3, [pc, #536]	@ (8005f50 <GetLatLon+0x294>)
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7fe fcdc 	bl	80046f4 <minmea_tocoord>
 8005d3c:	1c02      	adds	r2, r0, #0
 8005d3e:	193b      	adds	r3, r7, r4
 8005d40:	605a      	str	r2, [r3, #4]
			  							  				      game.time = ggaStruct.time;
 8005d42:	4b84      	ldr	r3, [pc, #528]	@ (8005f54 <GetLatLon+0x298>)
 8005d44:	4a80      	ldr	r2, [pc, #512]	@ (8005f48 <GetLatLon+0x28c>)
 8005d46:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d48:	c313      	stmia	r3!, {r0, r1, r4}
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	601a      	str	r2, [r3, #0]
			  							  				      frameGot=1;
 8005d4e:	4b82      	ldr	r3, [pc, #520]	@ (8005f58 <GetLatLon+0x29c>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
			  							  				  posCheckI=0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	623b      	str	r3, [r7, #32]
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	623b      	str	r3, [r7, #32]
 8005d5c:	e0a1      	b.n	8005ea2 <GetLatLon+0x1e6>
			  							  				  			  				      {

			  							  				  			  				    	  tempPos = game.positions[posCheckI];
 8005d5e:	003a      	movs	r2, r7
 8005d60:	497c      	ldr	r1, [pc, #496]	@ (8005f54 <GetLatLon+0x298>)
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	3303      	adds	r3, #3
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	18cb      	adds	r3, r1, r3
 8005d6a:	cb03      	ldmia	r3!, {r0, r1}
 8005d6c:	c203      	stmia	r2!, {r0, r1}
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005d6e:	003b      	movs	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	497a      	ldr	r1, [pc, #488]	@ (8005f5c <GetLatLon+0x2a0>)
 8005d74:	1c18      	adds	r0, r3, #0
 8005d76:	f7fa fbb3 	bl	80004e0 <__aeabi_fcmpgt>
 8005d7a:	1e03      	subs	r3, r0, #0
 8005d7c:	d108      	bne.n	8005d90 <GetLatLon+0xd4>
 8005d7e:	003b      	movs	r3, r7
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4977      	ldr	r1, [pc, #476]	@ (8005f60 <GetLatLon+0x2a4>)
 8005d84:	1c18      	adds	r0, r3, #0
 8005d86:	f7fa fb97 	bl	80004b8 <__aeabi_fcmplt>
 8005d8a:	1e03      	subs	r3, r0, #0
 8005d8c:	d100      	bne.n	8005d90 <GetLatLon+0xd4>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;

			  							  				  			  				    	  }
			  							  				  			  				    	  else return;
 8005d8e:	e0d4      	b.n	8005f3a <GetLatLon+0x27e>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005d90:	003b      	movs	r3, r7
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4971      	ldr	r1, [pc, #452]	@ (8005f5c <GetLatLon+0x2a0>)
 8005d96:	1c18      	adds	r0, r3, #0
 8005d98:	f7fa fba2 	bl	80004e0 <__aeabi_fcmpgt>
 8005d9c:	1e03      	subs	r3, r0, #0
 8005d9e:	d108      	bne.n	8005db2 <GetLatLon+0xf6>
 8005da0:	003b      	movs	r3, r7
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	496e      	ldr	r1, [pc, #440]	@ (8005f60 <GetLatLon+0x2a4>)
 8005da6:	1c18      	adds	r0, r3, #0
 8005da8:	f7fa fb86 	bl	80004b8 <__aeabi_fcmplt>
 8005dac:	1e03      	subs	r3, r0, #0
 8005dae:	d100      	bne.n	8005db2 <GetLatLon+0xf6>
			  							  				  			  				    	  else return;
 8005db0:	e0c3      	b.n	8005f3a <GetLatLon+0x27e>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005db2:	2408      	movs	r4, #8
 8005db4:	193b      	adds	r3, r7, r4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4968      	ldr	r1, [pc, #416]	@ (8005f5c <GetLatLon+0x2a0>)
 8005dba:	1c18      	adds	r0, r3, #0
 8005dbc:	f7fa fb90 	bl	80004e0 <__aeabi_fcmpgt>
 8005dc0:	1e03      	subs	r3, r0, #0
 8005dc2:	d108      	bne.n	8005dd6 <GetLatLon+0x11a>
 8005dc4:	193b      	adds	r3, r7, r4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4965      	ldr	r1, [pc, #404]	@ (8005f60 <GetLatLon+0x2a4>)
 8005dca:	1c18      	adds	r0, r3, #0
 8005dcc:	f7fa fb74 	bl	80004b8 <__aeabi_fcmplt>
 8005dd0:	1e03      	subs	r3, r0, #0
 8005dd2:	d100      	bne.n	8005dd6 <GetLatLon+0x11a>
			  							  				  			  				    	  else return;
 8005dd4:	e0b1      	b.n	8005f3a <GetLatLon+0x27e>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005dd6:	2408      	movs	r4, #8
 8005dd8:	193b      	adds	r3, r7, r4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	495f      	ldr	r1, [pc, #380]	@ (8005f5c <GetLatLon+0x2a0>)
 8005dde:	1c18      	adds	r0, r3, #0
 8005de0:	f7fa fb7e 	bl	80004e0 <__aeabi_fcmpgt>
 8005de4:	1e03      	subs	r3, r0, #0
 8005de6:	d108      	bne.n	8005dfa <GetLatLon+0x13e>
 8005de8:	193b      	adds	r3, r7, r4
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	495c      	ldr	r1, [pc, #368]	@ (8005f60 <GetLatLon+0x2a4>)
 8005dee:	1c18      	adds	r0, r3, #0
 8005df0:	f7fa fb62 	bl	80004b8 <__aeabi_fcmplt>
 8005df4:	1e03      	subs	r3, r0, #0
 8005df6:	d100      	bne.n	8005dfa <GetLatLon+0x13e>
			  							  				  			  				    	  else return;
 8005df8:	e09f      	b.n	8005f3a <GetLatLon+0x27e>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
 8005dfa:	003b      	movs	r3, r7
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	2408      	movs	r4, #8
 8005e00:	193b      	adds	r3, r7, r4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	1c19      	adds	r1, r3, #0
 8005e06:	1c10      	adds	r0, r2, #0
 8005e08:	f7fb f9ba 	bl	8001180 <__aeabi_fsub>
 8005e0c:	1c03      	adds	r3, r0, #0
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	1c18      	adds	r0, r3, #0
 8005e14:	f7fd fc40 	bl	8003698 <__aeabi_f2d>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	000b      	movs	r3, r1
 8005e1c:	61ba      	str	r2, [r7, #24]
 8005e1e:	61fb      	str	r3, [r7, #28]
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
 8005e20:	003b      	movs	r3, r7
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	1c19      	adds	r1, r3, #0
 8005e2a:	1c10      	adds	r0, r2, #0
 8005e2c:	f7fb f9a8 	bl	8001180 <__aeabi_fsub>
 8005e30:	1c03      	adds	r3, r0, #0
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	1c18      	adds	r0, r3, #0
 8005e38:	f7fd fc2e 	bl	8003698 <__aeabi_f2d>
 8005e3c:	0002      	movs	r2, r0
 8005e3e:	000b      	movs	r3, r1
 8005e40:	613a      	str	r2, [r7, #16]
 8005e42:	617b      	str	r3, [r7, #20]
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	69b8      	ldr	r0, [r7, #24]
 8005e4a:	69f9      	ldr	r1, [r7, #28]
 8005e4c:	f7fc fcb2 	bl	80027b4 <__aeabi_dmul>
 8005e50:	0002      	movs	r2, r0
 8005e52:	000b      	movs	r3, r1
 8005e54:	0014      	movs	r4, r2
 8005e56:	001d      	movs	r5, r3
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6938      	ldr	r0, [r7, #16]
 8005e5e:	6979      	ldr	r1, [r7, #20]
 8005e60:	f7fc fca8 	bl	80027b4 <__aeabi_dmul>
 8005e64:	0002      	movs	r2, r0
 8005e66:	000b      	movs	r3, r1
 8005e68:	0020      	movs	r0, r4
 8005e6a:	0029      	movs	r1, r5
 8005e6c:	f7fb fca2 	bl	80017b4 <__aeabi_dadd>
 8005e70:	0002      	movs	r2, r0
 8005e72:	000b      	movs	r3, r1
 8005e74:	0010      	movs	r0, r2
 8005e76:	0019      	movs	r1, r3
 8005e78:	f006 ff8d 	bl	800cd96 <sqrt>
 8005e7c:	0004      	movs	r4, r0
 8005e7e:	000d      	movs	r5, r1
 8005e80:	4b38      	ldr	r3, [pc, #224]	@ (8005f64 <GetLatLon+0x2a8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	1c18      	adds	r0, r3, #0
 8005e86:	f7fd fc07 	bl	8003698 <__aeabi_f2d>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	000b      	movs	r3, r1
 8005e8e:	0020      	movs	r0, r4
 8005e90:	0029      	movs	r1, r5
 8005e92:	f7fa fad7 	bl	8000444 <__aeabi_dcmplt>
 8005e96:	1e03      	subs	r3, r0, #0
 8005e98:	d14c      	bne.n	8005f34 <GetLatLon+0x278>
 8005e9a:	46c0      	nop			@ (mov r8, r8)
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	623b      	str	r3, [r7, #32]
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8005f54 <GetLatLon+0x298>)
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d900      	bls.n	8005eae <GetLatLon+0x1f2>
 8005eac:	e757      	b.n	8005d5e <GetLatLon+0xa2>

			  							  				  			  				      }
			  							  				game.positions[game.numLocations] = pos;
 8005eae:	4b29      	ldr	r3, [pc, #164]	@ (8005f54 <GetLatLon+0x298>)
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	4a28      	ldr	r2, [pc, #160]	@ (8005f54 <GetLatLon+0x298>)
 8005eb4:	3303      	adds	r3, #3
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	2108      	movs	r1, #8
 8005eba:	1879      	adds	r1, r7, r1
 8005ebc:	18d3      	adds	r3, r2, r3
 8005ebe:	000a      	movs	r2, r1
 8005ec0:	ca03      	ldmia	r2!, {r0, r1}
 8005ec2:	c303      	stmia	r3!, {r0, r1}
			  							  				game.numLocations++;
 8005ec4:	4b23      	ldr	r3, [pc, #140]	@ (8005f54 <GetLatLon+0x298>)
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	4b22      	ldr	r3, [pc, #136]	@ (8005f54 <GetLatLon+0x298>)
 8005ecc:	615a      	str	r2, [r3, #20]
			  							  				if(game.numLocations>31)game.numLocations=0;
 8005ece:	4b21      	ldr	r3, [pc, #132]	@ (8005f54 <GetLatLon+0x298>)
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	2b1f      	cmp	r3, #31
 8005ed4:	d930      	bls.n	8005f38 <GetLatLon+0x27c>
 8005ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8005f54 <GetLatLon+0x298>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	615a      	str	r2, [r3, #20]
			  							  				      break;
 8005edc:	e02c      	b.n	8005f38 <GetLatLon+0x27c>
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005ede:	4b18      	ldr	r3, [pc, #96]	@ (8005f40 <GetLatLon+0x284>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e00d      	b.n	8005f02 <GetLatLon+0x246>
 8005ee6:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <GetLatLon+0x284>)
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	001a      	movs	r2, r3
 8005eee:	4b15      	ldr	r3, [pc, #84]	@ (8005f44 <GetLatLon+0x288>)
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5499      	strb	r1, [r3, r2]
 8005ef4:	4b12      	ldr	r3, [pc, #72]	@ (8005f40 <GetLatLon+0x284>)
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3301      	adds	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	4b10      	ldr	r3, [pc, #64]	@ (8005f40 <GetLatLon+0x284>)
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	4b0f      	ldr	r3, [pc, #60]	@ (8005f40 <GetLatLon+0x284>)
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f0a:	d9ec      	bls.n	8005ee6 <GetLatLon+0x22a>
			  				  }
			  			  gpsI++;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	3301      	adds	r3, #1
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f14:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <GetLatLon+0x288>)
 8005f16:	18d1      	adds	r1, r2, r3
 8005f18:	23fa      	movs	r3, #250	@ 0xfa
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4812      	ldr	r0, [pc, #72]	@ (8005f68 <GetLatLon+0x2ac>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f005 fa7c 	bl	800b41c <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8005f24:	4a07      	ldr	r2, [pc, #28]	@ (8005f44 <GetLatLon+0x288>)
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	18d3      	adds	r3, r2, r3
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b24      	cmp	r3, #36	@ 0x24
 8005f2e:	d000      	beq.n	8005f32 <GetLatLon+0x276>
 8005f30:	e6e8      	b.n	8005d04 <GetLatLon+0x48>
 8005f32:	e6cb      	b.n	8005ccc <GetLatLon+0x10>
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8005f34:	46c0      	nop			@ (mov r8, r8)
 8005f36:	e000      	b.n	8005f3a <GetLatLon+0x27e>
			  							  				      break;
 8005f38:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	b00a      	add	sp, #40	@ 0x28
 8005f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f40:	20000bac 	.word	0x20000bac
 8005f44:	20000c00 	.word	0x20000c00
 8005f48:	20000bb0 	.word	0x20000bb0
 8005f4c:	20000bc0 	.word	0x20000bc0
 8005f50:	20000bc8 	.word	0x20000bc8
 8005f54:	20000a54 	.word	0x20000a54
 8005f58:	20000bfe 	.word	0x20000bfe
 8005f5c:	358637bd 	.word	0x358637bd
 8005f60:	b58637bd 	.word	0xb58637bd
 8005f64:	20000ca8 	.word	0x20000ca8
 8005f68:	20000e60 	.word	0x20000e60

08005f6c <GetJustLatLon>:
struct latLon GetJustLatLon()
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b089      	sub	sp, #36	@ 0x24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	int gpsI=0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005f7c:	e057      	b.n	800602e <GetJustLatLon+0xc2>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005f7e:	4b36      	ldr	r3, [pc, #216]	@ (8006058 <GetJustLatLon+0xec>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e00d      	b.n	8005fa2 <GetJustLatLon+0x36>
 8005f86:	4b34      	ldr	r3, [pc, #208]	@ (8006058 <GetJustLatLon+0xec>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	001a      	movs	r2, r3
 8005f8e:	4b33      	ldr	r3, [pc, #204]	@ (800605c <GetJustLatLon+0xf0>)
 8005f90:	2100      	movs	r1, #0
 8005f92:	5499      	strb	r1, [r3, r2]
 8005f94:	4b30      	ldr	r3, [pc, #192]	@ (8006058 <GetJustLatLon+0xec>)
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8006058 <GetJustLatLon+0xec>)
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8006058 <GetJustLatLon+0xec>)
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005faa:	d9ec      	bls.n	8005f86 <GetJustLatLon+0x1a>
								buffer[0]='$';
 8005fac:	4b2b      	ldr	r3, [pc, #172]	@ (800605c <GetJustLatLon+0xf0>)
 8005fae:	2224      	movs	r2, #36	@ 0x24
 8005fb0:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8005fb6:	4a29      	ldr	r2, [pc, #164]	@ (800605c <GetJustLatLon+0xf0>)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	18d3      	adds	r3, r2, r3
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b0a      	cmp	r3, #10
 8005fc0:	d132      	bne.n	8006028 <GetJustLatLon+0xbc>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8005fc2:	4a26      	ldr	r2, [pc, #152]	@ (800605c <GetJustLatLon+0xf0>)
 8005fc4:	4b26      	ldr	r3, [pc, #152]	@ (8006060 <GetJustLatLon+0xf4>)
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 fc47 	bl	800685c <minmea_parse_gga>
 8005fce:	1e03      	subs	r3, r0, #0
 8005fd0:	d013      	beq.n	8005ffa <GetJustLatLon+0x8e>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8005fd2:	4b24      	ldr	r3, [pc, #144]	@ (8006064 <GetJustLatLon+0xf8>)
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f7fe fb8d 	bl	80046f4 <minmea_tocoord>
 8005fda:	1c02      	adds	r2, r0, #0
 8005fdc:	2410      	movs	r4, #16
 8005fde:	193b      	adds	r3, r7, r4
 8005fe0:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8005fe2:	4b21      	ldr	r3, [pc, #132]	@ (8006068 <GetJustLatLon+0xfc>)
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7fe fb85 	bl	80046f4 <minmea_tocoord>
 8005fea:	1c02      	adds	r2, r0, #0
 8005fec:	193b      	adds	r3, r7, r4
 8005fee:	605a      	str	r2, [r3, #4]
			  							  				      return pos;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	193a      	adds	r2, r7, r4
 8005ff4:	ca03      	ldmia	r2!, {r0, r1}
 8005ff6:	c303      	stmia	r3!, {r0, r1}
 8005ff8:	e029      	b.n	800604e <GetJustLatLon+0xe2>
			  							  				      break;
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005ffa:	4b17      	ldr	r3, [pc, #92]	@ (8006058 <GetJustLatLon+0xec>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e00d      	b.n	800601e <GetJustLatLon+0xb2>
 8006002:	4b15      	ldr	r3, [pc, #84]	@ (8006058 <GetJustLatLon+0xec>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	001a      	movs	r2, r3
 800600a:	4b14      	ldr	r3, [pc, #80]	@ (800605c <GetJustLatLon+0xf0>)
 800600c:	2100      	movs	r1, #0
 800600e:	5499      	strb	r1, [r3, r2]
 8006010:	4b11      	ldr	r3, [pc, #68]	@ (8006058 <GetJustLatLon+0xec>)
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	3301      	adds	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <GetJustLatLon+0xec>)
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	4b0e      	ldr	r3, [pc, #56]	@ (8006058 <GetJustLatLon+0xec>)
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b7f      	cmp	r3, #127	@ 0x7f
 8006026:	d9ec      	bls.n	8006002 <GetJustLatLon+0x96>
			  				  }
			  			  gpsI++;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3301      	adds	r3, #1
 800602c:	61fb      	str	r3, [r7, #28]
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <GetJustLatLon+0xf0>)
 8006032:	18d1      	adds	r1, r2, r3
 8006034:	23fa      	movs	r3, #250	@ 0xfa
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	480c      	ldr	r0, [pc, #48]	@ (800606c <GetJustLatLon+0x100>)
 800603a:	2201      	movs	r2, #1
 800603c:	f005 f9ee 	bl	800b41c <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8006040:	4a06      	ldr	r2, [pc, #24]	@ (800605c <GetJustLatLon+0xf0>)
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	18d3      	adds	r3, r2, r3
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b24      	cmp	r3, #36	@ 0x24
 800604a:	d1b4      	bne.n	8005fb6 <GetJustLatLon+0x4a>
 800604c:	e797      	b.n	8005f7e <GetJustLatLon+0x12>
			  							  				      return pos;
 800604e:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	46bd      	mov	sp, r7
 8006054:	b009      	add	sp, #36	@ 0x24
 8006056:	bd90      	pop	{r4, r7, pc}
 8006058:	20000bac 	.word	0x20000bac
 800605c:	20000c00 	.word	0x20000c00
 8006060:	20000bb0 	.word	0x20000bb0
 8006064:	20000bc0 	.word	0x20000bc0
 8006068:	20000bc8 	.word	0x20000bc8
 800606c:	20000e60 	.word	0x20000e60

08006070 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b091      	sub	sp, #68	@ 0x44
 8006074:	af04      	add	r7, sp, #16
 8006076:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8006078:	2380      	movs	r3, #128	@ 0x80
 800607a:	005a      	lsls	r2, r3, #1
 800607c:	2408      	movs	r4, #8
 800607e:	1939      	adds	r1, r7, r4
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	2300      	movs	r3, #0
 8006084:	f003 fbd8 	bl	8009838 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8006088:	0022      	movs	r2, r4
 800608a:	18bb      	adds	r3, r7, r2
 800608c:	789b      	ldrb	r3, [r3, #2]
 800608e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006090:	d903      	bls.n	800609a <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8006092:	18bb      	adds	r3, r7, r2
 8006094:	2200      	movs	r2, #0
 8006096:	709a      	strb	r2, [r3, #2]
 8006098:	e006      	b.n	80060a8 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 800609a:	2108      	movs	r1, #8
 800609c:	187b      	adds	r3, r7, r1
 800609e:	789b      	ldrb	r3, [r3, #2]
 80060a0:	3301      	adds	r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80060a8:	46c0      	nop			@ (mov r8, r8)
 80060aa:	2308      	movs	r3, #8
 80060ac:	18f9      	adds	r1, r7, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	0018      	movs	r0, r3
 80060b4:	f003 fa80 	bl	80095b8 <HAL_RTC_SetAlarm_IT>
 80060b8:	1e03      	subs	r3, r0, #0
 80060ba:	d1f6      	bne.n	80060aa <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 80060bc:	4a07      	ldr	r2, [pc, #28]	@ (80060dc <HAL_RTC_AlarmAEventCallback+0x6c>)
 80060be:	2301      	movs	r3, #1
 80060c0:	9302      	str	r3, [sp, #8]
 80060c2:	2301      	movs	r3, #1
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	4b06      	ldr	r3, [pc, #24]	@ (80060e0 <HAL_RTC_AlarmAEventCallback+0x70>)
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2300      	movs	r3, #0
 80060cc:	211e      	movs	r1, #30
 80060ce:	201e      	movs	r0, #30
 80060d0:	f7fd fdf9 	bl	8003cc6 <drawString>
}
 80060d4:	46c0      	nop			@ (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b00d      	add	sp, #52	@ 0x34
 80060da:	bd90      	pop	{r4, r7, pc}
 80060dc:	0800d1a8 	.word	0x0800d1a8
 80060e0:	ffffe007 	.word	0xffffe007

080060e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060e8:	b672      	cpsid	i
}
 80060ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060ec:	46c0      	nop			@ (mov r8, r8)
 80060ee:	e7fd      	b.n	80060ec <Error_Handler+0x8>

080060f0 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	0002      	movs	r2, r0
 80060f8:	1dfb      	adds	r3, r7, #7
 80060fa:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80060fc:	1dfb      	adds	r3, r7, #7
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <minmea_isfield+0x48>)
 8006104:	18d3      	adds	r3, r2, r3
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	001a      	movs	r2, r3
 800610a:	2397      	movs	r3, #151	@ 0x97
 800610c:	4013      	ands	r3, r2
 800610e:	d009      	beq.n	8006124 <minmea_isfield+0x34>
 8006110:	1dfb      	adds	r3, r7, #7
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b2c      	cmp	r3, #44	@ 0x2c
 8006116:	d005      	beq.n	8006124 <minmea_isfield+0x34>
 8006118:	1dfb      	adds	r3, r7, #7
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b2a      	cmp	r3, #42	@ 0x2a
 800611e:	d001      	beq.n	8006124 <minmea_isfield+0x34>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <minmea_isfield+0x36>
 8006124:	2300      	movs	r3, #0
 8006126:	1c1a      	adds	r2, r3, #0
 8006128:	2301      	movs	r3, #1
 800612a:	4013      	ands	r3, r2
 800612c:	b2db      	uxtb	r3, r3
}
 800612e:	0018      	movs	r0, r3
 8006130:	46bd      	mov	sp, r7
 8006132:	b002      	add	sp, #8
 8006134:	bd80      	pop	{r7, pc}
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	0800da14 	.word	0x0800da14

0800613c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 800613c:	b40e      	push	{r1, r2, r3}
 800613e:	b5b0      	push	{r4, r5, r7, lr}
 8006140:	b0a7      	sub	sp, #156	@ 0x9c
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
    bool result = false;
 8006146:	2397      	movs	r3, #151	@ 0x97
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 800614e:	2396      	movs	r3, #150	@ 0x96
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8006156:	23a8      	movs	r3, #168	@ 0xa8
 8006158:	2208      	movs	r2, #8
 800615a:	189b      	adds	r3, r3, r2
 800615c:	19db      	adds	r3, r3, r7
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2290      	movs	r2, #144	@ 0x90
 8006164:	18ba      	adds	r2, r7, r2
 8006166:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8006168:	e345      	b.n	80067f6 <minmea_scan+0x6ba>
        char type = *format++;
 800616a:	21a4      	movs	r1, #164	@ 0xa4
 800616c:	2008      	movs	r0, #8
 800616e:	180b      	adds	r3, r1, r0
 8006170:	19db      	adds	r3, r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	1809      	adds	r1, r1, r0
 8006178:	19c9      	adds	r1, r1, r7
 800617a:	600a      	str	r2, [r1, #0]
 800617c:	2143      	movs	r1, #67	@ 0x43
 800617e:	187a      	adds	r2, r7, r1
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8006184:	187b      	adds	r3, r7, r1
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b3b      	cmp	r3, #59	@ 0x3b
 800618a:	d104      	bne.n	8006196 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 800618c:	2396      	movs	r3, #150	@ 0x96
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
            continue;
 8006194:	e32f      	b.n	80067f6 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8006196:	2390      	movs	r3, #144	@ 0x90
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d108      	bne.n	80061b2 <minmea_scan+0x76>
 80061a0:	2396      	movs	r3, #150	@ 0x96
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4053      	eors	r3, r2
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d000      	beq.n	80061b2 <minmea_scan+0x76>
 80061b0:	e32f      	b.n	8006812 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80061b2:	2343      	movs	r3, #67	@ 0x43
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	3b44      	subs	r3, #68	@ 0x44
 80061ba:	2b30      	cmp	r3, #48	@ 0x30
 80061bc:	d900      	bls.n	80061c0 <minmea_scan+0x84>
 80061be:	e32a      	b.n	8006816 <minmea_scan+0x6da>
 80061c0:	009a      	lsls	r2, r3, #2
 80061c2:	4bbd      	ldr	r3, [pc, #756]	@ (80064b8 <minmea_scan+0x37c>)
 80061c4:	18d3      	adds	r3, r2, r3
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 80061ca:	258f      	movs	r5, #143	@ 0x8f
 80061cc:	197b      	adds	r3, r7, r5
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 80061d2:	2490      	movs	r4, #144	@ 0x90
 80061d4:	193b      	adds	r3, r7, r4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <minmea_scan+0xba>
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7ff ff84 	bl	80060f0 <minmea_isfield>
 80061e8:	1e03      	subs	r3, r0, #0
 80061ea:	d004      	beq.n	80061f6 <minmea_scan+0xba>
                    value = *field;
 80061ec:	197b      	adds	r3, r7, r5
 80061ee:	193a      	adds	r2, r7, r4
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	7812      	ldrb	r2, [r2, #0]
 80061f4:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	1d1a      	adds	r2, r3, #4
 80061fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	228f      	movs	r2, #143	@ 0x8f
 8006200:	18ba      	adds	r2, r7, r2
 8006202:	7812      	ldrb	r2, [r2, #0]
 8006204:	701a      	strb	r2, [r3, #0]
            } break;
 8006206:	e2db      	b.n	80067c0 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	2288      	movs	r2, #136	@ 0x88
 800620c:	18ba      	adds	r2, r7, r2
 800620e:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8006210:	2490      	movs	r4, #144	@ 0x90
 8006212:	193b      	adds	r3, r7, r4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d022      	beq.n	8006260 <minmea_scan+0x124>
 800621a:	193b      	adds	r3, r7, r4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	0018      	movs	r0, r3
 8006222:	f7ff ff65 	bl	80060f0 <minmea_isfield>
 8006226:	1e03      	subs	r3, r0, #0
 8006228:	d01a      	beq.n	8006260 <minmea_scan+0x124>
                    switch (*field) {
 800622a:	193b      	adds	r3, r7, r4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b57      	cmp	r3, #87	@ 0x57
 8006232:	d00f      	beq.n	8006254 <minmea_scan+0x118>
 8006234:	dd00      	ble.n	8006238 <minmea_scan+0xfc>
 8006236:	e2f0      	b.n	800681a <minmea_scan+0x6de>
 8006238:	2b53      	cmp	r3, #83	@ 0x53
 800623a:	d00b      	beq.n	8006254 <minmea_scan+0x118>
 800623c:	dd00      	ble.n	8006240 <minmea_scan+0x104>
 800623e:	e2ec      	b.n	800681a <minmea_scan+0x6de>
 8006240:	2b45      	cmp	r3, #69	@ 0x45
 8006242:	d002      	beq.n	800624a <minmea_scan+0x10e>
 8006244:	2b4e      	cmp	r3, #78	@ 0x4e
 8006246:	d000      	beq.n	800624a <minmea_scan+0x10e>
 8006248:	e2e7      	b.n	800681a <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	2288      	movs	r2, #136	@ 0x88
 800624e:	18ba      	adds	r2, r7, r2
 8006250:	6013      	str	r3, [r2, #0]
                            break;
 8006252:	e005      	b.n	8006260 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8006254:	2301      	movs	r3, #1
 8006256:	425b      	negs	r3, r3
 8006258:	2288      	movs	r2, #136	@ 0x88
 800625a:	18ba      	adds	r2, r7, r2
 800625c:	6013      	str	r3, [r2, #0]
                            break;
 800625e:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8006260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006262:	1d1a      	adds	r2, r3, #4
 8006264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2288      	movs	r2, #136	@ 0x88
 800626a:	18ba      	adds	r2, r7, r2
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	601a      	str	r2, [r3, #0]
            } break;
 8006270:	e2a6      	b.n	80067c0 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	2284      	movs	r2, #132	@ 0x84
 8006276:	18ba      	adds	r2, r7, r2
 8006278:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 800627a:	2301      	movs	r3, #1
 800627c:	425b      	negs	r3, r3
 800627e:	2280      	movs	r2, #128	@ 0x80
 8006280:	18ba      	adds	r2, r7, r2
 8006282:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 8006284:	2300      	movs	r3, #0
 8006286:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8006288:	2390      	movs	r3, #144	@ 0x90
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d100      	bne.n	8006294 <minmea_scan+0x158>
 8006292:	e088      	b.n	80063a6 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8006294:	e07d      	b.n	8006392 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 8006296:	2390      	movs	r3, #144	@ 0x90
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b2b      	cmp	r3, #43	@ 0x2b
 80062a0:	d10d      	bne.n	80062be <minmea_scan+0x182>
 80062a2:	2284      	movs	r2, #132	@ 0x84
 80062a4:	18bb      	adds	r3, r7, r2
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <minmea_scan+0x182>
 80062ac:	2380      	movs	r3, #128	@ 0x80
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3301      	adds	r3, #1
 80062b4:	d103      	bne.n	80062be <minmea_scan+0x182>
                            sign = 1;
 80062b6:	2301      	movs	r3, #1
 80062b8:	18ba      	adds	r2, r7, r2
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	e063      	b.n	8006386 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 80062be:	2390      	movs	r3, #144	@ 0x90
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80062c8:	d10e      	bne.n	80062e8 <minmea_scan+0x1ac>
 80062ca:	2284      	movs	r2, #132	@ 0x84
 80062cc:	18bb      	adds	r3, r7, r2
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <minmea_scan+0x1ac>
 80062d4:	2380      	movs	r3, #128	@ 0x80
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	d104      	bne.n	80062e8 <minmea_scan+0x1ac>
                            sign = -1;
 80062de:	2301      	movs	r3, #1
 80062e0:	425b      	negs	r3, r3
 80062e2:	18ba      	adds	r2, r7, r2
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e04e      	b.n	8006386 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 80062e8:	2190      	movs	r1, #144	@ 0x90
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	4b72      	ldr	r3, [pc, #456]	@ (80064bc <minmea_scan+0x380>)
 80062f4:	18d3      	adds	r3, r2, r3
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	001a      	movs	r2, r3
 80062fa:	2304      	movs	r3, #4
 80062fc:	4013      	ands	r3, r2
 80062fe:	d035      	beq.n	800636c <minmea_scan+0x230>
                            int digit = *field - '0';
 8006300:	187b      	adds	r3, r7, r1
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	3b30      	subs	r3, #48	@ 0x30
 8006308:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 800630a:	2280      	movs	r2, #128	@ 0x80
 800630c:	18bb      	adds	r3, r7, r2
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	d102      	bne.n	800631a <minmea_scan+0x1de>
                                value = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	18ba      	adds	r2, r7, r2
 8006318:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	4a68      	ldr	r2, [pc, #416]	@ (80064c0 <minmea_scan+0x384>)
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	210a      	movs	r1, #10
 8006322:	0018      	movs	r0, r3
 8006324:	f7f9 ff8c 	bl	8000240 <__divsi3>
 8006328:	0003      	movs	r3, r0
 800632a:	001a      	movs	r2, r3
 800632c:	2380      	movs	r3, #128	@ 0x80
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4293      	cmp	r3, r2
 8006334:	dd04      	ble.n	8006340 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8006336:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d100      	bne.n	800633e <minmea_scan+0x202>
 800633c:	e26f      	b.n	800681e <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 800633e:	e032      	b.n	80063a6 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8006340:	2180      	movs	r1, #128	@ 0x80
 8006342:	187b      	adds	r3, r7, r1
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	0013      	movs	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	189b      	adds	r3, r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	001a      	movs	r2, r3
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	189b      	adds	r3, r3, r2
 8006354:	187a      	adds	r2, r7, r1
 8006356:	6013      	str	r3, [r2, #0]
                            if (scale)
 8006358:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <minmea_scan+0x24a>
                                scale *= 10;
 800635e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006360:	0013      	movs	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	189b      	adds	r3, r3, r2
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800636a:	e00c      	b.n	8006386 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 800636c:	2390      	movs	r3, #144	@ 0x90
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b2e      	cmp	r3, #46	@ 0x2e
 8006376:	d000      	beq.n	800637a <minmea_scan+0x23e>
 8006378:	e253      	b.n	8006822 <minmea_scan+0x6e6>
 800637a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800637c:	2b00      	cmp	r3, #0
 800637e:	d000      	beq.n	8006382 <minmea_scan+0x246>
 8006380:	e24f      	b.n	8006822 <minmea_scan+0x6e6>
                            scale = 1;
 8006382:	2301      	movs	r3, #1
 8006384:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 8006386:	2290      	movs	r2, #144	@ 0x90
 8006388:	18bb      	adds	r3, r7, r2
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3301      	adds	r3, #1
 800638e:	18ba      	adds	r2, r7, r2
 8006390:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 8006392:	2390      	movs	r3, #144	@ 0x90
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	0018      	movs	r0, r3
 800639c:	f7ff fea8 	bl	80060f0 <minmea_isfield>
 80063a0:	1e03      	subs	r3, r0, #0
 80063a2:	d000      	beq.n	80063a6 <minmea_scan+0x26a>
 80063a4:	e777      	b.n	8006296 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80063a6:	2384      	movs	r3, #132	@ 0x84
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <minmea_scan+0x27a>
 80063b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <minmea_scan+0x286>
 80063b6:	2380      	movs	r3, #128	@ 0x80
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3301      	adds	r3, #1
 80063be:	d100      	bne.n	80063c2 <minmea_scan+0x286>
 80063c0:	e231      	b.n	8006826 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 80063c2:	2280      	movs	r2, #128	@ 0x80
 80063c4:	18bb      	adds	r3, r7, r2
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	d105      	bne.n	80063d8 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	18ba      	adds	r2, r7, r2
 80063d0:	6013      	str	r3, [r2, #0]
                    scale = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063d6:	e004      	b.n	80063e2 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 80063d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 80063de:	2301      	movs	r3, #1
 80063e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 80063e2:	2284      	movs	r2, #132	@ 0x84
 80063e4:	18bb      	adds	r3, r7, r2
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <minmea_scan+0x2c0>
                    value *= sign;
 80063ec:	2180      	movs	r1, #128	@ 0x80
 80063ee:	187b      	adds	r3, r7, r1
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	18ba      	adds	r2, r7, r2
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	4353      	muls	r3, r2
 80063f8:	187a      	adds	r2, r7, r1
 80063fa:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 80063fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2280      	movs	r2, #128	@ 0x80
 8006406:	18ba      	adds	r2, r7, r2
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800640e:	605a      	str	r2, [r3, #4]
            } break;
 8006410:	e1d6      	b.n	80067c0 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8006416:	2290      	movs	r2, #144	@ 0x90
 8006418:	18bb      	adds	r3, r7, r2
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d011      	beq.n	8006444 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8006420:	2320      	movs	r3, #32
 8006422:	18f9      	adds	r1, r7, r3
 8006424:	18bb      	adds	r3, r7, r2
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	220a      	movs	r2, #10
 800642a:	0018      	movs	r0, r3
 800642c:	f006 f80a 	bl	800c444 <strtol>
 8006430:	0003      	movs	r3, r0
 8006432:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	0018      	movs	r0, r3
 800643a:	f7ff fe59 	bl	80060f0 <minmea_isfield>
 800643e:	1e03      	subs	r3, r0, #0
 8006440:	d000      	beq.n	8006444 <minmea_scan+0x308>
 8006442:	e1f2      	b.n	800682a <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800644e:	601a      	str	r2, [r3, #0]
            } break;
 8006450:	e1b6      	b.n	80067c0 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8006452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006454:	1d1a      	adds	r2, r3, #4
 8006456:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 800645c:	2390      	movs	r3, #144	@ 0x90
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d014      	beq.n	8006490 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 8006466:	e00a      	b.n	800647e <minmea_scan+0x342>
                        *buf++ = *field++;
 8006468:	2190      	movs	r1, #144	@ 0x90
 800646a:	187b      	adds	r3, r7, r1
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	1c53      	adds	r3, r2, #1
 8006470:	1879      	adds	r1, r7, r1
 8006472:	600b      	str	r3, [r1, #0]
 8006474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	6779      	str	r1, [r7, #116]	@ 0x74
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 800647e:	2390      	movs	r3, #144	@ 0x90
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	0018      	movs	r0, r3
 8006488:	f7ff fe32 	bl	80060f0 <minmea_isfield>
 800648c:	1e03      	subs	r3, r0, #0
 800648e:	d1eb      	bne.n	8006468 <minmea_scan+0x32c>
                }

                *buf = '\0';
 8006490:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006492:	2200      	movs	r2, #0
 8006494:	701a      	strb	r2, [r3, #0]
            } break;
 8006496:	e193      	b.n	80067c0 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8006498:	2290      	movs	r2, #144	@ 0x90
 800649a:	18bb      	adds	r3, r7, r2
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d100      	bne.n	80064a4 <minmea_scan+0x368>
 80064a2:	e1c4      	b.n	800682e <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80064a4:	18bb      	adds	r3, r7, r2
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b24      	cmp	r3, #36	@ 0x24
 80064ac:	d000      	beq.n	80064b0 <minmea_scan+0x374>
 80064ae:	e1c0      	b.n	8006832 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80064b0:	2300      	movs	r3, #0
 80064b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80064b4:	e01c      	b.n	80064f0 <minmea_scan+0x3b4>
 80064b6:	46c0      	nop			@ (mov r8, r8)
 80064b8:	0800d874 	.word	0x0800d874
 80064bc:	0800da14 	.word	0x0800da14
 80064c0:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 80064c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064c6:	3301      	adds	r3, #1
 80064c8:	001a      	movs	r2, r3
 80064ca:	2390      	movs	r3, #144	@ 0x90
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7ff fe0b 	bl	80060f0 <minmea_isfield>
 80064da:	0003      	movs	r3, r0
 80064dc:	001a      	movs	r2, r3
 80064de:	2301      	movs	r3, #1
 80064e0:	4053      	eors	r3, r2
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d000      	beq.n	80064ea <minmea_scan+0x3ae>
 80064e8:	e1a5      	b.n	8006836 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 80064ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064ec:	3301      	adds	r3, #1
 80064ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80064f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	dde6      	ble.n	80064c4 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 80064f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f8:	1d1a      	adds	r2, r3, #4
 80064fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8006500:	2390      	movs	r3, #144	@ 0x90
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	1c59      	adds	r1, r3, #1
 8006508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800650a:	2205      	movs	r2, #5
 800650c:	0018      	movs	r0, r3
 800650e:	f005 fffb 	bl	800c508 <memcpy>
                buf[5] = '\0';
 8006512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006514:	3305      	adds	r3, #5
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
            } break;
 800651a:	e151      	b.n	80067c0 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8006526:	2301      	movs	r3, #1
 8006528:	425b      	negs	r3, r3
 800652a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800652c:	2301      	movs	r3, #1
 800652e:	425b      	negs	r3, r3
 8006530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006532:	2301      	movs	r3, #1
 8006534:	425b      	negs	r3, r3
 8006536:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8006538:	2290      	movs	r2, #144	@ 0x90
 800653a:	18bb      	adds	r3, r7, r2
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d067      	beq.n	8006612 <minmea_scan+0x4d6>
 8006542:	18bb      	adds	r3, r7, r2
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	0018      	movs	r0, r3
 800654a:	f7ff fdd1 	bl	80060f0 <minmea_isfield>
 800654e:	1e03      	subs	r3, r0, #0
 8006550:	d05f      	beq.n	8006612 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8006552:	2300      	movs	r3, #0
 8006554:	663b      	str	r3, [r7, #96]	@ 0x60
 8006556:	e011      	b.n	800657c <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8006558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800655a:	2290      	movs	r2, #144	@ 0x90
 800655c:	18ba      	adds	r2, r7, r2
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	18d3      	adds	r3, r2, r3
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	4bbb      	ldr	r3, [pc, #748]	@ (8006854 <minmea_scan+0x718>)
 8006568:	18d3      	adds	r3, r2, r3
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	001a      	movs	r2, r3
 800656e:	2304      	movs	r3, #4
 8006570:	4013      	ands	r3, r2
 8006572:	d100      	bne.n	8006576 <minmea_scan+0x43a>
 8006574:	e161      	b.n	800683a <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 8006576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006578:	3301      	adds	r3, #1
 800657a:	663b      	str	r3, [r7, #96]	@ 0x60
 800657c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800657e:	2b05      	cmp	r3, #5
 8006580:	ddea      	ble.n	8006558 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8006582:	2490      	movs	r4, #144	@ 0x90
 8006584:	193b      	adds	r3, r7, r4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	211c      	movs	r1, #28
 800658c:	187b      	adds	r3, r7, r1
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	193b      	adds	r3, r7, r4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3301      	adds	r3, #1
 8006596:	781a      	ldrb	r2, [r3, #0]
 8006598:	187b      	adds	r3, r7, r1
 800659a:	705a      	strb	r2, [r3, #1]
 800659c:	187b      	adds	r3, r7, r1
 800659e:	2200      	movs	r2, #0
 80065a0:	709a      	strb	r2, [r3, #2]
 80065a2:	187b      	adds	r3, r7, r1
 80065a4:	220a      	movs	r2, #10
 80065a6:	2100      	movs	r1, #0
 80065a8:	0018      	movs	r0, r3
 80065aa:	f005 ff4b 	bl	800c444 <strtol>
 80065ae:	0003      	movs	r3, r0
 80065b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80065b2:	193b      	adds	r3, r7, r4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3302      	adds	r3, #2
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	2118      	movs	r1, #24
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	193b      	adds	r3, r7, r4
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3303      	adds	r3, #3
 80065c6:	781a      	ldrb	r2, [r3, #0]
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	705a      	strb	r2, [r3, #1]
 80065cc:	187b      	adds	r3, r7, r1
 80065ce:	2200      	movs	r2, #0
 80065d0:	709a      	strb	r2, [r3, #2]
 80065d2:	187b      	adds	r3, r7, r1
 80065d4:	220a      	movs	r2, #10
 80065d6:	2100      	movs	r1, #0
 80065d8:	0018      	movs	r0, r3
 80065da:	f005 ff33 	bl	800c444 <strtol>
 80065de:	0003      	movs	r3, r0
 80065e0:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 80065e2:	193b      	adds	r3, r7, r4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3304      	adds	r3, #4
 80065e8:	781a      	ldrb	r2, [r3, #0]
 80065ea:	2114      	movs	r1, #20
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	193b      	adds	r3, r7, r4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3305      	adds	r3, #5
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	187b      	adds	r3, r7, r1
 80065fa:	705a      	strb	r2, [r3, #1]
 80065fc:	187b      	adds	r3, r7, r1
 80065fe:	2200      	movs	r2, #0
 8006600:	709a      	strb	r2, [r3, #2]
 8006602:	187b      	adds	r3, r7, r1
 8006604:	220a      	movs	r2, #10
 8006606:	2100      	movs	r1, #0
 8006608:	0018      	movs	r0, r3
 800660a:	f005 ff1b 	bl	800c444 <strtol>
 800660e:	0003      	movs	r3, r0
 8006610:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006616:	601a      	str	r2, [r3, #0]
                date->month = m;
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800661c:	605a      	str	r2, [r3, #4]
                date->year = y;
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006622:	609a      	str	r2, [r3, #8]
            } break;
 8006624:	e0cc      	b.n	80067c0 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	1d1a      	adds	r2, r3, #4
 800662a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8006630:	2301      	movs	r3, #1
 8006632:	425b      	negs	r3, r3
 8006634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006636:	2301      	movs	r3, #1
 8006638:	425b      	negs	r3, r3
 800663a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800663c:	2301      	movs	r3, #1
 800663e:	425b      	negs	r3, r3
 8006640:	657b      	str	r3, [r7, #84]	@ 0x54
 8006642:	2301      	movs	r3, #1
 8006644:	425b      	negs	r3, r3
 8006646:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8006648:	2290      	movs	r2, #144	@ 0x90
 800664a:	18bb      	adds	r3, r7, r2
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d100      	bne.n	8006654 <minmea_scan+0x518>
 8006652:	e0a7      	b.n	80067a4 <minmea_scan+0x668>
 8006654:	18bb      	adds	r3, r7, r2
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	0018      	movs	r0, r3
 800665c:	f7ff fd48 	bl	80060f0 <minmea_isfield>
 8006660:	1e03      	subs	r3, r0, #0
 8006662:	d100      	bne.n	8006666 <minmea_scan+0x52a>
 8006664:	e09e      	b.n	80067a4 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 8006666:	2300      	movs	r3, #0
 8006668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800666a:	e011      	b.n	8006690 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 800666c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800666e:	2290      	movs	r2, #144	@ 0x90
 8006670:	18ba      	adds	r2, r7, r2
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	18d3      	adds	r3, r2, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	4b76      	ldr	r3, [pc, #472]	@ (8006854 <minmea_scan+0x718>)
 800667c:	18d3      	adds	r3, r2, r3
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	001a      	movs	r2, r3
 8006682:	2304      	movs	r3, #4
 8006684:	4013      	ands	r3, r2
 8006686:	d100      	bne.n	800668a <minmea_scan+0x54e>
 8006688:	e0d9      	b.n	800683e <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 800668a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800668c:	3301      	adds	r3, #1
 800668e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006692:	2b05      	cmp	r3, #5
 8006694:	ddea      	ble.n	800666c <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8006696:	2490      	movs	r4, #144	@ 0x90
 8006698:	193b      	adds	r3, r7, r4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	2110      	movs	r1, #16
 80066a0:	187b      	adds	r3, r7, r1
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	193b      	adds	r3, r7, r4
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	187b      	adds	r3, r7, r1
 80066ae:	705a      	strb	r2, [r3, #1]
 80066b0:	187b      	adds	r3, r7, r1
 80066b2:	2200      	movs	r2, #0
 80066b4:	709a      	strb	r2, [r3, #2]
 80066b6:	187b      	adds	r3, r7, r1
 80066b8:	220a      	movs	r2, #10
 80066ba:	2100      	movs	r1, #0
 80066bc:	0018      	movs	r0, r3
 80066be:	f005 fec1 	bl	800c444 <strtol>
 80066c2:	0003      	movs	r3, r0
 80066c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80066c6:	193b      	adds	r3, r7, r4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3302      	adds	r3, #2
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	210c      	movs	r1, #12
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	193b      	adds	r3, r7, r4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3303      	adds	r3, #3
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	187b      	adds	r3, r7, r1
 80066de:	705a      	strb	r2, [r3, #1]
 80066e0:	187b      	adds	r3, r7, r1
 80066e2:	2200      	movs	r2, #0
 80066e4:	709a      	strb	r2, [r3, #2]
 80066e6:	187b      	adds	r3, r7, r1
 80066e8:	220a      	movs	r2, #10
 80066ea:	2100      	movs	r1, #0
 80066ec:	0018      	movs	r0, r3
 80066ee:	f005 fea9 	bl	800c444 <strtol>
 80066f2:	0003      	movs	r3, r0
 80066f4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 80066f6:	193b      	adds	r3, r7, r4
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3304      	adds	r3, #4
 80066fc:	781a      	ldrb	r2, [r3, #0]
 80066fe:	2108      	movs	r1, #8
 8006700:	187b      	adds	r3, r7, r1
 8006702:	701a      	strb	r2, [r3, #0]
 8006704:	193b      	adds	r3, r7, r4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3305      	adds	r3, #5
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	187b      	adds	r3, r7, r1
 800670e:	705a      	strb	r2, [r3, #1]
 8006710:	187b      	adds	r3, r7, r1
 8006712:	2200      	movs	r2, #0
 8006714:	709a      	strb	r2, [r3, #2]
 8006716:	187b      	adds	r3, r7, r1
 8006718:	220a      	movs	r2, #10
 800671a:	2100      	movs	r1, #0
 800671c:	0018      	movs	r0, r3
 800671e:	f005 fe91 	bl	800c444 <strtol>
 8006722:	0003      	movs	r3, r0
 8006724:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8006726:	193b      	adds	r3, r7, r4
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3306      	adds	r3, #6
 800672c:	193a      	adds	r2, r7, r4
 800672e:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8006730:	193b      	adds	r3, r7, r4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	1939      	adds	r1, r7, r4
 8006738:	600a      	str	r2, [r1, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b2e      	cmp	r3, #46	@ 0x2e
 800673e:	d12f      	bne.n	80067a0 <minmea_scan+0x664>
                        int value = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8006744:	4b44      	ldr	r3, [pc, #272]	@ (8006858 <minmea_scan+0x71c>)
 8006746:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8006748:	e016      	b.n	8006778 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 800674a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800674c:	0013      	movs	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	189b      	adds	r3, r3, r2
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	0019      	movs	r1, r3
 8006756:	2090      	movs	r0, #144	@ 0x90
 8006758:	183b      	adds	r3, r7, r0
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	1838      	adds	r0, r7, r0
 8006760:	6002      	str	r2, [r0, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	3b30      	subs	r3, #48	@ 0x30
 8006766:	18cb      	adds	r3, r1, r3
 8006768:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 800676a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800676c:	210a      	movs	r1, #10
 800676e:	0018      	movs	r0, r3
 8006770:	f7f9 fd66 	bl	8000240 <__divsi3>
 8006774:	0003      	movs	r3, r0
 8006776:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8006778:	2390      	movs	r3, #144	@ 0x90
 800677a:	18fb      	adds	r3, r7, r3
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	4b34      	ldr	r3, [pc, #208]	@ (8006854 <minmea_scan+0x718>)
 8006784:	18d3      	adds	r3, r2, r3
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	001a      	movs	r2, r3
 800678a:	2304      	movs	r3, #4
 800678c:	4013      	ands	r3, r2
 800678e:	d002      	beq.n	8006796 <minmea_scan+0x65a>
 8006790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006792:	2b01      	cmp	r3, #1
 8006794:	dcd9      	bgt.n	800674a <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8006796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800679a:	4353      	muls	r3, r2
 800679c:	653b      	str	r3, [r7, #80]	@ 0x50
 800679e:	e001      	b.n	80067a4 <minmea_scan+0x668>
                    } else {
                        u = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 80067a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80067a8:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067ae:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067b4:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 80067b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067ba:	60da      	str	r2, [r3, #12]
            } break;
 80067bc:	e000      	b.n	80067c0 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 80067be:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 80067c0:	e002      	b.n	80067c8 <minmea_scan+0x68c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3301      	adds	r3, #1
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	0018      	movs	r0, r3
 80067ce:	f7ff fc8f 	bl	80060f0 <minmea_isfield>
 80067d2:	1e03      	subs	r3, r0, #0
 80067d4:	d1f5      	bne.n	80067c2 <minmea_scan+0x686>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b2c      	cmp	r3, #44	@ 0x2c
 80067dc:	d107      	bne.n	80067ee <minmea_scan+0x6b2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3301      	adds	r3, #1
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2290      	movs	r2, #144	@ 0x90
 80067e8:	18ba      	adds	r2, r7, r2
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e003      	b.n	80067f6 <minmea_scan+0x6ba>
 80067ee:	2300      	movs	r3, #0
 80067f0:	2290      	movs	r2, #144	@ 0x90
 80067f2:	18ba      	adds	r2, r7, r2
 80067f4:	6013      	str	r3, [r2, #0]
    while (*format) {
 80067f6:	23a4      	movs	r3, #164	@ 0xa4
 80067f8:	2208      	movs	r2, #8
 80067fa:	189b      	adds	r3, r3, r2
 80067fc:	19db      	adds	r3, r3, r7
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d000      	beq.n	8006808 <minmea_scan+0x6cc>
 8006806:	e4b0      	b.n	800616a <minmea_scan+0x2e>
    }

    result = true;
 8006808:	2397      	movs	r3, #151	@ 0x97
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e016      	b.n	8006840 <minmea_scan+0x704>
            goto parse_error;
 8006812:	46c0      	nop			@ (mov r8, r8)
 8006814:	e014      	b.n	8006840 <minmea_scan+0x704>
                goto parse_error;
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	e012      	b.n	8006840 <minmea_scan+0x704>
                            goto parse_error;
 800681a:	46c0      	nop			@ (mov r8, r8)
 800681c:	e010      	b.n	8006840 <minmea_scan+0x704>
                                    goto parse_error;
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	e00e      	b.n	8006840 <minmea_scan+0x704>
                            goto parse_error;
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	e00c      	b.n	8006840 <minmea_scan+0x704>
                    goto parse_error;
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	e00a      	b.n	8006840 <minmea_scan+0x704>
                        goto parse_error;
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	e008      	b.n	8006840 <minmea_scan+0x704>
                    goto parse_error;
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	e006      	b.n	8006840 <minmea_scan+0x704>
                    goto parse_error;
 8006832:	46c0      	nop			@ (mov r8, r8)
 8006834:	e004      	b.n	8006840 <minmea_scan+0x704>
                        goto parse_error;
 8006836:	46c0      	nop			@ (mov r8, r8)
 8006838:	e002      	b.n	8006840 <minmea_scan+0x704>
                            goto parse_error;
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	e000      	b.n	8006840 <minmea_scan+0x704>
                            goto parse_error;
 800683e:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8006840:	2397      	movs	r3, #151	@ 0x97
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	781b      	ldrb	r3, [r3, #0]
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	b027      	add	sp, #156	@ 0x9c
 800684c:	bcb0      	pop	{r4, r5, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	b003      	add	sp, #12
 8006852:	4718      	bx	r3
 8006854:	0800da14 	.word	0x0800da14
 8006858:	000f4240 	.word	0x000f4240

0800685c <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 800685c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685e:	46de      	mov	lr, fp
 8006860:	4657      	mov	r7, sl
 8006862:	464e      	mov	r6, r9
 8006864:	4645      	mov	r5, r8
 8006866:	b5e0      	push	{r5, r6, r7, lr}
 8006868:	b097      	sub	sp, #92	@ 0x5c
 800686a:	af0c      	add	r7, sp, #48	@ 0x30
 800686c:	6178      	str	r0, [r7, #20]
 800686e:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	001a      	movs	r2, r3
 8006878:	3210      	adds	r2, #16
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	0019      	movs	r1, r3
 800687e:	3118      	adds	r1, #24
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	001c      	movs	r4, r3
 8006884:	3420      	adds	r4, #32
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	001d      	movs	r5, r3
 800688a:	3524      	adds	r5, #36	@ 0x24
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	001e      	movs	r6, r3
 8006890:	3628      	adds	r6, #40	@ 0x28
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2030      	movs	r0, #48	@ 0x30
 8006896:	4684      	mov	ip, r0
 8006898:	449c      	add	ip, r3
 800689a:	4663      	mov	r3, ip
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2038      	movs	r0, #56	@ 0x38
 80068a2:	4680      	mov	r8, r0
 80068a4:	4498      	add	r8, r3
 80068a6:	4643      	mov	r3, r8
 80068a8:	603b      	str	r3, [r7, #0]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	203c      	movs	r0, #60	@ 0x3c
 80068ae:	4681      	mov	r9, r0
 80068b0:	4499      	add	r9, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2044      	movs	r0, #68	@ 0x44
 80068b6:	4682      	mov	sl, r0
 80068b8:	449a      	add	sl, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	3348      	adds	r3, #72	@ 0x48
 80068be:	2010      	movs	r0, #16
 80068c0:	4683      	mov	fp, r0
 80068c2:	2008      	movs	r0, #8
 80068c4:	4684      	mov	ip, r0
 80068c6:	2008      	movs	r0, #8
 80068c8:	4680      	mov	r8, r0
 80068ca:	44b8      	add	r8, r7
 80068cc:	44c4      	add	ip, r8
 80068ce:	44e3      	add	fp, ip
 80068d0:	4658      	mov	r0, fp
 80068d2:	60b8      	str	r0, [r7, #8]
 80068d4:	482a      	ldr	r0, [pc, #168]	@ (8006980 <minmea_parse_gga+0x124>)
 80068d6:	4683      	mov	fp, r0
 80068d8:	6938      	ldr	r0, [r7, #16]
 80068da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068dc:	4653      	mov	r3, sl
 80068de:	930a      	str	r3, [sp, #40]	@ 0x28
 80068e0:	464b      	mov	r3, r9
 80068e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	9308      	str	r3, [sp, #32]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	9606      	str	r6, [sp, #24]
 80068ee:	9505      	str	r5, [sp, #20]
 80068f0:	9404      	str	r4, [sp, #16]
 80068f2:	2408      	movs	r4, #8
 80068f4:	2508      	movs	r5, #8
 80068f6:	1963      	adds	r3, r4, r5
 80068f8:	2408      	movs	r4, #8
 80068fa:	46a4      	mov	ip, r4
 80068fc:	44bc      	add	ip, r7
 80068fe:	4463      	add	r3, ip
 8006900:	9303      	str	r3, [sp, #12]
 8006902:	9102      	str	r1, [sp, #8]
 8006904:	210c      	movs	r1, #12
 8006906:	194b      	adds	r3, r1, r5
 8006908:	2108      	movs	r1, #8
 800690a:	468c      	mov	ip, r1
 800690c:	44bc      	add	ip, r7
 800690e:	4463      	add	r3, ip
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	9200      	str	r2, [sp, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4659      	mov	r1, fp
 800691a:	f7ff fc0f 	bl	800613c <minmea_scan>
 800691e:	0003      	movs	r3, r0
 8006920:	001a      	movs	r2, r3
 8006922:	2301      	movs	r3, #1
 8006924:	4053      	eors	r3, r2
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 800692c:	2300      	movs	r3, #0
 800692e:	e01d      	b.n	800696c <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8006930:	2310      	movs	r3, #16
 8006932:	2208      	movs	r2, #8
 8006934:	189b      	adds	r3, r3, r2
 8006936:	2208      	movs	r2, #8
 8006938:	4694      	mov	ip, r2
 800693a:	44bc      	add	ip, r7
 800693c:	4463      	add	r3, ip
 800693e:	3302      	adds	r3, #2
 8006940:	4a10      	ldr	r2, [pc, #64]	@ (8006984 <minmea_parse_gga+0x128>)
 8006942:	0011      	movs	r1, r2
 8006944:	0018      	movs	r0, r3
 8006946:	f7f9 fbdd 	bl	8000104 <strcmp>
 800694a:	1e03      	subs	r3, r0, #0
 800694c:	d001      	beq.n	8006952 <minmea_parse_gga+0xf6>
        return false;
 800694e:	2300      	movs	r3, #0
 8006950:	e00c      	b.n	800696c <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	435a      	muls	r2, r3
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	435a      	muls	r2, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	619a      	str	r2, [r3, #24]

    return true;
 800696a:	2301      	movs	r3, #1
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b00b      	add	sp, #44	@ 0x2c
 8006972:	bcf0      	pop	{r4, r5, r6, r7}
 8006974:	46bb      	mov	fp, r7
 8006976:	46b2      	mov	sl, r6
 8006978:	46a9      	mov	r9, r5
 800697a:	46a0      	mov	r8, r4
 800697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	0800d1e4 	.word	0x0800d1e4
 8006984:	0800d1c4 	.word	0x0800d1c4

08006988 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800698e:	4b11      	ldr	r3, [pc, #68]	@ (80069d4 <HAL_MspInit+0x4c>)
 8006990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006992:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <HAL_MspInit+0x4c>)
 8006994:	2101      	movs	r1, #1
 8006996:	430a      	orrs	r2, r1
 8006998:	641a      	str	r2, [r3, #64]	@ 0x40
 800699a:	4b0e      	ldr	r3, [pc, #56]	@ (80069d4 <HAL_MspInit+0x4c>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	2201      	movs	r2, #1
 80069a0:	4013      	ands	r3, r2
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069a6:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <HAL_MspInit+0x4c>)
 80069a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069aa:	4b0a      	ldr	r3, [pc, #40]	@ (80069d4 <HAL_MspInit+0x4c>)
 80069ac:	2180      	movs	r1, #128	@ 0x80
 80069ae:	0549      	lsls	r1, r1, #21
 80069b0:	430a      	orrs	r2, r1
 80069b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80069b4:	4b07      	ldr	r3, [pc, #28]	@ (80069d4 <HAL_MspInit+0x4c>)
 80069b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069b8:	2380      	movs	r3, #128	@ 0x80
 80069ba:	055b      	lsls	r3, r3, #21
 80069bc:	4013      	ands	r3, r2
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80069c2:	23c0      	movs	r3, #192	@ 0xc0
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	0018      	movs	r0, r3
 80069c8:	f000 fb76 	bl	80070b8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069cc:	46c0      	nop			@ (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b002      	add	sp, #8
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000

080069d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b09d      	sub	sp, #116	@ 0x74
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e0:	235c      	movs	r3, #92	@ 0x5c
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	0018      	movs	r0, r3
 80069e6:	2314      	movs	r3, #20
 80069e8:	001a      	movs	r2, r3
 80069ea:	2100      	movs	r1, #0
 80069ec:	f005 fd58 	bl	800c4a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80069f0:	2410      	movs	r4, #16
 80069f2:	193b      	adds	r3, r7, r4
 80069f4:	0018      	movs	r0, r3
 80069f6:	234c      	movs	r3, #76	@ 0x4c
 80069f8:	001a      	movs	r2, r3
 80069fa:	2100      	movs	r1, #0
 80069fc:	f005 fd50 	bl	800c4a0 <memset>
  if(hi2c->Instance==I2C1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a23      	ldr	r2, [pc, #140]	@ (8006a94 <HAL_I2C_MspInit+0xbc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d13f      	bne.n	8006a8a <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006a10:	193b      	adds	r3, r7, r4
 8006a12:	2200      	movs	r2, #0
 8006a14:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006a16:	193b      	adds	r3, r7, r4
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f002 f9b5 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8006a1e:	1e03      	subs	r3, r0, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006a22:	f7ff fb5f 	bl	80060e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a26:	4b1c      	ldr	r3, [pc, #112]	@ (8006a98 <HAL_I2C_MspInit+0xc0>)
 8006a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <HAL_I2C_MspInit+0xc0>)
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a32:	4b19      	ldr	r3, [pc, #100]	@ (8006a98 <HAL_I2C_MspInit+0xc0>)
 8006a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a36:	2201      	movs	r2, #1
 8006a38:	4013      	ands	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006a3e:	215c      	movs	r1, #92	@ 0x5c
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	22c0      	movs	r2, #192	@ 0xc0
 8006a44:	00d2      	lsls	r2, r2, #3
 8006a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006a48:	187b      	adds	r3, r7, r1
 8006a4a:	2212      	movs	r2, #18
 8006a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4e:	187b      	adds	r3, r7, r1
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a54:	187b      	adds	r3, r7, r1
 8006a56:	2200      	movs	r2, #0
 8006a58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006a5a:	187b      	adds	r3, r7, r1
 8006a5c:	2206      	movs	r2, #6
 8006a5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a60:	187a      	adds	r2, r7, r1
 8006a62:	23a0      	movs	r3, #160	@ 0xa0
 8006a64:	05db      	lsls	r3, r3, #23
 8006a66:	0011      	movs	r1, r2
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 fc19 	bl	80072a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a98 <HAL_I2C_MspInit+0xc0>)
 8006a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a72:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <HAL_I2C_MspInit+0xc0>)
 8006a74:	2180      	movs	r1, #128	@ 0x80
 8006a76:	0389      	lsls	r1, r1, #14
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <HAL_I2C_MspInit+0xc0>)
 8006a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a80:	2380      	movs	r3, #128	@ 0x80
 8006a82:	039b      	lsls	r3, r3, #14
 8006a84:	4013      	ands	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006a8a:	46c0      	nop			@ (mov r8, r8)
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b01d      	add	sp, #116	@ 0x74
 8006a90:	bd90      	pop	{r4, r7, pc}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	40005400 	.word	0x40005400
 8006a98:	40021000 	.word	0x40021000

08006a9c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006a9c:	b590      	push	{r4, r7, lr}
 8006a9e:	b097      	sub	sp, #92	@ 0x5c
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006aa4:	240c      	movs	r4, #12
 8006aa6:	193b      	adds	r3, r7, r4
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	234c      	movs	r3, #76	@ 0x4c
 8006aac:	001a      	movs	r2, r3
 8006aae:	2100      	movs	r1, #0
 8006ab0:	f005 fcf6 	bl	800c4a0 <memset>
  if(hrtc->Instance==RTC)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a19      	ldr	r2, [pc, #100]	@ (8006b20 <HAL_RTC_MspInit+0x84>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d12c      	bne.n	8006b18 <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006abe:	193b      	adds	r3, r7, r4
 8006ac0:	2280      	movs	r2, #128	@ 0x80
 8006ac2:	0292      	lsls	r2, r2, #10
 8006ac4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006ac6:	193b      	adds	r3, r7, r4
 8006ac8:	2280      	movs	r2, #128	@ 0x80
 8006aca:	0092      	lsls	r2, r2, #2
 8006acc:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ace:	193b      	adds	r3, r7, r4
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f002 f959 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8006ad6:	1e03      	subs	r3, r0, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006ada:	f7ff fb03 	bl	80060e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006ade:	4b11      	ldr	r3, [pc, #68]	@ (8006b24 <HAL_RTC_MspInit+0x88>)
 8006ae0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ae2:	4b10      	ldr	r3, [pc, #64]	@ (8006b24 <HAL_RTC_MspInit+0x88>)
 8006ae4:	2180      	movs	r1, #128	@ 0x80
 8006ae6:	0209      	lsls	r1, r1, #8
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006aec:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <HAL_RTC_MspInit+0x88>)
 8006aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006af0:	4b0c      	ldr	r3, [pc, #48]	@ (8006b24 <HAL_RTC_MspInit+0x88>)
 8006af2:	2180      	movs	r1, #128	@ 0x80
 8006af4:	00c9      	lsls	r1, r1, #3
 8006af6:	430a      	orrs	r2, r1
 8006af8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006afa:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <HAL_RTC_MspInit+0x88>)
 8006afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006afe:	2380      	movs	r3, #128	@ 0x80
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	4013      	ands	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	2002      	movs	r0, #2
 8006b0e:	f000 fb95 	bl	800723c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8006b12:	2002      	movs	r0, #2
 8006b14:	f000 fba7 	bl	8007266 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8006b18:	46c0      	nop			@ (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b017      	add	sp, #92	@ 0x5c
 8006b1e:	bd90      	pop	{r4, r7, pc}
 8006b20:	40002800 	.word	0x40002800
 8006b24:	40021000 	.word	0x40021000

08006b28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b08b      	sub	sp, #44	@ 0x2c
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b30:	2414      	movs	r4, #20
 8006b32:	193b      	adds	r3, r7, r4
 8006b34:	0018      	movs	r0, r3
 8006b36:	2314      	movs	r3, #20
 8006b38:	001a      	movs	r2, r3
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	f005 fcb0 	bl	800c4a0 <memset>
  if(hspi->Instance==SPI1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a2c      	ldr	r2, [pc, #176]	@ (8006bf8 <HAL_SPI_MspInit+0xd0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d151      	bne.n	8006bee <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b50:	2180      	movs	r1, #128	@ 0x80
 8006b52:	0149      	lsls	r1, r1, #5
 8006b54:	430a      	orrs	r2, r1
 8006b56:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b58:	4b28      	ldr	r3, [pc, #160]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b5c:	2380      	movs	r3, #128	@ 0x80
 8006b5e:	015b      	lsls	r3, r3, #5
 8006b60:	4013      	ands	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b66:	4b25      	ldr	r3, [pc, #148]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b6a:	4b24      	ldr	r3, [pc, #144]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b72:	4b22      	ldr	r3, [pc, #136]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b76:	2201      	movs	r2, #1
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b82:	4b1e      	ldr	r3, [pc, #120]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b84:	2108      	movs	r1, #8
 8006b86:	430a      	orrs	r2, r1
 8006b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006bfc <HAL_SPI_MspInit+0xd4>)
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8e:	2208      	movs	r2, #8
 8006b90:	4013      	ands	r3, r2
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006b96:	193b      	adds	r3, r7, r4
 8006b98:	2202      	movs	r2, #2
 8006b9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b9c:	193b      	adds	r3, r7, r4
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba2:	193b      	adds	r3, r7, r4
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba8:	193b      	adds	r3, r7, r4
 8006baa:	2200      	movs	r2, #0
 8006bac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006bae:	193b      	adds	r3, r7, r4
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb4:	193a      	adds	r2, r7, r4
 8006bb6:	23a0      	movs	r3, #160	@ 0xa0
 8006bb8:	05db      	lsls	r3, r3, #23
 8006bba:	0011      	movs	r1, r2
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f000 fb6f 	bl	80072a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006bc2:	0021      	movs	r1, r4
 8006bc4:	187b      	adds	r3, r7, r1
 8006bc6:	2260      	movs	r2, #96	@ 0x60
 8006bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bca:	187b      	adds	r3, r7, r1
 8006bcc:	2202      	movs	r2, #2
 8006bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd0:	187b      	adds	r3, r7, r1
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd6:	187b      	adds	r3, r7, r1
 8006bd8:	2200      	movs	r2, #0
 8006bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	2201      	movs	r2, #1
 8006be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006be2:	187b      	adds	r3, r7, r1
 8006be4:	4a06      	ldr	r2, [pc, #24]	@ (8006c00 <HAL_SPI_MspInit+0xd8>)
 8006be6:	0019      	movs	r1, r3
 8006be8:	0010      	movs	r0, r2
 8006bea:	f000 fb59 	bl	80072a0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b00b      	add	sp, #44	@ 0x2c
 8006bf4:	bd90      	pop	{r4, r7, pc}
 8006bf6:	46c0      	nop			@ (mov r8, r8)
 8006bf8:	40013000 	.word	0x40013000
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	50000c00 	.word	0x50000c00

08006c04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a0a      	ldr	r2, [pc, #40]	@ (8006c3c <HAL_TIM_Base_MspInit+0x38>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d10d      	bne.n	8006c32 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <HAL_TIM_Base_MspInit+0x3c>)
 8006c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c1a:	4b09      	ldr	r3, [pc, #36]	@ (8006c40 <HAL_TIM_Base_MspInit+0x3c>)
 8006c1c:	2180      	movs	r1, #128	@ 0x80
 8006c1e:	02c9      	lsls	r1, r1, #11
 8006c20:	430a      	orrs	r2, r1
 8006c22:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c24:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <HAL_TIM_Base_MspInit+0x3c>)
 8006c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c28:	2380      	movs	r3, #128	@ 0x80
 8006c2a:	02db      	lsls	r3, r3, #11
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8006c32:	46c0      	nop			@ (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b004      	add	sp, #16
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	40014800 	.word	0x40014800
 8006c40:	40021000 	.word	0x40021000

08006c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b089      	sub	sp, #36	@ 0x24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c4c:	240c      	movs	r4, #12
 8006c4e:	193b      	adds	r3, r7, r4
 8006c50:	0018      	movs	r0, r3
 8006c52:	2314      	movs	r3, #20
 8006c54:	001a      	movs	r2, r3
 8006c56:	2100      	movs	r1, #0
 8006c58:	f005 fc22 	bl	800c4a0 <memset>
  if(htim->Instance==TIM17)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a14      	ldr	r2, [pc, #80]	@ (8006cb4 <HAL_TIM_MspPostInit+0x70>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d122      	bne.n	8006cac <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c66:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <HAL_TIM_MspPostInit+0x74>)
 8006c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c6a:	4b13      	ldr	r3, [pc, #76]	@ (8006cb8 <HAL_TIM_MspPostInit+0x74>)
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c72:	4b11      	ldr	r3, [pc, #68]	@ (8006cb8 <HAL_TIM_MspPostInit+0x74>)
 8006c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c76:	2201      	movs	r2, #1
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60bb      	str	r3, [r7, #8]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006c7e:	0021      	movs	r1, r4
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	2280      	movs	r2, #128	@ 0x80
 8006c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c86:	187b      	adds	r3, r7, r1
 8006c88:	2202      	movs	r2, #2
 8006c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8c:	187b      	adds	r3, r7, r1
 8006c8e:	2200      	movs	r2, #0
 8006c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c92:	187b      	adds	r3, r7, r1
 8006c94:	2200      	movs	r2, #0
 8006c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8006c98:	187b      	adds	r3, r7, r1
 8006c9a:	2205      	movs	r2, #5
 8006c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c9e:	187a      	adds	r2, r7, r1
 8006ca0:	23a0      	movs	r3, #160	@ 0xa0
 8006ca2:	05db      	lsls	r3, r3, #23
 8006ca4:	0011      	movs	r1, r2
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 fafa 	bl	80072a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8006cac:	46c0      	nop			@ (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b009      	add	sp, #36	@ 0x24
 8006cb2:	bd90      	pop	{r4, r7, pc}
 8006cb4:	40014800 	.word	0x40014800
 8006cb8:	40021000 	.word	0x40021000

08006cbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b09f      	sub	sp, #124	@ 0x7c
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc4:	2364      	movs	r3, #100	@ 0x64
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	0018      	movs	r0, r3
 8006cca:	2314      	movs	r3, #20
 8006ccc:	001a      	movs	r2, r3
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f005 fbe6 	bl	800c4a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006cd4:	2418      	movs	r4, #24
 8006cd6:	193b      	adds	r3, r7, r4
 8006cd8:	0018      	movs	r0, r3
 8006cda:	234c      	movs	r3, #76	@ 0x4c
 8006cdc:	001a      	movs	r2, r3
 8006cde:	2100      	movs	r1, #0
 8006ce0:	f005 fbde 	bl	800c4a0 <memset>
  if(huart->Instance==USART1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a45      	ldr	r2, [pc, #276]	@ (8006e00 <HAL_UART_MspInit+0x144>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d13e      	bne.n	8006d6c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006cee:	193b      	adds	r3, r7, r4
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006cf4:	193b      	adds	r3, r7, r4
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f002 f843 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8006d02:	1e03      	subs	r3, r0, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006d06:	f7ff f9ed 	bl	80060e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d10:	2180      	movs	r1, #128	@ 0x80
 8006d12:	01c9      	lsls	r1, r1, #7
 8006d14:	430a      	orrs	r2, r1
 8006d16:	641a      	str	r2, [r3, #64]	@ 0x40
 8006d18:	4b3a      	ldr	r3, [pc, #232]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d1c:	2380      	movs	r3, #128	@ 0x80
 8006d1e:	01db      	lsls	r3, r3, #7
 8006d20:	4013      	ands	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d26:	4b37      	ldr	r3, [pc, #220]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d2a:	4b36      	ldr	r3, [pc, #216]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	635a      	str	r2, [r3, #52]	@ 0x34
 8006d32:	4b34      	ldr	r3, [pc, #208]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d36:	2204      	movs	r2, #4
 8006d38:	4013      	ands	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006d3e:	2164      	movs	r1, #100	@ 0x64
 8006d40:	187b      	adds	r3, r7, r1
 8006d42:	2230      	movs	r2, #48	@ 0x30
 8006d44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d46:	187b      	adds	r3, r7, r1
 8006d48:	2202      	movs	r2, #2
 8006d4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d4c:	187b      	adds	r3, r7, r1
 8006d4e:	2200      	movs	r2, #0
 8006d50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d52:	187b      	adds	r3, r7, r1
 8006d54:	2200      	movs	r2, #0
 8006d56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d5e:	187b      	adds	r3, r7, r1
 8006d60:	4a29      	ldr	r2, [pc, #164]	@ (8006e08 <HAL_UART_MspInit+0x14c>)
 8006d62:	0019      	movs	r1, r3
 8006d64:	0010      	movs	r0, r2
 8006d66:	f000 fa9b 	bl	80072a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8006d6a:	e044      	b.n	8006df6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a26      	ldr	r2, [pc, #152]	@ (8006e0c <HAL_UART_MspInit+0x150>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d13f      	bne.n	8006df6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006d76:	2118      	movs	r1, #24
 8006d78:	187b      	adds	r3, r7, r1
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006d7e:	187b      	adds	r3, r7, r1
 8006d80:	2200      	movs	r2, #0
 8006d82:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006d84:	187b      	adds	r3, r7, r1
 8006d86:	0018      	movs	r0, r3
 8006d88:	f001 fffe 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8006d8c:	1e03      	subs	r3, r0, #0
 8006d8e:	d001      	beq.n	8006d94 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8006d90:	f7ff f9a8 	bl	80060e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006d94:	4b1b      	ldr	r3, [pc, #108]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d98:	4b1a      	ldr	r3, [pc, #104]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006d9a:	2180      	movs	r1, #128	@ 0x80
 8006d9c:	0289      	lsls	r1, r1, #10
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006da2:	4b18      	ldr	r3, [pc, #96]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006da6:	2380      	movs	r3, #128	@ 0x80
 8006da8:	029b      	lsls	r3, r3, #10
 8006daa:	4013      	ands	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db0:	4b14      	ldr	r3, [pc, #80]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006db4:	4b13      	ldr	r3, [pc, #76]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006db6:	2101      	movs	r1, #1
 8006db8:	430a      	orrs	r2, r1
 8006dba:	635a      	str	r2, [r3, #52]	@ 0x34
 8006dbc:	4b11      	ldr	r3, [pc, #68]	@ (8006e04 <HAL_UART_MspInit+0x148>)
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006dc8:	2164      	movs	r1, #100	@ 0x64
 8006dca:	187b      	adds	r3, r7, r1
 8006dcc:	220c      	movs	r2, #12
 8006dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd0:	187b      	adds	r3, r7, r1
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd6:	187b      	adds	r3, r7, r1
 8006dd8:	2200      	movs	r2, #0
 8006dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ddc:	187b      	adds	r3, r7, r1
 8006dde:	2200      	movs	r2, #0
 8006de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006de2:	187b      	adds	r3, r7, r1
 8006de4:	2201      	movs	r2, #1
 8006de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de8:	187a      	adds	r2, r7, r1
 8006dea:	23a0      	movs	r3, #160	@ 0xa0
 8006dec:	05db      	lsls	r3, r3, #23
 8006dee:	0011      	movs	r1, r2
 8006df0:	0018      	movs	r0, r3
 8006df2:	f000 fa55 	bl	80072a0 <HAL_GPIO_Init>
}
 8006df6:	46c0      	nop			@ (mov r8, r8)
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	b01f      	add	sp, #124	@ 0x7c
 8006dfc:	bd90      	pop	{r4, r7, pc}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	40013800 	.word	0x40013800
 8006e04:	40021000 	.word	0x40021000
 8006e08:	50000800 	.word	0x50000800
 8006e0c:	40004400 	.word	0x40004400

08006e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006e14:	46c0      	nop			@ (mov r8, r8)
 8006e16:	e7fd      	b.n	8006e14 <NMI_Handler+0x4>

08006e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e1c:	46c0      	nop			@ (mov r8, r8)
 8006e1e:	e7fd      	b.n	8006e1c <HardFault_Handler+0x4>

08006e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006e24:	46c0      	nop			@ (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e38:	f000 f8fe 	bl	8007038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e3c:	46c0      	nop			@ (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006e48:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <RTC_TAMP_IRQHandler+0x1c>)
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f002 fdba 	bl	80099c4 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006e50:	4b03      	ldr	r3, [pc, #12]	@ (8006e60 <RTC_TAMP_IRQHandler+0x1c>)
 8006e52:	0018      	movs	r0, r3
 8006e54:	f002 ff80 	bl	8009d58 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8006e58:	46c0      	nop			@ (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	20000d84 	.word	0x20000d84

08006e64 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006e68:	2002      	movs	r0, #2
 8006e6a:	f000 fbbf 	bl	80075ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8006e6e:	46c0      	nop			@ (mov r8, r8)
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006e78:	2004      	movs	r0, #4
 8006e7a:	f000 fbb7 	bl	80075ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006e88:	2380      	movs	r3, #128	@ 0x80
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f000 fbad 	bl	80075ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8006e92:	46c0      	nop			@ (mov r8, r8)
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ea0:	4a14      	ldr	r2, [pc, #80]	@ (8006ef4 <_sbrk+0x5c>)
 8006ea2:	4b15      	ldr	r3, [pc, #84]	@ (8006ef8 <_sbrk+0x60>)
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006eac:	4b13      	ldr	r3, [pc, #76]	@ (8006efc <_sbrk+0x64>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006eb4:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <_sbrk+0x64>)
 8006eb6:	4a12      	ldr	r2, [pc, #72]	@ (8006f00 <_sbrk+0x68>)
 8006eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006eba:	4b10      	ldr	r3, [pc, #64]	@ (8006efc <_sbrk+0x64>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	18d3      	adds	r3, r2, r3
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d207      	bcs.n	8006ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ec8:	f005 faf2 	bl	800c4b0 <__errno>
 8006ecc:	0003      	movs	r3, r0
 8006ece:	220c      	movs	r2, #12
 8006ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	425b      	negs	r3, r3
 8006ed6:	e009      	b.n	8006eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ed8:	4b08      	ldr	r3, [pc, #32]	@ (8006efc <_sbrk+0x64>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ede:	4b07      	ldr	r3, [pc, #28]	@ (8006efc <_sbrk+0x64>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	18d2      	adds	r2, r2, r3
 8006ee6:	4b05      	ldr	r3, [pc, #20]	@ (8006efc <_sbrk+0x64>)
 8006ee8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006eea:	68fb      	ldr	r3, [r7, #12]
}
 8006eec:	0018      	movs	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b006      	add	sp, #24
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20024000 	.word	0x20024000
 8006ef8:	00000400 	.word	0x00000400
 8006efc:	20000f88 	.word	0x20000f88
 8006f00:	200010d8 	.word	0x200010d8

08006f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f08:	46c0      	nop			@ (mov r8, r8)
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006f10:	480d      	ldr	r0, [pc, #52]	@ (8006f48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006f12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006f14:	f7ff fff6 	bl	8006f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f18:	480c      	ldr	r0, [pc, #48]	@ (8006f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8006f1a:	490d      	ldr	r1, [pc, #52]	@ (8006f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006f54 <LoopForever+0xe>)
  movs r3, #0
 8006f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f20:	e002      	b.n	8006f28 <LoopCopyDataInit>

08006f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f26:	3304      	adds	r3, #4

08006f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f2c:	d3f9      	bcc.n	8006f22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006f30:	4c0a      	ldr	r4, [pc, #40]	@ (8006f5c <LoopForever+0x16>)
  movs r3, #0
 8006f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f34:	e001      	b.n	8006f3a <LoopFillZerobss>

08006f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f38:	3204      	adds	r2, #4

08006f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f3c:	d3fb      	bcc.n	8006f36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006f3e:	f005 fabd 	bl	800c4bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006f42:	f7fd fc1b 	bl	800477c <main>

08006f46 <LoopForever>:

LoopForever:
  b LoopForever
 8006f46:	e7fe      	b.n	8006f46 <LoopForever>
  ldr   r0, =_estack
 8006f48:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8006f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f50:	20000a24 	.word	0x20000a24
  ldr r2, =_sidata
 8006f54:	0800db68 	.word	0x0800db68
  ldr r2, =_sbss
 8006f58:	20000a28 	.word	0x20000a28
  ldr r4, =_ebss
 8006f5c:	200010d8 	.word	0x200010d8

08006f60 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f60:	e7fe      	b.n	8006f60 <ADC1_COMP_IRQHandler>
	...

08006f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006f6a:	1dfb      	adds	r3, r7, #7
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f70:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa0 <HAL_Init+0x3c>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <HAL_Init+0x3c>)
 8006f76:	2180      	movs	r1, #128	@ 0x80
 8006f78:	0049      	lsls	r1, r1, #1
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006f7e:	2003      	movs	r0, #3
 8006f80:	f000 f810 	bl	8006fa4 <HAL_InitTick>
 8006f84:	1e03      	subs	r3, r0, #0
 8006f86:	d003      	beq.n	8006f90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006f88:	1dfb      	adds	r3, r7, #7
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e001      	b.n	8006f94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006f90:	f7ff fcfa 	bl	8006988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006f94:	1dfb      	adds	r3, r7, #7
 8006f96:	781b      	ldrb	r3, [r3, #0]
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b002      	add	sp, #8
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40022000 	.word	0x40022000

08006fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fa4:	b590      	push	{r4, r7, lr}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006fac:	230f      	movs	r3, #15
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800702c <HAL_InitTick+0x88>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d02b      	beq.n	8007014 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8007030 <HAL_InitTick+0x8c>)
 8006fbe:	681c      	ldr	r4, [r3, #0]
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800702c <HAL_InitTick+0x88>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	23fa      	movs	r3, #250	@ 0xfa
 8006fc8:	0098      	lsls	r0, r3, #2
 8006fca:	f7f9 f8af 	bl	800012c <__udivsi3>
 8006fce:	0003      	movs	r3, r0
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	0020      	movs	r0, r4
 8006fd4:	f7f9 f8aa 	bl	800012c <__udivsi3>
 8006fd8:	0003      	movs	r3, r0
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f000 f953 	bl	8007286 <HAL_SYSTICK_Config>
 8006fe0:	1e03      	subs	r3, r0, #0
 8006fe2:	d112      	bne.n	800700a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d80a      	bhi.n	8007000 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	2301      	movs	r3, #1
 8006fee:	425b      	negs	r3, r3
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f000 f922 	bl	800723c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8007034 <HAL_InitTick+0x90>)
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e00d      	b.n	800701c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8007000:	230f      	movs	r3, #15
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	2201      	movs	r2, #1
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e008      	b.n	800701c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800700a:	230f      	movs	r3, #15
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	e003      	b.n	800701c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007014:	230f      	movs	r3, #15
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800701c:	230f      	movs	r3, #15
 800701e:	18fb      	adds	r3, r7, r3
 8007020:	781b      	ldrb	r3, [r3, #0]
}
 8007022:	0018      	movs	r0, r3
 8007024:	46bd      	mov	sp, r7
 8007026:	b005      	add	sp, #20
 8007028:	bd90      	pop	{r4, r7, pc}
 800702a:	46c0      	nop			@ (mov r8, r8)
 800702c:	200009d0 	.word	0x200009d0
 8007030:	200009c8 	.word	0x200009c8
 8007034:	200009cc 	.word	0x200009cc

08007038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800703c:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <HAL_IncTick+0x1c>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	001a      	movs	r2, r3
 8007042:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_IncTick+0x20>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	18d2      	adds	r2, r2, r3
 8007048:	4b03      	ldr	r3, [pc, #12]	@ (8007058 <HAL_IncTick+0x20>)
 800704a:	601a      	str	r2, [r3, #0]
}
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	46c0      	nop			@ (mov r8, r8)
 8007054:	200009d0 	.word	0x200009d0
 8007058:	20000f8c 	.word	0x20000f8c

0800705c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  return uwTick;
 8007060:	4b02      	ldr	r3, [pc, #8]	@ (800706c <HAL_GetTick+0x10>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	0018      	movs	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	46c0      	nop			@ (mov r8, r8)
 800706c:	20000f8c 	.word	0x20000f8c

08007070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007078:	f7ff fff0 	bl	800705c <HAL_GetTick>
 800707c:	0003      	movs	r3, r0
 800707e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	d005      	beq.n	8007096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800708a:	4b0a      	ldr	r3, [pc, #40]	@ (80070b4 <HAL_Delay+0x44>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	001a      	movs	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	189b      	adds	r3, r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007096:	46c0      	nop			@ (mov r8, r8)
 8007098:	f7ff ffe0 	bl	800705c <HAL_GetTick>
 800709c:	0002      	movs	r2, r0
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d8f7      	bhi.n	8007098 <HAL_Delay+0x28>
  {
  }
}
 80070a8:	46c0      	nop			@ (mov r8, r8)
 80070aa:	46c0      	nop			@ (mov r8, r8)
 80070ac:	46bd      	mov	sp, r7
 80070ae:	b004      	add	sp, #16
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	46c0      	nop			@ (mov r8, r8)
 80070b4:	200009d0 	.word	0x200009d0

080070b8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80070c0:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a06      	ldr	r2, [pc, #24]	@ (80070e0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	0019      	movs	r1, r3
 80070ca:	4b04      	ldr	r3, [pc, #16]	@ (80070dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	46c0      	nop			@ (mov r8, r8)
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b002      	add	sp, #8
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	46c0      	nop			@ (mov r8, r8)
 80070dc:	40010000 	.word	0x40010000
 80070e0:	fffff9ff 	.word	0xfffff9ff

080070e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	0002      	movs	r2, r0
 80070ec:	1dfb      	adds	r3, r7, #7
 80070ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80070f0:	1dfb      	adds	r3, r7, #7
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80070f6:	d809      	bhi.n	800710c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070f8:	1dfb      	adds	r3, r7, #7
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	001a      	movs	r2, r3
 80070fe:	231f      	movs	r3, #31
 8007100:	401a      	ands	r2, r3
 8007102:	4b04      	ldr	r3, [pc, #16]	@ (8007114 <__NVIC_EnableIRQ+0x30>)
 8007104:	2101      	movs	r1, #1
 8007106:	4091      	lsls	r1, r2
 8007108:	000a      	movs	r2, r1
 800710a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800710c:	46c0      	nop			@ (mov r8, r8)
 800710e:	46bd      	mov	sp, r7
 8007110:	b002      	add	sp, #8
 8007112:	bd80      	pop	{r7, pc}
 8007114:	e000e100 	.word	0xe000e100

08007118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007118:	b590      	push	{r4, r7, lr}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	0002      	movs	r2, r0
 8007120:	6039      	str	r1, [r7, #0]
 8007122:	1dfb      	adds	r3, r7, #7
 8007124:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007126:	1dfb      	adds	r3, r7, #7
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b7f      	cmp	r3, #127	@ 0x7f
 800712c:	d828      	bhi.n	8007180 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800712e:	4a2f      	ldr	r2, [pc, #188]	@ (80071ec <__NVIC_SetPriority+0xd4>)
 8007130:	1dfb      	adds	r3, r7, #7
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	b25b      	sxtb	r3, r3
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	33c0      	adds	r3, #192	@ 0xc0
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	589b      	ldr	r3, [r3, r2]
 800713e:	1dfa      	adds	r2, r7, #7
 8007140:	7812      	ldrb	r2, [r2, #0]
 8007142:	0011      	movs	r1, r2
 8007144:	2203      	movs	r2, #3
 8007146:	400a      	ands	r2, r1
 8007148:	00d2      	lsls	r2, r2, #3
 800714a:	21ff      	movs	r1, #255	@ 0xff
 800714c:	4091      	lsls	r1, r2
 800714e:	000a      	movs	r2, r1
 8007150:	43d2      	mvns	r2, r2
 8007152:	401a      	ands	r2, r3
 8007154:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	22ff      	movs	r2, #255	@ 0xff
 800715c:	401a      	ands	r2, r3
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	0018      	movs	r0, r3
 8007164:	2303      	movs	r3, #3
 8007166:	4003      	ands	r3, r0
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800716c:	481f      	ldr	r0, [pc, #124]	@ (80071ec <__NVIC_SetPriority+0xd4>)
 800716e:	1dfb      	adds	r3, r7, #7
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b25b      	sxtb	r3, r3
 8007174:	089b      	lsrs	r3, r3, #2
 8007176:	430a      	orrs	r2, r1
 8007178:	33c0      	adds	r3, #192	@ 0xc0
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800717e:	e031      	b.n	80071e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007180:	4a1b      	ldr	r2, [pc, #108]	@ (80071f0 <__NVIC_SetPriority+0xd8>)
 8007182:	1dfb      	adds	r3, r7, #7
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	0019      	movs	r1, r3
 8007188:	230f      	movs	r3, #15
 800718a:	400b      	ands	r3, r1
 800718c:	3b08      	subs	r3, #8
 800718e:	089b      	lsrs	r3, r3, #2
 8007190:	3306      	adds	r3, #6
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	18d3      	adds	r3, r2, r3
 8007196:	3304      	adds	r3, #4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	1dfa      	adds	r2, r7, #7
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	0011      	movs	r1, r2
 80071a0:	2203      	movs	r2, #3
 80071a2:	400a      	ands	r2, r1
 80071a4:	00d2      	lsls	r2, r2, #3
 80071a6:	21ff      	movs	r1, #255	@ 0xff
 80071a8:	4091      	lsls	r1, r2
 80071aa:	000a      	movs	r2, r1
 80071ac:	43d2      	mvns	r2, r2
 80071ae:	401a      	ands	r2, r3
 80071b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	019b      	lsls	r3, r3, #6
 80071b6:	22ff      	movs	r2, #255	@ 0xff
 80071b8:	401a      	ands	r2, r3
 80071ba:	1dfb      	adds	r3, r7, #7
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	0018      	movs	r0, r3
 80071c0:	2303      	movs	r3, #3
 80071c2:	4003      	ands	r3, r0
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80071c8:	4809      	ldr	r0, [pc, #36]	@ (80071f0 <__NVIC_SetPriority+0xd8>)
 80071ca:	1dfb      	adds	r3, r7, #7
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	001c      	movs	r4, r3
 80071d0:	230f      	movs	r3, #15
 80071d2:	4023      	ands	r3, r4
 80071d4:	3b08      	subs	r3, #8
 80071d6:	089b      	lsrs	r3, r3, #2
 80071d8:	430a      	orrs	r2, r1
 80071da:	3306      	adds	r3, #6
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	18c3      	adds	r3, r0, r3
 80071e0:	3304      	adds	r3, #4
 80071e2:	601a      	str	r2, [r3, #0]
}
 80071e4:	46c0      	nop			@ (mov r8, r8)
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b003      	add	sp, #12
 80071ea:	bd90      	pop	{r4, r7, pc}
 80071ec:	e000e100 	.word	0xe000e100
 80071f0:	e000ed00 	.word	0xe000ed00

080071f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	2380      	movs	r3, #128	@ 0x80
 8007202:	045b      	lsls	r3, r3, #17
 8007204:	429a      	cmp	r2, r3
 8007206:	d301      	bcc.n	800720c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007208:	2301      	movs	r3, #1
 800720a:	e010      	b.n	800722e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <SysTick_Config+0x44>)
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	3a01      	subs	r2, #1
 8007212:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007214:	2301      	movs	r3, #1
 8007216:	425b      	negs	r3, r3
 8007218:	2103      	movs	r1, #3
 800721a:	0018      	movs	r0, r3
 800721c:	f7ff ff7c 	bl	8007118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007220:	4b05      	ldr	r3, [pc, #20]	@ (8007238 <SysTick_Config+0x44>)
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007226:	4b04      	ldr	r3, [pc, #16]	@ (8007238 <SysTick_Config+0x44>)
 8007228:	2207      	movs	r2, #7
 800722a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800722c:	2300      	movs	r3, #0
}
 800722e:	0018      	movs	r0, r3
 8007230:	46bd      	mov	sp, r7
 8007232:	b002      	add	sp, #8
 8007234:	bd80      	pop	{r7, pc}
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	e000e010 	.word	0xe000e010

0800723c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	210f      	movs	r1, #15
 8007248:	187b      	adds	r3, r7, r1
 800724a:	1c02      	adds	r2, r0, #0
 800724c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	187b      	adds	r3, r7, r1
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b25b      	sxtb	r3, r3
 8007256:	0011      	movs	r1, r2
 8007258:	0018      	movs	r0, r3
 800725a:	f7ff ff5d 	bl	8007118 <__NVIC_SetPriority>
}
 800725e:	46c0      	nop			@ (mov r8, r8)
 8007260:	46bd      	mov	sp, r7
 8007262:	b004      	add	sp, #16
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	0002      	movs	r2, r0
 800726e:	1dfb      	adds	r3, r7, #7
 8007270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007272:	1dfb      	adds	r3, r7, #7
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	b25b      	sxtb	r3, r3
 8007278:	0018      	movs	r0, r3
 800727a:	f7ff ff33 	bl	80070e4 <__NVIC_EnableIRQ>
}
 800727e:	46c0      	nop			@ (mov r8, r8)
 8007280:	46bd      	mov	sp, r7
 8007282:	b002      	add	sp, #8
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	0018      	movs	r0, r3
 8007292:	f7ff ffaf 	bl	80071f4 <SysTick_Config>
 8007296:	0003      	movs	r3, r0
}
 8007298:	0018      	movs	r0, r3
 800729a:	46bd      	mov	sp, r7
 800729c:	b002      	add	sp, #8
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072ae:	e14d      	b.n	800754c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2101      	movs	r1, #1
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4091      	lsls	r1, r2
 80072ba:	000a      	movs	r2, r1
 80072bc:	4013      	ands	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d100      	bne.n	80072c8 <HAL_GPIO_Init+0x28>
 80072c6:	e13e      	b.n	8007546 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2203      	movs	r2, #3
 80072ce:	4013      	ands	r3, r2
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d005      	beq.n	80072e0 <HAL_GPIO_Init+0x40>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2203      	movs	r2, #3
 80072da:	4013      	ands	r3, r2
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d130      	bne.n	8007342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	2203      	movs	r2, #3
 80072ec:	409a      	lsls	r2, r3
 80072ee:	0013      	movs	r3, r2
 80072f0:	43da      	mvns	r2, r3
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4013      	ands	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	409a      	lsls	r2, r3
 8007302:	0013      	movs	r3, r2
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007316:	2201      	movs	r2, #1
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	409a      	lsls	r2, r3
 800731c:	0013      	movs	r3, r2
 800731e:	43da      	mvns	r2, r3
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	4013      	ands	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	091b      	lsrs	r3, r3, #4
 800732c:	2201      	movs	r2, #1
 800732e:	401a      	ands	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	409a      	lsls	r2, r3
 8007334:	0013      	movs	r3, r2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2203      	movs	r2, #3
 8007348:	4013      	ands	r3, r2
 800734a:	2b03      	cmp	r3, #3
 800734c:	d017      	beq.n	800737e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	2203      	movs	r2, #3
 800735a:	409a      	lsls	r2, r3
 800735c:	0013      	movs	r3, r2
 800735e:	43da      	mvns	r2, r3
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4013      	ands	r3, r2
 8007364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	409a      	lsls	r2, r3
 8007370:	0013      	movs	r3, r2
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2203      	movs	r2, #3
 8007384:	4013      	ands	r3, r2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d123      	bne.n	80073d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	08da      	lsrs	r2, r3, #3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3208      	adds	r2, #8
 8007392:	0092      	lsls	r2, r2, #2
 8007394:	58d3      	ldr	r3, [r2, r3]
 8007396:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2207      	movs	r2, #7
 800739c:	4013      	ands	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	220f      	movs	r2, #15
 80073a2:	409a      	lsls	r2, r3
 80073a4:	0013      	movs	r3, r2
 80073a6:	43da      	mvns	r2, r3
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4013      	ands	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2107      	movs	r1, #7
 80073b6:	400b      	ands	r3, r1
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	409a      	lsls	r2, r3
 80073bc:	0013      	movs	r3, r2
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	08da      	lsrs	r2, r3, #3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3208      	adds	r2, #8
 80073cc:	0092      	lsls	r2, r2, #2
 80073ce:	6939      	ldr	r1, [r7, #16]
 80073d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	2203      	movs	r2, #3
 80073de:	409a      	lsls	r2, r3
 80073e0:	0013      	movs	r3, r2
 80073e2:	43da      	mvns	r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4013      	ands	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2203      	movs	r2, #3
 80073f0:	401a      	ands	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	0013      	movs	r3, r2
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	23c0      	movs	r3, #192	@ 0xc0
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	4013      	ands	r3, r2
 8007410:	d100      	bne.n	8007414 <HAL_GPIO_Init+0x174>
 8007412:	e098      	b.n	8007546 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007414:	4a53      	ldr	r2, [pc, #332]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	089b      	lsrs	r3, r3, #2
 800741a:	3318      	adds	r3, #24
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	589b      	ldr	r3, [r3, r2]
 8007420:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2203      	movs	r2, #3
 8007426:	4013      	ands	r3, r2
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	220f      	movs	r2, #15
 800742c:	409a      	lsls	r2, r3
 800742e:	0013      	movs	r3, r2
 8007430:	43da      	mvns	r2, r3
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4013      	ands	r3, r2
 8007436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	23a0      	movs	r3, #160	@ 0xa0
 800743c:	05db      	lsls	r3, r3, #23
 800743e:	429a      	cmp	r2, r3
 8007440:	d019      	beq.n	8007476 <HAL_GPIO_Init+0x1d6>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a48      	ldr	r2, [pc, #288]	@ (8007568 <HAL_GPIO_Init+0x2c8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d013      	beq.n	8007472 <HAL_GPIO_Init+0x1d2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a47      	ldr	r2, [pc, #284]	@ (800756c <HAL_GPIO_Init+0x2cc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00d      	beq.n	800746e <HAL_GPIO_Init+0x1ce>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a46      	ldr	r2, [pc, #280]	@ (8007570 <HAL_GPIO_Init+0x2d0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d007      	beq.n	800746a <HAL_GPIO_Init+0x1ca>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a45      	ldr	r2, [pc, #276]	@ (8007574 <HAL_GPIO_Init+0x2d4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d101      	bne.n	8007466 <HAL_GPIO_Init+0x1c6>
 8007462:	2304      	movs	r3, #4
 8007464:	e008      	b.n	8007478 <HAL_GPIO_Init+0x1d8>
 8007466:	2305      	movs	r3, #5
 8007468:	e006      	b.n	8007478 <HAL_GPIO_Init+0x1d8>
 800746a:	2303      	movs	r3, #3
 800746c:	e004      	b.n	8007478 <HAL_GPIO_Init+0x1d8>
 800746e:	2302      	movs	r3, #2
 8007470:	e002      	b.n	8007478 <HAL_GPIO_Init+0x1d8>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <HAL_GPIO_Init+0x1d8>
 8007476:	2300      	movs	r3, #0
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	2103      	movs	r1, #3
 800747c:	400a      	ands	r2, r1
 800747e:	00d2      	lsls	r2, r2, #3
 8007480:	4093      	lsls	r3, r2
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	4313      	orrs	r3, r2
 8007486:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007488:	4936      	ldr	r1, [pc, #216]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	089b      	lsrs	r3, r3, #2
 800748e:	3318      	adds	r3, #24
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007496:	4b33      	ldr	r3, [pc, #204]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	43da      	mvns	r2, r3
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4013      	ands	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	2380      	movs	r3, #128	@ 0x80
 80074ac:	035b      	lsls	r3, r3, #13
 80074ae:	4013      	ands	r3, r2
 80074b0:	d003      	beq.n	80074ba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80074ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80074c0:	4b28      	ldr	r3, [pc, #160]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	43da      	mvns	r2, r3
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4013      	ands	r3, r2
 80074ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	039b      	lsls	r3, r3, #14
 80074d8:	4013      	ands	r3, r2
 80074da:	d003      	beq.n	80074e4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80074e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80074ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 80074ec:	2384      	movs	r3, #132	@ 0x84
 80074ee:	58d3      	ldr	r3, [r2, r3]
 80074f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	43da      	mvns	r2, r3
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	4013      	ands	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	2380      	movs	r3, #128	@ 0x80
 8007502:	029b      	lsls	r3, r3, #10
 8007504:	4013      	ands	r3, r2
 8007506:	d003      	beq.n	8007510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007510:	4914      	ldr	r1, [pc, #80]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 8007512:	2284      	movs	r2, #132	@ 0x84
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007518:	4a12      	ldr	r2, [pc, #72]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 800751a:	2380      	movs	r3, #128	@ 0x80
 800751c:	58d3      	ldr	r3, [r2, r3]
 800751e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	43da      	mvns	r2, r3
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	4013      	ands	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	2380      	movs	r3, #128	@ 0x80
 8007530:	025b      	lsls	r3, r3, #9
 8007532:	4013      	ands	r3, r2
 8007534:	d003      	beq.n	800753e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800753e:	4909      	ldr	r1, [pc, #36]	@ (8007564 <HAL_GPIO_Init+0x2c4>)
 8007540:	2280      	movs	r2, #128	@ 0x80
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	3301      	adds	r3, #1
 800754a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	40da      	lsrs	r2, r3
 8007554:	1e13      	subs	r3, r2, #0
 8007556:	d000      	beq.n	800755a <HAL_GPIO_Init+0x2ba>
 8007558:	e6aa      	b.n	80072b0 <HAL_GPIO_Init+0x10>
  }
}
 800755a:	46c0      	nop			@ (mov r8, r8)
 800755c:	46c0      	nop			@ (mov r8, r8)
 800755e:	46bd      	mov	sp, r7
 8007560:	b006      	add	sp, #24
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40021800 	.word	0x40021800
 8007568:	50000400 	.word	0x50000400
 800756c:	50000800 	.word	0x50000800
 8007570:	50000c00 	.word	0x50000c00
 8007574:	50001000 	.word	0x50001000

08007578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	000a      	movs	r2, r1
 8007582:	1cbb      	adds	r3, r7, #2
 8007584:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	1cba      	adds	r2, r7, #2
 800758c:	8812      	ldrh	r2, [r2, #0]
 800758e:	4013      	ands	r3, r2
 8007590:	d004      	beq.n	800759c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007592:	230f      	movs	r3, #15
 8007594:	18fb      	adds	r3, r7, r3
 8007596:	2201      	movs	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e003      	b.n	80075a4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800759c:	230f      	movs	r3, #15
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	2200      	movs	r2, #0
 80075a2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80075a4:	230f      	movs	r3, #15
 80075a6:	18fb      	adds	r3, r7, r3
 80075a8:	781b      	ldrb	r3, [r3, #0]
}
 80075aa:	0018      	movs	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b004      	add	sp, #16
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	0008      	movs	r0, r1
 80075bc:	0011      	movs	r1, r2
 80075be:	1cbb      	adds	r3, r7, #2
 80075c0:	1c02      	adds	r2, r0, #0
 80075c2:	801a      	strh	r2, [r3, #0]
 80075c4:	1c7b      	adds	r3, r7, #1
 80075c6:	1c0a      	adds	r2, r1, #0
 80075c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075ca:	1c7b      	adds	r3, r7, #1
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d004      	beq.n	80075dc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075d2:	1cbb      	adds	r3, r7, #2
 80075d4:	881a      	ldrh	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80075da:	e003      	b.n	80075e4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075dc:	1cbb      	adds	r3, r7, #2
 80075de:	881a      	ldrh	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80075e4:	46c0      	nop			@ (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b002      	add	sp, #8
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	0002      	movs	r2, r0
 80075f4:	1dbb      	adds	r3, r7, #6
 80075f6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80075f8:	4b10      	ldr	r3, [pc, #64]	@ (800763c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	1dba      	adds	r2, r7, #6
 80075fe:	8812      	ldrh	r2, [r2, #0]
 8007600:	4013      	ands	r3, r2
 8007602:	d008      	beq.n	8007616 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007604:	4b0d      	ldr	r3, [pc, #52]	@ (800763c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007606:	1dba      	adds	r2, r7, #6
 8007608:	8812      	ldrh	r2, [r2, #0]
 800760a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800760c:	1dbb      	adds	r3, r7, #6
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	0018      	movs	r0, r3
 8007612:	f7fe fabd 	bl	8005b90 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007616:	4b09      	ldr	r3, [pc, #36]	@ (800763c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	1dba      	adds	r2, r7, #6
 800761c:	8812      	ldrh	r2, [r2, #0]
 800761e:	4013      	ands	r3, r2
 8007620:	d008      	beq.n	8007634 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007622:	4b06      	ldr	r3, [pc, #24]	@ (800763c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007624:	1dba      	adds	r2, r7, #6
 8007626:	8812      	ldrh	r2, [r2, #0]
 8007628:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800762a:	1dbb      	adds	r3, r7, #6
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	0018      	movs	r0, r3
 8007630:	f000 f806 	bl	8007640 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007634:	46c0      	nop			@ (mov r8, r8)
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021800 	.word	0x40021800

08007640 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	0002      	movs	r2, r0
 8007648:	1dbb      	adds	r3, r7, #6
 800764a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800764c:	46c0      	nop			@ (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b002      	add	sp, #8
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e08f      	b.n	8007786 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2241      	movs	r2, #65	@ 0x41
 800766a:	5c9b      	ldrb	r3, [r3, r2]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d107      	bne.n	8007682 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2240      	movs	r2, #64	@ 0x40
 8007676:	2100      	movs	r1, #0
 8007678:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	0018      	movs	r0, r3
 800767e:	f7ff f9ab 	bl	80069d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2241      	movs	r2, #65	@ 0x41
 8007686:	2124      	movs	r1, #36	@ 0x24
 8007688:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2101      	movs	r1, #1
 8007696:	438a      	bics	r2, r1
 8007698:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	493b      	ldr	r1, [pc, #236]	@ (8007790 <HAL_I2C_Init+0x13c>)
 80076a4:	400a      	ands	r2, r1
 80076a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4938      	ldr	r1, [pc, #224]	@ (8007794 <HAL_I2C_Init+0x140>)
 80076b4:	400a      	ands	r2, r1
 80076b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d108      	bne.n	80076d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2180      	movs	r1, #128	@ 0x80
 80076ca:	0209      	lsls	r1, r1, #8
 80076cc:	430a      	orrs	r2, r1
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	e007      	b.n	80076e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2184      	movs	r1, #132	@ 0x84
 80076dc:	0209      	lsls	r1, r1, #8
 80076de:	430a      	orrs	r2, r1
 80076e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d109      	bne.n	80076fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2180      	movs	r1, #128	@ 0x80
 80076f6:	0109      	lsls	r1, r1, #4
 80076f8:	430a      	orrs	r2, r1
 80076fa:	605a      	str	r2, [r3, #4]
 80076fc:	e007      	b.n	800770e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4923      	ldr	r1, [pc, #140]	@ (8007798 <HAL_I2C_Init+0x144>)
 800770a:	400a      	ands	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4920      	ldr	r1, [pc, #128]	@ (800779c <HAL_I2C_Init+0x148>)
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	491a      	ldr	r1, [pc, #104]	@ (8007794 <HAL_I2C_Init+0x140>)
 800772a:	400a      	ands	r2, r1
 800772c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	431a      	orrs	r2, r3
 8007738:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69d9      	ldr	r1, [r3, #28]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1a      	ldr	r2, [r3, #32]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2101      	movs	r1, #1
 8007764:	430a      	orrs	r2, r1
 8007766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2241      	movs	r2, #65	@ 0x41
 8007772:	2120      	movs	r1, #32
 8007774:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2242      	movs	r2, #66	@ 0x42
 8007780:	2100      	movs	r1, #0
 8007782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	0018      	movs	r0, r3
 8007788:	46bd      	mov	sp, r7
 800778a:	b002      	add	sp, #8
 800778c:	bd80      	pop	{r7, pc}
 800778e:	46c0      	nop			@ (mov r8, r8)
 8007790:	f0ffffff 	.word	0xf0ffffff
 8007794:	ffff7fff 	.word	0xffff7fff
 8007798:	fffff7ff 	.word	0xfffff7ff
 800779c:	02008000 	.word	0x02008000

080077a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80077a0:	b590      	push	{r4, r7, lr}
 80077a2:	b089      	sub	sp, #36	@ 0x24
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	0008      	movs	r0, r1
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	0019      	movs	r1, r3
 80077ae:	230a      	movs	r3, #10
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	1c02      	adds	r2, r0, #0
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	2308      	movs	r3, #8
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	1c0a      	adds	r2, r1, #0
 80077bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2241      	movs	r2, #65	@ 0x41
 80077c2:	5c9b      	ldrb	r3, [r3, r2]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d000      	beq.n	80077cc <HAL_I2C_Master_Transmit+0x2c>
 80077ca:	e10a      	b.n	80079e2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2240      	movs	r2, #64	@ 0x40
 80077d0:	5c9b      	ldrb	r3, [r3, r2]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d101      	bne.n	80077da <HAL_I2C_Master_Transmit+0x3a>
 80077d6:	2302      	movs	r3, #2
 80077d8:	e104      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x244>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2240      	movs	r2, #64	@ 0x40
 80077de:	2101      	movs	r1, #1
 80077e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077e2:	f7ff fc3b 	bl	800705c <HAL_GetTick>
 80077e6:	0003      	movs	r3, r0
 80077e8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077ea:	2380      	movs	r3, #128	@ 0x80
 80077ec:	0219      	lsls	r1, r3, #8
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	2319      	movs	r3, #25
 80077f6:	2201      	movs	r2, #1
 80077f8:	f000 fa26 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 80077fc:	1e03      	subs	r3, r0, #0
 80077fe:	d001      	beq.n	8007804 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0ef      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2241      	movs	r2, #65	@ 0x41
 8007808:	2121      	movs	r1, #33	@ 0x21
 800780a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2242      	movs	r2, #66	@ 0x42
 8007810:	2110      	movs	r1, #16
 8007812:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2208      	movs	r2, #8
 8007824:	18ba      	adds	r2, r7, r2
 8007826:	8812      	ldrh	r2, [r2, #0]
 8007828:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007834:	b29b      	uxth	r3, r3
 8007836:	2bff      	cmp	r3, #255	@ 0xff
 8007838:	d906      	bls.n	8007848 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	22ff      	movs	r2, #255	@ 0xff
 800783e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007840:	2380      	movs	r3, #128	@ 0x80
 8007842:	045b      	lsls	r3, r3, #17
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	e007      	b.n	8007858 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007852:	2380      	movs	r3, #128	@ 0x80
 8007854:	049b      	lsls	r3, r3, #18
 8007856:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800785c:	2b00      	cmp	r3, #0
 800785e:	d027      	beq.n	80078b0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007894:	b2db      	uxtb	r3, r3
 8007896:	3301      	adds	r3, #1
 8007898:	b2da      	uxtb	r2, r3
 800789a:	697c      	ldr	r4, [r7, #20]
 800789c:	230a      	movs	r3, #10
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	8819      	ldrh	r1, [r3, #0]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	4b51      	ldr	r3, [pc, #324]	@ (80079ec <HAL_I2C_Master_Transmit+0x24c>)
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	0023      	movs	r3, r4
 80078aa:	f000 fc45 	bl	8008138 <I2C_TransferConfig>
 80078ae:	e06f      	b.n	8007990 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	697c      	ldr	r4, [r7, #20]
 80078b8:	230a      	movs	r3, #10
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	8819      	ldrh	r1, [r3, #0]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	4b4a      	ldr	r3, [pc, #296]	@ (80079ec <HAL_I2C_Master_Transmit+0x24c>)
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	0023      	movs	r3, r4
 80078c6:	f000 fc37 	bl	8008138 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80078ca:	e061      	b.n	8007990 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	0018      	movs	r0, r3
 80078d4:	f000 fa10 	bl	8007cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 80078d8:	1e03      	subs	r3, r0, #0
 80078da:	d001      	beq.n	80078e0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e081      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d03a      	beq.n	8007990 <HAL_I2C_Master_Transmit+0x1f0>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800791e:	2b00      	cmp	r3, #0
 8007920:	d136      	bne.n	8007990 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	0013      	movs	r3, r2
 800792c:	2200      	movs	r2, #0
 800792e:	2180      	movs	r1, #128	@ 0x80
 8007930:	f000 f98a 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007934:	1e03      	subs	r3, r0, #0
 8007936:	d001      	beq.n	800793c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e053      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007940:	b29b      	uxth	r3, r3
 8007942:	2bff      	cmp	r3, #255	@ 0xff
 8007944:	d911      	bls.n	800796a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	22ff      	movs	r2, #255	@ 0xff
 800794a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007950:	b2da      	uxtb	r2, r3
 8007952:	2380      	movs	r3, #128	@ 0x80
 8007954:	045c      	lsls	r4, r3, #17
 8007956:	230a      	movs	r3, #10
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	8819      	ldrh	r1, [r3, #0]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	2300      	movs	r3, #0
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	0023      	movs	r3, r4
 8007964:	f000 fbe8 	bl	8008138 <I2C_TransferConfig>
 8007968:	e012      	b.n	8007990 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007978:	b2da      	uxtb	r2, r3
 800797a:	2380      	movs	r3, #128	@ 0x80
 800797c:	049c      	lsls	r4, r3, #18
 800797e:	230a      	movs	r3, #10
 8007980:	18fb      	adds	r3, r7, r3
 8007982:	8819      	ldrh	r1, [r3, #0]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	2300      	movs	r3, #0
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	0023      	movs	r3, r4
 800798c:	f000 fbd4 	bl	8008138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d198      	bne.n	80078cc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	0018      	movs	r0, r3
 80079a2:	f000 f9ef 	bl	8007d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079a6:	1e03      	subs	r3, r0, #0
 80079a8:	d001      	beq.n	80079ae <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e01a      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2220      	movs	r2, #32
 80079b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	490b      	ldr	r1, [pc, #44]	@ (80079f0 <HAL_I2C_Master_Transmit+0x250>)
 80079c2:	400a      	ands	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2241      	movs	r2, #65	@ 0x41
 80079ca:	2120      	movs	r1, #32
 80079cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2242      	movs	r2, #66	@ 0x42
 80079d2:	2100      	movs	r1, #0
 80079d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2240      	movs	r2, #64	@ 0x40
 80079da:	2100      	movs	r1, #0
 80079dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	e000      	b.n	80079e4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80079e2:	2302      	movs	r3, #2
  }
}
 80079e4:	0018      	movs	r0, r3
 80079e6:	46bd      	mov	sp, r7
 80079e8:	b007      	add	sp, #28
 80079ea:	bd90      	pop	{r4, r7, pc}
 80079ec:	80002000 	.word	0x80002000
 80079f0:	fe00e800 	.word	0xfe00e800

080079f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b089      	sub	sp, #36	@ 0x24
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	0008      	movs	r0, r1
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	0019      	movs	r1, r3
 8007a02:	230a      	movs	r3, #10
 8007a04:	18fb      	adds	r3, r7, r3
 8007a06:	1c02      	adds	r2, r0, #0
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	18fb      	adds	r3, r7, r3
 8007a0e:	1c0a      	adds	r2, r1, #0
 8007a10:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2241      	movs	r2, #65	@ 0x41
 8007a16:	5c9b      	ldrb	r3, [r3, r2]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d000      	beq.n	8007a20 <HAL_I2C_Master_Receive+0x2c>
 8007a1e:	e0e8      	b.n	8007bf2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2240      	movs	r2, #64	@ 0x40
 8007a24:	5c9b      	ldrb	r3, [r3, r2]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_I2C_Master_Receive+0x3a>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e0e2      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x200>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2240      	movs	r2, #64	@ 0x40
 8007a32:	2101      	movs	r1, #1
 8007a34:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a36:	f7ff fb11 	bl	800705c <HAL_GetTick>
 8007a3a:	0003      	movs	r3, r0
 8007a3c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a3e:	2380      	movs	r3, #128	@ 0x80
 8007a40:	0219      	lsls	r1, r3, #8
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2319      	movs	r3, #25
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f000 f8fc 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007a50:	1e03      	subs	r3, r0, #0
 8007a52:	d001      	beq.n	8007a58 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e0cd      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2241      	movs	r2, #65	@ 0x41
 8007a5c:	2122      	movs	r1, #34	@ 0x22
 8007a5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2242      	movs	r2, #66	@ 0x42
 8007a64:	2110      	movs	r1, #16
 8007a66:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2208      	movs	r2, #8
 8007a78:	18ba      	adds	r2, r7, r2
 8007a7a:	8812      	ldrh	r2, [r2, #0]
 8007a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2bff      	cmp	r3, #255	@ 0xff
 8007a8c:	d911      	bls.n	8007ab2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	22ff      	movs	r2, #255	@ 0xff
 8007a92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	2380      	movs	r3, #128	@ 0x80
 8007a9c:	045c      	lsls	r4, r3, #17
 8007a9e:	230a      	movs	r3, #10
 8007aa0:	18fb      	adds	r3, r7, r3
 8007aa2:	8819      	ldrh	r1, [r3, #0]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	4b55      	ldr	r3, [pc, #340]	@ (8007bfc <HAL_I2C_Master_Receive+0x208>)
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	0023      	movs	r3, r4
 8007aac:	f000 fb44 	bl	8008138 <I2C_TransferConfig>
 8007ab0:	e076      	b.n	8007ba0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	2380      	movs	r3, #128	@ 0x80
 8007ac4:	049c      	lsls	r4, r3, #18
 8007ac6:	230a      	movs	r3, #10
 8007ac8:	18fb      	adds	r3, r7, r3
 8007aca:	8819      	ldrh	r1, [r3, #0]
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	4b4b      	ldr	r3, [pc, #300]	@ (8007bfc <HAL_I2C_Master_Receive+0x208>)
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	0023      	movs	r3, r4
 8007ad4:	f000 fb30 	bl	8008138 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007ad8:	e062      	b.n	8007ba0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f000 f993 	bl	8007e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ae6:	1e03      	subs	r3, r0, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e082      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	b2d2      	uxtb	r2, r2
 8007afa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d03a      	beq.n	8007ba0 <HAL_I2C_Master_Receive+0x1ac>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d136      	bne.n	8007ba0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	0013      	movs	r3, r2
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2180      	movs	r1, #128	@ 0x80
 8007b40:	f000 f882 	bl	8007c48 <I2C_WaitOnFlagUntilTimeout>
 8007b44:	1e03      	subs	r3, r0, #0
 8007b46:	d001      	beq.n	8007b4c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e053      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2bff      	cmp	r3, #255	@ 0xff
 8007b54:	d911      	bls.n	8007b7a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	22ff      	movs	r2, #255	@ 0xff
 8007b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	2380      	movs	r3, #128	@ 0x80
 8007b64:	045c      	lsls	r4, r3, #17
 8007b66:	230a      	movs	r3, #10
 8007b68:	18fb      	adds	r3, r7, r3
 8007b6a:	8819      	ldrh	r1, [r3, #0]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	0023      	movs	r3, r4
 8007b74:	f000 fae0 	bl	8008138 <I2C_TransferConfig>
 8007b78:	e012      	b.n	8007ba0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	2380      	movs	r3, #128	@ 0x80
 8007b8c:	049c      	lsls	r4, r3, #18
 8007b8e:	230a      	movs	r3, #10
 8007b90:	18fb      	adds	r3, r7, r3
 8007b92:	8819      	ldrh	r1, [r3, #0]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	2300      	movs	r3, #0
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	0023      	movs	r3, r4
 8007b9c:	f000 facc 	bl	8008138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d197      	bne.n	8007ada <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f000 f8e7 	bl	8007d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bb6:	1e03      	subs	r3, r0, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e01a      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	490b      	ldr	r1, [pc, #44]	@ (8007c00 <HAL_I2C_Master_Receive+0x20c>)
 8007bd2:	400a      	ands	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2241      	movs	r2, #65	@ 0x41
 8007bda:	2120      	movs	r1, #32
 8007bdc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2242      	movs	r2, #66	@ 0x42
 8007be2:	2100      	movs	r1, #0
 8007be4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2240      	movs	r2, #64	@ 0x40
 8007bea:	2100      	movs	r1, #0
 8007bec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
  }
}
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b007      	add	sp, #28
 8007bfa:	bd90      	pop	{r4, r7, pc}
 8007bfc:	80002400 	.word	0x80002400
 8007c00:	fe00e800 	.word	0xfe00e800

08007c04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	2202      	movs	r2, #2
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d103      	bne.n	8007c22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d007      	beq.n	8007c40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	619a      	str	r2, [r3, #24]
  }
}
 8007c40:	46c0      	nop			@ (mov r8, r8)
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b002      	add	sp, #8
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	1dfb      	adds	r3, r7, #7
 8007c56:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c58:	e03a      	b.n	8007cd0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	0018      	movs	r0, r3
 8007c62:	f000 f971 	bl	8007f48 <I2C_IsErrorOccurred>
 8007c66:	1e03      	subs	r3, r0, #0
 8007c68:	d001      	beq.n	8007c6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e040      	b.n	8007cf0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	d02d      	beq.n	8007cd0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c74:	f7ff f9f2 	bl	800705c <HAL_GetTick>
 8007c78:	0002      	movs	r2, r0
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d302      	bcc.n	8007c8a <I2C_WaitOnFlagUntilTimeout+0x42>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d122      	bne.n	8007cd0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4013      	ands	r3, r2
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	425a      	negs	r2, r3
 8007c9a:	4153      	adcs	r3, r2
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	001a      	movs	r2, r3
 8007ca0:	1dfb      	adds	r3, r7, #7
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d113      	bne.n	8007cd0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cac:	2220      	movs	r2, #32
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2241      	movs	r2, #65	@ 0x41
 8007cb8:	2120      	movs	r1, #32
 8007cba:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2242      	movs	r2, #66	@ 0x42
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2240      	movs	r2, #64	@ 0x40
 8007cc8:	2100      	movs	r1, #0
 8007cca:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e00f      	b.n	8007cf0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	425a      	negs	r2, r3
 8007ce0:	4153      	adcs	r3, r2
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	001a      	movs	r2, r3
 8007ce6:	1dfb      	adds	r3, r7, #7
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d0b5      	beq.n	8007c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	b004      	add	sp, #16
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d04:	e032      	b.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f000 f91b 	bl	8007f48 <I2C_IsErrorOccurred>
 8007d12:	1e03      	subs	r3, r0, #0
 8007d14:	d001      	beq.n	8007d1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e030      	b.n	8007d7c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	d025      	beq.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d20:	f7ff f99c 	bl	800705c <HAL_GetTick>
 8007d24:	0002      	movs	r2, r0
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d11a      	bne.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d013      	beq.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d48:	2220      	movs	r2, #32
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2241      	movs	r2, #65	@ 0x41
 8007d54:	2120      	movs	r1, #32
 8007d56:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2242      	movs	r2, #66	@ 0x42
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2240      	movs	r2, #64	@ 0x40
 8007d64:	2100      	movs	r1, #0
 8007d66:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e007      	b.n	8007d7c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2202      	movs	r2, #2
 8007d74:	4013      	ands	r3, r2
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d1c5      	bne.n	8007d06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	b004      	add	sp, #16
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d90:	e02f      	b.n	8007df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f000 f8d5 	bl	8007f48 <I2C_IsErrorOccurred>
 8007d9e:	1e03      	subs	r3, r0, #0
 8007da0:	d001      	beq.n	8007da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e02d      	b.n	8007e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da6:	f7ff f959 	bl	800705c <HAL_GetTick>
 8007daa:	0002      	movs	r2, r0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d302      	bcc.n	8007dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d11a      	bne.n	8007df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d013      	beq.n	8007df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dce:	2220      	movs	r2, #32
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2241      	movs	r2, #65	@ 0x41
 8007dda:	2120      	movs	r1, #32
 8007ddc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2242      	movs	r2, #66	@ 0x42
 8007de2:	2100      	movs	r1, #0
 8007de4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2240      	movs	r2, #64	@ 0x40
 8007dea:	2100      	movs	r1, #0
 8007dec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e007      	b.n	8007e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d1c8      	bne.n	8007d92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b004      	add	sp, #16
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e18:	2317      	movs	r3, #23
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007e20:	e07b      	b.n	8007f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f000 f88d 	bl	8007f48 <I2C_IsErrorOccurred>
 8007e2e:	1e03      	subs	r3, r0, #0
 8007e30:	d003      	beq.n	8007e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8007e32:	2317      	movs	r3, #23
 8007e34:	18fb      	adds	r3, r7, r3
 8007e36:	2201      	movs	r2, #1
 8007e38:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2220      	movs	r2, #32
 8007e42:	4013      	ands	r3, r2
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	d140      	bne.n	8007eca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8007e48:	2117      	movs	r1, #23
 8007e4a:	187b      	adds	r3, r7, r1
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d13b      	bne.n	8007eca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	2204      	movs	r2, #4
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d106      	bne.n	8007e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	2210      	movs	r2, #16
 8007e76:	4013      	ands	r3, r2
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d123      	bne.n	8007ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2210      	movs	r2, #16
 8007e82:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2204      	movs	r2, #4
 8007e88:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4929      	ldr	r1, [pc, #164]	@ (8007f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8007e9e:	400a      	ands	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2241      	movs	r2, #65	@ 0x41
 8007ea6:	2120      	movs	r1, #32
 8007ea8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2242      	movs	r2, #66	@ 0x42
 8007eae:	2100      	movs	r1, #0
 8007eb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2240      	movs	r2, #64	@ 0x40
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007eba:	2317      	movs	r3, #23
 8007ebc:	18fb      	adds	r3, r7, r3
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	e002      	b.n	8007eca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007eca:	f7ff f8c7 	bl	800705c <HAL_GetTick>
 8007ece:	0002      	movs	r2, r0
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11c      	bne.n	8007f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8007ee0:	2017      	movs	r0, #23
 8007ee2:	183b      	adds	r3, r7, r0
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d117      	bne.n	8007f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	2204      	movs	r2, #4
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d010      	beq.n	8007f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007efc:	2220      	movs	r2, #32
 8007efe:	431a      	orrs	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2241      	movs	r2, #65	@ 0x41
 8007f08:	2120      	movs	r1, #32
 8007f0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2240      	movs	r2, #64	@ 0x40
 8007f10:	2100      	movs	r1, #0
 8007f12:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007f14:	183b      	adds	r3, r7, r0
 8007f16:	2201      	movs	r2, #1
 8007f18:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2204      	movs	r2, #4
 8007f22:	4013      	ands	r3, r2
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d005      	beq.n	8007f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007f28:	2317      	movs	r3, #23
 8007f2a:	18fb      	adds	r3, r7, r3
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d100      	bne.n	8007f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007f32:	e776      	b.n	8007e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8007f34:	2317      	movs	r3, #23
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	781b      	ldrb	r3, [r3, #0]
}
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	b006      	add	sp, #24
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	46c0      	nop			@ (mov r8, r8)
 8007f44:	fe00e800 	.word	0xfe00e800

08007f48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	@ 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f54:	2327      	movs	r3, #39	@ 0x27
 8007f56:	18fb      	adds	r3, r7, r3
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	4013      	ands	r3, r2
 8007f72:	d100      	bne.n	8007f76 <I2C_IsErrorOccurred+0x2e>
 8007f74:	e079      	b.n	800806a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f7e:	e057      	b.n	8008030 <I2C_IsErrorOccurred+0xe8>
 8007f80:	2227      	movs	r2, #39	@ 0x27
 8007f82:	18bb      	adds	r3, r7, r2
 8007f84:	18ba      	adds	r2, r7, r2
 8007f86:	7812      	ldrb	r2, [r2, #0]
 8007f88:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	d04f      	beq.n	8008030 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f90:	f7ff f864 	bl	800705c <HAL_GetTick>
 8007f94:	0002      	movs	r2, r0
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d302      	bcc.n	8007fa6 <I2C_IsErrorOccurred+0x5e>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d144      	bne.n	8008030 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	2380      	movs	r3, #128	@ 0x80
 8007fae:	01db      	lsls	r3, r3, #7
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fb4:	2013      	movs	r0, #19
 8007fb6:	183b      	adds	r3, r7, r0
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	2142      	movs	r1, #66	@ 0x42
 8007fbc:	5c52      	ldrb	r2, [r2, r1]
 8007fbe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	2380      	movs	r3, #128	@ 0x80
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	401a      	ands	r2, r3
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d126      	bne.n	8008022 <I2C_IsErrorOccurred+0xda>
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	2380      	movs	r3, #128	@ 0x80
 8007fd8:	01db      	lsls	r3, r3, #7
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d021      	beq.n	8008022 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007fde:	183b      	adds	r3, r7, r0
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d01d      	beq.n	8008022 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2180      	movs	r1, #128	@ 0x80
 8007ff2:	01c9      	lsls	r1, r1, #7
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ff8:	f7ff f830 	bl	800705c <HAL_GetTick>
 8007ffc:	0003      	movs	r3, r0
 8007ffe:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008000:	e00f      	b.n	8008022 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008002:	f7ff f82b 	bl	800705c <HAL_GetTick>
 8008006:	0002      	movs	r2, r0
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b19      	cmp	r3, #25
 800800e:	d908      	bls.n	8008022 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	2220      	movs	r2, #32
 8008014:	4313      	orrs	r3, r2
 8008016:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008018:	2327      	movs	r3, #39	@ 0x27
 800801a:	18fb      	adds	r3, r7, r3
 800801c:	2201      	movs	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]

              break;
 8008020:	e006      	b.n	8008030 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2220      	movs	r2, #32
 800802a:	4013      	ands	r3, r2
 800802c:	2b20      	cmp	r3, #32
 800802e:	d1e8      	bne.n	8008002 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	2220      	movs	r2, #32
 8008038:	4013      	ands	r3, r2
 800803a:	2b20      	cmp	r3, #32
 800803c:	d004      	beq.n	8008048 <I2C_IsErrorOccurred+0x100>
 800803e:	2327      	movs	r3, #39	@ 0x27
 8008040:	18fb      	adds	r3, r7, r3
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d09b      	beq.n	8007f80 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008048:	2327      	movs	r3, #39	@ 0x27
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d103      	bne.n	800805a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2220      	movs	r2, #32
 8008058:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	2204      	movs	r2, #4
 800805e:	4313      	orrs	r3, r2
 8008060:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008062:	2327      	movs	r3, #39	@ 0x27
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	2201      	movs	r2, #1
 8008068:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	2380      	movs	r3, #128	@ 0x80
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	4013      	ands	r3, r2
 800807a:	d00c      	beq.n	8008096 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	2201      	movs	r2, #1
 8008080:	4313      	orrs	r3, r2
 8008082:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2280      	movs	r2, #128	@ 0x80
 800808a:	0052      	lsls	r2, r2, #1
 800808c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800808e:	2327      	movs	r3, #39	@ 0x27
 8008090:	18fb      	adds	r3, r7, r3
 8008092:	2201      	movs	r2, #1
 8008094:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	2380      	movs	r3, #128	@ 0x80
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	4013      	ands	r3, r2
 800809e:	d00c      	beq.n	80080ba <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	2208      	movs	r2, #8
 80080a4:	4313      	orrs	r3, r2
 80080a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2280      	movs	r2, #128	@ 0x80
 80080ae:	00d2      	lsls	r2, r2, #3
 80080b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080b2:	2327      	movs	r3, #39	@ 0x27
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	2201      	movs	r2, #1
 80080b8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	2380      	movs	r3, #128	@ 0x80
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4013      	ands	r3, r2
 80080c2:	d00c      	beq.n	80080de <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	2202      	movs	r2, #2
 80080c8:	4313      	orrs	r3, r2
 80080ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2280      	movs	r2, #128	@ 0x80
 80080d2:	0092      	lsls	r2, r2, #2
 80080d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080d6:	2327      	movs	r3, #39	@ 0x27
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80080de:	2327      	movs	r3, #39	@ 0x27
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d01d      	beq.n	8008124 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	0018      	movs	r0, r3
 80080ec:	f7ff fd8a 	bl	8007c04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	490e      	ldr	r1, [pc, #56]	@ (8008134 <I2C_IsErrorOccurred+0x1ec>)
 80080fc:	400a      	ands	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	431a      	orrs	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2241      	movs	r2, #65	@ 0x41
 8008110:	2120      	movs	r1, #32
 8008112:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2242      	movs	r2, #66	@ 0x42
 8008118:	2100      	movs	r1, #0
 800811a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2240      	movs	r2, #64	@ 0x40
 8008120:	2100      	movs	r1, #0
 8008122:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008124:	2327      	movs	r3, #39	@ 0x27
 8008126:	18fb      	adds	r3, r7, r3
 8008128:	781b      	ldrb	r3, [r3, #0]
}
 800812a:	0018      	movs	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	b00a      	add	sp, #40	@ 0x28
 8008130:	bd80      	pop	{r7, pc}
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	fe00e800 	.word	0xfe00e800

08008138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008138:	b590      	push	{r4, r7, lr}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	0008      	movs	r0, r1
 8008142:	0011      	movs	r1, r2
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	240a      	movs	r4, #10
 8008148:	193b      	adds	r3, r7, r4
 800814a:	1c02      	adds	r2, r0, #0
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	2009      	movs	r0, #9
 8008150:	183b      	adds	r3, r7, r0
 8008152:	1c0a      	adds	r2, r1, #0
 8008154:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008156:	193b      	adds	r3, r7, r4
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	059b      	lsls	r3, r3, #22
 800815c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800815e:	183b      	adds	r3, r7, r0
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	0419      	lsls	r1, r3, #16
 8008164:	23ff      	movs	r3, #255	@ 0xff
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800816a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008172:	4313      	orrs	r3, r2
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	085b      	lsrs	r3, r3, #1
 8008178:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008182:	0d51      	lsrs	r1, r2, #21
 8008184:	2280      	movs	r2, #128	@ 0x80
 8008186:	00d2      	lsls	r2, r2, #3
 8008188:	400a      	ands	r2, r1
 800818a:	4907      	ldr	r1, [pc, #28]	@ (80081a8 <I2C_TransferConfig+0x70>)
 800818c:	430a      	orrs	r2, r1
 800818e:	43d2      	mvns	r2, r2
 8008190:	401a      	ands	r2, r3
 8008192:	0011      	movs	r1, r2
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800819e:	46c0      	nop			@ (mov r8, r8)
 80081a0:	46bd      	mov	sp, r7
 80081a2:	b007      	add	sp, #28
 80081a4:	bd90      	pop	{r4, r7, pc}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	03ff63ff 	.word	0x03ff63ff

080081ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2241      	movs	r2, #65	@ 0x41
 80081ba:	5c9b      	ldrb	r3, [r3, r2]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d138      	bne.n	8008234 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2240      	movs	r2, #64	@ 0x40
 80081c6:	5c9b      	ldrb	r3, [r3, r2]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e032      	b.n	8008236 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2240      	movs	r2, #64	@ 0x40
 80081d4:	2101      	movs	r1, #1
 80081d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2241      	movs	r2, #65	@ 0x41
 80081dc:	2124      	movs	r1, #36	@ 0x24
 80081de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2101      	movs	r1, #1
 80081ec:	438a      	bics	r2, r1
 80081ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4911      	ldr	r1, [pc, #68]	@ (8008240 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80081fc:	400a      	ands	r2, r1
 80081fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2101      	movs	r1, #1
 800821c:	430a      	orrs	r2, r1
 800821e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2241      	movs	r2, #65	@ 0x41
 8008224:	2120      	movs	r1, #32
 8008226:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2240      	movs	r2, #64	@ 0x40
 800822c:	2100      	movs	r1, #0
 800822e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	e000      	b.n	8008236 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008234:	2302      	movs	r3, #2
  }
}
 8008236:	0018      	movs	r0, r3
 8008238:	46bd      	mov	sp, r7
 800823a:	b002      	add	sp, #8
 800823c:	bd80      	pop	{r7, pc}
 800823e:	46c0      	nop			@ (mov r8, r8)
 8008240:	ffffefff 	.word	0xffffefff

08008244 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2241      	movs	r2, #65	@ 0x41
 8008252:	5c9b      	ldrb	r3, [r3, r2]
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b20      	cmp	r3, #32
 8008258:	d139      	bne.n	80082ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2240      	movs	r2, #64	@ 0x40
 800825e:	5c9b      	ldrb	r3, [r3, r2]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008264:	2302      	movs	r3, #2
 8008266:	e033      	b.n	80082d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2240      	movs	r2, #64	@ 0x40
 800826c:	2101      	movs	r1, #1
 800826e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2241      	movs	r2, #65	@ 0x41
 8008274:	2124      	movs	r1, #36	@ 0x24
 8008276:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2101      	movs	r1, #1
 8008284:	438a      	bics	r2, r1
 8008286:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4a11      	ldr	r2, [pc, #68]	@ (80082d8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008294:	4013      	ands	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	021b      	lsls	r3, r3, #8
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2101      	movs	r1, #1
 80082b6:	430a      	orrs	r2, r1
 80082b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2241      	movs	r2, #65	@ 0x41
 80082be:	2120      	movs	r1, #32
 80082c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2240      	movs	r2, #64	@ 0x40
 80082c6:	2100      	movs	r1, #0
 80082c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e000      	b.n	80082d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082ce:	2302      	movs	r3, #2
  }
}
 80082d0:	0018      	movs	r0, r3
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b004      	add	sp, #16
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	fffff0ff 	.word	0xfffff0ff

080082dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80082e4:	4b19      	ldr	r3, [pc, #100]	@ (800834c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a19      	ldr	r2, [pc, #100]	@ (8008350 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80082ea:	4013      	ands	r3, r2
 80082ec:	0019      	movs	r1, r3
 80082ee:	4b17      	ldr	r3, [pc, #92]	@ (800834c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d11f      	bne.n	8008340 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008300:	4b14      	ldr	r3, [pc, #80]	@ (8008354 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	0013      	movs	r3, r2
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	189b      	adds	r3, r3, r2
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	4912      	ldr	r1, [pc, #72]	@ (8008358 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800830e:	0018      	movs	r0, r3
 8008310:	f7f7 ff0c 	bl	800012c <__udivsi3>
 8008314:	0003      	movs	r3, r0
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800831a:	e008      	b.n	800832e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3b01      	subs	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e001      	b.n	800832e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e009      	b.n	8008342 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800832e:	4b07      	ldr	r3, [pc, #28]	@ (800834c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	2380      	movs	r3, #128	@ 0x80
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	401a      	ands	r2, r3
 8008338:	2380      	movs	r3, #128	@ 0x80
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	429a      	cmp	r2, r3
 800833e:	d0ed      	beq.n	800831c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	40007000 	.word	0x40007000
 8008350:	fffff9ff 	.word	0xfffff9ff
 8008354:	200009c8 	.word	0x200009c8
 8008358:	000f4240 	.word	0x000f4240

0800835c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008360:	4b03      	ldr	r3, [pc, #12]	@ (8008370 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	23e0      	movs	r3, #224	@ 0xe0
 8008366:	01db      	lsls	r3, r3, #7
 8008368:	4013      	ands	r3, r2
}
 800836a:	0018      	movs	r0, r3
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	40021000 	.word	0x40021000

08008374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	f000 fb50 	bl	8008a28 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2201      	movs	r2, #1
 800838e:	4013      	ands	r3, r2
 8008390:	d100      	bne.n	8008394 <HAL_RCC_OscConfig+0x20>
 8008392:	e07c      	b.n	800848e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008394:	4bc3      	ldr	r3, [pc, #780]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	2238      	movs	r2, #56	@ 0x38
 800839a:	4013      	ands	r3, r2
 800839c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800839e:	4bc1      	ldr	r3, [pc, #772]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	2203      	movs	r2, #3
 80083a4:	4013      	ands	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	2b10      	cmp	r3, #16
 80083ac:	d102      	bne.n	80083b4 <HAL_RCC_OscConfig+0x40>
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d002      	beq.n	80083ba <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d10b      	bne.n	80083d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ba:	4bba      	ldr	r3, [pc, #744]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	2380      	movs	r3, #128	@ 0x80
 80083c0:	029b      	lsls	r3, r3, #10
 80083c2:	4013      	ands	r3, r2
 80083c4:	d062      	beq.n	800848c <HAL_RCC_OscConfig+0x118>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d15e      	bne.n	800848c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e32a      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	2380      	movs	r3, #128	@ 0x80
 80083d8:	025b      	lsls	r3, r3, #9
 80083da:	429a      	cmp	r2, r3
 80083dc:	d107      	bne.n	80083ee <HAL_RCC_OscConfig+0x7a>
 80083de:	4bb1      	ldr	r3, [pc, #708]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4bb0      	ldr	r3, [pc, #704]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80083e4:	2180      	movs	r1, #128	@ 0x80
 80083e6:	0249      	lsls	r1, r1, #9
 80083e8:	430a      	orrs	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e020      	b.n	8008430 <HAL_RCC_OscConfig+0xbc>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	23a0      	movs	r3, #160	@ 0xa0
 80083f4:	02db      	lsls	r3, r3, #11
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d10e      	bne.n	8008418 <HAL_RCC_OscConfig+0xa4>
 80083fa:	4baa      	ldr	r3, [pc, #680]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4ba9      	ldr	r3, [pc, #676]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008400:	2180      	movs	r1, #128	@ 0x80
 8008402:	02c9      	lsls	r1, r1, #11
 8008404:	430a      	orrs	r2, r1
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	4ba6      	ldr	r3, [pc, #664]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4ba5      	ldr	r3, [pc, #660]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800840e:	2180      	movs	r1, #128	@ 0x80
 8008410:	0249      	lsls	r1, r1, #9
 8008412:	430a      	orrs	r2, r1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e00b      	b.n	8008430 <HAL_RCC_OscConfig+0xbc>
 8008418:	4ba2      	ldr	r3, [pc, #648]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	4ba1      	ldr	r3, [pc, #644]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800841e:	49a2      	ldr	r1, [pc, #648]	@ (80086a8 <HAL_RCC_OscConfig+0x334>)
 8008420:	400a      	ands	r2, r1
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	4b9f      	ldr	r3, [pc, #636]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4b9e      	ldr	r3, [pc, #632]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800842a:	49a0      	ldr	r1, [pc, #640]	@ (80086ac <HAL_RCC_OscConfig+0x338>)
 800842c:	400a      	ands	r2, r1
 800842e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d014      	beq.n	8008462 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008438:	f7fe fe10 	bl	800705c <HAL_GetTick>
 800843c:	0003      	movs	r3, r0
 800843e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008440:	e008      	b.n	8008454 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008442:	f7fe fe0b 	bl	800705c <HAL_GetTick>
 8008446:	0002      	movs	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b64      	cmp	r3, #100	@ 0x64
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e2e9      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008454:	4b93      	ldr	r3, [pc, #588]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	2380      	movs	r3, #128	@ 0x80
 800845a:	029b      	lsls	r3, r3, #10
 800845c:	4013      	ands	r3, r2
 800845e:	d0f0      	beq.n	8008442 <HAL_RCC_OscConfig+0xce>
 8008460:	e015      	b.n	800848e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008462:	f7fe fdfb 	bl	800705c <HAL_GetTick>
 8008466:	0003      	movs	r3, r0
 8008468:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800846c:	f7fe fdf6 	bl	800705c <HAL_GetTick>
 8008470:	0002      	movs	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b64      	cmp	r3, #100	@ 0x64
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e2d4      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800847e:	4b89      	ldr	r3, [pc, #548]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	2380      	movs	r3, #128	@ 0x80
 8008484:	029b      	lsls	r3, r3, #10
 8008486:	4013      	ands	r3, r2
 8008488:	d1f0      	bne.n	800846c <HAL_RCC_OscConfig+0xf8>
 800848a:	e000      	b.n	800848e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800848c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2202      	movs	r2, #2
 8008494:	4013      	ands	r3, r2
 8008496:	d100      	bne.n	800849a <HAL_RCC_OscConfig+0x126>
 8008498:	e099      	b.n	80085ce <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800849a:	4b82      	ldr	r3, [pc, #520]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2238      	movs	r2, #56	@ 0x38
 80084a0:	4013      	ands	r3, r2
 80084a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084a4:	4b7f      	ldr	r3, [pc, #508]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	2203      	movs	r2, #3
 80084aa:	4013      	ands	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	d102      	bne.n	80084ba <HAL_RCC_OscConfig+0x146>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d002      	beq.n	80084c0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d135      	bne.n	800852c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084c0:	4b78      	ldr	r3, [pc, #480]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	2380      	movs	r3, #128	@ 0x80
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	4013      	ands	r3, r2
 80084ca:	d005      	beq.n	80084d8 <HAL_RCC_OscConfig+0x164>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e2a7      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d8:	4b72      	ldr	r3, [pc, #456]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	4a74      	ldr	r2, [pc, #464]	@ (80086b0 <HAL_RCC_OscConfig+0x33c>)
 80084de:	4013      	ands	r3, r2
 80084e0:	0019      	movs	r1, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	021a      	lsls	r2, r3, #8
 80084e8:	4b6e      	ldr	r3, [pc, #440]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d112      	bne.n	800851a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80084f4:	4b6b      	ldr	r3, [pc, #428]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a6e      	ldr	r2, [pc, #440]	@ (80086b4 <HAL_RCC_OscConfig+0x340>)
 80084fa:	4013      	ands	r3, r2
 80084fc:	0019      	movs	r1, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691a      	ldr	r2, [r3, #16]
 8008502:	4b68      	ldr	r3, [pc, #416]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008504:	430a      	orrs	r2, r1
 8008506:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008508:	4b66      	ldr	r3, [pc, #408]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	0adb      	lsrs	r3, r3, #11
 800850e:	2207      	movs	r2, #7
 8008510:	4013      	ands	r3, r2
 8008512:	4a69      	ldr	r2, [pc, #420]	@ (80086b8 <HAL_RCC_OscConfig+0x344>)
 8008514:	40da      	lsrs	r2, r3
 8008516:	4b69      	ldr	r3, [pc, #420]	@ (80086bc <HAL_RCC_OscConfig+0x348>)
 8008518:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800851a:	4b69      	ldr	r3, [pc, #420]	@ (80086c0 <HAL_RCC_OscConfig+0x34c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	0018      	movs	r0, r3
 8008520:	f7fe fd40 	bl	8006fa4 <HAL_InitTick>
 8008524:	1e03      	subs	r3, r0, #0
 8008526:	d051      	beq.n	80085cc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e27d      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d030      	beq.n	8008596 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008534:	4b5b      	ldr	r3, [pc, #364]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a5e      	ldr	r2, [pc, #376]	@ (80086b4 <HAL_RCC_OscConfig+0x340>)
 800853a:	4013      	ands	r3, r2
 800853c:	0019      	movs	r1, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	4b58      	ldr	r3, [pc, #352]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008544:	430a      	orrs	r2, r1
 8008546:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008548:	4b56      	ldr	r3, [pc, #344]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4b55      	ldr	r3, [pc, #340]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800854e:	2180      	movs	r1, #128	@ 0x80
 8008550:	0049      	lsls	r1, r1, #1
 8008552:	430a      	orrs	r2, r1
 8008554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008556:	f7fe fd81 	bl	800705c <HAL_GetTick>
 800855a:	0003      	movs	r3, r0
 800855c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008560:	f7fe fd7c 	bl	800705c <HAL_GetTick>
 8008564:	0002      	movs	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e25a      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008572:	4b4c      	ldr	r3, [pc, #304]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	2380      	movs	r3, #128	@ 0x80
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	4013      	ands	r3, r2
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857e:	4b49      	ldr	r3, [pc, #292]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	4a4b      	ldr	r2, [pc, #300]	@ (80086b0 <HAL_RCC_OscConfig+0x33c>)
 8008584:	4013      	ands	r3, r2
 8008586:	0019      	movs	r1, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	021a      	lsls	r2, r3, #8
 800858e:	4b45      	ldr	r3, [pc, #276]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
 8008594:	e01b      	b.n	80085ce <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008596:	4b43      	ldr	r3, [pc, #268]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	4b42      	ldr	r3, [pc, #264]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800859c:	4949      	ldr	r1, [pc, #292]	@ (80086c4 <HAL_RCC_OscConfig+0x350>)
 800859e:	400a      	ands	r2, r1
 80085a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a2:	f7fe fd5b 	bl	800705c <HAL_GetTick>
 80085a6:	0003      	movs	r3, r0
 80085a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085ac:	f7fe fd56 	bl	800705c <HAL_GetTick>
 80085b0:	0002      	movs	r2, r0
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e234      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085be:	4b39      	ldr	r3, [pc, #228]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	2380      	movs	r3, #128	@ 0x80
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	4013      	ands	r3, r2
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0x238>
 80085ca:	e000      	b.n	80085ce <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2208      	movs	r2, #8
 80085d4:	4013      	ands	r3, r2
 80085d6:	d047      	beq.n	8008668 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80085d8:	4b32      	ldr	r3, [pc, #200]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	2238      	movs	r2, #56	@ 0x38
 80085de:	4013      	ands	r3, r2
 80085e0:	2b18      	cmp	r3, #24
 80085e2:	d10a      	bne.n	80085fa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80085e4:	4b2f      	ldr	r3, [pc, #188]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 80085e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085e8:	2202      	movs	r2, #2
 80085ea:	4013      	ands	r3, r2
 80085ec:	d03c      	beq.n	8008668 <HAL_RCC_OscConfig+0x2f4>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d138      	bne.n	8008668 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e216      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d019      	beq.n	8008636 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008602:	4b28      	ldr	r3, [pc, #160]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008604:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008606:	4b27      	ldr	r3, [pc, #156]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008608:	2101      	movs	r1, #1
 800860a:	430a      	orrs	r2, r1
 800860c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860e:	f7fe fd25 	bl	800705c <HAL_GetTick>
 8008612:	0003      	movs	r3, r0
 8008614:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008618:	f7fe fd20 	bl	800705c <HAL_GetTick>
 800861c:	0002      	movs	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e1fe      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800862a:	4b1e      	ldr	r3, [pc, #120]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800862c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800862e:	2202      	movs	r2, #2
 8008630:	4013      	ands	r3, r2
 8008632:	d0f1      	beq.n	8008618 <HAL_RCC_OscConfig+0x2a4>
 8008634:	e018      	b.n	8008668 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008636:	4b1b      	ldr	r3, [pc, #108]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008638:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800863a:	4b1a      	ldr	r3, [pc, #104]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800863c:	2101      	movs	r1, #1
 800863e:	438a      	bics	r2, r1
 8008640:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008642:	f7fe fd0b 	bl	800705c <HAL_GetTick>
 8008646:	0003      	movs	r3, r0
 8008648:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800864c:	f7fe fd06 	bl	800705c <HAL_GetTick>
 8008650:	0002      	movs	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e1e4      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800865e:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 8008660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008662:	2202      	movs	r2, #2
 8008664:	4013      	ands	r3, r2
 8008666:	d1f1      	bne.n	800864c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2204      	movs	r2, #4
 800866e:	4013      	ands	r3, r2
 8008670:	d100      	bne.n	8008674 <HAL_RCC_OscConfig+0x300>
 8008672:	e0c7      	b.n	8008804 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008674:	231f      	movs	r3, #31
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800867c:	4b09      	ldr	r3, [pc, #36]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	2238      	movs	r2, #56	@ 0x38
 8008682:	4013      	ands	r3, r2
 8008684:	2b20      	cmp	r3, #32
 8008686:	d11f      	bne.n	80086c8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008688:	4b06      	ldr	r3, [pc, #24]	@ (80086a4 <HAL_RCC_OscConfig+0x330>)
 800868a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800868c:	2202      	movs	r2, #2
 800868e:	4013      	ands	r3, r2
 8008690:	d100      	bne.n	8008694 <HAL_RCC_OscConfig+0x320>
 8008692:	e0b7      	b.n	8008804 <HAL_RCC_OscConfig+0x490>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d000      	beq.n	800869e <HAL_RCC_OscConfig+0x32a>
 800869c:	e0b2      	b.n	8008804 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e1c2      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
 80086a2:	46c0      	nop			@ (mov r8, r8)
 80086a4:	40021000 	.word	0x40021000
 80086a8:	fffeffff 	.word	0xfffeffff
 80086ac:	fffbffff 	.word	0xfffbffff
 80086b0:	ffff80ff 	.word	0xffff80ff
 80086b4:	ffffc7ff 	.word	0xffffc7ff
 80086b8:	00f42400 	.word	0x00f42400
 80086bc:	200009c8 	.word	0x200009c8
 80086c0:	200009cc 	.word	0x200009cc
 80086c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80086c8:	4bb5      	ldr	r3, [pc, #724]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80086ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086cc:	2380      	movs	r3, #128	@ 0x80
 80086ce:	055b      	lsls	r3, r3, #21
 80086d0:	4013      	ands	r3, r2
 80086d2:	d101      	bne.n	80086d8 <HAL_RCC_OscConfig+0x364>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <HAL_RCC_OscConfig+0x366>
 80086d8:	2300      	movs	r3, #0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80086de:	4bb0      	ldr	r3, [pc, #704]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80086e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e2:	4baf      	ldr	r3, [pc, #700]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80086e4:	2180      	movs	r1, #128	@ 0x80
 80086e6:	0549      	lsls	r1, r1, #21
 80086e8:	430a      	orrs	r2, r1
 80086ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80086ec:	4bac      	ldr	r3, [pc, #688]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80086ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086f0:	2380      	movs	r3, #128	@ 0x80
 80086f2:	055b      	lsls	r3, r3, #21
 80086f4:	4013      	ands	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80086fa:	231f      	movs	r3, #31
 80086fc:	18fb      	adds	r3, r7, r3
 80086fe:	2201      	movs	r2, #1
 8008700:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008702:	4ba8      	ldr	r3, [pc, #672]	@ (80089a4 <HAL_RCC_OscConfig+0x630>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	2380      	movs	r3, #128	@ 0x80
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4013      	ands	r3, r2
 800870c:	d11a      	bne.n	8008744 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800870e:	4ba5      	ldr	r3, [pc, #660]	@ (80089a4 <HAL_RCC_OscConfig+0x630>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4ba4      	ldr	r3, [pc, #656]	@ (80089a4 <HAL_RCC_OscConfig+0x630>)
 8008714:	2180      	movs	r1, #128	@ 0x80
 8008716:	0049      	lsls	r1, r1, #1
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800871c:	f7fe fc9e 	bl	800705c <HAL_GetTick>
 8008720:	0003      	movs	r3, r0
 8008722:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008724:	e008      	b.n	8008738 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008726:	f7fe fc99 	bl	800705c <HAL_GetTick>
 800872a:	0002      	movs	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e177      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008738:	4b9a      	ldr	r3, [pc, #616]	@ (80089a4 <HAL_RCC_OscConfig+0x630>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	2380      	movs	r3, #128	@ 0x80
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	4013      	ands	r3, r2
 8008742:	d0f0      	beq.n	8008726 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d106      	bne.n	800875a <HAL_RCC_OscConfig+0x3e6>
 800874c:	4b94      	ldr	r3, [pc, #592]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800874e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008750:	4b93      	ldr	r3, [pc, #588]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008752:	2101      	movs	r1, #1
 8008754:	430a      	orrs	r2, r1
 8008756:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008758:	e01c      	b.n	8008794 <HAL_RCC_OscConfig+0x420>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b05      	cmp	r3, #5
 8008760:	d10c      	bne.n	800877c <HAL_RCC_OscConfig+0x408>
 8008762:	4b8f      	ldr	r3, [pc, #572]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008766:	4b8e      	ldr	r3, [pc, #568]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008768:	2104      	movs	r1, #4
 800876a:	430a      	orrs	r2, r1
 800876c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800876e:	4b8c      	ldr	r3, [pc, #560]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008772:	4b8b      	ldr	r3, [pc, #556]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008774:	2101      	movs	r1, #1
 8008776:	430a      	orrs	r2, r1
 8008778:	65da      	str	r2, [r3, #92]	@ 0x5c
 800877a:	e00b      	b.n	8008794 <HAL_RCC_OscConfig+0x420>
 800877c:	4b88      	ldr	r3, [pc, #544]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800877e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008780:	4b87      	ldr	r3, [pc, #540]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008782:	2101      	movs	r1, #1
 8008784:	438a      	bics	r2, r1
 8008786:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008788:	4b85      	ldr	r3, [pc, #532]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800878a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800878c:	4b84      	ldr	r3, [pc, #528]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800878e:	2104      	movs	r1, #4
 8008790:	438a      	bics	r2, r1
 8008792:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d014      	beq.n	80087c6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7fe fc5e 	bl	800705c <HAL_GetTick>
 80087a0:	0003      	movs	r3, r0
 80087a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087a4:	e009      	b.n	80087ba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a6:	f7fe fc59 	bl	800705c <HAL_GetTick>
 80087aa:	0002      	movs	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	4a7d      	ldr	r2, [pc, #500]	@ (80089a8 <HAL_RCC_OscConfig+0x634>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e136      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087ba:	4b79      	ldr	r3, [pc, #484]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80087bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087be:	2202      	movs	r2, #2
 80087c0:	4013      	ands	r3, r2
 80087c2:	d0f0      	beq.n	80087a6 <HAL_RCC_OscConfig+0x432>
 80087c4:	e013      	b.n	80087ee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fe fc49 	bl	800705c <HAL_GetTick>
 80087ca:	0003      	movs	r3, r0
 80087cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087ce:	e009      	b.n	80087e4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d0:	f7fe fc44 	bl	800705c <HAL_GetTick>
 80087d4:	0002      	movs	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	4a73      	ldr	r2, [pc, #460]	@ (80089a8 <HAL_RCC_OscConfig+0x634>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e121      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087e4:	4b6e      	ldr	r3, [pc, #440]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80087e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087e8:	2202      	movs	r2, #2
 80087ea:	4013      	ands	r3, r2
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80087ee:	231f      	movs	r3, #31
 80087f0:	18fb      	adds	r3, r7, r3
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d105      	bne.n	8008804 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80087f8:	4b69      	ldr	r3, [pc, #420]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80087fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087fc:	4b68      	ldr	r3, [pc, #416]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80087fe:	496b      	ldr	r1, [pc, #428]	@ (80089ac <HAL_RCC_OscConfig+0x638>)
 8008800:	400a      	ands	r2, r1
 8008802:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2220      	movs	r2, #32
 800880a:	4013      	ands	r3, r2
 800880c:	d039      	beq.n	8008882 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01b      	beq.n	800884e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008816:	4b62      	ldr	r3, [pc, #392]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b61      	ldr	r3, [pc, #388]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800881c:	2180      	movs	r1, #128	@ 0x80
 800881e:	03c9      	lsls	r1, r1, #15
 8008820:	430a      	orrs	r2, r1
 8008822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008824:	f7fe fc1a 	bl	800705c <HAL_GetTick>
 8008828:	0003      	movs	r3, r0
 800882a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800882c:	e008      	b.n	8008840 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800882e:	f7fe fc15 	bl	800705c <HAL_GetTick>
 8008832:	0002      	movs	r2, r0
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e0f3      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008840:	4b57      	ldr	r3, [pc, #348]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	2380      	movs	r3, #128	@ 0x80
 8008846:	041b      	lsls	r3, r3, #16
 8008848:	4013      	ands	r3, r2
 800884a:	d0f0      	beq.n	800882e <HAL_RCC_OscConfig+0x4ba>
 800884c:	e019      	b.n	8008882 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800884e:	4b54      	ldr	r3, [pc, #336]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	4b53      	ldr	r3, [pc, #332]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008854:	4956      	ldr	r1, [pc, #344]	@ (80089b0 <HAL_RCC_OscConfig+0x63c>)
 8008856:	400a      	ands	r2, r1
 8008858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800885a:	f7fe fbff 	bl	800705c <HAL_GetTick>
 800885e:	0003      	movs	r3, r0
 8008860:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008864:	f7fe fbfa 	bl	800705c <HAL_GetTick>
 8008868:	0002      	movs	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e0d8      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008876:	4b4a      	ldr	r3, [pc, #296]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	2380      	movs	r3, #128	@ 0x80
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	4013      	ands	r3, r2
 8008880:	d1f0      	bne.n	8008864 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d100      	bne.n	800888c <HAL_RCC_OscConfig+0x518>
 800888a:	e0cc      	b.n	8008a26 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800888c:	4b44      	ldr	r3, [pc, #272]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2238      	movs	r2, #56	@ 0x38
 8008892:	4013      	ands	r3, r2
 8008894:	2b10      	cmp	r3, #16
 8008896:	d100      	bne.n	800889a <HAL_RCC_OscConfig+0x526>
 8008898:	e07b      	b.n	8008992 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d156      	bne.n	8008950 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a2:	4b3f      	ldr	r3, [pc, #252]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4b3e      	ldr	r3, [pc, #248]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80088a8:	4942      	ldr	r1, [pc, #264]	@ (80089b4 <HAL_RCC_OscConfig+0x640>)
 80088aa:	400a      	ands	r2, r1
 80088ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ae:	f7fe fbd5 	bl	800705c <HAL_GetTick>
 80088b2:	0003      	movs	r3, r0
 80088b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b8:	f7fe fbd0 	bl	800705c <HAL_GetTick>
 80088bc:	0002      	movs	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e0ae      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088ca:	4b35      	ldr	r3, [pc, #212]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	2380      	movs	r3, #128	@ 0x80
 80088d0:	049b      	lsls	r3, r3, #18
 80088d2:	4013      	ands	r3, r2
 80088d4:	d1f0      	bne.n	80088b8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088d6:	4b32      	ldr	r3, [pc, #200]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	4a37      	ldr	r2, [pc, #220]	@ (80089b8 <HAL_RCC_OscConfig+0x644>)
 80088dc:	4013      	ands	r3, r2
 80088de:	0019      	movs	r1, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e8:	431a      	orrs	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ee:	021b      	lsls	r3, r3, #8
 80088f0:	431a      	orrs	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008902:	431a      	orrs	r2, r3
 8008904:	4b26      	ldr	r3, [pc, #152]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008906:	430a      	orrs	r2, r1
 8008908:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800890a:	4b25      	ldr	r3, [pc, #148]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b24      	ldr	r3, [pc, #144]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008910:	2180      	movs	r1, #128	@ 0x80
 8008912:	0449      	lsls	r1, r1, #17
 8008914:	430a      	orrs	r2, r1
 8008916:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008918:	4b21      	ldr	r3, [pc, #132]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800891e:	2180      	movs	r1, #128	@ 0x80
 8008920:	0549      	lsls	r1, r1, #21
 8008922:	430a      	orrs	r2, r1
 8008924:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008926:	f7fe fb99 	bl	800705c <HAL_GetTick>
 800892a:	0003      	movs	r3, r0
 800892c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008930:	f7fe fb94 	bl	800705c <HAL_GetTick>
 8008934:	0002      	movs	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e072      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008942:	4b17      	ldr	r3, [pc, #92]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	2380      	movs	r3, #128	@ 0x80
 8008948:	049b      	lsls	r3, r3, #18
 800894a:	4013      	ands	r3, r2
 800894c:	d0f0      	beq.n	8008930 <HAL_RCC_OscConfig+0x5bc>
 800894e:	e06a      	b.n	8008a26 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008950:	4b13      	ldr	r3, [pc, #76]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b12      	ldr	r3, [pc, #72]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008956:	4917      	ldr	r1, [pc, #92]	@ (80089b4 <HAL_RCC_OscConfig+0x640>)
 8008958:	400a      	ands	r2, r1
 800895a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895c:	f7fe fb7e 	bl	800705c <HAL_GetTick>
 8008960:	0003      	movs	r3, r0
 8008962:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008964:	e008      	b.n	8008978 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008966:	f7fe fb79 	bl	800705c <HAL_GetTick>
 800896a:	0002      	movs	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e057      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008978:	4b09      	ldr	r3, [pc, #36]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	2380      	movs	r3, #128	@ 0x80
 800897e:	049b      	lsls	r3, r3, #18
 8008980:	4013      	ands	r3, r2
 8008982:	d1f0      	bne.n	8008966 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008984:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 8008986:	68da      	ldr	r2, [r3, #12]
 8008988:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <HAL_RCC_OscConfig+0x62c>)
 800898a:	490c      	ldr	r1, [pc, #48]	@ (80089bc <HAL_RCC_OscConfig+0x648>)
 800898c:	400a      	ands	r2, r1
 800898e:	60da      	str	r2, [r3, #12]
 8008990:	e049      	b.n	8008a26 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d112      	bne.n	80089c0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e044      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
 800899e:	46c0      	nop			@ (mov r8, r8)
 80089a0:	40021000 	.word	0x40021000
 80089a4:	40007000 	.word	0x40007000
 80089a8:	00001388 	.word	0x00001388
 80089ac:	efffffff 	.word	0xefffffff
 80089b0:	ffbfffff 	.word	0xffbfffff
 80089b4:	feffffff 	.word	0xfeffffff
 80089b8:	11c1808c 	.word	0x11c1808c
 80089bc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80089c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a30 <HAL_RCC_OscConfig+0x6bc>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2203      	movs	r2, #3
 80089ca:	401a      	ands	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d126      	bne.n	8008a22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2270      	movs	r2, #112	@ 0x70
 80089d8:	401a      	ands	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089de:	429a      	cmp	r2, r3
 80089e0:	d11f      	bne.n	8008a22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	23fe      	movs	r3, #254	@ 0xfe
 80089e6:	01db      	lsls	r3, r3, #7
 80089e8:	401a      	ands	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d116      	bne.n	8008a22 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	23f8      	movs	r3, #248	@ 0xf8
 80089f8:	039b      	lsls	r3, r3, #14
 80089fa:	401a      	ands	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d10e      	bne.n	8008a22 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	23e0      	movs	r3, #224	@ 0xe0
 8008a08:	051b      	lsls	r3, r3, #20
 8008a0a:	401a      	ands	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d106      	bne.n	8008a22 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	0f5b      	lsrs	r3, r3, #29
 8008a18:	075a      	lsls	r2, r3, #29
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d001      	beq.n	8008a26 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	0018      	movs	r0, r3
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	b008      	add	sp, #32
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40021000 	.word	0x40021000

08008a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e0e9      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a48:	4b76      	ldr	r3, [pc, #472]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	4013      	ands	r3, r2
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d91e      	bls.n	8008a94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a56:	4b73      	ldr	r3, [pc, #460]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2207      	movs	r2, #7
 8008a5c:	4393      	bics	r3, r2
 8008a5e:	0019      	movs	r1, r3
 8008a60:	4b70      	ldr	r3, [pc, #448]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a68:	f7fe faf8 	bl	800705c <HAL_GetTick>
 8008a6c:	0003      	movs	r3, r0
 8008a6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a70:	e009      	b.n	8008a86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a72:	f7fe faf3 	bl	800705c <HAL_GetTick>
 8008a76:	0002      	movs	r2, r0
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	4a6a      	ldr	r2, [pc, #424]	@ (8008c28 <HAL_RCC_ClockConfig+0x1f4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e0ca      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a86:	4b67      	ldr	r3, [pc, #412]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2207      	movs	r2, #7
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d1ee      	bne.n	8008a72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2202      	movs	r2, #2
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	d015      	beq.n	8008aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	d006      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008aa8:	4b60      	ldr	r3, [pc, #384]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	4b5f      	ldr	r3, [pc, #380]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008aae:	21e0      	movs	r1, #224	@ 0xe0
 8008ab0:	01c9      	lsls	r1, r1, #7
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	4a5d      	ldr	r2, [pc, #372]	@ (8008c30 <HAL_RCC_ClockConfig+0x1fc>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	0019      	movs	r1, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	4b59      	ldr	r3, [pc, #356]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	d057      	beq.n	8008b84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d107      	bne.n	8008aec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008adc:	4b53      	ldr	r3, [pc, #332]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	2380      	movs	r3, #128	@ 0x80
 8008ae2:	029b      	lsls	r3, r3, #10
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	d12b      	bne.n	8008b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e097      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d107      	bne.n	8008b04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008af4:	4b4d      	ldr	r3, [pc, #308]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	2380      	movs	r3, #128	@ 0x80
 8008afa:	049b      	lsls	r3, r3, #18
 8008afc:	4013      	ands	r3, r2
 8008afe:	d11f      	bne.n	8008b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e08b      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b0c:	4b47      	ldr	r3, [pc, #284]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	2380      	movs	r3, #128	@ 0x80
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	4013      	ands	r3, r2
 8008b16:	d113      	bne.n	8008b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e07f      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d106      	bne.n	8008b32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b24:	4b41      	ldr	r3, [pc, #260]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b28:	2202      	movs	r2, #2
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	d108      	bne.n	8008b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e074      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b32:	4b3e      	ldr	r3, [pc, #248]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b36:	2202      	movs	r2, #2
 8008b38:	4013      	ands	r3, r2
 8008b3a:	d101      	bne.n	8008b40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e06d      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b40:	4b3a      	ldr	r3, [pc, #232]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2207      	movs	r2, #7
 8008b46:	4393      	bics	r3, r2
 8008b48:	0019      	movs	r1, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	4b37      	ldr	r3, [pc, #220]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008b50:	430a      	orrs	r2, r1
 8008b52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b54:	f7fe fa82 	bl	800705c <HAL_GetTick>
 8008b58:	0003      	movs	r3, r0
 8008b5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b5c:	e009      	b.n	8008b72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b5e:	f7fe fa7d 	bl	800705c <HAL_GetTick>
 8008b62:	0002      	movs	r2, r0
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	4a2f      	ldr	r2, [pc, #188]	@ (8008c28 <HAL_RCC_ClockConfig+0x1f4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e054      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b72:	4b2e      	ldr	r3, [pc, #184]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	2238      	movs	r2, #56	@ 0x38
 8008b78:	401a      	ands	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d1ec      	bne.n	8008b5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b84:	4b27      	ldr	r3, [pc, #156]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2207      	movs	r2, #7
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d21e      	bcs.n	8008bd0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b92:	4b24      	ldr	r3, [pc, #144]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2207      	movs	r2, #7
 8008b98:	4393      	bics	r3, r2
 8008b9a:	0019      	movs	r1, r3
 8008b9c:	4b21      	ldr	r3, [pc, #132]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008ba4:	f7fe fa5a 	bl	800705c <HAL_GetTick>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bac:	e009      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bae:	f7fe fa55 	bl	800705c <HAL_GetTick>
 8008bb2:	0002      	movs	r2, r0
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c28 <HAL_RCC_ClockConfig+0x1f4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e02c      	b.n	8008c1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bc2:	4b18      	ldr	r3, [pc, #96]	@ (8008c24 <HAL_RCC_ClockConfig+0x1f0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2207      	movs	r2, #7
 8008bc8:	4013      	ands	r3, r2
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d1ee      	bne.n	8008bae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	d009      	beq.n	8008bee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008bda:	4b14      	ldr	r3, [pc, #80]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	4a15      	ldr	r2, [pc, #84]	@ (8008c34 <HAL_RCC_ClockConfig+0x200>)
 8008be0:	4013      	ands	r3, r2
 8008be2:	0019      	movs	r1, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	4b10      	ldr	r3, [pc, #64]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008bea:	430a      	orrs	r2, r1
 8008bec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008bee:	f000 f829 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 8008bf2:	0001      	movs	r1, r0
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8008c2c <HAL_RCC_ClockConfig+0x1f8>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	0a1b      	lsrs	r3, r3, #8
 8008bfa:	220f      	movs	r2, #15
 8008bfc:	401a      	ands	r2, r3
 8008bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008c38 <HAL_RCC_ClockConfig+0x204>)
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	58d3      	ldr	r3, [r2, r3]
 8008c04:	221f      	movs	r2, #31
 8008c06:	4013      	ands	r3, r2
 8008c08:	000a      	movs	r2, r1
 8008c0a:	40da      	lsrs	r2, r3
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c3c <HAL_RCC_ClockConfig+0x208>)
 8008c0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008c10:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <HAL_RCC_ClockConfig+0x20c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	0018      	movs	r0, r3
 8008c16:	f7fe f9c5 	bl	8006fa4 <HAL_InitTick>
 8008c1a:	0003      	movs	r3, r0
}
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	b004      	add	sp, #16
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40022000 	.word	0x40022000
 8008c28:	00001388 	.word	0x00001388
 8008c2c:	40021000 	.word	0x40021000
 8008c30:	fffff0ff 	.word	0xfffff0ff
 8008c34:	ffff8fff 	.word	0xffff8fff
 8008c38:	0800d938 	.word	0x0800d938
 8008c3c:	200009c8 	.word	0x200009c8
 8008c40:	200009cc 	.word	0x200009cc

08008c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	2238      	movs	r2, #56	@ 0x38
 8008c50:	4013      	ands	r3, r2
 8008c52:	d10f      	bne.n	8008c74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008c54:	4b39      	ldr	r3, [pc, #228]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	0adb      	lsrs	r3, r3, #11
 8008c5a:	2207      	movs	r2, #7
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	2201      	movs	r2, #1
 8008c60:	409a      	lsls	r2, r3
 8008c62:	0013      	movs	r3, r2
 8008c64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	4835      	ldr	r0, [pc, #212]	@ (8008d40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008c6a:	f7f7 fa5f 	bl	800012c <__udivsi3>
 8008c6e:	0003      	movs	r3, r0
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	e05d      	b.n	8008d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c74:	4b31      	ldr	r3, [pc, #196]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	2238      	movs	r2, #56	@ 0x38
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d102      	bne.n	8008c86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c80:	4b30      	ldr	r3, [pc, #192]	@ (8008d44 <HAL_RCC_GetSysClockFreq+0x100>)
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	e054      	b.n	8008d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c86:	4b2d      	ldr	r3, [pc, #180]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2238      	movs	r2, #56	@ 0x38
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	d138      	bne.n	8008d04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008c92:	4b2a      	ldr	r3, [pc, #168]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	2203      	movs	r2, #3
 8008c98:	4013      	ands	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c9c:	4b27      	ldr	r3, [pc, #156]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	091b      	lsrs	r3, r3, #4
 8008ca2:	2207      	movs	r2, #7
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d10d      	bne.n	8008ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	4824      	ldr	r0, [pc, #144]	@ (8008d44 <HAL_RCC_GetSysClockFreq+0x100>)
 8008cb4:	f7f7 fa3a 	bl	800012c <__udivsi3>
 8008cb8:	0003      	movs	r3, r0
 8008cba:	0019      	movs	r1, r3
 8008cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	227f      	movs	r2, #127	@ 0x7f
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	434b      	muls	r3, r1
 8008cc8:	617b      	str	r3, [r7, #20]
        break;
 8008cca:	e00d      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008ccc:	68b9      	ldr	r1, [r7, #8]
 8008cce:	481c      	ldr	r0, [pc, #112]	@ (8008d40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008cd0:	f7f7 fa2c 	bl	800012c <__udivsi3>
 8008cd4:	0003      	movs	r3, r0
 8008cd6:	0019      	movs	r1, r3
 8008cd8:	4b18      	ldr	r3, [pc, #96]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	0a1b      	lsrs	r3, r3, #8
 8008cde:	227f      	movs	r2, #127	@ 0x7f
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	434b      	muls	r3, r1
 8008ce4:	617b      	str	r3, [r7, #20]
        break;
 8008ce6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008ce8:	4b14      	ldr	r3, [pc, #80]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	0f5b      	lsrs	r3, r3, #29
 8008cee:	2207      	movs	r2, #7
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	6978      	ldr	r0, [r7, #20]
 8008cfa:	f7f7 fa17 	bl	800012c <__udivsi3>
 8008cfe:	0003      	movs	r3, r0
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	e015      	b.n	8008d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008d04:	4b0d      	ldr	r3, [pc, #52]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	2238      	movs	r2, #56	@ 0x38
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d103      	bne.n	8008d18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008d10:	2380      	movs	r3, #128	@ 0x80
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	e00b      	b.n	8008d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008d18:	4b08      	ldr	r3, [pc, #32]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	2238      	movs	r2, #56	@ 0x38
 8008d1e:	4013      	ands	r3, r2
 8008d20:	2b18      	cmp	r3, #24
 8008d22:	d103      	bne.n	8008d2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008d24:	23fa      	movs	r3, #250	@ 0xfa
 8008d26:	01db      	lsls	r3, r3, #7
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	e001      	b.n	8008d30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008d30:	693b      	ldr	r3, [r7, #16]
}
 8008d32:	0018      	movs	r0, r3
 8008d34:	46bd      	mov	sp, r7
 8008d36:	b006      	add	sp, #24
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	46c0      	nop			@ (mov r8, r8)
 8008d3c:	40021000 	.word	0x40021000
 8008d40:	00f42400 	.word	0x00f42400
 8008d44:	007a1200 	.word	0x007a1200

08008d48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d4c:	4b02      	ldr	r3, [pc, #8]	@ (8008d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
}
 8008d50:	0018      	movs	r0, r3
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	46c0      	nop			@ (mov r8, r8)
 8008d58:	200009c8 	.word	0x200009c8

08008d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d5c:	b5b0      	push	{r4, r5, r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008d60:	f7ff fff2 	bl	8008d48 <HAL_RCC_GetHCLKFreq>
 8008d64:	0004      	movs	r4, r0
 8008d66:	f7ff faf9 	bl	800835c <LL_RCC_GetAPB1Prescaler>
 8008d6a:	0003      	movs	r3, r0
 8008d6c:	0b1a      	lsrs	r2, r3, #12
 8008d6e:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d70:	0092      	lsls	r2, r2, #2
 8008d72:	58d3      	ldr	r3, [r2, r3]
 8008d74:	221f      	movs	r2, #31
 8008d76:	4013      	ands	r3, r2
 8008d78:	40dc      	lsrs	r4, r3
 8008d7a:	0023      	movs	r3, r4
}
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bdb0      	pop	{r4, r5, r7, pc}
 8008d82:	46c0      	nop			@ (mov r8, r8)
 8008d84:	0800d978 	.word	0x0800d978

08008d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008d90:	2313      	movs	r3, #19
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d98:	2312      	movs	r3, #18
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	2380      	movs	r3, #128	@ 0x80
 8008da6:	029b      	lsls	r3, r3, #10
 8008da8:	4013      	ands	r3, r2
 8008daa:	d100      	bne.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008dac:	e0ad      	b.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dae:	2011      	movs	r0, #17
 8008db0:	183b      	adds	r3, r7, r0
 8008db2:	2200      	movs	r2, #0
 8008db4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008db6:	4b47      	ldr	r3, [pc, #284]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dba:	2380      	movs	r3, #128	@ 0x80
 8008dbc:	055b      	lsls	r3, r3, #21
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d110      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dc2:	4b44      	ldr	r3, [pc, #272]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dc6:	4b43      	ldr	r3, [pc, #268]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008dc8:	2180      	movs	r1, #128	@ 0x80
 8008dca:	0549      	lsls	r1, r1, #21
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008dd0:	4b40      	ldr	r3, [pc, #256]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dd4:	2380      	movs	r3, #128	@ 0x80
 8008dd6:	055b      	lsls	r3, r3, #21
 8008dd8:	4013      	ands	r3, r2
 8008dda:	60bb      	str	r3, [r7, #8]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dde:	183b      	adds	r3, r7, r0
 8008de0:	2201      	movs	r2, #1
 8008de2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008de4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008dea:	2180      	movs	r1, #128	@ 0x80
 8008dec:	0049      	lsls	r1, r1, #1
 8008dee:	430a      	orrs	r2, r1
 8008df0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008df2:	f7fe f933 	bl	800705c <HAL_GetTick>
 8008df6:	0003      	movs	r3, r0
 8008df8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dfa:	e00b      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dfc:	f7fe f92e 	bl	800705c <HAL_GetTick>
 8008e00:	0002      	movs	r2, r0
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d904      	bls.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008e0a:	2313      	movs	r3, #19
 8008e0c:	18fb      	adds	r3, r7, r3
 8008e0e:	2203      	movs	r2, #3
 8008e10:	701a      	strb	r2, [r3, #0]
        break;
 8008e12:	e005      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e14:	4b30      	ldr	r3, [pc, #192]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	2380      	movs	r3, #128	@ 0x80
 8008e1a:	005b      	lsls	r3, r3, #1
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	d0ed      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008e20:	2313      	movs	r3, #19
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d15e      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e2e:	23c0      	movs	r3, #192	@ 0xc0
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4013      	ands	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d019      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d014      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e46:	4b23      	ldr	r3, [pc, #140]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e4a:	4a24      	ldr	r2, [pc, #144]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e50:	4b20      	ldr	r3, [pc, #128]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e54:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e56:	2180      	movs	r1, #128	@ 0x80
 8008e58:	0249      	lsls	r1, r1, #9
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e62:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e64:	491e      	ldr	r1, [pc, #120]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8008e66:	400a      	ands	r2, r1
 8008e68:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	2201      	movs	r2, #1
 8008e74:	4013      	ands	r3, r2
 8008e76:	d016      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e78:	f7fe f8f0 	bl	800705c <HAL_GetTick>
 8008e7c:	0003      	movs	r3, r0
 8008e7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e80:	e00c      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e82:	f7fe f8eb 	bl	800705c <HAL_GetTick>
 8008e86:	0002      	movs	r2, r0
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d904      	bls.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008e92:	2313      	movs	r3, #19
 8008e94:	18fb      	adds	r3, r7, r3
 8008e96:	2203      	movs	r2, #3
 8008e98:	701a      	strb	r2, [r3, #0]
            break;
 8008e9a:	e004      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	d0ed      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008ea6:	2313      	movs	r3, #19
 8008ea8:	18fb      	adds	r3, r7, r3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008eb0:	4b08      	ldr	r3, [pc, #32]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eb4:	4a09      	ldr	r2, [pc, #36]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	0019      	movs	r1, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ebe:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008ec4:	e016      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ec6:	2312      	movs	r3, #18
 8008ec8:	18fb      	adds	r3, r7, r3
 8008eca:	2213      	movs	r2, #19
 8008ecc:	18ba      	adds	r2, r7, r2
 8008ece:	7812      	ldrb	r2, [r2, #0]
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	e00f      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008ed4:	40021000 	.word	0x40021000
 8008ed8:	40007000 	.word	0x40007000
 8008edc:	fffffcff 	.word	0xfffffcff
 8008ee0:	fffeffff 	.word	0xfffeffff
 8008ee4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee8:	2312      	movs	r3, #18
 8008eea:	18fb      	adds	r3, r7, r3
 8008eec:	2213      	movs	r2, #19
 8008eee:	18ba      	adds	r2, r7, r2
 8008ef0:	7812      	ldrb	r2, [r2, #0]
 8008ef2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ef4:	2311      	movs	r3, #17
 8008ef6:	18fb      	adds	r3, r7, r3
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d105      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008efe:	4bb6      	ldr	r3, [pc, #728]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f02:	4bb5      	ldr	r3, [pc, #724]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f04:	49b5      	ldr	r1, [pc, #724]	@ (80091dc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8008f06:	400a      	ands	r2, r1
 8008f08:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4013      	ands	r3, r2
 8008f12:	d009      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f14:	4bb0      	ldr	r3, [pc, #704]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f18:	2203      	movs	r2, #3
 8008f1a:	4393      	bics	r3, r2
 8008f1c:	0019      	movs	r1, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	4bad      	ldr	r3, [pc, #692]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f24:	430a      	orrs	r2, r1
 8008f26:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	4013      	ands	r3, r2
 8008f30:	d009      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f32:	4ba9      	ldr	r3, [pc, #676]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f36:	220c      	movs	r2, #12
 8008f38:	4393      	bics	r3, r2
 8008f3a:	0019      	movs	r1, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	4ba5      	ldr	r3, [pc, #660]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f42:	430a      	orrs	r2, r1
 8008f44:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2204      	movs	r2, #4
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	d009      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f50:	4ba1      	ldr	r3, [pc, #644]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f54:	2230      	movs	r2, #48	@ 0x30
 8008f56:	4393      	bics	r3, r2
 8008f58:	0019      	movs	r1, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f60:	430a      	orrs	r2, r1
 8008f62:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2210      	movs	r2, #16
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	d009      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f6e:	4b9a      	ldr	r3, [pc, #616]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f72:	4a9b      	ldr	r2, [pc, #620]	@ (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	0019      	movs	r1, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691a      	ldr	r2, [r3, #16]
 8008f7c:	4b96      	ldr	r3, [pc, #600]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	2380      	movs	r3, #128	@ 0x80
 8008f88:	015b      	lsls	r3, r3, #5
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	d009      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8008f8e:	4b92      	ldr	r3, [pc, #584]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f92:	4a94      	ldr	r2, [pc, #592]	@ (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	0019      	movs	r1, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	695a      	ldr	r2, [r3, #20]
 8008f9c:	4b8e      	ldr	r3, [pc, #568]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	2380      	movs	r3, #128	@ 0x80
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4013      	ands	r3, r2
 8008fac:	d009      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fae:	4b8a      	ldr	r3, [pc, #552]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb2:	4a8d      	ldr	r2, [pc, #564]	@ (80091e8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fbc:	4b86      	ldr	r3, [pc, #536]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	2380      	movs	r3, #128	@ 0x80
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	4013      	ands	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008fce:	4b82      	ldr	r3, [pc, #520]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd2:	4a86      	ldr	r2, [pc, #536]	@ (80091ec <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	0019      	movs	r1, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	4013      	ands	r3, r2
 8008fea:	d009      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fec:	4b7a      	ldr	r3, [pc, #488]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff0:	4a7f      	ldr	r2, [pc, #508]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	0019      	movs	r1, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	4b77      	ldr	r3, [pc, #476]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2240      	movs	r2, #64	@ 0x40
 8009006:	4013      	ands	r3, r2
 8009008:	d009      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800900a:	4b73      	ldr	r3, [pc, #460]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800900c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900e:	4a79      	ldr	r2, [pc, #484]	@ (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009010:	4013      	ands	r3, r2
 8009012:	0019      	movs	r1, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69da      	ldr	r2, [r3, #28]
 8009018:	4b6f      	ldr	r3, [pc, #444]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800901a:	430a      	orrs	r2, r1
 800901c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	2380      	movs	r3, #128	@ 0x80
 8009024:	01db      	lsls	r3, r3, #7
 8009026:	4013      	ands	r3, r2
 8009028:	d015      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800902a:	4b6b      	ldr	r3, [pc, #428]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800902c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	0899      	lsrs	r1, r3, #2
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009036:	4b68      	ldr	r3, [pc, #416]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009038:	430a      	orrs	r2, r1
 800903a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009040:	2380      	movs	r3, #128	@ 0x80
 8009042:	05db      	lsls	r3, r3, #23
 8009044:	429a      	cmp	r2, r3
 8009046:	d106      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009048:	4b63      	ldr	r3, [pc, #396]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	4b62      	ldr	r3, [pc, #392]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	0249      	lsls	r1, r1, #9
 8009052:	430a      	orrs	r2, r1
 8009054:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	2380      	movs	r3, #128	@ 0x80
 800905c:	031b      	lsls	r3, r3, #12
 800905e:	4013      	ands	r3, r2
 8009060:	d009      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009062:	4b5d      	ldr	r3, [pc, #372]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009066:	2240      	movs	r2, #64	@ 0x40
 8009068:	4393      	bics	r3, r2
 800906a:	0019      	movs	r1, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009070:	4b59      	ldr	r3, [pc, #356]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009072:	430a      	orrs	r2, r1
 8009074:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	2380      	movs	r3, #128	@ 0x80
 800907c:	039b      	lsls	r3, r3, #14
 800907e:	4013      	ands	r3, r2
 8009080:	d016      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009082:	4b55      	ldr	r3, [pc, #340]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009086:	4a5c      	ldr	r2, [pc, #368]	@ (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009088:	4013      	ands	r3, r2
 800908a:	0019      	movs	r1, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009090:	4b51      	ldr	r3, [pc, #324]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009092:	430a      	orrs	r2, r1
 8009094:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800909a:	2380      	movs	r3, #128	@ 0x80
 800909c:	03db      	lsls	r3, r3, #15
 800909e:	429a      	cmp	r2, r3
 80090a0:	d106      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80090a2:	4b4d      	ldr	r3, [pc, #308]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	4b4c      	ldr	r3, [pc, #304]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80090a8:	2180      	movs	r1, #128	@ 0x80
 80090aa:	0449      	lsls	r1, r1, #17
 80090ac:	430a      	orrs	r2, r1
 80090ae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	2380      	movs	r3, #128	@ 0x80
 80090b6:	03db      	lsls	r3, r3, #15
 80090b8:	4013      	ands	r3, r2
 80090ba:	d016      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80090bc:	4b46      	ldr	r3, [pc, #280]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80090be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c0:	4a4e      	ldr	r2, [pc, #312]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	0019      	movs	r1, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ca:	4b43      	ldr	r3, [pc, #268]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80090cc:	430a      	orrs	r2, r1
 80090ce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090d4:	2380      	movs	r3, #128	@ 0x80
 80090d6:	045b      	lsls	r3, r3, #17
 80090d8:	429a      	cmp	r2, r3
 80090da:	d106      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80090dc:	4b3e      	ldr	r3, [pc, #248]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80090de:	68da      	ldr	r2, [r3, #12]
 80090e0:	4b3d      	ldr	r3, [pc, #244]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80090e2:	2180      	movs	r1, #128	@ 0x80
 80090e4:	0449      	lsls	r1, r1, #17
 80090e6:	430a      	orrs	r2, r1
 80090e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	2380      	movs	r3, #128	@ 0x80
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	4013      	ands	r3, r2
 80090f4:	d014      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80090f6:	4b38      	ldr	r3, [pc, #224]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80090f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fa:	2203      	movs	r2, #3
 80090fc:	4393      	bics	r3, r2
 80090fe:	0019      	movs	r1, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a1a      	ldr	r2, [r3, #32]
 8009104:	4b34      	ldr	r3, [pc, #208]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009106:	430a      	orrs	r2, r1
 8009108:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d106      	bne.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009112:	4b31      	ldr	r3, [pc, #196]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	4b30      	ldr	r3, [pc, #192]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009118:	2180      	movs	r1, #128	@ 0x80
 800911a:	0249      	lsls	r1, r1, #9
 800911c:	430a      	orrs	r2, r1
 800911e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	2380      	movs	r3, #128	@ 0x80
 8009126:	019b      	lsls	r3, r3, #6
 8009128:	4013      	ands	r3, r2
 800912a:	d014      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800912c:	4b2a      	ldr	r3, [pc, #168]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800912e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009130:	220c      	movs	r2, #12
 8009132:	4393      	bics	r3, r2
 8009134:	0019      	movs	r1, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800913a:	4b27      	ldr	r3, [pc, #156]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800913c:	430a      	orrs	r2, r1
 800913e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009144:	2b04      	cmp	r3, #4
 8009146:	d106      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009148:	4b23      	ldr	r3, [pc, #140]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	4b22      	ldr	r3, [pc, #136]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800914e:	2180      	movs	r1, #128	@ 0x80
 8009150:	0249      	lsls	r1, r1, #9
 8009152:	430a      	orrs	r2, r1
 8009154:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	2380      	movs	r3, #128	@ 0x80
 800915c:	045b      	lsls	r3, r3, #17
 800915e:	4013      	ands	r3, r2
 8009160:	d016      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009162:	4b1d      	ldr	r3, [pc, #116]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009166:	4a22      	ldr	r2, [pc, #136]	@ (80091f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009168:	4013      	ands	r3, r2
 800916a:	0019      	movs	r1, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009170:	4b19      	ldr	r3, [pc, #100]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009172:	430a      	orrs	r2, r1
 8009174:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800917a:	2380      	movs	r3, #128	@ 0x80
 800917c:	019b      	lsls	r3, r3, #6
 800917e:	429a      	cmp	r2, r3
 8009180:	d106      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009182:	4b15      	ldr	r3, [pc, #84]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	4b14      	ldr	r3, [pc, #80]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009188:	2180      	movs	r1, #128	@ 0x80
 800918a:	0449      	lsls	r1, r1, #17
 800918c:	430a      	orrs	r2, r1
 800918e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	2380      	movs	r3, #128	@ 0x80
 8009196:	049b      	lsls	r3, r3, #18
 8009198:	4013      	ands	r3, r2
 800919a:	d016      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800919c:	4b0e      	ldr	r3, [pc, #56]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800919e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a0:	4a10      	ldr	r2, [pc, #64]	@ (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80091a2:	4013      	ands	r3, r2
 80091a4:	0019      	movs	r1, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091aa:	4b0b      	ldr	r3, [pc, #44]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80091ac:	430a      	orrs	r2, r1
 80091ae:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091b4:	2380      	movs	r3, #128	@ 0x80
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d106      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80091bc:	4b06      	ldr	r3, [pc, #24]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	4b05      	ldr	r3, [pc, #20]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80091c2:	2180      	movs	r1, #128	@ 0x80
 80091c4:	0449      	lsls	r1, r1, #17
 80091c6:	430a      	orrs	r2, r1
 80091c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80091ca:	2312      	movs	r3, #18
 80091cc:	18fb      	adds	r3, r7, r3
 80091ce:	781b      	ldrb	r3, [r3, #0]
}
 80091d0:	0018      	movs	r0, r3
 80091d2:	46bd      	mov	sp, r7
 80091d4:	b006      	add	sp, #24
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	40021000 	.word	0x40021000
 80091dc:	efffffff 	.word	0xefffffff
 80091e0:	fffff3ff 	.word	0xfffff3ff
 80091e4:	fffffcff 	.word	0xfffffcff
 80091e8:	fff3ffff 	.word	0xfff3ffff
 80091ec:	ffcfffff 	.word	0xffcfffff
 80091f0:	ffffcfff 	.word	0xffffcfff
 80091f4:	ffff3fff 	.word	0xffff3fff
 80091f8:	ffbfffff 	.word	0xffbfffff
 80091fc:	feffffff 	.word	0xfeffffff

08009200 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009200:	b5b0      	push	{r4, r5, r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009208:	230f      	movs	r3, #15
 800920a:	18fb      	adds	r3, r7, r3
 800920c:	2201      	movs	r2, #1
 800920e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d100      	bne.n	8009218 <HAL_RTC_Init+0x18>
 8009216:	e08c      	b.n	8009332 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2229      	movs	r2, #41	@ 0x29
 800921c:	5c9b      	ldrb	r3, [r3, r2]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10b      	bne.n	800923c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2228      	movs	r2, #40	@ 0x28
 8009228:	2100      	movs	r1, #0
 800922a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2288      	movs	r2, #136	@ 0x88
 8009230:	0212      	lsls	r2, r2, #8
 8009232:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	0018      	movs	r0, r3
 8009238:	f7fd fc30 	bl	8006a9c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2229      	movs	r2, #41	@ 0x29
 8009240:	2102      	movs	r1, #2
 8009242:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2210      	movs	r2, #16
 800924c:	4013      	ands	r3, r2
 800924e:	2b10      	cmp	r3, #16
 8009250:	d062      	beq.n	8009318 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	22ca      	movs	r2, #202	@ 0xca
 8009258:	625a      	str	r2, [r3, #36]	@ 0x24
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2253      	movs	r2, #83	@ 0x53
 8009260:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009262:	250f      	movs	r5, #15
 8009264:	197c      	adds	r4, r7, r5
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	0018      	movs	r0, r3
 800926a:	f000 fc0f 	bl	8009a8c <RTC_EnterInitMode>
 800926e:	0003      	movs	r3, r0
 8009270:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8009272:	0028      	movs	r0, r5
 8009274:	183b      	adds	r3, r7, r0
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d12c      	bne.n	80092d6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	492e      	ldr	r1, [pc, #184]	@ (8009340 <HAL_RTC_Init+0x140>)
 8009288:	400a      	ands	r2, r1
 800928a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6999      	ldr	r1, [r3, #24]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	6912      	ldr	r2, [r2, #16]
 80092b2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6919      	ldr	r1, [r3, #16]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	041a      	lsls	r2, r3, #16
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80092c8:	183c      	adds	r4, r7, r0
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	0018      	movs	r0, r3
 80092ce:	f000 fc1f 	bl	8009b10 <RTC_ExitInitMode>
 80092d2:	0003      	movs	r3, r0
 80092d4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80092d6:	230f      	movs	r3, #15
 80092d8:	18fb      	adds	r3, r7, r3
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d116      	bne.n	800930e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699a      	ldr	r2, [r3, #24]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	00d2      	lsls	r2, r2, #3
 80092ec:	08d2      	lsrs	r2, r2, #3
 80092ee:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6999      	ldr	r1, [r3, #24]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	431a      	orrs	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	431a      	orrs	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	22ff      	movs	r2, #255	@ 0xff
 8009314:	625a      	str	r2, [r3, #36]	@ 0x24
 8009316:	e003      	b.n	8009320 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009318:	230f      	movs	r3, #15
 800931a:	18fb      	adds	r3, r7, r3
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8009320:	230f      	movs	r3, #15
 8009322:	18fb      	adds	r3, r7, r3
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d103      	bne.n	8009332 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2229      	movs	r2, #41	@ 0x29
 800932e:	2101      	movs	r1, #1
 8009330:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8009332:	230f      	movs	r3, #15
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	781b      	ldrb	r3, [r3, #0]
}
 8009338:	0018      	movs	r0, r3
 800933a:	46bd      	mov	sp, r7
 800933c:	b004      	add	sp, #16
 800933e:	bdb0      	pop	{r4, r5, r7, pc}
 8009340:	fb8fffbf 	.word	0xfb8fffbf

08009344 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009344:	b5b0      	push	{r4, r5, r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2228      	movs	r2, #40	@ 0x28
 8009354:	5c9b      	ldrb	r3, [r3, r2]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_RTC_SetTime+0x1a>
 800935a:	2302      	movs	r3, #2
 800935c:	e092      	b.n	8009484 <HAL_RTC_SetTime+0x140>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2228      	movs	r2, #40	@ 0x28
 8009362:	2101      	movs	r1, #1
 8009364:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2229      	movs	r2, #41	@ 0x29
 800936a:	2102      	movs	r1, #2
 800936c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	22ca      	movs	r2, #202	@ 0xca
 8009374:	625a      	str	r2, [r3, #36]	@ 0x24
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2253      	movs	r2, #83	@ 0x53
 800937c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800937e:	2513      	movs	r5, #19
 8009380:	197c      	adds	r4, r7, r5
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	0018      	movs	r0, r3
 8009386:	f000 fb81 	bl	8009a8c <RTC_EnterInitMode>
 800938a:	0003      	movs	r3, r0
 800938c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800938e:	197b      	adds	r3, r7, r5
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d162      	bne.n	800945c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d125      	bne.n	80093e8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	2240      	movs	r2, #64	@ 0x40
 80093a4:	4013      	ands	r3, r2
 80093a6:	d102      	bne.n	80093ae <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2200      	movs	r2, #0
 80093ac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	0018      	movs	r0, r3
 80093b4:	f000 fbf0 	bl	8009b98 <RTC_ByteToBcd2>
 80093b8:	0003      	movs	r3, r0
 80093ba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	785b      	ldrb	r3, [r3, #1]
 80093c0:	0018      	movs	r0, r3
 80093c2:	f000 fbe9 	bl	8009b98 <RTC_ByteToBcd2>
 80093c6:	0003      	movs	r3, r0
 80093c8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80093ca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	789b      	ldrb	r3, [r3, #2]
 80093d0:	0018      	movs	r0, r3
 80093d2:	f000 fbe1 	bl	8009b98 <RTC_ByteToBcd2>
 80093d6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80093d8:	0022      	movs	r2, r4
 80093da:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	78db      	ldrb	r3, [r3, #3]
 80093e0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80093e2:	4313      	orrs	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	e017      	b.n	8009418 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	2240      	movs	r2, #64	@ 0x40
 80093f0:	4013      	ands	r3, r2
 80093f2:	d102      	bne.n	80093fa <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2200      	movs	r2, #0
 80093f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009406:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800940c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	78db      	ldrb	r3, [r3, #3]
 8009412:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	491b      	ldr	r1, [pc, #108]	@ (800948c <HAL_RTC_SetTime+0x148>)
 8009420:	400a      	ands	r2, r1
 8009422:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4918      	ldr	r1, [pc, #96]	@ (8009490 <HAL_RTC_SetTime+0x14c>)
 8009430:	400a      	ands	r2, r1
 8009432:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6999      	ldr	r1, [r3, #24]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	431a      	orrs	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800944c:	2313      	movs	r3, #19
 800944e:	18fc      	adds	r4, r7, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	0018      	movs	r0, r3
 8009454:	f000 fb5c 	bl	8009b10 <RTC_ExitInitMode>
 8009458:	0003      	movs	r3, r0
 800945a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	22ff      	movs	r2, #255	@ 0xff
 8009462:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8009464:	2313      	movs	r3, #19
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d103      	bne.n	8009476 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2229      	movs	r2, #41	@ 0x29
 8009472:	2101      	movs	r1, #1
 8009474:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2228      	movs	r2, #40	@ 0x28
 800947a:	2100      	movs	r1, #0
 800947c:	5499      	strb	r1, [r3, r2]

  return status;
 800947e:	2313      	movs	r3, #19
 8009480:	18fb      	adds	r3, r7, r3
 8009482:	781b      	ldrb	r3, [r3, #0]
}
 8009484:	0018      	movs	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	b006      	add	sp, #24
 800948a:	bdb0      	pop	{r4, r5, r7, pc}
 800948c:	007f7f7f 	.word	0x007f7f7f
 8009490:	fffbffff 	.word	0xfffbffff

08009494 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009494:	b5b0      	push	{r4, r5, r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2228      	movs	r2, #40	@ 0x28
 80094a4:	5c9b      	ldrb	r3, [r3, r2]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_RTC_SetDate+0x1a>
 80094aa:	2302      	movs	r3, #2
 80094ac:	e07e      	b.n	80095ac <HAL_RTC_SetDate+0x118>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2228      	movs	r2, #40	@ 0x28
 80094b2:	2101      	movs	r1, #1
 80094b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2229      	movs	r2, #41	@ 0x29
 80094ba:	2102      	movs	r1, #2
 80094bc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10e      	bne.n	80094e2 <HAL_RTC_SetDate+0x4e>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	785b      	ldrb	r3, [r3, #1]
 80094c8:	001a      	movs	r2, r3
 80094ca:	2310      	movs	r3, #16
 80094cc:	4013      	ands	r3, r2
 80094ce:	d008      	beq.n	80094e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2210      	movs	r2, #16
 80094d6:	4393      	bics	r3, r2
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	330a      	adds	r3, #10
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11c      	bne.n	8009522 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	78db      	ldrb	r3, [r3, #3]
 80094ec:	0018      	movs	r0, r3
 80094ee:	f000 fb53 	bl	8009b98 <RTC_ByteToBcd2>
 80094f2:	0003      	movs	r3, r0
 80094f4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	785b      	ldrb	r3, [r3, #1]
 80094fa:	0018      	movs	r0, r3
 80094fc:	f000 fb4c 	bl	8009b98 <RTC_ByteToBcd2>
 8009500:	0003      	movs	r3, r0
 8009502:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009504:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	789b      	ldrb	r3, [r3, #2]
 800950a:	0018      	movs	r0, r3
 800950c:	f000 fb44 	bl	8009b98 <RTC_ByteToBcd2>
 8009510:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009512:	0022      	movs	r2, r4
 8009514:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800951c:	4313      	orrs	r3, r2
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	e00e      	b.n	8009540 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	78db      	ldrb	r3, [r3, #3]
 8009526:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800952e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009534:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	22ca      	movs	r2, #202	@ 0xca
 8009546:	625a      	str	r2, [r3, #36]	@ 0x24
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2253      	movs	r2, #83	@ 0x53
 800954e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009550:	2513      	movs	r5, #19
 8009552:	197c      	adds	r4, r7, r5
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	0018      	movs	r0, r3
 8009558:	f000 fa98 	bl	8009a8c <RTC_EnterInitMode>
 800955c:	0003      	movs	r3, r0
 800955e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8009560:	0028      	movs	r0, r5
 8009562:	183b      	adds	r3, r7, r0
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10c      	bne.n	8009584 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4910      	ldr	r1, [pc, #64]	@ (80095b4 <HAL_RTC_SetDate+0x120>)
 8009572:	400a      	ands	r2, r1
 8009574:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009576:	183c      	adds	r4, r7, r0
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	0018      	movs	r0, r3
 800957c:	f000 fac8 	bl	8009b10 <RTC_ExitInitMode>
 8009580:	0003      	movs	r3, r0
 8009582:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	22ff      	movs	r2, #255	@ 0xff
 800958a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800958c:	2313      	movs	r3, #19
 800958e:	18fb      	adds	r3, r7, r3
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d103      	bne.n	800959e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2229      	movs	r2, #41	@ 0x29
 800959a:	2101      	movs	r1, #1
 800959c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2228      	movs	r2, #40	@ 0x28
 80095a2:	2100      	movs	r1, #0
 80095a4:	5499      	strb	r1, [r3, r2]

  return status;
 80095a6:	2313      	movs	r3, #19
 80095a8:	18fb      	adds	r3, r7, r3
 80095aa:	781b      	ldrb	r3, [r3, #0]
}
 80095ac:	0018      	movs	r0, r3
 80095ae:	46bd      	mov	sp, r7
 80095b0:	b006      	add	sp, #24
 80095b2:	bdb0      	pop	{r4, r5, r7, pc}
 80095b4:	00ffff3f 	.word	0x00ffff3f

080095b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80095b8:	b590      	push	{r4, r7, lr}
 80095ba:	b089      	sub	sp, #36	@ 0x24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2228      	movs	r2, #40	@ 0x28
 80095c8:	5c9b      	ldrb	r3, [r3, r2]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d101      	bne.n	80095d2 <HAL_RTC_SetAlarm_IT+0x1a>
 80095ce:	2302      	movs	r3, #2
 80095d0:	e127      	b.n	8009822 <HAL_RTC_SetAlarm_IT+0x26a>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2228      	movs	r2, #40	@ 0x28
 80095d6:	2101      	movs	r1, #1
 80095d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2229      	movs	r2, #41	@ 0x29
 80095de:	2102      	movs	r1, #2
 80095e0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d136      	bne.n	8009656 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	2240      	movs	r2, #64	@ 0x40
 80095f0:	4013      	ands	r3, r2
 80095f2:	d102      	bne.n	80095fa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2200      	movs	r2, #0
 80095f8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	0018      	movs	r0, r3
 8009600:	f000 faca 	bl	8009b98 <RTC_ByteToBcd2>
 8009604:	0003      	movs	r3, r0
 8009606:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	0018      	movs	r0, r3
 800960e:	f000 fac3 	bl	8009b98 <RTC_ByteToBcd2>
 8009612:	0003      	movs	r3, r0
 8009614:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009616:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	789b      	ldrb	r3, [r3, #2]
 800961c:	0018      	movs	r0, r3
 800961e:	f000 fabb 	bl	8009b98 <RTC_ByteToBcd2>
 8009622:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009624:	0022      	movs	r2, r4
 8009626:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	78db      	ldrb	r3, [r3, #3]
 800962c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800962e:	431a      	orrs	r2, r3
 8009630:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2220      	movs	r2, #32
 8009636:	5c9b      	ldrb	r3, [r3, r2]
 8009638:	0018      	movs	r0, r3
 800963a:	f000 faad 	bl	8009b98 <RTC_ByteToBcd2>
 800963e:	0003      	movs	r3, r0
 8009640:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009642:	0022      	movs	r2, r4
 8009644:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800964a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009650:	4313      	orrs	r3, r2
 8009652:	61fb      	str	r3, [r7, #28]
 8009654:	e022      	b.n	800969c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	2240      	movs	r2, #64	@ 0x40
 800965e:	4013      	ands	r3, r2
 8009660:	d102      	bne.n	8009668 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2200      	movs	r2, #0
 8009666:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	785b      	ldrb	r3, [r3, #1]
 8009672:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009674:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800967a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	78db      	ldrb	r3, [r3, #3]
 8009680:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009682:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2120      	movs	r1, #32
 8009688:	5c5b      	ldrb	r3, [r3, r1]
 800968a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800968c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009692:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009698:	4313      	orrs	r3, r2
 800969a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	22ca      	movs	r2, #202	@ 0xca
 80096ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2253      	movs	r2, #83	@ 0x53
 80096b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096bc:	2380      	movs	r3, #128	@ 0x80
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d14c      	bne.n	800975e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4957      	ldr	r1, [pc, #348]	@ (800982c <HAL_RTC_SetAlarm_IT+0x274>)
 80096d0:	400a      	ands	r2, r1
 80096d2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2101      	movs	r1, #1
 80096e0:	430a      	orrs	r2, r1
 80096e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80096e4:	f7fd fcba 	bl	800705c <HAL_GetTick>
 80096e8:	0003      	movs	r3, r0
 80096ea:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80096ec:	e016      	b.n	800971c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80096ee:	f7fd fcb5 	bl	800705c <HAL_GetTick>
 80096f2:	0002      	movs	r2, r0
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	1ad2      	subs	r2, r2, r3
 80096f8:	23fa      	movs	r3, #250	@ 0xfa
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d90d      	bls.n	800971c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	22ff      	movs	r2, #255	@ 0xff
 8009706:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2229      	movs	r2, #41	@ 0x29
 800970c:	2103      	movs	r1, #3
 800970e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2228      	movs	r2, #40	@ 0x28
 8009714:	2100      	movs	r1, #0
 8009716:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e082      	b.n	8009822 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	2201      	movs	r2, #1
 8009724:	4013      	ands	r3, r2
 8009726:	d0e2      	beq.n	80096ee <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699a      	ldr	r2, [r3, #24]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2180      	movs	r1, #128	@ 0x80
 8009744:	0049      	lsls	r1, r1, #1
 8009746:	430a      	orrs	r2, r1
 8009748:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2180      	movs	r1, #128	@ 0x80
 8009756:	0149      	lsls	r1, r1, #5
 8009758:	430a      	orrs	r2, r1
 800975a:	619a      	str	r2, [r3, #24]
 800975c:	e04b      	b.n	80097f6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699a      	ldr	r2, [r3, #24]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4931      	ldr	r1, [pc, #196]	@ (8009830 <HAL_RTC_SetAlarm_IT+0x278>)
 800976a:	400a      	ands	r2, r1
 800976c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2102      	movs	r1, #2
 800977a:	430a      	orrs	r2, r1
 800977c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800977e:	f7fd fc6d 	bl	800705c <HAL_GetTick>
 8009782:	0003      	movs	r3, r0
 8009784:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009786:	e016      	b.n	80097b6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009788:	f7fd fc68 	bl	800705c <HAL_GetTick>
 800978c:	0002      	movs	r2, r0
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	1ad2      	subs	r2, r2, r3
 8009792:	23fa      	movs	r3, #250	@ 0xfa
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	429a      	cmp	r2, r3
 8009798:	d90d      	bls.n	80097b6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	22ff      	movs	r2, #255	@ 0xff
 80097a0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2229      	movs	r2, #41	@ 0x29
 80097a6:	2103      	movs	r1, #3
 80097a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2228      	movs	r2, #40	@ 0x28
 80097ae:	2100      	movs	r1, #0
 80097b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e035      	b.n	8009822 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	2202      	movs	r2, #2
 80097be:	4013      	ands	r3, r2
 80097c0:	d0e2      	beq.n	8009788 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2180      	movs	r1, #128	@ 0x80
 80097de:	0089      	lsls	r1, r1, #2
 80097e0:	430a      	orrs	r2, r1
 80097e2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699a      	ldr	r2, [r3, #24]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2180      	movs	r1, #128	@ 0x80
 80097f0:	0189      	lsls	r1, r1, #6
 80097f2:	430a      	orrs	r2, r1
 80097f4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80097f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009834 <HAL_RTC_SetAlarm_IT+0x27c>)
 80097f8:	2380      	movs	r3, #128	@ 0x80
 80097fa:	58d3      	ldr	r3, [r2, r3]
 80097fc:	490d      	ldr	r1, [pc, #52]	@ (8009834 <HAL_RTC_SetAlarm_IT+0x27c>)
 80097fe:	2280      	movs	r2, #128	@ 0x80
 8009800:	0312      	lsls	r2, r2, #12
 8009802:	4313      	orrs	r3, r2
 8009804:	2280      	movs	r2, #128	@ 0x80
 8009806:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	22ff      	movs	r2, #255	@ 0xff
 800980e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2229      	movs	r2, #41	@ 0x29
 8009814:	2101      	movs	r1, #1
 8009816:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2228      	movs	r2, #40	@ 0x28
 800981c:	2100      	movs	r1, #0
 800981e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	0018      	movs	r0, r3
 8009824:	46bd      	mov	sp, r7
 8009826:	b009      	add	sp, #36	@ 0x24
 8009828:	bd90      	pop	{r4, r7, pc}
 800982a:	46c0      	nop			@ (mov r8, r8)
 800982c:	fffffeff 	.word	0xfffffeff
 8009830:	fffffdff 	.word	0xfffffdff
 8009834:	40021800 	.word	0x40021800

08009838 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	2380      	movs	r3, #128	@ 0x80
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	429a      	cmp	r2, r3
 800984e:	d144      	bne.n	80098da <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2280      	movs	r2, #128	@ 0x80
 8009854:	0052      	lsls	r2, r2, #1
 8009856:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009866:	045b      	lsls	r3, r3, #17
 8009868:	0c5b      	lsrs	r3, r3, #17
 800986a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	0c1b      	lsrs	r3, r3, #16
 8009870:	b2db      	uxtb	r3, r3
 8009872:	223f      	movs	r2, #63	@ 0x3f
 8009874:	4013      	ands	r3, r2
 8009876:	b2da      	uxtb	r2, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	b2db      	uxtb	r3, r3
 8009882:	227f      	movs	r2, #127	@ 0x7f
 8009884:	4013      	ands	r3, r2
 8009886:	b2da      	uxtb	r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	b2db      	uxtb	r3, r3
 8009890:	227f      	movs	r2, #127	@ 0x7f
 8009892:	4013      	ands	r3, r2
 8009894:	b2da      	uxtb	r2, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	0d9b      	lsrs	r3, r3, #22
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2201      	movs	r2, #1
 80098a2:	4013      	ands	r3, r2
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	0e1b      	lsrs	r3, r3, #24
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	223f      	movs	r2, #63	@ 0x3f
 80098b8:	4013      	ands	r3, r2
 80098ba:	b2d9      	uxtb	r1, r3
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2220      	movs	r2, #32
 80098c0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	2380      	movs	r3, #128	@ 0x80
 80098c6:	05db      	lsls	r3, r3, #23
 80098c8:	401a      	ands	r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	4a3b      	ldr	r2, [pc, #236]	@ (80099c0 <HAL_RTC_GetAlarm+0x188>)
 80098d2:	401a      	ands	r2, r3
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	615a      	str	r2, [r3, #20]
 80098d8:	e043      	b.n	8009962 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2280      	movs	r2, #128	@ 0x80
 80098de:	0092      	lsls	r2, r2, #2
 80098e0:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098e8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098f0:	045b      	lsls	r3, r3, #17
 80098f2:	0c5b      	lsrs	r3, r3, #17
 80098f4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	0c1b      	lsrs	r3, r3, #16
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	223f      	movs	r2, #63	@ 0x3f
 80098fe:	4013      	ands	r3, r2
 8009900:	b2da      	uxtb	r2, r3
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	0a1b      	lsrs	r3, r3, #8
 800990a:	b2db      	uxtb	r3, r3
 800990c:	227f      	movs	r2, #127	@ 0x7f
 800990e:	4013      	ands	r3, r2
 8009910:	b2da      	uxtb	r2, r3
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	227f      	movs	r2, #127	@ 0x7f
 800991c:	4013      	ands	r3, r2
 800991e:	b2da      	uxtb	r2, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	0d9b      	lsrs	r3, r3, #22
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2201      	movs	r2, #1
 800992c:	4013      	ands	r3, r2
 800992e:	b2da      	uxtb	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	0e1b      	lsrs	r3, r3, #24
 800993e:	b2db      	uxtb	r3, r3
 8009940:	223f      	movs	r2, #63	@ 0x3f
 8009942:	4013      	ands	r3, r2
 8009944:	b2d9      	uxtb	r1, r3
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2220      	movs	r2, #32
 800994a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	2380      	movs	r3, #128	@ 0x80
 8009950:	05db      	lsls	r3, r3, #23
 8009952:	401a      	ands	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	4a19      	ldr	r2, [pc, #100]	@ (80099c0 <HAL_RTC_GetAlarm+0x188>)
 800995c:	401a      	ands	r2, r3
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d125      	bne.n	80099b4 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	0018      	movs	r0, r3
 800996e:	f000 f93b 	bl	8009be8 <RTC_Bcd2ToByte>
 8009972:	0003      	movs	r3, r0
 8009974:	001a      	movs	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	785b      	ldrb	r3, [r3, #1]
 800997e:	0018      	movs	r0, r3
 8009980:	f000 f932 	bl	8009be8 <RTC_Bcd2ToByte>
 8009984:	0003      	movs	r3, r0
 8009986:	001a      	movs	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	789b      	ldrb	r3, [r3, #2]
 8009990:	0018      	movs	r0, r3
 8009992:	f000 f929 	bl	8009be8 <RTC_Bcd2ToByte>
 8009996:	0003      	movs	r3, r0
 8009998:	001a      	movs	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2220      	movs	r2, #32
 80099a2:	5c9b      	ldrb	r3, [r3, r2]
 80099a4:	0018      	movs	r0, r3
 80099a6:	f000 f91f 	bl	8009be8 <RTC_Bcd2ToByte>
 80099aa:	0003      	movs	r3, r0
 80099ac:	0019      	movs	r1, r3
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2220      	movs	r2, #32
 80099b2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	0018      	movs	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b006      	add	sp, #24
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	46c0      	nop			@ (mov r8, r8)
 80099c0:	80808080 	.word	0x80808080

080099c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699a      	ldr	r2, [r3, #24]
 80099d2:	2380      	movs	r3, #128	@ 0x80
 80099d4:	015b      	lsls	r3, r3, #5
 80099d6:	4013      	ands	r3, r2
 80099d8:	d011      	beq.n	80099fe <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099e0:	2201      	movs	r2, #1
 80099e2:	4013      	ands	r3, r2
 80099e4:	d00b      	beq.n	80099fe <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2101      	movs	r1, #1
 80099f2:	430a      	orrs	r2, r1
 80099f4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	0018      	movs	r0, r3
 80099fa:	f7fc fb39 	bl	8006070 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	699a      	ldr	r2, [r3, #24]
 8009a04:	2380      	movs	r3, #128	@ 0x80
 8009a06:	019b      	lsls	r3, r3, #6
 8009a08:	4013      	ands	r3, r2
 8009a0a:	d011      	beq.n	8009a30 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a12:	2202      	movs	r2, #2
 8009a14:	4013      	ands	r3, r2
 8009a16:	d00b      	beq.n	8009a30 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2102      	movs	r1, #2
 8009a24:	430a      	orrs	r2, r1
 8009a26:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f000 f9ba 	bl	8009da4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2229      	movs	r2, #41	@ 0x29
 8009a34:	2101      	movs	r1, #1
 8009a36:	5499      	strb	r1, [r3, r2]
}
 8009a38:	46c0      	nop			@ (mov r8, r8)
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8009a88 <HAL_RTC_WaitForSynchro+0x48>)
 8009a4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009a50:	f7fd fb04 	bl	800705c <HAL_GetTick>
 8009a54:	0003      	movs	r3, r0
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a58:	e00a      	b.n	8009a70 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009a5a:	f7fd faff 	bl	800705c <HAL_GetTick>
 8009a5e:	0002      	movs	r2, r0
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1ad2      	subs	r2, r2, r3
 8009a64:	23fa      	movs	r3, #250	@ 0xfa
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d901      	bls.n	8009a70 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e006      	b.n	8009a7e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	2220      	movs	r2, #32
 8009a78:	4013      	ands	r3, r2
 8009a7a:	d0ee      	beq.n	8009a5a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	0018      	movs	r0, r3
 8009a80:	46bd      	mov	sp, r7
 8009a82:	b004      	add	sp, #16
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	46c0      	nop			@ (mov r8, r8)
 8009a88:	0001005f 	.word	0x0001005f

08009a8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8009a94:	230f      	movs	r3, #15
 8009a96:	18fb      	adds	r3, r7, r3
 8009a98:	2200      	movs	r2, #0
 8009a9a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	2240      	movs	r2, #64	@ 0x40
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d12c      	bne.n	8009b02 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68da      	ldr	r2, [r3, #12]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2180      	movs	r1, #128	@ 0x80
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009ab8:	f7fd fad0 	bl	800705c <HAL_GetTick>
 8009abc:	0003      	movs	r3, r0
 8009abe:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ac0:	e014      	b.n	8009aec <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8009ac2:	f7fd facb 	bl	800705c <HAL_GetTick>
 8009ac6:	0002      	movs	r2, r0
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	1ad2      	subs	r2, r2, r3
 8009acc:	200f      	movs	r0, #15
 8009ace:	183b      	adds	r3, r7, r0
 8009ad0:	1839      	adds	r1, r7, r0
 8009ad2:	7809      	ldrb	r1, [r1, #0]
 8009ad4:	7019      	strb	r1, [r3, #0]
 8009ad6:	23fa      	movs	r3, #250	@ 0xfa
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d906      	bls.n	8009aec <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8009ade:	183b      	adds	r3, r7, r0
 8009ae0:	2203      	movs	r2, #3
 8009ae2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2229      	movs	r2, #41	@ 0x29
 8009ae8:	2103      	movs	r1, #3
 8009aea:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	2240      	movs	r2, #64	@ 0x40
 8009af4:	4013      	ands	r3, r2
 8009af6:	d104      	bne.n	8009b02 <RTC_EnterInitMode+0x76>
 8009af8:	230f      	movs	r3, #15
 8009afa:	18fb      	adds	r3, r7, r3
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d1df      	bne.n	8009ac2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009b02:	230f      	movs	r3, #15
 8009b04:	18fb      	adds	r3, r7, r3
 8009b06:	781b      	ldrb	r3, [r3, #0]
}
 8009b08:	0018      	movs	r0, r3
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	b004      	add	sp, #16
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b10:	b590      	push	{r4, r7, lr}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b18:	240f      	movs	r4, #15
 8009b1a:	193b      	adds	r3, r7, r4
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009b20:	4b1c      	ldr	r3, [pc, #112]	@ (8009b94 <RTC_ExitInitMode+0x84>)
 8009b22:	68da      	ldr	r2, [r3, #12]
 8009b24:	4b1b      	ldr	r3, [pc, #108]	@ (8009b94 <RTC_ExitInitMode+0x84>)
 8009b26:	2180      	movs	r1, #128	@ 0x80
 8009b28:	438a      	bics	r2, r1
 8009b2a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009b2c:	4b19      	ldr	r3, [pc, #100]	@ (8009b94 <RTC_ExitInitMode+0x84>)
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	2220      	movs	r2, #32
 8009b32:	4013      	ands	r3, r2
 8009b34:	d10d      	bne.n	8009b52 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f7ff ff81 	bl	8009a40 <HAL_RTC_WaitForSynchro>
 8009b3e:	1e03      	subs	r3, r0, #0
 8009b40:	d021      	beq.n	8009b86 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2229      	movs	r2, #41	@ 0x29
 8009b46:	2103      	movs	r1, #3
 8009b48:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8009b4a:	193b      	adds	r3, r7, r4
 8009b4c:	2203      	movs	r2, #3
 8009b4e:	701a      	strb	r2, [r3, #0]
 8009b50:	e019      	b.n	8009b86 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b52:	4b10      	ldr	r3, [pc, #64]	@ (8009b94 <RTC_ExitInitMode+0x84>)
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	4b0f      	ldr	r3, [pc, #60]	@ (8009b94 <RTC_ExitInitMode+0x84>)
 8009b58:	2120      	movs	r1, #32
 8009b5a:	438a      	bics	r2, r1
 8009b5c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	0018      	movs	r0, r3
 8009b62:	f7ff ff6d 	bl	8009a40 <HAL_RTC_WaitForSynchro>
 8009b66:	1e03      	subs	r3, r0, #0
 8009b68:	d007      	beq.n	8009b7a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2229      	movs	r2, #41	@ 0x29
 8009b6e:	2103      	movs	r1, #3
 8009b70:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8009b72:	230f      	movs	r3, #15
 8009b74:	18fb      	adds	r3, r7, r3
 8009b76:	2203      	movs	r2, #3
 8009b78:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b7a:	4b06      	ldr	r3, [pc, #24]	@ (8009b94 <RTC_ExitInitMode+0x84>)
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <RTC_ExitInitMode+0x84>)
 8009b80:	2120      	movs	r1, #32
 8009b82:	430a      	orrs	r2, r1
 8009b84:	619a      	str	r2, [r3, #24]
  }

  return status;
 8009b86:	230f      	movs	r3, #15
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	781b      	ldrb	r3, [r3, #0]
}
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	b005      	add	sp, #20
 8009b92:	bd90      	pop	{r4, r7, pc}
 8009b94:	40002800 	.word	0x40002800

08009b98 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	0002      	movs	r2, r0
 8009ba0:	1dfb      	adds	r3, r7, #7
 8009ba2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009ba8:	230b      	movs	r3, #11
 8009baa:	18fb      	adds	r3, r7, r3
 8009bac:	1dfa      	adds	r2, r7, #7
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8009bb2:	e008      	b.n	8009bc6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009bba:	220b      	movs	r2, #11
 8009bbc:	18bb      	adds	r3, r7, r2
 8009bbe:	18ba      	adds	r2, r7, r2
 8009bc0:	7812      	ldrb	r2, [r2, #0]
 8009bc2:	3a0a      	subs	r2, #10
 8009bc4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8009bc6:	210b      	movs	r1, #11
 8009bc8:	187b      	adds	r3, r7, r1
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b09      	cmp	r3, #9
 8009bce:	d8f1      	bhi.n	8009bb4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	b2db      	uxtb	r3, r3
}
 8009be0:	0018      	movs	r0, r3
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b004      	add	sp, #16
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	0002      	movs	r2, r0
 8009bf0:	1dfb      	adds	r3, r7, #7
 8009bf2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009bf4:	1dfb      	adds	r3, r7, #7
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	091b      	lsrs	r3, r3, #4
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	001a      	movs	r2, r3
 8009bfe:	0013      	movs	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	189b      	adds	r3, r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	1dfb      	adds	r3, r7, #7
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	210f      	movs	r1, #15
 8009c12:	400b      	ands	r3, r1
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	18d3      	adds	r3, r2, r3
 8009c18:	b2db      	uxtb	r3, r3
}
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	b004      	add	sp, #16
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2228      	movs	r2, #40	@ 0x28
 8009c34:	5c9b      	ldrb	r3, [r3, r2]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e082      	b.n	8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2228      	movs	r2, #40	@ 0x28
 8009c42:	2101      	movs	r1, #1
 8009c44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2229      	movs	r2, #41	@ 0x29
 8009c4a:	2102      	movs	r1, #2
 8009c4c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	22ca      	movs	r2, #202	@ 0xca
 8009c54:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2253      	movs	r2, #83	@ 0x53
 8009c5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699a      	ldr	r2, [r3, #24]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4938      	ldr	r1, [pc, #224]	@ (8009d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8009c6a:	400a      	ands	r2, r1
 8009c6c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2104      	movs	r1, #4
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009c7e:	4b34      	ldr	r3, [pc, #208]	@ (8009d50 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	2240      	movs	r2, #64	@ 0x40
 8009c84:	4013      	ands	r3, r2
 8009c86:	d121      	bne.n	8009ccc <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8009c88:	f7fd f9e8 	bl	800705c <HAL_GetTick>
 8009c8c:	0003      	movs	r3, r0
 8009c8e:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009c90:	e016      	b.n	8009cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009c92:	f7fd f9e3 	bl	800705c <HAL_GetTick>
 8009c96:	0002      	movs	r2, r0
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	1ad2      	subs	r2, r2, r3
 8009c9c:	23fa      	movs	r3, #250	@ 0xfa
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d90d      	bls.n	8009cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	22ff      	movs	r2, #255	@ 0xff
 8009caa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2229      	movs	r2, #41	@ 0x29
 8009cb0:	2103      	movs	r1, #3
 8009cb2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2228      	movs	r2, #40	@ 0x28
 8009cb8:	2100      	movs	r1, #0
 8009cba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e041      	b.n	8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	4013      	ands	r3, r2
 8009cca:	d0e2      	beq.n	8009c92 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699a      	ldr	r2, [r3, #24]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2107      	movs	r1, #7
 8009ce0:	438a      	bics	r2, r1
 8009ce2:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6999      	ldr	r1, [r3, #24]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009cf4:	4a17      	ldr	r2, [pc, #92]	@ (8009d54 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8009cf6:	2380      	movs	r3, #128	@ 0x80
 8009cf8:	58d3      	ldr	r3, [r2, r3]
 8009cfa:	4916      	ldr	r1, [pc, #88]	@ (8009d54 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8009cfc:	2280      	movs	r2, #128	@ 0x80
 8009cfe:	0312      	lsls	r2, r2, #12
 8009d00:	4313      	orrs	r3, r2
 8009d02:	2280      	movs	r2, #128	@ 0x80
 8009d04:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	699a      	ldr	r2, [r3, #24]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2180      	movs	r1, #128	@ 0x80
 8009d12:	01c9      	lsls	r1, r1, #7
 8009d14:	430a      	orrs	r2, r1
 8009d16:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2180      	movs	r1, #128	@ 0x80
 8009d24:	00c9      	lsls	r1, r1, #3
 8009d26:	430a      	orrs	r2, r1
 8009d28:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	22ff      	movs	r2, #255	@ 0xff
 8009d30:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2229      	movs	r2, #41	@ 0x29
 8009d36:	2101      	movs	r1, #1
 8009d38:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2228      	movs	r2, #40	@ 0x28
 8009d3e:	2100      	movs	r1, #0
 8009d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	0018      	movs	r0, r3
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b006      	add	sp, #24
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	fffffbff 	.word	0xfffffbff
 8009d50:	40002800 	.word	0x40002800
 8009d54:	40021800 	.word	0x40021800

08009d58 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d66:	2204      	movs	r2, #4
 8009d68:	4013      	ands	r3, r2
 8009d6a:	d00b      	beq.n	8009d84 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2104      	movs	r1, #4
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	0018      	movs	r0, r3
 8009d80:	f000 f808 	bl	8009d94 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2229      	movs	r2, #41	@ 0x29
 8009d88:	2101      	movs	r1, #1
 8009d8a:	5499      	strb	r1, [r3, r2]
}
 8009d8c:	46c0      	nop			@ (mov r8, r8)
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	b002      	add	sp, #8
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8009d9c:	46c0      	nop			@ (mov r8, r8)
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	b002      	add	sp, #8
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009dac:	46c0      	nop			@ (mov r8, r8)
 8009dae:	46bd      	mov	sp, r7
 8009db0:	b002      	add	sp, #8
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e0a8      	b.n	8009f18 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d109      	bne.n	8009de2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	2382      	movs	r3, #130	@ 0x82
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d009      	beq.n	8009dee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	61da      	str	r2, [r3, #28]
 8009de0:	e005      	b.n	8009dee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	225d      	movs	r2, #93	@ 0x5d
 8009df8:	5c9b      	ldrb	r3, [r3, r2]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d107      	bne.n	8009e10 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	225c      	movs	r2, #92	@ 0x5c
 8009e04:	2100      	movs	r1, #0
 8009e06:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f7fc fe8c 	bl	8006b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	225d      	movs	r2, #93	@ 0x5d
 8009e14:	2102      	movs	r1, #2
 8009e16:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2140      	movs	r1, #64	@ 0x40
 8009e24:	438a      	bics	r2, r1
 8009e26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	23e0      	movs	r3, #224	@ 0xe0
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d902      	bls.n	8009e3a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e002      	b.n	8009e40 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009e3a:	2380      	movs	r3, #128	@ 0x80
 8009e3c:	015b      	lsls	r3, r3, #5
 8009e3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	23f0      	movs	r3, #240	@ 0xf0
 8009e46:	011b      	lsls	r3, r3, #4
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d008      	beq.n	8009e5e <HAL_SPI_Init+0xaa>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	23e0      	movs	r3, #224	@ 0xe0
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d002      	beq.n	8009e5e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	2382      	movs	r3, #130	@ 0x82
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	401a      	ands	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6899      	ldr	r1, [r3, #8]
 8009e6c:	2384      	movs	r3, #132	@ 0x84
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	400b      	ands	r3, r1
 8009e72:	431a      	orrs	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	2102      	movs	r1, #2
 8009e7a:	400b      	ands	r3, r1
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	2101      	movs	r1, #1
 8009e84:	400b      	ands	r3, r1
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6999      	ldr	r1, [r3, #24]
 8009e8c:	2380      	movs	r3, #128	@ 0x80
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	400b      	ands	r3, r1
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	2138      	movs	r1, #56	@ 0x38
 8009e9a:	400b      	ands	r3, r1
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	2180      	movs	r1, #128	@ 0x80
 8009ea4:	400b      	ands	r3, r1
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	0011      	movs	r1, r2
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009eae:	2380      	movs	r3, #128	@ 0x80
 8009eb0:	019b      	lsls	r3, r3, #6
 8009eb2:	401a      	ands	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	0c1b      	lsrs	r3, r3, #16
 8009ec2:	2204      	movs	r2, #4
 8009ec4:	401a      	ands	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eca:	2110      	movs	r1, #16
 8009ecc:	400b      	ands	r3, r1
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ed4:	2108      	movs	r1, #8
 8009ed6:	400b      	ands	r3, r1
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68d9      	ldr	r1, [r3, #12]
 8009ede:	23f0      	movs	r3, #240	@ 0xf0
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	400b      	ands	r3, r1
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	0011      	movs	r1, r2
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	2380      	movs	r3, #128	@ 0x80
 8009eec:	015b      	lsls	r3, r3, #5
 8009eee:	401a      	ands	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	69da      	ldr	r2, [r3, #28]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4907      	ldr	r1, [pc, #28]	@ (8009f20 <HAL_SPI_Init+0x16c>)
 8009f04:	400a      	ands	r2, r1
 8009f06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	225d      	movs	r2, #93	@ 0x5d
 8009f12:	2101      	movs	r1, #1
 8009f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	0018      	movs	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b004      	add	sp, #16
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	fffff7ff 	.word	0xfffff7ff

08009f24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	1dbb      	adds	r3, r7, #6
 8009f32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f34:	231f      	movs	r3, #31
 8009f36:	18fb      	adds	r3, r7, r3
 8009f38:	2200      	movs	r2, #0
 8009f3a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	225c      	movs	r2, #92	@ 0x5c
 8009f40:	5c9b      	ldrb	r3, [r3, r2]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_SPI_Transmit+0x26>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e147      	b.n	800a1da <HAL_SPI_Transmit+0x2b6>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	225c      	movs	r2, #92	@ 0x5c
 8009f4e:	2101      	movs	r1, #1
 8009f50:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f52:	f7fd f883 	bl	800705c <HAL_GetTick>
 8009f56:	0003      	movs	r3, r0
 8009f58:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009f5a:	2316      	movs	r3, #22
 8009f5c:	18fb      	adds	r3, r7, r3
 8009f5e:	1dba      	adds	r2, r7, #6
 8009f60:	8812      	ldrh	r2, [r2, #0]
 8009f62:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	225d      	movs	r2, #93	@ 0x5d
 8009f68:	5c9b      	ldrb	r3, [r3, r2]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d004      	beq.n	8009f7a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009f70:	231f      	movs	r3, #31
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	2202      	movs	r2, #2
 8009f76:	701a      	strb	r2, [r3, #0]
    goto error;
 8009f78:	e128      	b.n	800a1cc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_SPI_Transmit+0x64>
 8009f80:	1dbb      	adds	r3, r7, #6
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d104      	bne.n	8009f92 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009f88:	231f      	movs	r3, #31
 8009f8a:	18fb      	adds	r3, r7, r3
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009f90:	e11c      	b.n	800a1cc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	225d      	movs	r2, #93	@ 0x5d
 8009f96:	2103      	movs	r1, #3
 8009f98:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1dba      	adds	r2, r7, #6
 8009faa:	8812      	ldrh	r2, [r2, #0]
 8009fac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1dba      	adds	r2, r7, #6
 8009fb2:	8812      	ldrh	r2, [r2, #0]
 8009fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2244      	movs	r2, #68	@ 0x44
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2246      	movs	r2, #70	@ 0x46
 8009fc8:	2100      	movs	r1, #0
 8009fca:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	2380      	movs	r3, #128	@ 0x80
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d110      	bne.n	800a006 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2140      	movs	r1, #64	@ 0x40
 8009ff0:	438a      	bics	r2, r1
 8009ff2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2180      	movs	r1, #128	@ 0x80
 800a000:	01c9      	lsls	r1, r1, #7
 800a002:	430a      	orrs	r2, r1
 800a004:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2240      	movs	r2, #64	@ 0x40
 800a00e:	4013      	ands	r3, r2
 800a010:	2b40      	cmp	r3, #64	@ 0x40
 800a012:	d007      	beq.n	800a024 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2140      	movs	r1, #64	@ 0x40
 800a020:	430a      	orrs	r2, r1
 800a022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68da      	ldr	r2, [r3, #12]
 800a028:	23e0      	movs	r3, #224	@ 0xe0
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d952      	bls.n	800a0d6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <HAL_SPI_Transmit+0x11e>
 800a038:	2316      	movs	r3, #22
 800a03a:	18fb      	adds	r3, r7, r3
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d143      	bne.n	800a0ca <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a046:	881a      	ldrh	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a052:	1c9a      	adds	r2, r3, #2
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	3b01      	subs	r3, #1
 800a060:	b29a      	uxth	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a066:	e030      	b.n	800a0ca <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	2202      	movs	r2, #2
 800a070:	4013      	ands	r3, r2
 800a072:	2b02      	cmp	r3, #2
 800a074:	d112      	bne.n	800a09c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07a:	881a      	ldrh	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a086:	1c9a      	adds	r2, r3, #2
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a090:	b29b      	uxth	r3, r3
 800a092:	3b01      	subs	r3, #1
 800a094:	b29a      	uxth	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a09a:	e016      	b.n	800a0ca <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a09c:	f7fc ffde 	bl	800705c <HAL_GetTick>
 800a0a0:	0002      	movs	r2, r0
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d802      	bhi.n	800a0b2 <HAL_SPI_Transmit+0x18e>
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	d102      	bne.n	800a0b8 <HAL_SPI_Transmit+0x194>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d108      	bne.n	800a0ca <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800a0b8:	231f      	movs	r3, #31
 800a0ba:	18fb      	adds	r3, r7, r3
 800a0bc:	2203      	movs	r2, #3
 800a0be:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	225d      	movs	r2, #93	@ 0x5d
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	5499      	strb	r1, [r3, r2]
          goto error;
 800a0c8:	e080      	b.n	800a1cc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1c9      	bne.n	800a068 <HAL_SPI_Transmit+0x144>
 800a0d4:	e053      	b.n	800a17e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d004      	beq.n	800a0e8 <HAL_SPI_Transmit+0x1c4>
 800a0de:	2316      	movs	r3, #22
 800a0e0:	18fb      	adds	r3, r7, r3
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d145      	bne.n	800a174 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	7812      	ldrb	r2, [r2, #0]
 800a0f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0fa:	1c5a      	adds	r2, r3, #1
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a104:	b29b      	uxth	r3, r3
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800a10e:	e031      	b.n	800a174 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2202      	movs	r2, #2
 800a118:	4013      	ands	r3, r2
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d113      	bne.n	800a146 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	330c      	adds	r3, #12
 800a128:	7812      	ldrb	r2, [r2, #0]
 800a12a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a144:	e016      	b.n	800a174 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a146:	f7fc ff89 	bl	800705c <HAL_GetTick>
 800a14a:	0002      	movs	r2, r0
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d802      	bhi.n	800a15c <HAL_SPI_Transmit+0x238>
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	3301      	adds	r3, #1
 800a15a:	d102      	bne.n	800a162 <HAL_SPI_Transmit+0x23e>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d108      	bne.n	800a174 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800a162:	231f      	movs	r3, #31
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	2203      	movs	r2, #3
 800a168:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	225d      	movs	r2, #93	@ 0x5d
 800a16e:	2101      	movs	r1, #1
 800a170:	5499      	strb	r1, [r3, r2]
          goto error;
 800a172:	e02b      	b.n	800a1cc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a178:	b29b      	uxth	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1c8      	bne.n	800a110 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	0018      	movs	r0, r3
 800a186:	f000 f95d 	bl	800a444 <SPI_EndRxTxTransaction>
 800a18a:	1e03      	subs	r3, r0, #0
 800a18c:	d002      	beq.n	800a194 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2220      	movs	r2, #32
 800a192:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10a      	bne.n	800a1b2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	613b      	str	r3, [r7, #16]
 800a1b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d004      	beq.n	800a1c4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800a1ba:	231f      	movs	r3, #31
 800a1bc:	18fb      	adds	r3, r7, r3
 800a1be:	2201      	movs	r2, #1
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e003      	b.n	800a1cc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	225d      	movs	r2, #93	@ 0x5d
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	225c      	movs	r2, #92	@ 0x5c
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a1d4:	231f      	movs	r3, #31
 800a1d6:	18fb      	adds	r3, r7, r3
 800a1d8:	781b      	ldrb	r3, [r3, #0]
}
 800a1da:	0018      	movs	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	b008      	add	sp, #32
 800a1e0:	bd80      	pop	{r7, pc}
	...

0800a1e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b088      	sub	sp, #32
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	603b      	str	r3, [r7, #0]
 800a1f0:	1dfb      	adds	r3, r7, #7
 800a1f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a1f4:	f7fc ff32 	bl	800705c <HAL_GetTick>
 800a1f8:	0002      	movs	r2, r0
 800a1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fc:	1a9b      	subs	r3, r3, r2
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	18d3      	adds	r3, r2, r3
 800a202:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a204:	f7fc ff2a 	bl	800705c <HAL_GetTick>
 800a208:	0003      	movs	r3, r0
 800a20a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a20c:	4b3a      	ldr	r3, [pc, #232]	@ (800a2f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	015b      	lsls	r3, r3, #5
 800a212:	0d1b      	lsrs	r3, r3, #20
 800a214:	69fa      	ldr	r2, [r7, #28]
 800a216:	4353      	muls	r3, r2
 800a218:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a21a:	e058      	b.n	800a2ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	3301      	adds	r3, #1
 800a220:	d055      	beq.n	800a2ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a222:	f7fc ff1b 	bl	800705c <HAL_GetTick>
 800a226:	0002      	movs	r2, r0
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d902      	bls.n	800a238 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d142      	bne.n	800a2be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	21e0      	movs	r1, #224	@ 0xe0
 800a244:	438a      	bics	r2, r1
 800a246:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	2382      	movs	r3, #130	@ 0x82
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	429a      	cmp	r2, r3
 800a252:	d113      	bne.n	800a27c <SPI_WaitFlagStateUntilTimeout+0x98>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	2380      	movs	r3, #128	@ 0x80
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d005      	beq.n	800a26c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	2380      	movs	r3, #128	@ 0x80
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	429a      	cmp	r2, r3
 800a26a:	d107      	bne.n	800a27c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2140      	movs	r1, #64	@ 0x40
 800a278:	438a      	bics	r2, r1
 800a27a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a280:	2380      	movs	r3, #128	@ 0x80
 800a282:	019b      	lsls	r3, r3, #6
 800a284:	429a      	cmp	r2, r3
 800a286:	d110      	bne.n	800a2aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	491a      	ldr	r1, [pc, #104]	@ (800a2fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a294:	400a      	ands	r2, r1
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2180      	movs	r1, #128	@ 0x80
 800a2a4:	0189      	lsls	r1, r1, #6
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	225d      	movs	r2, #93	@ 0x5d
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	225c      	movs	r2, #92	@ 0x5c
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e017      	b.n	800a2ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	425a      	negs	r2, r3
 800a2de:	4153      	adcs	r3, r2
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	001a      	movs	r2, r3
 800a2e4:	1dfb      	adds	r3, r7, #7
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d197      	bne.n	800a21c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	b008      	add	sp, #32
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	46c0      	nop			@ (mov r8, r8)
 800a2f8:	200009c8 	.word	0x200009c8
 800a2fc:	ffffdfff 	.word	0xffffdfff

0800a300 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08a      	sub	sp, #40	@ 0x28
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a30e:	2317      	movs	r3, #23
 800a310:	18fb      	adds	r3, r7, r3
 800a312:	2200      	movs	r2, #0
 800a314:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a316:	f7fc fea1 	bl	800705c <HAL_GetTick>
 800a31a:	0002      	movs	r2, r0
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	18d3      	adds	r3, r2, r3
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a326:	f7fc fe99 	bl	800705c <HAL_GetTick>
 800a32a:	0003      	movs	r3, r0
 800a32c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	330c      	adds	r3, #12
 800a334:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a336:	4b41      	ldr	r3, [pc, #260]	@ (800a43c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	0013      	movs	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	189b      	adds	r3, r3, r2
 800a340:	00da      	lsls	r2, r3, #3
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	0d1b      	lsrs	r3, r3, #20
 800a346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a348:	4353      	muls	r3, r2
 800a34a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a34c:	e068      	b.n	800a420 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	23c0      	movs	r3, #192	@ 0xc0
 800a352:	00db      	lsls	r3, r3, #3
 800a354:	429a      	cmp	r2, r3
 800a356:	d10a      	bne.n	800a36e <SPI_WaitFifoStateUntilTimeout+0x6e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d107      	bne.n	800a36e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b2da      	uxtb	r2, r3
 800a364:	2117      	movs	r1, #23
 800a366:	187b      	adds	r3, r7, r1
 800a368:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a36a:	187b      	adds	r3, r7, r1
 800a36c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	3301      	adds	r3, #1
 800a372:	d055      	beq.n	800a420 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a374:	f7fc fe72 	bl	800705c <HAL_GetTick>
 800a378:	0002      	movs	r2, r0
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a380:	429a      	cmp	r2, r3
 800a382:	d902      	bls.n	800a38a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d142      	bne.n	800a410 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	21e0      	movs	r1, #224	@ 0xe0
 800a396:	438a      	bics	r2, r1
 800a398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	2382      	movs	r3, #130	@ 0x82
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d113      	bne.n	800a3ce <SPI_WaitFifoStateUntilTimeout+0xce>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	689a      	ldr	r2, [r3, #8]
 800a3aa:	2380      	movs	r3, #128	@ 0x80
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d005      	beq.n	800a3be <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	2380      	movs	r3, #128	@ 0x80
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d107      	bne.n	800a3ce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2140      	movs	r1, #64	@ 0x40
 800a3ca:	438a      	bics	r2, r1
 800a3cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a3d2:	2380      	movs	r3, #128	@ 0x80
 800a3d4:	019b      	lsls	r3, r3, #6
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d110      	bne.n	800a3fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4916      	ldr	r1, [pc, #88]	@ (800a440 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a3e6:	400a      	ands	r2, r1
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2180      	movs	r1, #128	@ 0x80
 800a3f6:	0189      	lsls	r1, r1, #6
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	225d      	movs	r2, #93	@ 0x5d
 800a400:	2101      	movs	r1, #1
 800a402:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	225c      	movs	r2, #92	@ 0x5c
 800a408:	2100      	movs	r1, #0
 800a40a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e010      	b.n	800a432 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	4013      	ands	r3, r2
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d18e      	bne.n	800a34e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	0018      	movs	r0, r3
 800a434:	46bd      	mov	sp, r7
 800a436:	b00a      	add	sp, #40	@ 0x28
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	46c0      	nop			@ (mov r8, r8)
 800a43c:	200009c8 	.word	0x200009c8
 800a440:	ffffdfff 	.word	0xffffdfff

0800a444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af02      	add	r7, sp, #8
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	23c0      	movs	r3, #192	@ 0xc0
 800a454:	0159      	lsls	r1, r3, #5
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	0013      	movs	r3, r2
 800a45e:	2200      	movs	r2, #0
 800a460:	f7ff ff4e 	bl	800a300 <SPI_WaitFifoStateUntilTimeout>
 800a464:	1e03      	subs	r3, r0, #0
 800a466:	d007      	beq.n	800a478 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a46c:	2220      	movs	r2, #32
 800a46e:	431a      	orrs	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e027      	b.n	800a4c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	0013      	movs	r3, r2
 800a482:	2200      	movs	r2, #0
 800a484:	2180      	movs	r1, #128	@ 0x80
 800a486:	f7ff fead 	bl	800a1e4 <SPI_WaitFlagStateUntilTimeout>
 800a48a:	1e03      	subs	r3, r0, #0
 800a48c:	d007      	beq.n	800a49e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a492:	2220      	movs	r2, #32
 800a494:	431a      	orrs	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e014      	b.n	800a4c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	23c0      	movs	r3, #192	@ 0xc0
 800a4a2:	00d9      	lsls	r1, r3, #3
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	0013      	movs	r3, r2
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f7ff ff27 	bl	800a300 <SPI_WaitFifoStateUntilTimeout>
 800a4b2:	1e03      	subs	r3, r0, #0
 800a4b4:	d007      	beq.n	800a4c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e000      	b.n	800a4c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	b004      	add	sp, #16
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e04a      	b.n	800a578 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	223d      	movs	r2, #61	@ 0x3d
 800a4e6:	5c9b      	ldrb	r3, [r3, r2]
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d107      	bne.n	800a4fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	223c      	movs	r2, #60	@ 0x3c
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	f7fc fb83 	bl	8006c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	223d      	movs	r2, #61	@ 0x3d
 800a502:	2102      	movs	r1, #2
 800a504:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3304      	adds	r3, #4
 800a50e:	0019      	movs	r1, r3
 800a510:	0010      	movs	r0, r2
 800a512:	f000 fb11 	bl	800ab38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2248      	movs	r2, #72	@ 0x48
 800a51a:	2101      	movs	r1, #1
 800a51c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	223e      	movs	r2, #62	@ 0x3e
 800a522:	2101      	movs	r1, #1
 800a524:	5499      	strb	r1, [r3, r2]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	223f      	movs	r2, #63	@ 0x3f
 800a52a:	2101      	movs	r1, #1
 800a52c:	5499      	strb	r1, [r3, r2]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2240      	movs	r2, #64	@ 0x40
 800a532:	2101      	movs	r1, #1
 800a534:	5499      	strb	r1, [r3, r2]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2241      	movs	r2, #65	@ 0x41
 800a53a:	2101      	movs	r1, #1
 800a53c:	5499      	strb	r1, [r3, r2]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2242      	movs	r2, #66	@ 0x42
 800a542:	2101      	movs	r1, #1
 800a544:	5499      	strb	r1, [r3, r2]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2243      	movs	r2, #67	@ 0x43
 800a54a:	2101      	movs	r1, #1
 800a54c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2244      	movs	r2, #68	@ 0x44
 800a552:	2101      	movs	r1, #1
 800a554:	5499      	strb	r1, [r3, r2]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2245      	movs	r2, #69	@ 0x45
 800a55a:	2101      	movs	r1, #1
 800a55c:	5499      	strb	r1, [r3, r2]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2246      	movs	r2, #70	@ 0x46
 800a562:	2101      	movs	r1, #1
 800a564:	5499      	strb	r1, [r3, r2]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2247      	movs	r2, #71	@ 0x47
 800a56a:	2101      	movs	r1, #1
 800a56c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	223d      	movs	r2, #61	@ 0x3d
 800a572:	2101      	movs	r1, #1
 800a574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	0018      	movs	r0, r3
 800a57a:	46bd      	mov	sp, r7
 800a57c:	b002      	add	sp, #8
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e04a      	b.n	800a628 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	223d      	movs	r2, #61	@ 0x3d
 800a596:	5c9b      	ldrb	r3, [r3, r2]
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d107      	bne.n	800a5ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	223c      	movs	r2, #60	@ 0x3c
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f000 f841 	bl	800a630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	223d      	movs	r2, #61	@ 0x3d
 800a5b2:	2102      	movs	r1, #2
 800a5b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	0019      	movs	r1, r3
 800a5c0:	0010      	movs	r0, r2
 800a5c2:	f000 fab9 	bl	800ab38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2248      	movs	r2, #72	@ 0x48
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	223e      	movs	r2, #62	@ 0x3e
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	5499      	strb	r1, [r3, r2]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	223f      	movs	r2, #63	@ 0x3f
 800a5da:	2101      	movs	r1, #1
 800a5dc:	5499      	strb	r1, [r3, r2]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2240      	movs	r2, #64	@ 0x40
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	5499      	strb	r1, [r3, r2]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2241      	movs	r2, #65	@ 0x41
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	5499      	strb	r1, [r3, r2]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2242      	movs	r2, #66	@ 0x42
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	5499      	strb	r1, [r3, r2]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2243      	movs	r2, #67	@ 0x43
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2244      	movs	r2, #68	@ 0x44
 800a602:	2101      	movs	r1, #1
 800a604:	5499      	strb	r1, [r3, r2]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2245      	movs	r2, #69	@ 0x45
 800a60a:	2101      	movs	r1, #1
 800a60c:	5499      	strb	r1, [r3, r2]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2246      	movs	r2, #70	@ 0x46
 800a612:	2101      	movs	r1, #1
 800a614:	5499      	strb	r1, [r3, r2]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2247      	movs	r2, #71	@ 0x47
 800a61a:	2101      	movs	r1, #1
 800a61c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	223d      	movs	r2, #61	@ 0x3d
 800a622:	2101      	movs	r1, #1
 800a624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	0018      	movs	r0, r3
 800a62a:	46bd      	mov	sp, r7
 800a62c:	b002      	add	sp, #8
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a638:	46c0      	nop			@ (mov r8, r8)
 800a63a:	46bd      	mov	sp, r7
 800a63c:	b002      	add	sp, #8
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d108      	bne.n	800a662 <HAL_TIM_PWM_Start+0x22>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	223e      	movs	r2, #62	@ 0x3e
 800a654:	5c9b      	ldrb	r3, [r3, r2]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	3b01      	subs	r3, #1
 800a65a:	1e5a      	subs	r2, r3, #1
 800a65c:	4193      	sbcs	r3, r2
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	e037      	b.n	800a6d2 <HAL_TIM_PWM_Start+0x92>
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b04      	cmp	r3, #4
 800a666:	d108      	bne.n	800a67a <HAL_TIM_PWM_Start+0x3a>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	223f      	movs	r2, #63	@ 0x3f
 800a66c:	5c9b      	ldrb	r3, [r3, r2]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	3b01      	subs	r3, #1
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	4193      	sbcs	r3, r2
 800a676:	b2db      	uxtb	r3, r3
 800a678:	e02b      	b.n	800a6d2 <HAL_TIM_PWM_Start+0x92>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b08      	cmp	r3, #8
 800a67e:	d108      	bne.n	800a692 <HAL_TIM_PWM_Start+0x52>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2240      	movs	r2, #64	@ 0x40
 800a684:	5c9b      	ldrb	r3, [r3, r2]
 800a686:	b2db      	uxtb	r3, r3
 800a688:	3b01      	subs	r3, #1
 800a68a:	1e5a      	subs	r2, r3, #1
 800a68c:	4193      	sbcs	r3, r2
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	e01f      	b.n	800a6d2 <HAL_TIM_PWM_Start+0x92>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	2b0c      	cmp	r3, #12
 800a696:	d108      	bne.n	800a6aa <HAL_TIM_PWM_Start+0x6a>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2241      	movs	r2, #65	@ 0x41
 800a69c:	5c9b      	ldrb	r3, [r3, r2]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	1e5a      	subs	r2, r3, #1
 800a6a4:	4193      	sbcs	r3, r2
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	e013      	b.n	800a6d2 <HAL_TIM_PWM_Start+0x92>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b10      	cmp	r3, #16
 800a6ae:	d108      	bne.n	800a6c2 <HAL_TIM_PWM_Start+0x82>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2242      	movs	r2, #66	@ 0x42
 800a6b4:	5c9b      	ldrb	r3, [r3, r2]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	1e5a      	subs	r2, r3, #1
 800a6bc:	4193      	sbcs	r3, r2
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	e007      	b.n	800a6d2 <HAL_TIM_PWM_Start+0x92>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2243      	movs	r2, #67	@ 0x43
 800a6c6:	5c9b      	ldrb	r3, [r3, r2]
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	1e5a      	subs	r2, r3, #1
 800a6ce:	4193      	sbcs	r3, r2
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e090      	b.n	800a7fc <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <HAL_TIM_PWM_Start+0xaa>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	223e      	movs	r2, #62	@ 0x3e
 800a6e4:	2102      	movs	r1, #2
 800a6e6:	5499      	strb	r1, [r3, r2]
 800a6e8:	e023      	b.n	800a732 <HAL_TIM_PWM_Start+0xf2>
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b04      	cmp	r3, #4
 800a6ee:	d104      	bne.n	800a6fa <HAL_TIM_PWM_Start+0xba>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	223f      	movs	r2, #63	@ 0x3f
 800a6f4:	2102      	movs	r1, #2
 800a6f6:	5499      	strb	r1, [r3, r2]
 800a6f8:	e01b      	b.n	800a732 <HAL_TIM_PWM_Start+0xf2>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d104      	bne.n	800a70a <HAL_TIM_PWM_Start+0xca>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2240      	movs	r2, #64	@ 0x40
 800a704:	2102      	movs	r1, #2
 800a706:	5499      	strb	r1, [r3, r2]
 800a708:	e013      	b.n	800a732 <HAL_TIM_PWM_Start+0xf2>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b0c      	cmp	r3, #12
 800a70e:	d104      	bne.n	800a71a <HAL_TIM_PWM_Start+0xda>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2241      	movs	r2, #65	@ 0x41
 800a714:	2102      	movs	r1, #2
 800a716:	5499      	strb	r1, [r3, r2]
 800a718:	e00b      	b.n	800a732 <HAL_TIM_PWM_Start+0xf2>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b10      	cmp	r3, #16
 800a71e:	d104      	bne.n	800a72a <HAL_TIM_PWM_Start+0xea>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2242      	movs	r2, #66	@ 0x42
 800a724:	2102      	movs	r1, #2
 800a726:	5499      	strb	r1, [r3, r2]
 800a728:	e003      	b.n	800a732 <HAL_TIM_PWM_Start+0xf2>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2243      	movs	r2, #67	@ 0x43
 800a72e:	2102      	movs	r1, #2
 800a730:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	2201      	movs	r2, #1
 800a73a:	0018      	movs	r0, r3
 800a73c:	f000 fd58 	bl	800b1f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a2f      	ldr	r2, [pc, #188]	@ (800a804 <HAL_TIM_PWM_Start+0x1c4>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d00e      	beq.n	800a768 <HAL_TIM_PWM_Start+0x128>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a2e      	ldr	r2, [pc, #184]	@ (800a808 <HAL_TIM_PWM_Start+0x1c8>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d009      	beq.n	800a768 <HAL_TIM_PWM_Start+0x128>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a2c      	ldr	r2, [pc, #176]	@ (800a80c <HAL_TIM_PWM_Start+0x1cc>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_TIM_PWM_Start+0x128>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a2b      	ldr	r2, [pc, #172]	@ (800a810 <HAL_TIM_PWM_Start+0x1d0>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d101      	bne.n	800a76c <HAL_TIM_PWM_Start+0x12c>
 800a768:	2301      	movs	r3, #1
 800a76a:	e000      	b.n	800a76e <HAL_TIM_PWM_Start+0x12e>
 800a76c:	2300      	movs	r3, #0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2180      	movs	r1, #128	@ 0x80
 800a77e:	0209      	lsls	r1, r1, #8
 800a780:	430a      	orrs	r2, r1
 800a782:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a1e      	ldr	r2, [pc, #120]	@ (800a804 <HAL_TIM_PWM_Start+0x1c4>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d014      	beq.n	800a7b8 <HAL_TIM_PWM_Start+0x178>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	2380      	movs	r3, #128	@ 0x80
 800a794:	05db      	lsls	r3, r3, #23
 800a796:	429a      	cmp	r2, r3
 800a798:	d00e      	beq.n	800a7b8 <HAL_TIM_PWM_Start+0x178>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a1d      	ldr	r2, [pc, #116]	@ (800a814 <HAL_TIM_PWM_Start+0x1d4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d009      	beq.n	800a7b8 <HAL_TIM_PWM_Start+0x178>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a818 <HAL_TIM_PWM_Start+0x1d8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d004      	beq.n	800a7b8 <HAL_TIM_PWM_Start+0x178>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a15      	ldr	r2, [pc, #84]	@ (800a808 <HAL_TIM_PWM_Start+0x1c8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d116      	bne.n	800a7e6 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	4a17      	ldr	r2, [pc, #92]	@ (800a81c <HAL_TIM_PWM_Start+0x1dc>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b06      	cmp	r3, #6
 800a7c8:	d016      	beq.n	800a7f8 <HAL_TIM_PWM_Start+0x1b8>
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	2380      	movs	r3, #128	@ 0x80
 800a7ce:	025b      	lsls	r3, r3, #9
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d011      	beq.n	800a7f8 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2101      	movs	r1, #1
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e4:	e008      	b.n	800a7f8 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	e000      	b.n	800a7fa <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	0018      	movs	r0, r3
 800a7fe:	46bd      	mov	sp, r7
 800a800:	b004      	add	sp, #16
 800a802:	bd80      	pop	{r7, pc}
 800a804:	40012c00 	.word	0x40012c00
 800a808:	40014000 	.word	0x40014000
 800a80c:	40014400 	.word	0x40014400
 800a810:	40014800 	.word	0x40014800
 800a814:	40000400 	.word	0x40000400
 800a818:	40000800 	.word	0x40000800
 800a81c:	00010007 	.word	0x00010007

0800a820 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	2200      	movs	r2, #0
 800a832:	0018      	movs	r0, r3
 800a834:	f000 fcdc 	bl	800b1f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a37      	ldr	r2, [pc, #220]	@ (800a91c <HAL_TIM_PWM_Stop+0xfc>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d00e      	beq.n	800a860 <HAL_TIM_PWM_Stop+0x40>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a36      	ldr	r2, [pc, #216]	@ (800a920 <HAL_TIM_PWM_Stop+0x100>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d009      	beq.n	800a860 <HAL_TIM_PWM_Stop+0x40>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a34      	ldr	r2, [pc, #208]	@ (800a924 <HAL_TIM_PWM_Stop+0x104>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d004      	beq.n	800a860 <HAL_TIM_PWM_Stop+0x40>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a33      	ldr	r2, [pc, #204]	@ (800a928 <HAL_TIM_PWM_Stop+0x108>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d101      	bne.n	800a864 <HAL_TIM_PWM_Stop+0x44>
 800a860:	2301      	movs	r3, #1
 800a862:	e000      	b.n	800a866 <HAL_TIM_PWM_Stop+0x46>
 800a864:	2300      	movs	r3, #0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d013      	beq.n	800a892 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	4a2e      	ldr	r2, [pc, #184]	@ (800a92c <HAL_TIM_PWM_Stop+0x10c>)
 800a872:	4013      	ands	r3, r2
 800a874:	d10d      	bne.n	800a892 <HAL_TIM_PWM_Stop+0x72>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	4a2c      	ldr	r2, [pc, #176]	@ (800a930 <HAL_TIM_PWM_Stop+0x110>)
 800a87e:	4013      	ands	r3, r2
 800a880:	d107      	bne.n	800a892 <HAL_TIM_PWM_Stop+0x72>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4929      	ldr	r1, [pc, #164]	@ (800a934 <HAL_TIM_PWM_Stop+0x114>)
 800a88e:	400a      	ands	r2, r1
 800a890:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	4a24      	ldr	r2, [pc, #144]	@ (800a92c <HAL_TIM_PWM_Stop+0x10c>)
 800a89a:	4013      	ands	r3, r2
 800a89c:	d10d      	bne.n	800a8ba <HAL_TIM_PWM_Stop+0x9a>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	4a22      	ldr	r2, [pc, #136]	@ (800a930 <HAL_TIM_PWM_Stop+0x110>)
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	d107      	bne.n	800a8ba <HAL_TIM_PWM_Stop+0x9a>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	438a      	bics	r2, r1
 800a8b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <HAL_TIM_PWM_Stop+0xaa>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	223e      	movs	r2, #62	@ 0x3e
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	5499      	strb	r1, [r3, r2]
 800a8c8:	e023      	b.n	800a912 <HAL_TIM_PWM_Stop+0xf2>
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b04      	cmp	r3, #4
 800a8ce:	d104      	bne.n	800a8da <HAL_TIM_PWM_Stop+0xba>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	223f      	movs	r2, #63	@ 0x3f
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	5499      	strb	r1, [r3, r2]
 800a8d8:	e01b      	b.n	800a912 <HAL_TIM_PWM_Stop+0xf2>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d104      	bne.n	800a8ea <HAL_TIM_PWM_Stop+0xca>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2240      	movs	r2, #64	@ 0x40
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	5499      	strb	r1, [r3, r2]
 800a8e8:	e013      	b.n	800a912 <HAL_TIM_PWM_Stop+0xf2>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b0c      	cmp	r3, #12
 800a8ee:	d104      	bne.n	800a8fa <HAL_TIM_PWM_Stop+0xda>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2241      	movs	r2, #65	@ 0x41
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	5499      	strb	r1, [r3, r2]
 800a8f8:	e00b      	b.n	800a912 <HAL_TIM_PWM_Stop+0xf2>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b10      	cmp	r3, #16
 800a8fe:	d104      	bne.n	800a90a <HAL_TIM_PWM_Stop+0xea>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2242      	movs	r2, #66	@ 0x42
 800a904:	2101      	movs	r1, #1
 800a906:	5499      	strb	r1, [r3, r2]
 800a908:	e003      	b.n	800a912 <HAL_TIM_PWM_Stop+0xf2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2243      	movs	r2, #67	@ 0x43
 800a90e:	2101      	movs	r1, #1
 800a910:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	0018      	movs	r0, r3
 800a916:	46bd      	mov	sp, r7
 800a918:	b002      	add	sp, #8
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	40012c00 	.word	0x40012c00
 800a920:	40014000 	.word	0x40014000
 800a924:	40014400 	.word	0x40014400
 800a928:	40014800 	.word	0x40014800
 800a92c:	00001111 	.word	0x00001111
 800a930:	00000444 	.word	0x00000444
 800a934:	ffff7fff 	.word	0xffff7fff

0800a938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a944:	2317      	movs	r3, #23
 800a946:	18fb      	adds	r3, r7, r3
 800a948:	2200      	movs	r2, #0
 800a94a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	223c      	movs	r2, #60	@ 0x3c
 800a950:	5c9b      	ldrb	r3, [r3, r2]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d101      	bne.n	800a95a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a956:	2302      	movs	r3, #2
 800a958:	e0e5      	b.n	800ab26 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	223c      	movs	r2, #60	@ 0x3c
 800a95e:	2101      	movs	r1, #1
 800a960:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b14      	cmp	r3, #20
 800a966:	d900      	bls.n	800a96a <HAL_TIM_PWM_ConfigChannel+0x32>
 800a968:	e0d1      	b.n	800ab0e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	009a      	lsls	r2, r3, #2
 800a96e:	4b70      	ldr	r3, [pc, #448]	@ (800ab30 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a970:	18d3      	adds	r3, r2, r3
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	0011      	movs	r1, r2
 800a97e:	0018      	movs	r0, r3
 800a980:	f000 f972 	bl	800ac68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	699a      	ldr	r2, [r3, #24]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2108      	movs	r1, #8
 800a990:	430a      	orrs	r2, r1
 800a992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2104      	movs	r1, #4
 800a9a0:	438a      	bics	r2, r1
 800a9a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6999      	ldr	r1, [r3, #24]
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	691a      	ldr	r2, [r3, #16]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	619a      	str	r2, [r3, #24]
      break;
 800a9b6:	e0af      	b.n	800ab18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	0011      	movs	r1, r2
 800a9c0:	0018      	movs	r0, r3
 800a9c2:	f000 f9db 	bl	800ad7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	699a      	ldr	r2, [r3, #24]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2180      	movs	r1, #128	@ 0x80
 800a9d2:	0109      	lsls	r1, r1, #4
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	699a      	ldr	r2, [r3, #24]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4954      	ldr	r1, [pc, #336]	@ (800ab34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a9e4:	400a      	ands	r2, r1
 800a9e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	6999      	ldr	r1, [r3, #24]
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	021a      	lsls	r2, r3, #8
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	619a      	str	r2, [r3, #24]
      break;
 800a9fc:	e08c      	b.n	800ab18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	0011      	movs	r1, r2
 800aa06:	0018      	movs	r0, r3
 800aa08:	f000 fa3c 	bl	800ae84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	69da      	ldr	r2, [r3, #28]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2108      	movs	r1, #8
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	69da      	ldr	r2, [r3, #28]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2104      	movs	r1, #4
 800aa28:	438a      	bics	r2, r1
 800aa2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	69d9      	ldr	r1, [r3, #28]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	691a      	ldr	r2, [r3, #16]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	61da      	str	r2, [r3, #28]
      break;
 800aa3e:	e06b      	b.n	800ab18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	0011      	movs	r1, r2
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f000 faa3 	bl	800af94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	69da      	ldr	r2, [r3, #28]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2180      	movs	r1, #128	@ 0x80
 800aa5a:	0109      	lsls	r1, r1, #4
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	69da      	ldr	r2, [r3, #28]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4932      	ldr	r1, [pc, #200]	@ (800ab34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aa6c:	400a      	ands	r2, r1
 800aa6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	69d9      	ldr	r1, [r3, #28]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	021a      	lsls	r2, r3, #8
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	430a      	orrs	r2, r1
 800aa82:	61da      	str	r2, [r3, #28]
      break;
 800aa84:	e048      	b.n	800ab18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	0011      	movs	r1, r2
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f000 faea 	bl	800b068 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2108      	movs	r1, #8
 800aaa0:	430a      	orrs	r2, r1
 800aaa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2104      	movs	r1, #4
 800aab0:	438a      	bics	r2, r1
 800aab2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aac6:	e027      	b.n	800ab18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	0011      	movs	r1, r2
 800aad0:	0018      	movs	r0, r3
 800aad2:	f000 fb29 	bl	800b128 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2180      	movs	r1, #128	@ 0x80
 800aae2:	0109      	lsls	r1, r1, #4
 800aae4:	430a      	orrs	r2, r1
 800aae6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4910      	ldr	r1, [pc, #64]	@ (800ab34 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aaf4:	400a      	ands	r2, r1
 800aaf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	021a      	lsls	r2, r3, #8
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	430a      	orrs	r2, r1
 800ab0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ab0c:	e004      	b.n	800ab18 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800ab0e:	2317      	movs	r3, #23
 800ab10:	18fb      	adds	r3, r7, r3
 800ab12:	2201      	movs	r2, #1
 800ab14:	701a      	strb	r2, [r3, #0]
      break;
 800ab16:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	223c      	movs	r2, #60	@ 0x3c
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	5499      	strb	r1, [r3, r2]

  return status;
 800ab20:	2317      	movs	r3, #23
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	781b      	ldrb	r3, [r3, #0]
}
 800ab26:	0018      	movs	r0, r3
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	b006      	add	sp, #24
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	46c0      	nop			@ (mov r8, r8)
 800ab30:	0800d998 	.word	0x0800d998
 800ab34:	fffffbff 	.word	0xfffffbff

0800ab38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a3f      	ldr	r2, [pc, #252]	@ (800ac48 <TIM_Base_SetConfig+0x110>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00c      	beq.n	800ab6a <TIM_Base_SetConfig+0x32>
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	2380      	movs	r3, #128	@ 0x80
 800ab54:	05db      	lsls	r3, r3, #23
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d007      	beq.n	800ab6a <TIM_Base_SetConfig+0x32>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a3b      	ldr	r2, [pc, #236]	@ (800ac4c <TIM_Base_SetConfig+0x114>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_Base_SetConfig+0x32>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a3a      	ldr	r2, [pc, #232]	@ (800ac50 <TIM_Base_SetConfig+0x118>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d108      	bne.n	800ab7c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2270      	movs	r2, #112	@ 0x70
 800ab6e:	4393      	bics	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a32      	ldr	r2, [pc, #200]	@ (800ac48 <TIM_Base_SetConfig+0x110>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d01c      	beq.n	800abbe <TIM_Base_SetConfig+0x86>
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	2380      	movs	r3, #128	@ 0x80
 800ab88:	05db      	lsls	r3, r3, #23
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d017      	beq.n	800abbe <TIM_Base_SetConfig+0x86>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a2e      	ldr	r2, [pc, #184]	@ (800ac4c <TIM_Base_SetConfig+0x114>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d013      	beq.n	800abbe <TIM_Base_SetConfig+0x86>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a2d      	ldr	r2, [pc, #180]	@ (800ac50 <TIM_Base_SetConfig+0x118>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d00f      	beq.n	800abbe <TIM_Base_SetConfig+0x86>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a2c      	ldr	r2, [pc, #176]	@ (800ac54 <TIM_Base_SetConfig+0x11c>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d00b      	beq.n	800abbe <TIM_Base_SetConfig+0x86>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a2b      	ldr	r2, [pc, #172]	@ (800ac58 <TIM_Base_SetConfig+0x120>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d007      	beq.n	800abbe <TIM_Base_SetConfig+0x86>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a2a      	ldr	r2, [pc, #168]	@ (800ac5c <TIM_Base_SetConfig+0x124>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d003      	beq.n	800abbe <TIM_Base_SetConfig+0x86>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a29      	ldr	r2, [pc, #164]	@ (800ac60 <TIM_Base_SetConfig+0x128>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d108      	bne.n	800abd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a28      	ldr	r2, [pc, #160]	@ (800ac64 <TIM_Base_SetConfig+0x12c>)
 800abc2:	4013      	ands	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2280      	movs	r2, #128	@ 0x80
 800abd4:	4393      	bics	r3, r2
 800abd6:	001a      	movs	r2, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	4313      	orrs	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a13      	ldr	r2, [pc, #76]	@ (800ac48 <TIM_Base_SetConfig+0x110>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00b      	beq.n	800ac16 <TIM_Base_SetConfig+0xde>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a15      	ldr	r2, [pc, #84]	@ (800ac58 <TIM_Base_SetConfig+0x120>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d007      	beq.n	800ac16 <TIM_Base_SetConfig+0xde>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a14      	ldr	r2, [pc, #80]	@ (800ac5c <TIM_Base_SetConfig+0x124>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d003      	beq.n	800ac16 <TIM_Base_SetConfig+0xde>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a13      	ldr	r2, [pc, #76]	@ (800ac60 <TIM_Base_SetConfig+0x128>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d103      	bne.n	800ac1e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	691a      	ldr	r2, [r3, #16]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d106      	bne.n	800ac3e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	2201      	movs	r2, #1
 800ac36:	4393      	bics	r3, r2
 800ac38:	001a      	movs	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	611a      	str	r2, [r3, #16]
  }
}
 800ac3e:	46c0      	nop			@ (mov r8, r8)
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b004      	add	sp, #16
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	46c0      	nop			@ (mov r8, r8)
 800ac48:	40012c00 	.word	0x40012c00
 800ac4c:	40000400 	.word	0x40000400
 800ac50:	40000800 	.word	0x40000800
 800ac54:	40002000 	.word	0x40002000
 800ac58:	40014000 	.word	0x40014000
 800ac5c:	40014400 	.word	0x40014400
 800ac60:	40014800 	.word	0x40014800
 800ac64:	fffffcff 	.word	0xfffffcff

0800ac68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	4393      	bics	r3, r2
 800ac80:	001a      	movs	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	4a32      	ldr	r2, [pc, #200]	@ (800ad60 <TIM_OC1_SetConfig+0xf8>)
 800ac96:	4013      	ands	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2203      	movs	r2, #3
 800ac9e:	4393      	bics	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	2202      	movs	r2, #2
 800acb0:	4393      	bics	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	4313      	orrs	r3, r2
 800acbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a28      	ldr	r2, [pc, #160]	@ (800ad64 <TIM_OC1_SetConfig+0xfc>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d00b      	beq.n	800acde <TIM_OC1_SetConfig+0x76>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a27      	ldr	r2, [pc, #156]	@ (800ad68 <TIM_OC1_SetConfig+0x100>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d007      	beq.n	800acde <TIM_OC1_SetConfig+0x76>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a26      	ldr	r2, [pc, #152]	@ (800ad6c <TIM_OC1_SetConfig+0x104>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d003      	beq.n	800acde <TIM_OC1_SetConfig+0x76>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a25      	ldr	r2, [pc, #148]	@ (800ad70 <TIM_OC1_SetConfig+0x108>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d10c      	bne.n	800acf8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2208      	movs	r2, #8
 800ace2:	4393      	bics	r3, r2
 800ace4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	4313      	orrs	r3, r2
 800acee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2204      	movs	r2, #4
 800acf4:	4393      	bics	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a1a      	ldr	r2, [pc, #104]	@ (800ad64 <TIM_OC1_SetConfig+0xfc>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00b      	beq.n	800ad18 <TIM_OC1_SetConfig+0xb0>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a19      	ldr	r2, [pc, #100]	@ (800ad68 <TIM_OC1_SetConfig+0x100>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d007      	beq.n	800ad18 <TIM_OC1_SetConfig+0xb0>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a18      	ldr	r2, [pc, #96]	@ (800ad6c <TIM_OC1_SetConfig+0x104>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d003      	beq.n	800ad18 <TIM_OC1_SetConfig+0xb0>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a17      	ldr	r2, [pc, #92]	@ (800ad70 <TIM_OC1_SetConfig+0x108>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d111      	bne.n	800ad3c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4a16      	ldr	r2, [pc, #88]	@ (800ad74 <TIM_OC1_SetConfig+0x10c>)
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	4a15      	ldr	r2, [pc, #84]	@ (800ad78 <TIM_OC1_SetConfig+0x110>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	621a      	str	r2, [r3, #32]
}
 800ad56:	46c0      	nop			@ (mov r8, r8)
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	b006      	add	sp, #24
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	46c0      	nop			@ (mov r8, r8)
 800ad60:	fffeff8f 	.word	0xfffeff8f
 800ad64:	40012c00 	.word	0x40012c00
 800ad68:	40014000 	.word	0x40014000
 800ad6c:	40014400 	.word	0x40014400
 800ad70:	40014800 	.word	0x40014800
 800ad74:	fffffeff 	.word	0xfffffeff
 800ad78:	fffffdff 	.word	0xfffffdff

0800ad7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a1b      	ldr	r3, [r3, #32]
 800ad90:	2210      	movs	r2, #16
 800ad92:	4393      	bics	r3, r2
 800ad94:	001a      	movs	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4a2e      	ldr	r2, [pc, #184]	@ (800ae64 <TIM_OC2_SetConfig+0xe8>)
 800adaa:	4013      	ands	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	4a2d      	ldr	r2, [pc, #180]	@ (800ae68 <TIM_OC2_SetConfig+0xec>)
 800adb2:	4013      	ands	r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2220      	movs	r2, #32
 800adc6:	4393      	bics	r3, r2
 800adc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	011b      	lsls	r3, r3, #4
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a24      	ldr	r2, [pc, #144]	@ (800ae6c <TIM_OC2_SetConfig+0xf0>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d10d      	bne.n	800adfa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2280      	movs	r2, #128	@ 0x80
 800ade2:	4393      	bics	r3, r2
 800ade4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	4313      	orrs	r3, r2
 800adf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2240      	movs	r2, #64	@ 0x40
 800adf6:	4393      	bics	r3, r2
 800adf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a1b      	ldr	r2, [pc, #108]	@ (800ae6c <TIM_OC2_SetConfig+0xf0>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d00b      	beq.n	800ae1a <TIM_OC2_SetConfig+0x9e>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a1a      	ldr	r2, [pc, #104]	@ (800ae70 <TIM_OC2_SetConfig+0xf4>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d007      	beq.n	800ae1a <TIM_OC2_SetConfig+0x9e>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4a19      	ldr	r2, [pc, #100]	@ (800ae74 <TIM_OC2_SetConfig+0xf8>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d003      	beq.n	800ae1a <TIM_OC2_SetConfig+0x9e>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4a18      	ldr	r2, [pc, #96]	@ (800ae78 <TIM_OC2_SetConfig+0xfc>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d113      	bne.n	800ae42 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	4a17      	ldr	r2, [pc, #92]	@ (800ae7c <TIM_OC2_SetConfig+0x100>)
 800ae1e:	4013      	ands	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	4a16      	ldr	r2, [pc, #88]	@ (800ae80 <TIM_OC2_SetConfig+0x104>)
 800ae26:	4013      	ands	r3, r2
 800ae28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	621a      	str	r2, [r3, #32]
}
 800ae5c:	46c0      	nop			@ (mov r8, r8)
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	b006      	add	sp, #24
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	feff8fff 	.word	0xfeff8fff
 800ae68:	fffffcff 	.word	0xfffffcff
 800ae6c:	40012c00 	.word	0x40012c00
 800ae70:	40014000 	.word	0x40014000
 800ae74:	40014400 	.word	0x40014400
 800ae78:	40014800 	.word	0x40014800
 800ae7c:	fffffbff 	.word	0xfffffbff
 800ae80:	fffff7ff 	.word	0xfffff7ff

0800ae84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b086      	sub	sp, #24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	4a33      	ldr	r2, [pc, #204]	@ (800af68 <TIM_OC3_SetConfig+0xe4>)
 800ae9a:	401a      	ands	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4a2f      	ldr	r2, [pc, #188]	@ (800af6c <TIM_OC3_SetConfig+0xe8>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	4393      	bics	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	4a29      	ldr	r2, [pc, #164]	@ (800af70 <TIM_OC3_SetConfig+0xec>)
 800aeca:	4013      	ands	r3, r2
 800aecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a25      	ldr	r2, [pc, #148]	@ (800af74 <TIM_OC3_SetConfig+0xf0>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d10d      	bne.n	800aefe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	4a24      	ldr	r2, [pc, #144]	@ (800af78 <TIM_OC3_SetConfig+0xf4>)
 800aee6:	4013      	ands	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	021b      	lsls	r3, r3, #8
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	4a20      	ldr	r2, [pc, #128]	@ (800af7c <TIM_OC3_SetConfig+0xf8>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a1c      	ldr	r2, [pc, #112]	@ (800af74 <TIM_OC3_SetConfig+0xf0>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d00b      	beq.n	800af1e <TIM_OC3_SetConfig+0x9a>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a1d      	ldr	r2, [pc, #116]	@ (800af80 <TIM_OC3_SetConfig+0xfc>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d007      	beq.n	800af1e <TIM_OC3_SetConfig+0x9a>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a1c      	ldr	r2, [pc, #112]	@ (800af84 <TIM_OC3_SetConfig+0x100>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d003      	beq.n	800af1e <TIM_OC3_SetConfig+0x9a>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a1b      	ldr	r2, [pc, #108]	@ (800af88 <TIM_OC3_SetConfig+0x104>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d113      	bne.n	800af46 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	4a1a      	ldr	r2, [pc, #104]	@ (800af8c <TIM_OC3_SetConfig+0x108>)
 800af22:	4013      	ands	r3, r2
 800af24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	4a19      	ldr	r2, [pc, #100]	@ (800af90 <TIM_OC3_SetConfig+0x10c>)
 800af2a:	4013      	ands	r3, r2
 800af2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	011b      	lsls	r3, r3, #4
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	4313      	orrs	r3, r2
 800af38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	4313      	orrs	r3, r2
 800af44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	621a      	str	r2, [r3, #32]
}
 800af60:	46c0      	nop			@ (mov r8, r8)
 800af62:	46bd      	mov	sp, r7
 800af64:	b006      	add	sp, #24
 800af66:	bd80      	pop	{r7, pc}
 800af68:	fffffeff 	.word	0xfffffeff
 800af6c:	fffeff8f 	.word	0xfffeff8f
 800af70:	fffffdff 	.word	0xfffffdff
 800af74:	40012c00 	.word	0x40012c00
 800af78:	fffff7ff 	.word	0xfffff7ff
 800af7c:	fffffbff 	.word	0xfffffbff
 800af80:	40014000 	.word	0x40014000
 800af84:	40014400 	.word	0x40014400
 800af88:	40014800 	.word	0x40014800
 800af8c:	ffffefff 	.word	0xffffefff
 800af90:	ffffdfff 	.word	0xffffdfff

0800af94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a1b      	ldr	r3, [r3, #32]
 800afa8:	4a26      	ldr	r2, [pc, #152]	@ (800b044 <TIM_OC4_SetConfig+0xb0>)
 800afaa:	401a      	ands	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4a22      	ldr	r2, [pc, #136]	@ (800b048 <TIM_OC4_SetConfig+0xb4>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4a21      	ldr	r2, [pc, #132]	@ (800b04c <TIM_OC4_SetConfig+0xb8>)
 800afc8:	4013      	ands	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	021b      	lsls	r3, r3, #8
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	4a1d      	ldr	r2, [pc, #116]	@ (800b050 <TIM_OC4_SetConfig+0xbc>)
 800afdc:	4013      	ands	r3, r2
 800afde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	031b      	lsls	r3, r3, #12
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	4313      	orrs	r3, r2
 800afea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a19      	ldr	r2, [pc, #100]	@ (800b054 <TIM_OC4_SetConfig+0xc0>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d00b      	beq.n	800b00c <TIM_OC4_SetConfig+0x78>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a18      	ldr	r2, [pc, #96]	@ (800b058 <TIM_OC4_SetConfig+0xc4>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d007      	beq.n	800b00c <TIM_OC4_SetConfig+0x78>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a17      	ldr	r2, [pc, #92]	@ (800b05c <TIM_OC4_SetConfig+0xc8>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d003      	beq.n	800b00c <TIM_OC4_SetConfig+0x78>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a16      	ldr	r2, [pc, #88]	@ (800b060 <TIM_OC4_SetConfig+0xcc>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d109      	bne.n	800b020 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4a15      	ldr	r2, [pc, #84]	@ (800b064 <TIM_OC4_SetConfig+0xd0>)
 800b010:	4013      	ands	r3, r2
 800b012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	019b      	lsls	r3, r3, #6
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	621a      	str	r2, [r3, #32]
}
 800b03a:	46c0      	nop			@ (mov r8, r8)
 800b03c:	46bd      	mov	sp, r7
 800b03e:	b006      	add	sp, #24
 800b040:	bd80      	pop	{r7, pc}
 800b042:	46c0      	nop			@ (mov r8, r8)
 800b044:	ffffefff 	.word	0xffffefff
 800b048:	feff8fff 	.word	0xfeff8fff
 800b04c:	fffffcff 	.word	0xfffffcff
 800b050:	ffffdfff 	.word	0xffffdfff
 800b054:	40012c00 	.word	0x40012c00
 800b058:	40014000 	.word	0x40014000
 800b05c:	40014400 	.word	0x40014400
 800b060:	40014800 	.word	0x40014800
 800b064:	ffffbfff 	.word	0xffffbfff

0800b068 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a1b      	ldr	r3, [r3, #32]
 800b07c:	4a23      	ldr	r2, [pc, #140]	@ (800b10c <TIM_OC5_SetConfig+0xa4>)
 800b07e:	401a      	ands	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a1f      	ldr	r2, [pc, #124]	@ (800b110 <TIM_OC5_SetConfig+0xa8>)
 800b094:	4013      	ands	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	4a1b      	ldr	r2, [pc, #108]	@ (800b114 <TIM_OC5_SetConfig+0xac>)
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	041b      	lsls	r3, r3, #16
 800b0b0:	693a      	ldr	r2, [r7, #16]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a17      	ldr	r2, [pc, #92]	@ (800b118 <TIM_OC5_SetConfig+0xb0>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00b      	beq.n	800b0d6 <TIM_OC5_SetConfig+0x6e>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a16      	ldr	r2, [pc, #88]	@ (800b11c <TIM_OC5_SetConfig+0xb4>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d007      	beq.n	800b0d6 <TIM_OC5_SetConfig+0x6e>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a15      	ldr	r2, [pc, #84]	@ (800b120 <TIM_OC5_SetConfig+0xb8>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d003      	beq.n	800b0d6 <TIM_OC5_SetConfig+0x6e>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a14      	ldr	r2, [pc, #80]	@ (800b124 <TIM_OC5_SetConfig+0xbc>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d109      	bne.n	800b0ea <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	4a0c      	ldr	r2, [pc, #48]	@ (800b10c <TIM_OC5_SetConfig+0xa4>)
 800b0da:	4013      	ands	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	021b      	lsls	r3, r3, #8
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685a      	ldr	r2, [r3, #4]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	621a      	str	r2, [r3, #32]
}
 800b104:	46c0      	nop			@ (mov r8, r8)
 800b106:	46bd      	mov	sp, r7
 800b108:	b006      	add	sp, #24
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	fffeffff 	.word	0xfffeffff
 800b110:	fffeff8f 	.word	0xfffeff8f
 800b114:	fffdffff 	.word	0xfffdffff
 800b118:	40012c00 	.word	0x40012c00
 800b11c:	40014000 	.word	0x40014000
 800b120:	40014400 	.word	0x40014400
 800b124:	40014800 	.word	0x40014800

0800b128 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	4a24      	ldr	r2, [pc, #144]	@ (800b1d0 <TIM_OC6_SetConfig+0xa8>)
 800b13e:	401a      	ands	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4a20      	ldr	r2, [pc, #128]	@ (800b1d4 <TIM_OC6_SetConfig+0xac>)
 800b154:	4013      	ands	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	021b      	lsls	r3, r3, #8
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	4a1c      	ldr	r2, [pc, #112]	@ (800b1d8 <TIM_OC6_SetConfig+0xb0>)
 800b168:	4013      	ands	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	051b      	lsls	r3, r3, #20
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	4313      	orrs	r3, r2
 800b176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a18      	ldr	r2, [pc, #96]	@ (800b1dc <TIM_OC6_SetConfig+0xb4>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d00b      	beq.n	800b198 <TIM_OC6_SetConfig+0x70>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a17      	ldr	r2, [pc, #92]	@ (800b1e0 <TIM_OC6_SetConfig+0xb8>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d007      	beq.n	800b198 <TIM_OC6_SetConfig+0x70>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a16      	ldr	r2, [pc, #88]	@ (800b1e4 <TIM_OC6_SetConfig+0xbc>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d003      	beq.n	800b198 <TIM_OC6_SetConfig+0x70>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a15      	ldr	r2, [pc, #84]	@ (800b1e8 <TIM_OC6_SetConfig+0xc0>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d109      	bne.n	800b1ac <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	4a14      	ldr	r2, [pc, #80]	@ (800b1ec <TIM_OC6_SetConfig+0xc4>)
 800b19c:	4013      	ands	r3, r2
 800b19e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	029b      	lsls	r3, r3, #10
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	621a      	str	r2, [r3, #32]
}
 800b1c6:	46c0      	nop			@ (mov r8, r8)
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	b006      	add	sp, #24
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	ffefffff 	.word	0xffefffff
 800b1d4:	feff8fff 	.word	0xfeff8fff
 800b1d8:	ffdfffff 	.word	0xffdfffff
 800b1dc:	40012c00 	.word	0x40012c00
 800b1e0:	40014000 	.word	0x40014000
 800b1e4:	40014400 	.word	0x40014400
 800b1e8:	40014800 	.word	0x40014800
 800b1ec:	fffbffff 	.word	0xfffbffff

0800b1f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	221f      	movs	r2, #31
 800b200:	4013      	ands	r3, r2
 800b202:	2201      	movs	r2, #1
 800b204:	409a      	lsls	r2, r3
 800b206:	0013      	movs	r3, r2
 800b208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	697a      	ldr	r2, [r7, #20]
 800b210:	43d2      	mvns	r2, r2
 800b212:	401a      	ands	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a1a      	ldr	r2, [r3, #32]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	211f      	movs	r1, #31
 800b220:	400b      	ands	r3, r1
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	4099      	lsls	r1, r3
 800b226:	000b      	movs	r3, r1
 800b228:	431a      	orrs	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	621a      	str	r2, [r3, #32]
}
 800b22e:	46c0      	nop			@ (mov r8, r8)
 800b230:	46bd      	mov	sp, r7
 800b232:	b006      	add	sp, #24
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	223c      	movs	r2, #60	@ 0x3c
 800b24a:	5c9b      	ldrb	r3, [r3, r2]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d101      	bne.n	800b254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b250:	2302      	movs	r3, #2
 800b252:	e06f      	b.n	800b334 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	223c      	movs	r2, #60	@ 0x3c
 800b258:	2101      	movs	r1, #1
 800b25a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	22ff      	movs	r2, #255	@ 0xff
 800b260:	4393      	bics	r3, r2
 800b262:	001a      	movs	r2, r3
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	4313      	orrs	r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4a33      	ldr	r2, [pc, #204]	@ (800b33c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b270:	401a      	ands	r2, r3
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	4313      	orrs	r3, r2
 800b278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	4a30      	ldr	r2, [pc, #192]	@ (800b340 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b27e:	401a      	ands	r2, r3
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	4313      	orrs	r3, r2
 800b286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4a2e      	ldr	r2, [pc, #184]	@ (800b344 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b28c:	401a      	ands	r2, r3
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4313      	orrs	r3, r2
 800b294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4a2b      	ldr	r2, [pc, #172]	@ (800b348 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b29a:	401a      	ands	r2, r3
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4a29      	ldr	r2, [pc, #164]	@ (800b34c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b2a8:	401a      	ands	r2, r3
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4a26      	ldr	r2, [pc, #152]	@ (800b350 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b2b6:	401a      	ands	r2, r3
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4a24      	ldr	r2, [pc, #144]	@ (800b354 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b2c4:	401a      	ands	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	041b      	lsls	r3, r3, #16
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4a21      	ldr	r2, [pc, #132]	@ (800b358 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b2d4:	401a      	ands	r2, r3
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b35c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d11c      	bne.n	800b322 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4a1d      	ldr	r2, [pc, #116]	@ (800b360 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b2ec:	401a      	ands	r2, r3
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f2:	051b      	lsls	r3, r3, #20
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a1a      	ldr	r2, [pc, #104]	@ (800b364 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b2fc:	401a      	ands	r2, r3
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a17      	ldr	r2, [pc, #92]	@ (800b368 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b30a:	401a      	ands	r2, r3
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b310:	4313      	orrs	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4a15      	ldr	r2, [pc, #84]	@ (800b36c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b318:	401a      	ands	r2, r3
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	223c      	movs	r2, #60	@ 0x3c
 800b32e:	2100      	movs	r1, #0
 800b330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	0018      	movs	r0, r3
 800b336:	46bd      	mov	sp, r7
 800b338:	b004      	add	sp, #16
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	fffffcff 	.word	0xfffffcff
 800b340:	fffffbff 	.word	0xfffffbff
 800b344:	fffff7ff 	.word	0xfffff7ff
 800b348:	ffffefff 	.word	0xffffefff
 800b34c:	ffffdfff 	.word	0xffffdfff
 800b350:	ffffbfff 	.word	0xffffbfff
 800b354:	fff0ffff 	.word	0xfff0ffff
 800b358:	efffffff 	.word	0xefffffff
 800b35c:	40012c00 	.word	0x40012c00
 800b360:	ff0fffff 	.word	0xff0fffff
 800b364:	feffffff 	.word	0xfeffffff
 800b368:	fdffffff 	.word	0xfdffffff
 800b36c:	dfffffff 	.word	0xdfffffff

0800b370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e046      	b.n	800b410 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2288      	movs	r2, #136	@ 0x88
 800b386:	589b      	ldr	r3, [r3, r2]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d107      	bne.n	800b39c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2284      	movs	r2, #132	@ 0x84
 800b390:	2100      	movs	r1, #0
 800b392:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	0018      	movs	r0, r3
 800b398:	f7fb fc90 	bl	8006cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2288      	movs	r2, #136	@ 0x88
 800b3a0:	2124      	movs	r1, #36	@ 0x24
 800b3a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2101      	movs	r1, #1
 800b3b0:	438a      	bics	r2, r1
 800b3b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d003      	beq.n	800b3c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	0018      	movs	r0, r3
 800b3c0:	f000 fc68 	bl	800bc94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f000 f90e 	bl	800b5e8 <UART_SetConfig>
 800b3cc:	0003      	movs	r3, r0
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d101      	bne.n	800b3d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e01c      	b.n	800b410 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	490d      	ldr	r1, [pc, #52]	@ (800b418 <HAL_UART_Init+0xa8>)
 800b3e2:	400a      	ands	r2, r1
 800b3e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	689a      	ldr	r2, [r3, #8]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	212a      	movs	r1, #42	@ 0x2a
 800b3f2:	438a      	bics	r2, r1
 800b3f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2101      	movs	r1, #1
 800b402:	430a      	orrs	r2, r1
 800b404:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	0018      	movs	r0, r3
 800b40a:	f000 fcf7 	bl	800bdfc <UART_CheckIdleState>
 800b40e:	0003      	movs	r3, r0
}
 800b410:	0018      	movs	r0, r3
 800b412:	46bd      	mov	sp, r7
 800b414:	b002      	add	sp, #8
 800b416:	bd80      	pop	{r7, pc}
 800b418:	ffffb7ff 	.word	0xffffb7ff

0800b41c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	@ 0x28
 800b420:	af02      	add	r7, sp, #8
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	603b      	str	r3, [r7, #0]
 800b428:	1dbb      	adds	r3, r7, #6
 800b42a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	228c      	movs	r2, #140	@ 0x8c
 800b430:	589b      	ldr	r3, [r3, r2]
 800b432:	2b20      	cmp	r3, #32
 800b434:	d000      	beq.n	800b438 <HAL_UART_Receive+0x1c>
 800b436:	e0d0      	b.n	800b5da <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HAL_UART_Receive+0x2a>
 800b43e:	1dbb      	adds	r3, r7, #6
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e0c8      	b.n	800b5dc <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	689a      	ldr	r2, [r3, #8]
 800b44e:	2380      	movs	r3, #128	@ 0x80
 800b450:	015b      	lsls	r3, r3, #5
 800b452:	429a      	cmp	r2, r3
 800b454:	d109      	bne.n	800b46a <HAL_UART_Receive+0x4e>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d105      	bne.n	800b46a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2201      	movs	r2, #1
 800b462:	4013      	ands	r3, r2
 800b464:	d001      	beq.n	800b46a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e0b8      	b.n	800b5dc <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2290      	movs	r2, #144	@ 0x90
 800b46e:	2100      	movs	r1, #0
 800b470:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	228c      	movs	r2, #140	@ 0x8c
 800b476:	2122      	movs	r1, #34	@ 0x22
 800b478:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b480:	f7fb fdec 	bl	800705c <HAL_GetTick>
 800b484:	0003      	movs	r3, r0
 800b486:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	1dba      	adds	r2, r7, #6
 800b48c:	215c      	movs	r1, #92	@ 0x5c
 800b48e:	8812      	ldrh	r2, [r2, #0]
 800b490:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	1dba      	adds	r2, r7, #6
 800b496:	215e      	movs	r1, #94	@ 0x5e
 800b498:	8812      	ldrh	r2, [r2, #0]
 800b49a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	689a      	ldr	r2, [r3, #8]
 800b4a0:	2380      	movs	r3, #128	@ 0x80
 800b4a2:	015b      	lsls	r3, r3, #5
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d10d      	bne.n	800b4c4 <HAL_UART_Receive+0xa8>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d104      	bne.n	800b4ba <HAL_UART_Receive+0x9e>
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2260      	movs	r2, #96	@ 0x60
 800b4b4:	494b      	ldr	r1, [pc, #300]	@ (800b5e4 <HAL_UART_Receive+0x1c8>)
 800b4b6:	5299      	strh	r1, [r3, r2]
 800b4b8:	e02e      	b.n	800b518 <HAL_UART_Receive+0xfc>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2260      	movs	r2, #96	@ 0x60
 800b4be:	21ff      	movs	r1, #255	@ 0xff
 800b4c0:	5299      	strh	r1, [r3, r2]
 800b4c2:	e029      	b.n	800b518 <HAL_UART_Receive+0xfc>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10d      	bne.n	800b4e8 <HAL_UART_Receive+0xcc>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d104      	bne.n	800b4de <HAL_UART_Receive+0xc2>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2260      	movs	r2, #96	@ 0x60
 800b4d8:	21ff      	movs	r1, #255	@ 0xff
 800b4da:	5299      	strh	r1, [r3, r2]
 800b4dc:	e01c      	b.n	800b518 <HAL_UART_Receive+0xfc>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2260      	movs	r2, #96	@ 0x60
 800b4e2:	217f      	movs	r1, #127	@ 0x7f
 800b4e4:	5299      	strh	r1, [r3, r2]
 800b4e6:	e017      	b.n	800b518 <HAL_UART_Receive+0xfc>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	2380      	movs	r3, #128	@ 0x80
 800b4ee:	055b      	lsls	r3, r3, #21
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d10d      	bne.n	800b510 <HAL_UART_Receive+0xf4>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d104      	bne.n	800b506 <HAL_UART_Receive+0xea>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2260      	movs	r2, #96	@ 0x60
 800b500:	217f      	movs	r1, #127	@ 0x7f
 800b502:	5299      	strh	r1, [r3, r2]
 800b504:	e008      	b.n	800b518 <HAL_UART_Receive+0xfc>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2260      	movs	r2, #96	@ 0x60
 800b50a:	213f      	movs	r1, #63	@ 0x3f
 800b50c:	5299      	strh	r1, [r3, r2]
 800b50e:	e003      	b.n	800b518 <HAL_UART_Receive+0xfc>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2260      	movs	r2, #96	@ 0x60
 800b514:	2100      	movs	r1, #0
 800b516:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800b518:	2312      	movs	r3, #18
 800b51a:	18fb      	adds	r3, r7, r3
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	2160      	movs	r1, #96	@ 0x60
 800b520:	5a52      	ldrh	r2, [r2, r1]
 800b522:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	2380      	movs	r3, #128	@ 0x80
 800b52a:	015b      	lsls	r3, r3, #5
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d108      	bne.n	800b542 <HAL_UART_Receive+0x126>
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800b538:	2300      	movs	r3, #0
 800b53a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	61bb      	str	r3, [r7, #24]
 800b540:	e003      	b.n	800b54a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b54a:	e03a      	b.n	800b5c2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	0013      	movs	r3, r2
 800b556:	2200      	movs	r2, #0
 800b558:	2120      	movs	r1, #32
 800b55a:	f000 fcf9 	bl	800bf50 <UART_WaitOnFlagUntilTimeout>
 800b55e:	1e03      	subs	r3, r0, #0
 800b560:	d005      	beq.n	800b56e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	228c      	movs	r2, #140	@ 0x8c
 800b566:	2120      	movs	r1, #32
 800b568:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e036      	b.n	800b5dc <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10e      	bne.n	800b592 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	2212      	movs	r2, #18
 800b57e:	18ba      	adds	r2, r7, r2
 800b580:	8812      	ldrh	r2, [r2, #0]
 800b582:	4013      	ands	r3, r2
 800b584:	b29a      	uxth	r2, r3
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	3302      	adds	r3, #2
 800b58e:	61bb      	str	r3, [r7, #24]
 800b590:	e00e      	b.n	800b5b0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2212      	movs	r2, #18
 800b59c:	18ba      	adds	r2, r7, r2
 800b59e:	8812      	ldrh	r2, [r2, #0]
 800b5a0:	b2d2      	uxtb	r2, r2
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	225e      	movs	r2, #94	@ 0x5e
 800b5b4:	5a9b      	ldrh	r3, [r3, r2]
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b299      	uxth	r1, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	225e      	movs	r2, #94	@ 0x5e
 800b5c0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	225e      	movs	r2, #94	@ 0x5e
 800b5c6:	5a9b      	ldrh	r3, [r3, r2]
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1be      	bne.n	800b54c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	228c      	movs	r2, #140	@ 0x8c
 800b5d2:	2120      	movs	r1, #32
 800b5d4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e000      	b.n	800b5dc <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800b5da:	2302      	movs	r3, #2
  }
}
 800b5dc:	0018      	movs	r0, r3
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	b008      	add	sp, #32
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	000001ff 	.word	0x000001ff

0800b5e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5e8:	b5b0      	push	{r4, r5, r7, lr}
 800b5ea:	b090      	sub	sp, #64	@ 0x40
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5f0:	231a      	movs	r3, #26
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	189b      	adds	r3, r3, r2
 800b5f6:	19db      	adds	r3, r3, r7
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fe:	689a      	ldr	r2, [r3, #8]
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	431a      	orrs	r2, r3
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	4313      	orrs	r3, r2
 800b612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4ac1      	ldr	r2, [pc, #772]	@ (800b920 <UART_SetConfig+0x338>)
 800b61c:	4013      	ands	r3, r2
 800b61e:	0019      	movs	r1, r3
 800b620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b626:	430b      	orrs	r3, r1
 800b628:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4abc      	ldr	r2, [pc, #752]	@ (800b924 <UART_SetConfig+0x33c>)
 800b632:	4013      	ands	r3, r2
 800b634:	0018      	movs	r0, r3
 800b636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b638:	68d9      	ldr	r1, [r3, #12]
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	0003      	movs	r3, r0
 800b640:	430b      	orrs	r3, r1
 800b642:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4ab6      	ldr	r2, [pc, #728]	@ (800b928 <UART_SetConfig+0x340>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d009      	beq.n	800b668 <UART_SetConfig+0x80>
 800b654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4ab4      	ldr	r2, [pc, #720]	@ (800b92c <UART_SetConfig+0x344>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d004      	beq.n	800b668 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b664:	4313      	orrs	r3, r2
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	4ab0      	ldr	r2, [pc, #704]	@ (800b930 <UART_SetConfig+0x348>)
 800b670:	4013      	ands	r3, r2
 800b672:	0019      	movs	r1, r3
 800b674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b67a:	430b      	orrs	r3, r1
 800b67c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b684:	220f      	movs	r2, #15
 800b686:	4393      	bics	r3, r2
 800b688:	0018      	movs	r0, r3
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	0003      	movs	r3, r0
 800b694:	430b      	orrs	r3, r1
 800b696:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4aa5      	ldr	r2, [pc, #660]	@ (800b934 <UART_SetConfig+0x34c>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d131      	bne.n	800b706 <UART_SetConfig+0x11e>
 800b6a2:	4ba5      	ldr	r3, [pc, #660]	@ (800b938 <UART_SetConfig+0x350>)
 800b6a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	d01d      	beq.n	800b6ea <UART_SetConfig+0x102>
 800b6ae:	d823      	bhi.n	800b6f8 <UART_SetConfig+0x110>
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d00c      	beq.n	800b6ce <UART_SetConfig+0xe6>
 800b6b4:	d820      	bhi.n	800b6f8 <UART_SetConfig+0x110>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <UART_SetConfig+0xd8>
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d00e      	beq.n	800b6dc <UART_SetConfig+0xf4>
 800b6be:	e01b      	b.n	800b6f8 <UART_SetConfig+0x110>
 800b6c0:	231b      	movs	r3, #27
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	189b      	adds	r3, r3, r2
 800b6c6:	19db      	adds	r3, r3, r7
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	701a      	strb	r2, [r3, #0]
 800b6cc:	e154      	b.n	800b978 <UART_SetConfig+0x390>
 800b6ce:	231b      	movs	r3, #27
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	189b      	adds	r3, r3, r2
 800b6d4:	19db      	adds	r3, r3, r7
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	701a      	strb	r2, [r3, #0]
 800b6da:	e14d      	b.n	800b978 <UART_SetConfig+0x390>
 800b6dc:	231b      	movs	r3, #27
 800b6de:	2220      	movs	r2, #32
 800b6e0:	189b      	adds	r3, r3, r2
 800b6e2:	19db      	adds	r3, r3, r7
 800b6e4:	2204      	movs	r2, #4
 800b6e6:	701a      	strb	r2, [r3, #0]
 800b6e8:	e146      	b.n	800b978 <UART_SetConfig+0x390>
 800b6ea:	231b      	movs	r3, #27
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	189b      	adds	r3, r3, r2
 800b6f0:	19db      	adds	r3, r3, r7
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	e13f      	b.n	800b978 <UART_SetConfig+0x390>
 800b6f8:	231b      	movs	r3, #27
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	189b      	adds	r3, r3, r2
 800b6fe:	19db      	adds	r3, r3, r7
 800b700:	2210      	movs	r2, #16
 800b702:	701a      	strb	r2, [r3, #0]
 800b704:	e138      	b.n	800b978 <UART_SetConfig+0x390>
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a8c      	ldr	r2, [pc, #560]	@ (800b93c <UART_SetConfig+0x354>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d131      	bne.n	800b774 <UART_SetConfig+0x18c>
 800b710:	4b89      	ldr	r3, [pc, #548]	@ (800b938 <UART_SetConfig+0x350>)
 800b712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b714:	220c      	movs	r2, #12
 800b716:	4013      	ands	r3, r2
 800b718:	2b0c      	cmp	r3, #12
 800b71a:	d01d      	beq.n	800b758 <UART_SetConfig+0x170>
 800b71c:	d823      	bhi.n	800b766 <UART_SetConfig+0x17e>
 800b71e:	2b08      	cmp	r3, #8
 800b720:	d00c      	beq.n	800b73c <UART_SetConfig+0x154>
 800b722:	d820      	bhi.n	800b766 <UART_SetConfig+0x17e>
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <UART_SetConfig+0x146>
 800b728:	2b04      	cmp	r3, #4
 800b72a:	d00e      	beq.n	800b74a <UART_SetConfig+0x162>
 800b72c:	e01b      	b.n	800b766 <UART_SetConfig+0x17e>
 800b72e:	231b      	movs	r3, #27
 800b730:	2220      	movs	r2, #32
 800b732:	189b      	adds	r3, r3, r2
 800b734:	19db      	adds	r3, r3, r7
 800b736:	2200      	movs	r2, #0
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	e11d      	b.n	800b978 <UART_SetConfig+0x390>
 800b73c:	231b      	movs	r3, #27
 800b73e:	2220      	movs	r2, #32
 800b740:	189b      	adds	r3, r3, r2
 800b742:	19db      	adds	r3, r3, r7
 800b744:	2202      	movs	r2, #2
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e116      	b.n	800b978 <UART_SetConfig+0x390>
 800b74a:	231b      	movs	r3, #27
 800b74c:	2220      	movs	r2, #32
 800b74e:	189b      	adds	r3, r3, r2
 800b750:	19db      	adds	r3, r3, r7
 800b752:	2204      	movs	r2, #4
 800b754:	701a      	strb	r2, [r3, #0]
 800b756:	e10f      	b.n	800b978 <UART_SetConfig+0x390>
 800b758:	231b      	movs	r3, #27
 800b75a:	2220      	movs	r2, #32
 800b75c:	189b      	adds	r3, r3, r2
 800b75e:	19db      	adds	r3, r3, r7
 800b760:	2208      	movs	r2, #8
 800b762:	701a      	strb	r2, [r3, #0]
 800b764:	e108      	b.n	800b978 <UART_SetConfig+0x390>
 800b766:	231b      	movs	r3, #27
 800b768:	2220      	movs	r2, #32
 800b76a:	189b      	adds	r3, r3, r2
 800b76c:	19db      	adds	r3, r3, r7
 800b76e:	2210      	movs	r2, #16
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	e101      	b.n	800b978 <UART_SetConfig+0x390>
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a71      	ldr	r2, [pc, #452]	@ (800b940 <UART_SetConfig+0x358>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d131      	bne.n	800b7e2 <UART_SetConfig+0x1fa>
 800b77e:	4b6e      	ldr	r3, [pc, #440]	@ (800b938 <UART_SetConfig+0x350>)
 800b780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b782:	2230      	movs	r2, #48	@ 0x30
 800b784:	4013      	ands	r3, r2
 800b786:	2b30      	cmp	r3, #48	@ 0x30
 800b788:	d01d      	beq.n	800b7c6 <UART_SetConfig+0x1de>
 800b78a:	d823      	bhi.n	800b7d4 <UART_SetConfig+0x1ec>
 800b78c:	2b20      	cmp	r3, #32
 800b78e:	d00c      	beq.n	800b7aa <UART_SetConfig+0x1c2>
 800b790:	d820      	bhi.n	800b7d4 <UART_SetConfig+0x1ec>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <UART_SetConfig+0x1b4>
 800b796:	2b10      	cmp	r3, #16
 800b798:	d00e      	beq.n	800b7b8 <UART_SetConfig+0x1d0>
 800b79a:	e01b      	b.n	800b7d4 <UART_SetConfig+0x1ec>
 800b79c:	231b      	movs	r3, #27
 800b79e:	2220      	movs	r2, #32
 800b7a0:	189b      	adds	r3, r3, r2
 800b7a2:	19db      	adds	r3, r3, r7
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
 800b7a8:	e0e6      	b.n	800b978 <UART_SetConfig+0x390>
 800b7aa:	231b      	movs	r3, #27
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	189b      	adds	r3, r3, r2
 800b7b0:	19db      	adds	r3, r3, r7
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	e0df      	b.n	800b978 <UART_SetConfig+0x390>
 800b7b8:	231b      	movs	r3, #27
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	189b      	adds	r3, r3, r2
 800b7be:	19db      	adds	r3, r3, r7
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	701a      	strb	r2, [r3, #0]
 800b7c4:	e0d8      	b.n	800b978 <UART_SetConfig+0x390>
 800b7c6:	231b      	movs	r3, #27
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	189b      	adds	r3, r3, r2
 800b7cc:	19db      	adds	r3, r3, r7
 800b7ce:	2208      	movs	r2, #8
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	e0d1      	b.n	800b978 <UART_SetConfig+0x390>
 800b7d4:	231b      	movs	r3, #27
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	189b      	adds	r3, r3, r2
 800b7da:	19db      	adds	r3, r3, r7
 800b7dc:	2210      	movs	r2, #16
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e0ca      	b.n	800b978 <UART_SetConfig+0x390>
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a57      	ldr	r2, [pc, #348]	@ (800b944 <UART_SetConfig+0x35c>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d106      	bne.n	800b7fa <UART_SetConfig+0x212>
 800b7ec:	231b      	movs	r3, #27
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	189b      	adds	r3, r3, r2
 800b7f2:	19db      	adds	r3, r3, r7
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	701a      	strb	r2, [r3, #0]
 800b7f8:	e0be      	b.n	800b978 <UART_SetConfig+0x390>
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a52      	ldr	r2, [pc, #328]	@ (800b948 <UART_SetConfig+0x360>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d106      	bne.n	800b812 <UART_SetConfig+0x22a>
 800b804:	231b      	movs	r3, #27
 800b806:	2220      	movs	r2, #32
 800b808:	189b      	adds	r3, r3, r2
 800b80a:	19db      	adds	r3, r3, r7
 800b80c:	2200      	movs	r2, #0
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	e0b2      	b.n	800b978 <UART_SetConfig+0x390>
 800b812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a4d      	ldr	r2, [pc, #308]	@ (800b94c <UART_SetConfig+0x364>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d106      	bne.n	800b82a <UART_SetConfig+0x242>
 800b81c:	231b      	movs	r3, #27
 800b81e:	2220      	movs	r2, #32
 800b820:	189b      	adds	r3, r3, r2
 800b822:	19db      	adds	r3, r3, r7
 800b824:	2200      	movs	r2, #0
 800b826:	701a      	strb	r2, [r3, #0]
 800b828:	e0a6      	b.n	800b978 <UART_SetConfig+0x390>
 800b82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a3e      	ldr	r2, [pc, #248]	@ (800b928 <UART_SetConfig+0x340>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d13e      	bne.n	800b8b2 <UART_SetConfig+0x2ca>
 800b834:	4b40      	ldr	r3, [pc, #256]	@ (800b938 <UART_SetConfig+0x350>)
 800b836:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b838:	23c0      	movs	r3, #192	@ 0xc0
 800b83a:	011b      	lsls	r3, r3, #4
 800b83c:	4013      	ands	r3, r2
 800b83e:	22c0      	movs	r2, #192	@ 0xc0
 800b840:	0112      	lsls	r2, r2, #4
 800b842:	4293      	cmp	r3, r2
 800b844:	d027      	beq.n	800b896 <UART_SetConfig+0x2ae>
 800b846:	22c0      	movs	r2, #192	@ 0xc0
 800b848:	0112      	lsls	r2, r2, #4
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d82a      	bhi.n	800b8a4 <UART_SetConfig+0x2bc>
 800b84e:	2280      	movs	r2, #128	@ 0x80
 800b850:	0112      	lsls	r2, r2, #4
 800b852:	4293      	cmp	r3, r2
 800b854:	d011      	beq.n	800b87a <UART_SetConfig+0x292>
 800b856:	2280      	movs	r2, #128	@ 0x80
 800b858:	0112      	lsls	r2, r2, #4
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d822      	bhi.n	800b8a4 <UART_SetConfig+0x2bc>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d004      	beq.n	800b86c <UART_SetConfig+0x284>
 800b862:	2280      	movs	r2, #128	@ 0x80
 800b864:	00d2      	lsls	r2, r2, #3
 800b866:	4293      	cmp	r3, r2
 800b868:	d00e      	beq.n	800b888 <UART_SetConfig+0x2a0>
 800b86a:	e01b      	b.n	800b8a4 <UART_SetConfig+0x2bc>
 800b86c:	231b      	movs	r3, #27
 800b86e:	2220      	movs	r2, #32
 800b870:	189b      	adds	r3, r3, r2
 800b872:	19db      	adds	r3, r3, r7
 800b874:	2200      	movs	r2, #0
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	e07e      	b.n	800b978 <UART_SetConfig+0x390>
 800b87a:	231b      	movs	r3, #27
 800b87c:	2220      	movs	r2, #32
 800b87e:	189b      	adds	r3, r3, r2
 800b880:	19db      	adds	r3, r3, r7
 800b882:	2202      	movs	r2, #2
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	e077      	b.n	800b978 <UART_SetConfig+0x390>
 800b888:	231b      	movs	r3, #27
 800b88a:	2220      	movs	r2, #32
 800b88c:	189b      	adds	r3, r3, r2
 800b88e:	19db      	adds	r3, r3, r7
 800b890:	2204      	movs	r2, #4
 800b892:	701a      	strb	r2, [r3, #0]
 800b894:	e070      	b.n	800b978 <UART_SetConfig+0x390>
 800b896:	231b      	movs	r3, #27
 800b898:	2220      	movs	r2, #32
 800b89a:	189b      	adds	r3, r3, r2
 800b89c:	19db      	adds	r3, r3, r7
 800b89e:	2208      	movs	r2, #8
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	e069      	b.n	800b978 <UART_SetConfig+0x390>
 800b8a4:	231b      	movs	r3, #27
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	189b      	adds	r3, r3, r2
 800b8aa:	19db      	adds	r3, r3, r7
 800b8ac:	2210      	movs	r2, #16
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	e062      	b.n	800b978 <UART_SetConfig+0x390>
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a1d      	ldr	r2, [pc, #116]	@ (800b92c <UART_SetConfig+0x344>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d157      	bne.n	800b96c <UART_SetConfig+0x384>
 800b8bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b938 <UART_SetConfig+0x350>)
 800b8be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8c0:	23c0      	movs	r3, #192	@ 0xc0
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	22c0      	movs	r2, #192	@ 0xc0
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d040      	beq.n	800b950 <UART_SetConfig+0x368>
 800b8ce:	22c0      	movs	r2, #192	@ 0xc0
 800b8d0:	0092      	lsls	r2, r2, #2
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d843      	bhi.n	800b95e <UART_SetConfig+0x376>
 800b8d6:	2280      	movs	r2, #128	@ 0x80
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d011      	beq.n	800b902 <UART_SetConfig+0x31a>
 800b8de:	2280      	movs	r2, #128	@ 0x80
 800b8e0:	0092      	lsls	r2, r2, #2
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d83b      	bhi.n	800b95e <UART_SetConfig+0x376>
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <UART_SetConfig+0x30c>
 800b8ea:	2280      	movs	r2, #128	@ 0x80
 800b8ec:	0052      	lsls	r2, r2, #1
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00e      	beq.n	800b910 <UART_SetConfig+0x328>
 800b8f2:	e034      	b.n	800b95e <UART_SetConfig+0x376>
 800b8f4:	231b      	movs	r3, #27
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	189b      	adds	r3, r3, r2
 800b8fa:	19db      	adds	r3, r3, r7
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	701a      	strb	r2, [r3, #0]
 800b900:	e03a      	b.n	800b978 <UART_SetConfig+0x390>
 800b902:	231b      	movs	r3, #27
 800b904:	2220      	movs	r2, #32
 800b906:	189b      	adds	r3, r3, r2
 800b908:	19db      	adds	r3, r3, r7
 800b90a:	2202      	movs	r2, #2
 800b90c:	701a      	strb	r2, [r3, #0]
 800b90e:	e033      	b.n	800b978 <UART_SetConfig+0x390>
 800b910:	231b      	movs	r3, #27
 800b912:	2220      	movs	r2, #32
 800b914:	189b      	adds	r3, r3, r2
 800b916:	19db      	adds	r3, r3, r7
 800b918:	2204      	movs	r2, #4
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	e02c      	b.n	800b978 <UART_SetConfig+0x390>
 800b91e:	46c0      	nop			@ (mov r8, r8)
 800b920:	cfff69f3 	.word	0xcfff69f3
 800b924:	ffffcfff 	.word	0xffffcfff
 800b928:	40008000 	.word	0x40008000
 800b92c:	40008400 	.word	0x40008400
 800b930:	11fff4ff 	.word	0x11fff4ff
 800b934:	40013800 	.word	0x40013800
 800b938:	40021000 	.word	0x40021000
 800b93c:	40004400 	.word	0x40004400
 800b940:	40004800 	.word	0x40004800
 800b944:	40004c00 	.word	0x40004c00
 800b948:	40005000 	.word	0x40005000
 800b94c:	40013c00 	.word	0x40013c00
 800b950:	231b      	movs	r3, #27
 800b952:	2220      	movs	r2, #32
 800b954:	189b      	adds	r3, r3, r2
 800b956:	19db      	adds	r3, r3, r7
 800b958:	2208      	movs	r2, #8
 800b95a:	701a      	strb	r2, [r3, #0]
 800b95c:	e00c      	b.n	800b978 <UART_SetConfig+0x390>
 800b95e:	231b      	movs	r3, #27
 800b960:	2220      	movs	r2, #32
 800b962:	189b      	adds	r3, r3, r2
 800b964:	19db      	adds	r3, r3, r7
 800b966:	2210      	movs	r2, #16
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	e005      	b.n	800b978 <UART_SetConfig+0x390>
 800b96c:	231b      	movs	r3, #27
 800b96e:	2220      	movs	r2, #32
 800b970:	189b      	adds	r3, r3, r2
 800b972:	19db      	adds	r3, r3, r7
 800b974:	2210      	movs	r2, #16
 800b976:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4ac1      	ldr	r2, [pc, #772]	@ (800bc84 <UART_SetConfig+0x69c>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d005      	beq.n	800b98e <UART_SetConfig+0x3a6>
 800b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4ac0      	ldr	r2, [pc, #768]	@ (800bc88 <UART_SetConfig+0x6a0>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d000      	beq.n	800b98e <UART_SetConfig+0x3a6>
 800b98c:	e093      	b.n	800bab6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b98e:	231b      	movs	r3, #27
 800b990:	2220      	movs	r2, #32
 800b992:	189b      	adds	r3, r3, r2
 800b994:	19db      	adds	r3, r3, r7
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d015      	beq.n	800b9c8 <UART_SetConfig+0x3e0>
 800b99c:	dc18      	bgt.n	800b9d0 <UART_SetConfig+0x3e8>
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	d00d      	beq.n	800b9be <UART_SetConfig+0x3d6>
 800b9a2:	dc15      	bgt.n	800b9d0 <UART_SetConfig+0x3e8>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <UART_SetConfig+0x3c6>
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d005      	beq.n	800b9b8 <UART_SetConfig+0x3d0>
 800b9ac:	e010      	b.n	800b9d0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b9ae:	f7fd f9d5 	bl	8008d5c <HAL_RCC_GetPCLK1Freq>
 800b9b2:	0003      	movs	r3, r0
 800b9b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9b6:	e014      	b.n	800b9e2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9b8:	4bb4      	ldr	r3, [pc, #720]	@ (800bc8c <UART_SetConfig+0x6a4>)
 800b9ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9bc:	e011      	b.n	800b9e2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9be:	f7fd f941 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800b9c2:	0003      	movs	r3, r0
 800b9c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9c6:	e00c      	b.n	800b9e2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9c8:	2380      	movs	r3, #128	@ 0x80
 800b9ca:	021b      	lsls	r3, r3, #8
 800b9cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b9ce:	e008      	b.n	800b9e2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800b9d4:	231a      	movs	r3, #26
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	189b      	adds	r3, r3, r2
 800b9da:	19db      	adds	r3, r3, r7
 800b9dc:	2201      	movs	r2, #1
 800b9de:	701a      	strb	r2, [r3, #0]
        break;
 800b9e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d100      	bne.n	800b9ea <UART_SetConfig+0x402>
 800b9e8:	e135      	b.n	800bc56 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9ee:	4ba8      	ldr	r3, [pc, #672]	@ (800bc90 <UART_SetConfig+0x6a8>)
 800b9f0:	0052      	lsls	r2, r2, #1
 800b9f2:	5ad3      	ldrh	r3, [r2, r3]
 800b9f4:	0019      	movs	r1, r3
 800b9f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b9f8:	f7f4 fb98 	bl	800012c <__udivsi3>
 800b9fc:	0003      	movs	r3, r0
 800b9fe:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	0013      	movs	r3, r2
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	189b      	adds	r3, r3, r2
 800ba0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d305      	bcc.n	800ba1c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d906      	bls.n	800ba2a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800ba1c:	231a      	movs	r3, #26
 800ba1e:	2220      	movs	r2, #32
 800ba20:	189b      	adds	r3, r3, r2
 800ba22:	19db      	adds	r3, r3, r7
 800ba24:	2201      	movs	r2, #1
 800ba26:	701a      	strb	r2, [r3, #0]
 800ba28:	e044      	b.n	800bab4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba2c:	61bb      	str	r3, [r7, #24]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	61fb      	str	r3, [r7, #28]
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba36:	4b96      	ldr	r3, [pc, #600]	@ (800bc90 <UART_SetConfig+0x6a8>)
 800ba38:	0052      	lsls	r2, r2, #1
 800ba3a:	5ad3      	ldrh	r3, [r2, r3]
 800ba3c:	613b      	str	r3, [r7, #16]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	69b8      	ldr	r0, [r7, #24]
 800ba48:	69f9      	ldr	r1, [r7, #28]
 800ba4a:	f7f4 fd5d 	bl	8000508 <__aeabi_uldivmod>
 800ba4e:	0002      	movs	r2, r0
 800ba50:	000b      	movs	r3, r1
 800ba52:	0e11      	lsrs	r1, r2, #24
 800ba54:	021d      	lsls	r5, r3, #8
 800ba56:	430d      	orrs	r5, r1
 800ba58:	0214      	lsls	r4, r2, #8
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	085b      	lsrs	r3, r3, #1
 800ba60:	60bb      	str	r3, [r7, #8]
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]
 800ba66:	68b8      	ldr	r0, [r7, #8]
 800ba68:	68f9      	ldr	r1, [r7, #12]
 800ba6a:	1900      	adds	r0, r0, r4
 800ba6c:	4169      	adcs	r1, r5
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	2300      	movs	r3, #0
 800ba76:	607b      	str	r3, [r7, #4]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f7f4 fd44 	bl	8000508 <__aeabi_uldivmod>
 800ba80:	0002      	movs	r2, r0
 800ba82:	000b      	movs	r3, r1
 800ba84:	0013      	movs	r3, r2
 800ba86:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba8a:	23c0      	movs	r3, #192	@ 0xc0
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d309      	bcc.n	800baa6 <UART_SetConfig+0x4be>
 800ba92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba94:	2380      	movs	r3, #128	@ 0x80
 800ba96:	035b      	lsls	r3, r3, #13
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d204      	bcs.n	800baa6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baa2:	60da      	str	r2, [r3, #12]
 800baa4:	e006      	b.n	800bab4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800baa6:	231a      	movs	r3, #26
 800baa8:	2220      	movs	r2, #32
 800baaa:	189b      	adds	r3, r3, r2
 800baac:	19db      	adds	r3, r3, r7
 800baae:	2201      	movs	r2, #1
 800bab0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800bab2:	e0d0      	b.n	800bc56 <UART_SetConfig+0x66e>
 800bab4:	e0cf      	b.n	800bc56 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab8:	69da      	ldr	r2, [r3, #28]
 800baba:	2380      	movs	r3, #128	@ 0x80
 800babc:	021b      	lsls	r3, r3, #8
 800babe:	429a      	cmp	r2, r3
 800bac0:	d000      	beq.n	800bac4 <UART_SetConfig+0x4dc>
 800bac2:	e070      	b.n	800bba6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800bac4:	231b      	movs	r3, #27
 800bac6:	2220      	movs	r2, #32
 800bac8:	189b      	adds	r3, r3, r2
 800baca:	19db      	adds	r3, r3, r7
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b08      	cmp	r3, #8
 800bad0:	d015      	beq.n	800bafe <UART_SetConfig+0x516>
 800bad2:	dc18      	bgt.n	800bb06 <UART_SetConfig+0x51e>
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d00d      	beq.n	800baf4 <UART_SetConfig+0x50c>
 800bad8:	dc15      	bgt.n	800bb06 <UART_SetConfig+0x51e>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <UART_SetConfig+0x4fc>
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d005      	beq.n	800baee <UART_SetConfig+0x506>
 800bae2:	e010      	b.n	800bb06 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bae4:	f7fd f93a 	bl	8008d5c <HAL_RCC_GetPCLK1Freq>
 800bae8:	0003      	movs	r3, r0
 800baea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800baec:	e014      	b.n	800bb18 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800baee:	4b67      	ldr	r3, [pc, #412]	@ (800bc8c <UART_SetConfig+0x6a4>)
 800baf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800baf2:	e011      	b.n	800bb18 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800baf4:	f7fd f8a6 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800baf8:	0003      	movs	r3, r0
 800bafa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bafc:	e00c      	b.n	800bb18 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bafe:	2380      	movs	r3, #128	@ 0x80
 800bb00:	021b      	lsls	r3, r3, #8
 800bb02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb04:	e008      	b.n	800bb18 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800bb06:	2300      	movs	r3, #0
 800bb08:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800bb0a:	231a      	movs	r3, #26
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	189b      	adds	r3, r3, r2
 800bb10:	19db      	adds	r3, r3, r7
 800bb12:	2201      	movs	r2, #1
 800bb14:	701a      	strb	r2, [r3, #0]
        break;
 800bb16:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d100      	bne.n	800bb20 <UART_SetConfig+0x538>
 800bb1e:	e09a      	b.n	800bc56 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb24:	4b5a      	ldr	r3, [pc, #360]	@ (800bc90 <UART_SetConfig+0x6a8>)
 800bb26:	0052      	lsls	r2, r2, #1
 800bb28:	5ad3      	ldrh	r3, [r2, r3]
 800bb2a:	0019      	movs	r1, r3
 800bb2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bb2e:	f7f4 fafd 	bl	800012c <__udivsi3>
 800bb32:	0003      	movs	r3, r0
 800bb34:	005a      	lsls	r2, r3, #1
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	085b      	lsrs	r3, r3, #1
 800bb3c:	18d2      	adds	r2, r2, r3
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	0019      	movs	r1, r3
 800bb44:	0010      	movs	r0, r2
 800bb46:	f7f4 faf1 	bl	800012c <__udivsi3>
 800bb4a:	0003      	movs	r3, r0
 800bb4c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb50:	2b0f      	cmp	r3, #15
 800bb52:	d921      	bls.n	800bb98 <UART_SetConfig+0x5b0>
 800bb54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb56:	2380      	movs	r3, #128	@ 0x80
 800bb58:	025b      	lsls	r3, r3, #9
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d21c      	bcs.n	800bb98 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	200e      	movs	r0, #14
 800bb64:	2420      	movs	r4, #32
 800bb66:	1903      	adds	r3, r0, r4
 800bb68:	19db      	adds	r3, r3, r7
 800bb6a:	210f      	movs	r1, #15
 800bb6c:	438a      	bics	r2, r1
 800bb6e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb72:	085b      	lsrs	r3, r3, #1
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	2207      	movs	r2, #7
 800bb78:	4013      	ands	r3, r2
 800bb7a:	b299      	uxth	r1, r3
 800bb7c:	1903      	adds	r3, r0, r4
 800bb7e:	19db      	adds	r3, r3, r7
 800bb80:	1902      	adds	r2, r0, r4
 800bb82:	19d2      	adds	r2, r2, r7
 800bb84:	8812      	ldrh	r2, [r2, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	1902      	adds	r2, r0, r4
 800bb90:	19d2      	adds	r2, r2, r7
 800bb92:	8812      	ldrh	r2, [r2, #0]
 800bb94:	60da      	str	r2, [r3, #12]
 800bb96:	e05e      	b.n	800bc56 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800bb98:	231a      	movs	r3, #26
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	189b      	adds	r3, r3, r2
 800bb9e:	19db      	adds	r3, r3, r7
 800bba0:	2201      	movs	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]
 800bba4:	e057      	b.n	800bc56 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bba6:	231b      	movs	r3, #27
 800bba8:	2220      	movs	r2, #32
 800bbaa:	189b      	adds	r3, r3, r2
 800bbac:	19db      	adds	r3, r3, r7
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d015      	beq.n	800bbe0 <UART_SetConfig+0x5f8>
 800bbb4:	dc18      	bgt.n	800bbe8 <UART_SetConfig+0x600>
 800bbb6:	2b04      	cmp	r3, #4
 800bbb8:	d00d      	beq.n	800bbd6 <UART_SetConfig+0x5ee>
 800bbba:	dc15      	bgt.n	800bbe8 <UART_SetConfig+0x600>
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <UART_SetConfig+0x5de>
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d005      	beq.n	800bbd0 <UART_SetConfig+0x5e8>
 800bbc4:	e010      	b.n	800bbe8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbc6:	f7fd f8c9 	bl	8008d5c <HAL_RCC_GetPCLK1Freq>
 800bbca:	0003      	movs	r3, r0
 800bbcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbce:	e014      	b.n	800bbfa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbd0:	4b2e      	ldr	r3, [pc, #184]	@ (800bc8c <UART_SetConfig+0x6a4>)
 800bbd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbd4:	e011      	b.n	800bbfa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbd6:	f7fd f835 	bl	8008c44 <HAL_RCC_GetSysClockFreq>
 800bbda:	0003      	movs	r3, r0
 800bbdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbde:	e00c      	b.n	800bbfa <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbe0:	2380      	movs	r3, #128	@ 0x80
 800bbe2:	021b      	lsls	r3, r3, #8
 800bbe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbe6:	e008      	b.n	800bbfa <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800bbec:	231a      	movs	r3, #26
 800bbee:	2220      	movs	r2, #32
 800bbf0:	189b      	adds	r3, r3, r2
 800bbf2:	19db      	adds	r3, r3, r7
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	701a      	strb	r2, [r3, #0]
        break;
 800bbf8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800bbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d02a      	beq.n	800bc56 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc04:	4b22      	ldr	r3, [pc, #136]	@ (800bc90 <UART_SetConfig+0x6a8>)
 800bc06:	0052      	lsls	r2, r2, #1
 800bc08:	5ad3      	ldrh	r3, [r2, r3]
 800bc0a:	0019      	movs	r1, r3
 800bc0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bc0e:	f7f4 fa8d 	bl	800012c <__udivsi3>
 800bc12:	0003      	movs	r3, r0
 800bc14:	001a      	movs	r2, r3
 800bc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	085b      	lsrs	r3, r3, #1
 800bc1c:	18d2      	adds	r2, r2, r3
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	0019      	movs	r1, r3
 800bc24:	0010      	movs	r0, r2
 800bc26:	f7f4 fa81 	bl	800012c <__udivsi3>
 800bc2a:	0003      	movs	r3, r0
 800bc2c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc30:	2b0f      	cmp	r3, #15
 800bc32:	d90a      	bls.n	800bc4a <UART_SetConfig+0x662>
 800bc34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc36:	2380      	movs	r3, #128	@ 0x80
 800bc38:	025b      	lsls	r3, r3, #9
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d205      	bcs.n	800bc4a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	60da      	str	r2, [r3, #12]
 800bc48:	e005      	b.n	800bc56 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800bc4a:	231a      	movs	r3, #26
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	189b      	adds	r3, r3, r2
 800bc50:	19db      	adds	r3, r3, r7
 800bc52:	2201      	movs	r2, #1
 800bc54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc58:	226a      	movs	r2, #106	@ 0x6a
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc60:	2268      	movs	r2, #104	@ 0x68
 800bc62:	2101      	movs	r1, #1
 800bc64:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc68:	2200      	movs	r2, #0
 800bc6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	2200      	movs	r2, #0
 800bc70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc72:	231a      	movs	r3, #26
 800bc74:	2220      	movs	r2, #32
 800bc76:	189b      	adds	r3, r3, r2
 800bc78:	19db      	adds	r3, r3, r7
 800bc7a:	781b      	ldrb	r3, [r3, #0]
}
 800bc7c:	0018      	movs	r0, r3
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	b010      	add	sp, #64	@ 0x40
 800bc82:	bdb0      	pop	{r4, r5, r7, pc}
 800bc84:	40008000 	.word	0x40008000
 800bc88:	40008400 	.word	0x40008400
 800bc8c:	00f42400 	.word	0x00f42400
 800bc90:	0800d9ec 	.word	0x0800d9ec

0800bc94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca0:	2208      	movs	r2, #8
 800bca2:	4013      	ands	r3, r2
 800bca4:	d00b      	beq.n	800bcbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	4a4a      	ldr	r2, [pc, #296]	@ (800bdd8 <UART_AdvFeatureConfig+0x144>)
 800bcae:	4013      	ands	r3, r2
 800bcb0:	0019      	movs	r1, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	d00b      	beq.n	800bce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	4a43      	ldr	r2, [pc, #268]	@ (800bddc <UART_AdvFeatureConfig+0x148>)
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	0019      	movs	r1, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	430a      	orrs	r2, r1
 800bcde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce4:	2202      	movs	r2, #2
 800bce6:	4013      	ands	r3, r2
 800bce8:	d00b      	beq.n	800bd02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	4a3b      	ldr	r2, [pc, #236]	@ (800bde0 <UART_AdvFeatureConfig+0x14c>)
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	0019      	movs	r1, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd06:	2204      	movs	r2, #4
 800bd08:	4013      	ands	r3, r2
 800bd0a:	d00b      	beq.n	800bd24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	4a34      	ldr	r2, [pc, #208]	@ (800bde4 <UART_AdvFeatureConfig+0x150>)
 800bd14:	4013      	ands	r3, r2
 800bd16:	0019      	movs	r1, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd28:	2210      	movs	r2, #16
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	d00b      	beq.n	800bd46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	4a2c      	ldr	r2, [pc, #176]	@ (800bde8 <UART_AdvFeatureConfig+0x154>)
 800bd36:	4013      	ands	r3, r2
 800bd38:	0019      	movs	r1, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	430a      	orrs	r2, r1
 800bd44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	d00b      	beq.n	800bd68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	4a25      	ldr	r2, [pc, #148]	@ (800bdec <UART_AdvFeatureConfig+0x158>)
 800bd58:	4013      	ands	r3, r2
 800bd5a:	0019      	movs	r1, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	430a      	orrs	r2, r1
 800bd66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6c:	2240      	movs	r2, #64	@ 0x40
 800bd6e:	4013      	ands	r3, r2
 800bd70:	d01d      	beq.n	800bdae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	4a1d      	ldr	r2, [pc, #116]	@ (800bdf0 <UART_AdvFeatureConfig+0x15c>)
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	0019      	movs	r1, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd8e:	2380      	movs	r3, #128	@ 0x80
 800bd90:	035b      	lsls	r3, r3, #13
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d10b      	bne.n	800bdae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	4a15      	ldr	r2, [pc, #84]	@ (800bdf4 <UART_AdvFeatureConfig+0x160>)
 800bd9e:	4013      	ands	r3, r2
 800bda0:	0019      	movs	r1, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	430a      	orrs	r2, r1
 800bdac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb2:	2280      	movs	r2, #128	@ 0x80
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	d00b      	beq.n	800bdd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	4a0e      	ldr	r2, [pc, #56]	@ (800bdf8 <UART_AdvFeatureConfig+0x164>)
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	0019      	movs	r1, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	605a      	str	r2, [r3, #4]
  }
}
 800bdd0:	46c0      	nop			@ (mov r8, r8)
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	b002      	add	sp, #8
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	ffff7fff 	.word	0xffff7fff
 800bddc:	fffdffff 	.word	0xfffdffff
 800bde0:	fffeffff 	.word	0xfffeffff
 800bde4:	fffbffff 	.word	0xfffbffff
 800bde8:	ffffefff 	.word	0xffffefff
 800bdec:	ffffdfff 	.word	0xffffdfff
 800bdf0:	ffefffff 	.word	0xffefffff
 800bdf4:	ff9fffff 	.word	0xff9fffff
 800bdf8:	fff7ffff 	.word	0xfff7ffff

0800bdfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b092      	sub	sp, #72	@ 0x48
 800be00:	af02      	add	r7, sp, #8
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2290      	movs	r2, #144	@ 0x90
 800be08:	2100      	movs	r1, #0
 800be0a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be0c:	f7fb f926 	bl	800705c <HAL_GetTick>
 800be10:	0003      	movs	r3, r0
 800be12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2208      	movs	r2, #8
 800be1c:	4013      	ands	r3, r2
 800be1e:	2b08      	cmp	r3, #8
 800be20:	d12d      	bne.n	800be7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be24:	2280      	movs	r2, #128	@ 0x80
 800be26:	0391      	lsls	r1, r2, #14
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	4a47      	ldr	r2, [pc, #284]	@ (800bf48 <UART_CheckIdleState+0x14c>)
 800be2c:	9200      	str	r2, [sp, #0]
 800be2e:	2200      	movs	r2, #0
 800be30:	f000 f88e 	bl	800bf50 <UART_WaitOnFlagUntilTimeout>
 800be34:	1e03      	subs	r3, r0, #0
 800be36:	d022      	beq.n	800be7e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be38:	f3ef 8310 	mrs	r3, PRIMASK
 800be3c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800be3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800be40:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be42:	2301      	movs	r3, #1
 800be44:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be48:	f383 8810 	msr	PRIMASK, r3
}
 800be4c:	46c0      	nop			@ (mov r8, r8)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2180      	movs	r1, #128	@ 0x80
 800be5a:	438a      	bics	r2, r1
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be64:	f383 8810 	msr	PRIMASK, r3
}
 800be68:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2288      	movs	r2, #136	@ 0x88
 800be6e:	2120      	movs	r1, #32
 800be70:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2284      	movs	r2, #132	@ 0x84
 800be76:	2100      	movs	r1, #0
 800be78:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be7a:	2303      	movs	r3, #3
 800be7c:	e060      	b.n	800bf40 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2204      	movs	r2, #4
 800be86:	4013      	ands	r3, r2
 800be88:	2b04      	cmp	r3, #4
 800be8a:	d146      	bne.n	800bf1a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800be8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be8e:	2280      	movs	r2, #128	@ 0x80
 800be90:	03d1      	lsls	r1, r2, #15
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	4a2c      	ldr	r2, [pc, #176]	@ (800bf48 <UART_CheckIdleState+0x14c>)
 800be96:	9200      	str	r2, [sp, #0]
 800be98:	2200      	movs	r2, #0
 800be9a:	f000 f859 	bl	800bf50 <UART_WaitOnFlagUntilTimeout>
 800be9e:	1e03      	subs	r3, r0, #0
 800bea0:	d03b      	beq.n	800bf1a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bea2:	f3ef 8310 	mrs	r3, PRIMASK
 800bea6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bea8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800beac:	2301      	movs	r3, #1
 800beae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f383 8810 	msr	PRIMASK, r3
}
 800beb6:	46c0      	nop			@ (mov r8, r8)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4922      	ldr	r1, [pc, #136]	@ (800bf4c <UART_CheckIdleState+0x150>)
 800bec4:	400a      	ands	r2, r1
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	f383 8810 	msr	PRIMASK, r3
}
 800bed2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bed4:	f3ef 8310 	mrs	r3, PRIMASK
 800bed8:	61bb      	str	r3, [r7, #24]
  return(result);
 800beda:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bedc:	633b      	str	r3, [r7, #48]	@ 0x30
 800bede:	2301      	movs	r3, #1
 800bee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	f383 8810 	msr	PRIMASK, r3
}
 800bee8:	46c0      	nop			@ (mov r8, r8)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2101      	movs	r1, #1
 800bef6:	438a      	bics	r2, r1
 800bef8:	609a      	str	r2, [r3, #8]
 800befa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800befc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	f383 8810 	msr	PRIMASK, r3
}
 800bf04:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	228c      	movs	r2, #140	@ 0x8c
 800bf0a:	2120      	movs	r1, #32
 800bf0c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2284      	movs	r2, #132	@ 0x84
 800bf12:	2100      	movs	r1, #0
 800bf14:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	e012      	b.n	800bf40 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2288      	movs	r2, #136	@ 0x88
 800bf1e:	2120      	movs	r1, #32
 800bf20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	228c      	movs	r2, #140	@ 0x8c
 800bf26:	2120      	movs	r1, #32
 800bf28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2284      	movs	r2, #132	@ 0x84
 800bf3a:	2100      	movs	r1, #0
 800bf3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	0018      	movs	r0, r3
 800bf42:	46bd      	mov	sp, r7
 800bf44:	b010      	add	sp, #64	@ 0x40
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	01ffffff 	.word	0x01ffffff
 800bf4c:	fffffedf 	.word	0xfffffedf

0800bf50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	603b      	str	r3, [r7, #0]
 800bf5c:	1dfb      	adds	r3, r7, #7
 800bf5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf60:	e051      	b.n	800c006 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	3301      	adds	r3, #1
 800bf66:	d04e      	beq.n	800c006 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf68:	f7fb f878 	bl	800705c <HAL_GetTick>
 800bf6c:	0002      	movs	r2, r0
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	69ba      	ldr	r2, [r7, #24]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d302      	bcc.n	800bf7e <UART_WaitOnFlagUntilTimeout+0x2e>
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e051      	b.n	800c026 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2204      	movs	r2, #4
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	d03b      	beq.n	800c006 <UART_WaitOnFlagUntilTimeout+0xb6>
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b80      	cmp	r3, #128	@ 0x80
 800bf92:	d038      	beq.n	800c006 <UART_WaitOnFlagUntilTimeout+0xb6>
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b40      	cmp	r3, #64	@ 0x40
 800bf98:	d035      	beq.n	800c006 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	69db      	ldr	r3, [r3, #28]
 800bfa0:	2208      	movs	r2, #8
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	2b08      	cmp	r3, #8
 800bfa6:	d111      	bne.n	800bfcc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2208      	movs	r2, #8
 800bfae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	f000 f83c 	bl	800c030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2290      	movs	r2, #144	@ 0x90
 800bfbc:	2108      	movs	r1, #8
 800bfbe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2284      	movs	r2, #132	@ 0x84
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e02c      	b.n	800c026 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	69da      	ldr	r2, [r3, #28]
 800bfd2:	2380      	movs	r3, #128	@ 0x80
 800bfd4:	011b      	lsls	r3, r3, #4
 800bfd6:	401a      	ands	r2, r3
 800bfd8:	2380      	movs	r3, #128	@ 0x80
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d112      	bne.n	800c006 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2280      	movs	r2, #128	@ 0x80
 800bfe6:	0112      	lsls	r2, r2, #4
 800bfe8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	0018      	movs	r0, r3
 800bfee:	f000 f81f 	bl	800c030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2290      	movs	r2, #144	@ 0x90
 800bff6:	2120      	movs	r1, #32
 800bff8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2284      	movs	r2, #132	@ 0x84
 800bffe:	2100      	movs	r1, #0
 800c000:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e00f      	b.n	800c026 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	4013      	ands	r3, r2
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	425a      	negs	r2, r3
 800c016:	4153      	adcs	r3, r2
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	001a      	movs	r2, r3
 800c01c:	1dfb      	adds	r3, r7, #7
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d09e      	beq.n	800bf62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	0018      	movs	r0, r3
 800c028:	46bd      	mov	sp, r7
 800c02a:	b004      	add	sp, #16
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b08e      	sub	sp, #56	@ 0x38
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c038:	f3ef 8310 	mrs	r3, PRIMASK
 800c03c:	617b      	str	r3, [r7, #20]
  return(result);
 800c03e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c040:	637b      	str	r3, [r7, #52]	@ 0x34
 800c042:	2301      	movs	r3, #1
 800c044:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	f383 8810 	msr	PRIMASK, r3
}
 800c04c:	46c0      	nop			@ (mov r8, r8)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4926      	ldr	r1, [pc, #152]	@ (800c0f4 <UART_EndRxTransfer+0xc4>)
 800c05a:	400a      	ands	r2, r1
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c060:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	f383 8810 	msr	PRIMASK, r3
}
 800c068:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c06a:	f3ef 8310 	mrs	r3, PRIMASK
 800c06e:	623b      	str	r3, [r7, #32]
  return(result);
 800c070:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c072:	633b      	str	r3, [r7, #48]	@ 0x30
 800c074:	2301      	movs	r3, #1
 800c076:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07a:	f383 8810 	msr	PRIMASK, r3
}
 800c07e:	46c0      	nop			@ (mov r8, r8)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	689a      	ldr	r2, [r3, #8]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	491b      	ldr	r1, [pc, #108]	@ (800c0f8 <UART_EndRxTransfer+0xc8>)
 800c08c:	400a      	ands	r2, r1
 800c08e:	609a      	str	r2, [r3, #8]
 800c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c092:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c096:	f383 8810 	msr	PRIMASK, r3
}
 800c09a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d118      	bne.n	800c0d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c0a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f383 8810 	msr	PRIMASK, r3
}
 800c0b8:	46c0      	nop			@ (mov r8, r8)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2110      	movs	r1, #16
 800c0c6:	438a      	bics	r2, r1
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f383 8810 	msr	PRIMASK, r3
}
 800c0d4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	228c      	movs	r2, #140	@ 0x8c
 800c0da:	2120      	movs	r1, #32
 800c0dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	b00e      	add	sp, #56	@ 0x38
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	46c0      	nop			@ (mov r8, r8)
 800c0f4:	fffffedf 	.word	0xfffffedf
 800c0f8:	effffffe 	.word	0xeffffffe

0800c0fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2284      	movs	r2, #132	@ 0x84
 800c108:	5c9b      	ldrb	r3, [r3, r2]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d101      	bne.n	800c112 <HAL_UARTEx_DisableFifoMode+0x16>
 800c10e:	2302      	movs	r3, #2
 800c110:	e027      	b.n	800c162 <HAL_UARTEx_DisableFifoMode+0x66>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2284      	movs	r2, #132	@ 0x84
 800c116:	2101      	movs	r1, #1
 800c118:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2288      	movs	r2, #136	@ 0x88
 800c11e:	2124      	movs	r1, #36	@ 0x24
 800c120:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2101      	movs	r1, #1
 800c136:	438a      	bics	r2, r1
 800c138:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4a0b      	ldr	r2, [pc, #44]	@ (800c16c <HAL_UARTEx_DisableFifoMode+0x70>)
 800c13e:	4013      	ands	r3, r2
 800c140:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	68fa      	ldr	r2, [r7, #12]
 800c14e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2288      	movs	r2, #136	@ 0x88
 800c154:	2120      	movs	r1, #32
 800c156:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2284      	movs	r2, #132	@ 0x84
 800c15c:	2100      	movs	r1, #0
 800c15e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c160:	2300      	movs	r3, #0
}
 800c162:	0018      	movs	r0, r3
 800c164:	46bd      	mov	sp, r7
 800c166:	b004      	add	sp, #16
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	46c0      	nop			@ (mov r8, r8)
 800c16c:	dfffffff 	.word	0xdfffffff

0800c170 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2284      	movs	r2, #132	@ 0x84
 800c17e:	5c9b      	ldrb	r3, [r3, r2]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d101      	bne.n	800c188 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c184:	2302      	movs	r3, #2
 800c186:	e02e      	b.n	800c1e6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2284      	movs	r2, #132	@ 0x84
 800c18c:	2101      	movs	r1, #1
 800c18e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2288      	movs	r2, #136	@ 0x88
 800c194:	2124      	movs	r1, #36	@ 0x24
 800c196:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	438a      	bics	r2, r1
 800c1ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	08d9      	lsrs	r1, r3, #3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	f000 f854 	bl	800c274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2288      	movs	r2, #136	@ 0x88
 800c1d8:	2120      	movs	r1, #32
 800c1da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2284      	movs	r2, #132	@ 0x84
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	b004      	add	sp, #16
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2284      	movs	r2, #132	@ 0x84
 800c1fe:	5c9b      	ldrb	r3, [r3, r2]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d101      	bne.n	800c208 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c204:	2302      	movs	r3, #2
 800c206:	e02f      	b.n	800c268 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2284      	movs	r2, #132	@ 0x84
 800c20c:	2101      	movs	r1, #1
 800c20e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2288      	movs	r2, #136	@ 0x88
 800c214:	2124      	movs	r1, #36	@ 0x24
 800c216:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2101      	movs	r1, #1
 800c22c:	438a      	bics	r2, r1
 800c22e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	4a0e      	ldr	r2, [pc, #56]	@ (800c270 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800c238:	4013      	ands	r3, r2
 800c23a:	0019      	movs	r1, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	0018      	movs	r0, r3
 800c24a:	f000 f813 	bl	800c274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2288      	movs	r2, #136	@ 0x88
 800c25a:	2120      	movs	r1, #32
 800c25c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2284      	movs	r2, #132	@ 0x84
 800c262:	2100      	movs	r1, #0
 800c264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	0018      	movs	r0, r3
 800c26a:	46bd      	mov	sp, r7
 800c26c:	b004      	add	sp, #16
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	f1ffffff 	.word	0xf1ffffff

0800c274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c280:	2b00      	cmp	r3, #0
 800c282:	d108      	bne.n	800c296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	226a      	movs	r2, #106	@ 0x6a
 800c288:	2101      	movs	r1, #1
 800c28a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2268      	movs	r2, #104	@ 0x68
 800c290:	2101      	movs	r1, #1
 800c292:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c294:	e043      	b.n	800c31e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c296:	260f      	movs	r6, #15
 800c298:	19bb      	adds	r3, r7, r6
 800c29a:	2208      	movs	r2, #8
 800c29c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c29e:	200e      	movs	r0, #14
 800c2a0:	183b      	adds	r3, r7, r0
 800c2a2:	2208      	movs	r2, #8
 800c2a4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	0e5b      	lsrs	r3, r3, #25
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	240d      	movs	r4, #13
 800c2b2:	193b      	adds	r3, r7, r4
 800c2b4:	2107      	movs	r1, #7
 800c2b6:	400a      	ands	r2, r1
 800c2b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	0f5b      	lsrs	r3, r3, #29
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	250c      	movs	r5, #12
 800c2c6:	197b      	adds	r3, r7, r5
 800c2c8:	2107      	movs	r1, #7
 800c2ca:	400a      	ands	r2, r1
 800c2cc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2ce:	183b      	adds	r3, r7, r0
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	197a      	adds	r2, r7, r5
 800c2d4:	7812      	ldrb	r2, [r2, #0]
 800c2d6:	4914      	ldr	r1, [pc, #80]	@ (800c328 <UARTEx_SetNbDataToProcess+0xb4>)
 800c2d8:	5c8a      	ldrb	r2, [r1, r2]
 800c2da:	435a      	muls	r2, r3
 800c2dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800c2de:	197b      	adds	r3, r7, r5
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	4a12      	ldr	r2, [pc, #72]	@ (800c32c <UARTEx_SetNbDataToProcess+0xb8>)
 800c2e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c2e6:	0019      	movs	r1, r3
 800c2e8:	f7f3 ffaa 	bl	8000240 <__divsi3>
 800c2ec:	0003      	movs	r3, r0
 800c2ee:	b299      	uxth	r1, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	226a      	movs	r2, #106	@ 0x6a
 800c2f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c2f6:	19bb      	adds	r3, r7, r6
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	193a      	adds	r2, r7, r4
 800c2fc:	7812      	ldrb	r2, [r2, #0]
 800c2fe:	490a      	ldr	r1, [pc, #40]	@ (800c328 <UARTEx_SetNbDataToProcess+0xb4>)
 800c300:	5c8a      	ldrb	r2, [r1, r2]
 800c302:	435a      	muls	r2, r3
 800c304:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800c306:	193b      	adds	r3, r7, r4
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	4a08      	ldr	r2, [pc, #32]	@ (800c32c <UARTEx_SetNbDataToProcess+0xb8>)
 800c30c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c30e:	0019      	movs	r1, r3
 800c310:	f7f3 ff96 	bl	8000240 <__divsi3>
 800c314:	0003      	movs	r3, r0
 800c316:	b299      	uxth	r1, r3
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2268      	movs	r2, #104	@ 0x68
 800c31c:	5299      	strh	r1, [r3, r2]
}
 800c31e:	46c0      	nop			@ (mov r8, r8)
 800c320:	46bd      	mov	sp, r7
 800c322:	b005      	add	sp, #20
 800c324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c326:	46c0      	nop			@ (mov r8, r8)
 800c328:	0800da04 	.word	0x0800da04
 800c32c:	0800da0c 	.word	0x0800da0c

0800c330 <_strtol_l.isra.0>:
 800c330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c332:	b085      	sub	sp, #20
 800c334:	0017      	movs	r7, r2
 800c336:	001e      	movs	r6, r3
 800c338:	9003      	str	r0, [sp, #12]
 800c33a:	9101      	str	r1, [sp, #4]
 800c33c:	2b24      	cmp	r3, #36	@ 0x24
 800c33e:	d823      	bhi.n	800c388 <_strtol_l.isra.0+0x58>
 800c340:	000c      	movs	r4, r1
 800c342:	2b01      	cmp	r3, #1
 800c344:	d020      	beq.n	800c388 <_strtol_l.isra.0+0x58>
 800c346:	4b3d      	ldr	r3, [pc, #244]	@ (800c43c <_strtol_l.isra.0+0x10c>)
 800c348:	2208      	movs	r2, #8
 800c34a:	469c      	mov	ip, r3
 800c34c:	0023      	movs	r3, r4
 800c34e:	4661      	mov	r1, ip
 800c350:	781d      	ldrb	r5, [r3, #0]
 800c352:	3401      	adds	r4, #1
 800c354:	5d48      	ldrb	r0, [r1, r5]
 800c356:	0001      	movs	r1, r0
 800c358:	4011      	ands	r1, r2
 800c35a:	4210      	tst	r0, r2
 800c35c:	d1f6      	bne.n	800c34c <_strtol_l.isra.0+0x1c>
 800c35e:	2d2d      	cmp	r5, #45	@ 0x2d
 800c360:	d119      	bne.n	800c396 <_strtol_l.isra.0+0x66>
 800c362:	7825      	ldrb	r5, [r4, #0]
 800c364:	1c9c      	adds	r4, r3, #2
 800c366:	2301      	movs	r3, #1
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	2210      	movs	r2, #16
 800c36c:	0033      	movs	r3, r6
 800c36e:	4393      	bics	r3, r2
 800c370:	d11d      	bne.n	800c3ae <_strtol_l.isra.0+0x7e>
 800c372:	2d30      	cmp	r5, #48	@ 0x30
 800c374:	d115      	bne.n	800c3a2 <_strtol_l.isra.0+0x72>
 800c376:	2120      	movs	r1, #32
 800c378:	7823      	ldrb	r3, [r4, #0]
 800c37a:	438b      	bics	r3, r1
 800c37c:	2b58      	cmp	r3, #88	@ 0x58
 800c37e:	d110      	bne.n	800c3a2 <_strtol_l.isra.0+0x72>
 800c380:	7865      	ldrb	r5, [r4, #1]
 800c382:	3402      	adds	r4, #2
 800c384:	2610      	movs	r6, #16
 800c386:	e012      	b.n	800c3ae <_strtol_l.isra.0+0x7e>
 800c388:	f000 f892 	bl	800c4b0 <__errno>
 800c38c:	2316      	movs	r3, #22
 800c38e:	6003      	str	r3, [r0, #0]
 800c390:	2000      	movs	r0, #0
 800c392:	b005      	add	sp, #20
 800c394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c396:	9100      	str	r1, [sp, #0]
 800c398:	2d2b      	cmp	r5, #43	@ 0x2b
 800c39a:	d1e6      	bne.n	800c36a <_strtol_l.isra.0+0x3a>
 800c39c:	7825      	ldrb	r5, [r4, #0]
 800c39e:	1c9c      	adds	r4, r3, #2
 800c3a0:	e7e3      	b.n	800c36a <_strtol_l.isra.0+0x3a>
 800c3a2:	2e00      	cmp	r6, #0
 800c3a4:	d1ee      	bne.n	800c384 <_strtol_l.isra.0+0x54>
 800c3a6:	360a      	adds	r6, #10
 800c3a8:	2d30      	cmp	r5, #48	@ 0x30
 800c3aa:	d100      	bne.n	800c3ae <_strtol_l.isra.0+0x7e>
 800c3ac:	3e02      	subs	r6, #2
 800c3ae:	4a24      	ldr	r2, [pc, #144]	@ (800c440 <_strtol_l.isra.0+0x110>)
 800c3b0:	9b00      	ldr	r3, [sp, #0]
 800c3b2:	4694      	mov	ip, r2
 800c3b4:	4463      	add	r3, ip
 800c3b6:	0031      	movs	r1, r6
 800c3b8:	0018      	movs	r0, r3
 800c3ba:	9302      	str	r3, [sp, #8]
 800c3bc:	f7f3 ff3c 	bl	8000238 <__aeabi_uidivmod>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	4684      	mov	ip, r0
 800c3c4:	0010      	movs	r0, r2
 800c3c6:	002b      	movs	r3, r5
 800c3c8:	3b30      	subs	r3, #48	@ 0x30
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d811      	bhi.n	800c3f2 <_strtol_l.isra.0+0xc2>
 800c3ce:	001d      	movs	r5, r3
 800c3d0:	42ae      	cmp	r6, r5
 800c3d2:	dd1d      	ble.n	800c410 <_strtol_l.isra.0+0xe0>
 800c3d4:	1c53      	adds	r3, r2, #1
 800c3d6:	d009      	beq.n	800c3ec <_strtol_l.isra.0+0xbc>
 800c3d8:	2201      	movs	r2, #1
 800c3da:	4252      	negs	r2, r2
 800c3dc:	4584      	cmp	ip, r0
 800c3de:	d305      	bcc.n	800c3ec <_strtol_l.isra.0+0xbc>
 800c3e0:	d101      	bne.n	800c3e6 <_strtol_l.isra.0+0xb6>
 800c3e2:	42a9      	cmp	r1, r5
 800c3e4:	db11      	blt.n	800c40a <_strtol_l.isra.0+0xda>
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	4370      	muls	r0, r6
 800c3ea:	1828      	adds	r0, r5, r0
 800c3ec:	7825      	ldrb	r5, [r4, #0]
 800c3ee:	3401      	adds	r4, #1
 800c3f0:	e7e9      	b.n	800c3c6 <_strtol_l.isra.0+0x96>
 800c3f2:	002b      	movs	r3, r5
 800c3f4:	3b41      	subs	r3, #65	@ 0x41
 800c3f6:	2b19      	cmp	r3, #25
 800c3f8:	d801      	bhi.n	800c3fe <_strtol_l.isra.0+0xce>
 800c3fa:	3d37      	subs	r5, #55	@ 0x37
 800c3fc:	e7e8      	b.n	800c3d0 <_strtol_l.isra.0+0xa0>
 800c3fe:	002b      	movs	r3, r5
 800c400:	3b61      	subs	r3, #97	@ 0x61
 800c402:	2b19      	cmp	r3, #25
 800c404:	d804      	bhi.n	800c410 <_strtol_l.isra.0+0xe0>
 800c406:	3d57      	subs	r5, #87	@ 0x57
 800c408:	e7e2      	b.n	800c3d0 <_strtol_l.isra.0+0xa0>
 800c40a:	2201      	movs	r2, #1
 800c40c:	4252      	negs	r2, r2
 800c40e:	e7ed      	b.n	800c3ec <_strtol_l.isra.0+0xbc>
 800c410:	1c53      	adds	r3, r2, #1
 800c412:	d108      	bne.n	800c426 <_strtol_l.isra.0+0xf6>
 800c414:	2322      	movs	r3, #34	@ 0x22
 800c416:	9a03      	ldr	r2, [sp, #12]
 800c418:	9802      	ldr	r0, [sp, #8]
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	2f00      	cmp	r7, #0
 800c41e:	d0b8      	beq.n	800c392 <_strtol_l.isra.0+0x62>
 800c420:	1e63      	subs	r3, r4, #1
 800c422:	9301      	str	r3, [sp, #4]
 800c424:	e007      	b.n	800c436 <_strtol_l.isra.0+0x106>
 800c426:	9b00      	ldr	r3, [sp, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d000      	beq.n	800c42e <_strtol_l.isra.0+0xfe>
 800c42c:	4240      	negs	r0, r0
 800c42e:	2f00      	cmp	r7, #0
 800c430:	d0af      	beq.n	800c392 <_strtol_l.isra.0+0x62>
 800c432:	2a00      	cmp	r2, #0
 800c434:	d1f4      	bne.n	800c420 <_strtol_l.isra.0+0xf0>
 800c436:	9b01      	ldr	r3, [sp, #4]
 800c438:	603b      	str	r3, [r7, #0]
 800c43a:	e7aa      	b.n	800c392 <_strtol_l.isra.0+0x62>
 800c43c:	0800da15 	.word	0x0800da15
 800c440:	7fffffff 	.word	0x7fffffff

0800c444 <strtol>:
 800c444:	b510      	push	{r4, lr}
 800c446:	4c04      	ldr	r4, [pc, #16]	@ (800c458 <strtol+0x14>)
 800c448:	0013      	movs	r3, r2
 800c44a:	000a      	movs	r2, r1
 800c44c:	0001      	movs	r1, r0
 800c44e:	6820      	ldr	r0, [r4, #0]
 800c450:	f7ff ff6e 	bl	800c330 <_strtol_l.isra.0>
 800c454:	bd10      	pop	{r4, pc}
 800c456:	46c0      	nop			@ (mov r8, r8)
 800c458:	200009d4 	.word	0x200009d4

0800c45c <siprintf>:
 800c45c:	b40e      	push	{r1, r2, r3}
 800c45e:	b510      	push	{r4, lr}
 800c460:	2400      	movs	r4, #0
 800c462:	490c      	ldr	r1, [pc, #48]	@ (800c494 <siprintf+0x38>)
 800c464:	b09d      	sub	sp, #116	@ 0x74
 800c466:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c468:	9002      	str	r0, [sp, #8]
 800c46a:	9006      	str	r0, [sp, #24]
 800c46c:	9107      	str	r1, [sp, #28]
 800c46e:	9104      	str	r1, [sp, #16]
 800c470:	4809      	ldr	r0, [pc, #36]	@ (800c498 <siprintf+0x3c>)
 800c472:	490a      	ldr	r1, [pc, #40]	@ (800c49c <siprintf+0x40>)
 800c474:	cb04      	ldmia	r3!, {r2}
 800c476:	9105      	str	r1, [sp, #20]
 800c478:	6800      	ldr	r0, [r0, #0]
 800c47a:	a902      	add	r1, sp, #8
 800c47c:	9301      	str	r3, [sp, #4]
 800c47e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c480:	f000 f9a8 	bl	800c7d4 <_svfiprintf_r>
 800c484:	9b02      	ldr	r3, [sp, #8]
 800c486:	701c      	strb	r4, [r3, #0]
 800c488:	b01d      	add	sp, #116	@ 0x74
 800c48a:	bc10      	pop	{r4}
 800c48c:	bc08      	pop	{r3}
 800c48e:	b003      	add	sp, #12
 800c490:	4718      	bx	r3
 800c492:	46c0      	nop			@ (mov r8, r8)
 800c494:	7fffffff 	.word	0x7fffffff
 800c498:	200009d4 	.word	0x200009d4
 800c49c:	ffff0208 	.word	0xffff0208

0800c4a0 <memset>:
 800c4a0:	0003      	movs	r3, r0
 800c4a2:	1882      	adds	r2, r0, r2
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d100      	bne.n	800c4aa <memset+0xa>
 800c4a8:	4770      	bx	lr
 800c4aa:	7019      	strb	r1, [r3, #0]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	e7f9      	b.n	800c4a4 <memset+0x4>

0800c4b0 <__errno>:
 800c4b0:	4b01      	ldr	r3, [pc, #4]	@ (800c4b8 <__errno+0x8>)
 800c4b2:	6818      	ldr	r0, [r3, #0]
 800c4b4:	4770      	bx	lr
 800c4b6:	46c0      	nop			@ (mov r8, r8)
 800c4b8:	200009d4 	.word	0x200009d4

0800c4bc <__libc_init_array>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	2600      	movs	r6, #0
 800c4c0:	4c0c      	ldr	r4, [pc, #48]	@ (800c4f4 <__libc_init_array+0x38>)
 800c4c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c4f8 <__libc_init_array+0x3c>)
 800c4c4:	1b64      	subs	r4, r4, r5
 800c4c6:	10a4      	asrs	r4, r4, #2
 800c4c8:	42a6      	cmp	r6, r4
 800c4ca:	d109      	bne.n	800c4e0 <__libc_init_array+0x24>
 800c4cc:	2600      	movs	r6, #0
 800c4ce:	f000 fd6d 	bl	800cfac <_init>
 800c4d2:	4c0a      	ldr	r4, [pc, #40]	@ (800c4fc <__libc_init_array+0x40>)
 800c4d4:	4d0a      	ldr	r5, [pc, #40]	@ (800c500 <__libc_init_array+0x44>)
 800c4d6:	1b64      	subs	r4, r4, r5
 800c4d8:	10a4      	asrs	r4, r4, #2
 800c4da:	42a6      	cmp	r6, r4
 800c4dc:	d105      	bne.n	800c4ea <__libc_init_array+0x2e>
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	00b3      	lsls	r3, r6, #2
 800c4e2:	58eb      	ldr	r3, [r5, r3]
 800c4e4:	4798      	blx	r3
 800c4e6:	3601      	adds	r6, #1
 800c4e8:	e7ee      	b.n	800c4c8 <__libc_init_array+0xc>
 800c4ea:	00b3      	lsls	r3, r6, #2
 800c4ec:	58eb      	ldr	r3, [r5, r3]
 800c4ee:	4798      	blx	r3
 800c4f0:	3601      	adds	r6, #1
 800c4f2:	e7f2      	b.n	800c4da <__libc_init_array+0x1e>
 800c4f4:	0800db60 	.word	0x0800db60
 800c4f8:	0800db60 	.word	0x0800db60
 800c4fc:	0800db64 	.word	0x0800db64
 800c500:	0800db60 	.word	0x0800db60

0800c504 <__retarget_lock_acquire_recursive>:
 800c504:	4770      	bx	lr

0800c506 <__retarget_lock_release_recursive>:
 800c506:	4770      	bx	lr

0800c508 <memcpy>:
 800c508:	2300      	movs	r3, #0
 800c50a:	b510      	push	{r4, lr}
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d100      	bne.n	800c512 <memcpy+0xa>
 800c510:	bd10      	pop	{r4, pc}
 800c512:	5ccc      	ldrb	r4, [r1, r3]
 800c514:	54c4      	strb	r4, [r0, r3]
 800c516:	3301      	adds	r3, #1
 800c518:	e7f8      	b.n	800c50c <memcpy+0x4>
	...

0800c51c <_free_r>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	0005      	movs	r5, r0
 800c520:	1e0c      	subs	r4, r1, #0
 800c522:	d010      	beq.n	800c546 <_free_r+0x2a>
 800c524:	3c04      	subs	r4, #4
 800c526:	6823      	ldr	r3, [r4, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	da00      	bge.n	800c52e <_free_r+0x12>
 800c52c:	18e4      	adds	r4, r4, r3
 800c52e:	0028      	movs	r0, r5
 800c530:	f000 f8e0 	bl	800c6f4 <__malloc_lock>
 800c534:	4a1d      	ldr	r2, [pc, #116]	@ (800c5ac <_free_r+0x90>)
 800c536:	6813      	ldr	r3, [r2, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d105      	bne.n	800c548 <_free_r+0x2c>
 800c53c:	6063      	str	r3, [r4, #4]
 800c53e:	6014      	str	r4, [r2, #0]
 800c540:	0028      	movs	r0, r5
 800c542:	f000 f8df 	bl	800c704 <__malloc_unlock>
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	42a3      	cmp	r3, r4
 800c54a:	d908      	bls.n	800c55e <_free_r+0x42>
 800c54c:	6820      	ldr	r0, [r4, #0]
 800c54e:	1821      	adds	r1, r4, r0
 800c550:	428b      	cmp	r3, r1
 800c552:	d1f3      	bne.n	800c53c <_free_r+0x20>
 800c554:	6819      	ldr	r1, [r3, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	1809      	adds	r1, r1, r0
 800c55a:	6021      	str	r1, [r4, #0]
 800c55c:	e7ee      	b.n	800c53c <_free_r+0x20>
 800c55e:	001a      	movs	r2, r3
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <_free_r+0x4e>
 800c566:	42a3      	cmp	r3, r4
 800c568:	d9f9      	bls.n	800c55e <_free_r+0x42>
 800c56a:	6811      	ldr	r1, [r2, #0]
 800c56c:	1850      	adds	r0, r2, r1
 800c56e:	42a0      	cmp	r0, r4
 800c570:	d10b      	bne.n	800c58a <_free_r+0x6e>
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	1809      	adds	r1, r1, r0
 800c576:	1850      	adds	r0, r2, r1
 800c578:	6011      	str	r1, [r2, #0]
 800c57a:	4283      	cmp	r3, r0
 800c57c:	d1e0      	bne.n	800c540 <_free_r+0x24>
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	1841      	adds	r1, r0, r1
 800c584:	6011      	str	r1, [r2, #0]
 800c586:	6053      	str	r3, [r2, #4]
 800c588:	e7da      	b.n	800c540 <_free_r+0x24>
 800c58a:	42a0      	cmp	r0, r4
 800c58c:	d902      	bls.n	800c594 <_free_r+0x78>
 800c58e:	230c      	movs	r3, #12
 800c590:	602b      	str	r3, [r5, #0]
 800c592:	e7d5      	b.n	800c540 <_free_r+0x24>
 800c594:	6820      	ldr	r0, [r4, #0]
 800c596:	1821      	adds	r1, r4, r0
 800c598:	428b      	cmp	r3, r1
 800c59a:	d103      	bne.n	800c5a4 <_free_r+0x88>
 800c59c:	6819      	ldr	r1, [r3, #0]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	1809      	adds	r1, r1, r0
 800c5a2:	6021      	str	r1, [r4, #0]
 800c5a4:	6063      	str	r3, [r4, #4]
 800c5a6:	6054      	str	r4, [r2, #4]
 800c5a8:	e7ca      	b.n	800c540 <_free_r+0x24>
 800c5aa:	46c0      	nop			@ (mov r8, r8)
 800c5ac:	200010d4 	.word	0x200010d4

0800c5b0 <sbrk_aligned>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	4e0f      	ldr	r6, [pc, #60]	@ (800c5f0 <sbrk_aligned+0x40>)
 800c5b4:	000d      	movs	r5, r1
 800c5b6:	6831      	ldr	r1, [r6, #0]
 800c5b8:	0004      	movs	r4, r0
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	d102      	bne.n	800c5c4 <sbrk_aligned+0x14>
 800c5be:	f000 fb95 	bl	800ccec <_sbrk_r>
 800c5c2:	6030      	str	r0, [r6, #0]
 800c5c4:	0029      	movs	r1, r5
 800c5c6:	0020      	movs	r0, r4
 800c5c8:	f000 fb90 	bl	800ccec <_sbrk_r>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d103      	bne.n	800c5d8 <sbrk_aligned+0x28>
 800c5d0:	2501      	movs	r5, #1
 800c5d2:	426d      	negs	r5, r5
 800c5d4:	0028      	movs	r0, r5
 800c5d6:	bd70      	pop	{r4, r5, r6, pc}
 800c5d8:	2303      	movs	r3, #3
 800c5da:	1cc5      	adds	r5, r0, #3
 800c5dc:	439d      	bics	r5, r3
 800c5de:	42a8      	cmp	r0, r5
 800c5e0:	d0f8      	beq.n	800c5d4 <sbrk_aligned+0x24>
 800c5e2:	1a29      	subs	r1, r5, r0
 800c5e4:	0020      	movs	r0, r4
 800c5e6:	f000 fb81 	bl	800ccec <_sbrk_r>
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	d1f2      	bne.n	800c5d4 <sbrk_aligned+0x24>
 800c5ee:	e7ef      	b.n	800c5d0 <sbrk_aligned+0x20>
 800c5f0:	200010d0 	.word	0x200010d0

0800c5f4 <_malloc_r>:
 800c5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5f6:	2203      	movs	r2, #3
 800c5f8:	1ccb      	adds	r3, r1, #3
 800c5fa:	4393      	bics	r3, r2
 800c5fc:	3308      	adds	r3, #8
 800c5fe:	0005      	movs	r5, r0
 800c600:	001f      	movs	r7, r3
 800c602:	2b0c      	cmp	r3, #12
 800c604:	d234      	bcs.n	800c670 <_malloc_r+0x7c>
 800c606:	270c      	movs	r7, #12
 800c608:	42b9      	cmp	r1, r7
 800c60a:	d833      	bhi.n	800c674 <_malloc_r+0x80>
 800c60c:	0028      	movs	r0, r5
 800c60e:	f000 f871 	bl	800c6f4 <__malloc_lock>
 800c612:	4e37      	ldr	r6, [pc, #220]	@ (800c6f0 <_malloc_r+0xfc>)
 800c614:	6833      	ldr	r3, [r6, #0]
 800c616:	001c      	movs	r4, r3
 800c618:	2c00      	cmp	r4, #0
 800c61a:	d12f      	bne.n	800c67c <_malloc_r+0x88>
 800c61c:	0039      	movs	r1, r7
 800c61e:	0028      	movs	r0, r5
 800c620:	f7ff ffc6 	bl	800c5b0 <sbrk_aligned>
 800c624:	0004      	movs	r4, r0
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	d15f      	bne.n	800c6ea <_malloc_r+0xf6>
 800c62a:	6834      	ldr	r4, [r6, #0]
 800c62c:	9400      	str	r4, [sp, #0]
 800c62e:	9b00      	ldr	r3, [sp, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d14a      	bne.n	800c6ca <_malloc_r+0xd6>
 800c634:	2c00      	cmp	r4, #0
 800c636:	d052      	beq.n	800c6de <_malloc_r+0xea>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	0028      	movs	r0, r5
 800c63c:	18e3      	adds	r3, r4, r3
 800c63e:	9900      	ldr	r1, [sp, #0]
 800c640:	9301      	str	r3, [sp, #4]
 800c642:	f000 fb53 	bl	800ccec <_sbrk_r>
 800c646:	9b01      	ldr	r3, [sp, #4]
 800c648:	4283      	cmp	r3, r0
 800c64a:	d148      	bne.n	800c6de <_malloc_r+0xea>
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	0028      	movs	r0, r5
 800c650:	1aff      	subs	r7, r7, r3
 800c652:	0039      	movs	r1, r7
 800c654:	f7ff ffac 	bl	800c5b0 <sbrk_aligned>
 800c658:	3001      	adds	r0, #1
 800c65a:	d040      	beq.n	800c6de <_malloc_r+0xea>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	19db      	adds	r3, r3, r7
 800c660:	6023      	str	r3, [r4, #0]
 800c662:	6833      	ldr	r3, [r6, #0]
 800c664:	685a      	ldr	r2, [r3, #4]
 800c666:	2a00      	cmp	r2, #0
 800c668:	d133      	bne.n	800c6d2 <_malloc_r+0xde>
 800c66a:	9b00      	ldr	r3, [sp, #0]
 800c66c:	6033      	str	r3, [r6, #0]
 800c66e:	e019      	b.n	800c6a4 <_malloc_r+0xb0>
 800c670:	2b00      	cmp	r3, #0
 800c672:	dac9      	bge.n	800c608 <_malloc_r+0x14>
 800c674:	230c      	movs	r3, #12
 800c676:	602b      	str	r3, [r5, #0]
 800c678:	2000      	movs	r0, #0
 800c67a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c67c:	6821      	ldr	r1, [r4, #0]
 800c67e:	1bc9      	subs	r1, r1, r7
 800c680:	d420      	bmi.n	800c6c4 <_malloc_r+0xd0>
 800c682:	290b      	cmp	r1, #11
 800c684:	d90a      	bls.n	800c69c <_malloc_r+0xa8>
 800c686:	19e2      	adds	r2, r4, r7
 800c688:	6027      	str	r7, [r4, #0]
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	d104      	bne.n	800c698 <_malloc_r+0xa4>
 800c68e:	6032      	str	r2, [r6, #0]
 800c690:	6863      	ldr	r3, [r4, #4]
 800c692:	6011      	str	r1, [r2, #0]
 800c694:	6053      	str	r3, [r2, #4]
 800c696:	e005      	b.n	800c6a4 <_malloc_r+0xb0>
 800c698:	605a      	str	r2, [r3, #4]
 800c69a:	e7f9      	b.n	800c690 <_malloc_r+0x9c>
 800c69c:	6862      	ldr	r2, [r4, #4]
 800c69e:	42a3      	cmp	r3, r4
 800c6a0:	d10e      	bne.n	800c6c0 <_malloc_r+0xcc>
 800c6a2:	6032      	str	r2, [r6, #0]
 800c6a4:	0028      	movs	r0, r5
 800c6a6:	f000 f82d 	bl	800c704 <__malloc_unlock>
 800c6aa:	0020      	movs	r0, r4
 800c6ac:	2207      	movs	r2, #7
 800c6ae:	300b      	adds	r0, #11
 800c6b0:	1d23      	adds	r3, r4, #4
 800c6b2:	4390      	bics	r0, r2
 800c6b4:	1ac2      	subs	r2, r0, r3
 800c6b6:	4298      	cmp	r0, r3
 800c6b8:	d0df      	beq.n	800c67a <_malloc_r+0x86>
 800c6ba:	1a1b      	subs	r3, r3, r0
 800c6bc:	50a3      	str	r3, [r4, r2]
 800c6be:	e7dc      	b.n	800c67a <_malloc_r+0x86>
 800c6c0:	605a      	str	r2, [r3, #4]
 800c6c2:	e7ef      	b.n	800c6a4 <_malloc_r+0xb0>
 800c6c4:	0023      	movs	r3, r4
 800c6c6:	6864      	ldr	r4, [r4, #4]
 800c6c8:	e7a6      	b.n	800c618 <_malloc_r+0x24>
 800c6ca:	9c00      	ldr	r4, [sp, #0]
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	e7ad      	b.n	800c62e <_malloc_r+0x3a>
 800c6d2:	001a      	movs	r2, r3
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	42a3      	cmp	r3, r4
 800c6d8:	d1fb      	bne.n	800c6d2 <_malloc_r+0xde>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e7da      	b.n	800c694 <_malloc_r+0xa0>
 800c6de:	230c      	movs	r3, #12
 800c6e0:	0028      	movs	r0, r5
 800c6e2:	602b      	str	r3, [r5, #0]
 800c6e4:	f000 f80e 	bl	800c704 <__malloc_unlock>
 800c6e8:	e7c6      	b.n	800c678 <_malloc_r+0x84>
 800c6ea:	6007      	str	r7, [r0, #0]
 800c6ec:	e7da      	b.n	800c6a4 <_malloc_r+0xb0>
 800c6ee:	46c0      	nop			@ (mov r8, r8)
 800c6f0:	200010d4 	.word	0x200010d4

0800c6f4 <__malloc_lock>:
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	4802      	ldr	r0, [pc, #8]	@ (800c700 <__malloc_lock+0xc>)
 800c6f8:	f7ff ff04 	bl	800c504 <__retarget_lock_acquire_recursive>
 800c6fc:	bd10      	pop	{r4, pc}
 800c6fe:	46c0      	nop			@ (mov r8, r8)
 800c700:	200010cc 	.word	0x200010cc

0800c704 <__malloc_unlock>:
 800c704:	b510      	push	{r4, lr}
 800c706:	4802      	ldr	r0, [pc, #8]	@ (800c710 <__malloc_unlock+0xc>)
 800c708:	f7ff fefd 	bl	800c506 <__retarget_lock_release_recursive>
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	46c0      	nop			@ (mov r8, r8)
 800c710:	200010cc 	.word	0x200010cc

0800c714 <__ssputs_r>:
 800c714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c716:	688e      	ldr	r6, [r1, #8]
 800c718:	b085      	sub	sp, #20
 800c71a:	001f      	movs	r7, r3
 800c71c:	000c      	movs	r4, r1
 800c71e:	680b      	ldr	r3, [r1, #0]
 800c720:	9002      	str	r0, [sp, #8]
 800c722:	9203      	str	r2, [sp, #12]
 800c724:	42be      	cmp	r6, r7
 800c726:	d830      	bhi.n	800c78a <__ssputs_r+0x76>
 800c728:	210c      	movs	r1, #12
 800c72a:	5e62      	ldrsh	r2, [r4, r1]
 800c72c:	2190      	movs	r1, #144	@ 0x90
 800c72e:	00c9      	lsls	r1, r1, #3
 800c730:	420a      	tst	r2, r1
 800c732:	d028      	beq.n	800c786 <__ssputs_r+0x72>
 800c734:	2003      	movs	r0, #3
 800c736:	6921      	ldr	r1, [r4, #16]
 800c738:	1a5b      	subs	r3, r3, r1
 800c73a:	9301      	str	r3, [sp, #4]
 800c73c:	6963      	ldr	r3, [r4, #20]
 800c73e:	4343      	muls	r3, r0
 800c740:	9801      	ldr	r0, [sp, #4]
 800c742:	0fdd      	lsrs	r5, r3, #31
 800c744:	18ed      	adds	r5, r5, r3
 800c746:	1c7b      	adds	r3, r7, #1
 800c748:	181b      	adds	r3, r3, r0
 800c74a:	106d      	asrs	r5, r5, #1
 800c74c:	42ab      	cmp	r3, r5
 800c74e:	d900      	bls.n	800c752 <__ssputs_r+0x3e>
 800c750:	001d      	movs	r5, r3
 800c752:	0552      	lsls	r2, r2, #21
 800c754:	d528      	bpl.n	800c7a8 <__ssputs_r+0x94>
 800c756:	0029      	movs	r1, r5
 800c758:	9802      	ldr	r0, [sp, #8]
 800c75a:	f7ff ff4b 	bl	800c5f4 <_malloc_r>
 800c75e:	1e06      	subs	r6, r0, #0
 800c760:	d02c      	beq.n	800c7bc <__ssputs_r+0xa8>
 800c762:	9a01      	ldr	r2, [sp, #4]
 800c764:	6921      	ldr	r1, [r4, #16]
 800c766:	f7ff fecf 	bl	800c508 <memcpy>
 800c76a:	89a2      	ldrh	r2, [r4, #12]
 800c76c:	4b18      	ldr	r3, [pc, #96]	@ (800c7d0 <__ssputs_r+0xbc>)
 800c76e:	401a      	ands	r2, r3
 800c770:	2380      	movs	r3, #128	@ 0x80
 800c772:	4313      	orrs	r3, r2
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	9b01      	ldr	r3, [sp, #4]
 800c778:	6126      	str	r6, [r4, #16]
 800c77a:	18f6      	adds	r6, r6, r3
 800c77c:	6026      	str	r6, [r4, #0]
 800c77e:	003e      	movs	r6, r7
 800c780:	6165      	str	r5, [r4, #20]
 800c782:	1aed      	subs	r5, r5, r3
 800c784:	60a5      	str	r5, [r4, #8]
 800c786:	42be      	cmp	r6, r7
 800c788:	d900      	bls.n	800c78c <__ssputs_r+0x78>
 800c78a:	003e      	movs	r6, r7
 800c78c:	0032      	movs	r2, r6
 800c78e:	9903      	ldr	r1, [sp, #12]
 800c790:	6820      	ldr	r0, [r4, #0]
 800c792:	f000 fa99 	bl	800ccc8 <memmove>
 800c796:	2000      	movs	r0, #0
 800c798:	68a3      	ldr	r3, [r4, #8]
 800c79a:	1b9b      	subs	r3, r3, r6
 800c79c:	60a3      	str	r3, [r4, #8]
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	199b      	adds	r3, r3, r6
 800c7a2:	6023      	str	r3, [r4, #0]
 800c7a4:	b005      	add	sp, #20
 800c7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a8:	002a      	movs	r2, r5
 800c7aa:	9802      	ldr	r0, [sp, #8]
 800c7ac:	f000 fabb 	bl	800cd26 <_realloc_r>
 800c7b0:	1e06      	subs	r6, r0, #0
 800c7b2:	d1e0      	bne.n	800c776 <__ssputs_r+0x62>
 800c7b4:	6921      	ldr	r1, [r4, #16]
 800c7b6:	9802      	ldr	r0, [sp, #8]
 800c7b8:	f7ff feb0 	bl	800c51c <_free_r>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	2001      	movs	r0, #1
 800c7c0:	9a02      	ldr	r2, [sp, #8]
 800c7c2:	4240      	negs	r0, r0
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	89a2      	ldrh	r2, [r4, #12]
 800c7c8:	3334      	adds	r3, #52	@ 0x34
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	e7e9      	b.n	800c7a4 <__ssputs_r+0x90>
 800c7d0:	fffffb7f 	.word	0xfffffb7f

0800c7d4 <_svfiprintf_r>:
 800c7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7d6:	b0a1      	sub	sp, #132	@ 0x84
 800c7d8:	9003      	str	r0, [sp, #12]
 800c7da:	001d      	movs	r5, r3
 800c7dc:	898b      	ldrh	r3, [r1, #12]
 800c7de:	000f      	movs	r7, r1
 800c7e0:	0016      	movs	r6, r2
 800c7e2:	061b      	lsls	r3, r3, #24
 800c7e4:	d511      	bpl.n	800c80a <_svfiprintf_r+0x36>
 800c7e6:	690b      	ldr	r3, [r1, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10e      	bne.n	800c80a <_svfiprintf_r+0x36>
 800c7ec:	2140      	movs	r1, #64	@ 0x40
 800c7ee:	f7ff ff01 	bl	800c5f4 <_malloc_r>
 800c7f2:	6038      	str	r0, [r7, #0]
 800c7f4:	6138      	str	r0, [r7, #16]
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d105      	bne.n	800c806 <_svfiprintf_r+0x32>
 800c7fa:	230c      	movs	r3, #12
 800c7fc:	9a03      	ldr	r2, [sp, #12]
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	2001      	movs	r0, #1
 800c802:	4240      	negs	r0, r0
 800c804:	e0cf      	b.n	800c9a6 <_svfiprintf_r+0x1d2>
 800c806:	2340      	movs	r3, #64	@ 0x40
 800c808:	617b      	str	r3, [r7, #20]
 800c80a:	2300      	movs	r3, #0
 800c80c:	ac08      	add	r4, sp, #32
 800c80e:	6163      	str	r3, [r4, #20]
 800c810:	3320      	adds	r3, #32
 800c812:	7663      	strb	r3, [r4, #25]
 800c814:	3310      	adds	r3, #16
 800c816:	76a3      	strb	r3, [r4, #26]
 800c818:	9507      	str	r5, [sp, #28]
 800c81a:	0035      	movs	r5, r6
 800c81c:	782b      	ldrb	r3, [r5, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d001      	beq.n	800c826 <_svfiprintf_r+0x52>
 800c822:	2b25      	cmp	r3, #37	@ 0x25
 800c824:	d148      	bne.n	800c8b8 <_svfiprintf_r+0xe4>
 800c826:	1bab      	subs	r3, r5, r6
 800c828:	9305      	str	r3, [sp, #20]
 800c82a:	42b5      	cmp	r5, r6
 800c82c:	d00b      	beq.n	800c846 <_svfiprintf_r+0x72>
 800c82e:	0032      	movs	r2, r6
 800c830:	0039      	movs	r1, r7
 800c832:	9803      	ldr	r0, [sp, #12]
 800c834:	f7ff ff6e 	bl	800c714 <__ssputs_r>
 800c838:	3001      	adds	r0, #1
 800c83a:	d100      	bne.n	800c83e <_svfiprintf_r+0x6a>
 800c83c:	e0ae      	b.n	800c99c <_svfiprintf_r+0x1c8>
 800c83e:	6963      	ldr	r3, [r4, #20]
 800c840:	9a05      	ldr	r2, [sp, #20]
 800c842:	189b      	adds	r3, r3, r2
 800c844:	6163      	str	r3, [r4, #20]
 800c846:	782b      	ldrb	r3, [r5, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d100      	bne.n	800c84e <_svfiprintf_r+0x7a>
 800c84c:	e0a6      	b.n	800c99c <_svfiprintf_r+0x1c8>
 800c84e:	2201      	movs	r2, #1
 800c850:	2300      	movs	r3, #0
 800c852:	4252      	negs	r2, r2
 800c854:	6062      	str	r2, [r4, #4]
 800c856:	a904      	add	r1, sp, #16
 800c858:	3254      	adds	r2, #84	@ 0x54
 800c85a:	1852      	adds	r2, r2, r1
 800c85c:	1c6e      	adds	r6, r5, #1
 800c85e:	6023      	str	r3, [r4, #0]
 800c860:	60e3      	str	r3, [r4, #12]
 800c862:	60a3      	str	r3, [r4, #8]
 800c864:	7013      	strb	r3, [r2, #0]
 800c866:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c868:	4b54      	ldr	r3, [pc, #336]	@ (800c9bc <_svfiprintf_r+0x1e8>)
 800c86a:	2205      	movs	r2, #5
 800c86c:	0018      	movs	r0, r3
 800c86e:	7831      	ldrb	r1, [r6, #0]
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	f000 fa4d 	bl	800cd10 <memchr>
 800c876:	1c75      	adds	r5, r6, #1
 800c878:	2800      	cmp	r0, #0
 800c87a:	d11f      	bne.n	800c8bc <_svfiprintf_r+0xe8>
 800c87c:	6822      	ldr	r2, [r4, #0]
 800c87e:	06d3      	lsls	r3, r2, #27
 800c880:	d504      	bpl.n	800c88c <_svfiprintf_r+0xb8>
 800c882:	2353      	movs	r3, #83	@ 0x53
 800c884:	a904      	add	r1, sp, #16
 800c886:	185b      	adds	r3, r3, r1
 800c888:	2120      	movs	r1, #32
 800c88a:	7019      	strb	r1, [r3, #0]
 800c88c:	0713      	lsls	r3, r2, #28
 800c88e:	d504      	bpl.n	800c89a <_svfiprintf_r+0xc6>
 800c890:	2353      	movs	r3, #83	@ 0x53
 800c892:	a904      	add	r1, sp, #16
 800c894:	185b      	adds	r3, r3, r1
 800c896:	212b      	movs	r1, #43	@ 0x2b
 800c898:	7019      	strb	r1, [r3, #0]
 800c89a:	7833      	ldrb	r3, [r6, #0]
 800c89c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c89e:	d016      	beq.n	800c8ce <_svfiprintf_r+0xfa>
 800c8a0:	0035      	movs	r5, r6
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	200a      	movs	r0, #10
 800c8a6:	68e3      	ldr	r3, [r4, #12]
 800c8a8:	782a      	ldrb	r2, [r5, #0]
 800c8aa:	1c6e      	adds	r6, r5, #1
 800c8ac:	3a30      	subs	r2, #48	@ 0x30
 800c8ae:	2a09      	cmp	r2, #9
 800c8b0:	d950      	bls.n	800c954 <_svfiprintf_r+0x180>
 800c8b2:	2900      	cmp	r1, #0
 800c8b4:	d111      	bne.n	800c8da <_svfiprintf_r+0x106>
 800c8b6:	e017      	b.n	800c8e8 <_svfiprintf_r+0x114>
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	e7af      	b.n	800c81c <_svfiprintf_r+0x48>
 800c8bc:	9b05      	ldr	r3, [sp, #20]
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	1ac0      	subs	r0, r0, r3
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	4083      	lsls	r3, r0
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	002e      	movs	r6, r5
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	e7cc      	b.n	800c868 <_svfiprintf_r+0x94>
 800c8ce:	9b07      	ldr	r3, [sp, #28]
 800c8d0:	1d19      	adds	r1, r3, #4
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	9107      	str	r1, [sp, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	db01      	blt.n	800c8de <_svfiprintf_r+0x10a>
 800c8da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8dc:	e004      	b.n	800c8e8 <_svfiprintf_r+0x114>
 800c8de:	425b      	negs	r3, r3
 800c8e0:	60e3      	str	r3, [r4, #12]
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	6023      	str	r3, [r4, #0]
 800c8e8:	782b      	ldrb	r3, [r5, #0]
 800c8ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8ec:	d10c      	bne.n	800c908 <_svfiprintf_r+0x134>
 800c8ee:	786b      	ldrb	r3, [r5, #1]
 800c8f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8f2:	d134      	bne.n	800c95e <_svfiprintf_r+0x18a>
 800c8f4:	9b07      	ldr	r3, [sp, #28]
 800c8f6:	3502      	adds	r5, #2
 800c8f8:	1d1a      	adds	r2, r3, #4
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	9207      	str	r2, [sp, #28]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	da01      	bge.n	800c906 <_svfiprintf_r+0x132>
 800c902:	2301      	movs	r3, #1
 800c904:	425b      	negs	r3, r3
 800c906:	9309      	str	r3, [sp, #36]	@ 0x24
 800c908:	4e2d      	ldr	r6, [pc, #180]	@ (800c9c0 <_svfiprintf_r+0x1ec>)
 800c90a:	2203      	movs	r2, #3
 800c90c:	0030      	movs	r0, r6
 800c90e:	7829      	ldrb	r1, [r5, #0]
 800c910:	f000 f9fe 	bl	800cd10 <memchr>
 800c914:	2800      	cmp	r0, #0
 800c916:	d006      	beq.n	800c926 <_svfiprintf_r+0x152>
 800c918:	2340      	movs	r3, #64	@ 0x40
 800c91a:	1b80      	subs	r0, r0, r6
 800c91c:	4083      	lsls	r3, r0
 800c91e:	6822      	ldr	r2, [r4, #0]
 800c920:	3501      	adds	r5, #1
 800c922:	4313      	orrs	r3, r2
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	7829      	ldrb	r1, [r5, #0]
 800c928:	2206      	movs	r2, #6
 800c92a:	4826      	ldr	r0, [pc, #152]	@ (800c9c4 <_svfiprintf_r+0x1f0>)
 800c92c:	1c6e      	adds	r6, r5, #1
 800c92e:	7621      	strb	r1, [r4, #24]
 800c930:	f000 f9ee 	bl	800cd10 <memchr>
 800c934:	2800      	cmp	r0, #0
 800c936:	d038      	beq.n	800c9aa <_svfiprintf_r+0x1d6>
 800c938:	4b23      	ldr	r3, [pc, #140]	@ (800c9c8 <_svfiprintf_r+0x1f4>)
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d122      	bne.n	800c984 <_svfiprintf_r+0x1b0>
 800c93e:	2207      	movs	r2, #7
 800c940:	9b07      	ldr	r3, [sp, #28]
 800c942:	3307      	adds	r3, #7
 800c944:	4393      	bics	r3, r2
 800c946:	3308      	adds	r3, #8
 800c948:	9307      	str	r3, [sp, #28]
 800c94a:	6963      	ldr	r3, [r4, #20]
 800c94c:	9a04      	ldr	r2, [sp, #16]
 800c94e:	189b      	adds	r3, r3, r2
 800c950:	6163      	str	r3, [r4, #20]
 800c952:	e762      	b.n	800c81a <_svfiprintf_r+0x46>
 800c954:	4343      	muls	r3, r0
 800c956:	0035      	movs	r5, r6
 800c958:	2101      	movs	r1, #1
 800c95a:	189b      	adds	r3, r3, r2
 800c95c:	e7a4      	b.n	800c8a8 <_svfiprintf_r+0xd4>
 800c95e:	2300      	movs	r3, #0
 800c960:	200a      	movs	r0, #10
 800c962:	0019      	movs	r1, r3
 800c964:	3501      	adds	r5, #1
 800c966:	6063      	str	r3, [r4, #4]
 800c968:	782a      	ldrb	r2, [r5, #0]
 800c96a:	1c6e      	adds	r6, r5, #1
 800c96c:	3a30      	subs	r2, #48	@ 0x30
 800c96e:	2a09      	cmp	r2, #9
 800c970:	d903      	bls.n	800c97a <_svfiprintf_r+0x1a6>
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0c8      	beq.n	800c908 <_svfiprintf_r+0x134>
 800c976:	9109      	str	r1, [sp, #36]	@ 0x24
 800c978:	e7c6      	b.n	800c908 <_svfiprintf_r+0x134>
 800c97a:	4341      	muls	r1, r0
 800c97c:	0035      	movs	r5, r6
 800c97e:	2301      	movs	r3, #1
 800c980:	1889      	adds	r1, r1, r2
 800c982:	e7f1      	b.n	800c968 <_svfiprintf_r+0x194>
 800c984:	aa07      	add	r2, sp, #28
 800c986:	9200      	str	r2, [sp, #0]
 800c988:	0021      	movs	r1, r4
 800c98a:	003a      	movs	r2, r7
 800c98c:	4b0f      	ldr	r3, [pc, #60]	@ (800c9cc <_svfiprintf_r+0x1f8>)
 800c98e:	9803      	ldr	r0, [sp, #12]
 800c990:	e000      	b.n	800c994 <_svfiprintf_r+0x1c0>
 800c992:	bf00      	nop
 800c994:	9004      	str	r0, [sp, #16]
 800c996:	9b04      	ldr	r3, [sp, #16]
 800c998:	3301      	adds	r3, #1
 800c99a:	d1d6      	bne.n	800c94a <_svfiprintf_r+0x176>
 800c99c:	89bb      	ldrh	r3, [r7, #12]
 800c99e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c9a0:	065b      	lsls	r3, r3, #25
 800c9a2:	d500      	bpl.n	800c9a6 <_svfiprintf_r+0x1d2>
 800c9a4:	e72c      	b.n	800c800 <_svfiprintf_r+0x2c>
 800c9a6:	b021      	add	sp, #132	@ 0x84
 800c9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9aa:	aa07      	add	r2, sp, #28
 800c9ac:	9200      	str	r2, [sp, #0]
 800c9ae:	0021      	movs	r1, r4
 800c9b0:	003a      	movs	r2, r7
 800c9b2:	4b06      	ldr	r3, [pc, #24]	@ (800c9cc <_svfiprintf_r+0x1f8>)
 800c9b4:	9803      	ldr	r0, [sp, #12]
 800c9b6:	f000 f87b 	bl	800cab0 <_printf_i>
 800c9ba:	e7eb      	b.n	800c994 <_svfiprintf_r+0x1c0>
 800c9bc:	0800db15 	.word	0x0800db15
 800c9c0:	0800db1b 	.word	0x0800db1b
 800c9c4:	0800db1f 	.word	0x0800db1f
 800c9c8:	00000000 	.word	0x00000000
 800c9cc:	0800c715 	.word	0x0800c715

0800c9d0 <_printf_common>:
 800c9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9d2:	0016      	movs	r6, r2
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	688a      	ldr	r2, [r1, #8]
 800c9d8:	690b      	ldr	r3, [r1, #16]
 800c9da:	000c      	movs	r4, r1
 800c9dc:	9000      	str	r0, [sp, #0]
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	da00      	bge.n	800c9e4 <_printf_common+0x14>
 800c9e2:	0013      	movs	r3, r2
 800c9e4:	0022      	movs	r2, r4
 800c9e6:	6033      	str	r3, [r6, #0]
 800c9e8:	3243      	adds	r2, #67	@ 0x43
 800c9ea:	7812      	ldrb	r2, [r2, #0]
 800c9ec:	2a00      	cmp	r2, #0
 800c9ee:	d001      	beq.n	800c9f4 <_printf_common+0x24>
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	6033      	str	r3, [r6, #0]
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	069b      	lsls	r3, r3, #26
 800c9f8:	d502      	bpl.n	800ca00 <_printf_common+0x30>
 800c9fa:	6833      	ldr	r3, [r6, #0]
 800c9fc:	3302      	adds	r3, #2
 800c9fe:	6033      	str	r3, [r6, #0]
 800ca00:	6822      	ldr	r2, [r4, #0]
 800ca02:	2306      	movs	r3, #6
 800ca04:	0015      	movs	r5, r2
 800ca06:	401d      	ands	r5, r3
 800ca08:	421a      	tst	r2, r3
 800ca0a:	d027      	beq.n	800ca5c <_printf_common+0x8c>
 800ca0c:	0023      	movs	r3, r4
 800ca0e:	3343      	adds	r3, #67	@ 0x43
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	1e5a      	subs	r2, r3, #1
 800ca14:	4193      	sbcs	r3, r2
 800ca16:	6822      	ldr	r2, [r4, #0]
 800ca18:	0692      	lsls	r2, r2, #26
 800ca1a:	d430      	bmi.n	800ca7e <_printf_common+0xae>
 800ca1c:	0022      	movs	r2, r4
 800ca1e:	9901      	ldr	r1, [sp, #4]
 800ca20:	9800      	ldr	r0, [sp, #0]
 800ca22:	9d08      	ldr	r5, [sp, #32]
 800ca24:	3243      	adds	r2, #67	@ 0x43
 800ca26:	47a8      	blx	r5
 800ca28:	3001      	adds	r0, #1
 800ca2a:	d025      	beq.n	800ca78 <_printf_common+0xa8>
 800ca2c:	2206      	movs	r2, #6
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	2500      	movs	r5, #0
 800ca32:	4013      	ands	r3, r2
 800ca34:	2b04      	cmp	r3, #4
 800ca36:	d105      	bne.n	800ca44 <_printf_common+0x74>
 800ca38:	6833      	ldr	r3, [r6, #0]
 800ca3a:	68e5      	ldr	r5, [r4, #12]
 800ca3c:	1aed      	subs	r5, r5, r3
 800ca3e:	43eb      	mvns	r3, r5
 800ca40:	17db      	asrs	r3, r3, #31
 800ca42:	401d      	ands	r5, r3
 800ca44:	68a3      	ldr	r3, [r4, #8]
 800ca46:	6922      	ldr	r2, [r4, #16]
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	dd01      	ble.n	800ca50 <_printf_common+0x80>
 800ca4c:	1a9b      	subs	r3, r3, r2
 800ca4e:	18ed      	adds	r5, r5, r3
 800ca50:	2600      	movs	r6, #0
 800ca52:	42b5      	cmp	r5, r6
 800ca54:	d120      	bne.n	800ca98 <_printf_common+0xc8>
 800ca56:	2000      	movs	r0, #0
 800ca58:	e010      	b.n	800ca7c <_printf_common+0xac>
 800ca5a:	3501      	adds	r5, #1
 800ca5c:	68e3      	ldr	r3, [r4, #12]
 800ca5e:	6832      	ldr	r2, [r6, #0]
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	42ab      	cmp	r3, r5
 800ca64:	ddd2      	ble.n	800ca0c <_printf_common+0x3c>
 800ca66:	0022      	movs	r2, r4
 800ca68:	2301      	movs	r3, #1
 800ca6a:	9901      	ldr	r1, [sp, #4]
 800ca6c:	9800      	ldr	r0, [sp, #0]
 800ca6e:	9f08      	ldr	r7, [sp, #32]
 800ca70:	3219      	adds	r2, #25
 800ca72:	47b8      	blx	r7
 800ca74:	3001      	adds	r0, #1
 800ca76:	d1f0      	bne.n	800ca5a <_printf_common+0x8a>
 800ca78:	2001      	movs	r0, #1
 800ca7a:	4240      	negs	r0, r0
 800ca7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ca7e:	2030      	movs	r0, #48	@ 0x30
 800ca80:	18e1      	adds	r1, r4, r3
 800ca82:	3143      	adds	r1, #67	@ 0x43
 800ca84:	7008      	strb	r0, [r1, #0]
 800ca86:	0021      	movs	r1, r4
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	3145      	adds	r1, #69	@ 0x45
 800ca8c:	7809      	ldrb	r1, [r1, #0]
 800ca8e:	18a2      	adds	r2, r4, r2
 800ca90:	3243      	adds	r2, #67	@ 0x43
 800ca92:	3302      	adds	r3, #2
 800ca94:	7011      	strb	r1, [r2, #0]
 800ca96:	e7c1      	b.n	800ca1c <_printf_common+0x4c>
 800ca98:	0022      	movs	r2, r4
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	9901      	ldr	r1, [sp, #4]
 800ca9e:	9800      	ldr	r0, [sp, #0]
 800caa0:	9f08      	ldr	r7, [sp, #32]
 800caa2:	321a      	adds	r2, #26
 800caa4:	47b8      	blx	r7
 800caa6:	3001      	adds	r0, #1
 800caa8:	d0e6      	beq.n	800ca78 <_printf_common+0xa8>
 800caaa:	3601      	adds	r6, #1
 800caac:	e7d1      	b.n	800ca52 <_printf_common+0x82>
	...

0800cab0 <_printf_i>:
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	b08b      	sub	sp, #44	@ 0x2c
 800cab4:	9206      	str	r2, [sp, #24]
 800cab6:	000a      	movs	r2, r1
 800cab8:	3243      	adds	r2, #67	@ 0x43
 800caba:	9307      	str	r3, [sp, #28]
 800cabc:	9005      	str	r0, [sp, #20]
 800cabe:	9203      	str	r2, [sp, #12]
 800cac0:	7e0a      	ldrb	r2, [r1, #24]
 800cac2:	000c      	movs	r4, r1
 800cac4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cac6:	2a78      	cmp	r2, #120	@ 0x78
 800cac8:	d809      	bhi.n	800cade <_printf_i+0x2e>
 800caca:	2a62      	cmp	r2, #98	@ 0x62
 800cacc:	d80b      	bhi.n	800cae6 <_printf_i+0x36>
 800cace:	2a00      	cmp	r2, #0
 800cad0:	d100      	bne.n	800cad4 <_printf_i+0x24>
 800cad2:	e0ba      	b.n	800cc4a <_printf_i+0x19a>
 800cad4:	497a      	ldr	r1, [pc, #488]	@ (800ccc0 <_printf_i+0x210>)
 800cad6:	9104      	str	r1, [sp, #16]
 800cad8:	2a58      	cmp	r2, #88	@ 0x58
 800cada:	d100      	bne.n	800cade <_printf_i+0x2e>
 800cadc:	e08e      	b.n	800cbfc <_printf_i+0x14c>
 800cade:	0025      	movs	r5, r4
 800cae0:	3542      	adds	r5, #66	@ 0x42
 800cae2:	702a      	strb	r2, [r5, #0]
 800cae4:	e022      	b.n	800cb2c <_printf_i+0x7c>
 800cae6:	0010      	movs	r0, r2
 800cae8:	3863      	subs	r0, #99	@ 0x63
 800caea:	2815      	cmp	r0, #21
 800caec:	d8f7      	bhi.n	800cade <_printf_i+0x2e>
 800caee:	f7f3 fb13 	bl	8000118 <__gnu_thumb1_case_shi>
 800caf2:	0016      	.short	0x0016
 800caf4:	fff6001f 	.word	0xfff6001f
 800caf8:	fff6fff6 	.word	0xfff6fff6
 800cafc:	001ffff6 	.word	0x001ffff6
 800cb00:	fff6fff6 	.word	0xfff6fff6
 800cb04:	fff6fff6 	.word	0xfff6fff6
 800cb08:	0036009f 	.word	0x0036009f
 800cb0c:	fff6007e 	.word	0xfff6007e
 800cb10:	00b0fff6 	.word	0x00b0fff6
 800cb14:	0036fff6 	.word	0x0036fff6
 800cb18:	fff6fff6 	.word	0xfff6fff6
 800cb1c:	0082      	.short	0x0082
 800cb1e:	0025      	movs	r5, r4
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	3542      	adds	r5, #66	@ 0x42
 800cb24:	1d11      	adds	r1, r2, #4
 800cb26:	6019      	str	r1, [r3, #0]
 800cb28:	6813      	ldr	r3, [r2, #0]
 800cb2a:	702b      	strb	r3, [r5, #0]
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e09e      	b.n	800cc6e <_printf_i+0x1be>
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	6809      	ldr	r1, [r1, #0]
 800cb34:	1d02      	adds	r2, r0, #4
 800cb36:	060d      	lsls	r5, r1, #24
 800cb38:	d50b      	bpl.n	800cb52 <_printf_i+0xa2>
 800cb3a:	6806      	ldr	r6, [r0, #0]
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	2e00      	cmp	r6, #0
 800cb40:	da03      	bge.n	800cb4a <_printf_i+0x9a>
 800cb42:	232d      	movs	r3, #45	@ 0x2d
 800cb44:	9a03      	ldr	r2, [sp, #12]
 800cb46:	4276      	negs	r6, r6
 800cb48:	7013      	strb	r3, [r2, #0]
 800cb4a:	4b5d      	ldr	r3, [pc, #372]	@ (800ccc0 <_printf_i+0x210>)
 800cb4c:	270a      	movs	r7, #10
 800cb4e:	9304      	str	r3, [sp, #16]
 800cb50:	e018      	b.n	800cb84 <_printf_i+0xd4>
 800cb52:	6806      	ldr	r6, [r0, #0]
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	0649      	lsls	r1, r1, #25
 800cb58:	d5f1      	bpl.n	800cb3e <_printf_i+0x8e>
 800cb5a:	b236      	sxth	r6, r6
 800cb5c:	e7ef      	b.n	800cb3e <_printf_i+0x8e>
 800cb5e:	6808      	ldr	r0, [r1, #0]
 800cb60:	6819      	ldr	r1, [r3, #0]
 800cb62:	c940      	ldmia	r1!, {r6}
 800cb64:	0605      	lsls	r5, r0, #24
 800cb66:	d402      	bmi.n	800cb6e <_printf_i+0xbe>
 800cb68:	0640      	lsls	r0, r0, #25
 800cb6a:	d500      	bpl.n	800cb6e <_printf_i+0xbe>
 800cb6c:	b2b6      	uxth	r6, r6
 800cb6e:	6019      	str	r1, [r3, #0]
 800cb70:	4b53      	ldr	r3, [pc, #332]	@ (800ccc0 <_printf_i+0x210>)
 800cb72:	270a      	movs	r7, #10
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	2a6f      	cmp	r2, #111	@ 0x6f
 800cb78:	d100      	bne.n	800cb7c <_printf_i+0xcc>
 800cb7a:	3f02      	subs	r7, #2
 800cb7c:	0023      	movs	r3, r4
 800cb7e:	2200      	movs	r2, #0
 800cb80:	3343      	adds	r3, #67	@ 0x43
 800cb82:	701a      	strb	r2, [r3, #0]
 800cb84:	6863      	ldr	r3, [r4, #4]
 800cb86:	60a3      	str	r3, [r4, #8]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	db06      	blt.n	800cb9a <_printf_i+0xea>
 800cb8c:	2104      	movs	r1, #4
 800cb8e:	6822      	ldr	r2, [r4, #0]
 800cb90:	9d03      	ldr	r5, [sp, #12]
 800cb92:	438a      	bics	r2, r1
 800cb94:	6022      	str	r2, [r4, #0]
 800cb96:	4333      	orrs	r3, r6
 800cb98:	d00c      	beq.n	800cbb4 <_printf_i+0x104>
 800cb9a:	9d03      	ldr	r5, [sp, #12]
 800cb9c:	0030      	movs	r0, r6
 800cb9e:	0039      	movs	r1, r7
 800cba0:	f7f3 fb4a 	bl	8000238 <__aeabi_uidivmod>
 800cba4:	9b04      	ldr	r3, [sp, #16]
 800cba6:	3d01      	subs	r5, #1
 800cba8:	5c5b      	ldrb	r3, [r3, r1]
 800cbaa:	702b      	strb	r3, [r5, #0]
 800cbac:	0033      	movs	r3, r6
 800cbae:	0006      	movs	r6, r0
 800cbb0:	429f      	cmp	r7, r3
 800cbb2:	d9f3      	bls.n	800cb9c <_printf_i+0xec>
 800cbb4:	2f08      	cmp	r7, #8
 800cbb6:	d109      	bne.n	800cbcc <_printf_i+0x11c>
 800cbb8:	6823      	ldr	r3, [r4, #0]
 800cbba:	07db      	lsls	r3, r3, #31
 800cbbc:	d506      	bpl.n	800cbcc <_printf_i+0x11c>
 800cbbe:	6862      	ldr	r2, [r4, #4]
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	dc02      	bgt.n	800cbcc <_printf_i+0x11c>
 800cbc6:	2330      	movs	r3, #48	@ 0x30
 800cbc8:	3d01      	subs	r5, #1
 800cbca:	702b      	strb	r3, [r5, #0]
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	1b5b      	subs	r3, r3, r5
 800cbd0:	6123      	str	r3, [r4, #16]
 800cbd2:	9b07      	ldr	r3, [sp, #28]
 800cbd4:	0021      	movs	r1, r4
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	9805      	ldr	r0, [sp, #20]
 800cbda:	9b06      	ldr	r3, [sp, #24]
 800cbdc:	aa09      	add	r2, sp, #36	@ 0x24
 800cbde:	f7ff fef7 	bl	800c9d0 <_printf_common>
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	d148      	bne.n	800cc78 <_printf_i+0x1c8>
 800cbe6:	2001      	movs	r0, #1
 800cbe8:	4240      	negs	r0, r0
 800cbea:	b00b      	add	sp, #44	@ 0x2c
 800cbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbee:	2220      	movs	r2, #32
 800cbf0:	6809      	ldr	r1, [r1, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	6022      	str	r2, [r4, #0]
 800cbf6:	2278      	movs	r2, #120	@ 0x78
 800cbf8:	4932      	ldr	r1, [pc, #200]	@ (800ccc4 <_printf_i+0x214>)
 800cbfa:	9104      	str	r1, [sp, #16]
 800cbfc:	0021      	movs	r1, r4
 800cbfe:	3145      	adds	r1, #69	@ 0x45
 800cc00:	700a      	strb	r2, [r1, #0]
 800cc02:	6819      	ldr	r1, [r3, #0]
 800cc04:	6822      	ldr	r2, [r4, #0]
 800cc06:	c940      	ldmia	r1!, {r6}
 800cc08:	0610      	lsls	r0, r2, #24
 800cc0a:	d402      	bmi.n	800cc12 <_printf_i+0x162>
 800cc0c:	0650      	lsls	r0, r2, #25
 800cc0e:	d500      	bpl.n	800cc12 <_printf_i+0x162>
 800cc10:	b2b6      	uxth	r6, r6
 800cc12:	6019      	str	r1, [r3, #0]
 800cc14:	07d3      	lsls	r3, r2, #31
 800cc16:	d502      	bpl.n	800cc1e <_printf_i+0x16e>
 800cc18:	2320      	movs	r3, #32
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	d001      	beq.n	800cc26 <_printf_i+0x176>
 800cc22:	2710      	movs	r7, #16
 800cc24:	e7aa      	b.n	800cb7c <_printf_i+0xcc>
 800cc26:	2220      	movs	r2, #32
 800cc28:	6823      	ldr	r3, [r4, #0]
 800cc2a:	4393      	bics	r3, r2
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	e7f8      	b.n	800cc22 <_printf_i+0x172>
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	680d      	ldr	r5, [r1, #0]
 800cc34:	1d10      	adds	r0, r2, #4
 800cc36:	6949      	ldr	r1, [r1, #20]
 800cc38:	6018      	str	r0, [r3, #0]
 800cc3a:	6813      	ldr	r3, [r2, #0]
 800cc3c:	062e      	lsls	r6, r5, #24
 800cc3e:	d501      	bpl.n	800cc44 <_printf_i+0x194>
 800cc40:	6019      	str	r1, [r3, #0]
 800cc42:	e002      	b.n	800cc4a <_printf_i+0x19a>
 800cc44:	066d      	lsls	r5, r5, #25
 800cc46:	d5fb      	bpl.n	800cc40 <_printf_i+0x190>
 800cc48:	8019      	strh	r1, [r3, #0]
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9d03      	ldr	r5, [sp, #12]
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	e7bf      	b.n	800cbd2 <_printf_i+0x122>
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	1d11      	adds	r1, r2, #4
 800cc56:	6019      	str	r1, [r3, #0]
 800cc58:	6815      	ldr	r5, [r2, #0]
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	0028      	movs	r0, r5
 800cc5e:	6862      	ldr	r2, [r4, #4]
 800cc60:	f000 f856 	bl	800cd10 <memchr>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d001      	beq.n	800cc6c <_printf_i+0x1bc>
 800cc68:	1b40      	subs	r0, r0, r5
 800cc6a:	6060      	str	r0, [r4, #4]
 800cc6c:	6863      	ldr	r3, [r4, #4]
 800cc6e:	6123      	str	r3, [r4, #16]
 800cc70:	2300      	movs	r3, #0
 800cc72:	9a03      	ldr	r2, [sp, #12]
 800cc74:	7013      	strb	r3, [r2, #0]
 800cc76:	e7ac      	b.n	800cbd2 <_printf_i+0x122>
 800cc78:	002a      	movs	r2, r5
 800cc7a:	6923      	ldr	r3, [r4, #16]
 800cc7c:	9906      	ldr	r1, [sp, #24]
 800cc7e:	9805      	ldr	r0, [sp, #20]
 800cc80:	9d07      	ldr	r5, [sp, #28]
 800cc82:	47a8      	blx	r5
 800cc84:	3001      	adds	r0, #1
 800cc86:	d0ae      	beq.n	800cbe6 <_printf_i+0x136>
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	079b      	lsls	r3, r3, #30
 800cc8c:	d415      	bmi.n	800ccba <_printf_i+0x20a>
 800cc8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc90:	68e0      	ldr	r0, [r4, #12]
 800cc92:	4298      	cmp	r0, r3
 800cc94:	daa9      	bge.n	800cbea <_printf_i+0x13a>
 800cc96:	0018      	movs	r0, r3
 800cc98:	e7a7      	b.n	800cbea <_printf_i+0x13a>
 800cc9a:	0022      	movs	r2, r4
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	9906      	ldr	r1, [sp, #24]
 800cca0:	9805      	ldr	r0, [sp, #20]
 800cca2:	9e07      	ldr	r6, [sp, #28]
 800cca4:	3219      	adds	r2, #25
 800cca6:	47b0      	blx	r6
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d09c      	beq.n	800cbe6 <_printf_i+0x136>
 800ccac:	3501      	adds	r5, #1
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccb2:	1a9b      	subs	r3, r3, r2
 800ccb4:	42ab      	cmp	r3, r5
 800ccb6:	dcf0      	bgt.n	800cc9a <_printf_i+0x1ea>
 800ccb8:	e7e9      	b.n	800cc8e <_printf_i+0x1de>
 800ccba:	2500      	movs	r5, #0
 800ccbc:	e7f7      	b.n	800ccae <_printf_i+0x1fe>
 800ccbe:	46c0      	nop			@ (mov r8, r8)
 800ccc0:	0800db26 	.word	0x0800db26
 800ccc4:	0800db37 	.word	0x0800db37

0800ccc8 <memmove>:
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	4288      	cmp	r0, r1
 800cccc:	d902      	bls.n	800ccd4 <memmove+0xc>
 800ccce:	188b      	adds	r3, r1, r2
 800ccd0:	4298      	cmp	r0, r3
 800ccd2:	d308      	bcc.n	800cce6 <memmove+0x1e>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d007      	beq.n	800ccea <memmove+0x22>
 800ccda:	5ccc      	ldrb	r4, [r1, r3]
 800ccdc:	54c4      	strb	r4, [r0, r3]
 800ccde:	3301      	adds	r3, #1
 800cce0:	e7f9      	b.n	800ccd6 <memmove+0xe>
 800cce2:	5c8b      	ldrb	r3, [r1, r2]
 800cce4:	5483      	strb	r3, [r0, r2]
 800cce6:	3a01      	subs	r2, #1
 800cce8:	d2fb      	bcs.n	800cce2 <memmove+0x1a>
 800ccea:	bd10      	pop	{r4, pc}

0800ccec <_sbrk_r>:
 800ccec:	2300      	movs	r3, #0
 800ccee:	b570      	push	{r4, r5, r6, lr}
 800ccf0:	4d06      	ldr	r5, [pc, #24]	@ (800cd0c <_sbrk_r+0x20>)
 800ccf2:	0004      	movs	r4, r0
 800ccf4:	0008      	movs	r0, r1
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	f7fa f8ce 	bl	8006e98 <_sbrk>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d103      	bne.n	800cd08 <_sbrk_r+0x1c>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d000      	beq.n	800cd08 <_sbrk_r+0x1c>
 800cd06:	6023      	str	r3, [r4, #0]
 800cd08:	bd70      	pop	{r4, r5, r6, pc}
 800cd0a:	46c0      	nop			@ (mov r8, r8)
 800cd0c:	200010c8 	.word	0x200010c8

0800cd10 <memchr>:
 800cd10:	b2c9      	uxtb	r1, r1
 800cd12:	1882      	adds	r2, r0, r2
 800cd14:	4290      	cmp	r0, r2
 800cd16:	d101      	bne.n	800cd1c <memchr+0xc>
 800cd18:	2000      	movs	r0, #0
 800cd1a:	4770      	bx	lr
 800cd1c:	7803      	ldrb	r3, [r0, #0]
 800cd1e:	428b      	cmp	r3, r1
 800cd20:	d0fb      	beq.n	800cd1a <memchr+0xa>
 800cd22:	3001      	adds	r0, #1
 800cd24:	e7f6      	b.n	800cd14 <memchr+0x4>

0800cd26 <_realloc_r>:
 800cd26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd28:	0006      	movs	r6, r0
 800cd2a:	000c      	movs	r4, r1
 800cd2c:	0015      	movs	r5, r2
 800cd2e:	2900      	cmp	r1, #0
 800cd30:	d105      	bne.n	800cd3e <_realloc_r+0x18>
 800cd32:	0011      	movs	r1, r2
 800cd34:	f7ff fc5e 	bl	800c5f4 <_malloc_r>
 800cd38:	0004      	movs	r4, r0
 800cd3a:	0020      	movs	r0, r4
 800cd3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd3e:	2a00      	cmp	r2, #0
 800cd40:	d103      	bne.n	800cd4a <_realloc_r+0x24>
 800cd42:	f7ff fbeb 	bl	800c51c <_free_r>
 800cd46:	002c      	movs	r4, r5
 800cd48:	e7f7      	b.n	800cd3a <_realloc_r+0x14>
 800cd4a:	f000 f81c 	bl	800cd86 <_malloc_usable_size_r>
 800cd4e:	0007      	movs	r7, r0
 800cd50:	4285      	cmp	r5, r0
 800cd52:	d802      	bhi.n	800cd5a <_realloc_r+0x34>
 800cd54:	0843      	lsrs	r3, r0, #1
 800cd56:	42ab      	cmp	r3, r5
 800cd58:	d3ef      	bcc.n	800cd3a <_realloc_r+0x14>
 800cd5a:	0029      	movs	r1, r5
 800cd5c:	0030      	movs	r0, r6
 800cd5e:	f7ff fc49 	bl	800c5f4 <_malloc_r>
 800cd62:	9001      	str	r0, [sp, #4]
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d101      	bne.n	800cd6c <_realloc_r+0x46>
 800cd68:	9c01      	ldr	r4, [sp, #4]
 800cd6a:	e7e6      	b.n	800cd3a <_realloc_r+0x14>
 800cd6c:	002a      	movs	r2, r5
 800cd6e:	42bd      	cmp	r5, r7
 800cd70:	d900      	bls.n	800cd74 <_realloc_r+0x4e>
 800cd72:	003a      	movs	r2, r7
 800cd74:	0021      	movs	r1, r4
 800cd76:	9801      	ldr	r0, [sp, #4]
 800cd78:	f7ff fbc6 	bl	800c508 <memcpy>
 800cd7c:	0021      	movs	r1, r4
 800cd7e:	0030      	movs	r0, r6
 800cd80:	f7ff fbcc 	bl	800c51c <_free_r>
 800cd84:	e7f0      	b.n	800cd68 <_realloc_r+0x42>

0800cd86 <_malloc_usable_size_r>:
 800cd86:	1f0b      	subs	r3, r1, #4
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	1f18      	subs	r0, r3, #4
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	da01      	bge.n	800cd94 <_malloc_usable_size_r+0xe>
 800cd90:	580b      	ldr	r3, [r1, r0]
 800cd92:	18c0      	adds	r0, r0, r3
 800cd94:	4770      	bx	lr

0800cd96 <sqrt>:
 800cd96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd98:	0004      	movs	r4, r0
 800cd9a:	000d      	movs	r5, r1
 800cd9c:	f000 f822 	bl	800cde4 <__ieee754_sqrt>
 800cda0:	0022      	movs	r2, r4
 800cda2:	0006      	movs	r6, r0
 800cda4:	000f      	movs	r7, r1
 800cda6:	002b      	movs	r3, r5
 800cda8:	0020      	movs	r0, r4
 800cdaa:	0029      	movs	r1, r5
 800cdac:	f7f6 fbf2 	bl	8003594 <__aeabi_dcmpun>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d113      	bne.n	800cddc <sqrt+0x46>
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	0020      	movs	r0, r4
 800cdba:	0029      	movs	r1, r5
 800cdbc:	f7f3 fb42 	bl	8000444 <__aeabi_dcmplt>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d00b      	beq.n	800cddc <sqrt+0x46>
 800cdc4:	f7ff fb74 	bl	800c4b0 <__errno>
 800cdc8:	2321      	movs	r3, #33	@ 0x21
 800cdca:	2200      	movs	r2, #0
 800cdcc:	6003      	str	r3, [r0, #0]
 800cdce:	2300      	movs	r3, #0
 800cdd0:	0010      	movs	r0, r2
 800cdd2:	0019      	movs	r1, r3
 800cdd4:	f7f5 f8b4 	bl	8001f40 <__aeabi_ddiv>
 800cdd8:	0006      	movs	r6, r0
 800cdda:	000f      	movs	r7, r1
 800cddc:	0030      	movs	r0, r6
 800cdde:	0039      	movs	r1, r7
 800cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cde4 <__ieee754_sqrt>:
 800cde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde6:	000a      	movs	r2, r1
 800cde8:	000d      	movs	r5, r1
 800cdea:	496b      	ldr	r1, [pc, #428]	@ (800cf98 <__ieee754_sqrt+0x1b4>)
 800cdec:	0004      	movs	r4, r0
 800cdee:	0003      	movs	r3, r0
 800cdf0:	0008      	movs	r0, r1
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	4028      	ands	r0, r5
 800cdf6:	4288      	cmp	r0, r1
 800cdf8:	d111      	bne.n	800ce1e <__ieee754_sqrt+0x3a>
 800cdfa:	0022      	movs	r2, r4
 800cdfc:	002b      	movs	r3, r5
 800cdfe:	0020      	movs	r0, r4
 800ce00:	0029      	movs	r1, r5
 800ce02:	f7f5 fcd7 	bl	80027b4 <__aeabi_dmul>
 800ce06:	0002      	movs	r2, r0
 800ce08:	000b      	movs	r3, r1
 800ce0a:	0020      	movs	r0, r4
 800ce0c:	0029      	movs	r1, r5
 800ce0e:	f7f4 fcd1 	bl	80017b4 <__aeabi_dadd>
 800ce12:	0004      	movs	r4, r0
 800ce14:	000d      	movs	r5, r1
 800ce16:	0020      	movs	r0, r4
 800ce18:	0029      	movs	r1, r5
 800ce1a:	b007      	add	sp, #28
 800ce1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	dc11      	bgt.n	800ce46 <__ieee754_sqrt+0x62>
 800ce22:	0069      	lsls	r1, r5, #1
 800ce24:	0849      	lsrs	r1, r1, #1
 800ce26:	4321      	orrs	r1, r4
 800ce28:	d0f5      	beq.n	800ce16 <__ieee754_sqrt+0x32>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	4285      	cmp	r5, r0
 800ce2e:	d010      	beq.n	800ce52 <__ieee754_sqrt+0x6e>
 800ce30:	0022      	movs	r2, r4
 800ce32:	002b      	movs	r3, r5
 800ce34:	0020      	movs	r0, r4
 800ce36:	0029      	movs	r1, r5
 800ce38:	f7f5 ffa2 	bl	8002d80 <__aeabi_dsub>
 800ce3c:	0002      	movs	r2, r0
 800ce3e:	000b      	movs	r3, r1
 800ce40:	f7f5 f87e 	bl	8001f40 <__aeabi_ddiv>
 800ce44:	e7e5      	b.n	800ce12 <__ieee754_sqrt+0x2e>
 800ce46:	1528      	asrs	r0, r5, #20
 800ce48:	d115      	bne.n	800ce76 <__ieee754_sqrt+0x92>
 800ce4a:	2480      	movs	r4, #128	@ 0x80
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	0364      	lsls	r4, r4, #13
 800ce50:	e007      	b.n	800ce62 <__ieee754_sqrt+0x7e>
 800ce52:	0ada      	lsrs	r2, r3, #11
 800ce54:	3815      	subs	r0, #21
 800ce56:	055b      	lsls	r3, r3, #21
 800ce58:	2a00      	cmp	r2, #0
 800ce5a:	d0fa      	beq.n	800ce52 <__ieee754_sqrt+0x6e>
 800ce5c:	e7f5      	b.n	800ce4a <__ieee754_sqrt+0x66>
 800ce5e:	0052      	lsls	r2, r2, #1
 800ce60:	3101      	adds	r1, #1
 800ce62:	4222      	tst	r2, r4
 800ce64:	d0fb      	beq.n	800ce5e <__ieee754_sqrt+0x7a>
 800ce66:	1e4c      	subs	r4, r1, #1
 800ce68:	1b00      	subs	r0, r0, r4
 800ce6a:	2420      	movs	r4, #32
 800ce6c:	001d      	movs	r5, r3
 800ce6e:	1a64      	subs	r4, r4, r1
 800ce70:	40e5      	lsrs	r5, r4
 800ce72:	408b      	lsls	r3, r1
 800ce74:	432a      	orrs	r2, r5
 800ce76:	4949      	ldr	r1, [pc, #292]	@ (800cf9c <__ieee754_sqrt+0x1b8>)
 800ce78:	0312      	lsls	r2, r2, #12
 800ce7a:	1844      	adds	r4, r0, r1
 800ce7c:	2180      	movs	r1, #128	@ 0x80
 800ce7e:	0b12      	lsrs	r2, r2, #12
 800ce80:	0349      	lsls	r1, r1, #13
 800ce82:	4311      	orrs	r1, r2
 800ce84:	07c0      	lsls	r0, r0, #31
 800ce86:	d403      	bmi.n	800ce90 <__ieee754_sqrt+0xac>
 800ce88:	0fda      	lsrs	r2, r3, #31
 800ce8a:	0049      	lsls	r1, r1, #1
 800ce8c:	1851      	adds	r1, r2, r1
 800ce8e:	005b      	lsls	r3, r3, #1
 800ce90:	2500      	movs	r5, #0
 800ce92:	1062      	asrs	r2, r4, #1
 800ce94:	0049      	lsls	r1, r1, #1
 800ce96:	2480      	movs	r4, #128	@ 0x80
 800ce98:	9205      	str	r2, [sp, #20]
 800ce9a:	0fda      	lsrs	r2, r3, #31
 800ce9c:	1852      	adds	r2, r2, r1
 800ce9e:	2016      	movs	r0, #22
 800cea0:	0029      	movs	r1, r5
 800cea2:	005b      	lsls	r3, r3, #1
 800cea4:	03a4      	lsls	r4, r4, #14
 800cea6:	190e      	adds	r6, r1, r4
 800cea8:	4296      	cmp	r6, r2
 800ceaa:	dc02      	bgt.n	800ceb2 <__ieee754_sqrt+0xce>
 800ceac:	1931      	adds	r1, r6, r4
 800ceae:	1b92      	subs	r2, r2, r6
 800ceb0:	192d      	adds	r5, r5, r4
 800ceb2:	0fde      	lsrs	r6, r3, #31
 800ceb4:	0052      	lsls	r2, r2, #1
 800ceb6:	3801      	subs	r0, #1
 800ceb8:	1992      	adds	r2, r2, r6
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	0864      	lsrs	r4, r4, #1
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d1f1      	bne.n	800cea6 <__ieee754_sqrt+0xc2>
 800cec2:	2620      	movs	r6, #32
 800cec4:	2780      	movs	r7, #128	@ 0x80
 800cec6:	0004      	movs	r4, r0
 800cec8:	9604      	str	r6, [sp, #16]
 800ceca:	063f      	lsls	r7, r7, #24
 800cecc:	183e      	adds	r6, r7, r0
 800cece:	46b4      	mov	ip, r6
 800ced0:	428a      	cmp	r2, r1
 800ced2:	dc02      	bgt.n	800ceda <__ieee754_sqrt+0xf6>
 800ced4:	d114      	bne.n	800cf00 <__ieee754_sqrt+0x11c>
 800ced6:	429e      	cmp	r6, r3
 800ced8:	d812      	bhi.n	800cf00 <__ieee754_sqrt+0x11c>
 800ceda:	4660      	mov	r0, ip
 800cedc:	4666      	mov	r6, ip
 800cede:	19c0      	adds	r0, r0, r7
 800cee0:	9100      	str	r1, [sp, #0]
 800cee2:	2e00      	cmp	r6, #0
 800cee4:	da03      	bge.n	800ceee <__ieee754_sqrt+0x10a>
 800cee6:	43c6      	mvns	r6, r0
 800cee8:	0ff6      	lsrs	r6, r6, #31
 800ceea:	198e      	adds	r6, r1, r6
 800ceec:	9600      	str	r6, [sp, #0]
 800ceee:	1a52      	subs	r2, r2, r1
 800cef0:	4563      	cmp	r3, ip
 800cef2:	4189      	sbcs	r1, r1
 800cef4:	4249      	negs	r1, r1
 800cef6:	1a52      	subs	r2, r2, r1
 800cef8:	4661      	mov	r1, ip
 800cefa:	1a5b      	subs	r3, r3, r1
 800cefc:	9900      	ldr	r1, [sp, #0]
 800cefe:	19e4      	adds	r4, r4, r7
 800cf00:	0fde      	lsrs	r6, r3, #31
 800cf02:	0052      	lsls	r2, r2, #1
 800cf04:	1992      	adds	r2, r2, r6
 800cf06:	9e04      	ldr	r6, [sp, #16]
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	3e01      	subs	r6, #1
 800cf0c:	087f      	lsrs	r7, r7, #1
 800cf0e:	9604      	str	r6, [sp, #16]
 800cf10:	2e00      	cmp	r6, #0
 800cf12:	d1db      	bne.n	800cecc <__ieee754_sqrt+0xe8>
 800cf14:	431a      	orrs	r2, r3
 800cf16:	d01f      	beq.n	800cf58 <__ieee754_sqrt+0x174>
 800cf18:	4e21      	ldr	r6, [pc, #132]	@ (800cfa0 <__ieee754_sqrt+0x1bc>)
 800cf1a:	4f22      	ldr	r7, [pc, #136]	@ (800cfa4 <__ieee754_sqrt+0x1c0>)
 800cf1c:	6830      	ldr	r0, [r6, #0]
 800cf1e:	6871      	ldr	r1, [r6, #4]
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	9200      	str	r2, [sp, #0]
 800cf26:	9301      	str	r3, [sp, #4]
 800cf28:	6832      	ldr	r2, [r6, #0]
 800cf2a:	6873      	ldr	r3, [r6, #4]
 800cf2c:	9202      	str	r2, [sp, #8]
 800cf2e:	9303      	str	r3, [sp, #12]
 800cf30:	9a00      	ldr	r2, [sp, #0]
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	f7f5 ff24 	bl	8002d80 <__aeabi_dsub>
 800cf38:	0002      	movs	r2, r0
 800cf3a:	000b      	movs	r3, r1
 800cf3c:	9802      	ldr	r0, [sp, #8]
 800cf3e:	9903      	ldr	r1, [sp, #12]
 800cf40:	f7f3 fa8a 	bl	8000458 <__aeabi_dcmple>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d007      	beq.n	800cf58 <__ieee754_sqrt+0x174>
 800cf48:	6830      	ldr	r0, [r6, #0]
 800cf4a:	6871      	ldr	r1, [r6, #4]
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	1c67      	adds	r7, r4, #1
 800cf52:	d10c      	bne.n	800cf6e <__ieee754_sqrt+0x18a>
 800cf54:	9c04      	ldr	r4, [sp, #16]
 800cf56:	3501      	adds	r5, #1
 800cf58:	4a13      	ldr	r2, [pc, #76]	@ (800cfa8 <__ieee754_sqrt+0x1c4>)
 800cf5a:	106b      	asrs	r3, r5, #1
 800cf5c:	189b      	adds	r3, r3, r2
 800cf5e:	9a05      	ldr	r2, [sp, #20]
 800cf60:	07ed      	lsls	r5, r5, #31
 800cf62:	0864      	lsrs	r4, r4, #1
 800cf64:	0512      	lsls	r2, r2, #20
 800cf66:	4325      	orrs	r5, r4
 800cf68:	0028      	movs	r0, r5
 800cf6a:	18d1      	adds	r1, r2, r3
 800cf6c:	e751      	b.n	800ce12 <__ieee754_sqrt+0x2e>
 800cf6e:	f7f4 fc21 	bl	80017b4 <__aeabi_dadd>
 800cf72:	6877      	ldr	r7, [r6, #4]
 800cf74:	6836      	ldr	r6, [r6, #0]
 800cf76:	0002      	movs	r2, r0
 800cf78:	000b      	movs	r3, r1
 800cf7a:	0030      	movs	r0, r6
 800cf7c:	0039      	movs	r1, r7
 800cf7e:	f7f3 fa61 	bl	8000444 <__aeabi_dcmplt>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d004      	beq.n	800cf90 <__ieee754_sqrt+0x1ac>
 800cf86:	3402      	adds	r4, #2
 800cf88:	4263      	negs	r3, r4
 800cf8a:	4163      	adcs	r3, r4
 800cf8c:	18ed      	adds	r5, r5, r3
 800cf8e:	e7e3      	b.n	800cf58 <__ieee754_sqrt+0x174>
 800cf90:	2301      	movs	r3, #1
 800cf92:	3401      	adds	r4, #1
 800cf94:	439c      	bics	r4, r3
 800cf96:	e7df      	b.n	800cf58 <__ieee754_sqrt+0x174>
 800cf98:	7ff00000 	.word	0x7ff00000
 800cf9c:	fffffc01 	.word	0xfffffc01
 800cfa0:	0800db50 	.word	0x0800db50
 800cfa4:	0800db48 	.word	0x0800db48
 800cfa8:	3fe00000 	.word	0x3fe00000

0800cfac <_init>:
 800cfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfae:	46c0      	nop			@ (mov r8, r8)
 800cfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfb2:	bc08      	pop	{r3}
 800cfb4:	469e      	mov	lr, r3
 800cfb6:	4770      	bx	lr

0800cfb8 <_fini>:
 800cfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfba:	46c0      	nop			@ (mov r8, r8)
 800cfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfbe:	bc08      	pop	{r3}
 800cfc0:	469e      	mov	lr, r3
 800cfc2:	4770      	bx	lr
