
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d990  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  0800da50  0800da50  0000ea50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e768  0800e768  00011058  2**0
                  CONTENTS
  4 .ARM          00000008  0800e768  0800e768  0000f768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e770  0800e770  00011058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e770  0800e770  0000f770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e774  0800e774  0000f774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001058  20000000  0800e778  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  20001058  0800f7d0  00011058  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002258  0800f7d0  00011258  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00011058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb3d  00000000  00000000  00011080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003721  00000000  00000000  0002cbbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  000302e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001433  00000000  00000000  00031c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbad  00000000  00000000  000330ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f312  00000000  00000000  00052c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb594  00000000  00000000  00071f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d4fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073d0  00000000  00000000  0013d544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00144914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20001058 	.word	0x20001058
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800da34 	.word	0x0800da34

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000105c 	.word	0x2000105c
 8000100:	0800da34 	.word	0x0800da34

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fced 	bl	8001e2c <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc2d 	bl	8001cbc <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fcdf 	bl	8001e2c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcd5 	bl	8001e2c <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc57 	bl	8001d44 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc4d 	bl	8001d44 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb6b 	bl	8000b9c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 faeb 	bl	8000aac <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb5d 	bl	8000b9c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb53 	bl	8000b9c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 faf9 	bl	8000afc <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 faef 	bl	8000afc <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8ba 	bl	80006d4 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4699      	mov	r9, r3
 8000572:	0c03      	lsrs	r3, r0, #16
 8000574:	469c      	mov	ip, r3
 8000576:	0413      	lsls	r3, r2, #16
 8000578:	4647      	mov	r7, r8
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	001d      	movs	r5, r3
 800057e:	000e      	movs	r6, r1
 8000580:	4661      	mov	r1, ip
 8000582:	0404      	lsls	r4, r0, #16
 8000584:	0c24      	lsrs	r4, r4, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	0007      	movs	r7, r0
 800058a:	0c10      	lsrs	r0, r2, #16
 800058c:	434b      	muls	r3, r1
 800058e:	4365      	muls	r5, r4
 8000590:	4341      	muls	r1, r0
 8000592:	4360      	muls	r0, r4
 8000594:	0c2c      	lsrs	r4, r5, #16
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	1824      	adds	r4, r4, r0
 800059a:	468c      	mov	ip, r1
 800059c:	42a3      	cmp	r3, r4
 800059e:	d903      	bls.n	80005a8 <__aeabi_lmul+0x3c>
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	44c4      	add	ip, r8
 80005a8:	4649      	mov	r1, r9
 80005aa:	4379      	muls	r1, r7
 80005ac:	4356      	muls	r6, r2
 80005ae:	0c23      	lsrs	r3, r4, #16
 80005b0:	042d      	lsls	r5, r5, #16
 80005b2:	0c2d      	lsrs	r5, r5, #16
 80005b4:	1989      	adds	r1, r1, r6
 80005b6:	4463      	add	r3, ip
 80005b8:	0424      	lsls	r4, r4, #16
 80005ba:	1960      	adds	r0, r4, r5
 80005bc:	18c9      	adds	r1, r1, r3
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)

080005c8 <__aeabi_f2uiz>:
 80005c8:	219e      	movs	r1, #158	@ 0x9e
 80005ca:	b510      	push	{r4, lr}
 80005cc:	05c9      	lsls	r1, r1, #23
 80005ce:	1c04      	adds	r4, r0, #0
 80005d0:	f7ff ffa2 	bl	8000518 <__aeabi_fcmpge>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d103      	bne.n	80005e0 <__aeabi_f2uiz+0x18>
 80005d8:	1c20      	adds	r0, r4, #0
 80005da:	f000 fcd1 	bl	8000f80 <__aeabi_f2iz>
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	219e      	movs	r1, #158	@ 0x9e
 80005e2:	1c20      	adds	r0, r4, #0
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	f000 fb27 	bl	8000c38 <__aeabi_fsub>
 80005ea:	f000 fcc9 	bl	8000f80 <__aeabi_f2iz>
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	469c      	mov	ip, r3
 80005f4:	4460      	add	r0, ip
 80005f6:	e7f2      	b.n	80005de <__aeabi_f2uiz+0x16>

080005f8 <__aeabi_d2uiz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <__aeabi_d2uiz+0x38>)
 80005fe:	0004      	movs	r4, r0
 8000600:	000d      	movs	r5, r1
 8000602:	f7ff ff4f 	bl	80004a4 <__aeabi_dcmpge>
 8000606:	2800      	cmp	r0, #0
 8000608:	d104      	bne.n	8000614 <__aeabi_d2uiz+0x1c>
 800060a:	0020      	movs	r0, r4
 800060c:	0029      	movs	r1, r5
 800060e:	f002 fae3 	bl	8002bd8 <__aeabi_d2iz>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <__aeabi_d2uiz+0x38>)
 8000616:	2200      	movs	r2, #0
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f001 ff40 	bl	80024a0 <__aeabi_dsub>
 8000620:	f002 fada 	bl	8002bd8 <__aeabi_d2iz>
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	469c      	mov	ip, r3
 800062a:	4460      	add	r0, ip
 800062c:	e7f1      	b.n	8000612 <__aeabi_d2uiz+0x1a>
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	41e00000 	.word	0x41e00000

08000634 <__aeabi_d2lz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	0004      	movs	r4, r0
 800063c:	000d      	movs	r5, r1
 800063e:	f7ff ff13 	bl	8000468 <__aeabi_dcmplt>
 8000642:	2800      	cmp	r0, #0
 8000644:	d108      	bne.n	8000658 <__aeabi_d2lz+0x24>
 8000646:	0020      	movs	r0, r4
 8000648:	0029      	movs	r1, r5
 800064a:	f000 f80f 	bl	800066c <__aeabi_d2ulz>
 800064e:	0002      	movs	r2, r0
 8000650:	000b      	movs	r3, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	061b      	lsls	r3, r3, #24
 800065c:	18e9      	adds	r1, r5, r3
 800065e:	0020      	movs	r0, r4
 8000660:	f000 f804 	bl	800066c <__aeabi_d2ulz>
 8000664:	2300      	movs	r3, #0
 8000666:	4242      	negs	r2, r0
 8000668:	418b      	sbcs	r3, r1
 800066a:	e7f2      	b.n	8000652 <__aeabi_d2lz+0x1e>

0800066c <__aeabi_d2ulz>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	2200      	movs	r2, #0
 8000670:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <__aeabi_d2ulz+0x34>)
 8000672:	000d      	movs	r5, r1
 8000674:	0004      	movs	r4, r0
 8000676:	f001 fc4b 	bl	8001f10 <__aeabi_dmul>
 800067a:	f7ff ffbd 	bl	80005f8 <__aeabi_d2uiz>
 800067e:	0006      	movs	r6, r0
 8000680:	f002 fb14 	bl	8002cac <__aeabi_ui2d>
 8000684:	2200      	movs	r2, #0
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <__aeabi_d2ulz+0x38>)
 8000688:	f001 fc42 	bl	8001f10 <__aeabi_dmul>
 800068c:	0002      	movs	r2, r0
 800068e:	000b      	movs	r3, r1
 8000690:	0020      	movs	r0, r4
 8000692:	0029      	movs	r1, r5
 8000694:	f001 ff04 	bl	80024a0 <__aeabi_dsub>
 8000698:	f7ff ffae 	bl	80005f8 <__aeabi_d2uiz>
 800069c:	0031      	movs	r1, r6
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	3df00000 	.word	0x3df00000
 80006a4:	41f00000 	.word	0x41f00000

080006a8 <__aeabi_l2d>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	0006      	movs	r6, r0
 80006ac:	0008      	movs	r0, r1
 80006ae:	f002 facf 	bl	8002c50 <__aeabi_i2d>
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <__aeabi_l2d+0x28>)
 80006b6:	f001 fc2b 	bl	8001f10 <__aeabi_dmul>
 80006ba:	000d      	movs	r5, r1
 80006bc:	0004      	movs	r4, r0
 80006be:	0030      	movs	r0, r6
 80006c0:	f002 faf4 	bl	8002cac <__aeabi_ui2d>
 80006c4:	002b      	movs	r3, r5
 80006c6:	0022      	movs	r2, r4
 80006c8:	f000 fc7a 	bl	8000fc0 <__aeabi_dadd>
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	41f00000 	.word	0x41f00000

080006d4 <__udivmoddi4>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	4657      	mov	r7, sl
 80006d8:	464e      	mov	r6, r9
 80006da:	4645      	mov	r5, r8
 80006dc:	46de      	mov	lr, fp
 80006de:	b5e0      	push	{r5, r6, r7, lr}
 80006e0:	0004      	movs	r4, r0
 80006e2:	000d      	movs	r5, r1
 80006e4:	4692      	mov	sl, r2
 80006e6:	4699      	mov	r9, r3
 80006e8:	b083      	sub	sp, #12
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d830      	bhi.n	8000750 <__udivmoddi4+0x7c>
 80006ee:	d02d      	beq.n	800074c <__udivmoddi4+0x78>
 80006f0:	4649      	mov	r1, r9
 80006f2:	4650      	mov	r0, sl
 80006f4:	f002 fba0 	bl	8002e38 <__clzdi2>
 80006f8:	0029      	movs	r1, r5
 80006fa:	0006      	movs	r6, r0
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 fb9b 	bl	8002e38 <__clzdi2>
 8000702:	1a33      	subs	r3, r6, r0
 8000704:	4698      	mov	r8, r3
 8000706:	3b20      	subs	r3, #32
 8000708:	d434      	bmi.n	8000774 <__udivmoddi4+0xa0>
 800070a:	469b      	mov	fp, r3
 800070c:	4653      	mov	r3, sl
 800070e:	465a      	mov	r2, fp
 8000710:	4093      	lsls	r3, r2
 8000712:	4642      	mov	r2, r8
 8000714:	001f      	movs	r7, r3
 8000716:	4653      	mov	r3, sl
 8000718:	4093      	lsls	r3, r2
 800071a:	001e      	movs	r6, r3
 800071c:	42af      	cmp	r7, r5
 800071e:	d83b      	bhi.n	8000798 <__udivmoddi4+0xc4>
 8000720:	42af      	cmp	r7, r5
 8000722:	d100      	bne.n	8000726 <__udivmoddi4+0x52>
 8000724:	e079      	b.n	800081a <__udivmoddi4+0x146>
 8000726:	465b      	mov	r3, fp
 8000728:	1ba4      	subs	r4, r4, r6
 800072a:	41bd      	sbcs	r5, r7
 800072c:	2b00      	cmp	r3, #0
 800072e:	da00      	bge.n	8000732 <__udivmoddi4+0x5e>
 8000730:	e076      	b.n	8000820 <__udivmoddi4+0x14c>
 8000732:	2200      	movs	r2, #0
 8000734:	2300      	movs	r3, #0
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	465a      	mov	r2, fp
 800073e:	4093      	lsls	r3, r2
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2301      	movs	r3, #1
 8000744:	4642      	mov	r2, r8
 8000746:	4093      	lsls	r3, r2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	e029      	b.n	80007a0 <__udivmoddi4+0xcc>
 800074c:	4282      	cmp	r2, r0
 800074e:	d9cf      	bls.n	80006f0 <__udivmoddi4+0x1c>
 8000750:	2200      	movs	r2, #0
 8000752:	2300      	movs	r3, #0
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <__udivmoddi4+0x8e>
 800075e:	601c      	str	r4, [r3, #0]
 8000760:	605d      	str	r5, [r3, #4]
 8000762:	9800      	ldr	r0, [sp, #0]
 8000764:	9901      	ldr	r1, [sp, #4]
 8000766:	b003      	add	sp, #12
 8000768:	bcf0      	pop	{r4, r5, r6, r7}
 800076a:	46bb      	mov	fp, r7
 800076c:	46b2      	mov	sl, r6
 800076e:	46a9      	mov	r9, r5
 8000770:	46a0      	mov	r8, r4
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000774:	4642      	mov	r2, r8
 8000776:	469b      	mov	fp, r3
 8000778:	2320      	movs	r3, #32
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	4652      	mov	r2, sl
 800077e:	40da      	lsrs	r2, r3
 8000780:	4641      	mov	r1, r8
 8000782:	0013      	movs	r3, r2
 8000784:	464a      	mov	r2, r9
 8000786:	408a      	lsls	r2, r1
 8000788:	0017      	movs	r7, r2
 800078a:	4642      	mov	r2, r8
 800078c:	431f      	orrs	r7, r3
 800078e:	4653      	mov	r3, sl
 8000790:	4093      	lsls	r3, r2
 8000792:	001e      	movs	r6, r3
 8000794:	42af      	cmp	r7, r5
 8000796:	d9c3      	bls.n	8000720 <__udivmoddi4+0x4c>
 8000798:	2200      	movs	r2, #0
 800079a:	2300      	movs	r3, #0
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	4643      	mov	r3, r8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0d8      	beq.n	8000758 <__udivmoddi4+0x84>
 80007a6:	07fb      	lsls	r3, r7, #31
 80007a8:	0872      	lsrs	r2, r6, #1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4646      	mov	r6, r8
 80007ae:	087b      	lsrs	r3, r7, #1
 80007b0:	e00e      	b.n	80007d0 <__udivmoddi4+0xfc>
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	d101      	bne.n	80007ba <__udivmoddi4+0xe6>
 80007b6:	42a2      	cmp	r2, r4
 80007b8:	d80c      	bhi.n	80007d4 <__udivmoddi4+0x100>
 80007ba:	1aa4      	subs	r4, r4, r2
 80007bc:	419d      	sbcs	r5, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	1924      	adds	r4, r4, r4
 80007c2:	416d      	adcs	r5, r5
 80007c4:	2100      	movs	r1, #0
 80007c6:	3e01      	subs	r6, #1
 80007c8:	1824      	adds	r4, r4, r0
 80007ca:	414d      	adcs	r5, r1
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d006      	beq.n	80007de <__udivmoddi4+0x10a>
 80007d0:	42ab      	cmp	r3, r5
 80007d2:	d9ee      	bls.n	80007b2 <__udivmoddi4+0xde>
 80007d4:	3e01      	subs	r6, #1
 80007d6:	1924      	adds	r4, r4, r4
 80007d8:	416d      	adcs	r5, r5
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1f8      	bne.n	80007d0 <__udivmoddi4+0xfc>
 80007de:	9800      	ldr	r0, [sp, #0]
 80007e0:	9901      	ldr	r1, [sp, #4]
 80007e2:	465b      	mov	r3, fp
 80007e4:	1900      	adds	r0, r0, r4
 80007e6:	4169      	adcs	r1, r5
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db24      	blt.n	8000836 <__udivmoddi4+0x162>
 80007ec:	002b      	movs	r3, r5
 80007ee:	465a      	mov	r2, fp
 80007f0:	4644      	mov	r4, r8
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	002a      	movs	r2, r5
 80007f6:	40e2      	lsrs	r2, r4
 80007f8:	001c      	movs	r4, r3
 80007fa:	465b      	mov	r3, fp
 80007fc:	0015      	movs	r5, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db2a      	blt.n	8000858 <__udivmoddi4+0x184>
 8000802:	0026      	movs	r6, r4
 8000804:	409e      	lsls	r6, r3
 8000806:	0033      	movs	r3, r6
 8000808:	0026      	movs	r6, r4
 800080a:	4647      	mov	r7, r8
 800080c:	40be      	lsls	r6, r7
 800080e:	0032      	movs	r2, r6
 8000810:	1a80      	subs	r0, r0, r2
 8000812:	4199      	sbcs	r1, r3
 8000814:	9000      	str	r0, [sp, #0]
 8000816:	9101      	str	r1, [sp, #4]
 8000818:	e79e      	b.n	8000758 <__udivmoddi4+0x84>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d8bc      	bhi.n	8000798 <__udivmoddi4+0xc4>
 800081e:	e782      	b.n	8000726 <__udivmoddi4+0x52>
 8000820:	4642      	mov	r2, r8
 8000822:	2320      	movs	r3, #32
 8000824:	2100      	movs	r1, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	40da      	lsrs	r2, r3
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	e785      	b.n	8000742 <__udivmoddi4+0x6e>
 8000836:	4642      	mov	r2, r8
 8000838:	2320      	movs	r3, #32
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	002a      	movs	r2, r5
 800083e:	4646      	mov	r6, r8
 8000840:	409a      	lsls	r2, r3
 8000842:	0023      	movs	r3, r4
 8000844:	40f3      	lsrs	r3, r6
 8000846:	4644      	mov	r4, r8
 8000848:	4313      	orrs	r3, r2
 800084a:	002a      	movs	r2, r5
 800084c:	40e2      	lsrs	r2, r4
 800084e:	001c      	movs	r4, r3
 8000850:	465b      	mov	r3, fp
 8000852:	0015      	movs	r5, r2
 8000854:	2b00      	cmp	r3, #0
 8000856:	dad4      	bge.n	8000802 <__udivmoddi4+0x12e>
 8000858:	4642      	mov	r2, r8
 800085a:	002f      	movs	r7, r5
 800085c:	2320      	movs	r3, #32
 800085e:	0026      	movs	r6, r4
 8000860:	4097      	lsls	r7, r2
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	40de      	lsrs	r6, r3
 8000866:	003b      	movs	r3, r7
 8000868:	4333      	orrs	r3, r6
 800086a:	e7cd      	b.n	8000808 <__udivmoddi4+0x134>

0800086c <__aeabi_fdiv>:
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	464f      	mov	r7, r9
 8000870:	4646      	mov	r6, r8
 8000872:	46d6      	mov	lr, sl
 8000874:	0244      	lsls	r4, r0, #9
 8000876:	b5c0      	push	{r6, r7, lr}
 8000878:	0047      	lsls	r7, r0, #1
 800087a:	1c0e      	adds	r6, r1, #0
 800087c:	0a64      	lsrs	r4, r4, #9
 800087e:	0e3f      	lsrs	r7, r7, #24
 8000880:	0fc5      	lsrs	r5, r0, #31
 8000882:	2f00      	cmp	r7, #0
 8000884:	d03c      	beq.n	8000900 <__aeabi_fdiv+0x94>
 8000886:	2fff      	cmp	r7, #255	@ 0xff
 8000888:	d042      	beq.n	8000910 <__aeabi_fdiv+0xa4>
 800088a:	2300      	movs	r3, #0
 800088c:	2280      	movs	r2, #128	@ 0x80
 800088e:	4699      	mov	r9, r3
 8000890:	469a      	mov	sl, r3
 8000892:	00e4      	lsls	r4, r4, #3
 8000894:	04d2      	lsls	r2, r2, #19
 8000896:	4314      	orrs	r4, r2
 8000898:	3f7f      	subs	r7, #127	@ 0x7f
 800089a:	0273      	lsls	r3, r6, #9
 800089c:	0a5b      	lsrs	r3, r3, #9
 800089e:	4698      	mov	r8, r3
 80008a0:	0073      	lsls	r3, r6, #1
 80008a2:	0e1b      	lsrs	r3, r3, #24
 80008a4:	0ff6      	lsrs	r6, r6, #31
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d01b      	beq.n	80008e2 <__aeabi_fdiv+0x76>
 80008aa:	2bff      	cmp	r3, #255	@ 0xff
 80008ac:	d013      	beq.n	80008d6 <__aeabi_fdiv+0x6a>
 80008ae:	4642      	mov	r2, r8
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	00d2      	lsls	r2, r2, #3
 80008b4:	04c9      	lsls	r1, r1, #19
 80008b6:	4311      	orrs	r1, r2
 80008b8:	4688      	mov	r8, r1
 80008ba:	2000      	movs	r0, #0
 80008bc:	3b7f      	subs	r3, #127	@ 0x7f
 80008be:	0029      	movs	r1, r5
 80008c0:	1aff      	subs	r7, r7, r3
 80008c2:	464b      	mov	r3, r9
 80008c4:	4071      	eors	r1, r6
 80008c6:	b2c9      	uxtb	r1, r1
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d900      	bls.n	80008ce <__aeabi_fdiv+0x62>
 80008cc:	e0b5      	b.n	8000a3a <__aeabi_fdiv+0x1ce>
 80008ce:	4a74      	ldr	r2, [pc, #464]	@ (8000aa0 <__aeabi_fdiv+0x234>)
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	58d3      	ldr	r3, [r2, r3]
 80008d4:	469f      	mov	pc, r3
 80008d6:	4643      	mov	r3, r8
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d13f      	bne.n	800095c <__aeabi_fdiv+0xf0>
 80008dc:	3fff      	subs	r7, #255	@ 0xff
 80008de:	3302      	adds	r3, #2
 80008e0:	e003      	b.n	80008ea <__aeabi_fdiv+0x7e>
 80008e2:	4643      	mov	r3, r8
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d12d      	bne.n	8000944 <__aeabi_fdiv+0xd8>
 80008e8:	2301      	movs	r3, #1
 80008ea:	0029      	movs	r1, r5
 80008ec:	464a      	mov	r2, r9
 80008ee:	4071      	eors	r1, r6
 80008f0:	b2c9      	uxtb	r1, r1
 80008f2:	431a      	orrs	r2, r3
 80008f4:	2a0e      	cmp	r2, #14
 80008f6:	d838      	bhi.n	800096a <__aeabi_fdiv+0xfe>
 80008f8:	486a      	ldr	r0, [pc, #424]	@ (8000aa4 <__aeabi_fdiv+0x238>)
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	5882      	ldr	r2, [r0, r2]
 80008fe:	4697      	mov	pc, r2
 8000900:	2c00      	cmp	r4, #0
 8000902:	d113      	bne.n	800092c <__aeabi_fdiv+0xc0>
 8000904:	2304      	movs	r3, #4
 8000906:	4699      	mov	r9, r3
 8000908:	3b03      	subs	r3, #3
 800090a:	2700      	movs	r7, #0
 800090c:	469a      	mov	sl, r3
 800090e:	e7c4      	b.n	800089a <__aeabi_fdiv+0x2e>
 8000910:	2c00      	cmp	r4, #0
 8000912:	d105      	bne.n	8000920 <__aeabi_fdiv+0xb4>
 8000914:	2308      	movs	r3, #8
 8000916:	4699      	mov	r9, r3
 8000918:	3b06      	subs	r3, #6
 800091a:	27ff      	movs	r7, #255	@ 0xff
 800091c:	469a      	mov	sl, r3
 800091e:	e7bc      	b.n	800089a <__aeabi_fdiv+0x2e>
 8000920:	230c      	movs	r3, #12
 8000922:	4699      	mov	r9, r3
 8000924:	3b09      	subs	r3, #9
 8000926:	27ff      	movs	r7, #255	@ 0xff
 8000928:	469a      	mov	sl, r3
 800092a:	e7b6      	b.n	800089a <__aeabi_fdiv+0x2e>
 800092c:	0020      	movs	r0, r4
 800092e:	f002 fa65 	bl	8002dfc <__clzsi2>
 8000932:	2776      	movs	r7, #118	@ 0x76
 8000934:	1f43      	subs	r3, r0, #5
 8000936:	409c      	lsls	r4, r3
 8000938:	2300      	movs	r3, #0
 800093a:	427f      	negs	r7, r7
 800093c:	4699      	mov	r9, r3
 800093e:	469a      	mov	sl, r3
 8000940:	1a3f      	subs	r7, r7, r0
 8000942:	e7aa      	b.n	800089a <__aeabi_fdiv+0x2e>
 8000944:	4640      	mov	r0, r8
 8000946:	f002 fa59 	bl	8002dfc <__clzsi2>
 800094a:	4642      	mov	r2, r8
 800094c:	1f43      	subs	r3, r0, #5
 800094e:	409a      	lsls	r2, r3
 8000950:	2376      	movs	r3, #118	@ 0x76
 8000952:	425b      	negs	r3, r3
 8000954:	1a1b      	subs	r3, r3, r0
 8000956:	4690      	mov	r8, r2
 8000958:	2000      	movs	r0, #0
 800095a:	e7b0      	b.n	80008be <__aeabi_fdiv+0x52>
 800095c:	2303      	movs	r3, #3
 800095e:	464a      	mov	r2, r9
 8000960:	431a      	orrs	r2, r3
 8000962:	4691      	mov	r9, r2
 8000964:	2003      	movs	r0, #3
 8000966:	33fc      	adds	r3, #252	@ 0xfc
 8000968:	e7a9      	b.n	80008be <__aeabi_fdiv+0x52>
 800096a:	000d      	movs	r5, r1
 800096c:	20ff      	movs	r0, #255	@ 0xff
 800096e:	2200      	movs	r2, #0
 8000970:	05c0      	lsls	r0, r0, #23
 8000972:	07ed      	lsls	r5, r5, #31
 8000974:	4310      	orrs	r0, r2
 8000976:	4328      	orrs	r0, r5
 8000978:	bce0      	pop	{r5, r6, r7}
 800097a:	46ba      	mov	sl, r7
 800097c:	46b1      	mov	r9, r6
 800097e:	46a8      	mov	r8, r5
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000982:	000d      	movs	r5, r1
 8000984:	2000      	movs	r0, #0
 8000986:	2200      	movs	r2, #0
 8000988:	e7f2      	b.n	8000970 <__aeabi_fdiv+0x104>
 800098a:	4653      	mov	r3, sl
 800098c:	2b02      	cmp	r3, #2
 800098e:	d0ed      	beq.n	800096c <__aeabi_fdiv+0x100>
 8000990:	2b03      	cmp	r3, #3
 8000992:	d033      	beq.n	80009fc <__aeabi_fdiv+0x190>
 8000994:	46a0      	mov	r8, r4
 8000996:	2b01      	cmp	r3, #1
 8000998:	d105      	bne.n	80009a6 <__aeabi_fdiv+0x13a>
 800099a:	2000      	movs	r0, #0
 800099c:	2200      	movs	r2, #0
 800099e:	e7e7      	b.n	8000970 <__aeabi_fdiv+0x104>
 80009a0:	0035      	movs	r5, r6
 80009a2:	2803      	cmp	r0, #3
 80009a4:	d07a      	beq.n	8000a9c <__aeabi_fdiv+0x230>
 80009a6:	003b      	movs	r3, r7
 80009a8:	337f      	adds	r3, #127	@ 0x7f
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dd2d      	ble.n	8000a0a <__aeabi_fdiv+0x19e>
 80009ae:	4642      	mov	r2, r8
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	d007      	beq.n	80009c4 <__aeabi_fdiv+0x158>
 80009b4:	220f      	movs	r2, #15
 80009b6:	4641      	mov	r1, r8
 80009b8:	400a      	ands	r2, r1
 80009ba:	2a04      	cmp	r2, #4
 80009bc:	d002      	beq.n	80009c4 <__aeabi_fdiv+0x158>
 80009be:	2204      	movs	r2, #4
 80009c0:	4694      	mov	ip, r2
 80009c2:	44e0      	add	r8, ip
 80009c4:	4642      	mov	r2, r8
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	d505      	bpl.n	80009d6 <__aeabi_fdiv+0x16a>
 80009ca:	4642      	mov	r2, r8
 80009cc:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <__aeabi_fdiv+0x23c>)
 80009ce:	401a      	ands	r2, r3
 80009d0:	003b      	movs	r3, r7
 80009d2:	4690      	mov	r8, r2
 80009d4:	3380      	adds	r3, #128	@ 0x80
 80009d6:	2bfe      	cmp	r3, #254	@ 0xfe
 80009d8:	dcc8      	bgt.n	800096c <__aeabi_fdiv+0x100>
 80009da:	4642      	mov	r2, r8
 80009dc:	0192      	lsls	r2, r2, #6
 80009de:	0a52      	lsrs	r2, r2, #9
 80009e0:	b2d8      	uxtb	r0, r3
 80009e2:	e7c5      	b.n	8000970 <__aeabi_fdiv+0x104>
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	2500      	movs	r5, #0
 80009e8:	20ff      	movs	r0, #255	@ 0xff
 80009ea:	03d2      	lsls	r2, r2, #15
 80009ec:	e7c0      	b.n	8000970 <__aeabi_fdiv+0x104>
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	03d2      	lsls	r2, r2, #15
 80009f2:	4214      	tst	r4, r2
 80009f4:	d002      	beq.n	80009fc <__aeabi_fdiv+0x190>
 80009f6:	4643      	mov	r3, r8
 80009f8:	4213      	tst	r3, r2
 80009fa:	d049      	beq.n	8000a90 <__aeabi_fdiv+0x224>
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	03d2      	lsls	r2, r2, #15
 8000a00:	4322      	orrs	r2, r4
 8000a02:	0252      	lsls	r2, r2, #9
 8000a04:	20ff      	movs	r0, #255	@ 0xff
 8000a06:	0a52      	lsrs	r2, r2, #9
 8000a08:	e7b2      	b.n	8000970 <__aeabi_fdiv+0x104>
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b1b      	cmp	r3, #27
 8000a10:	dcc3      	bgt.n	800099a <__aeabi_fdiv+0x12e>
 8000a12:	4642      	mov	r2, r8
 8000a14:	40da      	lsrs	r2, r3
 8000a16:	4643      	mov	r3, r8
 8000a18:	379e      	adds	r7, #158	@ 0x9e
 8000a1a:	40bb      	lsls	r3, r7
 8000a1c:	1e59      	subs	r1, r3, #1
 8000a1e:	418b      	sbcs	r3, r1
 8000a20:	431a      	orrs	r2, r3
 8000a22:	0753      	lsls	r3, r2, #29
 8000a24:	d004      	beq.n	8000a30 <__aeabi_fdiv+0x1c4>
 8000a26:	230f      	movs	r3, #15
 8000a28:	4013      	ands	r3, r2
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fdiv+0x1c4>
 8000a2e:	3204      	adds	r2, #4
 8000a30:	0153      	lsls	r3, r2, #5
 8000a32:	d529      	bpl.n	8000a88 <__aeabi_fdiv+0x21c>
 8000a34:	2001      	movs	r0, #1
 8000a36:	2200      	movs	r2, #0
 8000a38:	e79a      	b.n	8000970 <__aeabi_fdiv+0x104>
 8000a3a:	4642      	mov	r2, r8
 8000a3c:	0163      	lsls	r3, r4, #5
 8000a3e:	0155      	lsls	r5, r2, #5
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d215      	bcs.n	8000a70 <__aeabi_fdiv+0x204>
 8000a44:	201b      	movs	r0, #27
 8000a46:	2200      	movs	r2, #0
 8000a48:	3f01      	subs	r7, #1
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	001c      	movs	r4, r3
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	db01      	blt.n	8000a5a <__aeabi_fdiv+0x1ee>
 8000a56:	429d      	cmp	r5, r3
 8000a58:	d801      	bhi.n	8000a5e <__aeabi_fdiv+0x1f2>
 8000a5a:	1b5b      	subs	r3, r3, r5
 8000a5c:	4332      	orrs	r2, r6
 8000a5e:	3801      	subs	r0, #1
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d1f3      	bne.n	8000a4c <__aeabi_fdiv+0x1e0>
 8000a64:	1e58      	subs	r0, r3, #1
 8000a66:	4183      	sbcs	r3, r0
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	4698      	mov	r8, r3
 8000a6c:	000d      	movs	r5, r1
 8000a6e:	e79a      	b.n	80009a6 <__aeabi_fdiv+0x13a>
 8000a70:	201a      	movs	r0, #26
 8000a72:	2201      	movs	r2, #1
 8000a74:	1b5b      	subs	r3, r3, r5
 8000a76:	e7e8      	b.n	8000a4a <__aeabi_fdiv+0x1de>
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	425a      	negs	r2, r3
 8000a7c:	4153      	adcs	r3, r2
 8000a7e:	425b      	negs	r3, r3
 8000a80:	0035      	movs	r5, r6
 8000a82:	2200      	movs	r2, #0
 8000a84:	b2d8      	uxtb	r0, r3
 8000a86:	e773      	b.n	8000970 <__aeabi_fdiv+0x104>
 8000a88:	0192      	lsls	r2, r2, #6
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	0a52      	lsrs	r2, r2, #9
 8000a8e:	e76f      	b.n	8000970 <__aeabi_fdiv+0x104>
 8000a90:	431a      	orrs	r2, r3
 8000a92:	0252      	lsls	r2, r2, #9
 8000a94:	0035      	movs	r5, r6
 8000a96:	20ff      	movs	r0, #255	@ 0xff
 8000a98:	0a52      	lsrs	r2, r2, #9
 8000a9a:	e769      	b.n	8000970 <__aeabi_fdiv+0x104>
 8000a9c:	4644      	mov	r4, r8
 8000a9e:	e7ad      	b.n	80009fc <__aeabi_fdiv+0x190>
 8000aa0:	0800dbe4 	.word	0x0800dbe4
 8000aa4:	0800dc24 	.word	0x0800dc24
 8000aa8:	f7ffffff 	.word	0xf7ffffff

08000aac <__eqsf2>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	024e      	lsls	r6, r1, #9
 8000ab2:	004c      	lsls	r4, r1, #1
 8000ab4:	0245      	lsls	r5, r0, #9
 8000ab6:	0a6d      	lsrs	r5, r5, #9
 8000ab8:	0e12      	lsrs	r2, r2, #24
 8000aba:	0fc3      	lsrs	r3, r0, #31
 8000abc:	0a76      	lsrs	r6, r6, #9
 8000abe:	0e24      	lsrs	r4, r4, #24
 8000ac0:	0fc9      	lsrs	r1, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	@ 0xff
 8000ac4:	d010      	beq.n	8000ae8 <__eqsf2+0x3c>
 8000ac6:	2cff      	cmp	r4, #255	@ 0xff
 8000ac8:	d00c      	beq.n	8000ae4 <__eqsf2+0x38>
 8000aca:	2001      	movs	r0, #1
 8000acc:	42a2      	cmp	r2, r4
 8000ace:	d10a      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000ad0:	42b5      	cmp	r5, r6
 8000ad2:	d108      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d00f      	beq.n	8000af8 <__eqsf2+0x4c>
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d104      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000adc:	0028      	movs	r0, r5
 8000ade:	1e43      	subs	r3, r0, #1
 8000ae0:	4198      	sbcs	r0, r3
 8000ae2:	e000      	b.n	8000ae6 <__eqsf2+0x3a>
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	2001      	movs	r0, #1
 8000aea:	2cff      	cmp	r4, #255	@ 0xff
 8000aec:	d1fb      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000aee:	4335      	orrs	r5, r6
 8000af0:	d1f9      	bne.n	8000ae6 <__eqsf2+0x3a>
 8000af2:	404b      	eors	r3, r1
 8000af4:	0018      	movs	r0, r3
 8000af6:	e7f6      	b.n	8000ae6 <__eqsf2+0x3a>
 8000af8:	2000      	movs	r0, #0
 8000afa:	e7f4      	b.n	8000ae6 <__eqsf2+0x3a>

08000afc <__gesf2>:
 8000afc:	b530      	push	{r4, r5, lr}
 8000afe:	0042      	lsls	r2, r0, #1
 8000b00:	0244      	lsls	r4, r0, #9
 8000b02:	024d      	lsls	r5, r1, #9
 8000b04:	0fc3      	lsrs	r3, r0, #31
 8000b06:	0048      	lsls	r0, r1, #1
 8000b08:	0a64      	lsrs	r4, r4, #9
 8000b0a:	0e12      	lsrs	r2, r2, #24
 8000b0c:	0a6d      	lsrs	r5, r5, #9
 8000b0e:	0e00      	lsrs	r0, r0, #24
 8000b10:	0fc9      	lsrs	r1, r1, #31
 8000b12:	2aff      	cmp	r2, #255	@ 0xff
 8000b14:	d019      	beq.n	8000b4a <__gesf2+0x4e>
 8000b16:	28ff      	cmp	r0, #255	@ 0xff
 8000b18:	d00b      	beq.n	8000b32 <__gesf2+0x36>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d11e      	bne.n	8000b5c <__gesf2+0x60>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d10b      	bne.n	8000b3a <__gesf2+0x3e>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d027      	beq.n	8000b76 <__gesf2+0x7a>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d134      	bne.n	8000b94 <__gesf2+0x98>
 8000b2a:	2900      	cmp	r1, #0
 8000b2c:	d02f      	beq.n	8000b8e <__gesf2+0x92>
 8000b2e:	0008      	movs	r0, r1
 8000b30:	bd30      	pop	{r4, r5, pc}
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d128      	bne.n	8000b88 <__gesf2+0x8c>
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	d101      	bne.n	8000b3e <__gesf2+0x42>
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d0f5      	beq.n	8000b2a <__gesf2+0x2e>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d107      	bne.n	8000b52 <__gesf2+0x56>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d023      	beq.n	8000b8e <__gesf2+0x92>
 8000b46:	0018      	movs	r0, r3
 8000b48:	e7f2      	b.n	8000b30 <__gesf2+0x34>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d11c      	bne.n	8000b88 <__gesf2+0x8c>
 8000b4e:	28ff      	cmp	r0, #255	@ 0xff
 8000b50:	d014      	beq.n	8000b7c <__gesf2+0x80>
 8000b52:	1e58      	subs	r0, r3, #1
 8000b54:	2302      	movs	r3, #2
 8000b56:	4018      	ands	r0, r3
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7e9      	b.n	8000b30 <__gesf2+0x34>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d0f8      	beq.n	8000b52 <__gesf2+0x56>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d1f6      	bne.n	8000b52 <__gesf2+0x56>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	dcf4      	bgt.n	8000b52 <__gesf2+0x56>
 8000b68:	dbeb      	blt.n	8000b42 <__gesf2+0x46>
 8000b6a:	42ac      	cmp	r4, r5
 8000b6c:	d8f1      	bhi.n	8000b52 <__gesf2+0x56>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d2dd      	bcs.n	8000b30 <__gesf2+0x34>
 8000b74:	e7e5      	b.n	8000b42 <__gesf2+0x46>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d0da      	beq.n	8000b30 <__gesf2+0x34>
 8000b7a:	e7ea      	b.n	8000b52 <__gesf2+0x56>
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d103      	bne.n	8000b88 <__gesf2+0x8c>
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d1e6      	bne.n	8000b52 <__gesf2+0x56>
 8000b84:	2000      	movs	r0, #0
 8000b86:	e7d3      	b.n	8000b30 <__gesf2+0x34>
 8000b88:	2002      	movs	r0, #2
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	e7d0      	b.n	8000b30 <__gesf2+0x34>
 8000b8e:	2001      	movs	r0, #1
 8000b90:	4240      	negs	r0, r0
 8000b92:	e7cd      	b.n	8000b30 <__gesf2+0x34>
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d0e8      	beq.n	8000b6a <__gesf2+0x6e>
 8000b98:	e7db      	b.n	8000b52 <__gesf2+0x56>
 8000b9a:	46c0      	nop			@ (mov r8, r8)

08000b9c <__lesf2>:
 8000b9c:	b530      	push	{r4, r5, lr}
 8000b9e:	0042      	lsls	r2, r0, #1
 8000ba0:	0244      	lsls	r4, r0, #9
 8000ba2:	024d      	lsls	r5, r1, #9
 8000ba4:	0fc3      	lsrs	r3, r0, #31
 8000ba6:	0048      	lsls	r0, r1, #1
 8000ba8:	0a64      	lsrs	r4, r4, #9
 8000baa:	0e12      	lsrs	r2, r2, #24
 8000bac:	0a6d      	lsrs	r5, r5, #9
 8000bae:	0e00      	lsrs	r0, r0, #24
 8000bb0:	0fc9      	lsrs	r1, r1, #31
 8000bb2:	2aff      	cmp	r2, #255	@ 0xff
 8000bb4:	d01a      	beq.n	8000bec <__lesf2+0x50>
 8000bb6:	28ff      	cmp	r0, #255	@ 0xff
 8000bb8:	d00e      	beq.n	8000bd8 <__lesf2+0x3c>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d11e      	bne.n	8000bfc <__lesf2+0x60>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d10e      	bne.n	8000be0 <__lesf2+0x44>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d02a      	beq.n	8000c1c <__lesf2+0x80>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d00c      	beq.n	8000be4 <__lesf2+0x48>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d01d      	beq.n	8000c0a <__lesf2+0x6e>
 8000bce:	1e58      	subs	r0, r3, #1
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	4018      	ands	r0, r3
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	e010      	b.n	8000bfa <__lesf2+0x5e>
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d10d      	bne.n	8000bf8 <__lesf2+0x5c>
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d120      	bne.n	8000c22 <__lesf2+0x86>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d11e      	bne.n	8000c22 <__lesf2+0x86>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	d023      	beq.n	8000c30 <__lesf2+0x94>
 8000be8:	0008      	movs	r0, r1
 8000bea:	e006      	b.n	8000bfa <__lesf2+0x5e>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d103      	bne.n	8000bf8 <__lesf2+0x5c>
 8000bf0:	28ff      	cmp	r0, #255	@ 0xff
 8000bf2:	d1ec      	bne.n	8000bce <__lesf2+0x32>
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d017      	beq.n	8000c28 <__lesf2+0x8c>
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	bd30      	pop	{r4, r5, pc}
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d0e6      	beq.n	8000bce <__lesf2+0x32>
 8000c00:	428b      	cmp	r3, r1
 8000c02:	d1e4      	bne.n	8000bce <__lesf2+0x32>
 8000c04:	4282      	cmp	r2, r0
 8000c06:	dce2      	bgt.n	8000bce <__lesf2+0x32>
 8000c08:	db04      	blt.n	8000c14 <__lesf2+0x78>
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	d8df      	bhi.n	8000bce <__lesf2+0x32>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	42ac      	cmp	r4, r5
 8000c12:	d2f2      	bcs.n	8000bfa <__lesf2+0x5e>
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00b      	beq.n	8000c30 <__lesf2+0x94>
 8000c18:	0018      	movs	r0, r3
 8000c1a:	e7ee      	b.n	8000bfa <__lesf2+0x5e>
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d0ec      	beq.n	8000bfa <__lesf2+0x5e>
 8000c20:	e7d5      	b.n	8000bce <__lesf2+0x32>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d1d3      	bne.n	8000bce <__lesf2+0x32>
 8000c26:	e7f5      	b.n	8000c14 <__lesf2+0x78>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d0e5      	beq.n	8000bfa <__lesf2+0x5e>
 8000c2e:	e7ce      	b.n	8000bce <__lesf2+0x32>
 8000c30:	2001      	movs	r0, #1
 8000c32:	4240      	negs	r0, r0
 8000c34:	e7e1      	b.n	8000bfa <__lesf2+0x5e>
 8000c36:	46c0      	nop			@ (mov r8, r8)

08000c38 <__aeabi_fsub>:
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	4647      	mov	r7, r8
 8000c3c:	46ce      	mov	lr, r9
 8000c3e:	024e      	lsls	r6, r1, #9
 8000c40:	0243      	lsls	r3, r0, #9
 8000c42:	0045      	lsls	r5, r0, #1
 8000c44:	0a72      	lsrs	r2, r6, #9
 8000c46:	0fc4      	lsrs	r4, r0, #31
 8000c48:	0048      	lsls	r0, r1, #1
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	0a5f      	lsrs	r7, r3, #9
 8000c50:	0e2d      	lsrs	r5, r5, #24
 8000c52:	099b      	lsrs	r3, r3, #6
 8000c54:	0e00      	lsrs	r0, r0, #24
 8000c56:	0fc9      	lsrs	r1, r1, #31
 8000c58:	09b6      	lsrs	r6, r6, #6
 8000c5a:	28ff      	cmp	r0, #255	@ 0xff
 8000c5c:	d024      	beq.n	8000ca8 <__aeabi_fsub+0x70>
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4051      	eors	r1, r2
 8000c62:	1a2a      	subs	r2, r5, r0
 8000c64:	428c      	cmp	r4, r1
 8000c66:	d00f      	beq.n	8000c88 <__aeabi_fsub+0x50>
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	dc00      	bgt.n	8000c6e <__aeabi_fsub+0x36>
 8000c6c:	e16a      	b.n	8000f44 <__aeabi_fsub+0x30c>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d135      	bne.n	8000cde <__aeabi_fsub+0xa6>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d100      	bne.n	8000c78 <__aeabi_fsub+0x40>
 8000c76:	e0a2      	b.n	8000dbe <__aeabi_fsub+0x186>
 8000c78:	1e51      	subs	r1, r2, #1
 8000c7a:	2a01      	cmp	r2, #1
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_fsub+0x48>
 8000c7e:	e124      	b.n	8000eca <__aeabi_fsub+0x292>
 8000c80:	2aff      	cmp	r2, #255	@ 0xff
 8000c82:	d021      	beq.n	8000cc8 <__aeabi_fsub+0x90>
 8000c84:	000a      	movs	r2, r1
 8000c86:	e02f      	b.n	8000ce8 <__aeabi_fsub+0xb0>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	dc00      	bgt.n	8000c8e <__aeabi_fsub+0x56>
 8000c8c:	e167      	b.n	8000f5e <__aeabi_fsub+0x326>
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d05e      	beq.n	8000d50 <__aeabi_fsub+0x118>
 8000c92:	2dff      	cmp	r5, #255	@ 0xff
 8000c94:	d018      	beq.n	8000cc8 <__aeabi_fsub+0x90>
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	04c9      	lsls	r1, r1, #19
 8000c9a:	430e      	orrs	r6, r1
 8000c9c:	2a1b      	cmp	r2, #27
 8000c9e:	dc00      	bgt.n	8000ca2 <__aeabi_fsub+0x6a>
 8000ca0:	e076      	b.n	8000d90 <__aeabi_fsub+0x158>
 8000ca2:	002a      	movs	r2, r5
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	e032      	b.n	8000d0e <__aeabi_fsub+0xd6>
 8000ca8:	002a      	movs	r2, r5
 8000caa:	3aff      	subs	r2, #255	@ 0xff
 8000cac:	4691      	mov	r9, r2
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d042      	beq.n	8000d38 <__aeabi_fsub+0x100>
 8000cb2:	428c      	cmp	r4, r1
 8000cb4:	d055      	beq.n	8000d62 <__aeabi_fsub+0x12a>
 8000cb6:	464a      	mov	r2, r9
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_fsub+0x86>
 8000cbc:	e09c      	b.n	8000df8 <__aeabi_fsub+0x1c0>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_fsub+0x8c>
 8000cc2:	e077      	b.n	8000db4 <__aeabi_fsub+0x17c>
 8000cc4:	000c      	movs	r4, r1
 8000cc6:	0033      	movs	r3, r6
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_fsub+0x98>
 8000cce:	e06e      	b.n	8000dae <__aeabi_fsub+0x176>
 8000cd0:	2280      	movs	r2, #128	@ 0x80
 8000cd2:	03d2      	lsls	r2, r2, #15
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	025b      	lsls	r3, r3, #9
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	0a5b      	lsrs	r3, r3, #9
 8000cdc:	e024      	b.n	8000d28 <__aeabi_fsub+0xf0>
 8000cde:	2dff      	cmp	r5, #255	@ 0xff
 8000ce0:	d0f2      	beq.n	8000cc8 <__aeabi_fsub+0x90>
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	04c9      	lsls	r1, r1, #19
 8000ce6:	430e      	orrs	r6, r1
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2a1b      	cmp	r2, #27
 8000cec:	dc08      	bgt.n	8000d00 <__aeabi_fsub+0xc8>
 8000cee:	0031      	movs	r1, r6
 8000cf0:	2020      	movs	r0, #32
 8000cf2:	40d1      	lsrs	r1, r2
 8000cf4:	1a82      	subs	r2, r0, r2
 8000cf6:	4096      	lsls	r6, r2
 8000cf8:	0032      	movs	r2, r6
 8000cfa:	1e50      	subs	r0, r2, #1
 8000cfc:	4182      	sbcs	r2, r0
 8000cfe:	4311      	orrs	r1, r2
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	015a      	lsls	r2, r3, #5
 8000d04:	d460      	bmi.n	8000dc8 <__aeabi_fsub+0x190>
 8000d06:	2107      	movs	r1, #7
 8000d08:	002a      	movs	r2, r5
 8000d0a:	4019      	ands	r1, r3
 8000d0c:	d057      	beq.n	8000dbe <__aeabi_fsub+0x186>
 8000d0e:	210f      	movs	r1, #15
 8000d10:	4019      	ands	r1, r3
 8000d12:	2904      	cmp	r1, #4
 8000d14:	d000      	beq.n	8000d18 <__aeabi_fsub+0xe0>
 8000d16:	3304      	adds	r3, #4
 8000d18:	0159      	lsls	r1, r3, #5
 8000d1a:	d550      	bpl.n	8000dbe <__aeabi_fsub+0x186>
 8000d1c:	1c50      	adds	r0, r2, #1
 8000d1e:	2afe      	cmp	r2, #254	@ 0xfe
 8000d20:	d045      	beq.n	8000dae <__aeabi_fsub+0x176>
 8000d22:	019b      	lsls	r3, r3, #6
 8000d24:	b2c0      	uxtb	r0, r0
 8000d26:	0a5b      	lsrs	r3, r3, #9
 8000d28:	05c0      	lsls	r0, r0, #23
 8000d2a:	4318      	orrs	r0, r3
 8000d2c:	07e4      	lsls	r4, r4, #31
 8000d2e:	4320      	orrs	r0, r4
 8000d30:	bcc0      	pop	{r6, r7}
 8000d32:	46b9      	mov	r9, r7
 8000d34:	46b0      	mov	r8, r6
 8000d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4051      	eors	r1, r2
 8000d3c:	428c      	cmp	r4, r1
 8000d3e:	d1ba      	bne.n	8000cb6 <__aeabi_fsub+0x7e>
 8000d40:	464a      	mov	r2, r9
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d010      	beq.n	8000d68 <__aeabi_fsub+0x130>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x114>
 8000d4a:	e098      	b.n	8000e7e <__aeabi_fsub+0x246>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e7bb      	b.n	8000cc8 <__aeabi_fsub+0x90>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d034      	beq.n	8000dbe <__aeabi_fsub+0x186>
 8000d54:	1e51      	subs	r1, r2, #1
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d06e      	beq.n	8000e38 <__aeabi_fsub+0x200>
 8000d5a:	2aff      	cmp	r2, #255	@ 0xff
 8000d5c:	d0b4      	beq.n	8000cc8 <__aeabi_fsub+0x90>
 8000d5e:	000a      	movs	r2, r1
 8000d60:	e79c      	b.n	8000c9c <__aeabi_fsub+0x64>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d000      	beq.n	8000d68 <__aeabi_fsub+0x130>
 8000d66:	e088      	b.n	8000e7a <__aeabi_fsub+0x242>
 8000d68:	20fe      	movs	r0, #254	@ 0xfe
 8000d6a:	1c6a      	adds	r2, r5, #1
 8000d6c:	4210      	tst	r0, r2
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_fsub+0x13a>
 8000d70:	e092      	b.n	8000e98 <__aeabi_fsub+0x260>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d000      	beq.n	8000d78 <__aeabi_fsub+0x140>
 8000d76:	e0a4      	b.n	8000ec2 <__aeabi_fsub+0x28a>
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_fsub+0x146>
 8000d7c:	e0cb      	b.n	8000f16 <__aeabi_fsub+0x2de>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d000      	beq.n	8000d84 <__aeabi_fsub+0x14c>
 8000d82:	e0ca      	b.n	8000f1a <__aeabi_fsub+0x2e2>
 8000d84:	2200      	movs	r2, #0
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	025b      	lsls	r3, r3, #9
 8000d8a:	0a5b      	lsrs	r3, r3, #9
 8000d8c:	b2d0      	uxtb	r0, r2
 8000d8e:	e7cb      	b.n	8000d28 <__aeabi_fsub+0xf0>
 8000d90:	0031      	movs	r1, r6
 8000d92:	2020      	movs	r0, #32
 8000d94:	40d1      	lsrs	r1, r2
 8000d96:	1a82      	subs	r2, r0, r2
 8000d98:	4096      	lsls	r6, r2
 8000d9a:	0032      	movs	r2, r6
 8000d9c:	1e50      	subs	r0, r2, #1
 8000d9e:	4182      	sbcs	r2, r0
 8000da0:	430a      	orrs	r2, r1
 8000da2:	189b      	adds	r3, r3, r2
 8000da4:	015a      	lsls	r2, r3, #5
 8000da6:	d5ae      	bpl.n	8000d06 <__aeabi_fsub+0xce>
 8000da8:	1c6a      	adds	r2, r5, #1
 8000daa:	2dfe      	cmp	r5, #254	@ 0xfe
 8000dac:	d14a      	bne.n	8000e44 <__aeabi_fsub+0x20c>
 8000dae:	20ff      	movs	r0, #255	@ 0xff
 8000db0:	2300      	movs	r3, #0
 8000db2:	e7b9      	b.n	8000d28 <__aeabi_fsub+0xf0>
 8000db4:	22ff      	movs	r2, #255	@ 0xff
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d14b      	bne.n	8000e52 <__aeabi_fsub+0x21a>
 8000dba:	000c      	movs	r4, r1
 8000dbc:	0033      	movs	r3, r6
 8000dbe:	08db      	lsrs	r3, r3, #3
 8000dc0:	2aff      	cmp	r2, #255	@ 0xff
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x18e>
 8000dc4:	e781      	b.n	8000cca <__aeabi_fsub+0x92>
 8000dc6:	e7df      	b.n	8000d88 <__aeabi_fsub+0x150>
 8000dc8:	019f      	lsls	r7, r3, #6
 8000dca:	09bf      	lsrs	r7, r7, #6
 8000dcc:	0038      	movs	r0, r7
 8000dce:	f002 f815 	bl	8002dfc <__clzsi2>
 8000dd2:	3805      	subs	r0, #5
 8000dd4:	4087      	lsls	r7, r0
 8000dd6:	4285      	cmp	r5, r0
 8000dd8:	dc21      	bgt.n	8000e1e <__aeabi_fsub+0x1e6>
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2120      	movs	r1, #32
 8000dde:	1b42      	subs	r2, r0, r5
 8000de0:	3201      	adds	r2, #1
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	4097      	lsls	r7, r2
 8000de8:	1e7a      	subs	r2, r7, #1
 8000dea:	4197      	sbcs	r7, r2
 8000dec:	2200      	movs	r2, #0
 8000dee:	433b      	orrs	r3, r7
 8000df0:	0759      	lsls	r1, r3, #29
 8000df2:	d000      	beq.n	8000df6 <__aeabi_fsub+0x1be>
 8000df4:	e78b      	b.n	8000d0e <__aeabi_fsub+0xd6>
 8000df6:	e78f      	b.n	8000d18 <__aeabi_fsub+0xe0>
 8000df8:	20fe      	movs	r0, #254	@ 0xfe
 8000dfa:	1c6a      	adds	r2, r5, #1
 8000dfc:	4210      	tst	r0, r2
 8000dfe:	d112      	bne.n	8000e26 <__aeabi_fsub+0x1ee>
 8000e00:	2d00      	cmp	r5, #0
 8000e02:	d152      	bne.n	8000eaa <__aeabi_fsub+0x272>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d07c      	beq.n	8000f02 <__aeabi_fsub+0x2ca>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d0bb      	beq.n	8000d84 <__aeabi_fsub+0x14c>
 8000e0c:	1b9a      	subs	r2, r3, r6
 8000e0e:	0150      	lsls	r0, r2, #5
 8000e10:	d400      	bmi.n	8000e14 <__aeabi_fsub+0x1dc>
 8000e12:	e08b      	b.n	8000f2c <__aeabi_fsub+0x2f4>
 8000e14:	2401      	movs	r4, #1
 8000e16:	2200      	movs	r2, #0
 8000e18:	1af3      	subs	r3, r6, r3
 8000e1a:	400c      	ands	r4, r1
 8000e1c:	e7e8      	b.n	8000df0 <__aeabi_fsub+0x1b8>
 8000e1e:	4b56      	ldr	r3, [pc, #344]	@ (8000f78 <__aeabi_fsub+0x340>)
 8000e20:	1a2a      	subs	r2, r5, r0
 8000e22:	403b      	ands	r3, r7
 8000e24:	e7e4      	b.n	8000df0 <__aeabi_fsub+0x1b8>
 8000e26:	1b9f      	subs	r7, r3, r6
 8000e28:	017a      	lsls	r2, r7, #5
 8000e2a:	d446      	bmi.n	8000eba <__aeabi_fsub+0x282>
 8000e2c:	2f00      	cmp	r7, #0
 8000e2e:	d1cd      	bne.n	8000dcc <__aeabi_fsub+0x194>
 8000e30:	2400      	movs	r4, #0
 8000e32:	2000      	movs	r0, #0
 8000e34:	2300      	movs	r3, #0
 8000e36:	e777      	b.n	8000d28 <__aeabi_fsub+0xf0>
 8000e38:	199b      	adds	r3, r3, r6
 8000e3a:	2501      	movs	r5, #1
 8000e3c:	3201      	adds	r2, #1
 8000e3e:	0159      	lsls	r1, r3, #5
 8000e40:	d400      	bmi.n	8000e44 <__aeabi_fsub+0x20c>
 8000e42:	e760      	b.n	8000d06 <__aeabi_fsub+0xce>
 8000e44:	2101      	movs	r1, #1
 8000e46:	484d      	ldr	r0, [pc, #308]	@ (8000f7c <__aeabi_fsub+0x344>)
 8000e48:	4019      	ands	r1, r3
 8000e4a:	085b      	lsrs	r3, r3, #1
 8000e4c:	4003      	ands	r3, r0
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	e7ce      	b.n	8000df0 <__aeabi_fsub+0x1b8>
 8000e52:	1e57      	subs	r7, r2, #1
 8000e54:	2a01      	cmp	r2, #1
 8000e56:	d05a      	beq.n	8000f0e <__aeabi_fsub+0x2d6>
 8000e58:	000c      	movs	r4, r1
 8000e5a:	2aff      	cmp	r2, #255	@ 0xff
 8000e5c:	d033      	beq.n	8000ec6 <__aeabi_fsub+0x28e>
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2f1b      	cmp	r7, #27
 8000e62:	dc07      	bgt.n	8000e74 <__aeabi_fsub+0x23c>
 8000e64:	2120      	movs	r1, #32
 8000e66:	1bc9      	subs	r1, r1, r7
 8000e68:	001a      	movs	r2, r3
 8000e6a:	408b      	lsls	r3, r1
 8000e6c:	40fa      	lsrs	r2, r7
 8000e6e:	1e59      	subs	r1, r3, #1
 8000e70:	418b      	sbcs	r3, r1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	0005      	movs	r5, r0
 8000e76:	1ab3      	subs	r3, r6, r2
 8000e78:	e743      	b.n	8000d02 <__aeabi_fsub+0xca>
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d123      	bne.n	8000ec6 <__aeabi_fsub+0x28e>
 8000e7e:	22ff      	movs	r2, #255	@ 0xff
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d09b      	beq.n	8000dbc <__aeabi_fsub+0x184>
 8000e84:	1e51      	subs	r1, r2, #1
 8000e86:	2a01      	cmp	r2, #1
 8000e88:	d0d6      	beq.n	8000e38 <__aeabi_fsub+0x200>
 8000e8a:	2aff      	cmp	r2, #255	@ 0xff
 8000e8c:	d01b      	beq.n	8000ec6 <__aeabi_fsub+0x28e>
 8000e8e:	291b      	cmp	r1, #27
 8000e90:	dd2c      	ble.n	8000eec <__aeabi_fsub+0x2b4>
 8000e92:	0002      	movs	r2, r0
 8000e94:	1c73      	adds	r3, r6, #1
 8000e96:	e73a      	b.n	8000d0e <__aeabi_fsub+0xd6>
 8000e98:	2aff      	cmp	r2, #255	@ 0xff
 8000e9a:	d088      	beq.n	8000dae <__aeabi_fsub+0x176>
 8000e9c:	199b      	adds	r3, r3, r6
 8000e9e:	085b      	lsrs	r3, r3, #1
 8000ea0:	0759      	lsls	r1, r3, #29
 8000ea2:	d000      	beq.n	8000ea6 <__aeabi_fsub+0x26e>
 8000ea4:	e733      	b.n	8000d0e <__aeabi_fsub+0xd6>
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	e76e      	b.n	8000d88 <__aeabi_fsub+0x150>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d110      	bne.n	8000ed0 <__aeabi_fsub+0x298>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	d043      	beq.n	8000f3a <__aeabi_fsub+0x302>
 8000eb2:	2401      	movs	r4, #1
 8000eb4:	0033      	movs	r3, r6
 8000eb6:	400c      	ands	r4, r1
 8000eb8:	e706      	b.n	8000cc8 <__aeabi_fsub+0x90>
 8000eba:	2401      	movs	r4, #1
 8000ebc:	1af7      	subs	r7, r6, r3
 8000ebe:	400c      	ands	r4, r1
 8000ec0:	e784      	b.n	8000dcc <__aeabi_fsub+0x194>
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <__aeabi_fsub+0x298>
 8000ec6:	0033      	movs	r3, r6
 8000ec8:	e6fe      	b.n	8000cc8 <__aeabi_fsub+0x90>
 8000eca:	2501      	movs	r5, #1
 8000ecc:	1b9b      	subs	r3, r3, r6
 8000ece:	e718      	b.n	8000d02 <__aeabi_fsub+0xca>
 8000ed0:	2e00      	cmp	r6, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x29e>
 8000ed4:	e6f8      	b.n	8000cc8 <__aeabi_fsub+0x90>
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	03d2      	lsls	r2, r2, #15
 8000eda:	4297      	cmp	r7, r2
 8000edc:	d304      	bcc.n	8000ee8 <__aeabi_fsub+0x2b0>
 8000ede:	4594      	cmp	ip, r2
 8000ee0:	d202      	bcs.n	8000ee8 <__aeabi_fsub+0x2b0>
 8000ee2:	2401      	movs	r4, #1
 8000ee4:	0033      	movs	r3, r6
 8000ee6:	400c      	ands	r4, r1
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	e6f1      	b.n	8000cd0 <__aeabi_fsub+0x98>
 8000eec:	001a      	movs	r2, r3
 8000eee:	2520      	movs	r5, #32
 8000ef0:	40ca      	lsrs	r2, r1
 8000ef2:	1a69      	subs	r1, r5, r1
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	1e59      	subs	r1, r3, #1
 8000ef8:	418b      	sbcs	r3, r1
 8000efa:	4313      	orrs	r3, r2
 8000efc:	0005      	movs	r5, r0
 8000efe:	199b      	adds	r3, r3, r6
 8000f00:	e750      	b.n	8000da4 <__aeabi_fsub+0x16c>
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d094      	beq.n	8000e30 <__aeabi_fsub+0x1f8>
 8000f06:	2401      	movs	r4, #1
 8000f08:	0033      	movs	r3, r6
 8000f0a:	400c      	ands	r4, r1
 8000f0c:	e73a      	b.n	8000d84 <__aeabi_fsub+0x14c>
 8000f0e:	000c      	movs	r4, r1
 8000f10:	2501      	movs	r5, #1
 8000f12:	1af3      	subs	r3, r6, r3
 8000f14:	e6f5      	b.n	8000d02 <__aeabi_fsub+0xca>
 8000f16:	0033      	movs	r3, r6
 8000f18:	e734      	b.n	8000d84 <__aeabi_fsub+0x14c>
 8000f1a:	199b      	adds	r3, r3, r6
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	0159      	lsls	r1, r3, #5
 8000f20:	d5c1      	bpl.n	8000ea6 <__aeabi_fsub+0x26e>
 8000f22:	4a15      	ldr	r2, [pc, #84]	@ (8000f78 <__aeabi_fsub+0x340>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	08db      	lsrs	r3, r3, #3
 8000f28:	2201      	movs	r2, #1
 8000f2a:	e72d      	b.n	8000d88 <__aeabi_fsub+0x150>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x2fa>
 8000f30:	e77e      	b.n	8000e30 <__aeabi_fsub+0x1f8>
 8000f32:	0013      	movs	r3, r2
 8000f34:	2200      	movs	r2, #0
 8000f36:	08db      	lsrs	r3, r3, #3
 8000f38:	e726      	b.n	8000d88 <__aeabi_fsub+0x150>
 8000f3a:	2380      	movs	r3, #128	@ 0x80
 8000f3c:	2400      	movs	r4, #0
 8000f3e:	20ff      	movs	r0, #255	@ 0xff
 8000f40:	03db      	lsls	r3, r3, #15
 8000f42:	e6f1      	b.n	8000d28 <__aeabi_fsub+0xf0>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d100      	bne.n	8000f4a <__aeabi_fsub+0x312>
 8000f48:	e756      	b.n	8000df8 <__aeabi_fsub+0x1c0>
 8000f4a:	1b47      	subs	r7, r0, r5
 8000f4c:	003a      	movs	r2, r7
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x31c>
 8000f52:	e730      	b.n	8000db6 <__aeabi_fsub+0x17e>
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	04d2      	lsls	r2, r2, #19
 8000f58:	000c      	movs	r4, r1
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	e77f      	b.n	8000e5e <__aeabi_fsub+0x226>
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x32c>
 8000f62:	e701      	b.n	8000d68 <__aeabi_fsub+0x130>
 8000f64:	1b41      	subs	r1, r0, r5
 8000f66:	2d00      	cmp	r5, #0
 8000f68:	d101      	bne.n	8000f6e <__aeabi_fsub+0x336>
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	e788      	b.n	8000e80 <__aeabi_fsub+0x248>
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	04d2      	lsls	r2, r2, #19
 8000f72:	4313      	orrs	r3, r2
 8000f74:	e78b      	b.n	8000e8e <__aeabi_fsub+0x256>
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	fbffffff 	.word	0xfbffffff
 8000f7c:	7dffffff 	.word	0x7dffffff

08000f80 <__aeabi_f2iz>:
 8000f80:	0241      	lsls	r1, r0, #9
 8000f82:	0042      	lsls	r2, r0, #1
 8000f84:	0fc3      	lsrs	r3, r0, #31
 8000f86:	0a49      	lsrs	r1, r1, #9
 8000f88:	2000      	movs	r0, #0
 8000f8a:	0e12      	lsrs	r2, r2, #24
 8000f8c:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f8e:	dd03      	ble.n	8000f98 <__aeabi_f2iz+0x18>
 8000f90:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f92:	dd02      	ble.n	8000f9a <__aeabi_f2iz+0x1a>
 8000f94:	4a09      	ldr	r2, [pc, #36]	@ (8000fbc <__aeabi_f2iz+0x3c>)
 8000f96:	1898      	adds	r0, r3, r2
 8000f98:	4770      	bx	lr
 8000f9a:	2080      	movs	r0, #128	@ 0x80
 8000f9c:	0400      	lsls	r0, r0, #16
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	2a95      	cmp	r2, #149	@ 0x95
 8000fa2:	dc07      	bgt.n	8000fb4 <__aeabi_f2iz+0x34>
 8000fa4:	2096      	movs	r0, #150	@ 0x96
 8000fa6:	1a82      	subs	r2, r0, r2
 8000fa8:	40d1      	lsrs	r1, r2
 8000faa:	4248      	negs	r0, r1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1f3      	bne.n	8000f98 <__aeabi_f2iz+0x18>
 8000fb0:	0008      	movs	r0, r1
 8000fb2:	e7f1      	b.n	8000f98 <__aeabi_f2iz+0x18>
 8000fb4:	3a96      	subs	r2, #150	@ 0x96
 8000fb6:	4091      	lsls	r1, r2
 8000fb8:	e7f7      	b.n	8000faa <__aeabi_f2iz+0x2a>
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	7fffffff 	.word	0x7fffffff

08000fc0 <__aeabi_dadd>:
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	4657      	mov	r7, sl
 8000fc4:	464e      	mov	r6, r9
 8000fc6:	4645      	mov	r5, r8
 8000fc8:	46de      	mov	lr, fp
 8000fca:	b5e0      	push	{r5, r6, r7, lr}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	9000      	str	r0, [sp, #0]
 8000fd0:	9101      	str	r1, [sp, #4]
 8000fd2:	030c      	lsls	r4, r1, #12
 8000fd4:	004f      	lsls	r7, r1, #1
 8000fd6:	0fce      	lsrs	r6, r1, #31
 8000fd8:	0a61      	lsrs	r1, r4, #9
 8000fda:	9c00      	ldr	r4, [sp, #0]
 8000fdc:	031d      	lsls	r5, r3, #12
 8000fde:	0f64      	lsrs	r4, r4, #29
 8000fe0:	430c      	orrs	r4, r1
 8000fe2:	9900      	ldr	r1, [sp, #0]
 8000fe4:	9200      	str	r2, [sp, #0]
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	00c8      	lsls	r0, r1, #3
 8000fea:	0059      	lsls	r1, r3, #1
 8000fec:	0d4b      	lsrs	r3, r1, #21
 8000fee:	4699      	mov	r9, r3
 8000ff0:	9a00      	ldr	r2, [sp, #0]
 8000ff2:	9b01      	ldr	r3, [sp, #4]
 8000ff4:	0a6d      	lsrs	r5, r5, #9
 8000ff6:	0fd9      	lsrs	r1, r3, #31
 8000ff8:	0f53      	lsrs	r3, r2, #29
 8000ffa:	432b      	orrs	r3, r5
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	0d7f      	lsrs	r7, r7, #21
 8001002:	00da      	lsls	r2, r3, #3
 8001004:	4694      	mov	ip, r2
 8001006:	464a      	mov	r2, r9
 8001008:	46b0      	mov	r8, r6
 800100a:	1aba      	subs	r2, r7, r2
 800100c:	428e      	cmp	r6, r1
 800100e:	d100      	bne.n	8001012 <__aeabi_dadd+0x52>
 8001010:	e0b0      	b.n	8001174 <__aeabi_dadd+0x1b4>
 8001012:	2a00      	cmp	r2, #0
 8001014:	dc00      	bgt.n	8001018 <__aeabi_dadd+0x58>
 8001016:	e078      	b.n	800110a <__aeabi_dadd+0x14a>
 8001018:	4649      	mov	r1, r9
 800101a:	2900      	cmp	r1, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_dadd+0x60>
 800101e:	e0e9      	b.n	80011f4 <__aeabi_dadd+0x234>
 8001020:	49c9      	ldr	r1, [pc, #804]	@ (8001348 <__aeabi_dadd+0x388>)
 8001022:	428f      	cmp	r7, r1
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x68>
 8001026:	e195      	b.n	8001354 <__aeabi_dadd+0x394>
 8001028:	2501      	movs	r5, #1
 800102a:	2a38      	cmp	r2, #56	@ 0x38
 800102c:	dc16      	bgt.n	800105c <__aeabi_dadd+0x9c>
 800102e:	2180      	movs	r1, #128	@ 0x80
 8001030:	4653      	mov	r3, sl
 8001032:	0409      	lsls	r1, r1, #16
 8001034:	430b      	orrs	r3, r1
 8001036:	469a      	mov	sl, r3
 8001038:	2a1f      	cmp	r2, #31
 800103a:	dd00      	ble.n	800103e <__aeabi_dadd+0x7e>
 800103c:	e1e7      	b.n	800140e <__aeabi_dadd+0x44e>
 800103e:	2120      	movs	r1, #32
 8001040:	4655      	mov	r5, sl
 8001042:	1a8b      	subs	r3, r1, r2
 8001044:	4661      	mov	r1, ip
 8001046:	409d      	lsls	r5, r3
 8001048:	40d1      	lsrs	r1, r2
 800104a:	430d      	orrs	r5, r1
 800104c:	4661      	mov	r1, ip
 800104e:	4099      	lsls	r1, r3
 8001050:	1e4b      	subs	r3, r1, #1
 8001052:	4199      	sbcs	r1, r3
 8001054:	4653      	mov	r3, sl
 8001056:	40d3      	lsrs	r3, r2
 8001058:	430d      	orrs	r5, r1
 800105a:	1ae4      	subs	r4, r4, r3
 800105c:	1b45      	subs	r5, r0, r5
 800105e:	42a8      	cmp	r0, r5
 8001060:	4180      	sbcs	r0, r0
 8001062:	4240      	negs	r0, r0
 8001064:	1a24      	subs	r4, r4, r0
 8001066:	0223      	lsls	r3, r4, #8
 8001068:	d400      	bmi.n	800106c <__aeabi_dadd+0xac>
 800106a:	e10f      	b.n	800128c <__aeabi_dadd+0x2cc>
 800106c:	0264      	lsls	r4, r4, #9
 800106e:	0a64      	lsrs	r4, r4, #9
 8001070:	2c00      	cmp	r4, #0
 8001072:	d100      	bne.n	8001076 <__aeabi_dadd+0xb6>
 8001074:	e139      	b.n	80012ea <__aeabi_dadd+0x32a>
 8001076:	0020      	movs	r0, r4
 8001078:	f001 fec0 	bl	8002dfc <__clzsi2>
 800107c:	0003      	movs	r3, r0
 800107e:	3b08      	subs	r3, #8
 8001080:	2120      	movs	r1, #32
 8001082:	0028      	movs	r0, r5
 8001084:	1aca      	subs	r2, r1, r3
 8001086:	40d0      	lsrs	r0, r2
 8001088:	409c      	lsls	r4, r3
 800108a:	0002      	movs	r2, r0
 800108c:	409d      	lsls	r5, r3
 800108e:	4322      	orrs	r2, r4
 8001090:	429f      	cmp	r7, r3
 8001092:	dd00      	ble.n	8001096 <__aeabi_dadd+0xd6>
 8001094:	e173      	b.n	800137e <__aeabi_dadd+0x3be>
 8001096:	1bd8      	subs	r0, r3, r7
 8001098:	3001      	adds	r0, #1
 800109a:	1a09      	subs	r1, r1, r0
 800109c:	002c      	movs	r4, r5
 800109e:	408d      	lsls	r5, r1
 80010a0:	40c4      	lsrs	r4, r0
 80010a2:	1e6b      	subs	r3, r5, #1
 80010a4:	419d      	sbcs	r5, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	40c2      	lsrs	r2, r0
 80010aa:	408b      	lsls	r3, r1
 80010ac:	4325      	orrs	r5, r4
 80010ae:	2700      	movs	r7, #0
 80010b0:	0014      	movs	r4, r2
 80010b2:	431d      	orrs	r5, r3
 80010b4:	076b      	lsls	r3, r5, #29
 80010b6:	d009      	beq.n	80010cc <__aeabi_dadd+0x10c>
 80010b8:	230f      	movs	r3, #15
 80010ba:	402b      	ands	r3, r5
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d005      	beq.n	80010cc <__aeabi_dadd+0x10c>
 80010c0:	1d2b      	adds	r3, r5, #4
 80010c2:	42ab      	cmp	r3, r5
 80010c4:	41ad      	sbcs	r5, r5
 80010c6:	426d      	negs	r5, r5
 80010c8:	1964      	adds	r4, r4, r5
 80010ca:	001d      	movs	r5, r3
 80010cc:	0223      	lsls	r3, r4, #8
 80010ce:	d400      	bmi.n	80010d2 <__aeabi_dadd+0x112>
 80010d0:	e12d      	b.n	800132e <__aeabi_dadd+0x36e>
 80010d2:	4a9d      	ldr	r2, [pc, #628]	@ (8001348 <__aeabi_dadd+0x388>)
 80010d4:	3701      	adds	r7, #1
 80010d6:	4297      	cmp	r7, r2
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x11c>
 80010da:	e0d3      	b.n	8001284 <__aeabi_dadd+0x2c4>
 80010dc:	4646      	mov	r6, r8
 80010de:	499b      	ldr	r1, [pc, #620]	@ (800134c <__aeabi_dadd+0x38c>)
 80010e0:	08ed      	lsrs	r5, r5, #3
 80010e2:	4021      	ands	r1, r4
 80010e4:	074a      	lsls	r2, r1, #29
 80010e6:	432a      	orrs	r2, r5
 80010e8:	057c      	lsls	r4, r7, #21
 80010ea:	024d      	lsls	r5, r1, #9
 80010ec:	0b2d      	lsrs	r5, r5, #12
 80010ee:	0d64      	lsrs	r4, r4, #21
 80010f0:	0524      	lsls	r4, r4, #20
 80010f2:	432c      	orrs	r4, r5
 80010f4:	07f6      	lsls	r6, r6, #31
 80010f6:	4334      	orrs	r4, r6
 80010f8:	0010      	movs	r0, r2
 80010fa:	0021      	movs	r1, r4
 80010fc:	b003      	add	sp, #12
 80010fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001100:	46bb      	mov	fp, r7
 8001102:	46b2      	mov	sl, r6
 8001104:	46a9      	mov	r9, r5
 8001106:	46a0      	mov	r8, r4
 8001108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110a:	2a00      	cmp	r2, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_dadd+0x150>
 800110e:	e084      	b.n	800121a <__aeabi_dadd+0x25a>
 8001110:	464a      	mov	r2, r9
 8001112:	1bd2      	subs	r2, r2, r7
 8001114:	2f00      	cmp	r7, #0
 8001116:	d000      	beq.n	800111a <__aeabi_dadd+0x15a>
 8001118:	e16d      	b.n	80013f6 <__aeabi_dadd+0x436>
 800111a:	0025      	movs	r5, r4
 800111c:	4305      	orrs	r5, r0
 800111e:	d100      	bne.n	8001122 <__aeabi_dadd+0x162>
 8001120:	e127      	b.n	8001372 <__aeabi_dadd+0x3b2>
 8001122:	1e56      	subs	r6, r2, #1
 8001124:	2a01      	cmp	r2, #1
 8001126:	d100      	bne.n	800112a <__aeabi_dadd+0x16a>
 8001128:	e23b      	b.n	80015a2 <__aeabi_dadd+0x5e2>
 800112a:	4d87      	ldr	r5, [pc, #540]	@ (8001348 <__aeabi_dadd+0x388>)
 800112c:	42aa      	cmp	r2, r5
 800112e:	d100      	bne.n	8001132 <__aeabi_dadd+0x172>
 8001130:	e26a      	b.n	8001608 <__aeabi_dadd+0x648>
 8001132:	2501      	movs	r5, #1
 8001134:	2e38      	cmp	r6, #56	@ 0x38
 8001136:	dc12      	bgt.n	800115e <__aeabi_dadd+0x19e>
 8001138:	0032      	movs	r2, r6
 800113a:	2a1f      	cmp	r2, #31
 800113c:	dd00      	ble.n	8001140 <__aeabi_dadd+0x180>
 800113e:	e1f8      	b.n	8001532 <__aeabi_dadd+0x572>
 8001140:	2620      	movs	r6, #32
 8001142:	0025      	movs	r5, r4
 8001144:	1ab6      	subs	r6, r6, r2
 8001146:	0007      	movs	r7, r0
 8001148:	4653      	mov	r3, sl
 800114a:	40b0      	lsls	r0, r6
 800114c:	40d4      	lsrs	r4, r2
 800114e:	40b5      	lsls	r5, r6
 8001150:	40d7      	lsrs	r7, r2
 8001152:	1e46      	subs	r6, r0, #1
 8001154:	41b0      	sbcs	r0, r6
 8001156:	1b1b      	subs	r3, r3, r4
 8001158:	469a      	mov	sl, r3
 800115a:	433d      	orrs	r5, r7
 800115c:	4305      	orrs	r5, r0
 800115e:	4662      	mov	r2, ip
 8001160:	1b55      	subs	r5, r2, r5
 8001162:	45ac      	cmp	ip, r5
 8001164:	4192      	sbcs	r2, r2
 8001166:	4653      	mov	r3, sl
 8001168:	4252      	negs	r2, r2
 800116a:	000e      	movs	r6, r1
 800116c:	464f      	mov	r7, r9
 800116e:	4688      	mov	r8, r1
 8001170:	1a9c      	subs	r4, r3, r2
 8001172:	e778      	b.n	8001066 <__aeabi_dadd+0xa6>
 8001174:	2a00      	cmp	r2, #0
 8001176:	dc00      	bgt.n	800117a <__aeabi_dadd+0x1ba>
 8001178:	e08e      	b.n	8001298 <__aeabi_dadd+0x2d8>
 800117a:	4649      	mov	r1, r9
 800117c:	2900      	cmp	r1, #0
 800117e:	d175      	bne.n	800126c <__aeabi_dadd+0x2ac>
 8001180:	4661      	mov	r1, ip
 8001182:	4653      	mov	r3, sl
 8001184:	4319      	orrs	r1, r3
 8001186:	d100      	bne.n	800118a <__aeabi_dadd+0x1ca>
 8001188:	e0f6      	b.n	8001378 <__aeabi_dadd+0x3b8>
 800118a:	1e51      	subs	r1, r2, #1
 800118c:	2a01      	cmp	r2, #1
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x1d2>
 8001190:	e191      	b.n	80014b6 <__aeabi_dadd+0x4f6>
 8001192:	4d6d      	ldr	r5, [pc, #436]	@ (8001348 <__aeabi_dadd+0x388>)
 8001194:	42aa      	cmp	r2, r5
 8001196:	d100      	bne.n	800119a <__aeabi_dadd+0x1da>
 8001198:	e0dc      	b.n	8001354 <__aeabi_dadd+0x394>
 800119a:	2501      	movs	r5, #1
 800119c:	2938      	cmp	r1, #56	@ 0x38
 800119e:	dc14      	bgt.n	80011ca <__aeabi_dadd+0x20a>
 80011a0:	000a      	movs	r2, r1
 80011a2:	2a1f      	cmp	r2, #31
 80011a4:	dd00      	ble.n	80011a8 <__aeabi_dadd+0x1e8>
 80011a6:	e1a2      	b.n	80014ee <__aeabi_dadd+0x52e>
 80011a8:	2120      	movs	r1, #32
 80011aa:	4653      	mov	r3, sl
 80011ac:	1a89      	subs	r1, r1, r2
 80011ae:	408b      	lsls	r3, r1
 80011b0:	001d      	movs	r5, r3
 80011b2:	4663      	mov	r3, ip
 80011b4:	40d3      	lsrs	r3, r2
 80011b6:	431d      	orrs	r5, r3
 80011b8:	4663      	mov	r3, ip
 80011ba:	408b      	lsls	r3, r1
 80011bc:	0019      	movs	r1, r3
 80011be:	1e4b      	subs	r3, r1, #1
 80011c0:	4199      	sbcs	r1, r3
 80011c2:	4653      	mov	r3, sl
 80011c4:	40d3      	lsrs	r3, r2
 80011c6:	430d      	orrs	r5, r1
 80011c8:	18e4      	adds	r4, r4, r3
 80011ca:	182d      	adds	r5, r5, r0
 80011cc:	4285      	cmp	r5, r0
 80011ce:	4180      	sbcs	r0, r0
 80011d0:	4240      	negs	r0, r0
 80011d2:	1824      	adds	r4, r4, r0
 80011d4:	0223      	lsls	r3, r4, #8
 80011d6:	d559      	bpl.n	800128c <__aeabi_dadd+0x2cc>
 80011d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001348 <__aeabi_dadd+0x388>)
 80011da:	3701      	adds	r7, #1
 80011dc:	429f      	cmp	r7, r3
 80011de:	d051      	beq.n	8001284 <__aeabi_dadd+0x2c4>
 80011e0:	2101      	movs	r1, #1
 80011e2:	4b5a      	ldr	r3, [pc, #360]	@ (800134c <__aeabi_dadd+0x38c>)
 80011e4:	086a      	lsrs	r2, r5, #1
 80011e6:	401c      	ands	r4, r3
 80011e8:	4029      	ands	r1, r5
 80011ea:	430a      	orrs	r2, r1
 80011ec:	07e5      	lsls	r5, r4, #31
 80011ee:	4315      	orrs	r5, r2
 80011f0:	0864      	lsrs	r4, r4, #1
 80011f2:	e75f      	b.n	80010b4 <__aeabi_dadd+0xf4>
 80011f4:	4661      	mov	r1, ip
 80011f6:	4653      	mov	r3, sl
 80011f8:	4319      	orrs	r1, r3
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x23e>
 80011fc:	e0bc      	b.n	8001378 <__aeabi_dadd+0x3b8>
 80011fe:	1e51      	subs	r1, r2, #1
 8001200:	2a01      	cmp	r2, #1
 8001202:	d100      	bne.n	8001206 <__aeabi_dadd+0x246>
 8001204:	e164      	b.n	80014d0 <__aeabi_dadd+0x510>
 8001206:	4d50      	ldr	r5, [pc, #320]	@ (8001348 <__aeabi_dadd+0x388>)
 8001208:	42aa      	cmp	r2, r5
 800120a:	d100      	bne.n	800120e <__aeabi_dadd+0x24e>
 800120c:	e16a      	b.n	80014e4 <__aeabi_dadd+0x524>
 800120e:	2501      	movs	r5, #1
 8001210:	2938      	cmp	r1, #56	@ 0x38
 8001212:	dd00      	ble.n	8001216 <__aeabi_dadd+0x256>
 8001214:	e722      	b.n	800105c <__aeabi_dadd+0x9c>
 8001216:	000a      	movs	r2, r1
 8001218:	e70e      	b.n	8001038 <__aeabi_dadd+0x78>
 800121a:	4a4d      	ldr	r2, [pc, #308]	@ (8001350 <__aeabi_dadd+0x390>)
 800121c:	1c7d      	adds	r5, r7, #1
 800121e:	4215      	tst	r5, r2
 8001220:	d000      	beq.n	8001224 <__aeabi_dadd+0x264>
 8001222:	e0d0      	b.n	80013c6 <__aeabi_dadd+0x406>
 8001224:	0025      	movs	r5, r4
 8001226:	4662      	mov	r2, ip
 8001228:	4653      	mov	r3, sl
 800122a:	4305      	orrs	r5, r0
 800122c:	431a      	orrs	r2, r3
 800122e:	2f00      	cmp	r7, #0
 8001230:	d000      	beq.n	8001234 <__aeabi_dadd+0x274>
 8001232:	e137      	b.n	80014a4 <__aeabi_dadd+0x4e4>
 8001234:	2d00      	cmp	r5, #0
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x27a>
 8001238:	e1a8      	b.n	800158c <__aeabi_dadd+0x5cc>
 800123a:	2a00      	cmp	r2, #0
 800123c:	d100      	bne.n	8001240 <__aeabi_dadd+0x280>
 800123e:	e16a      	b.n	8001516 <__aeabi_dadd+0x556>
 8001240:	4663      	mov	r3, ip
 8001242:	1ac5      	subs	r5, r0, r3
 8001244:	4653      	mov	r3, sl
 8001246:	1ae2      	subs	r2, r4, r3
 8001248:	42a8      	cmp	r0, r5
 800124a:	419b      	sbcs	r3, r3
 800124c:	425b      	negs	r3, r3
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	021a      	lsls	r2, r3, #8
 8001252:	d400      	bmi.n	8001256 <__aeabi_dadd+0x296>
 8001254:	e203      	b.n	800165e <__aeabi_dadd+0x69e>
 8001256:	4663      	mov	r3, ip
 8001258:	1a1d      	subs	r5, r3, r0
 800125a:	45ac      	cmp	ip, r5
 800125c:	4192      	sbcs	r2, r2
 800125e:	4653      	mov	r3, sl
 8001260:	4252      	negs	r2, r2
 8001262:	1b1c      	subs	r4, r3, r4
 8001264:	000e      	movs	r6, r1
 8001266:	4688      	mov	r8, r1
 8001268:	1aa4      	subs	r4, r4, r2
 800126a:	e723      	b.n	80010b4 <__aeabi_dadd+0xf4>
 800126c:	4936      	ldr	r1, [pc, #216]	@ (8001348 <__aeabi_dadd+0x388>)
 800126e:	428f      	cmp	r7, r1
 8001270:	d070      	beq.n	8001354 <__aeabi_dadd+0x394>
 8001272:	2501      	movs	r5, #1
 8001274:	2a38      	cmp	r2, #56	@ 0x38
 8001276:	dca8      	bgt.n	80011ca <__aeabi_dadd+0x20a>
 8001278:	2180      	movs	r1, #128	@ 0x80
 800127a:	4653      	mov	r3, sl
 800127c:	0409      	lsls	r1, r1, #16
 800127e:	430b      	orrs	r3, r1
 8001280:	469a      	mov	sl, r3
 8001282:	e78e      	b.n	80011a2 <__aeabi_dadd+0x1e2>
 8001284:	003c      	movs	r4, r7
 8001286:	2500      	movs	r5, #0
 8001288:	2200      	movs	r2, #0
 800128a:	e731      	b.n	80010f0 <__aeabi_dadd+0x130>
 800128c:	2307      	movs	r3, #7
 800128e:	402b      	ands	r3, r5
 8001290:	2b00      	cmp	r3, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x2d6>
 8001294:	e710      	b.n	80010b8 <__aeabi_dadd+0xf8>
 8001296:	e093      	b.n	80013c0 <__aeabi_dadd+0x400>
 8001298:	2a00      	cmp	r2, #0
 800129a:	d074      	beq.n	8001386 <__aeabi_dadd+0x3c6>
 800129c:	464a      	mov	r2, r9
 800129e:	1bd2      	subs	r2, r2, r7
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x2e6>
 80012a4:	e0c7      	b.n	8001436 <__aeabi_dadd+0x476>
 80012a6:	4928      	ldr	r1, [pc, #160]	@ (8001348 <__aeabi_dadd+0x388>)
 80012a8:	4589      	cmp	r9, r1
 80012aa:	d100      	bne.n	80012ae <__aeabi_dadd+0x2ee>
 80012ac:	e185      	b.n	80015ba <__aeabi_dadd+0x5fa>
 80012ae:	2501      	movs	r5, #1
 80012b0:	2a38      	cmp	r2, #56	@ 0x38
 80012b2:	dc12      	bgt.n	80012da <__aeabi_dadd+0x31a>
 80012b4:	2180      	movs	r1, #128	@ 0x80
 80012b6:	0409      	lsls	r1, r1, #16
 80012b8:	430c      	orrs	r4, r1
 80012ba:	2a1f      	cmp	r2, #31
 80012bc:	dd00      	ble.n	80012c0 <__aeabi_dadd+0x300>
 80012be:	e1ab      	b.n	8001618 <__aeabi_dadd+0x658>
 80012c0:	2120      	movs	r1, #32
 80012c2:	0025      	movs	r5, r4
 80012c4:	1a89      	subs	r1, r1, r2
 80012c6:	0007      	movs	r7, r0
 80012c8:	4088      	lsls	r0, r1
 80012ca:	408d      	lsls	r5, r1
 80012cc:	40d7      	lsrs	r7, r2
 80012ce:	1e41      	subs	r1, r0, #1
 80012d0:	4188      	sbcs	r0, r1
 80012d2:	40d4      	lsrs	r4, r2
 80012d4:	433d      	orrs	r5, r7
 80012d6:	4305      	orrs	r5, r0
 80012d8:	44a2      	add	sl, r4
 80012da:	4465      	add	r5, ip
 80012dc:	4565      	cmp	r5, ip
 80012de:	4192      	sbcs	r2, r2
 80012e0:	4252      	negs	r2, r2
 80012e2:	4452      	add	r2, sl
 80012e4:	0014      	movs	r4, r2
 80012e6:	464f      	mov	r7, r9
 80012e8:	e774      	b.n	80011d4 <__aeabi_dadd+0x214>
 80012ea:	0028      	movs	r0, r5
 80012ec:	f001 fd86 	bl	8002dfc <__clzsi2>
 80012f0:	0003      	movs	r3, r0
 80012f2:	3318      	adds	r3, #24
 80012f4:	2b1f      	cmp	r3, #31
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dadd+0x33a>
 80012f8:	e6c2      	b.n	8001080 <__aeabi_dadd+0xc0>
 80012fa:	002a      	movs	r2, r5
 80012fc:	3808      	subs	r0, #8
 80012fe:	4082      	lsls	r2, r0
 8001300:	429f      	cmp	r7, r3
 8001302:	dd00      	ble.n	8001306 <__aeabi_dadd+0x346>
 8001304:	e0a9      	b.n	800145a <__aeabi_dadd+0x49a>
 8001306:	1bdb      	subs	r3, r3, r7
 8001308:	1c58      	adds	r0, r3, #1
 800130a:	281f      	cmp	r0, #31
 800130c:	dc00      	bgt.n	8001310 <__aeabi_dadd+0x350>
 800130e:	e1ac      	b.n	800166a <__aeabi_dadd+0x6aa>
 8001310:	0015      	movs	r5, r2
 8001312:	3b1f      	subs	r3, #31
 8001314:	40dd      	lsrs	r5, r3
 8001316:	2820      	cmp	r0, #32
 8001318:	d005      	beq.n	8001326 <__aeabi_dadd+0x366>
 800131a:	2340      	movs	r3, #64	@ 0x40
 800131c:	1a1b      	subs	r3, r3, r0
 800131e:	409a      	lsls	r2, r3
 8001320:	1e53      	subs	r3, r2, #1
 8001322:	419a      	sbcs	r2, r3
 8001324:	4315      	orrs	r5, r2
 8001326:	2307      	movs	r3, #7
 8001328:	2700      	movs	r7, #0
 800132a:	402b      	ands	r3, r5
 800132c:	e7b0      	b.n	8001290 <__aeabi_dadd+0x2d0>
 800132e:	08ed      	lsrs	r5, r5, #3
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <__aeabi_dadd+0x388>)
 8001332:	0762      	lsls	r2, r4, #29
 8001334:	432a      	orrs	r2, r5
 8001336:	08e4      	lsrs	r4, r4, #3
 8001338:	429f      	cmp	r7, r3
 800133a:	d00f      	beq.n	800135c <__aeabi_dadd+0x39c>
 800133c:	0324      	lsls	r4, r4, #12
 800133e:	0b25      	lsrs	r5, r4, #12
 8001340:	057c      	lsls	r4, r7, #21
 8001342:	0d64      	lsrs	r4, r4, #21
 8001344:	e6d4      	b.n	80010f0 <__aeabi_dadd+0x130>
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	000007ff 	.word	0x000007ff
 800134c:	ff7fffff 	.word	0xff7fffff
 8001350:	000007fe 	.word	0x000007fe
 8001354:	08c0      	lsrs	r0, r0, #3
 8001356:	0762      	lsls	r2, r4, #29
 8001358:	4302      	orrs	r2, r0
 800135a:	08e4      	lsrs	r4, r4, #3
 800135c:	0013      	movs	r3, r2
 800135e:	4323      	orrs	r3, r4
 8001360:	d100      	bne.n	8001364 <__aeabi_dadd+0x3a4>
 8001362:	e186      	b.n	8001672 <__aeabi_dadd+0x6b2>
 8001364:	2580      	movs	r5, #128	@ 0x80
 8001366:	032d      	lsls	r5, r5, #12
 8001368:	4325      	orrs	r5, r4
 800136a:	032d      	lsls	r5, r5, #12
 800136c:	4cc3      	ldr	r4, [pc, #780]	@ (800167c <__aeabi_dadd+0x6bc>)
 800136e:	0b2d      	lsrs	r5, r5, #12
 8001370:	e6be      	b.n	80010f0 <__aeabi_dadd+0x130>
 8001372:	4660      	mov	r0, ip
 8001374:	4654      	mov	r4, sl
 8001376:	000e      	movs	r6, r1
 8001378:	0017      	movs	r7, r2
 800137a:	08c5      	lsrs	r5, r0, #3
 800137c:	e7d8      	b.n	8001330 <__aeabi_dadd+0x370>
 800137e:	4cc0      	ldr	r4, [pc, #768]	@ (8001680 <__aeabi_dadd+0x6c0>)
 8001380:	1aff      	subs	r7, r7, r3
 8001382:	4014      	ands	r4, r2
 8001384:	e696      	b.n	80010b4 <__aeabi_dadd+0xf4>
 8001386:	4abf      	ldr	r2, [pc, #764]	@ (8001684 <__aeabi_dadd+0x6c4>)
 8001388:	1c79      	adds	r1, r7, #1
 800138a:	4211      	tst	r1, r2
 800138c:	d16b      	bne.n	8001466 <__aeabi_dadd+0x4a6>
 800138e:	0022      	movs	r2, r4
 8001390:	4302      	orrs	r2, r0
 8001392:	2f00      	cmp	r7, #0
 8001394:	d000      	beq.n	8001398 <__aeabi_dadd+0x3d8>
 8001396:	e0db      	b.n	8001550 <__aeabi_dadd+0x590>
 8001398:	2a00      	cmp	r2, #0
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x3de>
 800139c:	e12d      	b.n	80015fa <__aeabi_dadd+0x63a>
 800139e:	4662      	mov	r2, ip
 80013a0:	4653      	mov	r3, sl
 80013a2:	431a      	orrs	r2, r3
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0x3e8>
 80013a6:	e0b6      	b.n	8001516 <__aeabi_dadd+0x556>
 80013a8:	4663      	mov	r3, ip
 80013aa:	18c5      	adds	r5, r0, r3
 80013ac:	4285      	cmp	r5, r0
 80013ae:	4180      	sbcs	r0, r0
 80013b0:	4454      	add	r4, sl
 80013b2:	4240      	negs	r0, r0
 80013b4:	1824      	adds	r4, r4, r0
 80013b6:	0223      	lsls	r3, r4, #8
 80013b8:	d502      	bpl.n	80013c0 <__aeabi_dadd+0x400>
 80013ba:	000f      	movs	r7, r1
 80013bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001680 <__aeabi_dadd+0x6c0>)
 80013be:	401c      	ands	r4, r3
 80013c0:	003a      	movs	r2, r7
 80013c2:	0028      	movs	r0, r5
 80013c4:	e7d8      	b.n	8001378 <__aeabi_dadd+0x3b8>
 80013c6:	4662      	mov	r2, ip
 80013c8:	1a85      	subs	r5, r0, r2
 80013ca:	42a8      	cmp	r0, r5
 80013cc:	4192      	sbcs	r2, r2
 80013ce:	4653      	mov	r3, sl
 80013d0:	4252      	negs	r2, r2
 80013d2:	4691      	mov	r9, r2
 80013d4:	1ae3      	subs	r3, r4, r3
 80013d6:	001a      	movs	r2, r3
 80013d8:	464b      	mov	r3, r9
 80013da:	1ad2      	subs	r2, r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	4691      	mov	r9, r2
 80013e0:	021a      	lsls	r2, r3, #8
 80013e2:	d454      	bmi.n	800148e <__aeabi_dadd+0x4ce>
 80013e4:	464a      	mov	r2, r9
 80013e6:	464c      	mov	r4, r9
 80013e8:	432a      	orrs	r2, r5
 80013ea:	d000      	beq.n	80013ee <__aeabi_dadd+0x42e>
 80013ec:	e640      	b.n	8001070 <__aeabi_dadd+0xb0>
 80013ee:	2600      	movs	r6, #0
 80013f0:	2400      	movs	r4, #0
 80013f2:	2500      	movs	r5, #0
 80013f4:	e67c      	b.n	80010f0 <__aeabi_dadd+0x130>
 80013f6:	4da1      	ldr	r5, [pc, #644]	@ (800167c <__aeabi_dadd+0x6bc>)
 80013f8:	45a9      	cmp	r9, r5
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x43e>
 80013fc:	e090      	b.n	8001520 <__aeabi_dadd+0x560>
 80013fe:	2501      	movs	r5, #1
 8001400:	2a38      	cmp	r2, #56	@ 0x38
 8001402:	dd00      	ble.n	8001406 <__aeabi_dadd+0x446>
 8001404:	e6ab      	b.n	800115e <__aeabi_dadd+0x19e>
 8001406:	2580      	movs	r5, #128	@ 0x80
 8001408:	042d      	lsls	r5, r5, #16
 800140a:	432c      	orrs	r4, r5
 800140c:	e695      	b.n	800113a <__aeabi_dadd+0x17a>
 800140e:	0011      	movs	r1, r2
 8001410:	4655      	mov	r5, sl
 8001412:	3920      	subs	r1, #32
 8001414:	40cd      	lsrs	r5, r1
 8001416:	46a9      	mov	r9, r5
 8001418:	2a20      	cmp	r2, #32
 800141a:	d006      	beq.n	800142a <__aeabi_dadd+0x46a>
 800141c:	2140      	movs	r1, #64	@ 0x40
 800141e:	4653      	mov	r3, sl
 8001420:	1a8a      	subs	r2, r1, r2
 8001422:	4093      	lsls	r3, r2
 8001424:	4662      	mov	r2, ip
 8001426:	431a      	orrs	r2, r3
 8001428:	4694      	mov	ip, r2
 800142a:	4665      	mov	r5, ip
 800142c:	1e6b      	subs	r3, r5, #1
 800142e:	419d      	sbcs	r5, r3
 8001430:	464b      	mov	r3, r9
 8001432:	431d      	orrs	r5, r3
 8001434:	e612      	b.n	800105c <__aeabi_dadd+0x9c>
 8001436:	0021      	movs	r1, r4
 8001438:	4301      	orrs	r1, r0
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x47e>
 800143c:	e0c4      	b.n	80015c8 <__aeabi_dadd+0x608>
 800143e:	1e51      	subs	r1, r2, #1
 8001440:	2a01      	cmp	r2, #1
 8001442:	d100      	bne.n	8001446 <__aeabi_dadd+0x486>
 8001444:	e0fb      	b.n	800163e <__aeabi_dadd+0x67e>
 8001446:	4d8d      	ldr	r5, [pc, #564]	@ (800167c <__aeabi_dadd+0x6bc>)
 8001448:	42aa      	cmp	r2, r5
 800144a:	d100      	bne.n	800144e <__aeabi_dadd+0x48e>
 800144c:	e0b5      	b.n	80015ba <__aeabi_dadd+0x5fa>
 800144e:	2501      	movs	r5, #1
 8001450:	2938      	cmp	r1, #56	@ 0x38
 8001452:	dd00      	ble.n	8001456 <__aeabi_dadd+0x496>
 8001454:	e741      	b.n	80012da <__aeabi_dadd+0x31a>
 8001456:	000a      	movs	r2, r1
 8001458:	e72f      	b.n	80012ba <__aeabi_dadd+0x2fa>
 800145a:	4c89      	ldr	r4, [pc, #548]	@ (8001680 <__aeabi_dadd+0x6c0>)
 800145c:	1aff      	subs	r7, r7, r3
 800145e:	4014      	ands	r4, r2
 8001460:	0762      	lsls	r2, r4, #29
 8001462:	08e4      	lsrs	r4, r4, #3
 8001464:	e76a      	b.n	800133c <__aeabi_dadd+0x37c>
 8001466:	4a85      	ldr	r2, [pc, #532]	@ (800167c <__aeabi_dadd+0x6bc>)
 8001468:	4291      	cmp	r1, r2
 800146a:	d100      	bne.n	800146e <__aeabi_dadd+0x4ae>
 800146c:	e0e3      	b.n	8001636 <__aeabi_dadd+0x676>
 800146e:	4663      	mov	r3, ip
 8001470:	18c2      	adds	r2, r0, r3
 8001472:	4282      	cmp	r2, r0
 8001474:	4180      	sbcs	r0, r0
 8001476:	0023      	movs	r3, r4
 8001478:	4240      	negs	r0, r0
 800147a:	4453      	add	r3, sl
 800147c:	181b      	adds	r3, r3, r0
 800147e:	07dd      	lsls	r5, r3, #31
 8001480:	085c      	lsrs	r4, r3, #1
 8001482:	2307      	movs	r3, #7
 8001484:	0852      	lsrs	r2, r2, #1
 8001486:	4315      	orrs	r5, r2
 8001488:	000f      	movs	r7, r1
 800148a:	402b      	ands	r3, r5
 800148c:	e700      	b.n	8001290 <__aeabi_dadd+0x2d0>
 800148e:	4663      	mov	r3, ip
 8001490:	1a1d      	subs	r5, r3, r0
 8001492:	45ac      	cmp	ip, r5
 8001494:	4192      	sbcs	r2, r2
 8001496:	4653      	mov	r3, sl
 8001498:	4252      	negs	r2, r2
 800149a:	1b1c      	subs	r4, r3, r4
 800149c:	000e      	movs	r6, r1
 800149e:	4688      	mov	r8, r1
 80014a0:	1aa4      	subs	r4, r4, r2
 80014a2:	e5e5      	b.n	8001070 <__aeabi_dadd+0xb0>
 80014a4:	2d00      	cmp	r5, #0
 80014a6:	d000      	beq.n	80014aa <__aeabi_dadd+0x4ea>
 80014a8:	e091      	b.n	80015ce <__aeabi_dadd+0x60e>
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	d138      	bne.n	8001520 <__aeabi_dadd+0x560>
 80014ae:	2480      	movs	r4, #128	@ 0x80
 80014b0:	2600      	movs	r6, #0
 80014b2:	0324      	lsls	r4, r4, #12
 80014b4:	e756      	b.n	8001364 <__aeabi_dadd+0x3a4>
 80014b6:	4663      	mov	r3, ip
 80014b8:	18c5      	adds	r5, r0, r3
 80014ba:	4285      	cmp	r5, r0
 80014bc:	4180      	sbcs	r0, r0
 80014be:	4454      	add	r4, sl
 80014c0:	4240      	negs	r0, r0
 80014c2:	1824      	adds	r4, r4, r0
 80014c4:	2701      	movs	r7, #1
 80014c6:	0223      	lsls	r3, r4, #8
 80014c8:	d400      	bmi.n	80014cc <__aeabi_dadd+0x50c>
 80014ca:	e6df      	b.n	800128c <__aeabi_dadd+0x2cc>
 80014cc:	2702      	movs	r7, #2
 80014ce:	e687      	b.n	80011e0 <__aeabi_dadd+0x220>
 80014d0:	4663      	mov	r3, ip
 80014d2:	1ac5      	subs	r5, r0, r3
 80014d4:	42a8      	cmp	r0, r5
 80014d6:	4180      	sbcs	r0, r0
 80014d8:	4653      	mov	r3, sl
 80014da:	4240      	negs	r0, r0
 80014dc:	1ae4      	subs	r4, r4, r3
 80014de:	2701      	movs	r7, #1
 80014e0:	1a24      	subs	r4, r4, r0
 80014e2:	e5c0      	b.n	8001066 <__aeabi_dadd+0xa6>
 80014e4:	0762      	lsls	r2, r4, #29
 80014e6:	08c0      	lsrs	r0, r0, #3
 80014e8:	4302      	orrs	r2, r0
 80014ea:	08e4      	lsrs	r4, r4, #3
 80014ec:	e736      	b.n	800135c <__aeabi_dadd+0x39c>
 80014ee:	0011      	movs	r1, r2
 80014f0:	4653      	mov	r3, sl
 80014f2:	3920      	subs	r1, #32
 80014f4:	40cb      	lsrs	r3, r1
 80014f6:	4699      	mov	r9, r3
 80014f8:	2a20      	cmp	r2, #32
 80014fa:	d006      	beq.n	800150a <__aeabi_dadd+0x54a>
 80014fc:	2140      	movs	r1, #64	@ 0x40
 80014fe:	4653      	mov	r3, sl
 8001500:	1a8a      	subs	r2, r1, r2
 8001502:	4093      	lsls	r3, r2
 8001504:	4662      	mov	r2, ip
 8001506:	431a      	orrs	r2, r3
 8001508:	4694      	mov	ip, r2
 800150a:	4665      	mov	r5, ip
 800150c:	1e6b      	subs	r3, r5, #1
 800150e:	419d      	sbcs	r5, r3
 8001510:	464b      	mov	r3, r9
 8001512:	431d      	orrs	r5, r3
 8001514:	e659      	b.n	80011ca <__aeabi_dadd+0x20a>
 8001516:	0762      	lsls	r2, r4, #29
 8001518:	08c0      	lsrs	r0, r0, #3
 800151a:	4302      	orrs	r2, r0
 800151c:	08e4      	lsrs	r4, r4, #3
 800151e:	e70d      	b.n	800133c <__aeabi_dadd+0x37c>
 8001520:	4653      	mov	r3, sl
 8001522:	075a      	lsls	r2, r3, #29
 8001524:	4663      	mov	r3, ip
 8001526:	08d8      	lsrs	r0, r3, #3
 8001528:	4653      	mov	r3, sl
 800152a:	000e      	movs	r6, r1
 800152c:	4302      	orrs	r2, r0
 800152e:	08dc      	lsrs	r4, r3, #3
 8001530:	e714      	b.n	800135c <__aeabi_dadd+0x39c>
 8001532:	0015      	movs	r5, r2
 8001534:	0026      	movs	r6, r4
 8001536:	3d20      	subs	r5, #32
 8001538:	40ee      	lsrs	r6, r5
 800153a:	2a20      	cmp	r2, #32
 800153c:	d003      	beq.n	8001546 <__aeabi_dadd+0x586>
 800153e:	2540      	movs	r5, #64	@ 0x40
 8001540:	1aaa      	subs	r2, r5, r2
 8001542:	4094      	lsls	r4, r2
 8001544:	4320      	orrs	r0, r4
 8001546:	1e42      	subs	r2, r0, #1
 8001548:	4190      	sbcs	r0, r2
 800154a:	0005      	movs	r5, r0
 800154c:	4335      	orrs	r5, r6
 800154e:	e606      	b.n	800115e <__aeabi_dadd+0x19e>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d07c      	beq.n	800164e <__aeabi_dadd+0x68e>
 8001554:	4662      	mov	r2, ip
 8001556:	4653      	mov	r3, sl
 8001558:	08c0      	lsrs	r0, r0, #3
 800155a:	431a      	orrs	r2, r3
 800155c:	d100      	bne.n	8001560 <__aeabi_dadd+0x5a0>
 800155e:	e6fa      	b.n	8001356 <__aeabi_dadd+0x396>
 8001560:	0762      	lsls	r2, r4, #29
 8001562:	4310      	orrs	r0, r2
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	08e4      	lsrs	r4, r4, #3
 8001568:	0312      	lsls	r2, r2, #12
 800156a:	4214      	tst	r4, r2
 800156c:	d008      	beq.n	8001580 <__aeabi_dadd+0x5c0>
 800156e:	08d9      	lsrs	r1, r3, #3
 8001570:	4211      	tst	r1, r2
 8001572:	d105      	bne.n	8001580 <__aeabi_dadd+0x5c0>
 8001574:	4663      	mov	r3, ip
 8001576:	08d8      	lsrs	r0, r3, #3
 8001578:	4653      	mov	r3, sl
 800157a:	000c      	movs	r4, r1
 800157c:	075b      	lsls	r3, r3, #29
 800157e:	4318      	orrs	r0, r3
 8001580:	0f42      	lsrs	r2, r0, #29
 8001582:	00c0      	lsls	r0, r0, #3
 8001584:	08c0      	lsrs	r0, r0, #3
 8001586:	0752      	lsls	r2, r2, #29
 8001588:	4302      	orrs	r2, r0
 800158a:	e6e7      	b.n	800135c <__aeabi_dadd+0x39c>
 800158c:	2a00      	cmp	r2, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x5d2>
 8001590:	e72d      	b.n	80013ee <__aeabi_dadd+0x42e>
 8001592:	4663      	mov	r3, ip
 8001594:	08d8      	lsrs	r0, r3, #3
 8001596:	4653      	mov	r3, sl
 8001598:	075a      	lsls	r2, r3, #29
 800159a:	000e      	movs	r6, r1
 800159c:	4302      	orrs	r2, r0
 800159e:	08dc      	lsrs	r4, r3, #3
 80015a0:	e6cc      	b.n	800133c <__aeabi_dadd+0x37c>
 80015a2:	4663      	mov	r3, ip
 80015a4:	1a1d      	subs	r5, r3, r0
 80015a6:	45ac      	cmp	ip, r5
 80015a8:	4192      	sbcs	r2, r2
 80015aa:	4653      	mov	r3, sl
 80015ac:	4252      	negs	r2, r2
 80015ae:	1b1c      	subs	r4, r3, r4
 80015b0:	000e      	movs	r6, r1
 80015b2:	4688      	mov	r8, r1
 80015b4:	1aa4      	subs	r4, r4, r2
 80015b6:	3701      	adds	r7, #1
 80015b8:	e555      	b.n	8001066 <__aeabi_dadd+0xa6>
 80015ba:	4663      	mov	r3, ip
 80015bc:	08d9      	lsrs	r1, r3, #3
 80015be:	4653      	mov	r3, sl
 80015c0:	075a      	lsls	r2, r3, #29
 80015c2:	430a      	orrs	r2, r1
 80015c4:	08dc      	lsrs	r4, r3, #3
 80015c6:	e6c9      	b.n	800135c <__aeabi_dadd+0x39c>
 80015c8:	4660      	mov	r0, ip
 80015ca:	4654      	mov	r4, sl
 80015cc:	e6d4      	b.n	8001378 <__aeabi_dadd+0x3b8>
 80015ce:	08c0      	lsrs	r0, r0, #3
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dadd+0x616>
 80015d4:	e6bf      	b.n	8001356 <__aeabi_dadd+0x396>
 80015d6:	0762      	lsls	r2, r4, #29
 80015d8:	4310      	orrs	r0, r2
 80015da:	2280      	movs	r2, #128	@ 0x80
 80015dc:	08e4      	lsrs	r4, r4, #3
 80015de:	0312      	lsls	r2, r2, #12
 80015e0:	4214      	tst	r4, r2
 80015e2:	d0cd      	beq.n	8001580 <__aeabi_dadd+0x5c0>
 80015e4:	08dd      	lsrs	r5, r3, #3
 80015e6:	4215      	tst	r5, r2
 80015e8:	d1ca      	bne.n	8001580 <__aeabi_dadd+0x5c0>
 80015ea:	4663      	mov	r3, ip
 80015ec:	08d8      	lsrs	r0, r3, #3
 80015ee:	4653      	mov	r3, sl
 80015f0:	075b      	lsls	r3, r3, #29
 80015f2:	000e      	movs	r6, r1
 80015f4:	002c      	movs	r4, r5
 80015f6:	4318      	orrs	r0, r3
 80015f8:	e7c2      	b.n	8001580 <__aeabi_dadd+0x5c0>
 80015fa:	4663      	mov	r3, ip
 80015fc:	08d9      	lsrs	r1, r3, #3
 80015fe:	4653      	mov	r3, sl
 8001600:	075a      	lsls	r2, r3, #29
 8001602:	430a      	orrs	r2, r1
 8001604:	08dc      	lsrs	r4, r3, #3
 8001606:	e699      	b.n	800133c <__aeabi_dadd+0x37c>
 8001608:	4663      	mov	r3, ip
 800160a:	08d8      	lsrs	r0, r3, #3
 800160c:	4653      	mov	r3, sl
 800160e:	075a      	lsls	r2, r3, #29
 8001610:	000e      	movs	r6, r1
 8001612:	4302      	orrs	r2, r0
 8001614:	08dc      	lsrs	r4, r3, #3
 8001616:	e6a1      	b.n	800135c <__aeabi_dadd+0x39c>
 8001618:	0011      	movs	r1, r2
 800161a:	0027      	movs	r7, r4
 800161c:	3920      	subs	r1, #32
 800161e:	40cf      	lsrs	r7, r1
 8001620:	2a20      	cmp	r2, #32
 8001622:	d003      	beq.n	800162c <__aeabi_dadd+0x66c>
 8001624:	2140      	movs	r1, #64	@ 0x40
 8001626:	1a8a      	subs	r2, r1, r2
 8001628:	4094      	lsls	r4, r2
 800162a:	4320      	orrs	r0, r4
 800162c:	1e42      	subs	r2, r0, #1
 800162e:	4190      	sbcs	r0, r2
 8001630:	0005      	movs	r5, r0
 8001632:	433d      	orrs	r5, r7
 8001634:	e651      	b.n	80012da <__aeabi_dadd+0x31a>
 8001636:	000c      	movs	r4, r1
 8001638:	2500      	movs	r5, #0
 800163a:	2200      	movs	r2, #0
 800163c:	e558      	b.n	80010f0 <__aeabi_dadd+0x130>
 800163e:	4460      	add	r0, ip
 8001640:	4560      	cmp	r0, ip
 8001642:	4192      	sbcs	r2, r2
 8001644:	4454      	add	r4, sl
 8001646:	4252      	negs	r2, r2
 8001648:	0005      	movs	r5, r0
 800164a:	18a4      	adds	r4, r4, r2
 800164c:	e73a      	b.n	80014c4 <__aeabi_dadd+0x504>
 800164e:	4653      	mov	r3, sl
 8001650:	075a      	lsls	r2, r3, #29
 8001652:	4663      	mov	r3, ip
 8001654:	08d9      	lsrs	r1, r3, #3
 8001656:	4653      	mov	r3, sl
 8001658:	430a      	orrs	r2, r1
 800165a:	08dc      	lsrs	r4, r3, #3
 800165c:	e67e      	b.n	800135c <__aeabi_dadd+0x39c>
 800165e:	001a      	movs	r2, r3
 8001660:	001c      	movs	r4, r3
 8001662:	432a      	orrs	r2, r5
 8001664:	d000      	beq.n	8001668 <__aeabi_dadd+0x6a8>
 8001666:	e6ab      	b.n	80013c0 <__aeabi_dadd+0x400>
 8001668:	e6c1      	b.n	80013ee <__aeabi_dadd+0x42e>
 800166a:	2120      	movs	r1, #32
 800166c:	2500      	movs	r5, #0
 800166e:	1a09      	subs	r1, r1, r0
 8001670:	e519      	b.n	80010a6 <__aeabi_dadd+0xe6>
 8001672:	2200      	movs	r2, #0
 8001674:	2500      	movs	r5, #0
 8001676:	4c01      	ldr	r4, [pc, #4]	@ (800167c <__aeabi_dadd+0x6bc>)
 8001678:	e53a      	b.n	80010f0 <__aeabi_dadd+0x130>
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	000007ff 	.word	0x000007ff
 8001680:	ff7fffff 	.word	0xff7fffff
 8001684:	000007fe 	.word	0x000007fe

08001688 <__aeabi_ddiv>:
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	46de      	mov	lr, fp
 800168c:	4645      	mov	r5, r8
 800168e:	4657      	mov	r7, sl
 8001690:	464e      	mov	r6, r9
 8001692:	b5e0      	push	{r5, r6, r7, lr}
 8001694:	b087      	sub	sp, #28
 8001696:	9200      	str	r2, [sp, #0]
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	030b      	lsls	r3, r1, #12
 800169c:	0b1b      	lsrs	r3, r3, #12
 800169e:	469b      	mov	fp, r3
 80016a0:	0fca      	lsrs	r2, r1, #31
 80016a2:	004b      	lsls	r3, r1, #1
 80016a4:	0004      	movs	r4, r0
 80016a6:	4680      	mov	r8, r0
 80016a8:	0d5b      	lsrs	r3, r3, #21
 80016aa:	9202      	str	r2, [sp, #8]
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x28>
 80016ae:	e16a      	b.n	8001986 <__aeabi_ddiv+0x2fe>
 80016b0:	4ad4      	ldr	r2, [pc, #848]	@ (8001a04 <__aeabi_ddiv+0x37c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d100      	bne.n	80016b8 <__aeabi_ddiv+0x30>
 80016b6:	e18c      	b.n	80019d2 <__aeabi_ddiv+0x34a>
 80016b8:	4659      	mov	r1, fp
 80016ba:	0f42      	lsrs	r2, r0, #29
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	430a      	orrs	r2, r1
 80016c0:	2180      	movs	r1, #128	@ 0x80
 80016c2:	0409      	lsls	r1, r1, #16
 80016c4:	4311      	orrs	r1, r2
 80016c6:	00c2      	lsls	r2, r0, #3
 80016c8:	4690      	mov	r8, r2
 80016ca:	4acf      	ldr	r2, [pc, #828]	@ (8001a08 <__aeabi_ddiv+0x380>)
 80016cc:	4689      	mov	r9, r1
 80016ce:	4692      	mov	sl, r2
 80016d0:	449a      	add	sl, r3
 80016d2:	2300      	movs	r3, #0
 80016d4:	2400      	movs	r4, #0
 80016d6:	9303      	str	r3, [sp, #12]
 80016d8:	9e00      	ldr	r6, [sp, #0]
 80016da:	9f01      	ldr	r7, [sp, #4]
 80016dc:	033b      	lsls	r3, r7, #12
 80016de:	0b1b      	lsrs	r3, r3, #12
 80016e0:	469b      	mov	fp, r3
 80016e2:	007b      	lsls	r3, r7, #1
 80016e4:	0030      	movs	r0, r6
 80016e6:	0d5b      	lsrs	r3, r3, #21
 80016e8:	0ffd      	lsrs	r5, r7, #31
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_ddiv+0x68>
 80016ee:	e128      	b.n	8001942 <__aeabi_ddiv+0x2ba>
 80016f0:	4ac4      	ldr	r2, [pc, #784]	@ (8001a04 <__aeabi_ddiv+0x37c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d100      	bne.n	80016f8 <__aeabi_ddiv+0x70>
 80016f6:	e177      	b.n	80019e8 <__aeabi_ddiv+0x360>
 80016f8:	4659      	mov	r1, fp
 80016fa:	0f72      	lsrs	r2, r6, #29
 80016fc:	00c9      	lsls	r1, r1, #3
 80016fe:	430a      	orrs	r2, r1
 8001700:	2180      	movs	r1, #128	@ 0x80
 8001702:	0409      	lsls	r1, r1, #16
 8001704:	4311      	orrs	r1, r2
 8001706:	468b      	mov	fp, r1
 8001708:	49bf      	ldr	r1, [pc, #764]	@ (8001a08 <__aeabi_ddiv+0x380>)
 800170a:	00f2      	lsls	r2, r6, #3
 800170c:	468c      	mov	ip, r1
 800170e:	4651      	mov	r1, sl
 8001710:	4463      	add	r3, ip
 8001712:	1acb      	subs	r3, r1, r3
 8001714:	469a      	mov	sl, r3
 8001716:	2300      	movs	r3, #0
 8001718:	9e02      	ldr	r6, [sp, #8]
 800171a:	406e      	eors	r6, r5
 800171c:	2c0f      	cmp	r4, #15
 800171e:	d827      	bhi.n	8001770 <__aeabi_ddiv+0xe8>
 8001720:	49ba      	ldr	r1, [pc, #744]	@ (8001a0c <__aeabi_ddiv+0x384>)
 8001722:	00a4      	lsls	r4, r4, #2
 8001724:	5909      	ldr	r1, [r1, r4]
 8001726:	468f      	mov	pc, r1
 8001728:	46cb      	mov	fp, r9
 800172a:	4642      	mov	r2, r8
 800172c:	9e02      	ldr	r6, [sp, #8]
 800172e:	9b03      	ldr	r3, [sp, #12]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d016      	beq.n	8001762 <__aeabi_ddiv+0xda>
 8001734:	2b03      	cmp	r3, #3
 8001736:	d100      	bne.n	800173a <__aeabi_ddiv+0xb2>
 8001738:	e2a6      	b.n	8001c88 <__aeabi_ddiv+0x600>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d000      	beq.n	8001740 <__aeabi_ddiv+0xb8>
 800173e:	e0df      	b.n	8001900 <__aeabi_ddiv+0x278>
 8001740:	2200      	movs	r2, #0
 8001742:	2300      	movs	r3, #0
 8001744:	2400      	movs	r4, #0
 8001746:	4690      	mov	r8, r2
 8001748:	051b      	lsls	r3, r3, #20
 800174a:	4323      	orrs	r3, r4
 800174c:	07f6      	lsls	r6, r6, #31
 800174e:	4333      	orrs	r3, r6
 8001750:	4640      	mov	r0, r8
 8001752:	0019      	movs	r1, r3
 8001754:	b007      	add	sp, #28
 8001756:	bcf0      	pop	{r4, r5, r6, r7}
 8001758:	46bb      	mov	fp, r7
 800175a:	46b2      	mov	sl, r6
 800175c:	46a9      	mov	r9, r5
 800175e:	46a0      	mov	r8, r4
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	2200      	movs	r2, #0
 8001764:	2400      	movs	r4, #0
 8001766:	4690      	mov	r8, r2
 8001768:	4ba6      	ldr	r3, [pc, #664]	@ (8001a04 <__aeabi_ddiv+0x37c>)
 800176a:	e7ed      	b.n	8001748 <__aeabi_ddiv+0xc0>
 800176c:	002e      	movs	r6, r5
 800176e:	e7df      	b.n	8001730 <__aeabi_ddiv+0xa8>
 8001770:	45cb      	cmp	fp, r9
 8001772:	d200      	bcs.n	8001776 <__aeabi_ddiv+0xee>
 8001774:	e1d4      	b.n	8001b20 <__aeabi_ddiv+0x498>
 8001776:	d100      	bne.n	800177a <__aeabi_ddiv+0xf2>
 8001778:	e1cf      	b.n	8001b1a <__aeabi_ddiv+0x492>
 800177a:	2301      	movs	r3, #1
 800177c:	425b      	negs	r3, r3
 800177e:	469c      	mov	ip, r3
 8001780:	4644      	mov	r4, r8
 8001782:	4648      	mov	r0, r9
 8001784:	2700      	movs	r7, #0
 8001786:	44e2      	add	sl, ip
 8001788:	465b      	mov	r3, fp
 800178a:	0e15      	lsrs	r5, r2, #24
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	431d      	orrs	r5, r3
 8001790:	0c19      	lsrs	r1, r3, #16
 8001792:	042b      	lsls	r3, r5, #16
 8001794:	0212      	lsls	r2, r2, #8
 8001796:	9500      	str	r5, [sp, #0]
 8001798:	0c1d      	lsrs	r5, r3, #16
 800179a:	4691      	mov	r9, r2
 800179c:	9102      	str	r1, [sp, #8]
 800179e:	9503      	str	r5, [sp, #12]
 80017a0:	f7fe fd5c 	bl	800025c <__aeabi_uidivmod>
 80017a4:	0002      	movs	r2, r0
 80017a6:	436a      	muls	r2, r5
 80017a8:	040b      	lsls	r3, r1, #16
 80017aa:	0c21      	lsrs	r1, r4, #16
 80017ac:	4680      	mov	r8, r0
 80017ae:	4319      	orrs	r1, r3
 80017b0:	428a      	cmp	r2, r1
 80017b2:	d909      	bls.n	80017c8 <__aeabi_ddiv+0x140>
 80017b4:	9d00      	ldr	r5, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	46ac      	mov	ip, r5
 80017ba:	425b      	negs	r3, r3
 80017bc:	4461      	add	r1, ip
 80017be:	469c      	mov	ip, r3
 80017c0:	44e0      	add	r8, ip
 80017c2:	428d      	cmp	r5, r1
 80017c4:	d800      	bhi.n	80017c8 <__aeabi_ddiv+0x140>
 80017c6:	e1fb      	b.n	8001bc0 <__aeabi_ddiv+0x538>
 80017c8:	1a88      	subs	r0, r1, r2
 80017ca:	9902      	ldr	r1, [sp, #8]
 80017cc:	f7fe fd46 	bl	800025c <__aeabi_uidivmod>
 80017d0:	9a03      	ldr	r2, [sp, #12]
 80017d2:	0424      	lsls	r4, r4, #16
 80017d4:	4342      	muls	r2, r0
 80017d6:	0409      	lsls	r1, r1, #16
 80017d8:	0c24      	lsrs	r4, r4, #16
 80017da:	0003      	movs	r3, r0
 80017dc:	430c      	orrs	r4, r1
 80017de:	42a2      	cmp	r2, r4
 80017e0:	d906      	bls.n	80017f0 <__aeabi_ddiv+0x168>
 80017e2:	9900      	ldr	r1, [sp, #0]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	468c      	mov	ip, r1
 80017e8:	4464      	add	r4, ip
 80017ea:	42a1      	cmp	r1, r4
 80017ec:	d800      	bhi.n	80017f0 <__aeabi_ddiv+0x168>
 80017ee:	e1e1      	b.n	8001bb4 <__aeabi_ddiv+0x52c>
 80017f0:	1aa0      	subs	r0, r4, r2
 80017f2:	4642      	mov	r2, r8
 80017f4:	0412      	lsls	r2, r2, #16
 80017f6:	431a      	orrs	r2, r3
 80017f8:	4693      	mov	fp, r2
 80017fa:	464b      	mov	r3, r9
 80017fc:	4659      	mov	r1, fp
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	001d      	movs	r5, r3
 8001802:	9304      	str	r3, [sp, #16]
 8001804:	040b      	lsls	r3, r1, #16
 8001806:	4649      	mov	r1, r9
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	000c      	movs	r4, r1
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	435c      	muls	r4, r3
 8001812:	0c12      	lsrs	r2, r2, #16
 8001814:	436b      	muls	r3, r5
 8001816:	4688      	mov	r8, r1
 8001818:	4351      	muls	r1, r2
 800181a:	436a      	muls	r2, r5
 800181c:	0c25      	lsrs	r5, r4, #16
 800181e:	46ac      	mov	ip, r5
 8001820:	185b      	adds	r3, r3, r1
 8001822:	4463      	add	r3, ip
 8001824:	4299      	cmp	r1, r3
 8001826:	d903      	bls.n	8001830 <__aeabi_ddiv+0x1a8>
 8001828:	2180      	movs	r1, #128	@ 0x80
 800182a:	0249      	lsls	r1, r1, #9
 800182c:	468c      	mov	ip, r1
 800182e:	4462      	add	r2, ip
 8001830:	0c19      	lsrs	r1, r3, #16
 8001832:	0424      	lsls	r4, r4, #16
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	0c24      	lsrs	r4, r4, #16
 8001838:	188a      	adds	r2, r1, r2
 800183a:	191c      	adds	r4, r3, r4
 800183c:	4290      	cmp	r0, r2
 800183e:	d302      	bcc.n	8001846 <__aeabi_ddiv+0x1be>
 8001840:	d116      	bne.n	8001870 <__aeabi_ddiv+0x1e8>
 8001842:	42a7      	cmp	r7, r4
 8001844:	d214      	bcs.n	8001870 <__aeabi_ddiv+0x1e8>
 8001846:	465b      	mov	r3, fp
 8001848:	9d00      	ldr	r5, [sp, #0]
 800184a:	3b01      	subs	r3, #1
 800184c:	444f      	add	r7, r9
 800184e:	9305      	str	r3, [sp, #20]
 8001850:	454f      	cmp	r7, r9
 8001852:	419b      	sbcs	r3, r3
 8001854:	46ac      	mov	ip, r5
 8001856:	425b      	negs	r3, r3
 8001858:	4463      	add	r3, ip
 800185a:	18c0      	adds	r0, r0, r3
 800185c:	4285      	cmp	r5, r0
 800185e:	d300      	bcc.n	8001862 <__aeabi_ddiv+0x1da>
 8001860:	e1a1      	b.n	8001ba6 <__aeabi_ddiv+0x51e>
 8001862:	4282      	cmp	r2, r0
 8001864:	d900      	bls.n	8001868 <__aeabi_ddiv+0x1e0>
 8001866:	e1f6      	b.n	8001c56 <__aeabi_ddiv+0x5ce>
 8001868:	d100      	bne.n	800186c <__aeabi_ddiv+0x1e4>
 800186a:	e1f1      	b.n	8001c50 <__aeabi_ddiv+0x5c8>
 800186c:	9b05      	ldr	r3, [sp, #20]
 800186e:	469b      	mov	fp, r3
 8001870:	1b3c      	subs	r4, r7, r4
 8001872:	42a7      	cmp	r7, r4
 8001874:	41bf      	sbcs	r7, r7
 8001876:	9d00      	ldr	r5, [sp, #0]
 8001878:	1a80      	subs	r0, r0, r2
 800187a:	427f      	negs	r7, r7
 800187c:	1bc0      	subs	r0, r0, r7
 800187e:	4285      	cmp	r5, r0
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x1fc>
 8001882:	e1d0      	b.n	8001c26 <__aeabi_ddiv+0x59e>
 8001884:	9902      	ldr	r1, [sp, #8]
 8001886:	f7fe fce9 	bl	800025c <__aeabi_uidivmod>
 800188a:	9a03      	ldr	r2, [sp, #12]
 800188c:	040b      	lsls	r3, r1, #16
 800188e:	4342      	muls	r2, r0
 8001890:	0c21      	lsrs	r1, r4, #16
 8001892:	0007      	movs	r7, r0
 8001894:	4319      	orrs	r1, r3
 8001896:	428a      	cmp	r2, r1
 8001898:	d900      	bls.n	800189c <__aeabi_ddiv+0x214>
 800189a:	e178      	b.n	8001b8e <__aeabi_ddiv+0x506>
 800189c:	1a88      	subs	r0, r1, r2
 800189e:	9902      	ldr	r1, [sp, #8]
 80018a0:	f7fe fcdc 	bl	800025c <__aeabi_uidivmod>
 80018a4:	9a03      	ldr	r2, [sp, #12]
 80018a6:	0424      	lsls	r4, r4, #16
 80018a8:	4342      	muls	r2, r0
 80018aa:	0409      	lsls	r1, r1, #16
 80018ac:	0c24      	lsrs	r4, r4, #16
 80018ae:	0003      	movs	r3, r0
 80018b0:	430c      	orrs	r4, r1
 80018b2:	42a2      	cmp	r2, r4
 80018b4:	d900      	bls.n	80018b8 <__aeabi_ddiv+0x230>
 80018b6:	e15d      	b.n	8001b74 <__aeabi_ddiv+0x4ec>
 80018b8:	4641      	mov	r1, r8
 80018ba:	1aa4      	subs	r4, r4, r2
 80018bc:	043a      	lsls	r2, r7, #16
 80018be:	431a      	orrs	r2, r3
 80018c0:	9d04      	ldr	r5, [sp, #16]
 80018c2:	0413      	lsls	r3, r2, #16
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	4359      	muls	r1, r3
 80018c8:	4647      	mov	r7, r8
 80018ca:	436b      	muls	r3, r5
 80018cc:	469c      	mov	ip, r3
 80018ce:	0c10      	lsrs	r0, r2, #16
 80018d0:	4347      	muls	r7, r0
 80018d2:	0c0b      	lsrs	r3, r1, #16
 80018d4:	44bc      	add	ip, r7
 80018d6:	4463      	add	r3, ip
 80018d8:	4368      	muls	r0, r5
 80018da:	429f      	cmp	r7, r3
 80018dc:	d903      	bls.n	80018e6 <__aeabi_ddiv+0x25e>
 80018de:	2580      	movs	r5, #128	@ 0x80
 80018e0:	026d      	lsls	r5, r5, #9
 80018e2:	46ac      	mov	ip, r5
 80018e4:	4460      	add	r0, ip
 80018e6:	0c1f      	lsrs	r7, r3, #16
 80018e8:	0409      	lsls	r1, r1, #16
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	0c09      	lsrs	r1, r1, #16
 80018ee:	183f      	adds	r7, r7, r0
 80018f0:	185b      	adds	r3, r3, r1
 80018f2:	42bc      	cmp	r4, r7
 80018f4:	d200      	bcs.n	80018f8 <__aeabi_ddiv+0x270>
 80018f6:	e102      	b.n	8001afe <__aeabi_ddiv+0x476>
 80018f8:	d100      	bne.n	80018fc <__aeabi_ddiv+0x274>
 80018fa:	e0fd      	b.n	8001af8 <__aeabi_ddiv+0x470>
 80018fc:	2301      	movs	r3, #1
 80018fe:	431a      	orrs	r2, r3
 8001900:	4b43      	ldr	r3, [pc, #268]	@ (8001a10 <__aeabi_ddiv+0x388>)
 8001902:	4453      	add	r3, sl
 8001904:	2b00      	cmp	r3, #0
 8001906:	dc00      	bgt.n	800190a <__aeabi_ddiv+0x282>
 8001908:	e0ae      	b.n	8001a68 <__aeabi_ddiv+0x3e0>
 800190a:	0751      	lsls	r1, r2, #29
 800190c:	d000      	beq.n	8001910 <__aeabi_ddiv+0x288>
 800190e:	e198      	b.n	8001c42 <__aeabi_ddiv+0x5ba>
 8001910:	4659      	mov	r1, fp
 8001912:	01c9      	lsls	r1, r1, #7
 8001914:	d506      	bpl.n	8001924 <__aeabi_ddiv+0x29c>
 8001916:	4659      	mov	r1, fp
 8001918:	4b3e      	ldr	r3, [pc, #248]	@ (8001a14 <__aeabi_ddiv+0x38c>)
 800191a:	4019      	ands	r1, r3
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	468b      	mov	fp, r1
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4453      	add	r3, sl
 8001924:	493c      	ldr	r1, [pc, #240]	@ (8001a18 <__aeabi_ddiv+0x390>)
 8001926:	428b      	cmp	r3, r1
 8001928:	dd00      	ble.n	800192c <__aeabi_ddiv+0x2a4>
 800192a:	e71a      	b.n	8001762 <__aeabi_ddiv+0xda>
 800192c:	4659      	mov	r1, fp
 800192e:	08d2      	lsrs	r2, r2, #3
 8001930:	0749      	lsls	r1, r1, #29
 8001932:	4311      	orrs	r1, r2
 8001934:	465a      	mov	r2, fp
 8001936:	055b      	lsls	r3, r3, #21
 8001938:	0254      	lsls	r4, r2, #9
 800193a:	4688      	mov	r8, r1
 800193c:	0b24      	lsrs	r4, r4, #12
 800193e:	0d5b      	lsrs	r3, r3, #21
 8001940:	e702      	b.n	8001748 <__aeabi_ddiv+0xc0>
 8001942:	465a      	mov	r2, fp
 8001944:	9b00      	ldr	r3, [sp, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	d100      	bne.n	800194c <__aeabi_ddiv+0x2c4>
 800194a:	e07e      	b.n	8001a4a <__aeabi_ddiv+0x3c2>
 800194c:	465b      	mov	r3, fp
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <__aeabi_ddiv+0x2cc>
 8001952:	e100      	b.n	8001b56 <__aeabi_ddiv+0x4ce>
 8001954:	4658      	mov	r0, fp
 8001956:	f001 fa51 	bl	8002dfc <__clzsi2>
 800195a:	0002      	movs	r2, r0
 800195c:	0003      	movs	r3, r0
 800195e:	3a0b      	subs	r2, #11
 8001960:	271d      	movs	r7, #29
 8001962:	9e00      	ldr	r6, [sp, #0]
 8001964:	1aba      	subs	r2, r7, r2
 8001966:	0019      	movs	r1, r3
 8001968:	4658      	mov	r0, fp
 800196a:	40d6      	lsrs	r6, r2
 800196c:	3908      	subs	r1, #8
 800196e:	4088      	lsls	r0, r1
 8001970:	0032      	movs	r2, r6
 8001972:	4302      	orrs	r2, r0
 8001974:	4693      	mov	fp, r2
 8001976:	9a00      	ldr	r2, [sp, #0]
 8001978:	408a      	lsls	r2, r1
 800197a:	4928      	ldr	r1, [pc, #160]	@ (8001a1c <__aeabi_ddiv+0x394>)
 800197c:	4453      	add	r3, sl
 800197e:	468a      	mov	sl, r1
 8001980:	449a      	add	sl, r3
 8001982:	2300      	movs	r3, #0
 8001984:	e6c8      	b.n	8001718 <__aeabi_ddiv+0x90>
 8001986:	465b      	mov	r3, fp
 8001988:	4303      	orrs	r3, r0
 800198a:	4699      	mov	r9, r3
 800198c:	d056      	beq.n	8001a3c <__aeabi_ddiv+0x3b4>
 800198e:	465b      	mov	r3, fp
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_ddiv+0x30e>
 8001994:	e0cd      	b.n	8001b32 <__aeabi_ddiv+0x4aa>
 8001996:	4658      	mov	r0, fp
 8001998:	f001 fa30 	bl	8002dfc <__clzsi2>
 800199c:	230b      	movs	r3, #11
 800199e:	425b      	negs	r3, r3
 80019a0:	469c      	mov	ip, r3
 80019a2:	0002      	movs	r2, r0
 80019a4:	4484      	add	ip, r0
 80019a6:	4666      	mov	r6, ip
 80019a8:	231d      	movs	r3, #29
 80019aa:	1b9b      	subs	r3, r3, r6
 80019ac:	0026      	movs	r6, r4
 80019ae:	0011      	movs	r1, r2
 80019b0:	4658      	mov	r0, fp
 80019b2:	40de      	lsrs	r6, r3
 80019b4:	3908      	subs	r1, #8
 80019b6:	4088      	lsls	r0, r1
 80019b8:	0033      	movs	r3, r6
 80019ba:	4303      	orrs	r3, r0
 80019bc:	4699      	mov	r9, r3
 80019be:	0023      	movs	r3, r4
 80019c0:	408b      	lsls	r3, r1
 80019c2:	4698      	mov	r8, r3
 80019c4:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <__aeabi_ddiv+0x398>)
 80019c6:	2400      	movs	r4, #0
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	469a      	mov	sl, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	e682      	b.n	80016d8 <__aeabi_ddiv+0x50>
 80019d2:	465a      	mov	r2, fp
 80019d4:	4302      	orrs	r2, r0
 80019d6:	4691      	mov	r9, r2
 80019d8:	d12a      	bne.n	8001a30 <__aeabi_ddiv+0x3a8>
 80019da:	2200      	movs	r2, #0
 80019dc:	469a      	mov	sl, r3
 80019de:	2302      	movs	r3, #2
 80019e0:	4690      	mov	r8, r2
 80019e2:	2408      	movs	r4, #8
 80019e4:	9303      	str	r3, [sp, #12]
 80019e6:	e677      	b.n	80016d8 <__aeabi_ddiv+0x50>
 80019e8:	465a      	mov	r2, fp
 80019ea:	9b00      	ldr	r3, [sp, #0]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <__aeabi_ddiv+0x39c>)
 80019f0:	469c      	mov	ip, r3
 80019f2:	44e2      	add	sl, ip
 80019f4:	2a00      	cmp	r2, #0
 80019f6:	d117      	bne.n	8001a28 <__aeabi_ddiv+0x3a0>
 80019f8:	2302      	movs	r3, #2
 80019fa:	431c      	orrs	r4, r3
 80019fc:	2300      	movs	r3, #0
 80019fe:	469b      	mov	fp, r3
 8001a00:	3302      	adds	r3, #2
 8001a02:	e689      	b.n	8001718 <__aeabi_ddiv+0x90>
 8001a04:	000007ff 	.word	0x000007ff
 8001a08:	fffffc01 	.word	0xfffffc01
 8001a0c:	0800dc60 	.word	0x0800dc60
 8001a10:	000003ff 	.word	0x000003ff
 8001a14:	feffffff 	.word	0xfeffffff
 8001a18:	000007fe 	.word	0x000007fe
 8001a1c:	000003f3 	.word	0x000003f3
 8001a20:	fffffc0d 	.word	0xfffffc0d
 8001a24:	fffff801 	.word	0xfffff801
 8001a28:	2303      	movs	r3, #3
 8001a2a:	0032      	movs	r2, r6
 8001a2c:	431c      	orrs	r4, r3
 8001a2e:	e673      	b.n	8001718 <__aeabi_ddiv+0x90>
 8001a30:	469a      	mov	sl, r3
 8001a32:	2303      	movs	r3, #3
 8001a34:	46d9      	mov	r9, fp
 8001a36:	240c      	movs	r4, #12
 8001a38:	9303      	str	r3, [sp, #12]
 8001a3a:	e64d      	b.n	80016d8 <__aeabi_ddiv+0x50>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	4698      	mov	r8, r3
 8001a40:	469a      	mov	sl, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	2404      	movs	r4, #4
 8001a46:	9303      	str	r3, [sp, #12]
 8001a48:	e646      	b.n	80016d8 <__aeabi_ddiv+0x50>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	2300      	movs	r3, #0
 8001a50:	469b      	mov	fp, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	e660      	b.n	8001718 <__aeabi_ddiv+0x90>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2480      	movs	r4, #128	@ 0x80
 8001a5a:	4698      	mov	r8, r3
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	4b92      	ldr	r3, [pc, #584]	@ (8001ca8 <__aeabi_ddiv+0x620>)
 8001a60:	0324      	lsls	r4, r4, #12
 8001a62:	e671      	b.n	8001748 <__aeabi_ddiv+0xc0>
 8001a64:	2201      	movs	r2, #1
 8001a66:	4252      	negs	r2, r2
 8001a68:	2101      	movs	r1, #1
 8001a6a:	1ac9      	subs	r1, r1, r3
 8001a6c:	2938      	cmp	r1, #56	@ 0x38
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_ddiv+0x3ea>
 8001a70:	e666      	b.n	8001740 <__aeabi_ddiv+0xb8>
 8001a72:	291f      	cmp	r1, #31
 8001a74:	dc00      	bgt.n	8001a78 <__aeabi_ddiv+0x3f0>
 8001a76:	e0ab      	b.n	8001bd0 <__aeabi_ddiv+0x548>
 8001a78:	201f      	movs	r0, #31
 8001a7a:	4240      	negs	r0, r0
 8001a7c:	1ac3      	subs	r3, r0, r3
 8001a7e:	4658      	mov	r0, fp
 8001a80:	40d8      	lsrs	r0, r3
 8001a82:	0003      	movs	r3, r0
 8001a84:	2920      	cmp	r1, #32
 8001a86:	d004      	beq.n	8001a92 <__aeabi_ddiv+0x40a>
 8001a88:	4658      	mov	r0, fp
 8001a8a:	4988      	ldr	r1, [pc, #544]	@ (8001cac <__aeabi_ddiv+0x624>)
 8001a8c:	4451      	add	r1, sl
 8001a8e:	4088      	lsls	r0, r1
 8001a90:	4302      	orrs	r2, r0
 8001a92:	1e51      	subs	r1, r2, #1
 8001a94:	418a      	sbcs	r2, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	2307      	movs	r3, #7
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	4011      	ands	r1, r2
 8001aa0:	4213      	tst	r3, r2
 8001aa2:	d00c      	beq.n	8001abe <__aeabi_ddiv+0x436>
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d100      	bne.n	8001aae <__aeabi_ddiv+0x426>
 8001aac:	e0f9      	b.n	8001ca2 <__aeabi_ddiv+0x61a>
 8001aae:	1d11      	adds	r1, r2, #4
 8001ab0:	4291      	cmp	r1, r2
 8001ab2:	419b      	sbcs	r3, r3
 8001ab4:	000a      	movs	r2, r1
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	0759      	lsls	r1, r3, #29
 8001aba:	025b      	lsls	r3, r3, #9
 8001abc:	0b1c      	lsrs	r4, r3, #12
 8001abe:	08d2      	lsrs	r2, r2, #3
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	4690      	mov	r8, r2
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e63f      	b.n	8001748 <__aeabi_ddiv+0xc0>
 8001ac8:	2480      	movs	r4, #128	@ 0x80
 8001aca:	464b      	mov	r3, r9
 8001acc:	0324      	lsls	r4, r4, #12
 8001ace:	4223      	tst	r3, r4
 8001ad0:	d009      	beq.n	8001ae6 <__aeabi_ddiv+0x45e>
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	4223      	tst	r3, r4
 8001ad6:	d106      	bne.n	8001ae6 <__aeabi_ddiv+0x45e>
 8001ad8:	431c      	orrs	r4, r3
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	002e      	movs	r6, r5
 8001ade:	4690      	mov	r8, r2
 8001ae0:	4b71      	ldr	r3, [pc, #452]	@ (8001ca8 <__aeabi_ddiv+0x620>)
 8001ae2:	0b24      	lsrs	r4, r4, #12
 8001ae4:	e630      	b.n	8001748 <__aeabi_ddiv+0xc0>
 8001ae6:	2480      	movs	r4, #128	@ 0x80
 8001ae8:	464b      	mov	r3, r9
 8001aea:	0324      	lsls	r4, r4, #12
 8001aec:	431c      	orrs	r4, r3
 8001aee:	0324      	lsls	r4, r4, #12
 8001af0:	9e02      	ldr	r6, [sp, #8]
 8001af2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca8 <__aeabi_ddiv+0x620>)
 8001af4:	0b24      	lsrs	r4, r4, #12
 8001af6:	e627      	b.n	8001748 <__aeabi_ddiv+0xc0>
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d100      	bne.n	8001afe <__aeabi_ddiv+0x476>
 8001afc:	e700      	b.n	8001900 <__aeabi_ddiv+0x278>
 8001afe:	9800      	ldr	r0, [sp, #0]
 8001b00:	1e51      	subs	r1, r2, #1
 8001b02:	4684      	mov	ip, r0
 8001b04:	4464      	add	r4, ip
 8001b06:	4284      	cmp	r4, r0
 8001b08:	d200      	bcs.n	8001b0c <__aeabi_ddiv+0x484>
 8001b0a:	e084      	b.n	8001c16 <__aeabi_ddiv+0x58e>
 8001b0c:	42bc      	cmp	r4, r7
 8001b0e:	d200      	bcs.n	8001b12 <__aeabi_ddiv+0x48a>
 8001b10:	e0ae      	b.n	8001c70 <__aeabi_ddiv+0x5e8>
 8001b12:	d100      	bne.n	8001b16 <__aeabi_ddiv+0x48e>
 8001b14:	e0c1      	b.n	8001c9a <__aeabi_ddiv+0x612>
 8001b16:	000a      	movs	r2, r1
 8001b18:	e6f0      	b.n	80018fc <__aeabi_ddiv+0x274>
 8001b1a:	4542      	cmp	r2, r8
 8001b1c:	d900      	bls.n	8001b20 <__aeabi_ddiv+0x498>
 8001b1e:	e62c      	b.n	800177a <__aeabi_ddiv+0xf2>
 8001b20:	464b      	mov	r3, r9
 8001b22:	07dc      	lsls	r4, r3, #31
 8001b24:	0858      	lsrs	r0, r3, #1
 8001b26:	4643      	mov	r3, r8
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	431c      	orrs	r4, r3
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	07df      	lsls	r7, r3, #31
 8001b30:	e62a      	b.n	8001788 <__aeabi_ddiv+0x100>
 8001b32:	f001 f963 	bl	8002dfc <__clzsi2>
 8001b36:	2315      	movs	r3, #21
 8001b38:	469c      	mov	ip, r3
 8001b3a:	4484      	add	ip, r0
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	4663      	mov	r3, ip
 8001b40:	3220      	adds	r2, #32
 8001b42:	2b1c      	cmp	r3, #28
 8001b44:	dc00      	bgt.n	8001b48 <__aeabi_ddiv+0x4c0>
 8001b46:	e72e      	b.n	80019a6 <__aeabi_ddiv+0x31e>
 8001b48:	0023      	movs	r3, r4
 8001b4a:	3808      	subs	r0, #8
 8001b4c:	4083      	lsls	r3, r0
 8001b4e:	4699      	mov	r9, r3
 8001b50:	2300      	movs	r3, #0
 8001b52:	4698      	mov	r8, r3
 8001b54:	e736      	b.n	80019c4 <__aeabi_ddiv+0x33c>
 8001b56:	f001 f951 	bl	8002dfc <__clzsi2>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	3215      	adds	r2, #21
 8001b60:	3320      	adds	r3, #32
 8001b62:	2a1c      	cmp	r2, #28
 8001b64:	dc00      	bgt.n	8001b68 <__aeabi_ddiv+0x4e0>
 8001b66:	e6fb      	b.n	8001960 <__aeabi_ddiv+0x2d8>
 8001b68:	9900      	ldr	r1, [sp, #0]
 8001b6a:	3808      	subs	r0, #8
 8001b6c:	4081      	lsls	r1, r0
 8001b6e:	2200      	movs	r2, #0
 8001b70:	468b      	mov	fp, r1
 8001b72:	e702      	b.n	800197a <__aeabi_ddiv+0x2f2>
 8001b74:	9900      	ldr	r1, [sp, #0]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	468c      	mov	ip, r1
 8001b7a:	4464      	add	r4, ip
 8001b7c:	42a1      	cmp	r1, r4
 8001b7e:	d900      	bls.n	8001b82 <__aeabi_ddiv+0x4fa>
 8001b80:	e69a      	b.n	80018b8 <__aeabi_ddiv+0x230>
 8001b82:	42a2      	cmp	r2, r4
 8001b84:	d800      	bhi.n	8001b88 <__aeabi_ddiv+0x500>
 8001b86:	e697      	b.n	80018b8 <__aeabi_ddiv+0x230>
 8001b88:	1e83      	subs	r3, r0, #2
 8001b8a:	4464      	add	r4, ip
 8001b8c:	e694      	b.n	80018b8 <__aeabi_ddiv+0x230>
 8001b8e:	46ac      	mov	ip, r5
 8001b90:	4461      	add	r1, ip
 8001b92:	3f01      	subs	r7, #1
 8001b94:	428d      	cmp	r5, r1
 8001b96:	d900      	bls.n	8001b9a <__aeabi_ddiv+0x512>
 8001b98:	e680      	b.n	800189c <__aeabi_ddiv+0x214>
 8001b9a:	428a      	cmp	r2, r1
 8001b9c:	d800      	bhi.n	8001ba0 <__aeabi_ddiv+0x518>
 8001b9e:	e67d      	b.n	800189c <__aeabi_ddiv+0x214>
 8001ba0:	1e87      	subs	r7, r0, #2
 8001ba2:	4461      	add	r1, ip
 8001ba4:	e67a      	b.n	800189c <__aeabi_ddiv+0x214>
 8001ba6:	4285      	cmp	r5, r0
 8001ba8:	d000      	beq.n	8001bac <__aeabi_ddiv+0x524>
 8001baa:	e65f      	b.n	800186c <__aeabi_ddiv+0x1e4>
 8001bac:	45b9      	cmp	r9, r7
 8001bae:	d900      	bls.n	8001bb2 <__aeabi_ddiv+0x52a>
 8001bb0:	e65c      	b.n	800186c <__aeabi_ddiv+0x1e4>
 8001bb2:	e656      	b.n	8001862 <__aeabi_ddiv+0x1da>
 8001bb4:	42a2      	cmp	r2, r4
 8001bb6:	d800      	bhi.n	8001bba <__aeabi_ddiv+0x532>
 8001bb8:	e61a      	b.n	80017f0 <__aeabi_ddiv+0x168>
 8001bba:	1e83      	subs	r3, r0, #2
 8001bbc:	4464      	add	r4, ip
 8001bbe:	e617      	b.n	80017f0 <__aeabi_ddiv+0x168>
 8001bc0:	428a      	cmp	r2, r1
 8001bc2:	d800      	bhi.n	8001bc6 <__aeabi_ddiv+0x53e>
 8001bc4:	e600      	b.n	80017c8 <__aeabi_ddiv+0x140>
 8001bc6:	46ac      	mov	ip, r5
 8001bc8:	1e83      	subs	r3, r0, #2
 8001bca:	4698      	mov	r8, r3
 8001bcc:	4461      	add	r1, ip
 8001bce:	e5fb      	b.n	80017c8 <__aeabi_ddiv+0x140>
 8001bd0:	4837      	ldr	r0, [pc, #220]	@ (8001cb0 <__aeabi_ddiv+0x628>)
 8001bd2:	0014      	movs	r4, r2
 8001bd4:	4450      	add	r0, sl
 8001bd6:	4082      	lsls	r2, r0
 8001bd8:	465b      	mov	r3, fp
 8001bda:	0017      	movs	r7, r2
 8001bdc:	4083      	lsls	r3, r0
 8001bde:	40cc      	lsrs	r4, r1
 8001be0:	1e7a      	subs	r2, r7, #1
 8001be2:	4197      	sbcs	r7, r2
 8001be4:	4323      	orrs	r3, r4
 8001be6:	433b      	orrs	r3, r7
 8001be8:	001a      	movs	r2, r3
 8001bea:	465b      	mov	r3, fp
 8001bec:	40cb      	lsrs	r3, r1
 8001bee:	0751      	lsls	r1, r2, #29
 8001bf0:	d009      	beq.n	8001c06 <__aeabi_ddiv+0x57e>
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	4011      	ands	r1, r2
 8001bf6:	2904      	cmp	r1, #4
 8001bf8:	d005      	beq.n	8001c06 <__aeabi_ddiv+0x57e>
 8001bfa:	1d11      	adds	r1, r2, #4
 8001bfc:	4291      	cmp	r1, r2
 8001bfe:	4192      	sbcs	r2, r2
 8001c00:	4252      	negs	r2, r2
 8001c02:	189b      	adds	r3, r3, r2
 8001c04:	000a      	movs	r2, r1
 8001c06:	0219      	lsls	r1, r3, #8
 8001c08:	d400      	bmi.n	8001c0c <__aeabi_ddiv+0x584>
 8001c0a:	e755      	b.n	8001ab8 <__aeabi_ddiv+0x430>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2301      	movs	r3, #1
 8001c10:	2400      	movs	r4, #0
 8001c12:	4690      	mov	r8, r2
 8001c14:	e598      	b.n	8001748 <__aeabi_ddiv+0xc0>
 8001c16:	000a      	movs	r2, r1
 8001c18:	42bc      	cmp	r4, r7
 8001c1a:	d000      	beq.n	8001c1e <__aeabi_ddiv+0x596>
 8001c1c:	e66e      	b.n	80018fc <__aeabi_ddiv+0x274>
 8001c1e:	454b      	cmp	r3, r9
 8001c20:	d000      	beq.n	8001c24 <__aeabi_ddiv+0x59c>
 8001c22:	e66b      	b.n	80018fc <__aeabi_ddiv+0x274>
 8001c24:	e66c      	b.n	8001900 <__aeabi_ddiv+0x278>
 8001c26:	4b23      	ldr	r3, [pc, #140]	@ (8001cb4 <__aeabi_ddiv+0x62c>)
 8001c28:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <__aeabi_ddiv+0x630>)
 8001c2a:	4453      	add	r3, sl
 8001c2c:	4592      	cmp	sl, r2
 8001c2e:	da00      	bge.n	8001c32 <__aeabi_ddiv+0x5aa>
 8001c30:	e718      	b.n	8001a64 <__aeabi_ddiv+0x3dc>
 8001c32:	2101      	movs	r1, #1
 8001c34:	4249      	negs	r1, r1
 8001c36:	1d0a      	adds	r2, r1, #4
 8001c38:	428a      	cmp	r2, r1
 8001c3a:	4189      	sbcs	r1, r1
 8001c3c:	4249      	negs	r1, r1
 8001c3e:	448b      	add	fp, r1
 8001c40:	e666      	b.n	8001910 <__aeabi_ddiv+0x288>
 8001c42:	210f      	movs	r1, #15
 8001c44:	4011      	ands	r1, r2
 8001c46:	2904      	cmp	r1, #4
 8001c48:	d100      	bne.n	8001c4c <__aeabi_ddiv+0x5c4>
 8001c4a:	e661      	b.n	8001910 <__aeabi_ddiv+0x288>
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	e7f2      	b.n	8001c36 <__aeabi_ddiv+0x5ae>
 8001c50:	42bc      	cmp	r4, r7
 8001c52:	d800      	bhi.n	8001c56 <__aeabi_ddiv+0x5ce>
 8001c54:	e60a      	b.n	800186c <__aeabi_ddiv+0x1e4>
 8001c56:	2302      	movs	r3, #2
 8001c58:	425b      	negs	r3, r3
 8001c5a:	469c      	mov	ip, r3
 8001c5c:	9900      	ldr	r1, [sp, #0]
 8001c5e:	444f      	add	r7, r9
 8001c60:	454f      	cmp	r7, r9
 8001c62:	419b      	sbcs	r3, r3
 8001c64:	44e3      	add	fp, ip
 8001c66:	468c      	mov	ip, r1
 8001c68:	425b      	negs	r3, r3
 8001c6a:	4463      	add	r3, ip
 8001c6c:	18c0      	adds	r0, r0, r3
 8001c6e:	e5ff      	b.n	8001870 <__aeabi_ddiv+0x1e8>
 8001c70:	4649      	mov	r1, r9
 8001c72:	9d00      	ldr	r5, [sp, #0]
 8001c74:	0048      	lsls	r0, r1, #1
 8001c76:	4548      	cmp	r0, r9
 8001c78:	4189      	sbcs	r1, r1
 8001c7a:	46ac      	mov	ip, r5
 8001c7c:	4249      	negs	r1, r1
 8001c7e:	4461      	add	r1, ip
 8001c80:	4681      	mov	r9, r0
 8001c82:	3a02      	subs	r2, #2
 8001c84:	1864      	adds	r4, r4, r1
 8001c86:	e7c7      	b.n	8001c18 <__aeabi_ddiv+0x590>
 8001c88:	2480      	movs	r4, #128	@ 0x80
 8001c8a:	465b      	mov	r3, fp
 8001c8c:	0324      	lsls	r4, r4, #12
 8001c8e:	431c      	orrs	r4, r3
 8001c90:	0324      	lsls	r4, r4, #12
 8001c92:	4690      	mov	r8, r2
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__aeabi_ddiv+0x620>)
 8001c96:	0b24      	lsrs	r4, r4, #12
 8001c98:	e556      	b.n	8001748 <__aeabi_ddiv+0xc0>
 8001c9a:	4599      	cmp	r9, r3
 8001c9c:	d3e8      	bcc.n	8001c70 <__aeabi_ddiv+0x5e8>
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	e7bd      	b.n	8001c1e <__aeabi_ddiv+0x596>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e708      	b.n	8001ab8 <__aeabi_ddiv+0x430>
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	000007ff 	.word	0x000007ff
 8001cac:	0000043e 	.word	0x0000043e
 8001cb0:	0000041e 	.word	0x0000041e
 8001cb4:	000003ff 	.word	0x000003ff
 8001cb8:	fffffc02 	.word	0xfffffc02

08001cbc <__eqdf2>:
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	4657      	mov	r7, sl
 8001cc0:	46de      	mov	lr, fp
 8001cc2:	464e      	mov	r6, r9
 8001cc4:	4645      	mov	r5, r8
 8001cc6:	b5e0      	push	{r5, r6, r7, lr}
 8001cc8:	000d      	movs	r5, r1
 8001cca:	0004      	movs	r4, r0
 8001ccc:	0fe8      	lsrs	r0, r5, #31
 8001cce:	4683      	mov	fp, r0
 8001cd0:	0309      	lsls	r1, r1, #12
 8001cd2:	0fd8      	lsrs	r0, r3, #31
 8001cd4:	0b09      	lsrs	r1, r1, #12
 8001cd6:	4682      	mov	sl, r0
 8001cd8:	4819      	ldr	r0, [pc, #100]	@ (8001d40 <__eqdf2+0x84>)
 8001cda:	468c      	mov	ip, r1
 8001cdc:	031f      	lsls	r7, r3, #12
 8001cde:	0069      	lsls	r1, r5, #1
 8001ce0:	005e      	lsls	r6, r3, #1
 8001ce2:	0d49      	lsrs	r1, r1, #21
 8001ce4:	0b3f      	lsrs	r7, r7, #12
 8001ce6:	0d76      	lsrs	r6, r6, #21
 8001ce8:	4281      	cmp	r1, r0
 8001cea:	d018      	beq.n	8001d1e <__eqdf2+0x62>
 8001cec:	4286      	cmp	r6, r0
 8001cee:	d00f      	beq.n	8001d10 <__eqdf2+0x54>
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	42b1      	cmp	r1, r6
 8001cf4:	d10d      	bne.n	8001d12 <__eqdf2+0x56>
 8001cf6:	45bc      	cmp	ip, r7
 8001cf8:	d10b      	bne.n	8001d12 <__eqdf2+0x56>
 8001cfa:	4294      	cmp	r4, r2
 8001cfc:	d109      	bne.n	8001d12 <__eqdf2+0x56>
 8001cfe:	45d3      	cmp	fp, sl
 8001d00:	d01c      	beq.n	8001d3c <__eqdf2+0x80>
 8001d02:	2900      	cmp	r1, #0
 8001d04:	d105      	bne.n	8001d12 <__eqdf2+0x56>
 8001d06:	4660      	mov	r0, ip
 8001d08:	4320      	orrs	r0, r4
 8001d0a:	1e43      	subs	r3, r0, #1
 8001d0c:	4198      	sbcs	r0, r3
 8001d0e:	e000      	b.n	8001d12 <__eqdf2+0x56>
 8001d10:	2001      	movs	r0, #1
 8001d12:	bcf0      	pop	{r4, r5, r6, r7}
 8001d14:	46bb      	mov	fp, r7
 8001d16:	46b2      	mov	sl, r6
 8001d18:	46a9      	mov	r9, r5
 8001d1a:	46a0      	mov	r8, r4
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	2001      	movs	r0, #1
 8001d20:	428e      	cmp	r6, r1
 8001d22:	d1f6      	bne.n	8001d12 <__eqdf2+0x56>
 8001d24:	4661      	mov	r1, ip
 8001d26:	4339      	orrs	r1, r7
 8001d28:	000f      	movs	r7, r1
 8001d2a:	4317      	orrs	r7, r2
 8001d2c:	4327      	orrs	r7, r4
 8001d2e:	d1f0      	bne.n	8001d12 <__eqdf2+0x56>
 8001d30:	465b      	mov	r3, fp
 8001d32:	4652      	mov	r2, sl
 8001d34:	1a98      	subs	r0, r3, r2
 8001d36:	1e43      	subs	r3, r0, #1
 8001d38:	4198      	sbcs	r0, r3
 8001d3a:	e7ea      	b.n	8001d12 <__eqdf2+0x56>
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	e7e8      	b.n	8001d12 <__eqdf2+0x56>
 8001d40:	000007ff 	.word	0x000007ff

08001d44 <__gedf2>:
 8001d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d46:	4657      	mov	r7, sl
 8001d48:	464e      	mov	r6, r9
 8001d4a:	4645      	mov	r5, r8
 8001d4c:	46de      	mov	lr, fp
 8001d4e:	b5e0      	push	{r5, r6, r7, lr}
 8001d50:	000d      	movs	r5, r1
 8001d52:	030f      	lsls	r7, r1, #12
 8001d54:	0b39      	lsrs	r1, r7, #12
 8001d56:	b083      	sub	sp, #12
 8001d58:	0004      	movs	r4, r0
 8001d5a:	4680      	mov	r8, r0
 8001d5c:	9101      	str	r1, [sp, #4]
 8001d5e:	0058      	lsls	r0, r3, #1
 8001d60:	0fe9      	lsrs	r1, r5, #31
 8001d62:	4f31      	ldr	r7, [pc, #196]	@ (8001e28 <__gedf2+0xe4>)
 8001d64:	0d40      	lsrs	r0, r0, #21
 8001d66:	468c      	mov	ip, r1
 8001d68:	006e      	lsls	r6, r5, #1
 8001d6a:	0319      	lsls	r1, r3, #12
 8001d6c:	4682      	mov	sl, r0
 8001d6e:	4691      	mov	r9, r2
 8001d70:	0d76      	lsrs	r6, r6, #21
 8001d72:	0b09      	lsrs	r1, r1, #12
 8001d74:	0fd8      	lsrs	r0, r3, #31
 8001d76:	42be      	cmp	r6, r7
 8001d78:	d01f      	beq.n	8001dba <__gedf2+0x76>
 8001d7a:	45ba      	cmp	sl, r7
 8001d7c:	d00f      	beq.n	8001d9e <__gedf2+0x5a>
 8001d7e:	2e00      	cmp	r6, #0
 8001d80:	d12f      	bne.n	8001de2 <__gedf2+0x9e>
 8001d82:	4655      	mov	r5, sl
 8001d84:	9e01      	ldr	r6, [sp, #4]
 8001d86:	4334      	orrs	r4, r6
 8001d88:	2d00      	cmp	r5, #0
 8001d8a:	d127      	bne.n	8001ddc <__gedf2+0x98>
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	d03a      	beq.n	8001e06 <__gedf2+0xc2>
 8001d90:	2c00      	cmp	r4, #0
 8001d92:	d145      	bne.n	8001e20 <__gedf2+0xdc>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d11a      	bne.n	8001dce <__gedf2+0x8a>
 8001d98:	2001      	movs	r0, #1
 8001d9a:	4240      	negs	r0, r0
 8001d9c:	e017      	b.n	8001dce <__gedf2+0x8a>
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	d13b      	bne.n	8001e1a <__gedf2+0xd6>
 8001da2:	2e00      	cmp	r6, #0
 8001da4:	d102      	bne.n	8001dac <__gedf2+0x68>
 8001da6:	9f01      	ldr	r7, [sp, #4]
 8001da8:	4327      	orrs	r7, r4
 8001daa:	d0f3      	beq.n	8001d94 <__gedf2+0x50>
 8001dac:	4584      	cmp	ip, r0
 8001dae:	d109      	bne.n	8001dc4 <__gedf2+0x80>
 8001db0:	4663      	mov	r3, ip
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <__gedf2+0x54>
 8001db6:	4660      	mov	r0, ip
 8001db8:	e009      	b.n	8001dce <__gedf2+0x8a>
 8001dba:	9f01      	ldr	r7, [sp, #4]
 8001dbc:	4327      	orrs	r7, r4
 8001dbe:	d12c      	bne.n	8001e1a <__gedf2+0xd6>
 8001dc0:	45b2      	cmp	sl, r6
 8001dc2:	d024      	beq.n	8001e0e <__gedf2+0xca>
 8001dc4:	4663      	mov	r3, ip
 8001dc6:	2002      	movs	r0, #2
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	4018      	ands	r0, r3
 8001dcc:	3801      	subs	r0, #1
 8001dce:	b003      	add	sp, #12
 8001dd0:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd2:	46bb      	mov	fp, r7
 8001dd4:	46b2      	mov	sl, r6
 8001dd6:	46a9      	mov	r9, r5
 8001dd8:	46a0      	mov	r8, r4
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ddc:	2c00      	cmp	r4, #0
 8001dde:	d0d9      	beq.n	8001d94 <__gedf2+0x50>
 8001de0:	e7e4      	b.n	8001dac <__gedf2+0x68>
 8001de2:	4654      	mov	r4, sl
 8001de4:	2c00      	cmp	r4, #0
 8001de6:	d0ed      	beq.n	8001dc4 <__gedf2+0x80>
 8001de8:	4584      	cmp	ip, r0
 8001dea:	d1eb      	bne.n	8001dc4 <__gedf2+0x80>
 8001dec:	4556      	cmp	r6, sl
 8001dee:	dce9      	bgt.n	8001dc4 <__gedf2+0x80>
 8001df0:	dbde      	blt.n	8001db0 <__gedf2+0x6c>
 8001df2:	9b01      	ldr	r3, [sp, #4]
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d8e5      	bhi.n	8001dc4 <__gedf2+0x80>
 8001df8:	d1da      	bne.n	8001db0 <__gedf2+0x6c>
 8001dfa:	45c8      	cmp	r8, r9
 8001dfc:	d8e2      	bhi.n	8001dc4 <__gedf2+0x80>
 8001dfe:	2000      	movs	r0, #0
 8001e00:	45c8      	cmp	r8, r9
 8001e02:	d2e4      	bcs.n	8001dce <__gedf2+0x8a>
 8001e04:	e7d4      	b.n	8001db0 <__gedf2+0x6c>
 8001e06:	2000      	movs	r0, #0
 8001e08:	2c00      	cmp	r4, #0
 8001e0a:	d0e0      	beq.n	8001dce <__gedf2+0x8a>
 8001e0c:	e7da      	b.n	8001dc4 <__gedf2+0x80>
 8001e0e:	4311      	orrs	r1, r2
 8001e10:	d103      	bne.n	8001e1a <__gedf2+0xd6>
 8001e12:	4584      	cmp	ip, r0
 8001e14:	d1d6      	bne.n	8001dc4 <__gedf2+0x80>
 8001e16:	2000      	movs	r0, #0
 8001e18:	e7d9      	b.n	8001dce <__gedf2+0x8a>
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	4240      	negs	r0, r0
 8001e1e:	e7d6      	b.n	8001dce <__gedf2+0x8a>
 8001e20:	4584      	cmp	ip, r0
 8001e22:	d0e6      	beq.n	8001df2 <__gedf2+0xae>
 8001e24:	e7ce      	b.n	8001dc4 <__gedf2+0x80>
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	000007ff 	.word	0x000007ff

08001e2c <__ledf2>:
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	4657      	mov	r7, sl
 8001e30:	464e      	mov	r6, r9
 8001e32:	4645      	mov	r5, r8
 8001e34:	46de      	mov	lr, fp
 8001e36:	b5e0      	push	{r5, r6, r7, lr}
 8001e38:	000d      	movs	r5, r1
 8001e3a:	030f      	lsls	r7, r1, #12
 8001e3c:	0004      	movs	r4, r0
 8001e3e:	4680      	mov	r8, r0
 8001e40:	0fe8      	lsrs	r0, r5, #31
 8001e42:	0b39      	lsrs	r1, r7, #12
 8001e44:	4684      	mov	ip, r0
 8001e46:	b083      	sub	sp, #12
 8001e48:	0058      	lsls	r0, r3, #1
 8001e4a:	4f30      	ldr	r7, [pc, #192]	@ (8001f0c <__ledf2+0xe0>)
 8001e4c:	0d40      	lsrs	r0, r0, #21
 8001e4e:	9101      	str	r1, [sp, #4]
 8001e50:	031e      	lsls	r6, r3, #12
 8001e52:	0069      	lsls	r1, r5, #1
 8001e54:	4682      	mov	sl, r0
 8001e56:	4691      	mov	r9, r2
 8001e58:	0d49      	lsrs	r1, r1, #21
 8001e5a:	0b36      	lsrs	r6, r6, #12
 8001e5c:	0fd8      	lsrs	r0, r3, #31
 8001e5e:	42b9      	cmp	r1, r7
 8001e60:	d020      	beq.n	8001ea4 <__ledf2+0x78>
 8001e62:	45ba      	cmp	sl, r7
 8001e64:	d00f      	beq.n	8001e86 <__ledf2+0x5a>
 8001e66:	2900      	cmp	r1, #0
 8001e68:	d12b      	bne.n	8001ec2 <__ledf2+0x96>
 8001e6a:	9901      	ldr	r1, [sp, #4]
 8001e6c:	430c      	orrs	r4, r1
 8001e6e:	4651      	mov	r1, sl
 8001e70:	2900      	cmp	r1, #0
 8001e72:	d137      	bne.n	8001ee4 <__ledf2+0xb8>
 8001e74:	4332      	orrs	r2, r6
 8001e76:	d038      	beq.n	8001eea <__ledf2+0xbe>
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	d144      	bne.n	8001f06 <__ledf2+0xda>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d119      	bne.n	8001eb4 <__ledf2+0x88>
 8001e80:	2001      	movs	r0, #1
 8001e82:	4240      	negs	r0, r0
 8001e84:	e016      	b.n	8001eb4 <__ledf2+0x88>
 8001e86:	4316      	orrs	r6, r2
 8001e88:	d113      	bne.n	8001eb2 <__ledf2+0x86>
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d102      	bne.n	8001e94 <__ledf2+0x68>
 8001e8e:	9f01      	ldr	r7, [sp, #4]
 8001e90:	4327      	orrs	r7, r4
 8001e92:	d0f3      	beq.n	8001e7c <__ledf2+0x50>
 8001e94:	4584      	cmp	ip, r0
 8001e96:	d020      	beq.n	8001eda <__ledf2+0xae>
 8001e98:	4663      	mov	r3, ip
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	4018      	ands	r0, r3
 8001ea0:	3801      	subs	r0, #1
 8001ea2:	e007      	b.n	8001eb4 <__ledf2+0x88>
 8001ea4:	9f01      	ldr	r7, [sp, #4]
 8001ea6:	4327      	orrs	r7, r4
 8001ea8:	d103      	bne.n	8001eb2 <__ledf2+0x86>
 8001eaa:	458a      	cmp	sl, r1
 8001eac:	d1f4      	bne.n	8001e98 <__ledf2+0x6c>
 8001eae:	4316      	orrs	r6, r2
 8001eb0:	d01f      	beq.n	8001ef2 <__ledf2+0xc6>
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	b003      	add	sp, #12
 8001eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8001eb8:	46bb      	mov	fp, r7
 8001eba:	46b2      	mov	sl, r6
 8001ebc:	46a9      	mov	r9, r5
 8001ebe:	46a0      	mov	r8, r4
 8001ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec2:	4654      	mov	r4, sl
 8001ec4:	2c00      	cmp	r4, #0
 8001ec6:	d0e7      	beq.n	8001e98 <__ledf2+0x6c>
 8001ec8:	4584      	cmp	ip, r0
 8001eca:	d1e5      	bne.n	8001e98 <__ledf2+0x6c>
 8001ecc:	4551      	cmp	r1, sl
 8001ece:	dce3      	bgt.n	8001e98 <__ledf2+0x6c>
 8001ed0:	db03      	blt.n	8001eda <__ledf2+0xae>
 8001ed2:	9b01      	ldr	r3, [sp, #4]
 8001ed4:	42b3      	cmp	r3, r6
 8001ed6:	d8df      	bhi.n	8001e98 <__ledf2+0x6c>
 8001ed8:	d00f      	beq.n	8001efa <__ledf2+0xce>
 8001eda:	4663      	mov	r3, ip
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0cf      	beq.n	8001e80 <__ledf2+0x54>
 8001ee0:	4660      	mov	r0, ip
 8001ee2:	e7e7      	b.n	8001eb4 <__ledf2+0x88>
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d0c9      	beq.n	8001e7c <__ledf2+0x50>
 8001ee8:	e7d4      	b.n	8001e94 <__ledf2+0x68>
 8001eea:	2000      	movs	r0, #0
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	d0e1      	beq.n	8001eb4 <__ledf2+0x88>
 8001ef0:	e7d2      	b.n	8001e98 <__ledf2+0x6c>
 8001ef2:	4584      	cmp	ip, r0
 8001ef4:	d1d0      	bne.n	8001e98 <__ledf2+0x6c>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e7dc      	b.n	8001eb4 <__ledf2+0x88>
 8001efa:	45c8      	cmp	r8, r9
 8001efc:	d8cc      	bhi.n	8001e98 <__ledf2+0x6c>
 8001efe:	2000      	movs	r0, #0
 8001f00:	45c8      	cmp	r8, r9
 8001f02:	d2d7      	bcs.n	8001eb4 <__ledf2+0x88>
 8001f04:	e7e9      	b.n	8001eda <__ledf2+0xae>
 8001f06:	4584      	cmp	ip, r0
 8001f08:	d0e3      	beq.n	8001ed2 <__ledf2+0xa6>
 8001f0a:	e7c5      	b.n	8001e98 <__ledf2+0x6c>
 8001f0c:	000007ff 	.word	0x000007ff

08001f10 <__aeabi_dmul>:
 8001f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f12:	4657      	mov	r7, sl
 8001f14:	46de      	mov	lr, fp
 8001f16:	464e      	mov	r6, r9
 8001f18:	4645      	mov	r5, r8
 8001f1a:	b5e0      	push	{r5, r6, r7, lr}
 8001f1c:	001f      	movs	r7, r3
 8001f1e:	030b      	lsls	r3, r1, #12
 8001f20:	0b1b      	lsrs	r3, r3, #12
 8001f22:	0016      	movs	r6, r2
 8001f24:	469a      	mov	sl, r3
 8001f26:	0fca      	lsrs	r2, r1, #31
 8001f28:	004b      	lsls	r3, r1, #1
 8001f2a:	0004      	movs	r4, r0
 8001f2c:	4693      	mov	fp, r2
 8001f2e:	b087      	sub	sp, #28
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dmul+0x26>
 8001f34:	e0d5      	b.n	80020e2 <__aeabi_dmul+0x1d2>
 8001f36:	4abb      	ldr	r2, [pc, #748]	@ (8002224 <__aeabi_dmul+0x314>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dmul+0x2e>
 8001f3c:	e0f8      	b.n	8002130 <__aeabi_dmul+0x220>
 8001f3e:	4651      	mov	r1, sl
 8001f40:	0f42      	lsrs	r2, r0, #29
 8001f42:	00c9      	lsls	r1, r1, #3
 8001f44:	430a      	orrs	r2, r1
 8001f46:	2180      	movs	r1, #128	@ 0x80
 8001f48:	0409      	lsls	r1, r1, #16
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	00c2      	lsls	r2, r0, #3
 8001f4e:	4691      	mov	r9, r2
 8001f50:	4ab5      	ldr	r2, [pc, #724]	@ (8002228 <__aeabi_dmul+0x318>)
 8001f52:	468a      	mov	sl, r1
 8001f54:	189d      	adds	r5, r3, r2
 8001f56:	2300      	movs	r3, #0
 8001f58:	4698      	mov	r8, r3
 8001f5a:	9302      	str	r3, [sp, #8]
 8001f5c:	033c      	lsls	r4, r7, #12
 8001f5e:	007b      	lsls	r3, r7, #1
 8001f60:	0ffa      	lsrs	r2, r7, #31
 8001f62:	0030      	movs	r0, r6
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	9200      	str	r2, [sp, #0]
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dmul+0x5e>
 8001f6c:	e096      	b.n	800209c <__aeabi_dmul+0x18c>
 8001f6e:	4aad      	ldr	r2, [pc, #692]	@ (8002224 <__aeabi_dmul+0x314>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d031      	beq.n	8001fd8 <__aeabi_dmul+0xc8>
 8001f74:	0f72      	lsrs	r2, r6, #29
 8001f76:	00e4      	lsls	r4, r4, #3
 8001f78:	4322      	orrs	r2, r4
 8001f7a:	2480      	movs	r4, #128	@ 0x80
 8001f7c:	0424      	lsls	r4, r4, #16
 8001f7e:	4314      	orrs	r4, r2
 8001f80:	4aa9      	ldr	r2, [pc, #676]	@ (8002228 <__aeabi_dmul+0x318>)
 8001f82:	00f0      	lsls	r0, r6, #3
 8001f84:	4694      	mov	ip, r2
 8001f86:	4463      	add	r3, ip
 8001f88:	195b      	adds	r3, r3, r5
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	9201      	str	r2, [sp, #4]
 8001f8e:	4642      	mov	r2, r8
 8001f90:	2600      	movs	r6, #0
 8001f92:	2a0a      	cmp	r2, #10
 8001f94:	dc42      	bgt.n	800201c <__aeabi_dmul+0x10c>
 8001f96:	465a      	mov	r2, fp
 8001f98:	9900      	ldr	r1, [sp, #0]
 8001f9a:	404a      	eors	r2, r1
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	4642      	mov	r2, r8
 8001fa0:	2a02      	cmp	r2, #2
 8001fa2:	dc32      	bgt.n	800200a <__aeabi_dmul+0xfa>
 8001fa4:	3a01      	subs	r2, #1
 8001fa6:	2a01      	cmp	r2, #1
 8001fa8:	d900      	bls.n	8001fac <__aeabi_dmul+0x9c>
 8001faa:	e149      	b.n	8002240 <__aeabi_dmul+0x330>
 8001fac:	2e02      	cmp	r6, #2
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dmul+0xa2>
 8001fb0:	e0ca      	b.n	8002148 <__aeabi_dmul+0x238>
 8001fb2:	2e01      	cmp	r6, #1
 8001fb4:	d13d      	bne.n	8002032 <__aeabi_dmul+0x122>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2400      	movs	r4, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	0010      	movs	r0, r2
 8001fbe:	465a      	mov	r2, fp
 8001fc0:	051b      	lsls	r3, r3, #20
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	07d2      	lsls	r2, r2, #31
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	b007      	add	sp, #28
 8001fcc:	bcf0      	pop	{r4, r5, r6, r7}
 8001fce:	46bb      	mov	fp, r7
 8001fd0:	46b2      	mov	sl, r6
 8001fd2:	46a9      	mov	r9, r5
 8001fd4:	46a0      	mov	r8, r4
 8001fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd8:	4b92      	ldr	r3, [pc, #584]	@ (8002224 <__aeabi_dmul+0x314>)
 8001fda:	4326      	orrs	r6, r4
 8001fdc:	18eb      	adds	r3, r5, r3
 8001fde:	2e00      	cmp	r6, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dmul+0xd4>
 8001fe2:	e0bb      	b.n	800215c <__aeabi_dmul+0x24c>
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	465a      	mov	r2, fp
 8001fec:	4688      	mov	r8, r1
 8001fee:	9900      	ldr	r1, [sp, #0]
 8001ff0:	404a      	eors	r2, r1
 8001ff2:	2180      	movs	r1, #128	@ 0x80
 8001ff4:	0109      	lsls	r1, r1, #4
 8001ff6:	468c      	mov	ip, r1
 8001ff8:	0029      	movs	r1, r5
 8001ffa:	4461      	add	r1, ip
 8001ffc:	9101      	str	r1, [sp, #4]
 8001ffe:	4641      	mov	r1, r8
 8002000:	290a      	cmp	r1, #10
 8002002:	dd00      	ble.n	8002006 <__aeabi_dmul+0xf6>
 8002004:	e233      	b.n	800246e <__aeabi_dmul+0x55e>
 8002006:	4693      	mov	fp, r2
 8002008:	2603      	movs	r6, #3
 800200a:	4642      	mov	r2, r8
 800200c:	2701      	movs	r7, #1
 800200e:	4097      	lsls	r7, r2
 8002010:	21a6      	movs	r1, #166	@ 0xa6
 8002012:	003a      	movs	r2, r7
 8002014:	00c9      	lsls	r1, r1, #3
 8002016:	400a      	ands	r2, r1
 8002018:	420f      	tst	r7, r1
 800201a:	d031      	beq.n	8002080 <__aeabi_dmul+0x170>
 800201c:	9e02      	ldr	r6, [sp, #8]
 800201e:	2e02      	cmp	r6, #2
 8002020:	d100      	bne.n	8002024 <__aeabi_dmul+0x114>
 8002022:	e235      	b.n	8002490 <__aeabi_dmul+0x580>
 8002024:	2e03      	cmp	r6, #3
 8002026:	d100      	bne.n	800202a <__aeabi_dmul+0x11a>
 8002028:	e1d2      	b.n	80023d0 <__aeabi_dmul+0x4c0>
 800202a:	4654      	mov	r4, sl
 800202c:	4648      	mov	r0, r9
 800202e:	2e01      	cmp	r6, #1
 8002030:	d0c1      	beq.n	8001fb6 <__aeabi_dmul+0xa6>
 8002032:	9a01      	ldr	r2, [sp, #4]
 8002034:	4b7d      	ldr	r3, [pc, #500]	@ (800222c <__aeabi_dmul+0x31c>)
 8002036:	4694      	mov	ip, r2
 8002038:	4463      	add	r3, ip
 800203a:	2b00      	cmp	r3, #0
 800203c:	dc00      	bgt.n	8002040 <__aeabi_dmul+0x130>
 800203e:	e0c0      	b.n	80021c2 <__aeabi_dmul+0x2b2>
 8002040:	0742      	lsls	r2, r0, #29
 8002042:	d009      	beq.n	8002058 <__aeabi_dmul+0x148>
 8002044:	220f      	movs	r2, #15
 8002046:	4002      	ands	r2, r0
 8002048:	2a04      	cmp	r2, #4
 800204a:	d005      	beq.n	8002058 <__aeabi_dmul+0x148>
 800204c:	1d02      	adds	r2, r0, #4
 800204e:	4282      	cmp	r2, r0
 8002050:	4180      	sbcs	r0, r0
 8002052:	4240      	negs	r0, r0
 8002054:	1824      	adds	r4, r4, r0
 8002056:	0010      	movs	r0, r2
 8002058:	01e2      	lsls	r2, r4, #7
 800205a:	d506      	bpl.n	800206a <__aeabi_dmul+0x15a>
 800205c:	4b74      	ldr	r3, [pc, #464]	@ (8002230 <__aeabi_dmul+0x320>)
 800205e:	9a01      	ldr	r2, [sp, #4]
 8002060:	401c      	ands	r4, r3
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	4694      	mov	ip, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4463      	add	r3, ip
 800206a:	4a72      	ldr	r2, [pc, #456]	@ (8002234 <__aeabi_dmul+0x324>)
 800206c:	4293      	cmp	r3, r2
 800206e:	dc6b      	bgt.n	8002148 <__aeabi_dmul+0x238>
 8002070:	0762      	lsls	r2, r4, #29
 8002072:	08c0      	lsrs	r0, r0, #3
 8002074:	0264      	lsls	r4, r4, #9
 8002076:	055b      	lsls	r3, r3, #21
 8002078:	4302      	orrs	r2, r0
 800207a:	0b24      	lsrs	r4, r4, #12
 800207c:	0d5b      	lsrs	r3, r3, #21
 800207e:	e79d      	b.n	8001fbc <__aeabi_dmul+0xac>
 8002080:	2190      	movs	r1, #144	@ 0x90
 8002082:	0089      	lsls	r1, r1, #2
 8002084:	420f      	tst	r7, r1
 8002086:	d163      	bne.n	8002150 <__aeabi_dmul+0x240>
 8002088:	2288      	movs	r2, #136	@ 0x88
 800208a:	423a      	tst	r2, r7
 800208c:	d100      	bne.n	8002090 <__aeabi_dmul+0x180>
 800208e:	e0d7      	b.n	8002240 <__aeabi_dmul+0x330>
 8002090:	9b00      	ldr	r3, [sp, #0]
 8002092:	46a2      	mov	sl, r4
 8002094:	469b      	mov	fp, r3
 8002096:	4681      	mov	r9, r0
 8002098:	9602      	str	r6, [sp, #8]
 800209a:	e7bf      	b.n	800201c <__aeabi_dmul+0x10c>
 800209c:	0023      	movs	r3, r4
 800209e:	4333      	orrs	r3, r6
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dmul+0x194>
 80020a2:	e07f      	b.n	80021a4 <__aeabi_dmul+0x294>
 80020a4:	2c00      	cmp	r4, #0
 80020a6:	d100      	bne.n	80020aa <__aeabi_dmul+0x19a>
 80020a8:	e1ad      	b.n	8002406 <__aeabi_dmul+0x4f6>
 80020aa:	0020      	movs	r0, r4
 80020ac:	f000 fea6 	bl	8002dfc <__clzsi2>
 80020b0:	0002      	movs	r2, r0
 80020b2:	0003      	movs	r3, r0
 80020b4:	3a0b      	subs	r2, #11
 80020b6:	201d      	movs	r0, #29
 80020b8:	0019      	movs	r1, r3
 80020ba:	1a82      	subs	r2, r0, r2
 80020bc:	0030      	movs	r0, r6
 80020be:	3908      	subs	r1, #8
 80020c0:	40d0      	lsrs	r0, r2
 80020c2:	408c      	lsls	r4, r1
 80020c4:	4304      	orrs	r4, r0
 80020c6:	0030      	movs	r0, r6
 80020c8:	4088      	lsls	r0, r1
 80020ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002238 <__aeabi_dmul+0x328>)
 80020cc:	1aeb      	subs	r3, r5, r3
 80020ce:	4694      	mov	ip, r2
 80020d0:	4463      	add	r3, ip
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	9201      	str	r2, [sp, #4]
 80020d6:	4642      	mov	r2, r8
 80020d8:	2600      	movs	r6, #0
 80020da:	2a0a      	cmp	r2, #10
 80020dc:	dc00      	bgt.n	80020e0 <__aeabi_dmul+0x1d0>
 80020de:	e75a      	b.n	8001f96 <__aeabi_dmul+0x86>
 80020e0:	e79c      	b.n	800201c <__aeabi_dmul+0x10c>
 80020e2:	4653      	mov	r3, sl
 80020e4:	4303      	orrs	r3, r0
 80020e6:	4699      	mov	r9, r3
 80020e8:	d054      	beq.n	8002194 <__aeabi_dmul+0x284>
 80020ea:	4653      	mov	r3, sl
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dmul+0x1e2>
 80020f0:	e177      	b.n	80023e2 <__aeabi_dmul+0x4d2>
 80020f2:	4650      	mov	r0, sl
 80020f4:	f000 fe82 	bl	8002dfc <__clzsi2>
 80020f8:	230b      	movs	r3, #11
 80020fa:	425b      	negs	r3, r3
 80020fc:	469c      	mov	ip, r3
 80020fe:	0002      	movs	r2, r0
 8002100:	4484      	add	ip, r0
 8002102:	0011      	movs	r1, r2
 8002104:	4650      	mov	r0, sl
 8002106:	3908      	subs	r1, #8
 8002108:	4088      	lsls	r0, r1
 800210a:	231d      	movs	r3, #29
 800210c:	4680      	mov	r8, r0
 800210e:	4660      	mov	r0, ip
 8002110:	1a1b      	subs	r3, r3, r0
 8002112:	0020      	movs	r0, r4
 8002114:	40d8      	lsrs	r0, r3
 8002116:	0003      	movs	r3, r0
 8002118:	4640      	mov	r0, r8
 800211a:	4303      	orrs	r3, r0
 800211c:	469a      	mov	sl, r3
 800211e:	0023      	movs	r3, r4
 8002120:	408b      	lsls	r3, r1
 8002122:	4699      	mov	r9, r3
 8002124:	2300      	movs	r3, #0
 8002126:	4d44      	ldr	r5, [pc, #272]	@ (8002238 <__aeabi_dmul+0x328>)
 8002128:	4698      	mov	r8, r3
 800212a:	1aad      	subs	r5, r5, r2
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	e715      	b.n	8001f5c <__aeabi_dmul+0x4c>
 8002130:	4652      	mov	r2, sl
 8002132:	4302      	orrs	r2, r0
 8002134:	4691      	mov	r9, r2
 8002136:	d126      	bne.n	8002186 <__aeabi_dmul+0x276>
 8002138:	2200      	movs	r2, #0
 800213a:	001d      	movs	r5, r3
 800213c:	2302      	movs	r3, #2
 800213e:	4692      	mov	sl, r2
 8002140:	3208      	adds	r2, #8
 8002142:	4690      	mov	r8, r2
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	e709      	b.n	8001f5c <__aeabi_dmul+0x4c>
 8002148:	2400      	movs	r4, #0
 800214a:	2200      	movs	r2, #0
 800214c:	4b35      	ldr	r3, [pc, #212]	@ (8002224 <__aeabi_dmul+0x314>)
 800214e:	e735      	b.n	8001fbc <__aeabi_dmul+0xac>
 8002150:	2300      	movs	r3, #0
 8002152:	2480      	movs	r4, #128	@ 0x80
 8002154:	469b      	mov	fp, r3
 8002156:	0324      	lsls	r4, r4, #12
 8002158:	4b32      	ldr	r3, [pc, #200]	@ (8002224 <__aeabi_dmul+0x314>)
 800215a:	e72f      	b.n	8001fbc <__aeabi_dmul+0xac>
 800215c:	2202      	movs	r2, #2
 800215e:	4641      	mov	r1, r8
 8002160:	4311      	orrs	r1, r2
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	4694      	mov	ip, r2
 8002168:	002a      	movs	r2, r5
 800216a:	4462      	add	r2, ip
 800216c:	4688      	mov	r8, r1
 800216e:	9201      	str	r2, [sp, #4]
 8002170:	290a      	cmp	r1, #10
 8002172:	dd00      	ble.n	8002176 <__aeabi_dmul+0x266>
 8002174:	e752      	b.n	800201c <__aeabi_dmul+0x10c>
 8002176:	465a      	mov	r2, fp
 8002178:	2000      	movs	r0, #0
 800217a:	9900      	ldr	r1, [sp, #0]
 800217c:	0004      	movs	r4, r0
 800217e:	404a      	eors	r2, r1
 8002180:	4693      	mov	fp, r2
 8002182:	2602      	movs	r6, #2
 8002184:	e70b      	b.n	8001f9e <__aeabi_dmul+0x8e>
 8002186:	220c      	movs	r2, #12
 8002188:	001d      	movs	r5, r3
 800218a:	2303      	movs	r3, #3
 800218c:	4681      	mov	r9, r0
 800218e:	4690      	mov	r8, r2
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	e6e3      	b.n	8001f5c <__aeabi_dmul+0x4c>
 8002194:	2300      	movs	r3, #0
 8002196:	469a      	mov	sl, r3
 8002198:	3304      	adds	r3, #4
 800219a:	4698      	mov	r8, r3
 800219c:	3b03      	subs	r3, #3
 800219e:	2500      	movs	r5, #0
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	e6db      	b.n	8001f5c <__aeabi_dmul+0x4c>
 80021a4:	4642      	mov	r2, r8
 80021a6:	3301      	adds	r3, #1
 80021a8:	431a      	orrs	r2, r3
 80021aa:	002b      	movs	r3, r5
 80021ac:	4690      	mov	r8, r2
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	9201      	str	r2, [sp, #4]
 80021b2:	4642      	mov	r2, r8
 80021b4:	2400      	movs	r4, #0
 80021b6:	2000      	movs	r0, #0
 80021b8:	2601      	movs	r6, #1
 80021ba:	2a0a      	cmp	r2, #10
 80021bc:	dc00      	bgt.n	80021c0 <__aeabi_dmul+0x2b0>
 80021be:	e6ea      	b.n	8001f96 <__aeabi_dmul+0x86>
 80021c0:	e72c      	b.n	800201c <__aeabi_dmul+0x10c>
 80021c2:	2201      	movs	r2, #1
 80021c4:	1ad2      	subs	r2, r2, r3
 80021c6:	2a38      	cmp	r2, #56	@ 0x38
 80021c8:	dd00      	ble.n	80021cc <__aeabi_dmul+0x2bc>
 80021ca:	e6f4      	b.n	8001fb6 <__aeabi_dmul+0xa6>
 80021cc:	2a1f      	cmp	r2, #31
 80021ce:	dc00      	bgt.n	80021d2 <__aeabi_dmul+0x2c2>
 80021d0:	e12a      	b.n	8002428 <__aeabi_dmul+0x518>
 80021d2:	211f      	movs	r1, #31
 80021d4:	4249      	negs	r1, r1
 80021d6:	1acb      	subs	r3, r1, r3
 80021d8:	0021      	movs	r1, r4
 80021da:	40d9      	lsrs	r1, r3
 80021dc:	000b      	movs	r3, r1
 80021de:	2a20      	cmp	r2, #32
 80021e0:	d005      	beq.n	80021ee <__aeabi_dmul+0x2de>
 80021e2:	4a16      	ldr	r2, [pc, #88]	@ (800223c <__aeabi_dmul+0x32c>)
 80021e4:	9d01      	ldr	r5, [sp, #4]
 80021e6:	4694      	mov	ip, r2
 80021e8:	4465      	add	r5, ip
 80021ea:	40ac      	lsls	r4, r5
 80021ec:	4320      	orrs	r0, r4
 80021ee:	1e42      	subs	r2, r0, #1
 80021f0:	4190      	sbcs	r0, r2
 80021f2:	4318      	orrs	r0, r3
 80021f4:	2307      	movs	r3, #7
 80021f6:	0019      	movs	r1, r3
 80021f8:	2400      	movs	r4, #0
 80021fa:	4001      	ands	r1, r0
 80021fc:	4203      	tst	r3, r0
 80021fe:	d00c      	beq.n	800221a <__aeabi_dmul+0x30a>
 8002200:	230f      	movs	r3, #15
 8002202:	4003      	ands	r3, r0
 8002204:	2b04      	cmp	r3, #4
 8002206:	d100      	bne.n	800220a <__aeabi_dmul+0x2fa>
 8002208:	e140      	b.n	800248c <__aeabi_dmul+0x57c>
 800220a:	1d03      	adds	r3, r0, #4
 800220c:	4283      	cmp	r3, r0
 800220e:	41a4      	sbcs	r4, r4
 8002210:	0018      	movs	r0, r3
 8002212:	4264      	negs	r4, r4
 8002214:	0761      	lsls	r1, r4, #29
 8002216:	0264      	lsls	r4, r4, #9
 8002218:	0b24      	lsrs	r4, r4, #12
 800221a:	08c2      	lsrs	r2, r0, #3
 800221c:	2300      	movs	r3, #0
 800221e:	430a      	orrs	r2, r1
 8002220:	e6cc      	b.n	8001fbc <__aeabi_dmul+0xac>
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	000007ff 	.word	0x000007ff
 8002228:	fffffc01 	.word	0xfffffc01
 800222c:	000003ff 	.word	0x000003ff
 8002230:	feffffff 	.word	0xfeffffff
 8002234:	000007fe 	.word	0x000007fe
 8002238:	fffffc0d 	.word	0xfffffc0d
 800223c:	0000043e 	.word	0x0000043e
 8002240:	4649      	mov	r1, r9
 8002242:	464a      	mov	r2, r9
 8002244:	0409      	lsls	r1, r1, #16
 8002246:	0c09      	lsrs	r1, r1, #16
 8002248:	000d      	movs	r5, r1
 800224a:	0c16      	lsrs	r6, r2, #16
 800224c:	0c02      	lsrs	r2, r0, #16
 800224e:	0400      	lsls	r0, r0, #16
 8002250:	0c00      	lsrs	r0, r0, #16
 8002252:	4345      	muls	r5, r0
 8002254:	46ac      	mov	ip, r5
 8002256:	0005      	movs	r5, r0
 8002258:	4375      	muls	r5, r6
 800225a:	46a8      	mov	r8, r5
 800225c:	0015      	movs	r5, r2
 800225e:	000f      	movs	r7, r1
 8002260:	4375      	muls	r5, r6
 8002262:	9200      	str	r2, [sp, #0]
 8002264:	9502      	str	r5, [sp, #8]
 8002266:	002a      	movs	r2, r5
 8002268:	9d00      	ldr	r5, [sp, #0]
 800226a:	436f      	muls	r7, r5
 800226c:	4665      	mov	r5, ip
 800226e:	0c2d      	lsrs	r5, r5, #16
 8002270:	46a9      	mov	r9, r5
 8002272:	4447      	add	r7, r8
 8002274:	444f      	add	r7, r9
 8002276:	45b8      	cmp	r8, r7
 8002278:	d905      	bls.n	8002286 <__aeabi_dmul+0x376>
 800227a:	0015      	movs	r5, r2
 800227c:	2280      	movs	r2, #128	@ 0x80
 800227e:	0252      	lsls	r2, r2, #9
 8002280:	4690      	mov	r8, r2
 8002282:	4445      	add	r5, r8
 8002284:	9502      	str	r5, [sp, #8]
 8002286:	0c3d      	lsrs	r5, r7, #16
 8002288:	9503      	str	r5, [sp, #12]
 800228a:	4665      	mov	r5, ip
 800228c:	042d      	lsls	r5, r5, #16
 800228e:	043f      	lsls	r7, r7, #16
 8002290:	0c2d      	lsrs	r5, r5, #16
 8002292:	46ac      	mov	ip, r5
 8002294:	003d      	movs	r5, r7
 8002296:	4465      	add	r5, ip
 8002298:	9504      	str	r5, [sp, #16]
 800229a:	0c25      	lsrs	r5, r4, #16
 800229c:	0424      	lsls	r4, r4, #16
 800229e:	0c24      	lsrs	r4, r4, #16
 80022a0:	46ac      	mov	ip, r5
 80022a2:	0025      	movs	r5, r4
 80022a4:	4375      	muls	r5, r6
 80022a6:	46a8      	mov	r8, r5
 80022a8:	4665      	mov	r5, ip
 80022aa:	000f      	movs	r7, r1
 80022ac:	4369      	muls	r1, r5
 80022ae:	4441      	add	r1, r8
 80022b0:	4689      	mov	r9, r1
 80022b2:	4367      	muls	r7, r4
 80022b4:	0c39      	lsrs	r1, r7, #16
 80022b6:	4449      	add	r1, r9
 80022b8:	436e      	muls	r6, r5
 80022ba:	4588      	cmp	r8, r1
 80022bc:	d903      	bls.n	80022c6 <__aeabi_dmul+0x3b6>
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	0252      	lsls	r2, r2, #9
 80022c2:	4690      	mov	r8, r2
 80022c4:	4446      	add	r6, r8
 80022c6:	0c0d      	lsrs	r5, r1, #16
 80022c8:	46a8      	mov	r8, r5
 80022ca:	0035      	movs	r5, r6
 80022cc:	4445      	add	r5, r8
 80022ce:	9505      	str	r5, [sp, #20]
 80022d0:	9d03      	ldr	r5, [sp, #12]
 80022d2:	043f      	lsls	r7, r7, #16
 80022d4:	46a8      	mov	r8, r5
 80022d6:	0c3f      	lsrs	r7, r7, #16
 80022d8:	0409      	lsls	r1, r1, #16
 80022da:	19c9      	adds	r1, r1, r7
 80022dc:	4488      	add	r8, r1
 80022de:	4645      	mov	r5, r8
 80022e0:	9503      	str	r5, [sp, #12]
 80022e2:	4655      	mov	r5, sl
 80022e4:	042e      	lsls	r6, r5, #16
 80022e6:	0c36      	lsrs	r6, r6, #16
 80022e8:	0c2f      	lsrs	r7, r5, #16
 80022ea:	0035      	movs	r5, r6
 80022ec:	4345      	muls	r5, r0
 80022ee:	4378      	muls	r0, r7
 80022f0:	4681      	mov	r9, r0
 80022f2:	0038      	movs	r0, r7
 80022f4:	46a8      	mov	r8, r5
 80022f6:	0c2d      	lsrs	r5, r5, #16
 80022f8:	46aa      	mov	sl, r5
 80022fa:	9a00      	ldr	r2, [sp, #0]
 80022fc:	4350      	muls	r0, r2
 80022fe:	4372      	muls	r2, r6
 8002300:	444a      	add	r2, r9
 8002302:	4452      	add	r2, sl
 8002304:	4591      	cmp	r9, r2
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x400>
 8002308:	2580      	movs	r5, #128	@ 0x80
 800230a:	026d      	lsls	r5, r5, #9
 800230c:	46a9      	mov	r9, r5
 800230e:	4448      	add	r0, r9
 8002310:	0c15      	lsrs	r5, r2, #16
 8002312:	46a9      	mov	r9, r5
 8002314:	4645      	mov	r5, r8
 8002316:	042d      	lsls	r5, r5, #16
 8002318:	0c2d      	lsrs	r5, r5, #16
 800231a:	46a8      	mov	r8, r5
 800231c:	4665      	mov	r5, ip
 800231e:	437d      	muls	r5, r7
 8002320:	0412      	lsls	r2, r2, #16
 8002322:	4448      	add	r0, r9
 8002324:	4490      	add	r8, r2
 8002326:	46a9      	mov	r9, r5
 8002328:	0032      	movs	r2, r6
 800232a:	4665      	mov	r5, ip
 800232c:	4362      	muls	r2, r4
 800232e:	436e      	muls	r6, r5
 8002330:	437c      	muls	r4, r7
 8002332:	0c17      	lsrs	r7, r2, #16
 8002334:	1936      	adds	r6, r6, r4
 8002336:	19bf      	adds	r7, r7, r6
 8002338:	42bc      	cmp	r4, r7
 800233a:	d903      	bls.n	8002344 <__aeabi_dmul+0x434>
 800233c:	2480      	movs	r4, #128	@ 0x80
 800233e:	0264      	lsls	r4, r4, #9
 8002340:	46a4      	mov	ip, r4
 8002342:	44e1      	add	r9, ip
 8002344:	9c02      	ldr	r4, [sp, #8]
 8002346:	9e03      	ldr	r6, [sp, #12]
 8002348:	46a4      	mov	ip, r4
 800234a:	9d05      	ldr	r5, [sp, #20]
 800234c:	4466      	add	r6, ip
 800234e:	428e      	cmp	r6, r1
 8002350:	4189      	sbcs	r1, r1
 8002352:	46ac      	mov	ip, r5
 8002354:	0412      	lsls	r2, r2, #16
 8002356:	043c      	lsls	r4, r7, #16
 8002358:	0c12      	lsrs	r2, r2, #16
 800235a:	18a2      	adds	r2, r4, r2
 800235c:	4462      	add	r2, ip
 800235e:	4249      	negs	r1, r1
 8002360:	1854      	adds	r4, r2, r1
 8002362:	4446      	add	r6, r8
 8002364:	46a4      	mov	ip, r4
 8002366:	4546      	cmp	r6, r8
 8002368:	41a4      	sbcs	r4, r4
 800236a:	4682      	mov	sl, r0
 800236c:	4264      	negs	r4, r4
 800236e:	46a0      	mov	r8, r4
 8002370:	42aa      	cmp	r2, r5
 8002372:	4192      	sbcs	r2, r2
 8002374:	458c      	cmp	ip, r1
 8002376:	4189      	sbcs	r1, r1
 8002378:	44e2      	add	sl, ip
 800237a:	44d0      	add	r8, sl
 800237c:	4249      	negs	r1, r1
 800237e:	4252      	negs	r2, r2
 8002380:	430a      	orrs	r2, r1
 8002382:	45a0      	cmp	r8, r4
 8002384:	41a4      	sbcs	r4, r4
 8002386:	4582      	cmp	sl, r0
 8002388:	4189      	sbcs	r1, r1
 800238a:	4264      	negs	r4, r4
 800238c:	4249      	negs	r1, r1
 800238e:	430c      	orrs	r4, r1
 8002390:	4641      	mov	r1, r8
 8002392:	0c3f      	lsrs	r7, r7, #16
 8002394:	19d2      	adds	r2, r2, r7
 8002396:	1912      	adds	r2, r2, r4
 8002398:	0dcc      	lsrs	r4, r1, #23
 800239a:	9904      	ldr	r1, [sp, #16]
 800239c:	0270      	lsls	r0, r6, #9
 800239e:	4308      	orrs	r0, r1
 80023a0:	1e41      	subs	r1, r0, #1
 80023a2:	4188      	sbcs	r0, r1
 80023a4:	4641      	mov	r1, r8
 80023a6:	444a      	add	r2, r9
 80023a8:	0df6      	lsrs	r6, r6, #23
 80023aa:	0252      	lsls	r2, r2, #9
 80023ac:	4330      	orrs	r0, r6
 80023ae:	0249      	lsls	r1, r1, #9
 80023b0:	4314      	orrs	r4, r2
 80023b2:	4308      	orrs	r0, r1
 80023b4:	01d2      	lsls	r2, r2, #7
 80023b6:	d535      	bpl.n	8002424 <__aeabi_dmul+0x514>
 80023b8:	2201      	movs	r2, #1
 80023ba:	0843      	lsrs	r3, r0, #1
 80023bc:	4002      	ands	r2, r0
 80023be:	4313      	orrs	r3, r2
 80023c0:	07e0      	lsls	r0, r4, #31
 80023c2:	4318      	orrs	r0, r3
 80023c4:	0864      	lsrs	r4, r4, #1
 80023c6:	e634      	b.n	8002032 <__aeabi_dmul+0x122>
 80023c8:	9b00      	ldr	r3, [sp, #0]
 80023ca:	46a2      	mov	sl, r4
 80023cc:	469b      	mov	fp, r3
 80023ce:	4681      	mov	r9, r0
 80023d0:	2480      	movs	r4, #128	@ 0x80
 80023d2:	4653      	mov	r3, sl
 80023d4:	0324      	lsls	r4, r4, #12
 80023d6:	431c      	orrs	r4, r3
 80023d8:	0324      	lsls	r4, r4, #12
 80023da:	464a      	mov	r2, r9
 80023dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <__aeabi_dmul+0x588>)
 80023de:	0b24      	lsrs	r4, r4, #12
 80023e0:	e5ec      	b.n	8001fbc <__aeabi_dmul+0xac>
 80023e2:	f000 fd0b 	bl	8002dfc <__clzsi2>
 80023e6:	2315      	movs	r3, #21
 80023e8:	469c      	mov	ip, r3
 80023ea:	4484      	add	ip, r0
 80023ec:	0002      	movs	r2, r0
 80023ee:	4663      	mov	r3, ip
 80023f0:	3220      	adds	r2, #32
 80023f2:	2b1c      	cmp	r3, #28
 80023f4:	dc00      	bgt.n	80023f8 <__aeabi_dmul+0x4e8>
 80023f6:	e684      	b.n	8002102 <__aeabi_dmul+0x1f2>
 80023f8:	2300      	movs	r3, #0
 80023fa:	4699      	mov	r9, r3
 80023fc:	0023      	movs	r3, r4
 80023fe:	3808      	subs	r0, #8
 8002400:	4083      	lsls	r3, r0
 8002402:	469a      	mov	sl, r3
 8002404:	e68e      	b.n	8002124 <__aeabi_dmul+0x214>
 8002406:	f000 fcf9 	bl	8002dfc <__clzsi2>
 800240a:	0002      	movs	r2, r0
 800240c:	0003      	movs	r3, r0
 800240e:	3215      	adds	r2, #21
 8002410:	3320      	adds	r3, #32
 8002412:	2a1c      	cmp	r2, #28
 8002414:	dc00      	bgt.n	8002418 <__aeabi_dmul+0x508>
 8002416:	e64e      	b.n	80020b6 <__aeabi_dmul+0x1a6>
 8002418:	0002      	movs	r2, r0
 800241a:	0034      	movs	r4, r6
 800241c:	3a08      	subs	r2, #8
 800241e:	2000      	movs	r0, #0
 8002420:	4094      	lsls	r4, r2
 8002422:	e652      	b.n	80020ca <__aeabi_dmul+0x1ba>
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	e604      	b.n	8002032 <__aeabi_dmul+0x122>
 8002428:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <__aeabi_dmul+0x58c>)
 800242a:	0021      	movs	r1, r4
 800242c:	469c      	mov	ip, r3
 800242e:	0003      	movs	r3, r0
 8002430:	9d01      	ldr	r5, [sp, #4]
 8002432:	40d3      	lsrs	r3, r2
 8002434:	4465      	add	r5, ip
 8002436:	40a9      	lsls	r1, r5
 8002438:	4319      	orrs	r1, r3
 800243a:	0003      	movs	r3, r0
 800243c:	40ab      	lsls	r3, r5
 800243e:	1e58      	subs	r0, r3, #1
 8002440:	4183      	sbcs	r3, r0
 8002442:	4319      	orrs	r1, r3
 8002444:	0008      	movs	r0, r1
 8002446:	40d4      	lsrs	r4, r2
 8002448:	074b      	lsls	r3, r1, #29
 800244a:	d009      	beq.n	8002460 <__aeabi_dmul+0x550>
 800244c:	230f      	movs	r3, #15
 800244e:	400b      	ands	r3, r1
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <__aeabi_dmul+0x550>
 8002454:	1d0b      	adds	r3, r1, #4
 8002456:	428b      	cmp	r3, r1
 8002458:	4180      	sbcs	r0, r0
 800245a:	4240      	negs	r0, r0
 800245c:	1824      	adds	r4, r4, r0
 800245e:	0018      	movs	r0, r3
 8002460:	0223      	lsls	r3, r4, #8
 8002462:	d400      	bmi.n	8002466 <__aeabi_dmul+0x556>
 8002464:	e6d6      	b.n	8002214 <__aeabi_dmul+0x304>
 8002466:	2301      	movs	r3, #1
 8002468:	2400      	movs	r4, #0
 800246a:	2200      	movs	r2, #0
 800246c:	e5a6      	b.n	8001fbc <__aeabi_dmul+0xac>
 800246e:	290f      	cmp	r1, #15
 8002470:	d1aa      	bne.n	80023c8 <__aeabi_dmul+0x4b8>
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	4652      	mov	r2, sl
 8002476:	031b      	lsls	r3, r3, #12
 8002478:	421a      	tst	r2, r3
 800247a:	d0a9      	beq.n	80023d0 <__aeabi_dmul+0x4c0>
 800247c:	421c      	tst	r4, r3
 800247e:	d1a7      	bne.n	80023d0 <__aeabi_dmul+0x4c0>
 8002480:	431c      	orrs	r4, r3
 8002482:	9b00      	ldr	r3, [sp, #0]
 8002484:	0002      	movs	r2, r0
 8002486:	469b      	mov	fp, r3
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <__aeabi_dmul+0x588>)
 800248a:	e597      	b.n	8001fbc <__aeabi_dmul+0xac>
 800248c:	2400      	movs	r4, #0
 800248e:	e6c1      	b.n	8002214 <__aeabi_dmul+0x304>
 8002490:	2400      	movs	r4, #0
 8002492:	4b01      	ldr	r3, [pc, #4]	@ (8002498 <__aeabi_dmul+0x588>)
 8002494:	0022      	movs	r2, r4
 8002496:	e591      	b.n	8001fbc <__aeabi_dmul+0xac>
 8002498:	000007ff 	.word	0x000007ff
 800249c:	0000041e 	.word	0x0000041e

080024a0 <__aeabi_dsub>:
 80024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a2:	464e      	mov	r6, r9
 80024a4:	4645      	mov	r5, r8
 80024a6:	46de      	mov	lr, fp
 80024a8:	4657      	mov	r7, sl
 80024aa:	b5e0      	push	{r5, r6, r7, lr}
 80024ac:	b085      	sub	sp, #20
 80024ae:	9000      	str	r0, [sp, #0]
 80024b0:	9101      	str	r1, [sp, #4]
 80024b2:	030c      	lsls	r4, r1, #12
 80024b4:	004f      	lsls	r7, r1, #1
 80024b6:	0fce      	lsrs	r6, r1, #31
 80024b8:	0a61      	lsrs	r1, r4, #9
 80024ba:	9c00      	ldr	r4, [sp, #0]
 80024bc:	46b0      	mov	r8, r6
 80024be:	0f64      	lsrs	r4, r4, #29
 80024c0:	430c      	orrs	r4, r1
 80024c2:	9900      	ldr	r1, [sp, #0]
 80024c4:	0d7f      	lsrs	r7, r7, #21
 80024c6:	00c8      	lsls	r0, r1, #3
 80024c8:	0011      	movs	r1, r2
 80024ca:	001a      	movs	r2, r3
 80024cc:	031b      	lsls	r3, r3, #12
 80024ce:	469c      	mov	ip, r3
 80024d0:	9100      	str	r1, [sp, #0]
 80024d2:	9201      	str	r2, [sp, #4]
 80024d4:	0051      	lsls	r1, r2, #1
 80024d6:	0d4b      	lsrs	r3, r1, #21
 80024d8:	4699      	mov	r9, r3
 80024da:	9b01      	ldr	r3, [sp, #4]
 80024dc:	9d00      	ldr	r5, [sp, #0]
 80024de:	0fd9      	lsrs	r1, r3, #31
 80024e0:	4663      	mov	r3, ip
 80024e2:	0f6a      	lsrs	r2, r5, #29
 80024e4:	0a5b      	lsrs	r3, r3, #9
 80024e6:	4313      	orrs	r3, r2
 80024e8:	00ea      	lsls	r2, r5, #3
 80024ea:	4694      	mov	ip, r2
 80024ec:	4693      	mov	fp, r2
 80024ee:	4ac1      	ldr	r2, [pc, #772]	@ (80027f4 <__aeabi_dsub+0x354>)
 80024f0:	9003      	str	r0, [sp, #12]
 80024f2:	9302      	str	r3, [sp, #8]
 80024f4:	4591      	cmp	r9, r2
 80024f6:	d100      	bne.n	80024fa <__aeabi_dsub+0x5a>
 80024f8:	e0cd      	b.n	8002696 <__aeabi_dsub+0x1f6>
 80024fa:	2501      	movs	r5, #1
 80024fc:	4069      	eors	r1, r5
 80024fe:	464d      	mov	r5, r9
 8002500:	1b7d      	subs	r5, r7, r5
 8002502:	46aa      	mov	sl, r5
 8002504:	428e      	cmp	r6, r1
 8002506:	d100      	bne.n	800250a <__aeabi_dsub+0x6a>
 8002508:	e080      	b.n	800260c <__aeabi_dsub+0x16c>
 800250a:	2d00      	cmp	r5, #0
 800250c:	dc00      	bgt.n	8002510 <__aeabi_dsub+0x70>
 800250e:	e335      	b.n	8002b7c <__aeabi_dsub+0x6dc>
 8002510:	4649      	mov	r1, r9
 8002512:	2900      	cmp	r1, #0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x78>
 8002516:	e0df      	b.n	80026d8 <__aeabi_dsub+0x238>
 8002518:	4297      	cmp	r7, r2
 800251a:	d100      	bne.n	800251e <__aeabi_dsub+0x7e>
 800251c:	e194      	b.n	8002848 <__aeabi_dsub+0x3a8>
 800251e:	4652      	mov	r2, sl
 8002520:	2501      	movs	r5, #1
 8002522:	2a38      	cmp	r2, #56	@ 0x38
 8002524:	dc19      	bgt.n	800255a <__aeabi_dsub+0xba>
 8002526:	2280      	movs	r2, #128	@ 0x80
 8002528:	9b02      	ldr	r3, [sp, #8]
 800252a:	0412      	lsls	r2, r2, #16
 800252c:	4313      	orrs	r3, r2
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	4652      	mov	r2, sl
 8002532:	2a1f      	cmp	r2, #31
 8002534:	dd00      	ble.n	8002538 <__aeabi_dsub+0x98>
 8002536:	e1e3      	b.n	8002900 <__aeabi_dsub+0x460>
 8002538:	4653      	mov	r3, sl
 800253a:	2220      	movs	r2, #32
 800253c:	4661      	mov	r1, ip
 800253e:	9d02      	ldr	r5, [sp, #8]
 8002540:	1ad2      	subs	r2, r2, r3
 8002542:	4095      	lsls	r5, r2
 8002544:	40d9      	lsrs	r1, r3
 8002546:	430d      	orrs	r5, r1
 8002548:	4661      	mov	r1, ip
 800254a:	4091      	lsls	r1, r2
 800254c:	000a      	movs	r2, r1
 800254e:	1e51      	subs	r1, r2, #1
 8002550:	418a      	sbcs	r2, r1
 8002552:	4315      	orrs	r5, r2
 8002554:	9a02      	ldr	r2, [sp, #8]
 8002556:	40da      	lsrs	r2, r3
 8002558:	1aa4      	subs	r4, r4, r2
 800255a:	1b45      	subs	r5, r0, r5
 800255c:	42a8      	cmp	r0, r5
 800255e:	4180      	sbcs	r0, r0
 8002560:	4240      	negs	r0, r0
 8002562:	1a24      	subs	r4, r4, r0
 8002564:	0223      	lsls	r3, r4, #8
 8002566:	d400      	bmi.n	800256a <__aeabi_dsub+0xca>
 8002568:	e13d      	b.n	80027e6 <__aeabi_dsub+0x346>
 800256a:	0264      	lsls	r4, r4, #9
 800256c:	0a64      	lsrs	r4, r4, #9
 800256e:	2c00      	cmp	r4, #0
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0xd4>
 8002572:	e147      	b.n	8002804 <__aeabi_dsub+0x364>
 8002574:	0020      	movs	r0, r4
 8002576:	f000 fc41 	bl	8002dfc <__clzsi2>
 800257a:	0003      	movs	r3, r0
 800257c:	3b08      	subs	r3, #8
 800257e:	2120      	movs	r1, #32
 8002580:	0028      	movs	r0, r5
 8002582:	1aca      	subs	r2, r1, r3
 8002584:	40d0      	lsrs	r0, r2
 8002586:	409c      	lsls	r4, r3
 8002588:	0002      	movs	r2, r0
 800258a:	409d      	lsls	r5, r3
 800258c:	4322      	orrs	r2, r4
 800258e:	429f      	cmp	r7, r3
 8002590:	dd00      	ble.n	8002594 <__aeabi_dsub+0xf4>
 8002592:	e177      	b.n	8002884 <__aeabi_dsub+0x3e4>
 8002594:	1bd8      	subs	r0, r3, r7
 8002596:	3001      	adds	r0, #1
 8002598:	1a09      	subs	r1, r1, r0
 800259a:	002c      	movs	r4, r5
 800259c:	408d      	lsls	r5, r1
 800259e:	40c4      	lsrs	r4, r0
 80025a0:	1e6b      	subs	r3, r5, #1
 80025a2:	419d      	sbcs	r5, r3
 80025a4:	0013      	movs	r3, r2
 80025a6:	40c2      	lsrs	r2, r0
 80025a8:	408b      	lsls	r3, r1
 80025aa:	4325      	orrs	r5, r4
 80025ac:	2700      	movs	r7, #0
 80025ae:	0014      	movs	r4, r2
 80025b0:	431d      	orrs	r5, r3
 80025b2:	076b      	lsls	r3, r5, #29
 80025b4:	d009      	beq.n	80025ca <__aeabi_dsub+0x12a>
 80025b6:	230f      	movs	r3, #15
 80025b8:	402b      	ands	r3, r5
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d005      	beq.n	80025ca <__aeabi_dsub+0x12a>
 80025be:	1d2b      	adds	r3, r5, #4
 80025c0:	42ab      	cmp	r3, r5
 80025c2:	41ad      	sbcs	r5, r5
 80025c4:	426d      	negs	r5, r5
 80025c6:	1964      	adds	r4, r4, r5
 80025c8:	001d      	movs	r5, r3
 80025ca:	0223      	lsls	r3, r4, #8
 80025cc:	d400      	bmi.n	80025d0 <__aeabi_dsub+0x130>
 80025ce:	e140      	b.n	8002852 <__aeabi_dsub+0x3b2>
 80025d0:	4a88      	ldr	r2, [pc, #544]	@ (80027f4 <__aeabi_dsub+0x354>)
 80025d2:	3701      	adds	r7, #1
 80025d4:	4297      	cmp	r7, r2
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x13a>
 80025d8:	e101      	b.n	80027de <__aeabi_dsub+0x33e>
 80025da:	2601      	movs	r6, #1
 80025dc:	4643      	mov	r3, r8
 80025de:	4986      	ldr	r1, [pc, #536]	@ (80027f8 <__aeabi_dsub+0x358>)
 80025e0:	08ed      	lsrs	r5, r5, #3
 80025e2:	4021      	ands	r1, r4
 80025e4:	074a      	lsls	r2, r1, #29
 80025e6:	432a      	orrs	r2, r5
 80025e8:	057c      	lsls	r4, r7, #21
 80025ea:	024d      	lsls	r5, r1, #9
 80025ec:	0b2d      	lsrs	r5, r5, #12
 80025ee:	0d64      	lsrs	r4, r4, #21
 80025f0:	401e      	ands	r6, r3
 80025f2:	0524      	lsls	r4, r4, #20
 80025f4:	432c      	orrs	r4, r5
 80025f6:	07f6      	lsls	r6, r6, #31
 80025f8:	4334      	orrs	r4, r6
 80025fa:	0010      	movs	r0, r2
 80025fc:	0021      	movs	r1, r4
 80025fe:	b005      	add	sp, #20
 8002600:	bcf0      	pop	{r4, r5, r6, r7}
 8002602:	46bb      	mov	fp, r7
 8002604:	46b2      	mov	sl, r6
 8002606:	46a9      	mov	r9, r5
 8002608:	46a0      	mov	r8, r4
 800260a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260c:	2d00      	cmp	r5, #0
 800260e:	dc00      	bgt.n	8002612 <__aeabi_dsub+0x172>
 8002610:	e2d0      	b.n	8002bb4 <__aeabi_dsub+0x714>
 8002612:	4649      	mov	r1, r9
 8002614:	2900      	cmp	r1, #0
 8002616:	d000      	beq.n	800261a <__aeabi_dsub+0x17a>
 8002618:	e0d4      	b.n	80027c4 <__aeabi_dsub+0x324>
 800261a:	4661      	mov	r1, ip
 800261c:	9b02      	ldr	r3, [sp, #8]
 800261e:	4319      	orrs	r1, r3
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x184>
 8002622:	e12b      	b.n	800287c <__aeabi_dsub+0x3dc>
 8002624:	1e69      	subs	r1, r5, #1
 8002626:	2d01      	cmp	r5, #1
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x18c>
 800262a:	e1d9      	b.n	80029e0 <__aeabi_dsub+0x540>
 800262c:	4295      	cmp	r5, r2
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x192>
 8002630:	e10a      	b.n	8002848 <__aeabi_dsub+0x3a8>
 8002632:	2501      	movs	r5, #1
 8002634:	2938      	cmp	r1, #56	@ 0x38
 8002636:	dc17      	bgt.n	8002668 <__aeabi_dsub+0x1c8>
 8002638:	468a      	mov	sl, r1
 800263a:	4653      	mov	r3, sl
 800263c:	2b1f      	cmp	r3, #31
 800263e:	dd00      	ble.n	8002642 <__aeabi_dsub+0x1a2>
 8002640:	e1e7      	b.n	8002a12 <__aeabi_dsub+0x572>
 8002642:	2220      	movs	r2, #32
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	9b02      	ldr	r3, [sp, #8]
 8002648:	4661      	mov	r1, ip
 800264a:	4093      	lsls	r3, r2
 800264c:	001d      	movs	r5, r3
 800264e:	4653      	mov	r3, sl
 8002650:	40d9      	lsrs	r1, r3
 8002652:	4663      	mov	r3, ip
 8002654:	4093      	lsls	r3, r2
 8002656:	001a      	movs	r2, r3
 8002658:	430d      	orrs	r5, r1
 800265a:	1e51      	subs	r1, r2, #1
 800265c:	418a      	sbcs	r2, r1
 800265e:	4653      	mov	r3, sl
 8002660:	4315      	orrs	r5, r2
 8002662:	9a02      	ldr	r2, [sp, #8]
 8002664:	40da      	lsrs	r2, r3
 8002666:	18a4      	adds	r4, r4, r2
 8002668:	182d      	adds	r5, r5, r0
 800266a:	4285      	cmp	r5, r0
 800266c:	4180      	sbcs	r0, r0
 800266e:	4240      	negs	r0, r0
 8002670:	1824      	adds	r4, r4, r0
 8002672:	0223      	lsls	r3, r4, #8
 8002674:	d400      	bmi.n	8002678 <__aeabi_dsub+0x1d8>
 8002676:	e0b6      	b.n	80027e6 <__aeabi_dsub+0x346>
 8002678:	4b5e      	ldr	r3, [pc, #376]	@ (80027f4 <__aeabi_dsub+0x354>)
 800267a:	3701      	adds	r7, #1
 800267c:	429f      	cmp	r7, r3
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x1e2>
 8002680:	e0ad      	b.n	80027de <__aeabi_dsub+0x33e>
 8002682:	2101      	movs	r1, #1
 8002684:	4b5c      	ldr	r3, [pc, #368]	@ (80027f8 <__aeabi_dsub+0x358>)
 8002686:	086a      	lsrs	r2, r5, #1
 8002688:	401c      	ands	r4, r3
 800268a:	4029      	ands	r1, r5
 800268c:	430a      	orrs	r2, r1
 800268e:	07e5      	lsls	r5, r4, #31
 8002690:	4315      	orrs	r5, r2
 8002692:	0864      	lsrs	r4, r4, #1
 8002694:	e78d      	b.n	80025b2 <__aeabi_dsub+0x112>
 8002696:	4a59      	ldr	r2, [pc, #356]	@ (80027fc <__aeabi_dsub+0x35c>)
 8002698:	9b02      	ldr	r3, [sp, #8]
 800269a:	4692      	mov	sl, r2
 800269c:	4662      	mov	r2, ip
 800269e:	44ba      	add	sl, r7
 80026a0:	431a      	orrs	r2, r3
 80026a2:	d02c      	beq.n	80026fe <__aeabi_dsub+0x25e>
 80026a4:	428e      	cmp	r6, r1
 80026a6:	d02e      	beq.n	8002706 <__aeabi_dsub+0x266>
 80026a8:	4652      	mov	r2, sl
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d060      	beq.n	8002770 <__aeabi_dsub+0x2d0>
 80026ae:	2f00      	cmp	r7, #0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x214>
 80026b2:	e0db      	b.n	800286c <__aeabi_dsub+0x3cc>
 80026b4:	4663      	mov	r3, ip
 80026b6:	000e      	movs	r6, r1
 80026b8:	9c02      	ldr	r4, [sp, #8]
 80026ba:	08d8      	lsrs	r0, r3, #3
 80026bc:	0762      	lsls	r2, r4, #29
 80026be:	4302      	orrs	r2, r0
 80026c0:	08e4      	lsrs	r4, r4, #3
 80026c2:	0013      	movs	r3, r2
 80026c4:	4323      	orrs	r3, r4
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x22a>
 80026c8:	e254      	b.n	8002b74 <__aeabi_dsub+0x6d4>
 80026ca:	2580      	movs	r5, #128	@ 0x80
 80026cc:	032d      	lsls	r5, r5, #12
 80026ce:	4325      	orrs	r5, r4
 80026d0:	032d      	lsls	r5, r5, #12
 80026d2:	4c48      	ldr	r4, [pc, #288]	@ (80027f4 <__aeabi_dsub+0x354>)
 80026d4:	0b2d      	lsrs	r5, r5, #12
 80026d6:	e78c      	b.n	80025f2 <__aeabi_dsub+0x152>
 80026d8:	4661      	mov	r1, ip
 80026da:	9b02      	ldr	r3, [sp, #8]
 80026dc:	4319      	orrs	r1, r3
 80026de:	d100      	bne.n	80026e2 <__aeabi_dsub+0x242>
 80026e0:	e0cc      	b.n	800287c <__aeabi_dsub+0x3dc>
 80026e2:	0029      	movs	r1, r5
 80026e4:	3901      	subs	r1, #1
 80026e6:	2d01      	cmp	r5, #1
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x24c>
 80026ea:	e188      	b.n	80029fe <__aeabi_dsub+0x55e>
 80026ec:	4295      	cmp	r5, r2
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0x252>
 80026f0:	e0aa      	b.n	8002848 <__aeabi_dsub+0x3a8>
 80026f2:	2501      	movs	r5, #1
 80026f4:	2938      	cmp	r1, #56	@ 0x38
 80026f6:	dd00      	ble.n	80026fa <__aeabi_dsub+0x25a>
 80026f8:	e72f      	b.n	800255a <__aeabi_dsub+0xba>
 80026fa:	468a      	mov	sl, r1
 80026fc:	e718      	b.n	8002530 <__aeabi_dsub+0x90>
 80026fe:	2201      	movs	r2, #1
 8002700:	4051      	eors	r1, r2
 8002702:	428e      	cmp	r6, r1
 8002704:	d1d0      	bne.n	80026a8 <__aeabi_dsub+0x208>
 8002706:	4653      	mov	r3, sl
 8002708:	2b00      	cmp	r3, #0
 800270a:	d100      	bne.n	800270e <__aeabi_dsub+0x26e>
 800270c:	e0be      	b.n	800288c <__aeabi_dsub+0x3ec>
 800270e:	2f00      	cmp	r7, #0
 8002710:	d000      	beq.n	8002714 <__aeabi_dsub+0x274>
 8002712:	e138      	b.n	8002986 <__aeabi_dsub+0x4e6>
 8002714:	46ca      	mov	sl, r9
 8002716:	0022      	movs	r2, r4
 8002718:	4302      	orrs	r2, r0
 800271a:	d100      	bne.n	800271e <__aeabi_dsub+0x27e>
 800271c:	e1e2      	b.n	8002ae4 <__aeabi_dsub+0x644>
 800271e:	4653      	mov	r3, sl
 8002720:	1e59      	subs	r1, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d100      	bne.n	8002728 <__aeabi_dsub+0x288>
 8002726:	e20d      	b.n	8002b44 <__aeabi_dsub+0x6a4>
 8002728:	4a32      	ldr	r2, [pc, #200]	@ (80027f4 <__aeabi_dsub+0x354>)
 800272a:	4592      	cmp	sl, r2
 800272c:	d100      	bne.n	8002730 <__aeabi_dsub+0x290>
 800272e:	e1d2      	b.n	8002ad6 <__aeabi_dsub+0x636>
 8002730:	2701      	movs	r7, #1
 8002732:	2938      	cmp	r1, #56	@ 0x38
 8002734:	dc13      	bgt.n	800275e <__aeabi_dsub+0x2be>
 8002736:	291f      	cmp	r1, #31
 8002738:	dd00      	ble.n	800273c <__aeabi_dsub+0x29c>
 800273a:	e1ee      	b.n	8002b1a <__aeabi_dsub+0x67a>
 800273c:	2220      	movs	r2, #32
 800273e:	9b02      	ldr	r3, [sp, #8]
 8002740:	1a52      	subs	r2, r2, r1
 8002742:	0025      	movs	r5, r4
 8002744:	0007      	movs	r7, r0
 8002746:	469a      	mov	sl, r3
 8002748:	40cc      	lsrs	r4, r1
 800274a:	4090      	lsls	r0, r2
 800274c:	4095      	lsls	r5, r2
 800274e:	40cf      	lsrs	r7, r1
 8002750:	44a2      	add	sl, r4
 8002752:	1e42      	subs	r2, r0, #1
 8002754:	4190      	sbcs	r0, r2
 8002756:	4653      	mov	r3, sl
 8002758:	432f      	orrs	r7, r5
 800275a:	4307      	orrs	r7, r0
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	003d      	movs	r5, r7
 8002760:	4465      	add	r5, ip
 8002762:	4565      	cmp	r5, ip
 8002764:	4192      	sbcs	r2, r2
 8002766:	9b02      	ldr	r3, [sp, #8]
 8002768:	4252      	negs	r2, r2
 800276a:	464f      	mov	r7, r9
 800276c:	18d4      	adds	r4, r2, r3
 800276e:	e780      	b.n	8002672 <__aeabi_dsub+0x1d2>
 8002770:	4a23      	ldr	r2, [pc, #140]	@ (8002800 <__aeabi_dsub+0x360>)
 8002772:	1c7d      	adds	r5, r7, #1
 8002774:	4215      	tst	r5, r2
 8002776:	d000      	beq.n	800277a <__aeabi_dsub+0x2da>
 8002778:	e0aa      	b.n	80028d0 <__aeabi_dsub+0x430>
 800277a:	4662      	mov	r2, ip
 800277c:	0025      	movs	r5, r4
 800277e:	9b02      	ldr	r3, [sp, #8]
 8002780:	4305      	orrs	r5, r0
 8002782:	431a      	orrs	r2, r3
 8002784:	2f00      	cmp	r7, #0
 8002786:	d000      	beq.n	800278a <__aeabi_dsub+0x2ea>
 8002788:	e0f5      	b.n	8002976 <__aeabi_dsub+0x4d6>
 800278a:	2d00      	cmp	r5, #0
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x2f0>
 800278e:	e16b      	b.n	8002a68 <__aeabi_dsub+0x5c8>
 8002790:	2a00      	cmp	r2, #0
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0x2f6>
 8002794:	e152      	b.n	8002a3c <__aeabi_dsub+0x59c>
 8002796:	4663      	mov	r3, ip
 8002798:	1ac5      	subs	r5, r0, r3
 800279a:	9b02      	ldr	r3, [sp, #8]
 800279c:	1ae2      	subs	r2, r4, r3
 800279e:	42a8      	cmp	r0, r5
 80027a0:	419b      	sbcs	r3, r3
 80027a2:	425b      	negs	r3, r3
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	021a      	lsls	r2, r3, #8
 80027a8:	d400      	bmi.n	80027ac <__aeabi_dsub+0x30c>
 80027aa:	e1d5      	b.n	8002b58 <__aeabi_dsub+0x6b8>
 80027ac:	4663      	mov	r3, ip
 80027ae:	1a1d      	subs	r5, r3, r0
 80027b0:	45ac      	cmp	ip, r5
 80027b2:	4192      	sbcs	r2, r2
 80027b4:	2601      	movs	r6, #1
 80027b6:	9b02      	ldr	r3, [sp, #8]
 80027b8:	4252      	negs	r2, r2
 80027ba:	1b1c      	subs	r4, r3, r4
 80027bc:	4688      	mov	r8, r1
 80027be:	1aa4      	subs	r4, r4, r2
 80027c0:	400e      	ands	r6, r1
 80027c2:	e6f6      	b.n	80025b2 <__aeabi_dsub+0x112>
 80027c4:	4297      	cmp	r7, r2
 80027c6:	d03f      	beq.n	8002848 <__aeabi_dsub+0x3a8>
 80027c8:	4652      	mov	r2, sl
 80027ca:	2501      	movs	r5, #1
 80027cc:	2a38      	cmp	r2, #56	@ 0x38
 80027ce:	dd00      	ble.n	80027d2 <__aeabi_dsub+0x332>
 80027d0:	e74a      	b.n	8002668 <__aeabi_dsub+0x1c8>
 80027d2:	2280      	movs	r2, #128	@ 0x80
 80027d4:	9b02      	ldr	r3, [sp, #8]
 80027d6:	0412      	lsls	r2, r2, #16
 80027d8:	4313      	orrs	r3, r2
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	e72d      	b.n	800263a <__aeabi_dsub+0x19a>
 80027de:	003c      	movs	r4, r7
 80027e0:	2500      	movs	r5, #0
 80027e2:	2200      	movs	r2, #0
 80027e4:	e705      	b.n	80025f2 <__aeabi_dsub+0x152>
 80027e6:	2307      	movs	r3, #7
 80027e8:	402b      	ands	r3, r5
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d000      	beq.n	80027f0 <__aeabi_dsub+0x350>
 80027ee:	e6e2      	b.n	80025b6 <__aeabi_dsub+0x116>
 80027f0:	e06b      	b.n	80028ca <__aeabi_dsub+0x42a>
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	000007ff 	.word	0x000007ff
 80027f8:	ff7fffff 	.word	0xff7fffff
 80027fc:	fffff801 	.word	0xfffff801
 8002800:	000007fe 	.word	0x000007fe
 8002804:	0028      	movs	r0, r5
 8002806:	f000 faf9 	bl	8002dfc <__clzsi2>
 800280a:	0003      	movs	r3, r0
 800280c:	3318      	adds	r3, #24
 800280e:	2b1f      	cmp	r3, #31
 8002810:	dc00      	bgt.n	8002814 <__aeabi_dsub+0x374>
 8002812:	e6b4      	b.n	800257e <__aeabi_dsub+0xde>
 8002814:	002a      	movs	r2, r5
 8002816:	3808      	subs	r0, #8
 8002818:	4082      	lsls	r2, r0
 800281a:	429f      	cmp	r7, r3
 800281c:	dd00      	ble.n	8002820 <__aeabi_dsub+0x380>
 800281e:	e0b9      	b.n	8002994 <__aeabi_dsub+0x4f4>
 8002820:	1bdb      	subs	r3, r3, r7
 8002822:	1c58      	adds	r0, r3, #1
 8002824:	281f      	cmp	r0, #31
 8002826:	dc00      	bgt.n	800282a <__aeabi_dsub+0x38a>
 8002828:	e1a0      	b.n	8002b6c <__aeabi_dsub+0x6cc>
 800282a:	0015      	movs	r5, r2
 800282c:	3b1f      	subs	r3, #31
 800282e:	40dd      	lsrs	r5, r3
 8002830:	2820      	cmp	r0, #32
 8002832:	d005      	beq.n	8002840 <__aeabi_dsub+0x3a0>
 8002834:	2340      	movs	r3, #64	@ 0x40
 8002836:	1a1b      	subs	r3, r3, r0
 8002838:	409a      	lsls	r2, r3
 800283a:	1e53      	subs	r3, r2, #1
 800283c:	419a      	sbcs	r2, r3
 800283e:	4315      	orrs	r5, r2
 8002840:	2307      	movs	r3, #7
 8002842:	2700      	movs	r7, #0
 8002844:	402b      	ands	r3, r5
 8002846:	e7d0      	b.n	80027ea <__aeabi_dsub+0x34a>
 8002848:	08c0      	lsrs	r0, r0, #3
 800284a:	0762      	lsls	r2, r4, #29
 800284c:	4302      	orrs	r2, r0
 800284e:	08e4      	lsrs	r4, r4, #3
 8002850:	e737      	b.n	80026c2 <__aeabi_dsub+0x222>
 8002852:	08ea      	lsrs	r2, r5, #3
 8002854:	0763      	lsls	r3, r4, #29
 8002856:	431a      	orrs	r2, r3
 8002858:	4bd3      	ldr	r3, [pc, #844]	@ (8002ba8 <__aeabi_dsub+0x708>)
 800285a:	08e4      	lsrs	r4, r4, #3
 800285c:	429f      	cmp	r7, r3
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x3c2>
 8002860:	e72f      	b.n	80026c2 <__aeabi_dsub+0x222>
 8002862:	0324      	lsls	r4, r4, #12
 8002864:	0b25      	lsrs	r5, r4, #12
 8002866:	057c      	lsls	r4, r7, #21
 8002868:	0d64      	lsrs	r4, r4, #21
 800286a:	e6c2      	b.n	80025f2 <__aeabi_dsub+0x152>
 800286c:	46ca      	mov	sl, r9
 800286e:	0022      	movs	r2, r4
 8002870:	4302      	orrs	r2, r0
 8002872:	d158      	bne.n	8002926 <__aeabi_dsub+0x486>
 8002874:	4663      	mov	r3, ip
 8002876:	000e      	movs	r6, r1
 8002878:	9c02      	ldr	r4, [sp, #8]
 800287a:	9303      	str	r3, [sp, #12]
 800287c:	9b03      	ldr	r3, [sp, #12]
 800287e:	4657      	mov	r7, sl
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	e7e7      	b.n	8002854 <__aeabi_dsub+0x3b4>
 8002884:	4cc9      	ldr	r4, [pc, #804]	@ (8002bac <__aeabi_dsub+0x70c>)
 8002886:	1aff      	subs	r7, r7, r3
 8002888:	4014      	ands	r4, r2
 800288a:	e692      	b.n	80025b2 <__aeabi_dsub+0x112>
 800288c:	4dc8      	ldr	r5, [pc, #800]	@ (8002bb0 <__aeabi_dsub+0x710>)
 800288e:	1c7a      	adds	r2, r7, #1
 8002890:	422a      	tst	r2, r5
 8002892:	d000      	beq.n	8002896 <__aeabi_dsub+0x3f6>
 8002894:	e084      	b.n	80029a0 <__aeabi_dsub+0x500>
 8002896:	0022      	movs	r2, r4
 8002898:	4302      	orrs	r2, r0
 800289a:	2f00      	cmp	r7, #0
 800289c:	d000      	beq.n	80028a0 <__aeabi_dsub+0x400>
 800289e:	e0ef      	b.n	8002a80 <__aeabi_dsub+0x5e0>
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d100      	bne.n	80028a6 <__aeabi_dsub+0x406>
 80028a4:	e0e5      	b.n	8002a72 <__aeabi_dsub+0x5d2>
 80028a6:	4662      	mov	r2, ip
 80028a8:	9902      	ldr	r1, [sp, #8]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x410>
 80028ae:	e0c5      	b.n	8002a3c <__aeabi_dsub+0x59c>
 80028b0:	4663      	mov	r3, ip
 80028b2:	18c5      	adds	r5, r0, r3
 80028b4:	468c      	mov	ip, r1
 80028b6:	4285      	cmp	r5, r0
 80028b8:	4180      	sbcs	r0, r0
 80028ba:	4464      	add	r4, ip
 80028bc:	4240      	negs	r0, r0
 80028be:	1824      	adds	r4, r4, r0
 80028c0:	0223      	lsls	r3, r4, #8
 80028c2:	d502      	bpl.n	80028ca <__aeabi_dsub+0x42a>
 80028c4:	4bb9      	ldr	r3, [pc, #740]	@ (8002bac <__aeabi_dsub+0x70c>)
 80028c6:	3701      	adds	r7, #1
 80028c8:	401c      	ands	r4, r3
 80028ca:	46ba      	mov	sl, r7
 80028cc:	9503      	str	r5, [sp, #12]
 80028ce:	e7d5      	b.n	800287c <__aeabi_dsub+0x3dc>
 80028d0:	4662      	mov	r2, ip
 80028d2:	1a85      	subs	r5, r0, r2
 80028d4:	42a8      	cmp	r0, r5
 80028d6:	4192      	sbcs	r2, r2
 80028d8:	4252      	negs	r2, r2
 80028da:	4691      	mov	r9, r2
 80028dc:	9b02      	ldr	r3, [sp, #8]
 80028de:	1ae3      	subs	r3, r4, r3
 80028e0:	001a      	movs	r2, r3
 80028e2:	464b      	mov	r3, r9
 80028e4:	1ad2      	subs	r2, r2, r3
 80028e6:	0013      	movs	r3, r2
 80028e8:	4691      	mov	r9, r2
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	d46c      	bmi.n	80029c8 <__aeabi_dsub+0x528>
 80028ee:	464a      	mov	r2, r9
 80028f0:	464c      	mov	r4, r9
 80028f2:	432a      	orrs	r2, r5
 80028f4:	d000      	beq.n	80028f8 <__aeabi_dsub+0x458>
 80028f6:	e63a      	b.n	800256e <__aeabi_dsub+0xce>
 80028f8:	2600      	movs	r6, #0
 80028fa:	2400      	movs	r4, #0
 80028fc:	2500      	movs	r5, #0
 80028fe:	e678      	b.n	80025f2 <__aeabi_dsub+0x152>
 8002900:	9902      	ldr	r1, [sp, #8]
 8002902:	4653      	mov	r3, sl
 8002904:	000d      	movs	r5, r1
 8002906:	3a20      	subs	r2, #32
 8002908:	40d5      	lsrs	r5, r2
 800290a:	2b20      	cmp	r3, #32
 800290c:	d006      	beq.n	800291c <__aeabi_dsub+0x47c>
 800290e:	2240      	movs	r2, #64	@ 0x40
 8002910:	1ad2      	subs	r2, r2, r3
 8002912:	000b      	movs	r3, r1
 8002914:	4093      	lsls	r3, r2
 8002916:	4662      	mov	r2, ip
 8002918:	431a      	orrs	r2, r3
 800291a:	4693      	mov	fp, r2
 800291c:	465b      	mov	r3, fp
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	4193      	sbcs	r3, r2
 8002922:	431d      	orrs	r5, r3
 8002924:	e619      	b.n	800255a <__aeabi_dsub+0xba>
 8002926:	4653      	mov	r3, sl
 8002928:	1e5a      	subs	r2, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d100      	bne.n	8002930 <__aeabi_dsub+0x490>
 800292e:	e0c6      	b.n	8002abe <__aeabi_dsub+0x61e>
 8002930:	4e9d      	ldr	r6, [pc, #628]	@ (8002ba8 <__aeabi_dsub+0x708>)
 8002932:	45b2      	cmp	sl, r6
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x498>
 8002936:	e6bd      	b.n	80026b4 <__aeabi_dsub+0x214>
 8002938:	4688      	mov	r8, r1
 800293a:	000e      	movs	r6, r1
 800293c:	2501      	movs	r5, #1
 800293e:	2a38      	cmp	r2, #56	@ 0x38
 8002940:	dc10      	bgt.n	8002964 <__aeabi_dsub+0x4c4>
 8002942:	2a1f      	cmp	r2, #31
 8002944:	dc7f      	bgt.n	8002a46 <__aeabi_dsub+0x5a6>
 8002946:	2120      	movs	r1, #32
 8002948:	0025      	movs	r5, r4
 800294a:	1a89      	subs	r1, r1, r2
 800294c:	0007      	movs	r7, r0
 800294e:	4088      	lsls	r0, r1
 8002950:	408d      	lsls	r5, r1
 8002952:	40d7      	lsrs	r7, r2
 8002954:	40d4      	lsrs	r4, r2
 8002956:	1e41      	subs	r1, r0, #1
 8002958:	4188      	sbcs	r0, r1
 800295a:	9b02      	ldr	r3, [sp, #8]
 800295c:	433d      	orrs	r5, r7
 800295e:	1b1b      	subs	r3, r3, r4
 8002960:	4305      	orrs	r5, r0
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	4662      	mov	r2, ip
 8002966:	1b55      	subs	r5, r2, r5
 8002968:	45ac      	cmp	ip, r5
 800296a:	4192      	sbcs	r2, r2
 800296c:	9b02      	ldr	r3, [sp, #8]
 800296e:	4252      	negs	r2, r2
 8002970:	464f      	mov	r7, r9
 8002972:	1a9c      	subs	r4, r3, r2
 8002974:	e5f6      	b.n	8002564 <__aeabi_dsub+0xc4>
 8002976:	2d00      	cmp	r5, #0
 8002978:	d000      	beq.n	800297c <__aeabi_dsub+0x4dc>
 800297a:	e0b7      	b.n	8002aec <__aeabi_dsub+0x64c>
 800297c:	2a00      	cmp	r2, #0
 800297e:	d100      	bne.n	8002982 <__aeabi_dsub+0x4e2>
 8002980:	e0f0      	b.n	8002b64 <__aeabi_dsub+0x6c4>
 8002982:	2601      	movs	r6, #1
 8002984:	400e      	ands	r6, r1
 8002986:	4663      	mov	r3, ip
 8002988:	9802      	ldr	r0, [sp, #8]
 800298a:	08d9      	lsrs	r1, r3, #3
 800298c:	0742      	lsls	r2, r0, #29
 800298e:	430a      	orrs	r2, r1
 8002990:	08c4      	lsrs	r4, r0, #3
 8002992:	e696      	b.n	80026c2 <__aeabi_dsub+0x222>
 8002994:	4c85      	ldr	r4, [pc, #532]	@ (8002bac <__aeabi_dsub+0x70c>)
 8002996:	1aff      	subs	r7, r7, r3
 8002998:	4014      	ands	r4, r2
 800299a:	0762      	lsls	r2, r4, #29
 800299c:	08e4      	lsrs	r4, r4, #3
 800299e:	e760      	b.n	8002862 <__aeabi_dsub+0x3c2>
 80029a0:	4981      	ldr	r1, [pc, #516]	@ (8002ba8 <__aeabi_dsub+0x708>)
 80029a2:	428a      	cmp	r2, r1
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x508>
 80029a6:	e0c9      	b.n	8002b3c <__aeabi_dsub+0x69c>
 80029a8:	4663      	mov	r3, ip
 80029aa:	18c1      	adds	r1, r0, r3
 80029ac:	4281      	cmp	r1, r0
 80029ae:	4180      	sbcs	r0, r0
 80029b0:	9b02      	ldr	r3, [sp, #8]
 80029b2:	4240      	negs	r0, r0
 80029b4:	18e3      	adds	r3, r4, r3
 80029b6:	181b      	adds	r3, r3, r0
 80029b8:	07dd      	lsls	r5, r3, #31
 80029ba:	085c      	lsrs	r4, r3, #1
 80029bc:	2307      	movs	r3, #7
 80029be:	0849      	lsrs	r1, r1, #1
 80029c0:	430d      	orrs	r5, r1
 80029c2:	0017      	movs	r7, r2
 80029c4:	402b      	ands	r3, r5
 80029c6:	e710      	b.n	80027ea <__aeabi_dsub+0x34a>
 80029c8:	4663      	mov	r3, ip
 80029ca:	1a1d      	subs	r5, r3, r0
 80029cc:	45ac      	cmp	ip, r5
 80029ce:	4192      	sbcs	r2, r2
 80029d0:	2601      	movs	r6, #1
 80029d2:	9b02      	ldr	r3, [sp, #8]
 80029d4:	4252      	negs	r2, r2
 80029d6:	1b1c      	subs	r4, r3, r4
 80029d8:	4688      	mov	r8, r1
 80029da:	1aa4      	subs	r4, r4, r2
 80029dc:	400e      	ands	r6, r1
 80029de:	e5c6      	b.n	800256e <__aeabi_dsub+0xce>
 80029e0:	4663      	mov	r3, ip
 80029e2:	18c5      	adds	r5, r0, r3
 80029e4:	9b02      	ldr	r3, [sp, #8]
 80029e6:	4285      	cmp	r5, r0
 80029e8:	4180      	sbcs	r0, r0
 80029ea:	469c      	mov	ip, r3
 80029ec:	4240      	negs	r0, r0
 80029ee:	4464      	add	r4, ip
 80029f0:	1824      	adds	r4, r4, r0
 80029f2:	2701      	movs	r7, #1
 80029f4:	0223      	lsls	r3, r4, #8
 80029f6:	d400      	bmi.n	80029fa <__aeabi_dsub+0x55a>
 80029f8:	e6f5      	b.n	80027e6 <__aeabi_dsub+0x346>
 80029fa:	2702      	movs	r7, #2
 80029fc:	e641      	b.n	8002682 <__aeabi_dsub+0x1e2>
 80029fe:	4663      	mov	r3, ip
 8002a00:	1ac5      	subs	r5, r0, r3
 8002a02:	42a8      	cmp	r0, r5
 8002a04:	4180      	sbcs	r0, r0
 8002a06:	9b02      	ldr	r3, [sp, #8]
 8002a08:	4240      	negs	r0, r0
 8002a0a:	1ae4      	subs	r4, r4, r3
 8002a0c:	2701      	movs	r7, #1
 8002a0e:	1a24      	subs	r4, r4, r0
 8002a10:	e5a8      	b.n	8002564 <__aeabi_dsub+0xc4>
 8002a12:	9d02      	ldr	r5, [sp, #8]
 8002a14:	4652      	mov	r2, sl
 8002a16:	002b      	movs	r3, r5
 8002a18:	3a20      	subs	r2, #32
 8002a1a:	40d3      	lsrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	4653      	mov	r3, sl
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d006      	beq.n	8002a32 <__aeabi_dsub+0x592>
 8002a24:	2240      	movs	r2, #64	@ 0x40
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	002b      	movs	r3, r5
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	4662      	mov	r2, ip
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	4693      	mov	fp, r2
 8002a32:	465d      	mov	r5, fp
 8002a34:	1e6b      	subs	r3, r5, #1
 8002a36:	419d      	sbcs	r5, r3
 8002a38:	430d      	orrs	r5, r1
 8002a3a:	e615      	b.n	8002668 <__aeabi_dsub+0x1c8>
 8002a3c:	0762      	lsls	r2, r4, #29
 8002a3e:	08c0      	lsrs	r0, r0, #3
 8002a40:	4302      	orrs	r2, r0
 8002a42:	08e4      	lsrs	r4, r4, #3
 8002a44:	e70d      	b.n	8002862 <__aeabi_dsub+0x3c2>
 8002a46:	0011      	movs	r1, r2
 8002a48:	0027      	movs	r7, r4
 8002a4a:	3920      	subs	r1, #32
 8002a4c:	40cf      	lsrs	r7, r1
 8002a4e:	2a20      	cmp	r2, #32
 8002a50:	d005      	beq.n	8002a5e <__aeabi_dsub+0x5be>
 8002a52:	2140      	movs	r1, #64	@ 0x40
 8002a54:	1a8a      	subs	r2, r1, r2
 8002a56:	4094      	lsls	r4, r2
 8002a58:	0025      	movs	r5, r4
 8002a5a:	4305      	orrs	r5, r0
 8002a5c:	9503      	str	r5, [sp, #12]
 8002a5e:	9d03      	ldr	r5, [sp, #12]
 8002a60:	1e6a      	subs	r2, r5, #1
 8002a62:	4195      	sbcs	r5, r2
 8002a64:	433d      	orrs	r5, r7
 8002a66:	e77d      	b.n	8002964 <__aeabi_dsub+0x4c4>
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dsub+0x5ce>
 8002a6c:	e744      	b.n	80028f8 <__aeabi_dsub+0x458>
 8002a6e:	2601      	movs	r6, #1
 8002a70:	400e      	ands	r6, r1
 8002a72:	4663      	mov	r3, ip
 8002a74:	08d9      	lsrs	r1, r3, #3
 8002a76:	9b02      	ldr	r3, [sp, #8]
 8002a78:	075a      	lsls	r2, r3, #29
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	08dc      	lsrs	r4, r3, #3
 8002a7e:	e6f0      	b.n	8002862 <__aeabi_dsub+0x3c2>
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d028      	beq.n	8002ad6 <__aeabi_dsub+0x636>
 8002a84:	4662      	mov	r2, ip
 8002a86:	9f02      	ldr	r7, [sp, #8]
 8002a88:	08c0      	lsrs	r0, r0, #3
 8002a8a:	433a      	orrs	r2, r7
 8002a8c:	d100      	bne.n	8002a90 <__aeabi_dsub+0x5f0>
 8002a8e:	e6dc      	b.n	800284a <__aeabi_dsub+0x3aa>
 8002a90:	0762      	lsls	r2, r4, #29
 8002a92:	4310      	orrs	r0, r2
 8002a94:	2280      	movs	r2, #128	@ 0x80
 8002a96:	08e4      	lsrs	r4, r4, #3
 8002a98:	0312      	lsls	r2, r2, #12
 8002a9a:	4214      	tst	r4, r2
 8002a9c:	d009      	beq.n	8002ab2 <__aeabi_dsub+0x612>
 8002a9e:	08fd      	lsrs	r5, r7, #3
 8002aa0:	4215      	tst	r5, r2
 8002aa2:	d106      	bne.n	8002ab2 <__aeabi_dsub+0x612>
 8002aa4:	4663      	mov	r3, ip
 8002aa6:	2601      	movs	r6, #1
 8002aa8:	002c      	movs	r4, r5
 8002aaa:	08d8      	lsrs	r0, r3, #3
 8002aac:	077b      	lsls	r3, r7, #29
 8002aae:	4318      	orrs	r0, r3
 8002ab0:	400e      	ands	r6, r1
 8002ab2:	0f42      	lsrs	r2, r0, #29
 8002ab4:	00c0      	lsls	r0, r0, #3
 8002ab6:	08c0      	lsrs	r0, r0, #3
 8002ab8:	0752      	lsls	r2, r2, #29
 8002aba:	4302      	orrs	r2, r0
 8002abc:	e601      	b.n	80026c2 <__aeabi_dsub+0x222>
 8002abe:	4663      	mov	r3, ip
 8002ac0:	1a1d      	subs	r5, r3, r0
 8002ac2:	45ac      	cmp	ip, r5
 8002ac4:	4192      	sbcs	r2, r2
 8002ac6:	9b02      	ldr	r3, [sp, #8]
 8002ac8:	4252      	negs	r2, r2
 8002aca:	1b1c      	subs	r4, r3, r4
 8002acc:	000e      	movs	r6, r1
 8002ace:	4688      	mov	r8, r1
 8002ad0:	2701      	movs	r7, #1
 8002ad2:	1aa4      	subs	r4, r4, r2
 8002ad4:	e546      	b.n	8002564 <__aeabi_dsub+0xc4>
 8002ad6:	4663      	mov	r3, ip
 8002ad8:	08d9      	lsrs	r1, r3, #3
 8002ada:	9b02      	ldr	r3, [sp, #8]
 8002adc:	075a      	lsls	r2, r3, #29
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	08dc      	lsrs	r4, r3, #3
 8002ae2:	e5ee      	b.n	80026c2 <__aeabi_dsub+0x222>
 8002ae4:	4663      	mov	r3, ip
 8002ae6:	9c02      	ldr	r4, [sp, #8]
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	e6c7      	b.n	800287c <__aeabi_dsub+0x3dc>
 8002aec:	08c0      	lsrs	r0, r0, #3
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	d100      	bne.n	8002af4 <__aeabi_dsub+0x654>
 8002af2:	e6aa      	b.n	800284a <__aeabi_dsub+0x3aa>
 8002af4:	0762      	lsls	r2, r4, #29
 8002af6:	4310      	orrs	r0, r2
 8002af8:	2280      	movs	r2, #128	@ 0x80
 8002afa:	08e4      	lsrs	r4, r4, #3
 8002afc:	0312      	lsls	r2, r2, #12
 8002afe:	4214      	tst	r4, r2
 8002b00:	d0d7      	beq.n	8002ab2 <__aeabi_dsub+0x612>
 8002b02:	9f02      	ldr	r7, [sp, #8]
 8002b04:	08fd      	lsrs	r5, r7, #3
 8002b06:	4215      	tst	r5, r2
 8002b08:	d1d3      	bne.n	8002ab2 <__aeabi_dsub+0x612>
 8002b0a:	4663      	mov	r3, ip
 8002b0c:	2601      	movs	r6, #1
 8002b0e:	08d8      	lsrs	r0, r3, #3
 8002b10:	077b      	lsls	r3, r7, #29
 8002b12:	002c      	movs	r4, r5
 8002b14:	4318      	orrs	r0, r3
 8002b16:	400e      	ands	r6, r1
 8002b18:	e7cb      	b.n	8002ab2 <__aeabi_dsub+0x612>
 8002b1a:	000a      	movs	r2, r1
 8002b1c:	0027      	movs	r7, r4
 8002b1e:	3a20      	subs	r2, #32
 8002b20:	40d7      	lsrs	r7, r2
 8002b22:	2920      	cmp	r1, #32
 8002b24:	d005      	beq.n	8002b32 <__aeabi_dsub+0x692>
 8002b26:	2240      	movs	r2, #64	@ 0x40
 8002b28:	1a52      	subs	r2, r2, r1
 8002b2a:	4094      	lsls	r4, r2
 8002b2c:	0025      	movs	r5, r4
 8002b2e:	4305      	orrs	r5, r0
 8002b30:	9503      	str	r5, [sp, #12]
 8002b32:	9d03      	ldr	r5, [sp, #12]
 8002b34:	1e6a      	subs	r2, r5, #1
 8002b36:	4195      	sbcs	r5, r2
 8002b38:	432f      	orrs	r7, r5
 8002b3a:	e610      	b.n	800275e <__aeabi_dsub+0x2be>
 8002b3c:	0014      	movs	r4, r2
 8002b3e:	2500      	movs	r5, #0
 8002b40:	2200      	movs	r2, #0
 8002b42:	e556      	b.n	80025f2 <__aeabi_dsub+0x152>
 8002b44:	9b02      	ldr	r3, [sp, #8]
 8002b46:	4460      	add	r0, ip
 8002b48:	4699      	mov	r9, r3
 8002b4a:	4560      	cmp	r0, ip
 8002b4c:	4192      	sbcs	r2, r2
 8002b4e:	444c      	add	r4, r9
 8002b50:	4252      	negs	r2, r2
 8002b52:	0005      	movs	r5, r0
 8002b54:	18a4      	adds	r4, r4, r2
 8002b56:	e74c      	b.n	80029f2 <__aeabi_dsub+0x552>
 8002b58:	001a      	movs	r2, r3
 8002b5a:	001c      	movs	r4, r3
 8002b5c:	432a      	orrs	r2, r5
 8002b5e:	d000      	beq.n	8002b62 <__aeabi_dsub+0x6c2>
 8002b60:	e6b3      	b.n	80028ca <__aeabi_dsub+0x42a>
 8002b62:	e6c9      	b.n	80028f8 <__aeabi_dsub+0x458>
 8002b64:	2480      	movs	r4, #128	@ 0x80
 8002b66:	2600      	movs	r6, #0
 8002b68:	0324      	lsls	r4, r4, #12
 8002b6a:	e5ae      	b.n	80026ca <__aeabi_dsub+0x22a>
 8002b6c:	2120      	movs	r1, #32
 8002b6e:	2500      	movs	r5, #0
 8002b70:	1a09      	subs	r1, r1, r0
 8002b72:	e517      	b.n	80025a4 <__aeabi_dsub+0x104>
 8002b74:	2200      	movs	r2, #0
 8002b76:	2500      	movs	r5, #0
 8002b78:	4c0b      	ldr	r4, [pc, #44]	@ (8002ba8 <__aeabi_dsub+0x708>)
 8002b7a:	e53a      	b.n	80025f2 <__aeabi_dsub+0x152>
 8002b7c:	2d00      	cmp	r5, #0
 8002b7e:	d100      	bne.n	8002b82 <__aeabi_dsub+0x6e2>
 8002b80:	e5f6      	b.n	8002770 <__aeabi_dsub+0x2d0>
 8002b82:	464b      	mov	r3, r9
 8002b84:	1bda      	subs	r2, r3, r7
 8002b86:	4692      	mov	sl, r2
 8002b88:	2f00      	cmp	r7, #0
 8002b8a:	d100      	bne.n	8002b8e <__aeabi_dsub+0x6ee>
 8002b8c:	e66f      	b.n	800286e <__aeabi_dsub+0x3ce>
 8002b8e:	2a38      	cmp	r2, #56	@ 0x38
 8002b90:	dc05      	bgt.n	8002b9e <__aeabi_dsub+0x6fe>
 8002b92:	2680      	movs	r6, #128	@ 0x80
 8002b94:	0436      	lsls	r6, r6, #16
 8002b96:	4334      	orrs	r4, r6
 8002b98:	4688      	mov	r8, r1
 8002b9a:	000e      	movs	r6, r1
 8002b9c:	e6d1      	b.n	8002942 <__aeabi_dsub+0x4a2>
 8002b9e:	4688      	mov	r8, r1
 8002ba0:	000e      	movs	r6, r1
 8002ba2:	2501      	movs	r5, #1
 8002ba4:	e6de      	b.n	8002964 <__aeabi_dsub+0x4c4>
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	000007ff 	.word	0x000007ff
 8002bac:	ff7fffff 	.word	0xff7fffff
 8002bb0:	000007fe 	.word	0x000007fe
 8002bb4:	2d00      	cmp	r5, #0
 8002bb6:	d100      	bne.n	8002bba <__aeabi_dsub+0x71a>
 8002bb8:	e668      	b.n	800288c <__aeabi_dsub+0x3ec>
 8002bba:	464b      	mov	r3, r9
 8002bbc:	1bd9      	subs	r1, r3, r7
 8002bbe:	2f00      	cmp	r7, #0
 8002bc0:	d101      	bne.n	8002bc6 <__aeabi_dsub+0x726>
 8002bc2:	468a      	mov	sl, r1
 8002bc4:	e5a7      	b.n	8002716 <__aeabi_dsub+0x276>
 8002bc6:	2701      	movs	r7, #1
 8002bc8:	2938      	cmp	r1, #56	@ 0x38
 8002bca:	dd00      	ble.n	8002bce <__aeabi_dsub+0x72e>
 8002bcc:	e5c7      	b.n	800275e <__aeabi_dsub+0x2be>
 8002bce:	2280      	movs	r2, #128	@ 0x80
 8002bd0:	0412      	lsls	r2, r2, #16
 8002bd2:	4314      	orrs	r4, r2
 8002bd4:	e5af      	b.n	8002736 <__aeabi_dsub+0x296>
 8002bd6:	46c0      	nop			@ (mov r8, r8)

08002bd8 <__aeabi_d2iz>:
 8002bd8:	000b      	movs	r3, r1
 8002bda:	0002      	movs	r2, r0
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4d16      	ldr	r5, [pc, #88]	@ (8002c38 <__aeabi_d2iz+0x60>)
 8002be0:	030c      	lsls	r4, r1, #12
 8002be2:	b082      	sub	sp, #8
 8002be4:	0049      	lsls	r1, r1, #1
 8002be6:	2000      	movs	r0, #0
 8002be8:	9200      	str	r2, [sp, #0]
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	0d49      	lsrs	r1, r1, #21
 8002bf0:	0fde      	lsrs	r6, r3, #31
 8002bf2:	42a9      	cmp	r1, r5
 8002bf4:	dd04      	ble.n	8002c00 <__aeabi_d2iz+0x28>
 8002bf6:	4811      	ldr	r0, [pc, #68]	@ (8002c3c <__aeabi_d2iz+0x64>)
 8002bf8:	4281      	cmp	r1, r0
 8002bfa:	dd03      	ble.n	8002c04 <__aeabi_d2iz+0x2c>
 8002bfc:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <__aeabi_d2iz+0x68>)
 8002bfe:	18f0      	adds	r0, r6, r3
 8002c00:	b002      	add	sp, #8
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	2080      	movs	r0, #128	@ 0x80
 8002c06:	0340      	lsls	r0, r0, #13
 8002c08:	4320      	orrs	r0, r4
 8002c0a:	4c0e      	ldr	r4, [pc, #56]	@ (8002c44 <__aeabi_d2iz+0x6c>)
 8002c0c:	1a64      	subs	r4, r4, r1
 8002c0e:	2c1f      	cmp	r4, #31
 8002c10:	dd08      	ble.n	8002c24 <__aeabi_d2iz+0x4c>
 8002c12:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <__aeabi_d2iz+0x70>)
 8002c14:	1a5b      	subs	r3, r3, r1
 8002c16:	40d8      	lsrs	r0, r3
 8002c18:	0003      	movs	r3, r0
 8002c1a:	4258      	negs	r0, r3
 8002c1c:	2e00      	cmp	r6, #0
 8002c1e:	d1ef      	bne.n	8002c00 <__aeabi_d2iz+0x28>
 8002c20:	0018      	movs	r0, r3
 8002c22:	e7ed      	b.n	8002c00 <__aeabi_d2iz+0x28>
 8002c24:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <__aeabi_d2iz+0x74>)
 8002c26:	9a00      	ldr	r2, [sp, #0]
 8002c28:	469c      	mov	ip, r3
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	4461      	add	r1, ip
 8002c2e:	408b      	lsls	r3, r1
 8002c30:	40e2      	lsrs	r2, r4
 8002c32:	4313      	orrs	r3, r2
 8002c34:	e7f1      	b.n	8002c1a <__aeabi_d2iz+0x42>
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	000003fe 	.word	0x000003fe
 8002c3c:	0000041d 	.word	0x0000041d
 8002c40:	7fffffff 	.word	0x7fffffff
 8002c44:	00000433 	.word	0x00000433
 8002c48:	00000413 	.word	0x00000413
 8002c4c:	fffffbed 	.word	0xfffffbed

08002c50 <__aeabi_i2d>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d016      	beq.n	8002c84 <__aeabi_i2d+0x34>
 8002c56:	17c3      	asrs	r3, r0, #31
 8002c58:	18c5      	adds	r5, r0, r3
 8002c5a:	405d      	eors	r5, r3
 8002c5c:	0fc4      	lsrs	r4, r0, #31
 8002c5e:	0028      	movs	r0, r5
 8002c60:	f000 f8cc 	bl	8002dfc <__clzsi2>
 8002c64:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <__aeabi_i2d+0x58>)
 8002c66:	1a1b      	subs	r3, r3, r0
 8002c68:	055b      	lsls	r3, r3, #21
 8002c6a:	0d5b      	lsrs	r3, r3, #21
 8002c6c:	280a      	cmp	r0, #10
 8002c6e:	dc14      	bgt.n	8002c9a <__aeabi_i2d+0x4a>
 8002c70:	0002      	movs	r2, r0
 8002c72:	002e      	movs	r6, r5
 8002c74:	3215      	adds	r2, #21
 8002c76:	4096      	lsls	r6, r2
 8002c78:	220b      	movs	r2, #11
 8002c7a:	1a12      	subs	r2, r2, r0
 8002c7c:	40d5      	lsrs	r5, r2
 8002c7e:	032d      	lsls	r5, r5, #12
 8002c80:	0b2d      	lsrs	r5, r5, #12
 8002c82:	e003      	b.n	8002c8c <__aeabi_i2d+0x3c>
 8002c84:	2400      	movs	r4, #0
 8002c86:	2300      	movs	r3, #0
 8002c88:	2500      	movs	r5, #0
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	432b      	orrs	r3, r5
 8002c90:	07e4      	lsls	r4, r4, #31
 8002c92:	4323      	orrs	r3, r4
 8002c94:	0030      	movs	r0, r6
 8002c96:	0019      	movs	r1, r3
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
 8002c9a:	380b      	subs	r0, #11
 8002c9c:	4085      	lsls	r5, r0
 8002c9e:	032d      	lsls	r5, r5, #12
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	0b2d      	lsrs	r5, r5, #12
 8002ca4:	e7f2      	b.n	8002c8c <__aeabi_i2d+0x3c>
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	0000041e 	.word	0x0000041e

08002cac <__aeabi_ui2d>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	1e04      	subs	r4, r0, #0
 8002cb0:	d010      	beq.n	8002cd4 <__aeabi_ui2d+0x28>
 8002cb2:	f000 f8a3 	bl	8002dfc <__clzsi2>
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf0 <__aeabi_ui2d+0x44>)
 8002cb8:	1a1b      	subs	r3, r3, r0
 8002cba:	055b      	lsls	r3, r3, #21
 8002cbc:	0d5b      	lsrs	r3, r3, #21
 8002cbe:	280a      	cmp	r0, #10
 8002cc0:	dc0f      	bgt.n	8002ce2 <__aeabi_ui2d+0x36>
 8002cc2:	220b      	movs	r2, #11
 8002cc4:	0021      	movs	r1, r4
 8002cc6:	1a12      	subs	r2, r2, r0
 8002cc8:	40d1      	lsrs	r1, r2
 8002cca:	3015      	adds	r0, #21
 8002ccc:	030a      	lsls	r2, r1, #12
 8002cce:	4084      	lsls	r4, r0
 8002cd0:	0b12      	lsrs	r2, r2, #12
 8002cd2:	e001      	b.n	8002cd8 <__aeabi_ui2d+0x2c>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	051b      	lsls	r3, r3, #20
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	0020      	movs	r0, r4
 8002cde:	0019      	movs	r1, r3
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	0022      	movs	r2, r4
 8002ce4:	380b      	subs	r0, #11
 8002ce6:	4082      	lsls	r2, r0
 8002ce8:	0312      	lsls	r2, r2, #12
 8002cea:	2400      	movs	r4, #0
 8002cec:	0b12      	lsrs	r2, r2, #12
 8002cee:	e7f3      	b.n	8002cd8 <__aeabi_ui2d+0x2c>
 8002cf0:	0000041e 	.word	0x0000041e

08002cf4 <__aeabi_d2f>:
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	004b      	lsls	r3, r1, #1
 8002cf8:	030f      	lsls	r7, r1, #12
 8002cfa:	0d5b      	lsrs	r3, r3, #21
 8002cfc:	4c3b      	ldr	r4, [pc, #236]	@ (8002dec <__aeabi_d2f+0xf8>)
 8002cfe:	0f45      	lsrs	r5, r0, #29
 8002d00:	b083      	sub	sp, #12
 8002d02:	0a7f      	lsrs	r7, r7, #9
 8002d04:	1c5e      	adds	r6, r3, #1
 8002d06:	432f      	orrs	r7, r5
 8002d08:	9000      	str	r0, [sp, #0]
 8002d0a:	9101      	str	r1, [sp, #4]
 8002d0c:	0fca      	lsrs	r2, r1, #31
 8002d0e:	00c5      	lsls	r5, r0, #3
 8002d10:	4226      	tst	r6, r4
 8002d12:	d00b      	beq.n	8002d2c <__aeabi_d2f+0x38>
 8002d14:	4936      	ldr	r1, [pc, #216]	@ (8002df0 <__aeabi_d2f+0xfc>)
 8002d16:	185c      	adds	r4, r3, r1
 8002d18:	2cfe      	cmp	r4, #254	@ 0xfe
 8002d1a:	dd13      	ble.n	8002d44 <__aeabi_d2f+0x50>
 8002d1c:	20ff      	movs	r0, #255	@ 0xff
 8002d1e:	2300      	movs	r3, #0
 8002d20:	05c0      	lsls	r0, r0, #23
 8002d22:	4318      	orrs	r0, r3
 8002d24:	07d2      	lsls	r2, r2, #31
 8002d26:	4310      	orrs	r0, r2
 8002d28:	b003      	add	sp, #12
 8002d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <__aeabi_d2f+0x42>
 8002d30:	2000      	movs	r0, #0
 8002d32:	2300      	movs	r3, #0
 8002d34:	e7f4      	b.n	8002d20 <__aeabi_d2f+0x2c>
 8002d36:	433d      	orrs	r5, r7
 8002d38:	d0f0      	beq.n	8002d1c <__aeabi_d2f+0x28>
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	03db      	lsls	r3, r3, #15
 8002d3e:	20ff      	movs	r0, #255	@ 0xff
 8002d40:	433b      	orrs	r3, r7
 8002d42:	e7ed      	b.n	8002d20 <__aeabi_d2f+0x2c>
 8002d44:	2c00      	cmp	r4, #0
 8002d46:	dd14      	ble.n	8002d72 <__aeabi_d2f+0x7e>
 8002d48:	9b00      	ldr	r3, [sp, #0]
 8002d4a:	00ff      	lsls	r7, r7, #3
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	1e58      	subs	r0, r3, #1
 8002d50:	4183      	sbcs	r3, r0
 8002d52:	0f69      	lsrs	r1, r5, #29
 8002d54:	433b      	orrs	r3, r7
 8002d56:	430b      	orrs	r3, r1
 8002d58:	0759      	lsls	r1, r3, #29
 8002d5a:	d041      	beq.n	8002de0 <__aeabi_d2f+0xec>
 8002d5c:	210f      	movs	r1, #15
 8002d5e:	4019      	ands	r1, r3
 8002d60:	2904      	cmp	r1, #4
 8002d62:	d028      	beq.n	8002db6 <__aeabi_d2f+0xc2>
 8002d64:	3304      	adds	r3, #4
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	d525      	bpl.n	8002db6 <__aeabi_d2f+0xc2>
 8002d6a:	3401      	adds	r4, #1
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	b2e0      	uxtb	r0, r4
 8002d70:	e7d6      	b.n	8002d20 <__aeabi_d2f+0x2c>
 8002d72:	0021      	movs	r1, r4
 8002d74:	3117      	adds	r1, #23
 8002d76:	dbdb      	blt.n	8002d30 <__aeabi_d2f+0x3c>
 8002d78:	2180      	movs	r1, #128	@ 0x80
 8002d7a:	201e      	movs	r0, #30
 8002d7c:	0409      	lsls	r1, r1, #16
 8002d7e:	4339      	orrs	r1, r7
 8002d80:	1b00      	subs	r0, r0, r4
 8002d82:	281f      	cmp	r0, #31
 8002d84:	dd1b      	ble.n	8002dbe <__aeabi_d2f+0xca>
 8002d86:	2602      	movs	r6, #2
 8002d88:	4276      	negs	r6, r6
 8002d8a:	1b34      	subs	r4, r6, r4
 8002d8c:	000e      	movs	r6, r1
 8002d8e:	40e6      	lsrs	r6, r4
 8002d90:	0034      	movs	r4, r6
 8002d92:	2820      	cmp	r0, #32
 8002d94:	d004      	beq.n	8002da0 <__aeabi_d2f+0xac>
 8002d96:	4817      	ldr	r0, [pc, #92]	@ (8002df4 <__aeabi_d2f+0x100>)
 8002d98:	4684      	mov	ip, r0
 8002d9a:	4463      	add	r3, ip
 8002d9c:	4099      	lsls	r1, r3
 8002d9e:	430d      	orrs	r5, r1
 8002da0:	002b      	movs	r3, r5
 8002da2:	1e59      	subs	r1, r3, #1
 8002da4:	418b      	sbcs	r3, r1
 8002da6:	4323      	orrs	r3, r4
 8002da8:	0759      	lsls	r1, r3, #29
 8002daa:	d015      	beq.n	8002dd8 <__aeabi_d2f+0xe4>
 8002dac:	210f      	movs	r1, #15
 8002dae:	2400      	movs	r4, #0
 8002db0:	4019      	ands	r1, r3
 8002db2:	2904      	cmp	r1, #4
 8002db4:	d117      	bne.n	8002de6 <__aeabi_d2f+0xf2>
 8002db6:	019b      	lsls	r3, r3, #6
 8002db8:	0a5b      	lsrs	r3, r3, #9
 8002dba:	b2e0      	uxtb	r0, r4
 8002dbc:	e7b0      	b.n	8002d20 <__aeabi_d2f+0x2c>
 8002dbe:	4c0e      	ldr	r4, [pc, #56]	@ (8002df8 <__aeabi_d2f+0x104>)
 8002dc0:	191c      	adds	r4, r3, r4
 8002dc2:	002b      	movs	r3, r5
 8002dc4:	40a5      	lsls	r5, r4
 8002dc6:	40c3      	lsrs	r3, r0
 8002dc8:	40a1      	lsls	r1, r4
 8002dca:	1e68      	subs	r0, r5, #1
 8002dcc:	4185      	sbcs	r5, r0
 8002dce:	4329      	orrs	r1, r5
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	2400      	movs	r4, #0
 8002dd4:	0759      	lsls	r1, r3, #29
 8002dd6:	d1c1      	bne.n	8002d5c <__aeabi_d2f+0x68>
 8002dd8:	019b      	lsls	r3, r3, #6
 8002dda:	2000      	movs	r0, #0
 8002ddc:	0a5b      	lsrs	r3, r3, #9
 8002dde:	e79f      	b.n	8002d20 <__aeabi_d2f+0x2c>
 8002de0:	08db      	lsrs	r3, r3, #3
 8002de2:	b2e0      	uxtb	r0, r4
 8002de4:	e79c      	b.n	8002d20 <__aeabi_d2f+0x2c>
 8002de6:	3304      	adds	r3, #4
 8002de8:	e7e5      	b.n	8002db6 <__aeabi_d2f+0xc2>
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	000007fe 	.word	0x000007fe
 8002df0:	fffffc80 	.word	0xfffffc80
 8002df4:	fffffca2 	.word	0xfffffca2
 8002df8:	fffffc82 	.word	0xfffffc82

08002dfc <__clzsi2>:
 8002dfc:	211c      	movs	r1, #28
 8002dfe:	2301      	movs	r3, #1
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	4298      	cmp	r0, r3
 8002e04:	d301      	bcc.n	8002e0a <__clzsi2+0xe>
 8002e06:	0c00      	lsrs	r0, r0, #16
 8002e08:	3910      	subs	r1, #16
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	4298      	cmp	r0, r3
 8002e0e:	d301      	bcc.n	8002e14 <__clzsi2+0x18>
 8002e10:	0a00      	lsrs	r0, r0, #8
 8002e12:	3908      	subs	r1, #8
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	4298      	cmp	r0, r3
 8002e18:	d301      	bcc.n	8002e1e <__clzsi2+0x22>
 8002e1a:	0900      	lsrs	r0, r0, #4
 8002e1c:	3904      	subs	r1, #4
 8002e1e:	a202      	add	r2, pc, #8	@ (adr r2, 8002e28 <__clzsi2+0x2c>)
 8002e20:	5c10      	ldrb	r0, [r2, r0]
 8002e22:	1840      	adds	r0, r0, r1
 8002e24:	4770      	bx	lr
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	02020304 	.word	0x02020304
 8002e2c:	01010101 	.word	0x01010101
	...

08002e38 <__clzdi2>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	2900      	cmp	r1, #0
 8002e3c:	d103      	bne.n	8002e46 <__clzdi2+0xe>
 8002e3e:	f7ff ffdd 	bl	8002dfc <__clzsi2>
 8002e42:	3020      	adds	r0, #32
 8002e44:	e002      	b.n	8002e4c <__clzdi2+0x14>
 8002e46:	0008      	movs	r0, r1
 8002e48:	f7ff ffd8 	bl	8002dfc <__clzsi2>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)

08002e50 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	0004      	movs	r4, r0
 8002e58:	0008      	movs	r0, r1
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	1c22      	adds	r2, r4, #0
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	1c02      	adds	r2, r0, #0
 8002e66:	801a      	strh	r2, [r3, #0]
 8002e68:	1cbb      	adds	r3, r7, #2
 8002e6a:	1c0a      	adds	r2, r1, #0
 8002e6c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	8818      	ldrh	r0, [r3, #0]
 8002e72:	1dbb      	adds	r3, r7, #6
 8002e74:	8819      	ldrh	r1, [r3, #0]
 8002e76:	1cbb      	adds	r3, r7, #2
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	f000 fd00 	bl	8003880 <ST7735_DrawPixel>
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b003      	add	sp, #12
 8002e86:	bd90      	pop	{r4, r7, pc}

08002e88 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	46c6      	mov	lr, r8
 8002e8c:	b500      	push	{lr}
 8002e8e:	b090      	sub	sp, #64	@ 0x40
 8002e90:	af04      	add	r7, sp, #16
 8002e92:	468c      	mov	ip, r1
 8002e94:	0016      	movs	r6, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	221e      	movs	r2, #30
 8002e9a:	18ba      	adds	r2, r7, r2
 8002e9c:	1c03      	adds	r3, r0, #0
 8002e9e:	8013      	strh	r3, [r2, #0]
 8002ea0:	231c      	movs	r3, #28
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	4662      	mov	r2, ip
 8002ea6:	801a      	strh	r2, [r3, #0]
 8002ea8:	201a      	movs	r0, #26
 8002eaa:	183b      	adds	r3, r7, r0
 8002eac:	1c32      	adds	r2, r6, #0
 8002eae:	801a      	strh	r2, [r3, #0]
 8002eb0:	2018      	movs	r0, #24
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	1c0a      	adds	r2, r1, #0
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	466b      	mov	r3, sp
 8002eba:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	0001      	movs	r1, r0
 8002ec0:	185e      	adds	r6, r3, r1
 8002ec2:	19f2      	adds	r2, r6, r7
 8002ec4:	2030      	movs	r0, #48	@ 0x30
 8002ec6:	1846      	adds	r6, r0, r1
 8002ec8:	19f3      	adds	r3, r6, r7
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8002ece:	201a      	movs	r0, #26
 8002ed0:	183b      	adds	r3, r7, r0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ed6:	187a      	adds	r2, r7, r1
 8002ed8:	2000      	movs	r0, #0
 8002eda:	5e12      	ldrsh	r2, [r2, r0]
 8002edc:	4353      	muls	r3, r2
 8002ede:	1e5a      	subs	r2, r3, #1
 8002ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	60ba      	str	r2, [r7, #8]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60fa      	str	r2, [r7, #12]
 8002eea:	68b8      	ldr	r0, [r7, #8]
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	0002      	movs	r2, r0
 8002ef0:	0ed2      	lsrs	r2, r2, #27
 8002ef2:	000e      	movs	r6, r1
 8002ef4:	0176      	lsls	r6, r6, #5
 8002ef6:	617e      	str	r6, [r7, #20]
 8002ef8:	697e      	ldr	r6, [r7, #20]
 8002efa:	4316      	orrs	r6, r2
 8002efc:	617e      	str	r6, [r7, #20]
 8002efe:	0002      	movs	r2, r0
 8002f00:	0152      	lsls	r2, r2, #5
 8002f02:	613a      	str	r2, [r7, #16]
 8002f04:	001a      	movs	r2, r3
 8002f06:	603a      	str	r2, [r7, #0]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	6838      	ldr	r0, [r7, #0]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	0002      	movs	r2, r0
 8002f12:	0ed2      	lsrs	r2, r2, #27
 8002f14:	000e      	movs	r6, r1
 8002f16:	0175      	lsls	r5, r6, #5
 8002f18:	4315      	orrs	r5, r2
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	0154      	lsls	r4, r2, #5
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	3307      	adds	r3, #7
 8002f22:	08db      	lsrs	r3, r3, #3
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	466a      	mov	r2, sp
 8002f28:	1ad2      	subs	r2, r2, r3
 8002f2a:	4695      	mov	sp, r2
 8002f2c:	ab04      	add	r3, sp, #16
 8002f2e:	3301      	adds	r3, #1
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8002f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f38:	2200      	movs	r2, #0
 8002f3a:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8002f3c:	201a      	movs	r0, #26
 8002f3e:	183b      	adds	r3, r7, r0
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	2118      	movs	r1, #24
 8002f44:	187a      	adds	r2, r7, r1
 8002f46:	8812      	ldrh	r2, [r2, #0]
 8002f48:	4353      	muls	r3, r2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8002f50:	221e      	movs	r2, #30
 8002f52:	18bb      	adds	r3, r7, r2
 8002f54:	881c      	ldrh	r4, [r3, #0]
 8002f56:	231c      	movs	r3, #28
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	881d      	ldrh	r5, [r3, #0]
 8002f5c:	183b      	adds	r3, r7, r0
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	0008      	movs	r0, r1
 8002f62:	187a      	adds	r2, r7, r1
 8002f64:	8812      	ldrh	r2, [r2, #0]
 8002f66:	210c      	movs	r1, #12
 8002f68:	1809      	adds	r1, r1, r0
 8002f6a:	19c9      	adds	r1, r1, r7
 8002f6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f6e:	2601      	movs	r6, #1
 8002f70:	46b4      	mov	ip, r6
 8002f72:	4666      	mov	r6, ip
 8002f74:	9602      	str	r6, [sp, #8]
 8002f76:	9201      	str	r2, [sp, #4]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	002b      	movs	r3, r5
 8002f7c:	0022      	movs	r2, r4
 8002f7e:	f000 f9dd 	bl	800333c <drawImage>
 8002f82:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8002f84:	46c0      	nop			@ (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b00c      	add	sp, #48	@ 0x30
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	46b8      	mov	r8, r7
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f90 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	0004      	movs	r4, r0
 8002f98:	0008      	movs	r0, r1
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	1dbb      	adds	r3, r7, #6
 8002f9e:	1c22      	adds	r2, r4, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	1c02      	adds	r2, r0, #0
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	1cbb      	adds	r3, r7, #2
 8002faa:	1c0a      	adds	r2, r1, #0
 8002fac:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8002fae:	1cbb      	adds	r3, r7, #2
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5e59      	ldrsh	r1, [r3, r1]
 8002fb8:	1dbb      	adds	r3, r7, #6
 8002fba:	2000      	movs	r0, #0
 8002fbc:	5e1b      	ldrsh	r3, [r3, r0]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7ff ff46 	bl	8002e50 <drawPixel>
}
 8002fc4:	46c0      	nop			@ (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b003      	add	sp, #12
 8002fca:	bd90      	pop	{r4, r7, pc}

08002fcc <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fce:	b089      	sub	sp, #36	@ 0x24
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	0004      	movs	r4, r0
 8002fd4:	0008      	movs	r0, r1
 8002fd6:	60ba      	str	r2, [r7, #8]
 8002fd8:	0019      	movs	r1, r3
 8002fda:	230e      	movs	r3, #14
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	1c22      	adds	r2, r4, #0
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	1c02      	adds	r2, r0, #0
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	1dbb      	adds	r3, r7, #6
 8002fec:	1c0a      	adds	r2, r1, #0
 8002fee:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8002ff0:	2316      	movs	r3, #22
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8002ff8:	e03f      	b.n	800307a <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8002ffa:	2516      	movs	r5, #22
 8002ffc:	197b      	adds	r3, r7, r5
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	469c      	mov	ip, r3
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	2400      	movs	r4, #0
 800300c:	5f1c      	ldrsh	r4, [r3, r4]
 800300e:	230c      	movs	r3, #12
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2100      	movs	r1, #0
 8003014:	5e59      	ldrsh	r1, [r3, r1]
 8003016:	260e      	movs	r6, #14
 8003018:	19bb      	adds	r3, r7, r6
 800301a:	2000      	movs	r0, #0
 800301c:	5e18      	ldrsh	r0, [r3, r0]
 800301e:	232c      	movs	r3, #44	@ 0x2c
 8003020:	2208      	movs	r2, #8
 8003022:	189b      	adds	r3, r3, r2
 8003024:	19db      	adds	r3, r3, r7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2328      	movs	r3, #40	@ 0x28
 800302c:	189b      	adds	r3, r3, r2
 800302e:	19db      	adds	r3, r3, r7
 8003030:	2200      	movs	r2, #0
 8003032:	5e9b      	ldrsh	r3, [r3, r2]
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	0023      	movs	r3, r4
 8003038:	4662      	mov	r2, ip
 800303a:	f000 f82b 	bl	8003094 <drawChar>
		x+=(size*6)+spacing;
 800303e:	232c      	movs	r3, #44	@ 0x2c
 8003040:	2108      	movs	r1, #8
 8003042:	185b      	adds	r3, r3, r1
 8003044:	19db      	adds	r3, r3, r7
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	1c1a      	adds	r2, r3, #0
 800304c:	1c13      	adds	r3, r2, #0
 800304e:	18db      	adds	r3, r3, r3
 8003050:	189b      	adds	r3, r3, r2
 8003052:	18db      	adds	r3, r3, r3
 8003054:	b29a      	uxth	r2, r3
 8003056:	2330      	movs	r3, #48	@ 0x30
 8003058:	185b      	adds	r3, r3, r1
 800305a:	19db      	adds	r3, r3, r7
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	18d3      	adds	r3, r2, r3
 8003062:	b29a      	uxth	r2, r3
 8003064:	19bb      	adds	r3, r7, r6
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	18d3      	adds	r3, r2, r3
 800306a:	b29a      	uxth	r2, r3
 800306c:	19bb      	adds	r3, r7, r6
 800306e:	801a      	strh	r2, [r3, #0]
		i++;
 8003070:	197b      	adds	r3, r7, r5
 8003072:	881a      	ldrh	r2, [r3, #0]
 8003074:	197b      	adds	r3, r7, r5
 8003076:	3201      	adds	r2, #1
 8003078:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800307a:	2316      	movs	r3, #22
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	18d3      	adds	r3, r2, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1b7      	bne.n	8002ffa <drawString+0x2e>
	}
}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	46c0      	nop			@ (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b007      	add	sp, #28
 8003092:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003094 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003094:	b5b0      	push	{r4, r5, r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	0005      	movs	r5, r0
 800309c:	000c      	movs	r4, r1
 800309e:	0010      	movs	r0, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	1dbb      	adds	r3, r7, #6
 80030a4:	1c2a      	adds	r2, r5, #0
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	1c22      	adds	r2, r4, #0
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	1cfb      	adds	r3, r7, #3
 80030b0:	1c02      	adds	r2, r0, #0
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	003b      	movs	r3, r7
 80030b6:	1c0a      	adds	r2, r1, #0
 80030b8:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	e0bd      	b.n	800323c <drawChar+0x1a8>
    if ((i) == 5)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	d104      	bne.n	80030d0 <drawChar+0x3c>
      line = 0x0;
 80030c6:	2317      	movs	r3, #23
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e00b      	b.n	80030e8 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 80030d0:	1cfb      	adds	r3, r7, #3
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	0013      	movs	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	189a      	adds	r2, r3, r2
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	18d2      	adds	r2, r2, r3
 80030de:	2317      	movs	r3, #23
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	495b      	ldr	r1, [pc, #364]	@ (8003250 <drawChar+0x1bc>)
 80030e4:	5c8a      	ldrb	r2, [r1, r2]
 80030e6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	e09f      	b.n	800322e <drawChar+0x19a>
      if (line & 0x1) {
 80030ee:	2317      	movs	r3, #23
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2201      	movs	r2, #1
 80030f6:	4013      	ands	r3, r2
 80030f8:	d043      	beq.n	8003182 <drawChar+0xee>
        if (size == 1)
 80030fa:	232c      	movs	r3, #44	@ 0x2c
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d115      	bne.n	8003130 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	b29a      	uxth	r2, r3
 8003108:	1dbb      	adds	r3, r7, #6
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	b218      	sxth	r0, r3
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	881a      	ldrh	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b29b      	uxth	r3, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	3307      	adds	r3, #7
 8003120:	b29b      	uxth	r3, r3
 8003122:	b219      	sxth	r1, r3
 8003124:	003b      	movs	r3, r7
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	001a      	movs	r2, r3
 800312a:	f7ff ff31 	bl	8002f90 <writePixel>
 800312e:	e075      	b.n	800321c <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8003130:	212c      	movs	r1, #44	@ 0x2c
 8003132:	187b      	adds	r3, r7, r1
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	b292      	uxth	r2, r2
 800313c:	4353      	muls	r3, r2
 800313e:	b29a      	uxth	r2, r3
 8003140:	1dbb      	adds	r3, r7, #6
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	b218      	sxth	r0, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2207      	movs	r2, #7
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	b29b      	uxth	r3, r3
 8003152:	000c      	movs	r4, r1
 8003154:	187a      	adds	r2, r7, r1
 8003156:	7812      	ldrb	r2, [r2, #0]
 8003158:	b292      	uxth	r2, r2
 800315a:	4353      	muls	r3, r2
 800315c:	b29a      	uxth	r2, r3
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	18d3      	adds	r3, r2, r3
 8003164:	b29b      	uxth	r3, r3
 8003166:	b219      	sxth	r1, r3
 8003168:	193b      	adds	r3, r7, r4
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	b21a      	sxth	r2, r3
 800316e:	193b      	adds	r3, r7, r4
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b21c      	sxth	r4, r3
 8003174:	003b      	movs	r3, r7
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	0023      	movs	r3, r4
 800317c:	f7ff fe84 	bl	8002e88 <fillRect>
 8003180:	e04c      	b.n	800321c <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003182:	2428      	movs	r4, #40	@ 0x28
 8003184:	193b      	adds	r3, r7, r4
 8003186:	0039      	movs	r1, r7
 8003188:	2200      	movs	r2, #0
 800318a:	5e9a      	ldrsh	r2, [r3, r2]
 800318c:	2300      	movs	r3, #0
 800318e:	5ecb      	ldrsh	r3, [r1, r3]
 8003190:	429a      	cmp	r2, r3
 8003192:	d043      	beq.n	800321c <drawChar+0x188>
        if (size == 1) // default size
 8003194:	232c      	movs	r3, #44	@ 0x2c
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d115      	bne.n	80031ca <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	1dbb      	adds	r3, r7, #6
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	18d3      	adds	r3, r2, r3
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b218      	sxth	r0, r3
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	881a      	ldrh	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3307      	adds	r3, #7
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	b219      	sxth	r1, r3
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	001a      	movs	r2, r3
 80031c4:	f7ff fee4 	bl	8002f90 <writePixel>
 80031c8:	e028      	b.n	800321c <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 80031ca:	212c      	movs	r1, #44	@ 0x2c
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	b292      	uxth	r2, r2
 80031d6:	4353      	muls	r3, r2
 80031d8:	b29a      	uxth	r2, r3
 80031da:	1dbb      	adds	r3, r7, #6
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	18d3      	adds	r3, r2, r3
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	b218      	sxth	r0, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2207      	movs	r2, #7
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	000c      	movs	r4, r1
 80031ee:	187a      	adds	r2, r7, r1
 80031f0:	7812      	ldrb	r2, [r2, #0]
 80031f2:	b292      	uxth	r2, r2
 80031f4:	4353      	muls	r3, r2
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	18d3      	adds	r3, r2, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b219      	sxth	r1, r3
 8003202:	193b      	adds	r3, r7, r4
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b21a      	sxth	r2, r3
 8003208:	193b      	adds	r3, r7, r4
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b21c      	sxth	r4, r3
 800320e:	2328      	movs	r3, #40	@ 0x28
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	0023      	movs	r3, r4
 8003218:	f7ff fe36 	bl	8002e88 <fillRect>
        }
      }
      line >>= 1;
 800321c:	2217      	movs	r2, #23
 800321e:	18bb      	adds	r3, r7, r2
 8003220:	18ba      	adds	r2, r7, r2
 8003222:	7812      	ldrb	r2, [r2, #0]
 8003224:	0852      	lsrs	r2, r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b07      	cmp	r3, #7
 8003232:	dc00      	bgt.n	8003236 <drawChar+0x1a2>
 8003234:	e75b      	b.n	80030ee <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3301      	adds	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b05      	cmp	r3, #5
 8003240:	dc00      	bgt.n	8003244 <drawChar+0x1b0>
 8003242:	e73d      	b.n	80030c0 <drawChar+0x2c>
    }
  }
}
 8003244:	46c0      	nop			@ (mov r8, r8)
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b006      	add	sp, #24
 800324c:	bdb0      	pop	{r4, r5, r7, pc}
 800324e:	46c0      	nop			@ (mov r8, r8)
 8003250:	0800dca0 	.word	0x0800dca0

08003254 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003256:	b091      	sub	sp, #68	@ 0x44
 8003258:	af04      	add	r7, sp, #16
 800325a:	231e      	movs	r3, #30
 800325c:	18f9      	adds	r1, r7, r3
 800325e:	8008      	strh	r0, [r1, #0]
 8003260:	4669      	mov	r1, sp
 8003262:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8003264:	210c      	movs	r1, #12
 8003266:	2318      	movs	r3, #24
 8003268:	18cb      	adds	r3, r1, r3
 800326a:	19d9      	adds	r1, r3, r7
 800326c:	231e      	movs	r3, #30
 800326e:	18f8      	adds	r0, r7, r3
 8003270:	8800      	ldrh	r0, [r0, #0]
 8003272:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8003274:	492f      	ldr	r1, [pc, #188]	@ (8003334 <fillScreen+0xe0>)
 8003276:	2300      	movs	r3, #0
 8003278:	5ec9      	ldrsh	r1, [r1, r3]
 800327a:	0008      	movs	r0, r1
 800327c:	492e      	ldr	r1, [pc, #184]	@ (8003338 <fillScreen+0xe4>)
 800327e:	2300      	movs	r3, #0
 8003280:	5ec9      	ldrsh	r1, [r1, r3]
 8003282:	4341      	muls	r1, r0
 8003284:	1e48      	subs	r0, r1, #1
 8003286:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003288:	0008      	movs	r0, r1
 800328a:	6138      	str	r0, [r7, #16]
 800328c:	2000      	movs	r0, #0
 800328e:	6178      	str	r0, [r7, #20]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	0010      	movs	r0, r2
 8003296:	0ec0      	lsrs	r0, r0, #27
 8003298:	613a      	str	r2, [r7, #16]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	015d      	lsls	r5, r3, #5
 800329e:	4305      	orrs	r5, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	015c      	lsls	r4, r3, #5
 80032a4:	0008      	movs	r0, r1
 80032a6:	6038      	str	r0, [r7, #0]
 80032a8:	2000      	movs	r0, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	683c      	ldr	r4, [r7, #0]
 80032ae:	687d      	ldr	r5, [r7, #4]
 80032b0:	0023      	movs	r3, r4
 80032b2:	0ed8      	lsrs	r0, r3, #27
 80032b4:	002b      	movs	r3, r5
 80032b6:	015b      	lsls	r3, r3, #5
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4303      	orrs	r3, r0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	0023      	movs	r3, r4
 80032c2:	015b      	lsls	r3, r3, #5
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	000b      	movs	r3, r1
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	3307      	adds	r3, #7
 80032cc:	08db      	lsrs	r3, r3, #3
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	466a      	mov	r2, sp
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	469d      	mov	sp, r3
 80032d6:	ab04      	add	r3, sp, #16
 80032d8:	3301      	adds	r3, #1
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 80032e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e2:	2200      	movs	r2, #0
 80032e4:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 80032e6:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <fillScreen+0xe0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	5e9b      	ldrsh	r3, [r3, r2]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <fillScreen+0xe4>)
 80032f0:	2000      	movs	r0, #0
 80032f2:	5e12      	ldrsh	r2, [r2, r0]
 80032f4:	b292      	uxth	r2, r2
 80032f6:	4353      	muls	r3, r2
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fc:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <fillScreen+0xe0>)
 8003300:	2200      	movs	r2, #0
 8003302:	5e9b      	ldrsh	r3, [r3, r2]
 8003304:	b29b      	uxth	r3, r3
 8003306:	4a0c      	ldr	r2, [pc, #48]	@ (8003338 <fillScreen+0xe4>)
 8003308:	2000      	movs	r0, #0
 800330a:	5e12      	ldrsh	r2, [r2, r0]
 800330c:	b292      	uxth	r2, r2
 800330e:	210c      	movs	r1, #12
 8003310:	2018      	movs	r0, #24
 8003312:	1809      	adds	r1, r1, r0
 8003314:	19c9      	adds	r1, r1, r7
 8003316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003318:	2401      	movs	r4, #1
 800331a:	9402      	str	r4, [sp, #8]
 800331c:	9201      	str	r2, [sp, #4]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2300      	movs	r3, #0
 8003322:	2200      	movs	r2, #0
 8003324:	f000 f80a 	bl	800333c <drawImage>
 8003328:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b00d      	add	sp, #52	@ 0x34
 8003330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	20001074 	.word	0x20001074
 8003338:	20001076 	.word	0x20001076

0800333c <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	46c6      	mov	lr, r8
 8003340:	b500      	push	{lr}
 8003342:	b092      	sub	sp, #72	@ 0x48
 8003344:	af02      	add	r7, sp, #8
 8003346:	6278      	str	r0, [r7, #36]	@ 0x24
 8003348:	6239      	str	r1, [r7, #32]
 800334a:	0019      	movs	r1, r3
 800334c:	231e      	movs	r3, #30
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	231c      	movs	r3, #28
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	1c0a      	adds	r2, r1, #0
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	466b      	mov	r3, sp
 800335c:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 800335e:	2322      	movs	r3, #34	@ 0x22
 8003360:	2118      	movs	r1, #24
 8003362:	185b      	adds	r3, r3, r1
 8003364:	19db      	adds	r3, r3, r7
 8003366:	2200      	movs	r2, #0
 8003368:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 800336a:	2340      	movs	r3, #64	@ 0x40
 800336c:	185b      	adds	r3, r3, r1
 800336e:	19db      	adds	r3, r3, r7
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	2244      	movs	r2, #68	@ 0x44
 8003374:	1852      	adds	r2, r2, r1
 8003376:	19d2      	adds	r2, r2, r7
 8003378:	8812      	ldrh	r2, [r2, #0]
 800337a:	4353      	muls	r3, r2
 800337c:	1e5a      	subs	r2, r3, #1
 800337e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003380:	001a      	movs	r2, r3
 8003382:	60ba      	str	r2, [r7, #8]
 8003384:	2200      	movs	r2, #0
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	68b8      	ldr	r0, [r7, #8]
 800338a:	68f9      	ldr	r1, [r7, #12]
 800338c:	0002      	movs	r2, r0
 800338e:	0f12      	lsrs	r2, r2, #28
 8003390:	000e      	movs	r6, r1
 8003392:	0136      	lsls	r6, r6, #4
 8003394:	617e      	str	r6, [r7, #20]
 8003396:	697e      	ldr	r6, [r7, #20]
 8003398:	4316      	orrs	r6, r2
 800339a:	617e      	str	r6, [r7, #20]
 800339c:	0002      	movs	r2, r0
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	613a      	str	r2, [r7, #16]
 80033a2:	001a      	movs	r2, r3
 80033a4:	603a      	str	r2, [r7, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	6838      	ldr	r0, [r7, #0]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	0002      	movs	r2, r0
 80033b0:	0f12      	lsrs	r2, r2, #28
 80033b2:	000e      	movs	r6, r1
 80033b4:	0135      	lsls	r5, r6, #4
 80033b6:	4315      	orrs	r5, r2
 80033b8:	0002      	movs	r2, r0
 80033ba:	0114      	lsls	r4, r2, #4
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	3307      	adds	r3, #7
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	466a      	mov	r2, sp
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	469d      	mov	sp, r3
 80033ca:	ab02      	add	r3, sp, #8
 80033cc:	3301      	adds	r3, #1
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 80033d4:	2326      	movs	r3, #38	@ 0x26
 80033d6:	2118      	movs	r1, #24
 80033d8:	185b      	adds	r3, r3, r1
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	2200      	movs	r2, #0
 80033de:	801a      	strh	r2, [r3, #0]
 80033e0:	e04d      	b.n	800347e <drawImage+0x142>
{
	ind = image[i][0];
 80033e2:	2126      	movs	r1, #38	@ 0x26
 80033e4:	2018      	movs	r0, #24
 80033e6:	180b      	adds	r3, r1, r0
 80033e8:	19db      	adds	r3, r3, r7
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f0:	18d2      	adds	r2, r2, r3
 80033f2:	2316      	movs	r3, #22
 80033f4:	181b      	adds	r3, r3, r0
 80033f6:	19db      	adds	r3, r3, r7
 80033f8:	8812      	ldrh	r2, [r2, #0]
 80033fa:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 80033fc:	180b      	adds	r3, r1, r0
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003406:	18d2      	adds	r2, r2, r3
 8003408:	2314      	movs	r3, #20
 800340a:	181b      	adds	r3, r3, r0
 800340c:	19db      	adds	r3, r3, r7
 800340e:	8852      	ldrh	r2, [r2, #2]
 8003410:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8003412:	2324      	movs	r3, #36	@ 0x24
 8003414:	181b      	adds	r3, r3, r0
 8003416:	19db      	adds	r3, r3, r7
 8003418:	2200      	movs	r2, #0
 800341a:	801a      	strh	r2, [r3, #0]
 800341c:	e01c      	b.n	8003458 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 800341e:	2316      	movs	r3, #22
 8003420:	2418      	movs	r4, #24
 8003422:	191b      	adds	r3, r3, r4
 8003424:	19db      	adds	r3, r3, r7
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	6a3a      	ldr	r2, [r7, #32]
 800342c:	18d2      	adds	r2, r2, r3
 800342e:	2122      	movs	r1, #34	@ 0x22
 8003430:	190b      	adds	r3, r1, r4
 8003432:	19db      	adds	r3, r3, r7
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	1909      	adds	r1, r1, r4
 8003438:	19c9      	adds	r1, r1, r7
 800343a:	1c58      	adds	r0, r3, #1
 800343c:	8008      	strh	r0, [r1, #0]
 800343e:	0018      	movs	r0, r3
 8003440:	8811      	ldrh	r1, [r2, #0]
 8003442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003444:	0042      	lsls	r2, r0, #1
 8003446:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8003448:	2124      	movs	r1, #36	@ 0x24
 800344a:	190b      	adds	r3, r1, r4
 800344c:	19db      	adds	r3, r3, r7
 800344e:	881a      	ldrh	r2, [r3, #0]
 8003450:	190b      	adds	r3, r1, r4
 8003452:	19db      	adds	r3, r3, r7
 8003454:	3201      	adds	r2, #1
 8003456:	801a      	strh	r2, [r3, #0]
 8003458:	2324      	movs	r3, #36	@ 0x24
 800345a:	2018      	movs	r0, #24
 800345c:	181b      	adds	r3, r3, r0
 800345e:	19da      	adds	r2, r3, r7
 8003460:	2314      	movs	r3, #20
 8003462:	181b      	adds	r3, r3, r0
 8003464:	19db      	adds	r3, r3, r7
 8003466:	8812      	ldrh	r2, [r2, #0]
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3d7      	bcc.n	800341e <drawImage+0xe2>
for(i=0; i<c; i++)
 800346e:	2126      	movs	r1, #38	@ 0x26
 8003470:	180b      	adds	r3, r1, r0
 8003472:	19db      	adds	r3, r3, r7
 8003474:	881a      	ldrh	r2, [r3, #0]
 8003476:	180b      	adds	r3, r1, r0
 8003478:	19db      	adds	r3, r3, r7
 800347a:	3201      	adds	r2, #1
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	2326      	movs	r3, #38	@ 0x26
 8003480:	2118      	movs	r1, #24
 8003482:	185b      	adds	r3, r3, r1
 8003484:	19da      	adds	r2, r3, r7
 8003486:	2348      	movs	r3, #72	@ 0x48
 8003488:	185b      	adds	r3, r3, r1
 800348a:	19db      	adds	r3, r3, r7
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d3a6      	bcc.n	80033e2 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8003494:	2344      	movs	r3, #68	@ 0x44
 8003496:	185b      	adds	r3, r3, r1
 8003498:	19db      	adds	r3, r3, r7
 800349a:	881c      	ldrh	r4, [r3, #0]
 800349c:	2340      	movs	r3, #64	@ 0x40
 800349e:	185b      	adds	r3, r3, r1
 80034a0:	19db      	adds	r3, r3, r7
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	231e      	movs	r3, #30
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	8819      	ldrh	r1, [r3, #0]
 80034aa:	231c      	movs	r3, #28
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	8818      	ldrh	r0, [r3, #0]
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	0023      	movs	r3, r4
 80034b6:	f000 fa31 	bl	800391c <ST7735_DrawImage>
 80034ba:	46c5      	mov	sp, r8
}
 80034bc:	46c0      	nop			@ (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b010      	add	sp, #64	@ 0x40
 80034c2:	bc80      	pop	{r7}
 80034c4:	46b8      	mov	r8, r7
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80034cc:	23a0      	movs	r3, #160	@ 0xa0
 80034ce:	05db      	lsls	r3, r3, #23
 80034d0:	2200      	movs	r2, #0
 80034d2:	2120      	movs	r1, #32
 80034d4:	0018      	movs	r0, r3
 80034d6:	f002 fe46 	bl	8006166 <HAL_GPIO_WritePin>
}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80034e4:	23a0      	movs	r3, #160	@ 0xa0
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	2201      	movs	r2, #1
 80034ea:	2120      	movs	r1, #32
 80034ec:	0018      	movs	r0, r3
 80034ee:	f002 fe3a 	bl	8006166 <HAL_GPIO_WritePin>
}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <ST7735_Reset>:

void ST7735_Reset()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80034fc:	2380      	movs	r3, #128	@ 0x80
 80034fe:	0219      	lsls	r1, r3, #8
 8003500:	23a0      	movs	r3, #160	@ 0xa0
 8003502:	05db      	lsls	r3, r3, #23
 8003504:	2200      	movs	r2, #0
 8003506:	0018      	movs	r0, r3
 8003508:	f002 fe2d 	bl	8006166 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800350c:	2005      	movs	r0, #5
 800350e:	f002 fbb3 	bl	8005c78 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	0219      	lsls	r1, r3, #8
 8003516:	23a0      	movs	r3, #160	@ 0xa0
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	2201      	movs	r2, #1
 800351c:	0018      	movs	r0, r3
 800351e:	f002 fe22 	bl	8006166 <HAL_GPIO_WritePin>
}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	0002      	movs	r2, r0
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003534:	23a0      	movs	r3, #160	@ 0xa0
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	2200      	movs	r2, #0
 800353a:	2110      	movs	r1, #16
 800353c:	0018      	movs	r0, r3
 800353e:	f002 fe12 	bl	8006166 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003542:	2301      	movs	r3, #1
 8003544:	425b      	negs	r3, r3
 8003546:	1df9      	adds	r1, r7, #7
 8003548:	4803      	ldr	r0, [pc, #12]	@ (8003558 <ST7735_WriteCommand+0x30>)
 800354a:	2201      	movs	r2, #1
 800354c:	f004 ff6e 	bl	800842c <HAL_SPI_Transmit>
}
 8003550:	46c0      	nop			@ (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20001f2c 	.word	0x20001f2c

0800355c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003566:	23a0      	movs	r3, #160	@ 0xa0
 8003568:	05db      	lsls	r3, r3, #23
 800356a:	2201      	movs	r2, #1
 800356c:	2110      	movs	r1, #16
 800356e:	0018      	movs	r0, r3
 8003570:	f002 fdf9 	bl	8006166 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b29a      	uxth	r2, r3
 8003578:	2301      	movs	r3, #1
 800357a:	425b      	negs	r3, r3
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4803      	ldr	r0, [pc, #12]	@ (800358c <ST7735_WriteData+0x30>)
 8003580:	f004 ff54 	bl	800842c <HAL_SPI_Transmit>
}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20001f2c 	.word	0x20001f2c

08003590 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	220f      	movs	r2, #15
 80035a0:	18ba      	adds	r2, r7, r2
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80035a6:	e04a      	b.n	800363e <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	210b      	movs	r1, #11
 80035b0:	187a      	adds	r2, r7, r1
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7ff ffb4 	bl	8003528 <ST7735_WriteCommand>

        numArgs = *addr++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	200a      	movs	r0, #10
 80035c8:	183a      	adds	r2, r7, r0
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80035ce:	183b      	adds	r3, r7, r0
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	230c      	movs	r3, #12
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	2180      	movs	r1, #128	@ 0x80
 80035da:	400a      	ands	r2, r1
 80035dc:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80035de:	183b      	adds	r3, r7, r0
 80035e0:	183a      	adds	r2, r7, r0
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	217f      	movs	r1, #127	@ 0x7f
 80035e6:	400a      	ands	r2, r1
 80035e8:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80035ea:	183b      	adds	r3, r7, r0
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80035f2:	0004      	movs	r4, r0
 80035f4:	183b      	adds	r3, r7, r0
 80035f6:	781a      	ldrb	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0011      	movs	r1, r2
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff ffad 	bl	800355c <ST7735_WriteData>
            addr += numArgs;
 8003602:	193b      	adds	r3, r7, r4
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	18d3      	adds	r3, r2, r3
 800360a:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800360c:	210c      	movs	r1, #12
 800360e:	187b      	adds	r3, r7, r1
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d013      	beq.n	800363e <DisplayInit+0xae>
            ms = *addr++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	187b      	adds	r3, r7, r1
 8003620:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003622:	187b      	adds	r3, r7, r1
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	2bff      	cmp	r3, #255	@ 0xff
 8003628:	d103      	bne.n	8003632 <DisplayInit+0xa2>
 800362a:	187b      	adds	r3, r7, r1
 800362c:	22fa      	movs	r2, #250	@ 0xfa
 800362e:	0052      	lsls	r2, r2, #1
 8003630:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003632:	230c      	movs	r3, #12
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f002 fb1d 	bl	8005c78 <HAL_Delay>
    while(numCommands--) {
 800363e:	220f      	movs	r2, #15
 8003640:	18bb      	adds	r3, r7, r2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	18ba      	adds	r2, r7, r2
 8003646:	1e59      	subs	r1, r3, #1
 8003648:	7011      	strb	r1, [r2, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1ac      	bne.n	80035a8 <DisplayInit+0x18>
        }
    }
}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	46c0      	nop			@ (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b005      	add	sp, #20
 8003656:	bd90      	pop	{r4, r7, pc}

08003658 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	0005      	movs	r5, r0
 8003660:	000c      	movs	r4, r1
 8003662:	0010      	movs	r0, r2
 8003664:	0019      	movs	r1, r3
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	1c2a      	adds	r2, r5, #0
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	1dbb      	adds	r3, r7, #6
 800366e:	1c22      	adds	r2, r4, #0
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	1d7b      	adds	r3, r7, #5
 8003674:	1c02      	adds	r2, r0, #0
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	1c0a      	adds	r2, r1, #0
 800367c:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800367e:	202a      	movs	r0, #42	@ 0x2a
 8003680:	f7ff ff52 	bl	8003528 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003684:	210c      	movs	r1, #12
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <ST7735_SetAddressWindow+0xa8>)
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	b2da      	uxtb	r2, r3
 8003698:	187b      	adds	r3, r7, r1
 800369a:	705a      	strb	r2, [r3, #1]
 800369c:	187b      	adds	r3, r7, r1
 800369e:	2200      	movs	r2, #0
 80036a0:	709a      	strb	r2, [r3, #2]
 80036a2:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <ST7735_SetAddressWindow+0xa8>)
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	1d7b      	adds	r3, r7, #5
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	18d3      	adds	r3, r2, r3
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	187b      	adds	r3, r7, r1
 80036b0:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80036b2:	000c      	movs	r4, r1
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	2104      	movs	r1, #4
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff ff4f 	bl	800355c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80036be:	202b      	movs	r0, #43	@ 0x2b
 80036c0:	f7ff ff32 	bl	8003528 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80036c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003704 <ST7735_SetAddressWindow+0xac>)
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	1dbb      	adds	r3, r7, #6
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	18d3      	adds	r3, r2, r3
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	0021      	movs	r1, r4
 80036d2:	187b      	adds	r3, r7, r1
 80036d4:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <ST7735_SetAddressWindow+0xac>)
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	18d3      	adds	r3, r2, r3
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	2104      	movs	r1, #4
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ff36 	bl	800355c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80036f0:	202c      	movs	r0, #44	@ 0x2c
 80036f2:	f7ff ff19 	bl	8003528 <ST7735_WriteCommand>
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bdb0      	pop	{r4, r5, r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	2000107b 	.word	0x2000107b
 8003704:	2000107c 	.word	0x2000107c

08003708 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	0002      	movs	r2, r0
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003714:	f7ff fed8 	bl	80034c8 <ST7735_Select>
    ST7735_Reset();
 8003718:	f7ff feee 	bl	80034f8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800371c:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <ST7735_Init+0x50>)
 800371e:	0018      	movs	r0, r3
 8003720:	f7ff ff36 	bl	8003590 <DisplayInit>
    DisplayInit(init_cmds2);
 8003724:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <ST7735_Init+0x54>)
 8003726:	0018      	movs	r0, r3
 8003728:	f7ff ff32 	bl	8003590 <DisplayInit>
    DisplayInit(init_cmds3);
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <ST7735_Init+0x58>)
 800372e:	0018      	movs	r0, r3
 8003730:	f7ff ff2e 	bl	8003590 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <ST7735_Init+0x5c>)
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800373a:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <ST7735_Init+0x60>)
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003740:	1dfb      	adds	r3, r7, #7
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f811 	bl	800376c <ST7735_SetRotation>
    ST7735_Unselect();
 800374a:	f7ff fec9 	bl	80034e0 <ST7735_Unselect>

}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	0800e19c 	.word	0x0800e19c
 800375c:	0800e1d4 	.word	0x0800e1d4
 8003760:	0800e1e4 	.word	0x0800e1e4
 8003764:	20001079 	.word	0x20001079
 8003768:	2000107a 	.word	0x2000107a

0800376c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	0002      	movs	r2, r0
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003778:	230f      	movs	r3, #15
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2203      	movs	r2, #3
 8003786:	4013      	ands	r3, r2
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b36      	ldr	r3, [pc, #216]	@ (8003864 <ST7735_SetRotation+0xf8>)
 800378c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800378e:	4b35      	ldr	r3, [pc, #212]	@ (8003864 <ST7735_SetRotation+0xf8>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d041      	beq.n	800381a <ST7735_SetRotation+0xae>
 8003796:	dc53      	bgt.n	8003840 <ST7735_SetRotation+0xd4>
 8003798:	2b02      	cmp	r3, #2
 800379a:	d02b      	beq.n	80037f4 <ST7735_SetRotation+0x88>
 800379c:	dc50      	bgt.n	8003840 <ST7735_SetRotation+0xd4>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <ST7735_SetRotation+0x3c>
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d013      	beq.n	80037ce <ST7735_SetRotation+0x62>
 80037a6:	e04b      	b.n	8003840 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80037a8:	230f      	movs	r3, #15
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	22c0      	movs	r2, #192	@ 0xc0
 80037ae:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80037b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003868 <ST7735_SetRotation+0xfc>)
 80037b2:	22a0      	movs	r2, #160	@ 0xa0
 80037b4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80037b6:	4b2d      	ldr	r3, [pc, #180]	@ (800386c <ST7735_SetRotation+0x100>)
 80037b8:	2280      	movs	r2, #128	@ 0x80
 80037ba:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80037bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003870 <ST7735_SetRotation+0x104>)
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003874 <ST7735_SetRotation+0x108>)
 80037c2:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80037c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003878 <ST7735_SetRotation+0x10c>)
 80037c6:	781a      	ldrb	r2, [r3, #0]
 80037c8:	4b2c      	ldr	r3, [pc, #176]	@ (800387c <ST7735_SetRotation+0x110>)
 80037ca:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80037cc:	e038      	b.n	8003840 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80037ce:	230f      	movs	r3, #15
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	22a0      	movs	r2, #160	@ 0xa0
 80037d4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80037d6:	4b25      	ldr	r3, [pc, #148]	@ (800386c <ST7735_SetRotation+0x100>)
 80037d8:	22a0      	movs	r2, #160	@ 0xa0
 80037da:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80037dc:	4b22      	ldr	r3, [pc, #136]	@ (8003868 <ST7735_SetRotation+0xfc>)
 80037de:	2280      	movs	r2, #128	@ 0x80
 80037e0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <ST7735_SetRotation+0x104>)
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	4b25      	ldr	r3, [pc, #148]	@ (800387c <ST7735_SetRotation+0x110>)
 80037e8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80037ea:	4b23      	ldr	r3, [pc, #140]	@ (8003878 <ST7735_SetRotation+0x10c>)
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	4b21      	ldr	r3, [pc, #132]	@ (8003874 <ST7735_SetRotation+0x108>)
 80037f0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80037f2:	e025      	b.n	8003840 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80037f4:	230f      	movs	r3, #15
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003868 <ST7735_SetRotation+0xfc>)
 80037fe:	22a0      	movs	r2, #160	@ 0xa0
 8003800:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003802:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <ST7735_SetRotation+0x100>)
 8003804:	2280      	movs	r2, #128	@ 0x80
 8003806:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003808:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <ST7735_SetRotation+0x104>)
 800380a:	781a      	ldrb	r2, [r3, #0]
 800380c:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <ST7735_SetRotation+0x108>)
 800380e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003810:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <ST7735_SetRotation+0x10c>)
 8003812:	781a      	ldrb	r2, [r3, #0]
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <ST7735_SetRotation+0x110>)
 8003816:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003818:	e012      	b.n	8003840 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800381a:	230f      	movs	r3, #15
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	2260      	movs	r2, #96	@ 0x60
 8003820:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <ST7735_SetRotation+0x100>)
 8003824:	22a0      	movs	r2, #160	@ 0xa0
 8003826:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003828:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <ST7735_SetRotation+0xfc>)
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <ST7735_SetRotation+0x104>)
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	4b12      	ldr	r3, [pc, #72]	@ (800387c <ST7735_SetRotation+0x110>)
 8003834:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <ST7735_SetRotation+0x10c>)
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <ST7735_SetRotation+0x108>)
 800383c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800383e:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8003840:	f7ff fe42 	bl	80034c8 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003844:	2036      	movs	r0, #54	@ 0x36
 8003846:	f7ff fe6f 	bl	8003528 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800384a:	230f      	movs	r3, #15
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	2101      	movs	r1, #1
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff fe83 	bl	800355c <ST7735_WriteData>
  ST7735_Unselect();
 8003856:	f7ff fe43 	bl	80034e0 <ST7735_Unselect>
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	20001078 	.word	0x20001078
 8003868:	20001076 	.word	0x20001076
 800386c:	20001074 	.word	0x20001074
 8003870:	20001079 	.word	0x20001079
 8003874:	2000107b 	.word	0x2000107b
 8003878:	2000107a 	.word	0x2000107a
 800387c:	2000107c 	.word	0x2000107c

08003880 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	0004      	movs	r4, r0
 8003888:	0008      	movs	r0, r1
 800388a:	0011      	movs	r1, r2
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	1c22      	adds	r2, r4, #0
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	1c02      	adds	r2, r0, #0
 8003896:	801a      	strh	r2, [r3, #0]
 8003898:	1cbb      	adds	r3, r7, #2
 800389a:	1c0a      	adds	r2, r1, #0
 800389c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 800389e:	1dbb      	adds	r3, r7, #6
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003914 <ST7735_DrawPixel+0x94>)
 80038a4:	2100      	movs	r1, #0
 80038a6:	5e52      	ldrsh	r2, [r2, r1]
 80038a8:	4293      	cmp	r3, r2
 80038aa:	da2f      	bge.n	800390c <ST7735_DrawPixel+0x8c>
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <ST7735_DrawPixel+0x98>)
 80038b2:	2100      	movs	r1, #0
 80038b4:	5e52      	ldrsh	r2, [r2, r1]
 80038b6:	4293      	cmp	r3, r2
 80038b8:	da28      	bge.n	800390c <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 80038ba:	f7ff fe05 	bl	80034c8 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80038be:	1dbb      	adds	r3, r7, #6
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b2d8      	uxtb	r0, r3
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b2d9      	uxtb	r1, r3
 80038ca:	1dbb      	adds	r3, r7, #6
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f7ff febb 	bl	8003658 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80038e2:	1cbb      	adds	r3, r7, #2
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	210c      	movs	r1, #12
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	1cbb      	adds	r3, r7, #2
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2102      	movs	r1, #2
 8003900:	0018      	movs	r0, r3
 8003902:	f7ff fe2b 	bl	800355c <ST7735_WriteData>

    ST7735_Unselect();
 8003906:	f7ff fdeb 	bl	80034e0 <ST7735_Unselect>
 800390a:	e000      	b.n	800390e <ST7735_DrawPixel+0x8e>
        return;
 800390c:	46c0      	nop			@ (mov r8, r8)
}
 800390e:	46bd      	mov	sp, r7
 8003910:	b005      	add	sp, #20
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	20001074 	.word	0x20001074
 8003918:	20001076 	.word	0x20001076

0800391c <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	0005      	movs	r5, r0
 8003924:	000c      	movs	r4, r1
 8003926:	0010      	movs	r0, r2
 8003928:	0019      	movs	r1, r3
 800392a:	1dbb      	adds	r3, r7, #6
 800392c:	1c2a      	adds	r2, r5, #0
 800392e:	801a      	strh	r2, [r3, #0]
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	1c22      	adds	r2, r4, #0
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	1cbb      	adds	r3, r7, #2
 8003938:	1c02      	adds	r2, r0, #0
 800393a:	801a      	strh	r2, [r3, #0]
 800393c:	003b      	movs	r3, r7
 800393e:	1c0a      	adds	r2, r1, #0
 8003940:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8003942:	1dbb      	adds	r3, r7, #6
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	4a2a      	ldr	r2, [pc, #168]	@ (80039f0 <ST7735_DrawImage+0xd4>)
 8003948:	2100      	movs	r1, #0
 800394a:	5e52      	ldrsh	r2, [r2, r1]
 800394c:	4293      	cmp	r3, r2
 800394e:	da47      	bge.n	80039e0 <ST7735_DrawImage+0xc4>
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	4a27      	ldr	r2, [pc, #156]	@ (80039f4 <ST7735_DrawImage+0xd8>)
 8003956:	2100      	movs	r1, #0
 8003958:	5e52      	ldrsh	r2, [r2, r1]
 800395a:	4293      	cmp	r3, r2
 800395c:	da40      	bge.n	80039e0 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 800395e:	1dbb      	adds	r3, r7, #6
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	1cbb      	adds	r3, r7, #2
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	18d3      	adds	r3, r2, r3
 8003968:	4a21      	ldr	r2, [pc, #132]	@ (80039f0 <ST7735_DrawImage+0xd4>)
 800396a:	2100      	movs	r1, #0
 800396c:	5e52      	ldrsh	r2, [r2, r1]
 800396e:	4293      	cmp	r3, r2
 8003970:	dc38      	bgt.n	80039e4 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	881a      	ldrh	r2, [r3, #0]
 8003976:	003b      	movs	r3, r7
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	18d3      	adds	r3, r2, r3
 800397c:	4a1d      	ldr	r2, [pc, #116]	@ (80039f4 <ST7735_DrawImage+0xd8>)
 800397e:	2100      	movs	r1, #0
 8003980:	5e52      	ldrsh	r2, [r2, r1]
 8003982:	4293      	cmp	r3, r2
 8003984:	dc30      	bgt.n	80039e8 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8003986:	f7ff fd9f 	bl	80034c8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800398a:	1dbb      	adds	r3, r7, #6
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b2d8      	uxtb	r0, r3
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	b2d9      	uxtb	r1, r3
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b2da      	uxtb	r2, r3
 800399c:	1cbb      	adds	r3, r7, #2
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	18d3      	adds	r3, r2, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b2dc      	uxtb	r4, r3
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	003b      	movs	r3, r7
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	18d3      	adds	r3, r2, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	0022      	movs	r2, r4
 80039c0:	f7ff fe4a 	bl	8003658 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80039c4:	1cbb      	adds	r3, r7, #2
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	003a      	movs	r2, r7
 80039ca:	8812      	ldrh	r2, [r2, #0]
 80039cc:	4353      	muls	r3, r2
 80039ce:	005a      	lsls	r2, r3, #1
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	0011      	movs	r1, r2
 80039d4:	0018      	movs	r0, r3
 80039d6:	f7ff fdc1 	bl	800355c <ST7735_WriteData>
    ST7735_Unselect();
 80039da:	f7ff fd81 	bl	80034e0 <ST7735_Unselect>
 80039de:	e004      	b.n	80039ea <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80039e0:	46c0      	nop			@ (mov r8, r8)
 80039e2:	e002      	b.n	80039ea <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	e000      	b.n	80039ea <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 80039e8:	46c0      	nop			@ (mov r8, r8)
}
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bdb0      	pop	{r4, r5, r7, pc}
 80039f0:	20001074 	.word	0x20001074
 80039f4:	20001076 	.word	0x20001076

080039f8 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    return json->sibling;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	220a      	movs	r2, #10
 8003a2e:	2100      	movs	r1, #0
 8003a30:	0018      	movs	r0, r3
 8003a32:	f007 fdbd 	bl	800b5b0 <strtoll>
 8003a36:	0002      	movs	r2, r0
 8003a38:	000b      	movs	r3, r1
}
 8003a3a:	0010      	movs	r0, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2100      	movs	r1, #0
 8003a52:	0018      	movs	r0, r3
 8003a54:	f007 fcfa 	bl	800b44c <strtod>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	000b      	movs	r3, r1
}
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a6e:	f002 f87d 	bl	8005b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a72:	f000 fb2d 	bl	80040d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 8003a76:	4be0      	ldr	r3, [pc, #896]	@ (8003df8 <main+0x390>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8003a7c:	4bdf      	ldr	r3, [pc, #892]	@ (8003dfc <main+0x394>)
 8003a7e:	4ae0      	ldr	r2, [pc, #896]	@ (8003e00 <main+0x398>)
 8003a80:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8003a82:	4bde      	ldr	r3, [pc, #888]	@ (8003dfc <main+0x394>)
 8003a84:	2234      	movs	r2, #52	@ 0x34
 8003a86:	32ff      	adds	r2, #255	@ 0xff
 8003a88:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8003a8a:	4bde      	ldr	r3, [pc, #888]	@ (8003e04 <main+0x39c>)
 8003a8c:	4ade      	ldr	r2, [pc, #888]	@ (8003e08 <main+0x3a0>)
 8003a8e:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8003a90:	4bdc      	ldr	r3, [pc, #880]	@ (8003e04 <main+0x39c>)
 8003a92:	2232      	movs	r2, #50	@ 0x32
 8003a94:	32ff      	adds	r2, #255	@ 0xff
 8003a96:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 8003a98:	4bdc      	ldr	r3, [pc, #880]	@ (8003e0c <main+0x3a4>)
 8003a9a:	4ad8      	ldr	r2, [pc, #864]	@ (8003dfc <main+0x394>)
 8003a9c:	ca03      	ldmia	r2!, {r0, r1}
 8003a9e:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8003aa0:	4bda      	ldr	r3, [pc, #872]	@ (8003e0c <main+0x3a4>)
 8003aa2:	4ad8      	ldr	r2, [pc, #864]	@ (8003e04 <main+0x39c>)
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	ca03      	ldmia	r2!, {r0, r1}
 8003aa8:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 8003aaa:	4bd9      	ldr	r3, [pc, #868]	@ (8003e10 <main+0x3a8>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8003ab0:	4ad7      	ldr	r2, [pc, #860]	@ (8003e10 <main+0x3a8>)
 8003ab2:	2394      	movs	r3, #148	@ 0x94
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2168      	movs	r1, #104	@ 0x68
 8003ab8:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 8003aba:	4ad5      	ldr	r2, [pc, #852]	@ (8003e10 <main+0x3a8>)
 8003abc:	232a      	movs	r3, #42	@ 0x2a
 8003abe:	33ff      	adds	r3, #255	@ 0xff
 8003ac0:	2169      	movs	r1, #105	@ 0x69
 8003ac2:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 8003ac4:	4ad2      	ldr	r2, [pc, #840]	@ (8003e10 <main+0x3a8>)
 8003ac6:	238c      	movs	r3, #140	@ 0x8c
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2100      	movs	r1, #0
 8003acc:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 8003ace:	4bd0      	ldr	r3, [pc, #832]	@ (8003e10 <main+0x3a8>)
 8003ad0:	2264      	movs	r2, #100	@ 0x64
 8003ad2:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 8003ad4:	4bce      	ldr	r3, [pc, #824]	@ (8003e10 <main+0x3a8>)
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 8003ada:	4acd      	ldr	r2, [pc, #820]	@ (8003e10 <main+0x3a8>)
 8003adc:	2390      	movs	r3, #144	@ 0x90
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 8003ae4:	4aca      	ldr	r2, [pc, #808]	@ (8003e10 <main+0x3a8>)
 8003ae6:	238e      	movs	r3, #142	@ 0x8e
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2100      	movs	r1, #0
 8003aec:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 8003aee:	4ac8      	ldr	r2, [pc, #800]	@ (8003e10 <main+0x3a8>)
 8003af0:	2392      	movs	r3, #146	@ 0x92
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	49c7      	ldr	r1, [pc, #796]	@ (8003e14 <main+0x3ac>)
 8003af6:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 8003af8:	4bc7      	ldr	r3, [pc, #796]	@ (8003e18 <main+0x3b0>)
 8003afa:	4ac8      	ldr	r2, [pc, #800]	@ (8003e1c <main+0x3b4>)
 8003afc:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8003afe:	4bc6      	ldr	r3, [pc, #792]	@ (8003e18 <main+0x3b0>)
 8003b00:	4ac7      	ldr	r2, [pc, #796]	@ (8003e20 <main+0x3b8>)
 8003b02:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 8003b04:	4bc2      	ldr	r3, [pc, #776]	@ (8003e10 <main+0x3a8>)
 8003b06:	4ac4      	ldr	r2, [pc, #784]	@ (8003e18 <main+0x3b0>)
 8003b08:	3318      	adds	r3, #24
 8003b0a:	ca03      	ldmia	r2!, {r0, r1}
 8003b0c:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8003b0e:	4bc0      	ldr	r3, [pc, #768]	@ (8003e10 <main+0x3a8>)
 8003b10:	4ac1      	ldr	r2, [pc, #772]	@ (8003e18 <main+0x3b0>)
 8003b12:	3320      	adds	r3, #32
 8003b14:	ca03      	ldmia	r2!, {r0, r1}
 8003b16:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 8003b18:	4bbd      	ldr	r3, [pc, #756]	@ (8003e10 <main+0x3a8>)
 8003b1a:	4abf      	ldr	r2, [pc, #764]	@ (8003e18 <main+0x3b0>)
 8003b1c:	3328      	adds	r3, #40	@ 0x28
 8003b1e:	ca03      	ldmia	r2!, {r0, r1}
 8003b20:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b22:	f000 fcdb 	bl	80044dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8003b26:	f000 fb35 	bl	8004194 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003b2a:	f000 fb73 	bl	8004214 <MX_SPI1_Init>
  MX_TIM17_Init();
 8003b2e:	f000 fbb1 	bl	8004294 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003b32:	f000 fc37 	bl	80043a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003b36:	f000 fc83 	bl	8004440 <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8003b3a:	f7ff fcd1 	bl	80034e0 <ST7735_Unselect>
  ST7735_Init(1);
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7ff fde2 	bl	8003708 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8003b44:	4bb7      	ldr	r3, [pc, #732]	@ (8003e24 <main+0x3bc>)
 8003b46:	2241      	movs	r2, #65	@ 0x41
 8003b48:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8003b4a:	4bb6      	ldr	r3, [pc, #728]	@ (8003e24 <main+0x3bc>)
 8003b4c:	2242      	movs	r2, #66	@ 0x42
 8003b4e:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8003b50:	4bb5      	ldr	r3, [pc, #724]	@ (8003e28 <main+0x3c0>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8003b56:	4bb4      	ldr	r3, [pc, #720]	@ (8003e28 <main+0x3c0>)
 8003b58:	2240      	movs	r2, #64	@ 0x40
 8003b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8003b5c:	1dfb      	adds	r3, r7, #7
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8003b62:	2102      	movs	r1, #2
 8003b64:	2019      	movs	r0, #25
 8003b66:	f000 fd91 	bl	800468c <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	207c      	movs	r0, #124	@ 0x7c
 8003b6e:	f000 fd8d 	bl	800468c <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8003b72:	2138      	movs	r1, #56	@ 0x38
 8003b74:	201a      	movs	r0, #26
 8003b76:	f000 fd89 	bl	800468c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	201b      	movs	r0, #27
 8003b7e:	f000 fd85 	bl	800468c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8003b82:	2180      	movs	r1, #128	@ 0x80
 8003b84:	201f      	movs	r0, #31
 8003b86:	f000 fd81 	bl	800468c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8003b8a:	2180      	movs	r1, #128	@ 0x80
 8003b8c:	2021      	movs	r0, #33	@ 0x21
 8003b8e:	f000 fd7d 	bl	800468c <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8003b92:	2101      	movs	r1, #1
 8003b94:	2018      	movs	r0, #24
 8003b96:	f000 fd79 	bl	800468c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2020      	movs	r0, #32
 8003b9e:	f000 fd75 	bl	800468c <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7ff fb56 	bl	8003254 <fillScreen>
  while (1)
  {
	  //SendData();
	  ReceiveData();
 8003ba8:	f000 fd96 	bl	80046d8 <ReceiveData>
	  if((game.time.hours%dayLength)==0) game.stepsToday=0;
 8003bac:	4b98      	ldr	r3, [pc, #608]	@ (8003e10 <main+0x3a8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2218      	movs	r2, #24
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7fc fc3b 	bl	8000430 <__aeabi_idivmod>
 8003bba:	1e0b      	subs	r3, r1, #0
 8003bbc:	d104      	bne.n	8003bc8 <main+0x160>
 8003bbe:	4a94      	ldr	r2, [pc, #592]	@ (8003e10 <main+0x3a8>)
 8003bc0:	2390      	movs	r3, #144	@ 0x90
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	50d1      	str	r1, [r2, r3]
	  if((game.time.hours%weekLength)==0) game.weeklySteps=0;
 8003bc8:	4b91      	ldr	r3, [pc, #580]	@ (8003e10 <main+0x3a8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	22a8      	movs	r2, #168	@ 0xa8
 8003bce:	0011      	movs	r1, r2
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fc fc2d 	bl	8000430 <__aeabi_idivmod>
 8003bd6:	1e0b      	subs	r3, r1, #0
 8003bd8:	d104      	bne.n	8003be4 <main+0x17c>
 8003bda:	4a8d      	ldr	r2, [pc, #564]	@ (8003e10 <main+0x3a8>)
 8003bdc:	238e      	movs	r3, #142	@ 0x8e
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2100      	movs	r1, #0
 8003be2:	50d1      	str	r1, [r2, r3]
	  game.stepsToday +=steps-game.allSteps;
 8003be4:	4a8a      	ldr	r2, [pc, #552]	@ (8003e10 <main+0x3a8>)
 8003be6:	2390      	movs	r3, #144	@ 0x90
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	58d2      	ldr	r2, [r2, r3]
 8003bec:	4b82      	ldr	r3, [pc, #520]	@ (8003df8 <main+0x390>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	4987      	ldr	r1, [pc, #540]	@ (8003e10 <main+0x3a8>)
 8003bf4:	238c      	movs	r3, #140	@ 0x8c
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	58cb      	ldr	r3, [r1, r3]
 8003bfa:	1ac3      	subs	r3, r0, r3
 8003bfc:	18d1      	adds	r1, r2, r3
 8003bfe:	4a84      	ldr	r2, [pc, #528]	@ (8003e10 <main+0x3a8>)
 8003c00:	2390      	movs	r3, #144	@ 0x90
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps-game.allSteps;
 8003c06:	4a82      	ldr	r2, [pc, #520]	@ (8003e10 <main+0x3a8>)
 8003c08:	238e      	movs	r3, #142	@ 0x8e
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	58d2      	ldr	r2, [r2, r3]
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003df8 <main+0x390>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	0018      	movs	r0, r3
 8003c14:	497e      	ldr	r1, [pc, #504]	@ (8003e10 <main+0x3a8>)
 8003c16:	238c      	movs	r3, #140	@ 0x8c
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	58cb      	ldr	r3, [r1, r3]
 8003c1c:	1ac3      	subs	r3, r0, r3
 8003c1e:	18d1      	adds	r1, r2, r3
 8003c20:	4a7b      	ldr	r2, [pc, #492]	@ (8003e10 <main+0x3a8>)
 8003c22:	238e      	movs	r3, #142	@ 0x8e
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	50d1      	str	r1, [r2, r3]
	  game.allSteps=steps;
 8003c28:	4b73      	ldr	r3, [pc, #460]	@ (8003df8 <main+0x390>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	4a78      	ldr	r2, [pc, #480]	@ (8003e10 <main+0x3a8>)
 8003c30:	238c      	movs	r3, #140	@ 0x8c
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	50d1      	str	r1, [r2, r3]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 8003c36:	4b7d      	ldr	r3, [pc, #500]	@ (8003e2c <main+0x3c4>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d100      	bne.n	8003c40 <main+0x1d8>
 8003c3e:	e14c      	b.n	8003eda <main+0x472>
 8003c40:	dcb2      	bgt.n	8003ba8 <main+0x140>
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d100      	bne.n	8003c48 <main+0x1e0>
 8003c46:	e105      	b.n	8003e54 <main+0x3ec>
 8003c48:	dcae      	bgt.n	8003ba8 <main+0x140>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d060      	beq.n	8003d10 <main+0x2a8>
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d1aa      	bne.n	8003ba8 <main+0x140>
	  case Main:


		  if((++updateScreen)>=5)
 8003c52:	4b77      	ldr	r3, [pc, #476]	@ (8003e30 <main+0x3c8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	4b75      	ldr	r3, [pc, #468]	@ (8003e30 <main+0x3c8>)
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	4b74      	ldr	r3, [pc, #464]	@ (8003e30 <main+0x3c8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d922      	bls.n	8003caa <main+0x242>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8003c64:	4b69      	ldr	r3, [pc, #420]	@ (8003e0c <main+0x3a4>)
 8003c66:	2101      	movs	r1, #1
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 fcab 	bl	80045c4 <Animate>
			  updateScreen = 0;
 8003c6e:	4b70      	ldr	r3, [pc, #448]	@ (8003e30 <main+0x3c8>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
			  //Update steps
			  _ADXL343_ReadReg8(0x15, &steps, 1);
 8003c74:	4b60      	ldr	r3, [pc, #384]	@ (8003df8 <main+0x390>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	0019      	movs	r1, r3
 8003c7a:	2015      	movs	r0, #21
 8003c7c:	f000 fcd4 	bl	8004628 <_ADXL343_ReadReg8>
			  sprintf(buffer2, "Steps today: %d ", steps);
 8003c80:	4b5d      	ldr	r3, [pc, #372]	@ (8003df8 <main+0x390>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	001a      	movs	r2, r3
 8003c86:	496b      	ldr	r1, [pc, #428]	@ (8003e34 <main+0x3cc>)
 8003c88:	4b6b      	ldr	r3, [pc, #428]	@ (8003e38 <main+0x3d0>)
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f007 fd60 	bl	800b750 <siprintf>
			  drawString(0, 20, buffer2, WHITE, BLACK, 1, 1);
 8003c90:	2301      	movs	r3, #1
 8003c92:	425b      	negs	r3, r3
 8003c94:	4a68      	ldr	r2, [pc, #416]	@ (8003e38 <main+0x3d0>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	9102      	str	r1, [sp, #8]
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	9101      	str	r1, [sp, #4]
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	9100      	str	r1, [sp, #0]
 8003ca2:	2114      	movs	r1, #20
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7ff f991 	bl	8002fcc <drawString>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 8003caa:	2380      	movs	r3, #128	@ 0x80
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	23a0      	movs	r3, #160	@ 0xa0
 8003cb0:	05db      	lsls	r3, r3, #23
 8003cb2:	0011      	movs	r1, r2
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f002 fa39 	bl	800612c <HAL_GPIO_ReadPin>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10e      	bne.n	8003cde <main+0x276>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003e3c <main+0x3d4>)
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f004 ff3f 	bl	8008b48 <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 8003cca:	4b58      	ldr	r3, [pc, #352]	@ (8003e2c <main+0x3c4>)
 8003ccc:	2202      	movs	r2, #2
 8003cce:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8003cd0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e40 <main+0x3d8>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7ff fabc 	bl	8003254 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8003cdc:	e1c8      	b.n	8004070 <main+0x608>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	011a      	lsls	r2, r3, #4
 8003ce2:	23a0      	movs	r3, #160	@ 0xa0
 8003ce4:	05db      	lsls	r3, r3, #23
 8003ce6:	0011      	movs	r1, r2
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f002 fa1f 	bl	800612c <HAL_GPIO_ReadPin>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d109      	bne.n	8003d08 <main+0x2a0>
			  currentMenu = StatsDisplay;
 8003cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8003e2c <main+0x3c4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8003cfa:	4b51      	ldr	r3, [pc, #324]	@ (8003e40 <main+0x3d8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7ff faa7 	bl	8003254 <fillScreen>
		  break;
 8003d06:	e1b3      	b.n	8004070 <main+0x608>
			  canChange = 1;
 8003d08:	4b4d      	ldr	r3, [pc, #308]	@ (8003e40 <main+0x3d8>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
		  break;
 8003d0e:	e1af      	b.n	8004070 <main+0x608>
	  case StatsDisplay:

		  if((++updateScreen)>=5)
 8003d10:	4b47      	ldr	r3, [pc, #284]	@ (8003e30 <main+0x3c8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	4b46      	ldr	r3, [pc, #280]	@ (8003e30 <main+0x3c8>)
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <main+0x3c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d951      	bls.n	8003dc6 <main+0x35e>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8003d22:	2301      	movs	r3, #1
 8003d24:	425b      	negs	r3, r3
 8003d26:	4a47      	ldr	r2, [pc, #284]	@ (8003e44 <main+0x3dc>)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	9102      	str	r1, [sp, #8]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	9101      	str	r1, [sp, #4]
 8003d30:	2100      	movs	r1, #0
 8003d32:	9100      	str	r1, [sp, #0]
 8003d34:	2196      	movs	r1, #150	@ 0x96
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7ff f948 	bl	8002fcc <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8003d3c:	4a34      	ldr	r2, [pc, #208]	@ (8003e10 <main+0x3a8>)
 8003d3e:	2390      	movs	r3, #144	@ 0x90
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	58d2      	ldr	r2, [r2, r3]
 8003d44:	4940      	ldr	r1, [pc, #256]	@ (8003e48 <main+0x3e0>)
 8003d46:	4b3c      	ldr	r3, [pc, #240]	@ (8003e38 <main+0x3d0>)
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f007 fd01 	bl	800b750 <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8003d4e:	2301      	movs	r3, #1
 8003d50:	425b      	negs	r3, r3
 8003d52:	4a39      	ldr	r2, [pc, #228]	@ (8003e38 <main+0x3d0>)
 8003d54:	2101      	movs	r1, #1
 8003d56:	9102      	str	r1, [sp, #8]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	9101      	str	r1, [sp, #4]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	9100      	str	r1, [sp, #0]
 8003d60:	218c      	movs	r1, #140	@ 0x8c
 8003d62:	2000      	movs	r0, #0
 8003d64:	f7ff f932 	bl	8002fcc <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8003d68:	4a29      	ldr	r2, [pc, #164]	@ (8003e10 <main+0x3a8>)
 8003d6a:	238e      	movs	r3, #142	@ 0x8e
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	58d2      	ldr	r2, [r2, r3]
 8003d70:	4936      	ldr	r1, [pc, #216]	@ (8003e4c <main+0x3e4>)
 8003d72:	4b31      	ldr	r3, [pc, #196]	@ (8003e38 <main+0x3d0>)
 8003d74:	0018      	movs	r0, r3
 8003d76:	f007 fceb 	bl	800b750 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	425b      	negs	r3, r3
 8003d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e38 <main+0x3d0>)
 8003d80:	2101      	movs	r1, #1
 8003d82:	9102      	str	r1, [sp, #8]
 8003d84:	2101      	movs	r1, #1
 8003d86:	9101      	str	r1, [sp, #4]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	9100      	str	r1, [sp, #0]
 8003d8c:	2182      	movs	r1, #130	@ 0x82
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7ff f91c 	bl	8002fcc <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 8003d94:	4a1e      	ldr	r2, [pc, #120]	@ (8003e10 <main+0x3a8>)
 8003d96:	238c      	movs	r3, #140	@ 0x8c
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	58d2      	ldr	r2, [r2, r3]
 8003d9c:	492c      	ldr	r1, [pc, #176]	@ (8003e50 <main+0x3e8>)
 8003d9e:	4b26      	ldr	r3, [pc, #152]	@ (8003e38 <main+0x3d0>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f007 fcd5 	bl	800b750 <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8003da6:	2301      	movs	r3, #1
 8003da8:	425b      	negs	r3, r3
 8003daa:	4a23      	ldr	r2, [pc, #140]	@ (8003e38 <main+0x3d0>)
 8003dac:	2101      	movs	r1, #1
 8003dae:	9102      	str	r1, [sp, #8]
 8003db0:	2101      	movs	r1, #1
 8003db2:	9101      	str	r1, [sp, #4]
 8003db4:	2100      	movs	r1, #0
 8003db6:	9100      	str	r1, [sp, #0]
 8003db8:	2178      	movs	r1, #120	@ 0x78
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f7ff f906 	bl	8002fcc <drawString>

			  //drawString(0, 70, "PET", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <main+0x3c8>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	23a0      	movs	r3, #160	@ 0xa0
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f002 f9ab 	bl	800612c <HAL_GPIO_ReadPin>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d109      	bne.n	8003df0 <main+0x388>
	  		currentMenu = Main;
 8003ddc:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <main+0x3c4>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8003de2:	4b17      	ldr	r3, [pc, #92]	@ (8003e40 <main+0x3d8>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7ff fa33 	bl	8003254 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8003dee:	e13f      	b.n	8004070 <main+0x608>
	  	      canChange = 1;
 8003df0:	4b13      	ldr	r3, [pc, #76]	@ (8003e40 <main+0x3d8>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
	  	  break;
 8003df6:	e13b      	b.n	8004070 <main+0x608>
 8003df8:	20001eab 	.word	0x20001eab
 8003dfc:	20001e14 	.word	0x20001e14
 8003e00:	200004a0 	.word	0x200004a0
 8003e04:	20001e1c 	.word	0x20001e1c
 8003e08:	2000096c 	.word	0x2000096c
 8003e0c:	20001e24 	.word	0x20001e24
 8003e10:	20001080 	.word	0x20001080
 8003e14:	00004e20 	.word	0x00004e20
 8003e18:	200011c8 	.word	0x200011c8
 8003e1c:	414587dd 	.word	0x414587dd
 8003e20:	c2b233c5 	.word	0xc2b233c5
 8003e24:	200011d8 	.word	0x200011d8
 8003e28:	40014800 	.word	0x40014800
 8003e2c:	20000e80 	.word	0x20000e80
 8003e30:	20001e10 	.word	0x20001e10
 8003e34:	0800da50 	.word	0x0800da50
 8003e38:	20001e44 	.word	0x20001e44
 8003e3c:	20001f90 	.word	0x20001f90
 8003e40:	20000e81 	.word	0x20000e81
 8003e44:	0800da64 	.word	0x0800da64
 8003e48:	0800da6c 	.word	0x0800da6c
 8003e4c:	0800da78 	.word	0x0800da78
 8003e50:	0800da88 	.word	0x0800da88
	  case MusicTest:
		  //fillScreen(BLUE);

		  freq = freqs[(toneIndex++)%8];
 8003e54:	4b87      	ldr	r3, [pc, #540]	@ (8004074 <main+0x60c>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	b291      	uxth	r1, r2
 8003e5e:	4a85      	ldr	r2, [pc, #532]	@ (8004074 <main+0x60c>)
 8003e60:	8011      	strh	r1, [r2, #0]
 8003e62:	001a      	movs	r2, r3
 8003e64:	2307      	movs	r3, #7
 8003e66:	4013      	ands	r3, r2
 8003e68:	4a83      	ldr	r2, [pc, #524]	@ (8004078 <main+0x610>)
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	18d3      	adds	r3, r2, r3
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4982      	ldr	r1, [pc, #520]	@ (800407c <main+0x614>)
 8003e74:	600a      	str	r2, [r1, #0]
 8003e76:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8003e78:	4b80      	ldr	r3, [pc, #512]	@ (800407c <main+0x614>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	0010      	movs	r0, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	f7fe ff37 	bl	8002cf4 <__aeabi_d2f>
 8003e86:	1c03      	adds	r3, r0, #0
 8003e88:	1c19      	adds	r1, r3, #0
 8003e8a:	487d      	ldr	r0, [pc, #500]	@ (8004080 <main+0x618>)
 8003e8c:	f7fc fcee 	bl	800086c <__aeabi_fdiv>
 8003e90:	1c03      	adds	r3, r0, #0
 8003e92:	4c7c      	ldr	r4, [pc, #496]	@ (8004084 <main+0x61c>)
 8003e94:	1c18      	adds	r0, r3, #0
 8003e96:	f7fc fb97 	bl	80005c8 <__aeabi_f2uiz>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 8003e9e:	2380      	movs	r3, #128	@ 0x80
 8003ea0:	011a      	lsls	r2, r3, #4
 8003ea2:	23a0      	movs	r3, #160	@ 0xa0
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f002 f93f 	bl	800612c <HAL_GPIO_ReadPin>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10e      	bne.n	8003ed2 <main+0x46a>
			  currentMenu = Main;
 8003eb4:	4b74      	ldr	r3, [pc, #464]	@ (8004088 <main+0x620>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8003eba:	4b74      	ldr	r3, [pc, #464]	@ (800408c <main+0x624>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8003ec0:	4b73      	ldr	r3, [pc, #460]	@ (8004090 <main+0x628>)
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f004 ff2f 	bl	8008d28 <HAL_TIM_PWM_Stop>
			  fillScreen(BLACK);
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f7ff f9c2 	bl	8003254 <fillScreen>
		  }
		  else
			  canChange = 1;

		  break;
 8003ed0:	e0ce      	b.n	8004070 <main+0x608>
			  canChange = 1;
 8003ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800408c <main+0x624>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
		  break;
 8003ed8:	e0ca      	b.n	8004070 <main+0x608>
	  case ConnorDemo:
		  	  steps=0;
 8003eda:	4b6e      	ldr	r3, [pc, #440]	@ (8004094 <main+0x62c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 8003ee0:	4b6d      	ldr	r3, [pc, #436]	@ (8004098 <main+0x630>)
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	b291      	uxth	r1, r2
 8003eea:	4a6b      	ldr	r2, [pc, #428]	@ (8004098 <main+0x630>)
 8003eec:	8011      	strh	r1, [r2, #0]
 8003eee:	2103      	movs	r1, #3
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fc f9b3 	bl	800025c <__aeabi_uidivmod>
 8003ef6:	000b      	movs	r3, r1
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10f      	bne.n	8003f1e <main+0x4b6>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8003efe:	4b67      	ldr	r3, [pc, #412]	@ (800409c <main+0x634>)
 8003f00:	2102      	movs	r1, #2
 8003f02:	0018      	movs	r0, r3
 8003f04:	f002 f912 	bl	800612c <HAL_GPIO_ReadPin>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d104      	bne.n	8003f18 <main+0x4b0>
		  		  		  fillScreen(WHITE);
 8003f0e:	4b64      	ldr	r3, [pc, #400]	@ (80040a0 <main+0x638>)
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff f99f 	bl	8003254 <fillScreen>
 8003f16:	e002      	b.n	8003f1e <main+0x4b6>
		  		  	  else
		  		  		  fillScreen(BLACK);
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7ff f99b 	bl	8003254 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8003f1e:	2380      	movs	r3, #128	@ 0x80
 8003f20:	011a      	lsls	r2, r3, #4
 8003f22:	23a0      	movs	r3, #160	@ 0xa0
 8003f24:	05db      	lsls	r3, r3, #23
 8003f26:	0011      	movs	r1, r2
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f002 f8ff 	bl	800612c <HAL_GPIO_ReadPin>
 8003f2e:	0003      	movs	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <main+0x4da>
		  		  petXPos-=5;
 8003f34:	4b5b      	ldr	r3, [pc, #364]	@ (80040a4 <main+0x63c>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b05      	subs	r3, #5
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	4b59      	ldr	r3, [pc, #356]	@ (80040a4 <main+0x63c>)
 8003f40:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8003f42:	2380      	movs	r3, #128	@ 0x80
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	23a0      	movs	r3, #160	@ 0xa0
 8003f48:	05db      	lsls	r3, r3, #23
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f002 f8ed 	bl	800612c <HAL_GPIO_ReadPin>
 8003f52:	0003      	movs	r3, r0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <main+0x4fe>
		  		  petXPos+=5;
 8003f58:	4b52      	ldr	r3, [pc, #328]	@ (80040a4 <main+0x63c>)
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3305      	adds	r3, #5
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	4b50      	ldr	r3, [pc, #320]	@ (80040a4 <main+0x63c>)
 8003f64:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 8003f66:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <main+0x63c>)
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d802      	bhi.n	8003f76 <main+0x50e>
 8003f70:	4b4c      	ldr	r3, [pc, #304]	@ (80040a4 <main+0x63c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 8003f76:	4b4b      	ldr	r3, [pc, #300]	@ (80040a4 <main+0x63c>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b3c      	cmp	r3, #60	@ 0x3c
 8003f7e:	d902      	bls.n	8003f86 <main+0x51e>
 8003f80:	4b48      	ldr	r3, [pc, #288]	@ (80040a4 <main+0x63c>)
 8003f82:	223c      	movs	r2, #60	@ 0x3c
 8003f84:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 8003f86:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <main+0x60c>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	b291      	uxth	r1, r2
 8003f90:	4a38      	ldr	r2, [pc, #224]	@ (8004074 <main+0x60c>)
 8003f92:	8011      	strh	r1, [r2, #0]
 8003f94:	001a      	movs	r2, r3
 8003f96:	2307      	movs	r3, #7
 8003f98:	4013      	ands	r3, r2
 8003f9a:	4a37      	ldr	r2, [pc, #220]	@ (8004078 <main+0x610>)
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	18d3      	adds	r3, r2, r3
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4935      	ldr	r1, [pc, #212]	@ (800407c <main+0x614>)
 8003fa6:	600a      	str	r2, [r1, #0]
 8003fa8:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8003faa:	4b34      	ldr	r3, [pc, #208]	@ (800407c <main+0x614>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	0010      	movs	r0, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	f7fe fe9e 	bl	8002cf4 <__aeabi_d2f>
 8003fb8:	1c03      	adds	r3, r0, #0
 8003fba:	1c19      	adds	r1, r3, #0
 8003fbc:	4830      	ldr	r0, [pc, #192]	@ (8004080 <main+0x618>)
 8003fbe:	f7fc fc55 	bl	800086c <__aeabi_fdiv>
 8003fc2:	1c03      	adds	r3, r0, #0
 8003fc4:	4c2f      	ldr	r4, [pc, #188]	@ (8004084 <main+0x61c>)
 8003fc6:	1c18      	adds	r0, r3, #0
 8003fc8:	f7fc fafe 	bl	80005c8 <__aeabi_f2uiz>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 8003fd0:	4b34      	ldr	r3, [pc, #208]	@ (80040a4 <main+0x63c>)
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4934      	ldr	r1, [pc, #208]	@ (80040a8 <main+0x640>)
 8003fd8:	4834      	ldr	r0, [pc, #208]	@ (80040ac <main+0x644>)
 8003fda:	2394      	movs	r3, #148	@ 0x94
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	9302      	str	r3, [sp, #8]
 8003fe0:	2340      	movs	r3, #64	@ 0x40
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	2340      	movs	r3, #64	@ 0x40
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2328      	movs	r3, #40	@ 0x28
 8003fea:	f7ff f9a7 	bl	800333c <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8003fee:	4b30      	ldr	r3, [pc, #192]	@ (80040b0 <main+0x648>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80040b4 <main+0x64c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	001c      	movs	r4, r3
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80040b8 <main+0x650>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	492f      	ldr	r1, [pc, #188]	@ (80040bc <main+0x654>)
 8004000:	482f      	ldr	r0, [pc, #188]	@ (80040c0 <main+0x658>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0023      	movs	r3, r4
 8004006:	f007 fba3 	bl	800b750 <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 800400a:	4a2d      	ldr	r2, [pc, #180]	@ (80040c0 <main+0x658>)
 800400c:	2301      	movs	r3, #1
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	2301      	movs	r3, #1
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <main+0x65c>)
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2300      	movs	r3, #0
 800401a:	210a      	movs	r1, #10
 800401c:	2000      	movs	r0, #0
 800401e:	f7fe ffd5 	bl	8002fcc <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8004022:	4b1c      	ldr	r3, [pc, #112]	@ (8004094 <main+0x62c>)
 8004024:	2201      	movs	r2, #1
 8004026:	0019      	movs	r1, r3
 8004028:	2015      	movs	r0, #21
 800402a:	f000 fafd 	bl	8004628 <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 800402e:	4b19      	ldr	r3, [pc, #100]	@ (8004094 <main+0x62c>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	001a      	movs	r2, r3
 8004034:	4924      	ldr	r1, [pc, #144]	@ (80040c8 <main+0x660>)
 8004036:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <main+0x658>)
 8004038:	0018      	movs	r0, r3
 800403a:	f007 fb89 	bl	800b750 <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 800403e:	4a20      	ldr	r2, [pc, #128]	@ (80040c0 <main+0x658>)
 8004040:	2301      	movs	r3, #1
 8004042:	9302      	str	r3, [sp, #8]
 8004044:	2301      	movs	r3, #1
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	4b1e      	ldr	r3, [pc, #120]	@ (80040c4 <main+0x65c>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	2114      	movs	r1, #20
 8004050:	2000      	movs	r0, #0
 8004052:	f7fe ffbb 	bl	8002fcc <drawString>

		  	  	  //only run this code every few seconds

		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 8004056:	4a1d      	ldr	r2, [pc, #116]	@ (80040cc <main+0x664>)
 8004058:	2301      	movs	r3, #1
 800405a:	9302      	str	r3, [sp, #8]
 800405c:	2301      	movs	r3, #1
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	4b18      	ldr	r3, [pc, #96]	@ (80040c4 <main+0x65c>)
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	2146      	movs	r1, #70	@ 0x46
 8004068:	2046      	movs	r0, #70	@ 0x46
 800406a:	f7fe ffaf 	bl	8002fcc <drawString>

		  break;
 800406e:	46c0      	nop			@ (mov r8, r8)
	  ReceiveData();
 8004070:	e59a      	b.n	8003ba8 <main+0x140>
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	20001e40 	.word	0x20001e40
 8004078:	20000e40 	.word	0x20000e40
 800407c:	20001e38 	.word	0x20001e38
 8004080:	4970f780 	.word	0x4970f780
 8004084:	40014800 	.word	0x40014800
 8004088:	20000e80 	.word	0x20000e80
 800408c:	20000e81 	.word	0x20000e81
 8004090:	20001f90 	.word	0x20001f90
 8004094:	20001eab 	.word	0x20001eab
 8004098:	200011d2 	.word	0x200011d2
 800409c:	50000800 	.word	0x50000800
 80040a0:	0000ffff 	.word	0x0000ffff
 80040a4:	200011d4 	.word	0x200011d4
 80040a8:	20000e30 	.word	0x20000e30
 80040ac:	20000000 	.word	0x20000000
 80040b0:	20001ea8 	.word	0x20001ea8
 80040b4:	20001ea9 	.word	0x20001ea9
 80040b8:	20001eaa 	.word	0x20001eaa
 80040bc:	0800da98 	.word	0x0800da98
 80040c0:	20001e44 	.word	0x20001e44
 80040c4:	ffffe007 	.word	0xffffe007
 80040c8:	0800daac 	.word	0x0800daac
 80040cc:	200011d8 	.word	0x200011d8

080040d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b095      	sub	sp, #84	@ 0x54
 80040d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d6:	2414      	movs	r4, #20
 80040d8:	193b      	adds	r3, r7, r4
 80040da:	0018      	movs	r0, r3
 80040dc:	233c      	movs	r3, #60	@ 0x3c
 80040de:	001a      	movs	r2, r3
 80040e0:	2100      	movs	r1, #0
 80040e2:	f007 fba1 	bl	800b828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	0018      	movs	r0, r3
 80040ea:	2310      	movs	r3, #16
 80040ec:	001a      	movs	r2, r3
 80040ee:	2100      	movs	r1, #0
 80040f0:	f007 fb9a 	bl	800b828 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	0018      	movs	r0, r3
 80040fa:	f002 fe95 	bl	8006e28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80040fe:	193b      	adds	r3, r7, r4
 8004100:	220a      	movs	r2, #10
 8004102:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004104:	193b      	adds	r3, r7, r4
 8004106:	2280      	movs	r2, #128	@ 0x80
 8004108:	0052      	lsls	r2, r2, #1
 800410a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800410c:	0021      	movs	r1, r4
 800410e:	187b      	adds	r3, r7, r1
 8004110:	2200      	movs	r2, #0
 8004112:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004114:	187b      	adds	r3, r7, r1
 8004116:	2240      	movs	r2, #64	@ 0x40
 8004118:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800411a:	187b      	adds	r3, r7, r1
 800411c:	2201      	movs	r2, #1
 800411e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004120:	187b      	adds	r3, r7, r1
 8004122:	2202      	movs	r2, #2
 8004124:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004126:	187b      	adds	r3, r7, r1
 8004128:	2202      	movs	r2, #2
 800412a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800412c:	187b      	adds	r3, r7, r1
 800412e:	2200      	movs	r2, #0
 8004130:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004132:	187b      	adds	r3, r7, r1
 8004134:	2208      	movs	r2, #8
 8004136:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004138:	187b      	adds	r3, r7, r1
 800413a:	2280      	movs	r2, #128	@ 0x80
 800413c:	0292      	lsls	r2, r2, #10
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004140:	187b      	adds	r3, r7, r1
 8004142:	2280      	movs	r2, #128	@ 0x80
 8004144:	0492      	lsls	r2, r2, #18
 8004146:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004148:	187b      	adds	r3, r7, r1
 800414a:	2280      	movs	r2, #128	@ 0x80
 800414c:	0592      	lsls	r2, r2, #22
 800414e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004150:	187b      	adds	r3, r7, r1
 8004152:	0018      	movs	r0, r3
 8004154:	f002 feb4 	bl	8006ec0 <HAL_RCC_OscConfig>
 8004158:	1e03      	subs	r3, r0, #0
 800415a:	d001      	beq.n	8004160 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800415c:	f000 fca0 	bl	8004aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	2207      	movs	r2, #7
 8004164:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	2202      	movs	r2, #2
 800416a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	2200      	movs	r2, #0
 8004176:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	2102      	movs	r1, #2
 800417c:	0018      	movs	r0, r3
 800417e:	f003 f9ff 	bl	8007580 <HAL_RCC_ClockConfig>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d001      	beq.n	800418a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004186:	f000 fc8b 	bl	8004aa0 <Error_Handler>
  }
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b015      	add	sp, #84	@ 0x54
 8004190:	bd90      	pop	{r4, r7, pc}
	...

08004194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <MX_I2C1_Init+0x74>)
 800419a:	4a1c      	ldr	r2, [pc, #112]	@ (800420c <MX_I2C1_Init+0x78>)
 800419c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800419e:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004210 <MX_I2C1_Init+0x7c>)
 80041a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041a4:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041aa:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041b0:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041b6:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041bc:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041be:	2200      	movs	r2, #0
 80041c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041c2:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041d0:	0018      	movs	r0, r3
 80041d2:	f001 ffe5 	bl	80061a0 <HAL_I2C_Init>
 80041d6:	1e03      	subs	r3, r0, #0
 80041d8:	d001      	beq.n	80041de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041da:	f000 fc61 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041de:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041e0:	2100      	movs	r1, #0
 80041e2:	0018      	movs	r0, r3
 80041e4:	f002 fd88 	bl	8006cf8 <HAL_I2CEx_ConfigAnalogFilter>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80041ec:	f000 fc58 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <MX_I2C1_Init+0x74>)
 80041f2:	2100      	movs	r1, #0
 80041f4:	0018      	movs	r0, r3
 80041f6:	f002 fdcb 	bl	8006d90 <HAL_I2CEx_ConfigDigitalFilter>
 80041fa:	1e03      	subs	r3, r0, #0
 80041fc:	d001      	beq.n	8004202 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80041fe:	f000 fc4f 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20001eac 	.word	0x20001eac
 800420c:	40005400 	.word	0x40005400
 8004210:	10b17db5 	.word	0x10b17db5

08004214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004218:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <MX_SPI1_Init+0x78>)
 800421a:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <MX_SPI1_Init+0x7c>)
 800421c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <MX_SPI1_Init+0x78>)
 8004220:	2282      	movs	r2, #130	@ 0x82
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004226:	4b19      	ldr	r3, [pc, #100]	@ (800428c <MX_SPI1_Init+0x78>)
 8004228:	2280      	movs	r2, #128	@ 0x80
 800422a:	0212      	lsls	r2, r2, #8
 800422c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <MX_SPI1_Init+0x78>)
 8004230:	22e0      	movs	r2, #224	@ 0xe0
 8004232:	00d2      	lsls	r2, r2, #3
 8004234:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004236:	4b15      	ldr	r3, [pc, #84]	@ (800428c <MX_SPI1_Init+0x78>)
 8004238:	2200      	movs	r2, #0
 800423a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800423c:	4b13      	ldr	r3, [pc, #76]	@ (800428c <MX_SPI1_Init+0x78>)
 800423e:	2200      	movs	r2, #0
 8004240:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004242:	4b12      	ldr	r3, [pc, #72]	@ (800428c <MX_SPI1_Init+0x78>)
 8004244:	2280      	movs	r2, #128	@ 0x80
 8004246:	0092      	lsls	r2, r2, #2
 8004248:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800424a:	4b10      	ldr	r3, [pc, #64]	@ (800428c <MX_SPI1_Init+0x78>)
 800424c:	2220      	movs	r2, #32
 800424e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <MX_SPI1_Init+0x78>)
 8004252:	2200      	movs	r2, #0
 8004254:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <MX_SPI1_Init+0x78>)
 8004258:	2200      	movs	r2, #0
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425c:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <MX_SPI1_Init+0x78>)
 800425e:	2200      	movs	r2, #0
 8004260:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <MX_SPI1_Init+0x78>)
 8004264:	2207      	movs	r2, #7
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004268:	4b08      	ldr	r3, [pc, #32]	@ (800428c <MX_SPI1_Init+0x78>)
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800426e:	4b07      	ldr	r3, [pc, #28]	@ (800428c <MX_SPI1_Init+0x78>)
 8004270:	2208      	movs	r2, #8
 8004272:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <MX_SPI1_Init+0x78>)
 8004276:	0018      	movs	r0, r3
 8004278:	f004 f820 	bl	80082bc <HAL_SPI_Init>
 800427c:	1e03      	subs	r3, r0, #0
 800427e:	d001      	beq.n	8004284 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004280:	f000 fc0e 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004284:	46c0      	nop			@ (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	20001f2c 	.word	0x20001f2c
 8004290:	40013000 	.word	0x40013000

08004294 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b094      	sub	sp, #80	@ 0x50
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800429a:	2334      	movs	r3, #52	@ 0x34
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	0018      	movs	r0, r3
 80042a0:	231c      	movs	r3, #28
 80042a2:	001a      	movs	r2, r3
 80042a4:	2100      	movs	r1, #0
 80042a6:	f007 fabf 	bl	800b828 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042aa:	003b      	movs	r3, r7
 80042ac:	0018      	movs	r0, r3
 80042ae:	2334      	movs	r3, #52	@ 0x34
 80042b0:	001a      	movs	r2, r3
 80042b2:	2100      	movs	r1, #0
 80042b4:	f007 fab8 	bl	800b828 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80042b8:	4b37      	ldr	r3, [pc, #220]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042ba:	4a38      	ldr	r2, [pc, #224]	@ (800439c <MX_TIM17_Init+0x108>)
 80042bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80042be:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c4:	4b34      	ldr	r3, [pc, #208]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80042ca:	4b33      	ldr	r3, [pc, #204]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042cc:	4a34      	ldr	r2, [pc, #208]	@ (80043a0 <MX_TIM17_Init+0x10c>)
 80042ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042d0:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80042d6:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042d8:	2200      	movs	r2, #0
 80042da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042de:	2200      	movs	r2, #0
 80042e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80042e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042e4:	0018      	movs	r0, r3
 80042e6:	f004 fb77 	bl	80089d8 <HAL_TIM_Base_Init>
 80042ea:	1e03      	subs	r3, r0, #0
 80042ec:	d001      	beq.n	80042f2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80042ee:	f000 fbd7 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80042f2:	4b29      	ldr	r3, [pc, #164]	@ (8004398 <MX_TIM17_Init+0x104>)
 80042f4:	0018      	movs	r0, r3
 80042f6:	f004 fbc7 	bl	8008a88 <HAL_TIM_PWM_Init>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80042fe:	f000 fbcf 	bl	8004aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004302:	2134      	movs	r1, #52	@ 0x34
 8004304:	187b      	adds	r3, r7, r1
 8004306:	2260      	movs	r2, #96	@ 0x60
 8004308:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800430a:	187b      	adds	r3, r7, r1
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004310:	187b      	adds	r3, r7, r1
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004316:	187b      	adds	r3, r7, r1
 8004318:	2200      	movs	r2, #0
 800431a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800431c:	187b      	adds	r3, r7, r1
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004322:	187b      	adds	r3, r7, r1
 8004324:	2200      	movs	r2, #0
 8004326:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004328:	187b      	adds	r3, r7, r1
 800432a:	2200      	movs	r2, #0
 800432c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800432e:	1879      	adds	r1, r7, r1
 8004330:	4b19      	ldr	r3, [pc, #100]	@ (8004398 <MX_TIM17_Init+0x104>)
 8004332:	2200      	movs	r2, #0
 8004334:	0018      	movs	r0, r3
 8004336:	f004 fd83 	bl	8008e40 <HAL_TIM_PWM_ConfigChannel>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d001      	beq.n	8004342 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800433e:	f000 fbaf 	bl	8004aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004342:	003b      	movs	r3, r7
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004348:	003b      	movs	r3, r7
 800434a:	2200      	movs	r2, #0
 800434c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800434e:	003b      	movs	r3, r7
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004354:	003b      	movs	r3, r7
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800435a:	003b      	movs	r3, r7
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004360:	003b      	movs	r3, r7
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	0192      	lsls	r2, r2, #6
 8004366:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004368:	003b      	movs	r3, r7
 800436a:	2200      	movs	r2, #0
 800436c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800436e:	003b      	movs	r3, r7
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004374:	003a      	movs	r2, r7
 8004376:	4b08      	ldr	r3, [pc, #32]	@ (8004398 <MX_TIM17_Init+0x104>)
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f005 f9e0 	bl	8009740 <HAL_TIMEx_ConfigBreakDeadTime>
 8004380:	1e03      	subs	r3, r0, #0
 8004382:	d001      	beq.n	8004388 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8004384:	f000 fb8c 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004388:	4b03      	ldr	r3, [pc, #12]	@ (8004398 <MX_TIM17_Init+0x104>)
 800438a:	0018      	movs	r0, r3
 800438c:	f000 fca6 	bl	8004cdc <HAL_TIM_MspPostInit>

}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b014      	add	sp, #80	@ 0x50
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20001f90 	.word	0x20001f90
 800439c:	40014800 	.word	0x40014800
 80043a0:	0000ffff 	.word	0x0000ffff

080043a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043a8:	4b23      	ldr	r3, [pc, #140]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043aa:	4a24      	ldr	r2, [pc, #144]	@ (800443c <MX_USART1_UART_Init+0x98>)
 80043ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80043ae:	4b22      	ldr	r3, [pc, #136]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043b0:	2296      	movs	r2, #150	@ 0x96
 80043b2:	0192      	lsls	r2, r2, #6
 80043b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043b6:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043ca:	220c      	movs	r2, #12
 80043cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d4:	4b18      	ldr	r3, [pc, #96]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043da:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043dc:	2200      	movs	r2, #0
 80043de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043e0:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043e6:	4b14      	ldr	r3, [pc, #80]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043ee:	0018      	movs	r0, r3
 80043f0:	f005 fa42 	bl	8009878 <HAL_UART_Init>
 80043f4:	1e03      	subs	r3, r0, #0
 80043f6:	d001      	beq.n	80043fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80043f8:	f000 fb52 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 80043fe:	2100      	movs	r1, #0
 8004400:	0018      	movs	r0, r3
 8004402:	f006 f939 	bl	800a678 <HAL_UARTEx_SetTxFifoThreshold>
 8004406:	1e03      	subs	r3, r0, #0
 8004408:	d001      	beq.n	800440e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800440a:	f000 fb49 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 8004410:	2100      	movs	r1, #0
 8004412:	0018      	movs	r0, r3
 8004414:	f006 f970 	bl	800a6f8 <HAL_UARTEx_SetRxFifoThreshold>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d001      	beq.n	8004420 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800441c:	f000 fb40 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <MX_USART1_UART_Init+0x94>)
 8004422:	0018      	movs	r0, r3
 8004424:	f006 f8ee 	bl	800a604 <HAL_UARTEx_DisableFifoMode>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d001      	beq.n	8004430 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800442c:	f000 fb38 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004430:	46c0      	nop			@ (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	20001fdc 	.word	0x20001fdc
 800443c:	40013800 	.word	0x40013800

08004440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004444:	4b23      	ldr	r3, [pc, #140]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 8004446:	4a24      	ldr	r2, [pc, #144]	@ (80044d8 <MX_USART2_UART_Init+0x98>)
 8004448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800444a:	4b22      	ldr	r3, [pc, #136]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 800444c:	22e1      	movs	r2, #225	@ 0xe1
 800444e:	0252      	lsls	r2, r2, #9
 8004450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004452:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 8004454:	2200      	movs	r2, #0
 8004456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004458:	4b1e      	ldr	r3, [pc, #120]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 800445a:	2200      	movs	r2, #0
 800445c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800445e:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 8004460:	2200      	movs	r2, #0
 8004462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 8004466:	220c      	movs	r2, #12
 8004468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800446a:	4b1a      	ldr	r3, [pc, #104]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 800446c:	2200      	movs	r2, #0
 800446e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004470:	4b18      	ldr	r3, [pc, #96]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 8004472:	2200      	movs	r2, #0
 8004474:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004476:	4b17      	ldr	r3, [pc, #92]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 8004478:	2200      	movs	r2, #0
 800447a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800447c:	4b15      	ldr	r3, [pc, #84]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 800447e:	2200      	movs	r2, #0
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004482:	4b14      	ldr	r3, [pc, #80]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 8004484:	2200      	movs	r2, #0
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004488:	4b12      	ldr	r3, [pc, #72]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 800448a:	0018      	movs	r0, r3
 800448c:	f005 f9f4 	bl	8009878 <HAL_UART_Init>
 8004490:	1e03      	subs	r3, r0, #0
 8004492:	d001      	beq.n	8004498 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004494:	f000 fb04 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004498:	4b0e      	ldr	r3, [pc, #56]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 800449a:	2100      	movs	r1, #0
 800449c:	0018      	movs	r0, r3
 800449e:	f006 f8eb 	bl	800a678 <HAL_UARTEx_SetTxFifoThreshold>
 80044a2:	1e03      	subs	r3, r0, #0
 80044a4:	d001      	beq.n	80044aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80044a6:	f000 fafb 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80044aa:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 80044ac:	2100      	movs	r1, #0
 80044ae:	0018      	movs	r0, r3
 80044b0:	f006 f922 	bl	800a6f8 <HAL_UARTEx_SetRxFifoThreshold>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d001      	beq.n	80044bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80044b8:	f000 faf2 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <MX_USART2_UART_Init+0x94>)
 80044be:	0018      	movs	r0, r3
 80044c0:	f006 f8a0 	bl	800a604 <HAL_UARTEx_DisableFifoMode>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d001      	beq.n	80044cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80044c8:	f000 faea 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	20002070 	.word	0x20002070
 80044d8:	40004400 	.word	0x40004400

080044dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b089      	sub	sp, #36	@ 0x24
 80044e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e2:	240c      	movs	r4, #12
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	0018      	movs	r0, r3
 80044e8:	2314      	movs	r3, #20
 80044ea:	001a      	movs	r2, r3
 80044ec:	2100      	movs	r1, #0
 80044ee:	f007 f99b 	bl	800b828 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044f2:	4b31      	ldr	r3, [pc, #196]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 80044f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044f6:	4b30      	ldr	r3, [pc, #192]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 80044f8:	2104      	movs	r1, #4
 80044fa:	430a      	orrs	r2, r1
 80044fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80044fe:	4b2e      	ldr	r3, [pc, #184]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 8004500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004502:	2204      	movs	r2, #4
 8004504:	4013      	ands	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	4b2b      	ldr	r3, [pc, #172]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 800450c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800450e:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 8004510:	2101      	movs	r1, #1
 8004512:	430a      	orrs	r2, r1
 8004514:	635a      	str	r2, [r3, #52]	@ 0x34
 8004516:	4b28      	ldr	r3, [pc, #160]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 8004518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451a:	2201      	movs	r2, #1
 800451c:	4013      	ands	r3, r2
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004522:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 8004524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004526:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 8004528:	2108      	movs	r1, #8
 800452a:	430a      	orrs	r2, r1
 800452c:	635a      	str	r2, [r3, #52]	@ 0x34
 800452e:	4b22      	ldr	r3, [pc, #136]	@ (80045b8 <MX_GPIO_Init+0xdc>)
 8004530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004532:	2208      	movs	r2, #8
 8004534:	4013      	ands	r3, r2
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800453a:	4920      	ldr	r1, [pc, #128]	@ (80045bc <MX_GPIO_Init+0xe0>)
 800453c:	23a0      	movs	r3, #160	@ 0xa0
 800453e:	05db      	lsls	r3, r3, #23
 8004540:	2200      	movs	r2, #0
 8004542:	0018      	movs	r0, r3
 8004544:	f001 fe0f 	bl	8006166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004548:	193b      	adds	r3, r7, r4
 800454a:	2202      	movs	r2, #2
 800454c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800454e:	193b      	adds	r3, r7, r4
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	193b      	adds	r3, r7, r4
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800455a:	193b      	adds	r3, r7, r4
 800455c:	4a18      	ldr	r2, [pc, #96]	@ (80045c0 <MX_GPIO_Init+0xe4>)
 800455e:	0019      	movs	r1, r3
 8004560:	0010      	movs	r0, r2
 8004562:	f001 fc77 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8004566:	193b      	adds	r3, r7, r4
 8004568:	4a14      	ldr	r2, [pc, #80]	@ (80045bc <MX_GPIO_Init+0xe0>)
 800456a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800456c:	193b      	adds	r3, r7, r4
 800456e:	2201      	movs	r2, #1
 8004570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004572:	193b      	adds	r3, r7, r4
 8004574:	2200      	movs	r2, #0
 8004576:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004578:	193b      	adds	r3, r7, r4
 800457a:	2200      	movs	r2, #0
 800457c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457e:	193a      	adds	r2, r7, r4
 8004580:	23a0      	movs	r3, #160	@ 0xa0
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	0011      	movs	r1, r2
 8004586:	0018      	movs	r0, r3
 8004588:	f001 fc64 	bl	8005e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800458c:	0021      	movs	r1, r4
 800458e:	187b      	adds	r3, r7, r1
 8004590:	22c0      	movs	r2, #192	@ 0xc0
 8004592:	0152      	lsls	r2, r2, #5
 8004594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004596:	187b      	adds	r3, r7, r1
 8004598:	2200      	movs	r2, #0
 800459a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	187b      	adds	r3, r7, r1
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a2:	187a      	adds	r2, r7, r1
 80045a4:	23a0      	movs	r3, #160	@ 0xa0
 80045a6:	05db      	lsls	r3, r3, #23
 80045a8:	0011      	movs	r1, r2
 80045aa:	0018      	movs	r0, r3
 80045ac:	f001 fc52 	bl	8005e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80045b0:	46c0      	nop			@ (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b009      	add	sp, #36	@ 0x24
 80045b6:	bd90      	pop	{r4, r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	00008030 	.word	0x00008030
 80045c0:	50000800 	.word	0x50000800

080045c4 <Animate>:

/* USER CODE BEGIN 4 */
//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af04      	add	r7, sp, #16
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	++currentFrame;
 80045ce:	4b14      	ldr	r3, [pc, #80]	@ (8004620 <Animate+0x5c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	4b12      	ldr	r3, [pc, #72]	@ (8004620 <Animate+0x5c>)
 80045d6:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 80045d8:	4b11      	ldr	r3, [pc, #68]	@ (8004620 <Animate+0x5c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d202      	bcs.n	80045e8 <Animate+0x24>
	{
		currentFrame = 0;
 80045e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004620 <Animate+0x5c>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 40, 40, 64, 64, animation[currentFrame].Size);
 80045e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <Animate+0x5c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	18d3      	adds	r3, r2, r3
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004620 <Animate+0x5c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	b29b      	uxth	r3, r3
 8004602:	4908      	ldr	r1, [pc, #32]	@ (8004624 <Animate+0x60>)
 8004604:	9302      	str	r3, [sp, #8]
 8004606:	2340      	movs	r3, #64	@ 0x40
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	2340      	movs	r3, #64	@ 0x40
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	2328      	movs	r3, #40	@ 0x28
 8004610:	2228      	movs	r2, #40	@ 0x28
 8004612:	f7fe fe93 	bl	800333c <drawImage>
	return;
 8004616:	46c0      	nop			@ (mov r8, r8)
}
 8004618:	46bd      	mov	sp, r7
 800461a:	b002      	add	sp, #8
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			@ (mov r8, r8)
 8004620:	20001e34 	.word	0x20001e34
 8004624:	20000e30 	.word	0x20000e30

08004628 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af02      	add	r7, sp, #8
 800462e:	6039      	str	r1, [r7, #0]
 8004630:	0011      	movs	r1, r2
 8004632:	1dfb      	adds	r3, r7, #7
 8004634:	1c02      	adds	r2, r0, #0
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	1dbb      	adds	r3, r7, #6
 800463a:	1c0a      	adds	r2, r1, #0
 800463c:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 800463e:	1dfa      	adds	r2, r7, #7
 8004640:	4811      	ldr	r0, [pc, #68]	@ (8004688 <_ADXL343_ReadReg8+0x60>)
 8004642:	23fa      	movs	r3, #250	@ 0xfa
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2301      	movs	r3, #1
 800464a:	2128      	movs	r1, #40	@ 0x28
 800464c:	f001 fe4e 	bl	80062ec <HAL_I2C_Master_Transmit>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d002      	beq.n	800465a <_ADXL343_ReadReg8+0x32>
      return -1;
 8004654:	2301      	movs	r3, #1
 8004656:	425b      	negs	r3, r3
 8004658:	e011      	b.n	800467e <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 800465a:	1dbb      	adds	r3, r7, #6
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b299      	uxth	r1, r3
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	4809      	ldr	r0, [pc, #36]	@ (8004688 <_ADXL343_ReadReg8+0x60>)
 8004664:	23fa      	movs	r3, #250	@ 0xfa
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	000b      	movs	r3, r1
 800466c:	2128      	movs	r1, #40	@ 0x28
 800466e:	f001 ff67 	bl	8006540 <HAL_I2C_Master_Receive>
 8004672:	1e03      	subs	r3, r0, #0
 8004674:	d002      	beq.n	800467c <_ADXL343_ReadReg8+0x54>
    return -2;
 8004676:	2302      	movs	r3, #2
 8004678:	425b      	negs	r3, r3
 800467a:	e000      	b.n	800467e <_ADXL343_ReadReg8+0x56>

  return 0;
 800467c:	2300      	movs	r3, #0
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b002      	add	sp, #8
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	20001eac 	.word	0x20001eac

0800468c <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af02      	add	r7, sp, #8
 8004692:	0002      	movs	r2, r0
 8004694:	1dfb      	adds	r3, r7, #7
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	1dbb      	adds	r3, r7, #6
 800469a:	1c0a      	adds	r2, r1, #0
 800469c:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 800469e:	210c      	movs	r1, #12
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	1dfa      	adds	r2, r7, #7
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	1dba      	adds	r2, r7, #6
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 80046b0:	187a      	adds	r2, r7, r1
 80046b2:	4808      	ldr	r0, [pc, #32]	@ (80046d4 <_ADXL343_WriteReg8+0x48>)
 80046b4:	2364      	movs	r3, #100	@ 0x64
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2302      	movs	r3, #2
 80046ba:	2128      	movs	r1, #40	@ 0x28
 80046bc:	f001 fe16 	bl	80062ec <HAL_I2C_Master_Transmit>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d002      	beq.n	80046ca <_ADXL343_WriteReg8+0x3e>
      return -1;
 80046c4:	2301      	movs	r3, #1
 80046c6:	425b      	negs	r3, r3
 80046c8:	e000      	b.n	80046cc <_ADXL343_WriteReg8+0x40>

  return 0;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20001eac 	.word	0x20001eac

080046d8 <ReceiveData>:
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);

	}
}
void ReceiveData()
{
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	4cbd      	ldr	r4, [pc, #756]	@ (80049d0 <ReceiveData+0x2f8>)
 80046dc:	44a5      	add	sp, r4
 80046de:	af00      	add	r7, sp, #0
int rI=0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	4abc      	ldr	r2, [pc, #752]	@ (80049d4 <ReceiveData+0x2fc>)
 80046e4:	18ba      	adds	r2, r7, r2
 80046e6:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 80046e8:	e15e      	b.n	80049a8 <ReceiveData+0x2d0>
{
	if(syncBuffer[rI]&&syncBuffer[rI]=='\r')
 80046ea:	4abb      	ldr	r2, [pc, #748]	@ (80049d8 <ReceiveData+0x300>)
 80046ec:	49b9      	ldr	r1, [pc, #740]	@ (80049d4 <ReceiveData+0x2fc>)
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	18d3      	adds	r3, r2, r3
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d100      	bne.n	80046fc <ReceiveData+0x24>
 80046fa:	e14f      	b.n	800499c <ReceiveData+0x2c4>
 80046fc:	4ab6      	ldr	r2, [pc, #728]	@ (80049d8 <ReceiveData+0x300>)
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	18d3      	adds	r3, r2, r3
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b0d      	cmp	r3, #13
 8004708:	d000      	beq.n	800470c <ReceiveData+0x34>
 800470a:	e147      	b.n	800499c <ReceiveData+0x2c4>
	{
	 enum { MAX_FIELDS = 255 };
	 json_t pool[ MAX_FIELDS ];
	 json_t const* parent = json_create(syncBuffer, pool, MAX_FIELDS);
 800470c:	0039      	movs	r1, r7
 800470e:	4bb2      	ldr	r3, [pc, #712]	@ (80049d8 <ReceiveData+0x300>)
 8004710:	22ff      	movs	r2, #255	@ 0xff
 8004712:	0018      	movs	r0, r3
 8004714:	f000 fd50 	bl	80051b8 <json_create>
 8004718:	0003      	movs	r3, r0
 800471a:	49b0      	ldr	r1, [pc, #704]	@ (80049dc <ReceiveData+0x304>)
 800471c:	187a      	adds	r2, r7, r1
 800471e:	6013      	str	r3, [r2, #0]
	 if(parent)
 8004720:	187b      	adds	r3, r7, r1
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d100      	bne.n	800472a <ReceiveData+0x52>
 8004728:	e119      	b.n	800495e <ReceiveData+0x286>
	 {
		 int locI=0;
 800472a:	2300      	movs	r3, #0
 800472c:	4aac      	ldr	r2, [pc, #688]	@ (80049e0 <ReceiveData+0x308>)
 800472e:	18ba      	adds	r2, r7, r2
 8004730:	6013      	str	r3, [r2, #0]
		 struct latLon tempLoc;
		 char const* uidRxStr = json_getPropertyValue(parent, "uid");
 8004732:	4aac      	ldr	r2, [pc, #688]	@ (80049e4 <ReceiveData+0x30c>)
 8004734:	187b      	adds	r3, r7, r1
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0011      	movs	r1, r2
 800473a:	0018      	movs	r0, r3
 800473c:	f000 fcd8 	bl	80050f0 <json_getPropertyValue>
 8004740:	0003      	movs	r3, r0
 8004742:	4aa9      	ldr	r2, [pc, #676]	@ (80049e8 <ReceiveData+0x310>)
 8004744:	18ba      	adds	r2, r7, r2
 8004746:	6013      	str	r3, [r2, #0]
		 //HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
		 for(int strI =0; strI<strlen(uidRxStr); strI++) game.uid[strI]=uidRxStr[strI];
 8004748:	2300      	movs	r3, #0
 800474a:	4aa8      	ldr	r2, [pc, #672]	@ (80049ec <ReceiveData+0x314>)
 800474c:	18ba      	adds	r2, r7, r2
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e015      	b.n	800477e <ReceiveData+0xa6>
 8004752:	4ca6      	ldr	r4, [pc, #664]	@ (80049ec <ReceiveData+0x314>)
 8004754:	193b      	adds	r3, r7, r4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4aa3      	ldr	r2, [pc, #652]	@ (80049e8 <ReceiveData+0x310>)
 800475a:	18ba      	adds	r2, r7, r2
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	18d3      	adds	r3, r2, r3
 8004760:	7818      	ldrb	r0, [r3, #0]
 8004762:	49a3      	ldr	r1, [pc, #652]	@ (80049f0 <ReceiveData+0x318>)
 8004764:	2394      	movs	r3, #148	@ 0x94
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	193a      	adds	r2, r7, r4
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	188a      	adds	r2, r1, r2
 800476e:	18d3      	adds	r3, r2, r3
 8004770:	1c02      	adds	r2, r0, #0
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	193b      	adds	r3, r7, r4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	193a      	adds	r2, r7, r4
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b9a      	ldr	r3, [pc, #616]	@ (80049e8 <ReceiveData+0x310>)
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	0018      	movs	r0, r3
 8004786:	f7fb fcc7 	bl	8000118 <strlen>
 800478a:	0002      	movs	r2, r0
 800478c:	4b97      	ldr	r3, [pc, #604]	@ (80049ec <ReceiveData+0x314>)
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d8dd      	bhi.n	8004752 <ReceiveData+0x7a>
		 game.allSteps = (unsigned int)json_getInteger(json_getProperty(parent, "lifeSteps"));
 8004796:	4a97      	ldr	r2, [pc, #604]	@ (80049f4 <ReceiveData+0x31c>)
 8004798:	4c90      	ldr	r4, [pc, #576]	@ (80049dc <ReceiveData+0x304>)
 800479a:	193b      	adds	r3, r7, r4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 fc82 	bl	80050aa <json_getProperty>
 80047a6:	0003      	movs	r3, r0
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7ff f939 	bl	8003a20 <json_getInteger>
 80047ae:	0002      	movs	r2, r0
 80047b0:	000b      	movs	r3, r1
 80047b2:	0011      	movs	r1, r2
 80047b4:	4a8e      	ldr	r2, [pc, #568]	@ (80049f0 <ReceiveData+0x318>)
 80047b6:	238c      	movs	r3, #140	@ 0x8c
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	50d1      	str	r1, [r2, r3]
		 game.challengeGoal = (unsigned int)json_getInteger(json_getProperty(parent, "difficulty"));
 80047bc:	4a8e      	ldr	r2, [pc, #568]	@ (80049f8 <ReceiveData+0x320>)
 80047be:	193b      	adds	r3, r7, r4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	0011      	movs	r1, r2
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 fc70 	bl	80050aa <json_getProperty>
 80047ca:	0003      	movs	r3, r0
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7ff f927 	bl	8003a20 <json_getInteger>
 80047d2:	0002      	movs	r2, r0
 80047d4:	000b      	movs	r3, r1
 80047d6:	0011      	movs	r1, r2
 80047d8:	4a85      	ldr	r2, [pc, #532]	@ (80049f0 <ReceiveData+0x318>)
 80047da:	2392      	movs	r3, #146	@ 0x92
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	50d1      	str	r1, [r2, r3]
		 game.evo = (unsigned int)json_getInteger(json_getProperty(parent, "evolution"));
 80047e0:	4a86      	ldr	r2, [pc, #536]	@ (80049fc <ReceiveData+0x324>)
 80047e2:	193b      	adds	r3, r7, r4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	0011      	movs	r1, r2
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fc5e 	bl	80050aa <json_getProperty>
 80047ee:	0003      	movs	r3, r0
 80047f0:	0018      	movs	r0, r3
 80047f2:	f7ff f915 	bl	8003a20 <json_getInteger>
 80047f6:	0002      	movs	r2, r0
 80047f8:	000b      	movs	r3, r1
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	4b7c      	ldr	r3, [pc, #496]	@ (80049f0 <ReceiveData+0x318>)
 80047fe:	741a      	strb	r2, [r3, #16]
		 game.mood = (unsigned int)json_getInteger(json_getProperty(parent, "friendship"));
 8004800:	4a7f      	ldr	r2, [pc, #508]	@ (8004a00 <ReceiveData+0x328>)
 8004802:	193b      	adds	r3, r7, r4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	0011      	movs	r1, r2
 8004808:	0018      	movs	r0, r3
 800480a:	f000 fc4e 	bl	80050aa <json_getProperty>
 800480e:	0003      	movs	r3, r0
 8004810:	0018      	movs	r0, r3
 8004812:	f7ff f905 	bl	8003a20 <json_getInteger>
 8004816:	0002      	movs	r2, r0
 8004818:	000b      	movs	r3, r1
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	4b74      	ldr	r3, [pc, #464]	@ (80049f0 <ReceiveData+0x318>)
 800481e:	745a      	strb	r2, [r3, #17]
		 game.stepsToday = (unsigned int)json_getInteger(json_getProperty(parent, "dailySteps"));
 8004820:	4a78      	ldr	r2, [pc, #480]	@ (8004a04 <ReceiveData+0x32c>)
 8004822:	193b      	adds	r3, r7, r4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	0011      	movs	r1, r2
 8004828:	0018      	movs	r0, r3
 800482a:	f000 fc3e 	bl	80050aa <json_getProperty>
 800482e:	0003      	movs	r3, r0
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff f8f5 	bl	8003a20 <json_getInteger>
 8004836:	0002      	movs	r2, r0
 8004838:	000b      	movs	r3, r1
 800483a:	0011      	movs	r1, r2
 800483c:	4a6c      	ldr	r2, [pc, #432]	@ (80049f0 <ReceiveData+0x318>)
 800483e:	2390      	movs	r3, #144	@ 0x90
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	50d1      	str	r1, [r2, r3]
		 game.weeklySteps = (unsigned int) json_getInteger(json_getProperty(parent, "weeklySteps"));
 8004844:	4a70      	ldr	r2, [pc, #448]	@ (8004a08 <ReceiveData+0x330>)
 8004846:	193b      	adds	r3, r7, r4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	0011      	movs	r1, r2
 800484c:	0018      	movs	r0, r3
 800484e:	f000 fc2c 	bl	80050aa <json_getProperty>
 8004852:	0003      	movs	r3, r0
 8004854:	0018      	movs	r0, r3
 8004856:	f7ff f8e3 	bl	8003a20 <json_getInteger>
 800485a:	0002      	movs	r2, r0
 800485c:	000b      	movs	r3, r1
 800485e:	0011      	movs	r1, r2
 8004860:	4a63      	ldr	r2, [pc, #396]	@ (80049f0 <ReceiveData+0x318>)
 8004862:	238e      	movs	r3, #142	@ 0x8e
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	50d1      	str	r1, [r2, r3]
		 json_t const* location;
		 json_t const* locations = json_getProperty(parent, "locations");
 8004868:	4a68      	ldr	r2, [pc, #416]	@ (8004a0c <ReceiveData+0x334>)
 800486a:	193b      	adds	r3, r7, r4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	0011      	movs	r1, r2
 8004870:	0018      	movs	r0, r3
 8004872:	f000 fc1a 	bl	80050aa <json_getProperty>
 8004876:	0003      	movs	r3, r0
 8004878:	4a65      	ldr	r2, [pc, #404]	@ (8004a10 <ReceiveData+0x338>)
 800487a:	18b9      	adds	r1, r7, r2
 800487c:	600b      	str	r3, [r1, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 800487e:	18bb      	adds	r3, r7, r2
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	0018      	movs	r0, r3
 8004884:	f7ff f8c2 	bl	8003a0c <json_getChild>
 8004888:	0003      	movs	r3, r0
 800488a:	22a0      	movs	r2, #160	@ 0xa0
 800488c:	0152      	lsls	r2, r2, #5
 800488e:	18ba      	adds	r2, r7, r2
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e042      	b.n	800491a <ReceiveData+0x242>
		{
			 tempLoc.lat = (float)json_getReal(json_getProperty(location, "lat"));
 8004894:	4a5f      	ldr	r2, [pc, #380]	@ (8004a14 <ReceiveData+0x33c>)
 8004896:	24a0      	movs	r4, #160	@ 0xa0
 8004898:	0164      	lsls	r4, r4, #5
 800489a:	193b      	adds	r3, r7, r4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f000 fc02 	bl	80050aa <json_getProperty>
 80048a6:	0003      	movs	r3, r0
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7ff f8cb 	bl	8003a44 <json_getReal>
 80048ae:	0002      	movs	r2, r0
 80048b0:	000b      	movs	r3, r1
 80048b2:	0010      	movs	r0, r2
 80048b4:	0019      	movs	r1, r3
 80048b6:	f7fe fa1d 	bl	8002cf4 <__aeabi_d2f>
 80048ba:	1c02      	adds	r2, r0, #0
 80048bc:	4d56      	ldr	r5, [pc, #344]	@ (8004a18 <ReceiveData+0x340>)
 80048be:	197b      	adds	r3, r7, r5
 80048c0:	601a      	str	r2, [r3, #0]
			 tempLoc.lon = (float)json_getReal(json_getProperty(location, "lng"));
 80048c2:	4a56      	ldr	r2, [pc, #344]	@ (8004a1c <ReceiveData+0x344>)
 80048c4:	193b      	adds	r3, r7, r4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0011      	movs	r1, r2
 80048ca:	0018      	movs	r0, r3
 80048cc:	f000 fbed 	bl	80050aa <json_getProperty>
 80048d0:	0003      	movs	r3, r0
 80048d2:	0018      	movs	r0, r3
 80048d4:	f7ff f8b6 	bl	8003a44 <json_getReal>
 80048d8:	0002      	movs	r2, r0
 80048da:	000b      	movs	r3, r1
 80048dc:	0010      	movs	r0, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	f7fe fa08 	bl	8002cf4 <__aeabi_d2f>
 80048e4:	1c02      	adds	r2, r0, #0
 80048e6:	197b      	adds	r3, r7, r5
 80048e8:	605a      	str	r2, [r3, #4]
			 game.positions[locI] = tempLoc;
 80048ea:	4a41      	ldr	r2, [pc, #260]	@ (80049f0 <ReceiveData+0x318>)
 80048ec:	4e3c      	ldr	r6, [pc, #240]	@ (80049e0 <ReceiveData+0x308>)
 80048ee:	19bb      	adds	r3, r7, r6
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3303      	adds	r3, #3
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	1979      	adds	r1, r7, r5
 80048f8:	18d3      	adds	r3, r2, r3
 80048fa:	000a      	movs	r2, r1
 80048fc:	ca03      	ldmia	r2!, {r0, r1}
 80048fe:	c303      	stmia	r3!, {r0, r1}
			 locI++;
 8004900:	19bb      	adds	r3, r7, r6
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	19ba      	adds	r2, r7, r6
 8004908:	6013      	str	r3, [r2, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 800490a:	193b      	adds	r3, r7, r4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	0018      	movs	r0, r3
 8004910:	f7ff f872 	bl	80039f8 <json_getSibling>
 8004914:	0003      	movs	r3, r0
 8004916:	193a      	adds	r2, r7, r4
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	23a0      	movs	r3, #160	@ 0xa0
 800491c:	015b      	lsls	r3, r3, #5
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1b6      	bne.n	8004894 <ReceiveData+0x1bc>
		}
		game.numLocations = locI;
 8004926:	4b2e      	ldr	r3, [pc, #184]	@ (80049e0 <ReceiveData+0x308>)
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b30      	ldr	r3, [pc, #192]	@ (80049f0 <ReceiveData+0x318>)
 800492e:	615a      	str	r2, [r3, #20]
		for(locI=locI; locI<32; locI++)
 8004930:	e010      	b.n	8004954 <ReceiveData+0x27c>
		{
			memset(&game.positions[locI], 0, sizeof(game.positions[locI]));
 8004932:	4c2b      	ldr	r4, [pc, #172]	@ (80049e0 <ReceiveData+0x308>)
 8004934:	193b      	adds	r3, r7, r4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3303      	adds	r3, #3
 800493a:	00da      	lsls	r2, r3, #3
 800493c:	4b2c      	ldr	r3, [pc, #176]	@ (80049f0 <ReceiveData+0x318>)
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	2208      	movs	r2, #8
 8004942:	2100      	movs	r1, #0
 8004944:	0018      	movs	r0, r3
 8004946:	f006 ff6f 	bl	800b828 <memset>
		for(locI=locI; locI<32; locI++)
 800494a:	193b      	adds	r3, r7, r4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	193a      	adds	r2, r7, r4
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <ReceiveData+0x308>)
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b1f      	cmp	r3, #31
 800495c:	dde9      	ble.n	8004932 <ReceiveData+0x25a>
		}
		 //SendData();
	 }
     for(ii=0;ii<=rI;ii++) syncBuffer[ii]=0;
 800495e:	4b30      	ldr	r3, [pc, #192]	@ (8004a20 <ReceiveData+0x348>)
 8004960:	2200      	movs	r2, #0
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	e00d      	b.n	8004982 <ReceiveData+0x2aa>
 8004966:	4b2e      	ldr	r3, [pc, #184]	@ (8004a20 <ReceiveData+0x348>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	001a      	movs	r2, r3
 800496e:	4b1a      	ldr	r3, [pc, #104]	@ (80049d8 <ReceiveData+0x300>)
 8004970:	2100      	movs	r1, #0
 8004972:	5499      	strb	r1, [r3, r2]
 8004974:	4b2a      	ldr	r3, [pc, #168]	@ (8004a20 <ReceiveData+0x348>)
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	3301      	adds	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <ReceiveData+0x348>)
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <ReceiveData+0x348>)
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	001a      	movs	r2, r3
 800498a:	4912      	ldr	r1, [pc, #72]	@ (80049d4 <ReceiveData+0x2fc>)
 800498c:	187b      	adds	r3, r7, r1
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4293      	cmp	r3, r2
 8004992:	dae8      	bge.n	8004966 <ReceiveData+0x28e>
     rI=0;
 8004994:	2300      	movs	r3, #0
 8004996:	187a      	adds	r2, r7, r1
 8004998:	6013      	str	r3, [r2, #0]
     break;
 800499a:	e014      	b.n	80049c6 <ReceiveData+0x2ee>
	}
	else
	{
		rI++;
 800499c:	4a0d      	ldr	r2, [pc, #52]	@ (80049d4 <ReceiveData+0x2fc>)
 800499e:	18bb      	adds	r3, r7, r2
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	18ba      	adds	r2, r7, r2
 80049a6:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 80049a8:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <ReceiveData+0x2fc>)
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <ReceiveData+0x300>)
 80049b0:	18d1      	adds	r1, r2, r3
 80049b2:	23fa      	movs	r3, #250	@ 0xfa
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	481b      	ldr	r0, [pc, #108]	@ (8004a24 <ReceiveData+0x34c>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	f004 ffb3 	bl	8009924 <HAL_UART_Receive>
 80049be:	1e03      	subs	r3, r0, #0
 80049c0:	d100      	bne.n	80049c4 <ReceiveData+0x2ec>
 80049c2:	e692      	b.n	80046ea <ReceiveData+0x12>
	}
}

}
 80049c4:	46c0      	nop			@ (mov r8, r8)
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	4b17      	ldr	r3, [pc, #92]	@ (8004a28 <ReceiveData+0x350>)
 80049cc:	449d      	add	sp, r3
 80049ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d0:	ffffebec 	.word	0xffffebec
 80049d4:	0000140c 	.word	0x0000140c
 80049d8:	20001258 	.word	0x20001258
 80049dc:	000013fc 	.word	0x000013fc
 80049e0:	00001408 	.word	0x00001408
 80049e4:	0800db54 	.word	0x0800db54
 80049e8:	000013f8 	.word	0x000013f8
 80049ec:	00001404 	.word	0x00001404
 80049f0:	20001080 	.word	0x20001080
 80049f4:	0800db58 	.word	0x0800db58
 80049f8:	0800db64 	.word	0x0800db64
 80049fc:	0800db70 	.word	0x0800db70
 8004a00:	0800db7c 	.word	0x0800db7c
 8004a04:	0800db88 	.word	0x0800db88
 8004a08:	0800db94 	.word	0x0800db94
 8004a0c:	0800dba0 	.word	0x0800dba0
 8004a10:	000013f4 	.word	0x000013f4
 8004a14:	0800dbac 	.word	0x0800dbac
 8004a18:	000013ec 	.word	0x000013ec
 8004a1c:	0800dbb0 	.word	0x0800dbb0
 8004a20:	200011d0 	.word	0x200011d0
 8004a24:	20002070 	.word	0x20002070
 8004a28:	00001414 	.word	0x00001414

08004a2c <HAL_RTC_AlarmAEventCallback>:
			  		  	}

	game.positions[game.numLocations] = pos;
	game.numLocations++;
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b091      	sub	sp, #68	@ 0x44
 8004a30:	af04      	add	r7, sp, #16
 8004a32:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8004a34:	2380      	movs	r3, #128	@ 0x80
 8004a36:	005a      	lsls	r2, r3, #1
 8004a38:	2408      	movs	r4, #8
 8004a3a:	1939      	adds	r1, r7, r4
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f003 fac4 	bl	8007fcc <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8004a44:	0022      	movs	r2, r4
 8004a46:	18bb      	adds	r3, r7, r2
 8004a48:	789b      	ldrb	r3, [r3, #2]
 8004a4a:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a4c:	d903      	bls.n	8004a56 <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8004a4e:	18bb      	adds	r3, r7, r2
 8004a50:	2200      	movs	r2, #0
 8004a52:	709a      	strb	r2, [r3, #2]
 8004a54:	e006      	b.n	8004a64 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8004a56:	2108      	movs	r1, #8
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	789b      	ldrb	r3, [r3, #2]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8004a64:	46c0      	nop			@ (mov r8, r8)
 8004a66:	2308      	movs	r3, #8
 8004a68:	18f9      	adds	r1, r7, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f003 f96c 	bl	8007d4c <HAL_RTC_SetAlarm_IT>
 8004a74:	1e03      	subs	r3, r0, #0
 8004a76:	d1f6      	bne.n	8004a66 <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8004a78:	4a07      	ldr	r2, [pc, #28]	@ (8004a98 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	9302      	str	r3, [sp, #8]
 8004a7e:	2301      	movs	r3, #1
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <HAL_RTC_AlarmAEventCallback+0x70>)
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2300      	movs	r3, #0
 8004a88:	211e      	movs	r1, #30
 8004a8a:	201e      	movs	r0, #30
 8004a8c:	f7fe fa9e 	bl	8002fcc <drawString>
}
 8004a90:	46c0      	nop			@ (mov r8, r8)
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b00d      	add	sp, #52	@ 0x34
 8004a96:	bd90      	pop	{r4, r7, pc}
 8004a98:	0800dbb4 	.word	0x0800dbb4
 8004a9c:	ffffe007 	.word	0xffffe007

08004aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004aa4:	b672      	cpsid	i
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004aa8:	46c0      	nop			@ (mov r8, r8)
 8004aaa:	e7fd      	b.n	8004aa8 <Error_Handler+0x8>

08004aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab2:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <HAL_MspInit+0x4c>)
 8004ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ab6:	4b10      	ldr	r3, [pc, #64]	@ (8004af8 <HAL_MspInit+0x4c>)
 8004ab8:	2101      	movs	r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004abe:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <HAL_MspInit+0x4c>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	4b0b      	ldr	r3, [pc, #44]	@ (8004af8 <HAL_MspInit+0x4c>)
 8004acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ace:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <HAL_MspInit+0x4c>)
 8004ad0:	2180      	movs	r1, #128	@ 0x80
 8004ad2:	0549      	lsls	r1, r1, #21
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ad8:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <HAL_MspInit+0x4c>)
 8004ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004adc:	2380      	movs	r3, #128	@ 0x80
 8004ade:	055b      	lsls	r3, r3, #21
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8004ae6:	23c0      	movs	r3, #192	@ 0xc0
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	0018      	movs	r0, r3
 8004aec:	f001 f8e8 	bl	8005cc0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af0:	46c0      	nop			@ (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000

08004afc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b09d      	sub	sp, #116	@ 0x74
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b04:	235c      	movs	r3, #92	@ 0x5c
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	0018      	movs	r0, r3
 8004b0a:	2314      	movs	r3, #20
 8004b0c:	001a      	movs	r2, r3
 8004b0e:	2100      	movs	r1, #0
 8004b10:	f006 fe8a 	bl	800b828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b14:	2410      	movs	r4, #16
 8004b16:	193b      	adds	r3, r7, r4
 8004b18:	0018      	movs	r0, r3
 8004b1a:	234c      	movs	r3, #76	@ 0x4c
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	2100      	movs	r1, #0
 8004b20:	f006 fe82 	bl	800b828 <memset>
  if(hi2c->Instance==I2C1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a23      	ldr	r2, [pc, #140]	@ (8004bb8 <HAL_I2C_MspInit+0xbc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d13f      	bne.n	8004bae <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b2e:	193b      	adds	r3, r7, r4
 8004b30:	2220      	movs	r2, #32
 8004b32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b34:	193b      	adds	r3, r7, r4
 8004b36:	2200      	movs	r2, #0
 8004b38:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b3a:	193b      	adds	r3, r7, r4
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f002 fec9 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004b46:	f7ff ffab 	bl	8004aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <HAL_I2C_MspInit+0xc0>)
 8004b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <HAL_I2C_MspInit+0xc0>)
 8004b50:	2101      	movs	r1, #1
 8004b52:	430a      	orrs	r2, r1
 8004b54:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b56:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <HAL_I2C_MspInit+0xc0>)
 8004b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b62:	215c      	movs	r1, #92	@ 0x5c
 8004b64:	187b      	adds	r3, r7, r1
 8004b66:	22c0      	movs	r2, #192	@ 0xc0
 8004b68:	00d2      	lsls	r2, r2, #3
 8004b6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	2212      	movs	r2, #18
 8004b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	2200      	movs	r2, #0
 8004b76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	2206      	movs	r2, #6
 8004b82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b84:	187a      	adds	r2, r7, r1
 8004b86:	23a0      	movs	r3, #160	@ 0xa0
 8004b88:	05db      	lsls	r3, r3, #23
 8004b8a:	0011      	movs	r1, r2
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f001 f961 	bl	8005e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b92:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <HAL_I2C_MspInit+0xc0>)
 8004b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b96:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <HAL_I2C_MspInit+0xc0>)
 8004b98:	2180      	movs	r1, #128	@ 0x80
 8004b9a:	0389      	lsls	r1, r1, #14
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ba0:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <HAL_I2C_MspInit+0xc0>)
 8004ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	039b      	lsls	r3, r3, #14
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b01d      	add	sp, #116	@ 0x74
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	40005400 	.word	0x40005400
 8004bbc:	40021000 	.word	0x40021000

08004bc0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b08b      	sub	sp, #44	@ 0x2c
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc8:	2414      	movs	r4, #20
 8004bca:	193b      	adds	r3, r7, r4
 8004bcc:	0018      	movs	r0, r3
 8004bce:	2314      	movs	r3, #20
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f006 fe28 	bl	800b828 <memset>
  if(hspi->Instance==SPI1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8004c90 <HAL_SPI_MspInit+0xd0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d151      	bne.n	8004c86 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004be2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004be6:	4b2b      	ldr	r3, [pc, #172]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004be8:	2180      	movs	r1, #128	@ 0x80
 8004bea:	0149      	lsls	r1, r1, #5
 8004bec:	430a      	orrs	r2, r1
 8004bee:	641a      	str	r2, [r3, #64]	@ 0x40
 8004bf0:	4b28      	ldr	r3, [pc, #160]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004bf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bf4:	2380      	movs	r3, #128	@ 0x80
 8004bf6:	015b      	lsls	r3, r3, #5
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bfe:	4b25      	ldr	r3, [pc, #148]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c02:	4b24      	ldr	r3, [pc, #144]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004c04:	2101      	movs	r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c0a:	4b22      	ldr	r3, [pc, #136]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4013      	ands	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c16:	4b1f      	ldr	r3, [pc, #124]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004c1c:	2108      	movs	r1, #8
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c22:	4b1c      	ldr	r3, [pc, #112]	@ (8004c94 <HAL_SPI_MspInit+0xd4>)
 8004c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c26:	2208      	movs	r2, #8
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004c2e:	193b      	adds	r3, r7, r4
 8004c30:	2202      	movs	r2, #2
 8004c32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	193b      	adds	r3, r7, r4
 8004c36:	2202      	movs	r2, #2
 8004c38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	2200      	movs	r2, #0
 8004c44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004c46:	193b      	adds	r3, r7, r4
 8004c48:	2200      	movs	r2, #0
 8004c4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c4c:	193a      	adds	r2, r7, r4
 8004c4e:	23a0      	movs	r3, #160	@ 0xa0
 8004c50:	05db      	lsls	r3, r3, #23
 8004c52:	0011      	movs	r1, r2
 8004c54:	0018      	movs	r0, r3
 8004c56:	f001 f8fd 	bl	8005e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004c5a:	0021      	movs	r1, r4
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	2260      	movs	r2, #96	@ 0x60
 8004c60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	187b      	adds	r3, r7, r1
 8004c64:	2202      	movs	r2, #2
 8004c66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	187b      	adds	r3, r7, r1
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	2200      	movs	r2, #0
 8004c72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8004c74:	187b      	adds	r3, r7, r1
 8004c76:	2201      	movs	r2, #1
 8004c78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c7a:	187b      	adds	r3, r7, r1
 8004c7c:	4a06      	ldr	r2, [pc, #24]	@ (8004c98 <HAL_SPI_MspInit+0xd8>)
 8004c7e:	0019      	movs	r1, r3
 8004c80:	0010      	movs	r0, r2
 8004c82:	f001 f8e7 	bl	8005e54 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b00b      	add	sp, #44	@ 0x2c
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	46c0      	nop			@ (mov r8, r8)
 8004c90:	40013000 	.word	0x40013000
 8004c94:	40021000 	.word	0x40021000
 8004c98:	50000c00 	.word	0x50000c00

08004c9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <HAL_TIM_Base_MspInit+0x38>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10d      	bne.n	8004cca <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004cae:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8004cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cb2:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8004cb4:	2180      	movs	r1, #128	@ 0x80
 8004cb6:	02c9      	lsls	r1, r1, #11
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <HAL_TIM_Base_MspInit+0x3c>)
 8004cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	02db      	lsls	r3, r3, #11
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b004      	add	sp, #16
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	40014800 	.word	0x40014800
 8004cd8:	40021000 	.word	0x40021000

08004cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b089      	sub	sp, #36	@ 0x24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce4:	240c      	movs	r4, #12
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	0018      	movs	r0, r3
 8004cea:	2314      	movs	r3, #20
 8004cec:	001a      	movs	r2, r3
 8004cee:	2100      	movs	r1, #0
 8004cf0:	f006 fd9a 	bl	800b828 <memset>
  if(htim->Instance==TIM17)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a14      	ldr	r2, [pc, #80]	@ (8004d4c <HAL_TIM_MspPostInit+0x70>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d122      	bne.n	8004d44 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cfe:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <HAL_TIM_MspPostInit+0x74>)
 8004d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d02:	4b13      	ldr	r3, [pc, #76]	@ (8004d50 <HAL_TIM_MspPostInit+0x74>)
 8004d04:	2101      	movs	r1, #1
 8004d06:	430a      	orrs	r2, r1
 8004d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <HAL_TIM_MspPostInit+0x74>)
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4013      	ands	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004d16:	0021      	movs	r1, r4
 8004d18:	187b      	adds	r3, r7, r1
 8004d1a:	2280      	movs	r2, #128	@ 0x80
 8004d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1e:	187b      	adds	r3, r7, r1
 8004d20:	2202      	movs	r2, #2
 8004d22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	2205      	movs	r2, #5
 8004d34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d36:	187a      	adds	r2, r7, r1
 8004d38:	23a0      	movs	r3, #160	@ 0xa0
 8004d3a:	05db      	lsls	r3, r3, #23
 8004d3c:	0011      	movs	r1, r2
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f001 f888 	bl	8005e54 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b009      	add	sp, #36	@ 0x24
 8004d4a:	bd90      	pop	{r4, r7, pc}
 8004d4c:	40014800 	.word	0x40014800
 8004d50:	40021000 	.word	0x40021000

08004d54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b09f      	sub	sp, #124	@ 0x7c
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5c:	2364      	movs	r3, #100	@ 0x64
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	0018      	movs	r0, r3
 8004d62:	2314      	movs	r3, #20
 8004d64:	001a      	movs	r2, r3
 8004d66:	2100      	movs	r1, #0
 8004d68:	f006 fd5e 	bl	800b828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d6c:	2418      	movs	r4, #24
 8004d6e:	193b      	adds	r3, r7, r4
 8004d70:	0018      	movs	r0, r3
 8004d72:	234c      	movs	r3, #76	@ 0x4c
 8004d74:	001a      	movs	r2, r3
 8004d76:	2100      	movs	r1, #0
 8004d78:	f006 fd56 	bl	800b828 <memset>
  if(huart->Instance==USART1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a45      	ldr	r2, [pc, #276]	@ (8004e98 <HAL_UART_MspInit+0x144>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d13e      	bne.n	8004e04 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004d86:	193b      	adds	r3, r7, r4
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004d8c:	193b      	adds	r3, r7, r4
 8004d8e:	2200      	movs	r2, #0
 8004d90:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d92:	193b      	adds	r3, r7, r4
 8004d94:	0018      	movs	r0, r3
 8004d96:	f002 fd9d 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 8004d9a:	1e03      	subs	r3, r0, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004d9e:	f7ff fe7f 	bl	8004aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004da2:	4b3e      	ldr	r3, [pc, #248]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004da4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004da6:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004da8:	2180      	movs	r1, #128	@ 0x80
 8004daa:	01c9      	lsls	r1, r1, #7
 8004dac:	430a      	orrs	r2, r1
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40
 8004db0:	4b3a      	ldr	r3, [pc, #232]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	01db      	lsls	r3, r3, #7
 8004db8:	4013      	ands	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dbe:	4b37      	ldr	r3, [pc, #220]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dc2:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004dca:	4b34      	ldr	r3, [pc, #208]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	2204      	movs	r2, #4
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004dd6:	2164      	movs	r1, #100	@ 0x64
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	2230      	movs	r2, #48	@ 0x30
 8004ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dde:	187b      	adds	r3, r7, r1
 8004de0:	2202      	movs	r2, #2
 8004de2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dea:	187b      	adds	r3, r7, r1
 8004dec:	2200      	movs	r2, #0
 8004dee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004df0:	187b      	adds	r3, r7, r1
 8004df2:	2201      	movs	r2, #1
 8004df4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004df6:	187b      	adds	r3, r7, r1
 8004df8:	4a29      	ldr	r2, [pc, #164]	@ (8004ea0 <HAL_UART_MspInit+0x14c>)
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	0010      	movs	r0, r2
 8004dfe:	f001 f829 	bl	8005e54 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e02:	e044      	b.n	8004e8e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a26      	ldr	r2, [pc, #152]	@ (8004ea4 <HAL_UART_MspInit+0x150>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d13f      	bne.n	8004e8e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004e0e:	2118      	movs	r1, #24
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	2202      	movs	r2, #2
 8004e14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f002 fd58 	bl	80078d4 <HAL_RCCEx_PeriphCLKConfig>
 8004e24:	1e03      	subs	r3, r0, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8004e28:	f7ff fe3a 	bl	8004aa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e30:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004e32:	2180      	movs	r1, #128	@ 0x80
 8004e34:	0289      	lsls	r1, r1, #10
 8004e36:	430a      	orrs	r2, r1
 8004e38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e3a:	4b18      	ldr	r3, [pc, #96]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	029b      	lsls	r3, r3, #10
 8004e42:	4013      	ands	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e4c:	4b13      	ldr	r3, [pc, #76]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e54:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_UART_MspInit+0x148>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e60:	2164      	movs	r1, #100	@ 0x64
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	220c      	movs	r2, #12
 8004e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004e7a:	187b      	adds	r3, r7, r1
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e80:	187a      	adds	r2, r7, r1
 8004e82:	23a0      	movs	r3, #160	@ 0xa0
 8004e84:	05db      	lsls	r3, r3, #23
 8004e86:	0011      	movs	r1, r2
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f000 ffe3 	bl	8005e54 <HAL_GPIO_Init>
}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b01f      	add	sp, #124	@ 0x7c
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	40013800 	.word	0x40013800
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	50000800 	.word	0x50000800
 8004ea4:	40004400 	.word	0x40004400

08004ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004eac:	46c0      	nop			@ (mov r8, r8)
 8004eae:	e7fd      	b.n	8004eac <NMI_Handler+0x4>

08004eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	e7fd      	b.n	8004eb4 <HardFault_Handler+0x4>

08004eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ed0:	f000 feb6 	bl	8005c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ed4:	46c0      	nop			@ (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <RTC_TAMP_IRQHandler+0x1c>)
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f003 f938 	bl	8008158 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <RTC_TAMP_IRQHandler+0x1c>)
 8004eea:	0018      	movs	r0, r3
 8004eec:	f003 f9b7 	bl	800825e <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8004ef0:	46c0      	nop			@ (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	20001f00 	.word	0x20001f00

08004efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  return 1;
 8004f00:	2301      	movs	r3, #1
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_kill>:

int _kill(int pid, int sig)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f12:	f006 fcf1 	bl	800b8f8 <__errno>
 8004f16:	0003      	movs	r3, r0
 8004f18:	2216      	movs	r2, #22
 8004f1a:	601a      	str	r2, [r3, #0]
  return -1;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	425b      	negs	r3, r3
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_exit>:

void _exit (int status)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f30:	2301      	movs	r3, #1
 8004f32:	425a      	negs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff ffe5 	bl	8004f08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	e7fd      	b.n	8004f3e <_exit+0x16>

08004f42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e00a      	b.n	8004f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f54:	e000      	b.n	8004f58 <_read+0x16>
 8004f56:	bf00      	nop
 8004f58:	0001      	movs	r1, r0
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	60ba      	str	r2, [r7, #8]
 8004f60:	b2ca      	uxtb	r2, r1
 8004f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3301      	adds	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	dbf0      	blt.n	8004f54 <_read+0x12>
  }

  return len;
 8004f72:	687b      	ldr	r3, [r7, #4]
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b006      	add	sp, #24
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e009      	b.n	8004fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	60ba      	str	r2, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0018      	movs	r0, r3
 8004f98:	e000      	b.n	8004f9c <_write+0x20>
 8004f9a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	dbf1      	blt.n	8004f8e <_write+0x12>
  }
  return len;
 8004faa:	687b      	ldr	r3, [r7, #4]
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b006      	add	sp, #24
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <_close>:

int _close(int file)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	425b      	negs	r3, r3
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2280      	movs	r2, #128	@ 0x80
 8004fd6:	0192      	lsls	r2, r2, #6
 8004fd8:	605a      	str	r2, [r3, #4]
  return 0;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <_isatty>:

int _isatty(int file)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fec:	2301      	movs	r3, #1
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b002      	add	sp, #8
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005002:	2300      	movs	r3, #0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b004      	add	sp, #16
 800500a:	bd80      	pop	{r7, pc}

0800500c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005014:	4a14      	ldr	r2, [pc, #80]	@ (8005068 <_sbrk+0x5c>)
 8005016:	4b15      	ldr	r3, [pc, #84]	@ (800506c <_sbrk+0x60>)
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005020:	4b13      	ldr	r3, [pc, #76]	@ (8005070 <_sbrk+0x64>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005028:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <_sbrk+0x64>)
 800502a:	4a12      	ldr	r2, [pc, #72]	@ (8005074 <_sbrk+0x68>)
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800502e:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <_sbrk+0x64>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	18d3      	adds	r3, r2, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d207      	bcs.n	800504c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800503c:	f006 fc5c 	bl	800b8f8 <__errno>
 8005040:	0003      	movs	r3, r0
 8005042:	220c      	movs	r2, #12
 8005044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005046:	2301      	movs	r3, #1
 8005048:	425b      	negs	r3, r3
 800504a:	e009      	b.n	8005060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800504c:	4b08      	ldr	r3, [pc, #32]	@ (8005070 <_sbrk+0x64>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <_sbrk+0x64>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	18d2      	adds	r2, r2, r3
 800505a:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <_sbrk+0x64>)
 800505c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	0018      	movs	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	b006      	add	sp, #24
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20024000 	.word	0x20024000
 800506c:	00000400 	.word	0x00000400
 8005070:	20002104 	.word	0x20002104
 8005074:	20002258 	.word	0x20002258

08005078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
    return property->u.value;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b002      	add	sp, #8
 8005094:	bd80      	pop	{r7, pc}

08005096 <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
    return json->type;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	7c1b      	ldrb	r3, [r3, #16]
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b002      	add	sp, #8
 80050a8:	bd80      	pop	{r7, pc}

080050aa <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e011      	b.n	80050e0 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <json_getProperty+0x30>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	0011      	movs	r1, r2
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fb f819 	bl	8000104 <strcmp>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d101      	bne.n	80050da <json_getProperty+0x30>
            return sibling;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	e006      	b.n	80050e8 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ea      	bne.n	80050bc <json_getProperty+0x12>
    return 0;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 80050f0:	b5b0      	push	{r4, r5, r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	0011      	movs	r1, r2
 8005100:	0018      	movs	r0, r3
 8005102:	f7ff ffd2 	bl	80050aa <json_getProperty>
 8005106:	0003      	movs	r3, r0
 8005108:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <json_getPropertyValue+0x24>
 8005110:	2300      	movs	r3, #0
 8005112:	e012      	b.n	800513a <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 8005114:	250b      	movs	r5, #11
 8005116:	197c      	adds	r4, r7, r5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	0018      	movs	r0, r3
 800511c:	f7ff ffbb 	bl	8005096 <json_getType>
 8005120:	0003      	movs	r3, r0
 8005122:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 8005124:	197b      	adds	r3, r7, r5
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d801      	bhi.n	8005130 <json_getPropertyValue+0x40>
 800512c:	2300      	movs	r3, #0
 800512e:	e004      	b.n	800513a <json_getPropertyValue+0x4a>
	return json_getValue( field );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	0018      	movs	r0, r3
 8005134:	f7ff ffa5 	bl	8005082 <json_getValue>
 8005138:	0003      	movs	r3, r0
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b004      	add	sp, #16
 8005140:	bdb0      	pop	{r4, r5, r7, pc}

08005142 <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	0018      	movs	r0, r3
 8005150:	f000 fc66 	bl	8005a20 <goBlank>
 8005154:	0003      	movs	r3, r0
 8005156:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <json_createWithPool+0x2c>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b7b      	cmp	r3, #123	@ 0x7b
 8005164:	d005      	beq.n	8005172 <json_createWithPool+0x30>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b5b      	cmp	r3, #91	@ 0x5b
 800516c:	d001      	beq.n	8005172 <json_createWithPool+0x30>
 800516e:	2300      	movs	r3, #0
 8005170:	e01d      	b.n	80051ae <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	0010      	movs	r0, r2
 800517a:	4798      	blx	r3
 800517c:	0003      	movs	r3, r0
 800517e:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	0018      	movs	r0, r3
 800519a:	f000 faeb 	bl	8005774 <objValue>
 800519e:	0003      	movs	r3, r0
 80051a0:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <json_createWithPool+0x6a>
 80051a8:	2300      	movs	r3, #0
 80051aa:	e000      	b.n	80051ae <json_createWithPool+0x6c>
    return obj;
 80051ac:	68bb      	ldr	r3, [r7, #8]
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b004      	add	sp, #16
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	@ 0x28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 80051c4:	2114      	movs	r1, #20
 80051c6:	187b      	adds	r3, r7, r1
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	4a08      	ldr	r2, [pc, #32]	@ (80051f8 <json_create+0x40>)
 80051d6:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <json_create+0x44>)
 80051dc:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	330c      	adds	r3, #12
 80051e2:	001a      	movs	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	0011      	movs	r1, r2
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7ff ffaa 	bl	8005142 <json_createWithPool>
 80051ee:	0003      	movs	r3, r0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b00a      	add	sp, #40	@ 0x28
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08005949 	.word	0x08005949
 80051fc:	08005969 	.word	0x08005969

08005200 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	0002      	movs	r2, r0
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e011      	b.n	8005236 <getEscape+0x36>
        if ( pair[i].ch == ch )
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <getEscape+0x48>)
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	0052      	lsls	r2, r2, #1
 8005218:	5cd3      	ldrb	r3, [r2, r3]
 800521a:	1dfa      	adds	r2, r7, #7
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d106      	bne.n	8005230 <getEscape+0x30>
            return pair[i].code;
 8005222:	4a09      	ldr	r2, [pc, #36]	@ (8005248 <getEscape+0x48>)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	18d3      	adds	r3, r2, r3
 800522a:	3301      	adds	r3, #1
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	e006      	b.n	800523e <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b07      	cmp	r3, #7
 800523a:	d9ea      	bls.n	8005212 <getEscape+0x12>
    return '\0';
 800523c:	2300      	movs	r3, #0
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b004      	add	sp, #16
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	0800e2f4 	.word	0x0800e2f4

0800524c <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e010      	b.n	800527c <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	18d3      	adds	r3, r2, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	4b09      	ldr	r3, [pc, #36]	@ (800528c <getCharFromUnicode+0x40>)
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	001a      	movs	r2, r3
 800526c:	2344      	movs	r3, #68	@ 0x44
 800526e:	4013      	ands	r3, r2
 8005270:	d101      	bne.n	8005276 <getCharFromUnicode+0x2a>
            return '\0';
 8005272:	2300      	movs	r3, #0
 8005274:	e006      	b.n	8005284 <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d9eb      	bls.n	800525a <getCharFromUnicode+0xe>
    return '?';
 8005282:	233f      	movs	r3, #63	@ 0x3f
}
 8005284:	0018      	movs	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	b004      	add	sp, #16
 800528a:	bd80      	pop	{r7, pc}
 800528c:	0800e410 	.word	0x0800e410

08005290 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 8005290:	b5b0      	push	{r4, r5, r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 80052a0:	e04f      	b.n	8005342 <parseString+0xb2>
        if ( *head == '\"' ) {
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b22      	cmp	r3, #34	@ 0x22
 80052a8:	d107      	bne.n	80052ba <parseString+0x2a>
            *tail = '\0';
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	3301      	adds	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	e048      	b.n	800534c <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b5c      	cmp	r3, #92	@ 0x5c
 80052c0:	d135      	bne.n	800532e <parseString+0x9e>
            if ( *++head == 'u' ) {
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	3301      	adds	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b75      	cmp	r3, #117	@ 0x75
 80052ce:	d119      	bne.n	8005304 <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3301      	adds	r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	250e      	movs	r5, #14
 80052d8:	197c      	adds	r4, r7, r5
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff ffb5 	bl	800524c <getCharFromUnicode>
 80052e2:	0003      	movs	r3, r0
 80052e4:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 80052e6:	197b      	adds	r3, r7, r5
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <parseString+0x62>
 80052ee:	2300      	movs	r3, #0
 80052f0:	e02c      	b.n	800534c <parseString+0xbc>
                *tail = ch;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	220e      	movs	r2, #14
 80052f6:	18ba      	adds	r2, r7, r2
 80052f8:	7812      	ldrb	r2, [r2, #0]
 80052fa:	701a      	strb	r2, [r3, #0]
                head += 3;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3303      	adds	r3, #3
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e018      	b.n	8005336 <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	250f      	movs	r5, #15
 800530a:	197c      	adds	r4, r7, r5
 800530c:	0018      	movs	r0, r3
 800530e:	f7ff ff77 	bl	8005200 <getEscape>
 8005312:	0003      	movs	r3, r0
 8005314:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 8005316:	197b      	adds	r3, r7, r5
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <parseString+0x92>
 800531e:	2300      	movs	r3, #0
 8005320:	e014      	b.n	800534c <parseString+0xbc>
                *tail = esc;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	220f      	movs	r2, #15
 8005326:	18ba      	adds	r2, r7, r2
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e003      	b.n	8005336 <parseString+0xa6>
            }
        }
        else *tail = *head;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	3301      	adds	r3, #1
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1ab      	bne.n	80052a2 <parseString+0x12>
    }
    return 0;
 800534a:	2300      	movs	r3, #0
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b006      	add	sp, #24
 8005352:	bdb0      	pop	{r4, r5, r7, pc}

08005354 <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3301      	adds	r3, #1
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f7ff ff8f 	bl	8005290 <parseString>
 8005372:	0003      	movs	r3, r0
 8005374:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <propertyName+0x2c>
 800537c:	2300      	movs	r3, #0
 800537e:	e017      	b.n	80053b0 <propertyName+0x5c>
    ptr = goBlank( ptr );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 fb4c 	bl	8005a20 <goBlank>
 8005388:	0003      	movs	r3, r0
 800538a:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <propertyName+0x42>
 8005392:	2300      	movs	r3, #0
 8005394:	e00c      	b.n	80053b0 <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b3a      	cmp	r3, #58	@ 0x3a
 80053a0:	d001      	beq.n	80053a6 <propertyName+0x52>
 80053a2:	2300      	movs	r3, #0
 80053a4:	e004      	b.n	80053b0 <propertyName+0x5c>
    return goBlank( ptr );
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 fb39 	bl	8005a20 <goBlank>
 80053ae:	0003      	movs	r3, r0
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3301      	adds	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7ff ff5b 	bl	8005290 <parseString>
 80053da:	0003      	movs	r3, r0
 80053dc:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <textValue+0x30>
 80053e4:	2300      	movs	r3, #0
 80053e6:	e003      	b.n	80053f0 <textValue+0x38>
    property->type = JSON_TEXT;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2202      	movs	r2, #2
 80053ec:	741a      	strb	r2, [r3, #16]
    return ptr;
 80053ee:	687b      	ldr	r3, [r7, #4]
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b002      	add	sp, #8
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
    while( *str )
 8005402:	e00b      	b.n	800541c <checkStr+0x24>
        if ( *ptr++ != *str++ )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	607a      	str	r2, [r7, #4]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <checkStr+0x24>
            return 0;
 8005418:	2300      	movs	r3, #0
 800541a:	e004      	b.n	8005426 <checkStr+0x2e>
    while( *str )
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ef      	bne.n	8005404 <checkStr+0xc>
    return ptr;
 8005424:	687b      	ldr	r3, [r7, #4]
}
 8005426:	0018      	movs	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	b002      	add	sp, #8
 800542c:	bd80      	pop	{r7, pc}

0800542e <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	001a      	movs	r2, r3
 800543c:	1cfb      	adds	r3, r7, #3
 800543e:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	0011      	movs	r1, r2
 8005446:	0018      	movs	r0, r3
 8005448:	f7ff ffd6 	bl	80053f8 <checkStr>
 800544c:	0003      	movs	r3, r0
 800544e:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <primitiveValue+0x40>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	0018      	movs	r0, r3
 800545c:	f000 fb30 	bl	8005ac0 <isEndOfPrimitive>
 8005460:	0003      	movs	r3, r0
 8005462:	001a      	movs	r2, r3
 8005464:	2301      	movs	r3, #1
 8005466:	4053      	eors	r3, r2
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <primitiveValue+0x44>
 800546e:	2300      	movs	r3, #0
 8005470:	e00a      	b.n	8005488 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0018      	movs	r0, r3
 8005476:	f000 fb05 	bl	8005a84 <setToNull>
 800547a:	0003      	movs	r3, r0
 800547c:	60fb      	str	r3, [r7, #12]
    property->type = type;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	1cfa      	adds	r2, r7, #3
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	741a      	strb	r2, [r3, #16]
    return ptr;
 8005486:	68fb      	ldr	r3, [r7, #12]
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bd80      	pop	{r7, pc}

08005490 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 800549a:	4a05      	ldr	r2, [pc, #20]	@ (80054b0 <trueValue+0x20>)
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	2303      	movs	r3, #3
 80054a2:	f7ff ffc4 	bl	800542e <primitiveValue>
 80054a6:	0003      	movs	r3, r0
}
 80054a8:	0018      	movs	r0, r3
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	0800dbc0 	.word	0x0800dbc0

080054b4 <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 80054be:	4a05      	ldr	r2, [pc, #20]	@ (80054d4 <falseValue+0x20>)
 80054c0:	6839      	ldr	r1, [r7, #0]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	2303      	movs	r3, #3
 80054c6:	f7ff ffb2 	bl	800542e <primitiveValue>
 80054ca:	0003      	movs	r3, r0
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	0800dbc8 	.word	0x0800dbc8

080054d8 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 80054e2:	4a05      	ldr	r2, [pc, #20]	@ (80054f8 <nullValue+0x20>)
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	2306      	movs	r3, #6
 80054ea:	f7ff ffa0 	bl	800542e <primitiveValue>
 80054ee:	0003      	movs	r3, r0
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	0800dbd0 	.word	0x0800dbd0

080054fc <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b2d      	cmp	r3, #45	@ 0x2d
 800550a:	d003      	beq.n	8005514 <expValue+0x18>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b2b      	cmp	r3, #43	@ 0x2b
 8005512:	d102      	bne.n	800551a <expValue+0x1e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3301      	adds	r3, #1
 8005518:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <expValue+0x54>)
 8005522:	18d3      	adds	r3, r2, r3
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	001a      	movs	r2, r3
 8005528:	2304      	movs	r3, #4
 800552a:	4013      	ands	r3, r2
 800552c:	d101      	bne.n	8005532 <expValue+0x36>
 800552e:	2300      	movs	r3, #0
 8005530:	e009      	b.n	8005546 <expValue+0x4a>
    ptr = goNum( ++ptr );
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3301      	adds	r3, #1
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	0018      	movs	r0, r3
 800553c:	f000 fa82 	bl	8005a44 <goNum>
 8005540:	0003      	movs	r3, r0
 8005542:	607b      	str	r3, [r7, #4]
    return ptr;
 8005544:	687b      	ldr	r3, [r7, #4]
}
 8005546:	0018      	movs	r0, r3
 8005548:	46bd      	mov	sp, r7
 800554a:	b002      	add	sp, #8
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	0800e410 	.word	0x0800e410

08005554 <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	4b0e      	ldr	r3, [pc, #56]	@ (800559c <fraqValue+0x48>)
 8005564:	18d3      	adds	r3, r2, r3
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	001a      	movs	r2, r3
 800556a:	2304      	movs	r3, #4
 800556c:	4013      	ands	r3, r2
 800556e:	d101      	bne.n	8005574 <fraqValue+0x20>
 8005570:	2300      	movs	r3, #0
 8005572:	e00e      	b.n	8005592 <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3301      	adds	r3, #1
 8005578:	607b      	str	r3, [r7, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	0018      	movs	r0, r3
 800557e:	f000 fa61 	bl	8005a44 <goNum>
 8005582:	0003      	movs	r3, r0
 8005584:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <fraqValue+0x3c>
 800558c:	2300      	movs	r3, #0
 800558e:	e000      	b.n	8005592 <fraqValue+0x3e>
    return ptr;
 8005590:	687b      	ldr	r3, [r7, #4]
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b002      	add	sp, #8
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			@ (mov r8, r8)
 800559c:	0800e410 	.word	0x0800e410

080055a0 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b2d      	cmp	r3, #45	@ 0x2d
 80055b0:	d102      	bne.n	80055b8 <numValue+0x18>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3301      	adds	r3, #1
 80055b6:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	4b5b      	ldr	r3, [pc, #364]	@ (800572c <numValue+0x18c>)
 80055c0:	18d3      	adds	r3, r2, r3
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	001a      	movs	r2, r3
 80055c6:	2304      	movs	r3, #4
 80055c8:	4013      	ands	r3, r2
 80055ca:	d101      	bne.n	80055d0 <numValue+0x30>
 80055cc:	2300      	movs	r3, #0
 80055ce:	e0a8      	b.n	8005722 <numValue+0x182>
    if ( *ptr != '0' ) {
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b30      	cmp	r3, #48	@ 0x30
 80055d6:	d00a      	beq.n	80055ee <numValue+0x4e>
        ptr = goNum( ptr );
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 fa32 	bl	8005a44 <goNum>
 80055e0:	0003      	movs	r3, r0
 80055e2:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d110      	bne.n	800560c <numValue+0x6c>
 80055ea:	2300      	movs	r3, #0
 80055ec:	e099      	b.n	8005722 <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3301      	adds	r3, #1
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	4b4c      	ldr	r3, [pc, #304]	@ (800572c <numValue+0x18c>)
 80055fc:	18d3      	adds	r3, r2, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	001a      	movs	r2, r3
 8005602:	2304      	movs	r3, #4
 8005604:	4013      	ands	r3, r2
 8005606:	d001      	beq.n	800560c <numValue+0x6c>
 8005608:	2300      	movs	r3, #0
 800560a:	e08a      	b.n	8005722 <numValue+0x182>
    property->type = JSON_INTEGER;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2204      	movs	r2, #4
 8005610:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b2e      	cmp	r3, #46	@ 0x2e
 8005618:	d110      	bne.n	800563c <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3301      	adds	r3, #1
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	0018      	movs	r0, r3
 8005624:	f7ff ff96 	bl	8005554 <fraqValue>
 8005628:	0003      	movs	r3, r0
 800562a:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <numValue+0x96>
 8005632:	2300      	movs	r3, #0
 8005634:	e075      	b.n	8005722 <numValue+0x182>
        property->type = JSON_REAL;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2205      	movs	r2, #5
 800563a:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b65      	cmp	r3, #101	@ 0x65
 8005642:	d003      	beq.n	800564c <numValue+0xac>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b45      	cmp	r3, #69	@ 0x45
 800564a:	d110      	bne.n	800566e <numValue+0xce>
        ptr = expValue( ++ptr );
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3301      	adds	r3, #1
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f7ff ff51 	bl	80054fc <expValue>
 800565a:	0003      	movs	r3, r0
 800565c:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <numValue+0xc8>
 8005664:	2300      	movs	r3, #0
 8005666:	e05c      	b.n	8005722 <numValue+0x182>
        property->type = JSON_REAL;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2205      	movs	r2, #5
 800566c:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	0018      	movs	r0, r3
 8005674:	f000 fa24 	bl	8005ac0 <isEndOfPrimitive>
 8005678:	0003      	movs	r3, r0
 800567a:	001a      	movs	r2, r3
 800567c:	2301      	movs	r3, #1
 800567e:	4053      	eors	r3, r2
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <numValue+0xea>
 8005686:	2300      	movs	r3, #0
 8005688:	e04b      	b.n	8005722 <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	7c1b      	ldrb	r3, [r3, #16]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d140      	bne.n	8005714 <numValue+0x174>
        char const* value = property->u.value;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	201b      	movs	r0, #27
 800569e:	183b      	adds	r3, r7, r0
 80056a0:	3a2d      	subs	r2, #45	@ 0x2d
 80056a2:	4251      	negs	r1, r2
 80056a4:	414a      	adcs	r2, r1
 80056a6:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 80056a8:	183b      	adds	r3, r7, r0
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <numValue+0x114>
 80056b0:	2314      	movs	r3, #20
 80056b2:	e000      	b.n	80056b6 <numValue+0x116>
 80056b4:	2313      	movs	r3, #19
 80056b6:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d901      	bls.n	80056cc <numValue+0x12c>
 80056c8:	2300      	movs	r3, #0
 80056ca:	e02a      	b.n	8005722 <numValue+0x182>
        if ( len == maxdigits ) {
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d11f      	bne.n	8005714 <numValue+0x174>
            char const tmp = *ptr;
 80056d4:	230f      	movs	r3, #15
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 80056e4:	231b      	movs	r3, #27
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <numValue+0x152>
 80056ee:	4b10      	ldr	r3, [pc, #64]	@ (8005730 <numValue+0x190>)
 80056f0:	e000      	b.n	80056f4 <numValue+0x154>
 80056f2:	4b10      	ldr	r3, [pc, #64]	@ (8005734 <numValue+0x194>)
 80056f4:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	0011      	movs	r1, r2
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fa fd01 	bl	8000104 <strcmp>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	da01      	bge.n	800570a <numValue+0x16a>
 8005706:	2300      	movs	r3, #0
 8005708:	e00b      	b.n	8005722 <numValue+0x182>
            *ptr = tmp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	220f      	movs	r2, #15
 800570e:	18ba      	adds	r2, r7, r2
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	0018      	movs	r0, r3
 8005718:	f000 f9b4 	bl	8005a84 <setToNull>
 800571c:	0003      	movs	r3, r0
 800571e:	607b      	str	r3, [r7, #4]
    return ptr;
 8005720:	687b      	ldr	r3, [r7, #4]
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b008      	add	sp, #32
 8005728:	bd80      	pop	{r7, pc}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	0800e410 	.word	0x0800e410
 8005730:	0800e304 	.word	0x0800e304
 8005734:	0800e31c 	.word	0x0800e31c

08005738 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <add+0x26>
	    obj->u.c.child = property;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 800575c:	e006      	b.n	800576c <add+0x34>
	    obj->u.c.last_child->sibling = property;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	60da      	str	r2, [r3, #12]
}
 800576c:	46c0      	nop			@ (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}

08005774 <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	3b7b      	subs	r3, #123	@ 0x7b
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	4193      	sbcs	r3, r2
 800578a:	b2db      	uxtb	r3, r3
 800578c:	001a      	movs	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2200      	movs	r2, #0
 8005796:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
    ptr++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f000 f93a 	bl	8005a20 <goBlank>
 80057ac:	0003      	movs	r3, r0
 80057ae:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <objValue+0x46>
 80057b6:	2300      	movs	r3, #0
 80057b8:	e0c0      	b.n	800593c <objValue+0x1c8>
        if ( *ptr == ',' ) {
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b2c      	cmp	r3, #44	@ 0x2c
 80057c0:	d103      	bne.n	80057ca <objValue+0x56>
            ++ptr;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
            continue;
 80057c8:	e0b7      	b.n	800593a <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	7c1b      	ldrb	r3, [r3, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <objValue+0x62>
 80057d2:	227d      	movs	r2, #125	@ 0x7d
 80057d4:	e000      	b.n	80057d8 <objValue+0x64>
 80057d6:	225d      	movs	r2, #93	@ 0x5d
 80057d8:	211f      	movs	r1, #31
 80057da:	187b      	adds	r3, r7, r1
 80057dc:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	187a      	adds	r2, r7, r1
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d116      	bne.n	8005818 <objValue+0xa4>
            *ptr = '\0';
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <objValue+0x92>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	e09a      	b.n	800593c <objValue+0x1c8>
            obj->sibling = 0;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3301      	adds	r3, #1
 8005814:	60fb      	str	r3, [r7, #12]
            continue;
 8005816:	e090      	b.n	800593a <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	0010      	movs	r0, r2
 8005820:	4798      	blx	r3
 8005822:	0003      	movs	r3, r0
 8005824:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <objValue+0xbc>
 800582c:	2300      	movs	r3, #0
 800582e:	e085      	b.n	800593c <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	7c1b      	ldrb	r3, [r3, #16]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d012      	beq.n	800585e <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b22      	cmp	r3, #34	@ 0x22
 800583e:	d001      	beq.n	8005844 <objValue+0xd0>
 8005840:	2300      	movs	r3, #0
 8005842:	e07b      	b.n	800593c <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	0011      	movs	r1, r2
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff fd82 	bl	8005354 <propertyName>
 8005850:	0003      	movs	r3, r0
 8005852:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <objValue+0xf0>
 800585a:	2300      	movs	r3, #0
 800585c:	e06e      	b.n	800593c <objValue+0x1c8>
        }
        else property->name = 0;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2200      	movs	r2, #0
 8005862:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	0011      	movs	r1, r2
 800586a:	0018      	movs	r0, r3
 800586c:	f7ff ff64 	bl	8005738 <add>
        property->u.value = ptr;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b22      	cmp	r3, #34	@ 0x22
 800587c:	d02a      	beq.n	80058d4 <objValue+0x160>
 800587e:	db4d      	blt.n	800591c <objValue+0x1a8>
 8005880:	2b7b      	cmp	r3, #123	@ 0x7b
 8005882:	dc4b      	bgt.n	800591c <objValue+0x1a8>
 8005884:	2b5b      	cmp	r3, #91	@ 0x5b
 8005886:	db49      	blt.n	800591c <objValue+0x1a8>
 8005888:	3b5b      	subs	r3, #91	@ 0x5b
 800588a:	2b20      	cmp	r3, #32
 800588c:	d846      	bhi.n	800591c <objValue+0x1a8>
 800588e:	009a      	lsls	r2, r3, #2
 8005890:	4b2c      	ldr	r3, [pc, #176]	@ (8005944 <objValue+0x1d0>)
 8005892:	18d3      	adds	r3, r2, r3
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2200      	movs	r2, #0
 800589c:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2200      	movs	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	601a      	str	r2, [r3, #0]
                obj = property;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3301      	adds	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
                break;
 80058b4:	e03b      	b.n	800592e <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2201      	movs	r2, #1
 80058ba:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2200      	movs	r2, #0
 80058c0:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	601a      	str	r2, [r3, #0]
                obj = property;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
                break;
 80058d2:	e02c      	b.n	800592e <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	0011      	movs	r1, r2
 80058da:	0018      	movs	r0, r3
 80058dc:	f7ff fd6c 	bl	80053b8 <textValue>
 80058e0:	0003      	movs	r3, r0
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e023      	b.n	800592e <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	0011      	movs	r1, r2
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7ff fdcf 	bl	8005490 <trueValue>
 80058f2:	0003      	movs	r3, r0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e01a      	b.n	800592e <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff fdd8 	bl	80054b4 <falseValue>
 8005904:	0003      	movs	r3, r0
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e011      	b.n	800592e <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff fde1 	bl	80054d8 <nullValue>
 8005916:	0003      	movs	r3, r0
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	e008      	b.n	800592e <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	0011      	movs	r1, r2
 8005922:	0018      	movs	r0, r3
 8005924:	f7ff fe3c 	bl	80055a0 <numValue>
 8005928:	0003      	movs	r3, r0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d000      	beq.n	8005936 <objValue+0x1c2>
 8005934:	e736      	b.n	80057a4 <objValue+0x30>
 8005936:	2300      	movs	r3, #0
 8005938:	e000      	b.n	800593c <objValue+0x1c8>
    for(;;) {
 800593a:	e733      	b.n	80057a4 <objValue+0x30>
    }
}
 800593c:	0018      	movs	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	b008      	add	sp, #32
 8005942:	bd80      	pop	{r7, pc}
 8005944:	0800e270 	.word	0x0800e270

08005948 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3b0c      	subs	r3, #12
 8005954:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	609a      	str	r2, [r3, #8]
    return spool->mem;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	0018      	movs	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	b004      	add	sp, #16
 8005966:	bd80      	pop	{r7, pc}

08005968 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3b0c      	subs	r3, #12
 8005974:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d301      	bcc.n	8005986 <poolAlloc+0x1e>
 8005982:	2300      	movs	r3, #0
 8005984:	e00b      	b.n	800599e <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6819      	ldr	r1, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	1c50      	adds	r0, r2, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6098      	str	r0, [r3, #8]
 8005994:	0013      	movs	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	189b      	adds	r3, r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	18cb      	adds	r3, r1, r3
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b004      	add	sp, #16
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	0002      	movs	r2, r0
 80059ae:	6039      	str	r1, [r7, #0]
 80059b0:	1dfb      	adds	r3, r7, #7
 80059b2:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 80059b4:	e009      	b.n	80059ca <isOneOfThem+0x24>
        if ( ch == *set++ )
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	603a      	str	r2, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	1dfa      	adds	r2, r7, #7
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d101      	bne.n	80059ca <isOneOfThem+0x24>
            return true;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e004      	b.n	80059d4 <isOneOfThem+0x2e>
    while( *set != '\0' )
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f1      	bne.n	80059b6 <isOneOfThem+0x10>
    return false;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 80059e6:	e012      	b.n	8005a0e <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f7ff ffd8 	bl	80059a6 <isOneOfThem>
 80059f6:	0003      	movs	r3, r0
 80059f8:	001a      	movs	r2, r3
 80059fa:	2301      	movs	r3, #1
 80059fc:	4053      	eors	r3, r2
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <goWhile+0x2c>
            return str;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	e007      	b.n	8005a18 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e8      	bne.n	80059e8 <goWhile+0xc>
    }
    return 0;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b002      	add	sp, #8
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8005a28:	4a05      	ldr	r2, [pc, #20]	@ (8005a40 <goBlank+0x20>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0011      	movs	r1, r2
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f7ff ffd4 	bl	80059dc <goWhile>
 8005a34:	0003      	movs	r3, r0
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b002      	add	sp, #8
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	0800dbd8 	.word	0x0800dbd8

08005a44 <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8005a4c:	e00e      	b.n	8005a6c <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <goNum+0x3c>)
 8005a56:	18d3      	adds	r3, r2, r3
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d101      	bne.n	8005a66 <goNum+0x22>
            return str;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	e007      	b.n	8005a76 <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ec      	bne.n	8005a4e <goNum+0xa>
    }
    return 0;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b002      	add	sp, #8
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			@ (mov r8, r8)
 8005a80:	0800e410 	.word	0x0800e410

08005a84 <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <setToNull+0x38>)
 8005a92:	0011      	movs	r1, r2
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7ff ff86 	bl	80059a6 <isOneOfThem>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	001a      	movs	r2, r3
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4053      	eors	r3, r2
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <setToNull+0x2e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
    return ch;
 8005ab2:	687b      	ldr	r3, [r7, #4]
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	0800dbe0 	.word	0x0800dbe0

08005ac0 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	0002      	movs	r2, r0
 8005ac8:	1dfb      	adds	r3, r7, #7
 8005aca:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 8005acc:	1dfb      	adds	r3, r7, #7
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b2c      	cmp	r3, #44	@ 0x2c
 8005ad2:	d011      	beq.n	8005af8 <isEndOfPrimitive+0x38>
 8005ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8005b10 <isEndOfPrimitive+0x50>)
 8005ad6:	1dfb      	adds	r3, r7, #7
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	0011      	movs	r1, r2
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7ff ff62 	bl	80059a6 <isOneOfThem>
 8005ae2:	1e03      	subs	r3, r0, #0
 8005ae4:	d108      	bne.n	8005af8 <isEndOfPrimitive+0x38>
 8005ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8005b14 <isEndOfPrimitive+0x54>)
 8005ae8:	1dfb      	adds	r3, r7, #7
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	0011      	movs	r1, r2
 8005aee:	0018      	movs	r0, r3
 8005af0:	f7ff ff59 	bl	80059a6 <isOneOfThem>
 8005af4:	1e03      	subs	r3, r0, #0
 8005af6:	d001      	beq.n	8005afc <isEndOfPrimitive+0x3c>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <isEndOfPrimitive+0x3e>
 8005afc:	2300      	movs	r3, #0
 8005afe:	1c1a      	adds	r2, r3, #0
 8005b00:	2301      	movs	r3, #1
 8005b02:	4013      	ands	r3, r2
 8005b04:	b2db      	uxtb	r3, r3
}
 8005b06:	0018      	movs	r0, r3
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b002      	add	sp, #8
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	0800dbd8 	.word	0x0800dbd8
 8005b14:	0800dbe0 	.word	0x0800dbe0

08005b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005b18:	480d      	ldr	r0, [pc, #52]	@ (8005b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005b1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b1c:	f7ff faac 	bl	8005078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b20:	480c      	ldr	r0, [pc, #48]	@ (8005b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8005b22:	490d      	ldr	r1, [pc, #52]	@ (8005b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b24:	4a0d      	ldr	r2, [pc, #52]	@ (8005b5c <LoopForever+0xe>)
  movs r3, #0
 8005b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b28:	e002      	b.n	8005b30 <LoopCopyDataInit>

08005b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b2e:	3304      	adds	r3, #4

08005b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b34:	d3f9      	bcc.n	8005b2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b36:	4a0a      	ldr	r2, [pc, #40]	@ (8005b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b38:	4c0a      	ldr	r4, [pc, #40]	@ (8005b64 <LoopForever+0x16>)
  movs r3, #0
 8005b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b3c:	e001      	b.n	8005b42 <LoopFillZerobss>

08005b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b40:	3204      	adds	r2, #4

08005b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b44:	d3fb      	bcc.n	8005b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005b46:	f005 fedd 	bl	800b904 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005b4a:	f7fd ff8d 	bl	8003a68 <main>

08005b4e <LoopForever>:

LoopForever:
  b LoopForever
 8005b4e:	e7fe      	b.n	8005b4e <LoopForever>
  ldr   r0, =_estack
 8005b50:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8005b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b58:	20001058 	.word	0x20001058
  ldr r2, =_sidata
 8005b5c:	0800e778 	.word	0x0800e778
  ldr r2, =_sbss
 8005b60:	20001058 	.word	0x20001058
  ldr r4, =_ebss
 8005b64:	20002258 	.word	0x20002258

08005b68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b68:	e7fe      	b.n	8005b68 <ADC1_COMP_IRQHandler>
	...

08005b6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b72:	1dfb      	adds	r3, r7, #7
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba8 <HAL_Init+0x3c>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <HAL_Init+0x3c>)
 8005b7e:	2180      	movs	r1, #128	@ 0x80
 8005b80:	0049      	lsls	r1, r1, #1
 8005b82:	430a      	orrs	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b86:	2003      	movs	r0, #3
 8005b88:	f000 f810 	bl	8005bac <HAL_InitTick>
 8005b8c:	1e03      	subs	r3, r0, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005b90:	1dfb      	adds	r3, r7, #7
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e001      	b.n	8005b9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005b98:	f7fe ff88 	bl	8004aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b9c:	1dfb      	adds	r3, r7, #7
 8005b9e:	781b      	ldrb	r3, [r3, #0]
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40022000 	.word	0x40022000

08005bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005bb4:	230f      	movs	r3, #15
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c34 <HAL_InitTick+0x88>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d02b      	beq.n	8005c1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c38 <HAL_InitTick+0x8c>)
 8005bc6:	681c      	ldr	r4, [r3, #0]
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c34 <HAL_InitTick+0x88>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	0019      	movs	r1, r3
 8005bce:	23fa      	movs	r3, #250	@ 0xfa
 8005bd0:	0098      	lsls	r0, r3, #2
 8005bd2:	f7fa fabd 	bl	8000150 <__udivsi3>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	0019      	movs	r1, r3
 8005bda:	0020      	movs	r0, r4
 8005bdc:	f7fa fab8 	bl	8000150 <__udivsi3>
 8005be0:	0003      	movs	r3, r0
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 f929 	bl	8005e3a <HAL_SYSTICK_Config>
 8005be8:	1e03      	subs	r3, r0, #0
 8005bea:	d112      	bne.n	8005c12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d80a      	bhi.n	8005c08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	425b      	negs	r3, r3
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 f908 	bl	8005e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c00:	4b0e      	ldr	r3, [pc, #56]	@ (8005c3c <HAL_InitTick+0x90>)
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e00d      	b.n	8005c24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005c08:	230f      	movs	r3, #15
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	e008      	b.n	8005c24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c12:	230f      	movs	r3, #15
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	2201      	movs	r2, #1
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	e003      	b.n	8005c24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c1c:	230f      	movs	r3, #15
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005c24:	230f      	movs	r3, #15
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	781b      	ldrb	r3, [r3, #0]
}
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b005      	add	sp, #20
 8005c30:	bd90      	pop	{r4, r7, pc}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	20000e8c 	.word	0x20000e8c
 8005c38:	20000e84 	.word	0x20000e84
 8005c3c:	20000e88 	.word	0x20000e88

08005c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c44:	4b05      	ldr	r3, [pc, #20]	@ (8005c5c <HAL_IncTick+0x1c>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	001a      	movs	r2, r3
 8005c4a:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <HAL_IncTick+0x20>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	18d2      	adds	r2, r2, r3
 8005c50:	4b03      	ldr	r3, [pc, #12]	@ (8005c60 <HAL_IncTick+0x20>)
 8005c52:	601a      	str	r2, [r3, #0]
}
 8005c54:	46c0      	nop			@ (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	20000e8c 	.word	0x20000e8c
 8005c60:	20002108 	.word	0x20002108

08005c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  return uwTick;
 8005c68:	4b02      	ldr	r3, [pc, #8]	@ (8005c74 <HAL_GetTick+0x10>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	20002108 	.word	0x20002108

08005c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c80:	f7ff fff0 	bl	8005c64 <HAL_GetTick>
 8005c84:	0003      	movs	r3, r0
 8005c86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	d005      	beq.n	8005c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c92:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <HAL_Delay+0x44>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	001a      	movs	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	189b      	adds	r3, r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c9e:	46c0      	nop			@ (mov r8, r8)
 8005ca0:	f7ff ffe0 	bl	8005c64 <HAL_GetTick>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d8f7      	bhi.n	8005ca0 <HAL_Delay+0x28>
  {
  }
}
 8005cb0:	46c0      	nop			@ (mov r8, r8)
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b004      	add	sp, #16
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	20000e8c 	.word	0x20000e8c

08005cc0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a06      	ldr	r2, [pc, #24]	@ (8005ce8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b002      	add	sp, #8
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	fffff9ff 	.word	0xfffff9ff

08005cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	1dfb      	adds	r3, r7, #7
 8005cf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005cfa:	1dfb      	adds	r3, r7, #7
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d00:	d828      	bhi.n	8005d54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d02:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc0 <__NVIC_SetPriority+0xd4>)
 8005d04:	1dfb      	adds	r3, r7, #7
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	33c0      	adds	r3, #192	@ 0xc0
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	589b      	ldr	r3, [r3, r2]
 8005d12:	1dfa      	adds	r2, r7, #7
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	0011      	movs	r1, r2
 8005d18:	2203      	movs	r2, #3
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	00d2      	lsls	r2, r2, #3
 8005d1e:	21ff      	movs	r1, #255	@ 0xff
 8005d20:	4091      	lsls	r1, r2
 8005d22:	000a      	movs	r2, r1
 8005d24:	43d2      	mvns	r2, r2
 8005d26:	401a      	ands	r2, r3
 8005d28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	22ff      	movs	r2, #255	@ 0xff
 8005d30:	401a      	ands	r2, r3
 8005d32:	1dfb      	adds	r3, r7, #7
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	0018      	movs	r0, r3
 8005d38:	2303      	movs	r3, #3
 8005d3a:	4003      	ands	r3, r0
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d40:	481f      	ldr	r0, [pc, #124]	@ (8005dc0 <__NVIC_SetPriority+0xd4>)
 8005d42:	1dfb      	adds	r3, r7, #7
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	089b      	lsrs	r3, r3, #2
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	33c0      	adds	r3, #192	@ 0xc0
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005d52:	e031      	b.n	8005db8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d54:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc4 <__NVIC_SetPriority+0xd8>)
 8005d56:	1dfb      	adds	r3, r7, #7
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	230f      	movs	r3, #15
 8005d5e:	400b      	ands	r3, r1
 8005d60:	3b08      	subs	r3, #8
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3306      	adds	r3, #6
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	1dfa      	adds	r2, r7, #7
 8005d70:	7812      	ldrb	r2, [r2, #0]
 8005d72:	0011      	movs	r1, r2
 8005d74:	2203      	movs	r2, #3
 8005d76:	400a      	ands	r2, r1
 8005d78:	00d2      	lsls	r2, r2, #3
 8005d7a:	21ff      	movs	r1, #255	@ 0xff
 8005d7c:	4091      	lsls	r1, r2
 8005d7e:	000a      	movs	r2, r1
 8005d80:	43d2      	mvns	r2, r2
 8005d82:	401a      	ands	r2, r3
 8005d84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	019b      	lsls	r3, r3, #6
 8005d8a:	22ff      	movs	r2, #255	@ 0xff
 8005d8c:	401a      	ands	r2, r3
 8005d8e:	1dfb      	adds	r3, r7, #7
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	0018      	movs	r0, r3
 8005d94:	2303      	movs	r3, #3
 8005d96:	4003      	ands	r3, r0
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d9c:	4809      	ldr	r0, [pc, #36]	@ (8005dc4 <__NVIC_SetPriority+0xd8>)
 8005d9e:	1dfb      	adds	r3, r7, #7
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	001c      	movs	r4, r3
 8005da4:	230f      	movs	r3, #15
 8005da6:	4023      	ands	r3, r4
 8005da8:	3b08      	subs	r3, #8
 8005daa:	089b      	lsrs	r3, r3, #2
 8005dac:	430a      	orrs	r2, r1
 8005dae:	3306      	adds	r3, #6
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	18c3      	adds	r3, r0, r3
 8005db4:	3304      	adds	r3, #4
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b003      	add	sp, #12
 8005dbe:	bd90      	pop	{r4, r7, pc}
 8005dc0:	e000e100 	.word	0xe000e100
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1e5a      	subs	r2, r3, #1
 8005dd4:	2380      	movs	r3, #128	@ 0x80
 8005dd6:	045b      	lsls	r3, r3, #17
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d301      	bcc.n	8005de0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e010      	b.n	8005e02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005de0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e0c <SysTick_Config+0x44>)
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	3a01      	subs	r2, #1
 8005de6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005de8:	2301      	movs	r3, #1
 8005dea:	425b      	negs	r3, r3
 8005dec:	2103      	movs	r1, #3
 8005dee:	0018      	movs	r0, r3
 8005df0:	f7ff ff7c 	bl	8005cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005df4:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <SysTick_Config+0x44>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dfa:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <SysTick_Config+0x44>)
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	0018      	movs	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b002      	add	sp, #8
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	e000e010 	.word	0xe000e010

08005e10 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
 8005e1a:	210f      	movs	r1, #15
 8005e1c:	187b      	adds	r3, r7, r1
 8005e1e:	1c02      	adds	r2, r0, #0
 8005e20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	b25b      	sxtb	r3, r3
 8005e2a:	0011      	movs	r1, r2
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7ff ff5d 	bl	8005cec <__NVIC_SetPriority>
}
 8005e32:	46c0      	nop			@ (mov r8, r8)
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b004      	add	sp, #16
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7ff ffbf 	bl	8005dc8 <SysTick_Config>
 8005e4a:	0003      	movs	r3, r0
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b002      	add	sp, #8
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e62:	e14d      	b.n	8006100 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2101      	movs	r1, #1
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	4091      	lsls	r1, r2
 8005e6e:	000a      	movs	r2, r1
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d100      	bne.n	8005e7c <HAL_GPIO_Init+0x28>
 8005e7a:	e13e      	b.n	80060fa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2203      	movs	r2, #3
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d005      	beq.n	8005e94 <HAL_GPIO_Init+0x40>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2203      	movs	r2, #3
 8005e8e:	4013      	ands	r3, r2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d130      	bne.n	8005ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	0013      	movs	r3, r2
 8005ea4:	43da      	mvns	r2, r3
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	409a      	lsls	r2, r3
 8005eb6:	0013      	movs	r3, r2
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eca:	2201      	movs	r2, #1
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	0013      	movs	r3, r2
 8005ed2:	43da      	mvns	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	091b      	lsrs	r3, r3, #4
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	0013      	movs	r3, r2
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2203      	movs	r2, #3
 8005efc:	4013      	ands	r3, r2
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d017      	beq.n	8005f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	409a      	lsls	r2, r3
 8005f10:	0013      	movs	r3, r2
 8005f12:	43da      	mvns	r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4013      	ands	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	0013      	movs	r3, r2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2203      	movs	r2, #3
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d123      	bne.n	8005f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	08da      	lsrs	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3208      	adds	r2, #8
 8005f46:	0092      	lsls	r2, r2, #2
 8005f48:	58d3      	ldr	r3, [r2, r3]
 8005f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2207      	movs	r2, #7
 8005f50:	4013      	ands	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	220f      	movs	r2, #15
 8005f56:	409a      	lsls	r2, r3
 8005f58:	0013      	movs	r3, r2
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2107      	movs	r1, #7
 8005f6a:	400b      	ands	r3, r1
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	0013      	movs	r3, r2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	08da      	lsrs	r2, r3, #3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3208      	adds	r2, #8
 8005f80:	0092      	lsls	r2, r2, #2
 8005f82:	6939      	ldr	r1, [r7, #16]
 8005f84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	2203      	movs	r2, #3
 8005f92:	409a      	lsls	r2, r3
 8005f94:	0013      	movs	r3, r2
 8005f96:	43da      	mvns	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	401a      	ands	r2, r3
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	409a      	lsls	r2, r3
 8005fac:	0013      	movs	r3, r2
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	23c0      	movs	r3, #192	@ 0xc0
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d100      	bne.n	8005fc8 <HAL_GPIO_Init+0x174>
 8005fc6:	e098      	b.n	80060fa <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005fc8:	4a53      	ldr	r2, [pc, #332]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	089b      	lsrs	r3, r3, #2
 8005fce:	3318      	adds	r3, #24
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	589b      	ldr	r3, [r3, r2]
 8005fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2203      	movs	r2, #3
 8005fda:	4013      	ands	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	220f      	movs	r2, #15
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	0013      	movs	r3, r2
 8005fe4:	43da      	mvns	r2, r3
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	23a0      	movs	r3, #160	@ 0xa0
 8005ff0:	05db      	lsls	r3, r3, #23
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d019      	beq.n	800602a <HAL_GPIO_Init+0x1d6>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a48      	ldr	r2, [pc, #288]	@ (800611c <HAL_GPIO_Init+0x2c8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_GPIO_Init+0x1d2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a47      	ldr	r2, [pc, #284]	@ (8006120 <HAL_GPIO_Init+0x2cc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00d      	beq.n	8006022 <HAL_GPIO_Init+0x1ce>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a46      	ldr	r2, [pc, #280]	@ (8006124 <HAL_GPIO_Init+0x2d0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d007      	beq.n	800601e <HAL_GPIO_Init+0x1ca>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a45      	ldr	r2, [pc, #276]	@ (8006128 <HAL_GPIO_Init+0x2d4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d101      	bne.n	800601a <HAL_GPIO_Init+0x1c6>
 8006016:	2304      	movs	r3, #4
 8006018:	e008      	b.n	800602c <HAL_GPIO_Init+0x1d8>
 800601a:	2305      	movs	r3, #5
 800601c:	e006      	b.n	800602c <HAL_GPIO_Init+0x1d8>
 800601e:	2303      	movs	r3, #3
 8006020:	e004      	b.n	800602c <HAL_GPIO_Init+0x1d8>
 8006022:	2302      	movs	r3, #2
 8006024:	e002      	b.n	800602c <HAL_GPIO_Init+0x1d8>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_GPIO_Init+0x1d8>
 800602a:	2300      	movs	r3, #0
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	2103      	movs	r1, #3
 8006030:	400a      	ands	r2, r1
 8006032:	00d2      	lsls	r2, r2, #3
 8006034:	4093      	lsls	r3, r2
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800603c:	4936      	ldr	r1, [pc, #216]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	089b      	lsrs	r3, r3, #2
 8006042:	3318      	adds	r3, #24
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800604a:	4b33      	ldr	r3, [pc, #204]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	43da      	mvns	r2, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4013      	ands	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	2380      	movs	r3, #128	@ 0x80
 8006060:	035b      	lsls	r3, r3, #13
 8006062:	4013      	ands	r3, r2
 8006064:	d003      	beq.n	800606e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800606e:	4b2a      	ldr	r3, [pc, #168]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006074:	4b28      	ldr	r3, [pc, #160]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	43da      	mvns	r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4013      	ands	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	2380      	movs	r3, #128	@ 0x80
 800608a:	039b      	lsls	r3, r3, #14
 800608c:	4013      	ands	r3, r2
 800608e:	d003      	beq.n	8006098 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006098:	4b1f      	ldr	r3, [pc, #124]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800609e:	4a1e      	ldr	r2, [pc, #120]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 80060a0:	2384      	movs	r3, #132	@ 0x84
 80060a2:	58d3      	ldr	r3, [r2, r3]
 80060a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	43da      	mvns	r2, r3
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4013      	ands	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	2380      	movs	r3, #128	@ 0x80
 80060b6:	029b      	lsls	r3, r3, #10
 80060b8:	4013      	ands	r3, r2
 80060ba:	d003      	beq.n	80060c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060c4:	4914      	ldr	r1, [pc, #80]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 80060c6:	2284      	movs	r2, #132	@ 0x84
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80060cc:	4a12      	ldr	r2, [pc, #72]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 80060ce:	2380      	movs	r3, #128	@ 0x80
 80060d0:	58d3      	ldr	r3, [r2, r3]
 80060d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	43da      	mvns	r2, r3
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4013      	ands	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	2380      	movs	r3, #128	@ 0x80
 80060e4:	025b      	lsls	r3, r3, #9
 80060e6:	4013      	ands	r3, r2
 80060e8:	d003      	beq.n	80060f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060f2:	4909      	ldr	r1, [pc, #36]	@ (8006118 <HAL_GPIO_Init+0x2c4>)
 80060f4:	2280      	movs	r2, #128	@ 0x80
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	3301      	adds	r3, #1
 80060fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	40da      	lsrs	r2, r3
 8006108:	1e13      	subs	r3, r2, #0
 800610a:	d000      	beq.n	800610e <HAL_GPIO_Init+0x2ba>
 800610c:	e6aa      	b.n	8005e64 <HAL_GPIO_Init+0x10>
  }
}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	46c0      	nop			@ (mov r8, r8)
 8006112:	46bd      	mov	sp, r7
 8006114:	b006      	add	sp, #24
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40021800 	.word	0x40021800
 800611c:	50000400 	.word	0x50000400
 8006120:	50000800 	.word	0x50000800
 8006124:	50000c00 	.word	0x50000c00
 8006128:	50001000 	.word	0x50001000

0800612c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	000a      	movs	r2, r1
 8006136:	1cbb      	adds	r3, r7, #2
 8006138:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	1cba      	adds	r2, r7, #2
 8006140:	8812      	ldrh	r2, [r2, #0]
 8006142:	4013      	ands	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006146:	230f      	movs	r3, #15
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e003      	b.n	8006158 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006150:	230f      	movs	r3, #15
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006158:	230f      	movs	r3, #15
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	781b      	ldrb	r3, [r3, #0]
}
 800615e:	0018      	movs	r0, r3
 8006160:	46bd      	mov	sp, r7
 8006162:	b004      	add	sp, #16
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	0008      	movs	r0, r1
 8006170:	0011      	movs	r1, r2
 8006172:	1cbb      	adds	r3, r7, #2
 8006174:	1c02      	adds	r2, r0, #0
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	1c7b      	adds	r3, r7, #1
 800617a:	1c0a      	adds	r2, r1, #0
 800617c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800617e:	1c7b      	adds	r3, r7, #1
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006186:	1cbb      	adds	r3, r7, #2
 8006188:	881a      	ldrh	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800618e:	e003      	b.n	8006198 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006190:	1cbb      	adds	r3, r7, #2
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006198:	46c0      	nop			@ (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	b002      	add	sp, #8
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e08f      	b.n	80062d2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2241      	movs	r2, #65	@ 0x41
 80061b6:	5c9b      	ldrb	r3, [r3, r2]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2240      	movs	r2, #64	@ 0x40
 80061c2:	2100      	movs	r1, #0
 80061c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7fe fc97 	bl	8004afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2241      	movs	r2, #65	@ 0x41
 80061d2:	2124      	movs	r1, #36	@ 0x24
 80061d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2101      	movs	r1, #1
 80061e2:	438a      	bics	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	493b      	ldr	r1, [pc, #236]	@ (80062dc <HAL_I2C_Init+0x13c>)
 80061f0:	400a      	ands	r2, r1
 80061f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4938      	ldr	r1, [pc, #224]	@ (80062e0 <HAL_I2C_Init+0x140>)
 8006200:	400a      	ands	r2, r1
 8006202:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d108      	bne.n	800621e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2180      	movs	r1, #128	@ 0x80
 8006216:	0209      	lsls	r1, r1, #8
 8006218:	430a      	orrs	r2, r1
 800621a:	609a      	str	r2, [r3, #8]
 800621c:	e007      	b.n	800622e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2184      	movs	r1, #132	@ 0x84
 8006228:	0209      	lsls	r1, r1, #8
 800622a:	430a      	orrs	r2, r1
 800622c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d109      	bne.n	800624a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2180      	movs	r1, #128	@ 0x80
 8006242:	0109      	lsls	r1, r1, #4
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]
 8006248:	e007      	b.n	800625a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4923      	ldr	r1, [pc, #140]	@ (80062e4 <HAL_I2C_Init+0x144>)
 8006256:	400a      	ands	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4920      	ldr	r1, [pc, #128]	@ (80062e8 <HAL_I2C_Init+0x148>)
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	491a      	ldr	r1, [pc, #104]	@ (80062e0 <HAL_I2C_Init+0x140>)
 8006276:	400a      	ands	r2, r1
 8006278:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	431a      	orrs	r2, r3
 8006284:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69d9      	ldr	r1, [r3, #28]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2101      	movs	r1, #1
 80062b0:	430a      	orrs	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2241      	movs	r2, #65	@ 0x41
 80062be:	2120      	movs	r1, #32
 80062c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2242      	movs	r2, #66	@ 0x42
 80062cc:	2100      	movs	r1, #0
 80062ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b002      	add	sp, #8
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	f0ffffff 	.word	0xf0ffffff
 80062e0:	ffff7fff 	.word	0xffff7fff
 80062e4:	fffff7ff 	.word	0xfffff7ff
 80062e8:	02008000 	.word	0x02008000

080062ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b089      	sub	sp, #36	@ 0x24
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	0008      	movs	r0, r1
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	0019      	movs	r1, r3
 80062fa:	230a      	movs	r3, #10
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	1c02      	adds	r2, r0, #0
 8006300:	801a      	strh	r2, [r3, #0]
 8006302:	2308      	movs	r3, #8
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	1c0a      	adds	r2, r1, #0
 8006308:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2241      	movs	r2, #65	@ 0x41
 800630e:	5c9b      	ldrb	r3, [r3, r2]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b20      	cmp	r3, #32
 8006314:	d000      	beq.n	8006318 <HAL_I2C_Master_Transmit+0x2c>
 8006316:	e10a      	b.n	800652e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2240      	movs	r2, #64	@ 0x40
 800631c:	5c9b      	ldrb	r3, [r3, r2]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_I2C_Master_Transmit+0x3a>
 8006322:	2302      	movs	r3, #2
 8006324:	e104      	b.n	8006530 <HAL_I2C_Master_Transmit+0x244>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2240      	movs	r2, #64	@ 0x40
 800632a:	2101      	movs	r1, #1
 800632c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800632e:	f7ff fc99 	bl	8005c64 <HAL_GetTick>
 8006332:	0003      	movs	r3, r0
 8006334:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006336:	2380      	movs	r3, #128	@ 0x80
 8006338:	0219      	lsls	r1, r3, #8
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	2319      	movs	r3, #25
 8006342:	2201      	movs	r2, #1
 8006344:	f000 fa26 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8006348:	1e03      	subs	r3, r0, #0
 800634a:	d001      	beq.n	8006350 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0ef      	b.n	8006530 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2241      	movs	r2, #65	@ 0x41
 8006354:	2121      	movs	r1, #33	@ 0x21
 8006356:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2242      	movs	r2, #66	@ 0x42
 800635c:	2110      	movs	r1, #16
 800635e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2208      	movs	r2, #8
 8006370:	18ba      	adds	r2, r7, r2
 8006372:	8812      	ldrh	r2, [r2, #0]
 8006374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	2bff      	cmp	r3, #255	@ 0xff
 8006384:	d906      	bls.n	8006394 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	22ff      	movs	r2, #255	@ 0xff
 800638a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	045b      	lsls	r3, r3, #17
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e007      	b.n	80063a4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800639e:	2380      	movs	r3, #128	@ 0x80
 80063a0:	049b      	lsls	r3, r3, #18
 80063a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d027      	beq.n	80063fc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	781a      	ldrb	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	697c      	ldr	r4, [r7, #20]
 80063e8:	230a      	movs	r3, #10
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	8819      	ldrh	r1, [r3, #0]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	4b51      	ldr	r3, [pc, #324]	@ (8006538 <HAL_I2C_Master_Transmit+0x24c>)
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	0023      	movs	r3, r4
 80063f6:	f000 fc45 	bl	8006c84 <I2C_TransferConfig>
 80063fa:	e06f      	b.n	80064dc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006400:	b2da      	uxtb	r2, r3
 8006402:	697c      	ldr	r4, [r7, #20]
 8006404:	230a      	movs	r3, #10
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	8819      	ldrh	r1, [r3, #0]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	4b4a      	ldr	r3, [pc, #296]	@ (8006538 <HAL_I2C_Master_Transmit+0x24c>)
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	0023      	movs	r3, r4
 8006412:	f000 fc37 	bl	8006c84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006416:	e061      	b.n	80064dc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	0018      	movs	r0, r3
 8006420:	f000 fa10 	bl	8006844 <I2C_WaitOnTXISFlagUntilTimeout>
 8006424:	1e03      	subs	r3, r0, #0
 8006426:	d001      	beq.n	800642c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e081      	b.n	8006530 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	781a      	ldrb	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d03a      	beq.n	80064dc <HAL_I2C_Master_Transmit+0x1f0>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d136      	bne.n	80064dc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800646e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	0013      	movs	r3, r2
 8006478:	2200      	movs	r2, #0
 800647a:	2180      	movs	r1, #128	@ 0x80
 800647c:	f000 f98a 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8006480:	1e03      	subs	r3, r0, #0
 8006482:	d001      	beq.n	8006488 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e053      	b.n	8006530 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	2bff      	cmp	r3, #255	@ 0xff
 8006490:	d911      	bls.n	80064b6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	@ 0xff
 8006496:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649c:	b2da      	uxtb	r2, r3
 800649e:	2380      	movs	r3, #128	@ 0x80
 80064a0:	045c      	lsls	r4, r3, #17
 80064a2:	230a      	movs	r3, #10
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	8819      	ldrh	r1, [r3, #0]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	2300      	movs	r3, #0
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	0023      	movs	r3, r4
 80064b0:	f000 fbe8 	bl	8006c84 <I2C_TransferConfig>
 80064b4:	e012      	b.n	80064dc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	2380      	movs	r3, #128	@ 0x80
 80064c8:	049c      	lsls	r4, r3, #18
 80064ca:	230a      	movs	r3, #10
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	8819      	ldrh	r1, [r3, #0]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	0023      	movs	r3, r4
 80064d8:	f000 fbd4 	bl	8006c84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d198      	bne.n	8006418 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 f9ef 	bl	80068d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064f2:	1e03      	subs	r3, r0, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e01a      	b.n	8006530 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2220      	movs	r2, #32
 8006500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	490b      	ldr	r1, [pc, #44]	@ (800653c <HAL_I2C_Master_Transmit+0x250>)
 800650e:	400a      	ands	r2, r1
 8006510:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2241      	movs	r2, #65	@ 0x41
 8006516:	2120      	movs	r1, #32
 8006518:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2242      	movs	r2, #66	@ 0x42
 800651e:	2100      	movs	r1, #0
 8006520:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2240      	movs	r2, #64	@ 0x40
 8006526:	2100      	movs	r1, #0
 8006528:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e000      	b.n	8006530 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800652e:	2302      	movs	r3, #2
  }
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b007      	add	sp, #28
 8006536:	bd90      	pop	{r4, r7, pc}
 8006538:	80002000 	.word	0x80002000
 800653c:	fe00e800 	.word	0xfe00e800

08006540 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b089      	sub	sp, #36	@ 0x24
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	0008      	movs	r0, r1
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	0019      	movs	r1, r3
 800654e:	230a      	movs	r3, #10
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	1c02      	adds	r2, r0, #0
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	2308      	movs	r3, #8
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	1c0a      	adds	r2, r1, #0
 800655c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2241      	movs	r2, #65	@ 0x41
 8006562:	5c9b      	ldrb	r3, [r3, r2]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b20      	cmp	r3, #32
 8006568:	d000      	beq.n	800656c <HAL_I2C_Master_Receive+0x2c>
 800656a:	e0e8      	b.n	800673e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2240      	movs	r2, #64	@ 0x40
 8006570:	5c9b      	ldrb	r3, [r3, r2]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_I2C_Master_Receive+0x3a>
 8006576:	2302      	movs	r3, #2
 8006578:	e0e2      	b.n	8006740 <HAL_I2C_Master_Receive+0x200>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2240      	movs	r2, #64	@ 0x40
 800657e:	2101      	movs	r1, #1
 8006580:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006582:	f7ff fb6f 	bl	8005c64 <HAL_GetTick>
 8006586:	0003      	movs	r3, r0
 8006588:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800658a:	2380      	movs	r3, #128	@ 0x80
 800658c:	0219      	lsls	r1, r3, #8
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	2319      	movs	r3, #25
 8006596:	2201      	movs	r2, #1
 8006598:	f000 f8fc 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 800659c:	1e03      	subs	r3, r0, #0
 800659e:	d001      	beq.n	80065a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0cd      	b.n	8006740 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2241      	movs	r2, #65	@ 0x41
 80065a8:	2122      	movs	r1, #34	@ 0x22
 80065aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2242      	movs	r2, #66	@ 0x42
 80065b0:	2110      	movs	r1, #16
 80065b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2208      	movs	r2, #8
 80065c4:	18ba      	adds	r2, r7, r2
 80065c6:	8812      	ldrh	r2, [r2, #0]
 80065c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2bff      	cmp	r3, #255	@ 0xff
 80065d8:	d911      	bls.n	80065fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	@ 0xff
 80065de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	2380      	movs	r3, #128	@ 0x80
 80065e8:	045c      	lsls	r4, r3, #17
 80065ea:	230a      	movs	r3, #10
 80065ec:	18fb      	adds	r3, r7, r3
 80065ee:	8819      	ldrh	r1, [r3, #0]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	4b55      	ldr	r3, [pc, #340]	@ (8006748 <HAL_I2C_Master_Receive+0x208>)
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	0023      	movs	r3, r4
 80065f8:	f000 fb44 	bl	8006c84 <I2C_TransferConfig>
 80065fc:	e076      	b.n	80066ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800660c:	b2da      	uxtb	r2, r3
 800660e:	2380      	movs	r3, #128	@ 0x80
 8006610:	049c      	lsls	r4, r3, #18
 8006612:	230a      	movs	r3, #10
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	8819      	ldrh	r1, [r3, #0]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	4b4b      	ldr	r3, [pc, #300]	@ (8006748 <HAL_I2C_Master_Receive+0x208>)
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	0023      	movs	r3, r4
 8006620:	f000 fb30 	bl	8006c84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006624:	e062      	b.n	80066ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	0018      	movs	r0, r3
 800662e:	f000 f993 	bl	8006958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006632:	1e03      	subs	r3, r0, #0
 8006634:	d001      	beq.n	800663a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e082      	b.n	8006740 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d03a      	beq.n	80066ec <HAL_I2C_Master_Receive+0x1ac>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800667a:	2b00      	cmp	r3, #0
 800667c:	d136      	bne.n	80066ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800667e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	0013      	movs	r3, r2
 8006688:	2200      	movs	r2, #0
 800668a:	2180      	movs	r1, #128	@ 0x80
 800668c:	f000 f882 	bl	8006794 <I2C_WaitOnFlagUntilTimeout>
 8006690:	1e03      	subs	r3, r0, #0
 8006692:	d001      	beq.n	8006698 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e053      	b.n	8006740 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2bff      	cmp	r3, #255	@ 0xff
 80066a0:	d911      	bls.n	80066c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	22ff      	movs	r2, #255	@ 0xff
 80066a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	2380      	movs	r3, #128	@ 0x80
 80066b0:	045c      	lsls	r4, r3, #17
 80066b2:	230a      	movs	r3, #10
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	8819      	ldrh	r1, [r3, #0]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	0023      	movs	r3, r4
 80066c0:	f000 fae0 	bl	8006c84 <I2C_TransferConfig>
 80066c4:	e012      	b.n	80066ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	2380      	movs	r3, #128	@ 0x80
 80066d8:	049c      	lsls	r4, r3, #18
 80066da:	230a      	movs	r3, #10
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	8819      	ldrh	r1, [r3, #0]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	0023      	movs	r3, r4
 80066e8:	f000 facc 	bl	8006c84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d197      	bne.n	8006626 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	0018      	movs	r0, r3
 80066fe:	f000 f8e7 	bl	80068d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006702:	1e03      	subs	r3, r0, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e01a      	b.n	8006740 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2220      	movs	r2, #32
 8006710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	490b      	ldr	r1, [pc, #44]	@ (800674c <HAL_I2C_Master_Receive+0x20c>)
 800671e:	400a      	ands	r2, r1
 8006720:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2241      	movs	r2, #65	@ 0x41
 8006726:	2120      	movs	r1, #32
 8006728:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2242      	movs	r2, #66	@ 0x42
 800672e:	2100      	movs	r1, #0
 8006730:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2240      	movs	r2, #64	@ 0x40
 8006736:	2100      	movs	r1, #0
 8006738:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e000      	b.n	8006740 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800673e:	2302      	movs	r3, #2
  }
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b007      	add	sp, #28
 8006746:	bd90      	pop	{r4, r7, pc}
 8006748:	80002400 	.word	0x80002400
 800674c:	fe00e800 	.word	0xfe00e800

08006750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	2202      	movs	r2, #2
 8006760:	4013      	ands	r3, r2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d103      	bne.n	800676e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2201      	movs	r2, #1
 8006776:	4013      	ands	r3, r2
 8006778:	2b01      	cmp	r3, #1
 800677a:	d007      	beq.n	800678c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2101      	movs	r1, #1
 8006788:	430a      	orrs	r2, r1
 800678a:	619a      	str	r2, [r3, #24]
  }
}
 800678c:	46c0      	nop			@ (mov r8, r8)
 800678e:	46bd      	mov	sp, r7
 8006790:	b002      	add	sp, #8
 8006792:	bd80      	pop	{r7, pc}

08006794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	1dfb      	adds	r3, r7, #7
 80067a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067a4:	e03a      	b.n	800681c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f000 f971 	bl	8006a94 <I2C_IsErrorOccurred>
 80067b2:	1e03      	subs	r3, r0, #0
 80067b4:	d001      	beq.n	80067ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e040      	b.n	800683c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	3301      	adds	r3, #1
 80067be:	d02d      	beq.n	800681c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c0:	f7ff fa50 	bl	8005c64 <HAL_GetTick>
 80067c4:	0002      	movs	r2, r0
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d302      	bcc.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d122      	bne.n	800681c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	4013      	ands	r3, r2
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	425a      	negs	r2, r3
 80067e6:	4153      	adcs	r3, r2
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	001a      	movs	r2, r3
 80067ec:	1dfb      	adds	r3, r7, #7
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d113      	bne.n	800681c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f8:	2220      	movs	r2, #32
 80067fa:	431a      	orrs	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2241      	movs	r2, #65	@ 0x41
 8006804:	2120      	movs	r1, #32
 8006806:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2242      	movs	r2, #66	@ 0x42
 800680c:	2100      	movs	r1, #0
 800680e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2240      	movs	r2, #64	@ 0x40
 8006814:	2100      	movs	r1, #0
 8006816:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e00f      	b.n	800683c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	425a      	negs	r2, r3
 800682c:	4153      	adcs	r3, r2
 800682e:	b2db      	uxtb	r3, r3
 8006830:	001a      	movs	r2, r3
 8006832:	1dfb      	adds	r3, r7, #7
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d0b5      	beq.n	80067a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b004      	add	sp, #16
 8006842:	bd80      	pop	{r7, pc}

08006844 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006850:	e032      	b.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	0018      	movs	r0, r3
 800685a:	f000 f91b 	bl	8006a94 <I2C_IsErrorOccurred>
 800685e:	1e03      	subs	r3, r0, #0
 8006860:	d001      	beq.n	8006866 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e030      	b.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	3301      	adds	r3, #1
 800686a:	d025      	beq.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686c:	f7ff f9fa 	bl	8005c64 <HAL_GetTick>
 8006870:	0002      	movs	r2, r0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	429a      	cmp	r2, r3
 800687a:	d302      	bcc.n	8006882 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d11a      	bne.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2202      	movs	r2, #2
 800688a:	4013      	ands	r3, r2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d013      	beq.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006894:	2220      	movs	r2, #32
 8006896:	431a      	orrs	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2241      	movs	r2, #65	@ 0x41
 80068a0:	2120      	movs	r1, #32
 80068a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2242      	movs	r2, #66	@ 0x42
 80068a8:	2100      	movs	r1, #0
 80068aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2240      	movs	r2, #64	@ 0x40
 80068b0:	2100      	movs	r1, #0
 80068b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e007      	b.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2202      	movs	r2, #2
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d1c5      	bne.n	8006852 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b004      	add	sp, #16
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068dc:	e02f      	b.n	800693e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f000 f8d5 	bl	8006a94 <I2C_IsErrorOccurred>
 80068ea:	1e03      	subs	r3, r0, #0
 80068ec:	d001      	beq.n	80068f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e02d      	b.n	800694e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7ff f9b7 	bl	8005c64 <HAL_GetTick>
 80068f6:	0002      	movs	r2, r0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11a      	bne.n	800693e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	2220      	movs	r2, #32
 8006910:	4013      	ands	r3, r2
 8006912:	2b20      	cmp	r3, #32
 8006914:	d013      	beq.n	800693e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691a:	2220      	movs	r2, #32
 800691c:	431a      	orrs	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2241      	movs	r2, #65	@ 0x41
 8006926:	2120      	movs	r1, #32
 8006928:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2242      	movs	r2, #66	@ 0x42
 800692e:	2100      	movs	r1, #0
 8006930:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2240      	movs	r2, #64	@ 0x40
 8006936:	2100      	movs	r1, #0
 8006938:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e007      	b.n	800694e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2220      	movs	r2, #32
 8006946:	4013      	ands	r3, r2
 8006948:	2b20      	cmp	r3, #32
 800694a:	d1c8      	bne.n	80068de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	0018      	movs	r0, r3
 8006950:	46bd      	mov	sp, r7
 8006952:	b004      	add	sp, #16
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	2317      	movs	r3, #23
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800696c:	e07b      	b.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	0018      	movs	r0, r3
 8006976:	f000 f88d 	bl	8006a94 <I2C_IsErrorOccurred>
 800697a:	1e03      	subs	r3, r0, #0
 800697c:	d003      	beq.n	8006986 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800697e:	2317      	movs	r3, #23
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	2201      	movs	r2, #1
 8006984:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2220      	movs	r2, #32
 800698e:	4013      	ands	r3, r2
 8006990:	2b20      	cmp	r3, #32
 8006992:	d140      	bne.n	8006a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8006994:	2117      	movs	r1, #23
 8006996:	187b      	adds	r3, r7, r1
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d13b      	bne.n	8006a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	2204      	movs	r2, #4
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d106      	bne.n	80069ba <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80069b4:	187b      	adds	r3, r7, r1
 80069b6:	2200      	movs	r2, #0
 80069b8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	2210      	movs	r2, #16
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d123      	bne.n	8006a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2210      	movs	r2, #16
 80069ce:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2204      	movs	r2, #4
 80069d4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2220      	movs	r2, #32
 80069dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4929      	ldr	r1, [pc, #164]	@ (8006a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80069ea:	400a      	ands	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2241      	movs	r2, #65	@ 0x41
 80069f2:	2120      	movs	r1, #32
 80069f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2242      	movs	r2, #66	@ 0x42
 80069fa:	2100      	movs	r1, #0
 80069fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2240      	movs	r2, #64	@ 0x40
 8006a02:	2100      	movs	r1, #0
 8006a04:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006a06:	2317      	movs	r3, #23
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e002      	b.n	8006a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006a16:	f7ff f925 	bl	8005c64 <HAL_GetTick>
 8006a1a:	0002      	movs	r2, r0
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d11c      	bne.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8006a2c:	2017      	movs	r0, #23
 8006a2e:	183b      	adds	r3, r7, r0
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d117      	bne.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d010      	beq.n	8006a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a48:	2220      	movs	r2, #32
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2241      	movs	r2, #65	@ 0x41
 8006a54:	2120      	movs	r1, #32
 8006a56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2240      	movs	r2, #64	@ 0x40
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006a60:	183b      	adds	r3, r7, r0
 8006a62:	2201      	movs	r2, #1
 8006a64:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d005      	beq.n	8006a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006a74:	2317      	movs	r3, #23
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d100      	bne.n	8006a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006a7e:	e776      	b.n	800696e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8006a80:	2317      	movs	r3, #23
 8006a82:	18fb      	adds	r3, r7, r3
 8006a84:	781b      	ldrb	r3, [r3, #0]
}
 8006a86:	0018      	movs	r0, r3
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	b006      	add	sp, #24
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	46c0      	nop			@ (mov r8, r8)
 8006a90:	fe00e800 	.word	0xfe00e800

08006a94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	@ 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa0:	2327      	movs	r3, #39	@ 0x27
 8006aa2:	18fb      	adds	r3, r7, r3
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2210      	movs	r2, #16
 8006abc:	4013      	ands	r3, r2
 8006abe:	d100      	bne.n	8006ac2 <I2C_IsErrorOccurred+0x2e>
 8006ac0:	e079      	b.n	8006bb6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2210      	movs	r2, #16
 8006ac8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006aca:	e057      	b.n	8006b7c <I2C_IsErrorOccurred+0xe8>
 8006acc:	2227      	movs	r2, #39	@ 0x27
 8006ace:	18bb      	adds	r3, r7, r2
 8006ad0:	18ba      	adds	r2, r7, r2
 8006ad2:	7812      	ldrb	r2, [r2, #0]
 8006ad4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	d04f      	beq.n	8006b7c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006adc:	f7ff f8c2 	bl	8005c64 <HAL_GetTick>
 8006ae0:	0002      	movs	r2, r0
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d302      	bcc.n	8006af2 <I2C_IsErrorOccurred+0x5e>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d144      	bne.n	8006b7c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	2380      	movs	r3, #128	@ 0x80
 8006afa:	01db      	lsls	r3, r3, #7
 8006afc:	4013      	ands	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b00:	2013      	movs	r0, #19
 8006b02:	183b      	adds	r3, r7, r0
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	2142      	movs	r1, #66	@ 0x42
 8006b08:	5c52      	ldrb	r2, [r2, r1]
 8006b0a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	2380      	movs	r3, #128	@ 0x80
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	401a      	ands	r2, r3
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d126      	bne.n	8006b6e <I2C_IsErrorOccurred+0xda>
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	2380      	movs	r3, #128	@ 0x80
 8006b24:	01db      	lsls	r3, r3, #7
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d021      	beq.n	8006b6e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006b2a:	183b      	adds	r3, r7, r0
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d01d      	beq.n	8006b6e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2180      	movs	r1, #128	@ 0x80
 8006b3e:	01c9      	lsls	r1, r1, #7
 8006b40:	430a      	orrs	r2, r1
 8006b42:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b44:	f7ff f88e 	bl	8005c64 <HAL_GetTick>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b4c:	e00f      	b.n	8006b6e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b4e:	f7ff f889 	bl	8005c64 <HAL_GetTick>
 8006b52:	0002      	movs	r2, r0
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b19      	cmp	r3, #25
 8006b5a:	d908      	bls.n	8006b6e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	4313      	orrs	r3, r2
 8006b62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b64:	2327      	movs	r3, #39	@ 0x27
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	2201      	movs	r2, #1
 8006b6a:	701a      	strb	r2, [r3, #0]

              break;
 8006b6c:	e006      	b.n	8006b7c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	2220      	movs	r2, #32
 8006b76:	4013      	ands	r3, r2
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d1e8      	bne.n	8006b4e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2220      	movs	r2, #32
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d004      	beq.n	8006b94 <I2C_IsErrorOccurred+0x100>
 8006b8a:	2327      	movs	r3, #39	@ 0x27
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d09b      	beq.n	8006acc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b94:	2327      	movs	r3, #39	@ 0x27
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	4313      	orrs	r3, r2
 8006bac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006bae:	2327      	movs	r3, #39	@ 0x27
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	2380      	movs	r3, #128	@ 0x80
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d00c      	beq.n	8006be2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2280      	movs	r2, #128	@ 0x80
 8006bd6:	0052      	lsls	r2, r2, #1
 8006bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bda:	2327      	movs	r3, #39	@ 0x27
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	2201      	movs	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	2380      	movs	r3, #128	@ 0x80
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	4013      	ands	r3, r2
 8006bea:	d00c      	beq.n	8006c06 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2208      	movs	r2, #8
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2280      	movs	r2, #128	@ 0x80
 8006bfa:	00d2      	lsls	r2, r2, #3
 8006bfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bfe:	2327      	movs	r3, #39	@ 0x27
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	2201      	movs	r2, #1
 8006c04:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	2380      	movs	r3, #128	@ 0x80
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d00c      	beq.n	8006c2a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	2202      	movs	r2, #2
 8006c14:	4313      	orrs	r3, r2
 8006c16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2280      	movs	r2, #128	@ 0x80
 8006c1e:	0092      	lsls	r2, r2, #2
 8006c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c22:	2327      	movs	r3, #39	@ 0x27
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006c2a:	2327      	movs	r3, #39	@ 0x27
 8006c2c:	18fb      	adds	r3, r7, r3
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01d      	beq.n	8006c70 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	0018      	movs	r0, r3
 8006c38:	f7ff fd8a 	bl	8006750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	490e      	ldr	r1, [pc, #56]	@ (8006c80 <I2C_IsErrorOccurred+0x1ec>)
 8006c48:	400a      	ands	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2241      	movs	r2, #65	@ 0x41
 8006c5c:	2120      	movs	r1, #32
 8006c5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2242      	movs	r2, #66	@ 0x42
 8006c64:	2100      	movs	r1, #0
 8006c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2240      	movs	r2, #64	@ 0x40
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006c70:	2327      	movs	r3, #39	@ 0x27
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	781b      	ldrb	r3, [r3, #0]
}
 8006c76:	0018      	movs	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b00a      	add	sp, #40	@ 0x28
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	fe00e800 	.word	0xfe00e800

08006c84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c84:	b590      	push	{r4, r7, lr}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	0008      	movs	r0, r1
 8006c8e:	0011      	movs	r1, r2
 8006c90:	607b      	str	r3, [r7, #4]
 8006c92:	240a      	movs	r4, #10
 8006c94:	193b      	adds	r3, r7, r4
 8006c96:	1c02      	adds	r2, r0, #0
 8006c98:	801a      	strh	r2, [r3, #0]
 8006c9a:	2009      	movs	r0, #9
 8006c9c:	183b      	adds	r3, r7, r0
 8006c9e:	1c0a      	adds	r2, r1, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ca2:	193b      	adds	r3, r7, r4
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	059b      	lsls	r3, r3, #22
 8006ca8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006caa:	183b      	adds	r3, r7, r0
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	0419      	lsls	r1, r3, #16
 8006cb0:	23ff      	movs	r3, #255	@ 0xff
 8006cb2:	041b      	lsls	r3, r3, #16
 8006cb4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cb6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cce:	0d51      	lsrs	r1, r2, #21
 8006cd0:	2280      	movs	r2, #128	@ 0x80
 8006cd2:	00d2      	lsls	r2, r2, #3
 8006cd4:	400a      	ands	r2, r1
 8006cd6:	4907      	ldr	r1, [pc, #28]	@ (8006cf4 <I2C_TransferConfig+0x70>)
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	43d2      	mvns	r2, r2
 8006cdc:	401a      	ands	r2, r3
 8006cde:	0011      	movs	r1, r2
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b007      	add	sp, #28
 8006cf0:	bd90      	pop	{r4, r7, pc}
 8006cf2:	46c0      	nop			@ (mov r8, r8)
 8006cf4:	03ff63ff 	.word	0x03ff63ff

08006cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2241      	movs	r2, #65	@ 0x41
 8006d06:	5c9b      	ldrb	r3, [r3, r2]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d138      	bne.n	8006d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2240      	movs	r2, #64	@ 0x40
 8006d12:	5c9b      	ldrb	r3, [r3, r2]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e032      	b.n	8006d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2240      	movs	r2, #64	@ 0x40
 8006d20:	2101      	movs	r1, #1
 8006d22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2241      	movs	r2, #65	@ 0x41
 8006d28:	2124      	movs	r1, #36	@ 0x24
 8006d2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2101      	movs	r1, #1
 8006d38:	438a      	bics	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4911      	ldr	r1, [pc, #68]	@ (8006d8c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006d48:	400a      	ands	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2101      	movs	r1, #1
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2241      	movs	r2, #65	@ 0x41
 8006d70:	2120      	movs	r1, #32
 8006d72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2240      	movs	r2, #64	@ 0x40
 8006d78:	2100      	movs	r1, #0
 8006d7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b002      	add	sp, #8
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	ffffefff 	.word	0xffffefff

08006d90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2241      	movs	r2, #65	@ 0x41
 8006d9e:	5c9b      	ldrb	r3, [r3, r2]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d139      	bne.n	8006e1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2240      	movs	r2, #64	@ 0x40
 8006daa:	5c9b      	ldrb	r3, [r3, r2]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e033      	b.n	8006e1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2240      	movs	r2, #64	@ 0x40
 8006db8:	2101      	movs	r1, #1
 8006dba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2241      	movs	r2, #65	@ 0x41
 8006dc0:	2124      	movs	r1, #36	@ 0x24
 8006dc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2101      	movs	r1, #1
 8006dd0:	438a      	bics	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a11      	ldr	r2, [pc, #68]	@ (8006e24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2101      	movs	r1, #1
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2241      	movs	r2, #65	@ 0x41
 8006e0a:	2120      	movs	r1, #32
 8006e0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2240      	movs	r2, #64	@ 0x40
 8006e12:	2100      	movs	r1, #0
 8006e14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e000      	b.n	8006e1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e1a:	2302      	movs	r3, #2
  }
}
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	b004      	add	sp, #16
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	fffff0ff 	.word	0xfffff0ff

08006e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006e30:	4b19      	ldr	r3, [pc, #100]	@ (8006e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a19      	ldr	r2, [pc, #100]	@ (8006e9c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	0019      	movs	r1, r3
 8006e3a:	4b17      	ldr	r3, [pc, #92]	@ (8006e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	2380      	movs	r3, #128	@ 0x80
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d11f      	bne.n	8006e8c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006e4c:	4b14      	ldr	r3, [pc, #80]	@ (8006ea0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	0013      	movs	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	189b      	adds	r3, r3, r2
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	4912      	ldr	r1, [pc, #72]	@ (8006ea4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f7f9 f978 	bl	8000150 <__udivsi3>
 8006e60:	0003      	movs	r3, r0
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e66:	e008      	b.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e001      	b.n	8006e7a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e009      	b.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e7a:	4b07      	ldr	r3, [pc, #28]	@ (8006e98 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	2380      	movs	r3, #128	@ 0x80
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	401a      	ands	r2, r3
 8006e84:	2380      	movs	r3, #128	@ 0x80
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d0ed      	beq.n	8006e68 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	0018      	movs	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b004      	add	sp, #16
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	46c0      	nop			@ (mov r8, r8)
 8006e98:	40007000 	.word	0x40007000
 8006e9c:	fffff9ff 	.word	0xfffff9ff
 8006ea0:	20000e84 	.word	0x20000e84
 8006ea4:	000f4240 	.word	0x000f4240

08006ea8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006eac:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <LL_RCC_GetAPB1Prescaler+0x14>)
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	23e0      	movs	r3, #224	@ 0xe0
 8006eb2:	01db      	lsls	r3, r3, #7
 8006eb4:	4013      	ands	r3, r2
}
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40021000 	.word	0x40021000

08006ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f000 fb50 	bl	8007574 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	4013      	ands	r3, r2
 8006edc:	d100      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x20>
 8006ede:	e07c      	b.n	8006fda <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee0:	4bc3      	ldr	r3, [pc, #780]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2238      	movs	r2, #56	@ 0x38
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eea:	4bc1      	ldr	r3, [pc, #772]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2203      	movs	r2, #3
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b10      	cmp	r3, #16
 8006ef8:	d102      	bne.n	8006f00 <HAL_RCC_OscConfig+0x40>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d002      	beq.n	8006f06 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d10b      	bne.n	8006f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f06:	4bba      	ldr	r3, [pc, #744]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	2380      	movs	r3, #128	@ 0x80
 8006f0c:	029b      	lsls	r3, r3, #10
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d062      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x118>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d15e      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e32a      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	2380      	movs	r3, #128	@ 0x80
 8006f24:	025b      	lsls	r3, r3, #9
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d107      	bne.n	8006f3a <HAL_RCC_OscConfig+0x7a>
 8006f2a:	4bb1      	ldr	r3, [pc, #708]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4bb0      	ldr	r3, [pc, #704]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f30:	2180      	movs	r1, #128	@ 0x80
 8006f32:	0249      	lsls	r1, r1, #9
 8006f34:	430a      	orrs	r2, r1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e020      	b.n	8006f7c <HAL_RCC_OscConfig+0xbc>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	23a0      	movs	r3, #160	@ 0xa0
 8006f40:	02db      	lsls	r3, r3, #11
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d10e      	bne.n	8006f64 <HAL_RCC_OscConfig+0xa4>
 8006f46:	4baa      	ldr	r3, [pc, #680]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4ba9      	ldr	r3, [pc, #676]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f4c:	2180      	movs	r1, #128	@ 0x80
 8006f4e:	02c9      	lsls	r1, r1, #11
 8006f50:	430a      	orrs	r2, r1
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	4ba6      	ldr	r3, [pc, #664]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	4ba5      	ldr	r3, [pc, #660]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f5a:	2180      	movs	r1, #128	@ 0x80
 8006f5c:	0249      	lsls	r1, r1, #9
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	e00b      	b.n	8006f7c <HAL_RCC_OscConfig+0xbc>
 8006f64:	4ba2      	ldr	r3, [pc, #648]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	4ba1      	ldr	r3, [pc, #644]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f6a:	49a2      	ldr	r1, [pc, #648]	@ (80071f4 <HAL_RCC_OscConfig+0x334>)
 8006f6c:	400a      	ands	r2, r1
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	4b9f      	ldr	r3, [pc, #636]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	4b9e      	ldr	r3, [pc, #632]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f76:	49a0      	ldr	r1, [pc, #640]	@ (80071f8 <HAL_RCC_OscConfig+0x338>)
 8006f78:	400a      	ands	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d014      	beq.n	8006fae <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fe fe6e 	bl	8005c64 <HAL_GetTick>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f8e:	f7fe fe69 	bl	8005c64 <HAL_GetTick>
 8006f92:	0002      	movs	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b64      	cmp	r3, #100	@ 0x64
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e2e9      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fa0:	4b93      	ldr	r3, [pc, #588]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d0f0      	beq.n	8006f8e <HAL_RCC_OscConfig+0xce>
 8006fac:	e015      	b.n	8006fda <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fae:	f7fe fe59 	bl	8005c64 <HAL_GetTick>
 8006fb2:	0003      	movs	r3, r0
 8006fb4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb8:	f7fe fe54 	bl	8005c64 <HAL_GetTick>
 8006fbc:	0002      	movs	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b64      	cmp	r3, #100	@ 0x64
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e2d4      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fca:	4b89      	ldr	r3, [pc, #548]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	2380      	movs	r3, #128	@ 0x80
 8006fd0:	029b      	lsls	r3, r3, #10
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0xf8>
 8006fd6:	e000      	b.n	8006fda <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	d100      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x126>
 8006fe4:	e099      	b.n	800711a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fe6:	4b82      	ldr	r3, [pc, #520]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2238      	movs	r2, #56	@ 0x38
 8006fec:	4013      	ands	r3, r2
 8006fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ff0:	4b7f      	ldr	r3, [pc, #508]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d102      	bne.n	8007006 <HAL_RCC_OscConfig+0x146>
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d002      	beq.n	800700c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d135      	bne.n	8007078 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800700c:	4b78      	ldr	r3, [pc, #480]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	2380      	movs	r3, #128	@ 0x80
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4013      	ands	r3, r2
 8007016:	d005      	beq.n	8007024 <HAL_RCC_OscConfig+0x164>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e2a7      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007024:	4b72      	ldr	r3, [pc, #456]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	4a74      	ldr	r2, [pc, #464]	@ (80071fc <HAL_RCC_OscConfig+0x33c>)
 800702a:	4013      	ands	r3, r2
 800702c:	0019      	movs	r1, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	021a      	lsls	r2, r3, #8
 8007034:	4b6e      	ldr	r3, [pc, #440]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d112      	bne.n	8007066 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007040:	4b6b      	ldr	r3, [pc, #428]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6e      	ldr	r2, [pc, #440]	@ (8007200 <HAL_RCC_OscConfig+0x340>)
 8007046:	4013      	ands	r3, r2
 8007048:	0019      	movs	r1, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	4b68      	ldr	r3, [pc, #416]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007050:	430a      	orrs	r2, r1
 8007052:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007054:	4b66      	ldr	r3, [pc, #408]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0adb      	lsrs	r3, r3, #11
 800705a:	2207      	movs	r2, #7
 800705c:	4013      	ands	r3, r2
 800705e:	4a69      	ldr	r2, [pc, #420]	@ (8007204 <HAL_RCC_OscConfig+0x344>)
 8007060:	40da      	lsrs	r2, r3
 8007062:	4b69      	ldr	r3, [pc, #420]	@ (8007208 <HAL_RCC_OscConfig+0x348>)
 8007064:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007066:	4b69      	ldr	r3, [pc, #420]	@ (800720c <HAL_RCC_OscConfig+0x34c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	0018      	movs	r0, r3
 800706c:	f7fe fd9e 	bl	8005bac <HAL_InitTick>
 8007070:	1e03      	subs	r3, r0, #0
 8007072:	d051      	beq.n	8007118 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e27d      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d030      	beq.n	80070e2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007080:	4b5b      	ldr	r3, [pc, #364]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5e      	ldr	r2, [pc, #376]	@ (8007200 <HAL_RCC_OscConfig+0x340>)
 8007086:	4013      	ands	r3, r2
 8007088:	0019      	movs	r1, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	4b58      	ldr	r3, [pc, #352]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007090:	430a      	orrs	r2, r1
 8007092:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007094:	4b56      	ldr	r3, [pc, #344]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	4b55      	ldr	r3, [pc, #340]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 800709a:	2180      	movs	r1, #128	@ 0x80
 800709c:	0049      	lsls	r1, r1, #1
 800709e:	430a      	orrs	r2, r1
 80070a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a2:	f7fe fddf 	bl	8005c64 <HAL_GetTick>
 80070a6:	0003      	movs	r3, r0
 80070a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070ac:	f7fe fdda 	bl	8005c64 <HAL_GetTick>
 80070b0:	0002      	movs	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e25a      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070be:	4b4c      	ldr	r3, [pc, #304]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	2380      	movs	r3, #128	@ 0x80
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4013      	ands	r3, r2
 80070c8:	d0f0      	beq.n	80070ac <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ca:	4b49      	ldr	r3, [pc, #292]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	4a4b      	ldr	r2, [pc, #300]	@ (80071fc <HAL_RCC_OscConfig+0x33c>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	0019      	movs	r1, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	021a      	lsls	r2, r3, #8
 80070da:	4b45      	ldr	r3, [pc, #276]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
 80070e0:	e01b      	b.n	800711a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80070e2:	4b43      	ldr	r3, [pc, #268]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4b42      	ldr	r3, [pc, #264]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80070e8:	4949      	ldr	r1, [pc, #292]	@ (8007210 <HAL_RCC_OscConfig+0x350>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ee:	f7fe fdb9 	bl	8005c64 <HAL_GetTick>
 80070f2:	0003      	movs	r3, r0
 80070f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f8:	f7fe fdb4 	bl	8005c64 <HAL_GetTick>
 80070fc:	0002      	movs	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e234      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800710a:	4b39      	ldr	r3, [pc, #228]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	2380      	movs	r3, #128	@ 0x80
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4013      	ands	r3, r2
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x238>
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007118:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2208      	movs	r2, #8
 8007120:	4013      	ands	r3, r2
 8007122:	d047      	beq.n	80071b4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007124:	4b32      	ldr	r3, [pc, #200]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2238      	movs	r2, #56	@ 0x38
 800712a:	4013      	ands	r3, r2
 800712c:	2b18      	cmp	r3, #24
 800712e:	d10a      	bne.n	8007146 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007130:	4b2f      	ldr	r3, [pc, #188]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007134:	2202      	movs	r2, #2
 8007136:	4013      	ands	r3, r2
 8007138:	d03c      	beq.n	80071b4 <HAL_RCC_OscConfig+0x2f4>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d138      	bne.n	80071b4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e216      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d019      	beq.n	8007182 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800714e:	4b28      	ldr	r3, [pc, #160]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007150:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007152:	4b27      	ldr	r3, [pc, #156]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007154:	2101      	movs	r1, #1
 8007156:	430a      	orrs	r2, r1
 8007158:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715a:	f7fe fd83 	bl	8005c64 <HAL_GetTick>
 800715e:	0003      	movs	r3, r0
 8007160:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007164:	f7fe fd7e 	bl	8005c64 <HAL_GetTick>
 8007168:	0002      	movs	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e1fe      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007176:	4b1e      	ldr	r3, [pc, #120]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717a:	2202      	movs	r2, #2
 800717c:	4013      	ands	r3, r2
 800717e:	d0f1      	beq.n	8007164 <HAL_RCC_OscConfig+0x2a4>
 8007180:	e018      	b.n	80071b4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007182:	4b1b      	ldr	r3, [pc, #108]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007184:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007186:	4b1a      	ldr	r3, [pc, #104]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007188:	2101      	movs	r1, #1
 800718a:	438a      	bics	r2, r1
 800718c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fe fd69 	bl	8005c64 <HAL_GetTick>
 8007192:	0003      	movs	r3, r0
 8007194:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007198:	f7fe fd64 	bl	8005c64 <HAL_GetTick>
 800719c:	0002      	movs	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e1e4      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071aa:	4b11      	ldr	r3, [pc, #68]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80071ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ae:	2202      	movs	r2, #2
 80071b0:	4013      	ands	r3, r2
 80071b2:	d1f1      	bne.n	8007198 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2204      	movs	r2, #4
 80071ba:	4013      	ands	r3, r2
 80071bc:	d100      	bne.n	80071c0 <HAL_RCC_OscConfig+0x300>
 80071be:	e0c7      	b.n	8007350 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071c0:	231f      	movs	r3, #31
 80071c2:	18fb      	adds	r3, r7, r3
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80071c8:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2238      	movs	r2, #56	@ 0x38
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d11f      	bne.n	8007214 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80071d4:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <HAL_RCC_OscConfig+0x330>)
 80071d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d8:	2202      	movs	r2, #2
 80071da:	4013      	ands	r3, r2
 80071dc:	d100      	bne.n	80071e0 <HAL_RCC_OscConfig+0x320>
 80071de:	e0b7      	b.n	8007350 <HAL_RCC_OscConfig+0x490>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d000      	beq.n	80071ea <HAL_RCC_OscConfig+0x32a>
 80071e8:	e0b2      	b.n	8007350 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e1c2      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
 80071ee:	46c0      	nop			@ (mov r8, r8)
 80071f0:	40021000 	.word	0x40021000
 80071f4:	fffeffff 	.word	0xfffeffff
 80071f8:	fffbffff 	.word	0xfffbffff
 80071fc:	ffff80ff 	.word	0xffff80ff
 8007200:	ffffc7ff 	.word	0xffffc7ff
 8007204:	00f42400 	.word	0x00f42400
 8007208:	20000e84 	.word	0x20000e84
 800720c:	20000e88 	.word	0x20000e88
 8007210:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007214:	4bb5      	ldr	r3, [pc, #724]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007216:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007218:	2380      	movs	r3, #128	@ 0x80
 800721a:	055b      	lsls	r3, r3, #21
 800721c:	4013      	ands	r3, r2
 800721e:	d101      	bne.n	8007224 <HAL_RCC_OscConfig+0x364>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_RCC_OscConfig+0x366>
 8007224:	2300      	movs	r3, #0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d011      	beq.n	800724e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800722a:	4bb0      	ldr	r3, [pc, #704]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800722c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800722e:	4baf      	ldr	r3, [pc, #700]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007230:	2180      	movs	r1, #128	@ 0x80
 8007232:	0549      	lsls	r1, r1, #21
 8007234:	430a      	orrs	r2, r1
 8007236:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007238:	4bac      	ldr	r3, [pc, #688]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800723a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800723c:	2380      	movs	r3, #128	@ 0x80
 800723e:	055b      	lsls	r3, r3, #21
 8007240:	4013      	ands	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007246:	231f      	movs	r3, #31
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800724e:	4ba8      	ldr	r3, [pc, #672]	@ (80074f0 <HAL_RCC_OscConfig+0x630>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	2380      	movs	r3, #128	@ 0x80
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	4013      	ands	r3, r2
 8007258:	d11a      	bne.n	8007290 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800725a:	4ba5      	ldr	r3, [pc, #660]	@ (80074f0 <HAL_RCC_OscConfig+0x630>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4ba4      	ldr	r3, [pc, #656]	@ (80074f0 <HAL_RCC_OscConfig+0x630>)
 8007260:	2180      	movs	r1, #128	@ 0x80
 8007262:	0049      	lsls	r1, r1, #1
 8007264:	430a      	orrs	r2, r1
 8007266:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007268:	f7fe fcfc 	bl	8005c64 <HAL_GetTick>
 800726c:	0003      	movs	r3, r0
 800726e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007270:	e008      	b.n	8007284 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007272:	f7fe fcf7 	bl	8005c64 <HAL_GetTick>
 8007276:	0002      	movs	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e177      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007284:	4b9a      	ldr	r3, [pc, #616]	@ (80074f0 <HAL_RCC_OscConfig+0x630>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	2380      	movs	r3, #128	@ 0x80
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	4013      	ands	r3, r2
 800728e:	d0f0      	beq.n	8007272 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d106      	bne.n	80072a6 <HAL_RCC_OscConfig+0x3e6>
 8007298:	4b94      	ldr	r3, [pc, #592]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800729a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800729c:	4b93      	ldr	r3, [pc, #588]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800729e:	2101      	movs	r1, #1
 80072a0:	430a      	orrs	r2, r1
 80072a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072a4:	e01c      	b.n	80072e0 <HAL_RCC_OscConfig+0x420>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d10c      	bne.n	80072c8 <HAL_RCC_OscConfig+0x408>
 80072ae:	4b8f      	ldr	r3, [pc, #572]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072b2:	4b8e      	ldr	r3, [pc, #568]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072b4:	2104      	movs	r1, #4
 80072b6:	430a      	orrs	r2, r1
 80072b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072ba:	4b8c      	ldr	r3, [pc, #560]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072be:	4b8b      	ldr	r3, [pc, #556]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072c0:	2101      	movs	r1, #1
 80072c2:	430a      	orrs	r2, r1
 80072c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072c6:	e00b      	b.n	80072e0 <HAL_RCC_OscConfig+0x420>
 80072c8:	4b88      	ldr	r3, [pc, #544]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072cc:	4b87      	ldr	r3, [pc, #540]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072ce:	2101      	movs	r1, #1
 80072d0:	438a      	bics	r2, r1
 80072d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072d4:	4b85      	ldr	r3, [pc, #532]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072d8:	4b84      	ldr	r3, [pc, #528]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80072da:	2104      	movs	r1, #4
 80072dc:	438a      	bics	r2, r1
 80072de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d014      	beq.n	8007312 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e8:	f7fe fcbc 	bl	8005c64 <HAL_GetTick>
 80072ec:	0003      	movs	r3, r0
 80072ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072f0:	e009      	b.n	8007306 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f2:	f7fe fcb7 	bl	8005c64 <HAL_GetTick>
 80072f6:	0002      	movs	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	4a7d      	ldr	r2, [pc, #500]	@ (80074f4 <HAL_RCC_OscConfig+0x634>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e136      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007306:	4b79      	ldr	r3, [pc, #484]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800730a:	2202      	movs	r2, #2
 800730c:	4013      	ands	r3, r2
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x432>
 8007310:	e013      	b.n	800733a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007312:	f7fe fca7 	bl	8005c64 <HAL_GetTick>
 8007316:	0003      	movs	r3, r0
 8007318:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800731a:	e009      	b.n	8007330 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800731c:	f7fe fca2 	bl	8005c64 <HAL_GetTick>
 8007320:	0002      	movs	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	4a73      	ldr	r2, [pc, #460]	@ (80074f4 <HAL_RCC_OscConfig+0x634>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d901      	bls.n	8007330 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e121      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007330:	4b6e      	ldr	r3, [pc, #440]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007334:	2202      	movs	r2, #2
 8007336:	4013      	ands	r3, r2
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800733a:	231f      	movs	r3, #31
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d105      	bne.n	8007350 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007344:	4b69      	ldr	r3, [pc, #420]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007346:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007348:	4b68      	ldr	r3, [pc, #416]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800734a:	496b      	ldr	r1, [pc, #428]	@ (80074f8 <HAL_RCC_OscConfig+0x638>)
 800734c:	400a      	ands	r2, r1
 800734e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2220      	movs	r2, #32
 8007356:	4013      	ands	r3, r2
 8007358:	d039      	beq.n	80073ce <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01b      	beq.n	800739a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007362:	4b62      	ldr	r3, [pc, #392]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b61      	ldr	r3, [pc, #388]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007368:	2180      	movs	r1, #128	@ 0x80
 800736a:	03c9      	lsls	r1, r1, #15
 800736c:	430a      	orrs	r2, r1
 800736e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007370:	f7fe fc78 	bl	8005c64 <HAL_GetTick>
 8007374:	0003      	movs	r3, r0
 8007376:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800737a:	f7fe fc73 	bl	8005c64 <HAL_GetTick>
 800737e:	0002      	movs	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e0f3      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800738c:	4b57      	ldr	r3, [pc, #348]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	2380      	movs	r3, #128	@ 0x80
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	4013      	ands	r3, r2
 8007396:	d0f0      	beq.n	800737a <HAL_RCC_OscConfig+0x4ba>
 8007398:	e019      	b.n	80073ce <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800739a:	4b54      	ldr	r3, [pc, #336]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b53      	ldr	r3, [pc, #332]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80073a0:	4956      	ldr	r1, [pc, #344]	@ (80074fc <HAL_RCC_OscConfig+0x63c>)
 80073a2:	400a      	ands	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a6:	f7fe fc5d 	bl	8005c64 <HAL_GetTick>
 80073aa:	0003      	movs	r3, r0
 80073ac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073b0:	f7fe fc58 	bl	8005c64 <HAL_GetTick>
 80073b4:	0002      	movs	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e0d8      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80073c2:	4b4a      	ldr	r3, [pc, #296]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	2380      	movs	r3, #128	@ 0x80
 80073c8:	041b      	lsls	r3, r3, #16
 80073ca:	4013      	ands	r3, r2
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d100      	bne.n	80073d8 <HAL_RCC_OscConfig+0x518>
 80073d6:	e0cc      	b.n	8007572 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073d8:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2238      	movs	r2, #56	@ 0x38
 80073de:	4013      	ands	r3, r2
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d100      	bne.n	80073e6 <HAL_RCC_OscConfig+0x526>
 80073e4:	e07b      	b.n	80074de <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d156      	bne.n	800749c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ee:	4b3f      	ldr	r3, [pc, #252]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b3e      	ldr	r3, [pc, #248]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80073f4:	4942      	ldr	r1, [pc, #264]	@ (8007500 <HAL_RCC_OscConfig+0x640>)
 80073f6:	400a      	ands	r2, r1
 80073f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fa:	f7fe fc33 	bl	8005c64 <HAL_GetTick>
 80073fe:	0003      	movs	r3, r0
 8007400:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007404:	f7fe fc2e 	bl	8005c64 <HAL_GetTick>
 8007408:	0002      	movs	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e0ae      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007416:	4b35      	ldr	r3, [pc, #212]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	2380      	movs	r3, #128	@ 0x80
 800741c:	049b      	lsls	r3, r3, #18
 800741e:	4013      	ands	r3, r2
 8007420:	d1f0      	bne.n	8007404 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007422:	4b32      	ldr	r3, [pc, #200]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	4a37      	ldr	r2, [pc, #220]	@ (8007504 <HAL_RCC_OscConfig+0x644>)
 8007428:	4013      	ands	r3, r2
 800742a:	0019      	movs	r1, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744e:	431a      	orrs	r2, r3
 8007450:	4b26      	ldr	r3, [pc, #152]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007452:	430a      	orrs	r2, r1
 8007454:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007456:	4b25      	ldr	r3, [pc, #148]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b24      	ldr	r3, [pc, #144]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800745c:	2180      	movs	r1, #128	@ 0x80
 800745e:	0449      	lsls	r1, r1, #17
 8007460:	430a      	orrs	r2, r1
 8007462:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007464:	4b21      	ldr	r3, [pc, #132]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	4b20      	ldr	r3, [pc, #128]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800746a:	2180      	movs	r1, #128	@ 0x80
 800746c:	0549      	lsls	r1, r1, #21
 800746e:	430a      	orrs	r2, r1
 8007470:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007472:	f7fe fbf7 	bl	8005c64 <HAL_GetTick>
 8007476:	0003      	movs	r3, r0
 8007478:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747c:	f7fe fbf2 	bl	8005c64 <HAL_GetTick>
 8007480:	0002      	movs	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e072      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800748e:	4b17      	ldr	r3, [pc, #92]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	2380      	movs	r3, #128	@ 0x80
 8007494:	049b      	lsls	r3, r3, #18
 8007496:	4013      	ands	r3, r2
 8007498:	d0f0      	beq.n	800747c <HAL_RCC_OscConfig+0x5bc>
 800749a:	e06a      	b.n	8007572 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749c:	4b13      	ldr	r3, [pc, #76]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80074a2:	4917      	ldr	r1, [pc, #92]	@ (8007500 <HAL_RCC_OscConfig+0x640>)
 80074a4:	400a      	ands	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fe fbdc 	bl	8005c64 <HAL_GetTick>
 80074ac:	0003      	movs	r3, r0
 80074ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b2:	f7fe fbd7 	bl	8005c64 <HAL_GetTick>
 80074b6:	0002      	movs	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e057      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074c4:	4b09      	ldr	r3, [pc, #36]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	2380      	movs	r3, #128	@ 0x80
 80074ca:	049b      	lsls	r3, r3, #18
 80074cc:	4013      	ands	r3, r2
 80074ce:	d1f0      	bne.n	80074b2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80074d0:	4b06      	ldr	r3, [pc, #24]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <HAL_RCC_OscConfig+0x62c>)
 80074d6:	490c      	ldr	r1, [pc, #48]	@ (8007508 <HAL_RCC_OscConfig+0x648>)
 80074d8:	400a      	ands	r2, r1
 80074da:	60da      	str	r2, [r3, #12]
 80074dc:	e049      	b.n	8007572 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d112      	bne.n	800750c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e044      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
 80074ea:	46c0      	nop			@ (mov r8, r8)
 80074ec:	40021000 	.word	0x40021000
 80074f0:	40007000 	.word	0x40007000
 80074f4:	00001388 	.word	0x00001388
 80074f8:	efffffff 	.word	0xefffffff
 80074fc:	ffbfffff 	.word	0xffbfffff
 8007500:	feffffff 	.word	0xfeffffff
 8007504:	11c1808c 	.word	0x11c1808c
 8007508:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800750c:	4b1b      	ldr	r3, [pc, #108]	@ (800757c <HAL_RCC_OscConfig+0x6bc>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2203      	movs	r2, #3
 8007516:	401a      	ands	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751c:	429a      	cmp	r2, r3
 800751e:	d126      	bne.n	800756e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2270      	movs	r2, #112	@ 0x70
 8007524:	401a      	ands	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752a:	429a      	cmp	r2, r3
 800752c:	d11f      	bne.n	800756e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	23fe      	movs	r3, #254	@ 0xfe
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	401a      	ands	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800753c:	429a      	cmp	r2, r3
 800753e:	d116      	bne.n	800756e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	23f8      	movs	r3, #248	@ 0xf8
 8007544:	039b      	lsls	r3, r3, #14
 8007546:	401a      	ands	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800754c:	429a      	cmp	r2, r3
 800754e:	d10e      	bne.n	800756e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	23e0      	movs	r3, #224	@ 0xe0
 8007554:	051b      	lsls	r3, r3, #20
 8007556:	401a      	ands	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800755c:	429a      	cmp	r2, r3
 800755e:	d106      	bne.n	800756e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	0f5b      	lsrs	r3, r3, #29
 8007564:	075a      	lsls	r2, r3, #29
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800756a:	429a      	cmp	r2, r3
 800756c:	d001      	beq.n	8007572 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	0018      	movs	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	b008      	add	sp, #32
 800757a:	bd80      	pop	{r7, pc}
 800757c:	40021000 	.word	0x40021000

08007580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0e9      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007594:	4b76      	ldr	r3, [pc, #472]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2207      	movs	r2, #7
 800759a:	4013      	ands	r3, r2
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d91e      	bls.n	80075e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075a2:	4b73      	ldr	r3, [pc, #460]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2207      	movs	r2, #7
 80075a8:	4393      	bics	r3, r2
 80075aa:	0019      	movs	r1, r3
 80075ac:	4b70      	ldr	r3, [pc, #448]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075b4:	f7fe fb56 	bl	8005c64 <HAL_GetTick>
 80075b8:	0003      	movs	r3, r0
 80075ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80075bc:	e009      	b.n	80075d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075be:	f7fe fb51 	bl	8005c64 <HAL_GetTick>
 80075c2:	0002      	movs	r2, r0
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	4a6a      	ldr	r2, [pc, #424]	@ (8007774 <HAL_RCC_ClockConfig+0x1f4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e0ca      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80075d2:	4b67      	ldr	r3, [pc, #412]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2207      	movs	r2, #7
 80075d8:	4013      	ands	r3, r2
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d1ee      	bne.n	80075be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2202      	movs	r2, #2
 80075e6:	4013      	ands	r3, r2
 80075e8:	d015      	beq.n	8007616 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2204      	movs	r2, #4
 80075f0:	4013      	ands	r3, r2
 80075f2:	d006      	beq.n	8007602 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80075f4:	4b60      	ldr	r3, [pc, #384]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	4b5f      	ldr	r3, [pc, #380]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 80075fa:	21e0      	movs	r1, #224	@ 0xe0
 80075fc:	01c9      	lsls	r1, r1, #7
 80075fe:	430a      	orrs	r2, r1
 8007600:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007602:	4b5d      	ldr	r3, [pc, #372]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	4a5d      	ldr	r2, [pc, #372]	@ (800777c <HAL_RCC_ClockConfig+0x1fc>)
 8007608:	4013      	ands	r3, r2
 800760a:	0019      	movs	r1, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	4b59      	ldr	r3, [pc, #356]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007612:	430a      	orrs	r2, r1
 8007614:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2201      	movs	r2, #1
 800761c:	4013      	ands	r3, r2
 800761e:	d057      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d107      	bne.n	8007638 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007628:	4b53      	ldr	r3, [pc, #332]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	2380      	movs	r3, #128	@ 0x80
 800762e:	029b      	lsls	r3, r3, #10
 8007630:	4013      	ands	r3, r2
 8007632:	d12b      	bne.n	800768c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e097      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d107      	bne.n	8007650 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007640:	4b4d      	ldr	r3, [pc, #308]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	2380      	movs	r3, #128	@ 0x80
 8007646:	049b      	lsls	r3, r3, #18
 8007648:	4013      	ands	r3, r2
 800764a:	d11f      	bne.n	800768c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e08b      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007658:	4b47      	ldr	r3, [pc, #284]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	2380      	movs	r3, #128	@ 0x80
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4013      	ands	r3, r2
 8007662:	d113      	bne.n	800768c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e07f      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d106      	bne.n	800767e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007670:	4b41      	ldr	r3, [pc, #260]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007674:	2202      	movs	r2, #2
 8007676:	4013      	ands	r3, r2
 8007678:	d108      	bne.n	800768c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e074      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800767e:	4b3e      	ldr	r3, [pc, #248]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007682:	2202      	movs	r2, #2
 8007684:	4013      	ands	r3, r2
 8007686:	d101      	bne.n	800768c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e06d      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800768c:	4b3a      	ldr	r3, [pc, #232]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2207      	movs	r2, #7
 8007692:	4393      	bics	r3, r2
 8007694:	0019      	movs	r1, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a0:	f7fe fae0 	bl	8005c64 <HAL_GetTick>
 80076a4:	0003      	movs	r3, r0
 80076a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a8:	e009      	b.n	80076be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076aa:	f7fe fadb 	bl	8005c64 <HAL_GetTick>
 80076ae:	0002      	movs	r2, r0
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	4a2f      	ldr	r2, [pc, #188]	@ (8007774 <HAL_RCC_ClockConfig+0x1f4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e054      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	4b2e      	ldr	r3, [pc, #184]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2238      	movs	r2, #56	@ 0x38
 80076c4:	401a      	ands	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d1ec      	bne.n	80076aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076d0:	4b27      	ldr	r3, [pc, #156]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2207      	movs	r2, #7
 80076d6:	4013      	ands	r3, r2
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d21e      	bcs.n	800771c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076de:	4b24      	ldr	r3, [pc, #144]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2207      	movs	r2, #7
 80076e4:	4393      	bics	r3, r2
 80076e6:	0019      	movs	r1, r3
 80076e8:	4b21      	ldr	r3, [pc, #132]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076f0:	f7fe fab8 	bl	8005c64 <HAL_GetTick>
 80076f4:	0003      	movs	r3, r0
 80076f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80076f8:	e009      	b.n	800770e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076fa:	f7fe fab3 	bl	8005c64 <HAL_GetTick>
 80076fe:	0002      	movs	r2, r0
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	4a1b      	ldr	r2, [pc, #108]	@ (8007774 <HAL_RCC_ClockConfig+0x1f4>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e02c      	b.n	8007768 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800770e:	4b18      	ldr	r3, [pc, #96]	@ (8007770 <HAL_RCC_ClockConfig+0x1f0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2207      	movs	r2, #7
 8007714:	4013      	ands	r3, r2
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d1ee      	bne.n	80076fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2204      	movs	r2, #4
 8007722:	4013      	ands	r3, r2
 8007724:	d009      	beq.n	800773a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007726:	4b14      	ldr	r3, [pc, #80]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	4a15      	ldr	r2, [pc, #84]	@ (8007780 <HAL_RCC_ClockConfig+0x200>)
 800772c:	4013      	ands	r3, r2
 800772e:	0019      	movs	r1, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	4b10      	ldr	r3, [pc, #64]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007736:	430a      	orrs	r2, r1
 8007738:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800773a:	f000 f829 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800773e:	0001      	movs	r1, r0
 8007740:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <HAL_RCC_ClockConfig+0x1f8>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	0a1b      	lsrs	r3, r3, #8
 8007746:	220f      	movs	r2, #15
 8007748:	401a      	ands	r2, r3
 800774a:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <HAL_RCC_ClockConfig+0x204>)
 800774c:	0092      	lsls	r2, r2, #2
 800774e:	58d3      	ldr	r3, [r2, r3]
 8007750:	221f      	movs	r2, #31
 8007752:	4013      	ands	r3, r2
 8007754:	000a      	movs	r2, r1
 8007756:	40da      	lsrs	r2, r3
 8007758:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <HAL_RCC_ClockConfig+0x208>)
 800775a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800775c:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <HAL_RCC_ClockConfig+0x20c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	0018      	movs	r0, r3
 8007762:	f7fe fa23 	bl	8005bac <HAL_InitTick>
 8007766:	0003      	movs	r3, r0
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b004      	add	sp, #16
 800776e:	bd80      	pop	{r7, pc}
 8007770:	40022000 	.word	0x40022000
 8007774:	00001388 	.word	0x00001388
 8007778:	40021000 	.word	0x40021000
 800777c:	fffff0ff 	.word	0xfffff0ff
 8007780:	ffff8fff 	.word	0xffff8fff
 8007784:	0800e210 	.word	0x0800e210
 8007788:	20000e84 	.word	0x20000e84
 800778c:	20000e88 	.word	0x20000e88

08007790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007796:	4b3c      	ldr	r3, [pc, #240]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	2238      	movs	r2, #56	@ 0x38
 800779c:	4013      	ands	r3, r2
 800779e:	d10f      	bne.n	80077c0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80077a0:	4b39      	ldr	r3, [pc, #228]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	0adb      	lsrs	r3, r3, #11
 80077a6:	2207      	movs	r2, #7
 80077a8:	4013      	ands	r3, r2
 80077aa:	2201      	movs	r2, #1
 80077ac:	409a      	lsls	r2, r3
 80077ae:	0013      	movs	r3, r2
 80077b0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	4835      	ldr	r0, [pc, #212]	@ (800788c <HAL_RCC_GetSysClockFreq+0xfc>)
 80077b6:	f7f8 fccb 	bl	8000150 <__udivsi3>
 80077ba:	0003      	movs	r3, r0
 80077bc:	613b      	str	r3, [r7, #16]
 80077be:	e05d      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077c0:	4b31      	ldr	r3, [pc, #196]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2238      	movs	r2, #56	@ 0x38
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d102      	bne.n	80077d2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077cc:	4b30      	ldr	r3, [pc, #192]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x100>)
 80077ce:	613b      	str	r3, [r7, #16]
 80077d0:	e054      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2238      	movs	r2, #56	@ 0x38
 80077d8:	4013      	ands	r3, r2
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d138      	bne.n	8007850 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80077de:	4b2a      	ldr	r3, [pc, #168]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	2203      	movs	r2, #3
 80077e4:	4013      	ands	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80077e8:	4b27      	ldr	r3, [pc, #156]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	2207      	movs	r2, #7
 80077f0:	4013      	ands	r3, r2
 80077f2:	3301      	adds	r3, #1
 80077f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d10d      	bne.n	8007818 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4824      	ldr	r0, [pc, #144]	@ (8007890 <HAL_RCC_GetSysClockFreq+0x100>)
 8007800:	f7f8 fca6 	bl	8000150 <__udivsi3>
 8007804:	0003      	movs	r3, r0
 8007806:	0019      	movs	r1, r3
 8007808:	4b1f      	ldr	r3, [pc, #124]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	0a1b      	lsrs	r3, r3, #8
 800780e:	227f      	movs	r2, #127	@ 0x7f
 8007810:	4013      	ands	r3, r2
 8007812:	434b      	muls	r3, r1
 8007814:	617b      	str	r3, [r7, #20]
        break;
 8007816:	e00d      	b.n	8007834 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	481c      	ldr	r0, [pc, #112]	@ (800788c <HAL_RCC_GetSysClockFreq+0xfc>)
 800781c:	f7f8 fc98 	bl	8000150 <__udivsi3>
 8007820:	0003      	movs	r3, r0
 8007822:	0019      	movs	r1, r3
 8007824:	4b18      	ldr	r3, [pc, #96]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	0a1b      	lsrs	r3, r3, #8
 800782a:	227f      	movs	r2, #127	@ 0x7f
 800782c:	4013      	ands	r3, r2
 800782e:	434b      	muls	r3, r1
 8007830:	617b      	str	r3, [r7, #20]
        break;
 8007832:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007834:	4b14      	ldr	r3, [pc, #80]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	0f5b      	lsrs	r3, r3, #29
 800783a:	2207      	movs	r2, #7
 800783c:	4013      	ands	r3, r2
 800783e:	3301      	adds	r3, #1
 8007840:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	6978      	ldr	r0, [r7, #20]
 8007846:	f7f8 fc83 	bl	8000150 <__udivsi3>
 800784a:	0003      	movs	r3, r0
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	e015      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007850:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	2238      	movs	r2, #56	@ 0x38
 8007856:	4013      	ands	r3, r2
 8007858:	2b20      	cmp	r3, #32
 800785a:	d103      	bne.n	8007864 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800785c:	2380      	movs	r3, #128	@ 0x80
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	e00b      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007864:	4b08      	ldr	r3, [pc, #32]	@ (8007888 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2238      	movs	r2, #56	@ 0x38
 800786a:	4013      	ands	r3, r2
 800786c:	2b18      	cmp	r3, #24
 800786e:	d103      	bne.n	8007878 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007870:	23fa      	movs	r3, #250	@ 0xfa
 8007872:	01db      	lsls	r3, r3, #7
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	e001      	b.n	800787c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800787c:	693b      	ldr	r3, [r7, #16]
}
 800787e:	0018      	movs	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	b006      	add	sp, #24
 8007884:	bd80      	pop	{r7, pc}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	40021000 	.word	0x40021000
 800788c:	00f42400 	.word	0x00f42400
 8007890:	007a1200 	.word	0x007a1200

08007894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007898:	4b02      	ldr	r3, [pc, #8]	@ (80078a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800789a:	681b      	ldr	r3, [r3, #0]
}
 800789c:	0018      	movs	r0, r3
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	20000e84 	.word	0x20000e84

080078a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078a8:	b5b0      	push	{r4, r5, r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80078ac:	f7ff fff2 	bl	8007894 <HAL_RCC_GetHCLKFreq>
 80078b0:	0004      	movs	r4, r0
 80078b2:	f7ff faf9 	bl	8006ea8 <LL_RCC_GetAPB1Prescaler>
 80078b6:	0003      	movs	r3, r0
 80078b8:	0b1a      	lsrs	r2, r3, #12
 80078ba:	4b05      	ldr	r3, [pc, #20]	@ (80078d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078bc:	0092      	lsls	r2, r2, #2
 80078be:	58d3      	ldr	r3, [r2, r3]
 80078c0:	221f      	movs	r2, #31
 80078c2:	4013      	ands	r3, r2
 80078c4:	40dc      	lsrs	r4, r3
 80078c6:	0023      	movs	r3, r4
}
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bdb0      	pop	{r4, r5, r7, pc}
 80078ce:	46c0      	nop			@ (mov r8, r8)
 80078d0:	0800e250 	.word	0x0800e250

080078d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80078dc:	2313      	movs	r3, #19
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	2200      	movs	r2, #0
 80078e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078e4:	2312      	movs	r3, #18
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	2380      	movs	r3, #128	@ 0x80
 80078f2:	029b      	lsls	r3, r3, #10
 80078f4:	4013      	ands	r3, r2
 80078f6:	d100      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80078f8:	e0ad      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078fa:	2011      	movs	r0, #17
 80078fc:	183b      	adds	r3, r7, r0
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007902:	4b47      	ldr	r3, [pc, #284]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007904:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007906:	2380      	movs	r3, #128	@ 0x80
 8007908:	055b      	lsls	r3, r3, #21
 800790a:	4013      	ands	r3, r2
 800790c:	d110      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800790e:	4b44      	ldr	r3, [pc, #272]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007912:	4b43      	ldr	r3, [pc, #268]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007914:	2180      	movs	r1, #128	@ 0x80
 8007916:	0549      	lsls	r1, r1, #21
 8007918:	430a      	orrs	r2, r1
 800791a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800791c:	4b40      	ldr	r3, [pc, #256]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800791e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007920:	2380      	movs	r3, #128	@ 0x80
 8007922:	055b      	lsls	r3, r3, #21
 8007924:	4013      	ands	r3, r2
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800792a:	183b      	adds	r3, r7, r0
 800792c:	2201      	movs	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007930:	4b3c      	ldr	r3, [pc, #240]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	4b3b      	ldr	r3, [pc, #236]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007936:	2180      	movs	r1, #128	@ 0x80
 8007938:	0049      	lsls	r1, r1, #1
 800793a:	430a      	orrs	r2, r1
 800793c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800793e:	f7fe f991 	bl	8005c64 <HAL_GetTick>
 8007942:	0003      	movs	r3, r0
 8007944:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007946:	e00b      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007948:	f7fe f98c 	bl	8005c64 <HAL_GetTick>
 800794c:	0002      	movs	r2, r0
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d904      	bls.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007956:	2313      	movs	r3, #19
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	2203      	movs	r2, #3
 800795c:	701a      	strb	r2, [r3, #0]
        break;
 800795e:	e005      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007960:	4b30      	ldr	r3, [pc, #192]	@ (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	2380      	movs	r3, #128	@ 0x80
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4013      	ands	r3, r2
 800796a:	d0ed      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800796c:	2313      	movs	r3, #19
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d15e      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007976:	4b2a      	ldr	r3, [pc, #168]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007978:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800797a:	23c0      	movs	r3, #192	@ 0xc0
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4013      	ands	r3, r2
 8007980:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d019      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	429a      	cmp	r2, r3
 8007990:	d014      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007992:	4b23      	ldr	r3, [pc, #140]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007996:	4a24      	ldr	r2, [pc, #144]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007998:	4013      	ands	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800799c:	4b20      	ldr	r3, [pc, #128]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800799e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80079a2:	2180      	movs	r1, #128	@ 0x80
 80079a4:	0249      	lsls	r1, r1, #9
 80079a6:	430a      	orrs	r2, r1
 80079a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80079ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80079b0:	491e      	ldr	r1, [pc, #120]	@ (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80079b2:	400a      	ands	r2, r1
 80079b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2201      	movs	r2, #1
 80079c0:	4013      	ands	r3, r2
 80079c2:	d016      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c4:	f7fe f94e 	bl	8005c64 <HAL_GetTick>
 80079c8:	0003      	movs	r3, r0
 80079ca:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079cc:	e00c      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ce:	f7fe f949 	bl	8005c64 <HAL_GetTick>
 80079d2:	0002      	movs	r2, r0
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	4a15      	ldr	r2, [pc, #84]	@ (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d904      	bls.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80079de:	2313      	movs	r3, #19
 80079e0:	18fb      	adds	r3, r7, r3
 80079e2:	2203      	movs	r2, #3
 80079e4:	701a      	strb	r2, [r3, #0]
            break;
 80079e6:	e004      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80079ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ec:	2202      	movs	r2, #2
 80079ee:	4013      	ands	r3, r2
 80079f0:	d0ed      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80079f2:	2313      	movs	r3, #19
 80079f4:	18fb      	adds	r3, r7, r3
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079fc:	4b08      	ldr	r3, [pc, #32]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80079fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a00:	4a09      	ldr	r2, [pc, #36]	@ (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	0019      	movs	r1, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a0a:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a10:	e016      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a12:	2312      	movs	r3, #18
 8007a14:	18fb      	adds	r3, r7, r3
 8007a16:	2213      	movs	r2, #19
 8007a18:	18ba      	adds	r2, r7, r2
 8007a1a:	7812      	ldrb	r2, [r2, #0]
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	e00f      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007a20:	40021000 	.word	0x40021000
 8007a24:	40007000 	.word	0x40007000
 8007a28:	fffffcff 	.word	0xfffffcff
 8007a2c:	fffeffff 	.word	0xfffeffff
 8007a30:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a34:	2312      	movs	r3, #18
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	2213      	movs	r2, #19
 8007a3a:	18ba      	adds	r2, r7, r2
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a40:	2311      	movs	r3, #17
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d105      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a4a:	4bb6      	ldr	r3, [pc, #728]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a4e:	4bb5      	ldr	r3, [pc, #724]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a50:	49b5      	ldr	r1, [pc, #724]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8007a52:	400a      	ands	r2, r1
 8007a54:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a60:	4bb0      	ldr	r3, [pc, #704]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a64:	2203      	movs	r2, #3
 8007a66:	4393      	bics	r3, r2
 8007a68:	0019      	movs	r1, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	4bad      	ldr	r3, [pc, #692]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a70:	430a      	orrs	r2, r1
 8007a72:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d009      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a7e:	4ba9      	ldr	r3, [pc, #676]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a82:	220c      	movs	r2, #12
 8007a84:	4393      	bics	r3, r2
 8007a86:	0019      	movs	r1, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	4ba5      	ldr	r3, [pc, #660]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2204      	movs	r2, #4
 8007a98:	4013      	ands	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa0:	2230      	movs	r2, #48	@ 0x30
 8007aa2:	4393      	bics	r3, r2
 8007aa4:	0019      	movs	r1, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007aac:	430a      	orrs	r2, r1
 8007aae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2210      	movs	r2, #16
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007aba:	4b9a      	ldr	r3, [pc, #616]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007abe:	4a9b      	ldr	r2, [pc, #620]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691a      	ldr	r2, [r3, #16]
 8007ac8:	4b96      	ldr	r3, [pc, #600]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007aca:	430a      	orrs	r2, r1
 8007acc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	2380      	movs	r3, #128	@ 0x80
 8007ad4:	015b      	lsls	r3, r3, #5
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	d009      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007ada:	4b92      	ldr	r3, [pc, #584]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ade:	4a94      	ldr	r2, [pc, #592]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	0019      	movs	r1, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695a      	ldr	r2, [r3, #20]
 8007ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007aea:	430a      	orrs	r2, r1
 8007aec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	2380      	movs	r3, #128	@ 0x80
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4013      	ands	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007afa:	4b8a      	ldr	r3, [pc, #552]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afe:	4a8d      	ldr	r2, [pc, #564]	@ (8007d34 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	0019      	movs	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b08:	4b86      	ldr	r3, [pc, #536]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	2380      	movs	r3, #128	@ 0x80
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	4013      	ands	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b1a:	4b82      	ldr	r3, [pc, #520]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	4a86      	ldr	r2, [pc, #536]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	0019      	movs	r1, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b28:	4b7e      	ldr	r3, [pc, #504]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2220      	movs	r2, #32
 8007b34:	4013      	ands	r3, r2
 8007b36:	d009      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b38:	4b7a      	ldr	r3, [pc, #488]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3c:	4a7f      	ldr	r2, [pc, #508]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	0019      	movs	r1, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	4b77      	ldr	r3, [pc, #476]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2240      	movs	r2, #64	@ 0x40
 8007b52:	4013      	ands	r3, r2
 8007b54:	d009      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b56:	4b73      	ldr	r3, [pc, #460]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5a:	4a79      	ldr	r2, [pc, #484]	@ (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	0019      	movs	r1, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	4b6f      	ldr	r3, [pc, #444]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b66:	430a      	orrs	r2, r1
 8007b68:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	2380      	movs	r3, #128	@ 0x80
 8007b70:	01db      	lsls	r3, r3, #7
 8007b72:	4013      	ands	r3, r2
 8007b74:	d015      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b76:	4b6b      	ldr	r3, [pc, #428]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	0899      	lsrs	r1, r3, #2
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b82:	4b68      	ldr	r3, [pc, #416]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b84:	430a      	orrs	r2, r1
 8007b86:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b8c:	2380      	movs	r3, #128	@ 0x80
 8007b8e:	05db      	lsls	r3, r3, #23
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007b94:	4b63      	ldr	r3, [pc, #396]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	4b62      	ldr	r3, [pc, #392]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b9a:	2180      	movs	r1, #128	@ 0x80
 8007b9c:	0249      	lsls	r1, r1, #9
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	2380      	movs	r3, #128	@ 0x80
 8007ba8:	031b      	lsls	r3, r3, #12
 8007baa:	4013      	ands	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bae:	4b5d      	ldr	r3, [pc, #372]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb2:	2240      	movs	r2, #64	@ 0x40
 8007bb4:	4393      	bics	r3, r2
 8007bb6:	0019      	movs	r1, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bbc:	4b59      	ldr	r3, [pc, #356]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	2380      	movs	r3, #128	@ 0x80
 8007bc8:	039b      	lsls	r3, r3, #14
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d016      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007bce:	4b55      	ldr	r3, [pc, #340]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	0019      	movs	r1, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bdc:	4b51      	ldr	r3, [pc, #324]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bde:	430a      	orrs	r2, r1
 8007be0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007be6:	2380      	movs	r3, #128	@ 0x80
 8007be8:	03db      	lsls	r3, r3, #15
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d106      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007bee:	4b4d      	ldr	r3, [pc, #308]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bf4:	2180      	movs	r1, #128	@ 0x80
 8007bf6:	0449      	lsls	r1, r1, #17
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	2380      	movs	r3, #128	@ 0x80
 8007c02:	03db      	lsls	r3, r3, #15
 8007c04:	4013      	ands	r3, r2
 8007c06:	d016      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007c08:	4b46      	ldr	r3, [pc, #280]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	0019      	movs	r1, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c16:	4b43      	ldr	r3, [pc, #268]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c20:	2380      	movs	r3, #128	@ 0x80
 8007c22:	045b      	lsls	r3, r3, #17
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d106      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007c28:	4b3e      	ldr	r3, [pc, #248]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c2e:	2180      	movs	r1, #128	@ 0x80
 8007c30:	0449      	lsls	r1, r1, #17
 8007c32:	430a      	orrs	r2, r1
 8007c34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	2380      	movs	r3, #128	@ 0x80
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d014      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007c42:	4b38      	ldr	r3, [pc, #224]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c46:	2203      	movs	r2, #3
 8007c48:	4393      	bics	r3, r2
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1a      	ldr	r2, [r3, #32]
 8007c50:	4b34      	ldr	r3, [pc, #208]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c52:	430a      	orrs	r2, r1
 8007c54:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d106      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007c5e:	4b31      	ldr	r3, [pc, #196]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	4b30      	ldr	r3, [pc, #192]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c64:	2180      	movs	r1, #128	@ 0x80
 8007c66:	0249      	lsls	r1, r1, #9
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	2380      	movs	r3, #128	@ 0x80
 8007c72:	019b      	lsls	r3, r3, #6
 8007c74:	4013      	ands	r3, r2
 8007c76:	d014      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007c78:	4b2a      	ldr	r3, [pc, #168]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c7c:	220c      	movs	r2, #12
 8007c7e:	4393      	bics	r3, r2
 8007c80:	0019      	movs	r1, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c86:	4b27      	ldr	r3, [pc, #156]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	d106      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007c94:	4b23      	ldr	r3, [pc, #140]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	4b22      	ldr	r3, [pc, #136]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c9a:	2180      	movs	r1, #128	@ 0x80
 8007c9c:	0249      	lsls	r1, r1, #9
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	2380      	movs	r3, #128	@ 0x80
 8007ca8:	045b      	lsls	r3, r3, #17
 8007caa:	4013      	ands	r3, r2
 8007cac:	d016      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cae:	4b1d      	ldr	r3, [pc, #116]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb2:	4a22      	ldr	r2, [pc, #136]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	0019      	movs	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cbc:	4b19      	ldr	r3, [pc, #100]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cc6:	2380      	movs	r3, #128	@ 0x80
 8007cc8:	019b      	lsls	r3, r3, #6
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d106      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007cce:	4b15      	ldr	r3, [pc, #84]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	4b14      	ldr	r3, [pc, #80]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cd4:	2180      	movs	r1, #128	@ 0x80
 8007cd6:	0449      	lsls	r1, r1, #17
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	2380      	movs	r3, #128	@ 0x80
 8007ce2:	049b      	lsls	r3, r3, #18
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	d016      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cec:	4a10      	ldr	r2, [pc, #64]	@ (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007cee:	4013      	ands	r3, r2
 8007cf0:	0019      	movs	r1, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d00:	2380      	movs	r3, #128	@ 0x80
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d106      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007d08:	4b06      	ldr	r3, [pc, #24]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d0e:	2180      	movs	r1, #128	@ 0x80
 8007d10:	0449      	lsls	r1, r1, #17
 8007d12:	430a      	orrs	r2, r1
 8007d14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007d16:	2312      	movs	r3, #18
 8007d18:	18fb      	adds	r3, r7, r3
 8007d1a:	781b      	ldrb	r3, [r3, #0]
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b006      	add	sp, #24
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40021000 	.word	0x40021000
 8007d28:	efffffff 	.word	0xefffffff
 8007d2c:	fffff3ff 	.word	0xfffff3ff
 8007d30:	fffffcff 	.word	0xfffffcff
 8007d34:	fff3ffff 	.word	0xfff3ffff
 8007d38:	ffcfffff 	.word	0xffcfffff
 8007d3c:	ffffcfff 	.word	0xffffcfff
 8007d40:	ffff3fff 	.word	0xffff3fff
 8007d44:	ffbfffff 	.word	0xffbfffff
 8007d48:	feffffff 	.word	0xfeffffff

08007d4c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007d4c:	b590      	push	{r4, r7, lr}
 8007d4e:	b089      	sub	sp, #36	@ 0x24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2228      	movs	r2, #40	@ 0x28
 8007d5c:	5c9b      	ldrb	r3, [r3, r2]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <HAL_RTC_SetAlarm_IT+0x1a>
 8007d62:	2302      	movs	r3, #2
 8007d64:	e127      	b.n	8007fb6 <HAL_RTC_SetAlarm_IT+0x26a>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2228      	movs	r2, #40	@ 0x28
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2229      	movs	r2, #41	@ 0x29
 8007d72:	2102      	movs	r1, #2
 8007d74:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d136      	bne.n	8007dea <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	2240      	movs	r2, #64	@ 0x40
 8007d84:	4013      	ands	r3, r2
 8007d86:	d102      	bne.n	8007d8e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	0018      	movs	r0, r3
 8007d94:	f000 fa1e 	bl	80081d4 <RTC_ByteToBcd2>
 8007d98:	0003      	movs	r3, r0
 8007d9a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	785b      	ldrb	r3, [r3, #1]
 8007da0:	0018      	movs	r0, r3
 8007da2:	f000 fa17 	bl	80081d4 <RTC_ByteToBcd2>
 8007da6:	0003      	movs	r3, r0
 8007da8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007daa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	789b      	ldrb	r3, [r3, #2]
 8007db0:	0018      	movs	r0, r3
 8007db2:	f000 fa0f 	bl	80081d4 <RTC_ByteToBcd2>
 8007db6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007db8:	0022      	movs	r2, r4
 8007dba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	78db      	ldrb	r3, [r3, #3]
 8007dc0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	5c9b      	ldrb	r3, [r3, r2]
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 fa01 	bl	80081d4 <RTC_ByteToBcd2>
 8007dd2:	0003      	movs	r3, r0
 8007dd4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007dd6:	0022      	movs	r2, r4
 8007dd8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007dde:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007de4:	4313      	orrs	r3, r2
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	e022      	b.n	8007e30 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2240      	movs	r2, #64	@ 0x40
 8007df2:	4013      	ands	r3, r2
 8007df4:	d102      	bne.n	8007dfc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e08:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007e0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	78db      	ldrb	r3, [r3, #3]
 8007e14:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007e16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2120      	movs	r1, #32
 8007e1c:	5c5b      	ldrb	r3, [r3, r1]
 8007e1e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007e20:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007e26:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	22ca      	movs	r2, #202	@ 0xca
 8007e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2253      	movs	r2, #83	@ 0x53
 8007e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e50:	2380      	movs	r3, #128	@ 0x80
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d14c      	bne.n	8007ef2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4957      	ldr	r1, [pc, #348]	@ (8007fc0 <HAL_RTC_SetAlarm_IT+0x274>)
 8007e64:	400a      	ands	r2, r1
 8007e66:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2101      	movs	r1, #1
 8007e74:	430a      	orrs	r2, r1
 8007e76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8007e78:	f7fd fef4 	bl	8005c64 <HAL_GetTick>
 8007e7c:	0003      	movs	r3, r0
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007e80:	e016      	b.n	8007eb0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e82:	f7fd feef 	bl	8005c64 <HAL_GetTick>
 8007e86:	0002      	movs	r2, r0
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	1ad2      	subs	r2, r2, r3
 8007e8c:	23fa      	movs	r3, #250	@ 0xfa
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d90d      	bls.n	8007eb0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	22ff      	movs	r2, #255	@ 0xff
 8007e9a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2229      	movs	r2, #41	@ 0x29
 8007ea0:	2103      	movs	r1, #3
 8007ea2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2228      	movs	r2, #40	@ 0x28
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e082      	b.n	8007fb6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	4013      	ands	r3, r2
 8007eba:	d0e2      	beq.n	8007e82 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2180      	movs	r1, #128	@ 0x80
 8007ed8:	0049      	lsls	r1, r1, #1
 8007eda:	430a      	orrs	r2, r1
 8007edc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2180      	movs	r1, #128	@ 0x80
 8007eea:	0149      	lsls	r1, r1, #5
 8007eec:	430a      	orrs	r2, r1
 8007eee:	619a      	str	r2, [r3, #24]
 8007ef0:	e04b      	b.n	8007f8a <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699a      	ldr	r2, [r3, #24]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4931      	ldr	r1, [pc, #196]	@ (8007fc4 <HAL_RTC_SetAlarm_IT+0x278>)
 8007efe:	400a      	ands	r2, r1
 8007f00:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2102      	movs	r1, #2
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8007f12:	f7fd fea7 	bl	8005c64 <HAL_GetTick>
 8007f16:	0003      	movs	r3, r0
 8007f18:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007f1a:	e016      	b.n	8007f4a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007f1c:	f7fd fea2 	bl	8005c64 <HAL_GetTick>
 8007f20:	0002      	movs	r2, r0
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	23fa      	movs	r3, #250	@ 0xfa
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d90d      	bls.n	8007f4a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	22ff      	movs	r2, #255	@ 0xff
 8007f34:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2229      	movs	r2, #41	@ 0x29
 8007f3a:	2103      	movs	r1, #3
 8007f3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2228      	movs	r2, #40	@ 0x28
 8007f42:	2100      	movs	r1, #0
 8007f44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e035      	b.n	8007fb6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	2202      	movs	r2, #2
 8007f52:	4013      	ands	r3, r2
 8007f54:	d0e2      	beq.n	8007f1c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2180      	movs	r1, #128	@ 0x80
 8007f72:	0089      	lsls	r1, r1, #2
 8007f74:	430a      	orrs	r2, r1
 8007f76:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2180      	movs	r1, #128	@ 0x80
 8007f84:	0189      	lsls	r1, r1, #6
 8007f86:	430a      	orrs	r2, r1
 8007f88:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8007fc8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007f8c:	2380      	movs	r3, #128	@ 0x80
 8007f8e:	58d3      	ldr	r3, [r2, r3]
 8007f90:	490d      	ldr	r1, [pc, #52]	@ (8007fc8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8007f92:	2280      	movs	r2, #128	@ 0x80
 8007f94:	0312      	lsls	r2, r2, #12
 8007f96:	4313      	orrs	r3, r2
 8007f98:	2280      	movs	r2, #128	@ 0x80
 8007f9a:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	22ff      	movs	r2, #255	@ 0xff
 8007fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2229      	movs	r2, #41	@ 0x29
 8007fa8:	2101      	movs	r1, #1
 8007faa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2228      	movs	r2, #40	@ 0x28
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b009      	add	sp, #36	@ 0x24
 8007fbc:	bd90      	pop	{r4, r7, pc}
 8007fbe:	46c0      	nop			@ (mov r8, r8)
 8007fc0:	fffffeff 	.word	0xfffffeff
 8007fc4:	fffffdff 	.word	0xfffffdff
 8007fc8:	40021800 	.word	0x40021800

08007fcc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	2380      	movs	r3, #128	@ 0x80
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d144      	bne.n	800806e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2280      	movs	r2, #128	@ 0x80
 8007fe8:	0052      	lsls	r2, r2, #1
 8007fea:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffa:	045b      	lsls	r3, r3, #17
 8007ffc:	0c5b      	lsrs	r3, r3, #17
 8007ffe:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	0c1b      	lsrs	r3, r3, #16
 8008004:	b2db      	uxtb	r3, r3
 8008006:	223f      	movs	r2, #63	@ 0x3f
 8008008:	4013      	ands	r3, r2
 800800a:	b2da      	uxtb	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	b2db      	uxtb	r3, r3
 8008016:	227f      	movs	r2, #127	@ 0x7f
 8008018:	4013      	ands	r3, r2
 800801a:	b2da      	uxtb	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	227f      	movs	r2, #127	@ 0x7f
 8008026:	4013      	ands	r3, r2
 8008028:	b2da      	uxtb	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	0d9b      	lsrs	r3, r3, #22
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2201      	movs	r2, #1
 8008036:	4013      	ands	r3, r2
 8008038:	b2da      	uxtb	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	0e1b      	lsrs	r3, r3, #24
 8008048:	b2db      	uxtb	r3, r3
 800804a:	223f      	movs	r2, #63	@ 0x3f
 800804c:	4013      	ands	r3, r2
 800804e:	b2d9      	uxtb	r1, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2220      	movs	r2, #32
 8008054:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	2380      	movs	r3, #128	@ 0x80
 800805a:	05db      	lsls	r3, r3, #23
 800805c:	401a      	ands	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4a3b      	ldr	r2, [pc, #236]	@ (8008154 <HAL_RTC_GetAlarm+0x188>)
 8008066:	401a      	ands	r2, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	615a      	str	r2, [r3, #20]
 800806c:	e043      	b.n	80080f6 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2280      	movs	r2, #128	@ 0x80
 8008072:	0092      	lsls	r2, r2, #2
 8008074:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008084:	045b      	lsls	r3, r3, #17
 8008086:	0c5b      	lsrs	r3, r3, #17
 8008088:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	b2db      	uxtb	r3, r3
 8008090:	223f      	movs	r2, #63	@ 0x3f
 8008092:	4013      	ands	r3, r2
 8008094:	b2da      	uxtb	r2, r3
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	0a1b      	lsrs	r3, r3, #8
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	227f      	movs	r2, #127	@ 0x7f
 80080a2:	4013      	ands	r3, r2
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	227f      	movs	r2, #127	@ 0x7f
 80080b0:	4013      	ands	r3, r2
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	0d9b      	lsrs	r3, r3, #22
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2201      	movs	r2, #1
 80080c0:	4013      	ands	r3, r2
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	0e1b      	lsrs	r3, r3, #24
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	223f      	movs	r2, #63	@ 0x3f
 80080d6:	4013      	ands	r3, r2
 80080d8:	b2d9      	uxtb	r1, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2220      	movs	r2, #32
 80080de:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	2380      	movs	r3, #128	@ 0x80
 80080e4:	05db      	lsls	r3, r3, #23
 80080e6:	401a      	ands	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	4a19      	ldr	r2, [pc, #100]	@ (8008154 <HAL_RTC_GetAlarm+0x188>)
 80080f0:	401a      	ands	r2, r3
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d125      	bne.n	8008148 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	0018      	movs	r0, r3
 8008102:	f000 f88f 	bl	8008224 <RTC_Bcd2ToByte>
 8008106:	0003      	movs	r3, r0
 8008108:	001a      	movs	r2, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	785b      	ldrb	r3, [r3, #1]
 8008112:	0018      	movs	r0, r3
 8008114:	f000 f886 	bl	8008224 <RTC_Bcd2ToByte>
 8008118:	0003      	movs	r3, r0
 800811a:	001a      	movs	r2, r3
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	789b      	ldrb	r3, [r3, #2]
 8008124:	0018      	movs	r0, r3
 8008126:	f000 f87d 	bl	8008224 <RTC_Bcd2ToByte>
 800812a:	0003      	movs	r3, r0
 800812c:	001a      	movs	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2220      	movs	r2, #32
 8008136:	5c9b      	ldrb	r3, [r3, r2]
 8008138:	0018      	movs	r0, r3
 800813a:	f000 f873 	bl	8008224 <RTC_Bcd2ToByte>
 800813e:	0003      	movs	r3, r0
 8008140:	0019      	movs	r1, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2220      	movs	r2, #32
 8008146:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	0018      	movs	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	b006      	add	sp, #24
 8008150:	bd80      	pop	{r7, pc}
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	80808080 	.word	0x80808080

08008158 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	015b      	lsls	r3, r3, #5
 800816a:	4013      	ands	r3, r2
 800816c:	d011      	beq.n	8008192 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008174:	2201      	movs	r2, #1
 8008176:	4013      	ands	r3, r2
 8008178:	d00b      	beq.n	8008192 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2101      	movs	r1, #1
 8008186:	430a      	orrs	r2, r1
 8008188:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	0018      	movs	r0, r3
 800818e:	f7fc fc4d 	bl	8004a2c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	2380      	movs	r3, #128	@ 0x80
 800819a:	019b      	lsls	r3, r3, #6
 800819c:	4013      	ands	r3, r2
 800819e:	d011      	beq.n	80081c4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a6:	2202      	movs	r2, #2
 80081a8:	4013      	ands	r3, r2
 80081aa:	d00b      	beq.n	80081c4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2102      	movs	r1, #2
 80081b8:	430a      	orrs	r2, r1
 80081ba:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	0018      	movs	r0, r3
 80081c0:	f000 f873 	bl	80082aa <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2229      	movs	r2, #41	@ 0x29
 80081c8:	2101      	movs	r1, #1
 80081ca:	5499      	strb	r1, [r3, r2]
}
 80081cc:	46c0      	nop			@ (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b002      	add	sp, #8
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	0002      	movs	r2, r0
 80081dc:	1dfb      	adds	r3, r7, #7
 80081de:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80081e4:	230b      	movs	r3, #11
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	1dfa      	adds	r2, r7, #7
 80081ea:	7812      	ldrb	r2, [r2, #0]
 80081ec:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80081ee:	e008      	b.n	8008202 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80081f6:	220b      	movs	r2, #11
 80081f8:	18bb      	adds	r3, r7, r2
 80081fa:	18ba      	adds	r2, r7, r2
 80081fc:	7812      	ldrb	r2, [r2, #0]
 80081fe:	3a0a      	subs	r2, #10
 8008200:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8008202:	210b      	movs	r1, #11
 8008204:	187b      	adds	r3, r7, r1
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b09      	cmp	r3, #9
 800820a:	d8f1      	bhi.n	80081f0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	b2da      	uxtb	r2, r3
 8008214:	187b      	adds	r3, r7, r1
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	4313      	orrs	r3, r2
 800821a:	b2db      	uxtb	r3, r3
}
 800821c:	0018      	movs	r0, r3
 800821e:	46bd      	mov	sp, r7
 8008220:	b004      	add	sp, #16
 8008222:	bd80      	pop	{r7, pc}

08008224 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	0002      	movs	r2, r0
 800822c:	1dfb      	adds	r3, r7, #7
 800822e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8008230:	1dfb      	adds	r3, r7, #7
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	091b      	lsrs	r3, r3, #4
 8008236:	b2db      	uxtb	r3, r3
 8008238:	001a      	movs	r2, r3
 800823a:	0013      	movs	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	189b      	adds	r3, r3, r2
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	b2da      	uxtb	r2, r3
 8008248:	1dfb      	adds	r3, r7, #7
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	210f      	movs	r1, #15
 800824e:	400b      	ands	r3, r1
 8008250:	b2db      	uxtb	r3, r3
 8008252:	18d3      	adds	r3, r2, r3
 8008254:	b2db      	uxtb	r3, r3
}
 8008256:	0018      	movs	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	b004      	add	sp, #16
 800825c:	bd80      	pop	{r7, pc}

0800825e <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826c:	2204      	movs	r2, #4
 800826e:	4013      	ands	r3, r2
 8008270:	d00b      	beq.n	800828a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2104      	movs	r1, #4
 800827e:	430a      	orrs	r2, r1
 8008280:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0018      	movs	r0, r3
 8008286:	f000 f808 	bl	800829a <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2229      	movs	r2, #41	@ 0x29
 800828e:	2101      	movs	r1, #1
 8008290:	5499      	strb	r1, [r3, r2]
}
 8008292:	46c0      	nop			@ (mov r8, r8)
 8008294:	46bd      	mov	sp, r7
 8008296:	b002      	add	sp, #8
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80082a2:	46c0      	nop			@ (mov r8, r8)
 80082a4:	46bd      	mov	sp, r7
 80082a6:	b002      	add	sp, #8
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80082b2:	46c0      	nop			@ (mov r8, r8)
 80082b4:	46bd      	mov	sp, r7
 80082b6:	b002      	add	sp, #8
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e0a8      	b.n	8008420 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d109      	bne.n	80082ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	2382      	movs	r3, #130	@ 0x82
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	429a      	cmp	r2, r3
 80082e0:	d009      	beq.n	80082f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	61da      	str	r2, [r3, #28]
 80082e8:	e005      	b.n	80082f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	225d      	movs	r2, #93	@ 0x5d
 8008300:	5c9b      	ldrb	r3, [r3, r2]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d107      	bne.n	8008318 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	225c      	movs	r2, #92	@ 0x5c
 800830c:	2100      	movs	r1, #0
 800830e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	0018      	movs	r0, r3
 8008314:	f7fc fc54 	bl	8004bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	225d      	movs	r2, #93	@ 0x5d
 800831c:	2102      	movs	r1, #2
 800831e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2140      	movs	r1, #64	@ 0x40
 800832c:	438a      	bics	r2, r1
 800832e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	23e0      	movs	r3, #224	@ 0xe0
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	429a      	cmp	r2, r3
 800833a:	d902      	bls.n	8008342 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800833c:	2300      	movs	r3, #0
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	e002      	b.n	8008348 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008342:	2380      	movs	r3, #128	@ 0x80
 8008344:	015b      	lsls	r3, r3, #5
 8008346:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68da      	ldr	r2, [r3, #12]
 800834c:	23f0      	movs	r3, #240	@ 0xf0
 800834e:	011b      	lsls	r3, r3, #4
 8008350:	429a      	cmp	r2, r3
 8008352:	d008      	beq.n	8008366 <HAL_SPI_Init+0xaa>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	23e0      	movs	r3, #224	@ 0xe0
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	429a      	cmp	r2, r3
 800835e:	d002      	beq.n	8008366 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	2382      	movs	r3, #130	@ 0x82
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	401a      	ands	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6899      	ldr	r1, [r3, #8]
 8008374:	2384      	movs	r3, #132	@ 0x84
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	400b      	ands	r3, r1
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2102      	movs	r1, #2
 8008382:	400b      	ands	r3, r1
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	2101      	movs	r1, #1
 800838c:	400b      	ands	r3, r1
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6999      	ldr	r1, [r3, #24]
 8008394:	2380      	movs	r3, #128	@ 0x80
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	400b      	ands	r3, r1
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	2138      	movs	r1, #56	@ 0x38
 80083a2:	400b      	ands	r3, r1
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	2180      	movs	r1, #128	@ 0x80
 80083ac:	400b      	ands	r3, r1
 80083ae:	431a      	orrs	r2, r3
 80083b0:	0011      	movs	r1, r2
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083b6:	2380      	movs	r3, #128	@ 0x80
 80083b8:	019b      	lsls	r3, r3, #6
 80083ba:	401a      	ands	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	0c1b      	lsrs	r3, r3, #16
 80083ca:	2204      	movs	r2, #4
 80083cc:	401a      	ands	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d2:	2110      	movs	r1, #16
 80083d4:	400b      	ands	r3, r1
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083dc:	2108      	movs	r1, #8
 80083de:	400b      	ands	r3, r1
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68d9      	ldr	r1, [r3, #12]
 80083e6:	23f0      	movs	r3, #240	@ 0xf0
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	400b      	ands	r3, r1
 80083ec:	431a      	orrs	r2, r3
 80083ee:	0011      	movs	r1, r2
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	2380      	movs	r3, #128	@ 0x80
 80083f4:	015b      	lsls	r3, r3, #5
 80083f6:	401a      	ands	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69da      	ldr	r2, [r3, #28]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4907      	ldr	r1, [pc, #28]	@ (8008428 <HAL_SPI_Init+0x16c>)
 800840c:	400a      	ands	r2, r1
 800840e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	225d      	movs	r2, #93	@ 0x5d
 800841a:	2101      	movs	r1, #1
 800841c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	0018      	movs	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	b004      	add	sp, #16
 8008426:	bd80      	pop	{r7, pc}
 8008428:	fffff7ff 	.word	0xfffff7ff

0800842c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	1dbb      	adds	r3, r7, #6
 800843a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800843c:	231f      	movs	r3, #31
 800843e:	18fb      	adds	r3, r7, r3
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	225c      	movs	r2, #92	@ 0x5c
 8008448:	5c9b      	ldrb	r3, [r3, r2]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_SPI_Transmit+0x26>
 800844e:	2302      	movs	r3, #2
 8008450:	e147      	b.n	80086e2 <HAL_SPI_Transmit+0x2b6>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	225c      	movs	r2, #92	@ 0x5c
 8008456:	2101      	movs	r1, #1
 8008458:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800845a:	f7fd fc03 	bl	8005c64 <HAL_GetTick>
 800845e:	0003      	movs	r3, r0
 8008460:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008462:	2316      	movs	r3, #22
 8008464:	18fb      	adds	r3, r7, r3
 8008466:	1dba      	adds	r2, r7, #6
 8008468:	8812      	ldrh	r2, [r2, #0]
 800846a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	225d      	movs	r2, #93	@ 0x5d
 8008470:	5c9b      	ldrb	r3, [r3, r2]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b01      	cmp	r3, #1
 8008476:	d004      	beq.n	8008482 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008478:	231f      	movs	r3, #31
 800847a:	18fb      	adds	r3, r7, r3
 800847c:	2202      	movs	r2, #2
 800847e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008480:	e128      	b.n	80086d4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <HAL_SPI_Transmit+0x64>
 8008488:	1dbb      	adds	r3, r7, #6
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008490:	231f      	movs	r3, #31
 8008492:	18fb      	adds	r3, r7, r3
 8008494:	2201      	movs	r2, #1
 8008496:	701a      	strb	r2, [r3, #0]
    goto error;
 8008498:	e11c      	b.n	80086d4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	225d      	movs	r2, #93	@ 0x5d
 800849e:	2103      	movs	r1, #3
 80084a0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1dba      	adds	r2, r7, #6
 80084b2:	8812      	ldrh	r2, [r2, #0]
 80084b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	1dba      	adds	r2, r7, #6
 80084ba:	8812      	ldrh	r2, [r2, #0]
 80084bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2244      	movs	r2, #68	@ 0x44
 80084c8:	2100      	movs	r1, #0
 80084ca:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2246      	movs	r2, #70	@ 0x46
 80084d0:	2100      	movs	r1, #0
 80084d2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	2380      	movs	r3, #128	@ 0x80
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d110      	bne.n	800850e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2140      	movs	r1, #64	@ 0x40
 80084f8:	438a      	bics	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2180      	movs	r1, #128	@ 0x80
 8008508:	01c9      	lsls	r1, r1, #7
 800850a:	430a      	orrs	r2, r1
 800850c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2240      	movs	r2, #64	@ 0x40
 8008516:	4013      	ands	r3, r2
 8008518:	2b40      	cmp	r3, #64	@ 0x40
 800851a:	d007      	beq.n	800852c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2140      	movs	r1, #64	@ 0x40
 8008528:	430a      	orrs	r2, r1
 800852a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	23e0      	movs	r3, #224	@ 0xe0
 8008532:	00db      	lsls	r3, r3, #3
 8008534:	429a      	cmp	r2, r3
 8008536:	d952      	bls.n	80085de <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <HAL_SPI_Transmit+0x11e>
 8008540:	2316      	movs	r3, #22
 8008542:	18fb      	adds	r3, r7, r3
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d143      	bne.n	80085d2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	881a      	ldrh	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855a:	1c9a      	adds	r2, r3, #2
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800856e:	e030      	b.n	80085d2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2202      	movs	r2, #2
 8008578:	4013      	ands	r3, r2
 800857a:	2b02      	cmp	r3, #2
 800857c:	d112      	bne.n	80085a4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008582:	881a      	ldrh	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858e:	1c9a      	adds	r2, r3, #2
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085a2:	e016      	b.n	80085d2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085a4:	f7fd fb5e 	bl	8005c64 <HAL_GetTick>
 80085a8:	0002      	movs	r2, r0
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d802      	bhi.n	80085ba <HAL_SPI_Transmit+0x18e>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	d102      	bne.n	80085c0 <HAL_SPI_Transmit+0x194>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d108      	bne.n	80085d2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80085c0:	231f      	movs	r3, #31
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	2203      	movs	r2, #3
 80085c6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	225d      	movs	r2, #93	@ 0x5d
 80085cc:	2101      	movs	r1, #1
 80085ce:	5499      	strb	r1, [r3, r2]
          goto error;
 80085d0:	e080      	b.n	80086d4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1c9      	bne.n	8008570 <HAL_SPI_Transmit+0x144>
 80085dc:	e053      	b.n	8008686 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <HAL_SPI_Transmit+0x1c4>
 80085e6:	2316      	movs	r3, #22
 80085e8:	18fb      	adds	r3, r7, r3
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d145      	bne.n	800867c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	7812      	ldrb	r2, [r2, #0]
 80085fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8008616:	e031      	b.n	800867c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2202      	movs	r2, #2
 8008620:	4013      	ands	r3, r2
 8008622:	2b02      	cmp	r3, #2
 8008624:	d113      	bne.n	800864e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	330c      	adds	r3, #12
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800864c:	e016      	b.n	800867c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800864e:	f7fd fb09 	bl	8005c64 <HAL_GetTick>
 8008652:	0002      	movs	r2, r0
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	d802      	bhi.n	8008664 <HAL_SPI_Transmit+0x238>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	d102      	bne.n	800866a <HAL_SPI_Transmit+0x23e>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d108      	bne.n	800867c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800866a:	231f      	movs	r3, #31
 800866c:	18fb      	adds	r3, r7, r3
 800866e:	2203      	movs	r2, #3
 8008670:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	225d      	movs	r2, #93	@ 0x5d
 8008676:	2101      	movs	r1, #1
 8008678:	5499      	strb	r1, [r3, r2]
          goto error;
 800867a:	e02b      	b.n	80086d4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1c8      	bne.n	8008618 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	0018      	movs	r0, r3
 800868e:	f000 f95d 	bl	800894c <SPI_EndRxTxTransaction>
 8008692:	1e03      	subs	r3, r0, #0
 8008694:	d002      	beq.n	800869c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086a4:	2300      	movs	r3, #0
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	613b      	str	r3, [r7, #16]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	613b      	str	r3, [r7, #16]
 80086b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80086c2:	231f      	movs	r3, #31
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	2201      	movs	r2, #1
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e003      	b.n	80086d4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	225d      	movs	r2, #93	@ 0x5d
 80086d0:	2101      	movs	r1, #1
 80086d2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	225c      	movs	r2, #92	@ 0x5c
 80086d8:	2100      	movs	r1, #0
 80086da:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80086dc:	231f      	movs	r3, #31
 80086de:	18fb      	adds	r3, r7, r3
 80086e0:	781b      	ldrb	r3, [r3, #0]
}
 80086e2:	0018      	movs	r0, r3
 80086e4:	46bd      	mov	sp, r7
 80086e6:	b008      	add	sp, #32
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	1dfb      	adds	r3, r7, #7
 80086fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086fc:	f7fd fab2 	bl	8005c64 <HAL_GetTick>
 8008700:	0002      	movs	r2, r0
 8008702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	18d3      	adds	r3, r2, r3
 800870a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800870c:	f7fd faaa 	bl	8005c64 <HAL_GetTick>
 8008710:	0003      	movs	r3, r0
 8008712:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008714:	4b3a      	ldr	r3, [pc, #232]	@ (8008800 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	015b      	lsls	r3, r3, #5
 800871a:	0d1b      	lsrs	r3, r3, #20
 800871c:	69fa      	ldr	r2, [r7, #28]
 800871e:	4353      	muls	r3, r2
 8008720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008722:	e058      	b.n	80087d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	3301      	adds	r3, #1
 8008728:	d055      	beq.n	80087d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800872a:	f7fd fa9b 	bl	8005c64 <HAL_GetTick>
 800872e:	0002      	movs	r2, r0
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	429a      	cmp	r2, r3
 8008738:	d902      	bls.n	8008740 <SPI_WaitFlagStateUntilTimeout+0x54>
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d142      	bne.n	80087c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	21e0      	movs	r1, #224	@ 0xe0
 800874c:	438a      	bics	r2, r1
 800874e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	2382      	movs	r3, #130	@ 0x82
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	429a      	cmp	r2, r3
 800875a:	d113      	bne.n	8008784 <SPI_WaitFlagStateUntilTimeout+0x98>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	2380      	movs	r3, #128	@ 0x80
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	429a      	cmp	r2, r3
 8008766:	d005      	beq.n	8008774 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	2380      	movs	r3, #128	@ 0x80
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	429a      	cmp	r2, r3
 8008772:	d107      	bne.n	8008784 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2140      	movs	r1, #64	@ 0x40
 8008780:	438a      	bics	r2, r1
 8008782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008788:	2380      	movs	r3, #128	@ 0x80
 800878a:	019b      	lsls	r3, r3, #6
 800878c:	429a      	cmp	r2, r3
 800878e:	d110      	bne.n	80087b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	491a      	ldr	r1, [pc, #104]	@ (8008804 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800879c:	400a      	ands	r2, r1
 800879e:	601a      	str	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2180      	movs	r1, #128	@ 0x80
 80087ac:	0189      	lsls	r1, r1, #6
 80087ae:	430a      	orrs	r2, r1
 80087b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	225d      	movs	r2, #93	@ 0x5d
 80087b6:	2101      	movs	r1, #1
 80087b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	225c      	movs	r2, #92	@ 0x5c
 80087be:	2100      	movs	r1, #0
 80087c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e017      	b.n	80087f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	4013      	ands	r3, r2
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	425a      	negs	r2, r3
 80087e6:	4153      	adcs	r3, r2
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	001a      	movs	r2, r3
 80087ec:	1dfb      	adds	r3, r7, #7
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d197      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	0018      	movs	r0, r3
 80087f8:	46bd      	mov	sp, r7
 80087fa:	b008      	add	sp, #32
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	46c0      	nop			@ (mov r8, r8)
 8008800:	20000e84 	.word	0x20000e84
 8008804:	ffffdfff 	.word	0xffffdfff

08008808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	@ 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008816:	2317      	movs	r3, #23
 8008818:	18fb      	adds	r3, r7, r3
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800881e:	f7fd fa21 	bl	8005c64 <HAL_GetTick>
 8008822:	0002      	movs	r2, r0
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	18d3      	adds	r3, r2, r3
 800882c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800882e:	f7fd fa19 	bl	8005c64 <HAL_GetTick>
 8008832:	0003      	movs	r3, r0
 8008834:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	330c      	adds	r3, #12
 800883c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800883e:	4b41      	ldr	r3, [pc, #260]	@ (8008944 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	0013      	movs	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	189b      	adds	r3, r3, r2
 8008848:	00da      	lsls	r2, r3, #3
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	0d1b      	lsrs	r3, r3, #20
 800884e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008850:	4353      	muls	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008854:	e068      	b.n	8008928 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	23c0      	movs	r3, #192	@ 0xc0
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	429a      	cmp	r2, r3
 800885e:	d10a      	bne.n	8008876 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	2117      	movs	r1, #23
 800886e:	187b      	adds	r3, r7, r1
 8008870:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008872:	187b      	adds	r3, r7, r1
 8008874:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	3301      	adds	r3, #1
 800887a:	d055      	beq.n	8008928 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800887c:	f7fd f9f2 	bl	8005c64 <HAL_GetTick>
 8008880:	0002      	movs	r2, r0
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008888:	429a      	cmp	r2, r3
 800888a:	d902      	bls.n	8008892 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	2b00      	cmp	r3, #0
 8008890:	d142      	bne.n	8008918 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	21e0      	movs	r1, #224	@ 0xe0
 800889e:	438a      	bics	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	2382      	movs	r3, #130	@ 0x82
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d113      	bne.n	80088d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	2380      	movs	r3, #128	@ 0x80
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d005      	beq.n	80088c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	2380      	movs	r3, #128	@ 0x80
 80088c0:	00db      	lsls	r3, r3, #3
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d107      	bne.n	80088d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2140      	movs	r1, #64	@ 0x40
 80088d2:	438a      	bics	r2, r1
 80088d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088da:	2380      	movs	r3, #128	@ 0x80
 80088dc:	019b      	lsls	r3, r3, #6
 80088de:	429a      	cmp	r2, r3
 80088e0:	d110      	bne.n	8008904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4916      	ldr	r1, [pc, #88]	@ (8008948 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80088ee:	400a      	ands	r2, r1
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2180      	movs	r1, #128	@ 0x80
 80088fe:	0189      	lsls	r1, r1, #6
 8008900:	430a      	orrs	r2, r1
 8008902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	225d      	movs	r2, #93	@ 0x5d
 8008908:	2101      	movs	r1, #1
 800890a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	225c      	movs	r2, #92	@ 0x5c
 8008910:	2100      	movs	r1, #0
 8008912:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e010      	b.n	800893a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	3b01      	subs	r3, #1
 8008926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4013      	ands	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d18e      	bne.n	8008856 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	0018      	movs	r0, r3
 800893c:	46bd      	mov	sp, r7
 800893e:	b00a      	add	sp, #40	@ 0x28
 8008940:	bd80      	pop	{r7, pc}
 8008942:	46c0      	nop			@ (mov r8, r8)
 8008944:	20000e84 	.word	0x20000e84
 8008948:	ffffdfff 	.word	0xffffdfff

0800894c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af02      	add	r7, sp, #8
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	23c0      	movs	r3, #192	@ 0xc0
 800895c:	0159      	lsls	r1, r3, #5
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	0013      	movs	r3, r2
 8008966:	2200      	movs	r2, #0
 8008968:	f7ff ff4e 	bl	8008808 <SPI_WaitFifoStateUntilTimeout>
 800896c:	1e03      	subs	r3, r0, #0
 800896e:	d007      	beq.n	8008980 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008974:	2220      	movs	r2, #32
 8008976:	431a      	orrs	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e027      	b.n	80089d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	0013      	movs	r3, r2
 800898a:	2200      	movs	r2, #0
 800898c:	2180      	movs	r1, #128	@ 0x80
 800898e:	f7ff fead 	bl	80086ec <SPI_WaitFlagStateUntilTimeout>
 8008992:	1e03      	subs	r3, r0, #0
 8008994:	d007      	beq.n	80089a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800899a:	2220      	movs	r2, #32
 800899c:	431a      	orrs	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e014      	b.n	80089d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	23c0      	movs	r3, #192	@ 0xc0
 80089aa:	00d9      	lsls	r1, r3, #3
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	0013      	movs	r3, r2
 80089b4:	2200      	movs	r2, #0
 80089b6:	f7ff ff27 	bl	8008808 <SPI_WaitFifoStateUntilTimeout>
 80089ba:	1e03      	subs	r3, r0, #0
 80089bc:	d007      	beq.n	80089ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089c2:	2220      	movs	r2, #32
 80089c4:	431a      	orrs	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e000      	b.n	80089d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	0018      	movs	r0, r3
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b004      	add	sp, #16
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e04a      	b.n	8008a80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	223d      	movs	r2, #61	@ 0x3d
 80089ee:	5c9b      	ldrb	r3, [r3, r2]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d107      	bne.n	8008a06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	223c      	movs	r2, #60	@ 0x3c
 80089fa:	2100      	movs	r1, #0
 80089fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	0018      	movs	r0, r3
 8008a02:	f7fc f94b 	bl	8004c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	223d      	movs	r2, #61	@ 0x3d
 8008a0a:	2102      	movs	r1, #2
 8008a0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	3304      	adds	r3, #4
 8008a16:	0019      	movs	r1, r3
 8008a18:	0010      	movs	r0, r2
 8008a1a:	f000 fb11 	bl	8009040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2248      	movs	r2, #72	@ 0x48
 8008a22:	2101      	movs	r1, #1
 8008a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	223e      	movs	r2, #62	@ 0x3e
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	5499      	strb	r1, [r3, r2]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	223f      	movs	r2, #63	@ 0x3f
 8008a32:	2101      	movs	r1, #1
 8008a34:	5499      	strb	r1, [r3, r2]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2240      	movs	r2, #64	@ 0x40
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	5499      	strb	r1, [r3, r2]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2241      	movs	r2, #65	@ 0x41
 8008a42:	2101      	movs	r1, #1
 8008a44:	5499      	strb	r1, [r3, r2]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2242      	movs	r2, #66	@ 0x42
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	5499      	strb	r1, [r3, r2]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2243      	movs	r2, #67	@ 0x43
 8008a52:	2101      	movs	r1, #1
 8008a54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2244      	movs	r2, #68	@ 0x44
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	5499      	strb	r1, [r3, r2]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2245      	movs	r2, #69	@ 0x45
 8008a62:	2101      	movs	r1, #1
 8008a64:	5499      	strb	r1, [r3, r2]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2246      	movs	r2, #70	@ 0x46
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	5499      	strb	r1, [r3, r2]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2247      	movs	r2, #71	@ 0x47
 8008a72:	2101      	movs	r1, #1
 8008a74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	223d      	movs	r2, #61	@ 0x3d
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	0018      	movs	r0, r3
 8008a82:	46bd      	mov	sp, r7
 8008a84:	b002      	add	sp, #8
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e04a      	b.n	8008b30 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	223d      	movs	r2, #61	@ 0x3d
 8008a9e:	5c9b      	ldrb	r3, [r3, r2]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d107      	bne.n	8008ab6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	223c      	movs	r2, #60	@ 0x3c
 8008aaa:	2100      	movs	r1, #0
 8008aac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f000 f841 	bl	8008b38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	223d      	movs	r2, #61	@ 0x3d
 8008aba:	2102      	movs	r1, #2
 8008abc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	0010      	movs	r0, r2
 8008aca:	f000 fab9 	bl	8009040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2248      	movs	r2, #72	@ 0x48
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	223e      	movs	r2, #62	@ 0x3e
 8008ada:	2101      	movs	r1, #1
 8008adc:	5499      	strb	r1, [r3, r2]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	223f      	movs	r2, #63	@ 0x3f
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	5499      	strb	r1, [r3, r2]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2240      	movs	r2, #64	@ 0x40
 8008aea:	2101      	movs	r1, #1
 8008aec:	5499      	strb	r1, [r3, r2]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2241      	movs	r2, #65	@ 0x41
 8008af2:	2101      	movs	r1, #1
 8008af4:	5499      	strb	r1, [r3, r2]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2242      	movs	r2, #66	@ 0x42
 8008afa:	2101      	movs	r1, #1
 8008afc:	5499      	strb	r1, [r3, r2]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2243      	movs	r2, #67	@ 0x43
 8008b02:	2101      	movs	r1, #1
 8008b04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2244      	movs	r2, #68	@ 0x44
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	5499      	strb	r1, [r3, r2]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2245      	movs	r2, #69	@ 0x45
 8008b12:	2101      	movs	r1, #1
 8008b14:	5499      	strb	r1, [r3, r2]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2246      	movs	r2, #70	@ 0x46
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	5499      	strb	r1, [r3, r2]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2247      	movs	r2, #71	@ 0x47
 8008b22:	2101      	movs	r1, #1
 8008b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	223d      	movs	r2, #61	@ 0x3d
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	0018      	movs	r0, r3
 8008b32:	46bd      	mov	sp, r7
 8008b34:	b002      	add	sp, #8
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b40:	46c0      	nop			@ (mov r8, r8)
 8008b42:	46bd      	mov	sp, r7
 8008b44:	b002      	add	sp, #8
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d108      	bne.n	8008b6a <HAL_TIM_PWM_Start+0x22>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	223e      	movs	r2, #62	@ 0x3e
 8008b5c:	5c9b      	ldrb	r3, [r3, r2]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	1e5a      	subs	r2, r3, #1
 8008b64:	4193      	sbcs	r3, r2
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	e037      	b.n	8008bda <HAL_TIM_PWM_Start+0x92>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d108      	bne.n	8008b82 <HAL_TIM_PWM_Start+0x3a>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	223f      	movs	r2, #63	@ 0x3f
 8008b74:	5c9b      	ldrb	r3, [r3, r2]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	1e5a      	subs	r2, r3, #1
 8008b7c:	4193      	sbcs	r3, r2
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	e02b      	b.n	8008bda <HAL_TIM_PWM_Start+0x92>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2b08      	cmp	r3, #8
 8008b86:	d108      	bne.n	8008b9a <HAL_TIM_PWM_Start+0x52>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2240      	movs	r2, #64	@ 0x40
 8008b8c:	5c9b      	ldrb	r3, [r3, r2]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	3b01      	subs	r3, #1
 8008b92:	1e5a      	subs	r2, r3, #1
 8008b94:	4193      	sbcs	r3, r2
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	e01f      	b.n	8008bda <HAL_TIM_PWM_Start+0x92>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b0c      	cmp	r3, #12
 8008b9e:	d108      	bne.n	8008bb2 <HAL_TIM_PWM_Start+0x6a>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2241      	movs	r2, #65	@ 0x41
 8008ba4:	5c9b      	ldrb	r3, [r3, r2]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	1e5a      	subs	r2, r3, #1
 8008bac:	4193      	sbcs	r3, r2
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	e013      	b.n	8008bda <HAL_TIM_PWM_Start+0x92>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	d108      	bne.n	8008bca <HAL_TIM_PWM_Start+0x82>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2242      	movs	r2, #66	@ 0x42
 8008bbc:	5c9b      	ldrb	r3, [r3, r2]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	1e5a      	subs	r2, r3, #1
 8008bc4:	4193      	sbcs	r3, r2
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	e007      	b.n	8008bda <HAL_TIM_PWM_Start+0x92>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2243      	movs	r2, #67	@ 0x43
 8008bce:	5c9b      	ldrb	r3, [r3, r2]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	4193      	sbcs	r3, r2
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e090      	b.n	8008d04 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <HAL_TIM_PWM_Start+0xaa>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	223e      	movs	r2, #62	@ 0x3e
 8008bec:	2102      	movs	r1, #2
 8008bee:	5499      	strb	r1, [r3, r2]
 8008bf0:	e023      	b.n	8008c3a <HAL_TIM_PWM_Start+0xf2>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d104      	bne.n	8008c02 <HAL_TIM_PWM_Start+0xba>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	223f      	movs	r2, #63	@ 0x3f
 8008bfc:	2102      	movs	r1, #2
 8008bfe:	5499      	strb	r1, [r3, r2]
 8008c00:	e01b      	b.n	8008c3a <HAL_TIM_PWM_Start+0xf2>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d104      	bne.n	8008c12 <HAL_TIM_PWM_Start+0xca>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2240      	movs	r2, #64	@ 0x40
 8008c0c:	2102      	movs	r1, #2
 8008c0e:	5499      	strb	r1, [r3, r2]
 8008c10:	e013      	b.n	8008c3a <HAL_TIM_PWM_Start+0xf2>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b0c      	cmp	r3, #12
 8008c16:	d104      	bne.n	8008c22 <HAL_TIM_PWM_Start+0xda>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2241      	movs	r2, #65	@ 0x41
 8008c1c:	2102      	movs	r1, #2
 8008c1e:	5499      	strb	r1, [r3, r2]
 8008c20:	e00b      	b.n	8008c3a <HAL_TIM_PWM_Start+0xf2>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	d104      	bne.n	8008c32 <HAL_TIM_PWM_Start+0xea>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2242      	movs	r2, #66	@ 0x42
 8008c2c:	2102      	movs	r1, #2
 8008c2e:	5499      	strb	r1, [r3, r2]
 8008c30:	e003      	b.n	8008c3a <HAL_TIM_PWM_Start+0xf2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2243      	movs	r2, #67	@ 0x43
 8008c36:	2102      	movs	r1, #2
 8008c38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	2201      	movs	r2, #1
 8008c42:	0018      	movs	r0, r3
 8008c44:	f000 fd58 	bl	80096f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8008d0c <HAL_TIM_PWM_Start+0x1c4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00e      	beq.n	8008c70 <HAL_TIM_PWM_Start+0x128>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a2e      	ldr	r2, [pc, #184]	@ (8008d10 <HAL_TIM_PWM_Start+0x1c8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d009      	beq.n	8008c70 <HAL_TIM_PWM_Start+0x128>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a2c      	ldr	r2, [pc, #176]	@ (8008d14 <HAL_TIM_PWM_Start+0x1cc>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d004      	beq.n	8008c70 <HAL_TIM_PWM_Start+0x128>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8008d18 <HAL_TIM_PWM_Start+0x1d0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d101      	bne.n	8008c74 <HAL_TIM_PWM_Start+0x12c>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <HAL_TIM_PWM_Start+0x12e>
 8008c74:	2300      	movs	r3, #0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2180      	movs	r1, #128	@ 0x80
 8008c86:	0209      	lsls	r1, r1, #8
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1e      	ldr	r2, [pc, #120]	@ (8008d0c <HAL_TIM_PWM_Start+0x1c4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d014      	beq.n	8008cc0 <HAL_TIM_PWM_Start+0x178>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	2380      	movs	r3, #128	@ 0x80
 8008c9c:	05db      	lsls	r3, r3, #23
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d00e      	beq.n	8008cc0 <HAL_TIM_PWM_Start+0x178>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8008d1c <HAL_TIM_PWM_Start+0x1d4>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d009      	beq.n	8008cc0 <HAL_TIM_PWM_Start+0x178>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d20 <HAL_TIM_PWM_Start+0x1d8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <HAL_TIM_PWM_Start+0x178>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a15      	ldr	r2, [pc, #84]	@ (8008d10 <HAL_TIM_PWM_Start+0x1c8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d116      	bne.n	8008cee <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	4a17      	ldr	r2, [pc, #92]	@ (8008d24 <HAL_TIM_PWM_Start+0x1dc>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b06      	cmp	r3, #6
 8008cd0:	d016      	beq.n	8008d00 <HAL_TIM_PWM_Start+0x1b8>
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	025b      	lsls	r3, r3, #9
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d011      	beq.n	8008d00 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cec:	e008      	b.n	8008d00 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e000      	b.n	8008d02 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d00:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b004      	add	sp, #16
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40012c00 	.word	0x40012c00
 8008d10:	40014000 	.word	0x40014000
 8008d14:	40014400 	.word	0x40014400
 8008d18:	40014800 	.word	0x40014800
 8008d1c:	40000400 	.word	0x40000400
 8008d20:	40000800 	.word	0x40000800
 8008d24:	00010007 	.word	0x00010007

08008d28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f000 fcdc 	bl	80096f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a37      	ldr	r2, [pc, #220]	@ (8008e24 <HAL_TIM_PWM_Stop+0xfc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00e      	beq.n	8008d68 <HAL_TIM_PWM_Stop+0x40>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a36      	ldr	r2, [pc, #216]	@ (8008e28 <HAL_TIM_PWM_Stop+0x100>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d009      	beq.n	8008d68 <HAL_TIM_PWM_Stop+0x40>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a34      	ldr	r2, [pc, #208]	@ (8008e2c <HAL_TIM_PWM_Stop+0x104>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <HAL_TIM_PWM_Stop+0x40>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a33      	ldr	r2, [pc, #204]	@ (8008e30 <HAL_TIM_PWM_Stop+0x108>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d101      	bne.n	8008d6c <HAL_TIM_PWM_Stop+0x44>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e000      	b.n	8008d6e <HAL_TIM_PWM_Stop+0x46>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d013      	beq.n	8008d9a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	4a2e      	ldr	r2, [pc, #184]	@ (8008e34 <HAL_TIM_PWM_Stop+0x10c>)
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	d10d      	bne.n	8008d9a <HAL_TIM_PWM_Stop+0x72>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	4a2c      	ldr	r2, [pc, #176]	@ (8008e38 <HAL_TIM_PWM_Stop+0x110>)
 8008d86:	4013      	ands	r3, r2
 8008d88:	d107      	bne.n	8008d9a <HAL_TIM_PWM_Stop+0x72>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4929      	ldr	r1, [pc, #164]	@ (8008e3c <HAL_TIM_PWM_Stop+0x114>)
 8008d96:	400a      	ands	r2, r1
 8008d98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	4a24      	ldr	r2, [pc, #144]	@ (8008e34 <HAL_TIM_PWM_Stop+0x10c>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	d10d      	bne.n	8008dc2 <HAL_TIM_PWM_Stop+0x9a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	4a22      	ldr	r2, [pc, #136]	@ (8008e38 <HAL_TIM_PWM_Stop+0x110>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	d107      	bne.n	8008dc2 <HAL_TIM_PWM_Stop+0x9a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	438a      	bics	r2, r1
 8008dc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <HAL_TIM_PWM_Stop+0xaa>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	223e      	movs	r2, #62	@ 0x3e
 8008dcc:	2101      	movs	r1, #1
 8008dce:	5499      	strb	r1, [r3, r2]
 8008dd0:	e023      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xf2>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d104      	bne.n	8008de2 <HAL_TIM_PWM_Stop+0xba>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	223f      	movs	r2, #63	@ 0x3f
 8008ddc:	2101      	movs	r1, #1
 8008dde:	5499      	strb	r1, [r3, r2]
 8008de0:	e01b      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xf2>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d104      	bne.n	8008df2 <HAL_TIM_PWM_Stop+0xca>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2240      	movs	r2, #64	@ 0x40
 8008dec:	2101      	movs	r1, #1
 8008dee:	5499      	strb	r1, [r3, r2]
 8008df0:	e013      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xf2>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b0c      	cmp	r3, #12
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Stop+0xda>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2241      	movs	r2, #65	@ 0x41
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	5499      	strb	r1, [r3, r2]
 8008e00:	e00b      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xf2>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Stop+0xea>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2242      	movs	r2, #66	@ 0x42
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	5499      	strb	r1, [r3, r2]
 8008e10:	e003      	b.n	8008e1a <HAL_TIM_PWM_Stop+0xf2>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2243      	movs	r2, #67	@ 0x43
 8008e16:	2101      	movs	r1, #1
 8008e18:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b002      	add	sp, #8
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40012c00 	.word	0x40012c00
 8008e28:	40014000 	.word	0x40014000
 8008e2c:	40014400 	.word	0x40014400
 8008e30:	40014800 	.word	0x40014800
 8008e34:	00001111 	.word	0x00001111
 8008e38:	00000444 	.word	0x00000444
 8008e3c:	ffff7fff 	.word	0xffff7fff

08008e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e4c:	2317      	movs	r3, #23
 8008e4e:	18fb      	adds	r3, r7, r3
 8008e50:	2200      	movs	r2, #0
 8008e52:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	223c      	movs	r2, #60	@ 0x3c
 8008e58:	5c9b      	ldrb	r3, [r3, r2]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d101      	bne.n	8008e62 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e0e5      	b.n	800902e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	223c      	movs	r2, #60	@ 0x3c
 8008e66:	2101      	movs	r1, #1
 8008e68:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b14      	cmp	r3, #20
 8008e6e:	d900      	bls.n	8008e72 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008e70:	e0d1      	b.n	8009016 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	009a      	lsls	r2, r3, #2
 8008e76:	4b70      	ldr	r3, [pc, #448]	@ (8009038 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008e78:	18d3      	adds	r3, r2, r3
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	0011      	movs	r1, r2
 8008e86:	0018      	movs	r0, r3
 8008e88:	f000 f972 	bl	8009170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2108      	movs	r1, #8
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2104      	movs	r1, #4
 8008ea8:	438a      	bics	r2, r1
 8008eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6999      	ldr	r1, [r3, #24]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	691a      	ldr	r2, [r3, #16]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	619a      	str	r2, [r3, #24]
      break;
 8008ebe:	e0af      	b.n	8009020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	0011      	movs	r1, r2
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f000 f9db 	bl	8009284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2180      	movs	r1, #128	@ 0x80
 8008eda:	0109      	lsls	r1, r1, #4
 8008edc:	430a      	orrs	r2, r1
 8008ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	699a      	ldr	r2, [r3, #24]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4954      	ldr	r1, [pc, #336]	@ (800903c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008eec:	400a      	ands	r2, r1
 8008eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6999      	ldr	r1, [r3, #24]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	021a      	lsls	r2, r3, #8
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	619a      	str	r2, [r3, #24]
      break;
 8008f04:	e08c      	b.n	8009020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	0011      	movs	r1, r2
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f000 fa3c 	bl	800938c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69da      	ldr	r2, [r3, #28]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2108      	movs	r1, #8
 8008f20:	430a      	orrs	r2, r1
 8008f22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	69da      	ldr	r2, [r3, #28]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2104      	movs	r1, #4
 8008f30:	438a      	bics	r2, r1
 8008f32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69d9      	ldr	r1, [r3, #28]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	691a      	ldr	r2, [r3, #16]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	61da      	str	r2, [r3, #28]
      break;
 8008f46:	e06b      	b.n	8009020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	0011      	movs	r1, r2
 8008f50:	0018      	movs	r0, r3
 8008f52:	f000 faa3 	bl	800949c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69da      	ldr	r2, [r3, #28]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2180      	movs	r1, #128	@ 0x80
 8008f62:	0109      	lsls	r1, r1, #4
 8008f64:	430a      	orrs	r2, r1
 8008f66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69da      	ldr	r2, [r3, #28]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4932      	ldr	r1, [pc, #200]	@ (800903c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008f74:	400a      	ands	r2, r1
 8008f76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	69d9      	ldr	r1, [r3, #28]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	021a      	lsls	r2, r3, #8
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	61da      	str	r2, [r3, #28]
      break;
 8008f8c:	e048      	b.n	8009020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	0011      	movs	r1, r2
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 faea 	bl	8009570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2108      	movs	r1, #8
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2104      	movs	r1, #4
 8008fb8:	438a      	bics	r2, r1
 8008fba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	691a      	ldr	r2, [r3, #16]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008fce:	e027      	b.n	8009020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	0011      	movs	r1, r2
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f000 fb29 	bl	8009630 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2180      	movs	r1, #128	@ 0x80
 8008fea:	0109      	lsls	r1, r1, #4
 8008fec:	430a      	orrs	r2, r1
 8008fee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4910      	ldr	r1, [pc, #64]	@ (800903c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008ffc:	400a      	ands	r2, r1
 8008ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	021a      	lsls	r2, r3, #8
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009014:	e004      	b.n	8009020 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8009016:	2317      	movs	r3, #23
 8009018:	18fb      	adds	r3, r7, r3
 800901a:	2201      	movs	r2, #1
 800901c:	701a      	strb	r2, [r3, #0]
      break;
 800901e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	223c      	movs	r2, #60	@ 0x3c
 8009024:	2100      	movs	r1, #0
 8009026:	5499      	strb	r1, [r3, r2]

  return status;
 8009028:	2317      	movs	r3, #23
 800902a:	18fb      	adds	r3, r7, r3
 800902c:	781b      	ldrb	r3, [r3, #0]
}
 800902e:	0018      	movs	r0, r3
 8009030:	46bd      	mov	sp, r7
 8009032:	b006      	add	sp, #24
 8009034:	bd80      	pop	{r7, pc}
 8009036:	46c0      	nop			@ (mov r8, r8)
 8009038:	0800e330 	.word	0x0800e330
 800903c:	fffffbff 	.word	0xfffffbff

08009040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a3f      	ldr	r2, [pc, #252]	@ (8009150 <TIM_Base_SetConfig+0x110>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00c      	beq.n	8009072 <TIM_Base_SetConfig+0x32>
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	2380      	movs	r3, #128	@ 0x80
 800905c:	05db      	lsls	r3, r3, #23
 800905e:	429a      	cmp	r2, r3
 8009060:	d007      	beq.n	8009072 <TIM_Base_SetConfig+0x32>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a3b      	ldr	r2, [pc, #236]	@ (8009154 <TIM_Base_SetConfig+0x114>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d003      	beq.n	8009072 <TIM_Base_SetConfig+0x32>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a3a      	ldr	r2, [pc, #232]	@ (8009158 <TIM_Base_SetConfig+0x118>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d108      	bne.n	8009084 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2270      	movs	r2, #112	@ 0x70
 8009076:	4393      	bics	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a32      	ldr	r2, [pc, #200]	@ (8009150 <TIM_Base_SetConfig+0x110>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d01c      	beq.n	80090c6 <TIM_Base_SetConfig+0x86>
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	2380      	movs	r3, #128	@ 0x80
 8009090:	05db      	lsls	r3, r3, #23
 8009092:	429a      	cmp	r2, r3
 8009094:	d017      	beq.n	80090c6 <TIM_Base_SetConfig+0x86>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a2e      	ldr	r2, [pc, #184]	@ (8009154 <TIM_Base_SetConfig+0x114>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d013      	beq.n	80090c6 <TIM_Base_SetConfig+0x86>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009158 <TIM_Base_SetConfig+0x118>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00f      	beq.n	80090c6 <TIM_Base_SetConfig+0x86>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a2c      	ldr	r2, [pc, #176]	@ (800915c <TIM_Base_SetConfig+0x11c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00b      	beq.n	80090c6 <TIM_Base_SetConfig+0x86>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a2b      	ldr	r2, [pc, #172]	@ (8009160 <TIM_Base_SetConfig+0x120>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d007      	beq.n	80090c6 <TIM_Base_SetConfig+0x86>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a2a      	ldr	r2, [pc, #168]	@ (8009164 <TIM_Base_SetConfig+0x124>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d003      	beq.n	80090c6 <TIM_Base_SetConfig+0x86>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a29      	ldr	r2, [pc, #164]	@ (8009168 <TIM_Base_SetConfig+0x128>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d108      	bne.n	80090d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	4a28      	ldr	r2, [pc, #160]	@ (800916c <TIM_Base_SetConfig+0x12c>)
 80090ca:	4013      	ands	r3, r2
 80090cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2280      	movs	r2, #128	@ 0x80
 80090dc:	4393      	bics	r3, r2
 80090de:	001a      	movs	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	689a      	ldr	r2, [r3, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a13      	ldr	r2, [pc, #76]	@ (8009150 <TIM_Base_SetConfig+0x110>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d00b      	beq.n	800911e <TIM_Base_SetConfig+0xde>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a15      	ldr	r2, [pc, #84]	@ (8009160 <TIM_Base_SetConfig+0x120>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d007      	beq.n	800911e <TIM_Base_SetConfig+0xde>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a14      	ldr	r2, [pc, #80]	@ (8009164 <TIM_Base_SetConfig+0x124>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d003      	beq.n	800911e <TIM_Base_SetConfig+0xde>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a13      	ldr	r2, [pc, #76]	@ (8009168 <TIM_Base_SetConfig+0x128>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d103      	bne.n	8009126 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	691a      	ldr	r2, [r3, #16]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	2201      	movs	r2, #1
 8009132:	4013      	ands	r3, r2
 8009134:	2b01      	cmp	r3, #1
 8009136:	d106      	bne.n	8009146 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2201      	movs	r2, #1
 800913e:	4393      	bics	r3, r2
 8009140:	001a      	movs	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	611a      	str	r2, [r3, #16]
  }
}
 8009146:	46c0      	nop			@ (mov r8, r8)
 8009148:	46bd      	mov	sp, r7
 800914a:	b004      	add	sp, #16
 800914c:	bd80      	pop	{r7, pc}
 800914e:	46c0      	nop			@ (mov r8, r8)
 8009150:	40012c00 	.word	0x40012c00
 8009154:	40000400 	.word	0x40000400
 8009158:	40000800 	.word	0x40000800
 800915c:	40002000 	.word	0x40002000
 8009160:	40014000 	.word	0x40014000
 8009164:	40014400 	.word	0x40014400
 8009168:	40014800 	.word	0x40014800
 800916c:	fffffcff 	.word	0xfffffcff

08009170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	2201      	movs	r2, #1
 8009186:	4393      	bics	r3, r2
 8009188:	001a      	movs	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4a32      	ldr	r2, [pc, #200]	@ (8009268 <TIM_OC1_SetConfig+0xf8>)
 800919e:	4013      	ands	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2203      	movs	r2, #3
 80091a6:	4393      	bics	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2202      	movs	r2, #2
 80091b8:	4393      	bics	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a28      	ldr	r2, [pc, #160]	@ (800926c <TIM_OC1_SetConfig+0xfc>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d00b      	beq.n	80091e6 <TIM_OC1_SetConfig+0x76>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a27      	ldr	r2, [pc, #156]	@ (8009270 <TIM_OC1_SetConfig+0x100>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d007      	beq.n	80091e6 <TIM_OC1_SetConfig+0x76>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a26      	ldr	r2, [pc, #152]	@ (8009274 <TIM_OC1_SetConfig+0x104>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d003      	beq.n	80091e6 <TIM_OC1_SetConfig+0x76>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a25      	ldr	r2, [pc, #148]	@ (8009278 <TIM_OC1_SetConfig+0x108>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d10c      	bne.n	8009200 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2208      	movs	r2, #8
 80091ea:	4393      	bics	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2204      	movs	r2, #4
 80091fc:	4393      	bics	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a1a      	ldr	r2, [pc, #104]	@ (800926c <TIM_OC1_SetConfig+0xfc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00b      	beq.n	8009220 <TIM_OC1_SetConfig+0xb0>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a19      	ldr	r2, [pc, #100]	@ (8009270 <TIM_OC1_SetConfig+0x100>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <TIM_OC1_SetConfig+0xb0>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a18      	ldr	r2, [pc, #96]	@ (8009274 <TIM_OC1_SetConfig+0x104>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_OC1_SetConfig+0xb0>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a17      	ldr	r2, [pc, #92]	@ (8009278 <TIM_OC1_SetConfig+0x108>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d111      	bne.n	8009244 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	4a16      	ldr	r2, [pc, #88]	@ (800927c <TIM_OC1_SetConfig+0x10c>)
 8009224:	4013      	ands	r3, r2
 8009226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	4a15      	ldr	r2, [pc, #84]	@ (8009280 <TIM_OC1_SetConfig+0x110>)
 800922c:	4013      	ands	r3, r2
 800922e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	621a      	str	r2, [r3, #32]
}
 800925e:	46c0      	nop			@ (mov r8, r8)
 8009260:	46bd      	mov	sp, r7
 8009262:	b006      	add	sp, #24
 8009264:	bd80      	pop	{r7, pc}
 8009266:	46c0      	nop			@ (mov r8, r8)
 8009268:	fffeff8f 	.word	0xfffeff8f
 800926c:	40012c00 	.word	0x40012c00
 8009270:	40014000 	.word	0x40014000
 8009274:	40014400 	.word	0x40014400
 8009278:	40014800 	.word	0x40014800
 800927c:	fffffeff 	.word	0xfffffeff
 8009280:	fffffdff 	.word	0xfffffdff

08009284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	2210      	movs	r2, #16
 800929a:	4393      	bics	r3, r2
 800929c:	001a      	movs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4a2e      	ldr	r2, [pc, #184]	@ (800936c <TIM_OC2_SetConfig+0xe8>)
 80092b2:	4013      	ands	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a2d      	ldr	r2, [pc, #180]	@ (8009370 <TIM_OC2_SetConfig+0xec>)
 80092ba:	4013      	ands	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	021b      	lsls	r3, r3, #8
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2220      	movs	r2, #32
 80092ce:	4393      	bics	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a24      	ldr	r2, [pc, #144]	@ (8009374 <TIM_OC2_SetConfig+0xf0>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d10d      	bne.n	8009302 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2280      	movs	r2, #128	@ 0x80
 80092ea:	4393      	bics	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2240      	movs	r2, #64	@ 0x40
 80092fe:	4393      	bics	r3, r2
 8009300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a1b      	ldr	r2, [pc, #108]	@ (8009374 <TIM_OC2_SetConfig+0xf0>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d00b      	beq.n	8009322 <TIM_OC2_SetConfig+0x9e>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a1a      	ldr	r2, [pc, #104]	@ (8009378 <TIM_OC2_SetConfig+0xf4>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d007      	beq.n	8009322 <TIM_OC2_SetConfig+0x9e>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a19      	ldr	r2, [pc, #100]	@ (800937c <TIM_OC2_SetConfig+0xf8>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d003      	beq.n	8009322 <TIM_OC2_SetConfig+0x9e>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a18      	ldr	r2, [pc, #96]	@ (8009380 <TIM_OC2_SetConfig+0xfc>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d113      	bne.n	800934a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	4a17      	ldr	r2, [pc, #92]	@ (8009384 <TIM_OC2_SetConfig+0x100>)
 8009326:	4013      	ands	r3, r2
 8009328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	4a16      	ldr	r2, [pc, #88]	@ (8009388 <TIM_OC2_SetConfig+0x104>)
 800932e:	4013      	ands	r3, r2
 8009330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	4313      	orrs	r3, r2
 800933c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	4313      	orrs	r3, r2
 8009348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	621a      	str	r2, [r3, #32]
}
 8009364:	46c0      	nop			@ (mov r8, r8)
 8009366:	46bd      	mov	sp, r7
 8009368:	b006      	add	sp, #24
 800936a:	bd80      	pop	{r7, pc}
 800936c:	feff8fff 	.word	0xfeff8fff
 8009370:	fffffcff 	.word	0xfffffcff
 8009374:	40012c00 	.word	0x40012c00
 8009378:	40014000 	.word	0x40014000
 800937c:	40014400 	.word	0x40014400
 8009380:	40014800 	.word	0x40014800
 8009384:	fffffbff 	.word	0xfffffbff
 8009388:	fffff7ff 	.word	0xfffff7ff

0800938c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	4a33      	ldr	r2, [pc, #204]	@ (8009470 <TIM_OC3_SetConfig+0xe4>)
 80093a2:	401a      	ands	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4a2f      	ldr	r2, [pc, #188]	@ (8009474 <TIM_OC3_SetConfig+0xe8>)
 80093b8:	4013      	ands	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2203      	movs	r2, #3
 80093c0:	4393      	bics	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	4a29      	ldr	r2, [pc, #164]	@ (8009478 <TIM_OC3_SetConfig+0xec>)
 80093d2:	4013      	ands	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	021b      	lsls	r3, r3, #8
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	4313      	orrs	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a25      	ldr	r2, [pc, #148]	@ (800947c <TIM_OC3_SetConfig+0xf0>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d10d      	bne.n	8009406 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	4a24      	ldr	r2, [pc, #144]	@ (8009480 <TIM_OC3_SetConfig+0xf4>)
 80093ee:	4013      	ands	r3, r2
 80093f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	4a20      	ldr	r2, [pc, #128]	@ (8009484 <TIM_OC3_SetConfig+0xf8>)
 8009402:	4013      	ands	r3, r2
 8009404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a1c      	ldr	r2, [pc, #112]	@ (800947c <TIM_OC3_SetConfig+0xf0>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d00b      	beq.n	8009426 <TIM_OC3_SetConfig+0x9a>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a1d      	ldr	r2, [pc, #116]	@ (8009488 <TIM_OC3_SetConfig+0xfc>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d007      	beq.n	8009426 <TIM_OC3_SetConfig+0x9a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a1c      	ldr	r2, [pc, #112]	@ (800948c <TIM_OC3_SetConfig+0x100>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d003      	beq.n	8009426 <TIM_OC3_SetConfig+0x9a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a1b      	ldr	r2, [pc, #108]	@ (8009490 <TIM_OC3_SetConfig+0x104>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d113      	bne.n	800944e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	4a1a      	ldr	r2, [pc, #104]	@ (8009494 <TIM_OC3_SetConfig+0x108>)
 800942a:	4013      	ands	r3, r2
 800942c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	4a19      	ldr	r2, [pc, #100]	@ (8009498 <TIM_OC3_SetConfig+0x10c>)
 8009432:	4013      	ands	r3, r2
 8009434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	4313      	orrs	r3, r2
 8009440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	4313      	orrs	r3, r2
 800944c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	621a      	str	r2, [r3, #32]
}
 8009468:	46c0      	nop			@ (mov r8, r8)
 800946a:	46bd      	mov	sp, r7
 800946c:	b006      	add	sp, #24
 800946e:	bd80      	pop	{r7, pc}
 8009470:	fffffeff 	.word	0xfffffeff
 8009474:	fffeff8f 	.word	0xfffeff8f
 8009478:	fffffdff 	.word	0xfffffdff
 800947c:	40012c00 	.word	0x40012c00
 8009480:	fffff7ff 	.word	0xfffff7ff
 8009484:	fffffbff 	.word	0xfffffbff
 8009488:	40014000 	.word	0x40014000
 800948c:	40014400 	.word	0x40014400
 8009490:	40014800 	.word	0x40014800
 8009494:	ffffefff 	.word	0xffffefff
 8009498:	ffffdfff 	.word	0xffffdfff

0800949c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	4a26      	ldr	r2, [pc, #152]	@ (800954c <TIM_OC4_SetConfig+0xb0>)
 80094b2:	401a      	ands	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4a22      	ldr	r2, [pc, #136]	@ (8009550 <TIM_OC4_SetConfig+0xb4>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4a21      	ldr	r2, [pc, #132]	@ (8009554 <TIM_OC4_SetConfig+0xb8>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	021b      	lsls	r3, r3, #8
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009558 <TIM_OC4_SetConfig+0xbc>)
 80094e4:	4013      	ands	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	031b      	lsls	r3, r3, #12
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a19      	ldr	r2, [pc, #100]	@ (800955c <TIM_OC4_SetConfig+0xc0>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d00b      	beq.n	8009514 <TIM_OC4_SetConfig+0x78>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a18      	ldr	r2, [pc, #96]	@ (8009560 <TIM_OC4_SetConfig+0xc4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d007      	beq.n	8009514 <TIM_OC4_SetConfig+0x78>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a17      	ldr	r2, [pc, #92]	@ (8009564 <TIM_OC4_SetConfig+0xc8>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d003      	beq.n	8009514 <TIM_OC4_SetConfig+0x78>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a16      	ldr	r2, [pc, #88]	@ (8009568 <TIM_OC4_SetConfig+0xcc>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d109      	bne.n	8009528 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	4a15      	ldr	r2, [pc, #84]	@ (800956c <TIM_OC4_SetConfig+0xd0>)
 8009518:	4013      	ands	r3, r2
 800951a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	019b      	lsls	r3, r3, #6
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	4313      	orrs	r3, r2
 8009526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	621a      	str	r2, [r3, #32]
}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b006      	add	sp, #24
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	ffffefff 	.word	0xffffefff
 8009550:	feff8fff 	.word	0xfeff8fff
 8009554:	fffffcff 	.word	0xfffffcff
 8009558:	ffffdfff 	.word	0xffffdfff
 800955c:	40012c00 	.word	0x40012c00
 8009560:	40014000 	.word	0x40014000
 8009564:	40014400 	.word	0x40014400
 8009568:	40014800 	.word	0x40014800
 800956c:	ffffbfff 	.word	0xffffbfff

08009570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	4a23      	ldr	r2, [pc, #140]	@ (8009614 <TIM_OC5_SetConfig+0xa4>)
 8009586:	401a      	ands	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4a1f      	ldr	r2, [pc, #124]	@ (8009618 <TIM_OC5_SetConfig+0xa8>)
 800959c:	4013      	ands	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	4a1b      	ldr	r2, [pc, #108]	@ (800961c <TIM_OC5_SetConfig+0xac>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	041b      	lsls	r3, r3, #16
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a17      	ldr	r2, [pc, #92]	@ (8009620 <TIM_OC5_SetConfig+0xb0>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00b      	beq.n	80095de <TIM_OC5_SetConfig+0x6e>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a16      	ldr	r2, [pc, #88]	@ (8009624 <TIM_OC5_SetConfig+0xb4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d007      	beq.n	80095de <TIM_OC5_SetConfig+0x6e>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a15      	ldr	r2, [pc, #84]	@ (8009628 <TIM_OC5_SetConfig+0xb8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d003      	beq.n	80095de <TIM_OC5_SetConfig+0x6e>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a14      	ldr	r2, [pc, #80]	@ (800962c <TIM_OC5_SetConfig+0xbc>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d109      	bne.n	80095f2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	4a0c      	ldr	r2, [pc, #48]	@ (8009614 <TIM_OC5_SetConfig+0xa4>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	621a      	str	r2, [r3, #32]
}
 800960c:	46c0      	nop			@ (mov r8, r8)
 800960e:	46bd      	mov	sp, r7
 8009610:	b006      	add	sp, #24
 8009612:	bd80      	pop	{r7, pc}
 8009614:	fffeffff 	.word	0xfffeffff
 8009618:	fffeff8f 	.word	0xfffeff8f
 800961c:	fffdffff 	.word	0xfffdffff
 8009620:	40012c00 	.word	0x40012c00
 8009624:	40014000 	.word	0x40014000
 8009628:	40014400 	.word	0x40014400
 800962c:	40014800 	.word	0x40014800

08009630 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	4a24      	ldr	r2, [pc, #144]	@ (80096d8 <TIM_OC6_SetConfig+0xa8>)
 8009646:	401a      	ands	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4a20      	ldr	r2, [pc, #128]	@ (80096dc <TIM_OC6_SetConfig+0xac>)
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	4a1c      	ldr	r2, [pc, #112]	@ (80096e0 <TIM_OC6_SetConfig+0xb0>)
 8009670:	4013      	ands	r3, r2
 8009672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	051b      	lsls	r3, r3, #20
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	4313      	orrs	r3, r2
 800967e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a18      	ldr	r2, [pc, #96]	@ (80096e4 <TIM_OC6_SetConfig+0xb4>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00b      	beq.n	80096a0 <TIM_OC6_SetConfig+0x70>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a17      	ldr	r2, [pc, #92]	@ (80096e8 <TIM_OC6_SetConfig+0xb8>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d007      	beq.n	80096a0 <TIM_OC6_SetConfig+0x70>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a16      	ldr	r2, [pc, #88]	@ (80096ec <TIM_OC6_SetConfig+0xbc>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_OC6_SetConfig+0x70>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a15      	ldr	r2, [pc, #84]	@ (80096f0 <TIM_OC6_SetConfig+0xc0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d109      	bne.n	80096b4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	4a14      	ldr	r2, [pc, #80]	@ (80096f4 <TIM_OC6_SetConfig+0xc4>)
 80096a4:	4013      	ands	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	029b      	lsls	r3, r3, #10
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	621a      	str	r2, [r3, #32]
}
 80096ce:	46c0      	nop			@ (mov r8, r8)
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b006      	add	sp, #24
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	46c0      	nop			@ (mov r8, r8)
 80096d8:	ffefffff 	.word	0xffefffff
 80096dc:	feff8fff 	.word	0xfeff8fff
 80096e0:	ffdfffff 	.word	0xffdfffff
 80096e4:	40012c00 	.word	0x40012c00
 80096e8:	40014000 	.word	0x40014000
 80096ec:	40014400 	.word	0x40014400
 80096f0:	40014800 	.word	0x40014800
 80096f4:	fffbffff 	.word	0xfffbffff

080096f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	221f      	movs	r2, #31
 8009708:	4013      	ands	r3, r2
 800970a:	2201      	movs	r2, #1
 800970c:	409a      	lsls	r2, r3
 800970e:	0013      	movs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	43d2      	mvns	r2, r2
 800971a:	401a      	ands	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a1a      	ldr	r2, [r3, #32]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	211f      	movs	r1, #31
 8009728:	400b      	ands	r3, r1
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4099      	lsls	r1, r3
 800972e:	000b      	movs	r3, r1
 8009730:	431a      	orrs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	621a      	str	r2, [r3, #32]
}
 8009736:	46c0      	nop			@ (mov r8, r8)
 8009738:	46bd      	mov	sp, r7
 800973a:	b006      	add	sp, #24
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	223c      	movs	r2, #60	@ 0x3c
 8009752:	5c9b      	ldrb	r3, [r3, r2]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d101      	bne.n	800975c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009758:	2302      	movs	r3, #2
 800975a:	e06f      	b.n	800983c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	223c      	movs	r2, #60	@ 0x3c
 8009760:	2101      	movs	r1, #1
 8009762:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	22ff      	movs	r2, #255	@ 0xff
 8009768:	4393      	bics	r3, r2
 800976a:	001a      	movs	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	4313      	orrs	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4a33      	ldr	r2, [pc, #204]	@ (8009844 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8009778:	401a      	ands	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	4313      	orrs	r3, r2
 8009780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4a30      	ldr	r2, [pc, #192]	@ (8009848 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8009786:	401a      	ands	r2, r3
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4a2e      	ldr	r2, [pc, #184]	@ (800984c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8009794:	401a      	ands	r2, r3
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4a2b      	ldr	r2, [pc, #172]	@ (8009850 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80097a2:	401a      	ands	r2, r3
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a29      	ldr	r2, [pc, #164]	@ (8009854 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80097b0:	401a      	ands	r2, r3
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4a26      	ldr	r2, [pc, #152]	@ (8009858 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80097be:	401a      	ands	r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	4a24      	ldr	r2, [pc, #144]	@ (800985c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80097cc:	401a      	ands	r2, r3
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	041b      	lsls	r3, r3, #16
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4a21      	ldr	r2, [pc, #132]	@ (8009860 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80097dc:	401a      	ands	r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a1e      	ldr	r2, [pc, #120]	@ (8009864 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d11c      	bne.n	800982a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4a1d      	ldr	r2, [pc, #116]	@ (8009868 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80097f4:	401a      	ands	r2, r3
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fa:	051b      	lsls	r3, r3, #20
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a1a      	ldr	r2, [pc, #104]	@ (800986c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8009804:	401a      	ands	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	4313      	orrs	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4a17      	ldr	r2, [pc, #92]	@ (8009870 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009812:	401a      	ands	r2, r3
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009818:	4313      	orrs	r3, r2
 800981a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4a15      	ldr	r2, [pc, #84]	@ (8009874 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009820:	401a      	ands	r2, r3
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009826:	4313      	orrs	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	223c      	movs	r2, #60	@ 0x3c
 8009836:	2100      	movs	r1, #0
 8009838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	0018      	movs	r0, r3
 800983e:	46bd      	mov	sp, r7
 8009840:	b004      	add	sp, #16
 8009842:	bd80      	pop	{r7, pc}
 8009844:	fffffcff 	.word	0xfffffcff
 8009848:	fffffbff 	.word	0xfffffbff
 800984c:	fffff7ff 	.word	0xfffff7ff
 8009850:	ffffefff 	.word	0xffffefff
 8009854:	ffffdfff 	.word	0xffffdfff
 8009858:	ffffbfff 	.word	0xffffbfff
 800985c:	fff0ffff 	.word	0xfff0ffff
 8009860:	efffffff 	.word	0xefffffff
 8009864:	40012c00 	.word	0x40012c00
 8009868:	ff0fffff 	.word	0xff0fffff
 800986c:	feffffff 	.word	0xfeffffff
 8009870:	fdffffff 	.word	0xfdffffff
 8009874:	dfffffff 	.word	0xdfffffff

08009878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e046      	b.n	8009918 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2288      	movs	r2, #136	@ 0x88
 800988e:	589b      	ldr	r3, [r3, r2]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d107      	bne.n	80098a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2284      	movs	r2, #132	@ 0x84
 8009898:	2100      	movs	r1, #0
 800989a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	0018      	movs	r0, r3
 80098a0:	f7fb fa58 	bl	8004d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2288      	movs	r2, #136	@ 0x88
 80098a8:	2124      	movs	r1, #36	@ 0x24
 80098aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2101      	movs	r1, #1
 80098b8:	438a      	bics	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	0018      	movs	r0, r3
 80098c8:	f000 fc68 	bl	800a19c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	0018      	movs	r0, r3
 80098d0:	f000 f90e 	bl	8009af0 <UART_SetConfig>
 80098d4:	0003      	movs	r3, r0
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e01c      	b.n	8009918 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	490d      	ldr	r1, [pc, #52]	@ (8009920 <HAL_UART_Init+0xa8>)
 80098ea:	400a      	ands	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	212a      	movs	r1, #42	@ 0x2a
 80098fa:	438a      	bics	r2, r1
 80098fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2101      	movs	r1, #1
 800990a:	430a      	orrs	r2, r1
 800990c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	0018      	movs	r0, r3
 8009912:	f000 fcf7 	bl	800a304 <UART_CheckIdleState>
 8009916:	0003      	movs	r3, r0
}
 8009918:	0018      	movs	r0, r3
 800991a:	46bd      	mov	sp, r7
 800991c:	b002      	add	sp, #8
 800991e:	bd80      	pop	{r7, pc}
 8009920:	ffffb7ff 	.word	0xffffb7ff

08009924 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08a      	sub	sp, #40	@ 0x28
 8009928:	af02      	add	r7, sp, #8
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	1dbb      	adds	r3, r7, #6
 8009932:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	228c      	movs	r2, #140	@ 0x8c
 8009938:	589b      	ldr	r3, [r3, r2]
 800993a:	2b20      	cmp	r3, #32
 800993c:	d000      	beq.n	8009940 <HAL_UART_Receive+0x1c>
 800993e:	e0d0      	b.n	8009ae2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_UART_Receive+0x2a>
 8009946:	1dbb      	adds	r3, r7, #6
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e0c8      	b.n	8009ae4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	689a      	ldr	r2, [r3, #8]
 8009956:	2380      	movs	r3, #128	@ 0x80
 8009958:	015b      	lsls	r3, r3, #5
 800995a:	429a      	cmp	r2, r3
 800995c:	d109      	bne.n	8009972 <HAL_UART_Receive+0x4e>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d105      	bne.n	8009972 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2201      	movs	r2, #1
 800996a:	4013      	ands	r3, r2
 800996c:	d001      	beq.n	8009972 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e0b8      	b.n	8009ae4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2290      	movs	r2, #144	@ 0x90
 8009976:	2100      	movs	r1, #0
 8009978:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	228c      	movs	r2, #140	@ 0x8c
 800997e:	2122      	movs	r1, #34	@ 0x22
 8009980:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009988:	f7fc f96c 	bl	8005c64 <HAL_GetTick>
 800998c:	0003      	movs	r3, r0
 800998e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	1dba      	adds	r2, r7, #6
 8009994:	215c      	movs	r1, #92	@ 0x5c
 8009996:	8812      	ldrh	r2, [r2, #0]
 8009998:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	1dba      	adds	r2, r7, #6
 800999e:	215e      	movs	r1, #94	@ 0x5e
 80099a0:	8812      	ldrh	r2, [r2, #0]
 80099a2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	2380      	movs	r3, #128	@ 0x80
 80099aa:	015b      	lsls	r3, r3, #5
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d10d      	bne.n	80099cc <HAL_UART_Receive+0xa8>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d104      	bne.n	80099c2 <HAL_UART_Receive+0x9e>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2260      	movs	r2, #96	@ 0x60
 80099bc:	494b      	ldr	r1, [pc, #300]	@ (8009aec <HAL_UART_Receive+0x1c8>)
 80099be:	5299      	strh	r1, [r3, r2]
 80099c0:	e02e      	b.n	8009a20 <HAL_UART_Receive+0xfc>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2260      	movs	r2, #96	@ 0x60
 80099c6:	21ff      	movs	r1, #255	@ 0xff
 80099c8:	5299      	strh	r1, [r3, r2]
 80099ca:	e029      	b.n	8009a20 <HAL_UART_Receive+0xfc>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10d      	bne.n	80099f0 <HAL_UART_Receive+0xcc>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <HAL_UART_Receive+0xc2>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2260      	movs	r2, #96	@ 0x60
 80099e0:	21ff      	movs	r1, #255	@ 0xff
 80099e2:	5299      	strh	r1, [r3, r2]
 80099e4:	e01c      	b.n	8009a20 <HAL_UART_Receive+0xfc>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2260      	movs	r2, #96	@ 0x60
 80099ea:	217f      	movs	r1, #127	@ 0x7f
 80099ec:	5299      	strh	r1, [r3, r2]
 80099ee:	e017      	b.n	8009a20 <HAL_UART_Receive+0xfc>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	2380      	movs	r3, #128	@ 0x80
 80099f6:	055b      	lsls	r3, r3, #21
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d10d      	bne.n	8009a18 <HAL_UART_Receive+0xf4>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d104      	bne.n	8009a0e <HAL_UART_Receive+0xea>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2260      	movs	r2, #96	@ 0x60
 8009a08:	217f      	movs	r1, #127	@ 0x7f
 8009a0a:	5299      	strh	r1, [r3, r2]
 8009a0c:	e008      	b.n	8009a20 <HAL_UART_Receive+0xfc>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2260      	movs	r2, #96	@ 0x60
 8009a12:	213f      	movs	r1, #63	@ 0x3f
 8009a14:	5299      	strh	r1, [r3, r2]
 8009a16:	e003      	b.n	8009a20 <HAL_UART_Receive+0xfc>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2260      	movs	r2, #96	@ 0x60
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8009a20:	2312      	movs	r3, #18
 8009a22:	18fb      	adds	r3, r7, r3
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	2160      	movs	r1, #96	@ 0x60
 8009a28:	5a52      	ldrh	r2, [r2, r1]
 8009a2a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	2380      	movs	r3, #128	@ 0x80
 8009a32:	015b      	lsls	r3, r3, #5
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d108      	bne.n	8009a4a <HAL_UART_Receive+0x126>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d104      	bne.n	8009a4a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	61bb      	str	r3, [r7, #24]
 8009a48:	e003      	b.n	8009a52 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009a52:	e03a      	b.n	8009aca <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	0013      	movs	r3, r2
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2120      	movs	r1, #32
 8009a62:	f000 fcf9 	bl	800a458 <UART_WaitOnFlagUntilTimeout>
 8009a66:	1e03      	subs	r3, r0, #0
 8009a68:	d005      	beq.n	8009a76 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	228c      	movs	r2, #140	@ 0x8c
 8009a6e:	2120      	movs	r1, #32
 8009a70:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e036      	b.n	8009ae4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10e      	bne.n	8009a9a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	2212      	movs	r2, #18
 8009a86:	18ba      	adds	r2, r7, r2
 8009a88:	8812      	ldrh	r2, [r2, #0]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	3302      	adds	r3, #2
 8009a96:	61bb      	str	r3, [r7, #24]
 8009a98:	e00e      	b.n	8009ab8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2212      	movs	r2, #18
 8009aa4:	18ba      	adds	r2, r7, r2
 8009aa6:	8812      	ldrh	r2, [r2, #0]
 8009aa8:	b2d2      	uxtb	r2, r2
 8009aaa:	4013      	ands	r3, r2
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	225e      	movs	r2, #94	@ 0x5e
 8009abc:	5a9b      	ldrh	r3, [r3, r2]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b299      	uxth	r1, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	225e      	movs	r2, #94	@ 0x5e
 8009ac8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	225e      	movs	r2, #94	@ 0x5e
 8009ace:	5a9b      	ldrh	r3, [r3, r2]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1be      	bne.n	8009a54 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	228c      	movs	r2, #140	@ 0x8c
 8009ada:	2120      	movs	r1, #32
 8009adc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e000      	b.n	8009ae4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b008      	add	sp, #32
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	000001ff 	.word	0x000001ff

08009af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009af0:	b5b0      	push	{r4, r5, r7, lr}
 8009af2:	b090      	sub	sp, #64	@ 0x40
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009af8:	231a      	movs	r3, #26
 8009afa:	2220      	movs	r2, #32
 8009afc:	189b      	adds	r3, r3, r2
 8009afe:	19db      	adds	r3, r3, r7
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	431a      	orrs	r2, r3
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	69db      	ldr	r3, [r3, #28]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4ac1      	ldr	r2, [pc, #772]	@ (8009e28 <UART_SetConfig+0x338>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	0019      	movs	r1, r3
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4abc      	ldr	r2, [pc, #752]	@ (8009e2c <UART_SetConfig+0x33c>)
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	68d9      	ldr	r1, [r3, #12]
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	0003      	movs	r3, r0
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4ab6      	ldr	r2, [pc, #728]	@ (8009e30 <UART_SetConfig+0x340>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d009      	beq.n	8009b70 <UART_SetConfig+0x80>
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4ab4      	ldr	r2, [pc, #720]	@ (8009e34 <UART_SetConfig+0x344>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d004      	beq.n	8009b70 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	4ab0      	ldr	r2, [pc, #704]	@ (8009e38 <UART_SetConfig+0x348>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	0019      	movs	r1, r3
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b82:	430b      	orrs	r3, r1
 8009b84:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8c:	220f      	movs	r2, #15
 8009b8e:	4393      	bics	r3, r2
 8009b90:	0018      	movs	r0, r3
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4aa5      	ldr	r2, [pc, #660]	@ (8009e3c <UART_SetConfig+0x34c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d131      	bne.n	8009c0e <UART_SetConfig+0x11e>
 8009baa:	4ba5      	ldr	r3, [pc, #660]	@ (8009e40 <UART_SetConfig+0x350>)
 8009bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bae:	2203      	movs	r2, #3
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d01d      	beq.n	8009bf2 <UART_SetConfig+0x102>
 8009bb6:	d823      	bhi.n	8009c00 <UART_SetConfig+0x110>
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d00c      	beq.n	8009bd6 <UART_SetConfig+0xe6>
 8009bbc:	d820      	bhi.n	8009c00 <UART_SetConfig+0x110>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <UART_SetConfig+0xd8>
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d00e      	beq.n	8009be4 <UART_SetConfig+0xf4>
 8009bc6:	e01b      	b.n	8009c00 <UART_SetConfig+0x110>
 8009bc8:	231b      	movs	r3, #27
 8009bca:	2220      	movs	r2, #32
 8009bcc:	189b      	adds	r3, r3, r2
 8009bce:	19db      	adds	r3, r3, r7
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
 8009bd4:	e154      	b.n	8009e80 <UART_SetConfig+0x390>
 8009bd6:	231b      	movs	r3, #27
 8009bd8:	2220      	movs	r2, #32
 8009bda:	189b      	adds	r3, r3, r2
 8009bdc:	19db      	adds	r3, r3, r7
 8009bde:	2202      	movs	r2, #2
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	e14d      	b.n	8009e80 <UART_SetConfig+0x390>
 8009be4:	231b      	movs	r3, #27
 8009be6:	2220      	movs	r2, #32
 8009be8:	189b      	adds	r3, r3, r2
 8009bea:	19db      	adds	r3, r3, r7
 8009bec:	2204      	movs	r2, #4
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	e146      	b.n	8009e80 <UART_SetConfig+0x390>
 8009bf2:	231b      	movs	r3, #27
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	189b      	adds	r3, r3, r2
 8009bf8:	19db      	adds	r3, r3, r7
 8009bfa:	2208      	movs	r2, #8
 8009bfc:	701a      	strb	r2, [r3, #0]
 8009bfe:	e13f      	b.n	8009e80 <UART_SetConfig+0x390>
 8009c00:	231b      	movs	r3, #27
 8009c02:	2220      	movs	r2, #32
 8009c04:	189b      	adds	r3, r3, r2
 8009c06:	19db      	adds	r3, r3, r7
 8009c08:	2210      	movs	r2, #16
 8009c0a:	701a      	strb	r2, [r3, #0]
 8009c0c:	e138      	b.n	8009e80 <UART_SetConfig+0x390>
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a8c      	ldr	r2, [pc, #560]	@ (8009e44 <UART_SetConfig+0x354>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d131      	bne.n	8009c7c <UART_SetConfig+0x18c>
 8009c18:	4b89      	ldr	r3, [pc, #548]	@ (8009e40 <UART_SetConfig+0x350>)
 8009c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c1c:	220c      	movs	r2, #12
 8009c1e:	4013      	ands	r3, r2
 8009c20:	2b0c      	cmp	r3, #12
 8009c22:	d01d      	beq.n	8009c60 <UART_SetConfig+0x170>
 8009c24:	d823      	bhi.n	8009c6e <UART_SetConfig+0x17e>
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	d00c      	beq.n	8009c44 <UART_SetConfig+0x154>
 8009c2a:	d820      	bhi.n	8009c6e <UART_SetConfig+0x17e>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <UART_SetConfig+0x146>
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d00e      	beq.n	8009c52 <UART_SetConfig+0x162>
 8009c34:	e01b      	b.n	8009c6e <UART_SetConfig+0x17e>
 8009c36:	231b      	movs	r3, #27
 8009c38:	2220      	movs	r2, #32
 8009c3a:	189b      	adds	r3, r3, r2
 8009c3c:	19db      	adds	r3, r3, r7
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	e11d      	b.n	8009e80 <UART_SetConfig+0x390>
 8009c44:	231b      	movs	r3, #27
 8009c46:	2220      	movs	r2, #32
 8009c48:	189b      	adds	r3, r3, r2
 8009c4a:	19db      	adds	r3, r3, r7
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	701a      	strb	r2, [r3, #0]
 8009c50:	e116      	b.n	8009e80 <UART_SetConfig+0x390>
 8009c52:	231b      	movs	r3, #27
 8009c54:	2220      	movs	r2, #32
 8009c56:	189b      	adds	r3, r3, r2
 8009c58:	19db      	adds	r3, r3, r7
 8009c5a:	2204      	movs	r2, #4
 8009c5c:	701a      	strb	r2, [r3, #0]
 8009c5e:	e10f      	b.n	8009e80 <UART_SetConfig+0x390>
 8009c60:	231b      	movs	r3, #27
 8009c62:	2220      	movs	r2, #32
 8009c64:	189b      	adds	r3, r3, r2
 8009c66:	19db      	adds	r3, r3, r7
 8009c68:	2208      	movs	r2, #8
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e108      	b.n	8009e80 <UART_SetConfig+0x390>
 8009c6e:	231b      	movs	r3, #27
 8009c70:	2220      	movs	r2, #32
 8009c72:	189b      	adds	r3, r3, r2
 8009c74:	19db      	adds	r3, r3, r7
 8009c76:	2210      	movs	r2, #16
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	e101      	b.n	8009e80 <UART_SetConfig+0x390>
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a71      	ldr	r2, [pc, #452]	@ (8009e48 <UART_SetConfig+0x358>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d131      	bne.n	8009cea <UART_SetConfig+0x1fa>
 8009c86:	4b6e      	ldr	r3, [pc, #440]	@ (8009e40 <UART_SetConfig+0x350>)
 8009c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8a:	2230      	movs	r2, #48	@ 0x30
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b30      	cmp	r3, #48	@ 0x30
 8009c90:	d01d      	beq.n	8009cce <UART_SetConfig+0x1de>
 8009c92:	d823      	bhi.n	8009cdc <UART_SetConfig+0x1ec>
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	d00c      	beq.n	8009cb2 <UART_SetConfig+0x1c2>
 8009c98:	d820      	bhi.n	8009cdc <UART_SetConfig+0x1ec>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <UART_SetConfig+0x1b4>
 8009c9e:	2b10      	cmp	r3, #16
 8009ca0:	d00e      	beq.n	8009cc0 <UART_SetConfig+0x1d0>
 8009ca2:	e01b      	b.n	8009cdc <UART_SetConfig+0x1ec>
 8009ca4:	231b      	movs	r3, #27
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	189b      	adds	r3, r3, r2
 8009caa:	19db      	adds	r3, r3, r7
 8009cac:	2200      	movs	r2, #0
 8009cae:	701a      	strb	r2, [r3, #0]
 8009cb0:	e0e6      	b.n	8009e80 <UART_SetConfig+0x390>
 8009cb2:	231b      	movs	r3, #27
 8009cb4:	2220      	movs	r2, #32
 8009cb6:	189b      	adds	r3, r3, r2
 8009cb8:	19db      	adds	r3, r3, r7
 8009cba:	2202      	movs	r2, #2
 8009cbc:	701a      	strb	r2, [r3, #0]
 8009cbe:	e0df      	b.n	8009e80 <UART_SetConfig+0x390>
 8009cc0:	231b      	movs	r3, #27
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	189b      	adds	r3, r3, r2
 8009cc6:	19db      	adds	r3, r3, r7
 8009cc8:	2204      	movs	r2, #4
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	e0d8      	b.n	8009e80 <UART_SetConfig+0x390>
 8009cce:	231b      	movs	r3, #27
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	189b      	adds	r3, r3, r2
 8009cd4:	19db      	adds	r3, r3, r7
 8009cd6:	2208      	movs	r2, #8
 8009cd8:	701a      	strb	r2, [r3, #0]
 8009cda:	e0d1      	b.n	8009e80 <UART_SetConfig+0x390>
 8009cdc:	231b      	movs	r3, #27
 8009cde:	2220      	movs	r2, #32
 8009ce0:	189b      	adds	r3, r3, r2
 8009ce2:	19db      	adds	r3, r3, r7
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	701a      	strb	r2, [r3, #0]
 8009ce8:	e0ca      	b.n	8009e80 <UART_SetConfig+0x390>
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a57      	ldr	r2, [pc, #348]	@ (8009e4c <UART_SetConfig+0x35c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d106      	bne.n	8009d02 <UART_SetConfig+0x212>
 8009cf4:	231b      	movs	r3, #27
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	189b      	adds	r3, r3, r2
 8009cfa:	19db      	adds	r3, r3, r7
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	701a      	strb	r2, [r3, #0]
 8009d00:	e0be      	b.n	8009e80 <UART_SetConfig+0x390>
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a52      	ldr	r2, [pc, #328]	@ (8009e50 <UART_SetConfig+0x360>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d106      	bne.n	8009d1a <UART_SetConfig+0x22a>
 8009d0c:	231b      	movs	r3, #27
 8009d0e:	2220      	movs	r2, #32
 8009d10:	189b      	adds	r3, r3, r2
 8009d12:	19db      	adds	r3, r3, r7
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
 8009d18:	e0b2      	b.n	8009e80 <UART_SetConfig+0x390>
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8009e54 <UART_SetConfig+0x364>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d106      	bne.n	8009d32 <UART_SetConfig+0x242>
 8009d24:	231b      	movs	r3, #27
 8009d26:	2220      	movs	r2, #32
 8009d28:	189b      	adds	r3, r3, r2
 8009d2a:	19db      	adds	r3, r3, r7
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e0a6      	b.n	8009e80 <UART_SetConfig+0x390>
 8009d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a3e      	ldr	r2, [pc, #248]	@ (8009e30 <UART_SetConfig+0x340>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d13e      	bne.n	8009dba <UART_SetConfig+0x2ca>
 8009d3c:	4b40      	ldr	r3, [pc, #256]	@ (8009e40 <UART_SetConfig+0x350>)
 8009d3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d40:	23c0      	movs	r3, #192	@ 0xc0
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	4013      	ands	r3, r2
 8009d46:	22c0      	movs	r2, #192	@ 0xc0
 8009d48:	0112      	lsls	r2, r2, #4
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d027      	beq.n	8009d9e <UART_SetConfig+0x2ae>
 8009d4e:	22c0      	movs	r2, #192	@ 0xc0
 8009d50:	0112      	lsls	r2, r2, #4
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d82a      	bhi.n	8009dac <UART_SetConfig+0x2bc>
 8009d56:	2280      	movs	r2, #128	@ 0x80
 8009d58:	0112      	lsls	r2, r2, #4
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d011      	beq.n	8009d82 <UART_SetConfig+0x292>
 8009d5e:	2280      	movs	r2, #128	@ 0x80
 8009d60:	0112      	lsls	r2, r2, #4
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d822      	bhi.n	8009dac <UART_SetConfig+0x2bc>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <UART_SetConfig+0x284>
 8009d6a:	2280      	movs	r2, #128	@ 0x80
 8009d6c:	00d2      	lsls	r2, r2, #3
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d00e      	beq.n	8009d90 <UART_SetConfig+0x2a0>
 8009d72:	e01b      	b.n	8009dac <UART_SetConfig+0x2bc>
 8009d74:	231b      	movs	r3, #27
 8009d76:	2220      	movs	r2, #32
 8009d78:	189b      	adds	r3, r3, r2
 8009d7a:	19db      	adds	r3, r3, r7
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	e07e      	b.n	8009e80 <UART_SetConfig+0x390>
 8009d82:	231b      	movs	r3, #27
 8009d84:	2220      	movs	r2, #32
 8009d86:	189b      	adds	r3, r3, r2
 8009d88:	19db      	adds	r3, r3, r7
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	e077      	b.n	8009e80 <UART_SetConfig+0x390>
 8009d90:	231b      	movs	r3, #27
 8009d92:	2220      	movs	r2, #32
 8009d94:	189b      	adds	r3, r3, r2
 8009d96:	19db      	adds	r3, r3, r7
 8009d98:	2204      	movs	r2, #4
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	e070      	b.n	8009e80 <UART_SetConfig+0x390>
 8009d9e:	231b      	movs	r3, #27
 8009da0:	2220      	movs	r2, #32
 8009da2:	189b      	adds	r3, r3, r2
 8009da4:	19db      	adds	r3, r3, r7
 8009da6:	2208      	movs	r2, #8
 8009da8:	701a      	strb	r2, [r3, #0]
 8009daa:	e069      	b.n	8009e80 <UART_SetConfig+0x390>
 8009dac:	231b      	movs	r3, #27
 8009dae:	2220      	movs	r2, #32
 8009db0:	189b      	adds	r3, r3, r2
 8009db2:	19db      	adds	r3, r3, r7
 8009db4:	2210      	movs	r2, #16
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	e062      	b.n	8009e80 <UART_SetConfig+0x390>
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8009e34 <UART_SetConfig+0x344>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d157      	bne.n	8009e74 <UART_SetConfig+0x384>
 8009dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8009e40 <UART_SetConfig+0x350>)
 8009dc6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009dc8:	23c0      	movs	r3, #192	@ 0xc0
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4013      	ands	r3, r2
 8009dce:	22c0      	movs	r2, #192	@ 0xc0
 8009dd0:	0092      	lsls	r2, r2, #2
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d040      	beq.n	8009e58 <UART_SetConfig+0x368>
 8009dd6:	22c0      	movs	r2, #192	@ 0xc0
 8009dd8:	0092      	lsls	r2, r2, #2
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d843      	bhi.n	8009e66 <UART_SetConfig+0x376>
 8009dde:	2280      	movs	r2, #128	@ 0x80
 8009de0:	0092      	lsls	r2, r2, #2
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d011      	beq.n	8009e0a <UART_SetConfig+0x31a>
 8009de6:	2280      	movs	r2, #128	@ 0x80
 8009de8:	0092      	lsls	r2, r2, #2
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d83b      	bhi.n	8009e66 <UART_SetConfig+0x376>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d004      	beq.n	8009dfc <UART_SetConfig+0x30c>
 8009df2:	2280      	movs	r2, #128	@ 0x80
 8009df4:	0052      	lsls	r2, r2, #1
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00e      	beq.n	8009e18 <UART_SetConfig+0x328>
 8009dfa:	e034      	b.n	8009e66 <UART_SetConfig+0x376>
 8009dfc:	231b      	movs	r3, #27
 8009dfe:	2220      	movs	r2, #32
 8009e00:	189b      	adds	r3, r3, r2
 8009e02:	19db      	adds	r3, r3, r7
 8009e04:	2200      	movs	r2, #0
 8009e06:	701a      	strb	r2, [r3, #0]
 8009e08:	e03a      	b.n	8009e80 <UART_SetConfig+0x390>
 8009e0a:	231b      	movs	r3, #27
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	19db      	adds	r3, r3, r7
 8009e12:	2202      	movs	r2, #2
 8009e14:	701a      	strb	r2, [r3, #0]
 8009e16:	e033      	b.n	8009e80 <UART_SetConfig+0x390>
 8009e18:	231b      	movs	r3, #27
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	189b      	adds	r3, r3, r2
 8009e1e:	19db      	adds	r3, r3, r7
 8009e20:	2204      	movs	r2, #4
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e02c      	b.n	8009e80 <UART_SetConfig+0x390>
 8009e26:	46c0      	nop			@ (mov r8, r8)
 8009e28:	cfff69f3 	.word	0xcfff69f3
 8009e2c:	ffffcfff 	.word	0xffffcfff
 8009e30:	40008000 	.word	0x40008000
 8009e34:	40008400 	.word	0x40008400
 8009e38:	11fff4ff 	.word	0x11fff4ff
 8009e3c:	40013800 	.word	0x40013800
 8009e40:	40021000 	.word	0x40021000
 8009e44:	40004400 	.word	0x40004400
 8009e48:	40004800 	.word	0x40004800
 8009e4c:	40004c00 	.word	0x40004c00
 8009e50:	40005000 	.word	0x40005000
 8009e54:	40013c00 	.word	0x40013c00
 8009e58:	231b      	movs	r3, #27
 8009e5a:	2220      	movs	r2, #32
 8009e5c:	189b      	adds	r3, r3, r2
 8009e5e:	19db      	adds	r3, r3, r7
 8009e60:	2208      	movs	r2, #8
 8009e62:	701a      	strb	r2, [r3, #0]
 8009e64:	e00c      	b.n	8009e80 <UART_SetConfig+0x390>
 8009e66:	231b      	movs	r3, #27
 8009e68:	2220      	movs	r2, #32
 8009e6a:	189b      	adds	r3, r3, r2
 8009e6c:	19db      	adds	r3, r3, r7
 8009e6e:	2210      	movs	r2, #16
 8009e70:	701a      	strb	r2, [r3, #0]
 8009e72:	e005      	b.n	8009e80 <UART_SetConfig+0x390>
 8009e74:	231b      	movs	r3, #27
 8009e76:	2220      	movs	r2, #32
 8009e78:	189b      	adds	r3, r3, r2
 8009e7a:	19db      	adds	r3, r3, r7
 8009e7c:	2210      	movs	r2, #16
 8009e7e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4ac1      	ldr	r2, [pc, #772]	@ (800a18c <UART_SetConfig+0x69c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d005      	beq.n	8009e96 <UART_SetConfig+0x3a6>
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4ac0      	ldr	r2, [pc, #768]	@ (800a190 <UART_SetConfig+0x6a0>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d000      	beq.n	8009e96 <UART_SetConfig+0x3a6>
 8009e94:	e093      	b.n	8009fbe <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e96:	231b      	movs	r3, #27
 8009e98:	2220      	movs	r2, #32
 8009e9a:	189b      	adds	r3, r3, r2
 8009e9c:	19db      	adds	r3, r3, r7
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d015      	beq.n	8009ed0 <UART_SetConfig+0x3e0>
 8009ea4:	dc18      	bgt.n	8009ed8 <UART_SetConfig+0x3e8>
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d00d      	beq.n	8009ec6 <UART_SetConfig+0x3d6>
 8009eaa:	dc15      	bgt.n	8009ed8 <UART_SetConfig+0x3e8>
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <UART_SetConfig+0x3c6>
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d005      	beq.n	8009ec0 <UART_SetConfig+0x3d0>
 8009eb4:	e010      	b.n	8009ed8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb6:	f7fd fcf7 	bl	80078a8 <HAL_RCC_GetPCLK1Freq>
 8009eba:	0003      	movs	r3, r0
 8009ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ebe:	e014      	b.n	8009eea <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ec0:	4bb4      	ldr	r3, [pc, #720]	@ (800a194 <UART_SetConfig+0x6a4>)
 8009ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ec4:	e011      	b.n	8009eea <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ec6:	f7fd fc63 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 8009eca:	0003      	movs	r3, r0
 8009ecc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ece:	e00c      	b.n	8009eea <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ed0:	2380      	movs	r3, #128	@ 0x80
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ed6:	e008      	b.n	8009eea <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8009edc:	231a      	movs	r3, #26
 8009ede:	2220      	movs	r2, #32
 8009ee0:	189b      	adds	r3, r3, r2
 8009ee2:	19db      	adds	r3, r3, r7
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	701a      	strb	r2, [r3, #0]
        break;
 8009ee8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d100      	bne.n	8009ef2 <UART_SetConfig+0x402>
 8009ef0:	e135      	b.n	800a15e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ef6:	4ba8      	ldr	r3, [pc, #672]	@ (800a198 <UART_SetConfig+0x6a8>)
 8009ef8:	0052      	lsls	r2, r2, #1
 8009efa:	5ad3      	ldrh	r3, [r2, r3]
 8009efc:	0019      	movs	r1, r3
 8009efe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009f00:	f7f6 f926 	bl	8000150 <__udivsi3>
 8009f04:	0003      	movs	r3, r0
 8009f06:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	0013      	movs	r3, r2
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	189b      	adds	r3, r3, r2
 8009f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d305      	bcc.n	8009f24 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d906      	bls.n	8009f32 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8009f24:	231a      	movs	r3, #26
 8009f26:	2220      	movs	r2, #32
 8009f28:	189b      	adds	r3, r3, r2
 8009f2a:	19db      	adds	r3, r3, r7
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	e044      	b.n	8009fbc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f34:	61bb      	str	r3, [r7, #24]
 8009f36:	2300      	movs	r3, #0
 8009f38:	61fb      	str	r3, [r7, #28]
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f3e:	4b96      	ldr	r3, [pc, #600]	@ (800a198 <UART_SetConfig+0x6a8>)
 8009f40:	0052      	lsls	r2, r2, #1
 8009f42:	5ad3      	ldrh	r3, [r2, r3]
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	69b8      	ldr	r0, [r7, #24]
 8009f50:	69f9      	ldr	r1, [r7, #28]
 8009f52:	f7f6 faeb 	bl	800052c <__aeabi_uldivmod>
 8009f56:	0002      	movs	r2, r0
 8009f58:	000b      	movs	r3, r1
 8009f5a:	0e11      	lsrs	r1, r2, #24
 8009f5c:	021d      	lsls	r5, r3, #8
 8009f5e:	430d      	orrs	r5, r1
 8009f60:	0214      	lsls	r4, r2, #8
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	085b      	lsrs	r3, r3, #1
 8009f68:	60bb      	str	r3, [r7, #8]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
 8009f6e:	68b8      	ldr	r0, [r7, #8]
 8009f70:	68f9      	ldr	r1, [r7, #12]
 8009f72:	1900      	adds	r0, r0, r4
 8009f74:	4169      	adcs	r1, r5
 8009f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	607b      	str	r3, [r7, #4]
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f7f6 fad2 	bl	800052c <__aeabi_uldivmod>
 8009f88:	0002      	movs	r2, r0
 8009f8a:	000b      	movs	r3, r1
 8009f8c:	0013      	movs	r3, r2
 8009f8e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f92:	23c0      	movs	r3, #192	@ 0xc0
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d309      	bcc.n	8009fae <UART_SetConfig+0x4be>
 8009f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f9c:	2380      	movs	r3, #128	@ 0x80
 8009f9e:	035b      	lsls	r3, r3, #13
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d204      	bcs.n	8009fae <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009faa:	60da      	str	r2, [r3, #12]
 8009fac:	e006      	b.n	8009fbc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8009fae:	231a      	movs	r3, #26
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	189b      	adds	r3, r3, r2
 8009fb4:	19db      	adds	r3, r3, r7
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8009fba:	e0d0      	b.n	800a15e <UART_SetConfig+0x66e>
 8009fbc:	e0cf      	b.n	800a15e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	69da      	ldr	r2, [r3, #28]
 8009fc2:	2380      	movs	r3, #128	@ 0x80
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d000      	beq.n	8009fcc <UART_SetConfig+0x4dc>
 8009fca:	e070      	b.n	800a0ae <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8009fcc:	231b      	movs	r3, #27
 8009fce:	2220      	movs	r2, #32
 8009fd0:	189b      	adds	r3, r3, r2
 8009fd2:	19db      	adds	r3, r3, r7
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	d015      	beq.n	800a006 <UART_SetConfig+0x516>
 8009fda:	dc18      	bgt.n	800a00e <UART_SetConfig+0x51e>
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	d00d      	beq.n	8009ffc <UART_SetConfig+0x50c>
 8009fe0:	dc15      	bgt.n	800a00e <UART_SetConfig+0x51e>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <UART_SetConfig+0x4fc>
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d005      	beq.n	8009ff6 <UART_SetConfig+0x506>
 8009fea:	e010      	b.n	800a00e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fec:	f7fd fc5c 	bl	80078a8 <HAL_RCC_GetPCLK1Freq>
 8009ff0:	0003      	movs	r3, r0
 8009ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ff4:	e014      	b.n	800a020 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ff6:	4b67      	ldr	r3, [pc, #412]	@ (800a194 <UART_SetConfig+0x6a4>)
 8009ff8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ffa:	e011      	b.n	800a020 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ffc:	f7fd fbc8 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800a000:	0003      	movs	r3, r0
 800a002:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a004:	e00c      	b.n	800a020 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a006:	2380      	movs	r3, #128	@ 0x80
 800a008:	021b      	lsls	r3, r3, #8
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a00c:	e008      	b.n	800a020 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a012:	231a      	movs	r3, #26
 800a014:	2220      	movs	r2, #32
 800a016:	189b      	adds	r3, r3, r2
 800a018:	19db      	adds	r3, r3, r7
 800a01a:	2201      	movs	r2, #1
 800a01c:	701a      	strb	r2, [r3, #0]
        break;
 800a01e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a022:	2b00      	cmp	r3, #0
 800a024:	d100      	bne.n	800a028 <UART_SetConfig+0x538>
 800a026:	e09a      	b.n	800a15e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a02c:	4b5a      	ldr	r3, [pc, #360]	@ (800a198 <UART_SetConfig+0x6a8>)
 800a02e:	0052      	lsls	r2, r2, #1
 800a030:	5ad3      	ldrh	r3, [r2, r3]
 800a032:	0019      	movs	r1, r3
 800a034:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a036:	f7f6 f88b 	bl	8000150 <__udivsi3>
 800a03a:	0003      	movs	r3, r0
 800a03c:	005a      	lsls	r2, r3, #1
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	18d2      	adds	r2, r2, r3
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	0019      	movs	r1, r3
 800a04c:	0010      	movs	r0, r2
 800a04e:	f7f6 f87f 	bl	8000150 <__udivsi3>
 800a052:	0003      	movs	r3, r0
 800a054:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a058:	2b0f      	cmp	r3, #15
 800a05a:	d921      	bls.n	800a0a0 <UART_SetConfig+0x5b0>
 800a05c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a05e:	2380      	movs	r3, #128	@ 0x80
 800a060:	025b      	lsls	r3, r3, #9
 800a062:	429a      	cmp	r2, r3
 800a064:	d21c      	bcs.n	800a0a0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	b29a      	uxth	r2, r3
 800a06a:	200e      	movs	r0, #14
 800a06c:	2420      	movs	r4, #32
 800a06e:	1903      	adds	r3, r0, r4
 800a070:	19db      	adds	r3, r3, r7
 800a072:	210f      	movs	r1, #15
 800a074:	438a      	bics	r2, r1
 800a076:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	085b      	lsrs	r3, r3, #1
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	2207      	movs	r2, #7
 800a080:	4013      	ands	r3, r2
 800a082:	b299      	uxth	r1, r3
 800a084:	1903      	adds	r3, r0, r4
 800a086:	19db      	adds	r3, r3, r7
 800a088:	1902      	adds	r2, r0, r4
 800a08a:	19d2      	adds	r2, r2, r7
 800a08c:	8812      	ldrh	r2, [r2, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	1902      	adds	r2, r0, r4
 800a098:	19d2      	adds	r2, r2, r7
 800a09a:	8812      	ldrh	r2, [r2, #0]
 800a09c:	60da      	str	r2, [r3, #12]
 800a09e:	e05e      	b.n	800a15e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a0a0:	231a      	movs	r3, #26
 800a0a2:	2220      	movs	r2, #32
 800a0a4:	189b      	adds	r3, r3, r2
 800a0a6:	19db      	adds	r3, r3, r7
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e057      	b.n	800a15e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0ae:	231b      	movs	r3, #27
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	189b      	adds	r3, r3, r2
 800a0b4:	19db      	adds	r3, r3, r7
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b08      	cmp	r3, #8
 800a0ba:	d015      	beq.n	800a0e8 <UART_SetConfig+0x5f8>
 800a0bc:	dc18      	bgt.n	800a0f0 <UART_SetConfig+0x600>
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d00d      	beq.n	800a0de <UART_SetConfig+0x5ee>
 800a0c2:	dc15      	bgt.n	800a0f0 <UART_SetConfig+0x600>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <UART_SetConfig+0x5de>
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d005      	beq.n	800a0d8 <UART_SetConfig+0x5e8>
 800a0cc:	e010      	b.n	800a0f0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ce:	f7fd fbeb 	bl	80078a8 <HAL_RCC_GetPCLK1Freq>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0d6:	e014      	b.n	800a102 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d8:	4b2e      	ldr	r3, [pc, #184]	@ (800a194 <UART_SetConfig+0x6a4>)
 800a0da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0dc:	e011      	b.n	800a102 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0de:	f7fd fb57 	bl	8007790 <HAL_RCC_GetSysClockFreq>
 800a0e2:	0003      	movs	r3, r0
 800a0e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0e6:	e00c      	b.n	800a102 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e8:	2380      	movs	r3, #128	@ 0x80
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0ee:	e008      	b.n	800a102 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a0f4:	231a      	movs	r3, #26
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	189b      	adds	r3, r3, r2
 800a0fa:	19db      	adds	r3, r3, r7
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	701a      	strb	r2, [r3, #0]
        break;
 800a100:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a104:	2b00      	cmp	r3, #0
 800a106:	d02a      	beq.n	800a15e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a10c:	4b22      	ldr	r3, [pc, #136]	@ (800a198 <UART_SetConfig+0x6a8>)
 800a10e:	0052      	lsls	r2, r2, #1
 800a110:	5ad3      	ldrh	r3, [r2, r3]
 800a112:	0019      	movs	r1, r3
 800a114:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a116:	f7f6 f81b 	bl	8000150 <__udivsi3>
 800a11a:	0003      	movs	r3, r0
 800a11c:	001a      	movs	r2, r3
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	085b      	lsrs	r3, r3, #1
 800a124:	18d2      	adds	r2, r2, r3
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	0019      	movs	r1, r3
 800a12c:	0010      	movs	r0, r2
 800a12e:	f7f6 f80f 	bl	8000150 <__udivsi3>
 800a132:	0003      	movs	r3, r0
 800a134:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	2b0f      	cmp	r3, #15
 800a13a:	d90a      	bls.n	800a152 <UART_SetConfig+0x662>
 800a13c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a13e:	2380      	movs	r3, #128	@ 0x80
 800a140:	025b      	lsls	r3, r3, #9
 800a142:	429a      	cmp	r2, r3
 800a144:	d205      	bcs.n	800a152 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a148:	b29a      	uxth	r2, r3
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60da      	str	r2, [r3, #12]
 800a150:	e005      	b.n	800a15e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a152:	231a      	movs	r3, #26
 800a154:	2220      	movs	r2, #32
 800a156:	189b      	adds	r3, r3, r2
 800a158:	19db      	adds	r3, r3, r7
 800a15a:	2201      	movs	r2, #1
 800a15c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a160:	226a      	movs	r2, #106	@ 0x6a
 800a162:	2101      	movs	r1, #1
 800a164:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	2268      	movs	r2, #104	@ 0x68
 800a16a:	2101      	movs	r1, #1
 800a16c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a170:	2200      	movs	r2, #0
 800a172:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	2200      	movs	r2, #0
 800a178:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a17a:	231a      	movs	r3, #26
 800a17c:	2220      	movs	r2, #32
 800a17e:	189b      	adds	r3, r3, r2
 800a180:	19db      	adds	r3, r3, r7
 800a182:	781b      	ldrb	r3, [r3, #0]
}
 800a184:	0018      	movs	r0, r3
 800a186:	46bd      	mov	sp, r7
 800a188:	b010      	add	sp, #64	@ 0x40
 800a18a:	bdb0      	pop	{r4, r5, r7, pc}
 800a18c:	40008000 	.word	0x40008000
 800a190:	40008400 	.word	0x40008400
 800a194:	00f42400 	.word	0x00f42400
 800a198:	0800e384 	.word	0x0800e384

0800a19c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a8:	2208      	movs	r2, #8
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	d00b      	beq.n	800a1c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	4a4a      	ldr	r2, [pc, #296]	@ (800a2e0 <UART_AdvFeatureConfig+0x144>)
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	0019      	movs	r1, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	d00b      	beq.n	800a1e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4a43      	ldr	r2, [pc, #268]	@ (800a2e4 <UART_AdvFeatureConfig+0x148>)
 800a1d8:	4013      	ands	r3, r2
 800a1da:	0019      	movs	r1, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	d00b      	beq.n	800a20a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4a3b      	ldr	r2, [pc, #236]	@ (800a2e8 <UART_AdvFeatureConfig+0x14c>)
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	0019      	movs	r1, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20e:	2204      	movs	r2, #4
 800a210:	4013      	ands	r3, r2
 800a212:	d00b      	beq.n	800a22c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	4a34      	ldr	r2, [pc, #208]	@ (800a2ec <UART_AdvFeatureConfig+0x150>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	0019      	movs	r1, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	430a      	orrs	r2, r1
 800a22a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a230:	2210      	movs	r2, #16
 800a232:	4013      	ands	r3, r2
 800a234:	d00b      	beq.n	800a24e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	4a2c      	ldr	r2, [pc, #176]	@ (800a2f0 <UART_AdvFeatureConfig+0x154>)
 800a23e:	4013      	ands	r3, r2
 800a240:	0019      	movs	r1, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a252:	2220      	movs	r2, #32
 800a254:	4013      	ands	r3, r2
 800a256:	d00b      	beq.n	800a270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	4a25      	ldr	r2, [pc, #148]	@ (800a2f4 <UART_AdvFeatureConfig+0x158>)
 800a260:	4013      	ands	r3, r2
 800a262:	0019      	movs	r1, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a274:	2240      	movs	r2, #64	@ 0x40
 800a276:	4013      	ands	r3, r2
 800a278:	d01d      	beq.n	800a2b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4a1d      	ldr	r2, [pc, #116]	@ (800a2f8 <UART_AdvFeatureConfig+0x15c>)
 800a282:	4013      	ands	r3, r2
 800a284:	0019      	movs	r1, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a296:	2380      	movs	r3, #128	@ 0x80
 800a298:	035b      	lsls	r3, r3, #13
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d10b      	bne.n	800a2b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	4a15      	ldr	r2, [pc, #84]	@ (800a2fc <UART_AdvFeatureConfig+0x160>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	0019      	movs	r1, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ba:	2280      	movs	r2, #128	@ 0x80
 800a2bc:	4013      	ands	r3, r2
 800a2be:	d00b      	beq.n	800a2d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4a0e      	ldr	r2, [pc, #56]	@ (800a300 <UART_AdvFeatureConfig+0x164>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	0019      	movs	r1, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	605a      	str	r2, [r3, #4]
  }
}
 800a2d8:	46c0      	nop			@ (mov r8, r8)
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b002      	add	sp, #8
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	ffff7fff 	.word	0xffff7fff
 800a2e4:	fffdffff 	.word	0xfffdffff
 800a2e8:	fffeffff 	.word	0xfffeffff
 800a2ec:	fffbffff 	.word	0xfffbffff
 800a2f0:	ffffefff 	.word	0xffffefff
 800a2f4:	ffffdfff 	.word	0xffffdfff
 800a2f8:	ffefffff 	.word	0xffefffff
 800a2fc:	ff9fffff 	.word	0xff9fffff
 800a300:	fff7ffff 	.word	0xfff7ffff

0800a304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b092      	sub	sp, #72	@ 0x48
 800a308:	af02      	add	r7, sp, #8
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2290      	movs	r2, #144	@ 0x90
 800a310:	2100      	movs	r1, #0
 800a312:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a314:	f7fb fca6 	bl	8005c64 <HAL_GetTick>
 800a318:	0003      	movs	r3, r0
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2208      	movs	r2, #8
 800a324:	4013      	ands	r3, r2
 800a326:	2b08      	cmp	r3, #8
 800a328:	d12d      	bne.n	800a386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32c:	2280      	movs	r2, #128	@ 0x80
 800a32e:	0391      	lsls	r1, r2, #14
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4a47      	ldr	r2, [pc, #284]	@ (800a450 <UART_CheckIdleState+0x14c>)
 800a334:	9200      	str	r2, [sp, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	f000 f88e 	bl	800a458 <UART_WaitOnFlagUntilTimeout>
 800a33c:	1e03      	subs	r3, r0, #0
 800a33e:	d022      	beq.n	800a386 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a340:	f3ef 8310 	mrs	r3, PRIMASK
 800a344:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a34a:	2301      	movs	r3, #1
 800a34c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a350:	f383 8810 	msr	PRIMASK, r3
}
 800a354:	46c0      	nop			@ (mov r8, r8)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2180      	movs	r1, #128	@ 0x80
 800a362:	438a      	bics	r2, r1
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36c:	f383 8810 	msr	PRIMASK, r3
}
 800a370:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2288      	movs	r2, #136	@ 0x88
 800a376:	2120      	movs	r1, #32
 800a378:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2284      	movs	r2, #132	@ 0x84
 800a37e:	2100      	movs	r1, #0
 800a380:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e060      	b.n	800a448 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2204      	movs	r2, #4
 800a38e:	4013      	ands	r3, r2
 800a390:	2b04      	cmp	r3, #4
 800a392:	d146      	bne.n	800a422 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a396:	2280      	movs	r2, #128	@ 0x80
 800a398:	03d1      	lsls	r1, r2, #15
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	4a2c      	ldr	r2, [pc, #176]	@ (800a450 <UART_CheckIdleState+0x14c>)
 800a39e:	9200      	str	r2, [sp, #0]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f000 f859 	bl	800a458 <UART_WaitOnFlagUntilTimeout>
 800a3a6:	1e03      	subs	r3, r0, #0
 800a3a8:	d03b      	beq.n	800a422 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f383 8810 	msr	PRIMASK, r3
}
 800a3be:	46c0      	nop			@ (mov r8, r8)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4922      	ldr	r1, [pc, #136]	@ (800a454 <UART_CheckIdleState+0x150>)
 800a3cc:	400a      	ands	r2, r1
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f383 8810 	msr	PRIMASK, r3
}
 800a3da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a3e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a3e2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	f383 8810 	msr	PRIMASK, r3
}
 800a3f0:	46c0      	nop			@ (mov r8, r8)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	689a      	ldr	r2, [r3, #8]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	438a      	bics	r2, r1
 800a400:	609a      	str	r2, [r3, #8]
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	f383 8810 	msr	PRIMASK, r3
}
 800a40c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	228c      	movs	r2, #140	@ 0x8c
 800a412:	2120      	movs	r1, #32
 800a414:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2284      	movs	r2, #132	@ 0x84
 800a41a:	2100      	movs	r1, #0
 800a41c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e012      	b.n	800a448 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2288      	movs	r2, #136	@ 0x88
 800a426:	2120      	movs	r1, #32
 800a428:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	228c      	movs	r2, #140	@ 0x8c
 800a42e:	2120      	movs	r1, #32
 800a430:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2284      	movs	r2, #132	@ 0x84
 800a442:	2100      	movs	r1, #0
 800a444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	0018      	movs	r0, r3
 800a44a:	46bd      	mov	sp, r7
 800a44c:	b010      	add	sp, #64	@ 0x40
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	01ffffff 	.word	0x01ffffff
 800a454:	fffffedf 	.word	0xfffffedf

0800a458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	1dfb      	adds	r3, r7, #7
 800a466:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a468:	e051      	b.n	800a50e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	3301      	adds	r3, #1
 800a46e:	d04e      	beq.n	800a50e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a470:	f7fb fbf8 	bl	8005c64 <HAL_GetTick>
 800a474:	0002      	movs	r2, r0
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d302      	bcc.n	800a486 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e051      	b.n	800a52e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2204      	movs	r2, #4
 800a492:	4013      	ands	r3, r2
 800a494:	d03b      	beq.n	800a50e <UART_WaitOnFlagUntilTimeout+0xb6>
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b80      	cmp	r3, #128	@ 0x80
 800a49a:	d038      	beq.n	800a50e <UART_WaitOnFlagUntilTimeout+0xb6>
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b40      	cmp	r3, #64	@ 0x40
 800a4a0:	d035      	beq.n	800a50e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	2208      	movs	r2, #8
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d111      	bne.n	800a4d4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2208      	movs	r2, #8
 800a4b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f000 f83c 	bl	800a538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2290      	movs	r2, #144	@ 0x90
 800a4c4:	2108      	movs	r1, #8
 800a4c6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2284      	movs	r2, #132	@ 0x84
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e02c      	b.n	800a52e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	69da      	ldr	r2, [r3, #28]
 800a4da:	2380      	movs	r3, #128	@ 0x80
 800a4dc:	011b      	lsls	r3, r3, #4
 800a4de:	401a      	ands	r2, r3
 800a4e0:	2380      	movs	r3, #128	@ 0x80
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d112      	bne.n	800a50e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2280      	movs	r2, #128	@ 0x80
 800a4ee:	0112      	lsls	r2, r2, #4
 800a4f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f000 f81f 	bl	800a538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2290      	movs	r2, #144	@ 0x90
 800a4fe:	2120      	movs	r1, #32
 800a500:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2284      	movs	r2, #132	@ 0x84
 800a506:	2100      	movs	r1, #0
 800a508:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e00f      	b.n	800a52e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	69db      	ldr	r3, [r3, #28]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	4013      	ands	r3, r2
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	425a      	negs	r2, r3
 800a51e:	4153      	adcs	r3, r2
 800a520:	b2db      	uxtb	r3, r3
 800a522:	001a      	movs	r2, r3
 800a524:	1dfb      	adds	r3, r7, #7
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d09e      	beq.n	800a46a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	0018      	movs	r0, r3
 800a530:	46bd      	mov	sp, r7
 800a532:	b004      	add	sp, #16
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08e      	sub	sp, #56	@ 0x38
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a540:	f3ef 8310 	mrs	r3, PRIMASK
 800a544:	617b      	str	r3, [r7, #20]
  return(result);
 800a546:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a548:	637b      	str	r3, [r7, #52]	@ 0x34
 800a54a:	2301      	movs	r3, #1
 800a54c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f383 8810 	msr	PRIMASK, r3
}
 800a554:	46c0      	nop			@ (mov r8, r8)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4926      	ldr	r1, [pc, #152]	@ (800a5fc <UART_EndRxTransfer+0xc4>)
 800a562:	400a      	ands	r2, r1
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	f383 8810 	msr	PRIMASK, r3
}
 800a570:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a572:	f3ef 8310 	mrs	r3, PRIMASK
 800a576:	623b      	str	r3, [r7, #32]
  return(result);
 800a578:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a57a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a57c:	2301      	movs	r3, #1
 800a57e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a582:	f383 8810 	msr	PRIMASK, r3
}
 800a586:	46c0      	nop			@ (mov r8, r8)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	491b      	ldr	r1, [pc, #108]	@ (800a600 <UART_EndRxTransfer+0xc8>)
 800a594:	400a      	ands	r2, r1
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59e:	f383 8810 	msr	PRIMASK, r3
}
 800a5a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d118      	bne.n	800a5de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f383 8810 	msr	PRIMASK, r3
}
 800a5c0:	46c0      	nop			@ (mov r8, r8)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2110      	movs	r1, #16
 800a5ce:	438a      	bics	r2, r1
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f383 8810 	msr	PRIMASK, r3
}
 800a5dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	228c      	movs	r2, #140	@ 0x8c
 800a5e2:	2120      	movs	r1, #32
 800a5e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5f2:	46c0      	nop			@ (mov r8, r8)
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b00e      	add	sp, #56	@ 0x38
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	46c0      	nop			@ (mov r8, r8)
 800a5fc:	fffffedf 	.word	0xfffffedf
 800a600:	effffffe 	.word	0xeffffffe

0800a604 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2284      	movs	r2, #132	@ 0x84
 800a610:	5c9b      	ldrb	r3, [r3, r2]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d101      	bne.n	800a61a <HAL_UARTEx_DisableFifoMode+0x16>
 800a616:	2302      	movs	r3, #2
 800a618:	e027      	b.n	800a66a <HAL_UARTEx_DisableFifoMode+0x66>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2284      	movs	r2, #132	@ 0x84
 800a61e:	2101      	movs	r1, #1
 800a620:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2288      	movs	r2, #136	@ 0x88
 800a626:	2124      	movs	r1, #36	@ 0x24
 800a628:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2101      	movs	r1, #1
 800a63e:	438a      	bics	r2, r1
 800a640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4a0b      	ldr	r2, [pc, #44]	@ (800a674 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a646:	4013      	ands	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2288      	movs	r2, #136	@ 0x88
 800a65c:	2120      	movs	r1, #32
 800a65e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2284      	movs	r2, #132	@ 0x84
 800a664:	2100      	movs	r1, #0
 800a666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	0018      	movs	r0, r3
 800a66c:	46bd      	mov	sp, r7
 800a66e:	b004      	add	sp, #16
 800a670:	bd80      	pop	{r7, pc}
 800a672:	46c0      	nop			@ (mov r8, r8)
 800a674:	dfffffff 	.word	0xdfffffff

0800a678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2284      	movs	r2, #132	@ 0x84
 800a686:	5c9b      	ldrb	r3, [r3, r2]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e02e      	b.n	800a6ee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2284      	movs	r2, #132	@ 0x84
 800a694:	2101      	movs	r1, #1
 800a696:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2288      	movs	r2, #136	@ 0x88
 800a69c:	2124      	movs	r1, #36	@ 0x24
 800a69e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	438a      	bics	r2, r1
 800a6b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	00db      	lsls	r3, r3, #3
 800a6c0:	08d9      	lsrs	r1, r3, #3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	683a      	ldr	r2, [r7, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f000 f854 	bl	800a77c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2288      	movs	r2, #136	@ 0x88
 800a6e0:	2120      	movs	r1, #32
 800a6e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2284      	movs	r2, #132	@ 0x84
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	b004      	add	sp, #16
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2284      	movs	r2, #132	@ 0x84
 800a706:	5c9b      	ldrb	r3, [r3, r2]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d101      	bne.n	800a710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a70c:	2302      	movs	r3, #2
 800a70e:	e02f      	b.n	800a770 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2284      	movs	r2, #132	@ 0x84
 800a714:	2101      	movs	r1, #1
 800a716:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2288      	movs	r2, #136	@ 0x88
 800a71c:	2124      	movs	r1, #36	@ 0x24
 800a71e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2101      	movs	r1, #1
 800a734:	438a      	bics	r2, r1
 800a736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	4a0e      	ldr	r2, [pc, #56]	@ (800a778 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a740:	4013      	ands	r3, r2
 800a742:	0019      	movs	r1, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	0018      	movs	r0, r3
 800a752:	f000 f813 	bl	800a77c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2288      	movs	r2, #136	@ 0x88
 800a762:	2120      	movs	r1, #32
 800a764:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2284      	movs	r2, #132	@ 0x84
 800a76a:	2100      	movs	r1, #0
 800a76c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	0018      	movs	r0, r3
 800a772:	46bd      	mov	sp, r7
 800a774:	b004      	add	sp, #16
 800a776:	bd80      	pop	{r7, pc}
 800a778:	f1ffffff 	.word	0xf1ffffff

0800a77c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d108      	bne.n	800a79e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	226a      	movs	r2, #106	@ 0x6a
 800a790:	2101      	movs	r1, #1
 800a792:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2268      	movs	r2, #104	@ 0x68
 800a798:	2101      	movs	r1, #1
 800a79a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a79c:	e043      	b.n	800a826 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a79e:	260f      	movs	r6, #15
 800a7a0:	19bb      	adds	r3, r7, r6
 800a7a2:	2208      	movs	r2, #8
 800a7a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7a6:	200e      	movs	r0, #14
 800a7a8:	183b      	adds	r3, r7, r0
 800a7aa:	2208      	movs	r2, #8
 800a7ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	0e5b      	lsrs	r3, r3, #25
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	240d      	movs	r4, #13
 800a7ba:	193b      	adds	r3, r7, r4
 800a7bc:	2107      	movs	r1, #7
 800a7be:	400a      	ands	r2, r1
 800a7c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	0f5b      	lsrs	r3, r3, #29
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	250c      	movs	r5, #12
 800a7ce:	197b      	adds	r3, r7, r5
 800a7d0:	2107      	movs	r1, #7
 800a7d2:	400a      	ands	r2, r1
 800a7d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7d6:	183b      	adds	r3, r7, r0
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	197a      	adds	r2, r7, r5
 800a7dc:	7812      	ldrb	r2, [r2, #0]
 800a7de:	4914      	ldr	r1, [pc, #80]	@ (800a830 <UARTEx_SetNbDataToProcess+0xb4>)
 800a7e0:	5c8a      	ldrb	r2, [r1, r2]
 800a7e2:	435a      	muls	r2, r3
 800a7e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a7e6:	197b      	adds	r3, r7, r5
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	4a12      	ldr	r2, [pc, #72]	@ (800a834 <UARTEx_SetNbDataToProcess+0xb8>)
 800a7ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a7ee:	0019      	movs	r1, r3
 800a7f0:	f7f5 fd38 	bl	8000264 <__divsi3>
 800a7f4:	0003      	movs	r3, r0
 800a7f6:	b299      	uxth	r1, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	226a      	movs	r2, #106	@ 0x6a
 800a7fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a7fe:	19bb      	adds	r3, r7, r6
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	193a      	adds	r2, r7, r4
 800a804:	7812      	ldrb	r2, [r2, #0]
 800a806:	490a      	ldr	r1, [pc, #40]	@ (800a830 <UARTEx_SetNbDataToProcess+0xb4>)
 800a808:	5c8a      	ldrb	r2, [r1, r2]
 800a80a:	435a      	muls	r2, r3
 800a80c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a80e:	193b      	adds	r3, r7, r4
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	4a08      	ldr	r2, [pc, #32]	@ (800a834 <UARTEx_SetNbDataToProcess+0xb8>)
 800a814:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a816:	0019      	movs	r1, r3
 800a818:	f7f5 fd24 	bl	8000264 <__divsi3>
 800a81c:	0003      	movs	r3, r0
 800a81e:	b299      	uxth	r1, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2268      	movs	r2, #104	@ 0x68
 800a824:	5299      	strh	r1, [r3, r2]
}
 800a826:	46c0      	nop			@ (mov r8, r8)
 800a828:	46bd      	mov	sp, r7
 800a82a:	b005      	add	sp, #20
 800a82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82e:	46c0      	nop			@ (mov r8, r8)
 800a830:	0800e39c 	.word	0x0800e39c
 800a834:	0800e3a4 	.word	0x0800e3a4

0800a838 <sulp>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	0016      	movs	r6, r2
 800a83c:	000d      	movs	r5, r1
 800a83e:	f002 f88f 	bl	800c960 <__ulp>
 800a842:	2e00      	cmp	r6, #0
 800a844:	d00d      	beq.n	800a862 <sulp+0x2a>
 800a846:	236b      	movs	r3, #107	@ 0x6b
 800a848:	006a      	lsls	r2, r5, #1
 800a84a:	0d52      	lsrs	r2, r2, #21
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	dd07      	ble.n	800a862 <sulp+0x2a>
 800a852:	2400      	movs	r4, #0
 800a854:	4a03      	ldr	r2, [pc, #12]	@ (800a864 <sulp+0x2c>)
 800a856:	051b      	lsls	r3, r3, #20
 800a858:	189d      	adds	r5, r3, r2
 800a85a:	002b      	movs	r3, r5
 800a85c:	0022      	movs	r2, r4
 800a85e:	f7f7 fb57 	bl	8001f10 <__aeabi_dmul>
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	3ff00000 	.word	0x3ff00000

0800a868 <_strtod_l>:
 800a868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a86a:	b0a3      	sub	sp, #140	@ 0x8c
 800a86c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800a86e:	2200      	movs	r2, #0
 800a870:	2600      	movs	r6, #0
 800a872:	2700      	movs	r7, #0
 800a874:	9005      	str	r0, [sp, #20]
 800a876:	9109      	str	r1, [sp, #36]	@ 0x24
 800a878:	921e      	str	r2, [sp, #120]	@ 0x78
 800a87a:	911d      	str	r1, [sp, #116]	@ 0x74
 800a87c:	780a      	ldrb	r2, [r1, #0]
 800a87e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a880:	d053      	beq.n	800a92a <_strtod_l+0xc2>
 800a882:	d83f      	bhi.n	800a904 <_strtod_l+0x9c>
 800a884:	2a0d      	cmp	r2, #13
 800a886:	d839      	bhi.n	800a8fc <_strtod_l+0x94>
 800a888:	2a08      	cmp	r2, #8
 800a88a:	d839      	bhi.n	800a900 <_strtod_l+0x98>
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	d042      	beq.n	800a916 <_strtod_l+0xae>
 800a890:	2200      	movs	r2, #0
 800a892:	9212      	str	r2, [sp, #72]	@ 0x48
 800a894:	2100      	movs	r1, #0
 800a896:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800a898:	910c      	str	r1, [sp, #48]	@ 0x30
 800a89a:	782a      	ldrb	r2, [r5, #0]
 800a89c:	2a30      	cmp	r2, #48	@ 0x30
 800a89e:	d000      	beq.n	800a8a2 <_strtod_l+0x3a>
 800a8a0:	e083      	b.n	800a9aa <_strtod_l+0x142>
 800a8a2:	786a      	ldrb	r2, [r5, #1]
 800a8a4:	3120      	adds	r1, #32
 800a8a6:	438a      	bics	r2, r1
 800a8a8:	2a58      	cmp	r2, #88	@ 0x58
 800a8aa:	d000      	beq.n	800a8ae <_strtod_l+0x46>
 800a8ac:	e073      	b.n	800a996 <_strtod_l+0x12e>
 800a8ae:	9302      	str	r3, [sp, #8]
 800a8b0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8b2:	4a95      	ldr	r2, [pc, #596]	@ (800ab08 <_strtod_l+0x2a0>)
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	ab1e      	add	r3, sp, #120	@ 0x78
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	9805      	ldr	r0, [sp, #20]
 800a8bc:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a8be:	a91d      	add	r1, sp, #116	@ 0x74
 800a8c0:	f001 f908 	bl	800bad4 <__gethex>
 800a8c4:	230f      	movs	r3, #15
 800a8c6:	0002      	movs	r2, r0
 800a8c8:	401a      	ands	r2, r3
 800a8ca:	0004      	movs	r4, r0
 800a8cc:	9206      	str	r2, [sp, #24]
 800a8ce:	4218      	tst	r0, r3
 800a8d0:	d005      	beq.n	800a8de <_strtod_l+0x76>
 800a8d2:	2a06      	cmp	r2, #6
 800a8d4:	d12b      	bne.n	800a92e <_strtod_l+0xc6>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	3501      	adds	r5, #1
 800a8da:	951d      	str	r5, [sp, #116]	@ 0x74
 800a8dc:	9312      	str	r3, [sp, #72]	@ 0x48
 800a8de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <_strtod_l+0x82>
 800a8e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a8e6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d019      	beq.n	800a924 <_strtod_l+0xbc>
 800a8f0:	2380      	movs	r3, #128	@ 0x80
 800a8f2:	0030      	movs	r0, r6
 800a8f4:	061b      	lsls	r3, r3, #24
 800a8f6:	18f9      	adds	r1, r7, r3
 800a8f8:	b023      	add	sp, #140	@ 0x8c
 800a8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8fc:	2a20      	cmp	r2, #32
 800a8fe:	d1c7      	bne.n	800a890 <_strtod_l+0x28>
 800a900:	3101      	adds	r1, #1
 800a902:	e7ba      	b.n	800a87a <_strtod_l+0x12>
 800a904:	2a2d      	cmp	r2, #45	@ 0x2d
 800a906:	d1c3      	bne.n	800a890 <_strtod_l+0x28>
 800a908:	3a2c      	subs	r2, #44	@ 0x2c
 800a90a:	9212      	str	r2, [sp, #72]	@ 0x48
 800a90c:	1c4a      	adds	r2, r1, #1
 800a90e:	921d      	str	r2, [sp, #116]	@ 0x74
 800a910:	784a      	ldrb	r2, [r1, #1]
 800a912:	2a00      	cmp	r2, #0
 800a914:	d1be      	bne.n	800a894 <_strtod_l+0x2c>
 800a916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a918:	931d      	str	r3, [sp, #116]	@ 0x74
 800a91a:	2300      	movs	r3, #0
 800a91c:	9312      	str	r3, [sp, #72]	@ 0x48
 800a91e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1df      	bne.n	800a8e4 <_strtod_l+0x7c>
 800a924:	0030      	movs	r0, r6
 800a926:	0039      	movs	r1, r7
 800a928:	e7e6      	b.n	800a8f8 <_strtod_l+0x90>
 800a92a:	2200      	movs	r2, #0
 800a92c:	e7ed      	b.n	800a90a <_strtod_l+0xa2>
 800a92e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800a930:	2a00      	cmp	r2, #0
 800a932:	d007      	beq.n	800a944 <_strtod_l+0xdc>
 800a934:	2135      	movs	r1, #53	@ 0x35
 800a936:	a820      	add	r0, sp, #128	@ 0x80
 800a938:	f002 f908 	bl	800cb4c <__copybits>
 800a93c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800a93e:	9805      	ldr	r0, [sp, #20]
 800a940:	f001 fcc2 	bl	800c2c8 <_Bfree>
 800a944:	9806      	ldr	r0, [sp, #24]
 800a946:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a948:	3801      	subs	r0, #1
 800a94a:	2804      	cmp	r0, #4
 800a94c:	d806      	bhi.n	800a95c <_strtod_l+0xf4>
 800a94e:	f7f5 fbeb 	bl	8000128 <__gnu_thumb1_case_uqi>
 800a952:	0312      	.short	0x0312
 800a954:	1e1c      	.short	0x1e1c
 800a956:	12          	.byte	0x12
 800a957:	00          	.byte	0x00
 800a958:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a95a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800a95c:	05e4      	lsls	r4, r4, #23
 800a95e:	d502      	bpl.n	800a966 <_strtod_l+0xfe>
 800a960:	2380      	movs	r3, #128	@ 0x80
 800a962:	061b      	lsls	r3, r3, #24
 800a964:	431f      	orrs	r7, r3
 800a966:	4b69      	ldr	r3, [pc, #420]	@ (800ab0c <_strtod_l+0x2a4>)
 800a968:	423b      	tst	r3, r7
 800a96a:	d1b8      	bne.n	800a8de <_strtod_l+0x76>
 800a96c:	f000 ffc4 	bl	800b8f8 <__errno>
 800a970:	2322      	movs	r3, #34	@ 0x22
 800a972:	6003      	str	r3, [r0, #0]
 800a974:	e7b3      	b.n	800a8de <_strtod_l+0x76>
 800a976:	4966      	ldr	r1, [pc, #408]	@ (800ab10 <_strtod_l+0x2a8>)
 800a978:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a97a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a97c:	400a      	ands	r2, r1
 800a97e:	4965      	ldr	r1, [pc, #404]	@ (800ab14 <_strtod_l+0x2ac>)
 800a980:	185b      	adds	r3, r3, r1
 800a982:	051b      	lsls	r3, r3, #20
 800a984:	431a      	orrs	r2, r3
 800a986:	0017      	movs	r7, r2
 800a988:	e7e8      	b.n	800a95c <_strtod_l+0xf4>
 800a98a:	4f60      	ldr	r7, [pc, #384]	@ (800ab0c <_strtod_l+0x2a4>)
 800a98c:	e7e6      	b.n	800a95c <_strtod_l+0xf4>
 800a98e:	2601      	movs	r6, #1
 800a990:	4f61      	ldr	r7, [pc, #388]	@ (800ab18 <_strtod_l+0x2b0>)
 800a992:	4276      	negs	r6, r6
 800a994:	e7e2      	b.n	800a95c <_strtod_l+0xf4>
 800a996:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	921d      	str	r2, [sp, #116]	@ 0x74
 800a99c:	785b      	ldrb	r3, [r3, #1]
 800a99e:	2b30      	cmp	r3, #48	@ 0x30
 800a9a0:	d0f9      	beq.n	800a996 <_strtod_l+0x12e>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d09b      	beq.n	800a8de <_strtod_l+0x76>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	220a      	movs	r2, #10
 800a9ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9b0:	950d      	str	r5, [sp, #52]	@ 0x34
 800a9b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9b4:	9508      	str	r5, [sp, #32]
 800a9b6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800a9b8:	7804      	ldrb	r4, [r0, #0]
 800a9ba:	0023      	movs	r3, r4
 800a9bc:	3b30      	subs	r3, #48	@ 0x30
 800a9be:	b2d9      	uxtb	r1, r3
 800a9c0:	2909      	cmp	r1, #9
 800a9c2:	d927      	bls.n	800aa14 <_strtod_l+0x1ac>
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	4955      	ldr	r1, [pc, #340]	@ (800ab1c <_strtod_l+0x2b4>)
 800a9c8:	f000 ff36 	bl	800b838 <strncmp>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d031      	beq.n	800aa34 <_strtod_l+0x1cc>
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	0023      	movs	r3, r4
 800a9d4:	4684      	mov	ip, r0
 800a9d6:	9a08      	ldr	r2, [sp, #32]
 800a9d8:	900e      	str	r0, [sp, #56]	@ 0x38
 800a9da:	9206      	str	r2, [sp, #24]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	0019      	movs	r1, r3
 800a9e0:	4391      	bics	r1, r2
 800a9e2:	000a      	movs	r2, r1
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	9107      	str	r1, [sp, #28]
 800a9e8:	2a45      	cmp	r2, #69	@ 0x45
 800a9ea:	d000      	beq.n	800a9ee <_strtod_l+0x186>
 800a9ec:	e0c0      	b.n	800ab70 <_strtod_l+0x308>
 800a9ee:	9b06      	ldr	r3, [sp, #24]
 800a9f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9f2:	4303      	orrs	r3, r0
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	428b      	cmp	r3, r1
 800a9f8:	d08d      	beq.n	800a916 <_strtod_l+0xae>
 800a9fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9fe:	3301      	adds	r3, #1
 800aa00:	931d      	str	r3, [sp, #116]	@ 0x74
 800aa02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa08:	d070      	beq.n	800aaec <_strtod_l+0x284>
 800aa0a:	000c      	movs	r4, r1
 800aa0c:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa0e:	d173      	bne.n	800aaf8 <_strtod_l+0x290>
 800aa10:	2401      	movs	r4, #1
 800aa12:	e06c      	b.n	800aaee <_strtod_l+0x286>
 800aa14:	9908      	ldr	r1, [sp, #32]
 800aa16:	2908      	cmp	r1, #8
 800aa18:	dc09      	bgt.n	800aa2e <_strtod_l+0x1c6>
 800aa1a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aa1c:	4351      	muls	r1, r2
 800aa1e:	185b      	adds	r3, r3, r1
 800aa20:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	3001      	adds	r0, #1
 800aa26:	3301      	adds	r3, #1
 800aa28:	9308      	str	r3, [sp, #32]
 800aa2a:	901d      	str	r0, [sp, #116]	@ 0x74
 800aa2c:	e7c3      	b.n	800a9b6 <_strtod_l+0x14e>
 800aa2e:	4355      	muls	r5, r2
 800aa30:	195d      	adds	r5, r3, r5
 800aa32:	e7f6      	b.n	800aa22 <_strtod_l+0x1ba>
 800aa34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	921d      	str	r2, [sp, #116]	@ 0x74
 800aa3a:	9a08      	ldr	r2, [sp, #32]
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	d03a      	beq.n	800aab8 <_strtod_l+0x250>
 800aa42:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa44:	9206      	str	r2, [sp, #24]
 800aa46:	001a      	movs	r2, r3
 800aa48:	3a30      	subs	r2, #48	@ 0x30
 800aa4a:	2a09      	cmp	r2, #9
 800aa4c:	d912      	bls.n	800aa74 <_strtod_l+0x20c>
 800aa4e:	2201      	movs	r2, #1
 800aa50:	4694      	mov	ip, r2
 800aa52:	e7c3      	b.n	800a9dc <_strtod_l+0x174>
 800aa54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa56:	3001      	adds	r0, #1
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	921d      	str	r2, [sp, #116]	@ 0x74
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b30      	cmp	r3, #48	@ 0x30
 800aa60:	d0f8      	beq.n	800aa54 <_strtod_l+0x1ec>
 800aa62:	001a      	movs	r2, r3
 800aa64:	3a31      	subs	r2, #49	@ 0x31
 800aa66:	2a08      	cmp	r2, #8
 800aa68:	d83b      	bhi.n	800aae2 <_strtod_l+0x27a>
 800aa6a:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800aa70:	9006      	str	r0, [sp, #24]
 800aa72:	9213      	str	r2, [sp, #76]	@ 0x4c
 800aa74:	001a      	movs	r2, r3
 800aa76:	1c41      	adds	r1, r0, #1
 800aa78:	3a30      	subs	r2, #48	@ 0x30
 800aa7a:	2b30      	cmp	r3, #48	@ 0x30
 800aa7c:	d016      	beq.n	800aaac <_strtod_l+0x244>
 800aa7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa80:	185b      	adds	r3, r3, r1
 800aa82:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa84:	9b06      	ldr	r3, [sp, #24]
 800aa86:	210a      	movs	r1, #10
 800aa88:	469c      	mov	ip, r3
 800aa8a:	4484      	add	ip, r0
 800aa8c:	459c      	cmp	ip, r3
 800aa8e:	d115      	bne.n	800aabc <_strtod_l+0x254>
 800aa90:	9906      	ldr	r1, [sp, #24]
 800aa92:	9b06      	ldr	r3, [sp, #24]
 800aa94:	3101      	adds	r1, #1
 800aa96:	1809      	adds	r1, r1, r0
 800aa98:	181b      	adds	r3, r3, r0
 800aa9a:	9106      	str	r1, [sp, #24]
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	dc19      	bgt.n	800aad4 <_strtod_l+0x26c>
 800aaa0:	230a      	movs	r3, #10
 800aaa2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800aaa4:	434b      	muls	r3, r1
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	18d3      	adds	r3, r2, r3
 800aaaa:	930d      	str	r3, [sp, #52]	@ 0x34
 800aaac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aaae:	0008      	movs	r0, r1
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	921d      	str	r2, [sp, #116]	@ 0x74
 800aab4:	785b      	ldrb	r3, [r3, #1]
 800aab6:	e7c6      	b.n	800aa46 <_strtod_l+0x1de>
 800aab8:	9808      	ldr	r0, [sp, #32]
 800aaba:	e7d0      	b.n	800aa5e <_strtod_l+0x1f6>
 800aabc:	1c5c      	adds	r4, r3, #1
 800aabe:	2b08      	cmp	r3, #8
 800aac0:	dc04      	bgt.n	800aacc <_strtod_l+0x264>
 800aac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aac4:	434b      	muls	r3, r1
 800aac6:	930d      	str	r3, [sp, #52]	@ 0x34
 800aac8:	0023      	movs	r3, r4
 800aaca:	e7df      	b.n	800aa8c <_strtod_l+0x224>
 800aacc:	2c10      	cmp	r4, #16
 800aace:	dcfb      	bgt.n	800aac8 <_strtod_l+0x260>
 800aad0:	434d      	muls	r5, r1
 800aad2:	e7f9      	b.n	800aac8 <_strtod_l+0x260>
 800aad4:	2100      	movs	r1, #0
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	dce8      	bgt.n	800aaac <_strtod_l+0x244>
 800aada:	230a      	movs	r3, #10
 800aadc:	435d      	muls	r5, r3
 800aade:	1955      	adds	r5, r2, r5
 800aae0:	e7e4      	b.n	800aaac <_strtod_l+0x244>
 800aae2:	2200      	movs	r2, #0
 800aae4:	920e      	str	r2, [sp, #56]	@ 0x38
 800aae6:	9206      	str	r2, [sp, #24]
 800aae8:	3201      	adds	r2, #1
 800aaea:	e7b1      	b.n	800aa50 <_strtod_l+0x1e8>
 800aaec:	2400      	movs	r4, #0
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	931d      	str	r3, [sp, #116]	@ 0x74
 800aaf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf6:	789b      	ldrb	r3, [r3, #2]
 800aaf8:	001a      	movs	r2, r3
 800aafa:	3a30      	subs	r2, #48	@ 0x30
 800aafc:	2a09      	cmp	r2, #9
 800aafe:	d913      	bls.n	800ab28 <_strtod_l+0x2c0>
 800ab00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab02:	921d      	str	r2, [sp, #116]	@ 0x74
 800ab04:	2200      	movs	r2, #0
 800ab06:	e032      	b.n	800ab6e <_strtod_l+0x306>
 800ab08:	0800e3d0 	.word	0x0800e3d0
 800ab0c:	7ff00000 	.word	0x7ff00000
 800ab10:	ffefffff 	.word	0xffefffff
 800ab14:	00000433 	.word	0x00000433
 800ab18:	7fffffff 	.word	0x7fffffff
 800ab1c:	0800e3ac 	.word	0x0800e3ac
 800ab20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	921d      	str	r2, [sp, #116]	@ 0x74
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	2b30      	cmp	r3, #48	@ 0x30
 800ab2a:	d0f9      	beq.n	800ab20 <_strtod_l+0x2b8>
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	9207      	str	r2, [sp, #28]
 800ab30:	001a      	movs	r2, r3
 800ab32:	3a31      	subs	r2, #49	@ 0x31
 800ab34:	2a08      	cmp	r2, #8
 800ab36:	d81b      	bhi.n	800ab70 <_strtod_l+0x308>
 800ab38:	3b30      	subs	r3, #48	@ 0x30
 800ab3a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab3e:	9307      	str	r3, [sp, #28]
 800ab40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab42:	1c59      	adds	r1, r3, #1
 800ab44:	911d      	str	r1, [sp, #116]	@ 0x74
 800ab46:	785b      	ldrb	r3, [r3, #1]
 800ab48:	001a      	movs	r2, r3
 800ab4a:	3a30      	subs	r2, #48	@ 0x30
 800ab4c:	2a09      	cmp	r2, #9
 800ab4e:	d93a      	bls.n	800abc6 <_strtod_l+0x35e>
 800ab50:	9a07      	ldr	r2, [sp, #28]
 800ab52:	1a8a      	subs	r2, r1, r2
 800ab54:	49b4      	ldr	r1, [pc, #720]	@ (800ae28 <_strtod_l+0x5c0>)
 800ab56:	9107      	str	r1, [sp, #28]
 800ab58:	2a08      	cmp	r2, #8
 800ab5a:	dc04      	bgt.n	800ab66 <_strtod_l+0x2fe>
 800ab5c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ab5e:	9207      	str	r2, [sp, #28]
 800ab60:	428a      	cmp	r2, r1
 800ab62:	dd00      	ble.n	800ab66 <_strtod_l+0x2fe>
 800ab64:	9107      	str	r1, [sp, #28]
 800ab66:	2c00      	cmp	r4, #0
 800ab68:	d002      	beq.n	800ab70 <_strtod_l+0x308>
 800ab6a:	9a07      	ldr	r2, [sp, #28]
 800ab6c:	4252      	negs	r2, r2
 800ab6e:	9207      	str	r2, [sp, #28]
 800ab70:	9a06      	ldr	r2, [sp, #24]
 800ab72:	2a00      	cmp	r2, #0
 800ab74:	d14d      	bne.n	800ac12 <_strtod_l+0x3aa>
 800ab76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ab78:	4310      	orrs	r0, r2
 800ab7a:	d000      	beq.n	800ab7e <_strtod_l+0x316>
 800ab7c:	e6af      	b.n	800a8de <_strtod_l+0x76>
 800ab7e:	4662      	mov	r2, ip
 800ab80:	2a00      	cmp	r2, #0
 800ab82:	d000      	beq.n	800ab86 <_strtod_l+0x31e>
 800ab84:	e6c7      	b.n	800a916 <_strtod_l+0xae>
 800ab86:	2b69      	cmp	r3, #105	@ 0x69
 800ab88:	d027      	beq.n	800abda <_strtod_l+0x372>
 800ab8a:	dc23      	bgt.n	800abd4 <_strtod_l+0x36c>
 800ab8c:	2b49      	cmp	r3, #73	@ 0x49
 800ab8e:	d024      	beq.n	800abda <_strtod_l+0x372>
 800ab90:	2b4e      	cmp	r3, #78	@ 0x4e
 800ab92:	d000      	beq.n	800ab96 <_strtod_l+0x32e>
 800ab94:	e6bf      	b.n	800a916 <_strtod_l+0xae>
 800ab96:	49a5      	ldr	r1, [pc, #660]	@ (800ae2c <_strtod_l+0x5c4>)
 800ab98:	a81d      	add	r0, sp, #116	@ 0x74
 800ab9a:	f001 f9d1 	bl	800bf40 <__match>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d100      	bne.n	800aba4 <_strtod_l+0x33c>
 800aba2:	e6b8      	b.n	800a916 <_strtod_l+0xae>
 800aba4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b28      	cmp	r3, #40	@ 0x28
 800abaa:	d12c      	bne.n	800ac06 <_strtod_l+0x39e>
 800abac:	49a0      	ldr	r1, [pc, #640]	@ (800ae30 <_strtod_l+0x5c8>)
 800abae:	aa20      	add	r2, sp, #128	@ 0x80
 800abb0:	a81d      	add	r0, sp, #116	@ 0x74
 800abb2:	f001 f9d9 	bl	800bf68 <__hexnan>
 800abb6:	2805      	cmp	r0, #5
 800abb8:	d125      	bne.n	800ac06 <_strtod_l+0x39e>
 800abba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abbc:	4a9d      	ldr	r2, [pc, #628]	@ (800ae34 <_strtod_l+0x5cc>)
 800abbe:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800abc0:	431a      	orrs	r2, r3
 800abc2:	0017      	movs	r7, r2
 800abc4:	e68b      	b.n	800a8de <_strtod_l+0x76>
 800abc6:	220a      	movs	r2, #10
 800abc8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800abca:	434a      	muls	r2, r1
 800abcc:	18d2      	adds	r2, r2, r3
 800abce:	3a30      	subs	r2, #48	@ 0x30
 800abd0:	9210      	str	r2, [sp, #64]	@ 0x40
 800abd2:	e7b5      	b.n	800ab40 <_strtod_l+0x2d8>
 800abd4:	2b6e      	cmp	r3, #110	@ 0x6e
 800abd6:	d0de      	beq.n	800ab96 <_strtod_l+0x32e>
 800abd8:	e69d      	b.n	800a916 <_strtod_l+0xae>
 800abda:	4997      	ldr	r1, [pc, #604]	@ (800ae38 <_strtod_l+0x5d0>)
 800abdc:	a81d      	add	r0, sp, #116	@ 0x74
 800abde:	f001 f9af 	bl	800bf40 <__match>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d100      	bne.n	800abe8 <_strtod_l+0x380>
 800abe6:	e696      	b.n	800a916 <_strtod_l+0xae>
 800abe8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800abea:	4994      	ldr	r1, [pc, #592]	@ (800ae3c <_strtod_l+0x5d4>)
 800abec:	3b01      	subs	r3, #1
 800abee:	a81d      	add	r0, sp, #116	@ 0x74
 800abf0:	931d      	str	r3, [sp, #116]	@ 0x74
 800abf2:	f001 f9a5 	bl	800bf40 <__match>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d102      	bne.n	800ac00 <_strtod_l+0x398>
 800abfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800abfc:	3301      	adds	r3, #1
 800abfe:	931d      	str	r3, [sp, #116]	@ 0x74
 800ac00:	2600      	movs	r6, #0
 800ac02:	4f8c      	ldr	r7, [pc, #560]	@ (800ae34 <_strtod_l+0x5cc>)
 800ac04:	e66b      	b.n	800a8de <_strtod_l+0x76>
 800ac06:	488e      	ldr	r0, [pc, #568]	@ (800ae40 <_strtod_l+0x5d8>)
 800ac08:	f000 feac 	bl	800b964 <nan>
 800ac0c:	0006      	movs	r6, r0
 800ac0e:	000f      	movs	r7, r1
 800ac10:	e665      	b.n	800a8de <_strtod_l+0x76>
 800ac12:	9b07      	ldr	r3, [sp, #28]
 800ac14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac1a:	9b08      	ldr	r3, [sp, #32]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <_strtod_l+0x3bc>
 800ac20:	9b06      	ldr	r3, [sp, #24]
 800ac22:	9308      	str	r3, [sp, #32]
 800ac24:	9c06      	ldr	r4, [sp, #24]
 800ac26:	2c10      	cmp	r4, #16
 800ac28:	dd00      	ble.n	800ac2c <_strtod_l+0x3c4>
 800ac2a:	2410      	movs	r4, #16
 800ac2c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ac2e:	f7f8 f83d 	bl	8002cac <__aeabi_ui2d>
 800ac32:	9b06      	ldr	r3, [sp, #24]
 800ac34:	0006      	movs	r6, r0
 800ac36:	000f      	movs	r7, r1
 800ac38:	2b09      	cmp	r3, #9
 800ac3a:	dc13      	bgt.n	800ac64 <_strtod_l+0x3fc>
 800ac3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d100      	bne.n	800ac44 <_strtod_l+0x3dc>
 800ac42:	e64c      	b.n	800a8de <_strtod_l+0x76>
 800ac44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dc00      	bgt.n	800ac4c <_strtod_l+0x3e4>
 800ac4a:	e07e      	b.n	800ad4a <_strtod_l+0x4e2>
 800ac4c:	2b16      	cmp	r3, #22
 800ac4e:	dc63      	bgt.n	800ad18 <_strtod_l+0x4b0>
 800ac50:	497c      	ldr	r1, [pc, #496]	@ (800ae44 <_strtod_l+0x5dc>)
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	18c9      	adds	r1, r1, r3
 800ac56:	0032      	movs	r2, r6
 800ac58:	6808      	ldr	r0, [r1, #0]
 800ac5a:	6849      	ldr	r1, [r1, #4]
 800ac5c:	003b      	movs	r3, r7
 800ac5e:	f7f7 f957 	bl	8001f10 <__aeabi_dmul>
 800ac62:	e7d3      	b.n	800ac0c <_strtod_l+0x3a4>
 800ac64:	0022      	movs	r2, r4
 800ac66:	4b77      	ldr	r3, [pc, #476]	@ (800ae44 <_strtod_l+0x5dc>)
 800ac68:	3a09      	subs	r2, #9
 800ac6a:	00d2      	lsls	r2, r2, #3
 800ac6c:	189b      	adds	r3, r3, r2
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	f7f7 f94d 	bl	8001f10 <__aeabi_dmul>
 800ac76:	0006      	movs	r6, r0
 800ac78:	0028      	movs	r0, r5
 800ac7a:	000f      	movs	r7, r1
 800ac7c:	f7f8 f816 	bl	8002cac <__aeabi_ui2d>
 800ac80:	000b      	movs	r3, r1
 800ac82:	0002      	movs	r2, r0
 800ac84:	0039      	movs	r1, r7
 800ac86:	0030      	movs	r0, r6
 800ac88:	f7f6 f99a 	bl	8000fc0 <__aeabi_dadd>
 800ac8c:	9b06      	ldr	r3, [sp, #24]
 800ac8e:	0006      	movs	r6, r0
 800ac90:	000f      	movs	r7, r1
 800ac92:	2b0f      	cmp	r3, #15
 800ac94:	ddd2      	ble.n	800ac3c <_strtod_l+0x3d4>
 800ac96:	9b06      	ldr	r3, [sp, #24]
 800ac98:	1b1c      	subs	r4, r3, r4
 800ac9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac9c:	18e4      	adds	r4, r4, r3
 800ac9e:	2c00      	cmp	r4, #0
 800aca0:	dc00      	bgt.n	800aca4 <_strtod_l+0x43c>
 800aca2:	e09b      	b.n	800addc <_strtod_l+0x574>
 800aca4:	220f      	movs	r2, #15
 800aca6:	0023      	movs	r3, r4
 800aca8:	4013      	ands	r3, r2
 800acaa:	4214      	tst	r4, r2
 800acac:	d00a      	beq.n	800acc4 <_strtod_l+0x45c>
 800acae:	4965      	ldr	r1, [pc, #404]	@ (800ae44 <_strtod_l+0x5dc>)
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	18c9      	adds	r1, r1, r3
 800acb4:	0032      	movs	r2, r6
 800acb6:	6808      	ldr	r0, [r1, #0]
 800acb8:	6849      	ldr	r1, [r1, #4]
 800acba:	003b      	movs	r3, r7
 800acbc:	f7f7 f928 	bl	8001f10 <__aeabi_dmul>
 800acc0:	0006      	movs	r6, r0
 800acc2:	000f      	movs	r7, r1
 800acc4:	230f      	movs	r3, #15
 800acc6:	439c      	bics	r4, r3
 800acc8:	d073      	beq.n	800adb2 <_strtod_l+0x54a>
 800acca:	3326      	adds	r3, #38	@ 0x26
 800accc:	33ff      	adds	r3, #255	@ 0xff
 800acce:	429c      	cmp	r4, r3
 800acd0:	dd4b      	ble.n	800ad6a <_strtod_l+0x502>
 800acd2:	2300      	movs	r3, #0
 800acd4:	9306      	str	r3, [sp, #24]
 800acd6:	9307      	str	r3, [sp, #28]
 800acd8:	930d      	str	r3, [sp, #52]	@ 0x34
 800acda:	9308      	str	r3, [sp, #32]
 800acdc:	2322      	movs	r3, #34	@ 0x22
 800acde:	2600      	movs	r6, #0
 800ace0:	9a05      	ldr	r2, [sp, #20]
 800ace2:	4f54      	ldr	r7, [pc, #336]	@ (800ae34 <_strtod_l+0x5cc>)
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ace8:	42b3      	cmp	r3, r6
 800acea:	d100      	bne.n	800acee <_strtod_l+0x486>
 800acec:	e5f7      	b.n	800a8de <_strtod_l+0x76>
 800acee:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800acf0:	9805      	ldr	r0, [sp, #20]
 800acf2:	f001 fae9 	bl	800c2c8 <_Bfree>
 800acf6:	9908      	ldr	r1, [sp, #32]
 800acf8:	9805      	ldr	r0, [sp, #20]
 800acfa:	f001 fae5 	bl	800c2c8 <_Bfree>
 800acfe:	9907      	ldr	r1, [sp, #28]
 800ad00:	9805      	ldr	r0, [sp, #20]
 800ad02:	f001 fae1 	bl	800c2c8 <_Bfree>
 800ad06:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ad08:	9805      	ldr	r0, [sp, #20]
 800ad0a:	f001 fadd 	bl	800c2c8 <_Bfree>
 800ad0e:	9906      	ldr	r1, [sp, #24]
 800ad10:	9805      	ldr	r0, [sp, #20]
 800ad12:	f001 fad9 	bl	800c2c8 <_Bfree>
 800ad16:	e5e2      	b.n	800a8de <_strtod_l+0x76>
 800ad18:	2325      	movs	r3, #37	@ 0x25
 800ad1a:	9a06      	ldr	r2, [sp, #24]
 800ad1c:	1a9b      	subs	r3, r3, r2
 800ad1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad20:	4293      	cmp	r3, r2
 800ad22:	dbb8      	blt.n	800ac96 <_strtod_l+0x42e>
 800ad24:	240f      	movs	r4, #15
 800ad26:	9b06      	ldr	r3, [sp, #24]
 800ad28:	4d46      	ldr	r5, [pc, #280]	@ (800ae44 <_strtod_l+0x5dc>)
 800ad2a:	1ae4      	subs	r4, r4, r3
 800ad2c:	00e1      	lsls	r1, r4, #3
 800ad2e:	1869      	adds	r1, r5, r1
 800ad30:	0032      	movs	r2, r6
 800ad32:	6808      	ldr	r0, [r1, #0]
 800ad34:	6849      	ldr	r1, [r1, #4]
 800ad36:	003b      	movs	r3, r7
 800ad38:	f7f7 f8ea 	bl	8001f10 <__aeabi_dmul>
 800ad3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad3e:	1b1c      	subs	r4, r3, r4
 800ad40:	00e4      	lsls	r4, r4, #3
 800ad42:	192d      	adds	r5, r5, r4
 800ad44:	682a      	ldr	r2, [r5, #0]
 800ad46:	686b      	ldr	r3, [r5, #4]
 800ad48:	e789      	b.n	800ac5e <_strtod_l+0x3f6>
 800ad4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad4c:	3316      	adds	r3, #22
 800ad4e:	dba2      	blt.n	800ac96 <_strtod_l+0x42e>
 800ad50:	9907      	ldr	r1, [sp, #28]
 800ad52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad54:	4b3b      	ldr	r3, [pc, #236]	@ (800ae44 <_strtod_l+0x5dc>)
 800ad56:	1a52      	subs	r2, r2, r1
 800ad58:	00d2      	lsls	r2, r2, #3
 800ad5a:	189b      	adds	r3, r3, r2
 800ad5c:	0030      	movs	r0, r6
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	0039      	movs	r1, r7
 800ad64:	f7f6 fc90 	bl	8001688 <__aeabi_ddiv>
 800ad68:	e750      	b.n	800ac0c <_strtod_l+0x3a4>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	0030      	movs	r0, r6
 800ad6e:	0039      	movs	r1, r7
 800ad70:	4d35      	ldr	r5, [pc, #212]	@ (800ae48 <_strtod_l+0x5e0>)
 800ad72:	1124      	asrs	r4, r4, #4
 800ad74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad76:	2c01      	cmp	r4, #1
 800ad78:	dc1e      	bgt.n	800adb8 <_strtod_l+0x550>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <_strtod_l+0x51a>
 800ad7e:	0006      	movs	r6, r0
 800ad80:	000f      	movs	r7, r1
 800ad82:	4b32      	ldr	r3, [pc, #200]	@ (800ae4c <_strtod_l+0x5e4>)
 800ad84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad86:	18ff      	adds	r7, r7, r3
 800ad88:	4b2f      	ldr	r3, [pc, #188]	@ (800ae48 <_strtod_l+0x5e0>)
 800ad8a:	00d5      	lsls	r5, r2, #3
 800ad8c:	195d      	adds	r5, r3, r5
 800ad8e:	0032      	movs	r2, r6
 800ad90:	6828      	ldr	r0, [r5, #0]
 800ad92:	6869      	ldr	r1, [r5, #4]
 800ad94:	003b      	movs	r3, r7
 800ad96:	f7f7 f8bb 	bl	8001f10 <__aeabi_dmul>
 800ad9a:	4b26      	ldr	r3, [pc, #152]	@ (800ae34 <_strtod_l+0x5cc>)
 800ad9c:	4a2c      	ldr	r2, [pc, #176]	@ (800ae50 <_strtod_l+0x5e8>)
 800ad9e:	0006      	movs	r6, r0
 800ada0:	400b      	ands	r3, r1
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d895      	bhi.n	800acd2 <_strtod_l+0x46a>
 800ada6:	4a2b      	ldr	r2, [pc, #172]	@ (800ae54 <_strtod_l+0x5ec>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d913      	bls.n	800add4 <_strtod_l+0x56c>
 800adac:	2601      	movs	r6, #1
 800adae:	4f2a      	ldr	r7, [pc, #168]	@ (800ae58 <_strtod_l+0x5f0>)
 800adb0:	4276      	negs	r6, r6
 800adb2:	2300      	movs	r3, #0
 800adb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb6:	e086      	b.n	800aec6 <_strtod_l+0x65e>
 800adb8:	2201      	movs	r2, #1
 800adba:	4214      	tst	r4, r2
 800adbc:	d004      	beq.n	800adc8 <_strtod_l+0x560>
 800adbe:	682a      	ldr	r2, [r5, #0]
 800adc0:	686b      	ldr	r3, [r5, #4]
 800adc2:	f7f7 f8a5 	bl	8001f10 <__aeabi_dmul>
 800adc6:	2301      	movs	r3, #1
 800adc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adca:	1064      	asrs	r4, r4, #1
 800adcc:	3201      	adds	r2, #1
 800adce:	9209      	str	r2, [sp, #36]	@ 0x24
 800add0:	3508      	adds	r5, #8
 800add2:	e7d0      	b.n	800ad76 <_strtod_l+0x50e>
 800add4:	23d4      	movs	r3, #212	@ 0xd4
 800add6:	049b      	lsls	r3, r3, #18
 800add8:	18cf      	adds	r7, r1, r3
 800adda:	e7ea      	b.n	800adb2 <_strtod_l+0x54a>
 800addc:	2c00      	cmp	r4, #0
 800adde:	d0e8      	beq.n	800adb2 <_strtod_l+0x54a>
 800ade0:	4264      	negs	r4, r4
 800ade2:	230f      	movs	r3, #15
 800ade4:	0022      	movs	r2, r4
 800ade6:	401a      	ands	r2, r3
 800ade8:	421c      	tst	r4, r3
 800adea:	d00a      	beq.n	800ae02 <_strtod_l+0x59a>
 800adec:	4b15      	ldr	r3, [pc, #84]	@ (800ae44 <_strtod_l+0x5dc>)
 800adee:	00d2      	lsls	r2, r2, #3
 800adf0:	189b      	adds	r3, r3, r2
 800adf2:	0030      	movs	r0, r6
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	0039      	movs	r1, r7
 800adfa:	f7f6 fc45 	bl	8001688 <__aeabi_ddiv>
 800adfe:	0006      	movs	r6, r0
 800ae00:	000f      	movs	r7, r1
 800ae02:	1124      	asrs	r4, r4, #4
 800ae04:	d0d5      	beq.n	800adb2 <_strtod_l+0x54a>
 800ae06:	2c1f      	cmp	r4, #31
 800ae08:	dd28      	ble.n	800ae5c <_strtod_l+0x5f4>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9306      	str	r3, [sp, #24]
 800ae0e:	9307      	str	r3, [sp, #28]
 800ae10:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae12:	9308      	str	r3, [sp, #32]
 800ae14:	2322      	movs	r3, #34	@ 0x22
 800ae16:	9a05      	ldr	r2, [sp, #20]
 800ae18:	2600      	movs	r6, #0
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae1e:	2700      	movs	r7, #0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d000      	beq.n	800ae26 <_strtod_l+0x5be>
 800ae24:	e763      	b.n	800acee <_strtod_l+0x486>
 800ae26:	e55a      	b.n	800a8de <_strtod_l+0x76>
 800ae28:	00004e1f 	.word	0x00004e1f
 800ae2c:	0800e3b7 	.word	0x0800e3b7
 800ae30:	0800e3bc 	.word	0x0800e3bc
 800ae34:	7ff00000 	.word	0x7ff00000
 800ae38:	0800e3ae 	.word	0x0800e3ae
 800ae3c:	0800e3b1 	.word	0x0800e3b1
 800ae40:	0800e766 	.word	0x0800e766
 800ae44:	0800e630 	.word	0x0800e630
 800ae48:	0800e608 	.word	0x0800e608
 800ae4c:	fcb00000 	.word	0xfcb00000
 800ae50:	7ca00000 	.word	0x7ca00000
 800ae54:	7c900000 	.word	0x7c900000
 800ae58:	7fefffff 	.word	0x7fefffff
 800ae5c:	2310      	movs	r3, #16
 800ae5e:	0022      	movs	r2, r4
 800ae60:	401a      	ands	r2, r3
 800ae62:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae64:	421c      	tst	r4, r3
 800ae66:	d001      	beq.n	800ae6c <_strtod_l+0x604>
 800ae68:	335a      	adds	r3, #90	@ 0x5a
 800ae6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae6c:	0030      	movs	r0, r6
 800ae6e:	0039      	movs	r1, r7
 800ae70:	2300      	movs	r3, #0
 800ae72:	4dbf      	ldr	r5, [pc, #764]	@ (800b170 <_strtod_l+0x908>)
 800ae74:	2201      	movs	r2, #1
 800ae76:	4214      	tst	r4, r2
 800ae78:	d004      	beq.n	800ae84 <_strtod_l+0x61c>
 800ae7a:	682a      	ldr	r2, [r5, #0]
 800ae7c:	686b      	ldr	r3, [r5, #4]
 800ae7e:	f7f7 f847 	bl	8001f10 <__aeabi_dmul>
 800ae82:	2301      	movs	r3, #1
 800ae84:	1064      	asrs	r4, r4, #1
 800ae86:	3508      	adds	r5, #8
 800ae88:	2c00      	cmp	r4, #0
 800ae8a:	d1f3      	bne.n	800ae74 <_strtod_l+0x60c>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d001      	beq.n	800ae94 <_strtod_l+0x62c>
 800ae90:	0006      	movs	r6, r0
 800ae92:	000f      	movs	r7, r1
 800ae94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00d      	beq.n	800aeb6 <_strtod_l+0x64e>
 800ae9a:	236b      	movs	r3, #107	@ 0x6b
 800ae9c:	007a      	lsls	r2, r7, #1
 800ae9e:	0d52      	lsrs	r2, r2, #21
 800aea0:	0039      	movs	r1, r7
 800aea2:	1a9b      	subs	r3, r3, r2
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	dd06      	ble.n	800aeb6 <_strtod_l+0x64e>
 800aea8:	2b1f      	cmp	r3, #31
 800aeaa:	dd5a      	ble.n	800af62 <_strtod_l+0x6fa>
 800aeac:	2600      	movs	r6, #0
 800aeae:	2b34      	cmp	r3, #52	@ 0x34
 800aeb0:	dd50      	ble.n	800af54 <_strtod_l+0x6ec>
 800aeb2:	27dc      	movs	r7, #220	@ 0xdc
 800aeb4:	04bf      	lsls	r7, r7, #18
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	2300      	movs	r3, #0
 800aeba:	0030      	movs	r0, r6
 800aebc:	0039      	movs	r1, r7
 800aebe:	f7f5 facd 	bl	800045c <__aeabi_dcmpeq>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d1a1      	bne.n	800ae0a <_strtod_l+0x5a2>
 800aec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aec8:	9a08      	ldr	r2, [sp, #32]
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aece:	9b06      	ldr	r3, [sp, #24]
 800aed0:	9805      	ldr	r0, [sp, #20]
 800aed2:	f001 fa61 	bl	800c398 <__s2b>
 800aed6:	900d      	str	r0, [sp, #52]	@ 0x34
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d100      	bne.n	800aede <_strtod_l+0x676>
 800aedc:	e6f9      	b.n	800acd2 <_strtod_l+0x46a>
 800aede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aee0:	9907      	ldr	r1, [sp, #28]
 800aee2:	17da      	asrs	r2, r3, #31
 800aee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aee6:	1a5b      	subs	r3, r3, r1
 800aee8:	401a      	ands	r2, r3
 800aeea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aeec:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aeee:	43db      	mvns	r3, r3
 800aef0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aef2:	17db      	asrs	r3, r3, #31
 800aef4:	401a      	ands	r2, r3
 800aef6:	2300      	movs	r3, #0
 800aef8:	921a      	str	r2, [sp, #104]	@ 0x68
 800aefa:	9306      	str	r3, [sp, #24]
 800aefc:	9307      	str	r3, [sp, #28]
 800aefe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af00:	9805      	ldr	r0, [sp, #20]
 800af02:	6859      	ldr	r1, [r3, #4]
 800af04:	f001 f99c 	bl	800c240 <_Balloc>
 800af08:	9008      	str	r0, [sp, #32]
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d100      	bne.n	800af10 <_strtod_l+0x6a8>
 800af0e:	e6e5      	b.n	800acdc <_strtod_l+0x474>
 800af10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af12:	300c      	adds	r0, #12
 800af14:	0019      	movs	r1, r3
 800af16:	691a      	ldr	r2, [r3, #16]
 800af18:	310c      	adds	r1, #12
 800af1a:	3202      	adds	r2, #2
 800af1c:	0092      	lsls	r2, r2, #2
 800af1e:	f000 fd18 	bl	800b952 <memcpy>
 800af22:	ab20      	add	r3, sp, #128	@ 0x80
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	ab1f      	add	r3, sp, #124	@ 0x7c
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	0032      	movs	r2, r6
 800af2c:	003b      	movs	r3, r7
 800af2e:	9805      	ldr	r0, [sp, #20]
 800af30:	9610      	str	r6, [sp, #64]	@ 0x40
 800af32:	9711      	str	r7, [sp, #68]	@ 0x44
 800af34:	f001 fd80 	bl	800ca38 <__d2b>
 800af38:	901e      	str	r0, [sp, #120]	@ 0x78
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d100      	bne.n	800af40 <_strtod_l+0x6d8>
 800af3e:	e6cd      	b.n	800acdc <_strtod_l+0x474>
 800af40:	2101      	movs	r1, #1
 800af42:	9805      	ldr	r0, [sp, #20]
 800af44:	f001 fac4 	bl	800c4d0 <__i2b>
 800af48:	9007      	str	r0, [sp, #28]
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d10e      	bne.n	800af6c <_strtod_l+0x704>
 800af4e:	2300      	movs	r3, #0
 800af50:	9307      	str	r3, [sp, #28]
 800af52:	e6c3      	b.n	800acdc <_strtod_l+0x474>
 800af54:	234b      	movs	r3, #75	@ 0x4b
 800af56:	1a9a      	subs	r2, r3, r2
 800af58:	3b4c      	subs	r3, #76	@ 0x4c
 800af5a:	4093      	lsls	r3, r2
 800af5c:	4019      	ands	r1, r3
 800af5e:	000f      	movs	r7, r1
 800af60:	e7a9      	b.n	800aeb6 <_strtod_l+0x64e>
 800af62:	2201      	movs	r2, #1
 800af64:	4252      	negs	r2, r2
 800af66:	409a      	lsls	r2, r3
 800af68:	4016      	ands	r6, r2
 800af6a:	e7a4      	b.n	800aeb6 <_strtod_l+0x64e>
 800af6c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800af6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af70:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800af72:	1ad4      	subs	r4, r2, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	db01      	blt.n	800af7c <_strtod_l+0x714>
 800af78:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800af7a:	195d      	adds	r5, r3, r5
 800af7c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af7e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800af80:	1a5b      	subs	r3, r3, r1
 800af82:	2136      	movs	r1, #54	@ 0x36
 800af84:	189b      	adds	r3, r3, r2
 800af86:	1a8a      	subs	r2, r1, r2
 800af88:	497a      	ldr	r1, [pc, #488]	@ (800b174 <_strtod_l+0x90c>)
 800af8a:	2001      	movs	r0, #1
 800af8c:	468c      	mov	ip, r1
 800af8e:	2100      	movs	r1, #0
 800af90:	3b01      	subs	r3, #1
 800af92:	9116      	str	r1, [sp, #88]	@ 0x58
 800af94:	9014      	str	r0, [sp, #80]	@ 0x50
 800af96:	4563      	cmp	r3, ip
 800af98:	da06      	bge.n	800afa8 <_strtod_l+0x740>
 800af9a:	4661      	mov	r1, ip
 800af9c:	1ac9      	subs	r1, r1, r3
 800af9e:	1a52      	subs	r2, r2, r1
 800afa0:	291f      	cmp	r1, #31
 800afa2:	dc3f      	bgt.n	800b024 <_strtod_l+0x7bc>
 800afa4:	4088      	lsls	r0, r1
 800afa6:	9014      	str	r0, [sp, #80]	@ 0x50
 800afa8:	18ab      	adds	r3, r5, r2
 800afaa:	930e      	str	r3, [sp, #56]	@ 0x38
 800afac:	18a4      	adds	r4, r4, r2
 800afae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afb2:	191c      	adds	r4, r3, r4
 800afb4:	002b      	movs	r3, r5
 800afb6:	4295      	cmp	r5, r2
 800afb8:	dd00      	ble.n	800afbc <_strtod_l+0x754>
 800afba:	0013      	movs	r3, r2
 800afbc:	42a3      	cmp	r3, r4
 800afbe:	dd00      	ble.n	800afc2 <_strtod_l+0x75a>
 800afc0:	0023      	movs	r3, r4
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dd04      	ble.n	800afd0 <_strtod_l+0x768>
 800afc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afc8:	1ae4      	subs	r4, r4, r3
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	920e      	str	r2, [sp, #56]	@ 0x38
 800afce:	1aed      	subs	r5, r5, r3
 800afd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dd16      	ble.n	800b004 <_strtod_l+0x79c>
 800afd6:	001a      	movs	r2, r3
 800afd8:	9907      	ldr	r1, [sp, #28]
 800afda:	9805      	ldr	r0, [sp, #20]
 800afdc:	f001 fb42 	bl	800c664 <__pow5mult>
 800afe0:	9007      	str	r0, [sp, #28]
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d0b3      	beq.n	800af4e <_strtod_l+0x6e6>
 800afe6:	0001      	movs	r1, r0
 800afe8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800afea:	9805      	ldr	r0, [sp, #20]
 800afec:	f001 fa88 	bl	800c500 <__multiply>
 800aff0:	9013      	str	r0, [sp, #76]	@ 0x4c
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d100      	bne.n	800aff8 <_strtod_l+0x790>
 800aff6:	e671      	b.n	800acdc <_strtod_l+0x474>
 800aff8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800affa:	9805      	ldr	r0, [sp, #20]
 800affc:	f001 f964 	bl	800c2c8 <_Bfree>
 800b000:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b002:	931e      	str	r3, [sp, #120]	@ 0x78
 800b004:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b006:	2b00      	cmp	r3, #0
 800b008:	dc12      	bgt.n	800b030 <_strtod_l+0x7c8>
 800b00a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dd18      	ble.n	800b042 <_strtod_l+0x7da>
 800b010:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b012:	9908      	ldr	r1, [sp, #32]
 800b014:	9805      	ldr	r0, [sp, #20]
 800b016:	f001 fb25 	bl	800c664 <__pow5mult>
 800b01a:	9008      	str	r0, [sp, #32]
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d110      	bne.n	800b042 <_strtod_l+0x7da>
 800b020:	2300      	movs	r3, #0
 800b022:	e65a      	b.n	800acda <_strtod_l+0x472>
 800b024:	4954      	ldr	r1, [pc, #336]	@ (800b178 <_strtod_l+0x910>)
 800b026:	1acb      	subs	r3, r1, r3
 800b028:	0001      	movs	r1, r0
 800b02a:	4099      	lsls	r1, r3
 800b02c:	9116      	str	r1, [sp, #88]	@ 0x58
 800b02e:	e7ba      	b.n	800afa6 <_strtod_l+0x73e>
 800b030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b032:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b034:	9805      	ldr	r0, [sp, #20]
 800b036:	f001 fb71 	bl	800c71c <__lshift>
 800b03a:	901e      	str	r0, [sp, #120]	@ 0x78
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d1e4      	bne.n	800b00a <_strtod_l+0x7a2>
 800b040:	e64c      	b.n	800acdc <_strtod_l+0x474>
 800b042:	2c00      	cmp	r4, #0
 800b044:	dd07      	ble.n	800b056 <_strtod_l+0x7ee>
 800b046:	0022      	movs	r2, r4
 800b048:	9908      	ldr	r1, [sp, #32]
 800b04a:	9805      	ldr	r0, [sp, #20]
 800b04c:	f001 fb66 	bl	800c71c <__lshift>
 800b050:	9008      	str	r0, [sp, #32]
 800b052:	2800      	cmp	r0, #0
 800b054:	d0e4      	beq.n	800b020 <_strtod_l+0x7b8>
 800b056:	2d00      	cmp	r5, #0
 800b058:	dd08      	ble.n	800b06c <_strtod_l+0x804>
 800b05a:	002a      	movs	r2, r5
 800b05c:	9907      	ldr	r1, [sp, #28]
 800b05e:	9805      	ldr	r0, [sp, #20]
 800b060:	f001 fb5c 	bl	800c71c <__lshift>
 800b064:	9007      	str	r0, [sp, #28]
 800b066:	2800      	cmp	r0, #0
 800b068:	d100      	bne.n	800b06c <_strtod_l+0x804>
 800b06a:	e637      	b.n	800acdc <_strtod_l+0x474>
 800b06c:	9a08      	ldr	r2, [sp, #32]
 800b06e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b070:	9805      	ldr	r0, [sp, #20]
 800b072:	f001 fbdb 	bl	800c82c <__mdiff>
 800b076:	9006      	str	r0, [sp, #24]
 800b078:	2800      	cmp	r0, #0
 800b07a:	d100      	bne.n	800b07e <_strtod_l+0x816>
 800b07c:	e62e      	b.n	800acdc <_strtod_l+0x474>
 800b07e:	68c3      	ldr	r3, [r0, #12]
 800b080:	9907      	ldr	r1, [sp, #28]
 800b082:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b084:	2300      	movs	r3, #0
 800b086:	60c3      	str	r3, [r0, #12]
 800b088:	f001 fbb4 	bl	800c7f4 <__mcmp>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	da3b      	bge.n	800b108 <_strtod_l+0x8a0>
 800b090:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b092:	4333      	orrs	r3, r6
 800b094:	d167      	bne.n	800b166 <_strtod_l+0x8fe>
 800b096:	033b      	lsls	r3, r7, #12
 800b098:	d165      	bne.n	800b166 <_strtod_l+0x8fe>
 800b09a:	22d6      	movs	r2, #214	@ 0xd6
 800b09c:	4b37      	ldr	r3, [pc, #220]	@ (800b17c <_strtod_l+0x914>)
 800b09e:	04d2      	lsls	r2, r2, #19
 800b0a0:	403b      	ands	r3, r7
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d95f      	bls.n	800b166 <_strtod_l+0x8fe>
 800b0a6:	9b06      	ldr	r3, [sp, #24]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d103      	bne.n	800b0b6 <_strtod_l+0x84e>
 800b0ae:	9b06      	ldr	r3, [sp, #24]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	dd57      	ble.n	800b166 <_strtod_l+0x8fe>
 800b0b6:	9906      	ldr	r1, [sp, #24]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	9805      	ldr	r0, [sp, #20]
 800b0bc:	f001 fb2e 	bl	800c71c <__lshift>
 800b0c0:	9907      	ldr	r1, [sp, #28]
 800b0c2:	9006      	str	r0, [sp, #24]
 800b0c4:	f001 fb96 	bl	800c7f4 <__mcmp>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	dd4c      	ble.n	800b166 <_strtod_l+0x8fe>
 800b0cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b17c <_strtod_l+0x914>)
 800b0ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0d0:	403b      	ands	r3, r7
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	d074      	beq.n	800b1c0 <_strtod_l+0x958>
 800b0d6:	22d6      	movs	r2, #214	@ 0xd6
 800b0d8:	04d2      	lsls	r2, r2, #19
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d870      	bhi.n	800b1c0 <_strtod_l+0x958>
 800b0de:	22dc      	movs	r2, #220	@ 0xdc
 800b0e0:	0492      	lsls	r2, r2, #18
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d800      	bhi.n	800b0e8 <_strtod_l+0x880>
 800b0e6:	e695      	b.n	800ae14 <_strtod_l+0x5ac>
 800b0e8:	0030      	movs	r0, r6
 800b0ea:	0039      	movs	r1, r7
 800b0ec:	4b24      	ldr	r3, [pc, #144]	@ (800b180 <_strtod_l+0x918>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f7f6 ff0e 	bl	8001f10 <__aeabi_dmul>
 800b0f4:	4b21      	ldr	r3, [pc, #132]	@ (800b17c <_strtod_l+0x914>)
 800b0f6:	0006      	movs	r6, r0
 800b0f8:	000f      	movs	r7, r1
 800b0fa:	420b      	tst	r3, r1
 800b0fc:	d000      	beq.n	800b100 <_strtod_l+0x898>
 800b0fe:	e5f6      	b.n	800acee <_strtod_l+0x486>
 800b100:	2322      	movs	r3, #34	@ 0x22
 800b102:	9a05      	ldr	r2, [sp, #20]
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	e5f2      	b.n	800acee <_strtod_l+0x486>
 800b108:	970e      	str	r7, [sp, #56]	@ 0x38
 800b10a:	2800      	cmp	r0, #0
 800b10c:	d175      	bne.n	800b1fa <_strtod_l+0x992>
 800b10e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b110:	033b      	lsls	r3, r7, #12
 800b112:	0b1b      	lsrs	r3, r3, #12
 800b114:	2a00      	cmp	r2, #0
 800b116:	d039      	beq.n	800b18c <_strtod_l+0x924>
 800b118:	4a1a      	ldr	r2, [pc, #104]	@ (800b184 <_strtod_l+0x91c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d138      	bne.n	800b190 <_strtod_l+0x928>
 800b11e:	2101      	movs	r1, #1
 800b120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b122:	4249      	negs	r1, r1
 800b124:	0032      	movs	r2, r6
 800b126:	0008      	movs	r0, r1
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00b      	beq.n	800b144 <_strtod_l+0x8dc>
 800b12c:	24d4      	movs	r4, #212	@ 0xd4
 800b12e:	4b13      	ldr	r3, [pc, #76]	@ (800b17c <_strtod_l+0x914>)
 800b130:	0008      	movs	r0, r1
 800b132:	403b      	ands	r3, r7
 800b134:	04e4      	lsls	r4, r4, #19
 800b136:	42a3      	cmp	r3, r4
 800b138:	d804      	bhi.n	800b144 <_strtod_l+0x8dc>
 800b13a:	306c      	adds	r0, #108	@ 0x6c
 800b13c:	0d1b      	lsrs	r3, r3, #20
 800b13e:	1ac3      	subs	r3, r0, r3
 800b140:	4099      	lsls	r1, r3
 800b142:	0008      	movs	r0, r1
 800b144:	4282      	cmp	r2, r0
 800b146:	d123      	bne.n	800b190 <_strtod_l+0x928>
 800b148:	4b0f      	ldr	r3, [pc, #60]	@ (800b188 <_strtod_l+0x920>)
 800b14a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b14c:	4299      	cmp	r1, r3
 800b14e:	d102      	bne.n	800b156 <_strtod_l+0x8ee>
 800b150:	3201      	adds	r2, #1
 800b152:	d100      	bne.n	800b156 <_strtod_l+0x8ee>
 800b154:	e5c2      	b.n	800acdc <_strtod_l+0x474>
 800b156:	4b09      	ldr	r3, [pc, #36]	@ (800b17c <_strtod_l+0x914>)
 800b158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b15a:	2600      	movs	r6, #0
 800b15c:	401a      	ands	r2, r3
 800b15e:	0013      	movs	r3, r2
 800b160:	2280      	movs	r2, #128	@ 0x80
 800b162:	0352      	lsls	r2, r2, #13
 800b164:	189f      	adds	r7, r3, r2
 800b166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1bd      	bne.n	800b0e8 <_strtod_l+0x880>
 800b16c:	e5bf      	b.n	800acee <_strtod_l+0x486>
 800b16e:	46c0      	nop			@ (mov r8, r8)
 800b170:	0800e3e8 	.word	0x0800e3e8
 800b174:	fffffc02 	.word	0xfffffc02
 800b178:	fffffbe2 	.word	0xfffffbe2
 800b17c:	7ff00000 	.word	0x7ff00000
 800b180:	39500000 	.word	0x39500000
 800b184:	000fffff 	.word	0x000fffff
 800b188:	7fefffff 	.word	0x7fefffff
 800b18c:	4333      	orrs	r3, r6
 800b18e:	d09d      	beq.n	800b0cc <_strtod_l+0x864>
 800b190:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b192:	2b00      	cmp	r3, #0
 800b194:	d01c      	beq.n	800b1d0 <_strtod_l+0x968>
 800b196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b198:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b19a:	4213      	tst	r3, r2
 800b19c:	d0e3      	beq.n	800b166 <_strtod_l+0x8fe>
 800b19e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1a0:	0030      	movs	r0, r6
 800b1a2:	0039      	movs	r1, r7
 800b1a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d016      	beq.n	800b1d8 <_strtod_l+0x970>
 800b1aa:	f7ff fb45 	bl	800a838 <sulp>
 800b1ae:	0002      	movs	r2, r0
 800b1b0:	000b      	movs	r3, r1
 800b1b2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b1b4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b1b6:	f7f5 ff03 	bl	8000fc0 <__aeabi_dadd>
 800b1ba:	0006      	movs	r6, r0
 800b1bc:	000f      	movs	r7, r1
 800b1be:	e7d2      	b.n	800b166 <_strtod_l+0x8fe>
 800b1c0:	2601      	movs	r6, #1
 800b1c2:	4a92      	ldr	r2, [pc, #584]	@ (800b40c <_strtod_l+0xba4>)
 800b1c4:	4276      	negs	r6, r6
 800b1c6:	189b      	adds	r3, r3, r2
 800b1c8:	4a91      	ldr	r2, [pc, #580]	@ (800b410 <_strtod_l+0xba8>)
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	0017      	movs	r7, r2
 800b1ce:	e7ca      	b.n	800b166 <_strtod_l+0x8fe>
 800b1d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b1d2:	4233      	tst	r3, r6
 800b1d4:	d0c7      	beq.n	800b166 <_strtod_l+0x8fe>
 800b1d6:	e7e2      	b.n	800b19e <_strtod_l+0x936>
 800b1d8:	f7ff fb2e 	bl	800a838 <sulp>
 800b1dc:	0002      	movs	r2, r0
 800b1de:	000b      	movs	r3, r1
 800b1e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b1e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b1e4:	f7f7 f95c 	bl	80024a0 <__aeabi_dsub>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	0006      	movs	r6, r0
 800b1ee:	000f      	movs	r7, r1
 800b1f0:	f7f5 f934 	bl	800045c <__aeabi_dcmpeq>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d0b6      	beq.n	800b166 <_strtod_l+0x8fe>
 800b1f8:	e60c      	b.n	800ae14 <_strtod_l+0x5ac>
 800b1fa:	9907      	ldr	r1, [sp, #28]
 800b1fc:	9806      	ldr	r0, [sp, #24]
 800b1fe:	f001 fc7b 	bl	800caf8 <__ratio>
 800b202:	2380      	movs	r3, #128	@ 0x80
 800b204:	2200      	movs	r2, #0
 800b206:	05db      	lsls	r3, r3, #23
 800b208:	0004      	movs	r4, r0
 800b20a:	000d      	movs	r5, r1
 800b20c:	f7f5 f936 	bl	800047c <__aeabi_dcmple>
 800b210:	2800      	cmp	r0, #0
 800b212:	d06c      	beq.n	800b2ee <_strtod_l+0xa86>
 800b214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b216:	2b00      	cmp	r3, #0
 800b218:	d177      	bne.n	800b30a <_strtod_l+0xaa2>
 800b21a:	2e00      	cmp	r6, #0
 800b21c:	d157      	bne.n	800b2ce <_strtod_l+0xa66>
 800b21e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b220:	031b      	lsls	r3, r3, #12
 800b222:	d15a      	bne.n	800b2da <_strtod_l+0xa72>
 800b224:	2200      	movs	r2, #0
 800b226:	0020      	movs	r0, r4
 800b228:	0029      	movs	r1, r5
 800b22a:	4b7a      	ldr	r3, [pc, #488]	@ (800b414 <_strtod_l+0xbac>)
 800b22c:	f7f5 f91c 	bl	8000468 <__aeabi_dcmplt>
 800b230:	2800      	cmp	r0, #0
 800b232:	d159      	bne.n	800b2e8 <_strtod_l+0xa80>
 800b234:	0020      	movs	r0, r4
 800b236:	0029      	movs	r1, r5
 800b238:	2200      	movs	r2, #0
 800b23a:	4b77      	ldr	r3, [pc, #476]	@ (800b418 <_strtod_l+0xbb0>)
 800b23c:	f7f6 fe68 	bl	8001f10 <__aeabi_dmul>
 800b240:	0004      	movs	r4, r0
 800b242:	000d      	movs	r5, r1
 800b244:	2380      	movs	r3, #128	@ 0x80
 800b246:	061b      	lsls	r3, r3, #24
 800b248:	18eb      	adds	r3, r5, r3
 800b24a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b24c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b24e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b252:	9214      	str	r2, [sp, #80]	@ 0x50
 800b254:	9315      	str	r3, [sp, #84]	@ 0x54
 800b256:	4a71      	ldr	r2, [pc, #452]	@ (800b41c <_strtod_l+0xbb4>)
 800b258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b25a:	4013      	ands	r3, r2
 800b25c:	9316      	str	r3, [sp, #88]	@ 0x58
 800b25e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b260:	4b6f      	ldr	r3, [pc, #444]	@ (800b420 <_strtod_l+0xbb8>)
 800b262:	429a      	cmp	r2, r3
 800b264:	d000      	beq.n	800b268 <_strtod_l+0xa00>
 800b266:	e087      	b.n	800b378 <_strtod_l+0xb10>
 800b268:	4a6e      	ldr	r2, [pc, #440]	@ (800b424 <_strtod_l+0xbbc>)
 800b26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b26c:	4694      	mov	ip, r2
 800b26e:	4463      	add	r3, ip
 800b270:	001f      	movs	r7, r3
 800b272:	0030      	movs	r0, r6
 800b274:	0019      	movs	r1, r3
 800b276:	f001 fb73 	bl	800c960 <__ulp>
 800b27a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b27c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b27e:	f7f6 fe47 	bl	8001f10 <__aeabi_dmul>
 800b282:	0032      	movs	r2, r6
 800b284:	003b      	movs	r3, r7
 800b286:	f7f5 fe9b 	bl	8000fc0 <__aeabi_dadd>
 800b28a:	4a64      	ldr	r2, [pc, #400]	@ (800b41c <_strtod_l+0xbb4>)
 800b28c:	4b66      	ldr	r3, [pc, #408]	@ (800b428 <_strtod_l+0xbc0>)
 800b28e:	0006      	movs	r6, r0
 800b290:	400a      	ands	r2, r1
 800b292:	429a      	cmp	r2, r3
 800b294:	d940      	bls.n	800b318 <_strtod_l+0xab0>
 800b296:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b298:	4a64      	ldr	r2, [pc, #400]	@ (800b42c <_strtod_l+0xbc4>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d103      	bne.n	800b2a6 <_strtod_l+0xa3e>
 800b29e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	d100      	bne.n	800b2a6 <_strtod_l+0xa3e>
 800b2a4:	e51a      	b.n	800acdc <_strtod_l+0x474>
 800b2a6:	2601      	movs	r6, #1
 800b2a8:	4f60      	ldr	r7, [pc, #384]	@ (800b42c <_strtod_l+0xbc4>)
 800b2aa:	4276      	negs	r6, r6
 800b2ac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b2ae:	9805      	ldr	r0, [sp, #20]
 800b2b0:	f001 f80a 	bl	800c2c8 <_Bfree>
 800b2b4:	9908      	ldr	r1, [sp, #32]
 800b2b6:	9805      	ldr	r0, [sp, #20]
 800b2b8:	f001 f806 	bl	800c2c8 <_Bfree>
 800b2bc:	9907      	ldr	r1, [sp, #28]
 800b2be:	9805      	ldr	r0, [sp, #20]
 800b2c0:	f001 f802 	bl	800c2c8 <_Bfree>
 800b2c4:	9906      	ldr	r1, [sp, #24]
 800b2c6:	9805      	ldr	r0, [sp, #20]
 800b2c8:	f000 fffe 	bl	800c2c8 <_Bfree>
 800b2cc:	e617      	b.n	800aefe <_strtod_l+0x696>
 800b2ce:	2e01      	cmp	r6, #1
 800b2d0:	d103      	bne.n	800b2da <_strtod_l+0xa72>
 800b2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d100      	bne.n	800b2da <_strtod_l+0xa72>
 800b2d8:	e59c      	b.n	800ae14 <_strtod_l+0x5ac>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4c54      	ldr	r4, [pc, #336]	@ (800b430 <_strtod_l+0xbc8>)
 800b2de:	4d4d      	ldr	r5, [pc, #308]	@ (800b414 <_strtod_l+0xbac>)
 800b2e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b2e4:	2400      	movs	r4, #0
 800b2e6:	e7b2      	b.n	800b24e <_strtod_l+0x9e6>
 800b2e8:	2400      	movs	r4, #0
 800b2ea:	4d4b      	ldr	r5, [pc, #300]	@ (800b418 <_strtod_l+0xbb0>)
 800b2ec:	e7aa      	b.n	800b244 <_strtod_l+0x9dc>
 800b2ee:	0020      	movs	r0, r4
 800b2f0:	0029      	movs	r1, r5
 800b2f2:	4b49      	ldr	r3, [pc, #292]	@ (800b418 <_strtod_l+0xbb0>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f7f6 fe0b 	bl	8001f10 <__aeabi_dmul>
 800b2fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2fc:	0004      	movs	r4, r0
 800b2fe:	000d      	movs	r5, r1
 800b300:	2b00      	cmp	r3, #0
 800b302:	d09f      	beq.n	800b244 <_strtod_l+0x9dc>
 800b304:	940a      	str	r4, [sp, #40]	@ 0x28
 800b306:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b308:	e7a1      	b.n	800b24e <_strtod_l+0x9e6>
 800b30a:	2300      	movs	r3, #0
 800b30c:	4c41      	ldr	r4, [pc, #260]	@ (800b414 <_strtod_l+0xbac>)
 800b30e:	0025      	movs	r5, r4
 800b310:	930a      	str	r3, [sp, #40]	@ 0x28
 800b312:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b314:	001c      	movs	r4, r3
 800b316:	e79a      	b.n	800b24e <_strtod_l+0x9e6>
 800b318:	23d4      	movs	r3, #212	@ 0xd4
 800b31a:	049b      	lsls	r3, r3, #18
 800b31c:	18cf      	adds	r7, r1, r3
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	9710      	str	r7, [sp, #64]	@ 0x40
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1c2      	bne.n	800b2ac <_strtod_l+0xa44>
 800b326:	4b3d      	ldr	r3, [pc, #244]	@ (800b41c <_strtod_l+0xbb4>)
 800b328:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b32a:	403b      	ands	r3, r7
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d1bd      	bne.n	800b2ac <_strtod_l+0xa44>
 800b330:	0020      	movs	r0, r4
 800b332:	0029      	movs	r1, r5
 800b334:	f7f5 f97e 	bl	8000634 <__aeabi_d2lz>
 800b338:	f7f5 f9b6 	bl	80006a8 <__aeabi_l2d>
 800b33c:	0002      	movs	r2, r0
 800b33e:	000b      	movs	r3, r1
 800b340:	0020      	movs	r0, r4
 800b342:	0029      	movs	r1, r5
 800b344:	f7f7 f8ac 	bl	80024a0 <__aeabi_dsub>
 800b348:	033c      	lsls	r4, r7, #12
 800b34a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b34c:	0b24      	lsrs	r4, r4, #12
 800b34e:	4334      	orrs	r4, r6
 800b350:	900e      	str	r0, [sp, #56]	@ 0x38
 800b352:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b354:	4a37      	ldr	r2, [pc, #220]	@ (800b434 <_strtod_l+0xbcc>)
 800b356:	431c      	orrs	r4, r3
 800b358:	d052      	beq.n	800b400 <_strtod_l+0xb98>
 800b35a:	4b37      	ldr	r3, [pc, #220]	@ (800b438 <_strtod_l+0xbd0>)
 800b35c:	f7f5 f884 	bl	8000468 <__aeabi_dcmplt>
 800b360:	2800      	cmp	r0, #0
 800b362:	d000      	beq.n	800b366 <_strtod_l+0xafe>
 800b364:	e4c3      	b.n	800acee <_strtod_l+0x486>
 800b366:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b368:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b36a:	4a34      	ldr	r2, [pc, #208]	@ (800b43c <_strtod_l+0xbd4>)
 800b36c:	4b2a      	ldr	r3, [pc, #168]	@ (800b418 <_strtod_l+0xbb0>)
 800b36e:	f7f5 f88f 	bl	8000490 <__aeabi_dcmpgt>
 800b372:	2800      	cmp	r0, #0
 800b374:	d09a      	beq.n	800b2ac <_strtod_l+0xa44>
 800b376:	e4ba      	b.n	800acee <_strtod_l+0x486>
 800b378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d02a      	beq.n	800b3d4 <_strtod_l+0xb6c>
 800b37e:	23d4      	movs	r3, #212	@ 0xd4
 800b380:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b382:	04db      	lsls	r3, r3, #19
 800b384:	429a      	cmp	r2, r3
 800b386:	d825      	bhi.n	800b3d4 <_strtod_l+0xb6c>
 800b388:	0020      	movs	r0, r4
 800b38a:	0029      	movs	r1, r5
 800b38c:	4a2c      	ldr	r2, [pc, #176]	@ (800b440 <_strtod_l+0xbd8>)
 800b38e:	4b2d      	ldr	r3, [pc, #180]	@ (800b444 <_strtod_l+0xbdc>)
 800b390:	f7f5 f874 	bl	800047c <__aeabi_dcmple>
 800b394:	2800      	cmp	r0, #0
 800b396:	d016      	beq.n	800b3c6 <_strtod_l+0xb5e>
 800b398:	0020      	movs	r0, r4
 800b39a:	0029      	movs	r1, r5
 800b39c:	f7f5 f92c 	bl	80005f8 <__aeabi_d2uiz>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d100      	bne.n	800b3a6 <_strtod_l+0xb3e>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	f7f7 fc81 	bl	8002cac <__aeabi_ui2d>
 800b3aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b3ac:	0004      	movs	r4, r0
 800b3ae:	000d      	movs	r5, r1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d122      	bne.n	800b3fa <_strtod_l+0xb92>
 800b3b4:	2380      	movs	r3, #128	@ 0x80
 800b3b6:	061b      	lsls	r3, r3, #24
 800b3b8:	18cb      	adds	r3, r1, r3
 800b3ba:	9018      	str	r0, [sp, #96]	@ 0x60
 800b3bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b3be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3c2:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b3c6:	22d6      	movs	r2, #214	@ 0xd6
 800b3c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b3ca:	04d2      	lsls	r2, r2, #19
 800b3cc:	189b      	adds	r3, r3, r2
 800b3ce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b3d0:	1a9b      	subs	r3, r3, r2
 800b3d2:	9315      	str	r3, [sp, #84]	@ 0x54
 800b3d4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b3d6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b3d8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b3da:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800b3dc:	f001 fac0 	bl	800c960 <__ulp>
 800b3e0:	0002      	movs	r2, r0
 800b3e2:	000b      	movs	r3, r1
 800b3e4:	0030      	movs	r0, r6
 800b3e6:	0039      	movs	r1, r7
 800b3e8:	f7f6 fd92 	bl	8001f10 <__aeabi_dmul>
 800b3ec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b3ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b3f0:	f7f5 fde6 	bl	8000fc0 <__aeabi_dadd>
 800b3f4:	0006      	movs	r6, r0
 800b3f6:	000f      	movs	r7, r1
 800b3f8:	e791      	b.n	800b31e <_strtod_l+0xab6>
 800b3fa:	9418      	str	r4, [sp, #96]	@ 0x60
 800b3fc:	9519      	str	r5, [sp, #100]	@ 0x64
 800b3fe:	e7de      	b.n	800b3be <_strtod_l+0xb56>
 800b400:	4b11      	ldr	r3, [pc, #68]	@ (800b448 <_strtod_l+0xbe0>)
 800b402:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b404:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b406:	f7f5 f82f 	bl	8000468 <__aeabi_dcmplt>
 800b40a:	e7b2      	b.n	800b372 <_strtod_l+0xb0a>
 800b40c:	fff00000 	.word	0xfff00000
 800b410:	000fffff 	.word	0x000fffff
 800b414:	3ff00000 	.word	0x3ff00000
 800b418:	3fe00000 	.word	0x3fe00000
 800b41c:	7ff00000 	.word	0x7ff00000
 800b420:	7fe00000 	.word	0x7fe00000
 800b424:	fcb00000 	.word	0xfcb00000
 800b428:	7c9fffff 	.word	0x7c9fffff
 800b42c:	7fefffff 	.word	0x7fefffff
 800b430:	bff00000 	.word	0xbff00000
 800b434:	94a03595 	.word	0x94a03595
 800b438:	3fdfffff 	.word	0x3fdfffff
 800b43c:	35afe535 	.word	0x35afe535
 800b440:	ffc00000 	.word	0xffc00000
 800b444:	41dfffff 	.word	0x41dfffff
 800b448:	3fcfffff 	.word	0x3fcfffff

0800b44c <strtod>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4c04      	ldr	r4, [pc, #16]	@ (800b460 <strtod+0x14>)
 800b450:	000a      	movs	r2, r1
 800b452:	0001      	movs	r1, r0
 800b454:	4b03      	ldr	r3, [pc, #12]	@ (800b464 <strtod+0x18>)
 800b456:	6820      	ldr	r0, [r4, #0]
 800b458:	f7ff fa06 	bl	800a868 <_strtod_l>
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	46c0      	nop			@ (mov r8, r8)
 800b460:	20001008 	.word	0x20001008
 800b464:	20000e9c 	.word	0x20000e9c

0800b468 <_strtoll_l.constprop.0>:
 800b468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b46a:	b08d      	sub	sp, #52	@ 0x34
 800b46c:	000c      	movs	r4, r1
 800b46e:	9102      	str	r1, [sp, #8]
 800b470:	001e      	movs	r6, r3
 800b472:	2108      	movs	r1, #8
 800b474:	4f4c      	ldr	r7, [pc, #304]	@ (800b5a8 <_strtoll_l.constprop.0+0x140>)
 800b476:	900a      	str	r0, [sp, #40]	@ 0x28
 800b478:	9203      	str	r2, [sp, #12]
 800b47a:	0023      	movs	r3, r4
 800b47c:	781a      	ldrb	r2, [r3, #0]
 800b47e:	3401      	adds	r4, #1
 800b480:	5cbd      	ldrb	r5, [r7, r2]
 800b482:	0028      	movs	r0, r5
 800b484:	4008      	ands	r0, r1
 800b486:	420d      	tst	r5, r1
 800b488:	d1f7      	bne.n	800b47a <_strtoll_l.constprop.0+0x12>
 800b48a:	0015      	movs	r5, r2
 800b48c:	2a2d      	cmp	r2, #45	@ 0x2d
 800b48e:	d14f      	bne.n	800b530 <_strtoll_l.constprop.0+0xc8>
 800b490:	7825      	ldrb	r5, [r4, #0]
 800b492:	1c9c      	adds	r4, r3, #2
 800b494:	2301      	movs	r3, #1
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	2210      	movs	r2, #16
 800b49a:	0033      	movs	r3, r6
 800b49c:	4393      	bics	r3, r2
 800b49e:	d109      	bne.n	800b4b4 <_strtoll_l.constprop.0+0x4c>
 800b4a0:	2d30      	cmp	r5, #48	@ 0x30
 800b4a2:	d14b      	bne.n	800b53c <_strtoll_l.constprop.0+0xd4>
 800b4a4:	2120      	movs	r1, #32
 800b4a6:	7823      	ldrb	r3, [r4, #0]
 800b4a8:	438b      	bics	r3, r1
 800b4aa:	2b58      	cmp	r3, #88	@ 0x58
 800b4ac:	d146      	bne.n	800b53c <_strtoll_l.constprop.0+0xd4>
 800b4ae:	0016      	movs	r6, r2
 800b4b0:	7865      	ldrb	r5, [r4, #1]
 800b4b2:	3402      	adds	r4, #2
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	493c      	ldr	r1, [pc, #240]	@ (800b5ac <_strtoll_l.constprop.0+0x144>)
 800b4ba:	9a01      	ldr	r2, [sp, #4]
 800b4bc:	4240      	negs	r0, r0
 800b4be:	1812      	adds	r2, r2, r0
 800b4c0:	414b      	adcs	r3, r1
 800b4c2:	9204      	str	r2, [sp, #16]
 800b4c4:	9305      	str	r3, [sp, #20]
 800b4c6:	9804      	ldr	r0, [sp, #16]
 800b4c8:	9905      	ldr	r1, [sp, #20]
 800b4ca:	17f3      	asrs	r3, r6, #31
 800b4cc:	0032      	movs	r2, r6
 800b4ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4d0:	f7f5 f82c 	bl	800052c <__aeabi_uldivmod>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	000f      	movs	r7, r1
 800b4d8:	9008      	str	r0, [sp, #32]
 800b4da:	2100      	movs	r1, #0
 800b4dc:	2000      	movs	r0, #0
 800b4de:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4e0:	002a      	movs	r2, r5
 800b4e2:	3a30      	subs	r2, #48	@ 0x30
 800b4e4:	2a09      	cmp	r2, #9
 800b4e6:	d830      	bhi.n	800b54a <_strtoll_l.constprop.0+0xe2>
 800b4e8:	0015      	movs	r5, r2
 800b4ea:	42ae      	cmp	r6, r5
 800b4ec:	dd3c      	ble.n	800b568 <_strtoll_l.constprop.0+0x100>
 800b4ee:	1c5a      	adds	r2, r3, #1
 800b4f0:	d01b      	beq.n	800b52a <_strtoll_l.constprop.0+0xc2>
 800b4f2:	42b9      	cmp	r1, r7
 800b4f4:	d835      	bhi.n	800b562 <_strtoll_l.constprop.0+0xfa>
 800b4f6:	d102      	bne.n	800b4fe <_strtoll_l.constprop.0+0x96>
 800b4f8:	9b08      	ldr	r3, [sp, #32]
 800b4fa:	4298      	cmp	r0, r3
 800b4fc:	d831      	bhi.n	800b562 <_strtoll_l.constprop.0+0xfa>
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	4283      	cmp	r3, r0
 800b502:	d104      	bne.n	800b50e <_strtoll_l.constprop.0+0xa6>
 800b504:	428f      	cmp	r7, r1
 800b506:	d102      	bne.n	800b50e <_strtoll_l.constprop.0+0xa6>
 800b508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b50a:	42ab      	cmp	r3, r5
 800b50c:	db29      	blt.n	800b562 <_strtoll_l.constprop.0+0xfa>
 800b50e:	0002      	movs	r2, r0
 800b510:	000b      	movs	r3, r1
 800b512:	0030      	movs	r0, r6
 800b514:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b516:	f7f5 f829 	bl	800056c <__aeabi_lmul>
 800b51a:	17eb      	asrs	r3, r5, #31
 800b51c:	9506      	str	r5, [sp, #24]
 800b51e:	9307      	str	r3, [sp, #28]
 800b520:	9a06      	ldr	r2, [sp, #24]
 800b522:	9b07      	ldr	r3, [sp, #28]
 800b524:	1880      	adds	r0, r0, r2
 800b526:	4159      	adcs	r1, r3
 800b528:	2301      	movs	r3, #1
 800b52a:	7825      	ldrb	r5, [r4, #0]
 800b52c:	3401      	adds	r4, #1
 800b52e:	e7d7      	b.n	800b4e0 <_strtoll_l.constprop.0+0x78>
 800b530:	9001      	str	r0, [sp, #4]
 800b532:	2a2b      	cmp	r2, #43	@ 0x2b
 800b534:	d1b0      	bne.n	800b498 <_strtoll_l.constprop.0+0x30>
 800b536:	7825      	ldrb	r5, [r4, #0]
 800b538:	1c9c      	adds	r4, r3, #2
 800b53a:	e7ad      	b.n	800b498 <_strtoll_l.constprop.0+0x30>
 800b53c:	2e00      	cmp	r6, #0
 800b53e:	d1b9      	bne.n	800b4b4 <_strtoll_l.constprop.0+0x4c>
 800b540:	3608      	adds	r6, #8
 800b542:	2d30      	cmp	r5, #48	@ 0x30
 800b544:	d0b6      	beq.n	800b4b4 <_strtoll_l.constprop.0+0x4c>
 800b546:	3602      	adds	r6, #2
 800b548:	e7b4      	b.n	800b4b4 <_strtoll_l.constprop.0+0x4c>
 800b54a:	002a      	movs	r2, r5
 800b54c:	3a41      	subs	r2, #65	@ 0x41
 800b54e:	2a19      	cmp	r2, #25
 800b550:	d801      	bhi.n	800b556 <_strtoll_l.constprop.0+0xee>
 800b552:	3d37      	subs	r5, #55	@ 0x37
 800b554:	e7c9      	b.n	800b4ea <_strtoll_l.constprop.0+0x82>
 800b556:	002a      	movs	r2, r5
 800b558:	3a61      	subs	r2, #97	@ 0x61
 800b55a:	2a19      	cmp	r2, #25
 800b55c:	d804      	bhi.n	800b568 <_strtoll_l.constprop.0+0x100>
 800b55e:	3d57      	subs	r5, #87	@ 0x57
 800b560:	e7c3      	b.n	800b4ea <_strtoll_l.constprop.0+0x82>
 800b562:	2301      	movs	r3, #1
 800b564:	425b      	negs	r3, r3
 800b566:	e7e0      	b.n	800b52a <_strtoll_l.constprop.0+0xc2>
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	d109      	bne.n	800b580 <_strtoll_l.constprop.0+0x118>
 800b56c:	9804      	ldr	r0, [sp, #16]
 800b56e:	9905      	ldr	r1, [sp, #20]
 800b570:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b572:	3323      	adds	r3, #35	@ 0x23
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10e      	bne.n	800b59a <_strtoll_l.constprop.0+0x132>
 800b57c:	b00d      	add	sp, #52	@ 0x34
 800b57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b580:	9a01      	ldr	r2, [sp, #4]
 800b582:	2a00      	cmp	r2, #0
 800b584:	d004      	beq.n	800b590 <_strtoll_l.constprop.0+0x128>
 800b586:	0005      	movs	r5, r0
 800b588:	000e      	movs	r6, r1
 800b58a:	2100      	movs	r1, #0
 800b58c:	4268      	negs	r0, r5
 800b58e:	41b1      	sbcs	r1, r6
 800b590:	9a03      	ldr	r2, [sp, #12]
 800b592:	2a00      	cmp	r2, #0
 800b594:	d0f2      	beq.n	800b57c <_strtoll_l.constprop.0+0x114>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <_strtoll_l.constprop.0+0x136>
 800b59a:	1e63      	subs	r3, r4, #1
 800b59c:	9302      	str	r3, [sp, #8]
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	9a02      	ldr	r2, [sp, #8]
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	e7ea      	b.n	800b57c <_strtoll_l.constprop.0+0x114>
 800b5a6:	46c0      	nop			@ (mov r8, r8)
 800b5a8:	0800e411 	.word	0x0800e411
 800b5ac:	7fffffff 	.word	0x7fffffff

0800b5b0 <strtoll>:
 800b5b0:	b510      	push	{r4, lr}
 800b5b2:	4c04      	ldr	r4, [pc, #16]	@ (800b5c4 <strtoll+0x14>)
 800b5b4:	0013      	movs	r3, r2
 800b5b6:	000a      	movs	r2, r1
 800b5b8:	0001      	movs	r1, r0
 800b5ba:	6820      	ldr	r0, [r4, #0]
 800b5bc:	f7ff ff54 	bl	800b468 <_strtoll_l.constprop.0>
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	46c0      	nop			@ (mov r8, r8)
 800b5c4:	20001008 	.word	0x20001008

0800b5c8 <std>:
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	0004      	movs	r4, r0
 800b5ce:	6003      	str	r3, [r0, #0]
 800b5d0:	6043      	str	r3, [r0, #4]
 800b5d2:	6083      	str	r3, [r0, #8]
 800b5d4:	8181      	strh	r1, [r0, #12]
 800b5d6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5d8:	81c2      	strh	r2, [r0, #14]
 800b5da:	6103      	str	r3, [r0, #16]
 800b5dc:	6143      	str	r3, [r0, #20]
 800b5de:	6183      	str	r3, [r0, #24]
 800b5e0:	0019      	movs	r1, r3
 800b5e2:	2208      	movs	r2, #8
 800b5e4:	305c      	adds	r0, #92	@ 0x5c
 800b5e6:	f000 f91f 	bl	800b828 <memset>
 800b5ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b618 <std+0x50>)
 800b5ec:	6224      	str	r4, [r4, #32]
 800b5ee:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b61c <std+0x54>)
 800b5f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b620 <std+0x58>)
 800b5f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b624 <std+0x5c>)
 800b5fa:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b628 <std+0x60>)
 800b5fe:	429c      	cmp	r4, r3
 800b600:	d005      	beq.n	800b60e <std+0x46>
 800b602:	4b0a      	ldr	r3, [pc, #40]	@ (800b62c <std+0x64>)
 800b604:	429c      	cmp	r4, r3
 800b606:	d002      	beq.n	800b60e <std+0x46>
 800b608:	4b09      	ldr	r3, [pc, #36]	@ (800b630 <std+0x68>)
 800b60a:	429c      	cmp	r4, r3
 800b60c:	d103      	bne.n	800b616 <std+0x4e>
 800b60e:	0020      	movs	r0, r4
 800b610:	3058      	adds	r0, #88	@ 0x58
 800b612:	f000 f99b 	bl	800b94c <__retarget_lock_init_recursive>
 800b616:	bd10      	pop	{r4, pc}
 800b618:	0800b791 	.word	0x0800b791
 800b61c:	0800b7b9 	.word	0x0800b7b9
 800b620:	0800b7f1 	.word	0x0800b7f1
 800b624:	0800b81d 	.word	0x0800b81d
 800b628:	2000210c 	.word	0x2000210c
 800b62c:	20002174 	.word	0x20002174
 800b630:	200021dc 	.word	0x200021dc

0800b634 <stdio_exit_handler>:
 800b634:	b510      	push	{r4, lr}
 800b636:	4a03      	ldr	r2, [pc, #12]	@ (800b644 <stdio_exit_handler+0x10>)
 800b638:	4903      	ldr	r1, [pc, #12]	@ (800b648 <stdio_exit_handler+0x14>)
 800b63a:	4804      	ldr	r0, [pc, #16]	@ (800b64c <stdio_exit_handler+0x18>)
 800b63c:	f000 f86c 	bl	800b718 <_fwalk_sglue>
 800b640:	bd10      	pop	{r4, pc}
 800b642:	46c0      	nop			@ (mov r8, r8)
 800b644:	20000e90 	.word	0x20000e90
 800b648:	0800d53d 	.word	0x0800d53d
 800b64c:	2000100c 	.word	0x2000100c

0800b650 <cleanup_stdio>:
 800b650:	6841      	ldr	r1, [r0, #4]
 800b652:	4b0b      	ldr	r3, [pc, #44]	@ (800b680 <cleanup_stdio+0x30>)
 800b654:	b510      	push	{r4, lr}
 800b656:	0004      	movs	r4, r0
 800b658:	4299      	cmp	r1, r3
 800b65a:	d001      	beq.n	800b660 <cleanup_stdio+0x10>
 800b65c:	f001 ff6e 	bl	800d53c <_fflush_r>
 800b660:	68a1      	ldr	r1, [r4, #8]
 800b662:	4b08      	ldr	r3, [pc, #32]	@ (800b684 <cleanup_stdio+0x34>)
 800b664:	4299      	cmp	r1, r3
 800b666:	d002      	beq.n	800b66e <cleanup_stdio+0x1e>
 800b668:	0020      	movs	r0, r4
 800b66a:	f001 ff67 	bl	800d53c <_fflush_r>
 800b66e:	68e1      	ldr	r1, [r4, #12]
 800b670:	4b05      	ldr	r3, [pc, #20]	@ (800b688 <cleanup_stdio+0x38>)
 800b672:	4299      	cmp	r1, r3
 800b674:	d002      	beq.n	800b67c <cleanup_stdio+0x2c>
 800b676:	0020      	movs	r0, r4
 800b678:	f001 ff60 	bl	800d53c <_fflush_r>
 800b67c:	bd10      	pop	{r4, pc}
 800b67e:	46c0      	nop			@ (mov r8, r8)
 800b680:	2000210c 	.word	0x2000210c
 800b684:	20002174 	.word	0x20002174
 800b688:	200021dc 	.word	0x200021dc

0800b68c <global_stdio_init.part.0>:
 800b68c:	b510      	push	{r4, lr}
 800b68e:	4b09      	ldr	r3, [pc, #36]	@ (800b6b4 <global_stdio_init.part.0+0x28>)
 800b690:	4a09      	ldr	r2, [pc, #36]	@ (800b6b8 <global_stdio_init.part.0+0x2c>)
 800b692:	2104      	movs	r1, #4
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	4809      	ldr	r0, [pc, #36]	@ (800b6bc <global_stdio_init.part.0+0x30>)
 800b698:	2200      	movs	r2, #0
 800b69a:	f7ff ff95 	bl	800b5c8 <std>
 800b69e:	2201      	movs	r2, #1
 800b6a0:	2109      	movs	r1, #9
 800b6a2:	4807      	ldr	r0, [pc, #28]	@ (800b6c0 <global_stdio_init.part.0+0x34>)
 800b6a4:	f7ff ff90 	bl	800b5c8 <std>
 800b6a8:	2202      	movs	r2, #2
 800b6aa:	2112      	movs	r1, #18
 800b6ac:	4805      	ldr	r0, [pc, #20]	@ (800b6c4 <global_stdio_init.part.0+0x38>)
 800b6ae:	f7ff ff8b 	bl	800b5c8 <std>
 800b6b2:	bd10      	pop	{r4, pc}
 800b6b4:	20002244 	.word	0x20002244
 800b6b8:	0800b635 	.word	0x0800b635
 800b6bc:	2000210c 	.word	0x2000210c
 800b6c0:	20002174 	.word	0x20002174
 800b6c4:	200021dc 	.word	0x200021dc

0800b6c8 <__sfp_lock_acquire>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	4802      	ldr	r0, [pc, #8]	@ (800b6d4 <__sfp_lock_acquire+0xc>)
 800b6cc:	f000 f93f 	bl	800b94e <__retarget_lock_acquire_recursive>
 800b6d0:	bd10      	pop	{r4, pc}
 800b6d2:	46c0      	nop			@ (mov r8, r8)
 800b6d4:	2000224d 	.word	0x2000224d

0800b6d8 <__sfp_lock_release>:
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	4802      	ldr	r0, [pc, #8]	@ (800b6e4 <__sfp_lock_release+0xc>)
 800b6dc:	f000 f938 	bl	800b950 <__retarget_lock_release_recursive>
 800b6e0:	bd10      	pop	{r4, pc}
 800b6e2:	46c0      	nop			@ (mov r8, r8)
 800b6e4:	2000224d 	.word	0x2000224d

0800b6e8 <__sinit>:
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	0004      	movs	r4, r0
 800b6ec:	f7ff ffec 	bl	800b6c8 <__sfp_lock_acquire>
 800b6f0:	6a23      	ldr	r3, [r4, #32]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <__sinit+0x14>
 800b6f6:	f7ff ffef 	bl	800b6d8 <__sfp_lock_release>
 800b6fa:	bd10      	pop	{r4, pc}
 800b6fc:	4b04      	ldr	r3, [pc, #16]	@ (800b710 <__sinit+0x28>)
 800b6fe:	6223      	str	r3, [r4, #32]
 800b700:	4b04      	ldr	r3, [pc, #16]	@ (800b714 <__sinit+0x2c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1f6      	bne.n	800b6f6 <__sinit+0xe>
 800b708:	f7ff ffc0 	bl	800b68c <global_stdio_init.part.0>
 800b70c:	e7f3      	b.n	800b6f6 <__sinit+0xe>
 800b70e:	46c0      	nop			@ (mov r8, r8)
 800b710:	0800b651 	.word	0x0800b651
 800b714:	20002244 	.word	0x20002244

0800b718 <_fwalk_sglue>:
 800b718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b71a:	0014      	movs	r4, r2
 800b71c:	2600      	movs	r6, #0
 800b71e:	9000      	str	r0, [sp, #0]
 800b720:	9101      	str	r1, [sp, #4]
 800b722:	68a5      	ldr	r5, [r4, #8]
 800b724:	6867      	ldr	r7, [r4, #4]
 800b726:	3f01      	subs	r7, #1
 800b728:	d504      	bpl.n	800b734 <_fwalk_sglue+0x1c>
 800b72a:	6824      	ldr	r4, [r4, #0]
 800b72c:	2c00      	cmp	r4, #0
 800b72e:	d1f8      	bne.n	800b722 <_fwalk_sglue+0xa>
 800b730:	0030      	movs	r0, r6
 800b732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b734:	89ab      	ldrh	r3, [r5, #12]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d908      	bls.n	800b74c <_fwalk_sglue+0x34>
 800b73a:	220e      	movs	r2, #14
 800b73c:	5eab      	ldrsh	r3, [r5, r2]
 800b73e:	3301      	adds	r3, #1
 800b740:	d004      	beq.n	800b74c <_fwalk_sglue+0x34>
 800b742:	0029      	movs	r1, r5
 800b744:	9800      	ldr	r0, [sp, #0]
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	4798      	blx	r3
 800b74a:	4306      	orrs	r6, r0
 800b74c:	3568      	adds	r5, #104	@ 0x68
 800b74e:	e7ea      	b.n	800b726 <_fwalk_sglue+0xe>

0800b750 <siprintf>:
 800b750:	b40e      	push	{r1, r2, r3}
 800b752:	b500      	push	{lr}
 800b754:	490b      	ldr	r1, [pc, #44]	@ (800b784 <siprintf+0x34>)
 800b756:	b09c      	sub	sp, #112	@ 0x70
 800b758:	ab1d      	add	r3, sp, #116	@ 0x74
 800b75a:	9002      	str	r0, [sp, #8]
 800b75c:	9006      	str	r0, [sp, #24]
 800b75e:	9107      	str	r1, [sp, #28]
 800b760:	9104      	str	r1, [sp, #16]
 800b762:	4809      	ldr	r0, [pc, #36]	@ (800b788 <siprintf+0x38>)
 800b764:	4909      	ldr	r1, [pc, #36]	@ (800b78c <siprintf+0x3c>)
 800b766:	cb04      	ldmia	r3!, {r2}
 800b768:	9105      	str	r1, [sp, #20]
 800b76a:	6800      	ldr	r0, [r0, #0]
 800b76c:	a902      	add	r1, sp, #8
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	f001 fa9e 	bl	800ccb0 <_svfiprintf_r>
 800b774:	2200      	movs	r2, #0
 800b776:	9b02      	ldr	r3, [sp, #8]
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	b01c      	add	sp, #112	@ 0x70
 800b77c:	bc08      	pop	{r3}
 800b77e:	b003      	add	sp, #12
 800b780:	4718      	bx	r3
 800b782:	46c0      	nop			@ (mov r8, r8)
 800b784:	7fffffff 	.word	0x7fffffff
 800b788:	20001008 	.word	0x20001008
 800b78c:	ffff0208 	.word	0xffff0208

0800b790 <__sread>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	000c      	movs	r4, r1
 800b794:	250e      	movs	r5, #14
 800b796:	5f49      	ldrsh	r1, [r1, r5]
 800b798:	f000 f886 	bl	800b8a8 <_read_r>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	db03      	blt.n	800b7a8 <__sread+0x18>
 800b7a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b7a2:	181b      	adds	r3, r3, r0
 800b7a4:	6563      	str	r3, [r4, #84]	@ 0x54
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	4a02      	ldr	r2, [pc, #8]	@ (800b7b4 <__sread+0x24>)
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	e7f9      	b.n	800b7a6 <__sread+0x16>
 800b7b2:	46c0      	nop			@ (mov r8, r8)
 800b7b4:	ffffefff 	.word	0xffffefff

0800b7b8 <__swrite>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	001f      	movs	r7, r3
 800b7bc:	898b      	ldrh	r3, [r1, #12]
 800b7be:	0005      	movs	r5, r0
 800b7c0:	000c      	movs	r4, r1
 800b7c2:	0016      	movs	r6, r2
 800b7c4:	05db      	lsls	r3, r3, #23
 800b7c6:	d505      	bpl.n	800b7d4 <__swrite+0x1c>
 800b7c8:	230e      	movs	r3, #14
 800b7ca:	5ec9      	ldrsh	r1, [r1, r3]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	f000 f856 	bl	800b880 <_lseek_r>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	4a05      	ldr	r2, [pc, #20]	@ (800b7ec <__swrite+0x34>)
 800b7d8:	0028      	movs	r0, r5
 800b7da:	4013      	ands	r3, r2
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	0032      	movs	r2, r6
 800b7e0:	230e      	movs	r3, #14
 800b7e2:	5ee1      	ldrsh	r1, [r4, r3]
 800b7e4:	003b      	movs	r3, r7
 800b7e6:	f000 f873 	bl	800b8d0 <_write_r>
 800b7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ec:	ffffefff 	.word	0xffffefff

0800b7f0 <__sseek>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	000c      	movs	r4, r1
 800b7f4:	250e      	movs	r5, #14
 800b7f6:	5f49      	ldrsh	r1, [r1, r5]
 800b7f8:	f000 f842 	bl	800b880 <_lseek_r>
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	1c42      	adds	r2, r0, #1
 800b800:	d103      	bne.n	800b80a <__sseek+0x1a>
 800b802:	4a05      	ldr	r2, [pc, #20]	@ (800b818 <__sseek+0x28>)
 800b804:	4013      	ands	r3, r2
 800b806:	81a3      	strh	r3, [r4, #12]
 800b808:	bd70      	pop	{r4, r5, r6, pc}
 800b80a:	2280      	movs	r2, #128	@ 0x80
 800b80c:	0152      	lsls	r2, r2, #5
 800b80e:	4313      	orrs	r3, r2
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	6560      	str	r0, [r4, #84]	@ 0x54
 800b814:	e7f8      	b.n	800b808 <__sseek+0x18>
 800b816:	46c0      	nop			@ (mov r8, r8)
 800b818:	ffffefff 	.word	0xffffefff

0800b81c <__sclose>:
 800b81c:	b510      	push	{r4, lr}
 800b81e:	230e      	movs	r3, #14
 800b820:	5ec9      	ldrsh	r1, [r1, r3]
 800b822:	f000 f81b 	bl	800b85c <_close_r>
 800b826:	bd10      	pop	{r4, pc}

0800b828 <memset>:
 800b828:	0003      	movs	r3, r0
 800b82a:	1882      	adds	r2, r0, r2
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d100      	bne.n	800b832 <memset+0xa>
 800b830:	4770      	bx	lr
 800b832:	7019      	strb	r1, [r3, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	e7f9      	b.n	800b82c <memset+0x4>

0800b838 <strncmp>:
 800b838:	b530      	push	{r4, r5, lr}
 800b83a:	0005      	movs	r5, r0
 800b83c:	1e10      	subs	r0, r2, #0
 800b83e:	d00b      	beq.n	800b858 <strncmp+0x20>
 800b840:	2400      	movs	r4, #0
 800b842:	3a01      	subs	r2, #1
 800b844:	5d2b      	ldrb	r3, [r5, r4]
 800b846:	5d08      	ldrb	r0, [r1, r4]
 800b848:	4283      	cmp	r3, r0
 800b84a:	d104      	bne.n	800b856 <strncmp+0x1e>
 800b84c:	42a2      	cmp	r2, r4
 800b84e:	d002      	beq.n	800b856 <strncmp+0x1e>
 800b850:	3401      	adds	r4, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1f6      	bne.n	800b844 <strncmp+0xc>
 800b856:	1a18      	subs	r0, r3, r0
 800b858:	bd30      	pop	{r4, r5, pc}
	...

0800b85c <_close_r>:
 800b85c:	2300      	movs	r3, #0
 800b85e:	b570      	push	{r4, r5, r6, lr}
 800b860:	4d06      	ldr	r5, [pc, #24]	@ (800b87c <_close_r+0x20>)
 800b862:	0004      	movs	r4, r0
 800b864:	0008      	movs	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f9 fba4 	bl	8004fb4 <_close>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d103      	bne.n	800b878 <_close_r+0x1c>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d000      	beq.n	800b878 <_close_r+0x1c>
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	bd70      	pop	{r4, r5, r6, pc}
 800b87a:	46c0      	nop			@ (mov r8, r8)
 800b87c:	20002248 	.word	0x20002248

0800b880 <_lseek_r>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	0004      	movs	r4, r0
 800b884:	0008      	movs	r0, r1
 800b886:	0011      	movs	r1, r2
 800b888:	001a      	movs	r2, r3
 800b88a:	2300      	movs	r3, #0
 800b88c:	4d05      	ldr	r5, [pc, #20]	@ (800b8a4 <_lseek_r+0x24>)
 800b88e:	602b      	str	r3, [r5, #0]
 800b890:	f7f9 fbb1 	bl	8004ff6 <_lseek>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d103      	bne.n	800b8a0 <_lseek_r+0x20>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d000      	beq.n	800b8a0 <_lseek_r+0x20>
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	bd70      	pop	{r4, r5, r6, pc}
 800b8a2:	46c0      	nop			@ (mov r8, r8)
 800b8a4:	20002248 	.word	0x20002248

0800b8a8 <_read_r>:
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	0004      	movs	r4, r0
 800b8ac:	0008      	movs	r0, r1
 800b8ae:	0011      	movs	r1, r2
 800b8b0:	001a      	movs	r2, r3
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4d05      	ldr	r5, [pc, #20]	@ (800b8cc <_read_r+0x24>)
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	f7f9 fb43 	bl	8004f42 <_read>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d103      	bne.n	800b8c8 <_read_r+0x20>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d000      	beq.n	800b8c8 <_read_r+0x20>
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ca:	46c0      	nop			@ (mov r8, r8)
 800b8cc:	20002248 	.word	0x20002248

0800b8d0 <_write_r>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	0004      	movs	r4, r0
 800b8d4:	0008      	movs	r0, r1
 800b8d6:	0011      	movs	r1, r2
 800b8d8:	001a      	movs	r2, r3
 800b8da:	2300      	movs	r3, #0
 800b8dc:	4d05      	ldr	r5, [pc, #20]	@ (800b8f4 <_write_r+0x24>)
 800b8de:	602b      	str	r3, [r5, #0]
 800b8e0:	f7f9 fb4c 	bl	8004f7c <_write>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d103      	bne.n	800b8f0 <_write_r+0x20>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d000      	beq.n	800b8f0 <_write_r+0x20>
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
 800b8f2:	46c0      	nop			@ (mov r8, r8)
 800b8f4:	20002248 	.word	0x20002248

0800b8f8 <__errno>:
 800b8f8:	4b01      	ldr	r3, [pc, #4]	@ (800b900 <__errno+0x8>)
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	4770      	bx	lr
 800b8fe:	46c0      	nop			@ (mov r8, r8)
 800b900:	20001008 	.word	0x20001008

0800b904 <__libc_init_array>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	2600      	movs	r6, #0
 800b908:	4c0c      	ldr	r4, [pc, #48]	@ (800b93c <__libc_init_array+0x38>)
 800b90a:	4d0d      	ldr	r5, [pc, #52]	@ (800b940 <__libc_init_array+0x3c>)
 800b90c:	1b64      	subs	r4, r4, r5
 800b90e:	10a4      	asrs	r4, r4, #2
 800b910:	42a6      	cmp	r6, r4
 800b912:	d109      	bne.n	800b928 <__libc_init_array+0x24>
 800b914:	2600      	movs	r6, #0
 800b916:	f002 f88d 	bl	800da34 <_init>
 800b91a:	4c0a      	ldr	r4, [pc, #40]	@ (800b944 <__libc_init_array+0x40>)
 800b91c:	4d0a      	ldr	r5, [pc, #40]	@ (800b948 <__libc_init_array+0x44>)
 800b91e:	1b64      	subs	r4, r4, r5
 800b920:	10a4      	asrs	r4, r4, #2
 800b922:	42a6      	cmp	r6, r4
 800b924:	d105      	bne.n	800b932 <__libc_init_array+0x2e>
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	00b3      	lsls	r3, r6, #2
 800b92a:	58eb      	ldr	r3, [r5, r3]
 800b92c:	4798      	blx	r3
 800b92e:	3601      	adds	r6, #1
 800b930:	e7ee      	b.n	800b910 <__libc_init_array+0xc>
 800b932:	00b3      	lsls	r3, r6, #2
 800b934:	58eb      	ldr	r3, [r5, r3]
 800b936:	4798      	blx	r3
 800b938:	3601      	adds	r6, #1
 800b93a:	e7f2      	b.n	800b922 <__libc_init_array+0x1e>
 800b93c:	0800e770 	.word	0x0800e770
 800b940:	0800e770 	.word	0x0800e770
 800b944:	0800e774 	.word	0x0800e774
 800b948:	0800e770 	.word	0x0800e770

0800b94c <__retarget_lock_init_recursive>:
 800b94c:	4770      	bx	lr

0800b94e <__retarget_lock_acquire_recursive>:
 800b94e:	4770      	bx	lr

0800b950 <__retarget_lock_release_recursive>:
 800b950:	4770      	bx	lr

0800b952 <memcpy>:
 800b952:	2300      	movs	r3, #0
 800b954:	b510      	push	{r4, lr}
 800b956:	429a      	cmp	r2, r3
 800b958:	d100      	bne.n	800b95c <memcpy+0xa>
 800b95a:	bd10      	pop	{r4, pc}
 800b95c:	5ccc      	ldrb	r4, [r1, r3]
 800b95e:	54c4      	strb	r4, [r0, r3]
 800b960:	3301      	adds	r3, #1
 800b962:	e7f8      	b.n	800b956 <memcpy+0x4>

0800b964 <nan>:
 800b964:	2000      	movs	r0, #0
 800b966:	4901      	ldr	r1, [pc, #4]	@ (800b96c <nan+0x8>)
 800b968:	4770      	bx	lr
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	7ff80000 	.word	0x7ff80000

0800b970 <_free_r>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	0005      	movs	r5, r0
 800b974:	1e0c      	subs	r4, r1, #0
 800b976:	d010      	beq.n	800b99a <_free_r+0x2a>
 800b978:	3c04      	subs	r4, #4
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	da00      	bge.n	800b982 <_free_r+0x12>
 800b980:	18e4      	adds	r4, r4, r3
 800b982:	0028      	movs	r0, r5
 800b984:	f000 fc4c 	bl	800c220 <__malloc_lock>
 800b988:	4a1d      	ldr	r2, [pc, #116]	@ (800ba00 <_free_r+0x90>)
 800b98a:	6813      	ldr	r3, [r2, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d105      	bne.n	800b99c <_free_r+0x2c>
 800b990:	6063      	str	r3, [r4, #4]
 800b992:	6014      	str	r4, [r2, #0]
 800b994:	0028      	movs	r0, r5
 800b996:	f000 fc4b 	bl	800c230 <__malloc_unlock>
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	42a3      	cmp	r3, r4
 800b99e:	d908      	bls.n	800b9b2 <_free_r+0x42>
 800b9a0:	6820      	ldr	r0, [r4, #0]
 800b9a2:	1821      	adds	r1, r4, r0
 800b9a4:	428b      	cmp	r3, r1
 800b9a6:	d1f3      	bne.n	800b990 <_free_r+0x20>
 800b9a8:	6819      	ldr	r1, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	1809      	adds	r1, r1, r0
 800b9ae:	6021      	str	r1, [r4, #0]
 800b9b0:	e7ee      	b.n	800b990 <_free_r+0x20>
 800b9b2:	001a      	movs	r2, r3
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <_free_r+0x4e>
 800b9ba:	42a3      	cmp	r3, r4
 800b9bc:	d9f9      	bls.n	800b9b2 <_free_r+0x42>
 800b9be:	6811      	ldr	r1, [r2, #0]
 800b9c0:	1850      	adds	r0, r2, r1
 800b9c2:	42a0      	cmp	r0, r4
 800b9c4:	d10b      	bne.n	800b9de <_free_r+0x6e>
 800b9c6:	6820      	ldr	r0, [r4, #0]
 800b9c8:	1809      	adds	r1, r1, r0
 800b9ca:	1850      	adds	r0, r2, r1
 800b9cc:	6011      	str	r1, [r2, #0]
 800b9ce:	4283      	cmp	r3, r0
 800b9d0:	d1e0      	bne.n	800b994 <_free_r+0x24>
 800b9d2:	6818      	ldr	r0, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	1841      	adds	r1, r0, r1
 800b9d8:	6011      	str	r1, [r2, #0]
 800b9da:	6053      	str	r3, [r2, #4]
 800b9dc:	e7da      	b.n	800b994 <_free_r+0x24>
 800b9de:	42a0      	cmp	r0, r4
 800b9e0:	d902      	bls.n	800b9e8 <_free_r+0x78>
 800b9e2:	230c      	movs	r3, #12
 800b9e4:	602b      	str	r3, [r5, #0]
 800b9e6:	e7d5      	b.n	800b994 <_free_r+0x24>
 800b9e8:	6820      	ldr	r0, [r4, #0]
 800b9ea:	1821      	adds	r1, r4, r0
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	d103      	bne.n	800b9f8 <_free_r+0x88>
 800b9f0:	6819      	ldr	r1, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	1809      	adds	r1, r1, r0
 800b9f6:	6021      	str	r1, [r4, #0]
 800b9f8:	6063      	str	r3, [r4, #4]
 800b9fa:	6054      	str	r4, [r2, #4]
 800b9fc:	e7ca      	b.n	800b994 <_free_r+0x24>
 800b9fe:	46c0      	nop			@ (mov r8, r8)
 800ba00:	20002254 	.word	0x20002254

0800ba04 <rshift>:
 800ba04:	0002      	movs	r2, r0
 800ba06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba08:	6904      	ldr	r4, [r0, #16]
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	3214      	adds	r2, #20
 800ba0e:	114b      	asrs	r3, r1, #5
 800ba10:	0016      	movs	r6, r2
 800ba12:	9302      	str	r3, [sp, #8]
 800ba14:	429c      	cmp	r4, r3
 800ba16:	dd31      	ble.n	800ba7c <rshift+0x78>
 800ba18:	261f      	movs	r6, #31
 800ba1a:	000f      	movs	r7, r1
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	00a5      	lsls	r5, r4, #2
 800ba20:	18d3      	adds	r3, r2, r3
 800ba22:	4037      	ands	r7, r6
 800ba24:	1955      	adds	r5, r2, r5
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	9701      	str	r7, [sp, #4]
 800ba2a:	4231      	tst	r1, r6
 800ba2c:	d10d      	bne.n	800ba4a <rshift+0x46>
 800ba2e:	0016      	movs	r6, r2
 800ba30:	0019      	movs	r1, r3
 800ba32:	428d      	cmp	r5, r1
 800ba34:	d836      	bhi.n	800baa4 <rshift+0xa0>
 800ba36:	9b00      	ldr	r3, [sp, #0]
 800ba38:	2600      	movs	r6, #0
 800ba3a:	3b03      	subs	r3, #3
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d302      	bcc.n	800ba46 <rshift+0x42>
 800ba40:	9b02      	ldr	r3, [sp, #8]
 800ba42:	1ae4      	subs	r4, r4, r3
 800ba44:	00a6      	lsls	r6, r4, #2
 800ba46:	1996      	adds	r6, r2, r6
 800ba48:	e018      	b.n	800ba7c <rshift+0x78>
 800ba4a:	2120      	movs	r1, #32
 800ba4c:	9e01      	ldr	r6, [sp, #4]
 800ba4e:	9f01      	ldr	r7, [sp, #4]
 800ba50:	1b89      	subs	r1, r1, r6
 800ba52:	9e00      	ldr	r6, [sp, #0]
 800ba54:	9103      	str	r1, [sp, #12]
 800ba56:	ce02      	ldmia	r6!, {r1}
 800ba58:	4694      	mov	ip, r2
 800ba5a:	40f9      	lsrs	r1, r7
 800ba5c:	42b5      	cmp	r5, r6
 800ba5e:	d816      	bhi.n	800ba8e <rshift+0x8a>
 800ba60:	9b00      	ldr	r3, [sp, #0]
 800ba62:	2600      	movs	r6, #0
 800ba64:	3301      	adds	r3, #1
 800ba66:	429d      	cmp	r5, r3
 800ba68:	d303      	bcc.n	800ba72 <rshift+0x6e>
 800ba6a:	9b02      	ldr	r3, [sp, #8]
 800ba6c:	1ae4      	subs	r4, r4, r3
 800ba6e:	00a6      	lsls	r6, r4, #2
 800ba70:	3e04      	subs	r6, #4
 800ba72:	1996      	adds	r6, r2, r6
 800ba74:	6031      	str	r1, [r6, #0]
 800ba76:	2900      	cmp	r1, #0
 800ba78:	d000      	beq.n	800ba7c <rshift+0x78>
 800ba7a:	3604      	adds	r6, #4
 800ba7c:	1ab1      	subs	r1, r6, r2
 800ba7e:	1089      	asrs	r1, r1, #2
 800ba80:	6101      	str	r1, [r0, #16]
 800ba82:	4296      	cmp	r6, r2
 800ba84:	d101      	bne.n	800ba8a <rshift+0x86>
 800ba86:	2300      	movs	r3, #0
 800ba88:	6143      	str	r3, [r0, #20]
 800ba8a:	b005      	add	sp, #20
 800ba8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba8e:	6837      	ldr	r7, [r6, #0]
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	409f      	lsls	r7, r3
 800ba94:	430f      	orrs	r7, r1
 800ba96:	4661      	mov	r1, ip
 800ba98:	c180      	stmia	r1!, {r7}
 800ba9a:	468c      	mov	ip, r1
 800ba9c:	9b01      	ldr	r3, [sp, #4]
 800ba9e:	ce02      	ldmia	r6!, {r1}
 800baa0:	40d9      	lsrs	r1, r3
 800baa2:	e7db      	b.n	800ba5c <rshift+0x58>
 800baa4:	c980      	ldmia	r1!, {r7}
 800baa6:	c680      	stmia	r6!, {r7}
 800baa8:	e7c3      	b.n	800ba32 <rshift+0x2e>

0800baaa <__hexdig_fun>:
 800baaa:	0002      	movs	r2, r0
 800baac:	3a30      	subs	r2, #48	@ 0x30
 800baae:	0003      	movs	r3, r0
 800bab0:	2a09      	cmp	r2, #9
 800bab2:	d802      	bhi.n	800baba <__hexdig_fun+0x10>
 800bab4:	3b20      	subs	r3, #32
 800bab6:	b2d8      	uxtb	r0, r3
 800bab8:	4770      	bx	lr
 800baba:	0002      	movs	r2, r0
 800babc:	3a61      	subs	r2, #97	@ 0x61
 800babe:	2a05      	cmp	r2, #5
 800bac0:	d801      	bhi.n	800bac6 <__hexdig_fun+0x1c>
 800bac2:	3b47      	subs	r3, #71	@ 0x47
 800bac4:	e7f7      	b.n	800bab6 <__hexdig_fun+0xc>
 800bac6:	001a      	movs	r2, r3
 800bac8:	3a41      	subs	r2, #65	@ 0x41
 800baca:	2000      	movs	r0, #0
 800bacc:	2a05      	cmp	r2, #5
 800bace:	d8f3      	bhi.n	800bab8 <__hexdig_fun+0xe>
 800bad0:	3b27      	subs	r3, #39	@ 0x27
 800bad2:	e7f0      	b.n	800bab6 <__hexdig_fun+0xc>

0800bad4 <__gethex>:
 800bad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bad6:	b089      	sub	sp, #36	@ 0x24
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	680b      	ldr	r3, [r1, #0]
 800badc:	9201      	str	r2, [sp, #4]
 800bade:	9003      	str	r0, [sp, #12]
 800bae0:	9106      	str	r1, [sp, #24]
 800bae2:	1c9a      	adds	r2, r3, #2
 800bae4:	0011      	movs	r1, r2
 800bae6:	3201      	adds	r2, #1
 800bae8:	1e50      	subs	r0, r2, #1
 800baea:	7800      	ldrb	r0, [r0, #0]
 800baec:	2830      	cmp	r0, #48	@ 0x30
 800baee:	d0f9      	beq.n	800bae4 <__gethex+0x10>
 800baf0:	1acb      	subs	r3, r1, r3
 800baf2:	3b02      	subs	r3, #2
 800baf4:	9305      	str	r3, [sp, #20]
 800baf6:	9100      	str	r1, [sp, #0]
 800baf8:	f7ff ffd7 	bl	800baaa <__hexdig_fun>
 800bafc:	2300      	movs	r3, #0
 800bafe:	001d      	movs	r5, r3
 800bb00:	9302      	str	r3, [sp, #8]
 800bb02:	4298      	cmp	r0, r3
 800bb04:	d11e      	bne.n	800bb44 <__gethex+0x70>
 800bb06:	2201      	movs	r2, #1
 800bb08:	49a6      	ldr	r1, [pc, #664]	@ (800bda4 <__gethex+0x2d0>)
 800bb0a:	9800      	ldr	r0, [sp, #0]
 800bb0c:	f7ff fe94 	bl	800b838 <strncmp>
 800bb10:	0007      	movs	r7, r0
 800bb12:	42a8      	cmp	r0, r5
 800bb14:	d000      	beq.n	800bb18 <__gethex+0x44>
 800bb16:	e06a      	b.n	800bbee <__gethex+0x11a>
 800bb18:	9b00      	ldr	r3, [sp, #0]
 800bb1a:	7858      	ldrb	r0, [r3, #1]
 800bb1c:	1c5c      	adds	r4, r3, #1
 800bb1e:	f7ff ffc4 	bl	800baaa <__hexdig_fun>
 800bb22:	2301      	movs	r3, #1
 800bb24:	9302      	str	r3, [sp, #8]
 800bb26:	42a8      	cmp	r0, r5
 800bb28:	d02f      	beq.n	800bb8a <__gethex+0xb6>
 800bb2a:	9400      	str	r4, [sp, #0]
 800bb2c:	9b00      	ldr	r3, [sp, #0]
 800bb2e:	7818      	ldrb	r0, [r3, #0]
 800bb30:	2830      	cmp	r0, #48	@ 0x30
 800bb32:	d009      	beq.n	800bb48 <__gethex+0x74>
 800bb34:	f7ff ffb9 	bl	800baaa <__hexdig_fun>
 800bb38:	4242      	negs	r2, r0
 800bb3a:	4142      	adcs	r2, r0
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	0025      	movs	r5, r4
 800bb40:	9202      	str	r2, [sp, #8]
 800bb42:	9305      	str	r3, [sp, #20]
 800bb44:	9c00      	ldr	r4, [sp, #0]
 800bb46:	e004      	b.n	800bb52 <__gethex+0x7e>
 800bb48:	9b00      	ldr	r3, [sp, #0]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	e7ed      	b.n	800bb2c <__gethex+0x58>
 800bb50:	3401      	adds	r4, #1
 800bb52:	7820      	ldrb	r0, [r4, #0]
 800bb54:	f7ff ffa9 	bl	800baaa <__hexdig_fun>
 800bb58:	1e07      	subs	r7, r0, #0
 800bb5a:	d1f9      	bne.n	800bb50 <__gethex+0x7c>
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	0020      	movs	r0, r4
 800bb60:	4990      	ldr	r1, [pc, #576]	@ (800bda4 <__gethex+0x2d0>)
 800bb62:	f7ff fe69 	bl	800b838 <strncmp>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d10d      	bne.n	800bb86 <__gethex+0xb2>
 800bb6a:	2d00      	cmp	r5, #0
 800bb6c:	d106      	bne.n	800bb7c <__gethex+0xa8>
 800bb6e:	3401      	adds	r4, #1
 800bb70:	0025      	movs	r5, r4
 800bb72:	7820      	ldrb	r0, [r4, #0]
 800bb74:	f7ff ff99 	bl	800baaa <__hexdig_fun>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d102      	bne.n	800bb82 <__gethex+0xae>
 800bb7c:	1b2d      	subs	r5, r5, r4
 800bb7e:	00af      	lsls	r7, r5, #2
 800bb80:	e003      	b.n	800bb8a <__gethex+0xb6>
 800bb82:	3401      	adds	r4, #1
 800bb84:	e7f5      	b.n	800bb72 <__gethex+0x9e>
 800bb86:	2d00      	cmp	r5, #0
 800bb88:	d1f8      	bne.n	800bb7c <__gethex+0xa8>
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	7823      	ldrb	r3, [r4, #0]
 800bb8e:	0026      	movs	r6, r4
 800bb90:	4393      	bics	r3, r2
 800bb92:	2b50      	cmp	r3, #80	@ 0x50
 800bb94:	d11d      	bne.n	800bbd2 <__gethex+0xfe>
 800bb96:	7863      	ldrb	r3, [r4, #1]
 800bb98:	2b2b      	cmp	r3, #43	@ 0x2b
 800bb9a:	d02d      	beq.n	800bbf8 <__gethex+0x124>
 800bb9c:	2b2d      	cmp	r3, #45	@ 0x2d
 800bb9e:	d02f      	beq.n	800bc00 <__gethex+0x12c>
 800bba0:	2300      	movs	r3, #0
 800bba2:	1c66      	adds	r6, r4, #1
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	7830      	ldrb	r0, [r6, #0]
 800bba8:	f7ff ff7f 	bl	800baaa <__hexdig_fun>
 800bbac:	1e43      	subs	r3, r0, #1
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	0005      	movs	r5, r0
 800bbb2:	2b18      	cmp	r3, #24
 800bbb4:	d82a      	bhi.n	800bc0c <__gethex+0x138>
 800bbb6:	7870      	ldrb	r0, [r6, #1]
 800bbb8:	f7ff ff77 	bl	800baaa <__hexdig_fun>
 800bbbc:	1e43      	subs	r3, r0, #1
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	3601      	adds	r6, #1
 800bbc2:	3d10      	subs	r5, #16
 800bbc4:	2b18      	cmp	r3, #24
 800bbc6:	d91d      	bls.n	800bc04 <__gethex+0x130>
 800bbc8:	9b04      	ldr	r3, [sp, #16]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d000      	beq.n	800bbd0 <__gethex+0xfc>
 800bbce:	426d      	negs	r5, r5
 800bbd0:	197f      	adds	r7, r7, r5
 800bbd2:	9b06      	ldr	r3, [sp, #24]
 800bbd4:	601e      	str	r6, [r3, #0]
 800bbd6:	9b02      	ldr	r3, [sp, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d019      	beq.n	800bc10 <__gethex+0x13c>
 800bbdc:	9b05      	ldr	r3, [sp, #20]
 800bbde:	2606      	movs	r6, #6
 800bbe0:	425a      	negs	r2, r3
 800bbe2:	4153      	adcs	r3, r2
 800bbe4:	425b      	negs	r3, r3
 800bbe6:	401e      	ands	r6, r3
 800bbe8:	0030      	movs	r0, r6
 800bbea:	b009      	add	sp, #36	@ 0x24
 800bbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbee:	2301      	movs	r3, #1
 800bbf0:	2700      	movs	r7, #0
 800bbf2:	9c00      	ldr	r4, [sp, #0]
 800bbf4:	9302      	str	r3, [sp, #8]
 800bbf6:	e7c8      	b.n	800bb8a <__gethex+0xb6>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	1ca6      	adds	r6, r4, #2
 800bbfe:	e7d2      	b.n	800bba6 <__gethex+0xd2>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e7fa      	b.n	800bbfa <__gethex+0x126>
 800bc04:	230a      	movs	r3, #10
 800bc06:	435d      	muls	r5, r3
 800bc08:	182d      	adds	r5, r5, r0
 800bc0a:	e7d4      	b.n	800bbb6 <__gethex+0xe2>
 800bc0c:	0026      	movs	r6, r4
 800bc0e:	e7e0      	b.n	800bbd2 <__gethex+0xfe>
 800bc10:	9b00      	ldr	r3, [sp, #0]
 800bc12:	9902      	ldr	r1, [sp, #8]
 800bc14:	1ae3      	subs	r3, r4, r3
 800bc16:	3b01      	subs	r3, #1
 800bc18:	2b07      	cmp	r3, #7
 800bc1a:	dc0a      	bgt.n	800bc32 <__gethex+0x15e>
 800bc1c:	9803      	ldr	r0, [sp, #12]
 800bc1e:	f000 fb0f 	bl	800c240 <_Balloc>
 800bc22:	1e05      	subs	r5, r0, #0
 800bc24:	d108      	bne.n	800bc38 <__gethex+0x164>
 800bc26:	002a      	movs	r2, r5
 800bc28:	21e4      	movs	r1, #228	@ 0xe4
 800bc2a:	4b5f      	ldr	r3, [pc, #380]	@ (800bda8 <__gethex+0x2d4>)
 800bc2c:	485f      	ldr	r0, [pc, #380]	@ (800bdac <__gethex+0x2d8>)
 800bc2e:	f001 fd83 	bl	800d738 <__assert_func>
 800bc32:	3101      	adds	r1, #1
 800bc34:	105b      	asrs	r3, r3, #1
 800bc36:	e7ef      	b.n	800bc18 <__gethex+0x144>
 800bc38:	0003      	movs	r3, r0
 800bc3a:	3314      	adds	r3, #20
 800bc3c:	9302      	str	r3, [sp, #8]
 800bc3e:	9305      	str	r3, [sp, #20]
 800bc40:	2300      	movs	r3, #0
 800bc42:	001e      	movs	r6, r3
 800bc44:	9304      	str	r3, [sp, #16]
 800bc46:	9b00      	ldr	r3, [sp, #0]
 800bc48:	42a3      	cmp	r3, r4
 800bc4a:	d338      	bcc.n	800bcbe <__gethex+0x1ea>
 800bc4c:	9c05      	ldr	r4, [sp, #20]
 800bc4e:	9b02      	ldr	r3, [sp, #8]
 800bc50:	c440      	stmia	r4!, {r6}
 800bc52:	1ae4      	subs	r4, r4, r3
 800bc54:	10a4      	asrs	r4, r4, #2
 800bc56:	0030      	movs	r0, r6
 800bc58:	612c      	str	r4, [r5, #16]
 800bc5a:	f000 fbe9 	bl	800c430 <__hi0bits>
 800bc5e:	9b01      	ldr	r3, [sp, #4]
 800bc60:	0164      	lsls	r4, r4, #5
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	1a26      	subs	r6, r4, r0
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	429e      	cmp	r6, r3
 800bc6a:	dd52      	ble.n	800bd12 <__gethex+0x23e>
 800bc6c:	1af6      	subs	r6, r6, r3
 800bc6e:	0031      	movs	r1, r6
 800bc70:	0028      	movs	r0, r5
 800bc72:	f000 ff8c 	bl	800cb8e <__any_on>
 800bc76:	1e04      	subs	r4, r0, #0
 800bc78:	d00f      	beq.n	800bc9a <__gethex+0x1c6>
 800bc7a:	2401      	movs	r4, #1
 800bc7c:	231f      	movs	r3, #31
 800bc7e:	0020      	movs	r0, r4
 800bc80:	1e72      	subs	r2, r6, #1
 800bc82:	4013      	ands	r3, r2
 800bc84:	4098      	lsls	r0, r3
 800bc86:	0003      	movs	r3, r0
 800bc88:	1151      	asrs	r1, r2, #5
 800bc8a:	9802      	ldr	r0, [sp, #8]
 800bc8c:	0089      	lsls	r1, r1, #2
 800bc8e:	5809      	ldr	r1, [r1, r0]
 800bc90:	4219      	tst	r1, r3
 800bc92:	d002      	beq.n	800bc9a <__gethex+0x1c6>
 800bc94:	42a2      	cmp	r2, r4
 800bc96:	dc34      	bgt.n	800bd02 <__gethex+0x22e>
 800bc98:	2402      	movs	r4, #2
 800bc9a:	0031      	movs	r1, r6
 800bc9c:	0028      	movs	r0, r5
 800bc9e:	f7ff feb1 	bl	800ba04 <rshift>
 800bca2:	19bf      	adds	r7, r7, r6
 800bca4:	9b01      	ldr	r3, [sp, #4]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	42bb      	cmp	r3, r7
 800bcaa:	da42      	bge.n	800bd32 <__gethex+0x25e>
 800bcac:	0029      	movs	r1, r5
 800bcae:	9803      	ldr	r0, [sp, #12]
 800bcb0:	f000 fb0a 	bl	800c2c8 <_Bfree>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcb8:	26a3      	movs	r6, #163	@ 0xa3
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	e794      	b.n	800bbe8 <__gethex+0x114>
 800bcbe:	3c01      	subs	r4, #1
 800bcc0:	7823      	ldrb	r3, [r4, #0]
 800bcc2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcc4:	d012      	beq.n	800bcec <__gethex+0x218>
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	2b20      	cmp	r3, #32
 800bcca:	d104      	bne.n	800bcd6 <__gethex+0x202>
 800bccc:	9b05      	ldr	r3, [sp, #20]
 800bcce:	c340      	stmia	r3!, {r6}
 800bcd0:	2600      	movs	r6, #0
 800bcd2:	9305      	str	r3, [sp, #20]
 800bcd4:	9604      	str	r6, [sp, #16]
 800bcd6:	7820      	ldrb	r0, [r4, #0]
 800bcd8:	f7ff fee7 	bl	800baaa <__hexdig_fun>
 800bcdc:	230f      	movs	r3, #15
 800bcde:	4018      	ands	r0, r3
 800bce0:	9b04      	ldr	r3, [sp, #16]
 800bce2:	4098      	lsls	r0, r3
 800bce4:	3304      	adds	r3, #4
 800bce6:	4306      	orrs	r6, r0
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	e7ac      	b.n	800bc46 <__gethex+0x172>
 800bcec:	9b00      	ldr	r3, [sp, #0]
 800bcee:	42a3      	cmp	r3, r4
 800bcf0:	d8e9      	bhi.n	800bcc6 <__gethex+0x1f2>
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	0020      	movs	r0, r4
 800bcf6:	492b      	ldr	r1, [pc, #172]	@ (800bda4 <__gethex+0x2d0>)
 800bcf8:	f7ff fd9e 	bl	800b838 <strncmp>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d1e2      	bne.n	800bcc6 <__gethex+0x1f2>
 800bd00:	e7a1      	b.n	800bc46 <__gethex+0x172>
 800bd02:	0028      	movs	r0, r5
 800bd04:	1eb1      	subs	r1, r6, #2
 800bd06:	f000 ff42 	bl	800cb8e <__any_on>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d0c4      	beq.n	800bc98 <__gethex+0x1c4>
 800bd0e:	2403      	movs	r4, #3
 800bd10:	e7c3      	b.n	800bc9a <__gethex+0x1c6>
 800bd12:	9b00      	ldr	r3, [sp, #0]
 800bd14:	2400      	movs	r4, #0
 800bd16:	429e      	cmp	r6, r3
 800bd18:	dac4      	bge.n	800bca4 <__gethex+0x1d0>
 800bd1a:	1b9e      	subs	r6, r3, r6
 800bd1c:	0029      	movs	r1, r5
 800bd1e:	0032      	movs	r2, r6
 800bd20:	9803      	ldr	r0, [sp, #12]
 800bd22:	f000 fcfb 	bl	800c71c <__lshift>
 800bd26:	0003      	movs	r3, r0
 800bd28:	3314      	adds	r3, #20
 800bd2a:	0005      	movs	r5, r0
 800bd2c:	1bbf      	subs	r7, r7, r6
 800bd2e:	9302      	str	r3, [sp, #8]
 800bd30:	e7b8      	b.n	800bca4 <__gethex+0x1d0>
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	685e      	ldr	r6, [r3, #4]
 800bd36:	42be      	cmp	r6, r7
 800bd38:	dd6f      	ble.n	800be1a <__gethex+0x346>
 800bd3a:	9b00      	ldr	r3, [sp, #0]
 800bd3c:	1bf6      	subs	r6, r6, r7
 800bd3e:	42b3      	cmp	r3, r6
 800bd40:	dc36      	bgt.n	800bdb0 <__gethex+0x2dc>
 800bd42:	9b01      	ldr	r3, [sp, #4]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d024      	beq.n	800bd94 <__gethex+0x2c0>
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	d026      	beq.n	800bd9c <__gethex+0x2c8>
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d117      	bne.n	800bd82 <__gethex+0x2ae>
 800bd52:	9b00      	ldr	r3, [sp, #0]
 800bd54:	42b3      	cmp	r3, r6
 800bd56:	d114      	bne.n	800bd82 <__gethex+0x2ae>
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d10b      	bne.n	800bd74 <__gethex+0x2a0>
 800bd5c:	9b01      	ldr	r3, [sp, #4]
 800bd5e:	9a07      	ldr	r2, [sp, #28]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	2662      	movs	r6, #98	@ 0x62
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	2301      	movs	r3, #1
 800bd68:	9a02      	ldr	r2, [sp, #8]
 800bd6a:	612b      	str	r3, [r5, #16]
 800bd6c:	6013      	str	r3, [r2, #0]
 800bd6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd70:	601d      	str	r5, [r3, #0]
 800bd72:	e739      	b.n	800bbe8 <__gethex+0x114>
 800bd74:	9900      	ldr	r1, [sp, #0]
 800bd76:	0028      	movs	r0, r5
 800bd78:	3901      	subs	r1, #1
 800bd7a:	f000 ff08 	bl	800cb8e <__any_on>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d1ec      	bne.n	800bd5c <__gethex+0x288>
 800bd82:	0029      	movs	r1, r5
 800bd84:	9803      	ldr	r0, [sp, #12]
 800bd86:	f000 fa9f 	bl	800c2c8 <_Bfree>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd8e:	2650      	movs	r6, #80	@ 0x50
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	e729      	b.n	800bbe8 <__gethex+0x114>
 800bd94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1f3      	bne.n	800bd82 <__gethex+0x2ae>
 800bd9a:	e7df      	b.n	800bd5c <__gethex+0x288>
 800bd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1dc      	bne.n	800bd5c <__gethex+0x288>
 800bda2:	e7ee      	b.n	800bd82 <__gethex+0x2ae>
 800bda4:	0800e3ac 	.word	0x0800e3ac
 800bda8:	0800e519 	.word	0x0800e519
 800bdac:	0800e52a 	.word	0x0800e52a
 800bdb0:	1e77      	subs	r7, r6, #1
 800bdb2:	2c00      	cmp	r4, #0
 800bdb4:	d12f      	bne.n	800be16 <__gethex+0x342>
 800bdb6:	2f00      	cmp	r7, #0
 800bdb8:	d004      	beq.n	800bdc4 <__gethex+0x2f0>
 800bdba:	0039      	movs	r1, r7
 800bdbc:	0028      	movs	r0, r5
 800bdbe:	f000 fee6 	bl	800cb8e <__any_on>
 800bdc2:	0004      	movs	r4, r0
 800bdc4:	231f      	movs	r3, #31
 800bdc6:	117a      	asrs	r2, r7, #5
 800bdc8:	401f      	ands	r7, r3
 800bdca:	3b1e      	subs	r3, #30
 800bdcc:	40bb      	lsls	r3, r7
 800bdce:	9902      	ldr	r1, [sp, #8]
 800bdd0:	0092      	lsls	r2, r2, #2
 800bdd2:	5852      	ldr	r2, [r2, r1]
 800bdd4:	421a      	tst	r2, r3
 800bdd6:	d001      	beq.n	800bddc <__gethex+0x308>
 800bdd8:	2302      	movs	r3, #2
 800bdda:	431c      	orrs	r4, r3
 800bddc:	9b00      	ldr	r3, [sp, #0]
 800bdde:	0031      	movs	r1, r6
 800bde0:	1b9b      	subs	r3, r3, r6
 800bde2:	2602      	movs	r6, #2
 800bde4:	0028      	movs	r0, r5
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	f7ff fe0c 	bl	800ba04 <rshift>
 800bdec:	9b01      	ldr	r3, [sp, #4]
 800bdee:	685f      	ldr	r7, [r3, #4]
 800bdf0:	2c00      	cmp	r4, #0
 800bdf2:	d03f      	beq.n	800be74 <__gethex+0x3a0>
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d010      	beq.n	800be1e <__gethex+0x34a>
 800bdfc:	2b03      	cmp	r3, #3
 800bdfe:	d012      	beq.n	800be26 <__gethex+0x352>
 800be00:	2b01      	cmp	r3, #1
 800be02:	d106      	bne.n	800be12 <__gethex+0x33e>
 800be04:	07a2      	lsls	r2, r4, #30
 800be06:	d504      	bpl.n	800be12 <__gethex+0x33e>
 800be08:	9a02      	ldr	r2, [sp, #8]
 800be0a:	6812      	ldr	r2, [r2, #0]
 800be0c:	4314      	orrs	r4, r2
 800be0e:	421c      	tst	r4, r3
 800be10:	d10c      	bne.n	800be2c <__gethex+0x358>
 800be12:	2310      	movs	r3, #16
 800be14:	e02d      	b.n	800be72 <__gethex+0x39e>
 800be16:	2401      	movs	r4, #1
 800be18:	e7d4      	b.n	800bdc4 <__gethex+0x2f0>
 800be1a:	2601      	movs	r6, #1
 800be1c:	e7e8      	b.n	800bdf0 <__gethex+0x31c>
 800be1e:	2301      	movs	r3, #1
 800be20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d0f2      	beq.n	800be12 <__gethex+0x33e>
 800be2c:	692b      	ldr	r3, [r5, #16]
 800be2e:	2000      	movs	r0, #0
 800be30:	9302      	str	r3, [sp, #8]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	002b      	movs	r3, r5
 800be38:	9a04      	ldr	r2, [sp, #16]
 800be3a:	3314      	adds	r3, #20
 800be3c:	1899      	adds	r1, r3, r2
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	1c54      	adds	r4, r2, #1
 800be42:	d01c      	beq.n	800be7e <__gethex+0x3aa>
 800be44:	3201      	adds	r2, #1
 800be46:	601a      	str	r2, [r3, #0]
 800be48:	002b      	movs	r3, r5
 800be4a:	3314      	adds	r3, #20
 800be4c:	2e02      	cmp	r6, #2
 800be4e:	d13f      	bne.n	800bed0 <__gethex+0x3fc>
 800be50:	9a01      	ldr	r2, [sp, #4]
 800be52:	9900      	ldr	r1, [sp, #0]
 800be54:	6812      	ldr	r2, [r2, #0]
 800be56:	3a01      	subs	r2, #1
 800be58:	428a      	cmp	r2, r1
 800be5a:	d109      	bne.n	800be70 <__gethex+0x39c>
 800be5c:	000a      	movs	r2, r1
 800be5e:	201f      	movs	r0, #31
 800be60:	4010      	ands	r0, r2
 800be62:	2201      	movs	r2, #1
 800be64:	4082      	lsls	r2, r0
 800be66:	1149      	asrs	r1, r1, #5
 800be68:	0089      	lsls	r1, r1, #2
 800be6a:	58cb      	ldr	r3, [r1, r3]
 800be6c:	4213      	tst	r3, r2
 800be6e:	d13d      	bne.n	800beec <__gethex+0x418>
 800be70:	2320      	movs	r3, #32
 800be72:	431e      	orrs	r6, r3
 800be74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be76:	601d      	str	r5, [r3, #0]
 800be78:	9b07      	ldr	r3, [sp, #28]
 800be7a:	601f      	str	r7, [r3, #0]
 800be7c:	e6b4      	b.n	800bbe8 <__gethex+0x114>
 800be7e:	c301      	stmia	r3!, {r0}
 800be80:	4299      	cmp	r1, r3
 800be82:	d8dc      	bhi.n	800be3e <__gethex+0x36a>
 800be84:	68ab      	ldr	r3, [r5, #8]
 800be86:	9a02      	ldr	r2, [sp, #8]
 800be88:	429a      	cmp	r2, r3
 800be8a:	db18      	blt.n	800bebe <__gethex+0x3ea>
 800be8c:	6869      	ldr	r1, [r5, #4]
 800be8e:	9803      	ldr	r0, [sp, #12]
 800be90:	3101      	adds	r1, #1
 800be92:	f000 f9d5 	bl	800c240 <_Balloc>
 800be96:	1e04      	subs	r4, r0, #0
 800be98:	d104      	bne.n	800bea4 <__gethex+0x3d0>
 800be9a:	0022      	movs	r2, r4
 800be9c:	2184      	movs	r1, #132	@ 0x84
 800be9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bf14 <__gethex+0x440>)
 800bea0:	481d      	ldr	r0, [pc, #116]	@ (800bf18 <__gethex+0x444>)
 800bea2:	e6c4      	b.n	800bc2e <__gethex+0x15a>
 800bea4:	0029      	movs	r1, r5
 800bea6:	692a      	ldr	r2, [r5, #16]
 800bea8:	310c      	adds	r1, #12
 800beaa:	3202      	adds	r2, #2
 800beac:	0092      	lsls	r2, r2, #2
 800beae:	300c      	adds	r0, #12
 800beb0:	f7ff fd4f 	bl	800b952 <memcpy>
 800beb4:	0029      	movs	r1, r5
 800beb6:	9803      	ldr	r0, [sp, #12]
 800beb8:	f000 fa06 	bl	800c2c8 <_Bfree>
 800bebc:	0025      	movs	r5, r4
 800bebe:	692b      	ldr	r3, [r5, #16]
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	612a      	str	r2, [r5, #16]
 800bec4:	2201      	movs	r2, #1
 800bec6:	3304      	adds	r3, #4
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	18eb      	adds	r3, r5, r3
 800becc:	605a      	str	r2, [r3, #4]
 800bece:	e7bb      	b.n	800be48 <__gethex+0x374>
 800bed0:	692a      	ldr	r2, [r5, #16]
 800bed2:	9902      	ldr	r1, [sp, #8]
 800bed4:	428a      	cmp	r2, r1
 800bed6:	dd0b      	ble.n	800bef0 <__gethex+0x41c>
 800bed8:	2101      	movs	r1, #1
 800beda:	0028      	movs	r0, r5
 800bedc:	f7ff fd92 	bl	800ba04 <rshift>
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	3701      	adds	r7, #1
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	42bb      	cmp	r3, r7
 800bee8:	da00      	bge.n	800beec <__gethex+0x418>
 800beea:	e6df      	b.n	800bcac <__gethex+0x1d8>
 800beec:	2601      	movs	r6, #1
 800beee:	e7bf      	b.n	800be70 <__gethex+0x39c>
 800bef0:	221f      	movs	r2, #31
 800bef2:	9c00      	ldr	r4, [sp, #0]
 800bef4:	9900      	ldr	r1, [sp, #0]
 800bef6:	4014      	ands	r4, r2
 800bef8:	4211      	tst	r1, r2
 800befa:	d0f7      	beq.n	800beec <__gethex+0x418>
 800befc:	9a04      	ldr	r2, [sp, #16]
 800befe:	189b      	adds	r3, r3, r2
 800bf00:	3b04      	subs	r3, #4
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	f000 fa94 	bl	800c430 <__hi0bits>
 800bf08:	2320      	movs	r3, #32
 800bf0a:	1b1b      	subs	r3, r3, r4
 800bf0c:	4298      	cmp	r0, r3
 800bf0e:	dbe3      	blt.n	800bed8 <__gethex+0x404>
 800bf10:	e7ec      	b.n	800beec <__gethex+0x418>
 800bf12:	46c0      	nop			@ (mov r8, r8)
 800bf14:	0800e519 	.word	0x0800e519
 800bf18:	0800e52a 	.word	0x0800e52a

0800bf1c <L_shift>:
 800bf1c:	2308      	movs	r3, #8
 800bf1e:	b570      	push	{r4, r5, r6, lr}
 800bf20:	2520      	movs	r5, #32
 800bf22:	1a9a      	subs	r2, r3, r2
 800bf24:	0092      	lsls	r2, r2, #2
 800bf26:	1aad      	subs	r5, r5, r2
 800bf28:	6843      	ldr	r3, [r0, #4]
 800bf2a:	6804      	ldr	r4, [r0, #0]
 800bf2c:	001e      	movs	r6, r3
 800bf2e:	40ae      	lsls	r6, r5
 800bf30:	40d3      	lsrs	r3, r2
 800bf32:	4334      	orrs	r4, r6
 800bf34:	6004      	str	r4, [r0, #0]
 800bf36:	6043      	str	r3, [r0, #4]
 800bf38:	3004      	adds	r0, #4
 800bf3a:	4288      	cmp	r0, r1
 800bf3c:	d3f4      	bcc.n	800bf28 <L_shift+0xc>
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}

0800bf40 <__match>:
 800bf40:	b530      	push	{r4, r5, lr}
 800bf42:	6803      	ldr	r3, [r0, #0]
 800bf44:	780c      	ldrb	r4, [r1, #0]
 800bf46:	3301      	adds	r3, #1
 800bf48:	2c00      	cmp	r4, #0
 800bf4a:	d102      	bne.n	800bf52 <__match+0x12>
 800bf4c:	6003      	str	r3, [r0, #0]
 800bf4e:	2001      	movs	r0, #1
 800bf50:	bd30      	pop	{r4, r5, pc}
 800bf52:	781a      	ldrb	r2, [r3, #0]
 800bf54:	0015      	movs	r5, r2
 800bf56:	3d41      	subs	r5, #65	@ 0x41
 800bf58:	2d19      	cmp	r5, #25
 800bf5a:	d800      	bhi.n	800bf5e <__match+0x1e>
 800bf5c:	3220      	adds	r2, #32
 800bf5e:	3101      	adds	r1, #1
 800bf60:	42a2      	cmp	r2, r4
 800bf62:	d0ef      	beq.n	800bf44 <__match+0x4>
 800bf64:	2000      	movs	r0, #0
 800bf66:	e7f3      	b.n	800bf50 <__match+0x10>

0800bf68 <__hexnan>:
 800bf68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf6a:	680b      	ldr	r3, [r1, #0]
 800bf6c:	b08b      	sub	sp, #44	@ 0x2c
 800bf6e:	9201      	str	r2, [sp, #4]
 800bf70:	9901      	ldr	r1, [sp, #4]
 800bf72:	115a      	asrs	r2, r3, #5
 800bf74:	0092      	lsls	r2, r2, #2
 800bf76:	188a      	adds	r2, r1, r2
 800bf78:	9202      	str	r2, [sp, #8]
 800bf7a:	0019      	movs	r1, r3
 800bf7c:	221f      	movs	r2, #31
 800bf7e:	4011      	ands	r1, r2
 800bf80:	9008      	str	r0, [sp, #32]
 800bf82:	9106      	str	r1, [sp, #24]
 800bf84:	4213      	tst	r3, r2
 800bf86:	d002      	beq.n	800bf8e <__hexnan+0x26>
 800bf88:	9b02      	ldr	r3, [sp, #8]
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	9302      	str	r3, [sp, #8]
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	2500      	movs	r5, #0
 800bf92:	1f1f      	subs	r7, r3, #4
 800bf94:	003e      	movs	r6, r7
 800bf96:	003c      	movs	r4, r7
 800bf98:	9b08      	ldr	r3, [sp, #32]
 800bf9a:	603d      	str	r5, [r7, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	9507      	str	r5, [sp, #28]
 800bfa0:	9305      	str	r3, [sp, #20]
 800bfa2:	9503      	str	r5, [sp, #12]
 800bfa4:	9b05      	ldr	r3, [sp, #20]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfaa:	9b05      	ldr	r3, [sp, #20]
 800bfac:	785b      	ldrb	r3, [r3, #1]
 800bfae:	9304      	str	r3, [sp, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d028      	beq.n	800c006 <__hexnan+0x9e>
 800bfb4:	9804      	ldr	r0, [sp, #16]
 800bfb6:	f7ff fd78 	bl	800baaa <__hexdig_fun>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d155      	bne.n	800c06a <__hexnan+0x102>
 800bfbe:	9b04      	ldr	r3, [sp, #16]
 800bfc0:	2b20      	cmp	r3, #32
 800bfc2:	d819      	bhi.n	800bff8 <__hexnan+0x90>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	9a07      	ldr	r2, [sp, #28]
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	dd12      	ble.n	800bff2 <__hexnan+0x8a>
 800bfcc:	42b4      	cmp	r4, r6
 800bfce:	d206      	bcs.n	800bfde <__hexnan+0x76>
 800bfd0:	2d07      	cmp	r5, #7
 800bfd2:	dc04      	bgt.n	800bfde <__hexnan+0x76>
 800bfd4:	002a      	movs	r2, r5
 800bfd6:	0031      	movs	r1, r6
 800bfd8:	0020      	movs	r0, r4
 800bfda:	f7ff ff9f 	bl	800bf1c <L_shift>
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	2508      	movs	r5, #8
 800bfe2:	429c      	cmp	r4, r3
 800bfe4:	d905      	bls.n	800bff2 <__hexnan+0x8a>
 800bfe6:	1f26      	subs	r6, r4, #4
 800bfe8:	2500      	movs	r5, #0
 800bfea:	0034      	movs	r4, r6
 800bfec:	9b03      	ldr	r3, [sp, #12]
 800bfee:	6035      	str	r5, [r6, #0]
 800bff0:	9307      	str	r3, [sp, #28]
 800bff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	e7d5      	b.n	800bfa4 <__hexnan+0x3c>
 800bff8:	9b04      	ldr	r3, [sp, #16]
 800bffa:	2b29      	cmp	r3, #41	@ 0x29
 800bffc:	d15a      	bne.n	800c0b4 <__hexnan+0x14c>
 800bffe:	9b05      	ldr	r3, [sp, #20]
 800c000:	9a08      	ldr	r2, [sp, #32]
 800c002:	3302      	adds	r3, #2
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d053      	beq.n	800c0b4 <__hexnan+0x14c>
 800c00c:	42b4      	cmp	r4, r6
 800c00e:	d206      	bcs.n	800c01e <__hexnan+0xb6>
 800c010:	2d07      	cmp	r5, #7
 800c012:	dc04      	bgt.n	800c01e <__hexnan+0xb6>
 800c014:	002a      	movs	r2, r5
 800c016:	0031      	movs	r1, r6
 800c018:	0020      	movs	r0, r4
 800c01a:	f7ff ff7f 	bl	800bf1c <L_shift>
 800c01e:	9b01      	ldr	r3, [sp, #4]
 800c020:	429c      	cmp	r4, r3
 800c022:	d936      	bls.n	800c092 <__hexnan+0x12a>
 800c024:	001a      	movs	r2, r3
 800c026:	0023      	movs	r3, r4
 800c028:	cb02      	ldmia	r3!, {r1}
 800c02a:	c202      	stmia	r2!, {r1}
 800c02c:	429f      	cmp	r7, r3
 800c02e:	d2fb      	bcs.n	800c028 <__hexnan+0xc0>
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	1c61      	adds	r1, r4, #1
 800c034:	1eda      	subs	r2, r3, #3
 800c036:	2304      	movs	r3, #4
 800c038:	4291      	cmp	r1, r2
 800c03a:	d805      	bhi.n	800c048 <__hexnan+0xe0>
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	3b04      	subs	r3, #4
 800c040:	1b1b      	subs	r3, r3, r4
 800c042:	089b      	lsrs	r3, r3, #2
 800c044:	3301      	adds	r3, #1
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	9a01      	ldr	r2, [sp, #4]
 800c04a:	18d3      	adds	r3, r2, r3
 800c04c:	2200      	movs	r2, #0
 800c04e:	c304      	stmia	r3!, {r2}
 800c050:	429f      	cmp	r7, r3
 800c052:	d2fc      	bcs.n	800c04e <__hexnan+0xe6>
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d104      	bne.n	800c064 <__hexnan+0xfc>
 800c05a:	9b01      	ldr	r3, [sp, #4]
 800c05c:	429f      	cmp	r7, r3
 800c05e:	d127      	bne.n	800c0b0 <__hexnan+0x148>
 800c060:	2301      	movs	r3, #1
 800c062:	603b      	str	r3, [r7, #0]
 800c064:	2005      	movs	r0, #5
 800c066:	b00b      	add	sp, #44	@ 0x2c
 800c068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c06a:	9b03      	ldr	r3, [sp, #12]
 800c06c:	3501      	adds	r5, #1
 800c06e:	3301      	adds	r3, #1
 800c070:	9303      	str	r3, [sp, #12]
 800c072:	2d08      	cmp	r5, #8
 800c074:	dd06      	ble.n	800c084 <__hexnan+0x11c>
 800c076:	9b01      	ldr	r3, [sp, #4]
 800c078:	429c      	cmp	r4, r3
 800c07a:	d9ba      	bls.n	800bff2 <__hexnan+0x8a>
 800c07c:	2300      	movs	r3, #0
 800c07e:	2501      	movs	r5, #1
 800c080:	3c04      	subs	r4, #4
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	220f      	movs	r2, #15
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	4010      	ands	r0, r2
 800c08a:	011b      	lsls	r3, r3, #4
 800c08c:	4303      	orrs	r3, r0
 800c08e:	6023      	str	r3, [r4, #0]
 800c090:	e7af      	b.n	800bff2 <__hexnan+0x8a>
 800c092:	9b06      	ldr	r3, [sp, #24]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d0dd      	beq.n	800c054 <__hexnan+0xec>
 800c098:	2320      	movs	r3, #32
 800c09a:	9a06      	ldr	r2, [sp, #24]
 800c09c:	9902      	ldr	r1, [sp, #8]
 800c09e:	1a9b      	subs	r3, r3, r2
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	4252      	negs	r2, r2
 800c0a4:	40da      	lsrs	r2, r3
 800c0a6:	3904      	subs	r1, #4
 800c0a8:	680b      	ldr	r3, [r1, #0]
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	600b      	str	r3, [r1, #0]
 800c0ae:	e7d1      	b.n	800c054 <__hexnan+0xec>
 800c0b0:	3f04      	subs	r7, #4
 800c0b2:	e7cf      	b.n	800c054 <__hexnan+0xec>
 800c0b4:	2004      	movs	r0, #4
 800c0b6:	e7d6      	b.n	800c066 <__hexnan+0xfe>

0800c0b8 <sbrk_aligned>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	4e0f      	ldr	r6, [pc, #60]	@ (800c0f8 <sbrk_aligned+0x40>)
 800c0bc:	000d      	movs	r5, r1
 800c0be:	6831      	ldr	r1, [r6, #0]
 800c0c0:	0004      	movs	r4, r0
 800c0c2:	2900      	cmp	r1, #0
 800c0c4:	d102      	bne.n	800c0cc <sbrk_aligned+0x14>
 800c0c6:	f001 fb19 	bl	800d6fc <_sbrk_r>
 800c0ca:	6030      	str	r0, [r6, #0]
 800c0cc:	0029      	movs	r1, r5
 800c0ce:	0020      	movs	r0, r4
 800c0d0:	f001 fb14 	bl	800d6fc <_sbrk_r>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d103      	bne.n	800c0e0 <sbrk_aligned+0x28>
 800c0d8:	2501      	movs	r5, #1
 800c0da:	426d      	negs	r5, r5
 800c0dc:	0028      	movs	r0, r5
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	1cc5      	adds	r5, r0, #3
 800c0e4:	439d      	bics	r5, r3
 800c0e6:	42a8      	cmp	r0, r5
 800c0e8:	d0f8      	beq.n	800c0dc <sbrk_aligned+0x24>
 800c0ea:	1a29      	subs	r1, r5, r0
 800c0ec:	0020      	movs	r0, r4
 800c0ee:	f001 fb05 	bl	800d6fc <_sbrk_r>
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	d1f2      	bne.n	800c0dc <sbrk_aligned+0x24>
 800c0f6:	e7ef      	b.n	800c0d8 <sbrk_aligned+0x20>
 800c0f8:	20002250 	.word	0x20002250

0800c0fc <_malloc_r>:
 800c0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0fe:	2203      	movs	r2, #3
 800c100:	1ccb      	adds	r3, r1, #3
 800c102:	4393      	bics	r3, r2
 800c104:	3308      	adds	r3, #8
 800c106:	0005      	movs	r5, r0
 800c108:	001f      	movs	r7, r3
 800c10a:	2b0c      	cmp	r3, #12
 800c10c:	d234      	bcs.n	800c178 <_malloc_r+0x7c>
 800c10e:	270c      	movs	r7, #12
 800c110:	42b9      	cmp	r1, r7
 800c112:	d833      	bhi.n	800c17c <_malloc_r+0x80>
 800c114:	0028      	movs	r0, r5
 800c116:	f000 f883 	bl	800c220 <__malloc_lock>
 800c11a:	4e37      	ldr	r6, [pc, #220]	@ (800c1f8 <_malloc_r+0xfc>)
 800c11c:	6833      	ldr	r3, [r6, #0]
 800c11e:	001c      	movs	r4, r3
 800c120:	2c00      	cmp	r4, #0
 800c122:	d12f      	bne.n	800c184 <_malloc_r+0x88>
 800c124:	0039      	movs	r1, r7
 800c126:	0028      	movs	r0, r5
 800c128:	f7ff ffc6 	bl	800c0b8 <sbrk_aligned>
 800c12c:	0004      	movs	r4, r0
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	d15f      	bne.n	800c1f2 <_malloc_r+0xf6>
 800c132:	6834      	ldr	r4, [r6, #0]
 800c134:	9400      	str	r4, [sp, #0]
 800c136:	9b00      	ldr	r3, [sp, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d14a      	bne.n	800c1d2 <_malloc_r+0xd6>
 800c13c:	2c00      	cmp	r4, #0
 800c13e:	d052      	beq.n	800c1e6 <_malloc_r+0xea>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	0028      	movs	r0, r5
 800c144:	18e3      	adds	r3, r4, r3
 800c146:	9900      	ldr	r1, [sp, #0]
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	f001 fad7 	bl	800d6fc <_sbrk_r>
 800c14e:	9b01      	ldr	r3, [sp, #4]
 800c150:	4283      	cmp	r3, r0
 800c152:	d148      	bne.n	800c1e6 <_malloc_r+0xea>
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	0028      	movs	r0, r5
 800c158:	1aff      	subs	r7, r7, r3
 800c15a:	0039      	movs	r1, r7
 800c15c:	f7ff ffac 	bl	800c0b8 <sbrk_aligned>
 800c160:	3001      	adds	r0, #1
 800c162:	d040      	beq.n	800c1e6 <_malloc_r+0xea>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	19db      	adds	r3, r3, r7
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	6833      	ldr	r3, [r6, #0]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	2a00      	cmp	r2, #0
 800c170:	d133      	bne.n	800c1da <_malloc_r+0xde>
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	6033      	str	r3, [r6, #0]
 800c176:	e019      	b.n	800c1ac <_malloc_r+0xb0>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	dac9      	bge.n	800c110 <_malloc_r+0x14>
 800c17c:	230c      	movs	r3, #12
 800c17e:	602b      	str	r3, [r5, #0]
 800c180:	2000      	movs	r0, #0
 800c182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c184:	6821      	ldr	r1, [r4, #0]
 800c186:	1bc9      	subs	r1, r1, r7
 800c188:	d420      	bmi.n	800c1cc <_malloc_r+0xd0>
 800c18a:	290b      	cmp	r1, #11
 800c18c:	d90a      	bls.n	800c1a4 <_malloc_r+0xa8>
 800c18e:	19e2      	adds	r2, r4, r7
 800c190:	6027      	str	r7, [r4, #0]
 800c192:	42a3      	cmp	r3, r4
 800c194:	d104      	bne.n	800c1a0 <_malloc_r+0xa4>
 800c196:	6032      	str	r2, [r6, #0]
 800c198:	6863      	ldr	r3, [r4, #4]
 800c19a:	6011      	str	r1, [r2, #0]
 800c19c:	6053      	str	r3, [r2, #4]
 800c19e:	e005      	b.n	800c1ac <_malloc_r+0xb0>
 800c1a0:	605a      	str	r2, [r3, #4]
 800c1a2:	e7f9      	b.n	800c198 <_malloc_r+0x9c>
 800c1a4:	6862      	ldr	r2, [r4, #4]
 800c1a6:	42a3      	cmp	r3, r4
 800c1a8:	d10e      	bne.n	800c1c8 <_malloc_r+0xcc>
 800c1aa:	6032      	str	r2, [r6, #0]
 800c1ac:	0028      	movs	r0, r5
 800c1ae:	f000 f83f 	bl	800c230 <__malloc_unlock>
 800c1b2:	0020      	movs	r0, r4
 800c1b4:	2207      	movs	r2, #7
 800c1b6:	300b      	adds	r0, #11
 800c1b8:	1d23      	adds	r3, r4, #4
 800c1ba:	4390      	bics	r0, r2
 800c1bc:	1ac2      	subs	r2, r0, r3
 800c1be:	4298      	cmp	r0, r3
 800c1c0:	d0df      	beq.n	800c182 <_malloc_r+0x86>
 800c1c2:	1a1b      	subs	r3, r3, r0
 800c1c4:	50a3      	str	r3, [r4, r2]
 800c1c6:	e7dc      	b.n	800c182 <_malloc_r+0x86>
 800c1c8:	605a      	str	r2, [r3, #4]
 800c1ca:	e7ef      	b.n	800c1ac <_malloc_r+0xb0>
 800c1cc:	0023      	movs	r3, r4
 800c1ce:	6864      	ldr	r4, [r4, #4]
 800c1d0:	e7a6      	b.n	800c120 <_malloc_r+0x24>
 800c1d2:	9c00      	ldr	r4, [sp, #0]
 800c1d4:	6863      	ldr	r3, [r4, #4]
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	e7ad      	b.n	800c136 <_malloc_r+0x3a>
 800c1da:	001a      	movs	r2, r3
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	d1fb      	bne.n	800c1da <_malloc_r+0xde>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e7da      	b.n	800c19c <_malloc_r+0xa0>
 800c1e6:	230c      	movs	r3, #12
 800c1e8:	0028      	movs	r0, r5
 800c1ea:	602b      	str	r3, [r5, #0]
 800c1ec:	f000 f820 	bl	800c230 <__malloc_unlock>
 800c1f0:	e7c6      	b.n	800c180 <_malloc_r+0x84>
 800c1f2:	6007      	str	r7, [r0, #0]
 800c1f4:	e7da      	b.n	800c1ac <_malloc_r+0xb0>
 800c1f6:	46c0      	nop			@ (mov r8, r8)
 800c1f8:	20002254 	.word	0x20002254

0800c1fc <__ascii_mbtowc>:
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	2900      	cmp	r1, #0
 800c200:	d100      	bne.n	800c204 <__ascii_mbtowc+0x8>
 800c202:	a901      	add	r1, sp, #4
 800c204:	1e10      	subs	r0, r2, #0
 800c206:	d006      	beq.n	800c216 <__ascii_mbtowc+0x1a>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d006      	beq.n	800c21a <__ascii_mbtowc+0x1e>
 800c20c:	7813      	ldrb	r3, [r2, #0]
 800c20e:	600b      	str	r3, [r1, #0]
 800c210:	7810      	ldrb	r0, [r2, #0]
 800c212:	1e43      	subs	r3, r0, #1
 800c214:	4198      	sbcs	r0, r3
 800c216:	b002      	add	sp, #8
 800c218:	4770      	bx	lr
 800c21a:	2002      	movs	r0, #2
 800c21c:	4240      	negs	r0, r0
 800c21e:	e7fa      	b.n	800c216 <__ascii_mbtowc+0x1a>

0800c220 <__malloc_lock>:
 800c220:	b510      	push	{r4, lr}
 800c222:	4802      	ldr	r0, [pc, #8]	@ (800c22c <__malloc_lock+0xc>)
 800c224:	f7ff fb93 	bl	800b94e <__retarget_lock_acquire_recursive>
 800c228:	bd10      	pop	{r4, pc}
 800c22a:	46c0      	nop			@ (mov r8, r8)
 800c22c:	2000224c 	.word	0x2000224c

0800c230 <__malloc_unlock>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4802      	ldr	r0, [pc, #8]	@ (800c23c <__malloc_unlock+0xc>)
 800c234:	f7ff fb8c 	bl	800b950 <__retarget_lock_release_recursive>
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	46c0      	nop			@ (mov r8, r8)
 800c23c:	2000224c 	.word	0x2000224c

0800c240 <_Balloc>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	69c5      	ldr	r5, [r0, #28]
 800c244:	0006      	movs	r6, r0
 800c246:	000c      	movs	r4, r1
 800c248:	2d00      	cmp	r5, #0
 800c24a:	d10e      	bne.n	800c26a <_Balloc+0x2a>
 800c24c:	2010      	movs	r0, #16
 800c24e:	f001 fabf 	bl	800d7d0 <malloc>
 800c252:	1e02      	subs	r2, r0, #0
 800c254:	61f0      	str	r0, [r6, #28]
 800c256:	d104      	bne.n	800c262 <_Balloc+0x22>
 800c258:	216b      	movs	r1, #107	@ 0x6b
 800c25a:	4b19      	ldr	r3, [pc, #100]	@ (800c2c0 <_Balloc+0x80>)
 800c25c:	4819      	ldr	r0, [pc, #100]	@ (800c2c4 <_Balloc+0x84>)
 800c25e:	f001 fa6b 	bl	800d738 <__assert_func>
 800c262:	6045      	str	r5, [r0, #4]
 800c264:	6085      	str	r5, [r0, #8]
 800c266:	6005      	str	r5, [r0, #0]
 800c268:	60c5      	str	r5, [r0, #12]
 800c26a:	69f5      	ldr	r5, [r6, #28]
 800c26c:	68eb      	ldr	r3, [r5, #12]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d013      	beq.n	800c29a <_Balloc+0x5a>
 800c272:	69f3      	ldr	r3, [r6, #28]
 800c274:	00a2      	lsls	r2, r4, #2
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	189b      	adds	r3, r3, r2
 800c27a:	6818      	ldr	r0, [r3, #0]
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d118      	bne.n	800c2b2 <_Balloc+0x72>
 800c280:	2101      	movs	r1, #1
 800c282:	000d      	movs	r5, r1
 800c284:	40a5      	lsls	r5, r4
 800c286:	1d6a      	adds	r2, r5, #5
 800c288:	0030      	movs	r0, r6
 800c28a:	0092      	lsls	r2, r2, #2
 800c28c:	f001 fa72 	bl	800d774 <_calloc_r>
 800c290:	2800      	cmp	r0, #0
 800c292:	d00c      	beq.n	800c2ae <_Balloc+0x6e>
 800c294:	6044      	str	r4, [r0, #4]
 800c296:	6085      	str	r5, [r0, #8]
 800c298:	e00d      	b.n	800c2b6 <_Balloc+0x76>
 800c29a:	2221      	movs	r2, #33	@ 0x21
 800c29c:	2104      	movs	r1, #4
 800c29e:	0030      	movs	r0, r6
 800c2a0:	f001 fa68 	bl	800d774 <_calloc_r>
 800c2a4:	69f3      	ldr	r3, [r6, #28]
 800c2a6:	60e8      	str	r0, [r5, #12]
 800c2a8:	68db      	ldr	r3, [r3, #12]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1e1      	bne.n	800c272 <_Balloc+0x32>
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	bd70      	pop	{r4, r5, r6, pc}
 800c2b2:	6802      	ldr	r2, [r0, #0]
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	6103      	str	r3, [r0, #16]
 800c2ba:	60c3      	str	r3, [r0, #12]
 800c2bc:	e7f8      	b.n	800c2b0 <_Balloc+0x70>
 800c2be:	46c0      	nop			@ (mov r8, r8)
 800c2c0:	0800e58a 	.word	0x0800e58a
 800c2c4:	0800e5a1 	.word	0x0800e5a1

0800c2c8 <_Bfree>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	69c6      	ldr	r6, [r0, #28]
 800c2cc:	0005      	movs	r5, r0
 800c2ce:	000c      	movs	r4, r1
 800c2d0:	2e00      	cmp	r6, #0
 800c2d2:	d10e      	bne.n	800c2f2 <_Bfree+0x2a>
 800c2d4:	2010      	movs	r0, #16
 800c2d6:	f001 fa7b 	bl	800d7d0 <malloc>
 800c2da:	1e02      	subs	r2, r0, #0
 800c2dc:	61e8      	str	r0, [r5, #28]
 800c2de:	d104      	bne.n	800c2ea <_Bfree+0x22>
 800c2e0:	218f      	movs	r1, #143	@ 0x8f
 800c2e2:	4b09      	ldr	r3, [pc, #36]	@ (800c308 <_Bfree+0x40>)
 800c2e4:	4809      	ldr	r0, [pc, #36]	@ (800c30c <_Bfree+0x44>)
 800c2e6:	f001 fa27 	bl	800d738 <__assert_func>
 800c2ea:	6046      	str	r6, [r0, #4]
 800c2ec:	6086      	str	r6, [r0, #8]
 800c2ee:	6006      	str	r6, [r0, #0]
 800c2f0:	60c6      	str	r6, [r0, #12]
 800c2f2:	2c00      	cmp	r4, #0
 800c2f4:	d007      	beq.n	800c306 <_Bfree+0x3e>
 800c2f6:	69eb      	ldr	r3, [r5, #28]
 800c2f8:	6862      	ldr	r2, [r4, #4]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	0092      	lsls	r2, r2, #2
 800c2fe:	189b      	adds	r3, r3, r2
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	6022      	str	r2, [r4, #0]
 800c304:	601c      	str	r4, [r3, #0]
 800c306:	bd70      	pop	{r4, r5, r6, pc}
 800c308:	0800e58a 	.word	0x0800e58a
 800c30c:	0800e5a1 	.word	0x0800e5a1

0800c310 <__multadd>:
 800c310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c312:	000f      	movs	r7, r1
 800c314:	9001      	str	r0, [sp, #4]
 800c316:	000c      	movs	r4, r1
 800c318:	001e      	movs	r6, r3
 800c31a:	2000      	movs	r0, #0
 800c31c:	690d      	ldr	r5, [r1, #16]
 800c31e:	3714      	adds	r7, #20
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	3001      	adds	r0, #1
 800c324:	b299      	uxth	r1, r3
 800c326:	4351      	muls	r1, r2
 800c328:	0c1b      	lsrs	r3, r3, #16
 800c32a:	4353      	muls	r3, r2
 800c32c:	1989      	adds	r1, r1, r6
 800c32e:	0c0e      	lsrs	r6, r1, #16
 800c330:	199b      	adds	r3, r3, r6
 800c332:	0c1e      	lsrs	r6, r3, #16
 800c334:	b289      	uxth	r1, r1
 800c336:	041b      	lsls	r3, r3, #16
 800c338:	185b      	adds	r3, r3, r1
 800c33a:	c708      	stmia	r7!, {r3}
 800c33c:	4285      	cmp	r5, r0
 800c33e:	dcef      	bgt.n	800c320 <__multadd+0x10>
 800c340:	2e00      	cmp	r6, #0
 800c342:	d022      	beq.n	800c38a <__multadd+0x7a>
 800c344:	68a3      	ldr	r3, [r4, #8]
 800c346:	42ab      	cmp	r3, r5
 800c348:	dc19      	bgt.n	800c37e <__multadd+0x6e>
 800c34a:	6861      	ldr	r1, [r4, #4]
 800c34c:	9801      	ldr	r0, [sp, #4]
 800c34e:	3101      	adds	r1, #1
 800c350:	f7ff ff76 	bl	800c240 <_Balloc>
 800c354:	1e07      	subs	r7, r0, #0
 800c356:	d105      	bne.n	800c364 <__multadd+0x54>
 800c358:	003a      	movs	r2, r7
 800c35a:	21ba      	movs	r1, #186	@ 0xba
 800c35c:	4b0c      	ldr	r3, [pc, #48]	@ (800c390 <__multadd+0x80>)
 800c35e:	480d      	ldr	r0, [pc, #52]	@ (800c394 <__multadd+0x84>)
 800c360:	f001 f9ea 	bl	800d738 <__assert_func>
 800c364:	0021      	movs	r1, r4
 800c366:	6922      	ldr	r2, [r4, #16]
 800c368:	310c      	adds	r1, #12
 800c36a:	3202      	adds	r2, #2
 800c36c:	0092      	lsls	r2, r2, #2
 800c36e:	300c      	adds	r0, #12
 800c370:	f7ff faef 	bl	800b952 <memcpy>
 800c374:	0021      	movs	r1, r4
 800c376:	9801      	ldr	r0, [sp, #4]
 800c378:	f7ff ffa6 	bl	800c2c8 <_Bfree>
 800c37c:	003c      	movs	r4, r7
 800c37e:	1d2b      	adds	r3, r5, #4
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	18e3      	adds	r3, r4, r3
 800c384:	3501      	adds	r5, #1
 800c386:	605e      	str	r6, [r3, #4]
 800c388:	6125      	str	r5, [r4, #16]
 800c38a:	0020      	movs	r0, r4
 800c38c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c38e:	46c0      	nop			@ (mov r8, r8)
 800c390:	0800e519 	.word	0x0800e519
 800c394:	0800e5a1 	.word	0x0800e5a1

0800c398 <__s2b>:
 800c398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c39a:	0007      	movs	r7, r0
 800c39c:	0018      	movs	r0, r3
 800c39e:	000c      	movs	r4, r1
 800c3a0:	3008      	adds	r0, #8
 800c3a2:	2109      	movs	r1, #9
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	0015      	movs	r5, r2
 800c3a8:	f7f3 ff5c 	bl	8000264 <__divsi3>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	4283      	cmp	r3, r0
 800c3b2:	db0a      	blt.n	800c3ca <__s2b+0x32>
 800c3b4:	0038      	movs	r0, r7
 800c3b6:	f7ff ff43 	bl	800c240 <_Balloc>
 800c3ba:	1e01      	subs	r1, r0, #0
 800c3bc:	d108      	bne.n	800c3d0 <__s2b+0x38>
 800c3be:	000a      	movs	r2, r1
 800c3c0:	4b19      	ldr	r3, [pc, #100]	@ (800c428 <__s2b+0x90>)
 800c3c2:	481a      	ldr	r0, [pc, #104]	@ (800c42c <__s2b+0x94>)
 800c3c4:	31d3      	adds	r1, #211	@ 0xd3
 800c3c6:	f001 f9b7 	bl	800d738 <__assert_func>
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	3101      	adds	r1, #1
 800c3ce:	e7ef      	b.n	800c3b0 <__s2b+0x18>
 800c3d0:	9b08      	ldr	r3, [sp, #32]
 800c3d2:	6143      	str	r3, [r0, #20]
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	6103      	str	r3, [r0, #16]
 800c3d8:	2d09      	cmp	r5, #9
 800c3da:	dd18      	ble.n	800c40e <__s2b+0x76>
 800c3dc:	0023      	movs	r3, r4
 800c3de:	3309      	adds	r3, #9
 800c3e0:	001e      	movs	r6, r3
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	1964      	adds	r4, r4, r5
 800c3e6:	7833      	ldrb	r3, [r6, #0]
 800c3e8:	220a      	movs	r2, #10
 800c3ea:	0038      	movs	r0, r7
 800c3ec:	3b30      	subs	r3, #48	@ 0x30
 800c3ee:	f7ff ff8f 	bl	800c310 <__multadd>
 800c3f2:	3601      	adds	r6, #1
 800c3f4:	0001      	movs	r1, r0
 800c3f6:	42a6      	cmp	r6, r4
 800c3f8:	d1f5      	bne.n	800c3e6 <__s2b+0x4e>
 800c3fa:	002c      	movs	r4, r5
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	3c08      	subs	r4, #8
 800c400:	191c      	adds	r4, r3, r4
 800c402:	002e      	movs	r6, r5
 800c404:	9b01      	ldr	r3, [sp, #4]
 800c406:	429e      	cmp	r6, r3
 800c408:	db04      	blt.n	800c414 <__s2b+0x7c>
 800c40a:	0008      	movs	r0, r1
 800c40c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c40e:	2509      	movs	r5, #9
 800c410:	340a      	adds	r4, #10
 800c412:	e7f6      	b.n	800c402 <__s2b+0x6a>
 800c414:	1b63      	subs	r3, r4, r5
 800c416:	5d9b      	ldrb	r3, [r3, r6]
 800c418:	220a      	movs	r2, #10
 800c41a:	0038      	movs	r0, r7
 800c41c:	3b30      	subs	r3, #48	@ 0x30
 800c41e:	f7ff ff77 	bl	800c310 <__multadd>
 800c422:	3601      	adds	r6, #1
 800c424:	0001      	movs	r1, r0
 800c426:	e7ed      	b.n	800c404 <__s2b+0x6c>
 800c428:	0800e519 	.word	0x0800e519
 800c42c:	0800e5a1 	.word	0x0800e5a1

0800c430 <__hi0bits>:
 800c430:	2280      	movs	r2, #128	@ 0x80
 800c432:	0003      	movs	r3, r0
 800c434:	0252      	lsls	r2, r2, #9
 800c436:	2000      	movs	r0, #0
 800c438:	4293      	cmp	r3, r2
 800c43a:	d201      	bcs.n	800c440 <__hi0bits+0x10>
 800c43c:	041b      	lsls	r3, r3, #16
 800c43e:	3010      	adds	r0, #16
 800c440:	2280      	movs	r2, #128	@ 0x80
 800c442:	0452      	lsls	r2, r2, #17
 800c444:	4293      	cmp	r3, r2
 800c446:	d201      	bcs.n	800c44c <__hi0bits+0x1c>
 800c448:	3008      	adds	r0, #8
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	2280      	movs	r2, #128	@ 0x80
 800c44e:	0552      	lsls	r2, r2, #21
 800c450:	4293      	cmp	r3, r2
 800c452:	d201      	bcs.n	800c458 <__hi0bits+0x28>
 800c454:	3004      	adds	r0, #4
 800c456:	011b      	lsls	r3, r3, #4
 800c458:	2280      	movs	r2, #128	@ 0x80
 800c45a:	05d2      	lsls	r2, r2, #23
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d201      	bcs.n	800c464 <__hi0bits+0x34>
 800c460:	3002      	adds	r0, #2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	2b00      	cmp	r3, #0
 800c466:	db03      	blt.n	800c470 <__hi0bits+0x40>
 800c468:	3001      	adds	r0, #1
 800c46a:	4213      	tst	r3, r2
 800c46c:	d100      	bne.n	800c470 <__hi0bits+0x40>
 800c46e:	2020      	movs	r0, #32
 800c470:	4770      	bx	lr

0800c472 <__lo0bits>:
 800c472:	6803      	ldr	r3, [r0, #0]
 800c474:	0001      	movs	r1, r0
 800c476:	2207      	movs	r2, #7
 800c478:	0018      	movs	r0, r3
 800c47a:	4010      	ands	r0, r2
 800c47c:	4213      	tst	r3, r2
 800c47e:	d00d      	beq.n	800c49c <__lo0bits+0x2a>
 800c480:	3a06      	subs	r2, #6
 800c482:	2000      	movs	r0, #0
 800c484:	4213      	tst	r3, r2
 800c486:	d105      	bne.n	800c494 <__lo0bits+0x22>
 800c488:	3002      	adds	r0, #2
 800c48a:	4203      	tst	r3, r0
 800c48c:	d003      	beq.n	800c496 <__lo0bits+0x24>
 800c48e:	40d3      	lsrs	r3, r2
 800c490:	0010      	movs	r0, r2
 800c492:	600b      	str	r3, [r1, #0]
 800c494:	4770      	bx	lr
 800c496:	089b      	lsrs	r3, r3, #2
 800c498:	600b      	str	r3, [r1, #0]
 800c49a:	e7fb      	b.n	800c494 <__lo0bits+0x22>
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	2a00      	cmp	r2, #0
 800c4a0:	d101      	bne.n	800c4a6 <__lo0bits+0x34>
 800c4a2:	2010      	movs	r0, #16
 800c4a4:	0c1b      	lsrs	r3, r3, #16
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	d101      	bne.n	800c4b0 <__lo0bits+0x3e>
 800c4ac:	3008      	adds	r0, #8
 800c4ae:	0a1b      	lsrs	r3, r3, #8
 800c4b0:	071a      	lsls	r2, r3, #28
 800c4b2:	d101      	bne.n	800c4b8 <__lo0bits+0x46>
 800c4b4:	3004      	adds	r0, #4
 800c4b6:	091b      	lsrs	r3, r3, #4
 800c4b8:	079a      	lsls	r2, r3, #30
 800c4ba:	d101      	bne.n	800c4c0 <__lo0bits+0x4e>
 800c4bc:	3002      	adds	r0, #2
 800c4be:	089b      	lsrs	r3, r3, #2
 800c4c0:	07da      	lsls	r2, r3, #31
 800c4c2:	d4e9      	bmi.n	800c498 <__lo0bits+0x26>
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	085b      	lsrs	r3, r3, #1
 800c4c8:	d1e6      	bne.n	800c498 <__lo0bits+0x26>
 800c4ca:	2020      	movs	r0, #32
 800c4cc:	e7e2      	b.n	800c494 <__lo0bits+0x22>
	...

0800c4d0 <__i2b>:
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	000c      	movs	r4, r1
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	f7ff feb3 	bl	800c240 <_Balloc>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d107      	bne.n	800c4ee <__i2b+0x1e>
 800c4de:	2146      	movs	r1, #70	@ 0x46
 800c4e0:	4c05      	ldr	r4, [pc, #20]	@ (800c4f8 <__i2b+0x28>)
 800c4e2:	0002      	movs	r2, r0
 800c4e4:	4b05      	ldr	r3, [pc, #20]	@ (800c4fc <__i2b+0x2c>)
 800c4e6:	0020      	movs	r0, r4
 800c4e8:	31ff      	adds	r1, #255	@ 0xff
 800c4ea:	f001 f925 	bl	800d738 <__assert_func>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	6144      	str	r4, [r0, #20]
 800c4f2:	6103      	str	r3, [r0, #16]
 800c4f4:	bd10      	pop	{r4, pc}
 800c4f6:	46c0      	nop			@ (mov r8, r8)
 800c4f8:	0800e5a1 	.word	0x0800e5a1
 800c4fc:	0800e519 	.word	0x0800e519

0800c500 <__multiply>:
 800c500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c502:	0014      	movs	r4, r2
 800c504:	690a      	ldr	r2, [r1, #16]
 800c506:	6923      	ldr	r3, [r4, #16]
 800c508:	000d      	movs	r5, r1
 800c50a:	b08b      	sub	sp, #44	@ 0x2c
 800c50c:	429a      	cmp	r2, r3
 800c50e:	db02      	blt.n	800c516 <__multiply+0x16>
 800c510:	0023      	movs	r3, r4
 800c512:	000c      	movs	r4, r1
 800c514:	001d      	movs	r5, r3
 800c516:	6927      	ldr	r7, [r4, #16]
 800c518:	692e      	ldr	r6, [r5, #16]
 800c51a:	6861      	ldr	r1, [r4, #4]
 800c51c:	19bb      	adds	r3, r7, r6
 800c51e:	9303      	str	r3, [sp, #12]
 800c520:	68a3      	ldr	r3, [r4, #8]
 800c522:	19ba      	adds	r2, r7, r6
 800c524:	4293      	cmp	r3, r2
 800c526:	da00      	bge.n	800c52a <__multiply+0x2a>
 800c528:	3101      	adds	r1, #1
 800c52a:	f7ff fe89 	bl	800c240 <_Balloc>
 800c52e:	9002      	str	r0, [sp, #8]
 800c530:	2800      	cmp	r0, #0
 800c532:	d106      	bne.n	800c542 <__multiply+0x42>
 800c534:	21b1      	movs	r1, #177	@ 0xb1
 800c536:	4b49      	ldr	r3, [pc, #292]	@ (800c65c <__multiply+0x15c>)
 800c538:	4849      	ldr	r0, [pc, #292]	@ (800c660 <__multiply+0x160>)
 800c53a:	9a02      	ldr	r2, [sp, #8]
 800c53c:	0049      	lsls	r1, r1, #1
 800c53e:	f001 f8fb 	bl	800d738 <__assert_func>
 800c542:	9b02      	ldr	r3, [sp, #8]
 800c544:	2200      	movs	r2, #0
 800c546:	3314      	adds	r3, #20
 800c548:	469c      	mov	ip, r3
 800c54a:	19bb      	adds	r3, r7, r6
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4463      	add	r3, ip
 800c550:	9304      	str	r3, [sp, #16]
 800c552:	4663      	mov	r3, ip
 800c554:	9904      	ldr	r1, [sp, #16]
 800c556:	428b      	cmp	r3, r1
 800c558:	d32a      	bcc.n	800c5b0 <__multiply+0xb0>
 800c55a:	0023      	movs	r3, r4
 800c55c:	00bf      	lsls	r7, r7, #2
 800c55e:	3314      	adds	r3, #20
 800c560:	3514      	adds	r5, #20
 800c562:	9308      	str	r3, [sp, #32]
 800c564:	00b6      	lsls	r6, r6, #2
 800c566:	19db      	adds	r3, r3, r7
 800c568:	9305      	str	r3, [sp, #20]
 800c56a:	19ab      	adds	r3, r5, r6
 800c56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c56e:	2304      	movs	r3, #4
 800c570:	9306      	str	r3, [sp, #24]
 800c572:	0023      	movs	r3, r4
 800c574:	9a05      	ldr	r2, [sp, #20]
 800c576:	3315      	adds	r3, #21
 800c578:	9501      	str	r5, [sp, #4]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d305      	bcc.n	800c58a <__multiply+0x8a>
 800c57e:	1b13      	subs	r3, r2, r4
 800c580:	3b15      	subs	r3, #21
 800c582:	089b      	lsrs	r3, r3, #2
 800c584:	3301      	adds	r3, #1
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	9306      	str	r3, [sp, #24]
 800c58a:	9b01      	ldr	r3, [sp, #4]
 800c58c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c58e:	4293      	cmp	r3, r2
 800c590:	d310      	bcc.n	800c5b4 <__multiply+0xb4>
 800c592:	9b03      	ldr	r3, [sp, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	dd05      	ble.n	800c5a4 <__multiply+0xa4>
 800c598:	9b04      	ldr	r3, [sp, #16]
 800c59a:	3b04      	subs	r3, #4
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d056      	beq.n	800c652 <__multiply+0x152>
 800c5a4:	9b02      	ldr	r3, [sp, #8]
 800c5a6:	9a03      	ldr	r2, [sp, #12]
 800c5a8:	0018      	movs	r0, r3
 800c5aa:	611a      	str	r2, [r3, #16]
 800c5ac:	b00b      	add	sp, #44	@ 0x2c
 800c5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5b0:	c304      	stmia	r3!, {r2}
 800c5b2:	e7cf      	b.n	800c554 <__multiply+0x54>
 800c5b4:	9b01      	ldr	r3, [sp, #4]
 800c5b6:	6818      	ldr	r0, [r3, #0]
 800c5b8:	b280      	uxth	r0, r0
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d01e      	beq.n	800c5fc <__multiply+0xfc>
 800c5be:	4667      	mov	r7, ip
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	9e08      	ldr	r6, [sp, #32]
 800c5c4:	ce02      	ldmia	r6!, {r1}
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	9307      	str	r3, [sp, #28]
 800c5ca:	b28b      	uxth	r3, r1
 800c5cc:	4343      	muls	r3, r0
 800c5ce:	001a      	movs	r2, r3
 800c5d0:	466b      	mov	r3, sp
 800c5d2:	0c09      	lsrs	r1, r1, #16
 800c5d4:	8b9b      	ldrh	r3, [r3, #28]
 800c5d6:	4341      	muls	r1, r0
 800c5d8:	18d3      	adds	r3, r2, r3
 800c5da:	9a07      	ldr	r2, [sp, #28]
 800c5dc:	195b      	adds	r3, r3, r5
 800c5de:	0c12      	lsrs	r2, r2, #16
 800c5e0:	1889      	adds	r1, r1, r2
 800c5e2:	0c1a      	lsrs	r2, r3, #16
 800c5e4:	188a      	adds	r2, r1, r2
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	0c15      	lsrs	r5, r2, #16
 800c5ea:	0412      	lsls	r2, r2, #16
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	9b05      	ldr	r3, [sp, #20]
 800c5f0:	c704      	stmia	r7!, {r2}
 800c5f2:	42b3      	cmp	r3, r6
 800c5f4:	d8e6      	bhi.n	800c5c4 <__multiply+0xc4>
 800c5f6:	4663      	mov	r3, ip
 800c5f8:	9a06      	ldr	r2, [sp, #24]
 800c5fa:	509d      	str	r5, [r3, r2]
 800c5fc:	9b01      	ldr	r3, [sp, #4]
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	0c00      	lsrs	r0, r0, #16
 800c602:	d020      	beq.n	800c646 <__multiply+0x146>
 800c604:	4663      	mov	r3, ip
 800c606:	0025      	movs	r5, r4
 800c608:	4661      	mov	r1, ip
 800c60a:	2700      	movs	r7, #0
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3514      	adds	r5, #20
 800c610:	682a      	ldr	r2, [r5, #0]
 800c612:	680e      	ldr	r6, [r1, #0]
 800c614:	b292      	uxth	r2, r2
 800c616:	4342      	muls	r2, r0
 800c618:	0c36      	lsrs	r6, r6, #16
 800c61a:	1992      	adds	r2, r2, r6
 800c61c:	19d2      	adds	r2, r2, r7
 800c61e:	0416      	lsls	r6, r2, #16
 800c620:	b29b      	uxth	r3, r3
 800c622:	431e      	orrs	r6, r3
 800c624:	600e      	str	r6, [r1, #0]
 800c626:	cd40      	ldmia	r5!, {r6}
 800c628:	684b      	ldr	r3, [r1, #4]
 800c62a:	0c36      	lsrs	r6, r6, #16
 800c62c:	4346      	muls	r6, r0
 800c62e:	b29b      	uxth	r3, r3
 800c630:	0c12      	lsrs	r2, r2, #16
 800c632:	18f3      	adds	r3, r6, r3
 800c634:	189b      	adds	r3, r3, r2
 800c636:	9a05      	ldr	r2, [sp, #20]
 800c638:	0c1f      	lsrs	r7, r3, #16
 800c63a:	3104      	adds	r1, #4
 800c63c:	42aa      	cmp	r2, r5
 800c63e:	d8e7      	bhi.n	800c610 <__multiply+0x110>
 800c640:	4662      	mov	r2, ip
 800c642:	9906      	ldr	r1, [sp, #24]
 800c644:	5053      	str	r3, [r2, r1]
 800c646:	9b01      	ldr	r3, [sp, #4]
 800c648:	3304      	adds	r3, #4
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	2304      	movs	r3, #4
 800c64e:	449c      	add	ip, r3
 800c650:	e79b      	b.n	800c58a <__multiply+0x8a>
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	3b01      	subs	r3, #1
 800c656:	9303      	str	r3, [sp, #12]
 800c658:	e79b      	b.n	800c592 <__multiply+0x92>
 800c65a:	46c0      	nop			@ (mov r8, r8)
 800c65c:	0800e519 	.word	0x0800e519
 800c660:	0800e5a1 	.word	0x0800e5a1

0800c664 <__pow5mult>:
 800c664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c666:	2303      	movs	r3, #3
 800c668:	0015      	movs	r5, r2
 800c66a:	0007      	movs	r7, r0
 800c66c:	000e      	movs	r6, r1
 800c66e:	401a      	ands	r2, r3
 800c670:	421d      	tst	r5, r3
 800c672:	d008      	beq.n	800c686 <__pow5mult+0x22>
 800c674:	4925      	ldr	r1, [pc, #148]	@ (800c70c <__pow5mult+0xa8>)
 800c676:	3a01      	subs	r2, #1
 800c678:	0092      	lsls	r2, r2, #2
 800c67a:	5852      	ldr	r2, [r2, r1]
 800c67c:	2300      	movs	r3, #0
 800c67e:	0031      	movs	r1, r6
 800c680:	f7ff fe46 	bl	800c310 <__multadd>
 800c684:	0006      	movs	r6, r0
 800c686:	10ad      	asrs	r5, r5, #2
 800c688:	d03d      	beq.n	800c706 <__pow5mult+0xa2>
 800c68a:	69fc      	ldr	r4, [r7, #28]
 800c68c:	2c00      	cmp	r4, #0
 800c68e:	d10f      	bne.n	800c6b0 <__pow5mult+0x4c>
 800c690:	2010      	movs	r0, #16
 800c692:	f001 f89d 	bl	800d7d0 <malloc>
 800c696:	1e02      	subs	r2, r0, #0
 800c698:	61f8      	str	r0, [r7, #28]
 800c69a:	d105      	bne.n	800c6a8 <__pow5mult+0x44>
 800c69c:	21b4      	movs	r1, #180	@ 0xb4
 800c69e:	4b1c      	ldr	r3, [pc, #112]	@ (800c710 <__pow5mult+0xac>)
 800c6a0:	481c      	ldr	r0, [pc, #112]	@ (800c714 <__pow5mult+0xb0>)
 800c6a2:	31ff      	adds	r1, #255	@ 0xff
 800c6a4:	f001 f848 	bl	800d738 <__assert_func>
 800c6a8:	6044      	str	r4, [r0, #4]
 800c6aa:	6084      	str	r4, [r0, #8]
 800c6ac:	6004      	str	r4, [r0, #0]
 800c6ae:	60c4      	str	r4, [r0, #12]
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	689c      	ldr	r4, [r3, #8]
 800c6b4:	9301      	str	r3, [sp, #4]
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	d108      	bne.n	800c6cc <__pow5mult+0x68>
 800c6ba:	0038      	movs	r0, r7
 800c6bc:	4916      	ldr	r1, [pc, #88]	@ (800c718 <__pow5mult+0xb4>)
 800c6be:	f7ff ff07 	bl	800c4d0 <__i2b>
 800c6c2:	9b01      	ldr	r3, [sp, #4]
 800c6c4:	0004      	movs	r4, r0
 800c6c6:	6098      	str	r0, [r3, #8]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	6003      	str	r3, [r0, #0]
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	421d      	tst	r5, r3
 800c6d0:	d00a      	beq.n	800c6e8 <__pow5mult+0x84>
 800c6d2:	0031      	movs	r1, r6
 800c6d4:	0022      	movs	r2, r4
 800c6d6:	0038      	movs	r0, r7
 800c6d8:	f7ff ff12 	bl	800c500 <__multiply>
 800c6dc:	0031      	movs	r1, r6
 800c6de:	9001      	str	r0, [sp, #4]
 800c6e0:	0038      	movs	r0, r7
 800c6e2:	f7ff fdf1 	bl	800c2c8 <_Bfree>
 800c6e6:	9e01      	ldr	r6, [sp, #4]
 800c6e8:	106d      	asrs	r5, r5, #1
 800c6ea:	d00c      	beq.n	800c706 <__pow5mult+0xa2>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d107      	bne.n	800c702 <__pow5mult+0x9e>
 800c6f2:	0022      	movs	r2, r4
 800c6f4:	0021      	movs	r1, r4
 800c6f6:	0038      	movs	r0, r7
 800c6f8:	f7ff ff02 	bl	800c500 <__multiply>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	6020      	str	r0, [r4, #0]
 800c700:	6003      	str	r3, [r0, #0]
 800c702:	0004      	movs	r4, r0
 800c704:	e7e2      	b.n	800c6cc <__pow5mult+0x68>
 800c706:	0030      	movs	r0, r6
 800c708:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c70a:	46c0      	nop			@ (mov r8, r8)
 800c70c:	0800e5fc 	.word	0x0800e5fc
 800c710:	0800e58a 	.word	0x0800e58a
 800c714:	0800e5a1 	.word	0x0800e5a1
 800c718:	00000271 	.word	0x00000271

0800c71c <__lshift>:
 800c71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c71e:	000c      	movs	r4, r1
 800c720:	0016      	movs	r6, r2
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	1157      	asrs	r7, r2, #5
 800c726:	b085      	sub	sp, #20
 800c728:	18fb      	adds	r3, r7, r3
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	3301      	adds	r3, #1
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	6849      	ldr	r1, [r1, #4]
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	9002      	str	r0, [sp, #8]
 800c736:	9a00      	ldr	r2, [sp, #0]
 800c738:	4293      	cmp	r3, r2
 800c73a:	db10      	blt.n	800c75e <__lshift+0x42>
 800c73c:	9802      	ldr	r0, [sp, #8]
 800c73e:	f7ff fd7f 	bl	800c240 <_Balloc>
 800c742:	2300      	movs	r3, #0
 800c744:	0001      	movs	r1, r0
 800c746:	0005      	movs	r5, r0
 800c748:	001a      	movs	r2, r3
 800c74a:	3114      	adds	r1, #20
 800c74c:	4298      	cmp	r0, r3
 800c74e:	d10c      	bne.n	800c76a <__lshift+0x4e>
 800c750:	21ef      	movs	r1, #239	@ 0xef
 800c752:	002a      	movs	r2, r5
 800c754:	4b25      	ldr	r3, [pc, #148]	@ (800c7ec <__lshift+0xd0>)
 800c756:	4826      	ldr	r0, [pc, #152]	@ (800c7f0 <__lshift+0xd4>)
 800c758:	0049      	lsls	r1, r1, #1
 800c75a:	f000 ffed 	bl	800d738 <__assert_func>
 800c75e:	3101      	adds	r1, #1
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	e7e8      	b.n	800c736 <__lshift+0x1a>
 800c764:	0098      	lsls	r0, r3, #2
 800c766:	500a      	str	r2, [r1, r0]
 800c768:	3301      	adds	r3, #1
 800c76a:	42bb      	cmp	r3, r7
 800c76c:	dbfa      	blt.n	800c764 <__lshift+0x48>
 800c76e:	43fb      	mvns	r3, r7
 800c770:	17db      	asrs	r3, r3, #31
 800c772:	401f      	ands	r7, r3
 800c774:	00bf      	lsls	r7, r7, #2
 800c776:	0023      	movs	r3, r4
 800c778:	201f      	movs	r0, #31
 800c77a:	19c9      	adds	r1, r1, r7
 800c77c:	0037      	movs	r7, r6
 800c77e:	6922      	ldr	r2, [r4, #16]
 800c780:	3314      	adds	r3, #20
 800c782:	0092      	lsls	r2, r2, #2
 800c784:	189a      	adds	r2, r3, r2
 800c786:	4007      	ands	r7, r0
 800c788:	4206      	tst	r6, r0
 800c78a:	d029      	beq.n	800c7e0 <__lshift+0xc4>
 800c78c:	3001      	adds	r0, #1
 800c78e:	1bc0      	subs	r0, r0, r7
 800c790:	9003      	str	r0, [sp, #12]
 800c792:	468c      	mov	ip, r1
 800c794:	2000      	movs	r0, #0
 800c796:	681e      	ldr	r6, [r3, #0]
 800c798:	40be      	lsls	r6, r7
 800c79a:	4306      	orrs	r6, r0
 800c79c:	4660      	mov	r0, ip
 800c79e:	c040      	stmia	r0!, {r6}
 800c7a0:	4684      	mov	ip, r0
 800c7a2:	9e03      	ldr	r6, [sp, #12]
 800c7a4:	cb01      	ldmia	r3!, {r0}
 800c7a6:	40f0      	lsrs	r0, r6
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d8f4      	bhi.n	800c796 <__lshift+0x7a>
 800c7ac:	0026      	movs	r6, r4
 800c7ae:	3615      	adds	r6, #21
 800c7b0:	2304      	movs	r3, #4
 800c7b2:	42b2      	cmp	r2, r6
 800c7b4:	d304      	bcc.n	800c7c0 <__lshift+0xa4>
 800c7b6:	1b13      	subs	r3, r2, r4
 800c7b8:	3b15      	subs	r3, #21
 800c7ba:	089b      	lsrs	r3, r3, #2
 800c7bc:	3301      	adds	r3, #1
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	50c8      	str	r0, [r1, r3]
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d002      	beq.n	800c7cc <__lshift+0xb0>
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	3302      	adds	r3, #2
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	9b00      	ldr	r3, [sp, #0]
 800c7ce:	9802      	ldr	r0, [sp, #8]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	0021      	movs	r1, r4
 800c7d4:	612b      	str	r3, [r5, #16]
 800c7d6:	f7ff fd77 	bl	800c2c8 <_Bfree>
 800c7da:	0028      	movs	r0, r5
 800c7dc:	b005      	add	sp, #20
 800c7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7e0:	cb01      	ldmia	r3!, {r0}
 800c7e2:	c101      	stmia	r1!, {r0}
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d8fb      	bhi.n	800c7e0 <__lshift+0xc4>
 800c7e8:	e7f0      	b.n	800c7cc <__lshift+0xb0>
 800c7ea:	46c0      	nop			@ (mov r8, r8)
 800c7ec:	0800e519 	.word	0x0800e519
 800c7f0:	0800e5a1 	.word	0x0800e5a1

0800c7f4 <__mcmp>:
 800c7f4:	b530      	push	{r4, r5, lr}
 800c7f6:	690b      	ldr	r3, [r1, #16]
 800c7f8:	6904      	ldr	r4, [r0, #16]
 800c7fa:	0002      	movs	r2, r0
 800c7fc:	1ae0      	subs	r0, r4, r3
 800c7fe:	429c      	cmp	r4, r3
 800c800:	d10f      	bne.n	800c822 <__mcmp+0x2e>
 800c802:	3214      	adds	r2, #20
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	3114      	adds	r1, #20
 800c808:	0014      	movs	r4, r2
 800c80a:	18c9      	adds	r1, r1, r3
 800c80c:	18d2      	adds	r2, r2, r3
 800c80e:	3a04      	subs	r2, #4
 800c810:	3904      	subs	r1, #4
 800c812:	6815      	ldr	r5, [r2, #0]
 800c814:	680b      	ldr	r3, [r1, #0]
 800c816:	429d      	cmp	r5, r3
 800c818:	d004      	beq.n	800c824 <__mcmp+0x30>
 800c81a:	2001      	movs	r0, #1
 800c81c:	429d      	cmp	r5, r3
 800c81e:	d200      	bcs.n	800c822 <__mcmp+0x2e>
 800c820:	3802      	subs	r0, #2
 800c822:	bd30      	pop	{r4, r5, pc}
 800c824:	4294      	cmp	r4, r2
 800c826:	d3f2      	bcc.n	800c80e <__mcmp+0x1a>
 800c828:	e7fb      	b.n	800c822 <__mcmp+0x2e>
	...

0800c82c <__mdiff>:
 800c82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c82e:	000c      	movs	r4, r1
 800c830:	b087      	sub	sp, #28
 800c832:	9000      	str	r0, [sp, #0]
 800c834:	0011      	movs	r1, r2
 800c836:	0020      	movs	r0, r4
 800c838:	0017      	movs	r7, r2
 800c83a:	f7ff ffdb 	bl	800c7f4 <__mcmp>
 800c83e:	1e05      	subs	r5, r0, #0
 800c840:	d110      	bne.n	800c864 <__mdiff+0x38>
 800c842:	0001      	movs	r1, r0
 800c844:	9800      	ldr	r0, [sp, #0]
 800c846:	f7ff fcfb 	bl	800c240 <_Balloc>
 800c84a:	1e02      	subs	r2, r0, #0
 800c84c:	d104      	bne.n	800c858 <__mdiff+0x2c>
 800c84e:	4b40      	ldr	r3, [pc, #256]	@ (800c950 <__mdiff+0x124>)
 800c850:	4840      	ldr	r0, [pc, #256]	@ (800c954 <__mdiff+0x128>)
 800c852:	4941      	ldr	r1, [pc, #260]	@ (800c958 <__mdiff+0x12c>)
 800c854:	f000 ff70 	bl	800d738 <__assert_func>
 800c858:	2301      	movs	r3, #1
 800c85a:	6145      	str	r5, [r0, #20]
 800c85c:	6103      	str	r3, [r0, #16]
 800c85e:	0010      	movs	r0, r2
 800c860:	b007      	add	sp, #28
 800c862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c864:	2600      	movs	r6, #0
 800c866:	42b0      	cmp	r0, r6
 800c868:	da03      	bge.n	800c872 <__mdiff+0x46>
 800c86a:	0023      	movs	r3, r4
 800c86c:	003c      	movs	r4, r7
 800c86e:	001f      	movs	r7, r3
 800c870:	3601      	adds	r6, #1
 800c872:	6861      	ldr	r1, [r4, #4]
 800c874:	9800      	ldr	r0, [sp, #0]
 800c876:	f7ff fce3 	bl	800c240 <_Balloc>
 800c87a:	1e02      	subs	r2, r0, #0
 800c87c:	d103      	bne.n	800c886 <__mdiff+0x5a>
 800c87e:	4b34      	ldr	r3, [pc, #208]	@ (800c950 <__mdiff+0x124>)
 800c880:	4834      	ldr	r0, [pc, #208]	@ (800c954 <__mdiff+0x128>)
 800c882:	4936      	ldr	r1, [pc, #216]	@ (800c95c <__mdiff+0x130>)
 800c884:	e7e6      	b.n	800c854 <__mdiff+0x28>
 800c886:	6923      	ldr	r3, [r4, #16]
 800c888:	3414      	adds	r4, #20
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	18e3      	adds	r3, r4, r3
 800c890:	0021      	movs	r1, r4
 800c892:	9401      	str	r4, [sp, #4]
 800c894:	003c      	movs	r4, r7
 800c896:	9302      	str	r3, [sp, #8]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	3414      	adds	r4, #20
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	18e3      	adds	r3, r4, r3
 800c8a0:	9303      	str	r3, [sp, #12]
 800c8a2:	0003      	movs	r3, r0
 800c8a4:	60c6      	str	r6, [r0, #12]
 800c8a6:	468c      	mov	ip, r1
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	3314      	adds	r3, #20
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	9305      	str	r3, [sp, #20]
 800c8b0:	4663      	mov	r3, ip
 800c8b2:	cb20      	ldmia	r3!, {r5}
 800c8b4:	b2a9      	uxth	r1, r5
 800c8b6:	000e      	movs	r6, r1
 800c8b8:	469c      	mov	ip, r3
 800c8ba:	cc08      	ldmia	r4!, {r3}
 800c8bc:	0c2d      	lsrs	r5, r5, #16
 800c8be:	b299      	uxth	r1, r3
 800c8c0:	1a71      	subs	r1, r6, r1
 800c8c2:	1809      	adds	r1, r1, r0
 800c8c4:	0c1b      	lsrs	r3, r3, #16
 800c8c6:	1408      	asrs	r0, r1, #16
 800c8c8:	1aeb      	subs	r3, r5, r3
 800c8ca:	181b      	adds	r3, r3, r0
 800c8cc:	1418      	asrs	r0, r3, #16
 800c8ce:	b289      	uxth	r1, r1
 800c8d0:	041b      	lsls	r3, r3, #16
 800c8d2:	4319      	orrs	r1, r3
 800c8d4:	9b05      	ldr	r3, [sp, #20]
 800c8d6:	c302      	stmia	r3!, {r1}
 800c8d8:	9305      	str	r3, [sp, #20]
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	d8e7      	bhi.n	800c8b0 <__mdiff+0x84>
 800c8e0:	0039      	movs	r1, r7
 800c8e2:	9c03      	ldr	r4, [sp, #12]
 800c8e4:	3115      	adds	r1, #21
 800c8e6:	2304      	movs	r3, #4
 800c8e8:	428c      	cmp	r4, r1
 800c8ea:	d304      	bcc.n	800c8f6 <__mdiff+0xca>
 800c8ec:	1be3      	subs	r3, r4, r7
 800c8ee:	3b15      	subs	r3, #21
 800c8f0:	089b      	lsrs	r3, r3, #2
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	9901      	ldr	r1, [sp, #4]
 800c8f8:	18cd      	adds	r5, r1, r3
 800c8fa:	9904      	ldr	r1, [sp, #16]
 800c8fc:	002e      	movs	r6, r5
 800c8fe:	18cb      	adds	r3, r1, r3
 800c900:	001f      	movs	r7, r3
 800c902:	9902      	ldr	r1, [sp, #8]
 800c904:	428e      	cmp	r6, r1
 800c906:	d311      	bcc.n	800c92c <__mdiff+0x100>
 800c908:	9c02      	ldr	r4, [sp, #8]
 800c90a:	1ee9      	subs	r1, r5, #3
 800c90c:	2000      	movs	r0, #0
 800c90e:	428c      	cmp	r4, r1
 800c910:	d304      	bcc.n	800c91c <__mdiff+0xf0>
 800c912:	0021      	movs	r1, r4
 800c914:	3103      	adds	r1, #3
 800c916:	1b49      	subs	r1, r1, r5
 800c918:	0889      	lsrs	r1, r1, #2
 800c91a:	0088      	lsls	r0, r1, #2
 800c91c:	181b      	adds	r3, r3, r0
 800c91e:	3b04      	subs	r3, #4
 800c920:	6819      	ldr	r1, [r3, #0]
 800c922:	2900      	cmp	r1, #0
 800c924:	d010      	beq.n	800c948 <__mdiff+0x11c>
 800c926:	9b00      	ldr	r3, [sp, #0]
 800c928:	6113      	str	r3, [r2, #16]
 800c92a:	e798      	b.n	800c85e <__mdiff+0x32>
 800c92c:	4684      	mov	ip, r0
 800c92e:	ce02      	ldmia	r6!, {r1}
 800c930:	b288      	uxth	r0, r1
 800c932:	4460      	add	r0, ip
 800c934:	1400      	asrs	r0, r0, #16
 800c936:	0c0c      	lsrs	r4, r1, #16
 800c938:	1904      	adds	r4, r0, r4
 800c93a:	4461      	add	r1, ip
 800c93c:	1420      	asrs	r0, r4, #16
 800c93e:	b289      	uxth	r1, r1
 800c940:	0424      	lsls	r4, r4, #16
 800c942:	4321      	orrs	r1, r4
 800c944:	c702      	stmia	r7!, {r1}
 800c946:	e7dc      	b.n	800c902 <__mdiff+0xd6>
 800c948:	9900      	ldr	r1, [sp, #0]
 800c94a:	3901      	subs	r1, #1
 800c94c:	9100      	str	r1, [sp, #0]
 800c94e:	e7e6      	b.n	800c91e <__mdiff+0xf2>
 800c950:	0800e519 	.word	0x0800e519
 800c954:	0800e5a1 	.word	0x0800e5a1
 800c958:	00000237 	.word	0x00000237
 800c95c:	00000245 	.word	0x00000245

0800c960 <__ulp>:
 800c960:	b510      	push	{r4, lr}
 800c962:	2400      	movs	r4, #0
 800c964:	4b0c      	ldr	r3, [pc, #48]	@ (800c998 <__ulp+0x38>)
 800c966:	4a0d      	ldr	r2, [pc, #52]	@ (800c99c <__ulp+0x3c>)
 800c968:	400b      	ands	r3, r1
 800c96a:	189b      	adds	r3, r3, r2
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	dc06      	bgt.n	800c97e <__ulp+0x1e>
 800c970:	425b      	negs	r3, r3
 800c972:	151a      	asrs	r2, r3, #20
 800c974:	2a13      	cmp	r2, #19
 800c976:	dc05      	bgt.n	800c984 <__ulp+0x24>
 800c978:	2380      	movs	r3, #128	@ 0x80
 800c97a:	031b      	lsls	r3, r3, #12
 800c97c:	4113      	asrs	r3, r2
 800c97e:	0019      	movs	r1, r3
 800c980:	0020      	movs	r0, r4
 800c982:	bd10      	pop	{r4, pc}
 800c984:	3a14      	subs	r2, #20
 800c986:	2401      	movs	r4, #1
 800c988:	2a1e      	cmp	r2, #30
 800c98a:	dc02      	bgt.n	800c992 <__ulp+0x32>
 800c98c:	2480      	movs	r4, #128	@ 0x80
 800c98e:	0624      	lsls	r4, r4, #24
 800c990:	40d4      	lsrs	r4, r2
 800c992:	2300      	movs	r3, #0
 800c994:	e7f3      	b.n	800c97e <__ulp+0x1e>
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	7ff00000 	.word	0x7ff00000
 800c99c:	fcc00000 	.word	0xfcc00000

0800c9a0 <__b2d>:
 800c9a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9a2:	0006      	movs	r6, r0
 800c9a4:	6903      	ldr	r3, [r0, #16]
 800c9a6:	3614      	adds	r6, #20
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	18f3      	adds	r3, r6, r3
 800c9ac:	1f1d      	subs	r5, r3, #4
 800c9ae:	682c      	ldr	r4, [r5, #0]
 800c9b0:	000f      	movs	r7, r1
 800c9b2:	0020      	movs	r0, r4
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	f7ff fd3b 	bl	800c430 <__hi0bits>
 800c9ba:	2220      	movs	r2, #32
 800c9bc:	1a12      	subs	r2, r2, r0
 800c9be:	603a      	str	r2, [r7, #0]
 800c9c0:	0003      	movs	r3, r0
 800c9c2:	4a1c      	ldr	r2, [pc, #112]	@ (800ca34 <__b2d+0x94>)
 800c9c4:	280a      	cmp	r0, #10
 800c9c6:	dc15      	bgt.n	800c9f4 <__b2d+0x54>
 800c9c8:	210b      	movs	r1, #11
 800c9ca:	0027      	movs	r7, r4
 800c9cc:	1a09      	subs	r1, r1, r0
 800c9ce:	40cf      	lsrs	r7, r1
 800c9d0:	433a      	orrs	r2, r7
 800c9d2:	468c      	mov	ip, r1
 800c9d4:	0011      	movs	r1, r2
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	42ae      	cmp	r6, r5
 800c9da:	d202      	bcs.n	800c9e2 <__b2d+0x42>
 800c9dc:	9a01      	ldr	r2, [sp, #4]
 800c9de:	3a08      	subs	r2, #8
 800c9e0:	6812      	ldr	r2, [r2, #0]
 800c9e2:	3315      	adds	r3, #21
 800c9e4:	409c      	lsls	r4, r3
 800c9e6:	4663      	mov	r3, ip
 800c9e8:	0027      	movs	r7, r4
 800c9ea:	40da      	lsrs	r2, r3
 800c9ec:	4317      	orrs	r7, r2
 800c9ee:	0038      	movs	r0, r7
 800c9f0:	b003      	add	sp, #12
 800c9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f4:	2700      	movs	r7, #0
 800c9f6:	42ae      	cmp	r6, r5
 800c9f8:	d202      	bcs.n	800ca00 <__b2d+0x60>
 800c9fa:	9d01      	ldr	r5, [sp, #4]
 800c9fc:	3d08      	subs	r5, #8
 800c9fe:	682f      	ldr	r7, [r5, #0]
 800ca00:	210b      	movs	r1, #11
 800ca02:	4249      	negs	r1, r1
 800ca04:	468c      	mov	ip, r1
 800ca06:	449c      	add	ip, r3
 800ca08:	2b0b      	cmp	r3, #11
 800ca0a:	d010      	beq.n	800ca2e <__b2d+0x8e>
 800ca0c:	4661      	mov	r1, ip
 800ca0e:	2320      	movs	r3, #32
 800ca10:	408c      	lsls	r4, r1
 800ca12:	1a5b      	subs	r3, r3, r1
 800ca14:	0039      	movs	r1, r7
 800ca16:	40d9      	lsrs	r1, r3
 800ca18:	430c      	orrs	r4, r1
 800ca1a:	4322      	orrs	r2, r4
 800ca1c:	0011      	movs	r1, r2
 800ca1e:	2200      	movs	r2, #0
 800ca20:	42b5      	cmp	r5, r6
 800ca22:	d901      	bls.n	800ca28 <__b2d+0x88>
 800ca24:	3d04      	subs	r5, #4
 800ca26:	682a      	ldr	r2, [r5, #0]
 800ca28:	4664      	mov	r4, ip
 800ca2a:	40a7      	lsls	r7, r4
 800ca2c:	e7dd      	b.n	800c9ea <__b2d+0x4a>
 800ca2e:	4322      	orrs	r2, r4
 800ca30:	0011      	movs	r1, r2
 800ca32:	e7dc      	b.n	800c9ee <__b2d+0x4e>
 800ca34:	3ff00000 	.word	0x3ff00000

0800ca38 <__d2b>:
 800ca38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca3a:	2101      	movs	r1, #1
 800ca3c:	0016      	movs	r6, r2
 800ca3e:	001f      	movs	r7, r3
 800ca40:	f7ff fbfe 	bl	800c240 <_Balloc>
 800ca44:	1e04      	subs	r4, r0, #0
 800ca46:	d105      	bne.n	800ca54 <__d2b+0x1c>
 800ca48:	0022      	movs	r2, r4
 800ca4a:	4b25      	ldr	r3, [pc, #148]	@ (800cae0 <__d2b+0xa8>)
 800ca4c:	4825      	ldr	r0, [pc, #148]	@ (800cae4 <__d2b+0xac>)
 800ca4e:	4926      	ldr	r1, [pc, #152]	@ (800cae8 <__d2b+0xb0>)
 800ca50:	f000 fe72 	bl	800d738 <__assert_func>
 800ca54:	033b      	lsls	r3, r7, #12
 800ca56:	007d      	lsls	r5, r7, #1
 800ca58:	0b1b      	lsrs	r3, r3, #12
 800ca5a:	0d6d      	lsrs	r5, r5, #21
 800ca5c:	d002      	beq.n	800ca64 <__d2b+0x2c>
 800ca5e:	2280      	movs	r2, #128	@ 0x80
 800ca60:	0352      	lsls	r2, r2, #13
 800ca62:	4313      	orrs	r3, r2
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	2e00      	cmp	r6, #0
 800ca68:	d025      	beq.n	800cab6 <__d2b+0x7e>
 800ca6a:	4668      	mov	r0, sp
 800ca6c:	9600      	str	r6, [sp, #0]
 800ca6e:	f7ff fd00 	bl	800c472 <__lo0bits>
 800ca72:	9b01      	ldr	r3, [sp, #4]
 800ca74:	9900      	ldr	r1, [sp, #0]
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d01b      	beq.n	800cab2 <__d2b+0x7a>
 800ca7a:	2220      	movs	r2, #32
 800ca7c:	001e      	movs	r6, r3
 800ca7e:	1a12      	subs	r2, r2, r0
 800ca80:	4096      	lsls	r6, r2
 800ca82:	0032      	movs	r2, r6
 800ca84:	40c3      	lsrs	r3, r0
 800ca86:	430a      	orrs	r2, r1
 800ca88:	6162      	str	r2, [r4, #20]
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	9e01      	ldr	r6, [sp, #4]
 800ca8e:	61a6      	str	r6, [r4, #24]
 800ca90:	1e73      	subs	r3, r6, #1
 800ca92:	419e      	sbcs	r6, r3
 800ca94:	3601      	adds	r6, #1
 800ca96:	6126      	str	r6, [r4, #16]
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	d014      	beq.n	800cac6 <__d2b+0x8e>
 800ca9c:	2635      	movs	r6, #53	@ 0x35
 800ca9e:	4b13      	ldr	r3, [pc, #76]	@ (800caec <__d2b+0xb4>)
 800caa0:	18ed      	adds	r5, r5, r3
 800caa2:	9b08      	ldr	r3, [sp, #32]
 800caa4:	182d      	adds	r5, r5, r0
 800caa6:	601d      	str	r5, [r3, #0]
 800caa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caaa:	1a36      	subs	r6, r6, r0
 800caac:	601e      	str	r6, [r3, #0]
 800caae:	0020      	movs	r0, r4
 800cab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cab2:	6161      	str	r1, [r4, #20]
 800cab4:	e7ea      	b.n	800ca8c <__d2b+0x54>
 800cab6:	a801      	add	r0, sp, #4
 800cab8:	f7ff fcdb 	bl	800c472 <__lo0bits>
 800cabc:	9b01      	ldr	r3, [sp, #4]
 800cabe:	2601      	movs	r6, #1
 800cac0:	6163      	str	r3, [r4, #20]
 800cac2:	3020      	adds	r0, #32
 800cac4:	e7e7      	b.n	800ca96 <__d2b+0x5e>
 800cac6:	4b0a      	ldr	r3, [pc, #40]	@ (800caf0 <__d2b+0xb8>)
 800cac8:	18c0      	adds	r0, r0, r3
 800caca:	9b08      	ldr	r3, [sp, #32]
 800cacc:	6018      	str	r0, [r3, #0]
 800cace:	4b09      	ldr	r3, [pc, #36]	@ (800caf4 <__d2b+0xbc>)
 800cad0:	18f3      	adds	r3, r6, r3
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	18e3      	adds	r3, r4, r3
 800cad6:	6958      	ldr	r0, [r3, #20]
 800cad8:	f7ff fcaa 	bl	800c430 <__hi0bits>
 800cadc:	0176      	lsls	r6, r6, #5
 800cade:	e7e3      	b.n	800caa8 <__d2b+0x70>
 800cae0:	0800e519 	.word	0x0800e519
 800cae4:	0800e5a1 	.word	0x0800e5a1
 800cae8:	0000030f 	.word	0x0000030f
 800caec:	fffffbcd 	.word	0xfffffbcd
 800caf0:	fffffbce 	.word	0xfffffbce
 800caf4:	3fffffff 	.word	0x3fffffff

0800caf8 <__ratio>:
 800caf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cafa:	b087      	sub	sp, #28
 800cafc:	000f      	movs	r7, r1
 800cafe:	a904      	add	r1, sp, #16
 800cb00:	0006      	movs	r6, r0
 800cb02:	f7ff ff4d 	bl	800c9a0 <__b2d>
 800cb06:	9000      	str	r0, [sp, #0]
 800cb08:	9101      	str	r1, [sp, #4]
 800cb0a:	9b00      	ldr	r3, [sp, #0]
 800cb0c:	9c01      	ldr	r4, [sp, #4]
 800cb0e:	0038      	movs	r0, r7
 800cb10:	a905      	add	r1, sp, #20
 800cb12:	9302      	str	r3, [sp, #8]
 800cb14:	9403      	str	r4, [sp, #12]
 800cb16:	f7ff ff43 	bl	800c9a0 <__b2d>
 800cb1a:	000d      	movs	r5, r1
 800cb1c:	0002      	movs	r2, r0
 800cb1e:	000b      	movs	r3, r1
 800cb20:	6930      	ldr	r0, [r6, #16]
 800cb22:	6939      	ldr	r1, [r7, #16]
 800cb24:	9e04      	ldr	r6, [sp, #16]
 800cb26:	1a40      	subs	r0, r0, r1
 800cb28:	9905      	ldr	r1, [sp, #20]
 800cb2a:	0140      	lsls	r0, r0, #5
 800cb2c:	1a71      	subs	r1, r6, r1
 800cb2e:	1841      	adds	r1, r0, r1
 800cb30:	0508      	lsls	r0, r1, #20
 800cb32:	2900      	cmp	r1, #0
 800cb34:	dd08      	ble.n	800cb48 <__ratio+0x50>
 800cb36:	9901      	ldr	r1, [sp, #4]
 800cb38:	1841      	adds	r1, r0, r1
 800cb3a:	9103      	str	r1, [sp, #12]
 800cb3c:	9802      	ldr	r0, [sp, #8]
 800cb3e:	9903      	ldr	r1, [sp, #12]
 800cb40:	f7f4 fda2 	bl	8001688 <__aeabi_ddiv>
 800cb44:	b007      	add	sp, #28
 800cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb48:	1a2b      	subs	r3, r5, r0
 800cb4a:	e7f7      	b.n	800cb3c <__ratio+0x44>

0800cb4c <__copybits>:
 800cb4c:	b570      	push	{r4, r5, r6, lr}
 800cb4e:	0014      	movs	r4, r2
 800cb50:	0005      	movs	r5, r0
 800cb52:	3901      	subs	r1, #1
 800cb54:	6913      	ldr	r3, [r2, #16]
 800cb56:	1149      	asrs	r1, r1, #5
 800cb58:	3101      	adds	r1, #1
 800cb5a:	0089      	lsls	r1, r1, #2
 800cb5c:	3414      	adds	r4, #20
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	1841      	adds	r1, r0, r1
 800cb62:	18e3      	adds	r3, r4, r3
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	d80d      	bhi.n	800cb84 <__copybits+0x38>
 800cb68:	0014      	movs	r4, r2
 800cb6a:	3411      	adds	r4, #17
 800cb6c:	2500      	movs	r5, #0
 800cb6e:	429c      	cmp	r4, r3
 800cb70:	d803      	bhi.n	800cb7a <__copybits+0x2e>
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	3b11      	subs	r3, #17
 800cb76:	089b      	lsrs	r3, r3, #2
 800cb78:	009d      	lsls	r5, r3, #2
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	1940      	adds	r0, r0, r5
 800cb7e:	4281      	cmp	r1, r0
 800cb80:	d803      	bhi.n	800cb8a <__copybits+0x3e>
 800cb82:	bd70      	pop	{r4, r5, r6, pc}
 800cb84:	cc40      	ldmia	r4!, {r6}
 800cb86:	c540      	stmia	r5!, {r6}
 800cb88:	e7ec      	b.n	800cb64 <__copybits+0x18>
 800cb8a:	c008      	stmia	r0!, {r3}
 800cb8c:	e7f7      	b.n	800cb7e <__copybits+0x32>

0800cb8e <__any_on>:
 800cb8e:	0002      	movs	r2, r0
 800cb90:	6900      	ldr	r0, [r0, #16]
 800cb92:	b510      	push	{r4, lr}
 800cb94:	3214      	adds	r2, #20
 800cb96:	114b      	asrs	r3, r1, #5
 800cb98:	4298      	cmp	r0, r3
 800cb9a:	db13      	blt.n	800cbc4 <__any_on+0x36>
 800cb9c:	dd0c      	ble.n	800cbb8 <__any_on+0x2a>
 800cb9e:	241f      	movs	r4, #31
 800cba0:	0008      	movs	r0, r1
 800cba2:	4020      	ands	r0, r4
 800cba4:	4221      	tst	r1, r4
 800cba6:	d007      	beq.n	800cbb8 <__any_on+0x2a>
 800cba8:	0099      	lsls	r1, r3, #2
 800cbaa:	588c      	ldr	r4, [r1, r2]
 800cbac:	0021      	movs	r1, r4
 800cbae:	40c1      	lsrs	r1, r0
 800cbb0:	4081      	lsls	r1, r0
 800cbb2:	2001      	movs	r0, #1
 800cbb4:	428c      	cmp	r4, r1
 800cbb6:	d104      	bne.n	800cbc2 <__any_on+0x34>
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	18d3      	adds	r3, r2, r3
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d803      	bhi.n	800cbc8 <__any_on+0x3a>
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	bd10      	pop	{r4, pc}
 800cbc4:	0003      	movs	r3, r0
 800cbc6:	e7f7      	b.n	800cbb8 <__any_on+0x2a>
 800cbc8:	3b04      	subs	r3, #4
 800cbca:	6819      	ldr	r1, [r3, #0]
 800cbcc:	2900      	cmp	r1, #0
 800cbce:	d0f5      	beq.n	800cbbc <__any_on+0x2e>
 800cbd0:	2001      	movs	r0, #1
 800cbd2:	e7f6      	b.n	800cbc2 <__any_on+0x34>

0800cbd4 <__ascii_wctomb>:
 800cbd4:	0003      	movs	r3, r0
 800cbd6:	1e08      	subs	r0, r1, #0
 800cbd8:	d005      	beq.n	800cbe6 <__ascii_wctomb+0x12>
 800cbda:	2aff      	cmp	r2, #255	@ 0xff
 800cbdc:	d904      	bls.n	800cbe8 <__ascii_wctomb+0x14>
 800cbde:	228a      	movs	r2, #138	@ 0x8a
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	601a      	str	r2, [r3, #0]
 800cbe4:	4240      	negs	r0, r0
 800cbe6:	4770      	bx	lr
 800cbe8:	2001      	movs	r0, #1
 800cbea:	700a      	strb	r2, [r1, #0]
 800cbec:	e7fb      	b.n	800cbe6 <__ascii_wctomb+0x12>
	...

0800cbf0 <__ssputs_r>:
 800cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf2:	688e      	ldr	r6, [r1, #8]
 800cbf4:	b085      	sub	sp, #20
 800cbf6:	001f      	movs	r7, r3
 800cbf8:	000c      	movs	r4, r1
 800cbfa:	680b      	ldr	r3, [r1, #0]
 800cbfc:	9002      	str	r0, [sp, #8]
 800cbfe:	9203      	str	r2, [sp, #12]
 800cc00:	42be      	cmp	r6, r7
 800cc02:	d830      	bhi.n	800cc66 <__ssputs_r+0x76>
 800cc04:	210c      	movs	r1, #12
 800cc06:	5e62      	ldrsh	r2, [r4, r1]
 800cc08:	2190      	movs	r1, #144	@ 0x90
 800cc0a:	00c9      	lsls	r1, r1, #3
 800cc0c:	420a      	tst	r2, r1
 800cc0e:	d028      	beq.n	800cc62 <__ssputs_r+0x72>
 800cc10:	2003      	movs	r0, #3
 800cc12:	6921      	ldr	r1, [r4, #16]
 800cc14:	1a5b      	subs	r3, r3, r1
 800cc16:	9301      	str	r3, [sp, #4]
 800cc18:	6963      	ldr	r3, [r4, #20]
 800cc1a:	4343      	muls	r3, r0
 800cc1c:	9801      	ldr	r0, [sp, #4]
 800cc1e:	0fdd      	lsrs	r5, r3, #31
 800cc20:	18ed      	adds	r5, r5, r3
 800cc22:	1c7b      	adds	r3, r7, #1
 800cc24:	181b      	adds	r3, r3, r0
 800cc26:	106d      	asrs	r5, r5, #1
 800cc28:	42ab      	cmp	r3, r5
 800cc2a:	d900      	bls.n	800cc2e <__ssputs_r+0x3e>
 800cc2c:	001d      	movs	r5, r3
 800cc2e:	0552      	lsls	r2, r2, #21
 800cc30:	d528      	bpl.n	800cc84 <__ssputs_r+0x94>
 800cc32:	0029      	movs	r1, r5
 800cc34:	9802      	ldr	r0, [sp, #8]
 800cc36:	f7ff fa61 	bl	800c0fc <_malloc_r>
 800cc3a:	1e06      	subs	r6, r0, #0
 800cc3c:	d02c      	beq.n	800cc98 <__ssputs_r+0xa8>
 800cc3e:	9a01      	ldr	r2, [sp, #4]
 800cc40:	6921      	ldr	r1, [r4, #16]
 800cc42:	f7fe fe86 	bl	800b952 <memcpy>
 800cc46:	89a2      	ldrh	r2, [r4, #12]
 800cc48:	4b18      	ldr	r3, [pc, #96]	@ (800ccac <__ssputs_r+0xbc>)
 800cc4a:	401a      	ands	r2, r3
 800cc4c:	2380      	movs	r3, #128	@ 0x80
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	9b01      	ldr	r3, [sp, #4]
 800cc54:	6126      	str	r6, [r4, #16]
 800cc56:	18f6      	adds	r6, r6, r3
 800cc58:	6026      	str	r6, [r4, #0]
 800cc5a:	003e      	movs	r6, r7
 800cc5c:	6165      	str	r5, [r4, #20]
 800cc5e:	1aed      	subs	r5, r5, r3
 800cc60:	60a5      	str	r5, [r4, #8]
 800cc62:	42be      	cmp	r6, r7
 800cc64:	d900      	bls.n	800cc68 <__ssputs_r+0x78>
 800cc66:	003e      	movs	r6, r7
 800cc68:	0032      	movs	r2, r6
 800cc6a:	9903      	ldr	r1, [sp, #12]
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	f000 fd31 	bl	800d6d4 <memmove>
 800cc72:	2000      	movs	r0, #0
 800cc74:	68a3      	ldr	r3, [r4, #8]
 800cc76:	1b9b      	subs	r3, r3, r6
 800cc78:	60a3      	str	r3, [r4, #8]
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	199b      	adds	r3, r3, r6
 800cc7e:	6023      	str	r3, [r4, #0]
 800cc80:	b005      	add	sp, #20
 800cc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc84:	002a      	movs	r2, r5
 800cc86:	9802      	ldr	r0, [sp, #8]
 800cc88:	f000 fdac 	bl	800d7e4 <_realloc_r>
 800cc8c:	1e06      	subs	r6, r0, #0
 800cc8e:	d1e0      	bne.n	800cc52 <__ssputs_r+0x62>
 800cc90:	6921      	ldr	r1, [r4, #16]
 800cc92:	9802      	ldr	r0, [sp, #8]
 800cc94:	f7fe fe6c 	bl	800b970 <_free_r>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	2001      	movs	r0, #1
 800cc9c:	9a02      	ldr	r2, [sp, #8]
 800cc9e:	4240      	negs	r0, r0
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	89a2      	ldrh	r2, [r4, #12]
 800cca4:	3334      	adds	r3, #52	@ 0x34
 800cca6:	4313      	orrs	r3, r2
 800cca8:	81a3      	strh	r3, [r4, #12]
 800ccaa:	e7e9      	b.n	800cc80 <__ssputs_r+0x90>
 800ccac:	fffffb7f 	.word	0xfffffb7f

0800ccb0 <_svfiprintf_r>:
 800ccb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb2:	b0a1      	sub	sp, #132	@ 0x84
 800ccb4:	9003      	str	r0, [sp, #12]
 800ccb6:	001d      	movs	r5, r3
 800ccb8:	898b      	ldrh	r3, [r1, #12]
 800ccba:	000f      	movs	r7, r1
 800ccbc:	0016      	movs	r6, r2
 800ccbe:	061b      	lsls	r3, r3, #24
 800ccc0:	d511      	bpl.n	800cce6 <_svfiprintf_r+0x36>
 800ccc2:	690b      	ldr	r3, [r1, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10e      	bne.n	800cce6 <_svfiprintf_r+0x36>
 800ccc8:	2140      	movs	r1, #64	@ 0x40
 800ccca:	f7ff fa17 	bl	800c0fc <_malloc_r>
 800ccce:	6038      	str	r0, [r7, #0]
 800ccd0:	6138      	str	r0, [r7, #16]
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d105      	bne.n	800cce2 <_svfiprintf_r+0x32>
 800ccd6:	230c      	movs	r3, #12
 800ccd8:	9a03      	ldr	r2, [sp, #12]
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	2001      	movs	r0, #1
 800ccde:	4240      	negs	r0, r0
 800cce0:	e0cf      	b.n	800ce82 <_svfiprintf_r+0x1d2>
 800cce2:	2340      	movs	r3, #64	@ 0x40
 800cce4:	617b      	str	r3, [r7, #20]
 800cce6:	2300      	movs	r3, #0
 800cce8:	ac08      	add	r4, sp, #32
 800ccea:	6163      	str	r3, [r4, #20]
 800ccec:	3320      	adds	r3, #32
 800ccee:	7663      	strb	r3, [r4, #25]
 800ccf0:	3310      	adds	r3, #16
 800ccf2:	76a3      	strb	r3, [r4, #26]
 800ccf4:	9507      	str	r5, [sp, #28]
 800ccf6:	0035      	movs	r5, r6
 800ccf8:	782b      	ldrb	r3, [r5, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <_svfiprintf_r+0x52>
 800ccfe:	2b25      	cmp	r3, #37	@ 0x25
 800cd00:	d148      	bne.n	800cd94 <_svfiprintf_r+0xe4>
 800cd02:	1bab      	subs	r3, r5, r6
 800cd04:	9305      	str	r3, [sp, #20]
 800cd06:	42b5      	cmp	r5, r6
 800cd08:	d00b      	beq.n	800cd22 <_svfiprintf_r+0x72>
 800cd0a:	0032      	movs	r2, r6
 800cd0c:	0039      	movs	r1, r7
 800cd0e:	9803      	ldr	r0, [sp, #12]
 800cd10:	f7ff ff6e 	bl	800cbf0 <__ssputs_r>
 800cd14:	3001      	adds	r0, #1
 800cd16:	d100      	bne.n	800cd1a <_svfiprintf_r+0x6a>
 800cd18:	e0ae      	b.n	800ce78 <_svfiprintf_r+0x1c8>
 800cd1a:	6963      	ldr	r3, [r4, #20]
 800cd1c:	9a05      	ldr	r2, [sp, #20]
 800cd1e:	189b      	adds	r3, r3, r2
 800cd20:	6163      	str	r3, [r4, #20]
 800cd22:	782b      	ldrb	r3, [r5, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d100      	bne.n	800cd2a <_svfiprintf_r+0x7a>
 800cd28:	e0a6      	b.n	800ce78 <_svfiprintf_r+0x1c8>
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4252      	negs	r2, r2
 800cd30:	6062      	str	r2, [r4, #4]
 800cd32:	a904      	add	r1, sp, #16
 800cd34:	3254      	adds	r2, #84	@ 0x54
 800cd36:	1852      	adds	r2, r2, r1
 800cd38:	1c6e      	adds	r6, r5, #1
 800cd3a:	6023      	str	r3, [r4, #0]
 800cd3c:	60e3      	str	r3, [r4, #12]
 800cd3e:	60a3      	str	r3, [r4, #8]
 800cd40:	7013      	strb	r3, [r2, #0]
 800cd42:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cd44:	4b54      	ldr	r3, [pc, #336]	@ (800ce98 <_svfiprintf_r+0x1e8>)
 800cd46:	2205      	movs	r2, #5
 800cd48:	0018      	movs	r0, r3
 800cd4a:	7831      	ldrb	r1, [r6, #0]
 800cd4c:	9305      	str	r3, [sp, #20]
 800cd4e:	f000 fce7 	bl	800d720 <memchr>
 800cd52:	1c75      	adds	r5, r6, #1
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d11f      	bne.n	800cd98 <_svfiprintf_r+0xe8>
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	06d3      	lsls	r3, r2, #27
 800cd5c:	d504      	bpl.n	800cd68 <_svfiprintf_r+0xb8>
 800cd5e:	2353      	movs	r3, #83	@ 0x53
 800cd60:	a904      	add	r1, sp, #16
 800cd62:	185b      	adds	r3, r3, r1
 800cd64:	2120      	movs	r1, #32
 800cd66:	7019      	strb	r1, [r3, #0]
 800cd68:	0713      	lsls	r3, r2, #28
 800cd6a:	d504      	bpl.n	800cd76 <_svfiprintf_r+0xc6>
 800cd6c:	2353      	movs	r3, #83	@ 0x53
 800cd6e:	a904      	add	r1, sp, #16
 800cd70:	185b      	adds	r3, r3, r1
 800cd72:	212b      	movs	r1, #43	@ 0x2b
 800cd74:	7019      	strb	r1, [r3, #0]
 800cd76:	7833      	ldrb	r3, [r6, #0]
 800cd78:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd7a:	d016      	beq.n	800cdaa <_svfiprintf_r+0xfa>
 800cd7c:	0035      	movs	r5, r6
 800cd7e:	2100      	movs	r1, #0
 800cd80:	200a      	movs	r0, #10
 800cd82:	68e3      	ldr	r3, [r4, #12]
 800cd84:	782a      	ldrb	r2, [r5, #0]
 800cd86:	1c6e      	adds	r6, r5, #1
 800cd88:	3a30      	subs	r2, #48	@ 0x30
 800cd8a:	2a09      	cmp	r2, #9
 800cd8c:	d950      	bls.n	800ce30 <_svfiprintf_r+0x180>
 800cd8e:	2900      	cmp	r1, #0
 800cd90:	d111      	bne.n	800cdb6 <_svfiprintf_r+0x106>
 800cd92:	e017      	b.n	800cdc4 <_svfiprintf_r+0x114>
 800cd94:	3501      	adds	r5, #1
 800cd96:	e7af      	b.n	800ccf8 <_svfiprintf_r+0x48>
 800cd98:	9b05      	ldr	r3, [sp, #20]
 800cd9a:	6822      	ldr	r2, [r4, #0]
 800cd9c:	1ac0      	subs	r0, r0, r3
 800cd9e:	2301      	movs	r3, #1
 800cda0:	4083      	lsls	r3, r0
 800cda2:	4313      	orrs	r3, r2
 800cda4:	002e      	movs	r6, r5
 800cda6:	6023      	str	r3, [r4, #0]
 800cda8:	e7cc      	b.n	800cd44 <_svfiprintf_r+0x94>
 800cdaa:	9b07      	ldr	r3, [sp, #28]
 800cdac:	1d19      	adds	r1, r3, #4
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	9107      	str	r1, [sp, #28]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	db01      	blt.n	800cdba <_svfiprintf_r+0x10a>
 800cdb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdb8:	e004      	b.n	800cdc4 <_svfiprintf_r+0x114>
 800cdba:	425b      	negs	r3, r3
 800cdbc:	60e3      	str	r3, [r4, #12]
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	6023      	str	r3, [r4, #0]
 800cdc4:	782b      	ldrb	r3, [r5, #0]
 800cdc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdc8:	d10c      	bne.n	800cde4 <_svfiprintf_r+0x134>
 800cdca:	786b      	ldrb	r3, [r5, #1]
 800cdcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdce:	d134      	bne.n	800ce3a <_svfiprintf_r+0x18a>
 800cdd0:	9b07      	ldr	r3, [sp, #28]
 800cdd2:	3502      	adds	r5, #2
 800cdd4:	1d1a      	adds	r2, r3, #4
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	9207      	str	r2, [sp, #28]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	da01      	bge.n	800cde2 <_svfiprintf_r+0x132>
 800cdde:	2301      	movs	r3, #1
 800cde0:	425b      	negs	r3, r3
 800cde2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cde4:	4e2d      	ldr	r6, [pc, #180]	@ (800ce9c <_svfiprintf_r+0x1ec>)
 800cde6:	2203      	movs	r2, #3
 800cde8:	0030      	movs	r0, r6
 800cdea:	7829      	ldrb	r1, [r5, #0]
 800cdec:	f000 fc98 	bl	800d720 <memchr>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d006      	beq.n	800ce02 <_svfiprintf_r+0x152>
 800cdf4:	2340      	movs	r3, #64	@ 0x40
 800cdf6:	1b80      	subs	r0, r0, r6
 800cdf8:	4083      	lsls	r3, r0
 800cdfa:	6822      	ldr	r2, [r4, #0]
 800cdfc:	3501      	adds	r5, #1
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	7829      	ldrb	r1, [r5, #0]
 800ce04:	2206      	movs	r2, #6
 800ce06:	4826      	ldr	r0, [pc, #152]	@ (800cea0 <_svfiprintf_r+0x1f0>)
 800ce08:	1c6e      	adds	r6, r5, #1
 800ce0a:	7621      	strb	r1, [r4, #24]
 800ce0c:	f000 fc88 	bl	800d720 <memchr>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d038      	beq.n	800ce86 <_svfiprintf_r+0x1d6>
 800ce14:	4b23      	ldr	r3, [pc, #140]	@ (800cea4 <_svfiprintf_r+0x1f4>)
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d122      	bne.n	800ce60 <_svfiprintf_r+0x1b0>
 800ce1a:	2207      	movs	r2, #7
 800ce1c:	9b07      	ldr	r3, [sp, #28]
 800ce1e:	3307      	adds	r3, #7
 800ce20:	4393      	bics	r3, r2
 800ce22:	3308      	adds	r3, #8
 800ce24:	9307      	str	r3, [sp, #28]
 800ce26:	6963      	ldr	r3, [r4, #20]
 800ce28:	9a04      	ldr	r2, [sp, #16]
 800ce2a:	189b      	adds	r3, r3, r2
 800ce2c:	6163      	str	r3, [r4, #20]
 800ce2e:	e762      	b.n	800ccf6 <_svfiprintf_r+0x46>
 800ce30:	4343      	muls	r3, r0
 800ce32:	0035      	movs	r5, r6
 800ce34:	2101      	movs	r1, #1
 800ce36:	189b      	adds	r3, r3, r2
 800ce38:	e7a4      	b.n	800cd84 <_svfiprintf_r+0xd4>
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	200a      	movs	r0, #10
 800ce3e:	0019      	movs	r1, r3
 800ce40:	3501      	adds	r5, #1
 800ce42:	6063      	str	r3, [r4, #4]
 800ce44:	782a      	ldrb	r2, [r5, #0]
 800ce46:	1c6e      	adds	r6, r5, #1
 800ce48:	3a30      	subs	r2, #48	@ 0x30
 800ce4a:	2a09      	cmp	r2, #9
 800ce4c:	d903      	bls.n	800ce56 <_svfiprintf_r+0x1a6>
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0c8      	beq.n	800cde4 <_svfiprintf_r+0x134>
 800ce52:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce54:	e7c6      	b.n	800cde4 <_svfiprintf_r+0x134>
 800ce56:	4341      	muls	r1, r0
 800ce58:	0035      	movs	r5, r6
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	1889      	adds	r1, r1, r2
 800ce5e:	e7f1      	b.n	800ce44 <_svfiprintf_r+0x194>
 800ce60:	aa07      	add	r2, sp, #28
 800ce62:	9200      	str	r2, [sp, #0]
 800ce64:	0021      	movs	r1, r4
 800ce66:	003a      	movs	r2, r7
 800ce68:	4b0f      	ldr	r3, [pc, #60]	@ (800cea8 <_svfiprintf_r+0x1f8>)
 800ce6a:	9803      	ldr	r0, [sp, #12]
 800ce6c:	e000      	b.n	800ce70 <_svfiprintf_r+0x1c0>
 800ce6e:	bf00      	nop
 800ce70:	9004      	str	r0, [sp, #16]
 800ce72:	9b04      	ldr	r3, [sp, #16]
 800ce74:	3301      	adds	r3, #1
 800ce76:	d1d6      	bne.n	800ce26 <_svfiprintf_r+0x176>
 800ce78:	89bb      	ldrh	r3, [r7, #12]
 800ce7a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ce7c:	065b      	lsls	r3, r3, #25
 800ce7e:	d500      	bpl.n	800ce82 <_svfiprintf_r+0x1d2>
 800ce80:	e72c      	b.n	800ccdc <_svfiprintf_r+0x2c>
 800ce82:	b021      	add	sp, #132	@ 0x84
 800ce84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce86:	aa07      	add	r2, sp, #28
 800ce88:	9200      	str	r2, [sp, #0]
 800ce8a:	0021      	movs	r1, r4
 800ce8c:	003a      	movs	r2, r7
 800ce8e:	4b06      	ldr	r3, [pc, #24]	@ (800cea8 <_svfiprintf_r+0x1f8>)
 800ce90:	9803      	ldr	r0, [sp, #12]
 800ce92:	f000 f9bf 	bl	800d214 <_printf_i>
 800ce96:	e7eb      	b.n	800ce70 <_svfiprintf_r+0x1c0>
 800ce98:	0800e6f8 	.word	0x0800e6f8
 800ce9c:	0800e6fe 	.word	0x0800e6fe
 800cea0:	0800e702 	.word	0x0800e702
 800cea4:	00000000 	.word	0x00000000
 800cea8:	0800cbf1 	.word	0x0800cbf1

0800ceac <__sfputc_r>:
 800ceac:	6893      	ldr	r3, [r2, #8]
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	6093      	str	r3, [r2, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	da04      	bge.n	800cec2 <__sfputc_r+0x16>
 800ceb8:	6994      	ldr	r4, [r2, #24]
 800ceba:	42a3      	cmp	r3, r4
 800cebc:	db07      	blt.n	800cece <__sfputc_r+0x22>
 800cebe:	290a      	cmp	r1, #10
 800cec0:	d005      	beq.n	800cece <__sfputc_r+0x22>
 800cec2:	6813      	ldr	r3, [r2, #0]
 800cec4:	1c58      	adds	r0, r3, #1
 800cec6:	6010      	str	r0, [r2, #0]
 800cec8:	7019      	strb	r1, [r3, #0]
 800ceca:	0008      	movs	r0, r1
 800cecc:	bd10      	pop	{r4, pc}
 800cece:	f000 fb60 	bl	800d592 <__swbuf_r>
 800ced2:	0001      	movs	r1, r0
 800ced4:	e7f9      	b.n	800ceca <__sfputc_r+0x1e>

0800ced6 <__sfputs_r>:
 800ced6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced8:	0006      	movs	r6, r0
 800ceda:	000f      	movs	r7, r1
 800cedc:	0014      	movs	r4, r2
 800cede:	18d5      	adds	r5, r2, r3
 800cee0:	42ac      	cmp	r4, r5
 800cee2:	d101      	bne.n	800cee8 <__sfputs_r+0x12>
 800cee4:	2000      	movs	r0, #0
 800cee6:	e007      	b.n	800cef8 <__sfputs_r+0x22>
 800cee8:	7821      	ldrb	r1, [r4, #0]
 800ceea:	003a      	movs	r2, r7
 800ceec:	0030      	movs	r0, r6
 800ceee:	f7ff ffdd 	bl	800ceac <__sfputc_r>
 800cef2:	3401      	adds	r4, #1
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d1f3      	bne.n	800cee0 <__sfputs_r+0xa>
 800cef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cefc <_vfiprintf_r>:
 800cefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cefe:	b0a1      	sub	sp, #132	@ 0x84
 800cf00:	000f      	movs	r7, r1
 800cf02:	0015      	movs	r5, r2
 800cf04:	001e      	movs	r6, r3
 800cf06:	9003      	str	r0, [sp, #12]
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d004      	beq.n	800cf16 <_vfiprintf_r+0x1a>
 800cf0c:	6a03      	ldr	r3, [r0, #32]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <_vfiprintf_r+0x1a>
 800cf12:	f7fe fbe9 	bl	800b6e8 <__sinit>
 800cf16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf18:	07db      	lsls	r3, r3, #31
 800cf1a:	d405      	bmi.n	800cf28 <_vfiprintf_r+0x2c>
 800cf1c:	89bb      	ldrh	r3, [r7, #12]
 800cf1e:	059b      	lsls	r3, r3, #22
 800cf20:	d402      	bmi.n	800cf28 <_vfiprintf_r+0x2c>
 800cf22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf24:	f7fe fd13 	bl	800b94e <__retarget_lock_acquire_recursive>
 800cf28:	89bb      	ldrh	r3, [r7, #12]
 800cf2a:	071b      	lsls	r3, r3, #28
 800cf2c:	d502      	bpl.n	800cf34 <_vfiprintf_r+0x38>
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d113      	bne.n	800cf5c <_vfiprintf_r+0x60>
 800cf34:	0039      	movs	r1, r7
 800cf36:	9803      	ldr	r0, [sp, #12]
 800cf38:	f000 fb6e 	bl	800d618 <__swsetup_r>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d00d      	beq.n	800cf5c <_vfiprintf_r+0x60>
 800cf40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf42:	07db      	lsls	r3, r3, #31
 800cf44:	d503      	bpl.n	800cf4e <_vfiprintf_r+0x52>
 800cf46:	2001      	movs	r0, #1
 800cf48:	4240      	negs	r0, r0
 800cf4a:	b021      	add	sp, #132	@ 0x84
 800cf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4e:	89bb      	ldrh	r3, [r7, #12]
 800cf50:	059b      	lsls	r3, r3, #22
 800cf52:	d4f8      	bmi.n	800cf46 <_vfiprintf_r+0x4a>
 800cf54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf56:	f7fe fcfb 	bl	800b950 <__retarget_lock_release_recursive>
 800cf5a:	e7f4      	b.n	800cf46 <_vfiprintf_r+0x4a>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	ac08      	add	r4, sp, #32
 800cf60:	6163      	str	r3, [r4, #20]
 800cf62:	3320      	adds	r3, #32
 800cf64:	7663      	strb	r3, [r4, #25]
 800cf66:	3310      	adds	r3, #16
 800cf68:	76a3      	strb	r3, [r4, #26]
 800cf6a:	9607      	str	r6, [sp, #28]
 800cf6c:	002e      	movs	r6, r5
 800cf6e:	7833      	ldrb	r3, [r6, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <_vfiprintf_r+0x7c>
 800cf74:	2b25      	cmp	r3, #37	@ 0x25
 800cf76:	d148      	bne.n	800d00a <_vfiprintf_r+0x10e>
 800cf78:	1b73      	subs	r3, r6, r5
 800cf7a:	9305      	str	r3, [sp, #20]
 800cf7c:	42ae      	cmp	r6, r5
 800cf7e:	d00b      	beq.n	800cf98 <_vfiprintf_r+0x9c>
 800cf80:	002a      	movs	r2, r5
 800cf82:	0039      	movs	r1, r7
 800cf84:	9803      	ldr	r0, [sp, #12]
 800cf86:	f7ff ffa6 	bl	800ced6 <__sfputs_r>
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	d100      	bne.n	800cf90 <_vfiprintf_r+0x94>
 800cf8e:	e0ae      	b.n	800d0ee <_vfiprintf_r+0x1f2>
 800cf90:	6963      	ldr	r3, [r4, #20]
 800cf92:	9a05      	ldr	r2, [sp, #20]
 800cf94:	189b      	adds	r3, r3, r2
 800cf96:	6163      	str	r3, [r4, #20]
 800cf98:	7833      	ldrb	r3, [r6, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d100      	bne.n	800cfa0 <_vfiprintf_r+0xa4>
 800cf9e:	e0a6      	b.n	800d0ee <_vfiprintf_r+0x1f2>
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4252      	negs	r2, r2
 800cfa6:	6062      	str	r2, [r4, #4]
 800cfa8:	a904      	add	r1, sp, #16
 800cfaa:	3254      	adds	r2, #84	@ 0x54
 800cfac:	1852      	adds	r2, r2, r1
 800cfae:	1c75      	adds	r5, r6, #1
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	60e3      	str	r3, [r4, #12]
 800cfb4:	60a3      	str	r3, [r4, #8]
 800cfb6:	7013      	strb	r3, [r2, #0]
 800cfb8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cfba:	4b59      	ldr	r3, [pc, #356]	@ (800d120 <_vfiprintf_r+0x224>)
 800cfbc:	2205      	movs	r2, #5
 800cfbe:	0018      	movs	r0, r3
 800cfc0:	7829      	ldrb	r1, [r5, #0]
 800cfc2:	9305      	str	r3, [sp, #20]
 800cfc4:	f000 fbac 	bl	800d720 <memchr>
 800cfc8:	1c6e      	adds	r6, r5, #1
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d11f      	bne.n	800d00e <_vfiprintf_r+0x112>
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	06d3      	lsls	r3, r2, #27
 800cfd2:	d504      	bpl.n	800cfde <_vfiprintf_r+0xe2>
 800cfd4:	2353      	movs	r3, #83	@ 0x53
 800cfd6:	a904      	add	r1, sp, #16
 800cfd8:	185b      	adds	r3, r3, r1
 800cfda:	2120      	movs	r1, #32
 800cfdc:	7019      	strb	r1, [r3, #0]
 800cfde:	0713      	lsls	r3, r2, #28
 800cfe0:	d504      	bpl.n	800cfec <_vfiprintf_r+0xf0>
 800cfe2:	2353      	movs	r3, #83	@ 0x53
 800cfe4:	a904      	add	r1, sp, #16
 800cfe6:	185b      	adds	r3, r3, r1
 800cfe8:	212b      	movs	r1, #43	@ 0x2b
 800cfea:	7019      	strb	r1, [r3, #0]
 800cfec:	782b      	ldrb	r3, [r5, #0]
 800cfee:	2b2a      	cmp	r3, #42	@ 0x2a
 800cff0:	d016      	beq.n	800d020 <_vfiprintf_r+0x124>
 800cff2:	002e      	movs	r6, r5
 800cff4:	2100      	movs	r1, #0
 800cff6:	200a      	movs	r0, #10
 800cff8:	68e3      	ldr	r3, [r4, #12]
 800cffa:	7832      	ldrb	r2, [r6, #0]
 800cffc:	1c75      	adds	r5, r6, #1
 800cffe:	3a30      	subs	r2, #48	@ 0x30
 800d000:	2a09      	cmp	r2, #9
 800d002:	d950      	bls.n	800d0a6 <_vfiprintf_r+0x1aa>
 800d004:	2900      	cmp	r1, #0
 800d006:	d111      	bne.n	800d02c <_vfiprintf_r+0x130>
 800d008:	e017      	b.n	800d03a <_vfiprintf_r+0x13e>
 800d00a:	3601      	adds	r6, #1
 800d00c:	e7af      	b.n	800cf6e <_vfiprintf_r+0x72>
 800d00e:	9b05      	ldr	r3, [sp, #20]
 800d010:	6822      	ldr	r2, [r4, #0]
 800d012:	1ac0      	subs	r0, r0, r3
 800d014:	2301      	movs	r3, #1
 800d016:	4083      	lsls	r3, r0
 800d018:	4313      	orrs	r3, r2
 800d01a:	0035      	movs	r5, r6
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	e7cc      	b.n	800cfba <_vfiprintf_r+0xbe>
 800d020:	9b07      	ldr	r3, [sp, #28]
 800d022:	1d19      	adds	r1, r3, #4
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	9107      	str	r1, [sp, #28]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	db01      	blt.n	800d030 <_vfiprintf_r+0x134>
 800d02c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d02e:	e004      	b.n	800d03a <_vfiprintf_r+0x13e>
 800d030:	425b      	negs	r3, r3
 800d032:	60e3      	str	r3, [r4, #12]
 800d034:	2302      	movs	r3, #2
 800d036:	4313      	orrs	r3, r2
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	7833      	ldrb	r3, [r6, #0]
 800d03c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d03e:	d10c      	bne.n	800d05a <_vfiprintf_r+0x15e>
 800d040:	7873      	ldrb	r3, [r6, #1]
 800d042:	2b2a      	cmp	r3, #42	@ 0x2a
 800d044:	d134      	bne.n	800d0b0 <_vfiprintf_r+0x1b4>
 800d046:	9b07      	ldr	r3, [sp, #28]
 800d048:	3602      	adds	r6, #2
 800d04a:	1d1a      	adds	r2, r3, #4
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	9207      	str	r2, [sp, #28]
 800d050:	2b00      	cmp	r3, #0
 800d052:	da01      	bge.n	800d058 <_vfiprintf_r+0x15c>
 800d054:	2301      	movs	r3, #1
 800d056:	425b      	negs	r3, r3
 800d058:	9309      	str	r3, [sp, #36]	@ 0x24
 800d05a:	4d32      	ldr	r5, [pc, #200]	@ (800d124 <_vfiprintf_r+0x228>)
 800d05c:	2203      	movs	r2, #3
 800d05e:	0028      	movs	r0, r5
 800d060:	7831      	ldrb	r1, [r6, #0]
 800d062:	f000 fb5d 	bl	800d720 <memchr>
 800d066:	2800      	cmp	r0, #0
 800d068:	d006      	beq.n	800d078 <_vfiprintf_r+0x17c>
 800d06a:	2340      	movs	r3, #64	@ 0x40
 800d06c:	1b40      	subs	r0, r0, r5
 800d06e:	4083      	lsls	r3, r0
 800d070:	6822      	ldr	r2, [r4, #0]
 800d072:	3601      	adds	r6, #1
 800d074:	4313      	orrs	r3, r2
 800d076:	6023      	str	r3, [r4, #0]
 800d078:	7831      	ldrb	r1, [r6, #0]
 800d07a:	2206      	movs	r2, #6
 800d07c:	482a      	ldr	r0, [pc, #168]	@ (800d128 <_vfiprintf_r+0x22c>)
 800d07e:	1c75      	adds	r5, r6, #1
 800d080:	7621      	strb	r1, [r4, #24]
 800d082:	f000 fb4d 	bl	800d720 <memchr>
 800d086:	2800      	cmp	r0, #0
 800d088:	d040      	beq.n	800d10c <_vfiprintf_r+0x210>
 800d08a:	4b28      	ldr	r3, [pc, #160]	@ (800d12c <_vfiprintf_r+0x230>)
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d122      	bne.n	800d0d6 <_vfiprintf_r+0x1da>
 800d090:	2207      	movs	r2, #7
 800d092:	9b07      	ldr	r3, [sp, #28]
 800d094:	3307      	adds	r3, #7
 800d096:	4393      	bics	r3, r2
 800d098:	3308      	adds	r3, #8
 800d09a:	9307      	str	r3, [sp, #28]
 800d09c:	6963      	ldr	r3, [r4, #20]
 800d09e:	9a04      	ldr	r2, [sp, #16]
 800d0a0:	189b      	adds	r3, r3, r2
 800d0a2:	6163      	str	r3, [r4, #20]
 800d0a4:	e762      	b.n	800cf6c <_vfiprintf_r+0x70>
 800d0a6:	4343      	muls	r3, r0
 800d0a8:	002e      	movs	r6, r5
 800d0aa:	2101      	movs	r1, #1
 800d0ac:	189b      	adds	r3, r3, r2
 800d0ae:	e7a4      	b.n	800cffa <_vfiprintf_r+0xfe>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	200a      	movs	r0, #10
 800d0b4:	0019      	movs	r1, r3
 800d0b6:	3601      	adds	r6, #1
 800d0b8:	6063      	str	r3, [r4, #4]
 800d0ba:	7832      	ldrb	r2, [r6, #0]
 800d0bc:	1c75      	adds	r5, r6, #1
 800d0be:	3a30      	subs	r2, #48	@ 0x30
 800d0c0:	2a09      	cmp	r2, #9
 800d0c2:	d903      	bls.n	800d0cc <_vfiprintf_r+0x1d0>
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d0c8      	beq.n	800d05a <_vfiprintf_r+0x15e>
 800d0c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0ca:	e7c6      	b.n	800d05a <_vfiprintf_r+0x15e>
 800d0cc:	4341      	muls	r1, r0
 800d0ce:	002e      	movs	r6, r5
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	1889      	adds	r1, r1, r2
 800d0d4:	e7f1      	b.n	800d0ba <_vfiprintf_r+0x1be>
 800d0d6:	aa07      	add	r2, sp, #28
 800d0d8:	9200      	str	r2, [sp, #0]
 800d0da:	0021      	movs	r1, r4
 800d0dc:	003a      	movs	r2, r7
 800d0de:	4b14      	ldr	r3, [pc, #80]	@ (800d130 <_vfiprintf_r+0x234>)
 800d0e0:	9803      	ldr	r0, [sp, #12]
 800d0e2:	e000      	b.n	800d0e6 <_vfiprintf_r+0x1ea>
 800d0e4:	bf00      	nop
 800d0e6:	9004      	str	r0, [sp, #16]
 800d0e8:	9b04      	ldr	r3, [sp, #16]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	d1d6      	bne.n	800d09c <_vfiprintf_r+0x1a0>
 800d0ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0f0:	07db      	lsls	r3, r3, #31
 800d0f2:	d405      	bmi.n	800d100 <_vfiprintf_r+0x204>
 800d0f4:	89bb      	ldrh	r3, [r7, #12]
 800d0f6:	059b      	lsls	r3, r3, #22
 800d0f8:	d402      	bmi.n	800d100 <_vfiprintf_r+0x204>
 800d0fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d0fc:	f7fe fc28 	bl	800b950 <__retarget_lock_release_recursive>
 800d100:	89bb      	ldrh	r3, [r7, #12]
 800d102:	065b      	lsls	r3, r3, #25
 800d104:	d500      	bpl.n	800d108 <_vfiprintf_r+0x20c>
 800d106:	e71e      	b.n	800cf46 <_vfiprintf_r+0x4a>
 800d108:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d10a:	e71e      	b.n	800cf4a <_vfiprintf_r+0x4e>
 800d10c:	aa07      	add	r2, sp, #28
 800d10e:	9200      	str	r2, [sp, #0]
 800d110:	0021      	movs	r1, r4
 800d112:	003a      	movs	r2, r7
 800d114:	4b06      	ldr	r3, [pc, #24]	@ (800d130 <_vfiprintf_r+0x234>)
 800d116:	9803      	ldr	r0, [sp, #12]
 800d118:	f000 f87c 	bl	800d214 <_printf_i>
 800d11c:	e7e3      	b.n	800d0e6 <_vfiprintf_r+0x1ea>
 800d11e:	46c0      	nop			@ (mov r8, r8)
 800d120:	0800e6f8 	.word	0x0800e6f8
 800d124:	0800e6fe 	.word	0x0800e6fe
 800d128:	0800e702 	.word	0x0800e702
 800d12c:	00000000 	.word	0x00000000
 800d130:	0800ced7 	.word	0x0800ced7

0800d134 <_printf_common>:
 800d134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d136:	0016      	movs	r6, r2
 800d138:	9301      	str	r3, [sp, #4]
 800d13a:	688a      	ldr	r2, [r1, #8]
 800d13c:	690b      	ldr	r3, [r1, #16]
 800d13e:	000c      	movs	r4, r1
 800d140:	9000      	str	r0, [sp, #0]
 800d142:	4293      	cmp	r3, r2
 800d144:	da00      	bge.n	800d148 <_printf_common+0x14>
 800d146:	0013      	movs	r3, r2
 800d148:	0022      	movs	r2, r4
 800d14a:	6033      	str	r3, [r6, #0]
 800d14c:	3243      	adds	r2, #67	@ 0x43
 800d14e:	7812      	ldrb	r2, [r2, #0]
 800d150:	2a00      	cmp	r2, #0
 800d152:	d001      	beq.n	800d158 <_printf_common+0x24>
 800d154:	3301      	adds	r3, #1
 800d156:	6033      	str	r3, [r6, #0]
 800d158:	6823      	ldr	r3, [r4, #0]
 800d15a:	069b      	lsls	r3, r3, #26
 800d15c:	d502      	bpl.n	800d164 <_printf_common+0x30>
 800d15e:	6833      	ldr	r3, [r6, #0]
 800d160:	3302      	adds	r3, #2
 800d162:	6033      	str	r3, [r6, #0]
 800d164:	6822      	ldr	r2, [r4, #0]
 800d166:	2306      	movs	r3, #6
 800d168:	0015      	movs	r5, r2
 800d16a:	401d      	ands	r5, r3
 800d16c:	421a      	tst	r2, r3
 800d16e:	d027      	beq.n	800d1c0 <_printf_common+0x8c>
 800d170:	0023      	movs	r3, r4
 800d172:	3343      	adds	r3, #67	@ 0x43
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	1e5a      	subs	r2, r3, #1
 800d178:	4193      	sbcs	r3, r2
 800d17a:	6822      	ldr	r2, [r4, #0]
 800d17c:	0692      	lsls	r2, r2, #26
 800d17e:	d430      	bmi.n	800d1e2 <_printf_common+0xae>
 800d180:	0022      	movs	r2, r4
 800d182:	9901      	ldr	r1, [sp, #4]
 800d184:	9800      	ldr	r0, [sp, #0]
 800d186:	9d08      	ldr	r5, [sp, #32]
 800d188:	3243      	adds	r2, #67	@ 0x43
 800d18a:	47a8      	blx	r5
 800d18c:	3001      	adds	r0, #1
 800d18e:	d025      	beq.n	800d1dc <_printf_common+0xa8>
 800d190:	2206      	movs	r2, #6
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	2500      	movs	r5, #0
 800d196:	4013      	ands	r3, r2
 800d198:	2b04      	cmp	r3, #4
 800d19a:	d105      	bne.n	800d1a8 <_printf_common+0x74>
 800d19c:	6833      	ldr	r3, [r6, #0]
 800d19e:	68e5      	ldr	r5, [r4, #12]
 800d1a0:	1aed      	subs	r5, r5, r3
 800d1a2:	43eb      	mvns	r3, r5
 800d1a4:	17db      	asrs	r3, r3, #31
 800d1a6:	401d      	ands	r5, r3
 800d1a8:	68a3      	ldr	r3, [r4, #8]
 800d1aa:	6922      	ldr	r2, [r4, #16]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	dd01      	ble.n	800d1b4 <_printf_common+0x80>
 800d1b0:	1a9b      	subs	r3, r3, r2
 800d1b2:	18ed      	adds	r5, r5, r3
 800d1b4:	2600      	movs	r6, #0
 800d1b6:	42b5      	cmp	r5, r6
 800d1b8:	d120      	bne.n	800d1fc <_printf_common+0xc8>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	e010      	b.n	800d1e0 <_printf_common+0xac>
 800d1be:	3501      	adds	r5, #1
 800d1c0:	68e3      	ldr	r3, [r4, #12]
 800d1c2:	6832      	ldr	r2, [r6, #0]
 800d1c4:	1a9b      	subs	r3, r3, r2
 800d1c6:	42ab      	cmp	r3, r5
 800d1c8:	ddd2      	ble.n	800d170 <_printf_common+0x3c>
 800d1ca:	0022      	movs	r2, r4
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	9901      	ldr	r1, [sp, #4]
 800d1d0:	9800      	ldr	r0, [sp, #0]
 800d1d2:	9f08      	ldr	r7, [sp, #32]
 800d1d4:	3219      	adds	r2, #25
 800d1d6:	47b8      	blx	r7
 800d1d8:	3001      	adds	r0, #1
 800d1da:	d1f0      	bne.n	800d1be <_printf_common+0x8a>
 800d1dc:	2001      	movs	r0, #1
 800d1de:	4240      	negs	r0, r0
 800d1e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1e2:	2030      	movs	r0, #48	@ 0x30
 800d1e4:	18e1      	adds	r1, r4, r3
 800d1e6:	3143      	adds	r1, #67	@ 0x43
 800d1e8:	7008      	strb	r0, [r1, #0]
 800d1ea:	0021      	movs	r1, r4
 800d1ec:	1c5a      	adds	r2, r3, #1
 800d1ee:	3145      	adds	r1, #69	@ 0x45
 800d1f0:	7809      	ldrb	r1, [r1, #0]
 800d1f2:	18a2      	adds	r2, r4, r2
 800d1f4:	3243      	adds	r2, #67	@ 0x43
 800d1f6:	3302      	adds	r3, #2
 800d1f8:	7011      	strb	r1, [r2, #0]
 800d1fa:	e7c1      	b.n	800d180 <_printf_common+0x4c>
 800d1fc:	0022      	movs	r2, r4
 800d1fe:	2301      	movs	r3, #1
 800d200:	9901      	ldr	r1, [sp, #4]
 800d202:	9800      	ldr	r0, [sp, #0]
 800d204:	9f08      	ldr	r7, [sp, #32]
 800d206:	321a      	adds	r2, #26
 800d208:	47b8      	blx	r7
 800d20a:	3001      	adds	r0, #1
 800d20c:	d0e6      	beq.n	800d1dc <_printf_common+0xa8>
 800d20e:	3601      	adds	r6, #1
 800d210:	e7d1      	b.n	800d1b6 <_printf_common+0x82>
	...

0800d214 <_printf_i>:
 800d214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d216:	b08b      	sub	sp, #44	@ 0x2c
 800d218:	9206      	str	r2, [sp, #24]
 800d21a:	000a      	movs	r2, r1
 800d21c:	3243      	adds	r2, #67	@ 0x43
 800d21e:	9307      	str	r3, [sp, #28]
 800d220:	9005      	str	r0, [sp, #20]
 800d222:	9203      	str	r2, [sp, #12]
 800d224:	7e0a      	ldrb	r2, [r1, #24]
 800d226:	000c      	movs	r4, r1
 800d228:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d22a:	2a78      	cmp	r2, #120	@ 0x78
 800d22c:	d809      	bhi.n	800d242 <_printf_i+0x2e>
 800d22e:	2a62      	cmp	r2, #98	@ 0x62
 800d230:	d80b      	bhi.n	800d24a <_printf_i+0x36>
 800d232:	2a00      	cmp	r2, #0
 800d234:	d100      	bne.n	800d238 <_printf_i+0x24>
 800d236:	e0bc      	b.n	800d3b2 <_printf_i+0x19e>
 800d238:	497b      	ldr	r1, [pc, #492]	@ (800d428 <_printf_i+0x214>)
 800d23a:	9104      	str	r1, [sp, #16]
 800d23c:	2a58      	cmp	r2, #88	@ 0x58
 800d23e:	d100      	bne.n	800d242 <_printf_i+0x2e>
 800d240:	e090      	b.n	800d364 <_printf_i+0x150>
 800d242:	0025      	movs	r5, r4
 800d244:	3542      	adds	r5, #66	@ 0x42
 800d246:	702a      	strb	r2, [r5, #0]
 800d248:	e022      	b.n	800d290 <_printf_i+0x7c>
 800d24a:	0010      	movs	r0, r2
 800d24c:	3863      	subs	r0, #99	@ 0x63
 800d24e:	2815      	cmp	r0, #21
 800d250:	d8f7      	bhi.n	800d242 <_printf_i+0x2e>
 800d252:	f7f2 ff73 	bl	800013c <__gnu_thumb1_case_shi>
 800d256:	0016      	.short	0x0016
 800d258:	fff6001f 	.word	0xfff6001f
 800d25c:	fff6fff6 	.word	0xfff6fff6
 800d260:	001ffff6 	.word	0x001ffff6
 800d264:	fff6fff6 	.word	0xfff6fff6
 800d268:	fff6fff6 	.word	0xfff6fff6
 800d26c:	003600a1 	.word	0x003600a1
 800d270:	fff60080 	.word	0xfff60080
 800d274:	00b2fff6 	.word	0x00b2fff6
 800d278:	0036fff6 	.word	0x0036fff6
 800d27c:	fff6fff6 	.word	0xfff6fff6
 800d280:	0084      	.short	0x0084
 800d282:	0025      	movs	r5, r4
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	3542      	adds	r5, #66	@ 0x42
 800d288:	1d11      	adds	r1, r2, #4
 800d28a:	6019      	str	r1, [r3, #0]
 800d28c:	6813      	ldr	r3, [r2, #0]
 800d28e:	702b      	strb	r3, [r5, #0]
 800d290:	2301      	movs	r3, #1
 800d292:	e0a0      	b.n	800d3d6 <_printf_i+0x1c2>
 800d294:	6818      	ldr	r0, [r3, #0]
 800d296:	6809      	ldr	r1, [r1, #0]
 800d298:	1d02      	adds	r2, r0, #4
 800d29a:	060d      	lsls	r5, r1, #24
 800d29c:	d50b      	bpl.n	800d2b6 <_printf_i+0xa2>
 800d29e:	6806      	ldr	r6, [r0, #0]
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	2e00      	cmp	r6, #0
 800d2a4:	da03      	bge.n	800d2ae <_printf_i+0x9a>
 800d2a6:	232d      	movs	r3, #45	@ 0x2d
 800d2a8:	9a03      	ldr	r2, [sp, #12]
 800d2aa:	4276      	negs	r6, r6
 800d2ac:	7013      	strb	r3, [r2, #0]
 800d2ae:	4b5e      	ldr	r3, [pc, #376]	@ (800d428 <_printf_i+0x214>)
 800d2b0:	270a      	movs	r7, #10
 800d2b2:	9304      	str	r3, [sp, #16]
 800d2b4:	e018      	b.n	800d2e8 <_printf_i+0xd4>
 800d2b6:	6806      	ldr	r6, [r0, #0]
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	0649      	lsls	r1, r1, #25
 800d2bc:	d5f1      	bpl.n	800d2a2 <_printf_i+0x8e>
 800d2be:	b236      	sxth	r6, r6
 800d2c0:	e7ef      	b.n	800d2a2 <_printf_i+0x8e>
 800d2c2:	6808      	ldr	r0, [r1, #0]
 800d2c4:	6819      	ldr	r1, [r3, #0]
 800d2c6:	c940      	ldmia	r1!, {r6}
 800d2c8:	0605      	lsls	r5, r0, #24
 800d2ca:	d402      	bmi.n	800d2d2 <_printf_i+0xbe>
 800d2cc:	0640      	lsls	r0, r0, #25
 800d2ce:	d500      	bpl.n	800d2d2 <_printf_i+0xbe>
 800d2d0:	b2b6      	uxth	r6, r6
 800d2d2:	6019      	str	r1, [r3, #0]
 800d2d4:	4b54      	ldr	r3, [pc, #336]	@ (800d428 <_printf_i+0x214>)
 800d2d6:	270a      	movs	r7, #10
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	2a6f      	cmp	r2, #111	@ 0x6f
 800d2dc:	d100      	bne.n	800d2e0 <_printf_i+0xcc>
 800d2de:	3f02      	subs	r7, #2
 800d2e0:	0023      	movs	r3, r4
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	3343      	adds	r3, #67	@ 0x43
 800d2e6:	701a      	strb	r2, [r3, #0]
 800d2e8:	6863      	ldr	r3, [r4, #4]
 800d2ea:	60a3      	str	r3, [r4, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	db03      	blt.n	800d2f8 <_printf_i+0xe4>
 800d2f0:	2104      	movs	r1, #4
 800d2f2:	6822      	ldr	r2, [r4, #0]
 800d2f4:	438a      	bics	r2, r1
 800d2f6:	6022      	str	r2, [r4, #0]
 800d2f8:	2e00      	cmp	r6, #0
 800d2fa:	d102      	bne.n	800d302 <_printf_i+0xee>
 800d2fc:	9d03      	ldr	r5, [sp, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00c      	beq.n	800d31c <_printf_i+0x108>
 800d302:	9d03      	ldr	r5, [sp, #12]
 800d304:	0030      	movs	r0, r6
 800d306:	0039      	movs	r1, r7
 800d308:	f7f2 ffa8 	bl	800025c <__aeabi_uidivmod>
 800d30c:	9b04      	ldr	r3, [sp, #16]
 800d30e:	3d01      	subs	r5, #1
 800d310:	5c5b      	ldrb	r3, [r3, r1]
 800d312:	702b      	strb	r3, [r5, #0]
 800d314:	0033      	movs	r3, r6
 800d316:	0006      	movs	r6, r0
 800d318:	429f      	cmp	r7, r3
 800d31a:	d9f3      	bls.n	800d304 <_printf_i+0xf0>
 800d31c:	2f08      	cmp	r7, #8
 800d31e:	d109      	bne.n	800d334 <_printf_i+0x120>
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	07db      	lsls	r3, r3, #31
 800d324:	d506      	bpl.n	800d334 <_printf_i+0x120>
 800d326:	6862      	ldr	r2, [r4, #4]
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	dc02      	bgt.n	800d334 <_printf_i+0x120>
 800d32e:	2330      	movs	r3, #48	@ 0x30
 800d330:	3d01      	subs	r5, #1
 800d332:	702b      	strb	r3, [r5, #0]
 800d334:	9b03      	ldr	r3, [sp, #12]
 800d336:	1b5b      	subs	r3, r3, r5
 800d338:	6123      	str	r3, [r4, #16]
 800d33a:	9b07      	ldr	r3, [sp, #28]
 800d33c:	0021      	movs	r1, r4
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	9805      	ldr	r0, [sp, #20]
 800d342:	9b06      	ldr	r3, [sp, #24]
 800d344:	aa09      	add	r2, sp, #36	@ 0x24
 800d346:	f7ff fef5 	bl	800d134 <_printf_common>
 800d34a:	3001      	adds	r0, #1
 800d34c:	d148      	bne.n	800d3e0 <_printf_i+0x1cc>
 800d34e:	2001      	movs	r0, #1
 800d350:	4240      	negs	r0, r0
 800d352:	b00b      	add	sp, #44	@ 0x2c
 800d354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d356:	2220      	movs	r2, #32
 800d358:	6809      	ldr	r1, [r1, #0]
 800d35a:	430a      	orrs	r2, r1
 800d35c:	6022      	str	r2, [r4, #0]
 800d35e:	2278      	movs	r2, #120	@ 0x78
 800d360:	4932      	ldr	r1, [pc, #200]	@ (800d42c <_printf_i+0x218>)
 800d362:	9104      	str	r1, [sp, #16]
 800d364:	0021      	movs	r1, r4
 800d366:	3145      	adds	r1, #69	@ 0x45
 800d368:	700a      	strb	r2, [r1, #0]
 800d36a:	6819      	ldr	r1, [r3, #0]
 800d36c:	6822      	ldr	r2, [r4, #0]
 800d36e:	c940      	ldmia	r1!, {r6}
 800d370:	0610      	lsls	r0, r2, #24
 800d372:	d402      	bmi.n	800d37a <_printf_i+0x166>
 800d374:	0650      	lsls	r0, r2, #25
 800d376:	d500      	bpl.n	800d37a <_printf_i+0x166>
 800d378:	b2b6      	uxth	r6, r6
 800d37a:	6019      	str	r1, [r3, #0]
 800d37c:	07d3      	lsls	r3, r2, #31
 800d37e:	d502      	bpl.n	800d386 <_printf_i+0x172>
 800d380:	2320      	movs	r3, #32
 800d382:	4313      	orrs	r3, r2
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	2e00      	cmp	r6, #0
 800d388:	d001      	beq.n	800d38e <_printf_i+0x17a>
 800d38a:	2710      	movs	r7, #16
 800d38c:	e7a8      	b.n	800d2e0 <_printf_i+0xcc>
 800d38e:	2220      	movs	r2, #32
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	4393      	bics	r3, r2
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	e7f8      	b.n	800d38a <_printf_i+0x176>
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	680d      	ldr	r5, [r1, #0]
 800d39c:	1d10      	adds	r0, r2, #4
 800d39e:	6949      	ldr	r1, [r1, #20]
 800d3a0:	6018      	str	r0, [r3, #0]
 800d3a2:	6813      	ldr	r3, [r2, #0]
 800d3a4:	062e      	lsls	r6, r5, #24
 800d3a6:	d501      	bpl.n	800d3ac <_printf_i+0x198>
 800d3a8:	6019      	str	r1, [r3, #0]
 800d3aa:	e002      	b.n	800d3b2 <_printf_i+0x19e>
 800d3ac:	066d      	lsls	r5, r5, #25
 800d3ae:	d5fb      	bpl.n	800d3a8 <_printf_i+0x194>
 800d3b0:	8019      	strh	r1, [r3, #0]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9d03      	ldr	r5, [sp, #12]
 800d3b6:	6123      	str	r3, [r4, #16]
 800d3b8:	e7bf      	b.n	800d33a <_printf_i+0x126>
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	1d11      	adds	r1, r2, #4
 800d3be:	6019      	str	r1, [r3, #0]
 800d3c0:	6815      	ldr	r5, [r2, #0]
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	0028      	movs	r0, r5
 800d3c6:	6862      	ldr	r2, [r4, #4]
 800d3c8:	f000 f9aa 	bl	800d720 <memchr>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d001      	beq.n	800d3d4 <_printf_i+0x1c0>
 800d3d0:	1b40      	subs	r0, r0, r5
 800d3d2:	6060      	str	r0, [r4, #4]
 800d3d4:	6863      	ldr	r3, [r4, #4]
 800d3d6:	6123      	str	r3, [r4, #16]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	9a03      	ldr	r2, [sp, #12]
 800d3dc:	7013      	strb	r3, [r2, #0]
 800d3de:	e7ac      	b.n	800d33a <_printf_i+0x126>
 800d3e0:	002a      	movs	r2, r5
 800d3e2:	6923      	ldr	r3, [r4, #16]
 800d3e4:	9906      	ldr	r1, [sp, #24]
 800d3e6:	9805      	ldr	r0, [sp, #20]
 800d3e8:	9d07      	ldr	r5, [sp, #28]
 800d3ea:	47a8      	blx	r5
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	d0ae      	beq.n	800d34e <_printf_i+0x13a>
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	079b      	lsls	r3, r3, #30
 800d3f4:	d415      	bmi.n	800d422 <_printf_i+0x20e>
 800d3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f8:	68e0      	ldr	r0, [r4, #12]
 800d3fa:	4298      	cmp	r0, r3
 800d3fc:	daa9      	bge.n	800d352 <_printf_i+0x13e>
 800d3fe:	0018      	movs	r0, r3
 800d400:	e7a7      	b.n	800d352 <_printf_i+0x13e>
 800d402:	0022      	movs	r2, r4
 800d404:	2301      	movs	r3, #1
 800d406:	9906      	ldr	r1, [sp, #24]
 800d408:	9805      	ldr	r0, [sp, #20]
 800d40a:	9e07      	ldr	r6, [sp, #28]
 800d40c:	3219      	adds	r2, #25
 800d40e:	47b0      	blx	r6
 800d410:	3001      	adds	r0, #1
 800d412:	d09c      	beq.n	800d34e <_printf_i+0x13a>
 800d414:	3501      	adds	r5, #1
 800d416:	68e3      	ldr	r3, [r4, #12]
 800d418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d41a:	1a9b      	subs	r3, r3, r2
 800d41c:	42ab      	cmp	r3, r5
 800d41e:	dcf0      	bgt.n	800d402 <_printf_i+0x1ee>
 800d420:	e7e9      	b.n	800d3f6 <_printf_i+0x1e2>
 800d422:	2500      	movs	r5, #0
 800d424:	e7f7      	b.n	800d416 <_printf_i+0x202>
 800d426:	46c0      	nop			@ (mov r8, r8)
 800d428:	0800e709 	.word	0x0800e709
 800d42c:	0800e71a 	.word	0x0800e71a

0800d430 <__sflush_r>:
 800d430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d432:	220c      	movs	r2, #12
 800d434:	5e8b      	ldrsh	r3, [r1, r2]
 800d436:	0005      	movs	r5, r0
 800d438:	000c      	movs	r4, r1
 800d43a:	071a      	lsls	r2, r3, #28
 800d43c:	d456      	bmi.n	800d4ec <__sflush_r+0xbc>
 800d43e:	684a      	ldr	r2, [r1, #4]
 800d440:	2a00      	cmp	r2, #0
 800d442:	dc02      	bgt.n	800d44a <__sflush_r+0x1a>
 800d444:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800d446:	2a00      	cmp	r2, #0
 800d448:	dd4e      	ble.n	800d4e8 <__sflush_r+0xb8>
 800d44a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d44c:	2f00      	cmp	r7, #0
 800d44e:	d04b      	beq.n	800d4e8 <__sflush_r+0xb8>
 800d450:	2200      	movs	r2, #0
 800d452:	2080      	movs	r0, #128	@ 0x80
 800d454:	682e      	ldr	r6, [r5, #0]
 800d456:	602a      	str	r2, [r5, #0]
 800d458:	001a      	movs	r2, r3
 800d45a:	0140      	lsls	r0, r0, #5
 800d45c:	6a21      	ldr	r1, [r4, #32]
 800d45e:	4002      	ands	r2, r0
 800d460:	4203      	tst	r3, r0
 800d462:	d033      	beq.n	800d4cc <__sflush_r+0x9c>
 800d464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	075b      	lsls	r3, r3, #29
 800d46a:	d506      	bpl.n	800d47a <__sflush_r+0x4a>
 800d46c:	6863      	ldr	r3, [r4, #4]
 800d46e:	1ad2      	subs	r2, r2, r3
 800d470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <__sflush_r+0x4a>
 800d476:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d478:	1ad2      	subs	r2, r2, r3
 800d47a:	2300      	movs	r3, #0
 800d47c:	0028      	movs	r0, r5
 800d47e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d480:	6a21      	ldr	r1, [r4, #32]
 800d482:	47b8      	blx	r7
 800d484:	89a2      	ldrh	r2, [r4, #12]
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	d106      	bne.n	800d498 <__sflush_r+0x68>
 800d48a:	6829      	ldr	r1, [r5, #0]
 800d48c:	291d      	cmp	r1, #29
 800d48e:	d846      	bhi.n	800d51e <__sflush_r+0xee>
 800d490:	4b29      	ldr	r3, [pc, #164]	@ (800d538 <__sflush_r+0x108>)
 800d492:	410b      	asrs	r3, r1
 800d494:	07db      	lsls	r3, r3, #31
 800d496:	d442      	bmi.n	800d51e <__sflush_r+0xee>
 800d498:	2300      	movs	r3, #0
 800d49a:	6063      	str	r3, [r4, #4]
 800d49c:	6923      	ldr	r3, [r4, #16]
 800d49e:	6023      	str	r3, [r4, #0]
 800d4a0:	04d2      	lsls	r2, r2, #19
 800d4a2:	d505      	bpl.n	800d4b0 <__sflush_r+0x80>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d102      	bne.n	800d4ae <__sflush_r+0x7e>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d100      	bne.n	800d4b0 <__sflush_r+0x80>
 800d4ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4b2:	602e      	str	r6, [r5, #0]
 800d4b4:	2900      	cmp	r1, #0
 800d4b6:	d017      	beq.n	800d4e8 <__sflush_r+0xb8>
 800d4b8:	0023      	movs	r3, r4
 800d4ba:	3344      	adds	r3, #68	@ 0x44
 800d4bc:	4299      	cmp	r1, r3
 800d4be:	d002      	beq.n	800d4c6 <__sflush_r+0x96>
 800d4c0:	0028      	movs	r0, r5
 800d4c2:	f7fe fa55 	bl	800b970 <_free_r>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4ca:	e00d      	b.n	800d4e8 <__sflush_r+0xb8>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	0028      	movs	r0, r5
 800d4d0:	47b8      	blx	r7
 800d4d2:	0002      	movs	r2, r0
 800d4d4:	1c43      	adds	r3, r0, #1
 800d4d6:	d1c6      	bne.n	800d466 <__sflush_r+0x36>
 800d4d8:	682b      	ldr	r3, [r5, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d0c3      	beq.n	800d466 <__sflush_r+0x36>
 800d4de:	2b1d      	cmp	r3, #29
 800d4e0:	d001      	beq.n	800d4e6 <__sflush_r+0xb6>
 800d4e2:	2b16      	cmp	r3, #22
 800d4e4:	d11a      	bne.n	800d51c <__sflush_r+0xec>
 800d4e6:	602e      	str	r6, [r5, #0]
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	e01e      	b.n	800d52a <__sflush_r+0xfa>
 800d4ec:	690e      	ldr	r6, [r1, #16]
 800d4ee:	2e00      	cmp	r6, #0
 800d4f0:	d0fa      	beq.n	800d4e8 <__sflush_r+0xb8>
 800d4f2:	680f      	ldr	r7, [r1, #0]
 800d4f4:	600e      	str	r6, [r1, #0]
 800d4f6:	1bba      	subs	r2, r7, r6
 800d4f8:	9201      	str	r2, [sp, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	079b      	lsls	r3, r3, #30
 800d4fe:	d100      	bne.n	800d502 <__sflush_r+0xd2>
 800d500:	694a      	ldr	r2, [r1, #20]
 800d502:	60a2      	str	r2, [r4, #8]
 800d504:	9b01      	ldr	r3, [sp, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	ddee      	ble.n	800d4e8 <__sflush_r+0xb8>
 800d50a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d50c:	0032      	movs	r2, r6
 800d50e:	001f      	movs	r7, r3
 800d510:	0028      	movs	r0, r5
 800d512:	9b01      	ldr	r3, [sp, #4]
 800d514:	6a21      	ldr	r1, [r4, #32]
 800d516:	47b8      	blx	r7
 800d518:	2800      	cmp	r0, #0
 800d51a:	dc07      	bgt.n	800d52c <__sflush_r+0xfc>
 800d51c:	89a2      	ldrh	r2, [r4, #12]
 800d51e:	2340      	movs	r3, #64	@ 0x40
 800d520:	2001      	movs	r0, #1
 800d522:	4313      	orrs	r3, r2
 800d524:	b21b      	sxth	r3, r3
 800d526:	81a3      	strh	r3, [r4, #12]
 800d528:	4240      	negs	r0, r0
 800d52a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d52c:	9b01      	ldr	r3, [sp, #4]
 800d52e:	1836      	adds	r6, r6, r0
 800d530:	1a1b      	subs	r3, r3, r0
 800d532:	9301      	str	r3, [sp, #4]
 800d534:	e7e6      	b.n	800d504 <__sflush_r+0xd4>
 800d536:	46c0      	nop			@ (mov r8, r8)
 800d538:	dfbffffe 	.word	0xdfbffffe

0800d53c <_fflush_r>:
 800d53c:	690b      	ldr	r3, [r1, #16]
 800d53e:	b570      	push	{r4, r5, r6, lr}
 800d540:	0005      	movs	r5, r0
 800d542:	000c      	movs	r4, r1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d102      	bne.n	800d54e <_fflush_r+0x12>
 800d548:	2500      	movs	r5, #0
 800d54a:	0028      	movs	r0, r5
 800d54c:	bd70      	pop	{r4, r5, r6, pc}
 800d54e:	2800      	cmp	r0, #0
 800d550:	d004      	beq.n	800d55c <_fflush_r+0x20>
 800d552:	6a03      	ldr	r3, [r0, #32]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <_fflush_r+0x20>
 800d558:	f7fe f8c6 	bl	800b6e8 <__sinit>
 800d55c:	220c      	movs	r2, #12
 800d55e:	5ea3      	ldrsh	r3, [r4, r2]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d0f1      	beq.n	800d548 <_fflush_r+0xc>
 800d564:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d566:	07d2      	lsls	r2, r2, #31
 800d568:	d404      	bmi.n	800d574 <_fflush_r+0x38>
 800d56a:	059b      	lsls	r3, r3, #22
 800d56c:	d402      	bmi.n	800d574 <_fflush_r+0x38>
 800d56e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d570:	f7fe f9ed 	bl	800b94e <__retarget_lock_acquire_recursive>
 800d574:	0028      	movs	r0, r5
 800d576:	0021      	movs	r1, r4
 800d578:	f7ff ff5a 	bl	800d430 <__sflush_r>
 800d57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d57e:	0005      	movs	r5, r0
 800d580:	07db      	lsls	r3, r3, #31
 800d582:	d4e2      	bmi.n	800d54a <_fflush_r+0xe>
 800d584:	89a3      	ldrh	r3, [r4, #12]
 800d586:	059b      	lsls	r3, r3, #22
 800d588:	d4df      	bmi.n	800d54a <_fflush_r+0xe>
 800d58a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d58c:	f7fe f9e0 	bl	800b950 <__retarget_lock_release_recursive>
 800d590:	e7db      	b.n	800d54a <_fflush_r+0xe>

0800d592 <__swbuf_r>:
 800d592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d594:	0006      	movs	r6, r0
 800d596:	000d      	movs	r5, r1
 800d598:	0014      	movs	r4, r2
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d004      	beq.n	800d5a8 <__swbuf_r+0x16>
 800d59e:	6a03      	ldr	r3, [r0, #32]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d101      	bne.n	800d5a8 <__swbuf_r+0x16>
 800d5a4:	f7fe f8a0 	bl	800b6e8 <__sinit>
 800d5a8:	69a3      	ldr	r3, [r4, #24]
 800d5aa:	60a3      	str	r3, [r4, #8]
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	071b      	lsls	r3, r3, #28
 800d5b0:	d502      	bpl.n	800d5b8 <__swbuf_r+0x26>
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d109      	bne.n	800d5cc <__swbuf_r+0x3a>
 800d5b8:	0021      	movs	r1, r4
 800d5ba:	0030      	movs	r0, r6
 800d5bc:	f000 f82c 	bl	800d618 <__swsetup_r>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d003      	beq.n	800d5cc <__swbuf_r+0x3a>
 800d5c4:	2501      	movs	r5, #1
 800d5c6:	426d      	negs	r5, r5
 800d5c8:	0028      	movs	r0, r5
 800d5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5cc:	6923      	ldr	r3, [r4, #16]
 800d5ce:	6820      	ldr	r0, [r4, #0]
 800d5d0:	b2ef      	uxtb	r7, r5
 800d5d2:	1ac0      	subs	r0, r0, r3
 800d5d4:	6963      	ldr	r3, [r4, #20]
 800d5d6:	b2ed      	uxtb	r5, r5
 800d5d8:	4283      	cmp	r3, r0
 800d5da:	dc05      	bgt.n	800d5e8 <__swbuf_r+0x56>
 800d5dc:	0021      	movs	r1, r4
 800d5de:	0030      	movs	r0, r6
 800d5e0:	f7ff ffac 	bl	800d53c <_fflush_r>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d1ed      	bne.n	800d5c4 <__swbuf_r+0x32>
 800d5e8:	68a3      	ldr	r3, [r4, #8]
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	60a3      	str	r3, [r4, #8]
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	6022      	str	r2, [r4, #0]
 800d5f6:	701f      	strb	r7, [r3, #0]
 800d5f8:	6963      	ldr	r3, [r4, #20]
 800d5fa:	4283      	cmp	r3, r0
 800d5fc:	d004      	beq.n	800d608 <__swbuf_r+0x76>
 800d5fe:	89a3      	ldrh	r3, [r4, #12]
 800d600:	07db      	lsls	r3, r3, #31
 800d602:	d5e1      	bpl.n	800d5c8 <__swbuf_r+0x36>
 800d604:	2d0a      	cmp	r5, #10
 800d606:	d1df      	bne.n	800d5c8 <__swbuf_r+0x36>
 800d608:	0021      	movs	r1, r4
 800d60a:	0030      	movs	r0, r6
 800d60c:	f7ff ff96 	bl	800d53c <_fflush_r>
 800d610:	2800      	cmp	r0, #0
 800d612:	d0d9      	beq.n	800d5c8 <__swbuf_r+0x36>
 800d614:	e7d6      	b.n	800d5c4 <__swbuf_r+0x32>
	...

0800d618 <__swsetup_r>:
 800d618:	4b2d      	ldr	r3, [pc, #180]	@ (800d6d0 <__swsetup_r+0xb8>)
 800d61a:	b570      	push	{r4, r5, r6, lr}
 800d61c:	0005      	movs	r5, r0
 800d61e:	6818      	ldr	r0, [r3, #0]
 800d620:	000c      	movs	r4, r1
 800d622:	2800      	cmp	r0, #0
 800d624:	d004      	beq.n	800d630 <__swsetup_r+0x18>
 800d626:	6a03      	ldr	r3, [r0, #32]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d101      	bne.n	800d630 <__swsetup_r+0x18>
 800d62c:	f7fe f85c 	bl	800b6e8 <__sinit>
 800d630:	230c      	movs	r3, #12
 800d632:	5ee2      	ldrsh	r2, [r4, r3]
 800d634:	0713      	lsls	r3, r2, #28
 800d636:	d423      	bmi.n	800d680 <__swsetup_r+0x68>
 800d638:	06d3      	lsls	r3, r2, #27
 800d63a:	d407      	bmi.n	800d64c <__swsetup_r+0x34>
 800d63c:	2309      	movs	r3, #9
 800d63e:	602b      	str	r3, [r5, #0]
 800d640:	2340      	movs	r3, #64	@ 0x40
 800d642:	2001      	movs	r0, #1
 800d644:	4313      	orrs	r3, r2
 800d646:	81a3      	strh	r3, [r4, #12]
 800d648:	4240      	negs	r0, r0
 800d64a:	e03a      	b.n	800d6c2 <__swsetup_r+0xaa>
 800d64c:	0752      	lsls	r2, r2, #29
 800d64e:	d513      	bpl.n	800d678 <__swsetup_r+0x60>
 800d650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d652:	2900      	cmp	r1, #0
 800d654:	d008      	beq.n	800d668 <__swsetup_r+0x50>
 800d656:	0023      	movs	r3, r4
 800d658:	3344      	adds	r3, #68	@ 0x44
 800d65a:	4299      	cmp	r1, r3
 800d65c:	d002      	beq.n	800d664 <__swsetup_r+0x4c>
 800d65e:	0028      	movs	r0, r5
 800d660:	f7fe f986 	bl	800b970 <_free_r>
 800d664:	2300      	movs	r3, #0
 800d666:	6363      	str	r3, [r4, #52]	@ 0x34
 800d668:	2224      	movs	r2, #36	@ 0x24
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	4393      	bics	r3, r2
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	2300      	movs	r3, #0
 800d672:	6063      	str	r3, [r4, #4]
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	6023      	str	r3, [r4, #0]
 800d678:	2308      	movs	r3, #8
 800d67a:	89a2      	ldrh	r2, [r4, #12]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	81a3      	strh	r3, [r4, #12]
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10b      	bne.n	800d69e <__swsetup_r+0x86>
 800d686:	21a0      	movs	r1, #160	@ 0xa0
 800d688:	2280      	movs	r2, #128	@ 0x80
 800d68a:	89a3      	ldrh	r3, [r4, #12]
 800d68c:	0089      	lsls	r1, r1, #2
 800d68e:	0092      	lsls	r2, r2, #2
 800d690:	400b      	ands	r3, r1
 800d692:	4293      	cmp	r3, r2
 800d694:	d003      	beq.n	800d69e <__swsetup_r+0x86>
 800d696:	0021      	movs	r1, r4
 800d698:	0028      	movs	r0, r5
 800d69a:	f000 f90d 	bl	800d8b8 <__smakebuf_r>
 800d69e:	230c      	movs	r3, #12
 800d6a0:	5ee2      	ldrsh	r2, [r4, r3]
 800d6a2:	2101      	movs	r1, #1
 800d6a4:	0013      	movs	r3, r2
 800d6a6:	400b      	ands	r3, r1
 800d6a8:	420a      	tst	r2, r1
 800d6aa:	d00b      	beq.n	800d6c4 <__swsetup_r+0xac>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	60a3      	str	r3, [r4, #8]
 800d6b0:	6963      	ldr	r3, [r4, #20]
 800d6b2:	425b      	negs	r3, r3
 800d6b4:	61a3      	str	r3, [r4, #24]
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	4283      	cmp	r3, r0
 800d6bc:	d101      	bne.n	800d6c2 <__swsetup_r+0xaa>
 800d6be:	0613      	lsls	r3, r2, #24
 800d6c0:	d4be      	bmi.n	800d640 <__swsetup_r+0x28>
 800d6c2:	bd70      	pop	{r4, r5, r6, pc}
 800d6c4:	0791      	lsls	r1, r2, #30
 800d6c6:	d400      	bmi.n	800d6ca <__swsetup_r+0xb2>
 800d6c8:	6963      	ldr	r3, [r4, #20]
 800d6ca:	60a3      	str	r3, [r4, #8]
 800d6cc:	e7f3      	b.n	800d6b6 <__swsetup_r+0x9e>
 800d6ce:	46c0      	nop			@ (mov r8, r8)
 800d6d0:	20001008 	.word	0x20001008

0800d6d4 <memmove>:
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	4288      	cmp	r0, r1
 800d6d8:	d806      	bhi.n	800d6e8 <memmove+0x14>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d008      	beq.n	800d6f2 <memmove+0x1e>
 800d6e0:	5ccc      	ldrb	r4, [r1, r3]
 800d6e2:	54c4      	strb	r4, [r0, r3]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	e7f9      	b.n	800d6dc <memmove+0x8>
 800d6e8:	188b      	adds	r3, r1, r2
 800d6ea:	4298      	cmp	r0, r3
 800d6ec:	d2f5      	bcs.n	800d6da <memmove+0x6>
 800d6ee:	3a01      	subs	r2, #1
 800d6f0:	d200      	bcs.n	800d6f4 <memmove+0x20>
 800d6f2:	bd10      	pop	{r4, pc}
 800d6f4:	5c8b      	ldrb	r3, [r1, r2]
 800d6f6:	5483      	strb	r3, [r0, r2]
 800d6f8:	e7f9      	b.n	800d6ee <memmove+0x1a>
	...

0800d6fc <_sbrk_r>:
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	b570      	push	{r4, r5, r6, lr}
 800d700:	4d06      	ldr	r5, [pc, #24]	@ (800d71c <_sbrk_r+0x20>)
 800d702:	0004      	movs	r4, r0
 800d704:	0008      	movs	r0, r1
 800d706:	602b      	str	r3, [r5, #0]
 800d708:	f7f7 fc80 	bl	800500c <_sbrk>
 800d70c:	1c43      	adds	r3, r0, #1
 800d70e:	d103      	bne.n	800d718 <_sbrk_r+0x1c>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d000      	beq.n	800d718 <_sbrk_r+0x1c>
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	bd70      	pop	{r4, r5, r6, pc}
 800d71a:	46c0      	nop			@ (mov r8, r8)
 800d71c:	20002248 	.word	0x20002248

0800d720 <memchr>:
 800d720:	b2c9      	uxtb	r1, r1
 800d722:	1882      	adds	r2, r0, r2
 800d724:	4290      	cmp	r0, r2
 800d726:	d101      	bne.n	800d72c <memchr+0xc>
 800d728:	2000      	movs	r0, #0
 800d72a:	4770      	bx	lr
 800d72c:	7803      	ldrb	r3, [r0, #0]
 800d72e:	428b      	cmp	r3, r1
 800d730:	d0fb      	beq.n	800d72a <memchr+0xa>
 800d732:	3001      	adds	r0, #1
 800d734:	e7f6      	b.n	800d724 <memchr+0x4>
	...

0800d738 <__assert_func>:
 800d738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d73a:	0014      	movs	r4, r2
 800d73c:	001a      	movs	r2, r3
 800d73e:	4b09      	ldr	r3, [pc, #36]	@ (800d764 <__assert_func+0x2c>)
 800d740:	0005      	movs	r5, r0
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	000e      	movs	r6, r1
 800d746:	68d8      	ldr	r0, [r3, #12]
 800d748:	4b07      	ldr	r3, [pc, #28]	@ (800d768 <__assert_func+0x30>)
 800d74a:	2c00      	cmp	r4, #0
 800d74c:	d101      	bne.n	800d752 <__assert_func+0x1a>
 800d74e:	4b07      	ldr	r3, [pc, #28]	@ (800d76c <__assert_func+0x34>)
 800d750:	001c      	movs	r4, r3
 800d752:	4907      	ldr	r1, [pc, #28]	@ (800d770 <__assert_func+0x38>)
 800d754:	9301      	str	r3, [sp, #4]
 800d756:	9402      	str	r4, [sp, #8]
 800d758:	002b      	movs	r3, r5
 800d75a:	9600      	str	r6, [sp, #0]
 800d75c:	f000 f872 	bl	800d844 <fiprintf>
 800d760:	f000 f910 	bl	800d984 <abort>
 800d764:	20001008 	.word	0x20001008
 800d768:	0800e72b 	.word	0x0800e72b
 800d76c:	0800e766 	.word	0x0800e766
 800d770:	0800e738 	.word	0x0800e738

0800d774 <_calloc_r>:
 800d774:	b570      	push	{r4, r5, r6, lr}
 800d776:	0c0b      	lsrs	r3, r1, #16
 800d778:	0c15      	lsrs	r5, r2, #16
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d11e      	bne.n	800d7bc <_calloc_r+0x48>
 800d77e:	2d00      	cmp	r5, #0
 800d780:	d10c      	bne.n	800d79c <_calloc_r+0x28>
 800d782:	b289      	uxth	r1, r1
 800d784:	b294      	uxth	r4, r2
 800d786:	434c      	muls	r4, r1
 800d788:	0021      	movs	r1, r4
 800d78a:	f7fe fcb7 	bl	800c0fc <_malloc_r>
 800d78e:	1e05      	subs	r5, r0, #0
 800d790:	d01a      	beq.n	800d7c8 <_calloc_r+0x54>
 800d792:	0022      	movs	r2, r4
 800d794:	2100      	movs	r1, #0
 800d796:	f7fe f847 	bl	800b828 <memset>
 800d79a:	e016      	b.n	800d7ca <_calloc_r+0x56>
 800d79c:	1c2b      	adds	r3, r5, #0
 800d79e:	1c0c      	adds	r4, r1, #0
 800d7a0:	b289      	uxth	r1, r1
 800d7a2:	b292      	uxth	r2, r2
 800d7a4:	434a      	muls	r2, r1
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	b2a1      	uxth	r1, r4
 800d7aa:	4359      	muls	r1, r3
 800d7ac:	0c14      	lsrs	r4, r2, #16
 800d7ae:	190c      	adds	r4, r1, r4
 800d7b0:	0c23      	lsrs	r3, r4, #16
 800d7b2:	d107      	bne.n	800d7c4 <_calloc_r+0x50>
 800d7b4:	0424      	lsls	r4, r4, #16
 800d7b6:	b292      	uxth	r2, r2
 800d7b8:	4314      	orrs	r4, r2
 800d7ba:	e7e5      	b.n	800d788 <_calloc_r+0x14>
 800d7bc:	2d00      	cmp	r5, #0
 800d7be:	d101      	bne.n	800d7c4 <_calloc_r+0x50>
 800d7c0:	1c14      	adds	r4, r2, #0
 800d7c2:	e7ed      	b.n	800d7a0 <_calloc_r+0x2c>
 800d7c4:	230c      	movs	r3, #12
 800d7c6:	6003      	str	r3, [r0, #0]
 800d7c8:	2500      	movs	r5, #0
 800d7ca:	0028      	movs	r0, r5
 800d7cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d7d0 <malloc>:
 800d7d0:	b510      	push	{r4, lr}
 800d7d2:	4b03      	ldr	r3, [pc, #12]	@ (800d7e0 <malloc+0x10>)
 800d7d4:	0001      	movs	r1, r0
 800d7d6:	6818      	ldr	r0, [r3, #0]
 800d7d8:	f7fe fc90 	bl	800c0fc <_malloc_r>
 800d7dc:	bd10      	pop	{r4, pc}
 800d7de:	46c0      	nop			@ (mov r8, r8)
 800d7e0:	20001008 	.word	0x20001008

0800d7e4 <_realloc_r>:
 800d7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7e6:	0006      	movs	r6, r0
 800d7e8:	000c      	movs	r4, r1
 800d7ea:	0015      	movs	r5, r2
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	d105      	bne.n	800d7fc <_realloc_r+0x18>
 800d7f0:	0011      	movs	r1, r2
 800d7f2:	f7fe fc83 	bl	800c0fc <_malloc_r>
 800d7f6:	0004      	movs	r4, r0
 800d7f8:	0020      	movs	r0, r4
 800d7fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7fc:	2a00      	cmp	r2, #0
 800d7fe:	d103      	bne.n	800d808 <_realloc_r+0x24>
 800d800:	f7fe f8b6 	bl	800b970 <_free_r>
 800d804:	2400      	movs	r4, #0
 800d806:	e7f7      	b.n	800d7f8 <_realloc_r+0x14>
 800d808:	f000 f8c3 	bl	800d992 <_malloc_usable_size_r>
 800d80c:	0007      	movs	r7, r0
 800d80e:	4285      	cmp	r5, r0
 800d810:	d802      	bhi.n	800d818 <_realloc_r+0x34>
 800d812:	0843      	lsrs	r3, r0, #1
 800d814:	42ab      	cmp	r3, r5
 800d816:	d3ef      	bcc.n	800d7f8 <_realloc_r+0x14>
 800d818:	0029      	movs	r1, r5
 800d81a:	0030      	movs	r0, r6
 800d81c:	f7fe fc6e 	bl	800c0fc <_malloc_r>
 800d820:	9001      	str	r0, [sp, #4]
 800d822:	2800      	cmp	r0, #0
 800d824:	d0ee      	beq.n	800d804 <_realloc_r+0x20>
 800d826:	002a      	movs	r2, r5
 800d828:	42bd      	cmp	r5, r7
 800d82a:	d900      	bls.n	800d82e <_realloc_r+0x4a>
 800d82c:	003a      	movs	r2, r7
 800d82e:	0021      	movs	r1, r4
 800d830:	9801      	ldr	r0, [sp, #4]
 800d832:	f7fe f88e 	bl	800b952 <memcpy>
 800d836:	0021      	movs	r1, r4
 800d838:	0030      	movs	r0, r6
 800d83a:	f7fe f899 	bl	800b970 <_free_r>
 800d83e:	9c01      	ldr	r4, [sp, #4]
 800d840:	e7da      	b.n	800d7f8 <_realloc_r+0x14>
	...

0800d844 <fiprintf>:
 800d844:	b40e      	push	{r1, r2, r3}
 800d846:	b517      	push	{r0, r1, r2, r4, lr}
 800d848:	4c05      	ldr	r4, [pc, #20]	@ (800d860 <fiprintf+0x1c>)
 800d84a:	ab05      	add	r3, sp, #20
 800d84c:	cb04      	ldmia	r3!, {r2}
 800d84e:	0001      	movs	r1, r0
 800d850:	6820      	ldr	r0, [r4, #0]
 800d852:	9301      	str	r3, [sp, #4]
 800d854:	f7ff fb52 	bl	800cefc <_vfiprintf_r>
 800d858:	bc1e      	pop	{r1, r2, r3, r4}
 800d85a:	bc08      	pop	{r3}
 800d85c:	b003      	add	sp, #12
 800d85e:	4718      	bx	r3
 800d860:	20001008 	.word	0x20001008

0800d864 <__swhatbuf_r>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	000e      	movs	r6, r1
 800d868:	001d      	movs	r5, r3
 800d86a:	230e      	movs	r3, #14
 800d86c:	5ec9      	ldrsh	r1, [r1, r3]
 800d86e:	0014      	movs	r4, r2
 800d870:	b096      	sub	sp, #88	@ 0x58
 800d872:	2900      	cmp	r1, #0
 800d874:	da0c      	bge.n	800d890 <__swhatbuf_r+0x2c>
 800d876:	89b2      	ldrh	r2, [r6, #12]
 800d878:	2380      	movs	r3, #128	@ 0x80
 800d87a:	0011      	movs	r1, r2
 800d87c:	4019      	ands	r1, r3
 800d87e:	421a      	tst	r2, r3
 800d880:	d114      	bne.n	800d8ac <__swhatbuf_r+0x48>
 800d882:	2380      	movs	r3, #128	@ 0x80
 800d884:	00db      	lsls	r3, r3, #3
 800d886:	2000      	movs	r0, #0
 800d888:	6029      	str	r1, [r5, #0]
 800d88a:	6023      	str	r3, [r4, #0]
 800d88c:	b016      	add	sp, #88	@ 0x58
 800d88e:	bd70      	pop	{r4, r5, r6, pc}
 800d890:	466a      	mov	r2, sp
 800d892:	f000 f853 	bl	800d93c <_fstat_r>
 800d896:	2800      	cmp	r0, #0
 800d898:	dbed      	blt.n	800d876 <__swhatbuf_r+0x12>
 800d89a:	23f0      	movs	r3, #240	@ 0xf0
 800d89c:	9901      	ldr	r1, [sp, #4]
 800d89e:	021b      	lsls	r3, r3, #8
 800d8a0:	4019      	ands	r1, r3
 800d8a2:	4b04      	ldr	r3, [pc, #16]	@ (800d8b4 <__swhatbuf_r+0x50>)
 800d8a4:	18c9      	adds	r1, r1, r3
 800d8a6:	424b      	negs	r3, r1
 800d8a8:	4159      	adcs	r1, r3
 800d8aa:	e7ea      	b.n	800d882 <__swhatbuf_r+0x1e>
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	2340      	movs	r3, #64	@ 0x40
 800d8b0:	e7e9      	b.n	800d886 <__swhatbuf_r+0x22>
 800d8b2:	46c0      	nop			@ (mov r8, r8)
 800d8b4:	ffffe000 	.word	0xffffe000

0800d8b8 <__smakebuf_r>:
 800d8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ba:	2602      	movs	r6, #2
 800d8bc:	898b      	ldrh	r3, [r1, #12]
 800d8be:	0005      	movs	r5, r0
 800d8c0:	000c      	movs	r4, r1
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	4233      	tst	r3, r6
 800d8c6:	d007      	beq.n	800d8d8 <__smakebuf_r+0x20>
 800d8c8:	0023      	movs	r3, r4
 800d8ca:	3347      	adds	r3, #71	@ 0x47
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	6163      	str	r3, [r4, #20]
 800d8d4:	b005      	add	sp, #20
 800d8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d8:	ab03      	add	r3, sp, #12
 800d8da:	aa02      	add	r2, sp, #8
 800d8dc:	f7ff ffc2 	bl	800d864 <__swhatbuf_r>
 800d8e0:	9f02      	ldr	r7, [sp, #8]
 800d8e2:	9001      	str	r0, [sp, #4]
 800d8e4:	0039      	movs	r1, r7
 800d8e6:	0028      	movs	r0, r5
 800d8e8:	f7fe fc08 	bl	800c0fc <_malloc_r>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	d108      	bne.n	800d902 <__smakebuf_r+0x4a>
 800d8f0:	220c      	movs	r2, #12
 800d8f2:	5ea3      	ldrsh	r3, [r4, r2]
 800d8f4:	059a      	lsls	r2, r3, #22
 800d8f6:	d4ed      	bmi.n	800d8d4 <__smakebuf_r+0x1c>
 800d8f8:	2203      	movs	r2, #3
 800d8fa:	4393      	bics	r3, r2
 800d8fc:	431e      	orrs	r6, r3
 800d8fe:	81a6      	strh	r6, [r4, #12]
 800d900:	e7e2      	b.n	800d8c8 <__smakebuf_r+0x10>
 800d902:	2380      	movs	r3, #128	@ 0x80
 800d904:	89a2      	ldrh	r2, [r4, #12]
 800d906:	6020      	str	r0, [r4, #0]
 800d908:	4313      	orrs	r3, r2
 800d90a:	81a3      	strh	r3, [r4, #12]
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	6120      	str	r0, [r4, #16]
 800d910:	6167      	str	r7, [r4, #20]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00c      	beq.n	800d930 <__smakebuf_r+0x78>
 800d916:	0028      	movs	r0, r5
 800d918:	230e      	movs	r3, #14
 800d91a:	5ee1      	ldrsh	r1, [r4, r3]
 800d91c:	f000 f820 	bl	800d960 <_isatty_r>
 800d920:	2800      	cmp	r0, #0
 800d922:	d005      	beq.n	800d930 <__smakebuf_r+0x78>
 800d924:	2303      	movs	r3, #3
 800d926:	89a2      	ldrh	r2, [r4, #12]
 800d928:	439a      	bics	r2, r3
 800d92a:	3b02      	subs	r3, #2
 800d92c:	4313      	orrs	r3, r2
 800d92e:	81a3      	strh	r3, [r4, #12]
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	9a01      	ldr	r2, [sp, #4]
 800d934:	4313      	orrs	r3, r2
 800d936:	81a3      	strh	r3, [r4, #12]
 800d938:	e7cc      	b.n	800d8d4 <__smakebuf_r+0x1c>
	...

0800d93c <_fstat_r>:
 800d93c:	2300      	movs	r3, #0
 800d93e:	b570      	push	{r4, r5, r6, lr}
 800d940:	4d06      	ldr	r5, [pc, #24]	@ (800d95c <_fstat_r+0x20>)
 800d942:	0004      	movs	r4, r0
 800d944:	0008      	movs	r0, r1
 800d946:	0011      	movs	r1, r2
 800d948:	602b      	str	r3, [r5, #0]
 800d94a:	f7f7 fb3d 	bl	8004fc8 <_fstat>
 800d94e:	1c43      	adds	r3, r0, #1
 800d950:	d103      	bne.n	800d95a <_fstat_r+0x1e>
 800d952:	682b      	ldr	r3, [r5, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d000      	beq.n	800d95a <_fstat_r+0x1e>
 800d958:	6023      	str	r3, [r4, #0]
 800d95a:	bd70      	pop	{r4, r5, r6, pc}
 800d95c:	20002248 	.word	0x20002248

0800d960 <_isatty_r>:
 800d960:	2300      	movs	r3, #0
 800d962:	b570      	push	{r4, r5, r6, lr}
 800d964:	4d06      	ldr	r5, [pc, #24]	@ (800d980 <_isatty_r+0x20>)
 800d966:	0004      	movs	r4, r0
 800d968:	0008      	movs	r0, r1
 800d96a:	602b      	str	r3, [r5, #0]
 800d96c:	f7f7 fb3a 	bl	8004fe4 <_isatty>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	d103      	bne.n	800d97c <_isatty_r+0x1c>
 800d974:	682b      	ldr	r3, [r5, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d000      	beq.n	800d97c <_isatty_r+0x1c>
 800d97a:	6023      	str	r3, [r4, #0]
 800d97c:	bd70      	pop	{r4, r5, r6, pc}
 800d97e:	46c0      	nop			@ (mov r8, r8)
 800d980:	20002248 	.word	0x20002248

0800d984 <abort>:
 800d984:	2006      	movs	r0, #6
 800d986:	b510      	push	{r4, lr}
 800d988:	f000 f834 	bl	800d9f4 <raise>
 800d98c:	2001      	movs	r0, #1
 800d98e:	f7f7 facb 	bl	8004f28 <_exit>

0800d992 <_malloc_usable_size_r>:
 800d992:	1f0b      	subs	r3, r1, #4
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	1f18      	subs	r0, r3, #4
 800d998:	2b00      	cmp	r3, #0
 800d99a:	da01      	bge.n	800d9a0 <_malloc_usable_size_r+0xe>
 800d99c:	580b      	ldr	r3, [r1, r0]
 800d99e:	18c0      	adds	r0, r0, r3
 800d9a0:	4770      	bx	lr

0800d9a2 <_raise_r>:
 800d9a2:	b570      	push	{r4, r5, r6, lr}
 800d9a4:	0004      	movs	r4, r0
 800d9a6:	000d      	movs	r5, r1
 800d9a8:	291f      	cmp	r1, #31
 800d9aa:	d904      	bls.n	800d9b6 <_raise_r+0x14>
 800d9ac:	2316      	movs	r3, #22
 800d9ae:	6003      	str	r3, [r0, #0]
 800d9b0:	2001      	movs	r0, #1
 800d9b2:	4240      	negs	r0, r0
 800d9b4:	bd70      	pop	{r4, r5, r6, pc}
 800d9b6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d004      	beq.n	800d9c6 <_raise_r+0x24>
 800d9bc:	008a      	lsls	r2, r1, #2
 800d9be:	189b      	adds	r3, r3, r2
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	2a00      	cmp	r2, #0
 800d9c4:	d108      	bne.n	800d9d8 <_raise_r+0x36>
 800d9c6:	0020      	movs	r0, r4
 800d9c8:	f000 f830 	bl	800da2c <_getpid_r>
 800d9cc:	002a      	movs	r2, r5
 800d9ce:	0001      	movs	r1, r0
 800d9d0:	0020      	movs	r0, r4
 800d9d2:	f000 f819 	bl	800da08 <_kill_r>
 800d9d6:	e7ed      	b.n	800d9b4 <_raise_r+0x12>
 800d9d8:	2a01      	cmp	r2, #1
 800d9da:	d009      	beq.n	800d9f0 <_raise_r+0x4e>
 800d9dc:	1c51      	adds	r1, r2, #1
 800d9de:	d103      	bne.n	800d9e8 <_raise_r+0x46>
 800d9e0:	2316      	movs	r3, #22
 800d9e2:	6003      	str	r3, [r0, #0]
 800d9e4:	2001      	movs	r0, #1
 800d9e6:	e7e5      	b.n	800d9b4 <_raise_r+0x12>
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	0028      	movs	r0, r5
 800d9ec:	6019      	str	r1, [r3, #0]
 800d9ee:	4790      	blx	r2
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	e7df      	b.n	800d9b4 <_raise_r+0x12>

0800d9f4 <raise>:
 800d9f4:	b510      	push	{r4, lr}
 800d9f6:	4b03      	ldr	r3, [pc, #12]	@ (800da04 <raise+0x10>)
 800d9f8:	0001      	movs	r1, r0
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	f7ff ffd1 	bl	800d9a2 <_raise_r>
 800da00:	bd10      	pop	{r4, pc}
 800da02:	46c0      	nop			@ (mov r8, r8)
 800da04:	20001008 	.word	0x20001008

0800da08 <_kill_r>:
 800da08:	2300      	movs	r3, #0
 800da0a:	b570      	push	{r4, r5, r6, lr}
 800da0c:	4d06      	ldr	r5, [pc, #24]	@ (800da28 <_kill_r+0x20>)
 800da0e:	0004      	movs	r4, r0
 800da10:	0008      	movs	r0, r1
 800da12:	0011      	movs	r1, r2
 800da14:	602b      	str	r3, [r5, #0]
 800da16:	f7f7 fa77 	bl	8004f08 <_kill>
 800da1a:	1c43      	adds	r3, r0, #1
 800da1c:	d103      	bne.n	800da26 <_kill_r+0x1e>
 800da1e:	682b      	ldr	r3, [r5, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d000      	beq.n	800da26 <_kill_r+0x1e>
 800da24:	6023      	str	r3, [r4, #0]
 800da26:	bd70      	pop	{r4, r5, r6, pc}
 800da28:	20002248 	.word	0x20002248

0800da2c <_getpid_r>:
 800da2c:	b510      	push	{r4, lr}
 800da2e:	f7f7 fa65 	bl	8004efc <_getpid>
 800da32:	bd10      	pop	{r4, pc}

0800da34 <_init>:
 800da34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da36:	46c0      	nop			@ (mov r8, r8)
 800da38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da3a:	bc08      	pop	{r3}
 800da3c:	469e      	mov	lr, r3
 800da3e:	4770      	bx	lr

0800da40 <_fini>:
 800da40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da42:	46c0      	nop			@ (mov r8, r8)
 800da44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da46:	bc08      	pop	{r3}
 800da48:	469e      	mov	lr, r3
 800da4a:	4770      	bx	lr
