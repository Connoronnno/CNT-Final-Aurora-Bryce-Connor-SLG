
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d88  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  08010e48  08010e48  00011e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011da0  08011da0  00013b90  2**0
                  CONTENTS
  4 .ARM          00000008  08011da0  08011da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011da8  08011da8  00013b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011da8  08011da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011dac  08011dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b90  20000000  08011db0  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  20000b90  08012940  00013b90  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f74  08012940  00013f74  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00013b90  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd44  00000000  00000000  00013bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f7  00000000  00000000  000308fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001575  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202e5  00000000  00000000  000372e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002076b  00000000  00000000  000575ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbce7  00000000  00000000  00077d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143a1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b8  00000000  00000000  00143a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0014b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000b90 	.word	0x20000b90
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08010e2c 	.word	0x08010e2c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000b94 	.word	0x20000b94
 8000100:	08010e2c 	.word	0x08010e2c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f843 	bl	80024d8 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 ff83 	bl	8002368 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f835 	bl	80024d8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f82b 	bl	80024d8 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ffad 	bl	80023f0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 ffa3 	bl	80023f0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcf5 	bl	8000eb0 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc75 	bl	8000dc0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fce7 	bl	8000eb0 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fcdd 	bl	8000eb0 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc83 	bl	8000e10 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc79 	bl	8000e10 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8ba 	bl	80006d4 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4699      	mov	r9, r3
 8000572:	0c03      	lsrs	r3, r0, #16
 8000574:	469c      	mov	ip, r3
 8000576:	0413      	lsls	r3, r2, #16
 8000578:	4647      	mov	r7, r8
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	001d      	movs	r5, r3
 800057e:	000e      	movs	r6, r1
 8000580:	4661      	mov	r1, ip
 8000582:	0404      	lsls	r4, r0, #16
 8000584:	0c24      	lsrs	r4, r4, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	0007      	movs	r7, r0
 800058a:	0c10      	lsrs	r0, r2, #16
 800058c:	434b      	muls	r3, r1
 800058e:	4365      	muls	r5, r4
 8000590:	4341      	muls	r1, r0
 8000592:	4360      	muls	r0, r4
 8000594:	0c2c      	lsrs	r4, r5, #16
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	1824      	adds	r4, r4, r0
 800059a:	468c      	mov	ip, r1
 800059c:	42a3      	cmp	r3, r4
 800059e:	d903      	bls.n	80005a8 <__aeabi_lmul+0x3c>
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	44c4      	add	ip, r8
 80005a8:	4649      	mov	r1, r9
 80005aa:	4379      	muls	r1, r7
 80005ac:	4356      	muls	r6, r2
 80005ae:	0c23      	lsrs	r3, r4, #16
 80005b0:	042d      	lsls	r5, r5, #16
 80005b2:	0c2d      	lsrs	r5, r5, #16
 80005b4:	1989      	adds	r1, r1, r6
 80005b6:	4463      	add	r3, ip
 80005b8:	0424      	lsls	r4, r4, #16
 80005ba:	1960      	adds	r0, r4, r5
 80005bc:	18c9      	adds	r1, r1, r3
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)

080005c8 <__aeabi_f2uiz>:
 80005c8:	219e      	movs	r1, #158	@ 0x9e
 80005ca:	b510      	push	{r4, lr}
 80005cc:	05c9      	lsls	r1, r1, #23
 80005ce:	1c04      	adds	r4, r0, #0
 80005d0:	f7ff ffa2 	bl	8000518 <__aeabi_fcmpge>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d103      	bne.n	80005e0 <__aeabi_f2uiz+0x18>
 80005d8:	1c20      	adds	r0, r4, #0
 80005da:	f000 ff99 	bl	8001510 <__aeabi_f2iz>
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	219e      	movs	r1, #158	@ 0x9e
 80005e2:	1c20      	adds	r0, r4, #0
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	f000 fdef 	bl	80011c8 <__aeabi_fsub>
 80005ea:	f000 ff91 	bl	8001510 <__aeabi_f2iz>
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	469c      	mov	ip, r3
 80005f4:	4460      	add	r0, ip
 80005f6:	e7f2      	b.n	80005de <__aeabi_f2uiz+0x16>

080005f8 <__aeabi_d2uiz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <__aeabi_d2uiz+0x38>)
 80005fe:	0004      	movs	r4, r0
 8000600:	000d      	movs	r5, r1
 8000602:	f7ff ff4f 	bl	80004a4 <__aeabi_dcmpge>
 8000606:	2800      	cmp	r0, #0
 8000608:	d104      	bne.n	8000614 <__aeabi_d2uiz+0x1c>
 800060a:	0020      	movs	r0, r4
 800060c:	0029      	movs	r1, r5
 800060e:	f002 fe5b 	bl	80032c8 <__aeabi_d2iz>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <__aeabi_d2uiz+0x38>)
 8000616:	2200      	movs	r2, #0
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f002 fa96 	bl	8002b4c <__aeabi_dsub>
 8000620:	f002 fe52 	bl	80032c8 <__aeabi_d2iz>
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	469c      	mov	ip, r3
 800062a:	4460      	add	r0, ip
 800062c:	e7f1      	b.n	8000612 <__aeabi_d2uiz+0x1a>
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	41e00000 	.word	0x41e00000

08000634 <__aeabi_d2lz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	0004      	movs	r4, r0
 800063c:	000d      	movs	r5, r1
 800063e:	f7ff ff13 	bl	8000468 <__aeabi_dcmplt>
 8000642:	2800      	cmp	r0, #0
 8000644:	d108      	bne.n	8000658 <__aeabi_d2lz+0x24>
 8000646:	0020      	movs	r0, r4
 8000648:	0029      	movs	r1, r5
 800064a:	f000 f80f 	bl	800066c <__aeabi_d2ulz>
 800064e:	0002      	movs	r2, r0
 8000650:	000b      	movs	r3, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	061b      	lsls	r3, r3, #24
 800065c:	18e9      	adds	r1, r5, r3
 800065e:	0020      	movs	r0, r4
 8000660:	f000 f804 	bl	800066c <__aeabi_d2ulz>
 8000664:	2300      	movs	r3, #0
 8000666:	4242      	negs	r2, r0
 8000668:	418b      	sbcs	r3, r1
 800066a:	e7f2      	b.n	8000652 <__aeabi_d2lz+0x1e>

0800066c <__aeabi_d2ulz>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	2200      	movs	r2, #0
 8000670:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <__aeabi_d2ulz+0x34>)
 8000672:	000d      	movs	r5, r1
 8000674:	0004      	movs	r4, r0
 8000676:	f001 ffa1 	bl	80025bc <__aeabi_dmul>
 800067a:	f7ff ffbd 	bl	80005f8 <__aeabi_d2uiz>
 800067e:	0006      	movs	r6, r0
 8000680:	f002 fe8c 	bl	800339c <__aeabi_ui2d>
 8000684:	2200      	movs	r2, #0
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <__aeabi_d2ulz+0x38>)
 8000688:	f001 ff98 	bl	80025bc <__aeabi_dmul>
 800068c:	0002      	movs	r2, r0
 800068e:	000b      	movs	r3, r1
 8000690:	0020      	movs	r0, r4
 8000692:	0029      	movs	r1, r5
 8000694:	f002 fa5a 	bl	8002b4c <__aeabi_dsub>
 8000698:	f7ff ffae 	bl	80005f8 <__aeabi_d2uiz>
 800069c:	0031      	movs	r1, r6
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	3df00000 	.word	0x3df00000
 80006a4:	41f00000 	.word	0x41f00000

080006a8 <__aeabi_l2d>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	0006      	movs	r6, r0
 80006ac:	0008      	movs	r0, r1
 80006ae:	f002 fe47 	bl	8003340 <__aeabi_i2d>
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <__aeabi_l2d+0x28>)
 80006b6:	f001 ff81 	bl	80025bc <__aeabi_dmul>
 80006ba:	000d      	movs	r5, r1
 80006bc:	0004      	movs	r4, r0
 80006be:	0030      	movs	r0, r6
 80006c0:	f002 fe6c 	bl	800339c <__aeabi_ui2d>
 80006c4:	002b      	movs	r3, r5
 80006c6:	0022      	movs	r2, r4
 80006c8:	f000 ffd0 	bl	800166c <__aeabi_dadd>
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	41f00000 	.word	0x41f00000

080006d4 <__udivmoddi4>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	4657      	mov	r7, sl
 80006d8:	464e      	mov	r6, r9
 80006da:	4645      	mov	r5, r8
 80006dc:	46de      	mov	lr, fp
 80006de:	b5e0      	push	{r5, r6, r7, lr}
 80006e0:	0004      	movs	r4, r0
 80006e2:	000d      	movs	r5, r1
 80006e4:	4692      	mov	sl, r2
 80006e6:	4699      	mov	r9, r3
 80006e8:	b083      	sub	sp, #12
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d830      	bhi.n	8000750 <__udivmoddi4+0x7c>
 80006ee:	d02d      	beq.n	800074c <__udivmoddi4+0x78>
 80006f0:	4649      	mov	r1, r9
 80006f2:	4650      	mov	r0, sl
 80006f4:	f002 ff60 	bl	80035b8 <__clzdi2>
 80006f8:	0029      	movs	r1, r5
 80006fa:	0006      	movs	r6, r0
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 ff5b 	bl	80035b8 <__clzdi2>
 8000702:	1a33      	subs	r3, r6, r0
 8000704:	4698      	mov	r8, r3
 8000706:	3b20      	subs	r3, #32
 8000708:	d434      	bmi.n	8000774 <__udivmoddi4+0xa0>
 800070a:	469b      	mov	fp, r3
 800070c:	4653      	mov	r3, sl
 800070e:	465a      	mov	r2, fp
 8000710:	4093      	lsls	r3, r2
 8000712:	4642      	mov	r2, r8
 8000714:	001f      	movs	r7, r3
 8000716:	4653      	mov	r3, sl
 8000718:	4093      	lsls	r3, r2
 800071a:	001e      	movs	r6, r3
 800071c:	42af      	cmp	r7, r5
 800071e:	d83b      	bhi.n	8000798 <__udivmoddi4+0xc4>
 8000720:	42af      	cmp	r7, r5
 8000722:	d100      	bne.n	8000726 <__udivmoddi4+0x52>
 8000724:	e079      	b.n	800081a <__udivmoddi4+0x146>
 8000726:	465b      	mov	r3, fp
 8000728:	1ba4      	subs	r4, r4, r6
 800072a:	41bd      	sbcs	r5, r7
 800072c:	2b00      	cmp	r3, #0
 800072e:	da00      	bge.n	8000732 <__udivmoddi4+0x5e>
 8000730:	e076      	b.n	8000820 <__udivmoddi4+0x14c>
 8000732:	2200      	movs	r2, #0
 8000734:	2300      	movs	r3, #0
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	465a      	mov	r2, fp
 800073e:	4093      	lsls	r3, r2
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2301      	movs	r3, #1
 8000744:	4642      	mov	r2, r8
 8000746:	4093      	lsls	r3, r2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	e029      	b.n	80007a0 <__udivmoddi4+0xcc>
 800074c:	4282      	cmp	r2, r0
 800074e:	d9cf      	bls.n	80006f0 <__udivmoddi4+0x1c>
 8000750:	2200      	movs	r2, #0
 8000752:	2300      	movs	r3, #0
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <__udivmoddi4+0x8e>
 800075e:	601c      	str	r4, [r3, #0]
 8000760:	605d      	str	r5, [r3, #4]
 8000762:	9800      	ldr	r0, [sp, #0]
 8000764:	9901      	ldr	r1, [sp, #4]
 8000766:	b003      	add	sp, #12
 8000768:	bcf0      	pop	{r4, r5, r6, r7}
 800076a:	46bb      	mov	fp, r7
 800076c:	46b2      	mov	sl, r6
 800076e:	46a9      	mov	r9, r5
 8000770:	46a0      	mov	r8, r4
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000774:	4642      	mov	r2, r8
 8000776:	469b      	mov	fp, r3
 8000778:	2320      	movs	r3, #32
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	4652      	mov	r2, sl
 800077e:	40da      	lsrs	r2, r3
 8000780:	4641      	mov	r1, r8
 8000782:	0013      	movs	r3, r2
 8000784:	464a      	mov	r2, r9
 8000786:	408a      	lsls	r2, r1
 8000788:	0017      	movs	r7, r2
 800078a:	4642      	mov	r2, r8
 800078c:	431f      	orrs	r7, r3
 800078e:	4653      	mov	r3, sl
 8000790:	4093      	lsls	r3, r2
 8000792:	001e      	movs	r6, r3
 8000794:	42af      	cmp	r7, r5
 8000796:	d9c3      	bls.n	8000720 <__udivmoddi4+0x4c>
 8000798:	2200      	movs	r2, #0
 800079a:	2300      	movs	r3, #0
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	4643      	mov	r3, r8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0d8      	beq.n	8000758 <__udivmoddi4+0x84>
 80007a6:	07fb      	lsls	r3, r7, #31
 80007a8:	0872      	lsrs	r2, r6, #1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4646      	mov	r6, r8
 80007ae:	087b      	lsrs	r3, r7, #1
 80007b0:	e00e      	b.n	80007d0 <__udivmoddi4+0xfc>
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	d101      	bne.n	80007ba <__udivmoddi4+0xe6>
 80007b6:	42a2      	cmp	r2, r4
 80007b8:	d80c      	bhi.n	80007d4 <__udivmoddi4+0x100>
 80007ba:	1aa4      	subs	r4, r4, r2
 80007bc:	419d      	sbcs	r5, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	1924      	adds	r4, r4, r4
 80007c2:	416d      	adcs	r5, r5
 80007c4:	2100      	movs	r1, #0
 80007c6:	3e01      	subs	r6, #1
 80007c8:	1824      	adds	r4, r4, r0
 80007ca:	414d      	adcs	r5, r1
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d006      	beq.n	80007de <__udivmoddi4+0x10a>
 80007d0:	42ab      	cmp	r3, r5
 80007d2:	d9ee      	bls.n	80007b2 <__udivmoddi4+0xde>
 80007d4:	3e01      	subs	r6, #1
 80007d6:	1924      	adds	r4, r4, r4
 80007d8:	416d      	adcs	r5, r5
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1f8      	bne.n	80007d0 <__udivmoddi4+0xfc>
 80007de:	9800      	ldr	r0, [sp, #0]
 80007e0:	9901      	ldr	r1, [sp, #4]
 80007e2:	465b      	mov	r3, fp
 80007e4:	1900      	adds	r0, r0, r4
 80007e6:	4169      	adcs	r1, r5
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db24      	blt.n	8000836 <__udivmoddi4+0x162>
 80007ec:	002b      	movs	r3, r5
 80007ee:	465a      	mov	r2, fp
 80007f0:	4644      	mov	r4, r8
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	002a      	movs	r2, r5
 80007f6:	40e2      	lsrs	r2, r4
 80007f8:	001c      	movs	r4, r3
 80007fa:	465b      	mov	r3, fp
 80007fc:	0015      	movs	r5, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db2a      	blt.n	8000858 <__udivmoddi4+0x184>
 8000802:	0026      	movs	r6, r4
 8000804:	409e      	lsls	r6, r3
 8000806:	0033      	movs	r3, r6
 8000808:	0026      	movs	r6, r4
 800080a:	4647      	mov	r7, r8
 800080c:	40be      	lsls	r6, r7
 800080e:	0032      	movs	r2, r6
 8000810:	1a80      	subs	r0, r0, r2
 8000812:	4199      	sbcs	r1, r3
 8000814:	9000      	str	r0, [sp, #0]
 8000816:	9101      	str	r1, [sp, #4]
 8000818:	e79e      	b.n	8000758 <__udivmoddi4+0x84>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d8bc      	bhi.n	8000798 <__udivmoddi4+0xc4>
 800081e:	e782      	b.n	8000726 <__udivmoddi4+0x52>
 8000820:	4642      	mov	r2, r8
 8000822:	2320      	movs	r3, #32
 8000824:	2100      	movs	r1, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	40da      	lsrs	r2, r3
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	e785      	b.n	8000742 <__udivmoddi4+0x6e>
 8000836:	4642      	mov	r2, r8
 8000838:	2320      	movs	r3, #32
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	002a      	movs	r2, r5
 800083e:	4646      	mov	r6, r8
 8000840:	409a      	lsls	r2, r3
 8000842:	0023      	movs	r3, r4
 8000844:	40f3      	lsrs	r3, r6
 8000846:	4644      	mov	r4, r8
 8000848:	4313      	orrs	r3, r2
 800084a:	002a      	movs	r2, r5
 800084c:	40e2      	lsrs	r2, r4
 800084e:	001c      	movs	r4, r3
 8000850:	465b      	mov	r3, fp
 8000852:	0015      	movs	r5, r2
 8000854:	2b00      	cmp	r3, #0
 8000856:	dad4      	bge.n	8000802 <__udivmoddi4+0x12e>
 8000858:	4642      	mov	r2, r8
 800085a:	002f      	movs	r7, r5
 800085c:	2320      	movs	r3, #32
 800085e:	0026      	movs	r6, r4
 8000860:	4097      	lsls	r7, r2
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	40de      	lsrs	r6, r3
 8000866:	003b      	movs	r3, r7
 8000868:	4333      	orrs	r3, r6
 800086a:	e7cd      	b.n	8000808 <__udivmoddi4+0x134>

0800086c <__aeabi_fadd>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	46ce      	mov	lr, r9
 8000870:	4647      	mov	r7, r8
 8000872:	0243      	lsls	r3, r0, #9
 8000874:	0a5a      	lsrs	r2, r3, #9
 8000876:	024e      	lsls	r6, r1, #9
 8000878:	0045      	lsls	r5, r0, #1
 800087a:	0fc4      	lsrs	r4, r0, #31
 800087c:	0048      	lsls	r0, r1, #1
 800087e:	4691      	mov	r9, r2
 8000880:	0e2d      	lsrs	r5, r5, #24
 8000882:	0a72      	lsrs	r2, r6, #9
 8000884:	0e00      	lsrs	r0, r0, #24
 8000886:	4694      	mov	ip, r2
 8000888:	b580      	push	{r7, lr}
 800088a:	099b      	lsrs	r3, r3, #6
 800088c:	0fc9      	lsrs	r1, r1, #31
 800088e:	09b6      	lsrs	r6, r6, #6
 8000890:	1a2a      	subs	r2, r5, r0
 8000892:	428c      	cmp	r4, r1
 8000894:	d021      	beq.n	80008da <__aeabi_fadd+0x6e>
 8000896:	2a00      	cmp	r2, #0
 8000898:	dd0d      	ble.n	80008b6 <__aeabi_fadd+0x4a>
 800089a:	2800      	cmp	r0, #0
 800089c:	d12d      	bne.n	80008fa <__aeabi_fadd+0x8e>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x38>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_fadd+0x154>
 80008a4:	1e51      	subs	r1, r2, #1
 80008a6:	2a01      	cmp	r2, #1
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x40>
 80008aa:	e11d      	b.n	8000ae8 <__aeabi_fadd+0x27c>
 80008ac:	2aff      	cmp	r2, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0x46>
 80008b0:	e0ab      	b.n	8000a0a <__aeabi_fadd+0x19e>
 80008b2:	000a      	movs	r2, r1
 80008b4:	e027      	b.n	8000906 <__aeabi_fadd+0x9a>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d04d      	beq.n	8000956 <__aeabi_fadd+0xea>
 80008ba:	1b42      	subs	r2, r0, r5
 80008bc:	2d00      	cmp	r5, #0
 80008be:	d000      	beq.n	80008c2 <__aeabi_fadd+0x56>
 80008c0:	e0cc      	b.n	8000a5c <__aeabi_fadd+0x1f0>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x5c>
 80008c6:	e079      	b.n	80009bc <__aeabi_fadd+0x150>
 80008c8:	1e54      	subs	r4, r2, #1
 80008ca:	2a01      	cmp	r2, #1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fadd+0x64>
 80008ce:	e128      	b.n	8000b22 <__aeabi_fadd+0x2b6>
 80008d0:	2aff      	cmp	r2, #255	@ 0xff
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fadd+0x6a>
 80008d4:	e097      	b.n	8000a06 <__aeabi_fadd+0x19a>
 80008d6:	0022      	movs	r2, r4
 80008d8:	e0c5      	b.n	8000a66 <__aeabi_fadd+0x1fa>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_fadd+0x74>
 80008de:	e096      	b.n	8000a0e <__aeabi_fadd+0x1a2>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d04f      	beq.n	8000984 <__aeabi_fadd+0x118>
 80008e4:	2dff      	cmp	r5, #255	@ 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x7e>
 80008e8:	e08f      	b.n	8000a0a <__aeabi_fadd+0x19e>
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	04c9      	lsls	r1, r1, #19
 80008ee:	430e      	orrs	r6, r1
 80008f0:	2a1b      	cmp	r2, #27
 80008f2:	dd51      	ble.n	8000998 <__aeabi_fadd+0x12c>
 80008f4:	002a      	movs	r2, r5
 80008f6:	3301      	adds	r3, #1
 80008f8:	e018      	b.n	800092c <__aeabi_fadd+0xc0>
 80008fa:	2dff      	cmp	r5, #255	@ 0xff
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x94>
 80008fe:	e084      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	04c9      	lsls	r1, r1, #19
 8000904:	430e      	orrs	r6, r1
 8000906:	2101      	movs	r1, #1
 8000908:	2a1b      	cmp	r2, #27
 800090a:	dc08      	bgt.n	800091e <__aeabi_fadd+0xb2>
 800090c:	0031      	movs	r1, r6
 800090e:	2020      	movs	r0, #32
 8000910:	40d1      	lsrs	r1, r2
 8000912:	1a82      	subs	r2, r0, r2
 8000914:	4096      	lsls	r6, r2
 8000916:	0032      	movs	r2, r6
 8000918:	1e50      	subs	r0, r2, #1
 800091a:	4182      	sbcs	r2, r0
 800091c:	4311      	orrs	r1, r2
 800091e:	1a5b      	subs	r3, r3, r1
 8000920:	015a      	lsls	r2, r3, #5
 8000922:	d459      	bmi.n	80009d8 <__aeabi_fadd+0x16c>
 8000924:	2107      	movs	r1, #7
 8000926:	002a      	movs	r2, r5
 8000928:	4019      	ands	r1, r3
 800092a:	d049      	beq.n	80009c0 <__aeabi_fadd+0x154>
 800092c:	210f      	movs	r1, #15
 800092e:	4019      	ands	r1, r3
 8000930:	2904      	cmp	r1, #4
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0xca>
 8000934:	3304      	adds	r3, #4
 8000936:	0159      	lsls	r1, r3, #5
 8000938:	d542      	bpl.n	80009c0 <__aeabi_fadd+0x154>
 800093a:	1c50      	adds	r0, r2, #1
 800093c:	2afe      	cmp	r2, #254	@ 0xfe
 800093e:	d03a      	beq.n	80009b6 <__aeabi_fadd+0x14a>
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	b2c0      	uxtb	r0, r0
 8000944:	0a5b      	lsrs	r3, r3, #9
 8000946:	05c0      	lsls	r0, r0, #23
 8000948:	4318      	orrs	r0, r3
 800094a:	07e4      	lsls	r4, r4, #31
 800094c:	4320      	orrs	r0, r4
 800094e:	bcc0      	pop	{r6, r7}
 8000950:	46b9      	mov	r9, r7
 8000952:	46b0      	mov	r8, r6
 8000954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000956:	20fe      	movs	r0, #254	@ 0xfe
 8000958:	4680      	mov	r8, r0
 800095a:	1c6f      	adds	r7, r5, #1
 800095c:	0038      	movs	r0, r7
 800095e:	4647      	mov	r7, r8
 8000960:	4207      	tst	r7, r0
 8000962:	d000      	beq.n	8000966 <__aeabi_fadd+0xfa>
 8000964:	e08e      	b.n	8000a84 <__aeabi_fadd+0x218>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d000      	beq.n	800096c <__aeabi_fadd+0x100>
 800096a:	e0b4      	b.n	8000ad6 <__aeabi_fadd+0x26a>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fadd+0x106>
 8000970:	e0db      	b.n	8000b2a <__aeabi_fadd+0x2be>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d06c      	beq.n	8000a50 <__aeabi_fadd+0x1e4>
 8000976:	1b98      	subs	r0, r3, r6
 8000978:	0145      	lsls	r5, r0, #5
 800097a:	d400      	bmi.n	800097e <__aeabi_fadd+0x112>
 800097c:	e0f7      	b.n	8000b6e <__aeabi_fadd+0x302>
 800097e:	000c      	movs	r4, r1
 8000980:	1af3      	subs	r3, r6, r3
 8000982:	e03d      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000984:	2e00      	cmp	r6, #0
 8000986:	d01b      	beq.n	80009c0 <__aeabi_fadd+0x154>
 8000988:	1e51      	subs	r1, r2, #1
 800098a:	2a01      	cmp	r2, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_fadd+0x124>
 800098e:	e082      	b.n	8000a96 <__aeabi_fadd+0x22a>
 8000990:	2aff      	cmp	r2, #255	@ 0xff
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x19e>
 8000994:	000a      	movs	r2, r1
 8000996:	e7ab      	b.n	80008f0 <__aeabi_fadd+0x84>
 8000998:	0031      	movs	r1, r6
 800099a:	2020      	movs	r0, #32
 800099c:	40d1      	lsrs	r1, r2
 800099e:	1a82      	subs	r2, r0, r2
 80009a0:	4096      	lsls	r6, r2
 80009a2:	0032      	movs	r2, r6
 80009a4:	1e50      	subs	r0, r2, #1
 80009a6:	4182      	sbcs	r2, r0
 80009a8:	430a      	orrs	r2, r1
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	015a      	lsls	r2, r3, #5
 80009ae:	d5b9      	bpl.n	8000924 <__aeabi_fadd+0xb8>
 80009b0:	1c6a      	adds	r2, r5, #1
 80009b2:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b4:	d175      	bne.n	8000aa2 <__aeabi_fadd+0x236>
 80009b6:	20ff      	movs	r0, #255	@ 0xff
 80009b8:	2300      	movs	r3, #0
 80009ba:	e7c4      	b.n	8000946 <__aeabi_fadd+0xda>
 80009bc:	000c      	movs	r4, r1
 80009be:	0033      	movs	r3, r6
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	2aff      	cmp	r2, #255	@ 0xff
 80009c4:	d146      	bne.n	8000a54 <__aeabi_fadd+0x1e8>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f5      	beq.n	80009b6 <__aeabi_fadd+0x14a>
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	03d2      	lsls	r2, r2, #15
 80009ce:	4313      	orrs	r3, r2
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	20ff      	movs	r0, #255	@ 0xff
 80009d4:	0a5b      	lsrs	r3, r3, #9
 80009d6:	e7b6      	b.n	8000946 <__aeabi_fadd+0xda>
 80009d8:	019f      	lsls	r7, r3, #6
 80009da:	09bf      	lsrs	r7, r7, #6
 80009dc:	0038      	movs	r0, r7
 80009de:	f002 fdcd 	bl	800357c <__clzsi2>
 80009e2:	3805      	subs	r0, #5
 80009e4:	4087      	lsls	r7, r0
 80009e6:	4285      	cmp	r5, r0
 80009e8:	dc24      	bgt.n	8000a34 <__aeabi_fadd+0x1c8>
 80009ea:	003b      	movs	r3, r7
 80009ec:	2120      	movs	r1, #32
 80009ee:	1b42      	subs	r2, r0, r5
 80009f0:	3201      	adds	r2, #1
 80009f2:	40d3      	lsrs	r3, r2
 80009f4:	1a8a      	subs	r2, r1, r2
 80009f6:	4097      	lsls	r7, r2
 80009f8:	1e7a      	subs	r2, r7, #1
 80009fa:	4197      	sbcs	r7, r2
 80009fc:	2200      	movs	r2, #0
 80009fe:	433b      	orrs	r3, r7
 8000a00:	0759      	lsls	r1, r3, #29
 8000a02:	d193      	bne.n	800092c <__aeabi_fadd+0xc0>
 8000a04:	e797      	b.n	8000936 <__aeabi_fadd+0xca>
 8000a06:	000c      	movs	r4, r1
 8000a08:	0033      	movs	r3, r6
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	e7db      	b.n	80009c6 <__aeabi_fadd+0x15a>
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d014      	beq.n	8000a3c <__aeabi_fadd+0x1d0>
 8000a12:	1b42      	subs	r2, r0, r5
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d14b      	bne.n	8000ab0 <__aeabi_fadd+0x244>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0d0      	beq.n	80009be <__aeabi_fadd+0x152>
 8000a1c:	1e51      	subs	r1, r2, #1
 8000a1e:	2a01      	cmp	r2, #1
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fadd+0x1b8>
 8000a22:	e09e      	b.n	8000b62 <__aeabi_fadd+0x2f6>
 8000a24:	2aff      	cmp	r2, #255	@ 0xff
 8000a26:	d0ef      	beq.n	8000a08 <__aeabi_fadd+0x19c>
 8000a28:	000a      	movs	r2, r1
 8000a2a:	2a1b      	cmp	r2, #27
 8000a2c:	dd5f      	ble.n	8000aee <__aeabi_fadd+0x282>
 8000a2e:	0002      	movs	r2, r0
 8000a30:	1c73      	adds	r3, r6, #1
 8000a32:	e77b      	b.n	800092c <__aeabi_fadd+0xc0>
 8000a34:	4b50      	ldr	r3, [pc, #320]	@ (8000b78 <__aeabi_fadd+0x30c>)
 8000a36:	1a2a      	subs	r2, r5, r0
 8000a38:	403b      	ands	r3, r7
 8000a3a:	e7e1      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000a3c:	21fe      	movs	r1, #254	@ 0xfe
 8000a3e:	1c6a      	adds	r2, r5, #1
 8000a40:	4211      	tst	r1, r2
 8000a42:	d13b      	bne.n	8000abc <__aeabi_fadd+0x250>
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d15d      	bne.n	8000b04 <__aeabi_fadd+0x298>
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d07f      	beq.n	8000b4c <__aeabi_fadd+0x2e0>
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d17f      	bne.n	8000b50 <__aeabi_fadd+0x2e4>
 8000a50:	2200      	movs	r2, #0
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	b2d0      	uxtb	r0, r2
 8000a5a:	e774      	b.n	8000946 <__aeabi_fadd+0xda>
 8000a5c:	28ff      	cmp	r0, #255	@ 0xff
 8000a5e:	d0d2      	beq.n	8000a06 <__aeabi_fadd+0x19a>
 8000a60:	2480      	movs	r4, #128	@ 0x80
 8000a62:	04e4      	lsls	r4, r4, #19
 8000a64:	4323      	orrs	r3, r4
 8000a66:	2401      	movs	r4, #1
 8000a68:	2a1b      	cmp	r2, #27
 8000a6a:	dc07      	bgt.n	8000a7c <__aeabi_fadd+0x210>
 8000a6c:	001c      	movs	r4, r3
 8000a6e:	2520      	movs	r5, #32
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	1aaa      	subs	r2, r5, r2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	4193      	sbcs	r3, r2
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	1b33      	subs	r3, r6, r4
 8000a7e:	0005      	movs	r5, r0
 8000a80:	000c      	movs	r4, r1
 8000a82:	e74d      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000a84:	1b9f      	subs	r7, r3, r6
 8000a86:	017a      	lsls	r2, r7, #5
 8000a88:	d422      	bmi.n	8000ad0 <__aeabi_fadd+0x264>
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d1a6      	bne.n	80009dc <__aeabi_fadd+0x170>
 8000a8e:	2400      	movs	r4, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	2300      	movs	r3, #0
 8000a94:	e757      	b.n	8000946 <__aeabi_fadd+0xda>
 8000a96:	199b      	adds	r3, r3, r6
 8000a98:	2501      	movs	r5, #1
 8000a9a:	3201      	adds	r2, #1
 8000a9c:	0159      	lsls	r1, r3, #5
 8000a9e:	d400      	bmi.n	8000aa2 <__aeabi_fadd+0x236>
 8000aa0:	e740      	b.n	8000924 <__aeabi_fadd+0xb8>
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4835      	ldr	r0, [pc, #212]	@ (8000b7c <__aeabi_fadd+0x310>)
 8000aa6:	4019      	ands	r1, r3
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	4003      	ands	r3, r0
 8000aac:	430b      	orrs	r3, r1
 8000aae:	e7a7      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0a9      	beq.n	8000a08 <__aeabi_fadd+0x19c>
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	04c9      	lsls	r1, r1, #19
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	e7b6      	b.n	8000a2a <__aeabi_fadd+0x1be>
 8000abc:	2aff      	cmp	r2, #255	@ 0xff
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fadd+0x256>
 8000ac0:	e779      	b.n	80009b6 <__aeabi_fadd+0x14a>
 8000ac2:	199b      	adds	r3, r3, r6
 8000ac4:	085b      	lsrs	r3, r3, #1
 8000ac6:	0759      	lsls	r1, r3, #29
 8000ac8:	d000      	beq.n	8000acc <__aeabi_fadd+0x260>
 8000aca:	e72f      	b.n	800092c <__aeabi_fadd+0xc0>
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	e7c1      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000ad0:	000c      	movs	r4, r1
 8000ad2:	1af7      	subs	r7, r6, r3
 8000ad4:	e782      	b.n	80009dc <__aeabi_fadd+0x170>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d12c      	bne.n	8000b34 <__aeabi_fadd+0x2c8>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d193      	bne.n	8000a06 <__aeabi_fadd+0x19a>
 8000ade:	2380      	movs	r3, #128	@ 0x80
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	20ff      	movs	r0, #255	@ 0xff
 8000ae4:	03db      	lsls	r3, r3, #15
 8000ae6:	e72e      	b.n	8000946 <__aeabi_fadd+0xda>
 8000ae8:	2501      	movs	r5, #1
 8000aea:	1b9b      	subs	r3, r3, r6
 8000aec:	e718      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000aee:	0019      	movs	r1, r3
 8000af0:	2520      	movs	r5, #32
 8000af2:	40d1      	lsrs	r1, r2
 8000af4:	1aaa      	subs	r2, r5, r2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	4193      	sbcs	r3, r2
 8000afc:	430b      	orrs	r3, r1
 8000afe:	0005      	movs	r5, r0
 8000b00:	199b      	adds	r3, r3, r6
 8000b02:	e753      	b.n	80009ac <__aeabi_fadd+0x140>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fadd+0x29e>
 8000b08:	e77e      	b.n	8000a08 <__aeabi_fadd+0x19c>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fadd+0x2a4>
 8000b0e:	e77c      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	03d2      	lsls	r2, r2, #15
 8000b14:	4591      	cmp	r9, r2
 8000b16:	d302      	bcc.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b18:	4594      	cmp	ip, r2
 8000b1a:	d200      	bcs.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b1c:	0033      	movs	r3, r6
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	e753      	b.n	80009ca <__aeabi_fadd+0x15e>
 8000b22:	000c      	movs	r4, r1
 8000b24:	1af3      	subs	r3, r6, r3
 8000b26:	3501      	adds	r5, #1
 8000b28:	e6fa      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d0af      	beq.n	8000a8e <__aeabi_fadd+0x222>
 8000b2e:	000c      	movs	r4, r1
 8000b30:	0033      	movs	r3, r6
 8000b32:	e78d      	b.n	8000a50 <__aeabi_fadd+0x1e4>
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fadd+0x2ce>
 8000b38:	e767      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	03d2      	lsls	r2, r2, #15
 8000b3e:	4591      	cmp	r9, r2
 8000b40:	d3ed      	bcc.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b42:	4594      	cmp	ip, r2
 8000b44:	d2eb      	bcs.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b46:	000c      	movs	r4, r1
 8000b48:	0033      	movs	r3, r6
 8000b4a:	e7e8      	b.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	e77f      	b.n	8000a50 <__aeabi_fadd+0x1e4>
 8000b50:	199b      	adds	r3, r3, r6
 8000b52:	2200      	movs	r2, #0
 8000b54:	0159      	lsls	r1, r3, #5
 8000b56:	d5b9      	bpl.n	8000acc <__aeabi_fadd+0x260>
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <__aeabi_fadd+0x30c>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	2201      	movs	r2, #1
 8000b60:	e778      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000b62:	199b      	adds	r3, r3, r6
 8000b64:	3201      	adds	r2, #1
 8000b66:	3501      	adds	r5, #1
 8000b68:	0159      	lsls	r1, r3, #5
 8000b6a:	d49a      	bmi.n	8000aa2 <__aeabi_fadd+0x236>
 8000b6c:	e6da      	b.n	8000924 <__aeabi_fadd+0xb8>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d08d      	beq.n	8000a8e <__aeabi_fadd+0x222>
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e76e      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	fbffffff 	.word	0xfbffffff
 8000b7c:	7dffffff 	.word	0x7dffffff

08000b80 <__aeabi_fdiv>:
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	464f      	mov	r7, r9
 8000b84:	4646      	mov	r6, r8
 8000b86:	46d6      	mov	lr, sl
 8000b88:	0244      	lsls	r4, r0, #9
 8000b8a:	b5c0      	push	{r6, r7, lr}
 8000b8c:	0047      	lsls	r7, r0, #1
 8000b8e:	1c0e      	adds	r6, r1, #0
 8000b90:	0a64      	lsrs	r4, r4, #9
 8000b92:	0e3f      	lsrs	r7, r7, #24
 8000b94:	0fc5      	lsrs	r5, r0, #31
 8000b96:	2f00      	cmp	r7, #0
 8000b98:	d03c      	beq.n	8000c14 <__aeabi_fdiv+0x94>
 8000b9a:	2fff      	cmp	r7, #255	@ 0xff
 8000b9c:	d042      	beq.n	8000c24 <__aeabi_fdiv+0xa4>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	00e4      	lsls	r4, r4, #3
 8000ba8:	04d2      	lsls	r2, r2, #19
 8000baa:	4314      	orrs	r4, r2
 8000bac:	3f7f      	subs	r7, #127	@ 0x7f
 8000bae:	0273      	lsls	r3, r6, #9
 8000bb0:	0a5b      	lsrs	r3, r3, #9
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	0073      	lsls	r3, r6, #1
 8000bb6:	0e1b      	lsrs	r3, r3, #24
 8000bb8:	0ff6      	lsrs	r6, r6, #31
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d01b      	beq.n	8000bf6 <__aeabi_fdiv+0x76>
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d013      	beq.n	8000bea <__aeabi_fdiv+0x6a>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	00d2      	lsls	r2, r2, #3
 8000bc8:	04c9      	lsls	r1, r1, #19
 8000bca:	4311      	orrs	r1, r2
 8000bcc:	4688      	mov	r8, r1
 8000bce:	2000      	movs	r0, #0
 8000bd0:	3b7f      	subs	r3, #127	@ 0x7f
 8000bd2:	0029      	movs	r1, r5
 8000bd4:	1aff      	subs	r7, r7, r3
 8000bd6:	464b      	mov	r3, r9
 8000bd8:	4071      	eors	r1, r6
 8000bda:	b2c9      	uxtb	r1, r1
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d900      	bls.n	8000be2 <__aeabi_fdiv+0x62>
 8000be0:	e0b5      	b.n	8000d4e <__aeabi_fdiv+0x1ce>
 8000be2:	4a74      	ldr	r2, [pc, #464]	@ (8000db4 <__aeabi_fdiv+0x234>)
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	58d3      	ldr	r3, [r2, r3]
 8000be8:	469f      	mov	pc, r3
 8000bea:	4643      	mov	r3, r8
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d13f      	bne.n	8000c70 <__aeabi_fdiv+0xf0>
 8000bf0:	3fff      	subs	r7, #255	@ 0xff
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	e003      	b.n	8000bfe <__aeabi_fdiv+0x7e>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d12d      	bne.n	8000c58 <__aeabi_fdiv+0xd8>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	0029      	movs	r1, r5
 8000c00:	464a      	mov	r2, r9
 8000c02:	4071      	eors	r1, r6
 8000c04:	b2c9      	uxtb	r1, r1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	2a0e      	cmp	r2, #14
 8000c0a:	d838      	bhi.n	8000c7e <__aeabi_fdiv+0xfe>
 8000c0c:	486a      	ldr	r0, [pc, #424]	@ (8000db8 <__aeabi_fdiv+0x238>)
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	5882      	ldr	r2, [r0, r2]
 8000c12:	4697      	mov	pc, r2
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d113      	bne.n	8000c40 <__aeabi_fdiv+0xc0>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	2700      	movs	r7, #0
 8000c20:	469a      	mov	sl, r3
 8000c22:	e7c4      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d105      	bne.n	8000c34 <__aeabi_fdiv+0xb4>
 8000c28:	2308      	movs	r3, #8
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	3b06      	subs	r3, #6
 8000c2e:	27ff      	movs	r7, #255	@ 0xff
 8000c30:	469a      	mov	sl, r3
 8000c32:	e7bc      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c34:	230c      	movs	r3, #12
 8000c36:	4699      	mov	r9, r3
 8000c38:	3b09      	subs	r3, #9
 8000c3a:	27ff      	movs	r7, #255	@ 0xff
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	e7b6      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c40:	0020      	movs	r0, r4
 8000c42:	f002 fc9b 	bl	800357c <__clzsi2>
 8000c46:	2776      	movs	r7, #118	@ 0x76
 8000c48:	1f43      	subs	r3, r0, #5
 8000c4a:	409c      	lsls	r4, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	427f      	negs	r7, r7
 8000c50:	4699      	mov	r9, r3
 8000c52:	469a      	mov	sl, r3
 8000c54:	1a3f      	subs	r7, r7, r0
 8000c56:	e7aa      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c58:	4640      	mov	r0, r8
 8000c5a:	f002 fc8f 	bl	800357c <__clzsi2>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1f43      	subs	r3, r0, #5
 8000c62:	409a      	lsls	r2, r3
 8000c64:	2376      	movs	r3, #118	@ 0x76
 8000c66:	425b      	negs	r3, r3
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	e7b0      	b.n	8000bd2 <__aeabi_fdiv+0x52>
 8000c70:	2303      	movs	r3, #3
 8000c72:	464a      	mov	r2, r9
 8000c74:	431a      	orrs	r2, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	2003      	movs	r0, #3
 8000c7a:	33fc      	adds	r3, #252	@ 0xfc
 8000c7c:	e7a9      	b.n	8000bd2 <__aeabi_fdiv+0x52>
 8000c7e:	000d      	movs	r5, r1
 8000c80:	20ff      	movs	r0, #255	@ 0xff
 8000c82:	2200      	movs	r2, #0
 8000c84:	05c0      	lsls	r0, r0, #23
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	4310      	orrs	r0, r2
 8000c8a:	4328      	orrs	r0, r5
 8000c8c:	bce0      	pop	{r5, r6, r7}
 8000c8e:	46ba      	mov	sl, r7
 8000c90:	46b1      	mov	r9, r6
 8000c92:	46a8      	mov	r8, r5
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c96:	000d      	movs	r5, r1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e7f2      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000c9e:	4653      	mov	r3, sl
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d0ed      	beq.n	8000c80 <__aeabi_fdiv+0x100>
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d033      	beq.n	8000d10 <__aeabi_fdiv+0x190>
 8000ca8:	46a0      	mov	r8, r4
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d105      	bne.n	8000cba <__aeabi_fdiv+0x13a>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e7e7      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000cb4:	0035      	movs	r5, r6
 8000cb6:	2803      	cmp	r0, #3
 8000cb8:	d07a      	beq.n	8000db0 <__aeabi_fdiv+0x230>
 8000cba:	003b      	movs	r3, r7
 8000cbc:	337f      	adds	r3, #127	@ 0x7f
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	dd2d      	ble.n	8000d1e <__aeabi_fdiv+0x19e>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	0752      	lsls	r2, r2, #29
 8000cc6:	d007      	beq.n	8000cd8 <__aeabi_fdiv+0x158>
 8000cc8:	220f      	movs	r2, #15
 8000cca:	4641      	mov	r1, r8
 8000ccc:	400a      	ands	r2, r1
 8000cce:	2a04      	cmp	r2, #4
 8000cd0:	d002      	beq.n	8000cd8 <__aeabi_fdiv+0x158>
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	44e0      	add	r8, ip
 8000cd8:	4642      	mov	r2, r8
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	d505      	bpl.n	8000cea <__aeabi_fdiv+0x16a>
 8000cde:	4642      	mov	r2, r8
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <__aeabi_fdiv+0x23c>)
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	3380      	adds	r3, #128	@ 0x80
 8000cea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cec:	dcc8      	bgt.n	8000c80 <__aeabi_fdiv+0x100>
 8000cee:	4642      	mov	r2, r8
 8000cf0:	0192      	lsls	r2, r2, #6
 8000cf2:	0a52      	lsrs	r2, r2, #9
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	e7c5      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	2500      	movs	r5, #0
 8000cfc:	20ff      	movs	r0, #255	@ 0xff
 8000cfe:	03d2      	lsls	r2, r2, #15
 8000d00:	e7c0      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	03d2      	lsls	r2, r2, #15
 8000d06:	4214      	tst	r4, r2
 8000d08:	d002      	beq.n	8000d10 <__aeabi_fdiv+0x190>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	4213      	tst	r3, r2
 8000d0e:	d049      	beq.n	8000da4 <__aeabi_fdiv+0x224>
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	03d2      	lsls	r2, r2, #15
 8000d14:	4322      	orrs	r2, r4
 8000d16:	0252      	lsls	r2, r2, #9
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	0a52      	lsrs	r2, r2, #9
 8000d1c:	e7b2      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d1e:	2201      	movs	r2, #1
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b1b      	cmp	r3, #27
 8000d24:	dcc3      	bgt.n	8000cae <__aeabi_fdiv+0x12e>
 8000d26:	4642      	mov	r2, r8
 8000d28:	40da      	lsrs	r2, r3
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	379e      	adds	r7, #158	@ 0x9e
 8000d2e:	40bb      	lsls	r3, r7
 8000d30:	1e59      	subs	r1, r3, #1
 8000d32:	418b      	sbcs	r3, r1
 8000d34:	431a      	orrs	r2, r3
 8000d36:	0753      	lsls	r3, r2, #29
 8000d38:	d004      	beq.n	8000d44 <__aeabi_fdiv+0x1c4>
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d000      	beq.n	8000d44 <__aeabi_fdiv+0x1c4>
 8000d42:	3204      	adds	r2, #4
 8000d44:	0153      	lsls	r3, r2, #5
 8000d46:	d529      	bpl.n	8000d9c <__aeabi_fdiv+0x21c>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	e79a      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d4e:	4642      	mov	r2, r8
 8000d50:	0163      	lsls	r3, r4, #5
 8000d52:	0155      	lsls	r5, r2, #5
 8000d54:	42ab      	cmp	r3, r5
 8000d56:	d215      	bcs.n	8000d84 <__aeabi_fdiv+0x204>
 8000d58:	201b      	movs	r0, #27
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	3f01      	subs	r7, #1
 8000d5e:	2601      	movs	r6, #1
 8000d60:	001c      	movs	r4, r3
 8000d62:	0052      	lsls	r2, r2, #1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	db01      	blt.n	8000d6e <__aeabi_fdiv+0x1ee>
 8000d6a:	429d      	cmp	r5, r3
 8000d6c:	d801      	bhi.n	8000d72 <__aeabi_fdiv+0x1f2>
 8000d6e:	1b5b      	subs	r3, r3, r5
 8000d70:	4332      	orrs	r2, r6
 8000d72:	3801      	subs	r0, #1
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d1f3      	bne.n	8000d60 <__aeabi_fdiv+0x1e0>
 8000d78:	1e58      	subs	r0, r3, #1
 8000d7a:	4183      	sbcs	r3, r0
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	4698      	mov	r8, r3
 8000d80:	000d      	movs	r5, r1
 8000d82:	e79a      	b.n	8000cba <__aeabi_fdiv+0x13a>
 8000d84:	201a      	movs	r0, #26
 8000d86:	2201      	movs	r2, #1
 8000d88:	1b5b      	subs	r3, r3, r5
 8000d8a:	e7e8      	b.n	8000d5e <__aeabi_fdiv+0x1de>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	425a      	negs	r2, r3
 8000d90:	4153      	adcs	r3, r2
 8000d92:	425b      	negs	r3, r3
 8000d94:	0035      	movs	r5, r6
 8000d96:	2200      	movs	r2, #0
 8000d98:	b2d8      	uxtb	r0, r3
 8000d9a:	e773      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a52      	lsrs	r2, r2, #9
 8000da2:	e76f      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000da4:	431a      	orrs	r2, r3
 8000da6:	0252      	lsls	r2, r2, #9
 8000da8:	0035      	movs	r5, r6
 8000daa:	20ff      	movs	r0, #255	@ 0xff
 8000dac:	0a52      	lsrs	r2, r2, #9
 8000dae:	e769      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000db0:	4644      	mov	r4, r8
 8000db2:	e7ad      	b.n	8000d10 <__aeabi_fdiv+0x190>
 8000db4:	08011130 	.word	0x08011130
 8000db8:	08011170 	.word	0x08011170
 8000dbc:	f7ffffff 	.word	0xf7ffffff

08000dc0 <__eqsf2>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	0042      	lsls	r2, r0, #1
 8000dc4:	024e      	lsls	r6, r1, #9
 8000dc6:	004c      	lsls	r4, r1, #1
 8000dc8:	0245      	lsls	r5, r0, #9
 8000dca:	0a6d      	lsrs	r5, r5, #9
 8000dcc:	0e12      	lsrs	r2, r2, #24
 8000dce:	0fc3      	lsrs	r3, r0, #31
 8000dd0:	0a76      	lsrs	r6, r6, #9
 8000dd2:	0e24      	lsrs	r4, r4, #24
 8000dd4:	0fc9      	lsrs	r1, r1, #31
 8000dd6:	2aff      	cmp	r2, #255	@ 0xff
 8000dd8:	d010      	beq.n	8000dfc <__eqsf2+0x3c>
 8000dda:	2cff      	cmp	r4, #255	@ 0xff
 8000ddc:	d00c      	beq.n	8000df8 <__eqsf2+0x38>
 8000dde:	2001      	movs	r0, #1
 8000de0:	42a2      	cmp	r2, r4
 8000de2:	d10a      	bne.n	8000dfa <__eqsf2+0x3a>
 8000de4:	42b5      	cmp	r5, r6
 8000de6:	d108      	bne.n	8000dfa <__eqsf2+0x3a>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d00f      	beq.n	8000e0c <__eqsf2+0x4c>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d104      	bne.n	8000dfa <__eqsf2+0x3a>
 8000df0:	0028      	movs	r0, r5
 8000df2:	1e43      	subs	r3, r0, #1
 8000df4:	4198      	sbcs	r0, r3
 8000df6:	e000      	b.n	8000dfa <__eqsf2+0x3a>
 8000df8:	2001      	movs	r0, #1
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	2cff      	cmp	r4, #255	@ 0xff
 8000e00:	d1fb      	bne.n	8000dfa <__eqsf2+0x3a>
 8000e02:	4335      	orrs	r5, r6
 8000e04:	d1f9      	bne.n	8000dfa <__eqsf2+0x3a>
 8000e06:	404b      	eors	r3, r1
 8000e08:	0018      	movs	r0, r3
 8000e0a:	e7f6      	b.n	8000dfa <__eqsf2+0x3a>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e7f4      	b.n	8000dfa <__eqsf2+0x3a>

08000e10 <__gesf2>:
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	0fc3      	lsrs	r3, r0, #31
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e00      	lsrs	r0, r0, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d019      	beq.n	8000e5e <__gesf2+0x4e>
 8000e2a:	28ff      	cmp	r0, #255	@ 0xff
 8000e2c:	d00b      	beq.n	8000e46 <__gesf2+0x36>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d11e      	bne.n	8000e70 <__gesf2+0x60>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d10b      	bne.n	8000e4e <__gesf2+0x3e>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d027      	beq.n	8000e8a <__gesf2+0x7a>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d134      	bne.n	8000ea8 <__gesf2+0x98>
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d02f      	beq.n	8000ea2 <__gesf2+0x92>
 8000e42:	0008      	movs	r0, r1
 8000e44:	bd30      	pop	{r4, r5, pc}
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d128      	bne.n	8000e9c <__gesf2+0x8c>
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d101      	bne.n	8000e52 <__gesf2+0x42>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d0f5      	beq.n	8000e3e <__gesf2+0x2e>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d107      	bne.n	8000e66 <__gesf2+0x56>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d023      	beq.n	8000ea2 <__gesf2+0x92>
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	e7f2      	b.n	8000e44 <__gesf2+0x34>
 8000e5e:	2c00      	cmp	r4, #0
 8000e60:	d11c      	bne.n	8000e9c <__gesf2+0x8c>
 8000e62:	28ff      	cmp	r0, #255	@ 0xff
 8000e64:	d014      	beq.n	8000e90 <__gesf2+0x80>
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	2302      	movs	r3, #2
 8000e6a:	4018      	ands	r0, r3
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7e9      	b.n	8000e44 <__gesf2+0x34>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d0f8      	beq.n	8000e66 <__gesf2+0x56>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d1f6      	bne.n	8000e66 <__gesf2+0x56>
 8000e78:	4282      	cmp	r2, r0
 8000e7a:	dcf4      	bgt.n	8000e66 <__gesf2+0x56>
 8000e7c:	dbeb      	blt.n	8000e56 <__gesf2+0x46>
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	d8f1      	bhi.n	8000e66 <__gesf2+0x56>
 8000e82:	2000      	movs	r0, #0
 8000e84:	42ac      	cmp	r4, r5
 8000e86:	d2dd      	bcs.n	8000e44 <__gesf2+0x34>
 8000e88:	e7e5      	b.n	8000e56 <__gesf2+0x46>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d0da      	beq.n	8000e44 <__gesf2+0x34>
 8000e8e:	e7ea      	b.n	8000e66 <__gesf2+0x56>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d103      	bne.n	8000e9c <__gesf2+0x8c>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1e6      	bne.n	8000e66 <__gesf2+0x56>
 8000e98:	2000      	movs	r0, #0
 8000e9a:	e7d3      	b.n	8000e44 <__gesf2+0x34>
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	e7d0      	b.n	8000e44 <__gesf2+0x34>
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4240      	negs	r0, r0
 8000ea6:	e7cd      	b.n	8000e44 <__gesf2+0x34>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d0e8      	beq.n	8000e7e <__gesf2+0x6e>
 8000eac:	e7db      	b.n	8000e66 <__gesf2+0x56>
 8000eae:	46c0      	nop			@ (mov r8, r8)

08000eb0 <__lesf2>:
 8000eb0:	b530      	push	{r4, r5, lr}
 8000eb2:	0042      	lsls	r2, r0, #1
 8000eb4:	0244      	lsls	r4, r0, #9
 8000eb6:	024d      	lsls	r5, r1, #9
 8000eb8:	0fc3      	lsrs	r3, r0, #31
 8000eba:	0048      	lsls	r0, r1, #1
 8000ebc:	0a64      	lsrs	r4, r4, #9
 8000ebe:	0e12      	lsrs	r2, r2, #24
 8000ec0:	0a6d      	lsrs	r5, r5, #9
 8000ec2:	0e00      	lsrs	r0, r0, #24
 8000ec4:	0fc9      	lsrs	r1, r1, #31
 8000ec6:	2aff      	cmp	r2, #255	@ 0xff
 8000ec8:	d01a      	beq.n	8000f00 <__lesf2+0x50>
 8000eca:	28ff      	cmp	r0, #255	@ 0xff
 8000ecc:	d00e      	beq.n	8000eec <__lesf2+0x3c>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d11e      	bne.n	8000f10 <__lesf2+0x60>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d10e      	bne.n	8000ef4 <__lesf2+0x44>
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d02a      	beq.n	8000f30 <__lesf2+0x80>
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d00c      	beq.n	8000ef8 <__lesf2+0x48>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d01d      	beq.n	8000f1e <__lesf2+0x6e>
 8000ee2:	1e58      	subs	r0, r3, #1
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	4018      	ands	r0, r3
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e010      	b.n	8000f0e <__lesf2+0x5e>
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d10d      	bne.n	8000f0c <__lesf2+0x5c>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d120      	bne.n	8000f36 <__lesf2+0x86>
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d11e      	bne.n	8000f36 <__lesf2+0x86>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	d023      	beq.n	8000f44 <__lesf2+0x94>
 8000efc:	0008      	movs	r0, r1
 8000efe:	e006      	b.n	8000f0e <__lesf2+0x5e>
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d103      	bne.n	8000f0c <__lesf2+0x5c>
 8000f04:	28ff      	cmp	r0, #255	@ 0xff
 8000f06:	d1ec      	bne.n	8000ee2 <__lesf2+0x32>
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	d017      	beq.n	8000f3c <__lesf2+0x8c>
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	bd30      	pop	{r4, r5, pc}
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d0e6      	beq.n	8000ee2 <__lesf2+0x32>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d1e4      	bne.n	8000ee2 <__lesf2+0x32>
 8000f18:	4282      	cmp	r2, r0
 8000f1a:	dce2      	bgt.n	8000ee2 <__lesf2+0x32>
 8000f1c:	db04      	blt.n	8000f28 <__lesf2+0x78>
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	d8df      	bhi.n	8000ee2 <__lesf2+0x32>
 8000f22:	2000      	movs	r0, #0
 8000f24:	42ac      	cmp	r4, r5
 8000f26:	d2f2      	bcs.n	8000f0e <__lesf2+0x5e>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <__lesf2+0x94>
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	e7ee      	b.n	8000f0e <__lesf2+0x5e>
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d0ec      	beq.n	8000f0e <__lesf2+0x5e>
 8000f34:	e7d5      	b.n	8000ee2 <__lesf2+0x32>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d1d3      	bne.n	8000ee2 <__lesf2+0x32>
 8000f3a:	e7f5      	b.n	8000f28 <__lesf2+0x78>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d0e5      	beq.n	8000f0e <__lesf2+0x5e>
 8000f42:	e7ce      	b.n	8000ee2 <__lesf2+0x32>
 8000f44:	2001      	movs	r0, #1
 8000f46:	4240      	negs	r0, r0
 8000f48:	e7e1      	b.n	8000f0e <__lesf2+0x5e>
 8000f4a:	46c0      	nop			@ (mov r8, r8)

08000f4c <__aeabi_fmul>:
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	464f      	mov	r7, r9
 8000f50:	4646      	mov	r6, r8
 8000f52:	46d6      	mov	lr, sl
 8000f54:	0243      	lsls	r3, r0, #9
 8000f56:	0a5b      	lsrs	r3, r3, #9
 8000f58:	0045      	lsls	r5, r0, #1
 8000f5a:	b5c0      	push	{r6, r7, lr}
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	1c0f      	adds	r7, r1, #0
 8000f60:	0e2d      	lsrs	r5, r5, #24
 8000f62:	0fc6      	lsrs	r6, r0, #31
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fmul+0x1e>
 8000f68:	e088      	b.n	800107c <__aeabi_fmul+0x130>
 8000f6a:	2dff      	cmp	r5, #255	@ 0xff
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_fmul+0x24>
 8000f6e:	e08d      	b.n	800108c <__aeabi_fmul+0x140>
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	04d2      	lsls	r2, r2, #19
 8000f76:	431a      	orrs	r2, r3
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4691      	mov	r9, r2
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	469a      	mov	sl, r3
 8000f80:	3d7f      	subs	r5, #127	@ 0x7f
 8000f82:	027c      	lsls	r4, r7, #9
 8000f84:	007b      	lsls	r3, r7, #1
 8000f86:	0a64      	lsrs	r4, r4, #9
 8000f88:	0e1b      	lsrs	r3, r3, #24
 8000f8a:	0fff      	lsrs	r7, r7, #31
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d068      	beq.n	8001062 <__aeabi_fmul+0x116>
 8000f90:	2bff      	cmp	r3, #255	@ 0xff
 8000f92:	d021      	beq.n	8000fd8 <__aeabi_fmul+0x8c>
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	00e4      	lsls	r4, r4, #3
 8000f98:	04d2      	lsls	r2, r2, #19
 8000f9a:	4314      	orrs	r4, r2
 8000f9c:	4642      	mov	r2, r8
 8000f9e:	3b7f      	subs	r3, #127	@ 0x7f
 8000fa0:	195b      	adds	r3, r3, r5
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	1c5d      	adds	r5, r3, #1
 8000fa6:	2a0a      	cmp	r2, #10
 8000fa8:	dc2e      	bgt.n	8001008 <__aeabi_fmul+0xbc>
 8000faa:	407e      	eors	r6, r7
 8000fac:	4642      	mov	r2, r8
 8000fae:	2a02      	cmp	r2, #2
 8000fb0:	dc23      	bgt.n	8000ffa <__aeabi_fmul+0xae>
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d900      	bls.n	8000fba <__aeabi_fmul+0x6e>
 8000fb8:	e0bd      	b.n	8001136 <__aeabi_fmul+0x1ea>
 8000fba:	2902      	cmp	r1, #2
 8000fbc:	d06e      	beq.n	800109c <__aeabi_fmul+0x150>
 8000fbe:	2901      	cmp	r1, #1
 8000fc0:	d12c      	bne.n	800101c <__aeabi_fmul+0xd0>
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	05c0      	lsls	r0, r0, #23
 8000fc8:	07f6      	lsls	r6, r6, #31
 8000fca:	4310      	orrs	r0, r2
 8000fcc:	4330      	orrs	r0, r6
 8000fce:	bce0      	pop	{r5, r6, r7}
 8000fd0:	46ba      	mov	sl, r7
 8000fd2:	46b1      	mov	r9, r6
 8000fd4:	46a8      	mov	r8, r5
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd8:	002b      	movs	r3, r5
 8000fda:	33ff      	adds	r3, #255	@ 0xff
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	d065      	beq.n	80010ac <__aeabi_fmul+0x160>
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4641      	mov	r1, r8
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	3501      	adds	r5, #1
 8000fea:	4688      	mov	r8, r1
 8000fec:	407a      	eors	r2, r7
 8000fee:	35ff      	adds	r5, #255	@ 0xff
 8000ff0:	290a      	cmp	r1, #10
 8000ff2:	dd00      	ble.n	8000ff6 <__aeabi_fmul+0xaa>
 8000ff4:	e0d8      	b.n	80011a8 <__aeabi_fmul+0x25c>
 8000ff6:	0016      	movs	r6, r2
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4082      	lsls	r2, r0
 8001000:	20a6      	movs	r0, #166	@ 0xa6
 8001002:	00c0      	lsls	r0, r0, #3
 8001004:	4202      	tst	r2, r0
 8001006:	d020      	beq.n	800104a <__aeabi_fmul+0xfe>
 8001008:	4653      	mov	r3, sl
 800100a:	2b02      	cmp	r3, #2
 800100c:	d046      	beq.n	800109c <__aeabi_fmul+0x150>
 800100e:	2b03      	cmp	r3, #3
 8001010:	d100      	bne.n	8001014 <__aeabi_fmul+0xc8>
 8001012:	e0bb      	b.n	800118c <__aeabi_fmul+0x240>
 8001014:	4651      	mov	r1, sl
 8001016:	464c      	mov	r4, r9
 8001018:	2901      	cmp	r1, #1
 800101a:	d0d2      	beq.n	8000fc2 <__aeabi_fmul+0x76>
 800101c:	002b      	movs	r3, r5
 800101e:	337f      	adds	r3, #127	@ 0x7f
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd70      	ble.n	8001106 <__aeabi_fmul+0x1ba>
 8001024:	0762      	lsls	r2, r4, #29
 8001026:	d004      	beq.n	8001032 <__aeabi_fmul+0xe6>
 8001028:	220f      	movs	r2, #15
 800102a:	4022      	ands	r2, r4
 800102c:	2a04      	cmp	r2, #4
 800102e:	d000      	beq.n	8001032 <__aeabi_fmul+0xe6>
 8001030:	3404      	adds	r4, #4
 8001032:	0122      	lsls	r2, r4, #4
 8001034:	d503      	bpl.n	800103e <__aeabi_fmul+0xf2>
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <__aeabi_fmul+0x278>)
 8001038:	401c      	ands	r4, r3
 800103a:	002b      	movs	r3, r5
 800103c:	3380      	adds	r3, #128	@ 0x80
 800103e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001040:	dc2c      	bgt.n	800109c <__aeabi_fmul+0x150>
 8001042:	01a2      	lsls	r2, r4, #6
 8001044:	0a52      	lsrs	r2, r2, #9
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	e7bd      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 800104a:	2090      	movs	r0, #144	@ 0x90
 800104c:	0080      	lsls	r0, r0, #2
 800104e:	4202      	tst	r2, r0
 8001050:	d127      	bne.n	80010a2 <__aeabi_fmul+0x156>
 8001052:	38b9      	subs	r0, #185	@ 0xb9
 8001054:	38ff      	subs	r0, #255	@ 0xff
 8001056:	4210      	tst	r0, r2
 8001058:	d06d      	beq.n	8001136 <__aeabi_fmul+0x1ea>
 800105a:	003e      	movs	r6, r7
 800105c:	46a1      	mov	r9, r4
 800105e:	468a      	mov	sl, r1
 8001060:	e7d2      	b.n	8001008 <__aeabi_fmul+0xbc>
 8001062:	2c00      	cmp	r4, #0
 8001064:	d141      	bne.n	80010ea <__aeabi_fmul+0x19e>
 8001066:	2301      	movs	r3, #1
 8001068:	4642      	mov	r2, r8
 800106a:	431a      	orrs	r2, r3
 800106c:	4690      	mov	r8, r2
 800106e:	002b      	movs	r3, r5
 8001070:	4642      	mov	r2, r8
 8001072:	2101      	movs	r1, #1
 8001074:	1c5d      	adds	r5, r3, #1
 8001076:	2a0a      	cmp	r2, #10
 8001078:	dd97      	ble.n	8000faa <__aeabi_fmul+0x5e>
 800107a:	e7c5      	b.n	8001008 <__aeabi_fmul+0xbc>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d126      	bne.n	80010ce <__aeabi_fmul+0x182>
 8001080:	2304      	movs	r3, #4
 8001082:	4698      	mov	r8, r3
 8001084:	3b03      	subs	r3, #3
 8001086:	2500      	movs	r5, #0
 8001088:	469a      	mov	sl, r3
 800108a:	e77a      	b.n	8000f82 <__aeabi_fmul+0x36>
 800108c:	2b00      	cmp	r3, #0
 800108e:	d118      	bne.n	80010c2 <__aeabi_fmul+0x176>
 8001090:	2308      	movs	r3, #8
 8001092:	4698      	mov	r8, r3
 8001094:	3b06      	subs	r3, #6
 8001096:	25ff      	movs	r5, #255	@ 0xff
 8001098:	469a      	mov	sl, r3
 800109a:	e772      	b.n	8000f82 <__aeabi_fmul+0x36>
 800109c:	20ff      	movs	r0, #255	@ 0xff
 800109e:	2200      	movs	r2, #0
 80010a0:	e791      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80010a2:	2280      	movs	r2, #128	@ 0x80
 80010a4:	2600      	movs	r6, #0
 80010a6:	20ff      	movs	r0, #255	@ 0xff
 80010a8:	03d2      	lsls	r2, r2, #15
 80010aa:	e78c      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80010ac:	4641      	mov	r1, r8
 80010ae:	2202      	movs	r2, #2
 80010b0:	3501      	adds	r5, #1
 80010b2:	4311      	orrs	r1, r2
 80010b4:	4688      	mov	r8, r1
 80010b6:	35ff      	adds	r5, #255	@ 0xff
 80010b8:	290a      	cmp	r1, #10
 80010ba:	dca5      	bgt.n	8001008 <__aeabi_fmul+0xbc>
 80010bc:	2102      	movs	r1, #2
 80010be:	407e      	eors	r6, r7
 80010c0:	e774      	b.n	8000fac <__aeabi_fmul+0x60>
 80010c2:	230c      	movs	r3, #12
 80010c4:	4698      	mov	r8, r3
 80010c6:	3b09      	subs	r3, #9
 80010c8:	25ff      	movs	r5, #255	@ 0xff
 80010ca:	469a      	mov	sl, r3
 80010cc:	e759      	b.n	8000f82 <__aeabi_fmul+0x36>
 80010ce:	0018      	movs	r0, r3
 80010d0:	f002 fa54 	bl	800357c <__clzsi2>
 80010d4:	464a      	mov	r2, r9
 80010d6:	1f43      	subs	r3, r0, #5
 80010d8:	2576      	movs	r5, #118	@ 0x76
 80010da:	409a      	lsls	r2, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	426d      	negs	r5, r5
 80010e0:	4691      	mov	r9, r2
 80010e2:	4698      	mov	r8, r3
 80010e4:	469a      	mov	sl, r3
 80010e6:	1a2d      	subs	r5, r5, r0
 80010e8:	e74b      	b.n	8000f82 <__aeabi_fmul+0x36>
 80010ea:	0020      	movs	r0, r4
 80010ec:	f002 fa46 	bl	800357c <__clzsi2>
 80010f0:	4642      	mov	r2, r8
 80010f2:	1f43      	subs	r3, r0, #5
 80010f4:	409c      	lsls	r4, r3
 80010f6:	1a2b      	subs	r3, r5, r0
 80010f8:	3b76      	subs	r3, #118	@ 0x76
 80010fa:	2100      	movs	r1, #0
 80010fc:	1c5d      	adds	r5, r3, #1
 80010fe:	2a0a      	cmp	r2, #10
 8001100:	dc00      	bgt.n	8001104 <__aeabi_fmul+0x1b8>
 8001102:	e752      	b.n	8000faa <__aeabi_fmul+0x5e>
 8001104:	e780      	b.n	8001008 <__aeabi_fmul+0xbc>
 8001106:	2201      	movs	r2, #1
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b1b      	cmp	r3, #27
 800110c:	dd00      	ble.n	8001110 <__aeabi_fmul+0x1c4>
 800110e:	e758      	b.n	8000fc2 <__aeabi_fmul+0x76>
 8001110:	359e      	adds	r5, #158	@ 0x9e
 8001112:	0022      	movs	r2, r4
 8001114:	40ac      	lsls	r4, r5
 8001116:	40da      	lsrs	r2, r3
 8001118:	1e63      	subs	r3, r4, #1
 800111a:	419c      	sbcs	r4, r3
 800111c:	4322      	orrs	r2, r4
 800111e:	0753      	lsls	r3, r2, #29
 8001120:	d004      	beq.n	800112c <__aeabi_fmul+0x1e0>
 8001122:	230f      	movs	r3, #15
 8001124:	4013      	ands	r3, r2
 8001126:	2b04      	cmp	r3, #4
 8001128:	d000      	beq.n	800112c <__aeabi_fmul+0x1e0>
 800112a:	3204      	adds	r2, #4
 800112c:	0153      	lsls	r3, r2, #5
 800112e:	d537      	bpl.n	80011a0 <__aeabi_fmul+0x254>
 8001130:	2001      	movs	r0, #1
 8001132:	2200      	movs	r2, #0
 8001134:	e747      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 8001136:	0c21      	lsrs	r1, r4, #16
 8001138:	464a      	mov	r2, r9
 800113a:	0424      	lsls	r4, r4, #16
 800113c:	0c24      	lsrs	r4, r4, #16
 800113e:	0027      	movs	r7, r4
 8001140:	0c10      	lsrs	r0, r2, #16
 8001142:	0412      	lsls	r2, r2, #16
 8001144:	0c12      	lsrs	r2, r2, #16
 8001146:	4344      	muls	r4, r0
 8001148:	4357      	muls	r7, r2
 800114a:	4348      	muls	r0, r1
 800114c:	4351      	muls	r1, r2
 800114e:	0c3a      	lsrs	r2, r7, #16
 8001150:	1909      	adds	r1, r1, r4
 8001152:	1852      	adds	r2, r2, r1
 8001154:	4294      	cmp	r4, r2
 8001156:	d903      	bls.n	8001160 <__aeabi_fmul+0x214>
 8001158:	2180      	movs	r1, #128	@ 0x80
 800115a:	0249      	lsls	r1, r1, #9
 800115c:	468c      	mov	ip, r1
 800115e:	4460      	add	r0, ip
 8001160:	043f      	lsls	r7, r7, #16
 8001162:	0411      	lsls	r1, r2, #16
 8001164:	0c3f      	lsrs	r7, r7, #16
 8001166:	19c9      	adds	r1, r1, r7
 8001168:	018c      	lsls	r4, r1, #6
 800116a:	1e67      	subs	r7, r4, #1
 800116c:	41bc      	sbcs	r4, r7
 800116e:	0c12      	lsrs	r2, r2, #16
 8001170:	0e89      	lsrs	r1, r1, #26
 8001172:	1812      	adds	r2, r2, r0
 8001174:	430c      	orrs	r4, r1
 8001176:	0192      	lsls	r2, r2, #6
 8001178:	4314      	orrs	r4, r2
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	d50e      	bpl.n	800119c <__aeabi_fmul+0x250>
 800117e:	2301      	movs	r3, #1
 8001180:	0862      	lsrs	r2, r4, #1
 8001182:	401c      	ands	r4, r3
 8001184:	4314      	orrs	r4, r2
 8001186:	e749      	b.n	800101c <__aeabi_fmul+0xd0>
 8001188:	003e      	movs	r6, r7
 800118a:	46a1      	mov	r9, r4
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	464b      	mov	r3, r9
 8001190:	03d2      	lsls	r2, r2, #15
 8001192:	431a      	orrs	r2, r3
 8001194:	0252      	lsls	r2, r2, #9
 8001196:	20ff      	movs	r0, #255	@ 0xff
 8001198:	0a52      	lsrs	r2, r2, #9
 800119a:	e714      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 800119c:	001d      	movs	r5, r3
 800119e:	e73d      	b.n	800101c <__aeabi_fmul+0xd0>
 80011a0:	0192      	lsls	r2, r2, #6
 80011a2:	2000      	movs	r0, #0
 80011a4:	0a52      	lsrs	r2, r2, #9
 80011a6:	e70e      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80011a8:	290f      	cmp	r1, #15
 80011aa:	d1ed      	bne.n	8001188 <__aeabi_fmul+0x23c>
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	464b      	mov	r3, r9
 80011b0:	03d2      	lsls	r2, r2, #15
 80011b2:	4213      	tst	r3, r2
 80011b4:	d0ea      	beq.n	800118c <__aeabi_fmul+0x240>
 80011b6:	4214      	tst	r4, r2
 80011b8:	d1e8      	bne.n	800118c <__aeabi_fmul+0x240>
 80011ba:	003e      	movs	r6, r7
 80011bc:	20ff      	movs	r0, #255	@ 0xff
 80011be:	4322      	orrs	r2, r4
 80011c0:	e701      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	f7ffffff 	.word	0xf7ffffff

080011c8 <__aeabi_fsub>:
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ca:	4647      	mov	r7, r8
 80011cc:	46ce      	mov	lr, r9
 80011ce:	024e      	lsls	r6, r1, #9
 80011d0:	0243      	lsls	r3, r0, #9
 80011d2:	0045      	lsls	r5, r0, #1
 80011d4:	0a72      	lsrs	r2, r6, #9
 80011d6:	0fc4      	lsrs	r4, r0, #31
 80011d8:	0048      	lsls	r0, r1, #1
 80011da:	b580      	push	{r7, lr}
 80011dc:	4694      	mov	ip, r2
 80011de:	0a5f      	lsrs	r7, r3, #9
 80011e0:	0e2d      	lsrs	r5, r5, #24
 80011e2:	099b      	lsrs	r3, r3, #6
 80011e4:	0e00      	lsrs	r0, r0, #24
 80011e6:	0fc9      	lsrs	r1, r1, #31
 80011e8:	09b6      	lsrs	r6, r6, #6
 80011ea:	28ff      	cmp	r0, #255	@ 0xff
 80011ec:	d024      	beq.n	8001238 <__aeabi_fsub+0x70>
 80011ee:	2201      	movs	r2, #1
 80011f0:	4051      	eors	r1, r2
 80011f2:	1a2a      	subs	r2, r5, r0
 80011f4:	428c      	cmp	r4, r1
 80011f6:	d00f      	beq.n	8001218 <__aeabi_fsub+0x50>
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	dc00      	bgt.n	80011fe <__aeabi_fsub+0x36>
 80011fc:	e16a      	b.n	80014d4 <__aeabi_fsub+0x30c>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d135      	bne.n	800126e <__aeabi_fsub+0xa6>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_fsub+0x40>
 8001206:	e0a2      	b.n	800134e <__aeabi_fsub+0x186>
 8001208:	1e51      	subs	r1, r2, #1
 800120a:	2a01      	cmp	r2, #1
 800120c:	d100      	bne.n	8001210 <__aeabi_fsub+0x48>
 800120e:	e124      	b.n	800145a <__aeabi_fsub+0x292>
 8001210:	2aff      	cmp	r2, #255	@ 0xff
 8001212:	d021      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001214:	000a      	movs	r2, r1
 8001216:	e02f      	b.n	8001278 <__aeabi_fsub+0xb0>
 8001218:	2a00      	cmp	r2, #0
 800121a:	dc00      	bgt.n	800121e <__aeabi_fsub+0x56>
 800121c:	e167      	b.n	80014ee <__aeabi_fsub+0x326>
 800121e:	2800      	cmp	r0, #0
 8001220:	d05e      	beq.n	80012e0 <__aeabi_fsub+0x118>
 8001222:	2dff      	cmp	r5, #255	@ 0xff
 8001224:	d018      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	04c9      	lsls	r1, r1, #19
 800122a:	430e      	orrs	r6, r1
 800122c:	2a1b      	cmp	r2, #27
 800122e:	dc00      	bgt.n	8001232 <__aeabi_fsub+0x6a>
 8001230:	e076      	b.n	8001320 <__aeabi_fsub+0x158>
 8001232:	002a      	movs	r2, r5
 8001234:	3301      	adds	r3, #1
 8001236:	e032      	b.n	800129e <__aeabi_fsub+0xd6>
 8001238:	002a      	movs	r2, r5
 800123a:	3aff      	subs	r2, #255	@ 0xff
 800123c:	4691      	mov	r9, r2
 800123e:	2e00      	cmp	r6, #0
 8001240:	d042      	beq.n	80012c8 <__aeabi_fsub+0x100>
 8001242:	428c      	cmp	r4, r1
 8001244:	d055      	beq.n	80012f2 <__aeabi_fsub+0x12a>
 8001246:	464a      	mov	r2, r9
 8001248:	2a00      	cmp	r2, #0
 800124a:	d100      	bne.n	800124e <__aeabi_fsub+0x86>
 800124c:	e09c      	b.n	8001388 <__aeabi_fsub+0x1c0>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_fsub+0x8c>
 8001252:	e077      	b.n	8001344 <__aeabi_fsub+0x17c>
 8001254:	000c      	movs	r4, r1
 8001256:	0033      	movs	r3, r6
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <__aeabi_fsub+0x98>
 800125e:	e06e      	b.n	800133e <__aeabi_fsub+0x176>
 8001260:	2280      	movs	r2, #128	@ 0x80
 8001262:	03d2      	lsls	r2, r2, #15
 8001264:	4313      	orrs	r3, r2
 8001266:	025b      	lsls	r3, r3, #9
 8001268:	20ff      	movs	r0, #255	@ 0xff
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	e024      	b.n	80012b8 <__aeabi_fsub+0xf0>
 800126e:	2dff      	cmp	r5, #255	@ 0xff
 8001270:	d0f2      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	04c9      	lsls	r1, r1, #19
 8001276:	430e      	orrs	r6, r1
 8001278:	2101      	movs	r1, #1
 800127a:	2a1b      	cmp	r2, #27
 800127c:	dc08      	bgt.n	8001290 <__aeabi_fsub+0xc8>
 800127e:	0031      	movs	r1, r6
 8001280:	2020      	movs	r0, #32
 8001282:	40d1      	lsrs	r1, r2
 8001284:	1a82      	subs	r2, r0, r2
 8001286:	4096      	lsls	r6, r2
 8001288:	0032      	movs	r2, r6
 800128a:	1e50      	subs	r0, r2, #1
 800128c:	4182      	sbcs	r2, r0
 800128e:	4311      	orrs	r1, r2
 8001290:	1a5b      	subs	r3, r3, r1
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	d460      	bmi.n	8001358 <__aeabi_fsub+0x190>
 8001296:	2107      	movs	r1, #7
 8001298:	002a      	movs	r2, r5
 800129a:	4019      	ands	r1, r3
 800129c:	d057      	beq.n	800134e <__aeabi_fsub+0x186>
 800129e:	210f      	movs	r1, #15
 80012a0:	4019      	ands	r1, r3
 80012a2:	2904      	cmp	r1, #4
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0xe0>
 80012a6:	3304      	adds	r3, #4
 80012a8:	0159      	lsls	r1, r3, #5
 80012aa:	d550      	bpl.n	800134e <__aeabi_fsub+0x186>
 80012ac:	1c50      	adds	r0, r2, #1
 80012ae:	2afe      	cmp	r2, #254	@ 0xfe
 80012b0:	d045      	beq.n	800133e <__aeabi_fsub+0x176>
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	b2c0      	uxtb	r0, r0
 80012b6:	0a5b      	lsrs	r3, r3, #9
 80012b8:	05c0      	lsls	r0, r0, #23
 80012ba:	4318      	orrs	r0, r3
 80012bc:	07e4      	lsls	r4, r4, #31
 80012be:	4320      	orrs	r0, r4
 80012c0:	bcc0      	pop	{r6, r7}
 80012c2:	46b9      	mov	r9, r7
 80012c4:	46b0      	mov	r8, r6
 80012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c8:	2201      	movs	r2, #1
 80012ca:	4051      	eors	r1, r2
 80012cc:	428c      	cmp	r4, r1
 80012ce:	d1ba      	bne.n	8001246 <__aeabi_fsub+0x7e>
 80012d0:	464a      	mov	r2, r9
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d010      	beq.n	80012f8 <__aeabi_fsub+0x130>
 80012d6:	2d00      	cmp	r5, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_fsub+0x114>
 80012da:	e098      	b.n	800140e <__aeabi_fsub+0x246>
 80012dc:	2300      	movs	r3, #0
 80012de:	e7bb      	b.n	8001258 <__aeabi_fsub+0x90>
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	d034      	beq.n	800134e <__aeabi_fsub+0x186>
 80012e4:	1e51      	subs	r1, r2, #1
 80012e6:	2a01      	cmp	r2, #1
 80012e8:	d06e      	beq.n	80013c8 <__aeabi_fsub+0x200>
 80012ea:	2aff      	cmp	r2, #255	@ 0xff
 80012ec:	d0b4      	beq.n	8001258 <__aeabi_fsub+0x90>
 80012ee:	000a      	movs	r2, r1
 80012f0:	e79c      	b.n	800122c <__aeabi_fsub+0x64>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0x130>
 80012f6:	e088      	b.n	800140a <__aeabi_fsub+0x242>
 80012f8:	20fe      	movs	r0, #254	@ 0xfe
 80012fa:	1c6a      	adds	r2, r5, #1
 80012fc:	4210      	tst	r0, r2
 80012fe:	d000      	beq.n	8001302 <__aeabi_fsub+0x13a>
 8001300:	e092      	b.n	8001428 <__aeabi_fsub+0x260>
 8001302:	2d00      	cmp	r5, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_fsub+0x140>
 8001306:	e0a4      	b.n	8001452 <__aeabi_fsub+0x28a>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x146>
 800130c:	e0cb      	b.n	80014a6 <__aeabi_fsub+0x2de>
 800130e:	2e00      	cmp	r6, #0
 8001310:	d000      	beq.n	8001314 <__aeabi_fsub+0x14c>
 8001312:	e0ca      	b.n	80014aa <__aeabi_fsub+0x2e2>
 8001314:	2200      	movs	r2, #0
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	0a5b      	lsrs	r3, r3, #9
 800131c:	b2d0      	uxtb	r0, r2
 800131e:	e7cb      	b.n	80012b8 <__aeabi_fsub+0xf0>
 8001320:	0031      	movs	r1, r6
 8001322:	2020      	movs	r0, #32
 8001324:	40d1      	lsrs	r1, r2
 8001326:	1a82      	subs	r2, r0, r2
 8001328:	4096      	lsls	r6, r2
 800132a:	0032      	movs	r2, r6
 800132c:	1e50      	subs	r0, r2, #1
 800132e:	4182      	sbcs	r2, r0
 8001330:	430a      	orrs	r2, r1
 8001332:	189b      	adds	r3, r3, r2
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	d5ae      	bpl.n	8001296 <__aeabi_fsub+0xce>
 8001338:	1c6a      	adds	r2, r5, #1
 800133a:	2dfe      	cmp	r5, #254	@ 0xfe
 800133c:	d14a      	bne.n	80013d4 <__aeabi_fsub+0x20c>
 800133e:	20ff      	movs	r0, #255	@ 0xff
 8001340:	2300      	movs	r3, #0
 8001342:	e7b9      	b.n	80012b8 <__aeabi_fsub+0xf0>
 8001344:	22ff      	movs	r2, #255	@ 0xff
 8001346:	2b00      	cmp	r3, #0
 8001348:	d14b      	bne.n	80013e2 <__aeabi_fsub+0x21a>
 800134a:	000c      	movs	r4, r1
 800134c:	0033      	movs	r3, r6
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	2aff      	cmp	r2, #255	@ 0xff
 8001352:	d100      	bne.n	8001356 <__aeabi_fsub+0x18e>
 8001354:	e781      	b.n	800125a <__aeabi_fsub+0x92>
 8001356:	e7df      	b.n	8001318 <__aeabi_fsub+0x150>
 8001358:	019f      	lsls	r7, r3, #6
 800135a:	09bf      	lsrs	r7, r7, #6
 800135c:	0038      	movs	r0, r7
 800135e:	f002 f90d 	bl	800357c <__clzsi2>
 8001362:	3805      	subs	r0, #5
 8001364:	4087      	lsls	r7, r0
 8001366:	4285      	cmp	r5, r0
 8001368:	dc21      	bgt.n	80013ae <__aeabi_fsub+0x1e6>
 800136a:	003b      	movs	r3, r7
 800136c:	2120      	movs	r1, #32
 800136e:	1b42      	subs	r2, r0, r5
 8001370:	3201      	adds	r2, #1
 8001372:	40d3      	lsrs	r3, r2
 8001374:	1a8a      	subs	r2, r1, r2
 8001376:	4097      	lsls	r7, r2
 8001378:	1e7a      	subs	r2, r7, #1
 800137a:	4197      	sbcs	r7, r2
 800137c:	2200      	movs	r2, #0
 800137e:	433b      	orrs	r3, r7
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x1be>
 8001384:	e78b      	b.n	800129e <__aeabi_fsub+0xd6>
 8001386:	e78f      	b.n	80012a8 <__aeabi_fsub+0xe0>
 8001388:	20fe      	movs	r0, #254	@ 0xfe
 800138a:	1c6a      	adds	r2, r5, #1
 800138c:	4210      	tst	r0, r2
 800138e:	d112      	bne.n	80013b6 <__aeabi_fsub+0x1ee>
 8001390:	2d00      	cmp	r5, #0
 8001392:	d152      	bne.n	800143a <__aeabi_fsub+0x272>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d07c      	beq.n	8001492 <__aeabi_fsub+0x2ca>
 8001398:	2e00      	cmp	r6, #0
 800139a:	d0bb      	beq.n	8001314 <__aeabi_fsub+0x14c>
 800139c:	1b9a      	subs	r2, r3, r6
 800139e:	0150      	lsls	r0, r2, #5
 80013a0:	d400      	bmi.n	80013a4 <__aeabi_fsub+0x1dc>
 80013a2:	e08b      	b.n	80014bc <__aeabi_fsub+0x2f4>
 80013a4:	2401      	movs	r4, #1
 80013a6:	2200      	movs	r2, #0
 80013a8:	1af3      	subs	r3, r6, r3
 80013aa:	400c      	ands	r4, r1
 80013ac:	e7e8      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013ae:	4b56      	ldr	r3, [pc, #344]	@ (8001508 <__aeabi_fsub+0x340>)
 80013b0:	1a2a      	subs	r2, r5, r0
 80013b2:	403b      	ands	r3, r7
 80013b4:	e7e4      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013b6:	1b9f      	subs	r7, r3, r6
 80013b8:	017a      	lsls	r2, r7, #5
 80013ba:	d446      	bmi.n	800144a <__aeabi_fsub+0x282>
 80013bc:	2f00      	cmp	r7, #0
 80013be:	d1cd      	bne.n	800135c <__aeabi_fsub+0x194>
 80013c0:	2400      	movs	r4, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	2300      	movs	r3, #0
 80013c6:	e777      	b.n	80012b8 <__aeabi_fsub+0xf0>
 80013c8:	199b      	adds	r3, r3, r6
 80013ca:	2501      	movs	r5, #1
 80013cc:	3201      	adds	r2, #1
 80013ce:	0159      	lsls	r1, r3, #5
 80013d0:	d400      	bmi.n	80013d4 <__aeabi_fsub+0x20c>
 80013d2:	e760      	b.n	8001296 <__aeabi_fsub+0xce>
 80013d4:	2101      	movs	r1, #1
 80013d6:	484d      	ldr	r0, [pc, #308]	@ (800150c <__aeabi_fsub+0x344>)
 80013d8:	4019      	ands	r1, r3
 80013da:	085b      	lsrs	r3, r3, #1
 80013dc:	4003      	ands	r3, r0
 80013de:	430b      	orrs	r3, r1
 80013e0:	e7ce      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013e2:	1e57      	subs	r7, r2, #1
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	d05a      	beq.n	800149e <__aeabi_fsub+0x2d6>
 80013e8:	000c      	movs	r4, r1
 80013ea:	2aff      	cmp	r2, #255	@ 0xff
 80013ec:	d033      	beq.n	8001456 <__aeabi_fsub+0x28e>
 80013ee:	2201      	movs	r2, #1
 80013f0:	2f1b      	cmp	r7, #27
 80013f2:	dc07      	bgt.n	8001404 <__aeabi_fsub+0x23c>
 80013f4:	2120      	movs	r1, #32
 80013f6:	1bc9      	subs	r1, r1, r7
 80013f8:	001a      	movs	r2, r3
 80013fa:	408b      	lsls	r3, r1
 80013fc:	40fa      	lsrs	r2, r7
 80013fe:	1e59      	subs	r1, r3, #1
 8001400:	418b      	sbcs	r3, r1
 8001402:	431a      	orrs	r2, r3
 8001404:	0005      	movs	r5, r0
 8001406:	1ab3      	subs	r3, r6, r2
 8001408:	e743      	b.n	8001292 <__aeabi_fsub+0xca>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d123      	bne.n	8001456 <__aeabi_fsub+0x28e>
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	2b00      	cmp	r3, #0
 8001412:	d09b      	beq.n	800134c <__aeabi_fsub+0x184>
 8001414:	1e51      	subs	r1, r2, #1
 8001416:	2a01      	cmp	r2, #1
 8001418:	d0d6      	beq.n	80013c8 <__aeabi_fsub+0x200>
 800141a:	2aff      	cmp	r2, #255	@ 0xff
 800141c:	d01b      	beq.n	8001456 <__aeabi_fsub+0x28e>
 800141e:	291b      	cmp	r1, #27
 8001420:	dd2c      	ble.n	800147c <__aeabi_fsub+0x2b4>
 8001422:	0002      	movs	r2, r0
 8001424:	1c73      	adds	r3, r6, #1
 8001426:	e73a      	b.n	800129e <__aeabi_fsub+0xd6>
 8001428:	2aff      	cmp	r2, #255	@ 0xff
 800142a:	d088      	beq.n	800133e <__aeabi_fsub+0x176>
 800142c:	199b      	adds	r3, r3, r6
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	0759      	lsls	r1, r3, #29
 8001432:	d000      	beq.n	8001436 <__aeabi_fsub+0x26e>
 8001434:	e733      	b.n	800129e <__aeabi_fsub+0xd6>
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	e76e      	b.n	8001318 <__aeabi_fsub+0x150>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d110      	bne.n	8001460 <__aeabi_fsub+0x298>
 800143e:	2e00      	cmp	r6, #0
 8001440:	d043      	beq.n	80014ca <__aeabi_fsub+0x302>
 8001442:	2401      	movs	r4, #1
 8001444:	0033      	movs	r3, r6
 8001446:	400c      	ands	r4, r1
 8001448:	e706      	b.n	8001258 <__aeabi_fsub+0x90>
 800144a:	2401      	movs	r4, #1
 800144c:	1af7      	subs	r7, r6, r3
 800144e:	400c      	ands	r4, r1
 8001450:	e784      	b.n	800135c <__aeabi_fsub+0x194>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d104      	bne.n	8001460 <__aeabi_fsub+0x298>
 8001456:	0033      	movs	r3, r6
 8001458:	e6fe      	b.n	8001258 <__aeabi_fsub+0x90>
 800145a:	2501      	movs	r5, #1
 800145c:	1b9b      	subs	r3, r3, r6
 800145e:	e718      	b.n	8001292 <__aeabi_fsub+0xca>
 8001460:	2e00      	cmp	r6, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x29e>
 8001464:	e6f8      	b.n	8001258 <__aeabi_fsub+0x90>
 8001466:	2280      	movs	r2, #128	@ 0x80
 8001468:	03d2      	lsls	r2, r2, #15
 800146a:	4297      	cmp	r7, r2
 800146c:	d304      	bcc.n	8001478 <__aeabi_fsub+0x2b0>
 800146e:	4594      	cmp	ip, r2
 8001470:	d202      	bcs.n	8001478 <__aeabi_fsub+0x2b0>
 8001472:	2401      	movs	r4, #1
 8001474:	0033      	movs	r3, r6
 8001476:	400c      	ands	r4, r1
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	e6f1      	b.n	8001260 <__aeabi_fsub+0x98>
 800147c:	001a      	movs	r2, r3
 800147e:	2520      	movs	r5, #32
 8001480:	40ca      	lsrs	r2, r1
 8001482:	1a69      	subs	r1, r5, r1
 8001484:	408b      	lsls	r3, r1
 8001486:	1e59      	subs	r1, r3, #1
 8001488:	418b      	sbcs	r3, r1
 800148a:	4313      	orrs	r3, r2
 800148c:	0005      	movs	r5, r0
 800148e:	199b      	adds	r3, r3, r6
 8001490:	e750      	b.n	8001334 <__aeabi_fsub+0x16c>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d094      	beq.n	80013c0 <__aeabi_fsub+0x1f8>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e73a      	b.n	8001314 <__aeabi_fsub+0x14c>
 800149e:	000c      	movs	r4, r1
 80014a0:	2501      	movs	r5, #1
 80014a2:	1af3      	subs	r3, r6, r3
 80014a4:	e6f5      	b.n	8001292 <__aeabi_fsub+0xca>
 80014a6:	0033      	movs	r3, r6
 80014a8:	e734      	b.n	8001314 <__aeabi_fsub+0x14c>
 80014aa:	199b      	adds	r3, r3, r6
 80014ac:	2200      	movs	r2, #0
 80014ae:	0159      	lsls	r1, r3, #5
 80014b0:	d5c1      	bpl.n	8001436 <__aeabi_fsub+0x26e>
 80014b2:	4a15      	ldr	r2, [pc, #84]	@ (8001508 <__aeabi_fsub+0x340>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	2201      	movs	r2, #1
 80014ba:	e72d      	b.n	8001318 <__aeabi_fsub+0x150>
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x2fa>
 80014c0:	e77e      	b.n	80013c0 <__aeabi_fsub+0x1f8>
 80014c2:	0013      	movs	r3, r2
 80014c4:	2200      	movs	r2, #0
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	e726      	b.n	8001318 <__aeabi_fsub+0x150>
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	2400      	movs	r4, #0
 80014ce:	20ff      	movs	r0, #255	@ 0xff
 80014d0:	03db      	lsls	r3, r3, #15
 80014d2:	e6f1      	b.n	80012b8 <__aeabi_fsub+0xf0>
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d100      	bne.n	80014da <__aeabi_fsub+0x312>
 80014d8:	e756      	b.n	8001388 <__aeabi_fsub+0x1c0>
 80014da:	1b47      	subs	r7, r0, r5
 80014dc:	003a      	movs	r2, r7
 80014de:	2d00      	cmp	r5, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_fsub+0x31c>
 80014e2:	e730      	b.n	8001346 <__aeabi_fsub+0x17e>
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	04d2      	lsls	r2, r2, #19
 80014e8:	000c      	movs	r4, r1
 80014ea:	4313      	orrs	r3, r2
 80014ec:	e77f      	b.n	80013ee <__aeabi_fsub+0x226>
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_fsub+0x32c>
 80014f2:	e701      	b.n	80012f8 <__aeabi_fsub+0x130>
 80014f4:	1b41      	subs	r1, r0, r5
 80014f6:	2d00      	cmp	r5, #0
 80014f8:	d101      	bne.n	80014fe <__aeabi_fsub+0x336>
 80014fa:	000a      	movs	r2, r1
 80014fc:	e788      	b.n	8001410 <__aeabi_fsub+0x248>
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	04d2      	lsls	r2, r2, #19
 8001502:	4313      	orrs	r3, r2
 8001504:	e78b      	b.n	800141e <__aeabi_fsub+0x256>
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	fbffffff 	.word	0xfbffffff
 800150c:	7dffffff 	.word	0x7dffffff

08001510 <__aeabi_f2iz>:
 8001510:	0241      	lsls	r1, r0, #9
 8001512:	0042      	lsls	r2, r0, #1
 8001514:	0fc3      	lsrs	r3, r0, #31
 8001516:	0a49      	lsrs	r1, r1, #9
 8001518:	2000      	movs	r0, #0
 800151a:	0e12      	lsrs	r2, r2, #24
 800151c:	2a7e      	cmp	r2, #126	@ 0x7e
 800151e:	dd03      	ble.n	8001528 <__aeabi_f2iz+0x18>
 8001520:	2a9d      	cmp	r2, #157	@ 0x9d
 8001522:	dd02      	ble.n	800152a <__aeabi_f2iz+0x1a>
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <__aeabi_f2iz+0x3c>)
 8001526:	1898      	adds	r0, r3, r2
 8001528:	4770      	bx	lr
 800152a:	2080      	movs	r0, #128	@ 0x80
 800152c:	0400      	lsls	r0, r0, #16
 800152e:	4301      	orrs	r1, r0
 8001530:	2a95      	cmp	r2, #149	@ 0x95
 8001532:	dc07      	bgt.n	8001544 <__aeabi_f2iz+0x34>
 8001534:	2096      	movs	r0, #150	@ 0x96
 8001536:	1a82      	subs	r2, r0, r2
 8001538:	40d1      	lsrs	r1, r2
 800153a:	4248      	negs	r0, r1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f3      	bne.n	8001528 <__aeabi_f2iz+0x18>
 8001540:	0008      	movs	r0, r1
 8001542:	e7f1      	b.n	8001528 <__aeabi_f2iz+0x18>
 8001544:	3a96      	subs	r2, #150	@ 0x96
 8001546:	4091      	lsls	r1, r2
 8001548:	e7f7      	b.n	800153a <__aeabi_f2iz+0x2a>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	7fffffff 	.word	0x7fffffff

08001550 <__aeabi_i2f>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	2800      	cmp	r0, #0
 8001554:	d013      	beq.n	800157e <__aeabi_i2f+0x2e>
 8001556:	17c3      	asrs	r3, r0, #31
 8001558:	18c5      	adds	r5, r0, r3
 800155a:	405d      	eors	r5, r3
 800155c:	0fc4      	lsrs	r4, r0, #31
 800155e:	0028      	movs	r0, r5
 8001560:	f002 f80c 	bl	800357c <__clzsi2>
 8001564:	239e      	movs	r3, #158	@ 0x9e
 8001566:	0001      	movs	r1, r0
 8001568:	1a1b      	subs	r3, r3, r0
 800156a:	2b96      	cmp	r3, #150	@ 0x96
 800156c:	dc0f      	bgt.n	800158e <__aeabi_i2f+0x3e>
 800156e:	2808      	cmp	r0, #8
 8001570:	d034      	beq.n	80015dc <__aeabi_i2f+0x8c>
 8001572:	3908      	subs	r1, #8
 8001574:	408d      	lsls	r5, r1
 8001576:	026d      	lsls	r5, r5, #9
 8001578:	0a6d      	lsrs	r5, r5, #9
 800157a:	b2d8      	uxtb	r0, r3
 800157c:	e002      	b.n	8001584 <__aeabi_i2f+0x34>
 800157e:	2400      	movs	r4, #0
 8001580:	2000      	movs	r0, #0
 8001582:	2500      	movs	r5, #0
 8001584:	05c0      	lsls	r0, r0, #23
 8001586:	4328      	orrs	r0, r5
 8001588:	07e4      	lsls	r4, r4, #31
 800158a:	4320      	orrs	r0, r4
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	2b99      	cmp	r3, #153	@ 0x99
 8001590:	dc16      	bgt.n	80015c0 <__aeabi_i2f+0x70>
 8001592:	1f42      	subs	r2, r0, #5
 8001594:	2805      	cmp	r0, #5
 8001596:	d000      	beq.n	800159a <__aeabi_i2f+0x4a>
 8001598:	4095      	lsls	r5, r2
 800159a:	002a      	movs	r2, r5
 800159c:	4811      	ldr	r0, [pc, #68]	@ (80015e4 <__aeabi_i2f+0x94>)
 800159e:	4002      	ands	r2, r0
 80015a0:	076e      	lsls	r6, r5, #29
 80015a2:	d009      	beq.n	80015b8 <__aeabi_i2f+0x68>
 80015a4:	260f      	movs	r6, #15
 80015a6:	4035      	ands	r5, r6
 80015a8:	2d04      	cmp	r5, #4
 80015aa:	d005      	beq.n	80015b8 <__aeabi_i2f+0x68>
 80015ac:	3204      	adds	r2, #4
 80015ae:	0155      	lsls	r5, r2, #5
 80015b0:	d502      	bpl.n	80015b8 <__aeabi_i2f+0x68>
 80015b2:	239f      	movs	r3, #159	@ 0x9f
 80015b4:	4002      	ands	r2, r0
 80015b6:	1a5b      	subs	r3, r3, r1
 80015b8:	0192      	lsls	r2, r2, #6
 80015ba:	0a55      	lsrs	r5, r2, #9
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	e7e1      	b.n	8001584 <__aeabi_i2f+0x34>
 80015c0:	2205      	movs	r2, #5
 80015c2:	1a12      	subs	r2, r2, r0
 80015c4:	0028      	movs	r0, r5
 80015c6:	40d0      	lsrs	r0, r2
 80015c8:	0002      	movs	r2, r0
 80015ca:	0008      	movs	r0, r1
 80015cc:	301b      	adds	r0, #27
 80015ce:	4085      	lsls	r5, r0
 80015d0:	0028      	movs	r0, r5
 80015d2:	1e45      	subs	r5, r0, #1
 80015d4:	41a8      	sbcs	r0, r5
 80015d6:	4302      	orrs	r2, r0
 80015d8:	0015      	movs	r5, r2
 80015da:	e7de      	b.n	800159a <__aeabi_i2f+0x4a>
 80015dc:	026d      	lsls	r5, r5, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a6d      	lsrs	r5, r5, #9
 80015e2:	e7cf      	b.n	8001584 <__aeabi_i2f+0x34>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_ui2f>:
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	1e04      	subs	r4, r0, #0
 80015ec:	d00e      	beq.n	800160c <__aeabi_ui2f+0x24>
 80015ee:	f001 ffc5 	bl	800357c <__clzsi2>
 80015f2:	239e      	movs	r3, #158	@ 0x9e
 80015f4:	0001      	movs	r1, r0
 80015f6:	1a1b      	subs	r3, r3, r0
 80015f8:	2b96      	cmp	r3, #150	@ 0x96
 80015fa:	dc0c      	bgt.n	8001616 <__aeabi_ui2f+0x2e>
 80015fc:	2808      	cmp	r0, #8
 80015fe:	d02f      	beq.n	8001660 <__aeabi_ui2f+0x78>
 8001600:	3908      	subs	r1, #8
 8001602:	408c      	lsls	r4, r1
 8001604:	0264      	lsls	r4, r4, #9
 8001606:	0a64      	lsrs	r4, r4, #9
 8001608:	b2d8      	uxtb	r0, r3
 800160a:	e001      	b.n	8001610 <__aeabi_ui2f+0x28>
 800160c:	2000      	movs	r0, #0
 800160e:	2400      	movs	r4, #0
 8001610:	05c0      	lsls	r0, r0, #23
 8001612:	4320      	orrs	r0, r4
 8001614:	bd70      	pop	{r4, r5, r6, pc}
 8001616:	2b99      	cmp	r3, #153	@ 0x99
 8001618:	dc16      	bgt.n	8001648 <__aeabi_ui2f+0x60>
 800161a:	1f42      	subs	r2, r0, #5
 800161c:	2805      	cmp	r0, #5
 800161e:	d000      	beq.n	8001622 <__aeabi_ui2f+0x3a>
 8001620:	4094      	lsls	r4, r2
 8001622:	0022      	movs	r2, r4
 8001624:	4810      	ldr	r0, [pc, #64]	@ (8001668 <__aeabi_ui2f+0x80>)
 8001626:	4002      	ands	r2, r0
 8001628:	0765      	lsls	r5, r4, #29
 800162a:	d009      	beq.n	8001640 <__aeabi_ui2f+0x58>
 800162c:	250f      	movs	r5, #15
 800162e:	402c      	ands	r4, r5
 8001630:	2c04      	cmp	r4, #4
 8001632:	d005      	beq.n	8001640 <__aeabi_ui2f+0x58>
 8001634:	3204      	adds	r2, #4
 8001636:	0154      	lsls	r4, r2, #5
 8001638:	d502      	bpl.n	8001640 <__aeabi_ui2f+0x58>
 800163a:	239f      	movs	r3, #159	@ 0x9f
 800163c:	4002      	ands	r2, r0
 800163e:	1a5b      	subs	r3, r3, r1
 8001640:	0192      	lsls	r2, r2, #6
 8001642:	0a54      	lsrs	r4, r2, #9
 8001644:	b2d8      	uxtb	r0, r3
 8001646:	e7e3      	b.n	8001610 <__aeabi_ui2f+0x28>
 8001648:	0002      	movs	r2, r0
 800164a:	0020      	movs	r0, r4
 800164c:	321b      	adds	r2, #27
 800164e:	4090      	lsls	r0, r2
 8001650:	0002      	movs	r2, r0
 8001652:	1e50      	subs	r0, r2, #1
 8001654:	4182      	sbcs	r2, r0
 8001656:	2005      	movs	r0, #5
 8001658:	1a40      	subs	r0, r0, r1
 800165a:	40c4      	lsrs	r4, r0
 800165c:	4314      	orrs	r4, r2
 800165e:	e7e0      	b.n	8001622 <__aeabi_ui2f+0x3a>
 8001660:	0264      	lsls	r4, r4, #9
 8001662:	2096      	movs	r0, #150	@ 0x96
 8001664:	0a64      	lsrs	r4, r4, #9
 8001666:	e7d3      	b.n	8001610 <__aeabi_ui2f+0x28>
 8001668:	fbffffff 	.word	0xfbffffff

0800166c <__aeabi_dadd>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4657      	mov	r7, sl
 8001670:	464e      	mov	r6, r9
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	b083      	sub	sp, #12
 800167a:	9000      	str	r0, [sp, #0]
 800167c:	9101      	str	r1, [sp, #4]
 800167e:	030c      	lsls	r4, r1, #12
 8001680:	004f      	lsls	r7, r1, #1
 8001682:	0fce      	lsrs	r6, r1, #31
 8001684:	0a61      	lsrs	r1, r4, #9
 8001686:	9c00      	ldr	r4, [sp, #0]
 8001688:	031d      	lsls	r5, r3, #12
 800168a:	0f64      	lsrs	r4, r4, #29
 800168c:	430c      	orrs	r4, r1
 800168e:	9900      	ldr	r1, [sp, #0]
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	00c8      	lsls	r0, r1, #3
 8001696:	0059      	lsls	r1, r3, #1
 8001698:	0d4b      	lsrs	r3, r1, #21
 800169a:	4699      	mov	r9, r3
 800169c:	9a00      	ldr	r2, [sp, #0]
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	0a6d      	lsrs	r5, r5, #9
 80016a2:	0fd9      	lsrs	r1, r3, #31
 80016a4:	0f53      	lsrs	r3, r2, #29
 80016a6:	432b      	orrs	r3, r5
 80016a8:	469a      	mov	sl, r3
 80016aa:	9b00      	ldr	r3, [sp, #0]
 80016ac:	0d7f      	lsrs	r7, r7, #21
 80016ae:	00da      	lsls	r2, r3, #3
 80016b0:	4694      	mov	ip, r2
 80016b2:	464a      	mov	r2, r9
 80016b4:	46b0      	mov	r8, r6
 80016b6:	1aba      	subs	r2, r7, r2
 80016b8:	428e      	cmp	r6, r1
 80016ba:	d100      	bne.n	80016be <__aeabi_dadd+0x52>
 80016bc:	e0b0      	b.n	8001820 <__aeabi_dadd+0x1b4>
 80016be:	2a00      	cmp	r2, #0
 80016c0:	dc00      	bgt.n	80016c4 <__aeabi_dadd+0x58>
 80016c2:	e078      	b.n	80017b6 <__aeabi_dadd+0x14a>
 80016c4:	4649      	mov	r1, r9
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x60>
 80016ca:	e0e9      	b.n	80018a0 <__aeabi_dadd+0x234>
 80016cc:	49c9      	ldr	r1, [pc, #804]	@ (80019f4 <__aeabi_dadd+0x388>)
 80016ce:	428f      	cmp	r7, r1
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x68>
 80016d2:	e195      	b.n	8001a00 <__aeabi_dadd+0x394>
 80016d4:	2501      	movs	r5, #1
 80016d6:	2a38      	cmp	r2, #56	@ 0x38
 80016d8:	dc16      	bgt.n	8001708 <__aeabi_dadd+0x9c>
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	4653      	mov	r3, sl
 80016de:	0409      	lsls	r1, r1, #16
 80016e0:	430b      	orrs	r3, r1
 80016e2:	469a      	mov	sl, r3
 80016e4:	2a1f      	cmp	r2, #31
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dadd+0x7e>
 80016e8:	e1e7      	b.n	8001aba <__aeabi_dadd+0x44e>
 80016ea:	2120      	movs	r1, #32
 80016ec:	4655      	mov	r5, sl
 80016ee:	1a8b      	subs	r3, r1, r2
 80016f0:	4661      	mov	r1, ip
 80016f2:	409d      	lsls	r5, r3
 80016f4:	40d1      	lsrs	r1, r2
 80016f6:	430d      	orrs	r5, r1
 80016f8:	4661      	mov	r1, ip
 80016fa:	4099      	lsls	r1, r3
 80016fc:	1e4b      	subs	r3, r1, #1
 80016fe:	4199      	sbcs	r1, r3
 8001700:	4653      	mov	r3, sl
 8001702:	40d3      	lsrs	r3, r2
 8001704:	430d      	orrs	r5, r1
 8001706:	1ae4      	subs	r4, r4, r3
 8001708:	1b45      	subs	r5, r0, r5
 800170a:	42a8      	cmp	r0, r5
 800170c:	4180      	sbcs	r0, r0
 800170e:	4240      	negs	r0, r0
 8001710:	1a24      	subs	r4, r4, r0
 8001712:	0223      	lsls	r3, r4, #8
 8001714:	d400      	bmi.n	8001718 <__aeabi_dadd+0xac>
 8001716:	e10f      	b.n	8001938 <__aeabi_dadd+0x2cc>
 8001718:	0264      	lsls	r4, r4, #9
 800171a:	0a64      	lsrs	r4, r4, #9
 800171c:	2c00      	cmp	r4, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0xb6>
 8001720:	e139      	b.n	8001996 <__aeabi_dadd+0x32a>
 8001722:	0020      	movs	r0, r4
 8001724:	f001 ff2a 	bl	800357c <__clzsi2>
 8001728:	0003      	movs	r3, r0
 800172a:	3b08      	subs	r3, #8
 800172c:	2120      	movs	r1, #32
 800172e:	0028      	movs	r0, r5
 8001730:	1aca      	subs	r2, r1, r3
 8001732:	40d0      	lsrs	r0, r2
 8001734:	409c      	lsls	r4, r3
 8001736:	0002      	movs	r2, r0
 8001738:	409d      	lsls	r5, r3
 800173a:	4322      	orrs	r2, r4
 800173c:	429f      	cmp	r7, r3
 800173e:	dd00      	ble.n	8001742 <__aeabi_dadd+0xd6>
 8001740:	e173      	b.n	8001a2a <__aeabi_dadd+0x3be>
 8001742:	1bd8      	subs	r0, r3, r7
 8001744:	3001      	adds	r0, #1
 8001746:	1a09      	subs	r1, r1, r0
 8001748:	002c      	movs	r4, r5
 800174a:	408d      	lsls	r5, r1
 800174c:	40c4      	lsrs	r4, r0
 800174e:	1e6b      	subs	r3, r5, #1
 8001750:	419d      	sbcs	r5, r3
 8001752:	0013      	movs	r3, r2
 8001754:	40c2      	lsrs	r2, r0
 8001756:	408b      	lsls	r3, r1
 8001758:	4325      	orrs	r5, r4
 800175a:	2700      	movs	r7, #0
 800175c:	0014      	movs	r4, r2
 800175e:	431d      	orrs	r5, r3
 8001760:	076b      	lsls	r3, r5, #29
 8001762:	d009      	beq.n	8001778 <__aeabi_dadd+0x10c>
 8001764:	230f      	movs	r3, #15
 8001766:	402b      	ands	r3, r5
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <__aeabi_dadd+0x10c>
 800176c:	1d2b      	adds	r3, r5, #4
 800176e:	42ab      	cmp	r3, r5
 8001770:	41ad      	sbcs	r5, r5
 8001772:	426d      	negs	r5, r5
 8001774:	1964      	adds	r4, r4, r5
 8001776:	001d      	movs	r5, r3
 8001778:	0223      	lsls	r3, r4, #8
 800177a:	d400      	bmi.n	800177e <__aeabi_dadd+0x112>
 800177c:	e12d      	b.n	80019da <__aeabi_dadd+0x36e>
 800177e:	4a9d      	ldr	r2, [pc, #628]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001780:	3701      	adds	r7, #1
 8001782:	4297      	cmp	r7, r2
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x11c>
 8001786:	e0d3      	b.n	8001930 <__aeabi_dadd+0x2c4>
 8001788:	4646      	mov	r6, r8
 800178a:	499b      	ldr	r1, [pc, #620]	@ (80019f8 <__aeabi_dadd+0x38c>)
 800178c:	08ed      	lsrs	r5, r5, #3
 800178e:	4021      	ands	r1, r4
 8001790:	074a      	lsls	r2, r1, #29
 8001792:	432a      	orrs	r2, r5
 8001794:	057c      	lsls	r4, r7, #21
 8001796:	024d      	lsls	r5, r1, #9
 8001798:	0b2d      	lsrs	r5, r5, #12
 800179a:	0d64      	lsrs	r4, r4, #21
 800179c:	0524      	lsls	r4, r4, #20
 800179e:	432c      	orrs	r4, r5
 80017a0:	07f6      	lsls	r6, r6, #31
 80017a2:	4334      	orrs	r4, r6
 80017a4:	0010      	movs	r0, r2
 80017a6:	0021      	movs	r1, r4
 80017a8:	b003      	add	sp, #12
 80017aa:	bcf0      	pop	{r4, r5, r6, r7}
 80017ac:	46bb      	mov	fp, r7
 80017ae:	46b2      	mov	sl, r6
 80017b0:	46a9      	mov	r9, r5
 80017b2:	46a0      	mov	r8, r4
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dadd+0x150>
 80017ba:	e084      	b.n	80018c6 <__aeabi_dadd+0x25a>
 80017bc:	464a      	mov	r2, r9
 80017be:	1bd2      	subs	r2, r2, r7
 80017c0:	2f00      	cmp	r7, #0
 80017c2:	d000      	beq.n	80017c6 <__aeabi_dadd+0x15a>
 80017c4:	e16d      	b.n	8001aa2 <__aeabi_dadd+0x436>
 80017c6:	0025      	movs	r5, r4
 80017c8:	4305      	orrs	r5, r0
 80017ca:	d100      	bne.n	80017ce <__aeabi_dadd+0x162>
 80017cc:	e127      	b.n	8001a1e <__aeabi_dadd+0x3b2>
 80017ce:	1e56      	subs	r6, r2, #1
 80017d0:	2a01      	cmp	r2, #1
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x16a>
 80017d4:	e23b      	b.n	8001c4e <__aeabi_dadd+0x5e2>
 80017d6:	4d87      	ldr	r5, [pc, #540]	@ (80019f4 <__aeabi_dadd+0x388>)
 80017d8:	42aa      	cmp	r2, r5
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x172>
 80017dc:	e26a      	b.n	8001cb4 <__aeabi_dadd+0x648>
 80017de:	2501      	movs	r5, #1
 80017e0:	2e38      	cmp	r6, #56	@ 0x38
 80017e2:	dc12      	bgt.n	800180a <__aeabi_dadd+0x19e>
 80017e4:	0032      	movs	r2, r6
 80017e6:	2a1f      	cmp	r2, #31
 80017e8:	dd00      	ble.n	80017ec <__aeabi_dadd+0x180>
 80017ea:	e1f8      	b.n	8001bde <__aeabi_dadd+0x572>
 80017ec:	2620      	movs	r6, #32
 80017ee:	0025      	movs	r5, r4
 80017f0:	1ab6      	subs	r6, r6, r2
 80017f2:	0007      	movs	r7, r0
 80017f4:	4653      	mov	r3, sl
 80017f6:	40b0      	lsls	r0, r6
 80017f8:	40d4      	lsrs	r4, r2
 80017fa:	40b5      	lsls	r5, r6
 80017fc:	40d7      	lsrs	r7, r2
 80017fe:	1e46      	subs	r6, r0, #1
 8001800:	41b0      	sbcs	r0, r6
 8001802:	1b1b      	subs	r3, r3, r4
 8001804:	469a      	mov	sl, r3
 8001806:	433d      	orrs	r5, r7
 8001808:	4305      	orrs	r5, r0
 800180a:	4662      	mov	r2, ip
 800180c:	1b55      	subs	r5, r2, r5
 800180e:	45ac      	cmp	ip, r5
 8001810:	4192      	sbcs	r2, r2
 8001812:	4653      	mov	r3, sl
 8001814:	4252      	negs	r2, r2
 8001816:	000e      	movs	r6, r1
 8001818:	464f      	mov	r7, r9
 800181a:	4688      	mov	r8, r1
 800181c:	1a9c      	subs	r4, r3, r2
 800181e:	e778      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001820:	2a00      	cmp	r2, #0
 8001822:	dc00      	bgt.n	8001826 <__aeabi_dadd+0x1ba>
 8001824:	e08e      	b.n	8001944 <__aeabi_dadd+0x2d8>
 8001826:	4649      	mov	r1, r9
 8001828:	2900      	cmp	r1, #0
 800182a:	d175      	bne.n	8001918 <__aeabi_dadd+0x2ac>
 800182c:	4661      	mov	r1, ip
 800182e:	4653      	mov	r3, sl
 8001830:	4319      	orrs	r1, r3
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x1ca>
 8001834:	e0f6      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001836:	1e51      	subs	r1, r2, #1
 8001838:	2a01      	cmp	r2, #1
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x1d2>
 800183c:	e191      	b.n	8001b62 <__aeabi_dadd+0x4f6>
 800183e:	4d6d      	ldr	r5, [pc, #436]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001840:	42aa      	cmp	r2, r5
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x1da>
 8001844:	e0dc      	b.n	8001a00 <__aeabi_dadd+0x394>
 8001846:	2501      	movs	r5, #1
 8001848:	2938      	cmp	r1, #56	@ 0x38
 800184a:	dc14      	bgt.n	8001876 <__aeabi_dadd+0x20a>
 800184c:	000a      	movs	r2, r1
 800184e:	2a1f      	cmp	r2, #31
 8001850:	dd00      	ble.n	8001854 <__aeabi_dadd+0x1e8>
 8001852:	e1a2      	b.n	8001b9a <__aeabi_dadd+0x52e>
 8001854:	2120      	movs	r1, #32
 8001856:	4653      	mov	r3, sl
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	408b      	lsls	r3, r1
 800185c:	001d      	movs	r5, r3
 800185e:	4663      	mov	r3, ip
 8001860:	40d3      	lsrs	r3, r2
 8001862:	431d      	orrs	r5, r3
 8001864:	4663      	mov	r3, ip
 8001866:	408b      	lsls	r3, r1
 8001868:	0019      	movs	r1, r3
 800186a:	1e4b      	subs	r3, r1, #1
 800186c:	4199      	sbcs	r1, r3
 800186e:	4653      	mov	r3, sl
 8001870:	40d3      	lsrs	r3, r2
 8001872:	430d      	orrs	r5, r1
 8001874:	18e4      	adds	r4, r4, r3
 8001876:	182d      	adds	r5, r5, r0
 8001878:	4285      	cmp	r5, r0
 800187a:	4180      	sbcs	r0, r0
 800187c:	4240      	negs	r0, r0
 800187e:	1824      	adds	r4, r4, r0
 8001880:	0223      	lsls	r3, r4, #8
 8001882:	d559      	bpl.n	8001938 <__aeabi_dadd+0x2cc>
 8001884:	4b5b      	ldr	r3, [pc, #364]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001886:	3701      	adds	r7, #1
 8001888:	429f      	cmp	r7, r3
 800188a:	d051      	beq.n	8001930 <__aeabi_dadd+0x2c4>
 800188c:	2101      	movs	r1, #1
 800188e:	4b5a      	ldr	r3, [pc, #360]	@ (80019f8 <__aeabi_dadd+0x38c>)
 8001890:	086a      	lsrs	r2, r5, #1
 8001892:	401c      	ands	r4, r3
 8001894:	4029      	ands	r1, r5
 8001896:	430a      	orrs	r2, r1
 8001898:	07e5      	lsls	r5, r4, #31
 800189a:	4315      	orrs	r5, r2
 800189c:	0864      	lsrs	r4, r4, #1
 800189e:	e75f      	b.n	8001760 <__aeabi_dadd+0xf4>
 80018a0:	4661      	mov	r1, ip
 80018a2:	4653      	mov	r3, sl
 80018a4:	4319      	orrs	r1, r3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x23e>
 80018a8:	e0bc      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 80018aa:	1e51      	subs	r1, r2, #1
 80018ac:	2a01      	cmp	r2, #1
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x246>
 80018b0:	e164      	b.n	8001b7c <__aeabi_dadd+0x510>
 80018b2:	4d50      	ldr	r5, [pc, #320]	@ (80019f4 <__aeabi_dadd+0x388>)
 80018b4:	42aa      	cmp	r2, r5
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x24e>
 80018b8:	e16a      	b.n	8001b90 <__aeabi_dadd+0x524>
 80018ba:	2501      	movs	r5, #1
 80018bc:	2938      	cmp	r1, #56	@ 0x38
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dadd+0x256>
 80018c0:	e722      	b.n	8001708 <__aeabi_dadd+0x9c>
 80018c2:	000a      	movs	r2, r1
 80018c4:	e70e      	b.n	80016e4 <__aeabi_dadd+0x78>
 80018c6:	4a4d      	ldr	r2, [pc, #308]	@ (80019fc <__aeabi_dadd+0x390>)
 80018c8:	1c7d      	adds	r5, r7, #1
 80018ca:	4215      	tst	r5, r2
 80018cc:	d000      	beq.n	80018d0 <__aeabi_dadd+0x264>
 80018ce:	e0d0      	b.n	8001a72 <__aeabi_dadd+0x406>
 80018d0:	0025      	movs	r5, r4
 80018d2:	4662      	mov	r2, ip
 80018d4:	4653      	mov	r3, sl
 80018d6:	4305      	orrs	r5, r0
 80018d8:	431a      	orrs	r2, r3
 80018da:	2f00      	cmp	r7, #0
 80018dc:	d000      	beq.n	80018e0 <__aeabi_dadd+0x274>
 80018de:	e137      	b.n	8001b50 <__aeabi_dadd+0x4e4>
 80018e0:	2d00      	cmp	r5, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x27a>
 80018e4:	e1a8      	b.n	8001c38 <__aeabi_dadd+0x5cc>
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d100      	bne.n	80018ec <__aeabi_dadd+0x280>
 80018ea:	e16a      	b.n	8001bc2 <__aeabi_dadd+0x556>
 80018ec:	4663      	mov	r3, ip
 80018ee:	1ac5      	subs	r5, r0, r3
 80018f0:	4653      	mov	r3, sl
 80018f2:	1ae2      	subs	r2, r4, r3
 80018f4:	42a8      	cmp	r0, r5
 80018f6:	419b      	sbcs	r3, r3
 80018f8:	425b      	negs	r3, r3
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	021a      	lsls	r2, r3, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_dadd+0x296>
 8001900:	e203      	b.n	8001d0a <__aeabi_dadd+0x69e>
 8001902:	4663      	mov	r3, ip
 8001904:	1a1d      	subs	r5, r3, r0
 8001906:	45ac      	cmp	ip, r5
 8001908:	4192      	sbcs	r2, r2
 800190a:	4653      	mov	r3, sl
 800190c:	4252      	negs	r2, r2
 800190e:	1b1c      	subs	r4, r3, r4
 8001910:	000e      	movs	r6, r1
 8001912:	4688      	mov	r8, r1
 8001914:	1aa4      	subs	r4, r4, r2
 8001916:	e723      	b.n	8001760 <__aeabi_dadd+0xf4>
 8001918:	4936      	ldr	r1, [pc, #216]	@ (80019f4 <__aeabi_dadd+0x388>)
 800191a:	428f      	cmp	r7, r1
 800191c:	d070      	beq.n	8001a00 <__aeabi_dadd+0x394>
 800191e:	2501      	movs	r5, #1
 8001920:	2a38      	cmp	r2, #56	@ 0x38
 8001922:	dca8      	bgt.n	8001876 <__aeabi_dadd+0x20a>
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	4653      	mov	r3, sl
 8001928:	0409      	lsls	r1, r1, #16
 800192a:	430b      	orrs	r3, r1
 800192c:	469a      	mov	sl, r3
 800192e:	e78e      	b.n	800184e <__aeabi_dadd+0x1e2>
 8001930:	003c      	movs	r4, r7
 8001932:	2500      	movs	r5, #0
 8001934:	2200      	movs	r2, #0
 8001936:	e731      	b.n	800179c <__aeabi_dadd+0x130>
 8001938:	2307      	movs	r3, #7
 800193a:	402b      	ands	r3, r5
 800193c:	2b00      	cmp	r3, #0
 800193e:	d000      	beq.n	8001942 <__aeabi_dadd+0x2d6>
 8001940:	e710      	b.n	8001764 <__aeabi_dadd+0xf8>
 8001942:	e093      	b.n	8001a6c <__aeabi_dadd+0x400>
 8001944:	2a00      	cmp	r2, #0
 8001946:	d074      	beq.n	8001a32 <__aeabi_dadd+0x3c6>
 8001948:	464a      	mov	r2, r9
 800194a:	1bd2      	subs	r2, r2, r7
 800194c:	2f00      	cmp	r7, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0x2e6>
 8001950:	e0c7      	b.n	8001ae2 <__aeabi_dadd+0x476>
 8001952:	4928      	ldr	r1, [pc, #160]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001954:	4589      	cmp	r9, r1
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x2ee>
 8001958:	e185      	b.n	8001c66 <__aeabi_dadd+0x5fa>
 800195a:	2501      	movs	r5, #1
 800195c:	2a38      	cmp	r2, #56	@ 0x38
 800195e:	dc12      	bgt.n	8001986 <__aeabi_dadd+0x31a>
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	0409      	lsls	r1, r1, #16
 8001964:	430c      	orrs	r4, r1
 8001966:	2a1f      	cmp	r2, #31
 8001968:	dd00      	ble.n	800196c <__aeabi_dadd+0x300>
 800196a:	e1ab      	b.n	8001cc4 <__aeabi_dadd+0x658>
 800196c:	2120      	movs	r1, #32
 800196e:	0025      	movs	r5, r4
 8001970:	1a89      	subs	r1, r1, r2
 8001972:	0007      	movs	r7, r0
 8001974:	4088      	lsls	r0, r1
 8001976:	408d      	lsls	r5, r1
 8001978:	40d7      	lsrs	r7, r2
 800197a:	1e41      	subs	r1, r0, #1
 800197c:	4188      	sbcs	r0, r1
 800197e:	40d4      	lsrs	r4, r2
 8001980:	433d      	orrs	r5, r7
 8001982:	4305      	orrs	r5, r0
 8001984:	44a2      	add	sl, r4
 8001986:	4465      	add	r5, ip
 8001988:	4565      	cmp	r5, ip
 800198a:	4192      	sbcs	r2, r2
 800198c:	4252      	negs	r2, r2
 800198e:	4452      	add	r2, sl
 8001990:	0014      	movs	r4, r2
 8001992:	464f      	mov	r7, r9
 8001994:	e774      	b.n	8001880 <__aeabi_dadd+0x214>
 8001996:	0028      	movs	r0, r5
 8001998:	f001 fdf0 	bl	800357c <__clzsi2>
 800199c:	0003      	movs	r3, r0
 800199e:	3318      	adds	r3, #24
 80019a0:	2b1f      	cmp	r3, #31
 80019a2:	dc00      	bgt.n	80019a6 <__aeabi_dadd+0x33a>
 80019a4:	e6c2      	b.n	800172c <__aeabi_dadd+0xc0>
 80019a6:	002a      	movs	r2, r5
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	429f      	cmp	r7, r3
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dadd+0x346>
 80019b0:	e0a9      	b.n	8001b06 <__aeabi_dadd+0x49a>
 80019b2:	1bdb      	subs	r3, r3, r7
 80019b4:	1c58      	adds	r0, r3, #1
 80019b6:	281f      	cmp	r0, #31
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dadd+0x350>
 80019ba:	e1ac      	b.n	8001d16 <__aeabi_dadd+0x6aa>
 80019bc:	0015      	movs	r5, r2
 80019be:	3b1f      	subs	r3, #31
 80019c0:	40dd      	lsrs	r5, r3
 80019c2:	2820      	cmp	r0, #32
 80019c4:	d005      	beq.n	80019d2 <__aeabi_dadd+0x366>
 80019c6:	2340      	movs	r3, #64	@ 0x40
 80019c8:	1a1b      	subs	r3, r3, r0
 80019ca:	409a      	lsls	r2, r3
 80019cc:	1e53      	subs	r3, r2, #1
 80019ce:	419a      	sbcs	r2, r3
 80019d0:	4315      	orrs	r5, r2
 80019d2:	2307      	movs	r3, #7
 80019d4:	2700      	movs	r7, #0
 80019d6:	402b      	ands	r3, r5
 80019d8:	e7b0      	b.n	800193c <__aeabi_dadd+0x2d0>
 80019da:	08ed      	lsrs	r5, r5, #3
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <__aeabi_dadd+0x388>)
 80019de:	0762      	lsls	r2, r4, #29
 80019e0:	432a      	orrs	r2, r5
 80019e2:	08e4      	lsrs	r4, r4, #3
 80019e4:	429f      	cmp	r7, r3
 80019e6:	d00f      	beq.n	8001a08 <__aeabi_dadd+0x39c>
 80019e8:	0324      	lsls	r4, r4, #12
 80019ea:	0b25      	lsrs	r5, r4, #12
 80019ec:	057c      	lsls	r4, r7, #21
 80019ee:	0d64      	lsrs	r4, r4, #21
 80019f0:	e6d4      	b.n	800179c <__aeabi_dadd+0x130>
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	000007ff 	.word	0x000007ff
 80019f8:	ff7fffff 	.word	0xff7fffff
 80019fc:	000007fe 	.word	0x000007fe
 8001a00:	08c0      	lsrs	r0, r0, #3
 8001a02:	0762      	lsls	r2, r4, #29
 8001a04:	4302      	orrs	r2, r0
 8001a06:	08e4      	lsrs	r4, r4, #3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x3a4>
 8001a0e:	e186      	b.n	8001d1e <__aeabi_dadd+0x6b2>
 8001a10:	2580      	movs	r5, #128	@ 0x80
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	4325      	orrs	r5, r4
 8001a16:	032d      	lsls	r5, r5, #12
 8001a18:	4cc3      	ldr	r4, [pc, #780]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001a1a:	0b2d      	lsrs	r5, r5, #12
 8001a1c:	e6be      	b.n	800179c <__aeabi_dadd+0x130>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	4654      	mov	r4, sl
 8001a22:	000e      	movs	r6, r1
 8001a24:	0017      	movs	r7, r2
 8001a26:	08c5      	lsrs	r5, r0, #3
 8001a28:	e7d8      	b.n	80019dc <__aeabi_dadd+0x370>
 8001a2a:	4cc0      	ldr	r4, [pc, #768]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001a2c:	1aff      	subs	r7, r7, r3
 8001a2e:	4014      	ands	r4, r2
 8001a30:	e696      	b.n	8001760 <__aeabi_dadd+0xf4>
 8001a32:	4abf      	ldr	r2, [pc, #764]	@ (8001d30 <__aeabi_dadd+0x6c4>)
 8001a34:	1c79      	adds	r1, r7, #1
 8001a36:	4211      	tst	r1, r2
 8001a38:	d16b      	bne.n	8001b12 <__aeabi_dadd+0x4a6>
 8001a3a:	0022      	movs	r2, r4
 8001a3c:	4302      	orrs	r2, r0
 8001a3e:	2f00      	cmp	r7, #0
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dadd+0x3d8>
 8001a42:	e0db      	b.n	8001bfc <__aeabi_dadd+0x590>
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dadd+0x3de>
 8001a48:	e12d      	b.n	8001ca6 <__aeabi_dadd+0x63a>
 8001a4a:	4662      	mov	r2, ip
 8001a4c:	4653      	mov	r3, sl
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x3e8>
 8001a52:	e0b6      	b.n	8001bc2 <__aeabi_dadd+0x556>
 8001a54:	4663      	mov	r3, ip
 8001a56:	18c5      	adds	r5, r0, r3
 8001a58:	4285      	cmp	r5, r0
 8001a5a:	4180      	sbcs	r0, r0
 8001a5c:	4454      	add	r4, sl
 8001a5e:	4240      	negs	r0, r0
 8001a60:	1824      	adds	r4, r4, r0
 8001a62:	0223      	lsls	r3, r4, #8
 8001a64:	d502      	bpl.n	8001a6c <__aeabi_dadd+0x400>
 8001a66:	000f      	movs	r7, r1
 8001a68:	4bb0      	ldr	r3, [pc, #704]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001a6a:	401c      	ands	r4, r3
 8001a6c:	003a      	movs	r2, r7
 8001a6e:	0028      	movs	r0, r5
 8001a70:	e7d8      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001a72:	4662      	mov	r2, ip
 8001a74:	1a85      	subs	r5, r0, r2
 8001a76:	42a8      	cmp	r0, r5
 8001a78:	4192      	sbcs	r2, r2
 8001a7a:	4653      	mov	r3, sl
 8001a7c:	4252      	negs	r2, r2
 8001a7e:	4691      	mov	r9, r2
 8001a80:	1ae3      	subs	r3, r4, r3
 8001a82:	001a      	movs	r2, r3
 8001a84:	464b      	mov	r3, r9
 8001a86:	1ad2      	subs	r2, r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4691      	mov	r9, r2
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	d454      	bmi.n	8001b3a <__aeabi_dadd+0x4ce>
 8001a90:	464a      	mov	r2, r9
 8001a92:	464c      	mov	r4, r9
 8001a94:	432a      	orrs	r2, r5
 8001a96:	d000      	beq.n	8001a9a <__aeabi_dadd+0x42e>
 8001a98:	e640      	b.n	800171c <__aeabi_dadd+0xb0>
 8001a9a:	2600      	movs	r6, #0
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	e67c      	b.n	800179c <__aeabi_dadd+0x130>
 8001aa2:	4da1      	ldr	r5, [pc, #644]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001aa4:	45a9      	cmp	r9, r5
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x43e>
 8001aa8:	e090      	b.n	8001bcc <__aeabi_dadd+0x560>
 8001aaa:	2501      	movs	r5, #1
 8001aac:	2a38      	cmp	r2, #56	@ 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dadd+0x446>
 8001ab0:	e6ab      	b.n	800180a <__aeabi_dadd+0x19e>
 8001ab2:	2580      	movs	r5, #128	@ 0x80
 8001ab4:	042d      	lsls	r5, r5, #16
 8001ab6:	432c      	orrs	r4, r5
 8001ab8:	e695      	b.n	80017e6 <__aeabi_dadd+0x17a>
 8001aba:	0011      	movs	r1, r2
 8001abc:	4655      	mov	r5, sl
 8001abe:	3920      	subs	r1, #32
 8001ac0:	40cd      	lsrs	r5, r1
 8001ac2:	46a9      	mov	r9, r5
 8001ac4:	2a20      	cmp	r2, #32
 8001ac6:	d006      	beq.n	8001ad6 <__aeabi_dadd+0x46a>
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	4653      	mov	r3, sl
 8001acc:	1a8a      	subs	r2, r1, r2
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	4662      	mov	r2, ip
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	4694      	mov	ip, r2
 8001ad6:	4665      	mov	r5, ip
 8001ad8:	1e6b      	subs	r3, r5, #1
 8001ada:	419d      	sbcs	r5, r3
 8001adc:	464b      	mov	r3, r9
 8001ade:	431d      	orrs	r5, r3
 8001ae0:	e612      	b.n	8001708 <__aeabi_dadd+0x9c>
 8001ae2:	0021      	movs	r1, r4
 8001ae4:	4301      	orrs	r1, r0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dadd+0x47e>
 8001ae8:	e0c4      	b.n	8001c74 <__aeabi_dadd+0x608>
 8001aea:	1e51      	subs	r1, r2, #1
 8001aec:	2a01      	cmp	r2, #1
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x486>
 8001af0:	e0fb      	b.n	8001cea <__aeabi_dadd+0x67e>
 8001af2:	4d8d      	ldr	r5, [pc, #564]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001af4:	42aa      	cmp	r2, r5
 8001af6:	d100      	bne.n	8001afa <__aeabi_dadd+0x48e>
 8001af8:	e0b5      	b.n	8001c66 <__aeabi_dadd+0x5fa>
 8001afa:	2501      	movs	r5, #1
 8001afc:	2938      	cmp	r1, #56	@ 0x38
 8001afe:	dd00      	ble.n	8001b02 <__aeabi_dadd+0x496>
 8001b00:	e741      	b.n	8001986 <__aeabi_dadd+0x31a>
 8001b02:	000a      	movs	r2, r1
 8001b04:	e72f      	b.n	8001966 <__aeabi_dadd+0x2fa>
 8001b06:	4c89      	ldr	r4, [pc, #548]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001b08:	1aff      	subs	r7, r7, r3
 8001b0a:	4014      	ands	r4, r2
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08e4      	lsrs	r4, r4, #3
 8001b10:	e76a      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001b12:	4a85      	ldr	r2, [pc, #532]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001b14:	4291      	cmp	r1, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dadd+0x4ae>
 8001b18:	e0e3      	b.n	8001ce2 <__aeabi_dadd+0x676>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	18c2      	adds	r2, r0, r3
 8001b1e:	4282      	cmp	r2, r0
 8001b20:	4180      	sbcs	r0, r0
 8001b22:	0023      	movs	r3, r4
 8001b24:	4240      	negs	r0, r0
 8001b26:	4453      	add	r3, sl
 8001b28:	181b      	adds	r3, r3, r0
 8001b2a:	07dd      	lsls	r5, r3, #31
 8001b2c:	085c      	lsrs	r4, r3, #1
 8001b2e:	2307      	movs	r3, #7
 8001b30:	0852      	lsrs	r2, r2, #1
 8001b32:	4315      	orrs	r5, r2
 8001b34:	000f      	movs	r7, r1
 8001b36:	402b      	ands	r3, r5
 8001b38:	e700      	b.n	800193c <__aeabi_dadd+0x2d0>
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	1a1d      	subs	r5, r3, r0
 8001b3e:	45ac      	cmp	ip, r5
 8001b40:	4192      	sbcs	r2, r2
 8001b42:	4653      	mov	r3, sl
 8001b44:	4252      	negs	r2, r2
 8001b46:	1b1c      	subs	r4, r3, r4
 8001b48:	000e      	movs	r6, r1
 8001b4a:	4688      	mov	r8, r1
 8001b4c:	1aa4      	subs	r4, r4, r2
 8001b4e:	e5e5      	b.n	800171c <__aeabi_dadd+0xb0>
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d000      	beq.n	8001b56 <__aeabi_dadd+0x4ea>
 8001b54:	e091      	b.n	8001c7a <__aeabi_dadd+0x60e>
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d138      	bne.n	8001bcc <__aeabi_dadd+0x560>
 8001b5a:	2480      	movs	r4, #128	@ 0x80
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	e756      	b.n	8001a10 <__aeabi_dadd+0x3a4>
 8001b62:	4663      	mov	r3, ip
 8001b64:	18c5      	adds	r5, r0, r3
 8001b66:	4285      	cmp	r5, r0
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	4454      	add	r4, sl
 8001b6c:	4240      	negs	r0, r0
 8001b6e:	1824      	adds	r4, r4, r0
 8001b70:	2701      	movs	r7, #1
 8001b72:	0223      	lsls	r3, r4, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_dadd+0x50c>
 8001b76:	e6df      	b.n	8001938 <__aeabi_dadd+0x2cc>
 8001b78:	2702      	movs	r7, #2
 8001b7a:	e687      	b.n	800188c <__aeabi_dadd+0x220>
 8001b7c:	4663      	mov	r3, ip
 8001b7e:	1ac5      	subs	r5, r0, r3
 8001b80:	42a8      	cmp	r0, r5
 8001b82:	4180      	sbcs	r0, r0
 8001b84:	4653      	mov	r3, sl
 8001b86:	4240      	negs	r0, r0
 8001b88:	1ae4      	subs	r4, r4, r3
 8001b8a:	2701      	movs	r7, #1
 8001b8c:	1a24      	subs	r4, r4, r0
 8001b8e:	e5c0      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001b90:	0762      	lsls	r2, r4, #29
 8001b92:	08c0      	lsrs	r0, r0, #3
 8001b94:	4302      	orrs	r2, r0
 8001b96:	08e4      	lsrs	r4, r4, #3
 8001b98:	e736      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	4653      	mov	r3, sl
 8001b9e:	3920      	subs	r1, #32
 8001ba0:	40cb      	lsrs	r3, r1
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	2a20      	cmp	r2, #32
 8001ba6:	d006      	beq.n	8001bb6 <__aeabi_dadd+0x54a>
 8001ba8:	2140      	movs	r1, #64	@ 0x40
 8001baa:	4653      	mov	r3, sl
 8001bac:	1a8a      	subs	r2, r1, r2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	4662      	mov	r2, ip
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	4694      	mov	ip, r2
 8001bb6:	4665      	mov	r5, ip
 8001bb8:	1e6b      	subs	r3, r5, #1
 8001bba:	419d      	sbcs	r5, r3
 8001bbc:	464b      	mov	r3, r9
 8001bbe:	431d      	orrs	r5, r3
 8001bc0:	e659      	b.n	8001876 <__aeabi_dadd+0x20a>
 8001bc2:	0762      	lsls	r2, r4, #29
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	4302      	orrs	r2, r0
 8001bc8:	08e4      	lsrs	r4, r4, #3
 8001bca:	e70d      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001bcc:	4653      	mov	r3, sl
 8001bce:	075a      	lsls	r2, r3, #29
 8001bd0:	4663      	mov	r3, ip
 8001bd2:	08d8      	lsrs	r0, r3, #3
 8001bd4:	4653      	mov	r3, sl
 8001bd6:	000e      	movs	r6, r1
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	08dc      	lsrs	r4, r3, #3
 8001bdc:	e714      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001bde:	0015      	movs	r5, r2
 8001be0:	0026      	movs	r6, r4
 8001be2:	3d20      	subs	r5, #32
 8001be4:	40ee      	lsrs	r6, r5
 8001be6:	2a20      	cmp	r2, #32
 8001be8:	d003      	beq.n	8001bf2 <__aeabi_dadd+0x586>
 8001bea:	2540      	movs	r5, #64	@ 0x40
 8001bec:	1aaa      	subs	r2, r5, r2
 8001bee:	4094      	lsls	r4, r2
 8001bf0:	4320      	orrs	r0, r4
 8001bf2:	1e42      	subs	r2, r0, #1
 8001bf4:	4190      	sbcs	r0, r2
 8001bf6:	0005      	movs	r5, r0
 8001bf8:	4335      	orrs	r5, r6
 8001bfa:	e606      	b.n	800180a <__aeabi_dadd+0x19e>
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d07c      	beq.n	8001cfa <__aeabi_dadd+0x68e>
 8001c00:	4662      	mov	r2, ip
 8001c02:	4653      	mov	r3, sl
 8001c04:	08c0      	lsrs	r0, r0, #3
 8001c06:	431a      	orrs	r2, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dadd+0x5a0>
 8001c0a:	e6fa      	b.n	8001a02 <__aeabi_dadd+0x396>
 8001c0c:	0762      	lsls	r2, r4, #29
 8001c0e:	4310      	orrs	r0, r2
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	08e4      	lsrs	r4, r4, #3
 8001c14:	0312      	lsls	r2, r2, #12
 8001c16:	4214      	tst	r4, r2
 8001c18:	d008      	beq.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c1a:	08d9      	lsrs	r1, r3, #3
 8001c1c:	4211      	tst	r1, r2
 8001c1e:	d105      	bne.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c20:	4663      	mov	r3, ip
 8001c22:	08d8      	lsrs	r0, r3, #3
 8001c24:	4653      	mov	r3, sl
 8001c26:	000c      	movs	r4, r1
 8001c28:	075b      	lsls	r3, r3, #29
 8001c2a:	4318      	orrs	r0, r3
 8001c2c:	0f42      	lsrs	r2, r0, #29
 8001c2e:	00c0      	lsls	r0, r0, #3
 8001c30:	08c0      	lsrs	r0, r0, #3
 8001c32:	0752      	lsls	r2, r2, #29
 8001c34:	4302      	orrs	r2, r0
 8001c36:	e6e7      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001c38:	2a00      	cmp	r2, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x5d2>
 8001c3c:	e72d      	b.n	8001a9a <__aeabi_dadd+0x42e>
 8001c3e:	4663      	mov	r3, ip
 8001c40:	08d8      	lsrs	r0, r3, #3
 8001c42:	4653      	mov	r3, sl
 8001c44:	075a      	lsls	r2, r3, #29
 8001c46:	000e      	movs	r6, r1
 8001c48:	4302      	orrs	r2, r0
 8001c4a:	08dc      	lsrs	r4, r3, #3
 8001c4c:	e6cc      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001c4e:	4663      	mov	r3, ip
 8001c50:	1a1d      	subs	r5, r3, r0
 8001c52:	45ac      	cmp	ip, r5
 8001c54:	4192      	sbcs	r2, r2
 8001c56:	4653      	mov	r3, sl
 8001c58:	4252      	negs	r2, r2
 8001c5a:	1b1c      	subs	r4, r3, r4
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	4688      	mov	r8, r1
 8001c60:	1aa4      	subs	r4, r4, r2
 8001c62:	3701      	adds	r7, #1
 8001c64:	e555      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e6c9      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001c74:	4660      	mov	r0, ip
 8001c76:	4654      	mov	r4, sl
 8001c78:	e6d4      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001c7a:	08c0      	lsrs	r0, r0, #3
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dadd+0x616>
 8001c80:	e6bf      	b.n	8001a02 <__aeabi_dadd+0x396>
 8001c82:	0762      	lsls	r2, r4, #29
 8001c84:	4310      	orrs	r0, r2
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	08e4      	lsrs	r4, r4, #3
 8001c8a:	0312      	lsls	r2, r2, #12
 8001c8c:	4214      	tst	r4, r2
 8001c8e:	d0cd      	beq.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c90:	08dd      	lsrs	r5, r3, #3
 8001c92:	4215      	tst	r5, r2
 8001c94:	d1ca      	bne.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c96:	4663      	mov	r3, ip
 8001c98:	08d8      	lsrs	r0, r3, #3
 8001c9a:	4653      	mov	r3, sl
 8001c9c:	075b      	lsls	r3, r3, #29
 8001c9e:	000e      	movs	r6, r1
 8001ca0:	002c      	movs	r4, r5
 8001ca2:	4318      	orrs	r0, r3
 8001ca4:	e7c2      	b.n	8001c2c <__aeabi_dadd+0x5c0>
 8001ca6:	4663      	mov	r3, ip
 8001ca8:	08d9      	lsrs	r1, r3, #3
 8001caa:	4653      	mov	r3, sl
 8001cac:	075a      	lsls	r2, r3, #29
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	08dc      	lsrs	r4, r3, #3
 8001cb2:	e699      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	08d8      	lsrs	r0, r3, #3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	075a      	lsls	r2, r3, #29
 8001cbc:	000e      	movs	r6, r1
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	08dc      	lsrs	r4, r3, #3
 8001cc2:	e6a1      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	0027      	movs	r7, r4
 8001cc8:	3920      	subs	r1, #32
 8001cca:	40cf      	lsrs	r7, r1
 8001ccc:	2a20      	cmp	r2, #32
 8001cce:	d003      	beq.n	8001cd8 <__aeabi_dadd+0x66c>
 8001cd0:	2140      	movs	r1, #64	@ 0x40
 8001cd2:	1a8a      	subs	r2, r1, r2
 8001cd4:	4094      	lsls	r4, r2
 8001cd6:	4320      	orrs	r0, r4
 8001cd8:	1e42      	subs	r2, r0, #1
 8001cda:	4190      	sbcs	r0, r2
 8001cdc:	0005      	movs	r5, r0
 8001cde:	433d      	orrs	r5, r7
 8001ce0:	e651      	b.n	8001986 <__aeabi_dadd+0x31a>
 8001ce2:	000c      	movs	r4, r1
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	e558      	b.n	800179c <__aeabi_dadd+0x130>
 8001cea:	4460      	add	r0, ip
 8001cec:	4560      	cmp	r0, ip
 8001cee:	4192      	sbcs	r2, r2
 8001cf0:	4454      	add	r4, sl
 8001cf2:	4252      	negs	r2, r2
 8001cf4:	0005      	movs	r5, r0
 8001cf6:	18a4      	adds	r4, r4, r2
 8001cf8:	e73a      	b.n	8001b70 <__aeabi_dadd+0x504>
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	075a      	lsls	r2, r3, #29
 8001cfe:	4663      	mov	r3, ip
 8001d00:	08d9      	lsrs	r1, r3, #3
 8001d02:	4653      	mov	r3, sl
 8001d04:	430a      	orrs	r2, r1
 8001d06:	08dc      	lsrs	r4, r3, #3
 8001d08:	e67e      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	001c      	movs	r4, r3
 8001d0e:	432a      	orrs	r2, r5
 8001d10:	d000      	beq.n	8001d14 <__aeabi_dadd+0x6a8>
 8001d12:	e6ab      	b.n	8001a6c <__aeabi_dadd+0x400>
 8001d14:	e6c1      	b.n	8001a9a <__aeabi_dadd+0x42e>
 8001d16:	2120      	movs	r1, #32
 8001d18:	2500      	movs	r5, #0
 8001d1a:	1a09      	subs	r1, r1, r0
 8001d1c:	e519      	b.n	8001752 <__aeabi_dadd+0xe6>
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2500      	movs	r5, #0
 8001d22:	4c01      	ldr	r4, [pc, #4]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001d24:	e53a      	b.n	800179c <__aeabi_dadd+0x130>
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	000007fe 	.word	0x000007fe

08001d34 <__aeabi_ddiv>:
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	46de      	mov	lr, fp
 8001d38:	4645      	mov	r5, r8
 8001d3a:	4657      	mov	r7, sl
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	b5e0      	push	{r5, r6, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	9200      	str	r2, [sp, #0]
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	030b      	lsls	r3, r1, #12
 8001d48:	0b1b      	lsrs	r3, r3, #12
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	0fca      	lsrs	r2, r1, #31
 8001d4e:	004b      	lsls	r3, r1, #1
 8001d50:	0004      	movs	r4, r0
 8001d52:	4680      	mov	r8, r0
 8001d54:	0d5b      	lsrs	r3, r3, #21
 8001d56:	9202      	str	r2, [sp, #8]
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x28>
 8001d5a:	e16a      	b.n	8002032 <__aeabi_ddiv+0x2fe>
 8001d5c:	4ad4      	ldr	r2, [pc, #848]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x30>
 8001d62:	e18c      	b.n	800207e <__aeabi_ddiv+0x34a>
 8001d64:	4659      	mov	r1, fp
 8001d66:	0f42      	lsrs	r2, r0, #29
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4311      	orrs	r1, r2
 8001d72:	00c2      	lsls	r2, r0, #3
 8001d74:	4690      	mov	r8, r2
 8001d76:	4acf      	ldr	r2, [pc, #828]	@ (80020b4 <__aeabi_ddiv+0x380>)
 8001d78:	4689      	mov	r9, r1
 8001d7a:	4692      	mov	sl, r2
 8001d7c:	449a      	add	sl, r3
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2400      	movs	r4, #0
 8001d82:	9303      	str	r3, [sp, #12]
 8001d84:	9e00      	ldr	r6, [sp, #0]
 8001d86:	9f01      	ldr	r7, [sp, #4]
 8001d88:	033b      	lsls	r3, r7, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	469b      	mov	fp, r3
 8001d8e:	007b      	lsls	r3, r7, #1
 8001d90:	0030      	movs	r0, r6
 8001d92:	0d5b      	lsrs	r3, r3, #21
 8001d94:	0ffd      	lsrs	r5, r7, #31
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_ddiv+0x68>
 8001d9a:	e128      	b.n	8001fee <__aeabi_ddiv+0x2ba>
 8001d9c:	4ac4      	ldr	r2, [pc, #784]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x70>
 8001da2:	e177      	b.n	8002094 <__aeabi_ddiv+0x360>
 8001da4:	4659      	mov	r1, fp
 8001da6:	0f72      	lsrs	r2, r6, #29
 8001da8:	00c9      	lsls	r1, r1, #3
 8001daa:	430a      	orrs	r2, r1
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	0409      	lsls	r1, r1, #16
 8001db0:	4311      	orrs	r1, r2
 8001db2:	468b      	mov	fp, r1
 8001db4:	49bf      	ldr	r1, [pc, #764]	@ (80020b4 <__aeabi_ddiv+0x380>)
 8001db6:	00f2      	lsls	r2, r6, #3
 8001db8:	468c      	mov	ip, r1
 8001dba:	4651      	mov	r1, sl
 8001dbc:	4463      	add	r3, ip
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9e02      	ldr	r6, [sp, #8]
 8001dc6:	406e      	eors	r6, r5
 8001dc8:	2c0f      	cmp	r4, #15
 8001dca:	d827      	bhi.n	8001e1c <__aeabi_ddiv+0xe8>
 8001dcc:	49ba      	ldr	r1, [pc, #744]	@ (80020b8 <__aeabi_ddiv+0x384>)
 8001dce:	00a4      	lsls	r4, r4, #2
 8001dd0:	5909      	ldr	r1, [r1, r4]
 8001dd2:	468f      	mov	pc, r1
 8001dd4:	46cb      	mov	fp, r9
 8001dd6:	4642      	mov	r2, r8
 8001dd8:	9e02      	ldr	r6, [sp, #8]
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d016      	beq.n	8001e0e <__aeabi_ddiv+0xda>
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xb2>
 8001de4:	e2a6      	b.n	8002334 <__aeabi_ddiv+0x600>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d000      	beq.n	8001dec <__aeabi_ddiv+0xb8>
 8001dea:	e0df      	b.n	8001fac <__aeabi_ddiv+0x278>
 8001dec:	2200      	movs	r2, #0
 8001dee:	2300      	movs	r3, #0
 8001df0:	2400      	movs	r4, #0
 8001df2:	4690      	mov	r8, r2
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	4323      	orrs	r3, r4
 8001df8:	07f6      	lsls	r6, r6, #31
 8001dfa:	4333      	orrs	r3, r6
 8001dfc:	4640      	mov	r0, r8
 8001dfe:	0019      	movs	r1, r3
 8001e00:	b007      	add	sp, #28
 8001e02:	bcf0      	pop	{r4, r5, r6, r7}
 8001e04:	46bb      	mov	fp, r7
 8001e06:	46b2      	mov	sl, r6
 8001e08:	46a9      	mov	r9, r5
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2400      	movs	r4, #0
 8001e12:	4690      	mov	r8, r2
 8001e14:	4ba6      	ldr	r3, [pc, #664]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001e16:	e7ed      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8001e18:	002e      	movs	r6, r5
 8001e1a:	e7df      	b.n	8001ddc <__aeabi_ddiv+0xa8>
 8001e1c:	45cb      	cmp	fp, r9
 8001e1e:	d200      	bcs.n	8001e22 <__aeabi_ddiv+0xee>
 8001e20:	e1d4      	b.n	80021cc <__aeabi_ddiv+0x498>
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0xf2>
 8001e24:	e1cf      	b.n	80021c6 <__aeabi_ddiv+0x492>
 8001e26:	2301      	movs	r3, #1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	4644      	mov	r4, r8
 8001e2e:	4648      	mov	r0, r9
 8001e30:	2700      	movs	r7, #0
 8001e32:	44e2      	add	sl, ip
 8001e34:	465b      	mov	r3, fp
 8001e36:	0e15      	lsrs	r5, r2, #24
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	431d      	orrs	r5, r3
 8001e3c:	0c19      	lsrs	r1, r3, #16
 8001e3e:	042b      	lsls	r3, r5, #16
 8001e40:	0212      	lsls	r2, r2, #8
 8001e42:	9500      	str	r5, [sp, #0]
 8001e44:	0c1d      	lsrs	r5, r3, #16
 8001e46:	4691      	mov	r9, r2
 8001e48:	9102      	str	r1, [sp, #8]
 8001e4a:	9503      	str	r5, [sp, #12]
 8001e4c:	f7fe fa06 	bl	800025c <__aeabi_uidivmod>
 8001e50:	0002      	movs	r2, r0
 8001e52:	436a      	muls	r2, r5
 8001e54:	040b      	lsls	r3, r1, #16
 8001e56:	0c21      	lsrs	r1, r4, #16
 8001e58:	4680      	mov	r8, r0
 8001e5a:	4319      	orrs	r1, r3
 8001e5c:	428a      	cmp	r2, r1
 8001e5e:	d909      	bls.n	8001e74 <__aeabi_ddiv+0x140>
 8001e60:	9d00      	ldr	r5, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	46ac      	mov	ip, r5
 8001e66:	425b      	negs	r3, r3
 8001e68:	4461      	add	r1, ip
 8001e6a:	469c      	mov	ip, r3
 8001e6c:	44e0      	add	r8, ip
 8001e6e:	428d      	cmp	r5, r1
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x140>
 8001e72:	e1fb      	b.n	800226c <__aeabi_ddiv+0x538>
 8001e74:	1a88      	subs	r0, r1, r2
 8001e76:	9902      	ldr	r1, [sp, #8]
 8001e78:	f7fe f9f0 	bl	800025c <__aeabi_uidivmod>
 8001e7c:	9a03      	ldr	r2, [sp, #12]
 8001e7e:	0424      	lsls	r4, r4, #16
 8001e80:	4342      	muls	r2, r0
 8001e82:	0409      	lsls	r1, r1, #16
 8001e84:	0c24      	lsrs	r4, r4, #16
 8001e86:	0003      	movs	r3, r0
 8001e88:	430c      	orrs	r4, r1
 8001e8a:	42a2      	cmp	r2, r4
 8001e8c:	d906      	bls.n	8001e9c <__aeabi_ddiv+0x168>
 8001e8e:	9900      	ldr	r1, [sp, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	468c      	mov	ip, r1
 8001e94:	4464      	add	r4, ip
 8001e96:	42a1      	cmp	r1, r4
 8001e98:	d800      	bhi.n	8001e9c <__aeabi_ddiv+0x168>
 8001e9a:	e1e1      	b.n	8002260 <__aeabi_ddiv+0x52c>
 8001e9c:	1aa0      	subs	r0, r4, r2
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	4693      	mov	fp, r2
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	001d      	movs	r5, r3
 8001eae:	9304      	str	r3, [sp, #16]
 8001eb0:	040b      	lsls	r3, r1, #16
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	0409      	lsls	r1, r1, #16
 8001eb6:	0c09      	lsrs	r1, r1, #16
 8001eb8:	000c      	movs	r4, r1
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	435c      	muls	r4, r3
 8001ebe:	0c12      	lsrs	r2, r2, #16
 8001ec0:	436b      	muls	r3, r5
 8001ec2:	4688      	mov	r8, r1
 8001ec4:	4351      	muls	r1, r2
 8001ec6:	436a      	muls	r2, r5
 8001ec8:	0c25      	lsrs	r5, r4, #16
 8001eca:	46ac      	mov	ip, r5
 8001ecc:	185b      	adds	r3, r3, r1
 8001ece:	4463      	add	r3, ip
 8001ed0:	4299      	cmp	r1, r3
 8001ed2:	d903      	bls.n	8001edc <__aeabi_ddiv+0x1a8>
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	0249      	lsls	r1, r1, #9
 8001ed8:	468c      	mov	ip, r1
 8001eda:	4462      	add	r2, ip
 8001edc:	0c19      	lsrs	r1, r3, #16
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	0c24      	lsrs	r4, r4, #16
 8001ee4:	188a      	adds	r2, r1, r2
 8001ee6:	191c      	adds	r4, r3, r4
 8001ee8:	4290      	cmp	r0, r2
 8001eea:	d302      	bcc.n	8001ef2 <__aeabi_ddiv+0x1be>
 8001eec:	d116      	bne.n	8001f1c <__aeabi_ddiv+0x1e8>
 8001eee:	42a7      	cmp	r7, r4
 8001ef0:	d214      	bcs.n	8001f1c <__aeabi_ddiv+0x1e8>
 8001ef2:	465b      	mov	r3, fp
 8001ef4:	9d00      	ldr	r5, [sp, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	444f      	add	r7, r9
 8001efa:	9305      	str	r3, [sp, #20]
 8001efc:	454f      	cmp	r7, r9
 8001efe:	419b      	sbcs	r3, r3
 8001f00:	46ac      	mov	ip, r5
 8001f02:	425b      	negs	r3, r3
 8001f04:	4463      	add	r3, ip
 8001f06:	18c0      	adds	r0, r0, r3
 8001f08:	4285      	cmp	r5, r0
 8001f0a:	d300      	bcc.n	8001f0e <__aeabi_ddiv+0x1da>
 8001f0c:	e1a1      	b.n	8002252 <__aeabi_ddiv+0x51e>
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	d900      	bls.n	8001f14 <__aeabi_ddiv+0x1e0>
 8001f12:	e1f6      	b.n	8002302 <__aeabi_ddiv+0x5ce>
 8001f14:	d100      	bne.n	8001f18 <__aeabi_ddiv+0x1e4>
 8001f16:	e1f1      	b.n	80022fc <__aeabi_ddiv+0x5c8>
 8001f18:	9b05      	ldr	r3, [sp, #20]
 8001f1a:	469b      	mov	fp, r3
 8001f1c:	1b3c      	subs	r4, r7, r4
 8001f1e:	42a7      	cmp	r7, r4
 8001f20:	41bf      	sbcs	r7, r7
 8001f22:	9d00      	ldr	r5, [sp, #0]
 8001f24:	1a80      	subs	r0, r0, r2
 8001f26:	427f      	negs	r7, r7
 8001f28:	1bc0      	subs	r0, r0, r7
 8001f2a:	4285      	cmp	r5, r0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_ddiv+0x1fc>
 8001f2e:	e1d0      	b.n	80022d2 <__aeabi_ddiv+0x59e>
 8001f30:	9902      	ldr	r1, [sp, #8]
 8001f32:	f7fe f993 	bl	800025c <__aeabi_uidivmod>
 8001f36:	9a03      	ldr	r2, [sp, #12]
 8001f38:	040b      	lsls	r3, r1, #16
 8001f3a:	4342      	muls	r2, r0
 8001f3c:	0c21      	lsrs	r1, r4, #16
 8001f3e:	0007      	movs	r7, r0
 8001f40:	4319      	orrs	r1, r3
 8001f42:	428a      	cmp	r2, r1
 8001f44:	d900      	bls.n	8001f48 <__aeabi_ddiv+0x214>
 8001f46:	e178      	b.n	800223a <__aeabi_ddiv+0x506>
 8001f48:	1a88      	subs	r0, r1, r2
 8001f4a:	9902      	ldr	r1, [sp, #8]
 8001f4c:	f7fe f986 	bl	800025c <__aeabi_uidivmod>
 8001f50:	9a03      	ldr	r2, [sp, #12]
 8001f52:	0424      	lsls	r4, r4, #16
 8001f54:	4342      	muls	r2, r0
 8001f56:	0409      	lsls	r1, r1, #16
 8001f58:	0c24      	lsrs	r4, r4, #16
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	430c      	orrs	r4, r1
 8001f5e:	42a2      	cmp	r2, r4
 8001f60:	d900      	bls.n	8001f64 <__aeabi_ddiv+0x230>
 8001f62:	e15d      	b.n	8002220 <__aeabi_ddiv+0x4ec>
 8001f64:	4641      	mov	r1, r8
 8001f66:	1aa4      	subs	r4, r4, r2
 8001f68:	043a      	lsls	r2, r7, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	9d04      	ldr	r5, [sp, #16]
 8001f6e:	0413      	lsls	r3, r2, #16
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	4359      	muls	r1, r3
 8001f74:	4647      	mov	r7, r8
 8001f76:	436b      	muls	r3, r5
 8001f78:	469c      	mov	ip, r3
 8001f7a:	0c10      	lsrs	r0, r2, #16
 8001f7c:	4347      	muls	r7, r0
 8001f7e:	0c0b      	lsrs	r3, r1, #16
 8001f80:	44bc      	add	ip, r7
 8001f82:	4463      	add	r3, ip
 8001f84:	4368      	muls	r0, r5
 8001f86:	429f      	cmp	r7, r3
 8001f88:	d903      	bls.n	8001f92 <__aeabi_ddiv+0x25e>
 8001f8a:	2580      	movs	r5, #128	@ 0x80
 8001f8c:	026d      	lsls	r5, r5, #9
 8001f8e:	46ac      	mov	ip, r5
 8001f90:	4460      	add	r0, ip
 8001f92:	0c1f      	lsrs	r7, r3, #16
 8001f94:	0409      	lsls	r1, r1, #16
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	0c09      	lsrs	r1, r1, #16
 8001f9a:	183f      	adds	r7, r7, r0
 8001f9c:	185b      	adds	r3, r3, r1
 8001f9e:	42bc      	cmp	r4, r7
 8001fa0:	d200      	bcs.n	8001fa4 <__aeabi_ddiv+0x270>
 8001fa2:	e102      	b.n	80021aa <__aeabi_ddiv+0x476>
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_ddiv+0x274>
 8001fa6:	e0fd      	b.n	80021a4 <__aeabi_ddiv+0x470>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	4b43      	ldr	r3, [pc, #268]	@ (80020bc <__aeabi_ddiv+0x388>)
 8001fae:	4453      	add	r3, sl
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	dc00      	bgt.n	8001fb6 <__aeabi_ddiv+0x282>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_ddiv+0x3e0>
 8001fb6:	0751      	lsls	r1, r2, #29
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_ddiv+0x288>
 8001fba:	e198      	b.n	80022ee <__aeabi_ddiv+0x5ba>
 8001fbc:	4659      	mov	r1, fp
 8001fbe:	01c9      	lsls	r1, r1, #7
 8001fc0:	d506      	bpl.n	8001fd0 <__aeabi_ddiv+0x29c>
 8001fc2:	4659      	mov	r1, fp
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <__aeabi_ddiv+0x38c>)
 8001fc6:	4019      	ands	r1, r3
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	468b      	mov	fp, r1
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4453      	add	r3, sl
 8001fd0:	493c      	ldr	r1, [pc, #240]	@ (80020c4 <__aeabi_ddiv+0x390>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_ddiv+0x2a4>
 8001fd6:	e71a      	b.n	8001e0e <__aeabi_ddiv+0xda>
 8001fd8:	4659      	mov	r1, fp
 8001fda:	08d2      	lsrs	r2, r2, #3
 8001fdc:	0749      	lsls	r1, r1, #29
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	465a      	mov	r2, fp
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	0254      	lsls	r4, r2, #9
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	0b24      	lsrs	r4, r4, #12
 8001fea:	0d5b      	lsrs	r3, r3, #21
 8001fec:	e702      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8001fee:	465a      	mov	r2, fp
 8001ff0:	9b00      	ldr	r3, [sp, #0]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_ddiv+0x2c4>
 8001ff6:	e07e      	b.n	80020f6 <__aeabi_ddiv+0x3c2>
 8001ff8:	465b      	mov	r3, fp
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x2cc>
 8001ffe:	e100      	b.n	8002202 <__aeabi_ddiv+0x4ce>
 8002000:	4658      	mov	r0, fp
 8002002:	f001 fabb 	bl	800357c <__clzsi2>
 8002006:	0002      	movs	r2, r0
 8002008:	0003      	movs	r3, r0
 800200a:	3a0b      	subs	r2, #11
 800200c:	271d      	movs	r7, #29
 800200e:	9e00      	ldr	r6, [sp, #0]
 8002010:	1aba      	subs	r2, r7, r2
 8002012:	0019      	movs	r1, r3
 8002014:	4658      	mov	r0, fp
 8002016:	40d6      	lsrs	r6, r2
 8002018:	3908      	subs	r1, #8
 800201a:	4088      	lsls	r0, r1
 800201c:	0032      	movs	r2, r6
 800201e:	4302      	orrs	r2, r0
 8002020:	4693      	mov	fp, r2
 8002022:	9a00      	ldr	r2, [sp, #0]
 8002024:	408a      	lsls	r2, r1
 8002026:	4928      	ldr	r1, [pc, #160]	@ (80020c8 <__aeabi_ddiv+0x394>)
 8002028:	4453      	add	r3, sl
 800202a:	468a      	mov	sl, r1
 800202c:	449a      	add	sl, r3
 800202e:	2300      	movs	r3, #0
 8002030:	e6c8      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 8002032:	465b      	mov	r3, fp
 8002034:	4303      	orrs	r3, r0
 8002036:	4699      	mov	r9, r3
 8002038:	d056      	beq.n	80020e8 <__aeabi_ddiv+0x3b4>
 800203a:	465b      	mov	r3, fp
 800203c:	2b00      	cmp	r3, #0
 800203e:	d100      	bne.n	8002042 <__aeabi_ddiv+0x30e>
 8002040:	e0cd      	b.n	80021de <__aeabi_ddiv+0x4aa>
 8002042:	4658      	mov	r0, fp
 8002044:	f001 fa9a 	bl	800357c <__clzsi2>
 8002048:	230b      	movs	r3, #11
 800204a:	425b      	negs	r3, r3
 800204c:	469c      	mov	ip, r3
 800204e:	0002      	movs	r2, r0
 8002050:	4484      	add	ip, r0
 8002052:	4666      	mov	r6, ip
 8002054:	231d      	movs	r3, #29
 8002056:	1b9b      	subs	r3, r3, r6
 8002058:	0026      	movs	r6, r4
 800205a:	0011      	movs	r1, r2
 800205c:	4658      	mov	r0, fp
 800205e:	40de      	lsrs	r6, r3
 8002060:	3908      	subs	r1, #8
 8002062:	4088      	lsls	r0, r1
 8002064:	0033      	movs	r3, r6
 8002066:	4303      	orrs	r3, r0
 8002068:	4699      	mov	r9, r3
 800206a:	0023      	movs	r3, r4
 800206c:	408b      	lsls	r3, r1
 800206e:	4698      	mov	r8, r3
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <__aeabi_ddiv+0x398>)
 8002072:	2400      	movs	r4, #0
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	469a      	mov	sl, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	e682      	b.n	8001d84 <__aeabi_ddiv+0x50>
 800207e:	465a      	mov	r2, fp
 8002080:	4302      	orrs	r2, r0
 8002082:	4691      	mov	r9, r2
 8002084:	d12a      	bne.n	80020dc <__aeabi_ddiv+0x3a8>
 8002086:	2200      	movs	r2, #0
 8002088:	469a      	mov	sl, r3
 800208a:	2302      	movs	r3, #2
 800208c:	4690      	mov	r8, r2
 800208e:	2408      	movs	r4, #8
 8002090:	9303      	str	r3, [sp, #12]
 8002092:	e677      	b.n	8001d84 <__aeabi_ddiv+0x50>
 8002094:	465a      	mov	r2, fp
 8002096:	9b00      	ldr	r3, [sp, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <__aeabi_ddiv+0x39c>)
 800209c:	469c      	mov	ip, r3
 800209e:	44e2      	add	sl, ip
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d117      	bne.n	80020d4 <__aeabi_ddiv+0x3a0>
 80020a4:	2302      	movs	r3, #2
 80020a6:	431c      	orrs	r4, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	469b      	mov	fp, r3
 80020ac:	3302      	adds	r3, #2
 80020ae:	e689      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 80020b0:	000007ff 	.word	0x000007ff
 80020b4:	fffffc01 	.word	0xfffffc01
 80020b8:	080111ac 	.word	0x080111ac
 80020bc:	000003ff 	.word	0x000003ff
 80020c0:	feffffff 	.word	0xfeffffff
 80020c4:	000007fe 	.word	0x000007fe
 80020c8:	000003f3 	.word	0x000003f3
 80020cc:	fffffc0d 	.word	0xfffffc0d
 80020d0:	fffff801 	.word	0xfffff801
 80020d4:	2303      	movs	r3, #3
 80020d6:	0032      	movs	r2, r6
 80020d8:	431c      	orrs	r4, r3
 80020da:	e673      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 80020dc:	469a      	mov	sl, r3
 80020de:	2303      	movs	r3, #3
 80020e0:	46d9      	mov	r9, fp
 80020e2:	240c      	movs	r4, #12
 80020e4:	9303      	str	r3, [sp, #12]
 80020e6:	e64d      	b.n	8001d84 <__aeabi_ddiv+0x50>
 80020e8:	2300      	movs	r3, #0
 80020ea:	4698      	mov	r8, r3
 80020ec:	469a      	mov	sl, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	2404      	movs	r4, #4
 80020f2:	9303      	str	r3, [sp, #12]
 80020f4:	e646      	b.n	8001d84 <__aeabi_ddiv+0x50>
 80020f6:	2301      	movs	r3, #1
 80020f8:	431c      	orrs	r4, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	469b      	mov	fp, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	e660      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 8002102:	2300      	movs	r3, #0
 8002104:	2480      	movs	r4, #128	@ 0x80
 8002106:	4698      	mov	r8, r3
 8002108:	2600      	movs	r6, #0
 800210a:	4b92      	ldr	r3, [pc, #584]	@ (8002354 <__aeabi_ddiv+0x620>)
 800210c:	0324      	lsls	r4, r4, #12
 800210e:	e671      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002110:	2201      	movs	r2, #1
 8002112:	4252      	negs	r2, r2
 8002114:	2101      	movs	r1, #1
 8002116:	1ac9      	subs	r1, r1, r3
 8002118:	2938      	cmp	r1, #56	@ 0x38
 800211a:	dd00      	ble.n	800211e <__aeabi_ddiv+0x3ea>
 800211c:	e666      	b.n	8001dec <__aeabi_ddiv+0xb8>
 800211e:	291f      	cmp	r1, #31
 8002120:	dc00      	bgt.n	8002124 <__aeabi_ddiv+0x3f0>
 8002122:	e0ab      	b.n	800227c <__aeabi_ddiv+0x548>
 8002124:	201f      	movs	r0, #31
 8002126:	4240      	negs	r0, r0
 8002128:	1ac3      	subs	r3, r0, r3
 800212a:	4658      	mov	r0, fp
 800212c:	40d8      	lsrs	r0, r3
 800212e:	0003      	movs	r3, r0
 8002130:	2920      	cmp	r1, #32
 8002132:	d004      	beq.n	800213e <__aeabi_ddiv+0x40a>
 8002134:	4658      	mov	r0, fp
 8002136:	4988      	ldr	r1, [pc, #544]	@ (8002358 <__aeabi_ddiv+0x624>)
 8002138:	4451      	add	r1, sl
 800213a:	4088      	lsls	r0, r1
 800213c:	4302      	orrs	r2, r0
 800213e:	1e51      	subs	r1, r2, #1
 8002140:	418a      	sbcs	r2, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	2307      	movs	r3, #7
 8002146:	0019      	movs	r1, r3
 8002148:	2400      	movs	r4, #0
 800214a:	4011      	ands	r1, r2
 800214c:	4213      	tst	r3, r2
 800214e:	d00c      	beq.n	800216a <__aeabi_ddiv+0x436>
 8002150:	230f      	movs	r3, #15
 8002152:	4013      	ands	r3, r2
 8002154:	2b04      	cmp	r3, #4
 8002156:	d100      	bne.n	800215a <__aeabi_ddiv+0x426>
 8002158:	e0f9      	b.n	800234e <__aeabi_ddiv+0x61a>
 800215a:	1d11      	adds	r1, r2, #4
 800215c:	4291      	cmp	r1, r2
 800215e:	419b      	sbcs	r3, r3
 8002160:	000a      	movs	r2, r1
 8002162:	425b      	negs	r3, r3
 8002164:	0759      	lsls	r1, r3, #29
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	0b1c      	lsrs	r4, r3, #12
 800216a:	08d2      	lsrs	r2, r2, #3
 800216c:	430a      	orrs	r2, r1
 800216e:	4690      	mov	r8, r2
 8002170:	2300      	movs	r3, #0
 8002172:	e63f      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002174:	2480      	movs	r4, #128	@ 0x80
 8002176:	464b      	mov	r3, r9
 8002178:	0324      	lsls	r4, r4, #12
 800217a:	4223      	tst	r3, r4
 800217c:	d009      	beq.n	8002192 <__aeabi_ddiv+0x45e>
 800217e:	465b      	mov	r3, fp
 8002180:	4223      	tst	r3, r4
 8002182:	d106      	bne.n	8002192 <__aeabi_ddiv+0x45e>
 8002184:	431c      	orrs	r4, r3
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	002e      	movs	r6, r5
 800218a:	4690      	mov	r8, r2
 800218c:	4b71      	ldr	r3, [pc, #452]	@ (8002354 <__aeabi_ddiv+0x620>)
 800218e:	0b24      	lsrs	r4, r4, #12
 8002190:	e630      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002192:	2480      	movs	r4, #128	@ 0x80
 8002194:	464b      	mov	r3, r9
 8002196:	0324      	lsls	r4, r4, #12
 8002198:	431c      	orrs	r4, r3
 800219a:	0324      	lsls	r4, r4, #12
 800219c:	9e02      	ldr	r6, [sp, #8]
 800219e:	4b6d      	ldr	r3, [pc, #436]	@ (8002354 <__aeabi_ddiv+0x620>)
 80021a0:	0b24      	lsrs	r4, r4, #12
 80021a2:	e627      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d100      	bne.n	80021aa <__aeabi_ddiv+0x476>
 80021a8:	e700      	b.n	8001fac <__aeabi_ddiv+0x278>
 80021aa:	9800      	ldr	r0, [sp, #0]
 80021ac:	1e51      	subs	r1, r2, #1
 80021ae:	4684      	mov	ip, r0
 80021b0:	4464      	add	r4, ip
 80021b2:	4284      	cmp	r4, r0
 80021b4:	d200      	bcs.n	80021b8 <__aeabi_ddiv+0x484>
 80021b6:	e084      	b.n	80022c2 <__aeabi_ddiv+0x58e>
 80021b8:	42bc      	cmp	r4, r7
 80021ba:	d200      	bcs.n	80021be <__aeabi_ddiv+0x48a>
 80021bc:	e0ae      	b.n	800231c <__aeabi_ddiv+0x5e8>
 80021be:	d100      	bne.n	80021c2 <__aeabi_ddiv+0x48e>
 80021c0:	e0c1      	b.n	8002346 <__aeabi_ddiv+0x612>
 80021c2:	000a      	movs	r2, r1
 80021c4:	e6f0      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80021c6:	4542      	cmp	r2, r8
 80021c8:	d900      	bls.n	80021cc <__aeabi_ddiv+0x498>
 80021ca:	e62c      	b.n	8001e26 <__aeabi_ddiv+0xf2>
 80021cc:	464b      	mov	r3, r9
 80021ce:	07dc      	lsls	r4, r3, #31
 80021d0:	0858      	lsrs	r0, r3, #1
 80021d2:	4643      	mov	r3, r8
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	431c      	orrs	r4, r3
 80021d8:	4643      	mov	r3, r8
 80021da:	07df      	lsls	r7, r3, #31
 80021dc:	e62a      	b.n	8001e34 <__aeabi_ddiv+0x100>
 80021de:	f001 f9cd 	bl	800357c <__clzsi2>
 80021e2:	2315      	movs	r3, #21
 80021e4:	469c      	mov	ip, r3
 80021e6:	4484      	add	ip, r0
 80021e8:	0002      	movs	r2, r0
 80021ea:	4663      	mov	r3, ip
 80021ec:	3220      	adds	r2, #32
 80021ee:	2b1c      	cmp	r3, #28
 80021f0:	dc00      	bgt.n	80021f4 <__aeabi_ddiv+0x4c0>
 80021f2:	e72e      	b.n	8002052 <__aeabi_ddiv+0x31e>
 80021f4:	0023      	movs	r3, r4
 80021f6:	3808      	subs	r0, #8
 80021f8:	4083      	lsls	r3, r0
 80021fa:	4699      	mov	r9, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	4698      	mov	r8, r3
 8002200:	e736      	b.n	8002070 <__aeabi_ddiv+0x33c>
 8002202:	f001 f9bb 	bl	800357c <__clzsi2>
 8002206:	0002      	movs	r2, r0
 8002208:	0003      	movs	r3, r0
 800220a:	3215      	adds	r2, #21
 800220c:	3320      	adds	r3, #32
 800220e:	2a1c      	cmp	r2, #28
 8002210:	dc00      	bgt.n	8002214 <__aeabi_ddiv+0x4e0>
 8002212:	e6fb      	b.n	800200c <__aeabi_ddiv+0x2d8>
 8002214:	9900      	ldr	r1, [sp, #0]
 8002216:	3808      	subs	r0, #8
 8002218:	4081      	lsls	r1, r0
 800221a:	2200      	movs	r2, #0
 800221c:	468b      	mov	fp, r1
 800221e:	e702      	b.n	8002026 <__aeabi_ddiv+0x2f2>
 8002220:	9900      	ldr	r1, [sp, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	468c      	mov	ip, r1
 8002226:	4464      	add	r4, ip
 8002228:	42a1      	cmp	r1, r4
 800222a:	d900      	bls.n	800222e <__aeabi_ddiv+0x4fa>
 800222c:	e69a      	b.n	8001f64 <__aeabi_ddiv+0x230>
 800222e:	42a2      	cmp	r2, r4
 8002230:	d800      	bhi.n	8002234 <__aeabi_ddiv+0x500>
 8002232:	e697      	b.n	8001f64 <__aeabi_ddiv+0x230>
 8002234:	1e83      	subs	r3, r0, #2
 8002236:	4464      	add	r4, ip
 8002238:	e694      	b.n	8001f64 <__aeabi_ddiv+0x230>
 800223a:	46ac      	mov	ip, r5
 800223c:	4461      	add	r1, ip
 800223e:	3f01      	subs	r7, #1
 8002240:	428d      	cmp	r5, r1
 8002242:	d900      	bls.n	8002246 <__aeabi_ddiv+0x512>
 8002244:	e680      	b.n	8001f48 <__aeabi_ddiv+0x214>
 8002246:	428a      	cmp	r2, r1
 8002248:	d800      	bhi.n	800224c <__aeabi_ddiv+0x518>
 800224a:	e67d      	b.n	8001f48 <__aeabi_ddiv+0x214>
 800224c:	1e87      	subs	r7, r0, #2
 800224e:	4461      	add	r1, ip
 8002250:	e67a      	b.n	8001f48 <__aeabi_ddiv+0x214>
 8002252:	4285      	cmp	r5, r0
 8002254:	d000      	beq.n	8002258 <__aeabi_ddiv+0x524>
 8002256:	e65f      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 8002258:	45b9      	cmp	r9, r7
 800225a:	d900      	bls.n	800225e <__aeabi_ddiv+0x52a>
 800225c:	e65c      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 800225e:	e656      	b.n	8001f0e <__aeabi_ddiv+0x1da>
 8002260:	42a2      	cmp	r2, r4
 8002262:	d800      	bhi.n	8002266 <__aeabi_ddiv+0x532>
 8002264:	e61a      	b.n	8001e9c <__aeabi_ddiv+0x168>
 8002266:	1e83      	subs	r3, r0, #2
 8002268:	4464      	add	r4, ip
 800226a:	e617      	b.n	8001e9c <__aeabi_ddiv+0x168>
 800226c:	428a      	cmp	r2, r1
 800226e:	d800      	bhi.n	8002272 <__aeabi_ddiv+0x53e>
 8002270:	e600      	b.n	8001e74 <__aeabi_ddiv+0x140>
 8002272:	46ac      	mov	ip, r5
 8002274:	1e83      	subs	r3, r0, #2
 8002276:	4698      	mov	r8, r3
 8002278:	4461      	add	r1, ip
 800227a:	e5fb      	b.n	8001e74 <__aeabi_ddiv+0x140>
 800227c:	4837      	ldr	r0, [pc, #220]	@ (800235c <__aeabi_ddiv+0x628>)
 800227e:	0014      	movs	r4, r2
 8002280:	4450      	add	r0, sl
 8002282:	4082      	lsls	r2, r0
 8002284:	465b      	mov	r3, fp
 8002286:	0017      	movs	r7, r2
 8002288:	4083      	lsls	r3, r0
 800228a:	40cc      	lsrs	r4, r1
 800228c:	1e7a      	subs	r2, r7, #1
 800228e:	4197      	sbcs	r7, r2
 8002290:	4323      	orrs	r3, r4
 8002292:	433b      	orrs	r3, r7
 8002294:	001a      	movs	r2, r3
 8002296:	465b      	mov	r3, fp
 8002298:	40cb      	lsrs	r3, r1
 800229a:	0751      	lsls	r1, r2, #29
 800229c:	d009      	beq.n	80022b2 <__aeabi_ddiv+0x57e>
 800229e:	210f      	movs	r1, #15
 80022a0:	4011      	ands	r1, r2
 80022a2:	2904      	cmp	r1, #4
 80022a4:	d005      	beq.n	80022b2 <__aeabi_ddiv+0x57e>
 80022a6:	1d11      	adds	r1, r2, #4
 80022a8:	4291      	cmp	r1, r2
 80022aa:	4192      	sbcs	r2, r2
 80022ac:	4252      	negs	r2, r2
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	000a      	movs	r2, r1
 80022b2:	0219      	lsls	r1, r3, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_ddiv+0x584>
 80022b6:	e755      	b.n	8002164 <__aeabi_ddiv+0x430>
 80022b8:	2200      	movs	r2, #0
 80022ba:	2301      	movs	r3, #1
 80022bc:	2400      	movs	r4, #0
 80022be:	4690      	mov	r8, r2
 80022c0:	e598      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 80022c2:	000a      	movs	r2, r1
 80022c4:	42bc      	cmp	r4, r7
 80022c6:	d000      	beq.n	80022ca <__aeabi_ddiv+0x596>
 80022c8:	e66e      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80022ca:	454b      	cmp	r3, r9
 80022cc:	d000      	beq.n	80022d0 <__aeabi_ddiv+0x59c>
 80022ce:	e66b      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80022d0:	e66c      	b.n	8001fac <__aeabi_ddiv+0x278>
 80022d2:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <__aeabi_ddiv+0x62c>)
 80022d4:	4a23      	ldr	r2, [pc, #140]	@ (8002364 <__aeabi_ddiv+0x630>)
 80022d6:	4453      	add	r3, sl
 80022d8:	4592      	cmp	sl, r2
 80022da:	da00      	bge.n	80022de <__aeabi_ddiv+0x5aa>
 80022dc:	e718      	b.n	8002110 <__aeabi_ddiv+0x3dc>
 80022de:	2101      	movs	r1, #1
 80022e0:	4249      	negs	r1, r1
 80022e2:	1d0a      	adds	r2, r1, #4
 80022e4:	428a      	cmp	r2, r1
 80022e6:	4189      	sbcs	r1, r1
 80022e8:	4249      	negs	r1, r1
 80022ea:	448b      	add	fp, r1
 80022ec:	e666      	b.n	8001fbc <__aeabi_ddiv+0x288>
 80022ee:	210f      	movs	r1, #15
 80022f0:	4011      	ands	r1, r2
 80022f2:	2904      	cmp	r1, #4
 80022f4:	d100      	bne.n	80022f8 <__aeabi_ddiv+0x5c4>
 80022f6:	e661      	b.n	8001fbc <__aeabi_ddiv+0x288>
 80022f8:	0011      	movs	r1, r2
 80022fa:	e7f2      	b.n	80022e2 <__aeabi_ddiv+0x5ae>
 80022fc:	42bc      	cmp	r4, r7
 80022fe:	d800      	bhi.n	8002302 <__aeabi_ddiv+0x5ce>
 8002300:	e60a      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 8002302:	2302      	movs	r3, #2
 8002304:	425b      	negs	r3, r3
 8002306:	469c      	mov	ip, r3
 8002308:	9900      	ldr	r1, [sp, #0]
 800230a:	444f      	add	r7, r9
 800230c:	454f      	cmp	r7, r9
 800230e:	419b      	sbcs	r3, r3
 8002310:	44e3      	add	fp, ip
 8002312:	468c      	mov	ip, r1
 8002314:	425b      	negs	r3, r3
 8002316:	4463      	add	r3, ip
 8002318:	18c0      	adds	r0, r0, r3
 800231a:	e5ff      	b.n	8001f1c <__aeabi_ddiv+0x1e8>
 800231c:	4649      	mov	r1, r9
 800231e:	9d00      	ldr	r5, [sp, #0]
 8002320:	0048      	lsls	r0, r1, #1
 8002322:	4548      	cmp	r0, r9
 8002324:	4189      	sbcs	r1, r1
 8002326:	46ac      	mov	ip, r5
 8002328:	4249      	negs	r1, r1
 800232a:	4461      	add	r1, ip
 800232c:	4681      	mov	r9, r0
 800232e:	3a02      	subs	r2, #2
 8002330:	1864      	adds	r4, r4, r1
 8002332:	e7c7      	b.n	80022c4 <__aeabi_ddiv+0x590>
 8002334:	2480      	movs	r4, #128	@ 0x80
 8002336:	465b      	mov	r3, fp
 8002338:	0324      	lsls	r4, r4, #12
 800233a:	431c      	orrs	r4, r3
 800233c:	0324      	lsls	r4, r4, #12
 800233e:	4690      	mov	r8, r2
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__aeabi_ddiv+0x620>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e556      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002346:	4599      	cmp	r9, r3
 8002348:	d3e8      	bcc.n	800231c <__aeabi_ddiv+0x5e8>
 800234a:	000a      	movs	r2, r1
 800234c:	e7bd      	b.n	80022ca <__aeabi_ddiv+0x596>
 800234e:	2300      	movs	r3, #0
 8002350:	e708      	b.n	8002164 <__aeabi_ddiv+0x430>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	000007ff 	.word	0x000007ff
 8002358:	0000043e 	.word	0x0000043e
 800235c:	0000041e 	.word	0x0000041e
 8002360:	000003ff 	.word	0x000003ff
 8002364:	fffffc02 	.word	0xfffffc02

08002368 <__eqdf2>:
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	4657      	mov	r7, sl
 800236c:	46de      	mov	lr, fp
 800236e:	464e      	mov	r6, r9
 8002370:	4645      	mov	r5, r8
 8002372:	b5e0      	push	{r5, r6, r7, lr}
 8002374:	000d      	movs	r5, r1
 8002376:	0004      	movs	r4, r0
 8002378:	0fe8      	lsrs	r0, r5, #31
 800237a:	4683      	mov	fp, r0
 800237c:	0309      	lsls	r1, r1, #12
 800237e:	0fd8      	lsrs	r0, r3, #31
 8002380:	0b09      	lsrs	r1, r1, #12
 8002382:	4682      	mov	sl, r0
 8002384:	4819      	ldr	r0, [pc, #100]	@ (80023ec <__eqdf2+0x84>)
 8002386:	468c      	mov	ip, r1
 8002388:	031f      	lsls	r7, r3, #12
 800238a:	0069      	lsls	r1, r5, #1
 800238c:	005e      	lsls	r6, r3, #1
 800238e:	0d49      	lsrs	r1, r1, #21
 8002390:	0b3f      	lsrs	r7, r7, #12
 8002392:	0d76      	lsrs	r6, r6, #21
 8002394:	4281      	cmp	r1, r0
 8002396:	d018      	beq.n	80023ca <__eqdf2+0x62>
 8002398:	4286      	cmp	r6, r0
 800239a:	d00f      	beq.n	80023bc <__eqdf2+0x54>
 800239c:	2001      	movs	r0, #1
 800239e:	42b1      	cmp	r1, r6
 80023a0:	d10d      	bne.n	80023be <__eqdf2+0x56>
 80023a2:	45bc      	cmp	ip, r7
 80023a4:	d10b      	bne.n	80023be <__eqdf2+0x56>
 80023a6:	4294      	cmp	r4, r2
 80023a8:	d109      	bne.n	80023be <__eqdf2+0x56>
 80023aa:	45d3      	cmp	fp, sl
 80023ac:	d01c      	beq.n	80023e8 <__eqdf2+0x80>
 80023ae:	2900      	cmp	r1, #0
 80023b0:	d105      	bne.n	80023be <__eqdf2+0x56>
 80023b2:	4660      	mov	r0, ip
 80023b4:	4320      	orrs	r0, r4
 80023b6:	1e43      	subs	r3, r0, #1
 80023b8:	4198      	sbcs	r0, r3
 80023ba:	e000      	b.n	80023be <__eqdf2+0x56>
 80023bc:	2001      	movs	r0, #1
 80023be:	bcf0      	pop	{r4, r5, r6, r7}
 80023c0:	46bb      	mov	fp, r7
 80023c2:	46b2      	mov	sl, r6
 80023c4:	46a9      	mov	r9, r5
 80023c6:	46a0      	mov	r8, r4
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	2001      	movs	r0, #1
 80023cc:	428e      	cmp	r6, r1
 80023ce:	d1f6      	bne.n	80023be <__eqdf2+0x56>
 80023d0:	4661      	mov	r1, ip
 80023d2:	4339      	orrs	r1, r7
 80023d4:	000f      	movs	r7, r1
 80023d6:	4317      	orrs	r7, r2
 80023d8:	4327      	orrs	r7, r4
 80023da:	d1f0      	bne.n	80023be <__eqdf2+0x56>
 80023dc:	465b      	mov	r3, fp
 80023de:	4652      	mov	r2, sl
 80023e0:	1a98      	subs	r0, r3, r2
 80023e2:	1e43      	subs	r3, r0, #1
 80023e4:	4198      	sbcs	r0, r3
 80023e6:	e7ea      	b.n	80023be <__eqdf2+0x56>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7e8      	b.n	80023be <__eqdf2+0x56>
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__gedf2>:
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	4657      	mov	r7, sl
 80023f4:	464e      	mov	r6, r9
 80023f6:	4645      	mov	r5, r8
 80023f8:	46de      	mov	lr, fp
 80023fa:	b5e0      	push	{r5, r6, r7, lr}
 80023fc:	000d      	movs	r5, r1
 80023fe:	030f      	lsls	r7, r1, #12
 8002400:	0b39      	lsrs	r1, r7, #12
 8002402:	b083      	sub	sp, #12
 8002404:	0004      	movs	r4, r0
 8002406:	4680      	mov	r8, r0
 8002408:	9101      	str	r1, [sp, #4]
 800240a:	0058      	lsls	r0, r3, #1
 800240c:	0fe9      	lsrs	r1, r5, #31
 800240e:	4f31      	ldr	r7, [pc, #196]	@ (80024d4 <__gedf2+0xe4>)
 8002410:	0d40      	lsrs	r0, r0, #21
 8002412:	468c      	mov	ip, r1
 8002414:	006e      	lsls	r6, r5, #1
 8002416:	0319      	lsls	r1, r3, #12
 8002418:	4682      	mov	sl, r0
 800241a:	4691      	mov	r9, r2
 800241c:	0d76      	lsrs	r6, r6, #21
 800241e:	0b09      	lsrs	r1, r1, #12
 8002420:	0fd8      	lsrs	r0, r3, #31
 8002422:	42be      	cmp	r6, r7
 8002424:	d01f      	beq.n	8002466 <__gedf2+0x76>
 8002426:	45ba      	cmp	sl, r7
 8002428:	d00f      	beq.n	800244a <__gedf2+0x5a>
 800242a:	2e00      	cmp	r6, #0
 800242c:	d12f      	bne.n	800248e <__gedf2+0x9e>
 800242e:	4655      	mov	r5, sl
 8002430:	9e01      	ldr	r6, [sp, #4]
 8002432:	4334      	orrs	r4, r6
 8002434:	2d00      	cmp	r5, #0
 8002436:	d127      	bne.n	8002488 <__gedf2+0x98>
 8002438:	430a      	orrs	r2, r1
 800243a:	d03a      	beq.n	80024b2 <__gedf2+0xc2>
 800243c:	2c00      	cmp	r4, #0
 800243e:	d145      	bne.n	80024cc <__gedf2+0xdc>
 8002440:	2800      	cmp	r0, #0
 8002442:	d11a      	bne.n	800247a <__gedf2+0x8a>
 8002444:	2001      	movs	r0, #1
 8002446:	4240      	negs	r0, r0
 8002448:	e017      	b.n	800247a <__gedf2+0x8a>
 800244a:	4311      	orrs	r1, r2
 800244c:	d13b      	bne.n	80024c6 <__gedf2+0xd6>
 800244e:	2e00      	cmp	r6, #0
 8002450:	d102      	bne.n	8002458 <__gedf2+0x68>
 8002452:	9f01      	ldr	r7, [sp, #4]
 8002454:	4327      	orrs	r7, r4
 8002456:	d0f3      	beq.n	8002440 <__gedf2+0x50>
 8002458:	4584      	cmp	ip, r0
 800245a:	d109      	bne.n	8002470 <__gedf2+0x80>
 800245c:	4663      	mov	r3, ip
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <__gedf2+0x54>
 8002462:	4660      	mov	r0, ip
 8002464:	e009      	b.n	800247a <__gedf2+0x8a>
 8002466:	9f01      	ldr	r7, [sp, #4]
 8002468:	4327      	orrs	r7, r4
 800246a:	d12c      	bne.n	80024c6 <__gedf2+0xd6>
 800246c:	45b2      	cmp	sl, r6
 800246e:	d024      	beq.n	80024ba <__gedf2+0xca>
 8002470:	4663      	mov	r3, ip
 8002472:	2002      	movs	r0, #2
 8002474:	3b01      	subs	r3, #1
 8002476:	4018      	ands	r0, r3
 8002478:	3801      	subs	r0, #1
 800247a:	b003      	add	sp, #12
 800247c:	bcf0      	pop	{r4, r5, r6, r7}
 800247e:	46bb      	mov	fp, r7
 8002480:	46b2      	mov	sl, r6
 8002482:	46a9      	mov	r9, r5
 8002484:	46a0      	mov	r8, r4
 8002486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002488:	2c00      	cmp	r4, #0
 800248a:	d0d9      	beq.n	8002440 <__gedf2+0x50>
 800248c:	e7e4      	b.n	8002458 <__gedf2+0x68>
 800248e:	4654      	mov	r4, sl
 8002490:	2c00      	cmp	r4, #0
 8002492:	d0ed      	beq.n	8002470 <__gedf2+0x80>
 8002494:	4584      	cmp	ip, r0
 8002496:	d1eb      	bne.n	8002470 <__gedf2+0x80>
 8002498:	4556      	cmp	r6, sl
 800249a:	dce9      	bgt.n	8002470 <__gedf2+0x80>
 800249c:	dbde      	blt.n	800245c <__gedf2+0x6c>
 800249e:	9b01      	ldr	r3, [sp, #4]
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d8e5      	bhi.n	8002470 <__gedf2+0x80>
 80024a4:	d1da      	bne.n	800245c <__gedf2+0x6c>
 80024a6:	45c8      	cmp	r8, r9
 80024a8:	d8e2      	bhi.n	8002470 <__gedf2+0x80>
 80024aa:	2000      	movs	r0, #0
 80024ac:	45c8      	cmp	r8, r9
 80024ae:	d2e4      	bcs.n	800247a <__gedf2+0x8a>
 80024b0:	e7d4      	b.n	800245c <__gedf2+0x6c>
 80024b2:	2000      	movs	r0, #0
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d0e0      	beq.n	800247a <__gedf2+0x8a>
 80024b8:	e7da      	b.n	8002470 <__gedf2+0x80>
 80024ba:	4311      	orrs	r1, r2
 80024bc:	d103      	bne.n	80024c6 <__gedf2+0xd6>
 80024be:	4584      	cmp	ip, r0
 80024c0:	d1d6      	bne.n	8002470 <__gedf2+0x80>
 80024c2:	2000      	movs	r0, #0
 80024c4:	e7d9      	b.n	800247a <__gedf2+0x8a>
 80024c6:	2002      	movs	r0, #2
 80024c8:	4240      	negs	r0, r0
 80024ca:	e7d6      	b.n	800247a <__gedf2+0x8a>
 80024cc:	4584      	cmp	ip, r0
 80024ce:	d0e6      	beq.n	800249e <__gedf2+0xae>
 80024d0:	e7ce      	b.n	8002470 <__gedf2+0x80>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	000007ff 	.word	0x000007ff

080024d8 <__ledf2>:
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024da:	4657      	mov	r7, sl
 80024dc:	464e      	mov	r6, r9
 80024de:	4645      	mov	r5, r8
 80024e0:	46de      	mov	lr, fp
 80024e2:	b5e0      	push	{r5, r6, r7, lr}
 80024e4:	000d      	movs	r5, r1
 80024e6:	030f      	lsls	r7, r1, #12
 80024e8:	0004      	movs	r4, r0
 80024ea:	4680      	mov	r8, r0
 80024ec:	0fe8      	lsrs	r0, r5, #31
 80024ee:	0b39      	lsrs	r1, r7, #12
 80024f0:	4684      	mov	ip, r0
 80024f2:	b083      	sub	sp, #12
 80024f4:	0058      	lsls	r0, r3, #1
 80024f6:	4f30      	ldr	r7, [pc, #192]	@ (80025b8 <__ledf2+0xe0>)
 80024f8:	0d40      	lsrs	r0, r0, #21
 80024fa:	9101      	str	r1, [sp, #4]
 80024fc:	031e      	lsls	r6, r3, #12
 80024fe:	0069      	lsls	r1, r5, #1
 8002500:	4682      	mov	sl, r0
 8002502:	4691      	mov	r9, r2
 8002504:	0d49      	lsrs	r1, r1, #21
 8002506:	0b36      	lsrs	r6, r6, #12
 8002508:	0fd8      	lsrs	r0, r3, #31
 800250a:	42b9      	cmp	r1, r7
 800250c:	d020      	beq.n	8002550 <__ledf2+0x78>
 800250e:	45ba      	cmp	sl, r7
 8002510:	d00f      	beq.n	8002532 <__ledf2+0x5a>
 8002512:	2900      	cmp	r1, #0
 8002514:	d12b      	bne.n	800256e <__ledf2+0x96>
 8002516:	9901      	ldr	r1, [sp, #4]
 8002518:	430c      	orrs	r4, r1
 800251a:	4651      	mov	r1, sl
 800251c:	2900      	cmp	r1, #0
 800251e:	d137      	bne.n	8002590 <__ledf2+0xb8>
 8002520:	4332      	orrs	r2, r6
 8002522:	d038      	beq.n	8002596 <__ledf2+0xbe>
 8002524:	2c00      	cmp	r4, #0
 8002526:	d144      	bne.n	80025b2 <__ledf2+0xda>
 8002528:	2800      	cmp	r0, #0
 800252a:	d119      	bne.n	8002560 <__ledf2+0x88>
 800252c:	2001      	movs	r0, #1
 800252e:	4240      	negs	r0, r0
 8002530:	e016      	b.n	8002560 <__ledf2+0x88>
 8002532:	4316      	orrs	r6, r2
 8002534:	d113      	bne.n	800255e <__ledf2+0x86>
 8002536:	2900      	cmp	r1, #0
 8002538:	d102      	bne.n	8002540 <__ledf2+0x68>
 800253a:	9f01      	ldr	r7, [sp, #4]
 800253c:	4327      	orrs	r7, r4
 800253e:	d0f3      	beq.n	8002528 <__ledf2+0x50>
 8002540:	4584      	cmp	ip, r0
 8002542:	d020      	beq.n	8002586 <__ledf2+0xae>
 8002544:	4663      	mov	r3, ip
 8002546:	2002      	movs	r0, #2
 8002548:	3b01      	subs	r3, #1
 800254a:	4018      	ands	r0, r3
 800254c:	3801      	subs	r0, #1
 800254e:	e007      	b.n	8002560 <__ledf2+0x88>
 8002550:	9f01      	ldr	r7, [sp, #4]
 8002552:	4327      	orrs	r7, r4
 8002554:	d103      	bne.n	800255e <__ledf2+0x86>
 8002556:	458a      	cmp	sl, r1
 8002558:	d1f4      	bne.n	8002544 <__ledf2+0x6c>
 800255a:	4316      	orrs	r6, r2
 800255c:	d01f      	beq.n	800259e <__ledf2+0xc6>
 800255e:	2002      	movs	r0, #2
 8002560:	b003      	add	sp, #12
 8002562:	bcf0      	pop	{r4, r5, r6, r7}
 8002564:	46bb      	mov	fp, r7
 8002566:	46b2      	mov	sl, r6
 8002568:	46a9      	mov	r9, r5
 800256a:	46a0      	mov	r8, r4
 800256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256e:	4654      	mov	r4, sl
 8002570:	2c00      	cmp	r4, #0
 8002572:	d0e7      	beq.n	8002544 <__ledf2+0x6c>
 8002574:	4584      	cmp	ip, r0
 8002576:	d1e5      	bne.n	8002544 <__ledf2+0x6c>
 8002578:	4551      	cmp	r1, sl
 800257a:	dce3      	bgt.n	8002544 <__ledf2+0x6c>
 800257c:	db03      	blt.n	8002586 <__ledf2+0xae>
 800257e:	9b01      	ldr	r3, [sp, #4]
 8002580:	42b3      	cmp	r3, r6
 8002582:	d8df      	bhi.n	8002544 <__ledf2+0x6c>
 8002584:	d00f      	beq.n	80025a6 <__ledf2+0xce>
 8002586:	4663      	mov	r3, ip
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0cf      	beq.n	800252c <__ledf2+0x54>
 800258c:	4660      	mov	r0, ip
 800258e:	e7e7      	b.n	8002560 <__ledf2+0x88>
 8002590:	2c00      	cmp	r4, #0
 8002592:	d0c9      	beq.n	8002528 <__ledf2+0x50>
 8002594:	e7d4      	b.n	8002540 <__ledf2+0x68>
 8002596:	2000      	movs	r0, #0
 8002598:	2c00      	cmp	r4, #0
 800259a:	d0e1      	beq.n	8002560 <__ledf2+0x88>
 800259c:	e7d2      	b.n	8002544 <__ledf2+0x6c>
 800259e:	4584      	cmp	ip, r0
 80025a0:	d1d0      	bne.n	8002544 <__ledf2+0x6c>
 80025a2:	2000      	movs	r0, #0
 80025a4:	e7dc      	b.n	8002560 <__ledf2+0x88>
 80025a6:	45c8      	cmp	r8, r9
 80025a8:	d8cc      	bhi.n	8002544 <__ledf2+0x6c>
 80025aa:	2000      	movs	r0, #0
 80025ac:	45c8      	cmp	r8, r9
 80025ae:	d2d7      	bcs.n	8002560 <__ledf2+0x88>
 80025b0:	e7e9      	b.n	8002586 <__ledf2+0xae>
 80025b2:	4584      	cmp	ip, r0
 80025b4:	d0e3      	beq.n	800257e <__ledf2+0xa6>
 80025b6:	e7c5      	b.n	8002544 <__ledf2+0x6c>
 80025b8:	000007ff 	.word	0x000007ff

080025bc <__aeabi_dmul>:
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	4657      	mov	r7, sl
 80025c0:	46de      	mov	lr, fp
 80025c2:	464e      	mov	r6, r9
 80025c4:	4645      	mov	r5, r8
 80025c6:	b5e0      	push	{r5, r6, r7, lr}
 80025c8:	001f      	movs	r7, r3
 80025ca:	030b      	lsls	r3, r1, #12
 80025cc:	0b1b      	lsrs	r3, r3, #12
 80025ce:	0016      	movs	r6, r2
 80025d0:	469a      	mov	sl, r3
 80025d2:	0fca      	lsrs	r2, r1, #31
 80025d4:	004b      	lsls	r3, r1, #1
 80025d6:	0004      	movs	r4, r0
 80025d8:	4693      	mov	fp, r2
 80025da:	b087      	sub	sp, #28
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0x26>
 80025e0:	e0d5      	b.n	800278e <__aeabi_dmul+0x1d2>
 80025e2:	4abb      	ldr	r2, [pc, #748]	@ (80028d0 <__aeabi_dmul+0x314>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x2e>
 80025e8:	e0f8      	b.n	80027dc <__aeabi_dmul+0x220>
 80025ea:	4651      	mov	r1, sl
 80025ec:	0f42      	lsrs	r2, r0, #29
 80025ee:	00c9      	lsls	r1, r1, #3
 80025f0:	430a      	orrs	r2, r1
 80025f2:	2180      	movs	r1, #128	@ 0x80
 80025f4:	0409      	lsls	r1, r1, #16
 80025f6:	4311      	orrs	r1, r2
 80025f8:	00c2      	lsls	r2, r0, #3
 80025fa:	4691      	mov	r9, r2
 80025fc:	4ab5      	ldr	r2, [pc, #724]	@ (80028d4 <__aeabi_dmul+0x318>)
 80025fe:	468a      	mov	sl, r1
 8002600:	189d      	adds	r5, r3, r2
 8002602:	2300      	movs	r3, #0
 8002604:	4698      	mov	r8, r3
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	033c      	lsls	r4, r7, #12
 800260a:	007b      	lsls	r3, r7, #1
 800260c:	0ffa      	lsrs	r2, r7, #31
 800260e:	0030      	movs	r0, r6
 8002610:	0b24      	lsrs	r4, r4, #12
 8002612:	0d5b      	lsrs	r3, r3, #21
 8002614:	9200      	str	r2, [sp, #0]
 8002616:	d100      	bne.n	800261a <__aeabi_dmul+0x5e>
 8002618:	e096      	b.n	8002748 <__aeabi_dmul+0x18c>
 800261a:	4aad      	ldr	r2, [pc, #692]	@ (80028d0 <__aeabi_dmul+0x314>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d031      	beq.n	8002684 <__aeabi_dmul+0xc8>
 8002620:	0f72      	lsrs	r2, r6, #29
 8002622:	00e4      	lsls	r4, r4, #3
 8002624:	4322      	orrs	r2, r4
 8002626:	2480      	movs	r4, #128	@ 0x80
 8002628:	0424      	lsls	r4, r4, #16
 800262a:	4314      	orrs	r4, r2
 800262c:	4aa9      	ldr	r2, [pc, #676]	@ (80028d4 <__aeabi_dmul+0x318>)
 800262e:	00f0      	lsls	r0, r6, #3
 8002630:	4694      	mov	ip, r2
 8002632:	4463      	add	r3, ip
 8002634:	195b      	adds	r3, r3, r5
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	9201      	str	r2, [sp, #4]
 800263a:	4642      	mov	r2, r8
 800263c:	2600      	movs	r6, #0
 800263e:	2a0a      	cmp	r2, #10
 8002640:	dc42      	bgt.n	80026c8 <__aeabi_dmul+0x10c>
 8002642:	465a      	mov	r2, fp
 8002644:	9900      	ldr	r1, [sp, #0]
 8002646:	404a      	eors	r2, r1
 8002648:	4693      	mov	fp, r2
 800264a:	4642      	mov	r2, r8
 800264c:	2a02      	cmp	r2, #2
 800264e:	dc32      	bgt.n	80026b6 <__aeabi_dmul+0xfa>
 8002650:	3a01      	subs	r2, #1
 8002652:	2a01      	cmp	r2, #1
 8002654:	d900      	bls.n	8002658 <__aeabi_dmul+0x9c>
 8002656:	e149      	b.n	80028ec <__aeabi_dmul+0x330>
 8002658:	2e02      	cmp	r6, #2
 800265a:	d100      	bne.n	800265e <__aeabi_dmul+0xa2>
 800265c:	e0ca      	b.n	80027f4 <__aeabi_dmul+0x238>
 800265e:	2e01      	cmp	r6, #1
 8002660:	d13d      	bne.n	80026de <__aeabi_dmul+0x122>
 8002662:	2300      	movs	r3, #0
 8002664:	2400      	movs	r4, #0
 8002666:	2200      	movs	r2, #0
 8002668:	0010      	movs	r0, r2
 800266a:	465a      	mov	r2, fp
 800266c:	051b      	lsls	r3, r3, #20
 800266e:	4323      	orrs	r3, r4
 8002670:	07d2      	lsls	r2, r2, #31
 8002672:	4313      	orrs	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	b007      	add	sp, #28
 8002678:	bcf0      	pop	{r4, r5, r6, r7}
 800267a:	46bb      	mov	fp, r7
 800267c:	46b2      	mov	sl, r6
 800267e:	46a9      	mov	r9, r5
 8002680:	46a0      	mov	r8, r4
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	4b92      	ldr	r3, [pc, #584]	@ (80028d0 <__aeabi_dmul+0x314>)
 8002686:	4326      	orrs	r6, r4
 8002688:	18eb      	adds	r3, r5, r3
 800268a:	2e00      	cmp	r6, #0
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0xd4>
 800268e:	e0bb      	b.n	8002808 <__aeabi_dmul+0x24c>
 8002690:	2203      	movs	r2, #3
 8002692:	4641      	mov	r1, r8
 8002694:	4311      	orrs	r1, r2
 8002696:	465a      	mov	r2, fp
 8002698:	4688      	mov	r8, r1
 800269a:	9900      	ldr	r1, [sp, #0]
 800269c:	404a      	eors	r2, r1
 800269e:	2180      	movs	r1, #128	@ 0x80
 80026a0:	0109      	lsls	r1, r1, #4
 80026a2:	468c      	mov	ip, r1
 80026a4:	0029      	movs	r1, r5
 80026a6:	4461      	add	r1, ip
 80026a8:	9101      	str	r1, [sp, #4]
 80026aa:	4641      	mov	r1, r8
 80026ac:	290a      	cmp	r1, #10
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dmul+0xf6>
 80026b0:	e233      	b.n	8002b1a <__aeabi_dmul+0x55e>
 80026b2:	4693      	mov	fp, r2
 80026b4:	2603      	movs	r6, #3
 80026b6:	4642      	mov	r2, r8
 80026b8:	2701      	movs	r7, #1
 80026ba:	4097      	lsls	r7, r2
 80026bc:	21a6      	movs	r1, #166	@ 0xa6
 80026be:	003a      	movs	r2, r7
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	400a      	ands	r2, r1
 80026c4:	420f      	tst	r7, r1
 80026c6:	d031      	beq.n	800272c <__aeabi_dmul+0x170>
 80026c8:	9e02      	ldr	r6, [sp, #8]
 80026ca:	2e02      	cmp	r6, #2
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dmul+0x114>
 80026ce:	e235      	b.n	8002b3c <__aeabi_dmul+0x580>
 80026d0:	2e03      	cmp	r6, #3
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dmul+0x11a>
 80026d4:	e1d2      	b.n	8002a7c <__aeabi_dmul+0x4c0>
 80026d6:	4654      	mov	r4, sl
 80026d8:	4648      	mov	r0, r9
 80026da:	2e01      	cmp	r6, #1
 80026dc:	d0c1      	beq.n	8002662 <__aeabi_dmul+0xa6>
 80026de:	9a01      	ldr	r2, [sp, #4]
 80026e0:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <__aeabi_dmul+0x31c>)
 80026e2:	4694      	mov	ip, r2
 80026e4:	4463      	add	r3, ip
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dc00      	bgt.n	80026ec <__aeabi_dmul+0x130>
 80026ea:	e0c0      	b.n	800286e <__aeabi_dmul+0x2b2>
 80026ec:	0742      	lsls	r2, r0, #29
 80026ee:	d009      	beq.n	8002704 <__aeabi_dmul+0x148>
 80026f0:	220f      	movs	r2, #15
 80026f2:	4002      	ands	r2, r0
 80026f4:	2a04      	cmp	r2, #4
 80026f6:	d005      	beq.n	8002704 <__aeabi_dmul+0x148>
 80026f8:	1d02      	adds	r2, r0, #4
 80026fa:	4282      	cmp	r2, r0
 80026fc:	4180      	sbcs	r0, r0
 80026fe:	4240      	negs	r0, r0
 8002700:	1824      	adds	r4, r4, r0
 8002702:	0010      	movs	r0, r2
 8002704:	01e2      	lsls	r2, r4, #7
 8002706:	d506      	bpl.n	8002716 <__aeabi_dmul+0x15a>
 8002708:	4b74      	ldr	r3, [pc, #464]	@ (80028dc <__aeabi_dmul+0x320>)
 800270a:	9a01      	ldr	r2, [sp, #4]
 800270c:	401c      	ands	r4, r3
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	4694      	mov	ip, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4463      	add	r3, ip
 8002716:	4a72      	ldr	r2, [pc, #456]	@ (80028e0 <__aeabi_dmul+0x324>)
 8002718:	4293      	cmp	r3, r2
 800271a:	dc6b      	bgt.n	80027f4 <__aeabi_dmul+0x238>
 800271c:	0762      	lsls	r2, r4, #29
 800271e:	08c0      	lsrs	r0, r0, #3
 8002720:	0264      	lsls	r4, r4, #9
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	4302      	orrs	r2, r0
 8002726:	0b24      	lsrs	r4, r4, #12
 8002728:	0d5b      	lsrs	r3, r3, #21
 800272a:	e79d      	b.n	8002668 <__aeabi_dmul+0xac>
 800272c:	2190      	movs	r1, #144	@ 0x90
 800272e:	0089      	lsls	r1, r1, #2
 8002730:	420f      	tst	r7, r1
 8002732:	d163      	bne.n	80027fc <__aeabi_dmul+0x240>
 8002734:	2288      	movs	r2, #136	@ 0x88
 8002736:	423a      	tst	r2, r7
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x180>
 800273a:	e0d7      	b.n	80028ec <__aeabi_dmul+0x330>
 800273c:	9b00      	ldr	r3, [sp, #0]
 800273e:	46a2      	mov	sl, r4
 8002740:	469b      	mov	fp, r3
 8002742:	4681      	mov	r9, r0
 8002744:	9602      	str	r6, [sp, #8]
 8002746:	e7bf      	b.n	80026c8 <__aeabi_dmul+0x10c>
 8002748:	0023      	movs	r3, r4
 800274a:	4333      	orrs	r3, r6
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x194>
 800274e:	e07f      	b.n	8002850 <__aeabi_dmul+0x294>
 8002750:	2c00      	cmp	r4, #0
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x19a>
 8002754:	e1ad      	b.n	8002ab2 <__aeabi_dmul+0x4f6>
 8002756:	0020      	movs	r0, r4
 8002758:	f000 ff10 	bl	800357c <__clzsi2>
 800275c:	0002      	movs	r2, r0
 800275e:	0003      	movs	r3, r0
 8002760:	3a0b      	subs	r2, #11
 8002762:	201d      	movs	r0, #29
 8002764:	0019      	movs	r1, r3
 8002766:	1a82      	subs	r2, r0, r2
 8002768:	0030      	movs	r0, r6
 800276a:	3908      	subs	r1, #8
 800276c:	40d0      	lsrs	r0, r2
 800276e:	408c      	lsls	r4, r1
 8002770:	4304      	orrs	r4, r0
 8002772:	0030      	movs	r0, r6
 8002774:	4088      	lsls	r0, r1
 8002776:	4a5b      	ldr	r2, [pc, #364]	@ (80028e4 <__aeabi_dmul+0x328>)
 8002778:	1aeb      	subs	r3, r5, r3
 800277a:	4694      	mov	ip, r2
 800277c:	4463      	add	r3, ip
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	9201      	str	r2, [sp, #4]
 8002782:	4642      	mov	r2, r8
 8002784:	2600      	movs	r6, #0
 8002786:	2a0a      	cmp	r2, #10
 8002788:	dc00      	bgt.n	800278c <__aeabi_dmul+0x1d0>
 800278a:	e75a      	b.n	8002642 <__aeabi_dmul+0x86>
 800278c:	e79c      	b.n	80026c8 <__aeabi_dmul+0x10c>
 800278e:	4653      	mov	r3, sl
 8002790:	4303      	orrs	r3, r0
 8002792:	4699      	mov	r9, r3
 8002794:	d054      	beq.n	8002840 <__aeabi_dmul+0x284>
 8002796:	4653      	mov	r3, sl
 8002798:	2b00      	cmp	r3, #0
 800279a:	d100      	bne.n	800279e <__aeabi_dmul+0x1e2>
 800279c:	e177      	b.n	8002a8e <__aeabi_dmul+0x4d2>
 800279e:	4650      	mov	r0, sl
 80027a0:	f000 feec 	bl	800357c <__clzsi2>
 80027a4:	230b      	movs	r3, #11
 80027a6:	425b      	negs	r3, r3
 80027a8:	469c      	mov	ip, r3
 80027aa:	0002      	movs	r2, r0
 80027ac:	4484      	add	ip, r0
 80027ae:	0011      	movs	r1, r2
 80027b0:	4650      	mov	r0, sl
 80027b2:	3908      	subs	r1, #8
 80027b4:	4088      	lsls	r0, r1
 80027b6:	231d      	movs	r3, #29
 80027b8:	4680      	mov	r8, r0
 80027ba:	4660      	mov	r0, ip
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	0020      	movs	r0, r4
 80027c0:	40d8      	lsrs	r0, r3
 80027c2:	0003      	movs	r3, r0
 80027c4:	4640      	mov	r0, r8
 80027c6:	4303      	orrs	r3, r0
 80027c8:	469a      	mov	sl, r3
 80027ca:	0023      	movs	r3, r4
 80027cc:	408b      	lsls	r3, r1
 80027ce:	4699      	mov	r9, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	4d44      	ldr	r5, [pc, #272]	@ (80028e4 <__aeabi_dmul+0x328>)
 80027d4:	4698      	mov	r8, r3
 80027d6:	1aad      	subs	r5, r5, r2
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	e715      	b.n	8002608 <__aeabi_dmul+0x4c>
 80027dc:	4652      	mov	r2, sl
 80027de:	4302      	orrs	r2, r0
 80027e0:	4691      	mov	r9, r2
 80027e2:	d126      	bne.n	8002832 <__aeabi_dmul+0x276>
 80027e4:	2200      	movs	r2, #0
 80027e6:	001d      	movs	r5, r3
 80027e8:	2302      	movs	r3, #2
 80027ea:	4692      	mov	sl, r2
 80027ec:	3208      	adds	r2, #8
 80027ee:	4690      	mov	r8, r2
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	e709      	b.n	8002608 <__aeabi_dmul+0x4c>
 80027f4:	2400      	movs	r4, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <__aeabi_dmul+0x314>)
 80027fa:	e735      	b.n	8002668 <__aeabi_dmul+0xac>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2480      	movs	r4, #128	@ 0x80
 8002800:	469b      	mov	fp, r3
 8002802:	0324      	lsls	r4, r4, #12
 8002804:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <__aeabi_dmul+0x314>)
 8002806:	e72f      	b.n	8002668 <__aeabi_dmul+0xac>
 8002808:	2202      	movs	r2, #2
 800280a:	4641      	mov	r1, r8
 800280c:	4311      	orrs	r1, r2
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	4694      	mov	ip, r2
 8002814:	002a      	movs	r2, r5
 8002816:	4462      	add	r2, ip
 8002818:	4688      	mov	r8, r1
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	290a      	cmp	r1, #10
 800281e:	dd00      	ble.n	8002822 <__aeabi_dmul+0x266>
 8002820:	e752      	b.n	80026c8 <__aeabi_dmul+0x10c>
 8002822:	465a      	mov	r2, fp
 8002824:	2000      	movs	r0, #0
 8002826:	9900      	ldr	r1, [sp, #0]
 8002828:	0004      	movs	r4, r0
 800282a:	404a      	eors	r2, r1
 800282c:	4693      	mov	fp, r2
 800282e:	2602      	movs	r6, #2
 8002830:	e70b      	b.n	800264a <__aeabi_dmul+0x8e>
 8002832:	220c      	movs	r2, #12
 8002834:	001d      	movs	r5, r3
 8002836:	2303      	movs	r3, #3
 8002838:	4681      	mov	r9, r0
 800283a:	4690      	mov	r8, r2
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	e6e3      	b.n	8002608 <__aeabi_dmul+0x4c>
 8002840:	2300      	movs	r3, #0
 8002842:	469a      	mov	sl, r3
 8002844:	3304      	adds	r3, #4
 8002846:	4698      	mov	r8, r3
 8002848:	3b03      	subs	r3, #3
 800284a:	2500      	movs	r5, #0
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	e6db      	b.n	8002608 <__aeabi_dmul+0x4c>
 8002850:	4642      	mov	r2, r8
 8002852:	3301      	adds	r3, #1
 8002854:	431a      	orrs	r2, r3
 8002856:	002b      	movs	r3, r5
 8002858:	4690      	mov	r8, r2
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	9201      	str	r2, [sp, #4]
 800285e:	4642      	mov	r2, r8
 8002860:	2400      	movs	r4, #0
 8002862:	2000      	movs	r0, #0
 8002864:	2601      	movs	r6, #1
 8002866:	2a0a      	cmp	r2, #10
 8002868:	dc00      	bgt.n	800286c <__aeabi_dmul+0x2b0>
 800286a:	e6ea      	b.n	8002642 <__aeabi_dmul+0x86>
 800286c:	e72c      	b.n	80026c8 <__aeabi_dmul+0x10c>
 800286e:	2201      	movs	r2, #1
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	2a38      	cmp	r2, #56	@ 0x38
 8002874:	dd00      	ble.n	8002878 <__aeabi_dmul+0x2bc>
 8002876:	e6f4      	b.n	8002662 <__aeabi_dmul+0xa6>
 8002878:	2a1f      	cmp	r2, #31
 800287a:	dc00      	bgt.n	800287e <__aeabi_dmul+0x2c2>
 800287c:	e12a      	b.n	8002ad4 <__aeabi_dmul+0x518>
 800287e:	211f      	movs	r1, #31
 8002880:	4249      	negs	r1, r1
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	0021      	movs	r1, r4
 8002886:	40d9      	lsrs	r1, r3
 8002888:	000b      	movs	r3, r1
 800288a:	2a20      	cmp	r2, #32
 800288c:	d005      	beq.n	800289a <__aeabi_dmul+0x2de>
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <__aeabi_dmul+0x32c>)
 8002890:	9d01      	ldr	r5, [sp, #4]
 8002892:	4694      	mov	ip, r2
 8002894:	4465      	add	r5, ip
 8002896:	40ac      	lsls	r4, r5
 8002898:	4320      	orrs	r0, r4
 800289a:	1e42      	subs	r2, r0, #1
 800289c:	4190      	sbcs	r0, r2
 800289e:	4318      	orrs	r0, r3
 80028a0:	2307      	movs	r3, #7
 80028a2:	0019      	movs	r1, r3
 80028a4:	2400      	movs	r4, #0
 80028a6:	4001      	ands	r1, r0
 80028a8:	4203      	tst	r3, r0
 80028aa:	d00c      	beq.n	80028c6 <__aeabi_dmul+0x30a>
 80028ac:	230f      	movs	r3, #15
 80028ae:	4003      	ands	r3, r0
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dmul+0x2fa>
 80028b4:	e140      	b.n	8002b38 <__aeabi_dmul+0x57c>
 80028b6:	1d03      	adds	r3, r0, #4
 80028b8:	4283      	cmp	r3, r0
 80028ba:	41a4      	sbcs	r4, r4
 80028bc:	0018      	movs	r0, r3
 80028be:	4264      	negs	r4, r4
 80028c0:	0761      	lsls	r1, r4, #29
 80028c2:	0264      	lsls	r4, r4, #9
 80028c4:	0b24      	lsrs	r4, r4, #12
 80028c6:	08c2      	lsrs	r2, r0, #3
 80028c8:	2300      	movs	r3, #0
 80028ca:	430a      	orrs	r2, r1
 80028cc:	e6cc      	b.n	8002668 <__aeabi_dmul+0xac>
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	000007ff 	.word	0x000007ff
 80028d4:	fffffc01 	.word	0xfffffc01
 80028d8:	000003ff 	.word	0x000003ff
 80028dc:	feffffff 	.word	0xfeffffff
 80028e0:	000007fe 	.word	0x000007fe
 80028e4:	fffffc0d 	.word	0xfffffc0d
 80028e8:	0000043e 	.word	0x0000043e
 80028ec:	4649      	mov	r1, r9
 80028ee:	464a      	mov	r2, r9
 80028f0:	0409      	lsls	r1, r1, #16
 80028f2:	0c09      	lsrs	r1, r1, #16
 80028f4:	000d      	movs	r5, r1
 80028f6:	0c16      	lsrs	r6, r2, #16
 80028f8:	0c02      	lsrs	r2, r0, #16
 80028fa:	0400      	lsls	r0, r0, #16
 80028fc:	0c00      	lsrs	r0, r0, #16
 80028fe:	4345      	muls	r5, r0
 8002900:	46ac      	mov	ip, r5
 8002902:	0005      	movs	r5, r0
 8002904:	4375      	muls	r5, r6
 8002906:	46a8      	mov	r8, r5
 8002908:	0015      	movs	r5, r2
 800290a:	000f      	movs	r7, r1
 800290c:	4375      	muls	r5, r6
 800290e:	9200      	str	r2, [sp, #0]
 8002910:	9502      	str	r5, [sp, #8]
 8002912:	002a      	movs	r2, r5
 8002914:	9d00      	ldr	r5, [sp, #0]
 8002916:	436f      	muls	r7, r5
 8002918:	4665      	mov	r5, ip
 800291a:	0c2d      	lsrs	r5, r5, #16
 800291c:	46a9      	mov	r9, r5
 800291e:	4447      	add	r7, r8
 8002920:	444f      	add	r7, r9
 8002922:	45b8      	cmp	r8, r7
 8002924:	d905      	bls.n	8002932 <__aeabi_dmul+0x376>
 8002926:	0015      	movs	r5, r2
 8002928:	2280      	movs	r2, #128	@ 0x80
 800292a:	0252      	lsls	r2, r2, #9
 800292c:	4690      	mov	r8, r2
 800292e:	4445      	add	r5, r8
 8002930:	9502      	str	r5, [sp, #8]
 8002932:	0c3d      	lsrs	r5, r7, #16
 8002934:	9503      	str	r5, [sp, #12]
 8002936:	4665      	mov	r5, ip
 8002938:	042d      	lsls	r5, r5, #16
 800293a:	043f      	lsls	r7, r7, #16
 800293c:	0c2d      	lsrs	r5, r5, #16
 800293e:	46ac      	mov	ip, r5
 8002940:	003d      	movs	r5, r7
 8002942:	4465      	add	r5, ip
 8002944:	9504      	str	r5, [sp, #16]
 8002946:	0c25      	lsrs	r5, r4, #16
 8002948:	0424      	lsls	r4, r4, #16
 800294a:	0c24      	lsrs	r4, r4, #16
 800294c:	46ac      	mov	ip, r5
 800294e:	0025      	movs	r5, r4
 8002950:	4375      	muls	r5, r6
 8002952:	46a8      	mov	r8, r5
 8002954:	4665      	mov	r5, ip
 8002956:	000f      	movs	r7, r1
 8002958:	4369      	muls	r1, r5
 800295a:	4441      	add	r1, r8
 800295c:	4689      	mov	r9, r1
 800295e:	4367      	muls	r7, r4
 8002960:	0c39      	lsrs	r1, r7, #16
 8002962:	4449      	add	r1, r9
 8002964:	436e      	muls	r6, r5
 8002966:	4588      	cmp	r8, r1
 8002968:	d903      	bls.n	8002972 <__aeabi_dmul+0x3b6>
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	0252      	lsls	r2, r2, #9
 800296e:	4690      	mov	r8, r2
 8002970:	4446      	add	r6, r8
 8002972:	0c0d      	lsrs	r5, r1, #16
 8002974:	46a8      	mov	r8, r5
 8002976:	0035      	movs	r5, r6
 8002978:	4445      	add	r5, r8
 800297a:	9505      	str	r5, [sp, #20]
 800297c:	9d03      	ldr	r5, [sp, #12]
 800297e:	043f      	lsls	r7, r7, #16
 8002980:	46a8      	mov	r8, r5
 8002982:	0c3f      	lsrs	r7, r7, #16
 8002984:	0409      	lsls	r1, r1, #16
 8002986:	19c9      	adds	r1, r1, r7
 8002988:	4488      	add	r8, r1
 800298a:	4645      	mov	r5, r8
 800298c:	9503      	str	r5, [sp, #12]
 800298e:	4655      	mov	r5, sl
 8002990:	042e      	lsls	r6, r5, #16
 8002992:	0c36      	lsrs	r6, r6, #16
 8002994:	0c2f      	lsrs	r7, r5, #16
 8002996:	0035      	movs	r5, r6
 8002998:	4345      	muls	r5, r0
 800299a:	4378      	muls	r0, r7
 800299c:	4681      	mov	r9, r0
 800299e:	0038      	movs	r0, r7
 80029a0:	46a8      	mov	r8, r5
 80029a2:	0c2d      	lsrs	r5, r5, #16
 80029a4:	46aa      	mov	sl, r5
 80029a6:	9a00      	ldr	r2, [sp, #0]
 80029a8:	4350      	muls	r0, r2
 80029aa:	4372      	muls	r2, r6
 80029ac:	444a      	add	r2, r9
 80029ae:	4452      	add	r2, sl
 80029b0:	4591      	cmp	r9, r2
 80029b2:	d903      	bls.n	80029bc <__aeabi_dmul+0x400>
 80029b4:	2580      	movs	r5, #128	@ 0x80
 80029b6:	026d      	lsls	r5, r5, #9
 80029b8:	46a9      	mov	r9, r5
 80029ba:	4448      	add	r0, r9
 80029bc:	0c15      	lsrs	r5, r2, #16
 80029be:	46a9      	mov	r9, r5
 80029c0:	4645      	mov	r5, r8
 80029c2:	042d      	lsls	r5, r5, #16
 80029c4:	0c2d      	lsrs	r5, r5, #16
 80029c6:	46a8      	mov	r8, r5
 80029c8:	4665      	mov	r5, ip
 80029ca:	437d      	muls	r5, r7
 80029cc:	0412      	lsls	r2, r2, #16
 80029ce:	4448      	add	r0, r9
 80029d0:	4490      	add	r8, r2
 80029d2:	46a9      	mov	r9, r5
 80029d4:	0032      	movs	r2, r6
 80029d6:	4665      	mov	r5, ip
 80029d8:	4362      	muls	r2, r4
 80029da:	436e      	muls	r6, r5
 80029dc:	437c      	muls	r4, r7
 80029de:	0c17      	lsrs	r7, r2, #16
 80029e0:	1936      	adds	r6, r6, r4
 80029e2:	19bf      	adds	r7, r7, r6
 80029e4:	42bc      	cmp	r4, r7
 80029e6:	d903      	bls.n	80029f0 <__aeabi_dmul+0x434>
 80029e8:	2480      	movs	r4, #128	@ 0x80
 80029ea:	0264      	lsls	r4, r4, #9
 80029ec:	46a4      	mov	ip, r4
 80029ee:	44e1      	add	r9, ip
 80029f0:	9c02      	ldr	r4, [sp, #8]
 80029f2:	9e03      	ldr	r6, [sp, #12]
 80029f4:	46a4      	mov	ip, r4
 80029f6:	9d05      	ldr	r5, [sp, #20]
 80029f8:	4466      	add	r6, ip
 80029fa:	428e      	cmp	r6, r1
 80029fc:	4189      	sbcs	r1, r1
 80029fe:	46ac      	mov	ip, r5
 8002a00:	0412      	lsls	r2, r2, #16
 8002a02:	043c      	lsls	r4, r7, #16
 8002a04:	0c12      	lsrs	r2, r2, #16
 8002a06:	18a2      	adds	r2, r4, r2
 8002a08:	4462      	add	r2, ip
 8002a0a:	4249      	negs	r1, r1
 8002a0c:	1854      	adds	r4, r2, r1
 8002a0e:	4446      	add	r6, r8
 8002a10:	46a4      	mov	ip, r4
 8002a12:	4546      	cmp	r6, r8
 8002a14:	41a4      	sbcs	r4, r4
 8002a16:	4682      	mov	sl, r0
 8002a18:	4264      	negs	r4, r4
 8002a1a:	46a0      	mov	r8, r4
 8002a1c:	42aa      	cmp	r2, r5
 8002a1e:	4192      	sbcs	r2, r2
 8002a20:	458c      	cmp	ip, r1
 8002a22:	4189      	sbcs	r1, r1
 8002a24:	44e2      	add	sl, ip
 8002a26:	44d0      	add	r8, sl
 8002a28:	4249      	negs	r1, r1
 8002a2a:	4252      	negs	r2, r2
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	45a0      	cmp	r8, r4
 8002a30:	41a4      	sbcs	r4, r4
 8002a32:	4582      	cmp	sl, r0
 8002a34:	4189      	sbcs	r1, r1
 8002a36:	4264      	negs	r4, r4
 8002a38:	4249      	negs	r1, r1
 8002a3a:	430c      	orrs	r4, r1
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	0c3f      	lsrs	r7, r7, #16
 8002a40:	19d2      	adds	r2, r2, r7
 8002a42:	1912      	adds	r2, r2, r4
 8002a44:	0dcc      	lsrs	r4, r1, #23
 8002a46:	9904      	ldr	r1, [sp, #16]
 8002a48:	0270      	lsls	r0, r6, #9
 8002a4a:	4308      	orrs	r0, r1
 8002a4c:	1e41      	subs	r1, r0, #1
 8002a4e:	4188      	sbcs	r0, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	444a      	add	r2, r9
 8002a54:	0df6      	lsrs	r6, r6, #23
 8002a56:	0252      	lsls	r2, r2, #9
 8002a58:	4330      	orrs	r0, r6
 8002a5a:	0249      	lsls	r1, r1, #9
 8002a5c:	4314      	orrs	r4, r2
 8002a5e:	4308      	orrs	r0, r1
 8002a60:	01d2      	lsls	r2, r2, #7
 8002a62:	d535      	bpl.n	8002ad0 <__aeabi_dmul+0x514>
 8002a64:	2201      	movs	r2, #1
 8002a66:	0843      	lsrs	r3, r0, #1
 8002a68:	4002      	ands	r2, r0
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	07e0      	lsls	r0, r4, #31
 8002a6e:	4318      	orrs	r0, r3
 8002a70:	0864      	lsrs	r4, r4, #1
 8002a72:	e634      	b.n	80026de <__aeabi_dmul+0x122>
 8002a74:	9b00      	ldr	r3, [sp, #0]
 8002a76:	46a2      	mov	sl, r4
 8002a78:	469b      	mov	fp, r3
 8002a7a:	4681      	mov	r9, r0
 8002a7c:	2480      	movs	r4, #128	@ 0x80
 8002a7e:	4653      	mov	r3, sl
 8002a80:	0324      	lsls	r4, r4, #12
 8002a82:	431c      	orrs	r4, r3
 8002a84:	0324      	lsls	r4, r4, #12
 8002a86:	464a      	mov	r2, r9
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002a8a:	0b24      	lsrs	r4, r4, #12
 8002a8c:	e5ec      	b.n	8002668 <__aeabi_dmul+0xac>
 8002a8e:	f000 fd75 	bl	800357c <__clzsi2>
 8002a92:	2315      	movs	r3, #21
 8002a94:	469c      	mov	ip, r3
 8002a96:	4484      	add	ip, r0
 8002a98:	0002      	movs	r2, r0
 8002a9a:	4663      	mov	r3, ip
 8002a9c:	3220      	adds	r2, #32
 8002a9e:	2b1c      	cmp	r3, #28
 8002aa0:	dc00      	bgt.n	8002aa4 <__aeabi_dmul+0x4e8>
 8002aa2:	e684      	b.n	80027ae <__aeabi_dmul+0x1f2>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4699      	mov	r9, r3
 8002aa8:	0023      	movs	r3, r4
 8002aaa:	3808      	subs	r0, #8
 8002aac:	4083      	lsls	r3, r0
 8002aae:	469a      	mov	sl, r3
 8002ab0:	e68e      	b.n	80027d0 <__aeabi_dmul+0x214>
 8002ab2:	f000 fd63 	bl	800357c <__clzsi2>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	0003      	movs	r3, r0
 8002aba:	3215      	adds	r2, #21
 8002abc:	3320      	adds	r3, #32
 8002abe:	2a1c      	cmp	r2, #28
 8002ac0:	dc00      	bgt.n	8002ac4 <__aeabi_dmul+0x508>
 8002ac2:	e64e      	b.n	8002762 <__aeabi_dmul+0x1a6>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	0034      	movs	r4, r6
 8002ac8:	3a08      	subs	r2, #8
 8002aca:	2000      	movs	r0, #0
 8002acc:	4094      	lsls	r4, r2
 8002ace:	e652      	b.n	8002776 <__aeabi_dmul+0x1ba>
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	e604      	b.n	80026de <__aeabi_dmul+0x122>
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <__aeabi_dmul+0x58c>)
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	469c      	mov	ip, r3
 8002ada:	0003      	movs	r3, r0
 8002adc:	9d01      	ldr	r5, [sp, #4]
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4465      	add	r5, ip
 8002ae2:	40a9      	lsls	r1, r5
 8002ae4:	4319      	orrs	r1, r3
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	40ab      	lsls	r3, r5
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	4183      	sbcs	r3, r0
 8002aee:	4319      	orrs	r1, r3
 8002af0:	0008      	movs	r0, r1
 8002af2:	40d4      	lsrs	r4, r2
 8002af4:	074b      	lsls	r3, r1, #29
 8002af6:	d009      	beq.n	8002b0c <__aeabi_dmul+0x550>
 8002af8:	230f      	movs	r3, #15
 8002afa:	400b      	ands	r3, r1
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dmul+0x550>
 8002b00:	1d0b      	adds	r3, r1, #4
 8002b02:	428b      	cmp	r3, r1
 8002b04:	4180      	sbcs	r0, r0
 8002b06:	4240      	negs	r0, r0
 8002b08:	1824      	adds	r4, r4, r0
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	0223      	lsls	r3, r4, #8
 8002b0e:	d400      	bmi.n	8002b12 <__aeabi_dmul+0x556>
 8002b10:	e6d6      	b.n	80028c0 <__aeabi_dmul+0x304>
 8002b12:	2301      	movs	r3, #1
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e5a6      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b1a:	290f      	cmp	r1, #15
 8002b1c:	d1aa      	bne.n	8002a74 <__aeabi_dmul+0x4b8>
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	4652      	mov	r2, sl
 8002b22:	031b      	lsls	r3, r3, #12
 8002b24:	421a      	tst	r2, r3
 8002b26:	d0a9      	beq.n	8002a7c <__aeabi_dmul+0x4c0>
 8002b28:	421c      	tst	r4, r3
 8002b2a:	d1a7      	bne.n	8002a7c <__aeabi_dmul+0x4c0>
 8002b2c:	431c      	orrs	r4, r3
 8002b2e:	9b00      	ldr	r3, [sp, #0]
 8002b30:	0002      	movs	r2, r0
 8002b32:	469b      	mov	fp, r3
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002b36:	e597      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b38:	2400      	movs	r4, #0
 8002b3a:	e6c1      	b.n	80028c0 <__aeabi_dmul+0x304>
 8002b3c:	2400      	movs	r4, #0
 8002b3e:	4b01      	ldr	r3, [pc, #4]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002b40:	0022      	movs	r2, r4
 8002b42:	e591      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b44:	000007ff 	.word	0x000007ff
 8002b48:	0000041e 	.word	0x0000041e

08002b4c <__aeabi_dsub>:
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	464e      	mov	r6, r9
 8002b50:	4645      	mov	r5, r8
 8002b52:	46de      	mov	lr, fp
 8002b54:	4657      	mov	r7, sl
 8002b56:	b5e0      	push	{r5, r6, r7, lr}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	9000      	str	r0, [sp, #0]
 8002b5c:	9101      	str	r1, [sp, #4]
 8002b5e:	030c      	lsls	r4, r1, #12
 8002b60:	004f      	lsls	r7, r1, #1
 8002b62:	0fce      	lsrs	r6, r1, #31
 8002b64:	0a61      	lsrs	r1, r4, #9
 8002b66:	9c00      	ldr	r4, [sp, #0]
 8002b68:	46b0      	mov	r8, r6
 8002b6a:	0f64      	lsrs	r4, r4, #29
 8002b6c:	430c      	orrs	r4, r1
 8002b6e:	9900      	ldr	r1, [sp, #0]
 8002b70:	0d7f      	lsrs	r7, r7, #21
 8002b72:	00c8      	lsls	r0, r1, #3
 8002b74:	0011      	movs	r1, r2
 8002b76:	001a      	movs	r2, r3
 8002b78:	031b      	lsls	r3, r3, #12
 8002b7a:	469c      	mov	ip, r3
 8002b7c:	9100      	str	r1, [sp, #0]
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	0051      	lsls	r1, r2, #1
 8002b82:	0d4b      	lsrs	r3, r1, #21
 8002b84:	4699      	mov	r9, r3
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	9d00      	ldr	r5, [sp, #0]
 8002b8a:	0fd9      	lsrs	r1, r3, #31
 8002b8c:	4663      	mov	r3, ip
 8002b8e:	0f6a      	lsrs	r2, r5, #29
 8002b90:	0a5b      	lsrs	r3, r3, #9
 8002b92:	4313      	orrs	r3, r2
 8002b94:	00ea      	lsls	r2, r5, #3
 8002b96:	4694      	mov	ip, r2
 8002b98:	4693      	mov	fp, r2
 8002b9a:	4ac1      	ldr	r2, [pc, #772]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002b9c:	9003      	str	r0, [sp, #12]
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	4591      	cmp	r9, r2
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x5a>
 8002ba4:	e0cd      	b.n	8002d42 <__aeabi_dsub+0x1f6>
 8002ba6:	2501      	movs	r5, #1
 8002ba8:	4069      	eors	r1, r5
 8002baa:	464d      	mov	r5, r9
 8002bac:	1b7d      	subs	r5, r7, r5
 8002bae:	46aa      	mov	sl, r5
 8002bb0:	428e      	cmp	r6, r1
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x6a>
 8002bb4:	e080      	b.n	8002cb8 <__aeabi_dsub+0x16c>
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	dc00      	bgt.n	8002bbc <__aeabi_dsub+0x70>
 8002bba:	e335      	b.n	8003228 <__aeabi_dsub+0x6dc>
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	2900      	cmp	r1, #0
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x78>
 8002bc2:	e0df      	b.n	8002d84 <__aeabi_dsub+0x238>
 8002bc4:	4297      	cmp	r7, r2
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x7e>
 8002bc8:	e194      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002bca:	4652      	mov	r2, sl
 8002bcc:	2501      	movs	r5, #1
 8002bce:	2a38      	cmp	r2, #56	@ 0x38
 8002bd0:	dc19      	bgt.n	8002c06 <__aeabi_dsub+0xba>
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	9b02      	ldr	r3, [sp, #8]
 8002bd6:	0412      	lsls	r2, r2, #16
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	4652      	mov	r2, sl
 8002bde:	2a1f      	cmp	r2, #31
 8002be0:	dd00      	ble.n	8002be4 <__aeabi_dsub+0x98>
 8002be2:	e1e3      	b.n	8002fac <__aeabi_dsub+0x460>
 8002be4:	4653      	mov	r3, sl
 8002be6:	2220      	movs	r2, #32
 8002be8:	4661      	mov	r1, ip
 8002bea:	9d02      	ldr	r5, [sp, #8]
 8002bec:	1ad2      	subs	r2, r2, r3
 8002bee:	4095      	lsls	r5, r2
 8002bf0:	40d9      	lsrs	r1, r3
 8002bf2:	430d      	orrs	r5, r1
 8002bf4:	4661      	mov	r1, ip
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	1e51      	subs	r1, r2, #1
 8002bfc:	418a      	sbcs	r2, r1
 8002bfe:	4315      	orrs	r5, r2
 8002c00:	9a02      	ldr	r2, [sp, #8]
 8002c02:	40da      	lsrs	r2, r3
 8002c04:	1aa4      	subs	r4, r4, r2
 8002c06:	1b45      	subs	r5, r0, r5
 8002c08:	42a8      	cmp	r0, r5
 8002c0a:	4180      	sbcs	r0, r0
 8002c0c:	4240      	negs	r0, r0
 8002c0e:	1a24      	subs	r4, r4, r0
 8002c10:	0223      	lsls	r3, r4, #8
 8002c12:	d400      	bmi.n	8002c16 <__aeabi_dsub+0xca>
 8002c14:	e13d      	b.n	8002e92 <__aeabi_dsub+0x346>
 8002c16:	0264      	lsls	r4, r4, #9
 8002c18:	0a64      	lsrs	r4, r4, #9
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d100      	bne.n	8002c20 <__aeabi_dsub+0xd4>
 8002c1e:	e147      	b.n	8002eb0 <__aeabi_dsub+0x364>
 8002c20:	0020      	movs	r0, r4
 8002c22:	f000 fcab 	bl	800357c <__clzsi2>
 8002c26:	0003      	movs	r3, r0
 8002c28:	3b08      	subs	r3, #8
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	1aca      	subs	r2, r1, r3
 8002c30:	40d0      	lsrs	r0, r2
 8002c32:	409c      	lsls	r4, r3
 8002c34:	0002      	movs	r2, r0
 8002c36:	409d      	lsls	r5, r3
 8002c38:	4322      	orrs	r2, r4
 8002c3a:	429f      	cmp	r7, r3
 8002c3c:	dd00      	ble.n	8002c40 <__aeabi_dsub+0xf4>
 8002c3e:	e177      	b.n	8002f30 <__aeabi_dsub+0x3e4>
 8002c40:	1bd8      	subs	r0, r3, r7
 8002c42:	3001      	adds	r0, #1
 8002c44:	1a09      	subs	r1, r1, r0
 8002c46:	002c      	movs	r4, r5
 8002c48:	408d      	lsls	r5, r1
 8002c4a:	40c4      	lsrs	r4, r0
 8002c4c:	1e6b      	subs	r3, r5, #1
 8002c4e:	419d      	sbcs	r5, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	40c2      	lsrs	r2, r0
 8002c54:	408b      	lsls	r3, r1
 8002c56:	4325      	orrs	r5, r4
 8002c58:	2700      	movs	r7, #0
 8002c5a:	0014      	movs	r4, r2
 8002c5c:	431d      	orrs	r5, r3
 8002c5e:	076b      	lsls	r3, r5, #29
 8002c60:	d009      	beq.n	8002c76 <__aeabi_dsub+0x12a>
 8002c62:	230f      	movs	r3, #15
 8002c64:	402b      	ands	r3, r5
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d005      	beq.n	8002c76 <__aeabi_dsub+0x12a>
 8002c6a:	1d2b      	adds	r3, r5, #4
 8002c6c:	42ab      	cmp	r3, r5
 8002c6e:	41ad      	sbcs	r5, r5
 8002c70:	426d      	negs	r5, r5
 8002c72:	1964      	adds	r4, r4, r5
 8002c74:	001d      	movs	r5, r3
 8002c76:	0223      	lsls	r3, r4, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x130>
 8002c7a:	e140      	b.n	8002efe <__aeabi_dsub+0x3b2>
 8002c7c:	4a88      	ldr	r2, [pc, #544]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002c7e:	3701      	adds	r7, #1
 8002c80:	4297      	cmp	r7, r2
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x13a>
 8002c84:	e101      	b.n	8002e8a <__aeabi_dsub+0x33e>
 8002c86:	2601      	movs	r6, #1
 8002c88:	4643      	mov	r3, r8
 8002c8a:	4986      	ldr	r1, [pc, #536]	@ (8002ea4 <__aeabi_dsub+0x358>)
 8002c8c:	08ed      	lsrs	r5, r5, #3
 8002c8e:	4021      	ands	r1, r4
 8002c90:	074a      	lsls	r2, r1, #29
 8002c92:	432a      	orrs	r2, r5
 8002c94:	057c      	lsls	r4, r7, #21
 8002c96:	024d      	lsls	r5, r1, #9
 8002c98:	0b2d      	lsrs	r5, r5, #12
 8002c9a:	0d64      	lsrs	r4, r4, #21
 8002c9c:	401e      	ands	r6, r3
 8002c9e:	0524      	lsls	r4, r4, #20
 8002ca0:	432c      	orrs	r4, r5
 8002ca2:	07f6      	lsls	r6, r6, #31
 8002ca4:	4334      	orrs	r4, r6
 8002ca6:	0010      	movs	r0, r2
 8002ca8:	0021      	movs	r1, r4
 8002caa:	b005      	add	sp, #20
 8002cac:	bcf0      	pop	{r4, r5, r6, r7}
 8002cae:	46bb      	mov	fp, r7
 8002cb0:	46b2      	mov	sl, r6
 8002cb2:	46a9      	mov	r9, r5
 8002cb4:	46a0      	mov	r8, r4
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	2d00      	cmp	r5, #0
 8002cba:	dc00      	bgt.n	8002cbe <__aeabi_dsub+0x172>
 8002cbc:	e2d0      	b.n	8003260 <__aeabi_dsub+0x714>
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d000      	beq.n	8002cc6 <__aeabi_dsub+0x17a>
 8002cc4:	e0d4      	b.n	8002e70 <__aeabi_dsub+0x324>
 8002cc6:	4661      	mov	r1, ip
 8002cc8:	9b02      	ldr	r3, [sp, #8]
 8002cca:	4319      	orrs	r1, r3
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dsub+0x184>
 8002cce:	e12b      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002cd0:	1e69      	subs	r1, r5, #1
 8002cd2:	2d01      	cmp	r5, #1
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x18c>
 8002cd6:	e1d9      	b.n	800308c <__aeabi_dsub+0x540>
 8002cd8:	4295      	cmp	r5, r2
 8002cda:	d100      	bne.n	8002cde <__aeabi_dsub+0x192>
 8002cdc:	e10a      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002cde:	2501      	movs	r5, #1
 8002ce0:	2938      	cmp	r1, #56	@ 0x38
 8002ce2:	dc17      	bgt.n	8002d14 <__aeabi_dsub+0x1c8>
 8002ce4:	468a      	mov	sl, r1
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	2b1f      	cmp	r3, #31
 8002cea:	dd00      	ble.n	8002cee <__aeabi_dsub+0x1a2>
 8002cec:	e1e7      	b.n	80030be <__aeabi_dsub+0x572>
 8002cee:	2220      	movs	r2, #32
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	9b02      	ldr	r3, [sp, #8]
 8002cf4:	4661      	mov	r1, ip
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	001d      	movs	r5, r3
 8002cfa:	4653      	mov	r3, sl
 8002cfc:	40d9      	lsrs	r1, r3
 8002cfe:	4663      	mov	r3, ip
 8002d00:	4093      	lsls	r3, r2
 8002d02:	001a      	movs	r2, r3
 8002d04:	430d      	orrs	r5, r1
 8002d06:	1e51      	subs	r1, r2, #1
 8002d08:	418a      	sbcs	r2, r1
 8002d0a:	4653      	mov	r3, sl
 8002d0c:	4315      	orrs	r5, r2
 8002d0e:	9a02      	ldr	r2, [sp, #8]
 8002d10:	40da      	lsrs	r2, r3
 8002d12:	18a4      	adds	r4, r4, r2
 8002d14:	182d      	adds	r5, r5, r0
 8002d16:	4285      	cmp	r5, r0
 8002d18:	4180      	sbcs	r0, r0
 8002d1a:	4240      	negs	r0, r0
 8002d1c:	1824      	adds	r4, r4, r0
 8002d1e:	0223      	lsls	r3, r4, #8
 8002d20:	d400      	bmi.n	8002d24 <__aeabi_dsub+0x1d8>
 8002d22:	e0b6      	b.n	8002e92 <__aeabi_dsub+0x346>
 8002d24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002d26:	3701      	adds	r7, #1
 8002d28:	429f      	cmp	r7, r3
 8002d2a:	d100      	bne.n	8002d2e <__aeabi_dsub+0x1e2>
 8002d2c:	e0ad      	b.n	8002e8a <__aeabi_dsub+0x33e>
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <__aeabi_dsub+0x358>)
 8002d32:	086a      	lsrs	r2, r5, #1
 8002d34:	401c      	ands	r4, r3
 8002d36:	4029      	ands	r1, r5
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	07e5      	lsls	r5, r4, #31
 8002d3c:	4315      	orrs	r5, r2
 8002d3e:	0864      	lsrs	r4, r4, #1
 8002d40:	e78d      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002d42:	4a59      	ldr	r2, [pc, #356]	@ (8002ea8 <__aeabi_dsub+0x35c>)
 8002d44:	9b02      	ldr	r3, [sp, #8]
 8002d46:	4692      	mov	sl, r2
 8002d48:	4662      	mov	r2, ip
 8002d4a:	44ba      	add	sl, r7
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	d02c      	beq.n	8002daa <__aeabi_dsub+0x25e>
 8002d50:	428e      	cmp	r6, r1
 8002d52:	d02e      	beq.n	8002db2 <__aeabi_dsub+0x266>
 8002d54:	4652      	mov	r2, sl
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	d060      	beq.n	8002e1c <__aeabi_dsub+0x2d0>
 8002d5a:	2f00      	cmp	r7, #0
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x214>
 8002d5e:	e0db      	b.n	8002f18 <__aeabi_dsub+0x3cc>
 8002d60:	4663      	mov	r3, ip
 8002d62:	000e      	movs	r6, r1
 8002d64:	9c02      	ldr	r4, [sp, #8]
 8002d66:	08d8      	lsrs	r0, r3, #3
 8002d68:	0762      	lsls	r2, r4, #29
 8002d6a:	4302      	orrs	r2, r0
 8002d6c:	08e4      	lsrs	r4, r4, #3
 8002d6e:	0013      	movs	r3, r2
 8002d70:	4323      	orrs	r3, r4
 8002d72:	d100      	bne.n	8002d76 <__aeabi_dsub+0x22a>
 8002d74:	e254      	b.n	8003220 <__aeabi_dsub+0x6d4>
 8002d76:	2580      	movs	r5, #128	@ 0x80
 8002d78:	032d      	lsls	r5, r5, #12
 8002d7a:	4325      	orrs	r5, r4
 8002d7c:	032d      	lsls	r5, r5, #12
 8002d7e:	4c48      	ldr	r4, [pc, #288]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002d80:	0b2d      	lsrs	r5, r5, #12
 8002d82:	e78c      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002d84:	4661      	mov	r1, ip
 8002d86:	9b02      	ldr	r3, [sp, #8]
 8002d88:	4319      	orrs	r1, r3
 8002d8a:	d100      	bne.n	8002d8e <__aeabi_dsub+0x242>
 8002d8c:	e0cc      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002d8e:	0029      	movs	r1, r5
 8002d90:	3901      	subs	r1, #1
 8002d92:	2d01      	cmp	r5, #1
 8002d94:	d100      	bne.n	8002d98 <__aeabi_dsub+0x24c>
 8002d96:	e188      	b.n	80030aa <__aeabi_dsub+0x55e>
 8002d98:	4295      	cmp	r5, r2
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x252>
 8002d9c:	e0aa      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002d9e:	2501      	movs	r5, #1
 8002da0:	2938      	cmp	r1, #56	@ 0x38
 8002da2:	dd00      	ble.n	8002da6 <__aeabi_dsub+0x25a>
 8002da4:	e72f      	b.n	8002c06 <__aeabi_dsub+0xba>
 8002da6:	468a      	mov	sl, r1
 8002da8:	e718      	b.n	8002bdc <__aeabi_dsub+0x90>
 8002daa:	2201      	movs	r2, #1
 8002dac:	4051      	eors	r1, r2
 8002dae:	428e      	cmp	r6, r1
 8002db0:	d1d0      	bne.n	8002d54 <__aeabi_dsub+0x208>
 8002db2:	4653      	mov	r3, sl
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x26e>
 8002db8:	e0be      	b.n	8002f38 <__aeabi_dsub+0x3ec>
 8002dba:	2f00      	cmp	r7, #0
 8002dbc:	d000      	beq.n	8002dc0 <__aeabi_dsub+0x274>
 8002dbe:	e138      	b.n	8003032 <__aeabi_dsub+0x4e6>
 8002dc0:	46ca      	mov	sl, r9
 8002dc2:	0022      	movs	r2, r4
 8002dc4:	4302      	orrs	r2, r0
 8002dc6:	d100      	bne.n	8002dca <__aeabi_dsub+0x27e>
 8002dc8:	e1e2      	b.n	8003190 <__aeabi_dsub+0x644>
 8002dca:	4653      	mov	r3, sl
 8002dcc:	1e59      	subs	r1, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x288>
 8002dd2:	e20d      	b.n	80031f0 <__aeabi_dsub+0x6a4>
 8002dd4:	4a32      	ldr	r2, [pc, #200]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002dd6:	4592      	cmp	sl, r2
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x290>
 8002dda:	e1d2      	b.n	8003182 <__aeabi_dsub+0x636>
 8002ddc:	2701      	movs	r7, #1
 8002dde:	2938      	cmp	r1, #56	@ 0x38
 8002de0:	dc13      	bgt.n	8002e0a <__aeabi_dsub+0x2be>
 8002de2:	291f      	cmp	r1, #31
 8002de4:	dd00      	ble.n	8002de8 <__aeabi_dsub+0x29c>
 8002de6:	e1ee      	b.n	80031c6 <__aeabi_dsub+0x67a>
 8002de8:	2220      	movs	r2, #32
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	1a52      	subs	r2, r2, r1
 8002dee:	0025      	movs	r5, r4
 8002df0:	0007      	movs	r7, r0
 8002df2:	469a      	mov	sl, r3
 8002df4:	40cc      	lsrs	r4, r1
 8002df6:	4090      	lsls	r0, r2
 8002df8:	4095      	lsls	r5, r2
 8002dfa:	40cf      	lsrs	r7, r1
 8002dfc:	44a2      	add	sl, r4
 8002dfe:	1e42      	subs	r2, r0, #1
 8002e00:	4190      	sbcs	r0, r2
 8002e02:	4653      	mov	r3, sl
 8002e04:	432f      	orrs	r7, r5
 8002e06:	4307      	orrs	r7, r0
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	003d      	movs	r5, r7
 8002e0c:	4465      	add	r5, ip
 8002e0e:	4565      	cmp	r5, ip
 8002e10:	4192      	sbcs	r2, r2
 8002e12:	9b02      	ldr	r3, [sp, #8]
 8002e14:	4252      	negs	r2, r2
 8002e16:	464f      	mov	r7, r9
 8002e18:	18d4      	adds	r4, r2, r3
 8002e1a:	e780      	b.n	8002d1e <__aeabi_dsub+0x1d2>
 8002e1c:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <__aeabi_dsub+0x360>)
 8002e1e:	1c7d      	adds	r5, r7, #1
 8002e20:	4215      	tst	r5, r2
 8002e22:	d000      	beq.n	8002e26 <__aeabi_dsub+0x2da>
 8002e24:	e0aa      	b.n	8002f7c <__aeabi_dsub+0x430>
 8002e26:	4662      	mov	r2, ip
 8002e28:	0025      	movs	r5, r4
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	4305      	orrs	r5, r0
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	d000      	beq.n	8002e36 <__aeabi_dsub+0x2ea>
 8002e34:	e0f5      	b.n	8003022 <__aeabi_dsub+0x4d6>
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x2f0>
 8002e3a:	e16b      	b.n	8003114 <__aeabi_dsub+0x5c8>
 8002e3c:	2a00      	cmp	r2, #0
 8002e3e:	d100      	bne.n	8002e42 <__aeabi_dsub+0x2f6>
 8002e40:	e152      	b.n	80030e8 <__aeabi_dsub+0x59c>
 8002e42:	4663      	mov	r3, ip
 8002e44:	1ac5      	subs	r5, r0, r3
 8002e46:	9b02      	ldr	r3, [sp, #8]
 8002e48:	1ae2      	subs	r2, r4, r3
 8002e4a:	42a8      	cmp	r0, r5
 8002e4c:	419b      	sbcs	r3, r3
 8002e4e:	425b      	negs	r3, r3
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	d400      	bmi.n	8002e58 <__aeabi_dsub+0x30c>
 8002e56:	e1d5      	b.n	8003204 <__aeabi_dsub+0x6b8>
 8002e58:	4663      	mov	r3, ip
 8002e5a:	1a1d      	subs	r5, r3, r0
 8002e5c:	45ac      	cmp	ip, r5
 8002e5e:	4192      	sbcs	r2, r2
 8002e60:	2601      	movs	r6, #1
 8002e62:	9b02      	ldr	r3, [sp, #8]
 8002e64:	4252      	negs	r2, r2
 8002e66:	1b1c      	subs	r4, r3, r4
 8002e68:	4688      	mov	r8, r1
 8002e6a:	1aa4      	subs	r4, r4, r2
 8002e6c:	400e      	ands	r6, r1
 8002e6e:	e6f6      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002e70:	4297      	cmp	r7, r2
 8002e72:	d03f      	beq.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002e74:	4652      	mov	r2, sl
 8002e76:	2501      	movs	r5, #1
 8002e78:	2a38      	cmp	r2, #56	@ 0x38
 8002e7a:	dd00      	ble.n	8002e7e <__aeabi_dsub+0x332>
 8002e7c:	e74a      	b.n	8002d14 <__aeabi_dsub+0x1c8>
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	9b02      	ldr	r3, [sp, #8]
 8002e82:	0412      	lsls	r2, r2, #16
 8002e84:	4313      	orrs	r3, r2
 8002e86:	9302      	str	r3, [sp, #8]
 8002e88:	e72d      	b.n	8002ce6 <__aeabi_dsub+0x19a>
 8002e8a:	003c      	movs	r4, r7
 8002e8c:	2500      	movs	r5, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	e705      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002e92:	2307      	movs	r3, #7
 8002e94:	402b      	ands	r3, r5
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d000      	beq.n	8002e9c <__aeabi_dsub+0x350>
 8002e9a:	e6e2      	b.n	8002c62 <__aeabi_dsub+0x116>
 8002e9c:	e06b      	b.n	8002f76 <__aeabi_dsub+0x42a>
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	000007ff 	.word	0x000007ff
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	fffff801 	.word	0xfffff801
 8002eac:	000007fe 	.word	0x000007fe
 8002eb0:	0028      	movs	r0, r5
 8002eb2:	f000 fb63 	bl	800357c <__clzsi2>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	3318      	adds	r3, #24
 8002eba:	2b1f      	cmp	r3, #31
 8002ebc:	dc00      	bgt.n	8002ec0 <__aeabi_dsub+0x374>
 8002ebe:	e6b4      	b.n	8002c2a <__aeabi_dsub+0xde>
 8002ec0:	002a      	movs	r2, r5
 8002ec2:	3808      	subs	r0, #8
 8002ec4:	4082      	lsls	r2, r0
 8002ec6:	429f      	cmp	r7, r3
 8002ec8:	dd00      	ble.n	8002ecc <__aeabi_dsub+0x380>
 8002eca:	e0b9      	b.n	8003040 <__aeabi_dsub+0x4f4>
 8002ecc:	1bdb      	subs	r3, r3, r7
 8002ece:	1c58      	adds	r0, r3, #1
 8002ed0:	281f      	cmp	r0, #31
 8002ed2:	dc00      	bgt.n	8002ed6 <__aeabi_dsub+0x38a>
 8002ed4:	e1a0      	b.n	8003218 <__aeabi_dsub+0x6cc>
 8002ed6:	0015      	movs	r5, r2
 8002ed8:	3b1f      	subs	r3, #31
 8002eda:	40dd      	lsrs	r5, r3
 8002edc:	2820      	cmp	r0, #32
 8002ede:	d005      	beq.n	8002eec <__aeabi_dsub+0x3a0>
 8002ee0:	2340      	movs	r3, #64	@ 0x40
 8002ee2:	1a1b      	subs	r3, r3, r0
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	1e53      	subs	r3, r2, #1
 8002ee8:	419a      	sbcs	r2, r3
 8002eea:	4315      	orrs	r5, r2
 8002eec:	2307      	movs	r3, #7
 8002eee:	2700      	movs	r7, #0
 8002ef0:	402b      	ands	r3, r5
 8002ef2:	e7d0      	b.n	8002e96 <__aeabi_dsub+0x34a>
 8002ef4:	08c0      	lsrs	r0, r0, #3
 8002ef6:	0762      	lsls	r2, r4, #29
 8002ef8:	4302      	orrs	r2, r0
 8002efa:	08e4      	lsrs	r4, r4, #3
 8002efc:	e737      	b.n	8002d6e <__aeabi_dsub+0x222>
 8002efe:	08ea      	lsrs	r2, r5, #3
 8002f00:	0763      	lsls	r3, r4, #29
 8002f02:	431a      	orrs	r2, r3
 8002f04:	4bd3      	ldr	r3, [pc, #844]	@ (8003254 <__aeabi_dsub+0x708>)
 8002f06:	08e4      	lsrs	r4, r4, #3
 8002f08:	429f      	cmp	r7, r3
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_dsub+0x3c2>
 8002f0c:	e72f      	b.n	8002d6e <__aeabi_dsub+0x222>
 8002f0e:	0324      	lsls	r4, r4, #12
 8002f10:	0b25      	lsrs	r5, r4, #12
 8002f12:	057c      	lsls	r4, r7, #21
 8002f14:	0d64      	lsrs	r4, r4, #21
 8002f16:	e6c2      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002f18:	46ca      	mov	sl, r9
 8002f1a:	0022      	movs	r2, r4
 8002f1c:	4302      	orrs	r2, r0
 8002f1e:	d158      	bne.n	8002fd2 <__aeabi_dsub+0x486>
 8002f20:	4663      	mov	r3, ip
 8002f22:	000e      	movs	r6, r1
 8002f24:	9c02      	ldr	r4, [sp, #8]
 8002f26:	9303      	str	r3, [sp, #12]
 8002f28:	9b03      	ldr	r3, [sp, #12]
 8002f2a:	4657      	mov	r7, sl
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	e7e7      	b.n	8002f00 <__aeabi_dsub+0x3b4>
 8002f30:	4cc9      	ldr	r4, [pc, #804]	@ (8003258 <__aeabi_dsub+0x70c>)
 8002f32:	1aff      	subs	r7, r7, r3
 8002f34:	4014      	ands	r4, r2
 8002f36:	e692      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002f38:	4dc8      	ldr	r5, [pc, #800]	@ (800325c <__aeabi_dsub+0x710>)
 8002f3a:	1c7a      	adds	r2, r7, #1
 8002f3c:	422a      	tst	r2, r5
 8002f3e:	d000      	beq.n	8002f42 <__aeabi_dsub+0x3f6>
 8002f40:	e084      	b.n	800304c <__aeabi_dsub+0x500>
 8002f42:	0022      	movs	r2, r4
 8002f44:	4302      	orrs	r2, r0
 8002f46:	2f00      	cmp	r7, #0
 8002f48:	d000      	beq.n	8002f4c <__aeabi_dsub+0x400>
 8002f4a:	e0ef      	b.n	800312c <__aeabi_dsub+0x5e0>
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d100      	bne.n	8002f52 <__aeabi_dsub+0x406>
 8002f50:	e0e5      	b.n	800311e <__aeabi_dsub+0x5d2>
 8002f52:	4662      	mov	r2, ip
 8002f54:	9902      	ldr	r1, [sp, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	d100      	bne.n	8002f5c <__aeabi_dsub+0x410>
 8002f5a:	e0c5      	b.n	80030e8 <__aeabi_dsub+0x59c>
 8002f5c:	4663      	mov	r3, ip
 8002f5e:	18c5      	adds	r5, r0, r3
 8002f60:	468c      	mov	ip, r1
 8002f62:	4285      	cmp	r5, r0
 8002f64:	4180      	sbcs	r0, r0
 8002f66:	4464      	add	r4, ip
 8002f68:	4240      	negs	r0, r0
 8002f6a:	1824      	adds	r4, r4, r0
 8002f6c:	0223      	lsls	r3, r4, #8
 8002f6e:	d502      	bpl.n	8002f76 <__aeabi_dsub+0x42a>
 8002f70:	4bb9      	ldr	r3, [pc, #740]	@ (8003258 <__aeabi_dsub+0x70c>)
 8002f72:	3701      	adds	r7, #1
 8002f74:	401c      	ands	r4, r3
 8002f76:	46ba      	mov	sl, r7
 8002f78:	9503      	str	r5, [sp, #12]
 8002f7a:	e7d5      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002f7c:	4662      	mov	r2, ip
 8002f7e:	1a85      	subs	r5, r0, r2
 8002f80:	42a8      	cmp	r0, r5
 8002f82:	4192      	sbcs	r2, r2
 8002f84:	4252      	negs	r2, r2
 8002f86:	4691      	mov	r9, r2
 8002f88:	9b02      	ldr	r3, [sp, #8]
 8002f8a:	1ae3      	subs	r3, r4, r3
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	464b      	mov	r3, r9
 8002f90:	1ad2      	subs	r2, r2, r3
 8002f92:	0013      	movs	r3, r2
 8002f94:	4691      	mov	r9, r2
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	d46c      	bmi.n	8003074 <__aeabi_dsub+0x528>
 8002f9a:	464a      	mov	r2, r9
 8002f9c:	464c      	mov	r4, r9
 8002f9e:	432a      	orrs	r2, r5
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x458>
 8002fa2:	e63a      	b.n	8002c1a <__aeabi_dsub+0xce>
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	2400      	movs	r4, #0
 8002fa8:	2500      	movs	r5, #0
 8002faa:	e678      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002fac:	9902      	ldr	r1, [sp, #8]
 8002fae:	4653      	mov	r3, sl
 8002fb0:	000d      	movs	r5, r1
 8002fb2:	3a20      	subs	r2, #32
 8002fb4:	40d5      	lsrs	r5, r2
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d006      	beq.n	8002fc8 <__aeabi_dsub+0x47c>
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	4662      	mov	r2, ip
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	4693      	mov	fp, r2
 8002fc8:	465b      	mov	r3, fp
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	4193      	sbcs	r3, r2
 8002fce:	431d      	orrs	r5, r3
 8002fd0:	e619      	b.n	8002c06 <__aeabi_dsub+0xba>
 8002fd2:	4653      	mov	r3, sl
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x490>
 8002fda:	e0c6      	b.n	800316a <__aeabi_dsub+0x61e>
 8002fdc:	4e9d      	ldr	r6, [pc, #628]	@ (8003254 <__aeabi_dsub+0x708>)
 8002fde:	45b2      	cmp	sl, r6
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x498>
 8002fe2:	e6bd      	b.n	8002d60 <__aeabi_dsub+0x214>
 8002fe4:	4688      	mov	r8, r1
 8002fe6:	000e      	movs	r6, r1
 8002fe8:	2501      	movs	r5, #1
 8002fea:	2a38      	cmp	r2, #56	@ 0x38
 8002fec:	dc10      	bgt.n	8003010 <__aeabi_dsub+0x4c4>
 8002fee:	2a1f      	cmp	r2, #31
 8002ff0:	dc7f      	bgt.n	80030f2 <__aeabi_dsub+0x5a6>
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	0025      	movs	r5, r4
 8002ff6:	1a89      	subs	r1, r1, r2
 8002ff8:	0007      	movs	r7, r0
 8002ffa:	4088      	lsls	r0, r1
 8002ffc:	408d      	lsls	r5, r1
 8002ffe:	40d7      	lsrs	r7, r2
 8003000:	40d4      	lsrs	r4, r2
 8003002:	1e41      	subs	r1, r0, #1
 8003004:	4188      	sbcs	r0, r1
 8003006:	9b02      	ldr	r3, [sp, #8]
 8003008:	433d      	orrs	r5, r7
 800300a:	1b1b      	subs	r3, r3, r4
 800300c:	4305      	orrs	r5, r0
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	4662      	mov	r2, ip
 8003012:	1b55      	subs	r5, r2, r5
 8003014:	45ac      	cmp	ip, r5
 8003016:	4192      	sbcs	r2, r2
 8003018:	9b02      	ldr	r3, [sp, #8]
 800301a:	4252      	negs	r2, r2
 800301c:	464f      	mov	r7, r9
 800301e:	1a9c      	subs	r4, r3, r2
 8003020:	e5f6      	b.n	8002c10 <__aeabi_dsub+0xc4>
 8003022:	2d00      	cmp	r5, #0
 8003024:	d000      	beq.n	8003028 <__aeabi_dsub+0x4dc>
 8003026:	e0b7      	b.n	8003198 <__aeabi_dsub+0x64c>
 8003028:	2a00      	cmp	r2, #0
 800302a:	d100      	bne.n	800302e <__aeabi_dsub+0x4e2>
 800302c:	e0f0      	b.n	8003210 <__aeabi_dsub+0x6c4>
 800302e:	2601      	movs	r6, #1
 8003030:	400e      	ands	r6, r1
 8003032:	4663      	mov	r3, ip
 8003034:	9802      	ldr	r0, [sp, #8]
 8003036:	08d9      	lsrs	r1, r3, #3
 8003038:	0742      	lsls	r2, r0, #29
 800303a:	430a      	orrs	r2, r1
 800303c:	08c4      	lsrs	r4, r0, #3
 800303e:	e696      	b.n	8002d6e <__aeabi_dsub+0x222>
 8003040:	4c85      	ldr	r4, [pc, #532]	@ (8003258 <__aeabi_dsub+0x70c>)
 8003042:	1aff      	subs	r7, r7, r3
 8003044:	4014      	ands	r4, r2
 8003046:	0762      	lsls	r2, r4, #29
 8003048:	08e4      	lsrs	r4, r4, #3
 800304a:	e760      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 800304c:	4981      	ldr	r1, [pc, #516]	@ (8003254 <__aeabi_dsub+0x708>)
 800304e:	428a      	cmp	r2, r1
 8003050:	d100      	bne.n	8003054 <__aeabi_dsub+0x508>
 8003052:	e0c9      	b.n	80031e8 <__aeabi_dsub+0x69c>
 8003054:	4663      	mov	r3, ip
 8003056:	18c1      	adds	r1, r0, r3
 8003058:	4281      	cmp	r1, r0
 800305a:	4180      	sbcs	r0, r0
 800305c:	9b02      	ldr	r3, [sp, #8]
 800305e:	4240      	negs	r0, r0
 8003060:	18e3      	adds	r3, r4, r3
 8003062:	181b      	adds	r3, r3, r0
 8003064:	07dd      	lsls	r5, r3, #31
 8003066:	085c      	lsrs	r4, r3, #1
 8003068:	2307      	movs	r3, #7
 800306a:	0849      	lsrs	r1, r1, #1
 800306c:	430d      	orrs	r5, r1
 800306e:	0017      	movs	r7, r2
 8003070:	402b      	ands	r3, r5
 8003072:	e710      	b.n	8002e96 <__aeabi_dsub+0x34a>
 8003074:	4663      	mov	r3, ip
 8003076:	1a1d      	subs	r5, r3, r0
 8003078:	45ac      	cmp	ip, r5
 800307a:	4192      	sbcs	r2, r2
 800307c:	2601      	movs	r6, #1
 800307e:	9b02      	ldr	r3, [sp, #8]
 8003080:	4252      	negs	r2, r2
 8003082:	1b1c      	subs	r4, r3, r4
 8003084:	4688      	mov	r8, r1
 8003086:	1aa4      	subs	r4, r4, r2
 8003088:	400e      	ands	r6, r1
 800308a:	e5c6      	b.n	8002c1a <__aeabi_dsub+0xce>
 800308c:	4663      	mov	r3, ip
 800308e:	18c5      	adds	r5, r0, r3
 8003090:	9b02      	ldr	r3, [sp, #8]
 8003092:	4285      	cmp	r5, r0
 8003094:	4180      	sbcs	r0, r0
 8003096:	469c      	mov	ip, r3
 8003098:	4240      	negs	r0, r0
 800309a:	4464      	add	r4, ip
 800309c:	1824      	adds	r4, r4, r0
 800309e:	2701      	movs	r7, #1
 80030a0:	0223      	lsls	r3, r4, #8
 80030a2:	d400      	bmi.n	80030a6 <__aeabi_dsub+0x55a>
 80030a4:	e6f5      	b.n	8002e92 <__aeabi_dsub+0x346>
 80030a6:	2702      	movs	r7, #2
 80030a8:	e641      	b.n	8002d2e <__aeabi_dsub+0x1e2>
 80030aa:	4663      	mov	r3, ip
 80030ac:	1ac5      	subs	r5, r0, r3
 80030ae:	42a8      	cmp	r0, r5
 80030b0:	4180      	sbcs	r0, r0
 80030b2:	9b02      	ldr	r3, [sp, #8]
 80030b4:	4240      	negs	r0, r0
 80030b6:	1ae4      	subs	r4, r4, r3
 80030b8:	2701      	movs	r7, #1
 80030ba:	1a24      	subs	r4, r4, r0
 80030bc:	e5a8      	b.n	8002c10 <__aeabi_dsub+0xc4>
 80030be:	9d02      	ldr	r5, [sp, #8]
 80030c0:	4652      	mov	r2, sl
 80030c2:	002b      	movs	r3, r5
 80030c4:	3a20      	subs	r2, #32
 80030c6:	40d3      	lsrs	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	4653      	mov	r3, sl
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d006      	beq.n	80030de <__aeabi_dsub+0x592>
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	002b      	movs	r3, r5
 80030d6:	4093      	lsls	r3, r2
 80030d8:	4662      	mov	r2, ip
 80030da:	431a      	orrs	r2, r3
 80030dc:	4693      	mov	fp, r2
 80030de:	465d      	mov	r5, fp
 80030e0:	1e6b      	subs	r3, r5, #1
 80030e2:	419d      	sbcs	r5, r3
 80030e4:	430d      	orrs	r5, r1
 80030e6:	e615      	b.n	8002d14 <__aeabi_dsub+0x1c8>
 80030e8:	0762      	lsls	r2, r4, #29
 80030ea:	08c0      	lsrs	r0, r0, #3
 80030ec:	4302      	orrs	r2, r0
 80030ee:	08e4      	lsrs	r4, r4, #3
 80030f0:	e70d      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 80030f2:	0011      	movs	r1, r2
 80030f4:	0027      	movs	r7, r4
 80030f6:	3920      	subs	r1, #32
 80030f8:	40cf      	lsrs	r7, r1
 80030fa:	2a20      	cmp	r2, #32
 80030fc:	d005      	beq.n	800310a <__aeabi_dsub+0x5be>
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	1a8a      	subs	r2, r1, r2
 8003102:	4094      	lsls	r4, r2
 8003104:	0025      	movs	r5, r4
 8003106:	4305      	orrs	r5, r0
 8003108:	9503      	str	r5, [sp, #12]
 800310a:	9d03      	ldr	r5, [sp, #12]
 800310c:	1e6a      	subs	r2, r5, #1
 800310e:	4195      	sbcs	r5, r2
 8003110:	433d      	orrs	r5, r7
 8003112:	e77d      	b.n	8003010 <__aeabi_dsub+0x4c4>
 8003114:	2a00      	cmp	r2, #0
 8003116:	d100      	bne.n	800311a <__aeabi_dsub+0x5ce>
 8003118:	e744      	b.n	8002fa4 <__aeabi_dsub+0x458>
 800311a:	2601      	movs	r6, #1
 800311c:	400e      	ands	r6, r1
 800311e:	4663      	mov	r3, ip
 8003120:	08d9      	lsrs	r1, r3, #3
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	075a      	lsls	r2, r3, #29
 8003126:	430a      	orrs	r2, r1
 8003128:	08dc      	lsrs	r4, r3, #3
 800312a:	e6f0      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 800312c:	2a00      	cmp	r2, #0
 800312e:	d028      	beq.n	8003182 <__aeabi_dsub+0x636>
 8003130:	4662      	mov	r2, ip
 8003132:	9f02      	ldr	r7, [sp, #8]
 8003134:	08c0      	lsrs	r0, r0, #3
 8003136:	433a      	orrs	r2, r7
 8003138:	d100      	bne.n	800313c <__aeabi_dsub+0x5f0>
 800313a:	e6dc      	b.n	8002ef6 <__aeabi_dsub+0x3aa>
 800313c:	0762      	lsls	r2, r4, #29
 800313e:	4310      	orrs	r0, r2
 8003140:	2280      	movs	r2, #128	@ 0x80
 8003142:	08e4      	lsrs	r4, r4, #3
 8003144:	0312      	lsls	r2, r2, #12
 8003146:	4214      	tst	r4, r2
 8003148:	d009      	beq.n	800315e <__aeabi_dsub+0x612>
 800314a:	08fd      	lsrs	r5, r7, #3
 800314c:	4215      	tst	r5, r2
 800314e:	d106      	bne.n	800315e <__aeabi_dsub+0x612>
 8003150:	4663      	mov	r3, ip
 8003152:	2601      	movs	r6, #1
 8003154:	002c      	movs	r4, r5
 8003156:	08d8      	lsrs	r0, r3, #3
 8003158:	077b      	lsls	r3, r7, #29
 800315a:	4318      	orrs	r0, r3
 800315c:	400e      	ands	r6, r1
 800315e:	0f42      	lsrs	r2, r0, #29
 8003160:	00c0      	lsls	r0, r0, #3
 8003162:	08c0      	lsrs	r0, r0, #3
 8003164:	0752      	lsls	r2, r2, #29
 8003166:	4302      	orrs	r2, r0
 8003168:	e601      	b.n	8002d6e <__aeabi_dsub+0x222>
 800316a:	4663      	mov	r3, ip
 800316c:	1a1d      	subs	r5, r3, r0
 800316e:	45ac      	cmp	ip, r5
 8003170:	4192      	sbcs	r2, r2
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	4252      	negs	r2, r2
 8003176:	1b1c      	subs	r4, r3, r4
 8003178:	000e      	movs	r6, r1
 800317a:	4688      	mov	r8, r1
 800317c:	2701      	movs	r7, #1
 800317e:	1aa4      	subs	r4, r4, r2
 8003180:	e546      	b.n	8002c10 <__aeabi_dsub+0xc4>
 8003182:	4663      	mov	r3, ip
 8003184:	08d9      	lsrs	r1, r3, #3
 8003186:	9b02      	ldr	r3, [sp, #8]
 8003188:	075a      	lsls	r2, r3, #29
 800318a:	430a      	orrs	r2, r1
 800318c:	08dc      	lsrs	r4, r3, #3
 800318e:	e5ee      	b.n	8002d6e <__aeabi_dsub+0x222>
 8003190:	4663      	mov	r3, ip
 8003192:	9c02      	ldr	r4, [sp, #8]
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	e6c7      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8003198:	08c0      	lsrs	r0, r0, #3
 800319a:	2a00      	cmp	r2, #0
 800319c:	d100      	bne.n	80031a0 <__aeabi_dsub+0x654>
 800319e:	e6aa      	b.n	8002ef6 <__aeabi_dsub+0x3aa>
 80031a0:	0762      	lsls	r2, r4, #29
 80031a2:	4310      	orrs	r0, r2
 80031a4:	2280      	movs	r2, #128	@ 0x80
 80031a6:	08e4      	lsrs	r4, r4, #3
 80031a8:	0312      	lsls	r2, r2, #12
 80031aa:	4214      	tst	r4, r2
 80031ac:	d0d7      	beq.n	800315e <__aeabi_dsub+0x612>
 80031ae:	9f02      	ldr	r7, [sp, #8]
 80031b0:	08fd      	lsrs	r5, r7, #3
 80031b2:	4215      	tst	r5, r2
 80031b4:	d1d3      	bne.n	800315e <__aeabi_dsub+0x612>
 80031b6:	4663      	mov	r3, ip
 80031b8:	2601      	movs	r6, #1
 80031ba:	08d8      	lsrs	r0, r3, #3
 80031bc:	077b      	lsls	r3, r7, #29
 80031be:	002c      	movs	r4, r5
 80031c0:	4318      	orrs	r0, r3
 80031c2:	400e      	ands	r6, r1
 80031c4:	e7cb      	b.n	800315e <__aeabi_dsub+0x612>
 80031c6:	000a      	movs	r2, r1
 80031c8:	0027      	movs	r7, r4
 80031ca:	3a20      	subs	r2, #32
 80031cc:	40d7      	lsrs	r7, r2
 80031ce:	2920      	cmp	r1, #32
 80031d0:	d005      	beq.n	80031de <__aeabi_dsub+0x692>
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	1a52      	subs	r2, r2, r1
 80031d6:	4094      	lsls	r4, r2
 80031d8:	0025      	movs	r5, r4
 80031da:	4305      	orrs	r5, r0
 80031dc:	9503      	str	r5, [sp, #12]
 80031de:	9d03      	ldr	r5, [sp, #12]
 80031e0:	1e6a      	subs	r2, r5, #1
 80031e2:	4195      	sbcs	r5, r2
 80031e4:	432f      	orrs	r7, r5
 80031e6:	e610      	b.n	8002e0a <__aeabi_dsub+0x2be>
 80031e8:	0014      	movs	r4, r2
 80031ea:	2500      	movs	r5, #0
 80031ec:	2200      	movs	r2, #0
 80031ee:	e556      	b.n	8002c9e <__aeabi_dsub+0x152>
 80031f0:	9b02      	ldr	r3, [sp, #8]
 80031f2:	4460      	add	r0, ip
 80031f4:	4699      	mov	r9, r3
 80031f6:	4560      	cmp	r0, ip
 80031f8:	4192      	sbcs	r2, r2
 80031fa:	444c      	add	r4, r9
 80031fc:	4252      	negs	r2, r2
 80031fe:	0005      	movs	r5, r0
 8003200:	18a4      	adds	r4, r4, r2
 8003202:	e74c      	b.n	800309e <__aeabi_dsub+0x552>
 8003204:	001a      	movs	r2, r3
 8003206:	001c      	movs	r4, r3
 8003208:	432a      	orrs	r2, r5
 800320a:	d000      	beq.n	800320e <__aeabi_dsub+0x6c2>
 800320c:	e6b3      	b.n	8002f76 <__aeabi_dsub+0x42a>
 800320e:	e6c9      	b.n	8002fa4 <__aeabi_dsub+0x458>
 8003210:	2480      	movs	r4, #128	@ 0x80
 8003212:	2600      	movs	r6, #0
 8003214:	0324      	lsls	r4, r4, #12
 8003216:	e5ae      	b.n	8002d76 <__aeabi_dsub+0x22a>
 8003218:	2120      	movs	r1, #32
 800321a:	2500      	movs	r5, #0
 800321c:	1a09      	subs	r1, r1, r0
 800321e:	e517      	b.n	8002c50 <__aeabi_dsub+0x104>
 8003220:	2200      	movs	r2, #0
 8003222:	2500      	movs	r5, #0
 8003224:	4c0b      	ldr	r4, [pc, #44]	@ (8003254 <__aeabi_dsub+0x708>)
 8003226:	e53a      	b.n	8002c9e <__aeabi_dsub+0x152>
 8003228:	2d00      	cmp	r5, #0
 800322a:	d100      	bne.n	800322e <__aeabi_dsub+0x6e2>
 800322c:	e5f6      	b.n	8002e1c <__aeabi_dsub+0x2d0>
 800322e:	464b      	mov	r3, r9
 8003230:	1bda      	subs	r2, r3, r7
 8003232:	4692      	mov	sl, r2
 8003234:	2f00      	cmp	r7, #0
 8003236:	d100      	bne.n	800323a <__aeabi_dsub+0x6ee>
 8003238:	e66f      	b.n	8002f1a <__aeabi_dsub+0x3ce>
 800323a:	2a38      	cmp	r2, #56	@ 0x38
 800323c:	dc05      	bgt.n	800324a <__aeabi_dsub+0x6fe>
 800323e:	2680      	movs	r6, #128	@ 0x80
 8003240:	0436      	lsls	r6, r6, #16
 8003242:	4334      	orrs	r4, r6
 8003244:	4688      	mov	r8, r1
 8003246:	000e      	movs	r6, r1
 8003248:	e6d1      	b.n	8002fee <__aeabi_dsub+0x4a2>
 800324a:	4688      	mov	r8, r1
 800324c:	000e      	movs	r6, r1
 800324e:	2501      	movs	r5, #1
 8003250:	e6de      	b.n	8003010 <__aeabi_dsub+0x4c4>
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	000007ff 	.word	0x000007ff
 8003258:	ff7fffff 	.word	0xff7fffff
 800325c:	000007fe 	.word	0x000007fe
 8003260:	2d00      	cmp	r5, #0
 8003262:	d100      	bne.n	8003266 <__aeabi_dsub+0x71a>
 8003264:	e668      	b.n	8002f38 <__aeabi_dsub+0x3ec>
 8003266:	464b      	mov	r3, r9
 8003268:	1bd9      	subs	r1, r3, r7
 800326a:	2f00      	cmp	r7, #0
 800326c:	d101      	bne.n	8003272 <__aeabi_dsub+0x726>
 800326e:	468a      	mov	sl, r1
 8003270:	e5a7      	b.n	8002dc2 <__aeabi_dsub+0x276>
 8003272:	2701      	movs	r7, #1
 8003274:	2938      	cmp	r1, #56	@ 0x38
 8003276:	dd00      	ble.n	800327a <__aeabi_dsub+0x72e>
 8003278:	e5c7      	b.n	8002e0a <__aeabi_dsub+0x2be>
 800327a:	2280      	movs	r2, #128	@ 0x80
 800327c:	0412      	lsls	r2, r2, #16
 800327e:	4314      	orrs	r4, r2
 8003280:	e5af      	b.n	8002de2 <__aeabi_dsub+0x296>
 8003282:	46c0      	nop			@ (mov r8, r8)

08003284 <__aeabi_dcmpun>:
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	46c6      	mov	lr, r8
 8003288:	031e      	lsls	r6, r3, #12
 800328a:	0b36      	lsrs	r6, r6, #12
 800328c:	46b0      	mov	r8, r6
 800328e:	4e0d      	ldr	r6, [pc, #52]	@ (80032c4 <__aeabi_dcmpun+0x40>)
 8003290:	030c      	lsls	r4, r1, #12
 8003292:	004d      	lsls	r5, r1, #1
 8003294:	005f      	lsls	r7, r3, #1
 8003296:	b500      	push	{lr}
 8003298:	0b24      	lsrs	r4, r4, #12
 800329a:	0d6d      	lsrs	r5, r5, #21
 800329c:	0d7f      	lsrs	r7, r7, #21
 800329e:	42b5      	cmp	r5, r6
 80032a0:	d00b      	beq.n	80032ba <__aeabi_dcmpun+0x36>
 80032a2:	4908      	ldr	r1, [pc, #32]	@ (80032c4 <__aeabi_dcmpun+0x40>)
 80032a4:	2000      	movs	r0, #0
 80032a6:	428f      	cmp	r7, r1
 80032a8:	d104      	bne.n	80032b4 <__aeabi_dcmpun+0x30>
 80032aa:	4646      	mov	r6, r8
 80032ac:	4316      	orrs	r6, r2
 80032ae:	0030      	movs	r0, r6
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	4198      	sbcs	r0, r3
 80032b4:	bc80      	pop	{r7}
 80032b6:	46b8      	mov	r8, r7
 80032b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ba:	4304      	orrs	r4, r0
 80032bc:	2001      	movs	r0, #1
 80032be:	2c00      	cmp	r4, #0
 80032c0:	d1f8      	bne.n	80032b4 <__aeabi_dcmpun+0x30>
 80032c2:	e7ee      	b.n	80032a2 <__aeabi_dcmpun+0x1e>
 80032c4:	000007ff 	.word	0x000007ff

080032c8 <__aeabi_d2iz>:
 80032c8:	000b      	movs	r3, r1
 80032ca:	0002      	movs	r2, r0
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	4d16      	ldr	r5, [pc, #88]	@ (8003328 <__aeabi_d2iz+0x60>)
 80032d0:	030c      	lsls	r4, r1, #12
 80032d2:	b082      	sub	sp, #8
 80032d4:	0049      	lsls	r1, r1, #1
 80032d6:	2000      	movs	r0, #0
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	0b24      	lsrs	r4, r4, #12
 80032de:	0d49      	lsrs	r1, r1, #21
 80032e0:	0fde      	lsrs	r6, r3, #31
 80032e2:	42a9      	cmp	r1, r5
 80032e4:	dd04      	ble.n	80032f0 <__aeabi_d2iz+0x28>
 80032e6:	4811      	ldr	r0, [pc, #68]	@ (800332c <__aeabi_d2iz+0x64>)
 80032e8:	4281      	cmp	r1, r0
 80032ea:	dd03      	ble.n	80032f4 <__aeabi_d2iz+0x2c>
 80032ec:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <__aeabi_d2iz+0x68>)
 80032ee:	18f0      	adds	r0, r6, r3
 80032f0:	b002      	add	sp, #8
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	2080      	movs	r0, #128	@ 0x80
 80032f6:	0340      	lsls	r0, r0, #13
 80032f8:	4320      	orrs	r0, r4
 80032fa:	4c0e      	ldr	r4, [pc, #56]	@ (8003334 <__aeabi_d2iz+0x6c>)
 80032fc:	1a64      	subs	r4, r4, r1
 80032fe:	2c1f      	cmp	r4, #31
 8003300:	dd08      	ble.n	8003314 <__aeabi_d2iz+0x4c>
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <__aeabi_d2iz+0x70>)
 8003304:	1a5b      	subs	r3, r3, r1
 8003306:	40d8      	lsrs	r0, r3
 8003308:	0003      	movs	r3, r0
 800330a:	4258      	negs	r0, r3
 800330c:	2e00      	cmp	r6, #0
 800330e:	d1ef      	bne.n	80032f0 <__aeabi_d2iz+0x28>
 8003310:	0018      	movs	r0, r3
 8003312:	e7ed      	b.n	80032f0 <__aeabi_d2iz+0x28>
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <__aeabi_d2iz+0x74>)
 8003316:	9a00      	ldr	r2, [sp, #0]
 8003318:	469c      	mov	ip, r3
 800331a:	0003      	movs	r3, r0
 800331c:	4461      	add	r1, ip
 800331e:	408b      	lsls	r3, r1
 8003320:	40e2      	lsrs	r2, r4
 8003322:	4313      	orrs	r3, r2
 8003324:	e7f1      	b.n	800330a <__aeabi_d2iz+0x42>
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	000003fe 	.word	0x000003fe
 800332c:	0000041d 	.word	0x0000041d
 8003330:	7fffffff 	.word	0x7fffffff
 8003334:	00000433 	.word	0x00000433
 8003338:	00000413 	.word	0x00000413
 800333c:	fffffbed 	.word	0xfffffbed

08003340 <__aeabi_i2d>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	2800      	cmp	r0, #0
 8003344:	d016      	beq.n	8003374 <__aeabi_i2d+0x34>
 8003346:	17c3      	asrs	r3, r0, #31
 8003348:	18c5      	adds	r5, r0, r3
 800334a:	405d      	eors	r5, r3
 800334c:	0fc4      	lsrs	r4, r0, #31
 800334e:	0028      	movs	r0, r5
 8003350:	f000 f914 	bl	800357c <__clzsi2>
 8003354:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <__aeabi_i2d+0x58>)
 8003356:	1a1b      	subs	r3, r3, r0
 8003358:	055b      	lsls	r3, r3, #21
 800335a:	0d5b      	lsrs	r3, r3, #21
 800335c:	280a      	cmp	r0, #10
 800335e:	dc14      	bgt.n	800338a <__aeabi_i2d+0x4a>
 8003360:	0002      	movs	r2, r0
 8003362:	002e      	movs	r6, r5
 8003364:	3215      	adds	r2, #21
 8003366:	4096      	lsls	r6, r2
 8003368:	220b      	movs	r2, #11
 800336a:	1a12      	subs	r2, r2, r0
 800336c:	40d5      	lsrs	r5, r2
 800336e:	032d      	lsls	r5, r5, #12
 8003370:	0b2d      	lsrs	r5, r5, #12
 8003372:	e003      	b.n	800337c <__aeabi_i2d+0x3c>
 8003374:	2400      	movs	r4, #0
 8003376:	2300      	movs	r3, #0
 8003378:	2500      	movs	r5, #0
 800337a:	2600      	movs	r6, #0
 800337c:	051b      	lsls	r3, r3, #20
 800337e:	432b      	orrs	r3, r5
 8003380:	07e4      	lsls	r4, r4, #31
 8003382:	4323      	orrs	r3, r4
 8003384:	0030      	movs	r0, r6
 8003386:	0019      	movs	r1, r3
 8003388:	bd70      	pop	{r4, r5, r6, pc}
 800338a:	380b      	subs	r0, #11
 800338c:	4085      	lsls	r5, r0
 800338e:	032d      	lsls	r5, r5, #12
 8003390:	2600      	movs	r6, #0
 8003392:	0b2d      	lsrs	r5, r5, #12
 8003394:	e7f2      	b.n	800337c <__aeabi_i2d+0x3c>
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	0000041e 	.word	0x0000041e

0800339c <__aeabi_ui2d>:
 800339c:	b510      	push	{r4, lr}
 800339e:	1e04      	subs	r4, r0, #0
 80033a0:	d010      	beq.n	80033c4 <__aeabi_ui2d+0x28>
 80033a2:	f000 f8eb 	bl	800357c <__clzsi2>
 80033a6:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <__aeabi_ui2d+0x44>)
 80033a8:	1a1b      	subs	r3, r3, r0
 80033aa:	055b      	lsls	r3, r3, #21
 80033ac:	0d5b      	lsrs	r3, r3, #21
 80033ae:	280a      	cmp	r0, #10
 80033b0:	dc0f      	bgt.n	80033d2 <__aeabi_ui2d+0x36>
 80033b2:	220b      	movs	r2, #11
 80033b4:	0021      	movs	r1, r4
 80033b6:	1a12      	subs	r2, r2, r0
 80033b8:	40d1      	lsrs	r1, r2
 80033ba:	3015      	adds	r0, #21
 80033bc:	030a      	lsls	r2, r1, #12
 80033be:	4084      	lsls	r4, r0
 80033c0:	0b12      	lsrs	r2, r2, #12
 80033c2:	e001      	b.n	80033c8 <__aeabi_ui2d+0x2c>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2200      	movs	r2, #0
 80033c8:	051b      	lsls	r3, r3, #20
 80033ca:	4313      	orrs	r3, r2
 80033cc:	0020      	movs	r0, r4
 80033ce:	0019      	movs	r1, r3
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	0022      	movs	r2, r4
 80033d4:	380b      	subs	r0, #11
 80033d6:	4082      	lsls	r2, r0
 80033d8:	0312      	lsls	r2, r2, #12
 80033da:	2400      	movs	r4, #0
 80033dc:	0b12      	lsrs	r2, r2, #12
 80033de:	e7f3      	b.n	80033c8 <__aeabi_ui2d+0x2c>
 80033e0:	0000041e 	.word	0x0000041e

080033e4 <__aeabi_f2d>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	0242      	lsls	r2, r0, #9
 80033e8:	0043      	lsls	r3, r0, #1
 80033ea:	0fc4      	lsrs	r4, r0, #31
 80033ec:	20fe      	movs	r0, #254	@ 0xfe
 80033ee:	0e1b      	lsrs	r3, r3, #24
 80033f0:	1c59      	adds	r1, r3, #1
 80033f2:	0a55      	lsrs	r5, r2, #9
 80033f4:	4208      	tst	r0, r1
 80033f6:	d00c      	beq.n	8003412 <__aeabi_f2d+0x2e>
 80033f8:	21e0      	movs	r1, #224	@ 0xe0
 80033fa:	0089      	lsls	r1, r1, #2
 80033fc:	468c      	mov	ip, r1
 80033fe:	076d      	lsls	r5, r5, #29
 8003400:	0b12      	lsrs	r2, r2, #12
 8003402:	4463      	add	r3, ip
 8003404:	051b      	lsls	r3, r3, #20
 8003406:	4313      	orrs	r3, r2
 8003408:	07e4      	lsls	r4, r4, #31
 800340a:	4323      	orrs	r3, r4
 800340c:	0028      	movs	r0, r5
 800340e:	0019      	movs	r1, r3
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	2b00      	cmp	r3, #0
 8003414:	d114      	bne.n	8003440 <__aeabi_f2d+0x5c>
 8003416:	2d00      	cmp	r5, #0
 8003418:	d01b      	beq.n	8003452 <__aeabi_f2d+0x6e>
 800341a:	0028      	movs	r0, r5
 800341c:	f000 f8ae 	bl	800357c <__clzsi2>
 8003420:	280a      	cmp	r0, #10
 8003422:	dc1c      	bgt.n	800345e <__aeabi_f2d+0x7a>
 8003424:	230b      	movs	r3, #11
 8003426:	002a      	movs	r2, r5
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	40da      	lsrs	r2, r3
 800342c:	0003      	movs	r3, r0
 800342e:	3315      	adds	r3, #21
 8003430:	409d      	lsls	r5, r3
 8003432:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <__aeabi_f2d+0x88>)
 8003434:	0312      	lsls	r2, r2, #12
 8003436:	1a1b      	subs	r3, r3, r0
 8003438:	055b      	lsls	r3, r3, #21
 800343a:	0b12      	lsrs	r2, r2, #12
 800343c:	0d5b      	lsrs	r3, r3, #21
 800343e:	e7e1      	b.n	8003404 <__aeabi_f2d+0x20>
 8003440:	2d00      	cmp	r5, #0
 8003442:	d009      	beq.n	8003458 <__aeabi_f2d+0x74>
 8003444:	0b13      	lsrs	r3, r2, #12
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	0312      	lsls	r2, r2, #12
 800344a:	431a      	orrs	r2, r3
 800344c:	076d      	lsls	r5, r5, #29
 800344e:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <__aeabi_f2d+0x8c>)
 8003450:	e7d8      	b.n	8003404 <__aeabi_f2d+0x20>
 8003452:	2300      	movs	r3, #0
 8003454:	2200      	movs	r2, #0
 8003456:	e7d5      	b.n	8003404 <__aeabi_f2d+0x20>
 8003458:	2200      	movs	r2, #0
 800345a:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <__aeabi_f2d+0x8c>)
 800345c:	e7d2      	b.n	8003404 <__aeabi_f2d+0x20>
 800345e:	0003      	movs	r3, r0
 8003460:	002a      	movs	r2, r5
 8003462:	3b0b      	subs	r3, #11
 8003464:	409a      	lsls	r2, r3
 8003466:	2500      	movs	r5, #0
 8003468:	e7e3      	b.n	8003432 <__aeabi_f2d+0x4e>
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	00000389 	.word	0x00000389
 8003470:	000007ff 	.word	0x000007ff

08003474 <__aeabi_d2f>:
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	004b      	lsls	r3, r1, #1
 8003478:	030f      	lsls	r7, r1, #12
 800347a:	0d5b      	lsrs	r3, r3, #21
 800347c:	4c3b      	ldr	r4, [pc, #236]	@ (800356c <__aeabi_d2f+0xf8>)
 800347e:	0f45      	lsrs	r5, r0, #29
 8003480:	b083      	sub	sp, #12
 8003482:	0a7f      	lsrs	r7, r7, #9
 8003484:	1c5e      	adds	r6, r3, #1
 8003486:	432f      	orrs	r7, r5
 8003488:	9000      	str	r0, [sp, #0]
 800348a:	9101      	str	r1, [sp, #4]
 800348c:	0fca      	lsrs	r2, r1, #31
 800348e:	00c5      	lsls	r5, r0, #3
 8003490:	4226      	tst	r6, r4
 8003492:	d00b      	beq.n	80034ac <__aeabi_d2f+0x38>
 8003494:	4936      	ldr	r1, [pc, #216]	@ (8003570 <__aeabi_d2f+0xfc>)
 8003496:	185c      	adds	r4, r3, r1
 8003498:	2cfe      	cmp	r4, #254	@ 0xfe
 800349a:	dd13      	ble.n	80034c4 <__aeabi_d2f+0x50>
 800349c:	20ff      	movs	r0, #255	@ 0xff
 800349e:	2300      	movs	r3, #0
 80034a0:	05c0      	lsls	r0, r0, #23
 80034a2:	4318      	orrs	r0, r3
 80034a4:	07d2      	lsls	r2, r2, #31
 80034a6:	4310      	orrs	r0, r2
 80034a8:	b003      	add	sp, #12
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <__aeabi_d2f+0x42>
 80034b0:	2000      	movs	r0, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	e7f4      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034b6:	433d      	orrs	r5, r7
 80034b8:	d0f0      	beq.n	800349c <__aeabi_d2f+0x28>
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	03db      	lsls	r3, r3, #15
 80034be:	20ff      	movs	r0, #255	@ 0xff
 80034c0:	433b      	orrs	r3, r7
 80034c2:	e7ed      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	dd14      	ble.n	80034f2 <__aeabi_d2f+0x7e>
 80034c8:	9b00      	ldr	r3, [sp, #0]
 80034ca:	00ff      	lsls	r7, r7, #3
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	4183      	sbcs	r3, r0
 80034d2:	0f69      	lsrs	r1, r5, #29
 80034d4:	433b      	orrs	r3, r7
 80034d6:	430b      	orrs	r3, r1
 80034d8:	0759      	lsls	r1, r3, #29
 80034da:	d041      	beq.n	8003560 <__aeabi_d2f+0xec>
 80034dc:	210f      	movs	r1, #15
 80034de:	4019      	ands	r1, r3
 80034e0:	2904      	cmp	r1, #4
 80034e2:	d028      	beq.n	8003536 <__aeabi_d2f+0xc2>
 80034e4:	3304      	adds	r3, #4
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	d525      	bpl.n	8003536 <__aeabi_d2f+0xc2>
 80034ea:	3401      	adds	r4, #1
 80034ec:	2300      	movs	r3, #0
 80034ee:	b2e0      	uxtb	r0, r4
 80034f0:	e7d6      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034f2:	0021      	movs	r1, r4
 80034f4:	3117      	adds	r1, #23
 80034f6:	dbdb      	blt.n	80034b0 <__aeabi_d2f+0x3c>
 80034f8:	2180      	movs	r1, #128	@ 0x80
 80034fa:	201e      	movs	r0, #30
 80034fc:	0409      	lsls	r1, r1, #16
 80034fe:	4339      	orrs	r1, r7
 8003500:	1b00      	subs	r0, r0, r4
 8003502:	281f      	cmp	r0, #31
 8003504:	dd1b      	ble.n	800353e <__aeabi_d2f+0xca>
 8003506:	2602      	movs	r6, #2
 8003508:	4276      	negs	r6, r6
 800350a:	1b34      	subs	r4, r6, r4
 800350c:	000e      	movs	r6, r1
 800350e:	40e6      	lsrs	r6, r4
 8003510:	0034      	movs	r4, r6
 8003512:	2820      	cmp	r0, #32
 8003514:	d004      	beq.n	8003520 <__aeabi_d2f+0xac>
 8003516:	4817      	ldr	r0, [pc, #92]	@ (8003574 <__aeabi_d2f+0x100>)
 8003518:	4684      	mov	ip, r0
 800351a:	4463      	add	r3, ip
 800351c:	4099      	lsls	r1, r3
 800351e:	430d      	orrs	r5, r1
 8003520:	002b      	movs	r3, r5
 8003522:	1e59      	subs	r1, r3, #1
 8003524:	418b      	sbcs	r3, r1
 8003526:	4323      	orrs	r3, r4
 8003528:	0759      	lsls	r1, r3, #29
 800352a:	d015      	beq.n	8003558 <__aeabi_d2f+0xe4>
 800352c:	210f      	movs	r1, #15
 800352e:	2400      	movs	r4, #0
 8003530:	4019      	ands	r1, r3
 8003532:	2904      	cmp	r1, #4
 8003534:	d117      	bne.n	8003566 <__aeabi_d2f+0xf2>
 8003536:	019b      	lsls	r3, r3, #6
 8003538:	0a5b      	lsrs	r3, r3, #9
 800353a:	b2e0      	uxtb	r0, r4
 800353c:	e7b0      	b.n	80034a0 <__aeabi_d2f+0x2c>
 800353e:	4c0e      	ldr	r4, [pc, #56]	@ (8003578 <__aeabi_d2f+0x104>)
 8003540:	191c      	adds	r4, r3, r4
 8003542:	002b      	movs	r3, r5
 8003544:	40a5      	lsls	r5, r4
 8003546:	40c3      	lsrs	r3, r0
 8003548:	40a1      	lsls	r1, r4
 800354a:	1e68      	subs	r0, r5, #1
 800354c:	4185      	sbcs	r5, r0
 800354e:	4329      	orrs	r1, r5
 8003550:	430b      	orrs	r3, r1
 8003552:	2400      	movs	r4, #0
 8003554:	0759      	lsls	r1, r3, #29
 8003556:	d1c1      	bne.n	80034dc <__aeabi_d2f+0x68>
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	2000      	movs	r0, #0
 800355c:	0a5b      	lsrs	r3, r3, #9
 800355e:	e79f      	b.n	80034a0 <__aeabi_d2f+0x2c>
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	b2e0      	uxtb	r0, r4
 8003564:	e79c      	b.n	80034a0 <__aeabi_d2f+0x2c>
 8003566:	3304      	adds	r3, #4
 8003568:	e7e5      	b.n	8003536 <__aeabi_d2f+0xc2>
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	000007fe 	.word	0x000007fe
 8003570:	fffffc80 	.word	0xfffffc80
 8003574:	fffffca2 	.word	0xfffffca2
 8003578:	fffffc82 	.word	0xfffffc82

0800357c <__clzsi2>:
 800357c:	211c      	movs	r1, #28
 800357e:	2301      	movs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	4298      	cmp	r0, r3
 8003584:	d301      	bcc.n	800358a <__clzsi2+0xe>
 8003586:	0c00      	lsrs	r0, r0, #16
 8003588:	3910      	subs	r1, #16
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	4298      	cmp	r0, r3
 800358e:	d301      	bcc.n	8003594 <__clzsi2+0x18>
 8003590:	0a00      	lsrs	r0, r0, #8
 8003592:	3908      	subs	r1, #8
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	4298      	cmp	r0, r3
 8003598:	d301      	bcc.n	800359e <__clzsi2+0x22>
 800359a:	0900      	lsrs	r0, r0, #4
 800359c:	3904      	subs	r1, #4
 800359e:	a202      	add	r2, pc, #8	@ (adr r2, 80035a8 <__clzsi2+0x2c>)
 80035a0:	5c10      	ldrb	r0, [r2, r0]
 80035a2:	1840      	adds	r0, r0, r1
 80035a4:	4770      	bx	lr
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	02020304 	.word	0x02020304
 80035ac:	01010101 	.word	0x01010101
	...

080035b8 <__clzdi2>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	2900      	cmp	r1, #0
 80035bc:	d103      	bne.n	80035c6 <__clzdi2+0xe>
 80035be:	f7ff ffdd 	bl	800357c <__clzsi2>
 80035c2:	3020      	adds	r0, #32
 80035c4:	e002      	b.n	80035cc <__clzdi2+0x14>
 80035c6:	0008      	movs	r0, r1
 80035c8:	f7ff ffd8 	bl	800357c <__clzsi2>
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)

080035d0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	0004      	movs	r4, r0
 80035d8:	0008      	movs	r0, r1
 80035da:	0011      	movs	r1, r2
 80035dc:	1dbb      	adds	r3, r7, #6
 80035de:	1c22      	adds	r2, r4, #0
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	1c02      	adds	r2, r0, #0
 80035e6:	801a      	strh	r2, [r3, #0]
 80035e8:	1cbb      	adds	r3, r7, #2
 80035ea:	1c0a      	adds	r2, r1, #0
 80035ec:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	8818      	ldrh	r0, [r3, #0]
 80035f2:	1dbb      	adds	r3, r7, #6
 80035f4:	8819      	ldrh	r1, [r3, #0]
 80035f6:	1cbb      	adds	r3, r7, #2
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	001a      	movs	r2, r3
 80035fc:	f000 fee8 	bl	80043d0 <ST7735_DrawPixel>
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b003      	add	sp, #12
 8003606:	bd90      	pop	{r4, r7, pc}

08003608 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360a:	46c6      	mov	lr, r8
 800360c:	b500      	push	{lr}
 800360e:	b090      	sub	sp, #64	@ 0x40
 8003610:	af04      	add	r7, sp, #16
 8003612:	468c      	mov	ip, r1
 8003614:	0016      	movs	r6, r2
 8003616:	0019      	movs	r1, r3
 8003618:	221e      	movs	r2, #30
 800361a:	18ba      	adds	r2, r7, r2
 800361c:	1c03      	adds	r3, r0, #0
 800361e:	8013      	strh	r3, [r2, #0]
 8003620:	231c      	movs	r3, #28
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	4662      	mov	r2, ip
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	201a      	movs	r0, #26
 800362a:	183b      	adds	r3, r7, r0
 800362c:	1c32      	adds	r2, r6, #0
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2018      	movs	r0, #24
 8003632:	183b      	adds	r3, r7, r0
 8003634:	1c0a      	adds	r2, r1, #0
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	466b      	mov	r3, sp
 800363a:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 800363c:	230c      	movs	r3, #12
 800363e:	0001      	movs	r1, r0
 8003640:	185e      	adds	r6, r3, r1
 8003642:	19f2      	adds	r2, r6, r7
 8003644:	2030      	movs	r0, #48	@ 0x30
 8003646:	1846      	adds	r6, r0, r1
 8003648:	19f3      	adds	r3, r6, r7
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 800364e:	201a      	movs	r0, #26
 8003650:	183b      	adds	r3, r7, r0
 8003652:	2200      	movs	r2, #0
 8003654:	5e9b      	ldrsh	r3, [r3, r2]
 8003656:	187a      	adds	r2, r7, r1
 8003658:	2000      	movs	r0, #0
 800365a:	5e12      	ldrsh	r2, [r2, r0]
 800365c:	4353      	muls	r3, r2
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003662:	001a      	movs	r2, r3
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	60fa      	str	r2, [r7, #12]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	0002      	movs	r2, r0
 8003670:	0ed2      	lsrs	r2, r2, #27
 8003672:	000e      	movs	r6, r1
 8003674:	0176      	lsls	r6, r6, #5
 8003676:	617e      	str	r6, [r7, #20]
 8003678:	697e      	ldr	r6, [r7, #20]
 800367a:	4316      	orrs	r6, r2
 800367c:	617e      	str	r6, [r7, #20]
 800367e:	0002      	movs	r2, r0
 8003680:	0152      	lsls	r2, r2, #5
 8003682:	613a      	str	r2, [r7, #16]
 8003684:	001a      	movs	r2, r3
 8003686:	603a      	str	r2, [r7, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	0002      	movs	r2, r0
 8003692:	0ed2      	lsrs	r2, r2, #27
 8003694:	000e      	movs	r6, r1
 8003696:	0175      	lsls	r5, r6, #5
 8003698:	4315      	orrs	r5, r2
 800369a:	0002      	movs	r2, r0
 800369c:	0154      	lsls	r4, r2, #5
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3307      	adds	r3, #7
 80036a2:	08db      	lsrs	r3, r3, #3
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	466a      	mov	r2, sp
 80036a8:	1ad2      	subs	r2, r2, r3
 80036aa:	4695      	mov	sp, r2
 80036ac:	ab04      	add	r3, sp, #16
 80036ae:	3301      	adds	r3, #1
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	2200      	movs	r2, #0
 80036ba:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 80036bc:	201a      	movs	r0, #26
 80036be:	183b      	adds	r3, r7, r0
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	2118      	movs	r1, #24
 80036c4:	187a      	adds	r2, r7, r1
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	4353      	muls	r3, r2
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ce:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 80036d0:	221e      	movs	r2, #30
 80036d2:	18bb      	adds	r3, r7, r2
 80036d4:	881c      	ldrh	r4, [r3, #0]
 80036d6:	231c      	movs	r3, #28
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	881d      	ldrh	r5, [r3, #0]
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	0008      	movs	r0, r1
 80036e2:	187a      	adds	r2, r7, r1
 80036e4:	8812      	ldrh	r2, [r2, #0]
 80036e6:	210c      	movs	r1, #12
 80036e8:	1809      	adds	r1, r1, r0
 80036ea:	19c9      	adds	r1, r1, r7
 80036ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036ee:	2601      	movs	r6, #1
 80036f0:	46b4      	mov	ip, r6
 80036f2:	4666      	mov	r6, ip
 80036f4:	9602      	str	r6, [sp, #8]
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	002b      	movs	r3, r5
 80036fc:	0022      	movs	r2, r4
 80036fe:	f000 fbc5 	bl	8003e8c <drawImage>
 8003702:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b00c      	add	sp, #48	@ 0x30
 800370a:	bc80      	pop	{r7}
 800370c:	46b8      	mov	r8, r7
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003710 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	0004      	movs	r4, r0
 8003718:	0008      	movs	r0, r1
 800371a:	0011      	movs	r1, r2
 800371c:	1dbb      	adds	r3, r7, #6
 800371e:	1c22      	adds	r2, r4, #0
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	1c02      	adds	r2, r0, #0
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	1cbb      	adds	r3, r7, #2
 800372a:	1c0a      	adds	r2, r1, #0
 800372c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800372e:	1cbb      	adds	r3, r7, #2
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	2100      	movs	r1, #0
 8003736:	5e59      	ldrsh	r1, [r3, r1]
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	2000      	movs	r0, #0
 800373c:	5e1b      	ldrsh	r3, [r3, r0]
 800373e:	0018      	movs	r0, r3
 8003740:	f7ff ff46 	bl	80035d0 <drawPixel>
}
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b003      	add	sp, #12
 800374a:	bd90      	pop	{r4, r7, pc}

0800374c <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	0005      	movs	r5, r0
 8003754:	000c      	movs	r4, r1
 8003756:	0010      	movs	r0, r2
 8003758:	0019      	movs	r1, r3
 800375a:	1dbb      	adds	r3, r7, #6
 800375c:	1c2a      	adds	r2, r5, #0
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	1c22      	adds	r2, r4, #0
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	1c02      	adds	r2, r0, #0
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	003b      	movs	r3, r7
 800376e:	1c0a      	adds	r2, r1, #0
 8003770:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003772:	003b      	movs	r3, r7
 8003774:	2200      	movs	r2, #0
 8003776:	5e9a      	ldrsh	r2, [r3, r2]
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	2100      	movs	r1, #0
 800377c:	5e5b      	ldrsh	r3, [r3, r1]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	17d9      	asrs	r1, r3, #31
 8003782:	185a      	adds	r2, r3, r1
 8003784:	404a      	eors	r2, r1
 8003786:	1cbb      	adds	r3, r7, #2
 8003788:	2100      	movs	r1, #0
 800378a:	5e59      	ldrsh	r1, [r3, r1]
 800378c:	1dbb      	adds	r3, r7, #6
 800378e:	2000      	movs	r0, #0
 8003790:	5e1b      	ldrsh	r3, [r3, r0]
 8003792:	1acb      	subs	r3, r1, r3
 8003794:	17d9      	asrs	r1, r3, #31
 8003796:	185b      	adds	r3, r3, r1
 8003798:	404b      	eors	r3, r1
 800379a:	2101      	movs	r1, #1
 800379c:	429a      	cmp	r2, r3
 800379e:	dc01      	bgt.n	80037a4 <writeLine+0x58>
 80037a0:	2300      	movs	r3, #0
 80037a2:	1c19      	adds	r1, r3, #0
 80037a4:	b2ca      	uxtb	r2, r1
 80037a6:	211a      	movs	r1, #26
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	801a      	strh	r2, [r3, #0]
    if (steep) {
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2200      	movs	r2, #0
 80037b0:	5e9b      	ldrsh	r3, [r3, r2]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d019      	beq.n	80037ea <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 80037b6:	2118      	movs	r1, #24
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	1dba      	adds	r2, r7, #6
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	187a      	adds	r2, r7, r1
 80037cc:	8812      	ldrh	r2, [r2, #0]
 80037ce:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 80037d0:	2116      	movs	r1, #22
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	1cba      	adds	r2, r7, #2
 80037d6:	8812      	ldrh	r2, [r2, #0]
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	1cbb      	adds	r3, r7, #2
 80037dc:	003a      	movs	r2, r7
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	801a      	strh	r2, [r3, #0]
 80037e2:	003b      	movs	r3, r7
 80037e4:	187a      	adds	r2, r7, r1
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 80037ea:	1dba      	adds	r2, r7, #6
 80037ec:	1cbb      	adds	r3, r7, #2
 80037ee:	2100      	movs	r1, #0
 80037f0:	5e52      	ldrsh	r2, [r2, r1]
 80037f2:	2100      	movs	r1, #0
 80037f4:	5e5b      	ldrsh	r3, [r3, r1]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	dd19      	ble.n	800382e <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 80037fa:	2114      	movs	r1, #20
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	1dba      	adds	r2, r7, #6
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	1dbb      	adds	r3, r7, #6
 8003806:	1cba      	adds	r2, r7, #2
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	1cbb      	adds	r3, r7, #2
 800380e:	187a      	adds	r2, r7, r1
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8003814:	2112      	movs	r1, #18
 8003816:	187b      	adds	r3, r7, r1
 8003818:	1d3a      	adds	r2, r7, #4
 800381a:	8812      	ldrh	r2, [r2, #0]
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	003a      	movs	r2, r7
 8003822:	8812      	ldrh	r2, [r2, #0]
 8003824:	801a      	strh	r2, [r3, #0]
 8003826:	003b      	movs	r3, r7
 8003828:	187a      	adds	r2, r7, r1
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800382e:	1cbb      	adds	r3, r7, #2
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	1dbb      	adds	r3, r7, #6
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	b29a      	uxth	r2, r3
 800383a:	2010      	movs	r0, #16
 800383c:	183b      	adds	r3, r7, r0
 800383e:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8003840:	003b      	movs	r3, r7
 8003842:	2200      	movs	r2, #0
 8003844:	5e9a      	ldrsh	r2, [r3, r2]
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2100      	movs	r1, #0
 800384a:	5e5b      	ldrsh	r3, [r3, r1]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	17d9      	asrs	r1, r3, #31
 8003850:	185a      	adds	r2, r3, r1
 8003852:	404a      	eors	r2, r1
 8003854:	230e      	movs	r3, #14
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 800385a:	231e      	movs	r3, #30
 800385c:	18fa      	adds	r2, r7, r3
 800385e:	183b      	adds	r3, r7, r0
 8003860:	2100      	movs	r1, #0
 8003862:	5e5b      	ldrsh	r3, [r3, r1]
 8003864:	2b00      	cmp	r3, #0
 8003866:	da00      	bge.n	800386a <writeLine+0x11e>
 8003868:	3301      	adds	r3, #1
 800386a:	105b      	asrs	r3, r3, #1
 800386c:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 800386e:	1d3a      	adds	r2, r7, #4
 8003870:	003b      	movs	r3, r7
 8003872:	2100      	movs	r1, #0
 8003874:	5e52      	ldrsh	r2, [r2, r1]
 8003876:	2100      	movs	r1, #0
 8003878:	5e5b      	ldrsh	r3, [r3, r1]
 800387a:	429a      	cmp	r2, r3
 800387c:	da04      	bge.n	8003888 <writeLine+0x13c>
        ystep = 1;
 800387e:	231c      	movs	r3, #28
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2201      	movs	r2, #1
 8003884:	801a      	strh	r2, [r3, #0]
 8003886:	e04d      	b.n	8003924 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003888:	231c      	movs	r3, #28
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2201      	movs	r2, #1
 800388e:	4252      	negs	r2, r2
 8003890:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8003892:	e047      	b.n	8003924 <writeLine+0x1d8>
        if (steep) {
 8003894:	231a      	movs	r3, #26
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	5e9b      	ldrsh	r3, [r3, r2]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <writeLine+0x16e>
            writePixel(y0, x0, color);
 80038a0:	2330      	movs	r3, #48	@ 0x30
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	1dbb      	adds	r3, r7, #6
 80038a8:	2100      	movs	r1, #0
 80038aa:	5e59      	ldrsh	r1, [r3, r1]
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2000      	movs	r0, #0
 80038b0:	5e1b      	ldrsh	r3, [r3, r0]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7ff ff2c 	bl	8003710 <writePixel>
 80038b8:	e00b      	b.n	80038d2 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 80038ba:	2330      	movs	r3, #48	@ 0x30
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	881a      	ldrh	r2, [r3, #0]
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2100      	movs	r1, #0
 80038c4:	5e59      	ldrsh	r1, [r3, r1]
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	2000      	movs	r0, #0
 80038ca:	5e1b      	ldrsh	r3, [r3, r0]
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff ff1f 	bl	8003710 <writePixel>
        }
        err -= dy;
 80038d2:	211e      	movs	r1, #30
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	230e      	movs	r3, #14
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2200      	movs	r2, #0
 80038ea:	5e9b      	ldrsh	r3, [r3, r2]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	da11      	bge.n	8003914 <writeLine+0x1c8>
            y0 += ystep;
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	231c      	movs	r3, #28
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	18d3      	adds	r3, r2, r3
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	2310      	movs	r3, #16
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	187b      	adds	r3, r7, r1
 8003912:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003914:	1dbb      	adds	r3, r7, #6
 8003916:	2200      	movs	r2, #0
 8003918:	5e9b      	ldrsh	r3, [r3, r2]
 800391a:	b29b      	uxth	r3, r3
 800391c:	3301      	adds	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	1dba      	adds	r2, r7, #6
 8003926:	1cbb      	adds	r3, r7, #2
 8003928:	2100      	movs	r1, #0
 800392a:	5e52      	ldrsh	r2, [r2, r1]
 800392c:	2100      	movs	r1, #0
 800392e:	5e5b      	ldrsh	r3, [r3, r1]
 8003930:	429a      	cmp	r2, r3
 8003932:	ddaf      	ble.n	8003894 <writeLine+0x148>
        }
    }
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b008      	add	sp, #32
 800393c:	bdb0      	pop	{r4, r5, r7, pc}

0800393e <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800393e:	b5b0      	push	{r4, r5, r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af02      	add	r7, sp, #8
 8003944:	0005      	movs	r5, r0
 8003946:	000c      	movs	r4, r1
 8003948:	0010      	movs	r0, r2
 800394a:	0019      	movs	r1, r3
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	1c2a      	adds	r2, r5, #0
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	1c22      	adds	r2, r4, #0
 8003956:	801a      	strh	r2, [r3, #0]
 8003958:	1cbb      	adds	r3, r7, #2
 800395a:	1c02      	adds	r2, r0, #0
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	003b      	movs	r3, r7
 8003960:	1c0a      	adds	r2, r1, #0
 8003962:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	881a      	ldrh	r2, [r3, #0]
 8003968:	1cbb      	adds	r3, r7, #2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	18d3      	adds	r3, r2, r3
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	b21c      	sxth	r4, r3
 8003976:	1dbb      	adds	r3, r7, #6
 8003978:	2200      	movs	r2, #0
 800397a:	5e9a      	ldrsh	r2, [r3, r2]
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	2100      	movs	r1, #0
 8003980:	5e59      	ldrsh	r1, [r3, r1]
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	2000      	movs	r0, #0
 8003986:	5e18      	ldrsh	r0, [r3, r0]
 8003988:	003b      	movs	r3, r7
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	0023      	movs	r3, r4
 8003990:	f7ff fedc 	bl	800374c <writeLine>
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bdb0      	pop	{r4, r5, r7, pc}

0800399c <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	0005      	movs	r5, r0
 80039a4:	000c      	movs	r4, r1
 80039a6:	0010      	movs	r0, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	1dbb      	adds	r3, r7, #6
 80039ac:	1c2a      	adds	r2, r5, #0
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	1c22      	adds	r2, r4, #0
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	1cbb      	adds	r3, r7, #2
 80039b8:	1c02      	adds	r2, r0, #0
 80039ba:	801a      	strh	r2, [r3, #0]
 80039bc:	003b      	movs	r3, r7
 80039be:	1c0a      	adds	r2, r1, #0
 80039c0:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 80039c2:	1dbb      	adds	r3, r7, #6
 80039c4:	881a      	ldrh	r2, [r3, #0]
 80039c6:	1cbb      	adds	r3, r7, #2
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	18d3      	adds	r3, r2, r3
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b21a      	sxth	r2, r3
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	2400      	movs	r4, #0
 80039d8:	5f1c      	ldrsh	r4, [r3, r4]
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	2100      	movs	r1, #0
 80039de:	5e59      	ldrsh	r1, [r3, r1]
 80039e0:	1dbb      	adds	r3, r7, #6
 80039e2:	2000      	movs	r0, #0
 80039e4:	5e18      	ldrsh	r0, [r3, r0]
 80039e6:	003b      	movs	r3, r7
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	0023      	movs	r3, r4
 80039ee:	f7ff fead 	bl	800374c <writeLine>
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bdb0      	pop	{r4, r5, r7, pc}

080039fa <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80039fa:	b5b0      	push	{r4, r5, r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af02      	add	r7, sp, #8
 8003a00:	0005      	movs	r5, r0
 8003a02:	000c      	movs	r4, r1
 8003a04:	0010      	movs	r0, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	1c2a      	adds	r2, r5, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	1c22      	adds	r2, r4, #0
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	1cbb      	adds	r3, r7, #2
 8003a16:	1c02      	adds	r2, r0, #0
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	003b      	movs	r3, r7
 8003a1c:	1c0a      	adds	r2, r1, #0
 8003a1e:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003a20:	1dba      	adds	r2, r7, #6
 8003a22:	1cbb      	adds	r3, r7, #2
 8003a24:	2100      	movs	r1, #0
 8003a26:	5e52      	ldrsh	r2, [r2, r1]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	5e5b      	ldrsh	r3, [r3, r1]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d12a      	bne.n	8003a86 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003a30:	1d3a      	adds	r2, r7, #4
 8003a32:	003b      	movs	r3, r7
 8003a34:	2100      	movs	r1, #0
 8003a36:	5e52      	ldrsh	r2, [r2, r1]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5e5b      	ldrsh	r3, [r3, r1]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	dd0c      	ble.n	8003a5a <drawLine+0x60>
 8003a40:	210c      	movs	r1, #12
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	1d3a      	adds	r2, r7, #4
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	003a      	movs	r2, r7
 8003a4e:	8812      	ldrh	r2, [r2, #0]
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	003b      	movs	r3, r7
 8003a54:	187a      	adds	r2, r7, r1
 8003a56:	8812      	ldrh	r2, [r2, #0]
 8003a58:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003a5a:	003b      	movs	r3, r7
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	b21a      	sxth	r2, r3
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	881c      	ldrh	r4, [r3, #0]
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	2100      	movs	r1, #0
 8003a76:	5e59      	ldrsh	r1, [r3, r1]
 8003a78:	1dbb      	adds	r3, r7, #6
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	5e18      	ldrsh	r0, [r3, r0]
 8003a7e:	0023      	movs	r3, r4
 8003a80:	f7ff ff5d 	bl	800393e <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003a84:	e045      	b.n	8003b12 <drawLine+0x118>
    } else if(y0 == y1){
 8003a86:	1d3a      	adds	r2, r7, #4
 8003a88:	003b      	movs	r3, r7
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5e52      	ldrsh	r2, [r2, r1]
 8003a8e:	2100      	movs	r1, #0
 8003a90:	5e5b      	ldrsh	r3, [r3, r1]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d12a      	bne.n	8003aec <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003a96:	1dba      	adds	r2, r7, #6
 8003a98:	1cbb      	adds	r3, r7, #2
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5e52      	ldrsh	r2, [r2, r1]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5e5b      	ldrsh	r3, [r3, r1]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	dd0c      	ble.n	8003ac0 <drawLine+0xc6>
 8003aa6:	210e      	movs	r1, #14
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	1dba      	adds	r2, r7, #6
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	1cba      	adds	r2, r7, #2
 8003ab4:	8812      	ldrh	r2, [r2, #0]
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	1cbb      	adds	r3, r7, #2
 8003aba:	187a      	adds	r2, r7, r1
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003ac0:	1cbb      	adds	r3, r7, #2
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3301      	adds	r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	881c      	ldrh	r4, [r3, #0]
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	2100      	movs	r1, #0
 8003adc:	5e59      	ldrsh	r1, [r3, r1]
 8003ade:	1dbb      	adds	r3, r7, #6
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	5e18      	ldrsh	r0, [r3, r0]
 8003ae4:	0023      	movs	r3, r4
 8003ae6:	f7ff ff59 	bl	800399c <drawFastHLine>
}
 8003aea:	e012      	b.n	8003b12 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003aec:	003b      	movs	r3, r7
 8003aee:	2400      	movs	r4, #0
 8003af0:	5f1c      	ldrsh	r4, [r3, r4]
 8003af2:	1cbb      	adds	r3, r7, #2
 8003af4:	2200      	movs	r2, #0
 8003af6:	5e9a      	ldrsh	r2, [r3, r2]
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	2100      	movs	r1, #0
 8003afc:	5e59      	ldrsh	r1, [r3, r1]
 8003afe:	1dbb      	adds	r3, r7, #6
 8003b00:	2000      	movs	r0, #0
 8003b02:	5e18      	ldrsh	r0, [r3, r0]
 8003b04:	2320      	movs	r3, #32
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	0023      	movs	r3, r4
 8003b0e:	f7ff fe1d 	bl	800374c <writeLine>
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b004      	add	sp, #16
 8003b18:	bdb0      	pop	{r4, r5, r7, pc}

08003b1a <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1c:	b089      	sub	sp, #36	@ 0x24
 8003b1e:	af02      	add	r7, sp, #8
 8003b20:	0004      	movs	r4, r0
 8003b22:	0008      	movs	r0, r1
 8003b24:	60ba      	str	r2, [r7, #8]
 8003b26:	0019      	movs	r1, r3
 8003b28:	230e      	movs	r3, #14
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	1c22      	adds	r2, r4, #0
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	230c      	movs	r3, #12
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	1c02      	adds	r2, r0, #0
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	1dbb      	adds	r3, r7, #6
 8003b3a:	1c0a      	adds	r2, r1, #0
 8003b3c:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003b3e:	2316      	movs	r3, #22
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003b46:	e03f      	b.n	8003bc8 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003b48:	2516      	movs	r5, #22
 8003b4a:	197b      	adds	r3, r7, r5
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	469c      	mov	ip, r3
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	2400      	movs	r4, #0
 8003b5a:	5f1c      	ldrsh	r4, [r3, r4]
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2100      	movs	r1, #0
 8003b62:	5e59      	ldrsh	r1, [r3, r1]
 8003b64:	260e      	movs	r6, #14
 8003b66:	19bb      	adds	r3, r7, r6
 8003b68:	2000      	movs	r0, #0
 8003b6a:	5e18      	ldrsh	r0, [r3, r0]
 8003b6c:	232c      	movs	r3, #44	@ 0x2c
 8003b6e:	2208      	movs	r2, #8
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2328      	movs	r3, #40	@ 0x28
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	2200      	movs	r2, #0
 8003b80:	5e9b      	ldrsh	r3, [r3, r2]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	0023      	movs	r3, r4
 8003b86:	4662      	mov	r2, ip
 8003b88:	f000 f82c 	bl	8003be4 <drawChar>
		x+=(size*6)+spacing;
 8003b8c:	232c      	movs	r3, #44	@ 0x2c
 8003b8e:	2108      	movs	r1, #8
 8003b90:	185b      	adds	r3, r3, r1
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	1c1a      	adds	r2, r3, #0
 8003b9a:	1c13      	adds	r3, r2, #0
 8003b9c:	18db      	adds	r3, r3, r3
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	18db      	adds	r3, r3, r3
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	2330      	movs	r3, #48	@ 0x30
 8003ba6:	185b      	adds	r3, r3, r1
 8003ba8:	19db      	adds	r3, r3, r7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	18d3      	adds	r3, r2, r3
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	19bb      	adds	r3, r7, r6
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	18d3      	adds	r3, r2, r3
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	19bb      	adds	r3, r7, r6
 8003bbc:	801a      	strh	r2, [r3, #0]
		i++;
 8003bbe:	197b      	adds	r3, r7, r5
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	3201      	adds	r2, #1
 8003bc6:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8003bc8:	2316      	movs	r3, #22
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	18d3      	adds	r3, r2, r3
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1b7      	bne.n	8003b48 <drawString+0x2e>
	}
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b007      	add	sp, #28
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003be4 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	0005      	movs	r5, r0
 8003bec:	000c      	movs	r4, r1
 8003bee:	0010      	movs	r0, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	1dbb      	adds	r3, r7, #6
 8003bf4:	1c2a      	adds	r2, r5, #0
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	1c22      	adds	r2, r4, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	1cfb      	adds	r3, r7, #3
 8003c00:	1c02      	adds	r2, r0, #0
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	003b      	movs	r3, r7
 8003c06:	1c0a      	adds	r2, r1, #0
 8003c08:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e0bd      	b.n	8003d8c <drawChar+0x1a8>
    if ((i) == 5)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d104      	bne.n	8003c20 <drawChar+0x3c>
      line = 0x0;
 8003c16:	2317      	movs	r3, #23
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e00b      	b.n	8003c38 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003c20:	1cfb      	adds	r3, r7, #3
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	0013      	movs	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	189a      	adds	r2, r3, r2
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	18d2      	adds	r2, r2, r3
 8003c2e:	2317      	movs	r3, #23
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	495b      	ldr	r1, [pc, #364]	@ (8003da0 <drawChar+0x1bc>)
 8003c34:	5c8a      	ldrb	r2, [r1, r2]
 8003c36:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e09f      	b.n	8003d7e <drawChar+0x19a>
      if (line & 0x1) {
 8003c3e:	2317      	movs	r3, #23
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	4013      	ands	r3, r2
 8003c48:	d043      	beq.n	8003cd2 <drawChar+0xee>
        if (size == 1)
 8003c4a:	232c      	movs	r3, #44	@ 0x2c
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d115      	bne.n	8003c80 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	1dbb      	adds	r3, r7, #6
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b218      	sxth	r0, r3
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3307      	adds	r3, #7
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b219      	sxth	r1, r3
 8003c74:	003b      	movs	r3, r7
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	001a      	movs	r2, r3
 8003c7a:	f7ff fd49 	bl	8003710 <writePixel>
 8003c7e:	e075      	b.n	8003d6c <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8003c80:	212c      	movs	r1, #44	@ 0x2c
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	4353      	muls	r3, r2
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b218      	sxth	r0, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2207      	movs	r2, #7
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	000c      	movs	r4, r1
 8003ca4:	187a      	adds	r2, r7, r1
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	4353      	muls	r3, r2
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b219      	sxth	r1, r3
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b21c      	sxth	r4, r3
 8003cc4:	003b      	movs	r3, r7
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	0023      	movs	r3, r4
 8003ccc:	f7ff fc9c 	bl	8003608 <fillRect>
 8003cd0:	e04c      	b.n	8003d6c <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003cd2:	2428      	movs	r4, #40	@ 0x28
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	0039      	movs	r1, r7
 8003cd8:	2200      	movs	r2, #0
 8003cda:	5e9a      	ldrsh	r2, [r3, r2]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	5ecb      	ldrsh	r3, [r1, r3]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d043      	beq.n	8003d6c <drawChar+0x188>
        if (size == 1) // default size
 8003ce4:	232c      	movs	r3, #44	@ 0x2c
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d115      	bne.n	8003d1a <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	1dbb      	adds	r3, r7, #6
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	18d3      	adds	r3, r2, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b218      	sxth	r0, r3
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3307      	adds	r3, #7
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b219      	sxth	r1, r3
 8003d0e:	193b      	adds	r3, r7, r4
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	001a      	movs	r2, r3
 8003d14:	f7ff fcfc 	bl	8003710 <writePixel>
 8003d18:	e028      	b.n	8003d6c <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8003d1a:	212c      	movs	r1, #44	@ 0x2c
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	b292      	uxth	r2, r2
 8003d26:	4353      	muls	r3, r2
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	1dbb      	adds	r3, r7, #6
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b218      	sxth	r0, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2207      	movs	r2, #7
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	000c      	movs	r4, r1
 8003d3e:	187a      	adds	r2, r7, r1
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	b292      	uxth	r2, r2
 8003d44:	4353      	muls	r3, r2
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b219      	sxth	r1, r3
 8003d52:	193b      	adds	r3, r7, r4
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b21a      	sxth	r2, r3
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b21c      	sxth	r4, r3
 8003d5e:	2328      	movs	r3, #40	@ 0x28
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	0023      	movs	r3, r4
 8003d68:	f7ff fc4e 	bl	8003608 <fillRect>
        }
      }
      line >>= 1;
 8003d6c:	2217      	movs	r2, #23
 8003d6e:	18bb      	adds	r3, r7, r2
 8003d70:	18ba      	adds	r2, r7, r2
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	0852      	lsrs	r2, r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	dc00      	bgt.n	8003d86 <drawChar+0x1a2>
 8003d84:	e75b      	b.n	8003c3e <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	dc00      	bgt.n	8003d94 <drawChar+0x1b0>
 8003d92:	e73d      	b.n	8003c10 <drawChar+0x2c>
    }
  }
}
 8003d94:	46c0      	nop			@ (mov r8, r8)
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b006      	add	sp, #24
 8003d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	080111ec 	.word	0x080111ec

08003da4 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da6:	b091      	sub	sp, #68	@ 0x44
 8003da8:	af04      	add	r7, sp, #16
 8003daa:	231e      	movs	r3, #30
 8003dac:	18f9      	adds	r1, r7, r3
 8003dae:	8008      	strh	r0, [r1, #0]
 8003db0:	4669      	mov	r1, sp
 8003db2:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8003db4:	210c      	movs	r1, #12
 8003db6:	2318      	movs	r3, #24
 8003db8:	18cb      	adds	r3, r1, r3
 8003dba:	19d9      	adds	r1, r3, r7
 8003dbc:	231e      	movs	r3, #30
 8003dbe:	18f8      	adds	r0, r7, r3
 8003dc0:	8800      	ldrh	r0, [r0, #0]
 8003dc2:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8003dc4:	492f      	ldr	r1, [pc, #188]	@ (8003e84 <fillScreen+0xe0>)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	5ec9      	ldrsh	r1, [r1, r3]
 8003dca:	0008      	movs	r0, r1
 8003dcc:	492e      	ldr	r1, [pc, #184]	@ (8003e88 <fillScreen+0xe4>)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	5ec9      	ldrsh	r1, [r1, r3]
 8003dd2:	4341      	muls	r1, r0
 8003dd4:	1e48      	subs	r0, r1, #1
 8003dd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003dd8:	0008      	movs	r0, r1
 8003dda:	6138      	str	r0, [r7, #16]
 8003ddc:	2000      	movs	r0, #0
 8003dde:	6178      	str	r0, [r7, #20]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	0010      	movs	r0, r2
 8003de6:	0ec0      	lsrs	r0, r0, #27
 8003de8:	613a      	str	r2, [r7, #16]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	015d      	lsls	r5, r3, #5
 8003dee:	4305      	orrs	r5, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015c      	lsls	r4, r3, #5
 8003df4:	0008      	movs	r0, r1
 8003df6:	6038      	str	r0, [r7, #0]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	683c      	ldr	r4, [r7, #0]
 8003dfe:	687d      	ldr	r5, [r7, #4]
 8003e00:	0023      	movs	r3, r4
 8003e02:	0ed8      	lsrs	r0, r3, #27
 8003e04:	002b      	movs	r3, r5
 8003e06:	015b      	lsls	r3, r3, #5
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4303      	orrs	r3, r0
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	0023      	movs	r3, r4
 8003e12:	015b      	lsls	r3, r3, #5
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	000b      	movs	r3, r1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	466a      	mov	r2, sp
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	469d      	mov	sp, r3
 8003e26:	ab04      	add	r3, sp, #16
 8003e28:	3301      	adds	r3, #1
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	2200      	movs	r2, #0
 8003e34:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8003e36:	4b13      	ldr	r3, [pc, #76]	@ (8003e84 <fillScreen+0xe0>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	5e9b      	ldrsh	r3, [r3, r2]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4a12      	ldr	r2, [pc, #72]	@ (8003e88 <fillScreen+0xe4>)
 8003e40:	2000      	movs	r0, #0
 8003e42:	5e12      	ldrsh	r2, [r2, r0]
 8003e44:	b292      	uxth	r2, r2
 8003e46:	4353      	muls	r3, r2
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <fillScreen+0xe0>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	5e9b      	ldrsh	r3, [r3, r2]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4a0c      	ldr	r2, [pc, #48]	@ (8003e88 <fillScreen+0xe4>)
 8003e58:	2000      	movs	r0, #0
 8003e5a:	5e12      	ldrsh	r2, [r2, r0]
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	210c      	movs	r1, #12
 8003e60:	2018      	movs	r0, #24
 8003e62:	1809      	adds	r1, r1, r0
 8003e64:	19c9      	adds	r1, r1, r7
 8003e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e68:	2401      	movs	r4, #1
 8003e6a:	9402      	str	r4, [sp, #8]
 8003e6c:	9201      	str	r2, [sp, #4]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2200      	movs	r2, #0
 8003e74:	f000 f80a 	bl	8003e8c <drawImage>
 8003e78:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b00d      	add	sp, #52	@ 0x34
 8003e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	20000bac 	.word	0x20000bac
 8003e88:	20000bae 	.word	0x20000bae

08003e8c <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8003e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8e:	46c6      	mov	lr, r8
 8003e90:	b500      	push	{lr}
 8003e92:	b092      	sub	sp, #72	@ 0x48
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e98:	6239      	str	r1, [r7, #32]
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	231e      	movs	r3, #30
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	231c      	movs	r3, #28
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	1c0a      	adds	r2, r1, #0
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	466b      	mov	r3, sp
 8003eac:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8003eae:	2322      	movs	r3, #34	@ 0x22
 8003eb0:	2118      	movs	r1, #24
 8003eb2:	185b      	adds	r3, r3, r1
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8003eba:	2340      	movs	r3, #64	@ 0x40
 8003ebc:	185b      	adds	r3, r3, r1
 8003ebe:	19db      	adds	r3, r3, r7
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	2244      	movs	r2, #68	@ 0x44
 8003ec4:	1852      	adds	r2, r2, r1
 8003ec6:	19d2      	adds	r2, r2, r7
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	4353      	muls	r3, r2
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	60ba      	str	r2, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	68b8      	ldr	r0, [r7, #8]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	0002      	movs	r2, r0
 8003ede:	0f12      	lsrs	r2, r2, #28
 8003ee0:	000e      	movs	r6, r1
 8003ee2:	0136      	lsls	r6, r6, #4
 8003ee4:	617e      	str	r6, [r7, #20]
 8003ee6:	697e      	ldr	r6, [r7, #20]
 8003ee8:	4316      	orrs	r6, r2
 8003eea:	617e      	str	r6, [r7, #20]
 8003eec:	0002      	movs	r2, r0
 8003eee:	0112      	lsls	r2, r2, #4
 8003ef0:	613a      	str	r2, [r7, #16]
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	603a      	str	r2, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	0002      	movs	r2, r0
 8003f00:	0f12      	lsrs	r2, r2, #28
 8003f02:	000e      	movs	r6, r1
 8003f04:	0135      	lsls	r5, r6, #4
 8003f06:	4315      	orrs	r5, r2
 8003f08:	0002      	movs	r2, r0
 8003f0a:	0114      	lsls	r4, r2, #4
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	3307      	adds	r3, #7
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	466a      	mov	r2, sp
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	469d      	mov	sp, r3
 8003f1a:	ab02      	add	r3, sp, #8
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8003f24:	2326      	movs	r3, #38	@ 0x26
 8003f26:	2118      	movs	r1, #24
 8003f28:	185b      	adds	r3, r3, r1
 8003f2a:	19db      	adds	r3, r3, r7
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	e04d      	b.n	8003fce <drawImage+0x142>
{
	ind = image[i][0];
 8003f32:	2126      	movs	r1, #38	@ 0x26
 8003f34:	2018      	movs	r0, #24
 8003f36:	180b      	adds	r3, r1, r0
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	18d2      	adds	r2, r2, r3
 8003f42:	2316      	movs	r3, #22
 8003f44:	181b      	adds	r3, r3, r0
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	8812      	ldrh	r2, [r2, #0]
 8003f4a:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8003f4c:	180b      	adds	r3, r1, r0
 8003f4e:	19db      	adds	r3, r3, r7
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	18d2      	adds	r2, r2, r3
 8003f58:	2314      	movs	r3, #20
 8003f5a:	181b      	adds	r3, r3, r0
 8003f5c:	19db      	adds	r3, r3, r7
 8003f5e:	8852      	ldrh	r2, [r2, #2]
 8003f60:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8003f62:	2324      	movs	r3, #36	@ 0x24
 8003f64:	181b      	adds	r3, r3, r0
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	2200      	movs	r2, #0
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e01c      	b.n	8003fa8 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8003f6e:	2316      	movs	r3, #22
 8003f70:	2418      	movs	r4, #24
 8003f72:	191b      	adds	r3, r3, r4
 8003f74:	19db      	adds	r3, r3, r7
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	18d2      	adds	r2, r2, r3
 8003f7e:	2122      	movs	r1, #34	@ 0x22
 8003f80:	190b      	adds	r3, r1, r4
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	1909      	adds	r1, r1, r4
 8003f88:	19c9      	adds	r1, r1, r7
 8003f8a:	1c58      	adds	r0, r3, #1
 8003f8c:	8008      	strh	r0, [r1, #0]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	8811      	ldrh	r1, [r2, #0]
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	0042      	lsls	r2, r0, #1
 8003f96:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8003f98:	2124      	movs	r1, #36	@ 0x24
 8003f9a:	190b      	adds	r3, r1, r4
 8003f9c:	19db      	adds	r3, r3, r7
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	190b      	adds	r3, r1, r4
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	3201      	adds	r2, #1
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	2324      	movs	r3, #36	@ 0x24
 8003faa:	2018      	movs	r0, #24
 8003fac:	181b      	adds	r3, r3, r0
 8003fae:	19da      	adds	r2, r3, r7
 8003fb0:	2314      	movs	r3, #20
 8003fb2:	181b      	adds	r3, r3, r0
 8003fb4:	19db      	adds	r3, r3, r7
 8003fb6:	8812      	ldrh	r2, [r2, #0]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d3d7      	bcc.n	8003f6e <drawImage+0xe2>
for(i=0; i<c; i++)
 8003fbe:	2126      	movs	r1, #38	@ 0x26
 8003fc0:	180b      	adds	r3, r1, r0
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	180b      	adds	r3, r1, r0
 8003fc8:	19db      	adds	r3, r3, r7
 8003fca:	3201      	adds	r2, #1
 8003fcc:	801a      	strh	r2, [r3, #0]
 8003fce:	2326      	movs	r3, #38	@ 0x26
 8003fd0:	2118      	movs	r1, #24
 8003fd2:	185b      	adds	r3, r3, r1
 8003fd4:	19da      	adds	r2, r3, r7
 8003fd6:	2348      	movs	r3, #72	@ 0x48
 8003fd8:	185b      	adds	r3, r3, r1
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3a6      	bcc.n	8003f32 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8003fe4:	2344      	movs	r3, #68	@ 0x44
 8003fe6:	185b      	adds	r3, r3, r1
 8003fe8:	19db      	adds	r3, r3, r7
 8003fea:	881c      	ldrh	r4, [r3, #0]
 8003fec:	2340      	movs	r3, #64	@ 0x40
 8003fee:	185b      	adds	r3, r3, r1
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	231e      	movs	r3, #30
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	8819      	ldrh	r1, [r3, #0]
 8003ffa:	231c      	movs	r3, #28
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	8818      	ldrh	r0, [r3, #0]
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0023      	movs	r3, r4
 8004006:	f000 fa31 	bl	800446c <ST7735_DrawImage>
 800400a:	46c5      	mov	sp, r8
}
 800400c:	46c0      	nop			@ (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	b010      	add	sp, #64	@ 0x40
 8004012:	bc80      	pop	{r7}
 8004014:	46b8      	mov	r8, r7
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004018 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800401c:	23a0      	movs	r3, #160	@ 0xa0
 800401e:	05db      	lsls	r3, r3, #23
 8004020:	2200      	movs	r2, #0
 8004022:	2120      	movs	r1, #32
 8004024:	0018      	movs	r0, r3
 8004026:	f004 fbbc 	bl	80087a2 <HAL_GPIO_WritePin>
}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8004034:	23a0      	movs	r3, #160	@ 0xa0
 8004036:	05db      	lsls	r3, r3, #23
 8004038:	2201      	movs	r2, #1
 800403a:	2120      	movs	r1, #32
 800403c:	0018      	movs	r0, r3
 800403e:	f004 fbb0 	bl	80087a2 <HAL_GPIO_WritePin>
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <ST7735_Reset>:

void ST7735_Reset()
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	0219      	lsls	r1, r3, #8
 8004050:	23a0      	movs	r3, #160	@ 0xa0
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	2200      	movs	r2, #0
 8004056:	0018      	movs	r0, r3
 8004058:	f004 fba3 	bl	80087a2 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800405c:	2005      	movs	r0, #5
 800405e:	f004 f8ff 	bl	8008260 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	0219      	lsls	r1, r3, #8
 8004066:	23a0      	movs	r3, #160	@ 0xa0
 8004068:	05db      	lsls	r3, r3, #23
 800406a:	2201      	movs	r2, #1
 800406c:	0018      	movs	r0, r3
 800406e:	f004 fb98 	bl	80087a2 <HAL_GPIO_WritePin>
}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	0002      	movs	r2, r0
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8004084:	23a0      	movs	r3, #160	@ 0xa0
 8004086:	05db      	lsls	r3, r3, #23
 8004088:	2200      	movs	r2, #0
 800408a:	2101      	movs	r1, #1
 800408c:	0018      	movs	r0, r3
 800408e:	f004 fb88 	bl	80087a2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8004092:	2301      	movs	r3, #1
 8004094:	425b      	negs	r3, r3
 8004096:	1df9      	adds	r1, r7, #7
 8004098:	4803      	ldr	r0, [pc, #12]	@ (80040a8 <ST7735_WriteCommand+0x30>)
 800409a:	2201      	movs	r2, #1
 800409c:	f007 f83a 	bl	800b114 <HAL_SPI_Transmit>
}
 80040a0:	46c0      	nop			@ (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20001c48 	.word	0x20001c48

080040ac <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80040b6:	23a0      	movs	r3, #160	@ 0xa0
 80040b8:	05db      	lsls	r3, r3, #23
 80040ba:	2201      	movs	r2, #1
 80040bc:	2101      	movs	r1, #1
 80040be:	0018      	movs	r0, r3
 80040c0:	f004 fb6f 	bl	80087a2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	2301      	movs	r3, #1
 80040ca:	425b      	negs	r3, r3
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4803      	ldr	r0, [pc, #12]	@ (80040dc <ST7735_WriteData+0x30>)
 80040d0:	f007 f820 	bl	800b114 <HAL_SPI_Transmit>
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20001c48 	.word	0x20001c48

080040e0 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	220f      	movs	r2, #15
 80040f0:	18ba      	adds	r2, r7, r2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80040f6:	e04a      	b.n	800418e <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	210b      	movs	r1, #11
 8004100:	187a      	adds	r2, r7, r1
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8004106:	187b      	adds	r3, r7, r1
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	0018      	movs	r0, r3
 800410c:	f7ff ffb4 	bl	8004078 <ST7735_WriteCommand>

        numArgs = *addr++;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	200a      	movs	r0, #10
 8004118:	183a      	adds	r2, r7, r0
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800411e:	183b      	adds	r3, r7, r0
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b29a      	uxth	r2, r3
 8004124:	230c      	movs	r3, #12
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	2180      	movs	r1, #128	@ 0x80
 800412a:	400a      	ands	r2, r1
 800412c:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 800412e:	183b      	adds	r3, r7, r0
 8004130:	183a      	adds	r2, r7, r0
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	217f      	movs	r1, #127	@ 0x7f
 8004136:	400a      	ands	r2, r1
 8004138:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 800413a:	183b      	adds	r3, r7, r0
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8004142:	0004      	movs	r4, r0
 8004144:	183b      	adds	r3, r7, r0
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	0011      	movs	r1, r2
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff ffad 	bl	80040ac <ST7735_WriteData>
            addr += numArgs;
 8004152:	193b      	adds	r3, r7, r4
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800415c:	210c      	movs	r1, #12
 800415e:	187b      	adds	r3, r7, r1
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d013      	beq.n	800418e <DisplayInit+0xae>
            ms = *addr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	187b      	adds	r3, r7, r1
 8004170:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8004172:	187b      	adds	r3, r7, r1
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	2bff      	cmp	r3, #255	@ 0xff
 8004178:	d103      	bne.n	8004182 <DisplayInit+0xa2>
 800417a:	187b      	adds	r3, r7, r1
 800417c:	22fa      	movs	r2, #250	@ 0xfa
 800417e:	0052      	lsls	r2, r2, #1
 8004180:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8004182:	230c      	movs	r3, #12
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	f004 f869 	bl	8008260 <HAL_Delay>
    while(numCommands--) {
 800418e:	220f      	movs	r2, #15
 8004190:	18bb      	adds	r3, r7, r2
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	18ba      	adds	r2, r7, r2
 8004196:	1e59      	subs	r1, r3, #1
 8004198:	7011      	strb	r1, [r2, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ac      	bne.n	80040f8 <DisplayInit+0x18>
        }
    }
}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b005      	add	sp, #20
 80041a6:	bd90      	pop	{r4, r7, pc}

080041a8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80041a8:	b5b0      	push	{r4, r5, r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	0005      	movs	r5, r0
 80041b0:	000c      	movs	r4, r1
 80041b2:	0010      	movs	r0, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	1c2a      	adds	r2, r5, #0
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	1dbb      	adds	r3, r7, #6
 80041be:	1c22      	adds	r2, r4, #0
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	1d7b      	adds	r3, r7, #5
 80041c4:	1c02      	adds	r2, r0, #0
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	1c0a      	adds	r2, r1, #0
 80041cc:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80041ce:	202a      	movs	r0, #42	@ 0x2a
 80041d0:	f7ff ff52 	bl	8004078 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80041d4:	210c      	movs	r1, #12
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004250 <ST7735_SetAddressWindow+0xa8>)
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	705a      	strb	r2, [r3, #1]
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	2200      	movs	r2, #0
 80041f0:	709a      	strb	r2, [r3, #2]
 80041f2:	4b17      	ldr	r3, [pc, #92]	@ (8004250 <ST7735_SetAddressWindow+0xa8>)
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	1d7b      	adds	r3, r7, #5
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8004202:	000c      	movs	r4, r1
 8004204:	187b      	adds	r3, r7, r1
 8004206:	2104      	movs	r1, #4
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff ff4f 	bl	80040ac <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800420e:	202b      	movs	r0, #43	@ 0x2b
 8004210:	f7ff ff32 	bl	8004078 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8004214:	4b0f      	ldr	r3, [pc, #60]	@ (8004254 <ST7735_SetAddressWindow+0xac>)
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	1dbb      	adds	r3, r7, #6
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	0021      	movs	r1, r4
 8004222:	187b      	adds	r3, r7, r1
 8004224:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <ST7735_SetAddressWindow+0xac>)
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	18d3      	adds	r3, r2, r3
 8004230:	b2da      	uxtb	r2, r3
 8004232:	187b      	adds	r3, r7, r1
 8004234:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8004236:	187b      	adds	r3, r7, r1
 8004238:	2104      	movs	r1, #4
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff ff36 	bl	80040ac <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8004240:	202c      	movs	r0, #44	@ 0x2c
 8004242:	f7ff ff19 	bl	8004078 <ST7735_WriteCommand>
}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	46bd      	mov	sp, r7
 800424a:	b004      	add	sp, #16
 800424c:	bdb0      	pop	{r4, r5, r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	20000bb3 	.word	0x20000bb3
 8004254:	20000bb4 	.word	0x20000bb4

08004258 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	0002      	movs	r2, r0
 8004260:	1dfb      	adds	r3, r7, #7
 8004262:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8004264:	f7ff fed8 	bl	8004018 <ST7735_Select>
    ST7735_Reset();
 8004268:	f7ff feee 	bl	8004048 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800426c:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <ST7735_Init+0x50>)
 800426e:	0018      	movs	r0, r3
 8004270:	f7ff ff36 	bl	80040e0 <DisplayInit>
    DisplayInit(init_cmds2);
 8004274:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <ST7735_Init+0x54>)
 8004276:	0018      	movs	r0, r3
 8004278:	f7ff ff32 	bl	80040e0 <DisplayInit>
    DisplayInit(init_cmds3);
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <ST7735_Init+0x58>)
 800427e:	0018      	movs	r0, r3
 8004280:	f7ff ff2e 	bl	80040e0 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <ST7735_Init+0x5c>)
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800428a:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <ST7735_Init+0x60>)
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8004290:	1dfb      	adds	r3, r7, #7
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 f811 	bl	80042bc <ST7735_SetRotation>
    ST7735_Unselect();
 800429a:	f7ff fec9 	bl	8004030 <ST7735_Unselect>

}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	080116e8 	.word	0x080116e8
 80042ac:	08011720 	.word	0x08011720
 80042b0:	08011730 	.word	0x08011730
 80042b4:	20000bb1 	.word	0x20000bb1
 80042b8:	20000bb2 	.word	0x20000bb2

080042bc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	0002      	movs	r2, r0
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80042c8:	230f      	movs	r3, #15
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 80042d0:	1dfb      	adds	r3, r7, #7
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2203      	movs	r2, #3
 80042d6:	4013      	ands	r3, r2
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <ST7735_SetRotation+0xf8>)
 80042dc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80042de:	4b35      	ldr	r3, [pc, #212]	@ (80043b4 <ST7735_SetRotation+0xf8>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d041      	beq.n	800436a <ST7735_SetRotation+0xae>
 80042e6:	dc53      	bgt.n	8004390 <ST7735_SetRotation+0xd4>
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d02b      	beq.n	8004344 <ST7735_SetRotation+0x88>
 80042ec:	dc50      	bgt.n	8004390 <ST7735_SetRotation+0xd4>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <ST7735_SetRotation+0x3c>
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d013      	beq.n	800431e <ST7735_SetRotation+0x62>
 80042f6:	e04b      	b.n	8004390 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80042f8:	230f      	movs	r3, #15
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	22c0      	movs	r2, #192	@ 0xc0
 80042fe:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004300:	4b2d      	ldr	r3, [pc, #180]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 8004302:	22a0      	movs	r2, #160	@ 0xa0
 8004304:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800430c:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <ST7735_SetRotation+0x104>)
 800430e:	781a      	ldrb	r2, [r3, #0]
 8004310:	4b2c      	ldr	r3, [pc, #176]	@ (80043c4 <ST7735_SetRotation+0x108>)
 8004312:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8004314:	4b2c      	ldr	r3, [pc, #176]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	4b2c      	ldr	r3, [pc, #176]	@ (80043cc <ST7735_SetRotation+0x110>)
 800431a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800431c:	e038      	b.n	8004390 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800431e:	230f      	movs	r3, #15
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	22a0      	movs	r2, #160	@ 0xa0
 8004324:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8004326:	4b25      	ldr	r3, [pc, #148]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004328:	22a0      	movs	r2, #160	@ 0xa0
 800432a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800432c:	4b22      	ldr	r3, [pc, #136]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 800432e:	2280      	movs	r2, #128	@ 0x80
 8004330:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8004332:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <ST7735_SetRotation+0x104>)
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <ST7735_SetRotation+0x110>)
 8004338:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800433a:	4b23      	ldr	r3, [pc, #140]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	4b21      	ldr	r3, [pc, #132]	@ (80043c4 <ST7735_SetRotation+0x108>)
 8004340:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004342:	e025      	b.n	8004390 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8004344:	230f      	movs	r3, #15
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 800434e:	22a0      	movs	r2, #160	@ 0xa0
 8004350:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8004352:	4b1a      	ldr	r3, [pc, #104]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8004358:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <ST7735_SetRotation+0x104>)
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	4b19      	ldr	r3, [pc, #100]	@ (80043c4 <ST7735_SetRotation+0x108>)
 800435e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8004360:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	4b19      	ldr	r3, [pc, #100]	@ (80043cc <ST7735_SetRotation+0x110>)
 8004366:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004368:	e012      	b.n	8004390 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800436a:	230f      	movs	r3, #15
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2260      	movs	r2, #96	@ 0x60
 8004370:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004374:	22a0      	movs	r2, #160	@ 0xa0
 8004376:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004378:	4b0f      	ldr	r3, [pc, #60]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 800437a:	2280      	movs	r2, #128	@ 0x80
 800437c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800437e:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <ST7735_SetRotation+0x104>)
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <ST7735_SetRotation+0x110>)
 8004384:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004386:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <ST7735_SetRotation+0x108>)
 800438c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800438e:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8004390:	f7ff fe42 	bl	8004018 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8004394:	2036      	movs	r0, #54	@ 0x36
 8004396:	f7ff fe6f 	bl	8004078 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800439a:	230f      	movs	r3, #15
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	2101      	movs	r1, #1
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7ff fe83 	bl	80040ac <ST7735_WriteData>
  ST7735_Unselect();
 80043a6:	f7ff fe43 	bl	8004030 <ST7735_Unselect>
}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b004      	add	sp, #16
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	20000bb0 	.word	0x20000bb0
 80043b8:	20000bae 	.word	0x20000bae
 80043bc:	20000bac 	.word	0x20000bac
 80043c0:	20000bb1 	.word	0x20000bb1
 80043c4:	20000bb3 	.word	0x20000bb3
 80043c8:	20000bb2 	.word	0x20000bb2
 80043cc:	20000bb4 	.word	0x20000bb4

080043d0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	0004      	movs	r4, r0
 80043d8:	0008      	movs	r0, r1
 80043da:	0011      	movs	r1, r2
 80043dc:	1dbb      	adds	r3, r7, #6
 80043de:	1c22      	adds	r2, r4, #0
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	1c02      	adds	r2, r0, #0
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	1cbb      	adds	r3, r7, #2
 80043ea:	1c0a      	adds	r2, r1, #0
 80043ec:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 80043ee:	1dbb      	adds	r3, r7, #6
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <ST7735_DrawPixel+0x94>)
 80043f4:	2100      	movs	r1, #0
 80043f6:	5e52      	ldrsh	r2, [r2, r1]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	da2f      	bge.n	800445c <ST7735_DrawPixel+0x8c>
 80043fc:	1d3b      	adds	r3, r7, #4
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <ST7735_DrawPixel+0x98>)
 8004402:	2100      	movs	r1, #0
 8004404:	5e52      	ldrsh	r2, [r2, r1]
 8004406:	4293      	cmp	r3, r2
 8004408:	da28      	bge.n	800445c <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 800440a:	f7ff fe05 	bl	8004018 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800440e:	1dbb      	adds	r3, r7, #6
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b2d8      	uxtb	r0, r3
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b2d9      	uxtb	r1, r3
 800441a:	1dbb      	adds	r3, r7, #6
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3301      	adds	r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3301      	adds	r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f7ff febb 	bl	80041a8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8004432:	1cbb      	adds	r3, r7, #2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b2da      	uxtb	r2, r3
 800443c:	210c      	movs	r1, #12
 800443e:	187b      	adds	r3, r7, r1
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	1cbb      	adds	r3, r7, #2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	187b      	adds	r3, r7, r1
 800444a:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 800444c:	187b      	adds	r3, r7, r1
 800444e:	2102      	movs	r1, #2
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff fe2b 	bl	80040ac <ST7735_WriteData>

    ST7735_Unselect();
 8004456:	f7ff fdeb 	bl	8004030 <ST7735_Unselect>
 800445a:	e000      	b.n	800445e <ST7735_DrawPixel+0x8e>
        return;
 800445c:	46c0      	nop			@ (mov r8, r8)
}
 800445e:	46bd      	mov	sp, r7
 8004460:	b005      	add	sp, #20
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	20000bac 	.word	0x20000bac
 8004468:	20000bae 	.word	0x20000bae

0800446c <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800446c:	b5b0      	push	{r4, r5, r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	0005      	movs	r5, r0
 8004474:	000c      	movs	r4, r1
 8004476:	0010      	movs	r0, r2
 8004478:	0019      	movs	r1, r3
 800447a:	1dbb      	adds	r3, r7, #6
 800447c:	1c2a      	adds	r2, r5, #0
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	1d3b      	adds	r3, r7, #4
 8004482:	1c22      	adds	r2, r4, #0
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	1cbb      	adds	r3, r7, #2
 8004488:	1c02      	adds	r2, r0, #0
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	003b      	movs	r3, r7
 800448e:	1c0a      	adds	r2, r1, #0
 8004490:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8004492:	1dbb      	adds	r3, r7, #6
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <ST7735_DrawImage+0xd4>)
 8004498:	2100      	movs	r1, #0
 800449a:	5e52      	ldrsh	r2, [r2, r1]
 800449c:	4293      	cmp	r3, r2
 800449e:	da47      	bge.n	8004530 <ST7735_DrawImage+0xc4>
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	4a27      	ldr	r2, [pc, #156]	@ (8004544 <ST7735_DrawImage+0xd8>)
 80044a6:	2100      	movs	r1, #0
 80044a8:	5e52      	ldrsh	r2, [r2, r1]
 80044aa:	4293      	cmp	r3, r2
 80044ac:	da40      	bge.n	8004530 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 80044ae:	1dbb      	adds	r3, r7, #6
 80044b0:	881a      	ldrh	r2, [r3, #0]
 80044b2:	1cbb      	adds	r3, r7, #2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	18d3      	adds	r3, r2, r3
 80044b8:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <ST7735_DrawImage+0xd4>)
 80044ba:	2100      	movs	r1, #0
 80044bc:	5e52      	ldrsh	r2, [r2, r1]
 80044be:	4293      	cmp	r3, r2
 80044c0:	dc38      	bgt.n	8004534 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	003b      	movs	r3, r7
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	18d3      	adds	r3, r2, r3
 80044cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004544 <ST7735_DrawImage+0xd8>)
 80044ce:	2100      	movs	r1, #0
 80044d0:	5e52      	ldrsh	r2, [r2, r1]
 80044d2:	4293      	cmp	r3, r2
 80044d4:	dc30      	bgt.n	8004538 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 80044d6:	f7ff fd9f 	bl	8004018 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80044da:	1dbb      	adds	r3, r7, #6
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b2d8      	uxtb	r0, r3
 80044e0:	1d3b      	adds	r3, r7, #4
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b2d9      	uxtb	r1, r3
 80044e6:	1dbb      	adds	r3, r7, #6
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	1cbb      	adds	r3, r7, #2
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	18d3      	adds	r3, r2, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b2dc      	uxtb	r4, r3
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	003b      	movs	r3, r7
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	18d3      	adds	r3, r2, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	0022      	movs	r2, r4
 8004510:	f7ff fe4a 	bl	80041a8 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8004514:	1cbb      	adds	r3, r7, #2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	003a      	movs	r2, r7
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	4353      	muls	r3, r2
 800451e:	005a      	lsls	r2, r3, #1
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	0011      	movs	r1, r2
 8004524:	0018      	movs	r0, r3
 8004526:	f7ff fdc1 	bl	80040ac <ST7735_WriteData>
    ST7735_Unselect();
 800452a:	f7ff fd81 	bl	8004030 <ST7735_Unselect>
 800452e:	e004      	b.n	800453a <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	e002      	b.n	800453a <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	e000      	b.n	800453a <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8004538:	46c0      	nop			@ (mov r8, r8)
}
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bdb0      	pop	{r4, r5, r7, pc}
 8004540:	20000bac 	.word	0x20000bac
 8004544:	20000bae 	.word	0x20000bae

08004548 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8004548:	b5b0      	push	{r4, r5, r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <minmea_tocoord+0x14>
        return NAN;
 8004558:	4b1c      	ldr	r3, [pc, #112]	@ (80045cc <minmea_tocoord+0x84>)
 800455a:	e033      	b.n	80045c4 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2164      	movs	r1, #100	@ 0x64
 8004566:	434b      	muls	r3, r1
 8004568:	0019      	movs	r1, r3
 800456a:	0010      	movs	r0, r2
 800456c:	f7fb fe7a 	bl	8000264 <__divsi3>
 8004570:	0003      	movs	r3, r0
 8004572:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2164      	movs	r1, #100	@ 0x64
 800457e:	434b      	muls	r3, r1
 8004580:	0019      	movs	r1, r3
 8004582:	0010      	movs	r0, r2
 8004584:	f7fb ff54 	bl	8000430 <__aeabi_idivmod>
 8004588:	000b      	movs	r3, r1
 800458a:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7fc ffdf 	bl	8001550 <__aeabi_i2f>
 8004592:	1c04      	adds	r4, r0, #0
 8004594:	68b8      	ldr	r0, [r7, #8]
 8004596:	f7fc ffdb 	bl	8001550 <__aeabi_i2f>
 800459a:	1c05      	adds	r5, r0, #0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	0013      	movs	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fc ffd1 	bl	8001550 <__aeabi_i2f>
 80045ae:	1c03      	adds	r3, r0, #0
 80045b0:	1c19      	adds	r1, r3, #0
 80045b2:	1c28      	adds	r0, r5, #0
 80045b4:	f7fc fae4 	bl	8000b80 <__aeabi_fdiv>
 80045b8:	1c03      	adds	r3, r0, #0
 80045ba:	1c19      	adds	r1, r3, #0
 80045bc:	1c20      	adds	r0, r4, #0
 80045be:	f7fc f955 	bl	800086c <__aeabi_fadd>
 80045c2:	1c03      	adds	r3, r0, #0
}
 80045c4:	1c18      	adds	r0, r3, #0
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}
 80045cc:	7fc00000 	.word	0x7fc00000

080045d0 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
    return json->sibling;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b002      	add	sp, #8
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	220a      	movs	r2, #10
 8004606:	2100      	movs	r1, #0
 8004608:	0018      	movs	r0, r3
 800460a:	f009 ff7f 	bl	800e50c <strtoll>
 800460e:	0002      	movs	r2, r0
 8004610:	000b      	movs	r3, r1
}
 8004612:	0010      	movs	r0, r2
 8004614:	0019      	movs	r1, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b002      	add	sp, #8
 800461a:	bd80      	pop	{r7, pc}

0800461c <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2100      	movs	r1, #0
 800462a:	0018      	movs	r0, r3
 800462c:	f009 fe26 	bl	800e27c <strtod>
 8004630:	0002      	movs	r2, r0
 8004632:	000b      	movs	r3, r1
}
 8004634:	0010      	movs	r0, r2
 8004636:	0019      	movs	r1, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004640:	b5b0      	push	{r4, r5, r7, lr}
 8004642:	b08c      	sub	sp, #48	@ 0x30
 8004644:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004646:	f003 fd85 	bl	8008154 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800464a:	f000 fc8f 	bl	8004f6c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	StructInit();
 800464e:	f001 f9b3 	bl	80059b8 <StructInit>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004652:	f000 ff41 	bl	80054d8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8004656:	f000 fceb 	bl	8005030 <MX_I2C1_Init>
	MX_SPI1_Init();
 800465a:	f000 fdd9 	bl	8005210 <MX_SPI1_Init>
	MX_TIM17_Init();
 800465e:	f000 fe17 	bl	8005290 <MX_TIM17_Init>
	MX_USART1_UART_Init();
 8004662:	f000 fe9d 	bl	80053a0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8004666:	f000 fee9 	bl	800543c <MX_USART2_UART_Init>
	MX_RTC_Init();
 800466a:	f000 fd21 	bl	80050b0 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	PeripheralInit();
 800466e:	f001 f965 	bl	800593c <PeripheralInit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//Before entering the while, fill the screen to clear it once
	fillScreen(BLACK);
 8004672:	2000      	movs	r0, #0
 8004674:	f7ff fb96 	bl	8003da4 <fillScreen>
	while (1) {
		_ADXL343_ReadReg8(0x15, &steps, 2);
 8004678:	4baf      	ldr	r3, [pc, #700]	@ (8004938 <main+0x2f8>)
 800467a:	2202      	movs	r2, #2
 800467c:	0019      	movs	r1, r3
 800467e:	2015      	movs	r0, #21
 8004680:	f001 fa50 	bl	8005b24 <_ADXL343_ReadReg8>

		//SendData();
		//ReceiveData();
		//_ADXL343_ReadReg8(0x00, &steps, 1);
		if (CheckExp(game.dailyGoal, game.stepsToday) == 1) {
 8004684:	4aad      	ldr	r2, [pc, #692]	@ (800493c <main+0x2fc>)
 8004686:	2392      	movs	r3, #146	@ 0x92
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	58d3      	ldr	r3, [r2, r3]
 800468c:	0018      	movs	r0, r3
 800468e:	4aab      	ldr	r2, [pc, #684]	@ (800493c <main+0x2fc>)
 8004690:	2390      	movs	r3, #144	@ 0x90
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	58d3      	ldr	r3, [r2, r3]
 8004696:	0019      	movs	r1, r3
 8004698:	f001 fd52 	bl	8006140 <CheckExp>
 800469c:	0003      	movs	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d10c      	bne.n	80046bc <main+0x7c>
			game.mood += moodIncrementUp;
 80046a2:	4ba6      	ldr	r3, [pc, #664]	@ (800493c <main+0x2fc>)
 80046a4:	7c5a      	ldrb	r2, [r3, #17]
 80046a6:	2301      	movs	r3, #1
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	4ba3      	ldr	r3, [pc, #652]	@ (800493c <main+0x2fc>)
 80046b0:	745a      	strb	r2, [r3, #17]
			game.stepsToday = 0;
 80046b2:	4aa2      	ldr	r2, [pc, #648]	@ (800493c <main+0x2fc>)
 80046b4:	2390      	movs	r3, #144	@ 0x90
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	2100      	movs	r1, #0
 80046ba:	50d1      	str	r1, [r2, r3]
		}
		if (checkTime) {
 80046bc:	4ba0      	ldr	r3, [pc, #640]	@ (8004940 <main+0x300>)
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d04a      	beq.n	800475a <main+0x11a>
			if (((game.time.minutes % dayLength) == 0)
 80046c4:	4b9d      	ldr	r3, [pc, #628]	@ (800493c <main+0x2fc>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2218      	movs	r2, #24
 80046ca:	0011      	movs	r1, r2
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7fb feaf 	bl	8000430 <__aeabi_idivmod>
 80046d2:	1e0b      	subs	r3, r1, #0
 80046d4:	d12c      	bne.n	8004730 <main+0xf0>
					&& game.time.seconds > 0) {
 80046d6:	4b99      	ldr	r3, [pc, #612]	@ (800493c <main+0x2fc>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	dd28      	ble.n	8004730 <main+0xf0>
				if (CheckExp(game.dailyGoal, game.stepsToday) == -1)
 80046de:	4a97      	ldr	r2, [pc, #604]	@ (800493c <main+0x2fc>)
 80046e0:	2392      	movs	r3, #146	@ 0x92
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	58d3      	ldr	r3, [r2, r3]
 80046e6:	0018      	movs	r0, r3
 80046e8:	4a94      	ldr	r2, [pc, #592]	@ (800493c <main+0x2fc>)
 80046ea:	2390      	movs	r3, #144	@ 0x90
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	58d3      	ldr	r3, [r2, r3]
 80046f0:	0019      	movs	r1, r3
 80046f2:	f001 fd25 	bl	8006140 <CheckExp>
 80046f6:	0003      	movs	r3, r0
 80046f8:	3301      	adds	r3, #1
 80046fa:	d107      	bne.n	800470c <main+0xcc>
					game.mood -= moodIncrementDown;
 80046fc:	4b8f      	ldr	r3, [pc, #572]	@ (800493c <main+0x2fc>)
 80046fe:	7c5a      	ldrb	r2, [r3, #17]
 8004700:	2301      	movs	r3, #1
 8004702:	b2db      	uxtb	r3, r3
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b8c      	ldr	r3, [pc, #560]	@ (800493c <main+0x2fc>)
 800470a:	745a      	strb	r2, [r3, #17]
				game.stepsToday = 0;
 800470c:	4a8b      	ldr	r2, [pc, #556]	@ (800493c <main+0x2fc>)
 800470e:	2390      	movs	r3, #144	@ 0x90
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2100      	movs	r1, #0
 8004714:	50d1      	str	r1, [r2, r3]
				memset(&game.positions, 0, sizeof(game.positions));
 8004716:	2380      	movs	r3, #128	@ 0x80
 8004718:	005a      	lsls	r2, r3, #1
 800471a:	4b8a      	ldr	r3, [pc, #552]	@ (8004944 <main+0x304>)
 800471c:	2100      	movs	r1, #0
 800471e:	0018      	movs	r0, r3
 8004720:	f00a f830 	bl	800e784 <memset>
				game.numLocations = 0;
 8004724:	4b85      	ldr	r3, [pc, #532]	@ (800493c <main+0x2fc>)
 8004726:	2200      	movs	r2, #0
 8004728:	615a      	str	r2, [r3, #20]
				checkTime = 0;
 800472a:	4b85      	ldr	r3, [pc, #532]	@ (8004940 <main+0x300>)
 800472c:	2200      	movs	r2, #0
 800472e:	801a      	strh	r2, [r3, #0]
			}

			if (((game.time.minutes % weekLength) == 0)
 8004730:	4b82      	ldr	r3, [pc, #520]	@ (800493c <main+0x2fc>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	22a8      	movs	r2, #168	@ 0xa8
 8004736:	0011      	movs	r1, r2
 8004738:	0018      	movs	r0, r3
 800473a:	f7fb fe79 	bl	8000430 <__aeabi_idivmod>
 800473e:	1e0b      	subs	r3, r1, #0
 8004740:	d10b      	bne.n	800475a <main+0x11a>
					&& game.time.seconds > 0) {
 8004742:	4b7e      	ldr	r3, [pc, #504]	@ (800493c <main+0x2fc>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	dd07      	ble.n	800475a <main+0x11a>
				game.weeklySteps = 0;
 800474a:	4a7c      	ldr	r2, [pc, #496]	@ (800493c <main+0x2fc>)
 800474c:	238e      	movs	r3, #142	@ 0x8e
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	2100      	movs	r1, #0
 8004752:	50d1      	str	r1, [r2, r3]
				checkTime = 0;
 8004754:	4b7a      	ldr	r3, [pc, #488]	@ (8004940 <main+0x300>)
 8004756:	2200      	movs	r2, #0
 8004758:	801a      	strh	r2, [r3, #0]
			}
		}
		if ((game.time.minutes % dayLength) == 1)
 800475a:	4b78      	ldr	r3, [pc, #480]	@ (800493c <main+0x2fc>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2218      	movs	r2, #24
 8004760:	0011      	movs	r1, r2
 8004762:	0018      	movs	r0, r3
 8004764:	f7fb fe64 	bl	8000430 <__aeabi_idivmod>
 8004768:	000b      	movs	r3, r1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d102      	bne.n	8004774 <main+0x134>
			checkTime = 1;
 800476e:	4b74      	ldr	r3, [pc, #464]	@ (8004940 <main+0x300>)
 8004770:	2201      	movs	r2, #1
 8004772:	801a      	strh	r2, [r3, #0]
		if (steps != 0) {
 8004774:	4b70      	ldr	r3, [pc, #448]	@ (8004938 <main+0x2f8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d027      	beq.n	80047cc <main+0x18c>
			game.stepsToday += steps;
 800477c:	4a6f      	ldr	r2, [pc, #444]	@ (800493c <main+0x2fc>)
 800477e:	2390      	movs	r3, #144	@ 0x90
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	58d2      	ldr	r2, [r2, r3]
 8004784:	4b6c      	ldr	r3, [pc, #432]	@ (8004938 <main+0x2f8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	18d1      	adds	r1, r2, r3
 800478a:	4a6c      	ldr	r2, [pc, #432]	@ (800493c <main+0x2fc>)
 800478c:	2390      	movs	r3, #144	@ 0x90
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	50d1      	str	r1, [r2, r3]
			game.weeklySteps += steps;
 8004792:	4a6a      	ldr	r2, [pc, #424]	@ (800493c <main+0x2fc>)
 8004794:	238e      	movs	r3, #142	@ 0x8e
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	58d2      	ldr	r2, [r2, r3]
 800479a:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <main+0x2f8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	18d1      	adds	r1, r2, r3
 80047a0:	4a66      	ldr	r2, [pc, #408]	@ (800493c <main+0x2fc>)
 80047a2:	238e      	movs	r3, #142	@ 0x8e
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	50d1      	str	r1, [r2, r3]
			game.allSteps += steps;
 80047a8:	4a64      	ldr	r2, [pc, #400]	@ (800493c <main+0x2fc>)
 80047aa:	238c      	movs	r3, #140	@ 0x8c
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	58d2      	ldr	r2, [r2, r3]
 80047b0:	4b61      	ldr	r3, [pc, #388]	@ (8004938 <main+0x2f8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	18d1      	adds	r1, r2, r3
 80047b6:	4a61      	ldr	r2, [pc, #388]	@ (800493c <main+0x2fc>)
 80047b8:	238c      	movs	r3, #140	@ 0x8c
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	50d1      	str	r1, [r2, r3]
			steps = 0;
 80047be:	4b5e      	ldr	r3, [pc, #376]	@ (8004938 <main+0x2f8>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
			_ADXL343_WriteReg8(0x7E, 0xB1);
 80047c4:	21b1      	movs	r1, #177	@ 0xb1
 80047c6:	207e      	movs	r0, #126	@ 0x7e
 80047c8:	f001 f9de 	bl	8005b88 <_ADXL343_WriteReg8>
		}
		++updateScreen;
 80047cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004948 <main+0x308>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	4b5d      	ldr	r3, [pc, #372]	@ (8004948 <main+0x308>)
 80047d4:	601a      	str	r2, [r3, #0]
		//SendData();
		//HAL_UART_Transmit(&huart2, "hello", 5, 100);
		switch (currentMenu) {
 80047d6:	4b5d      	ldr	r3, [pc, #372]	@ (800494c <main+0x30c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d100      	bne.n	80047e0 <main+0x1a0>
 80047de:	e23e      	b.n	8004c5e <main+0x61e>
 80047e0:	dd00      	ble.n	80047e4 <main+0x1a4>
 80047e2:	e39b      	b.n	8004f1c <main+0x8dc>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d100      	bne.n	80047ea <main+0x1aa>
 80047e8:	e0c4      	b.n	8004974 <main+0x334>
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d000      	beq.n	80047f0 <main+0x1b0>
 80047ee:	e395      	b.n	8004f1c <main+0x8dc>
		case Main:
			if ((totalFrames) % 600 == 0)
 80047f0:	4b57      	ldr	r3, [pc, #348]	@ (8004950 <main+0x310>)
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	2296      	movs	r2, #150	@ 0x96
 80047f6:	0091      	lsls	r1, r2, #2
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7fb fd2f 	bl	800025c <__aeabi_uidivmod>
 80047fe:	000b      	movs	r3, r1
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <main+0x1ca>
				GetLatLon();
 8004806:	f001 fcdf 	bl	80061c8 <GetLatLon>

			if (updateScreen >= 5) {
 800480a:	4b4f      	ldr	r3, [pc, #316]	@ (8004948 <main+0x308>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b04      	cmp	r3, #4
 8004810:	d93e      	bls.n	8004890 <main+0x250>
				updateScreen = 0;
 8004812:	4b4d      	ldr	r3, [pc, #308]	@ (8004948 <main+0x308>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
				//Animate character
				switch (game.evo) {
 8004818:	4b48      	ldr	r3, [pc, #288]	@ (800493c <main+0x2fc>)
 800481a:	7c1b      	ldrb	r3, [r3, #16]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d00f      	beq.n	8004840 <main+0x200>
 8004820:	dc11      	bgt.n	8004846 <main+0x206>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00e      	beq.n	8004844 <main+0x204>
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10d      	bne.n	8004846 <main+0x206>
				case 0:
					//Animate as the egg
					break;
				case 1:
					//Animate as the baby
					Animate(animSitting, 1, 30, 30, 64, 64);
 800482a:	484a      	ldr	r0, [pc, #296]	@ (8004954 <main+0x314>)
 800482c:	2340      	movs	r3, #64	@ 0x40
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	2340      	movs	r3, #64	@ 0x40
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	231e      	movs	r3, #30
 8004836:	221e      	movs	r2, #30
 8004838:	2101      	movs	r1, #1
 800483a:	f001 f937 	bl	8005aac <Animate>
					break;
 800483e:	e002      	b.n	8004846 <main+0x206>
				case 2:
					//Animate as the adult
					break;
 8004840:	46c0      	nop			@ (mov r8, r8)
 8004842:	e000      	b.n	8004846 <main+0x206>
					break;
 8004844:	46c0      	nop			@ (mov r8, r8)
				}

				//Update steps
				drawString(0, 150, "-SILLY LITTLE GUY-", WHITE, BLACK, 1, 1);
 8004846:	2301      	movs	r3, #1
 8004848:	425b      	negs	r3, r3
 800484a:	4a43      	ldr	r2, [pc, #268]	@ (8004958 <main+0x318>)
 800484c:	2101      	movs	r1, #1
 800484e:	9102      	str	r1, [sp, #8]
 8004850:	2101      	movs	r1, #1
 8004852:	9101      	str	r1, [sp, #4]
 8004854:	2100      	movs	r1, #0
 8004856:	9100      	str	r1, [sp, #0]
 8004858:	2196      	movs	r1, #150	@ 0x96
 800485a:	2000      	movs	r0, #0
 800485c:	f7ff f95d 	bl	8003b1a <drawString>
				sprintf(buffer2, "Steps: %d ", game.stepsToday);
 8004860:	4a36      	ldr	r2, [pc, #216]	@ (800493c <main+0x2fc>)
 8004862:	2390      	movs	r3, #144	@ 0x90
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	58d2      	ldr	r2, [r2, r3]
 8004868:	493c      	ldr	r1, [pc, #240]	@ (800495c <main+0x31c>)
 800486a:	4b3d      	ldr	r3, [pc, #244]	@ (8004960 <main+0x320>)
 800486c:	0018      	movs	r0, r3
 800486e:	f009 ff1d 	bl	800e6ac <siprintf>
				drawString(0, 10, buffer2, WHITE, BLACK, 1, 1);
 8004872:	2301      	movs	r3, #1
 8004874:	425b      	negs	r3, r3
 8004876:	4a3a      	ldr	r2, [pc, #232]	@ (8004960 <main+0x320>)
 8004878:	2101      	movs	r1, #1
 800487a:	9102      	str	r1, [sp, #8]
 800487c:	2101      	movs	r1, #1
 800487e:	9101      	str	r1, [sp, #4]
 8004880:	2100      	movs	r1, #0
 8004882:	9100      	str	r1, [sp, #0]
 8004884:	210a      	movs	r1, #10
 8004886:	2000      	movs	r0, #0
 8004888:	f7ff f947 	bl	8003b1a <drawString>
				Emote();
 800488c:	f001 fdf2 	bl	8006474 <Emote>
			}

			//Interact with the SLG
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004890:	4b34      	ldr	r3, [pc, #208]	@ (8004964 <main+0x324>)
 8004892:	2102      	movs	r1, #2
 8004894:	0018      	movs	r0, r3
 8004896:	f003 ff67 	bl	8008768 <HAL_GPIO_ReadPin>
 800489a:	0003      	movs	r3, r0
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10f      	bne.n	80048c0 <main+0x280>
				effect = Evolution;
 80048a0:	4b31      	ldr	r3, [pc, #196]	@ (8004968 <main+0x328>)
 80048a2:	2206      	movs	r2, #6
 80048a4:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80048a6:	4b30      	ldr	r3, [pc, #192]	@ (8004968 <main+0x328>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 fee2 	bl	8005674 <PlayEffect>
				game.stepsToday = game.dailyGoal;
 80048b0:	4a22      	ldr	r2, [pc, #136]	@ (800493c <main+0x2fc>)
 80048b2:	2392      	movs	r3, #146	@ 0x92
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	58d1      	ldr	r1, [r2, r3]
 80048b8:	4a20      	ldr	r2, [pc, #128]	@ (800493c <main+0x2fc>)
 80048ba:	2390      	movs	r3, #144	@ 0x90
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	50d1      	str	r1, [r2, r3]
				//FlashWrite();
				//StructInit();
			}

			//Change current Menu
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 80048c0:	4b2a      	ldr	r3, [pc, #168]	@ (800496c <main+0x32c>)
 80048c2:	2104      	movs	r1, #4
 80048c4:	0018      	movs	r0, r3
 80048c6:	f003 ff4f 	bl	8008768 <HAL_GPIO_ReadPin>
 80048ca:	0003      	movs	r3, r0
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d111      	bne.n	80048f4 <main+0x2b4>
				effect = MenuBeep;
 80048d0:	4b25      	ldr	r3, [pc, #148]	@ (8004968 <main+0x328>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80048d6:	4b24      	ldr	r3, [pc, #144]	@ (8004968 <main+0x328>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 feca 	bl	8005674 <PlayEffect>

				currentMenu = Settings;
 80048e0:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <main+0x30c>)
 80048e2:	2204      	movs	r2, #4
 80048e4:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 80048e6:	4b22      	ldr	r3, [pc, #136]	@ (8004970 <main+0x330>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7ff fa59 	bl	8003da4 <fillScreen>
				canChange = 0;
				fillScreen(BLACK);
			} else
				canChange = 1;

			break;
 80048f2:	e313      	b.n	8004f1c <main+0x8dc>
			} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 80048f4:	2380      	movs	r3, #128	@ 0x80
 80048f6:	011a      	lsls	r2, r3, #4
 80048f8:	23a0      	movs	r3, #160	@ 0xa0
 80048fa:	05db      	lsls	r3, r3, #23
 80048fc:	0011      	movs	r1, r2
 80048fe:	0018      	movs	r0, r3
 8004900:	f003 ff32 	bl	8008768 <HAL_GPIO_ReadPin>
 8004904:	0003      	movs	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	d111      	bne.n	800492e <main+0x2ee>
				effect = MenuBeep;
 800490a:	4b17      	ldr	r3, [pc, #92]	@ (8004968 <main+0x328>)
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004910:	4b15      	ldr	r3, [pc, #84]	@ (8004968 <main+0x328>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fead 	bl	8005674 <PlayEffect>
				currentMenu = StatsDisplay;
 800491a:	4b0c      	ldr	r3, [pc, #48]	@ (800494c <main+0x30c>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004920:	4b13      	ldr	r3, [pc, #76]	@ (8004970 <main+0x330>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004926:	2000      	movs	r0, #0
 8004928:	f7ff fa3c 	bl	8003da4 <fillScreen>
			break;
 800492c:	e2f6      	b.n	8004f1c <main+0x8dc>
				canChange = 1;
 800492e:	4b10      	ldr	r3, [pc, #64]	@ (8004970 <main+0x330>)
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
			break;
 8004934:	e2f2      	b.n	8004f1c <main+0x8dc>
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	20001bb8 	.word	0x20001bb8
 800493c:	20000bbc 	.word	0x20000bbc
 8004940:	20000000 	.word	0x20000000
 8004944:	20000bd4 	.word	0x20000bd4
 8004948:	20001b2c 	.word	0x20001b2c
 800494c:	200009a4 	.word	0x200009a4
 8004950:	20000d60 	.word	0x20000d60
 8004954:	20001b40 	.word	0x20001b40
 8004958:	08010e48 	.word	0x08010e48
 800495c:	08010e5c 	.word	0x08010e5c
 8004960:	20001b54 	.word	0x20001b54
 8004964:	50000800 	.word	0x50000800
 8004968:	20000bb8 	.word	0x20000bb8
 800496c:	50000400 	.word	0x50000400
 8004970:	200009a5 	.word	0x200009a5
		case StatsDisplay:

			if (updateScreen >= 5) {
 8004974:	4bef      	ldr	r3, [pc, #956]	@ (8004d34 <main+0x6f4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d800      	bhi.n	800497e <main+0x33e>
 800497c:	e151      	b.n	8004c22 <main+0x5e2>
				//fillScreen(BLACK);

				drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 800497e:	2301      	movs	r3, #1
 8004980:	425b      	negs	r3, r3
 8004982:	4aed      	ldr	r2, [pc, #948]	@ (8004d38 <main+0x6f8>)
 8004984:	2101      	movs	r1, #1
 8004986:	9102      	str	r1, [sp, #8]
 8004988:	2101      	movs	r1, #1
 800498a:	9101      	str	r1, [sp, #4]
 800498c:	2100      	movs	r1, #0
 800498e:	9100      	str	r1, [sp, #0]
 8004990:	2196      	movs	r1, #150	@ 0x96
 8004992:	2000      	movs	r0, #0
 8004994:	f7ff f8c1 	bl	8003b1a <drawString>
				sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004998:	4ae8      	ldr	r2, [pc, #928]	@ (8004d3c <main+0x6fc>)
 800499a:	2390      	movs	r3, #144	@ 0x90
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	58d2      	ldr	r2, [r2, r3]
 80049a0:	49e7      	ldr	r1, [pc, #924]	@ (8004d40 <main+0x700>)
 80049a2:	4be8      	ldr	r3, [pc, #928]	@ (8004d44 <main+0x704>)
 80049a4:	0018      	movs	r0, r3
 80049a6:	f009 fe81 	bl	800e6ac <siprintf>
				drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 80049aa:	2301      	movs	r3, #1
 80049ac:	425b      	negs	r3, r3
 80049ae:	4ae5      	ldr	r2, [pc, #916]	@ (8004d44 <main+0x704>)
 80049b0:	2101      	movs	r1, #1
 80049b2:	9102      	str	r1, [sp, #8]
 80049b4:	2101      	movs	r1, #1
 80049b6:	9101      	str	r1, [sp, #4]
 80049b8:	2100      	movs	r1, #0
 80049ba:	9100      	str	r1, [sp, #0]
 80049bc:	218c      	movs	r1, #140	@ 0x8c
 80049be:	2000      	movs	r0, #0
 80049c0:	f7ff f8ab 	bl	8003b1a <drawString>
				sprintf(buffer2, "This week: %d ", game.weeklySteps);
 80049c4:	4add      	ldr	r2, [pc, #884]	@ (8004d3c <main+0x6fc>)
 80049c6:	238e      	movs	r3, #142	@ 0x8e
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	58d2      	ldr	r2, [r2, r3]
 80049cc:	49de      	ldr	r1, [pc, #888]	@ (8004d48 <main+0x708>)
 80049ce:	4bdd      	ldr	r3, [pc, #884]	@ (8004d44 <main+0x704>)
 80049d0:	0018      	movs	r0, r3
 80049d2:	f009 fe6b 	bl	800e6ac <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 80049d6:	2301      	movs	r3, #1
 80049d8:	425b      	negs	r3, r3
 80049da:	4ada      	ldr	r2, [pc, #872]	@ (8004d44 <main+0x704>)
 80049dc:	2101      	movs	r1, #1
 80049de:	9102      	str	r1, [sp, #8]
 80049e0:	2101      	movs	r1, #1
 80049e2:	9101      	str	r1, [sp, #4]
 80049e4:	2100      	movs	r1, #0
 80049e6:	9100      	str	r1, [sp, #0]
 80049e8:	2182      	movs	r1, #130	@ 0x82
 80049ea:	2000      	movs	r0, #0
 80049ec:	f7ff f895 	bl	8003b1a <drawString>
				sprintf(buffer2, "All time: %d ", game.allSteps);
 80049f0:	4ad2      	ldr	r2, [pc, #840]	@ (8004d3c <main+0x6fc>)
 80049f2:	238c      	movs	r3, #140	@ 0x8c
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	58d2      	ldr	r2, [r2, r3]
 80049f8:	49d4      	ldr	r1, [pc, #848]	@ (8004d4c <main+0x70c>)
 80049fa:	4bd2      	ldr	r3, [pc, #840]	@ (8004d44 <main+0x704>)
 80049fc:	0018      	movs	r0, r3
 80049fe:	f009 fe55 	bl	800e6ac <siprintf>
				drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004a02:	2301      	movs	r3, #1
 8004a04:	425b      	negs	r3, r3
 8004a06:	4acf      	ldr	r2, [pc, #828]	@ (8004d44 <main+0x704>)
 8004a08:	2101      	movs	r1, #1
 8004a0a:	9102      	str	r1, [sp, #8]
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	9101      	str	r1, [sp, #4]
 8004a10:	2100      	movs	r1, #0
 8004a12:	9100      	str	r1, [sp, #0]
 8004a14:	2178      	movs	r1, #120	@ 0x78
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7ff f87f 	bl	8003b1a <drawString>
				drawString(0, 110, "POSITIONS", WHITE, BLACK, 1, 1);
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	425b      	negs	r3, r3
 8004a20:	4acb      	ldr	r2, [pc, #812]	@ (8004d50 <main+0x710>)
 8004a22:	2101      	movs	r1, #1
 8004a24:	9102      	str	r1, [sp, #8]
 8004a26:	2101      	movs	r1, #1
 8004a28:	9101      	str	r1, [sp, #4]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	9100      	str	r1, [sp, #0]
 8004a2e:	216e      	movs	r1, #110	@ 0x6e
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7ff f872 	bl	8003b1a <drawString>
				sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004a36:	4bc1      	ldr	r3, [pc, #772]	@ (8004d3c <main+0x6fc>)
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	49c6      	ldr	r1, [pc, #792]	@ (8004d54 <main+0x714>)
 8004a3c:	4bc1      	ldr	r3, [pc, #772]	@ (8004d44 <main+0x704>)
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f009 fe34 	bl	800e6ac <siprintf>
				drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004a44:	2301      	movs	r3, #1
 8004a46:	425b      	negs	r3, r3
 8004a48:	4abe      	ldr	r2, [pc, #760]	@ (8004d44 <main+0x704>)
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	9102      	str	r1, [sp, #8]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	9101      	str	r1, [sp, #4]
 8004a52:	2100      	movs	r1, #0
 8004a54:	9100      	str	r1, [sp, #0]
 8004a56:	2164      	movs	r1, #100	@ 0x64
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7ff f85e 	bl	8003b1a <drawString>
				sprintf(buffer2, "Old Lat: %d.%d",
						(int) (game.positions[game.numLocations - 1].lat),
 8004a5e:	4bb7      	ldr	r3, [pc, #732]	@ (8004d3c <main+0x6fc>)
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	1e5a      	subs	r2, r3, #1
 8004a64:	4bb5      	ldr	r3, [pc, #724]	@ (8004d3c <main+0x6fc>)
 8004a66:	3203      	adds	r2, #3
 8004a68:	00d2      	lsls	r2, r2, #3
 8004a6a:	58d3      	ldr	r3, [r2, r3]
				sprintf(buffer2, "Old Lat: %d.%d",
 8004a6c:	1c18      	adds	r0, r3, #0
 8004a6e:	f7fc fd4f 	bl	8001510 <__aeabi_f2iz>
 8004a72:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lat)
 8004a74:	4bb1      	ldr	r3, [pc, #708]	@ (8004d3c <main+0x6fc>)
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	1e5a      	subs	r2, r3, #1
 8004a7a:	4bb0      	ldr	r3, [pc, #704]	@ (8004d3c <main+0x6fc>)
 8004a7c:	3203      	adds	r2, #3
 8004a7e:	00d2      	lsls	r2, r2, #3
 8004a80:	58d3      	ldr	r3, [r2, r3]
										* 10000)) % 10000));
 8004a82:	49b5      	ldr	r1, [pc, #724]	@ (8004d58 <main+0x718>)
 8004a84:	1c18      	adds	r0, r3, #0
 8004a86:	f7fc fa61 	bl	8000f4c <__aeabi_fmul>
 8004a8a:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lat)
 8004a8c:	1c18      	adds	r0, r3, #0
 8004a8e:	f7fc fd3f 	bl	8001510 <__aeabi_f2iz>
 8004a92:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004a94:	49b1      	ldr	r1, [pc, #708]	@ (8004d5c <main+0x71c>)
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7fb fcca 	bl	8000430 <__aeabi_idivmod>
 8004a9c:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lat: %d.%d",
 8004a9e:	17da      	asrs	r2, r3, #31
 8004aa0:	189b      	adds	r3, r3, r2
 8004aa2:	4053      	eors	r3, r2
 8004aa4:	49ae      	ldr	r1, [pc, #696]	@ (8004d60 <main+0x720>)
 8004aa6:	48a7      	ldr	r0, [pc, #668]	@ (8004d44 <main+0x704>)
 8004aa8:	0022      	movs	r2, r4
 8004aaa:	f009 fdff 	bl	800e6ac <siprintf>
				drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004aae:	2301      	movs	r3, #1
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	4aa4      	ldr	r2, [pc, #656]	@ (8004d44 <main+0x704>)
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	9102      	str	r1, [sp, #8]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	9101      	str	r1, [sp, #4]
 8004abc:	2100      	movs	r1, #0
 8004abe:	9100      	str	r1, [sp, #0]
 8004ac0:	215a      	movs	r1, #90	@ 0x5a
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7ff f829 	bl	8003b1a <drawString>
				sprintf(buffer2, "Old Lon: %d.%d",
						(int) (game.positions[game.numLocations - 1].lon),
 8004ac8:	4b9c      	ldr	r3, [pc, #624]	@ (8004d3c <main+0x6fc>)
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	4a9b      	ldr	r2, [pc, #620]	@ (8004d3c <main+0x6fc>)
 8004ad0:	3303      	adds	r3, #3
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	18d3      	adds	r3, r2, r3
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	681b      	ldr	r3, [r3, #0]
				sprintf(buffer2, "Old Lon: %d.%d",
 8004ada:	1c18      	adds	r0, r3, #0
 8004adc:	f7fc fd18 	bl	8001510 <__aeabi_f2iz>
 8004ae0:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lon)
 8004ae2:	4b96      	ldr	r3, [pc, #600]	@ (8004d3c <main+0x6fc>)
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	4a94      	ldr	r2, [pc, #592]	@ (8004d3c <main+0x6fc>)
 8004aea:	3303      	adds	r3, #3
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	3304      	adds	r3, #4
 8004af2:	681b      	ldr	r3, [r3, #0]
										* 10000)) % 10000));
 8004af4:	4998      	ldr	r1, [pc, #608]	@ (8004d58 <main+0x718>)
 8004af6:	1c18      	adds	r0, r3, #0
 8004af8:	f7fc fa28 	bl	8000f4c <__aeabi_fmul>
 8004afc:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lon)
 8004afe:	1c18      	adds	r0, r3, #0
 8004b00:	f7fc fd06 	bl	8001510 <__aeabi_f2iz>
 8004b04:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004b06:	4995      	ldr	r1, [pc, #596]	@ (8004d5c <main+0x71c>)
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fb fc91 	bl	8000430 <__aeabi_idivmod>
 8004b0e:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lon: %d.%d",
 8004b10:	17da      	asrs	r2, r3, #31
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	4053      	eors	r3, r2
 8004b16:	4993      	ldr	r1, [pc, #588]	@ (8004d64 <main+0x724>)
 8004b18:	488a      	ldr	r0, [pc, #552]	@ (8004d44 <main+0x704>)
 8004b1a:	0022      	movs	r2, r4
 8004b1c:	f009 fdc6 	bl	800e6ac <siprintf>
				drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004b20:	2301      	movs	r3, #1
 8004b22:	425b      	negs	r3, r3
 8004b24:	4a87      	ldr	r2, [pc, #540]	@ (8004d44 <main+0x704>)
 8004b26:	2101      	movs	r1, #1
 8004b28:	9102      	str	r1, [sp, #8]
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	9101      	str	r1, [sp, #4]
 8004b2e:	2100      	movs	r1, #0
 8004b30:	9100      	str	r1, [sp, #0]
 8004b32:	2150      	movs	r1, #80	@ 0x50
 8004b34:	2000      	movs	r0, #0
 8004b36:	f7fe fff0 	bl	8003b1a <drawString>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004b3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004d68 <main+0x728>)
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f003 fe12 	bl	8008768 <HAL_GPIO_ReadPin>
 8004b44:	0003      	movs	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d168      	bne.n	8004c1c <main+0x5dc>
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8004b4a:	003b      	movs	r3, r7
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f001 fd4d 	bl	80065ec <GetJustLatLon>
 8004b52:	003b      	movs	r3, r7
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	1c18      	adds	r0, r3, #0
 8004b58:	f7fc fcda 	bl	8001510 <__aeabi_f2iz>
 8004b5c:	0004      	movs	r4, r0
							abs(
									((int) ((GetJustLatLon().lat) * 10000))
 8004b5e:	2508      	movs	r5, #8
 8004b60:	197b      	adds	r3, r7, r5
 8004b62:	0018      	movs	r0, r3
 8004b64:	f001 fd42 	bl	80065ec <GetJustLatLon>
 8004b68:	197b      	adds	r3, r7, r5
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	497a      	ldr	r1, [pc, #488]	@ (8004d58 <main+0x718>)
 8004b6e:	1c18      	adds	r0, r3, #0
 8004b70:	f7fc f9ec 	bl	8000f4c <__aeabi_fmul>
 8004b74:	1c03      	adds	r3, r0, #0
 8004b76:	1c18      	adds	r0, r3, #0
 8004b78:	f7fc fcca 	bl	8001510 <__aeabi_f2iz>
 8004b7c:	0003      	movs	r3, r0
											% 10000));
 8004b7e:	4977      	ldr	r1, [pc, #476]	@ (8004d5c <main+0x71c>)
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7fb fc55 	bl	8000430 <__aeabi_idivmod>
 8004b86:	000b      	movs	r3, r1
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8004b88:	17da      	asrs	r2, r3, #31
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	4053      	eors	r3, r2
 8004b8e:	4977      	ldr	r1, [pc, #476]	@ (8004d6c <main+0x72c>)
 8004b90:	486c      	ldr	r0, [pc, #432]	@ (8004d44 <main+0x704>)
 8004b92:	0022      	movs	r2, r4
 8004b94:	f009 fd8a 	bl	800e6ac <siprintf>
					drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004b98:	2301      	movs	r3, #1
 8004b9a:	425b      	negs	r3, r3
 8004b9c:	4a69      	ldr	r2, [pc, #420]	@ (8004d44 <main+0x704>)
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	9102      	str	r1, [sp, #8]
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	9101      	str	r1, [sp, #4]
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	9100      	str	r1, [sp, #0]
 8004baa:	2146      	movs	r1, #70	@ 0x46
 8004bac:	2000      	movs	r0, #0
 8004bae:	f7fe ffb4 	bl	8003b1a <drawString>
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 8004bb2:	2410      	movs	r4, #16
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f001 fd18 	bl	80065ec <GetJustLatLon>
 8004bbc:	193b      	adds	r3, r7, r4
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	1c18      	adds	r0, r3, #0
 8004bc2:	f7fc fca5 	bl	8001510 <__aeabi_f2iz>
 8004bc6:	0004      	movs	r4, r0
							abs(
									(int) (((GetJustLatLon().lon) * 10000))
 8004bc8:	2518      	movs	r5, #24
 8004bca:	197b      	adds	r3, r7, r5
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f001 fd0d 	bl	80065ec <GetJustLatLon>
 8004bd2:	197b      	adds	r3, r7, r5
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4960      	ldr	r1, [pc, #384]	@ (8004d58 <main+0x718>)
 8004bd8:	1c18      	adds	r0, r3, #0
 8004bda:	f7fc f9b7 	bl	8000f4c <__aeabi_fmul>
 8004bde:	1c03      	adds	r3, r0, #0
 8004be0:	1c18      	adds	r0, r3, #0
 8004be2:	f7fc fc95 	bl	8001510 <__aeabi_f2iz>
 8004be6:	0003      	movs	r3, r0
											% 10000));
 8004be8:	495c      	ldr	r1, [pc, #368]	@ (8004d5c <main+0x71c>)
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7fb fc20 	bl	8000430 <__aeabi_idivmod>
 8004bf0:	000b      	movs	r3, r1
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 8004bf2:	17da      	asrs	r2, r3, #31
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	4053      	eors	r3, r2
 8004bf8:	495d      	ldr	r1, [pc, #372]	@ (8004d70 <main+0x730>)
 8004bfa:	4852      	ldr	r0, [pc, #328]	@ (8004d44 <main+0x704>)
 8004bfc:	0022      	movs	r2, r4
 8004bfe:	f009 fd55 	bl	800e6ac <siprintf>
					drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 8004c02:	2301      	movs	r3, #1
 8004c04:	425b      	negs	r3, r3
 8004c06:	4a4f      	ldr	r2, [pc, #316]	@ (8004d44 <main+0x704>)
 8004c08:	2101      	movs	r1, #1
 8004c0a:	9102      	str	r1, [sp, #8]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	9101      	str	r1, [sp, #4]
 8004c10:	2100      	movs	r1, #0
 8004c12:	9100      	str	r1, [sp, #0]
 8004c14:	213c      	movs	r1, #60	@ 0x3c
 8004c16:	2000      	movs	r0, #0
 8004c18:	f7fe ff7f 	bl	8003b1a <drawString>
				}
				updateScreen = 0;
 8004c1c:	4b45      	ldr	r3, [pc, #276]	@ (8004d34 <main+0x6f4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004c22:	4b54      	ldr	r3, [pc, #336]	@ (8004d74 <main+0x734>)
 8004c24:	2104      	movs	r1, #4
 8004c26:	0018      	movs	r0, r3
 8004c28:	f003 fd9e 	bl	8008768 <HAL_GPIO_ReadPin>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d111      	bne.n	8004c56 <main+0x616>
				effect = MenuBeep;
 8004c32:	4b51      	ldr	r3, [pc, #324]	@ (8004d78 <main+0x738>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004c38:	4b4f      	ldr	r3, [pc, #316]	@ (8004d78 <main+0x738>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 fd19 	bl	8005674 <PlayEffect>

				currentMenu = Main;
 8004c42:	4b4e      	ldr	r3, [pc, #312]	@ (8004d7c <main+0x73c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004c48:	4b4d      	ldr	r3, [pc, #308]	@ (8004d80 <main+0x740>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7ff f8a8 	bl	8003da4 <fillScreen>
			} else
				canChange = 1;

			break;
 8004c54:	e162      	b.n	8004f1c <main+0x8dc>
				canChange = 1;
 8004c56:	4b4a      	ldr	r3, [pc, #296]	@ (8004d80 <main+0x740>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
			break;
 8004c5c:	e15e      	b.n	8004f1c <main+0x8dc>
			//{
			//SendData();
			//ReceiveData();
			//}

			if (updateScreen >= 2) {
 8004c5e:	4b35      	ldr	r3, [pc, #212]	@ (8004d34 <main+0x6f4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d800      	bhi.n	8004c68 <main+0x628>
 8004c66:	e134      	b.n	8004ed2 <main+0x892>
				updateScreen = 0;
 8004c68:	4b32      	ldr	r3, [pc, #200]	@ (8004d34 <main+0x6f4>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
				drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 8004c6e:	2301      	movs	r3, #1
 8004c70:	425b      	negs	r3, r3
 8004c72:	4a44      	ldr	r2, [pc, #272]	@ (8004d84 <main+0x744>)
 8004c74:	2101      	movs	r1, #1
 8004c76:	9102      	str	r1, [sp, #8]
 8004c78:	2101      	movs	r1, #1
 8004c7a:	9101      	str	r1, [sp, #4]
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	9100      	str	r1, [sp, #0]
 8004c80:	2196      	movs	r1, #150	@ 0x96
 8004c82:	2000      	movs	r0, #0
 8004c84:	f7fe ff49 	bl	8003b1a <drawString>
				sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 8004c88:	4a2c      	ldr	r2, [pc, #176]	@ (8004d3c <main+0x6fc>)
 8004c8a:	2392      	movs	r3, #146	@ 0x92
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	58d2      	ldr	r2, [r2, r3]
 8004c90:	493d      	ldr	r1, [pc, #244]	@ (8004d88 <main+0x748>)
 8004c92:	4b2c      	ldr	r3, [pc, #176]	@ (8004d44 <main+0x704>)
 8004c94:	0018      	movs	r0, r3
 8004c96:	f009 fd09 	bl	800e6ac <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	4a29      	ldr	r2, [pc, #164]	@ (8004d44 <main+0x704>)
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	9102      	str	r1, [sp, #8]
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	9101      	str	r1, [sp, #4]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	9100      	str	r1, [sp, #0]
 8004cac:	2182      	movs	r1, #130	@ 0x82
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7fe ff33 	bl	8003b1a <drawString>
				drawString(0, 110, "UPLOAD DATA", WHITE, BLACK, 1, 1);
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	425b      	negs	r3, r3
 8004cb8:	4a34      	ldr	r2, [pc, #208]	@ (8004d8c <main+0x74c>)
 8004cba:	2101      	movs	r1, #1
 8004cbc:	9102      	str	r1, [sp, #8]
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	9101      	str	r1, [sp, #4]
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	9100      	str	r1, [sp, #0]
 8004cc6:	216e      	movs	r1, #110	@ 0x6e
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f7fe ff26 	bl	8003b1a <drawString>
				if (editDifficulty) {
 8004cce:	4b30      	ldr	r3, [pc, #192]	@ (8004d90 <main+0x750>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d100      	bne.n	8004cd8 <main+0x698>
 8004cd6:	e095      	b.n	8004e04 <main+0x7c4>
					//Editing difficulty
					drawLine(0, 125, 128, 125, WHITE);
 8004cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d94 <main+0x754>)
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	237d      	movs	r3, #125	@ 0x7d
 8004cde:	2280      	movs	r2, #128	@ 0x80
 8004ce0:	217d      	movs	r1, #125	@ 0x7d
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f7fe fe89 	bl	80039fa <drawLine>
					//GET OUT when the center button is pressed!
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d68 <main+0x728>)
 8004cea:	2102      	movs	r1, #2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f003 fd3b 	bl	8008768 <HAL_GPIO_ReadPin>
 8004cf2:	1e03      	subs	r3, r0, #0
 8004cf4:	d00b      	beq.n	8004d0e <main+0x6ce>
						editDifficulty = 0;
 8004cf6:	4b26      	ldr	r3, [pc, #152]	@ (8004d90 <main+0x750>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
						drawLine(0, 125, 128, 125, BLACK);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	237d      	movs	r3, #125	@ 0x7d
 8004d02:	2280      	movs	r2, #128	@ 0x80
 8004d04:	217d      	movs	r1, #125	@ 0x7d
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7fe fe77 	bl	80039fa <drawLine>
 8004d0c:	e058      	b.n	8004dc0 <main+0x780>
					}
					//Right increments the goal
					else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8004d0e:	4b19      	ldr	r3, [pc, #100]	@ (8004d74 <main+0x734>)
 8004d10:	2104      	movs	r1, #4
 8004d12:	0018      	movs	r0, r3
 8004d14:	f003 fd28 	bl	8008768 <HAL_GPIO_ReadPin>
 8004d18:	1e03      	subs	r3, r0, #0
 8004d1a:	d03d      	beq.n	8004d98 <main+0x758>
						game.dailyGoal += 1000;
 8004d1c:	4a07      	ldr	r2, [pc, #28]	@ (8004d3c <main+0x6fc>)
 8004d1e:	2392      	movs	r3, #146	@ 0x92
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	58d3      	ldr	r3, [r2, r3]
 8004d24:	22fa      	movs	r2, #250	@ 0xfa
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	1899      	adds	r1, r3, r2
 8004d2a:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <main+0x6fc>)
 8004d2c:	2392      	movs	r3, #146	@ 0x92
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	50d1      	str	r1, [r2, r3]
 8004d32:	e045      	b.n	8004dc0 <main+0x780>
 8004d34:	20001b2c 	.word	0x20001b2c
 8004d38:	08010e68 	.word	0x08010e68
 8004d3c:	20000bbc 	.word	0x20000bbc
 8004d40:	08010e70 	.word	0x08010e70
 8004d44:	20001b54 	.word	0x20001b54
 8004d48:	08010e7c 	.word	0x08010e7c
 8004d4c:	08010e8c 	.word	0x08010e8c
 8004d50:	08010e9c 	.word	0x08010e9c
 8004d54:	08010ea8 	.word	0x08010ea8
 8004d58:	461c4000 	.word	0x461c4000
 8004d5c:	00002710 	.word	0x00002710
 8004d60:	08010eb8 	.word	0x08010eb8
 8004d64:	08010ec8 	.word	0x08010ec8
 8004d68:	50000800 	.word	0x50000800
 8004d6c:	08010ed8 	.word	0x08010ed8
 8004d70:	08010ee4 	.word	0x08010ee4
 8004d74:	50000400 	.word	0x50000400
 8004d78:	20000bb8 	.word	0x20000bb8
 8004d7c:	200009a4 	.word	0x200009a4
 8004d80:	200009a5 	.word	0x200009a5
 8004d84:	08010ef0 	.word	0x08010ef0
 8004d88:	08010efc 	.word	0x08010efc
 8004d8c:	08010f08 	.word	0x08010f08
 8004d90:	20001bc0 	.word	0x20001bc0
 8004d94:	0000ffff 	.word	0x0000ffff
					}
					//Left decrements the goal
					else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8004d98:	2380      	movs	r3, #128	@ 0x80
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	23a0      	movs	r3, #160	@ 0xa0
 8004d9e:	05db      	lsls	r3, r3, #23
 8004da0:	0011      	movs	r1, r2
 8004da2:	0018      	movs	r0, r3
 8004da4:	f003 fce0 	bl	8008768 <HAL_GPIO_ReadPin>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d009      	beq.n	8004dc0 <main+0x780>
						game.dailyGoal -= 1000;
 8004dac:	4a5f      	ldr	r2, [pc, #380]	@ (8004f2c <main+0x8ec>)
 8004dae:	2392      	movs	r3, #146	@ 0x92
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	58d3      	ldr	r3, [r2, r3]
 8004db4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f30 <main+0x8f0>)
 8004db6:	1899      	adds	r1, r3, r2
 8004db8:	4a5c      	ldr	r2, [pc, #368]	@ (8004f2c <main+0x8ec>)
 8004dba:	2392      	movs	r3, #146	@ 0x92
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	50d1      	str	r1, [r2, r3]
					}

					if (game.dailyGoal >= 999000) {
 8004dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f2c <main+0x8ec>)
 8004dc2:	2392      	movs	r3, #146	@ 0x92
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	58d3      	ldr	r3, [r2, r3]
 8004dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f34 <main+0x8f4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d905      	bls.n	8004dda <main+0x79a>
						game.dailyGoal = 0;
 8004dce:	4a57      	ldr	r2, [pc, #348]	@ (8004f2c <main+0x8ec>)
 8004dd0:	2392      	movs	r3, #146	@ 0x92
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	50d1      	str	r1, [r2, r3]
 8004dd8:	e00a      	b.n	8004df0 <main+0x7b0>
					} else if (game.dailyGoal <= 0) {
 8004dda:	4a54      	ldr	r2, [pc, #336]	@ (8004f2c <main+0x8ec>)
 8004ddc:	2392      	movs	r3, #146	@ 0x92
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	58d3      	ldr	r3, [r2, r3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <main+0x7b0>
						game.dailyGoal = 999000;
 8004de6:	4a51      	ldr	r2, [pc, #324]	@ (8004f2c <main+0x8ec>)
 8004de8:	2392      	movs	r3, #146	@ 0x92
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	4952      	ldr	r1, [pc, #328]	@ (8004f38 <main+0x8f8>)
 8004dee:	50d1      	str	r1, [r2, r3]
					}
					sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 8004df0:	4a4e      	ldr	r2, [pc, #312]	@ (8004f2c <main+0x8ec>)
 8004df2:	2392      	movs	r3, #146	@ 0x92
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	58d2      	ldr	r2, [r2, r3]
 8004df8:	4950      	ldr	r1, [pc, #320]	@ (8004f3c <main+0x8fc>)
 8004dfa:	4b51      	ldr	r3, [pc, #324]	@ (8004f40 <main+0x900>)
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f009 fc55 	bl	800e6ac <siprintf>
 8004e02:	e066      	b.n	8004ed2 <main+0x892>

				} else if (userUpload) {
 8004e04:	4b4f      	ldr	r3, [pc, #316]	@ (8004f44 <main+0x904>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <main+0x7dc>
					userUpload = 0;
 8004e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004f44 <main+0x904>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
					SendData();
 8004e12:	f000 fee1 	bl	8005bd8 <SendData>
					ReceiveData();
 8004e16:	f000 ffa7 	bl	8005d68 <ReceiveData>
 8004e1a:	e05a      	b.n	8004ed2 <main+0x892>
				} else {
					//Difficulty
					if (currentSetting == 0) {
 8004e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004f48 <main+0x908>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d110      	bne.n	8004e46 <main+0x806>
						//Try to underline the option being selected
						drawLine(0, 125, 20, 125, WHITE);
 8004e24:	4b49      	ldr	r3, [pc, #292]	@ (8004f4c <main+0x90c>)
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	237d      	movs	r3, #125	@ 0x7d
 8004e2a:	2214      	movs	r2, #20
 8004e2c:	217d      	movs	r1, #125	@ 0x7d
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fe fde3 	bl	80039fa <drawLine>
						//Then erase the highlight under the other option not being selected
						drawLine(0, 105, 20, 105, BLACK);
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	2369      	movs	r3, #105	@ 0x69
 8004e3a:	2214      	movs	r2, #20
 8004e3c:	2169      	movs	r1, #105	@ 0x69
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f7fe fddb 	bl	80039fa <drawLine>
 8004e44:	e013      	b.n	8004e6e <main+0x82e>
					}
					//Upload
					else if (currentSetting == 1) {
 8004e46:	4b40      	ldr	r3, [pc, #256]	@ (8004f48 <main+0x908>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d10f      	bne.n	8004e6e <main+0x82e>
						drawLine(0, 105, 20, 105, WHITE);
 8004e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f4c <main+0x90c>)
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	2369      	movs	r3, #105	@ 0x69
 8004e54:	2214      	movs	r2, #20
 8004e56:	2169      	movs	r1, #105	@ 0x69
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f7fe fdce 	bl	80039fa <drawLine>
						drawLine(0, 125, 20, 125, BLACK);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	237d      	movs	r3, #125	@ 0x7d
 8004e64:	2214      	movs	r2, #20
 8004e66:	217d      	movs	r1, #125	@ 0x7d
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f7fe fdc6 	bl	80039fa <drawLine>
					}
					//IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004e6e:	4b38      	ldr	r3, [pc, #224]	@ (8004f50 <main+0x910>)
 8004e70:	2104      	movs	r1, #4
 8004e72:	0018      	movs	r0, r3
 8004e74:	f003 fc78 	bl	8008768 <HAL_GPIO_ReadPin>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10c      	bne.n	8004e98 <main+0x858>
						++currentSetting;
 8004e7e:	4b32      	ldr	r3, [pc, #200]	@ (8004f48 <main+0x908>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	4b30      	ldr	r3, [pc, #192]	@ (8004f48 <main+0x908>)
 8004e86:	601a      	str	r2, [r3, #0]
						if (currentSetting > 1)
 8004e88:	4b2f      	ldr	r3, [pc, #188]	@ (8004f48 <main+0x908>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d920      	bls.n	8004ed2 <main+0x892>
							currentSetting = 0;
 8004e90:	4b2d      	ldr	r3, [pc, #180]	@ (8004f48 <main+0x908>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e01c      	b.n	8004ed2 <main+0x892>
					}
					//PD6=Center button
					else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 8004e98:	4b2e      	ldr	r3, [pc, #184]	@ (8004f54 <main+0x914>)
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f003 fc63 	bl	8008768 <HAL_GPIO_ReadPin>
 8004ea2:	1e03      	subs	r3, r0, #0
 8004ea4:	d007      	beq.n	8004eb6 <main+0x876>
							&& currentSetting == 0) {
 8004ea6:	4b28      	ldr	r3, [pc, #160]	@ (8004f48 <main+0x908>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <main+0x876>
						editDifficulty = 1;
 8004eae:	4b2a      	ldr	r3, [pc, #168]	@ (8004f58 <main+0x918>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e00d      	b.n	8004ed2 <main+0x892>
					} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 8004eb6:	4b27      	ldr	r3, [pc, #156]	@ (8004f54 <main+0x914>)
 8004eb8:	2102      	movs	r1, #2
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f003 fc54 	bl	8008768 <HAL_GPIO_ReadPin>
 8004ec0:	1e03      	subs	r3, r0, #0
 8004ec2:	d006      	beq.n	8004ed2 <main+0x892>
							&& currentSetting == 1) {
 8004ec4:	4b20      	ldr	r3, [pc, #128]	@ (8004f48 <main+0x908>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d102      	bne.n	8004ed2 <main+0x892>
						userUpload = 1;
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f44 <main+0x904>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
					}
				}
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET
 8004ed2:	2380      	movs	r3, #128	@ 0x80
 8004ed4:	011a      	lsls	r2, r3, #4
 8004ed6:	23a0      	movs	r3, #160	@ 0xa0
 8004ed8:	05db      	lsls	r3, r3, #23
 8004eda:	0011      	movs	r1, r2
 8004edc:	0018      	movs	r0, r3
 8004ede:	f003 fc43 	bl	8008768 <HAL_GPIO_ReadPin>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d115      	bne.n	8004f14 <main+0x8d4>
					&& !editDifficulty) {
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <main+0x918>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d111      	bne.n	8004f14 <main+0x8d4>
				effect = MenuBeep;
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f5c <main+0x91c>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004ef6:	4b19      	ldr	r3, [pc, #100]	@ (8004f5c <main+0x91c>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 fbba 	bl	8005674 <PlayEffect>

				currentMenu = Main;
 8004f00:	4b17      	ldr	r3, [pc, #92]	@ (8004f60 <main+0x920>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004f06:	4b17      	ldr	r3, [pc, #92]	@ (8004f64 <main+0x924>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f7fe ff49 	bl	8003da4 <fillScreen>
			} else
				canChange = 1;
			break;
 8004f12:	e002      	b.n	8004f1a <main+0x8da>
				canChange = 1;
 8004f14:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <main+0x924>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
			break;
 8004f1a:	46c0      	nop			@ (mov r8, r8)
			 drawString(70, 70, buffer, BLACK, GREEN, 1, 1);

			 break;*/

		}
		totalFrames++;
 8004f1c:	4b12      	ldr	r3, [pc, #72]	@ (8004f68 <main+0x928>)
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <main+0x928>)
 8004f26:	801a      	strh	r2, [r3, #0]
		_ADXL343_ReadReg8(0x15, &steps, 2);
 8004f28:	f7ff fba6 	bl	8004678 <main+0x38>
 8004f2c:	20000bbc 	.word	0x20000bbc
 8004f30:	fffffc18 	.word	0xfffffc18
 8004f34:	000f3e57 	.word	0x000f3e57
 8004f38:	000f3e58 	.word	0x000f3e58
 8004f3c:	08010f14 	.word	0x08010f14
 8004f40:	20001b54 	.word	0x20001b54
 8004f44:	20001bc4 	.word	0x20001bc4
 8004f48:	20001bbc 	.word	0x20001bbc
 8004f4c:	0000ffff 	.word	0x0000ffff
 8004f50:	50000400 	.word	0x50000400
 8004f54:	50000800 	.word	0x50000800
 8004f58:	20001bc0 	.word	0x20001bc0
 8004f5c:	20000bb8 	.word	0x20000bb8
 8004f60:	200009a4 	.word	0x200009a4
 8004f64:	200009a5 	.word	0x200009a5
 8004f68:	20000d60 	.word	0x20000d60

08004f6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b095      	sub	sp, #84	@ 0x54
 8004f70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004f72:	2414      	movs	r4, #20
 8004f74:	193b      	adds	r3, r7, r4
 8004f76:	0018      	movs	r0, r3
 8004f78:	233c      	movs	r3, #60	@ 0x3c
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	f009 fc01 	bl	800e784 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	0018      	movs	r0, r3
 8004f86:	2310      	movs	r3, #16
 8004f88:	001a      	movs	r2, r3
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f009 fbfa 	bl	800e784 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	0018      	movs	r0, r3
 8004f96:	f004 fa99 	bl	80094cc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	220a      	movs	r2, #10
 8004f9e:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	2280      	movs	r2, #128	@ 0x80
 8004fa4:	0052      	lsls	r2, r2, #1
 8004fa6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004fa8:	0021      	movs	r1, r4
 8004faa:	187b      	adds	r3, r7, r1
 8004fac:	2200      	movs	r2, #0
 8004fae:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fb0:	187b      	adds	r3, r7, r1
 8004fb2:	2240      	movs	r2, #64	@ 0x40
 8004fb4:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004fb6:	187b      	adds	r3, r7, r1
 8004fb8:	2201      	movs	r2, #1
 8004fba:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	2200      	movs	r2, #0
 8004fcc:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLN = 8;
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	2280      	movs	r2, #128	@ 0x80
 8004fd8:	0292      	lsls	r2, r2, #10
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	2280      	movs	r2, #128	@ 0x80
 8004fe0:	0492      	lsls	r2, r2, #18
 8004fe2:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004fe4:	187b      	adds	r3, r7, r1
 8004fe6:	2280      	movs	r2, #128	@ 0x80
 8004fe8:	0592      	lsls	r2, r2, #22
 8004fea:	639a      	str	r2, [r3, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004fec:	187b      	adds	r3, r7, r1
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f004 fab8 	bl	8009564 <HAL_RCC_OscConfig>
 8004ff4:	1e03      	subs	r3, r0, #0
 8004ff6:	d001      	beq.n	8004ffc <SystemClock_Config+0x90>
		Error_Handler();
 8004ff8:	f001 fb9a 	bl	8006730 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	2207      	movs	r2, #7
 8005000:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005002:	1d3b      	adds	r3, r7, #4
 8005004:	2202      	movs	r2, #2
 8005006:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005008:	1d3b      	adds	r3, r7, #4
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	2200      	movs	r2, #0
 8005012:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	2102      	movs	r1, #2
 8005018:	0018      	movs	r0, r3
 800501a:	f004 fe03 	bl	8009c24 <HAL_RCC_ClockConfig>
 800501e:	1e03      	subs	r3, r0, #0
 8005020:	d001      	beq.n	8005026 <SystemClock_Config+0xba>
		Error_Handler();
 8005022:	f001 fb85 	bl	8006730 <Error_Handler>
	}
}
 8005026:	46c0      	nop			@ (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b015      	add	sp, #84	@ 0x54
 800502c:	bd90      	pop	{r4, r7, pc}
	...

08005030 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005036:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <MX_I2C1_Init+0x78>)
 8005038:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10B17DB5;
 800503a:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800503c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <MX_I2C1_Init+0x7c>)
 800503e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8005040:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005046:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005048:	2201      	movs	r2, #1
 800504a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800504c:	4b15      	ldr	r3, [pc, #84]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005058:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800505a:	2200      	movs	r2, #0
 800505c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800505e:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005060:	2200      	movs	r2, #0
 8005062:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005064:	4b0f      	ldr	r3, [pc, #60]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005066:	2200      	movs	r2, #0
 8005068:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800506a:	4b0e      	ldr	r3, [pc, #56]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800506c:	0018      	movs	r0, r3
 800506e:	f003 fbe9 	bl	8008844 <HAL_I2C_Init>
 8005072:	1e03      	subs	r3, r0, #0
 8005074:	d001      	beq.n	800507a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8005076:	f001 fb5b 	bl	8006730 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800507c:	2100      	movs	r1, #0
 800507e:	0018      	movs	r0, r3
 8005080:	f004 f98c 	bl	800939c <HAL_I2CEx_ConfigAnalogFilter>
 8005084:	1e03      	subs	r3, r0, #0
 8005086:	d001      	beq.n	800508c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8005088:	f001 fb52 	bl	8006730 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800508c:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800508e:	2100      	movs	r1, #0
 8005090:	0018      	movs	r0, r3
 8005092:	f004 f9cf 	bl	8009434 <HAL_I2CEx_ConfigDigitalFilter>
 8005096:	1e03      	subs	r3, r0, #0
 8005098:	d001      	beq.n	800509e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800509a:	f001 fb49 	bl	8006730 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800509e:	46c0      	nop			@ (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20001bc8 	.word	0x20001bc8
 80050a8:	40005400 	.word	0x40005400
 80050ac:	10b17db5 	.word	0x10b17db5

080050b0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b090      	sub	sp, #64	@ 0x40
 80050b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80050b6:	232c      	movs	r3, #44	@ 0x2c
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	0018      	movs	r0, r3
 80050bc:	2314      	movs	r3, #20
 80050be:	001a      	movs	r2, r3
 80050c0:	2100      	movs	r1, #0
 80050c2:	f009 fb5f 	bl	800e784 <memset>
	RTC_DateTypeDef sDate = { 0 };
 80050c6:	2328      	movs	r3, #40	@ 0x28
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
	RTC_AlarmTypeDef sAlarm = { 0 };
 80050ce:	003b      	movs	r3, r7
 80050d0:	0018      	movs	r0, r3
 80050d2:	2328      	movs	r3, #40	@ 0x28
 80050d4:	001a      	movs	r2, r3
 80050d6:	2100      	movs	r1, #0
 80050d8:	f009 fb54 	bl	800e784 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80050dc:	4b49      	ldr	r3, [pc, #292]	@ (8005204 <MX_RTC_Init+0x154>)
 80050de:	4a4a      	ldr	r2, [pc, #296]	@ (8005208 <MX_RTC_Init+0x158>)
 80050e0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80050e2:	4b48      	ldr	r3, [pc, #288]	@ (8005204 <MX_RTC_Init+0x154>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	609a      	str	r2, [r3, #8]
	hrtc.Init.AsynchPrediv = 127;
 80050e8:	4b46      	ldr	r3, [pc, #280]	@ (8005204 <MX_RTC_Init+0x154>)
 80050ea:	227f      	movs	r2, #127	@ 0x7f
 80050ec:	60da      	str	r2, [r3, #12]
	hrtc.Init.SynchPrediv = 255;
 80050ee:	4b45      	ldr	r3, [pc, #276]	@ (8005204 <MX_RTC_Init+0x154>)
 80050f0:	22ff      	movs	r2, #255	@ 0xff
 80050f2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80050f4:	4b43      	ldr	r3, [pc, #268]	@ (8005204 <MX_RTC_Init+0x154>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80050fa:	4b42      	ldr	r3, [pc, #264]	@ (8005204 <MX_RTC_Init+0x154>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005100:	4b40      	ldr	r3, [pc, #256]	@ (8005204 <MX_RTC_Init+0x154>)
 8005102:	2200      	movs	r2, #0
 8005104:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005106:	4b3f      	ldr	r3, [pc, #252]	@ (8005204 <MX_RTC_Init+0x154>)
 8005108:	2280      	movs	r2, #128	@ 0x80
 800510a:	05d2      	lsls	r2, r2, #23
 800510c:	621a      	str	r2, [r3, #32]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800510e:	4b3d      	ldr	r3, [pc, #244]	@ (8005204 <MX_RTC_Init+0x154>)
 8005110:	2200      	movs	r2, #0
 8005112:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8005114:	4b3b      	ldr	r3, [pc, #236]	@ (8005204 <MX_RTC_Init+0x154>)
 8005116:	0018      	movs	r0, r3
 8005118:	f005 f96a 	bl	800a3f0 <HAL_RTC_Init>
 800511c:	1e03      	subs	r3, r0, #0
 800511e:	d001      	beq.n	8005124 <MX_RTC_Init+0x74>
		Error_Handler();
 8005120:	f001 fb06 	bl	8006730 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8005124:	212c      	movs	r1, #44	@ 0x2c
 8005126:	187b      	adds	r3, r7, r1
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x0;
 800512c:	187b      	adds	r3, r7, r1
 800512e:	2200      	movs	r2, #0
 8005130:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x0;
 8005132:	187b      	adds	r3, r7, r1
 8005134:	2200      	movs	r2, #0
 8005136:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x0;
 8005138:	187b      	adds	r3, r7, r1
 800513a:	2200      	movs	r2, #0
 800513c:	605a      	str	r2, [r3, #4]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800513e:	187b      	adds	r3, r7, r1
 8005140:	2200      	movs	r2, #0
 8005142:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005144:	187b      	adds	r3, r7, r1
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800514a:	1879      	adds	r1, r7, r1
 800514c:	4b2d      	ldr	r3, [pc, #180]	@ (8005204 <MX_RTC_Init+0x154>)
 800514e:	2201      	movs	r2, #1
 8005150:	0018      	movs	r0, r3
 8005152:	f005 f9ef 	bl	800a534 <HAL_RTC_SetTime>
 8005156:	1e03      	subs	r3, r0, #0
 8005158:	d001      	beq.n	800515e <MX_RTC_Init+0xae>
		Error_Handler();
 800515a:	f001 fae9 	bl	8006730 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800515e:	2128      	movs	r1, #40	@ 0x28
 8005160:	187b      	adds	r3, r7, r1
 8005162:	2201      	movs	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 8005166:	187b      	adds	r3, r7, r1
 8005168:	2201      	movs	r2, #1
 800516a:	705a      	strb	r2, [r3, #1]
	sDate.Date = 0x1;
 800516c:	187b      	adds	r3, r7, r1
 800516e:	2201      	movs	r2, #1
 8005170:	709a      	strb	r2, [r3, #2]
	sDate.Year = 0x0;
 8005172:	187b      	adds	r3, r7, r1
 8005174:	2200      	movs	r2, #0
 8005176:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8005178:	1879      	adds	r1, r7, r1
 800517a:	4b22      	ldr	r3, [pc, #136]	@ (8005204 <MX_RTC_Init+0x154>)
 800517c:	2201      	movs	r2, #1
 800517e:	0018      	movs	r0, r3
 8005180:	f005 fa80 	bl	800a684 <HAL_RTC_SetDate>
 8005184:	1e03      	subs	r3, r0, #0
 8005186:	d001      	beq.n	800518c <MX_RTC_Init+0xdc>
		Error_Handler();
 8005188:	f001 fad2 	bl	8006730 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 800518c:	003b      	movs	r3, r7
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 8005192:	003b      	movs	r3, r7
 8005194:	2200      	movs	r2, #0
 8005196:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = 0x1;
 8005198:	003b      	movs	r3, r7
 800519a:	2201      	movs	r2, #1
 800519c:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800519e:	003b      	movs	r3, r7
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80051a4:	003b      	movs	r3, r7
 80051a6:	2200      	movs	r2, #0
 80051a8:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80051aa:	003b      	movs	r3, r7
 80051ac:	2200      	movs	r2, #0
 80051ae:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80051b0:	003b      	movs	r3, r7
 80051b2:	2200      	movs	r2, #0
 80051b4:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80051b6:	003b      	movs	r3, r7
 80051b8:	2200      	movs	r2, #0
 80051ba:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80051bc:	003b      	movs	r3, r7
 80051be:	2200      	movs	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 80051c2:	003b      	movs	r3, r7
 80051c4:	2220      	movs	r2, #32
 80051c6:	2101      	movs	r1, #1
 80051c8:	5499      	strb	r1, [r3, r2]
	sAlarm.Alarm = RTC_ALARM_A;
 80051ca:	003b      	movs	r3, r7
 80051cc:	2280      	movs	r2, #128	@ 0x80
 80051ce:	0052      	lsls	r2, r2, #1
 80051d0:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80051d2:	0039      	movs	r1, r7
 80051d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <MX_RTC_Init+0x154>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	0018      	movs	r0, r3
 80051da:	f005 fae5 	bl	800a7a8 <HAL_RTC_SetAlarm_IT>
 80051de:	1e03      	subs	r3, r0, #0
 80051e0:	d001      	beq.n	80051e6 <MX_RTC_Init+0x136>
		Error_Handler();
 80051e2:	f001 faa5 	bl	8006730 <Error_Handler>
	}

	/** Enable the WakeUp
	 */
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16)
 80051e6:	4909      	ldr	r1, [pc, #36]	@ (800520c <MX_RTC_Init+0x15c>)
 80051e8:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <MX_RTC_Init+0x154>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	0018      	movs	r0, r3
 80051ee:	f005 fe11 	bl	800ae14 <HAL_RTCEx_SetWakeUpTimer_IT>
 80051f2:	1e03      	subs	r3, r0, #0
 80051f4:	d001      	beq.n	80051fa <MX_RTC_Init+0x14a>
			!= HAL_OK) {
		Error_Handler();
 80051f6:	f001 fa9b 	bl	8006730 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b010      	add	sp, #64	@ 0x40
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	20001c1c 	.word	0x20001c1c
 8005208:	40002800 	.word	0x40002800
 800520c:	0000500b 	.word	0x0000500b

08005210 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8005214:	4b1c      	ldr	r3, [pc, #112]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005216:	4a1d      	ldr	r2, [pc, #116]	@ (800528c <MX_SPI1_Init+0x7c>)
 8005218:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800521a:	4b1b      	ldr	r3, [pc, #108]	@ (8005288 <MX_SPI1_Init+0x78>)
 800521c:	2282      	movs	r2, #130	@ 0x82
 800521e:	0052      	lsls	r2, r2, #1
 8005220:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8005222:	4b19      	ldr	r3, [pc, #100]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005224:	2280      	movs	r2, #128	@ 0x80
 8005226:	0212      	lsls	r2, r2, #8
 8005228:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800522a:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <MX_SPI1_Init+0x78>)
 800522c:	22e0      	movs	r2, #224	@ 0xe0
 800522e:	00d2      	lsls	r2, r2, #3
 8005230:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005232:	4b15      	ldr	r3, [pc, #84]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005234:	2200      	movs	r2, #0
 8005236:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005238:	4b13      	ldr	r3, [pc, #76]	@ (8005288 <MX_SPI1_Init+0x78>)
 800523a:	2200      	movs	r2, #0
 800523c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800523e:	4b12      	ldr	r3, [pc, #72]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005240:	2280      	movs	r2, #128	@ 0x80
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005246:	4b10      	ldr	r3, [pc, #64]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005248:	2220      	movs	r2, #32
 800524a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800524c:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <MX_SPI1_Init+0x78>)
 800524e:	2200      	movs	r2, #0
 8005250:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005252:	4b0d      	ldr	r3, [pc, #52]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <MX_SPI1_Init+0x78>)
 800525a:	2200      	movs	r2, #0
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005260:	2207      	movs	r2, #7
 8005262:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005264:	4b08      	ldr	r3, [pc, #32]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800526a:	4b07      	ldr	r3, [pc, #28]	@ (8005288 <MX_SPI1_Init+0x78>)
 800526c:	2208      	movs	r2, #8
 800526e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <MX_SPI1_Init+0x78>)
 8005272:	0018      	movs	r0, r3
 8005274:	f005 fe96 	bl	800afa4 <HAL_SPI_Init>
 8005278:	1e03      	subs	r3, r0, #0
 800527a:	d001      	beq.n	8005280 <MX_SPI1_Init+0x70>
		Error_Handler();
 800527c:	f001 fa58 	bl	8006730 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8005280:	46c0      	nop			@ (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	20001c48 	.word	0x20001c48
 800528c:	40013000 	.word	0x40013000

08005290 <MX_TIM17_Init>:
/**
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b094      	sub	sp, #80	@ 0x50
 8005294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005296:	2334      	movs	r3, #52	@ 0x34
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	0018      	movs	r0, r3
 800529c:	231c      	movs	r3, #28
 800529e:	001a      	movs	r2, r3
 80052a0:	2100      	movs	r1, #0
 80052a2:	f009 fa6f 	bl	800e784 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80052a6:	003b      	movs	r3, r7
 80052a8:	0018      	movs	r0, r3
 80052aa:	2334      	movs	r3, #52	@ 0x34
 80052ac:	001a      	movs	r2, r3
 80052ae:	2100      	movs	r1, #0
 80052b0:	f009 fa68 	bl	800e784 <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80052b4:	4b37      	ldr	r3, [pc, #220]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052b6:	4a38      	ldr	r2, [pc, #224]	@ (8005398 <MX_TIM17_Init+0x108>)
 80052b8:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 0;
 80052ba:	4b36      	ldr	r3, [pc, #216]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052bc:	2200      	movs	r2, #0
 80052be:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052c0:	4b34      	ldr	r3, [pc, #208]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 65535;
 80052c6:	4b33      	ldr	r3, [pc, #204]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052c8:	4a34      	ldr	r2, [pc, #208]	@ (800539c <MX_TIM17_Init+0x10c>)
 80052ca:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052cc:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 80052d2:	4b30      	ldr	r3, [pc, #192]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052da:	2200      	movs	r2, #0
 80052dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 80052de:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052e0:	0018      	movs	r0, r3
 80052e2:	f006 f9ed 	bl	800b6c0 <HAL_TIM_Base_Init>
 80052e6:	1e03      	subs	r3, r0, #0
 80052e8:	d001      	beq.n	80052ee <MX_TIM17_Init+0x5e>
		Error_Handler();
 80052ea:	f001 fa21 	bl	8006730 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 80052ee:	4b29      	ldr	r3, [pc, #164]	@ (8005394 <MX_TIM17_Init+0x104>)
 80052f0:	0018      	movs	r0, r3
 80052f2:	f006 fa3d 	bl	800b770 <HAL_TIM_PWM_Init>
 80052f6:	1e03      	subs	r3, r0, #0
 80052f8:	d001      	beq.n	80052fe <MX_TIM17_Init+0x6e>
		Error_Handler();
 80052fa:	f001 fa19 	bl	8006730 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052fe:	2134      	movs	r1, #52	@ 0x34
 8005300:	187b      	adds	r3, r7, r1
 8005302:	2260      	movs	r2, #96	@ 0x60
 8005304:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8005306:	187b      	adds	r3, r7, r1
 8005308:	2200      	movs	r2, #0
 800530a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800530c:	187b      	adds	r3, r7, r1
 800530e:	2200      	movs	r2, #0
 8005310:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005312:	187b      	adds	r3, r7, r1
 8005314:	2200      	movs	r2, #0
 8005316:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005318:	187b      	adds	r3, r7, r1
 800531a:	2200      	movs	r2, #0
 800531c:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800531e:	187b      	adds	r3, r7, r1
 8005320:	2200      	movs	r2, #0
 8005322:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005324:	187b      	adds	r3, r7, r1
 8005326:	2200      	movs	r2, #0
 8005328:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 800532a:	1879      	adds	r1, r7, r1
 800532c:	4b19      	ldr	r3, [pc, #100]	@ (8005394 <MX_TIM17_Init+0x104>)
 800532e:	2200      	movs	r2, #0
 8005330:	0018      	movs	r0, r3
 8005332:	f006 fbf9 	bl	800bb28 <HAL_TIM_PWM_ConfigChannel>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d001      	beq.n	800533e <MX_TIM17_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 800533a:	f001 f9f9 	bl	8006730 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800533e:	003b      	movs	r3, r7
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005344:	003b      	movs	r3, r7
 8005346:	2200      	movs	r2, #0
 8005348:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800534a:	003b      	movs	r3, r7
 800534c:	2200      	movs	r2, #0
 800534e:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8005350:	003b      	movs	r3, r7
 8005352:	2200      	movs	r2, #0
 8005354:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005356:	003b      	movs	r3, r7
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800535c:	003b      	movs	r3, r7
 800535e:	2280      	movs	r2, #128	@ 0x80
 8005360:	0192      	lsls	r2, r2, #6
 8005362:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8005364:	003b      	movs	r3, r7
 8005366:	2200      	movs	r2, #0
 8005368:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800536a:	003b      	movs	r3, r7
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8005370:	003a      	movs	r2, r7
 8005372:	4b08      	ldr	r3, [pc, #32]	@ (8005394 <MX_TIM17_Init+0x104>)
 8005374:	0011      	movs	r1, r2
 8005376:	0018      	movs	r0, r3
 8005378:	f007 f856 	bl	800c428 <HAL_TIMEx_ConfigBreakDeadTime>
 800537c:	1e03      	subs	r3, r0, #0
 800537e:	d001      	beq.n	8005384 <MX_TIM17_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8005380:	f001 f9d6 	bl	8006730 <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */
	HAL_TIM_MspPostInit(&htim17);
 8005384:	4b03      	ldr	r3, [pc, #12]	@ (8005394 <MX_TIM17_Init+0x104>)
 8005386:	0018      	movs	r0, r3
 8005388:	f001 ff82 	bl	8007290 <HAL_TIM_MspPostInit>

}
 800538c:	46c0      	nop			@ (mov r8, r8)
 800538e:	46bd      	mov	sp, r7
 8005390:	b014      	add	sp, #80	@ 0x50
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20001cac 	.word	0x20001cac
 8005398:	40014800 	.word	0x40014800
 800539c:	0000ffff 	.word	0x0000ffff

080053a0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80053a4:	4b23      	ldr	r3, [pc, #140]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053a6:	4a24      	ldr	r2, [pc, #144]	@ (8005438 <MX_USART1_UART_Init+0x98>)
 80053a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80053aa:	4b22      	ldr	r3, [pc, #136]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053ac:	2296      	movs	r2, #150	@ 0x96
 80053ae:	0192      	lsls	r2, r2, #6
 80053b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053b2:	4b20      	ldr	r3, [pc, #128]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80053b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80053be:	4b1d      	ldr	r3, [pc, #116]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053c6:	220c      	movs	r2, #12
 80053c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053d0:	4b18      	ldr	r3, [pc, #96]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053d6:	4b17      	ldr	r3, [pc, #92]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053d8:	2200      	movs	r2, #0
 80053da:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053dc:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053de:	2200      	movs	r2, #0
 80053e0:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053e2:	4b14      	ldr	r3, [pc, #80]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80053e8:	4b12      	ldr	r3, [pc, #72]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053ea:	0018      	movs	r0, r3
 80053ec:	f007 f8b8 	bl	800c560 <HAL_UART_Init>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d001      	beq.n	80053f8 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 80053f4:	f001 f99c 	bl	8006730 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80053f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 80053fa:	2100      	movs	r1, #0
 80053fc:	0018      	movs	r0, r3
 80053fe:	f008 f853 	bl	800d4a8 <HAL_UARTEx_SetTxFifoThreshold>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d001      	beq.n	800540a <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8005406:	f001 f993 	bl	8006730 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800540a:	4b0a      	ldr	r3, [pc, #40]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 800540c:	2100      	movs	r1, #0
 800540e:	0018      	movs	r0, r3
 8005410:	f008 f88a 	bl	800d528 <HAL_UARTEx_SetRxFifoThreshold>
 8005414:	1e03      	subs	r3, r0, #0
 8005416:	d001      	beq.n	800541c <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8005418:	f001 f98a 	bl	8006730 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <MX_USART1_UART_Init+0x94>)
 800541e:	0018      	movs	r0, r3
 8005420:	f008 f808 	bl	800d434 <HAL_UARTEx_DisableFifoMode>
 8005424:	1e03      	subs	r3, r0, #0
 8005426:	d001      	beq.n	800542c <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8005428:	f001 f982 	bl	8006730 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800542c:	46c0      	nop			@ (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	20001cf8 	.word	0x20001cf8
 8005438:	40013800 	.word	0x40013800

0800543c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8005440:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005442:	4a24      	ldr	r2, [pc, #144]	@ (80054d4 <MX_USART2_UART_Init+0x98>)
 8005444:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8005446:	4b22      	ldr	r3, [pc, #136]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005448:	22e1      	movs	r2, #225	@ 0xe1
 800544a:	0252      	lsls	r2, r2, #9
 800544c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800544e:	4b20      	ldr	r3, [pc, #128]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8005454:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005456:	2200      	movs	r2, #0
 8005458:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800545a:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 800545c:	2200      	movs	r2, #0
 800545e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8005460:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005462:	220c      	movs	r2, #12
 8005464:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005466:	4b1a      	ldr	r3, [pc, #104]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005468:	2200      	movs	r2, #0
 800546a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800546c:	4b18      	ldr	r3, [pc, #96]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 800546e:	2200      	movs	r2, #0
 8005470:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005472:	4b17      	ldr	r3, [pc, #92]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005474:	2200      	movs	r2, #0
 8005476:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005478:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 800547a:	2200      	movs	r2, #0
 800547c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800547e:	4b14      	ldr	r3, [pc, #80]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005480:	2200      	movs	r2, #0
 8005482:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8005484:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005486:	0018      	movs	r0, r3
 8005488:	f007 f86a 	bl	800c560 <HAL_UART_Init>
 800548c:	1e03      	subs	r3, r0, #0
 800548e:	d001      	beq.n	8005494 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8005490:	f001 f94e 	bl	8006730 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8005494:	4b0e      	ldr	r3, [pc, #56]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 8005496:	2100      	movs	r1, #0
 8005498:	0018      	movs	r0, r3
 800549a:	f008 f805 	bl	800d4a8 <HAL_UARTEx_SetTxFifoThreshold>
 800549e:	1e03      	subs	r3, r0, #0
 80054a0:	d001      	beq.n	80054a6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80054a2:	f001 f945 	bl	8006730 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 80054a8:	2100      	movs	r1, #0
 80054aa:	0018      	movs	r0, r3
 80054ac:	f008 f83c 	bl	800d528 <HAL_UARTEx_SetRxFifoThreshold>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d001      	beq.n	80054b8 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80054b4:	f001 f93c 	bl	8006730 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <MX_USART2_UART_Init+0x94>)
 80054ba:	0018      	movs	r0, r3
 80054bc:	f007 ffba 	bl	800d434 <HAL_UARTEx_DisableFifoMode>
 80054c0:	1e03      	subs	r3, r0, #0
 80054c2:	d001      	beq.n	80054c8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 80054c4:	f001 f934 	bl	8006730 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80054c8:	46c0      	nop			@ (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	20001d8c 	.word	0x20001d8c
 80054d4:	40004400 	.word	0x40004400

080054d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b08b      	sub	sp, #44	@ 0x2c
 80054dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80054de:	2414      	movs	r4, #20
 80054e0:	193b      	adds	r3, r7, r4
 80054e2:	0018      	movs	r0, r3
 80054e4:	2314      	movs	r3, #20
 80054e6:	001a      	movs	r2, r3
 80054e8:	2100      	movs	r1, #0
 80054ea:	f009 f94b 	bl	800e784 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80054ee:	4b4d      	ldr	r3, [pc, #308]	@ (8005624 <MX_GPIO_Init+0x14c>)
 80054f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005624 <MX_GPIO_Init+0x14c>)
 80054f4:	2104      	movs	r1, #4
 80054f6:	430a      	orrs	r2, r1
 80054f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80054fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005624 <MX_GPIO_Init+0x14c>)
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	2204      	movs	r2, #4
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005506:	4b47      	ldr	r3, [pc, #284]	@ (8005624 <MX_GPIO_Init+0x14c>)
 8005508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800550a:	4b46      	ldr	r3, [pc, #280]	@ (8005624 <MX_GPIO_Init+0x14c>)
 800550c:	2101      	movs	r1, #1
 800550e:	430a      	orrs	r2, r1
 8005510:	635a      	str	r2, [r3, #52]	@ 0x34
 8005512:	4b44      	ldr	r3, [pc, #272]	@ (8005624 <MX_GPIO_Init+0x14c>)
 8005514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005516:	2201      	movs	r2, #1
 8005518:	4013      	ands	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800551e:	4b41      	ldr	r3, [pc, #260]	@ (8005624 <MX_GPIO_Init+0x14c>)
 8005520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005522:	4b40      	ldr	r3, [pc, #256]	@ (8005624 <MX_GPIO_Init+0x14c>)
 8005524:	2102      	movs	r1, #2
 8005526:	430a      	orrs	r2, r1
 8005528:	635a      	str	r2, [r3, #52]	@ 0x34
 800552a:	4b3e      	ldr	r3, [pc, #248]	@ (8005624 <MX_GPIO_Init+0x14c>)
 800552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552e:	2202      	movs	r2, #2
 8005530:	4013      	ands	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005536:	4b3b      	ldr	r3, [pc, #236]	@ (8005624 <MX_GPIO_Init+0x14c>)
 8005538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800553a:	4b3a      	ldr	r3, [pc, #232]	@ (8005624 <MX_GPIO_Init+0x14c>)
 800553c:	2108      	movs	r1, #8
 800553e:	430a      	orrs	r2, r1
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34
 8005542:	4b38      	ldr	r3, [pc, #224]	@ (8005624 <MX_GPIO_Init+0x14c>)
 8005544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005546:	2208      	movs	r2, #8
 8005548:	4013      	ands	r3, r2
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_15,
 800554e:	4936      	ldr	r1, [pc, #216]	@ (8005628 <MX_GPIO_Init+0x150>)
 8005550:	23a0      	movs	r3, #160	@ 0xa0
 8005552:	05db      	lsls	r3, r3, #23
 8005554:	2200      	movs	r2, #0
 8005556:	0018      	movs	r0, r3
 8005558:	f003 f923 	bl	80087a2 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800555c:	193b      	adds	r3, r7, r4
 800555e:	2202      	movs	r2, #2
 8005560:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005562:	193b      	adds	r3, r7, r4
 8005564:	2288      	movs	r2, #136	@ 0x88
 8005566:	0352      	lsls	r2, r2, #13
 8005568:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556a:	193b      	adds	r3, r7, r4
 800556c:	2200      	movs	r2, #0
 800556e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005570:	193b      	adds	r3, r7, r4
 8005572:	4a2e      	ldr	r2, [pc, #184]	@ (800562c <MX_GPIO_Init+0x154>)
 8005574:	0019      	movs	r1, r3
 8005576:	0010      	movs	r0, r2
 8005578:	f002 ff8a 	bl	8008490 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA4 PA5 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_15;
 800557c:	193b      	adds	r3, r7, r4
 800557e:	4a2a      	ldr	r2, [pc, #168]	@ (8005628 <MX_GPIO_Init+0x150>)
 8005580:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005582:	193b      	adds	r3, r7, r4
 8005584:	2201      	movs	r2, #1
 8005586:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	193b      	adds	r3, r7, r4
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558e:	193b      	adds	r3, r7, r4
 8005590:	2200      	movs	r2, #0
 8005592:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005594:	193a      	adds	r2, r7, r4
 8005596:	23a0      	movs	r3, #160	@ 0xa0
 8005598:	05db      	lsls	r3, r3, #23
 800559a:	0011      	movs	r1, r2
 800559c:	0018      	movs	r0, r3
 800559e:	f002 ff77 	bl	8008490 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055a2:	0021      	movs	r1, r4
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	2204      	movs	r2, #4
 80055a8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	2288      	movs	r2, #136	@ 0x88
 80055ae:	0352      	lsls	r2, r2, #13
 80055b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	2200      	movs	r2, #0
 80055b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b8:	000c      	movs	r4, r1
 80055ba:	187b      	adds	r3, r7, r1
 80055bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005630 <MX_GPIO_Init+0x158>)
 80055be:	0019      	movs	r1, r3
 80055c0:	0010      	movs	r0, r2
 80055c2:	f002 ff65 	bl	8008490 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80055c6:	0021      	movs	r1, r4
 80055c8:	187b      	adds	r3, r7, r1
 80055ca:	2280      	movs	r2, #128	@ 0x80
 80055cc:	0112      	lsls	r2, r2, #4
 80055ce:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	2288      	movs	r2, #136	@ 0x88
 80055d4:	0352      	lsls	r2, r2, #13
 80055d6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	2200      	movs	r2, #0
 80055dc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055de:	187a      	adds	r2, r7, r1
 80055e0:	23a0      	movs	r3, #160	@ 0xa0
 80055e2:	05db      	lsls	r3, r3, #23
 80055e4:	0011      	movs	r1, r2
 80055e6:	0018      	movs	r0, r3
 80055e8:	f002 ff52 	bl	8008490 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80055ec:	2200      	movs	r2, #0
 80055ee:	2100      	movs	r1, #0
 80055f0:	2005      	movs	r0, #5
 80055f2:	f002 ff1b 	bl	800842c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80055f6:	2005      	movs	r0, #5
 80055f8:	f002 ff2d 	bl	8008456 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80055fc:	2200      	movs	r2, #0
 80055fe:	2100      	movs	r1, #0
 8005600:	2006      	movs	r0, #6
 8005602:	f002 ff13 	bl	800842c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8005606:	2006      	movs	r0, #6
 8005608:	f002 ff25 	bl	8008456 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800560c:	2200      	movs	r2, #0
 800560e:	2100      	movs	r1, #0
 8005610:	2007      	movs	r0, #7
 8005612:	f002 ff0b 	bl	800842c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005616:	2007      	movs	r0, #7
 8005618:	f002 ff1d 	bl	8008456 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800561c:	46c0      	nop			@ (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b00b      	add	sp, #44	@ 0x2c
 8005622:	bd90      	pop	{r4, r7, pc}
 8005624:	40021000 	.word	0x40021000
 8005628:	00008031 	.word	0x00008031
 800562c:	50000800 	.word	0x50000800
 8005630:	50000400 	.word	0x50000400

08005634 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq) {
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	0002      	movs	r2, r0
 800563c:	1dbb      	adds	r3, r7, #6
 800563e:	801a      	strh	r2, [r3, #0]
	TIM17->ARR = (uint32_t) (987 * (float) 1000 / (float) freq);
 8005640:	1dbb      	adds	r3, r7, #6
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	0018      	movs	r0, r3
 8005646:	f7fb ffcf 	bl	80015e8 <__aeabi_ui2f>
 800564a:	1c03      	adds	r3, r0, #0
 800564c:	1c19      	adds	r1, r3, #0
 800564e:	4807      	ldr	r0, [pc, #28]	@ (800566c <ChangeNote+0x38>)
 8005650:	f7fb fa96 	bl	8000b80 <__aeabi_fdiv>
 8005654:	1c03      	adds	r3, r0, #0
 8005656:	4c06      	ldr	r4, [pc, #24]	@ (8005670 <ChangeNote+0x3c>)
 8005658:	1c18      	adds	r0, r3, #0
 800565a:	f7fa ffb5 	bl	80005c8 <__aeabi_f2uiz>
 800565e:	0003      	movs	r3, r0
 8005660:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	46bd      	mov	sp, r7
 8005666:	b003      	add	sp, #12
 8005668:	bd90      	pop	{r4, r7, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	4970f780 	.word	0x4970f780
 8005670:	40014800 	.word	0x40014800

08005674 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	0002      	movs	r2, r0
 800567c:	1dfb      	adds	r3, r7, #7
 800567e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005680:	4ba0      	ldr	r3, [pc, #640]	@ (8005904 <PlayEffect+0x290>)
 8005682:	2100      	movs	r1, #0
 8005684:	0018      	movs	r0, r3
 8005686:	f006 f8d3 	bl	800b830 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 800568a:	2005      	movs	r0, #5
 800568c:	f002 fde8 	bl	8008260 <HAL_Delay>
	switch (effect) {
 8005690:	1dfb      	adds	r3, r7, #7
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b06      	cmp	r3, #6
 8005696:	d900      	bls.n	800569a <PlayEffect+0x26>
 8005698:	e12a      	b.n	80058f0 <PlayEffect+0x27c>
 800569a:	009a      	lsls	r2, r3, #2
 800569c:	4b9a      	ldr	r3, [pc, #616]	@ (8005908 <PlayEffect+0x294>)
 800569e:	18d3      	adds	r3, r2, r3
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	469f      	mov	pc, r3
	case MenuBeep:

		curNote = G * 3;
 80056a4:	4b99      	ldr	r3, [pc, #612]	@ (800590c <PlayEffect+0x298>)
 80056a6:	2293      	movs	r2, #147	@ 0x93
 80056a8:	0112      	lsls	r2, r2, #4
 80056aa:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80056ac:	4b97      	ldr	r3, [pc, #604]	@ (800590c <PlayEffect+0x298>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7ff ffbf 	bl	8005634 <ChangeNote>
		HAL_Delay(25);
 80056b6:	2019      	movs	r0, #25
 80056b8:	f002 fdd2 	bl	8008260 <HAL_Delay>

		curNote = G * 2;
 80056bc:	4b93      	ldr	r3, [pc, #588]	@ (800590c <PlayEffect+0x298>)
 80056be:	22c4      	movs	r2, #196	@ 0xc4
 80056c0:	00d2      	lsls	r2, r2, #3
 80056c2:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80056c4:	4b91      	ldr	r3, [pc, #580]	@ (800590c <PlayEffect+0x298>)
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7ff ffb3 	bl	8005634 <ChangeNote>
		HAL_Delay(25);
 80056ce:	2019      	movs	r0, #25
 80056d0:	f002 fdc6 	bl	8008260 <HAL_Delay>

		break;
 80056d4:	e10c      	b.n	80058f0 <PlayEffect+0x27c>
	case EggNoise:

		curNote = A;
 80056d6:	4b8d      	ldr	r3, [pc, #564]	@ (800590c <PlayEffect+0x298>)
 80056d8:	22dc      	movs	r2, #220	@ 0xdc
 80056da:	0052      	lsls	r2, r2, #1
 80056dc:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80056de:	4b8b      	ldr	r3, [pc, #556]	@ (800590c <PlayEffect+0x298>)
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f7ff ffa6 	bl	8005634 <ChangeNote>
		HAL_Delay(20);
 80056e8:	2014      	movs	r0, #20
 80056ea:	f002 fdb9 	bl	8008260 <HAL_Delay>

		curNote = C;
 80056ee:	4b87      	ldr	r3, [pc, #540]	@ (800590c <PlayEffect+0x298>)
 80056f0:	4a87      	ldr	r2, [pc, #540]	@ (8005910 <PlayEffect+0x29c>)
 80056f2:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80056f4:	4b85      	ldr	r3, [pc, #532]	@ (800590c <PlayEffect+0x298>)
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7ff ff9b 	bl	8005634 <ChangeNote>
		HAL_Delay(20);
 80056fe:	2014      	movs	r0, #20
 8005700:	f002 fdae 	bl	8008260 <HAL_Delay>

		curNote = A;
 8005704:	4b81      	ldr	r3, [pc, #516]	@ (800590c <PlayEffect+0x298>)
 8005706:	22dc      	movs	r2, #220	@ 0xdc
 8005708:	0052      	lsls	r2, r2, #1
 800570a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800570c:	4b7f      	ldr	r3, [pc, #508]	@ (800590c <PlayEffect+0x298>)
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	0018      	movs	r0, r3
 8005712:	f7ff ff8f 	bl	8005634 <ChangeNote>
		HAL_Delay(20);
 8005716:	2014      	movs	r0, #20
 8005718:	f002 fda2 	bl	8008260 <HAL_Delay>

		curNote = C;
 800571c:	4b7b      	ldr	r3, [pc, #492]	@ (800590c <PlayEffect+0x298>)
 800571e:	4a7c      	ldr	r2, [pc, #496]	@ (8005910 <PlayEffect+0x29c>)
 8005720:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005722:	4b7a      	ldr	r3, [pc, #488]	@ (800590c <PlayEffect+0x298>)
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	0018      	movs	r0, r3
 8005728:	f7ff ff84 	bl	8005634 <ChangeNote>
		HAL_Delay(20);
 800572c:	2014      	movs	r0, #20
 800572e:	f002 fd97 	bl	8008260 <HAL_Delay>

		break;
 8005732:	e0dd      	b.n	80058f0 <PlayEffect+0x27c>
	case YoungNoiseHappy:

		curNote = F * 4;
 8005734:	4b75      	ldr	r3, [pc, #468]	@ (800590c <PlayEffect+0x298>)
 8005736:	4a77      	ldr	r2, [pc, #476]	@ (8005914 <PlayEffect+0x2a0>)
 8005738:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800573a:	4b74      	ldr	r3, [pc, #464]	@ (800590c <PlayEffect+0x298>)
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	0018      	movs	r0, r3
 8005740:	f7ff ff78 	bl	8005634 <ChangeNote>
		HAL_Delay(35);
 8005744:	2023      	movs	r0, #35	@ 0x23
 8005746:	f002 fd8b 	bl	8008260 <HAL_Delay>

		curNote = B * 4;
 800574a:	4b70      	ldr	r3, [pc, #448]	@ (800590c <PlayEffect+0x298>)
 800574c:	22f7      	movs	r2, #247	@ 0xf7
 800574e:	00d2      	lsls	r2, r2, #3
 8005750:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005752:	4b6e      	ldr	r3, [pc, #440]	@ (800590c <PlayEffect+0x298>)
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	0018      	movs	r0, r3
 8005758:	f7ff ff6c 	bl	8005634 <ChangeNote>
		HAL_Delay(15);
 800575c:	200f      	movs	r0, #15
 800575e:	f002 fd7f 	bl	8008260 <HAL_Delay>

		break;
 8005762:	e0c5      	b.n	80058f0 <PlayEffect+0x27c>
	case YoungNoiseSad:

		curNote = B * 4;
 8005764:	4b69      	ldr	r3, [pc, #420]	@ (800590c <PlayEffect+0x298>)
 8005766:	22f7      	movs	r2, #247	@ 0xf7
 8005768:	00d2      	lsls	r2, r2, #3
 800576a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800576c:	4b67      	ldr	r3, [pc, #412]	@ (800590c <PlayEffect+0x298>)
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	0018      	movs	r0, r3
 8005772:	f7ff ff5f 	bl	8005634 <ChangeNote>
		HAL_Delay(35);
 8005776:	2023      	movs	r0, #35	@ 0x23
 8005778:	f002 fd72 	bl	8008260 <HAL_Delay>

		curNote = B * 3;
 800577c:	4b63      	ldr	r3, [pc, #396]	@ (800590c <PlayEffect+0x298>)
 800577e:	4a66      	ldr	r2, [pc, #408]	@ (8005918 <PlayEffect+0x2a4>)
 8005780:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005782:	4b62      	ldr	r3, [pc, #392]	@ (800590c <PlayEffect+0x298>)
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff ff54 	bl	8005634 <ChangeNote>
		HAL_Delay(15);
 800578c:	200f      	movs	r0, #15
 800578e:	f002 fd67 	bl	8008260 <HAL_Delay>

		break;
 8005792:	e0ad      	b.n	80058f0 <PlayEffect+0x27c>
	case AdultNoiseHappy:

		curNote = F / 4;
 8005794:	4b5d      	ldr	r3, [pc, #372]	@ (800590c <PlayEffect+0x298>)
 8005796:	22ae      	movs	r2, #174	@ 0xae
 8005798:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800579a:	4b5c      	ldr	r3, [pc, #368]	@ (800590c <PlayEffect+0x298>)
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	0018      	movs	r0, r3
 80057a0:	f7ff ff48 	bl	8005634 <ChangeNote>
		HAL_Delay(35);
 80057a4:	2023      	movs	r0, #35	@ 0x23
 80057a6:	f002 fd5b 	bl	8008260 <HAL_Delay>

		curNote = B / 4;
 80057aa:	4b58      	ldr	r3, [pc, #352]	@ (800590c <PlayEffect+0x298>)
 80057ac:	227b      	movs	r2, #123	@ 0x7b
 80057ae:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057b0:	4b56      	ldr	r3, [pc, #344]	@ (800590c <PlayEffect+0x298>)
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7ff ff3d 	bl	8005634 <ChangeNote>
		HAL_Delay(15);
 80057ba:	200f      	movs	r0, #15
 80057bc:	f002 fd50 	bl	8008260 <HAL_Delay>

		break;
 80057c0:	e096      	b.n	80058f0 <PlayEffect+0x27c>
	case AdultNoiseSad:

		curNote = C / 4;
 80057c2:	4b52      	ldr	r3, [pc, #328]	@ (800590c <PlayEffect+0x298>)
 80057c4:	2282      	movs	r2, #130	@ 0x82
 80057c6:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057c8:	4b50      	ldr	r3, [pc, #320]	@ (800590c <PlayEffect+0x298>)
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	0018      	movs	r0, r3
 80057ce:	f7ff ff31 	bl	8005634 <ChangeNote>
		HAL_Delay(35);
 80057d2:	2023      	movs	r0, #35	@ 0x23
 80057d4:	f002 fd44 	bl	8008260 <HAL_Delay>

		curNote = A / 4;
 80057d8:	4b4c      	ldr	r3, [pc, #304]	@ (800590c <PlayEffect+0x298>)
 80057da:	226e      	movs	r2, #110	@ 0x6e
 80057dc:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057de:	4b4b      	ldr	r3, [pc, #300]	@ (800590c <PlayEffect+0x298>)
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7ff ff26 	bl	8005634 <ChangeNote>
		HAL_Delay(15);
 80057e8:	200f      	movs	r0, #15
 80057ea:	f002 fd39 	bl	8008260 <HAL_Delay>

		break;
 80057ee:	e07f      	b.n	80058f0 <PlayEffect+0x27c>
	case Evolution:

		curNote = A * 2;
 80057f0:	4b46      	ldr	r3, [pc, #280]	@ (800590c <PlayEffect+0x298>)
 80057f2:	22dc      	movs	r2, #220	@ 0xdc
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057f8:	4b44      	ldr	r3, [pc, #272]	@ (800590c <PlayEffect+0x298>)
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f7ff ff19 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 8005802:	2032      	movs	r0, #50	@ 0x32
 8005804:	f002 fd2c 	bl	8008260 <HAL_Delay>

		curNote = B * 2;
 8005808:	4b40      	ldr	r3, [pc, #256]	@ (800590c <PlayEffect+0x298>)
 800580a:	22f7      	movs	r2, #247	@ 0xf7
 800580c:	0092      	lsls	r2, r2, #2
 800580e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005810:	4b3e      	ldr	r3, [pc, #248]	@ (800590c <PlayEffect+0x298>)
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	0018      	movs	r0, r3
 8005816:	f7ff ff0d 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 800581a:	2032      	movs	r0, #50	@ 0x32
 800581c:	f002 fd20 	bl	8008260 <HAL_Delay>

		curNote = C * 2;
 8005820:	4b3a      	ldr	r3, [pc, #232]	@ (800590c <PlayEffect+0x298>)
 8005822:	4a3e      	ldr	r2, [pc, #248]	@ (800591c <PlayEffect+0x2a8>)
 8005824:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005826:	4b39      	ldr	r3, [pc, #228]	@ (800590c <PlayEffect+0x298>)
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	0018      	movs	r0, r3
 800582c:	f7ff ff02 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 8005830:	2032      	movs	r0, #50	@ 0x32
 8005832:	f002 fd15 	bl	8008260 <HAL_Delay>

		curNote = A * 2;
 8005836:	4b35      	ldr	r3, [pc, #212]	@ (800590c <PlayEffect+0x298>)
 8005838:	22dc      	movs	r2, #220	@ 0xdc
 800583a:	0092      	lsls	r2, r2, #2
 800583c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800583e:	4b33      	ldr	r3, [pc, #204]	@ (800590c <PlayEffect+0x298>)
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	0018      	movs	r0, r3
 8005844:	f7ff fef6 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 8005848:	2032      	movs	r0, #50	@ 0x32
 800584a:	f002 fd09 	bl	8008260 <HAL_Delay>

		curNote = C * 2;
 800584e:	4b2f      	ldr	r3, [pc, #188]	@ (800590c <PlayEffect+0x298>)
 8005850:	4a32      	ldr	r2, [pc, #200]	@ (800591c <PlayEffect+0x2a8>)
 8005852:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005854:	4b2d      	ldr	r3, [pc, #180]	@ (800590c <PlayEffect+0x298>)
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	0018      	movs	r0, r3
 800585a:	f7ff feeb 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 800585e:	2032      	movs	r0, #50	@ 0x32
 8005860:	f002 fcfe 	bl	8008260 <HAL_Delay>

		curNote = D * 2;
 8005864:	4b29      	ldr	r3, [pc, #164]	@ (800590c <PlayEffect+0x298>)
 8005866:	4a2e      	ldr	r2, [pc, #184]	@ (8005920 <PlayEffect+0x2ac>)
 8005868:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800586a:	4b28      	ldr	r3, [pc, #160]	@ (800590c <PlayEffect+0x298>)
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	0018      	movs	r0, r3
 8005870:	f7ff fee0 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 8005874:	2032      	movs	r0, #50	@ 0x32
 8005876:	f002 fcf3 	bl	8008260 <HAL_Delay>

		curNote = B * 2;
 800587a:	4b24      	ldr	r3, [pc, #144]	@ (800590c <PlayEffect+0x298>)
 800587c:	22f7      	movs	r2, #247	@ 0xf7
 800587e:	0092      	lsls	r2, r2, #2
 8005880:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005882:	4b22      	ldr	r3, [pc, #136]	@ (800590c <PlayEffect+0x298>)
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	0018      	movs	r0, r3
 8005888:	f7ff fed4 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 800588c:	2032      	movs	r0, #50	@ 0x32
 800588e:	f002 fce7 	bl	8008260 <HAL_Delay>

		curNote = D * 2;
 8005892:	4b1e      	ldr	r3, [pc, #120]	@ (800590c <PlayEffect+0x298>)
 8005894:	4a22      	ldr	r2, [pc, #136]	@ (8005920 <PlayEffect+0x2ac>)
 8005896:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005898:	4b1c      	ldr	r3, [pc, #112]	@ (800590c <PlayEffect+0x298>)
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	0018      	movs	r0, r3
 800589e:	f7ff fec9 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 80058a2:	2032      	movs	r0, #50	@ 0x32
 80058a4:	f002 fcdc 	bl	8008260 <HAL_Delay>

		curNote = E * 2;
 80058a8:	4b18      	ldr	r3, [pc, #96]	@ (800590c <PlayEffect+0x298>)
 80058aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005924 <PlayEffect+0x2b0>)
 80058ac:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058ae:	4b17      	ldr	r3, [pc, #92]	@ (800590c <PlayEffect+0x298>)
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7ff febe 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 80058b8:	2032      	movs	r0, #50	@ 0x32
 80058ba:	f002 fcd1 	bl	8008260 <HAL_Delay>

		curNote = G * 2;
 80058be:	4b13      	ldr	r3, [pc, #76]	@ (800590c <PlayEffect+0x298>)
 80058c0:	22c4      	movs	r2, #196	@ 0xc4
 80058c2:	00d2      	lsls	r2, r2, #3
 80058c4:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058c6:	4b11      	ldr	r3, [pc, #68]	@ (800590c <PlayEffect+0x298>)
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff feb2 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 80058d0:	2032      	movs	r0, #50	@ 0x32
 80058d2:	f002 fcc5 	bl	8008260 <HAL_Delay>

		curNote = G * 2;
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <PlayEffect+0x298>)
 80058d8:	22c4      	movs	r2, #196	@ 0xc4
 80058da:	00d2      	lsls	r2, r2, #3
 80058dc:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058de:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <PlayEffect+0x298>)
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7ff fea6 	bl	8005634 <ChangeNote>
		HAL_Delay(50);
 80058e8:	2032      	movs	r0, #50	@ 0x32
 80058ea:	f002 fcb9 	bl	8008260 <HAL_Delay>

		break;
 80058ee:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80058f0:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <PlayEffect+0x290>)
 80058f2:	2100      	movs	r1, #0
 80058f4:	0018      	movs	r0, r3
 80058f6:	f006 f88b 	bl	800ba10 <HAL_TIM_PWM_Stop>
}
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b002      	add	sp, #8
 8005900:	bd80      	pop	{r7, pc}
 8005902:	46c0      	nop			@ (mov r8, r8)
 8005904:	20001cac 	.word	0x20001cac
 8005908:	0801175c 	.word	0x0801175c
 800590c:	20000bb6 	.word	0x20000bb6
 8005910:	0000020b 	.word	0x0000020b
 8005914:	00000ae8 	.word	0x00000ae8
 8005918:	000005ca 	.word	0x000005ca
 800591c:	00000416 	.word	0x00000416
 8005920:	00000496 	.word	0x00000496
 8005924:	00000526 	.word	0x00000526

08005928 <HAL_GPIO_EXTI_Rising_Callback>:
//INTERRUPTS ARE CALLED BACK HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	0002      	movs	r2, r0
 8005930:	1dbb      	adds	r3, r7, #6
 8005932:	801a      	strh	r2, [r3, #0]
	 //Left=2048
	 else if(GPIO_PIN==2048)
	 {

	 }*/
}
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b002      	add	sp, #8
 800593a:	bd80      	pop	{r7, pc}

0800593c <PeripheralInit>:

//AURORA: Put custom functions here!
void PeripheralInit(void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
	ST7735_Unselect();
 8005940:	f7fe fb76 	bl	8004030 <ST7735_Unselect>
	ST7735_Init(1);
 8005944:	2001      	movs	r0, #1
 8005946:	f7fe fc87 	bl	8004258 <ST7735_Init>

	fillScreen(BLACK);
 800594a:	2000      	movs	r0, #0
 800594c:	f7fe fa2a 	bl	8003da4 <fillScreen>
	buffer[0] = 'A';
 8005950:	4b17      	ldr	r3, [pc, #92]	@ (80059b0 <PeripheralInit+0x74>)
 8005952:	2241      	movs	r2, #65	@ 0x41
 8005954:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'B';
 8005956:	4b16      	ldr	r3, [pc, #88]	@ (80059b0 <PeripheralInit+0x74>)
 8005958:	2242      	movs	r2, #66	@ 0x42
 800595a:	705a      	strb	r2, [r3, #1]
	TIM17->CCR1 = 5;
 800595c:	4b15      	ldr	r3, [pc, #84]	@ (80059b4 <PeripheralInit+0x78>)
 800595e:	2205      	movs	r2, #5
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->PSC = 64;
 8005962:	4b14      	ldr	r3, [pc, #80]	@ (80059b4 <PeripheralInit+0x78>)
 8005964:	2240      	movs	r2, #64	@ 0x40
 8005966:	629a      	str	r2, [r3, #40]	@ 0x28
	//uint8_t ret=0;
	//_ADXL343_Init();

	//Pedometer Setup
	_ADXL343_WriteReg8(0x19, 0x02);
 8005968:	2102      	movs	r1, #2
 800596a:	2019      	movs	r0, #25
 800596c:	f000 f90c 	bl	8005b88 <_ADXL343_WriteReg8>
	////wait

	_ADXL343_WriteReg8(0x7C, 0x01);
 8005970:	2101      	movs	r1, #1
 8005972:	207c      	movs	r0, #124	@ 0x7c
 8005974:	f000 f908 	bl	8005b88 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1A, 0x38);
 8005978:	2138      	movs	r1, #56	@ 0x38
 800597a:	201a      	movs	r0, #26
 800597c:	f000 f904 	bl	8005b88 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1B, 0x04);
 8005980:	2104      	movs	r1, #4
 8005982:	201b      	movs	r0, #27
 8005984:	f000 f900 	bl	8005b88 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1F, 0x80);
 8005988:	2180      	movs	r1, #128	@ 0x80
 800598a:	201f      	movs	r0, #31
 800598c:	f000 f8fc 	bl	8005b88 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x21, 0x80);
 8005990:	2180      	movs	r1, #128	@ 0x80
 8005992:	2021      	movs	r0, #33	@ 0x21
 8005994:	f000 f8f8 	bl	8005b88 <_ADXL343_WriteReg8>

	//  //Step Counter
	_ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8005998:	2101      	movs	r1, #1
 800599a:	2018      	movs	r0, #24
 800599c:	f000 f8f4 	bl	8005b88 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 80059a0:	2101      	movs	r1, #1
 80059a2:	2020      	movs	r0, #32
 80059a4:	f000 f8f0 	bl	8005b88 <_ADXL343_WriteReg8>
}
 80059a8:	46c0      	nop			@ (mov r8, r8)
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	20000d64 	.word	0x20000d64
 80059b4:	40014800 	.word	0x40014800

080059b8 <StructInit>:
//INITIALIZE GAME VALUES
void StructInit(void) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	steps = 0;
 80059be:	4b30      	ldr	r3, [pc, #192]	@ (8005a80 <StructInit+0xc8>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
	uint32_t Address = 0x0803F800;
 80059c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005a84 <StructInit+0xcc>)
 80059c6:	607b      	str	r3, [r7, #4]
	//ANIMATIONS FOR EGG
	//egg0.Body = ;
	//ANIMATIONS FOR BABY DRAGON
	sitting0.Body = *imgSitting0;
 80059c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a88 <StructInit+0xd0>)
 80059ca:	4a30      	ldr	r2, [pc, #192]	@ (8005a8c <StructInit+0xd4>)
 80059cc:	601a      	str	r2, [r3, #0]
	sitting0.Size = 307;
 80059ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005a88 <StructInit+0xd0>)
 80059d0:	2234      	movs	r2, #52	@ 0x34
 80059d2:	32ff      	adds	r2, #255	@ 0xff
 80059d4:	605a      	str	r2, [r3, #4]
	sitting1.Body = *imgSitting1;
 80059d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a90 <StructInit+0xd8>)
 80059d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a94 <StructInit+0xdc>)
 80059da:	601a      	str	r2, [r3, #0]
	sitting1.Size = 305;
 80059dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <StructInit+0xd8>)
 80059de:	2232      	movs	r2, #50	@ 0x32
 80059e0:	32ff      	adds	r2, #255	@ 0xff
 80059e2:	605a      	str	r2, [r3, #4]
	animSitting[0] = sitting0;
 80059e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005a98 <StructInit+0xe0>)
 80059e6:	4a28      	ldr	r2, [pc, #160]	@ (8005a88 <StructInit+0xd0>)
 80059e8:	ca03      	ldmia	r2!, {r0, r1}
 80059ea:	c303      	stmia	r3!, {r0, r1}
	animSitting[1] = sitting1;
 80059ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005a98 <StructInit+0xe0>)
 80059ee:	4a28      	ldr	r2, [pc, #160]	@ (8005a90 <StructInit+0xd8>)
 80059f0:	3308      	adds	r3, #8
 80059f2:	ca03      	ldmia	r2!, {r0, r1}
 80059f4:	c303      	stmia	r3!, {r0, r1}
			game.positions[flashI].lon =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
		}
		FlashErase();
	} else { */
		game.evo = 1;
 80059f6:	4b29      	ldr	r3, [pc, #164]	@ (8005a9c <StructInit+0xe4>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	741a      	strb	r2, [r3, #16]
		game.uid[0] = 'h';
 80059fc:	4a27      	ldr	r2, [pc, #156]	@ (8005a9c <StructInit+0xe4>)
 80059fe:	2396      	movs	r3, #150	@ 0x96
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	2168      	movs	r1, #104	@ 0x68
 8005a04:	54d1      	strb	r1, [r2, r3]
		game.uid[1] = 'i';
 8005a06:	4a25      	ldr	r2, [pc, #148]	@ (8005a9c <StructInit+0xe4>)
 8005a08:	232e      	movs	r3, #46	@ 0x2e
 8005a0a:	33ff      	adds	r3, #255	@ 0xff
 8005a0c:	2169      	movs	r1, #105	@ 0x69
 8005a0e:	54d1      	strb	r1, [r2, r3]
		game.allSteps = 0;
 8005a10:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <StructInit+0xe4>)
 8005a12:	238c      	movs	r3, #140	@ 0x8c
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	2100      	movs	r1, #0
 8005a18:	50d1      	str	r1, [r2, r3]
		game.mood = 1;
 8005a1a:	4b20      	ldr	r3, [pc, #128]	@ (8005a9c <StructInit+0xe4>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	745a      	strb	r2, [r3, #17]
		game.numLocations = 3;
 8005a20:	4b1e      	ldr	r3, [pc, #120]	@ (8005a9c <StructInit+0xe4>)
 8005a22:	2203      	movs	r2, #3
 8005a24:	615a      	str	r2, [r3, #20]
		game.stepsToday = 0;
 8005a26:	4a1d      	ldr	r2, [pc, #116]	@ (8005a9c <StructInit+0xe4>)
 8005a28:	2390      	movs	r3, #144	@ 0x90
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	50d1      	str	r1, [r2, r3]
		game.weeklySteps = 0;
 8005a30:	4a1a      	ldr	r2, [pc, #104]	@ (8005a9c <StructInit+0xe4>)
 8005a32:	238e      	movs	r3, #142	@ 0x8e
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	2100      	movs	r1, #0
 8005a38:	50d1      	str	r1, [r2, r3]
		game.dailyGoal = 2000;
 8005a3a:	4a18      	ldr	r2, [pc, #96]	@ (8005a9c <StructInit+0xe4>)
 8005a3c:	2392      	movs	r3, #146	@ 0x92
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	21fa      	movs	r1, #250	@ 0xfa
 8005a42:	00c9      	lsls	r1, r1, #3
 8005a44:	50d1      	str	r1, [r2, r3]
		dummy.lat = 12.34567;
 8005a46:	4b16      	ldr	r3, [pc, #88]	@ (8005aa0 <StructInit+0xe8>)
 8005a48:	4a16      	ldr	r2, [pc, #88]	@ (8005aa4 <StructInit+0xec>)
 8005a4a:	601a      	str	r2, [r3, #0]
		dummy.lon = -89.10111;
 8005a4c:	4b14      	ldr	r3, [pc, #80]	@ (8005aa0 <StructInit+0xe8>)
 8005a4e:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <StructInit+0xf0>)
 8005a50:	605a      	str	r2, [r3, #4]
		game.positions[0] = dummy;
 8005a52:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <StructInit+0xe4>)
 8005a54:	4a12      	ldr	r2, [pc, #72]	@ (8005aa0 <StructInit+0xe8>)
 8005a56:	3318      	adds	r3, #24
 8005a58:	ca03      	ldmia	r2!, {r0, r1}
 8005a5a:	c303      	stmia	r3!, {r0, r1}
		game.positions[1] = dummy;
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a9c <StructInit+0xe4>)
 8005a5e:	4a10      	ldr	r2, [pc, #64]	@ (8005aa0 <StructInit+0xe8>)
 8005a60:	3320      	adds	r3, #32
 8005a62:	ca03      	ldmia	r2!, {r0, r1}
 8005a64:	c303      	stmia	r3!, {r0, r1}
		game.positions[2] = dummy;
 8005a66:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <StructInit+0xe4>)
 8005a68:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa0 <StructInit+0xe8>)
 8005a6a:	3328      	adds	r3, #40	@ 0x28
 8005a6c:	ca03      	ldmia	r2!, {r0, r1}
 8005a6e:	c303      	stmia	r3!, {r0, r1}
		game.time.hours = 0;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <StructInit+0xe4>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
	//}
}
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b002      	add	sp, #8
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			@ (mov r8, r8)
 8005a80:	20001bb8 	.word	0x20001bb8
 8005a84:	0803f800 	.word	0x0803f800
 8005a88:	20001b30 	.word	0x20001b30
 8005a8c:	20000004 	.word	0x20000004
 8005a90:	20001b38 	.word	0x20001b38
 8005a94:	200004d0 	.word	0x200004d0
 8005a98:	20001b40 	.word	0x20001b40
 8005a9c:	20000bbc 	.word	0x20000bbc
 8005aa0:	20000d08 	.word	0x20000d08
 8005aa4:	414587dd 	.word	0x414587dd
 8005aa8:	c2b233c5 	.word	0xc2b233c5

08005aac <Animate>:
	Address = 0x0803F808;
	xyz = *(__IO uint64_t*) (Address);
	HAL_FLASH_Lock();
}
void Animate(struct Img *animation, unsigned int frameCount, unsigned int xPos,
		unsigned int yPos, unsigned int xSize, unsigned int ySize) {
 8005aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aae:	b089      	sub	sp, #36	@ 0x24
 8005ab0:	af04      	add	r7, sp, #16
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
	++currentFrame;
 8005aba:	4b18      	ldr	r3, [pc, #96]	@ (8005b1c <Animate+0x70>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	4b16      	ldr	r3, [pc, #88]	@ (8005b1c <Animate+0x70>)
 8005ac2:	601a      	str	r2, [r3, #0]
	if (currentFrame > frameCount) {
 8005ac4:	4b15      	ldr	r3, [pc, #84]	@ (8005b1c <Animate+0x70>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d202      	bcs.n	8005ad4 <Animate+0x28>
		currentFrame = 0;
 8005ace:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <Animate+0x70>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, xPos, yPos, xSize, ySize,
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <Animate+0x70>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	681c      	ldr	r4, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	b29d      	uxth	r5, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	b29e      	uxth	r6, r3
 8005ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aee:	b299      	uxth	r1, r3
			animation[currentFrame].Size);
 8005af0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <Animate+0x70>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	18c3      	adds	r3, r0, r3
 8005afa:	685b      	ldr	r3, [r3, #4]
	drawImage(animation[currentFrame].Body, palette, xPos, yPos, xSize, ySize,
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	4808      	ldr	r0, [pc, #32]	@ (8005b20 <Animate+0x74>)
 8005b00:	9302      	str	r3, [sp, #8]
 8005b02:	9101      	str	r1, [sp, #4]
 8005b04:	9200      	str	r2, [sp, #0]
 8005b06:	0033      	movs	r3, r6
 8005b08:	002a      	movs	r2, r5
 8005b0a:	0001      	movs	r1, r0
 8005b0c:	0020      	movs	r0, r4
 8005b0e:	f7fe f9bd 	bl	8003e8c <drawImage>
	return;
 8005b12:	46c0      	nop			@ (mov r8, r8)
}
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b005      	add	sp, #20
 8005b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
 8005b1c:	20001b50 	.word	0x20001b50
 8005b20:	20000994 	.word	0x20000994

08005b24 <_ADXL343_ReadReg8>:

int _ADXL343_ReadReg8(unsigned char TargetRegister, unsigned char *TargetValue,
		uint8_t size) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	6039      	str	r1, [r7, #0]
 8005b2c:	0011      	movs	r1, r2
 8005b2e:	1dfb      	adds	r3, r7, #7
 8005b30:	1c02      	adds	r2, r0, #0
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	1c0a      	adds	r2, r1, #0
 8005b38:	701a      	strb	r2, [r3, #0]
	if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, &TargetRegister, 1, 1000)
 8005b3a:	1dfa      	adds	r2, r7, #7
 8005b3c:	4811      	ldr	r0, [pc, #68]	@ (8005b84 <_ADXL343_ReadReg8+0x60>)
 8005b3e:	23fa      	movs	r3, #250	@ 0xfa
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2301      	movs	r3, #1
 8005b46:	2128      	movs	r1, #40	@ 0x28
 8005b48:	f002 ff22 	bl	8008990 <HAL_I2C_Master_Transmit>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d002      	beq.n	8005b56 <_ADXL343_ReadReg8+0x32>
			== HAL_OK)
		return -1;
 8005b50:	2301      	movs	r3, #1
 8005b52:	425b      	negs	r3, r3
 8005b54:	e011      	b.n	8005b7a <_ADXL343_ReadReg8+0x56>

	if (!HAL_I2C_Master_Receive(&hi2c1, 0x14 << 1, TargetValue, size, 1000)
 8005b56:	1dbb      	adds	r3, r7, #6
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	b299      	uxth	r1, r3
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	4809      	ldr	r0, [pc, #36]	@ (8005b84 <_ADXL343_ReadReg8+0x60>)
 8005b60:	23fa      	movs	r3, #250	@ 0xfa
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	000b      	movs	r3, r1
 8005b68:	2128      	movs	r1, #40	@ 0x28
 8005b6a:	f003 f83b 	bl	8008be4 <HAL_I2C_Master_Receive>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d002      	beq.n	8005b78 <_ADXL343_ReadReg8+0x54>
			== HAL_OK)
		return -2;
 8005b72:	2302      	movs	r3, #2
 8005b74:	425b      	negs	r3, r3
 8005b76:	e000      	b.n	8005b7a <_ADXL343_ReadReg8+0x56>

	return 0;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	20001bc8 	.word	0x20001bc8

08005b88 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8(unsigned char TargetRegister, unsigned char TargetValue) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	0002      	movs	r2, r0
 8005b90:	1dfb      	adds	r3, r7, #7
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	1dbb      	adds	r3, r7, #6
 8005b96:	1c0a      	adds	r2, r1, #0
 8005b98:	701a      	strb	r2, [r3, #0]
	unsigned char buff[2];
	buff[0] = TargetRegister;
 8005b9a:	210c      	movs	r1, #12
 8005b9c:	187b      	adds	r3, r7, r1
 8005b9e:	1dfa      	adds	r2, r7, #7
 8005ba0:	7812      	ldrb	r2, [r2, #0]
 8005ba2:	701a      	strb	r2, [r3, #0]
	buff[1] = TargetValue;
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	1dba      	adds	r2, r7, #6
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, buff, 2, 1000) == HAL_OK)
 8005bac:	187a      	adds	r2, r7, r1
 8005bae:	4809      	ldr	r0, [pc, #36]	@ (8005bd4 <_ADXL343_WriteReg8+0x4c>)
 8005bb0:	23fa      	movs	r3, #250	@ 0xfa
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	2128      	movs	r1, #40	@ 0x28
 8005bba:	f002 fee9 	bl	8008990 <HAL_I2C_Master_Transmit>
 8005bbe:	1e03      	subs	r3, r0, #0
 8005bc0:	d102      	bne.n	8005bc8 <_ADXL343_WriteReg8+0x40>
		return -1;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	425b      	negs	r3, r3
 8005bc6:	e000      	b.n	8005bca <_ADXL343_WriteReg8+0x42>

	return 0;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			@ (mov r8, r8)
 8005bd4:	20001bc8 	.word	0x20001bc8

08005bd8 <SendData>:
void SendData() {
 8005bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bda:	46c6      	mov	lr, r8
 8005bdc:	b500      	push	{lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer,
 8005be2:	4a59      	ldr	r2, [pc, #356]	@ (8005d48 <SendData+0x170>)
 8005be4:	238c      	movs	r3, #140	@ 0x8c
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	58d4      	ldr	r4, [r2, r3]
 8005bea:	4a57      	ldr	r2, [pc, #348]	@ (8005d48 <SendData+0x170>)
 8005bec:	238e      	movs	r3, #142	@ 0x8e
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	58d5      	ldr	r5, [r2, r3]
 8005bf2:	4a55      	ldr	r2, [pc, #340]	@ (8005d48 <SendData+0x170>)
 8005bf4:	2390      	movs	r3, #144	@ 0x90
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	58d3      	ldr	r3, [r2, r3]
 8005bfa:	4698      	mov	r8, r3
			"(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r",
			game.allSteps, game.weeklySteps, game.stepsToday, game.uid,
			game.mood, game.dailyGoal, game.evo);
 8005bfc:	4a52      	ldr	r2, [pc, #328]	@ (8005d48 <SendData+0x170>)
 8005bfe:	7c52      	ldrb	r2, [r2, #17]
	sprintf(sendBuffer,
 8005c00:	0016      	movs	r6, r2
 8005c02:	4951      	ldr	r1, [pc, #324]	@ (8005d48 <SendData+0x170>)
 8005c04:	2292      	movs	r2, #146	@ 0x92
 8005c06:	0052      	lsls	r2, r2, #1
 8005c08:	588a      	ldr	r2, [r1, r2]
			game.mood, game.dailyGoal, game.evo);
 8005c0a:	494f      	ldr	r1, [pc, #316]	@ (8005d48 <SendData+0x170>)
 8005c0c:	7c09      	ldrb	r1, [r1, #16]
	sprintf(sendBuffer,
 8005c0e:	468c      	mov	ip, r1
 8005c10:	494e      	ldr	r1, [pc, #312]	@ (8005d4c <SendData+0x174>)
 8005c12:	484f      	ldr	r0, [pc, #316]	@ (8005d50 <SendData+0x178>)
 8005c14:	4663      	mov	r3, ip
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	9203      	str	r2, [sp, #12]
 8005c1a:	9602      	str	r6, [sp, #8]
 8005c1c:	4a4d      	ldr	r2, [pc, #308]	@ (8005d54 <SendData+0x17c>)
 8005c1e:	9201      	str	r2, [sp, #4]
 8005c20:	4643      	mov	r3, r8
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	002b      	movs	r3, r5
 8005c26:	0022      	movs	r2, r4
 8005c28:	f008 fd40 	bl	800e6ac <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8005c2c:	4b48      	ldr	r3, [pc, #288]	@ (8005d50 <SendData+0x178>)
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7fa fa72 	bl	8000118 <strlen>
 8005c34:	0003      	movs	r3, r0
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	4945      	ldr	r1, [pc, #276]	@ (8005d50 <SendData+0x178>)
 8005c3a:	4847      	ldr	r0, [pc, #284]	@ (8005d58 <SendData+0x180>)
 8005c3c:	23c8      	movs	r3, #200	@ 0xc8
 8005c3e:	f006 fce5 	bl	800c60c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8005c42:	2300      	movs	r3, #0
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	e072      	b.n	8005d2e <SendData+0x156>
		HAL_Delay(5);
 8005c48:	2005      	movs	r0, #5
 8005c4a:	f002 fb09 	bl	8008260 <HAL_Delay>
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	e007      	b.n	8005c64 <SendData+0x8c>
			sendBuffer[clrIndex] = 0;
 8005c54:	4a3e      	ldr	r2, [pc, #248]	@ (8005d50 <SendData+0x178>)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	18d3      	adds	r3, r2, r3
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	23c8      	movs	r3, #200	@ 0xc8
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3f2      	bcc.n	8005c54 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
				((int) game.positions[posIndex].lat),
 8005c6e:	4b36      	ldr	r3, [pc, #216]	@ (8005d48 <SendData+0x170>)
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	3203      	adds	r2, #3
 8005c74:	00d2      	lsls	r2, r2, #3
 8005c76:	58d3      	ldr	r3, [r2, r3]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8005c78:	1c18      	adds	r0, r3, #0
 8005c7a:	f7fb fc49 	bl	8001510 <__aeabi_f2iz>
 8005c7e:	0006      	movs	r6, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lat,
 8005c80:	4b31      	ldr	r3, [pc, #196]	@ (8005d48 <SendData+0x170>)
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	3203      	adds	r2, #3
 8005c86:	00d2      	lsls	r2, r2, #3
 8005c88:	58d3      	ldr	r3, [r2, r3]
 8005c8a:	1c18      	adds	r0, r3, #0
 8005c8c:	f7fd fbaa 	bl	80033e4 <__aeabi_f2d>
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b32      	ldr	r3, [pc, #200]	@ (8005d5c <SendData+0x184>)
 8005c94:	f00a fe7c 	bl	8010990 <fmod>
								(double) 1)) * 10000)),
 8005c98:	2200      	movs	r2, #0
 8005c9a:	4b31      	ldr	r3, [pc, #196]	@ (8005d60 <SendData+0x188>)
 8005c9c:	f7fc fc8e 	bl	80025bc <__aeabi_dmul>
 8005ca0:	0002      	movs	r2, r0
 8005ca2:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lat,
 8005ca4:	0010      	movs	r0, r2
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	f7fd fb0e 	bl	80032c8 <__aeabi_d2iz>
 8005cac:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8005cae:	17da      	asrs	r2, r3, #31
 8005cb0:	189c      	adds	r4, r3, r2
 8005cb2:	4054      	eors	r4, r2
				((int) game.positions[posIndex].lon),
 8005cb4:	4a24      	ldr	r2, [pc, #144]	@ (8005d48 <SendData+0x170>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3303      	adds	r3, #3
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	18d3      	adds	r3, r2, r3
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8005cc2:	1c18      	adds	r0, r3, #0
 8005cc4:	f7fb fc24 	bl	8001510 <__aeabi_f2iz>
 8005cc8:	0005      	movs	r5, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lon,
 8005cca:	4a1f      	ldr	r2, [pc, #124]	@ (8005d48 <SendData+0x170>)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3303      	adds	r3, #3
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	18d3      	adds	r3, r2, r3
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	1c18      	adds	r0, r3, #0
 8005cda:	f7fd fb83 	bl	80033e4 <__aeabi_f2d>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d5c <SendData+0x184>)
 8005ce2:	f00a fe55 	bl	8010990 <fmod>
								(double) 1)) * 10000)));
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <SendData+0x188>)
 8005cea:	f7fc fc67 	bl	80025bc <__aeabi_dmul>
 8005cee:	0002      	movs	r2, r0
 8005cf0:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lon,
 8005cf2:	0010      	movs	r0, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	f7fd fae7 	bl	80032c8 <__aeabi_d2iz>
 8005cfa:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8005cfc:	17da      	asrs	r2, r3, #31
 8005cfe:	189b      	adds	r3, r3, r2
 8005d00:	4053      	eors	r3, r2
 8005d02:	4918      	ldr	r1, [pc, #96]	@ (8005d64 <SendData+0x18c>)
 8005d04:	4812      	ldr	r0, [pc, #72]	@ (8005d50 <SendData+0x178>)
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	9500      	str	r5, [sp, #0]
 8005d0a:	0023      	movs	r3, r4
 8005d0c:	0032      	movs	r2, r6
 8005d0e:	f008 fccd 	bl	800e6ac <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8005d12:	4b0f      	ldr	r3, [pc, #60]	@ (8005d50 <SendData+0x178>)
 8005d14:	0018      	movs	r0, r3
 8005d16:	f7fa f9ff 	bl	8000118 <strlen>
 8005d1a:	0003      	movs	r3, r0
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	490c      	ldr	r1, [pc, #48]	@ (8005d50 <SendData+0x178>)
 8005d20:	480d      	ldr	r0, [pc, #52]	@ (8005d58 <SendData+0x180>)
 8005d22:	23c8      	movs	r3, #200	@ 0xc8
 8005d24:	f006 fc72 	bl	800c60c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <SendData+0x170>)
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d387      	bcc.n	8005c48 <SendData+0x70>

	}
}
 8005d38:	46c0      	nop			@ (mov r8, r8)
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b002      	add	sp, #8
 8005d40:	bc80      	pop	{r7}
 8005d42:	46b8      	mov	r8, r7
 8005d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	20000bbc 	.word	0x20000bbc
 8005d4c:	08010f54 	.word	0x08010f54
 8005d50:	20000de4 	.word	0x20000de4
 8005d54:	20000ce8 	.word	0x20000ce8
 8005d58:	20001d8c 	.word	0x20001d8c
 8005d5c:	3ff00000 	.word	0x3ff00000
 8005d60:	40c38800 	.word	0x40c38800
 8005d64:	08010fd4 	.word	0x08010fd4

08005d68 <ReceiveData>:
void ReceiveData() {
 8005d68:	b5b0      	push	{r4, r5, r7, lr}
 8005d6a:	4cda      	ldr	r4, [pc, #872]	@ (80060d4 <ReceiveData+0x36c>)
 8005d6c:	44a5      	add	sp, r4
 8005d6e:	af00      	add	r7, sp, #0
	int rI = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	4ad9      	ldr	r2, [pc, #868]	@ (80060d8 <ReceiveData+0x370>)
 8005d74:	18ba      	adds	r2, r7, r2
 8005d76:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 8005d78:	e197      	b.n	80060aa <ReceiveData+0x342>
		if (syncBuffer[rI] && syncBuffer[rI] == '\r') {
 8005d7a:	4ad8      	ldr	r2, [pc, #864]	@ (80060dc <ReceiveData+0x374>)
 8005d7c:	49d6      	ldr	r1, [pc, #856]	@ (80060d8 <ReceiveData+0x370>)
 8005d7e:	187b      	adds	r3, r7, r1
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	18d3      	adds	r3, r2, r3
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d100      	bne.n	8005d8c <ReceiveData+0x24>
 8005d8a:	e188      	b.n	800609e <ReceiveData+0x336>
 8005d8c:	4ad3      	ldr	r2, [pc, #844]	@ (80060dc <ReceiveData+0x374>)
 8005d8e:	187b      	adds	r3, r7, r1
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	18d3      	adds	r3, r2, r3
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b0d      	cmp	r3, #13
 8005d98:	d000      	beq.n	8005d9c <ReceiveData+0x34>
 8005d9a:	e180      	b.n	800609e <ReceiveData+0x336>
			enum {
				MAX_FIELDS = 255
			};
			json_t pool[MAX_FIELDS];
			json_t const *parent = json_create(syncBuffer, pool, MAX_FIELDS);
 8005d9c:	0039      	movs	r1, r7
 8005d9e:	4bcf      	ldr	r3, [pc, #828]	@ (80060dc <ReceiveData+0x374>)
 8005da0:	22ff      	movs	r2, #255	@ 0xff
 8005da2:	0018      	movs	r0, r3
 8005da4:	f001 fcfc 	bl	80077a0 <json_create>
 8005da8:	0003      	movs	r3, r0
 8005daa:	49cd      	ldr	r1, [pc, #820]	@ (80060e0 <ReceiveData+0x378>)
 8005dac:	187a      	adds	r2, r7, r1
 8005dae:	6013      	str	r3, [r2, #0]
			if (parent) {
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d100      	bne.n	8005dba <ReceiveData+0x52>
 8005db8:	e152      	b.n	8006060 <ReceiveData+0x2f8>
				int locI = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4ac9      	ldr	r2, [pc, #804]	@ (80060e4 <ReceiveData+0x37c>)
 8005dbe:	18ba      	adds	r2, r7, r2
 8005dc0:	6013      	str	r3, [r2, #0]
				struct latLon tempLoc;
				char const *uidRxStr = json_getPropertyValue(parent, "uid");
 8005dc2:	4ac9      	ldr	r2, [pc, #804]	@ (80060e8 <ReceiveData+0x380>)
 8005dc4:	187b      	adds	r3, r7, r1
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	0011      	movs	r1, r2
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f001 fc84 	bl	80076d8 <json_getPropertyValue>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	4ac6      	ldr	r2, [pc, #792]	@ (80060ec <ReceiveData+0x384>)
 8005dd4:	18ba      	adds	r2, r7, r2
 8005dd6:	6013      	str	r3, [r2, #0]
				//HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4ac5      	ldr	r2, [pc, #788]	@ (80060f0 <ReceiveData+0x388>)
 8005ddc:	18ba      	adds	r2, r7, r2
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e015      	b.n	8005e0e <ReceiveData+0xa6>
					game.uid[strI] = uidRxStr[strI];
 8005de2:	4cc3      	ldr	r4, [pc, #780]	@ (80060f0 <ReceiveData+0x388>)
 8005de4:	193b      	adds	r3, r7, r4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4ac0      	ldr	r2, [pc, #768]	@ (80060ec <ReceiveData+0x384>)
 8005dea:	18ba      	adds	r2, r7, r2
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	18d3      	adds	r3, r2, r3
 8005df0:	7818      	ldrb	r0, [r3, #0]
 8005df2:	49c0      	ldr	r1, [pc, #768]	@ (80060f4 <ReceiveData+0x38c>)
 8005df4:	2396      	movs	r3, #150	@ 0x96
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	193a      	adds	r2, r7, r4
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	188a      	adds	r2, r1, r2
 8005dfe:	18d3      	adds	r3, r2, r3
 8005e00:	1c02      	adds	r2, r0, #0
 8005e02:	701a      	strb	r2, [r3, #0]
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8005e04:	193b      	adds	r3, r7, r4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	193a      	adds	r2, r7, r4
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	4bb7      	ldr	r3, [pc, #732]	@ (80060ec <ReceiveData+0x384>)
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7fa f97f 	bl	8000118 <strlen>
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	4bb4      	ldr	r3, [pc, #720]	@ (80060f0 <ReceiveData+0x388>)
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d8dd      	bhi.n	8005de2 <ReceiveData+0x7a>
				game.allSteps = (unsigned int) json_getInteger(
 8005e26:	4ab4      	ldr	r2, [pc, #720]	@ (80060f8 <ReceiveData+0x390>)
 8005e28:	4cad      	ldr	r4, [pc, #692]	@ (80060e0 <ReceiveData+0x378>)
 8005e2a:	193b      	adds	r3, r7, r4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	0011      	movs	r1, r2
 8005e30:	0018      	movs	r0, r3
 8005e32:	f001 fc2e 	bl	8007692 <json_getProperty>
 8005e36:	0003      	movs	r3, r0
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f7fe fbdd 	bl	80045f8 <json_getInteger>
 8005e3e:	0002      	movs	r2, r0
 8005e40:	000b      	movs	r3, r1
 8005e42:	0011      	movs	r1, r2
 8005e44:	4aab      	ldr	r2, [pc, #684]	@ (80060f4 <ReceiveData+0x38c>)
 8005e46:	238c      	movs	r3, #140	@ 0x8c
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "lifeSteps"));
				game.dailyGoal = (unsigned int) json_getInteger(
 8005e4c:	4aab      	ldr	r2, [pc, #684]	@ (80060fc <ReceiveData+0x394>)
 8005e4e:	193b      	adds	r3, r7, r4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	0011      	movs	r1, r2
 8005e54:	0018      	movs	r0, r3
 8005e56:	f001 fc1c 	bl	8007692 <json_getProperty>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7fe fbcb 	bl	80045f8 <json_getInteger>
 8005e62:	0002      	movs	r2, r0
 8005e64:	000b      	movs	r3, r1
 8005e66:	0011      	movs	r1, r2
 8005e68:	4aa2      	ldr	r2, [pc, #648]	@ (80060f4 <ReceiveData+0x38c>)
 8005e6a:	2392      	movs	r3, #146	@ 0x92
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "difficulty"));
				game.evo = (unsigned int) json_getInteger(
 8005e70:	4aa3      	ldr	r2, [pc, #652]	@ (8006100 <ReceiveData+0x398>)
 8005e72:	193b      	adds	r3, r7, r4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f001 fc0a 	bl	8007692 <json_getProperty>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7fe fbb9 	bl	80045f8 <json_getInteger>
 8005e86:	0002      	movs	r2, r0
 8005e88:	000b      	movs	r3, r1
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	4b99      	ldr	r3, [pc, #612]	@ (80060f4 <ReceiveData+0x38c>)
 8005e8e:	741a      	strb	r2, [r3, #16]
						json_getProperty(parent, "evolution"));
				game.mood = (unsigned int) json_getInteger(
 8005e90:	4a9c      	ldr	r2, [pc, #624]	@ (8006104 <ReceiveData+0x39c>)
 8005e92:	193b      	adds	r3, r7, r4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	0011      	movs	r1, r2
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f001 fbfa 	bl	8007692 <json_getProperty>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7fe fba9 	bl	80045f8 <json_getInteger>
 8005ea6:	0002      	movs	r2, r0
 8005ea8:	000b      	movs	r3, r1
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	4b91      	ldr	r3, [pc, #580]	@ (80060f4 <ReceiveData+0x38c>)
 8005eae:	745a      	strb	r2, [r3, #17]
						json_getProperty(parent, "friendship"));
				game.stepsToday = (unsigned int) json_getInteger(
 8005eb0:	4a95      	ldr	r2, [pc, #596]	@ (8006108 <ReceiveData+0x3a0>)
 8005eb2:	193b      	adds	r3, r7, r4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	0011      	movs	r1, r2
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f001 fbea 	bl	8007692 <json_getProperty>
 8005ebe:	0003      	movs	r3, r0
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7fe fb99 	bl	80045f8 <json_getInteger>
 8005ec6:	0002      	movs	r2, r0
 8005ec8:	000b      	movs	r3, r1
 8005eca:	0011      	movs	r1, r2
 8005ecc:	4a89      	ldr	r2, [pc, #548]	@ (80060f4 <ReceiveData+0x38c>)
 8005ece:	2390      	movs	r3, #144	@ 0x90
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "dailySteps"));
				game.weeklySteps = (unsigned int) json_getInteger(
 8005ed4:	4a8d      	ldr	r2, [pc, #564]	@ (800610c <ReceiveData+0x3a4>)
 8005ed6:	193b      	adds	r3, r7, r4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	0011      	movs	r1, r2
 8005edc:	0018      	movs	r0, r3
 8005ede:	f001 fbd8 	bl	8007692 <json_getProperty>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f7fe fb87 	bl	80045f8 <json_getInteger>
 8005eea:	0002      	movs	r2, r0
 8005eec:	000b      	movs	r3, r1
 8005eee:	0011      	movs	r1, r2
 8005ef0:	4a80      	ldr	r2, [pc, #512]	@ (80060f4 <ReceiveData+0x38c>)
 8005ef2:	238e      	movs	r3, #142	@ 0x8e
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "weeklySteps"));
				json_t const *location;
				json_t const *locations = json_getProperty(parent, "locations");
 8005ef8:	4a85      	ldr	r2, [pc, #532]	@ (8006110 <ReceiveData+0x3a8>)
 8005efa:	193b      	adds	r3, r7, r4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	0011      	movs	r1, r2
 8005f00:	0018      	movs	r0, r3
 8005f02:	f001 fbc6 	bl	8007692 <json_getProperty>
 8005f06:	0003      	movs	r3, r0
 8005f08:	4a82      	ldr	r2, [pc, #520]	@ (8006114 <ReceiveData+0x3ac>)
 8005f0a:	18b9      	adds	r1, r7, r2
 8005f0c:	600b      	str	r3, [r1, #0]
				for (location = json_getChild(locations); location; location =
 8005f0e:	18bb      	adds	r3, r7, r2
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	0018      	movs	r0, r3
 8005f14:	f7fe fb66 	bl	80045e4 <json_getChild>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	22a0      	movs	r2, #160	@ 0xa0
 8005f1c:	0152      	lsls	r2, r2, #5
 8005f1e:	18ba      	adds	r2, r7, r2
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e07a      	b.n	800601a <ReceiveData+0x2b2>
						json_getSibling(location)) {
					tempLoc.lat = (float) json_getReal(
 8005f24:	4a7c      	ldr	r2, [pc, #496]	@ (8006118 <ReceiveData+0x3b0>)
 8005f26:	25a0      	movs	r5, #160	@ 0xa0
 8005f28:	016d      	lsls	r5, r5, #5
 8005f2a:	197b      	adds	r3, r7, r5
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f001 fbae 	bl	8007692 <json_getProperty>
 8005f36:	0003      	movs	r3, r0
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f7fe fb6f 	bl	800461c <json_getReal>
 8005f3e:	0002      	movs	r2, r0
 8005f40:	000b      	movs	r3, r1
 8005f42:	0010      	movs	r0, r2
 8005f44:	0019      	movs	r1, r3
 8005f46:	f7fd fa95 	bl	8003474 <__aeabi_d2f>
 8005f4a:	1c02      	adds	r2, r0, #0
 8005f4c:	4c73      	ldr	r4, [pc, #460]	@ (800611c <ReceiveData+0x3b4>)
 8005f4e:	193b      	adds	r3, r7, r4
 8005f50:	601a      	str	r2, [r3, #0]
							json_getProperty(location, "lat"));
					tempLoc.lon = (float) json_getReal(
 8005f52:	4a73      	ldr	r2, [pc, #460]	@ (8006120 <ReceiveData+0x3b8>)
 8005f54:	197b      	adds	r3, r7, r5
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	0011      	movs	r1, r2
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f001 fb99 	bl	8007692 <json_getProperty>
 8005f60:	0003      	movs	r3, r0
 8005f62:	0018      	movs	r0, r3
 8005f64:	f7fe fb5a 	bl	800461c <json_getReal>
 8005f68:	0002      	movs	r2, r0
 8005f6a:	000b      	movs	r3, r1
 8005f6c:	0010      	movs	r0, r2
 8005f6e:	0019      	movs	r1, r3
 8005f70:	f7fd fa80 	bl	8003474 <__aeabi_d2f>
 8005f74:	1c02      	adds	r2, r0, #0
 8005f76:	193b      	adds	r3, r7, r4
 8005f78:	605a      	str	r2, [r3, #4]
							json_getProperty(location, "lng"));
					if (fabs(tempLoc.lat) < .00001) {
 8005f7a:	193b      	adds	r3, r7, r4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	1c18      	adds	r0, r3, #0
 8005f84:	f7fd fa2e 	bl	80033e4 <__aeabi_f2d>
 8005f88:	4a66      	ldr	r2, [pc, #408]	@ (8006124 <ReceiveData+0x3bc>)
 8005f8a:	4b67      	ldr	r3, [pc, #412]	@ (8006128 <ReceiveData+0x3c0>)
 8005f8c:	f7fa fa6c 	bl	8000468 <__aeabi_dcmplt>
 8005f90:	1e03      	subs	r3, r0, #0
 8005f92:	d027      	beq.n	8005fe4 <ReceiveData+0x27c>

						tempLoc.lat = (float) json_getReal(
 8005f94:	4a65      	ldr	r2, [pc, #404]	@ (800612c <ReceiveData+0x3c4>)
 8005f96:	197b      	adds	r3, r7, r5
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f001 fb78 	bl	8007692 <json_getProperty>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7fe fb39 	bl	800461c <json_getReal>
 8005faa:	0002      	movs	r2, r0
 8005fac:	000b      	movs	r3, r1
 8005fae:	0010      	movs	r0, r2
 8005fb0:	0019      	movs	r1, r3
 8005fb2:	f7fd fa5f 	bl	8003474 <__aeabi_d2f>
 8005fb6:	1c02      	adds	r2, r0, #0
 8005fb8:	193b      	adds	r3, r7, r4
 8005fba:	601a      	str	r2, [r3, #0]
								json_getProperty(location, "Lat"));
						tempLoc.lon = (float) json_getReal(
 8005fbc:	4a5c      	ldr	r2, [pc, #368]	@ (8006130 <ReceiveData+0x3c8>)
 8005fbe:	197b      	adds	r3, r7, r5
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	0011      	movs	r1, r2
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f001 fb64 	bl	8007692 <json_getProperty>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f7fe fb25 	bl	800461c <json_getReal>
 8005fd2:	0002      	movs	r2, r0
 8005fd4:	000b      	movs	r3, r1
 8005fd6:	0010      	movs	r0, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	f7fd fa4b 	bl	8003474 <__aeabi_d2f>
 8005fde:	1c02      	adds	r2, r0, #0
 8005fe0:	193b      	adds	r3, r7, r4
 8005fe2:	605a      	str	r2, [r3, #4]
								json_getProperty(location, "Lng"));
					}
					game.positions[locI] = tempLoc;
 8005fe4:	4a43      	ldr	r2, [pc, #268]	@ (80060f4 <ReceiveData+0x38c>)
 8005fe6:	4c3f      	ldr	r4, [pc, #252]	@ (80060e4 <ReceiveData+0x37c>)
 8005fe8:	193b      	adds	r3, r7, r4
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3303      	adds	r3, #3
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	494a      	ldr	r1, [pc, #296]	@ (800611c <ReceiveData+0x3b4>)
 8005ff2:	1879      	adds	r1, r7, r1
 8005ff4:	18d3      	adds	r3, r2, r3
 8005ff6:	000a      	movs	r2, r1
 8005ff8:	ca03      	ldmia	r2!, {r0, r1}
 8005ffa:	c303      	stmia	r3!, {r0, r1}
					locI++;
 8005ffc:	193b      	adds	r3, r7, r4
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	193a      	adds	r2, r7, r4
 8006004:	6013      	str	r3, [r2, #0]
						json_getSibling(location)) {
 8006006:	24a0      	movs	r4, #160	@ 0xa0
 8006008:	0164      	lsls	r4, r4, #5
 800600a:	193b      	adds	r3, r7, r4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	0018      	movs	r0, r3
 8006010:	f7fe fade 	bl	80045d0 <json_getSibling>
 8006014:	0003      	movs	r3, r0
 8006016:	193a      	adds	r2, r7, r4
 8006018:	6013      	str	r3, [r2, #0]
				for (location = json_getChild(locations); location; location =
 800601a:	23a0      	movs	r3, #160	@ 0xa0
 800601c:	015b      	lsls	r3, r3, #5
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d000      	beq.n	8006028 <ReceiveData+0x2c0>
 8006026:	e77d      	b.n	8005f24 <ReceiveData+0x1bc>
				}
				game.numLocations = locI;
 8006028:	4b2e      	ldr	r3, [pc, #184]	@ (80060e4 <ReceiveData+0x37c>)
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b31      	ldr	r3, [pc, #196]	@ (80060f4 <ReceiveData+0x38c>)
 8006030:	615a      	str	r2, [r3, #20]
				for (locI = locI; locI < 32; locI++) {
 8006032:	e010      	b.n	8006056 <ReceiveData+0x2ee>
					memset(&game.positions[locI], 0,
 8006034:	4c2b      	ldr	r4, [pc, #172]	@ (80060e4 <ReceiveData+0x37c>)
 8006036:	193b      	adds	r3, r7, r4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3303      	adds	r3, #3
 800603c:	00da      	lsls	r2, r3, #3
 800603e:	4b2d      	ldr	r3, [pc, #180]	@ (80060f4 <ReceiveData+0x38c>)
 8006040:	18d3      	adds	r3, r2, r3
 8006042:	2208      	movs	r2, #8
 8006044:	2100      	movs	r1, #0
 8006046:	0018      	movs	r0, r3
 8006048:	f008 fb9c 	bl	800e784 <memset>
				for (locI = locI; locI < 32; locI++) {
 800604c:	193b      	adds	r3, r7, r4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	193a      	adds	r2, r7, r4
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b23      	ldr	r3, [pc, #140]	@ (80060e4 <ReceiveData+0x37c>)
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b1f      	cmp	r3, #31
 800605e:	dde9      	ble.n	8006034 <ReceiveData+0x2cc>
							sizeof(game.positions[locI]));
				}
				//SendData();
			}
			for (ii = 0; ii <= rI; ii++)
 8006060:	4b34      	ldr	r3, [pc, #208]	@ (8006134 <ReceiveData+0x3cc>)
 8006062:	2200      	movs	r2, #0
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e00d      	b.n	8006084 <ReceiveData+0x31c>
				syncBuffer[ii] = 0;
 8006068:	4b32      	ldr	r3, [pc, #200]	@ (8006134 <ReceiveData+0x3cc>)
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	001a      	movs	r2, r3
 8006070:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <ReceiveData+0x374>)
 8006072:	2100      	movs	r1, #0
 8006074:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= rI; ii++)
 8006076:	4b2f      	ldr	r3, [pc, #188]	@ (8006134 <ReceiveData+0x3cc>)
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	3301      	adds	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	4b2c      	ldr	r3, [pc, #176]	@ (8006134 <ReceiveData+0x3cc>)
 8006082:	801a      	strh	r2, [r3, #0]
 8006084:	4b2b      	ldr	r3, [pc, #172]	@ (8006134 <ReceiveData+0x3cc>)
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	001a      	movs	r2, r3
 800608c:	4912      	ldr	r1, [pc, #72]	@ (80060d8 <ReceiveData+0x370>)
 800608e:	187b      	adds	r3, r7, r1
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4293      	cmp	r3, r2
 8006094:	dae8      	bge.n	8006068 <ReceiveData+0x300>
			rI = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	187a      	adds	r2, r7, r1
 800609a:	6013      	str	r3, [r2, #0]
			break;
 800609c:	e014      	b.n	80060c8 <ReceiveData+0x360>
		} else {
			rI++;
 800609e:	4a0e      	ldr	r2, [pc, #56]	@ (80060d8 <ReceiveData+0x370>)
 80060a0:	18bb      	adds	r3, r7, r2
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	18ba      	adds	r2, r7, r2
 80060a8:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 80060aa:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <ReceiveData+0x370>)
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <ReceiveData+0x374>)
 80060b2:	18d1      	adds	r1, r2, r3
 80060b4:	23fa      	movs	r3, #250	@ 0xfa
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	481f      	ldr	r0, [pc, #124]	@ (8006138 <ReceiveData+0x3d0>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	f006 fb4a 	bl	800c754 <HAL_UART_Receive>
 80060c0:	1e03      	subs	r3, r0, #0
 80060c2:	d100      	bne.n	80060c6 <ReceiveData+0x35e>
 80060c4:	e659      	b.n	8005d7a <ReceiveData+0x12>
		}
	}

}
 80060c6:	46c0      	nop			@ (mov r8, r8)
 80060c8:	46c0      	nop			@ (mov r8, r8)
 80060ca:	46bd      	mov	sp, r7
 80060cc:	4b1b      	ldr	r3, [pc, #108]	@ (800613c <ReceiveData+0x3d4>)
 80060ce:	449d      	add	sp, r3
 80060d0:	bdb0      	pop	{r4, r5, r7, pc}
 80060d2:	46c0      	nop			@ (mov r8, r8)
 80060d4:	ffffebf0 	.word	0xffffebf0
 80060d8:	0000140c 	.word	0x0000140c
 80060dc:	20000f74 	.word	0x20000f74
 80060e0:	000013fc 	.word	0x000013fc
 80060e4:	00001408 	.word	0x00001408
 80060e8:	08010ff0 	.word	0x08010ff0
 80060ec:	000013f8 	.word	0x000013f8
 80060f0:	00001404 	.word	0x00001404
 80060f4:	20000bbc 	.word	0x20000bbc
 80060f8:	08010ff4 	.word	0x08010ff4
 80060fc:	08011000 	.word	0x08011000
 8006100:	0801100c 	.word	0x0801100c
 8006104:	08011018 	.word	0x08011018
 8006108:	08011024 	.word	0x08011024
 800610c:	08011030 	.word	0x08011030
 8006110:	0801103c 	.word	0x0801103c
 8006114:	000013f4 	.word	0x000013f4
 8006118:	08011048 	.word	0x08011048
 800611c:	000013ec 	.word	0x000013ec
 8006120:	0801104c 	.word	0x0801104c
 8006124:	88e368f1 	.word	0x88e368f1
 8006128:	3ee4f8b5 	.word	0x3ee4f8b5
 800612c:	08011050 	.word	0x08011050
 8006130:	08011054 	.word	0x08011054
 8006134:	20000d10 	.word	0x20000d10
 8006138:	20001d8c 	.word	0x20001d8c
 800613c:	00001410 	.word	0x00001410

08006140 <CheckExp>:
int CheckExp(int threshold, int comparer) {
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	int value = (int) ((float) comparer
 800614a:	6838      	ldr	r0, [r7, #0]
 800614c:	f7fb fa00 	bl	8001550 <__aeabi_i2f>
 8006150:	1c04      	adds	r4, r0, #0
			* (1.0f + ((float) game.numLocations) / expDivisor));
 8006152:	4b1c      	ldr	r3, [pc, #112]	@ (80061c4 <CheckExp+0x84>)
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	0018      	movs	r0, r3
 8006158:	f7fb fa46 	bl	80015e8 <__aeabi_ui2f>
 800615c:	1c03      	adds	r3, r0, #0
 800615e:	2281      	movs	r2, #129	@ 0x81
 8006160:	05d2      	lsls	r2, r2, #23
 8006162:	1c11      	adds	r1, r2, #0
 8006164:	1c18      	adds	r0, r3, #0
 8006166:	f7fa fd0b 	bl	8000b80 <__aeabi_fdiv>
 800616a:	1c03      	adds	r3, r0, #0
 800616c:	21fe      	movs	r1, #254	@ 0xfe
 800616e:	0589      	lsls	r1, r1, #22
 8006170:	1c18      	adds	r0, r3, #0
 8006172:	f7fa fb7b 	bl	800086c <__aeabi_fadd>
 8006176:	1c03      	adds	r3, r0, #0
 8006178:	1c19      	adds	r1, r3, #0
 800617a:	1c20      	adds	r0, r4, #0
 800617c:	f7fa fee6 	bl	8000f4c <__aeabi_fmul>
 8006180:	1c03      	adds	r3, r0, #0
	int value = (int) ((float) comparer
 8006182:	1c18      	adds	r0, r3, #0
 8006184:	f7fb f9c4 	bl	8001510 <__aeabi_f2iz>
 8006188:	0003      	movs	r3, r0
 800618a:	60fb      	str	r3, [r7, #12]
	if (value < (threshold / 4))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	da00      	bge.n	8006194 <CheckExp+0x54>
 8006192:	3303      	adds	r3, #3
 8006194:	109b      	asrs	r3, r3, #2
 8006196:	001a      	movs	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4293      	cmp	r3, r2
 800619c:	da02      	bge.n	80061a4 <CheckExp+0x64>
		return -1;
 800619e:	2301      	movs	r3, #1
 80061a0:	425b      	negs	r3, r3
 80061a2:	e00b      	b.n	80061bc <CheckExp+0x7c>
	if (value < threshold)
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	da01      	bge.n	80061b0 <CheckExp+0x70>
		return 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e005      	b.n	80061bc <CheckExp+0x7c>
	if (value >= threshold)
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	db01      	blt.n	80061bc <CheckExp+0x7c>
		return 1;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e7ff      	b.n	80061bc <CheckExp+0x7c>
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b005      	add	sp, #20
 80061c2:	bd90      	pop	{r4, r7, pc}
 80061c4:	20000bbc 	.word	0x20000bbc

080061c8 <GetLatLon>:
void GetLatLon() {
 80061c8:	b5b0      	push	{r4, r5, r7, lr}
 80061ca:	b08a      	sub	sp, #40	@ 0x28
 80061cc:	af00      	add	r7, sp, #0
	int gpsI = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	623b      	str	r3, [r7, #32]
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 80061d6:	e120      	b.n	800641a <GetLatLon+0x252>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 80061d8:	4b9b      	ldr	r3, [pc, #620]	@ (8006448 <GetLatLon+0x280>)
 80061da:	2200      	movs	r2, #0
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e00d      	b.n	80061fc <GetLatLon+0x34>
				buffer[ii] = 0;
 80061e0:	4b99      	ldr	r3, [pc, #612]	@ (8006448 <GetLatLon+0x280>)
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	001a      	movs	r2, r3
 80061e8:	4b98      	ldr	r3, [pc, #608]	@ (800644c <GetLatLon+0x284>)
 80061ea:	2100      	movs	r1, #0
 80061ec:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 80061ee:	4b96      	ldr	r3, [pc, #600]	@ (8006448 <GetLatLon+0x280>)
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	4b93      	ldr	r3, [pc, #588]	@ (8006448 <GetLatLon+0x280>)
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	4b92      	ldr	r3, [pc, #584]	@ (8006448 <GetLatLon+0x280>)
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b7f      	cmp	r3, #127	@ 0x7f
 8006204:	d9ec      	bls.n	80061e0 <GetLatLon+0x18>
			buffer[0] = '$';
 8006206:	4b91      	ldr	r3, [pc, #580]	@ (800644c <GetLatLon+0x284>)
 8006208:	2224      	movs	r2, #36	@ 0x24
 800620a:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 8006210:	4a8e      	ldr	r2, [pc, #568]	@ (800644c <GetLatLon+0x284>)
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	18d3      	adds	r3, r2, r3
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b0a      	cmp	r3, #10
 800621a:	d000      	beq.n	800621e <GetLatLon+0x56>
 800621c:	e0fa      	b.n	8006414 <GetLatLon+0x24c>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 800621e:	4a8b      	ldr	r2, [pc, #556]	@ (800644c <GetLatLon+0x284>)
 8006220:	4b8b      	ldr	r3, [pc, #556]	@ (8006450 <GetLatLon+0x288>)
 8006222:	0011      	movs	r1, r2
 8006224:	0018      	movs	r0, r3
 8006226:	f000 fe3f 	bl	8006ea8 <minmea_parse_gga>
 800622a:	1e03      	subs	r3, r0, #0
 800622c:	d100      	bne.n	8006230 <GetLatLon+0x68>
 800622e:	e0da      	b.n	80063e6 <GetLatLon+0x21e>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006230:	4b88      	ldr	r3, [pc, #544]	@ (8006454 <GetLatLon+0x28c>)
 8006232:	0018      	movs	r0, r3
 8006234:	f7fe f988 	bl	8004548 <minmea_tocoord>
 8006238:	1c02      	adds	r2, r0, #0
 800623a:	2408      	movs	r4, #8
 800623c:	193b      	adds	r3, r7, r4
 800623e:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006240:	4b85      	ldr	r3, [pc, #532]	@ (8006458 <GetLatLon+0x290>)
 8006242:	0018      	movs	r0, r3
 8006244:	f7fe f980 	bl	8004548 <minmea_tocoord>
 8006248:	1c02      	adds	r2, r0, #0
 800624a:	193b      	adds	r3, r7, r4
 800624c:	605a      	str	r2, [r3, #4]
				game.time = ggaStruct.time;
 800624e:	4b83      	ldr	r3, [pc, #524]	@ (800645c <GetLatLon+0x294>)
 8006250:	4a7f      	ldr	r2, [pc, #508]	@ (8006450 <GetLatLon+0x288>)
 8006252:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006254:	c313      	stmia	r3!, {r0, r1, r4}
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	601a      	str	r2, [r3, #0]
				frameGot = 1;
 800625a:	4b81      	ldr	r3, [pc, #516]	@ (8006460 <GetLatLon+0x298>)
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
				posCheckI = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	623b      	str	r3, [r7, #32]
				for (posCheckI = 0; posCheckI < game.numLocations;
 8006264:	2300      	movs	r3, #0
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	e09f      	b.n	80063aa <GetLatLon+0x1e2>
						posCheckI++) {

					tempPos = game.positions[posCheckI];
 800626a:	003a      	movs	r2, r7
 800626c:	497b      	ldr	r1, [pc, #492]	@ (800645c <GetLatLon+0x294>)
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	3303      	adds	r3, #3
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	18cb      	adds	r3, r1, r3
 8006276:	cb03      	ldmia	r3!, {r0, r1}
 8006278:	c203      	stmia	r2!, {r0, r1}
					if ((tempPos.lat > .000001f || tempPos.lat < -.000001f)
 800627a:	003b      	movs	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4979      	ldr	r1, [pc, #484]	@ (8006464 <GetLatLon+0x29c>)
 8006280:	1c18      	adds	r0, r3, #0
 8006282:	f7fa f93f 	bl	8000504 <__aeabi_fcmpgt>
 8006286:	1e03      	subs	r3, r0, #0
 8006288:	d108      	bne.n	800629c <GetLatLon+0xd4>
 800628a:	003b      	movs	r3, r7
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4976      	ldr	r1, [pc, #472]	@ (8006468 <GetLatLon+0x2a0>)
 8006290:	1c18      	adds	r0, r3, #0
 8006292:	f7fa f923 	bl	80004dc <__aeabi_fcmplt>
 8006296:	1e03      	subs	r3, r0, #0
 8006298:	d100      	bne.n	800629c <GetLatLon+0xd4>
						if (sqrt((checkW * checkW) + (checkH * checkH))
								< gpsThreshold)
							return;

					} else
						return;
 800629a:	e0d2      	b.n	8006442 <GetLatLon+0x27a>
							&& (tempPos.lon > .000001f
 800629c:	003b      	movs	r3, r7
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4970      	ldr	r1, [pc, #448]	@ (8006464 <GetLatLon+0x29c>)
 80062a2:	1c18      	adds	r0, r3, #0
 80062a4:	f7fa f92e 	bl	8000504 <__aeabi_fcmpgt>
 80062a8:	1e03      	subs	r3, r0, #0
 80062aa:	d108      	bne.n	80062be <GetLatLon+0xf6>
									|| tempPos.lon < -.000001f)
 80062ac:	003b      	movs	r3, r7
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	496d      	ldr	r1, [pc, #436]	@ (8006468 <GetLatLon+0x2a0>)
 80062b2:	1c18      	adds	r0, r3, #0
 80062b4:	f7fa f912 	bl	80004dc <__aeabi_fcmplt>
 80062b8:	1e03      	subs	r3, r0, #0
 80062ba:	d100      	bne.n	80062be <GetLatLon+0xf6>
						return;
 80062bc:	e0c1      	b.n	8006442 <GetLatLon+0x27a>
							&& (pos.lat > .000001f || pos.lat < -.000001f)
 80062be:	2408      	movs	r4, #8
 80062c0:	193b      	adds	r3, r7, r4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4967      	ldr	r1, [pc, #412]	@ (8006464 <GetLatLon+0x29c>)
 80062c6:	1c18      	adds	r0, r3, #0
 80062c8:	f7fa f91c 	bl	8000504 <__aeabi_fcmpgt>
 80062cc:	1e03      	subs	r3, r0, #0
 80062ce:	d108      	bne.n	80062e2 <GetLatLon+0x11a>
 80062d0:	193b      	adds	r3, r7, r4
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4964      	ldr	r1, [pc, #400]	@ (8006468 <GetLatLon+0x2a0>)
 80062d6:	1c18      	adds	r0, r3, #0
 80062d8:	f7fa f900 	bl	80004dc <__aeabi_fcmplt>
 80062dc:	1e03      	subs	r3, r0, #0
 80062de:	d100      	bne.n	80062e2 <GetLatLon+0x11a>
						return;
 80062e0:	e0af      	b.n	8006442 <GetLatLon+0x27a>
							&& (pos.lat > .000001f || pos.lat < -.000001f)) {
 80062e2:	2408      	movs	r4, #8
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	495e      	ldr	r1, [pc, #376]	@ (8006464 <GetLatLon+0x29c>)
 80062ea:	1c18      	adds	r0, r3, #0
 80062ec:	f7fa f90a 	bl	8000504 <__aeabi_fcmpgt>
 80062f0:	1e03      	subs	r3, r0, #0
 80062f2:	d108      	bne.n	8006306 <GetLatLon+0x13e>
 80062f4:	193b      	adds	r3, r7, r4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	495b      	ldr	r1, [pc, #364]	@ (8006468 <GetLatLon+0x2a0>)
 80062fa:	1c18      	adds	r0, r3, #0
 80062fc:	f7fa f8ee 	bl	80004dc <__aeabi_fcmplt>
 8006300:	1e03      	subs	r3, r0, #0
 8006302:	d100      	bne.n	8006306 <GetLatLon+0x13e>
						return;
 8006304:	e09d      	b.n	8006442 <GetLatLon+0x27a>
						checkW = fabs(tempPos.lat - pos.lat);
 8006306:	003b      	movs	r3, r7
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	2408      	movs	r4, #8
 800630c:	193b      	adds	r3, r7, r4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	1c19      	adds	r1, r3, #0
 8006312:	1c10      	adds	r0, r2, #0
 8006314:	f7fa ff58 	bl	80011c8 <__aeabi_fsub>
 8006318:	1c03      	adds	r3, r0, #0
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	1c18      	adds	r0, r3, #0
 8006320:	f7fd f860 	bl	80033e4 <__aeabi_f2d>
 8006324:	0002      	movs	r2, r0
 8006326:	000b      	movs	r3, r1
 8006328:	61ba      	str	r2, [r7, #24]
 800632a:	61fb      	str	r3, [r7, #28]
						checkH = fabs(tempPos.lon - pos.lon);
 800632c:	003b      	movs	r3, r7
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	193b      	adds	r3, r7, r4
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	1c19      	adds	r1, r3, #0
 8006336:	1c10      	adds	r0, r2, #0
 8006338:	f7fa ff46 	bl	80011c8 <__aeabi_fsub>
 800633c:	1c03      	adds	r3, r0, #0
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	1c18      	adds	r0, r3, #0
 8006344:	f7fd f84e 	bl	80033e4 <__aeabi_f2d>
 8006348:	0002      	movs	r2, r0
 800634a:	000b      	movs	r3, r1
 800634c:	613a      	str	r2, [r7, #16]
 800634e:	617b      	str	r3, [r7, #20]
						if (sqrt((checkW * checkW) + (checkH * checkH))
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	69b8      	ldr	r0, [r7, #24]
 8006356:	69f9      	ldr	r1, [r7, #28]
 8006358:	f7fc f930 	bl	80025bc <__aeabi_dmul>
 800635c:	0002      	movs	r2, r0
 800635e:	000b      	movs	r3, r1
 8006360:	0014      	movs	r4, r2
 8006362:	001d      	movs	r5, r3
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6938      	ldr	r0, [r7, #16]
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	f7fc f926 	bl	80025bc <__aeabi_dmul>
 8006370:	0002      	movs	r2, r0
 8006372:	000b      	movs	r3, r1
 8006374:	0020      	movs	r0, r4
 8006376:	0029      	movs	r1, r5
 8006378:	f7fb f978 	bl	800166c <__aeabi_dadd>
 800637c:	0002      	movs	r2, r0
 800637e:	000b      	movs	r3, r1
 8006380:	0010      	movs	r0, r2
 8006382:	0019      	movs	r1, r3
 8006384:	f00a fb2d 	bl	80109e2 <sqrt>
 8006388:	0004      	movs	r4, r0
 800638a:	000d      	movs	r5, r1
								< gpsThreshold)
 800638c:	4b37      	ldr	r3, [pc, #220]	@ (800646c <GetLatLon+0x2a4>)
 800638e:	1c18      	adds	r0, r3, #0
 8006390:	f7fd f828 	bl	80033e4 <__aeabi_f2d>
 8006394:	0002      	movs	r2, r0
 8006396:	000b      	movs	r3, r1
						if (sqrt((checkW * checkW) + (checkH * checkH))
 8006398:	0020      	movs	r0, r4
 800639a:	0029      	movs	r1, r5
 800639c:	f7fa f864 	bl	8000468 <__aeabi_dcmplt>
 80063a0:	1e03      	subs	r3, r0, #0
 80063a2:	d14b      	bne.n	800643c <GetLatLon+0x274>
						posCheckI++) {
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	3301      	adds	r3, #1
 80063a8:	623b      	str	r3, [r7, #32]
				for (posCheckI = 0; posCheckI < game.numLocations;
 80063aa:	4b2c      	ldr	r3, [pc, #176]	@ (800645c <GetLatLon+0x294>)
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d900      	bls.n	80063b6 <GetLatLon+0x1ee>
 80063b4:	e759      	b.n	800626a <GetLatLon+0xa2>

				}
				game.positions[game.numLocations] = pos;
 80063b6:	4b29      	ldr	r3, [pc, #164]	@ (800645c <GetLatLon+0x294>)
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	4a28      	ldr	r2, [pc, #160]	@ (800645c <GetLatLon+0x294>)
 80063bc:	3303      	adds	r3, #3
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	2108      	movs	r1, #8
 80063c2:	1879      	adds	r1, r7, r1
 80063c4:	18d3      	adds	r3, r2, r3
 80063c6:	000a      	movs	r2, r1
 80063c8:	ca03      	ldmia	r2!, {r0, r1}
 80063ca:	c303      	stmia	r3!, {r0, r1}
				game.numLocations++;
 80063cc:	4b23      	ldr	r3, [pc, #140]	@ (800645c <GetLatLon+0x294>)
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	4b22      	ldr	r3, [pc, #136]	@ (800645c <GetLatLon+0x294>)
 80063d4:	615a      	str	r2, [r3, #20]
				if (game.numLocations > 31)
 80063d6:	4b21      	ldr	r3, [pc, #132]	@ (800645c <GetLatLon+0x294>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	2b1f      	cmp	r3, #31
 80063dc:	d930      	bls.n	8006440 <GetLatLon+0x278>
					game.numLocations = 0;
 80063de:	4b1f      	ldr	r3, [pc, #124]	@ (800645c <GetLatLon+0x294>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	615a      	str	r2, [r3, #20]
				break;
 80063e4:	e02c      	b.n	8006440 <GetLatLon+0x278>
			}

			for (ii = 0; ii <= 127; ii++)
 80063e6:	4b18      	ldr	r3, [pc, #96]	@ (8006448 <GetLatLon+0x280>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e00d      	b.n	800640a <GetLatLon+0x242>
				buffer[ii] = 0;
 80063ee:	4b16      	ldr	r3, [pc, #88]	@ (8006448 <GetLatLon+0x280>)
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	001a      	movs	r2, r3
 80063f6:	4b15      	ldr	r3, [pc, #84]	@ (800644c <GetLatLon+0x284>)
 80063f8:	2100      	movs	r1, #0
 80063fa:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 80063fc:	4b12      	ldr	r3, [pc, #72]	@ (8006448 <GetLatLon+0x280>)
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	3301      	adds	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <GetLatLon+0x280>)
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	4b0f      	ldr	r3, [pc, #60]	@ (8006448 <GetLatLon+0x280>)
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b7f      	cmp	r3, #127	@ 0x7f
 8006412:	d9ec      	bls.n	80063ee <GetLatLon+0x226>
		}
		gpsI++;
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	3301      	adds	r3, #1
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 800641a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641c:	4b0b      	ldr	r3, [pc, #44]	@ (800644c <GetLatLon+0x284>)
 800641e:	18d1      	adds	r1, r2, r3
 8006420:	23fa      	movs	r3, #250	@ 0xfa
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4812      	ldr	r0, [pc, #72]	@ (8006470 <GetLatLon+0x2a8>)
 8006426:	2201      	movs	r2, #1
 8006428:	f006 f994 	bl	800c754 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 800642c:	4a07      	ldr	r2, [pc, #28]	@ (800644c <GetLatLon+0x284>)
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	18d3      	adds	r3, r2, r3
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b24      	cmp	r3, #36	@ 0x24
 8006436:	d000      	beq.n	800643a <GetLatLon+0x272>
 8006438:	e6ea      	b.n	8006210 <GetLatLon+0x48>
 800643a:	e6cd      	b.n	80061d8 <GetLatLon+0x10>
							return;
 800643c:	46c0      	nop			@ (mov r8, r8)
 800643e:	e000      	b.n	8006442 <GetLatLon+0x27a>
				break;
 8006440:	46c0      	nop			@ (mov r8, r8)

	}

}
 8006442:	46bd      	mov	sp, r7
 8006444:	b00a      	add	sp, #40	@ 0x28
 8006446:	bdb0      	pop	{r4, r5, r7, pc}
 8006448:	20000d10 	.word	0x20000d10
 800644c:	20000d64 	.word	0x20000d64
 8006450:	20000d14 	.word	0x20000d14
 8006454:	20000d24 	.word	0x20000d24
 8006458:	20000d2c 	.word	0x20000d2c
 800645c:	20000bbc 	.word	0x20000bbc
 8006460:	20000d62 	.word	0x20000d62
 8006464:	358637bd 	.word	0x358637bd
 8006468:	b58637bd 	.word	0xb58637bd
 800646c:	38d1b717 	.word	0x38d1b717
 8006470:	20001cf8 	.word	0x20001cf8

08006474 <Emote>:
void Emote() {
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af04      	add	r7, sp, #16
	switch (game.evo) {
 800647a:	4b57      	ldr	r3, [pc, #348]	@ (80065d8 <Emote+0x164>)
 800647c:	7c1b      	ldrb	r3, [r3, #16]
 800647e:	2b02      	cmp	r3, #2
 8006480:	d041      	beq.n	8006506 <Emote+0x92>
 8006482:	dd00      	ble.n	8006486 <Emote+0x12>
 8006484:	e069      	b.n	800655a <Emote+0xe6>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <Emote+0x1c>
 800648a:	2b01      	cmp	r3, #1
 800648c:	d016      	beq.n	80064bc <Emote+0x48>
 800648e:	e064      	b.n	800655a <Emote+0xe6>
	case 0:
		if (game.time.seconds % 3 == 0) {
 8006490:	4b51      	ldr	r3, [pc, #324]	@ (80065d8 <Emote+0x164>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2103      	movs	r1, #3
 8006496:	0018      	movs	r0, r3
 8006498:	f7f9 ffca 	bl	8000430 <__aeabi_idivmod>
 800649c:	1e0b      	subs	r3, r1, #0
 800649e:	d157      	bne.n	8006550 <Emote+0xdc>
			game.time.seconds++;
 80064a0:	4b4d      	ldr	r3, [pc, #308]	@ (80065d8 <Emote+0x164>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	4b4c      	ldr	r3, [pc, #304]	@ (80065d8 <Emote+0x164>)
 80064a8:	609a      	str	r2, [r3, #8]
			effect = EggNoise;
 80064aa:	4b4c      	ldr	r3, [pc, #304]	@ (80065dc <Emote+0x168>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	701a      	strb	r2, [r3, #0]
			PlayEffect(effect);
 80064b0:	4b4a      	ldr	r3, [pc, #296]	@ (80065dc <Emote+0x168>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	0018      	movs	r0, r3
 80064b6:	f7ff f8dd 	bl	8005674 <PlayEffect>
		}
		break;
 80064ba:	e049      	b.n	8006550 <Emote+0xdc>
	case 1:
		if (game.time.seconds % 3 == 0) {
 80064bc:	4b46      	ldr	r3, [pc, #280]	@ (80065d8 <Emote+0x164>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2103      	movs	r1, #3
 80064c2:	0018      	movs	r0, r3
 80064c4:	f7f9 ffb4 	bl	8000430 <__aeabi_idivmod>
 80064c8:	1e0b      	subs	r3, r1, #0
 80064ca:	d143      	bne.n	8006554 <Emote+0xe0>
			game.time.seconds++;
 80064cc:	4b42      	ldr	r3, [pc, #264]	@ (80065d8 <Emote+0x164>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	4b41      	ldr	r3, [pc, #260]	@ (80065d8 <Emote+0x164>)
 80064d4:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 80064d6:	4b40      	ldr	r3, [pc, #256]	@ (80065d8 <Emote+0x164>)
 80064d8:	7c5b      	ldrb	r3, [r3, #17]
 80064da:	001a      	movs	r2, r3
 80064dc:	2300      	movs	r3, #0
 80064de:	429a      	cmp	r2, r3
 80064e0:	dd08      	ble.n	80064f4 <Emote+0x80>
				effect = YoungNoiseHappy;
 80064e2:	4b3e      	ldr	r3, [pc, #248]	@ (80065dc <Emote+0x168>)
 80064e4:	2202      	movs	r2, #2
 80064e6:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80064e8:	4b3c      	ldr	r3, [pc, #240]	@ (80065dc <Emote+0x168>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7ff f8c1 	bl	8005674 <PlayEffect>
				effect = YoungNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 80064f2:	e02f      	b.n	8006554 <Emote+0xe0>
				effect = YoungNoiseSad;
 80064f4:	4b39      	ldr	r3, [pc, #228]	@ (80065dc <Emote+0x168>)
 80064f6:	2203      	movs	r2, #3
 80064f8:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80064fa:	4b38      	ldr	r3, [pc, #224]	@ (80065dc <Emote+0x168>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	0018      	movs	r0, r3
 8006500:	f7ff f8b8 	bl	8005674 <PlayEffect>
		break;
 8006504:	e026      	b.n	8006554 <Emote+0xe0>
	case 2:
		if (game.time.seconds % 3 == 0) {
 8006506:	4b34      	ldr	r3, [pc, #208]	@ (80065d8 <Emote+0x164>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2103      	movs	r1, #3
 800650c:	0018      	movs	r0, r3
 800650e:	f7f9 ff8f 	bl	8000430 <__aeabi_idivmod>
 8006512:	1e0b      	subs	r3, r1, #0
 8006514:	d120      	bne.n	8006558 <Emote+0xe4>
			game.time.seconds++;
 8006516:	4b30      	ldr	r3, [pc, #192]	@ (80065d8 <Emote+0x164>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	4b2e      	ldr	r3, [pc, #184]	@ (80065d8 <Emote+0x164>)
 800651e:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 8006520:	4b2d      	ldr	r3, [pc, #180]	@ (80065d8 <Emote+0x164>)
 8006522:	7c5b      	ldrb	r3, [r3, #17]
 8006524:	001a      	movs	r2, r3
 8006526:	2300      	movs	r3, #0
 8006528:	429a      	cmp	r2, r3
 800652a:	dd08      	ble.n	800653e <Emote+0xca>
				effect = AdultNoiseHappy;
 800652c:	4b2b      	ldr	r3, [pc, #172]	@ (80065dc <Emote+0x168>)
 800652e:	2204      	movs	r2, #4
 8006530:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006532:	4b2a      	ldr	r3, [pc, #168]	@ (80065dc <Emote+0x168>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	0018      	movs	r0, r3
 8006538:	f7ff f89c 	bl	8005674 <PlayEffect>
				PlayEffect(effect);

			}
		}
		//Animate as the adult
		break;
 800653c:	e00c      	b.n	8006558 <Emote+0xe4>
				effect = AdultNoiseSad;
 800653e:	4b27      	ldr	r3, [pc, #156]	@ (80065dc <Emote+0x168>)
 8006540:	2205      	movs	r2, #5
 8006542:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006544:	4b25      	ldr	r3, [pc, #148]	@ (80065dc <Emote+0x168>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	0018      	movs	r0, r3
 800654a:	f7ff f893 	bl	8005674 <PlayEffect>
		break;
 800654e:	e003      	b.n	8006558 <Emote+0xe4>
		break;
 8006550:	46c0      	nop			@ (mov r8, r8)
 8006552:	e002      	b.n	800655a <Emote+0xe6>
		break;
 8006554:	46c0      	nop			@ (mov r8, r8)
 8006556:	e000      	b.n	800655a <Emote+0xe6>
		break;
 8006558:	46c0      	nop			@ (mov r8, r8)
	}
	if (game.mood <= sadMood) {
 800655a:	4b1f      	ldr	r3, [pc, #124]	@ (80065d8 <Emote+0x164>)
 800655c:	7c5b      	ldrb	r3, [r3, #17]
 800655e:	001a      	movs	r2, r3
 8006560:	2300      	movs	r3, #0
 8006562:	429a      	cmp	r2, r3
 8006564:	dc0d      	bgt.n	8006582 <Emote+0x10e>
		drawString(0, 140, "Emotional State :(", WHITE, BLACK, 1, 1);
 8006566:	2301      	movs	r3, #1
 8006568:	425b      	negs	r3, r3
 800656a:	4a1d      	ldr	r2, [pc, #116]	@ (80065e0 <Emote+0x16c>)
 800656c:	2101      	movs	r1, #1
 800656e:	9102      	str	r1, [sp, #8]
 8006570:	2101      	movs	r1, #1
 8006572:	9101      	str	r1, [sp, #4]
 8006574:	2100      	movs	r1, #0
 8006576:	9100      	str	r1, [sp, #0]
 8006578:	218c      	movs	r1, #140	@ 0x8c
 800657a:	2000      	movs	r0, #0
 800657c:	f7fd facd 	bl	8003b1a <drawString>
	} else if (game.mood <= mehMood) {
		drawString(0, 140, "Emotional State :|", WHITE, BLACK, 1, 1);
	} else if (game.mood >= happyMood) {
		drawString(0, 140, "Emotional State :)", WHITE, BLACK, 1, 1);
	}
}
 8006580:	e026      	b.n	80065d0 <Emote+0x15c>
	} else if (game.mood <= mehMood) {
 8006582:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <Emote+0x164>)
 8006584:	7c5b      	ldrb	r3, [r3, #17]
 8006586:	001a      	movs	r2, r3
 8006588:	2301      	movs	r3, #1
 800658a:	429a      	cmp	r2, r3
 800658c:	dc0d      	bgt.n	80065aa <Emote+0x136>
		drawString(0, 140, "Emotional State :|", WHITE, BLACK, 1, 1);
 800658e:	2301      	movs	r3, #1
 8006590:	425b      	negs	r3, r3
 8006592:	4a14      	ldr	r2, [pc, #80]	@ (80065e4 <Emote+0x170>)
 8006594:	2101      	movs	r1, #1
 8006596:	9102      	str	r1, [sp, #8]
 8006598:	2101      	movs	r1, #1
 800659a:	9101      	str	r1, [sp, #4]
 800659c:	2100      	movs	r1, #0
 800659e:	9100      	str	r1, [sp, #0]
 80065a0:	218c      	movs	r1, #140	@ 0x8c
 80065a2:	2000      	movs	r0, #0
 80065a4:	f7fd fab9 	bl	8003b1a <drawString>
}
 80065a8:	e012      	b.n	80065d0 <Emote+0x15c>
	} else if (game.mood >= happyMood) {
 80065aa:	4b0b      	ldr	r3, [pc, #44]	@ (80065d8 <Emote+0x164>)
 80065ac:	7c5b      	ldrb	r3, [r3, #17]
 80065ae:	001a      	movs	r2, r3
 80065b0:	2302      	movs	r3, #2
 80065b2:	429a      	cmp	r2, r3
 80065b4:	db0c      	blt.n	80065d0 <Emote+0x15c>
		drawString(0, 140, "Emotional State :)", WHITE, BLACK, 1, 1);
 80065b6:	2301      	movs	r3, #1
 80065b8:	425b      	negs	r3, r3
 80065ba:	4a0b      	ldr	r2, [pc, #44]	@ (80065e8 <Emote+0x174>)
 80065bc:	2101      	movs	r1, #1
 80065be:	9102      	str	r1, [sp, #8]
 80065c0:	2101      	movs	r1, #1
 80065c2:	9101      	str	r1, [sp, #4]
 80065c4:	2100      	movs	r1, #0
 80065c6:	9100      	str	r1, [sp, #0]
 80065c8:	218c      	movs	r1, #140	@ 0x8c
 80065ca:	2000      	movs	r0, #0
 80065cc:	f7fd faa5 	bl	8003b1a <drawString>
}
 80065d0:	46c0      	nop			@ (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	46c0      	nop			@ (mov r8, r8)
 80065d8:	20000bbc 	.word	0x20000bbc
 80065dc:	20000bb8 	.word	0x20000bb8
 80065e0:	08011058 	.word	0x08011058
 80065e4:	0801106c 	.word	0x0801106c
 80065e8:	08011080 	.word	0x08011080

080065ec <GetJustLatLon>:
struct latLon GetJustLatLon() {
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b089      	sub	sp, #36	@ 0x24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	int gpsI = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 80065fc:	e057      	b.n	80066ae <GetJustLatLon+0xc2>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 80065fe:	4b36      	ldr	r3, [pc, #216]	@ (80066d8 <GetJustLatLon+0xec>)
 8006600:	2200      	movs	r2, #0
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e00d      	b.n	8006622 <GetJustLatLon+0x36>
				buffer[ii] = 0;
 8006606:	4b34      	ldr	r3, [pc, #208]	@ (80066d8 <GetJustLatLon+0xec>)
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	001a      	movs	r2, r3
 800660e:	4b33      	ldr	r3, [pc, #204]	@ (80066dc <GetJustLatLon+0xf0>)
 8006610:	2100      	movs	r1, #0
 8006612:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8006614:	4b30      	ldr	r3, [pc, #192]	@ (80066d8 <GetJustLatLon+0xec>)
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	3301      	adds	r3, #1
 800661c:	b29a      	uxth	r2, r3
 800661e:	4b2e      	ldr	r3, [pc, #184]	@ (80066d8 <GetJustLatLon+0xec>)
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	4b2d      	ldr	r3, [pc, #180]	@ (80066d8 <GetJustLatLon+0xec>)
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b7f      	cmp	r3, #127	@ 0x7f
 800662a:	d9ec      	bls.n	8006606 <GetJustLatLon+0x1a>
			buffer[0] = '$';
 800662c:	4b2b      	ldr	r3, [pc, #172]	@ (80066dc <GetJustLatLon+0xf0>)
 800662e:	2224      	movs	r2, #36	@ 0x24
 8006630:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 8006636:	4a29      	ldr	r2, [pc, #164]	@ (80066dc <GetJustLatLon+0xf0>)
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	18d3      	adds	r3, r2, r3
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b0a      	cmp	r3, #10
 8006640:	d132      	bne.n	80066a8 <GetJustLatLon+0xbc>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 8006642:	4a26      	ldr	r2, [pc, #152]	@ (80066dc <GetJustLatLon+0xf0>)
 8006644:	4b26      	ldr	r3, [pc, #152]	@ (80066e0 <GetJustLatLon+0xf4>)
 8006646:	0011      	movs	r1, r2
 8006648:	0018      	movs	r0, r3
 800664a:	f000 fc2d 	bl	8006ea8 <minmea_parse_gga>
 800664e:	1e03      	subs	r3, r0, #0
 8006650:	d013      	beq.n	800667a <GetJustLatLon+0x8e>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006652:	4b24      	ldr	r3, [pc, #144]	@ (80066e4 <GetJustLatLon+0xf8>)
 8006654:	0018      	movs	r0, r3
 8006656:	f7fd ff77 	bl	8004548 <minmea_tocoord>
 800665a:	1c02      	adds	r2, r0, #0
 800665c:	2410      	movs	r4, #16
 800665e:	193b      	adds	r3, r7, r4
 8006660:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006662:	4b21      	ldr	r3, [pc, #132]	@ (80066e8 <GetJustLatLon+0xfc>)
 8006664:	0018      	movs	r0, r3
 8006666:	f7fd ff6f 	bl	8004548 <minmea_tocoord>
 800666a:	1c02      	adds	r2, r0, #0
 800666c:	193b      	adds	r3, r7, r4
 800666e:	605a      	str	r2, [r3, #4]
				return pos;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	193a      	adds	r2, r7, r4
 8006674:	ca03      	ldmia	r2!, {r0, r1}
 8006676:	c303      	stmia	r3!, {r0, r1}
 8006678:	e029      	b.n	80066ce <GetJustLatLon+0xe2>
				break;
			}

			for (ii = 0; ii <= 127; ii++)
 800667a:	4b17      	ldr	r3, [pc, #92]	@ (80066d8 <GetJustLatLon+0xec>)
 800667c:	2200      	movs	r2, #0
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	e00d      	b.n	800669e <GetJustLatLon+0xb2>
				buffer[ii] = 0;
 8006682:	4b15      	ldr	r3, [pc, #84]	@ (80066d8 <GetJustLatLon+0xec>)
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	001a      	movs	r2, r3
 800668a:	4b14      	ldr	r3, [pc, #80]	@ (80066dc <GetJustLatLon+0xf0>)
 800668c:	2100      	movs	r1, #0
 800668e:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8006690:	4b11      	ldr	r3, [pc, #68]	@ (80066d8 <GetJustLatLon+0xec>)
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	3301      	adds	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	4b0f      	ldr	r3, [pc, #60]	@ (80066d8 <GetJustLatLon+0xec>)
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	4b0e      	ldr	r3, [pc, #56]	@ (80066d8 <GetJustLatLon+0xec>)
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80066a6:	d9ec      	bls.n	8006682 <GetJustLatLon+0x96>
		}
		gpsI++;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	61fb      	str	r3, [r7, #28]
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 80066ae:	69fa      	ldr	r2, [r7, #28]
 80066b0:	4b0a      	ldr	r3, [pc, #40]	@ (80066dc <GetJustLatLon+0xf0>)
 80066b2:	18d1      	adds	r1, r2, r3
 80066b4:	23fa      	movs	r3, #250	@ 0xfa
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	480c      	ldr	r0, [pc, #48]	@ (80066ec <GetJustLatLon+0x100>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	f006 f84a 	bl	800c754 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 80066c0:	4a06      	ldr	r2, [pc, #24]	@ (80066dc <GetJustLatLon+0xf0>)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	18d3      	adds	r3, r2, r3
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b24      	cmp	r3, #36	@ 0x24
 80066ca:	d1b4      	bne.n	8006636 <GetJustLatLon+0x4a>
 80066cc:	e797      	b.n	80065fe <GetJustLatLon+0x12>

	}

}
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b009      	add	sp, #36	@ 0x24
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	20000d10 	.word	0x20000d10
 80066dc:	20000d64 	.word	0x20000d64
 80066e0:	20000d14 	.word	0x20000d14
 80066e4:	20000d24 	.word	0x20000d24
 80066e8:	20000d2c 	.word	0x20000d2c
 80066ec:	20001cf8 	.word	0x20001cf8

080066f0 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b08d      	sub	sp, #52	@ 0x34
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm;
	HAL_RTC_GetAlarm(hrtc, &sAlarm, RTC_ALARM_A, FORMAT_BIN);
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	005a      	lsls	r2, r3, #1
 80066fc:	2408      	movs	r4, #8
 80066fe:	1939      	adds	r1, r7, r4
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	2300      	movs	r3, #0
 8006704:	f004 f990 	bl	800aa28 <HAL_RTC_GetAlarm>
	if (sAlarm.AlarmTime.Seconds > 58) {
 8006708:	0022      	movs	r2, r4
 800670a:	18bb      	adds	r3, r7, r2
 800670c:	789b      	ldrb	r3, [r3, #2]
 800670e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006710:	d903      	bls.n	800671a <HAL_RTC_AlarmAEventCallback+0x2a>
		sAlarm.AlarmTime.Seconds = 0;
 8006712:	18bb      	adds	r3, r7, r2
 8006714:	2200      	movs	r2, #0
 8006716:	709a      	strb	r2, [r3, #2]
	} else {
		sAlarm.AlarmTime.Seconds = sAlarm.AlarmTime.Seconds + 1;
	}
	//while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
	// drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
}
 8006718:	e006      	b.n	8006728 <HAL_RTC_AlarmAEventCallback+0x38>
		sAlarm.AlarmTime.Seconds = sAlarm.AlarmTime.Seconds + 1;
 800671a:	2108      	movs	r1, #8
 800671c:	187b      	adds	r3, r7, r1
 800671e:	789b      	ldrb	r3, [r3, #2]
 8006720:	3301      	adds	r3, #1
 8006722:	b2da      	uxtb	r2, r3
 8006724:	187b      	adds	r3, r7, r1
 8006726:	709a      	strb	r2, [r3, #2]
}
 8006728:	46c0      	nop			@ (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b00d      	add	sp, #52	@ 0x34
 800672e:	bd90      	pop	{r4, r7, pc}

08006730 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006734:	b672      	cpsid	i
}
 8006736:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006738:	46c0      	nop			@ (mov r8, r8)
 800673a:	e7fd      	b.n	8006738 <Error_Handler+0x8>

0800673c <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	0002      	movs	r2, r0
 8006744:	1dfb      	adds	r3, r7, #7
 8006746:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8006748:	1dfb      	adds	r3, r7, #7
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <minmea_isfield+0x48>)
 8006750:	18d3      	adds	r3, r2, r3
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	001a      	movs	r2, r3
 8006756:	2397      	movs	r3, #151	@ 0x97
 8006758:	4013      	ands	r3, r2
 800675a:	d009      	beq.n	8006770 <minmea_isfield+0x34>
 800675c:	1dfb      	adds	r3, r7, #7
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b2c      	cmp	r3, #44	@ 0x2c
 8006762:	d005      	beq.n	8006770 <minmea_isfield+0x34>
 8006764:	1dfb      	adds	r3, r7, #7
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b2a      	cmp	r3, #42	@ 0x2a
 800676a:	d001      	beq.n	8006770 <minmea_isfield+0x34>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <minmea_isfield+0x36>
 8006770:	2300      	movs	r3, #0
 8006772:	1c1a      	adds	r2, r3, #0
 8006774:	2301      	movs	r3, #1
 8006776:	4013      	ands	r3, r2
 8006778:	b2db      	uxtb	r3, r3
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b002      	add	sp, #8
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			@ (mov r8, r8)
 8006784:	08011a38 	.word	0x08011a38

08006788 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8006788:	b40e      	push	{r1, r2, r3}
 800678a:	b5b0      	push	{r4, r5, r7, lr}
 800678c:	b0a7      	sub	sp, #156	@ 0x9c
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
    bool result = false;
 8006792:	2397      	movs	r3, #151	@ 0x97
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	2200      	movs	r2, #0
 8006798:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 800679a:	2396      	movs	r3, #150	@ 0x96
 800679c:	18fb      	adds	r3, r7, r3
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 80067a2:	23a8      	movs	r3, #168	@ 0xa8
 80067a4:	2208      	movs	r2, #8
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	19db      	adds	r3, r3, r7
 80067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2290      	movs	r2, #144	@ 0x90
 80067b0:	18ba      	adds	r2, r7, r2
 80067b2:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 80067b4:	e345      	b.n	8006e42 <minmea_scan+0x6ba>
        char type = *format++;
 80067b6:	21a4      	movs	r1, #164	@ 0xa4
 80067b8:	2008      	movs	r0, #8
 80067ba:	180b      	adds	r3, r1, r0
 80067bc:	19db      	adds	r3, r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	1809      	adds	r1, r1, r0
 80067c4:	19c9      	adds	r1, r1, r7
 80067c6:	600a      	str	r2, [r1, #0]
 80067c8:	2143      	movs	r1, #67	@ 0x43
 80067ca:	187a      	adds	r2, r7, r1
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b3b      	cmp	r3, #59	@ 0x3b
 80067d6:	d104      	bne.n	80067e2 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 80067d8:	2396      	movs	r3, #150	@ 0x96
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
            continue;
 80067e0:	e32f      	b.n	8006e42 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 80067e2:	2390      	movs	r3, #144	@ 0x90
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d108      	bne.n	80067fe <minmea_scan+0x76>
 80067ec:	2396      	movs	r3, #150	@ 0x96
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	4053      	eors	r3, r2
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d000      	beq.n	80067fe <minmea_scan+0x76>
 80067fc:	e32f      	b.n	8006e5e <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80067fe:	2343      	movs	r3, #67	@ 0x43
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	3b44      	subs	r3, #68	@ 0x44
 8006806:	2b30      	cmp	r3, #48	@ 0x30
 8006808:	d900      	bls.n	800680c <minmea_scan+0x84>
 800680a:	e32a      	b.n	8006e62 <minmea_scan+0x6da>
 800680c:	009a      	lsls	r2, r3, #2
 800680e:	4bbd      	ldr	r3, [pc, #756]	@ (8006b04 <minmea_scan+0x37c>)
 8006810:	18d3      	adds	r3, r2, r3
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8006816:	258f      	movs	r5, #143	@ 0x8f
 8006818:	197b      	adds	r3, r7, r5
 800681a:	2200      	movs	r2, #0
 800681c:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 800681e:	2490      	movs	r4, #144	@ 0x90
 8006820:	193b      	adds	r3, r7, r4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <minmea_scan+0xba>
 8006828:	193b      	adds	r3, r7, r4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	0018      	movs	r0, r3
 8006830:	f7ff ff84 	bl	800673c <minmea_isfield>
 8006834:	1e03      	subs	r3, r0, #0
 8006836:	d004      	beq.n	8006842 <minmea_scan+0xba>
                    value = *field;
 8006838:	197b      	adds	r3, r7, r5
 800683a:	193a      	adds	r2, r7, r4
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8006842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	228f      	movs	r2, #143	@ 0x8f
 800684c:	18ba      	adds	r2, r7, r2
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	701a      	strb	r2, [r3, #0]
            } break;
 8006852:	e2db      	b.n	8006e0c <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	2288      	movs	r2, #136	@ 0x88
 8006858:	18ba      	adds	r2, r7, r2
 800685a:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 800685c:	2490      	movs	r4, #144	@ 0x90
 800685e:	193b      	adds	r3, r7, r4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d022      	beq.n	80068ac <minmea_scan+0x124>
 8006866:	193b      	adds	r3, r7, r4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	0018      	movs	r0, r3
 800686e:	f7ff ff65 	bl	800673c <minmea_isfield>
 8006872:	1e03      	subs	r3, r0, #0
 8006874:	d01a      	beq.n	80068ac <minmea_scan+0x124>
                    switch (*field) {
 8006876:	193b      	adds	r3, r7, r4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	2b57      	cmp	r3, #87	@ 0x57
 800687e:	d00f      	beq.n	80068a0 <minmea_scan+0x118>
 8006880:	dd00      	ble.n	8006884 <minmea_scan+0xfc>
 8006882:	e2f0      	b.n	8006e66 <minmea_scan+0x6de>
 8006884:	2b53      	cmp	r3, #83	@ 0x53
 8006886:	d00b      	beq.n	80068a0 <minmea_scan+0x118>
 8006888:	dd00      	ble.n	800688c <minmea_scan+0x104>
 800688a:	e2ec      	b.n	8006e66 <minmea_scan+0x6de>
 800688c:	2b45      	cmp	r3, #69	@ 0x45
 800688e:	d002      	beq.n	8006896 <minmea_scan+0x10e>
 8006890:	2b4e      	cmp	r3, #78	@ 0x4e
 8006892:	d000      	beq.n	8006896 <minmea_scan+0x10e>
 8006894:	e2e7      	b.n	8006e66 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	2288      	movs	r2, #136	@ 0x88
 800689a:	18ba      	adds	r2, r7, r2
 800689c:	6013      	str	r3, [r2, #0]
                            break;
 800689e:	e005      	b.n	80068ac <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 80068a0:	2301      	movs	r3, #1
 80068a2:	425b      	negs	r3, r3
 80068a4:	2288      	movs	r2, #136	@ 0x88
 80068a6:	18ba      	adds	r2, r7, r2
 80068a8:	6013      	str	r3, [r2, #0]
                            break;
 80068aa:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	1d1a      	adds	r2, r3, #4
 80068b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2288      	movs	r2, #136	@ 0x88
 80068b6:	18ba      	adds	r2, r7, r2
 80068b8:	6812      	ldr	r2, [r2, #0]
 80068ba:	601a      	str	r2, [r3, #0]
            } break;
 80068bc:	e2a6      	b.n	8006e0c <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	2284      	movs	r2, #132	@ 0x84
 80068c2:	18ba      	adds	r2, r7, r2
 80068c4:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	425b      	negs	r3, r3
 80068ca:	2280      	movs	r2, #128	@ 0x80
 80068cc:	18ba      	adds	r2, r7, r2
 80068ce:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80068d4:	2390      	movs	r3, #144	@ 0x90
 80068d6:	18fb      	adds	r3, r7, r3
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d100      	bne.n	80068e0 <minmea_scan+0x158>
 80068de:	e088      	b.n	80069f2 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 80068e0:	e07d      	b.n	80069de <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 80068e2:	2390      	movs	r3, #144	@ 0x90
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80068ec:	d10d      	bne.n	800690a <minmea_scan+0x182>
 80068ee:	2284      	movs	r2, #132	@ 0x84
 80068f0:	18bb      	adds	r3, r7, r2
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d108      	bne.n	800690a <minmea_scan+0x182>
 80068f8:	2380      	movs	r3, #128	@ 0x80
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3301      	adds	r3, #1
 8006900:	d103      	bne.n	800690a <minmea_scan+0x182>
                            sign = 1;
 8006902:	2301      	movs	r3, #1
 8006904:	18ba      	adds	r2, r7, r2
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e063      	b.n	80069d2 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 800690a:	2390      	movs	r3, #144	@ 0x90
 800690c:	18fb      	adds	r3, r7, r3
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b2d      	cmp	r3, #45	@ 0x2d
 8006914:	d10e      	bne.n	8006934 <minmea_scan+0x1ac>
 8006916:	2284      	movs	r2, #132	@ 0x84
 8006918:	18bb      	adds	r3, r7, r2
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <minmea_scan+0x1ac>
 8006920:	2380      	movs	r3, #128	@ 0x80
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	d104      	bne.n	8006934 <minmea_scan+0x1ac>
                            sign = -1;
 800692a:	2301      	movs	r3, #1
 800692c:	425b      	negs	r3, r3
 800692e:	18ba      	adds	r2, r7, r2
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e04e      	b.n	80069d2 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8006934:	2190      	movs	r1, #144	@ 0x90
 8006936:	187b      	adds	r3, r7, r1
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	4b72      	ldr	r3, [pc, #456]	@ (8006b08 <minmea_scan+0x380>)
 8006940:	18d3      	adds	r3, r2, r3
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	001a      	movs	r2, r3
 8006946:	2304      	movs	r3, #4
 8006948:	4013      	ands	r3, r2
 800694a:	d035      	beq.n	80069b8 <minmea_scan+0x230>
                            int digit = *field - '0';
 800694c:	187b      	adds	r3, r7, r1
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	3b30      	subs	r3, #48	@ 0x30
 8006954:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8006956:	2280      	movs	r2, #128	@ 0x80
 8006958:	18bb      	adds	r3, r7, r2
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	d102      	bne.n	8006966 <minmea_scan+0x1de>
                                value = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	18ba      	adds	r2, r7, r2
 8006964:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8006966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006968:	4a68      	ldr	r2, [pc, #416]	@ (8006b0c <minmea_scan+0x384>)
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	210a      	movs	r1, #10
 800696e:	0018      	movs	r0, r3
 8006970:	f7f9 fc78 	bl	8000264 <__divsi3>
 8006974:	0003      	movs	r3, r0
 8006976:	001a      	movs	r2, r3
 8006978:	2380      	movs	r3, #128	@ 0x80
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4293      	cmp	r3, r2
 8006980:	dd04      	ble.n	800698c <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8006982:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d100      	bne.n	800698a <minmea_scan+0x202>
 8006988:	e26f      	b.n	8006e6a <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 800698a:	e032      	b.n	80069f2 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 800698c:	2180      	movs	r1, #128	@ 0x80
 800698e:	187b      	adds	r3, r7, r1
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	0013      	movs	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	189b      	adds	r3, r3, r2
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	001a      	movs	r2, r3
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	189b      	adds	r3, r3, r2
 80069a0:	187a      	adds	r2, r7, r1
 80069a2:	6013      	str	r3, [r2, #0]
                            if (scale)
 80069a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d013      	beq.n	80069d2 <minmea_scan+0x24a>
                                scale *= 10;
 80069aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80069ac:	0013      	movs	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	189b      	adds	r3, r3, r2
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069b6:	e00c      	b.n	80069d2 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 80069b8:	2390      	movs	r3, #144	@ 0x90
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80069c2:	d000      	beq.n	80069c6 <minmea_scan+0x23e>
 80069c4:	e253      	b.n	8006e6e <minmea_scan+0x6e6>
 80069c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d000      	beq.n	80069ce <minmea_scan+0x246>
 80069cc:	e24f      	b.n	8006e6e <minmea_scan+0x6e6>
                            scale = 1;
 80069ce:	2301      	movs	r3, #1
 80069d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80069d2:	2290      	movs	r2, #144	@ 0x90
 80069d4:	18bb      	adds	r3, r7, r2
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	18ba      	adds	r2, r7, r2
 80069dc:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 80069de:	2390      	movs	r3, #144	@ 0x90
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff fea8 	bl	800673c <minmea_isfield>
 80069ec:	1e03      	subs	r3, r0, #0
 80069ee:	d000      	beq.n	80069f2 <minmea_scan+0x26a>
 80069f0:	e777      	b.n	80068e2 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80069f2:	2384      	movs	r3, #132	@ 0x84
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <minmea_scan+0x27a>
 80069fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <minmea_scan+0x286>
 8006a02:	2380      	movs	r3, #128	@ 0x80
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	d100      	bne.n	8006a0e <minmea_scan+0x286>
 8006a0c:	e231      	b.n	8006e72 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 8006a0e:	2280      	movs	r2, #128	@ 0x80
 8006a10:	18bb      	adds	r3, r7, r2
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	d105      	bne.n	8006a24 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	18ba      	adds	r2, r7, r2
 8006a1c:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a22:	e004      	b.n	8006a2e <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8006a24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8006a2e:	2284      	movs	r2, #132	@ 0x84
 8006a30:	18bb      	adds	r3, r7, r2
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <minmea_scan+0x2c0>
                    value *= sign;
 8006a38:	2180      	movs	r1, #128	@ 0x80
 8006a3a:	187b      	adds	r3, r7, r1
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	18ba      	adds	r2, r7, r2
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	4353      	muls	r3, r2
 8006a44:	187a      	adds	r2, r7, r1
 8006a46:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8006a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4a:	1d1a      	adds	r2, r3, #4
 8006a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2280      	movs	r2, #128	@ 0x80
 8006a52:	18ba      	adds	r2, r7, r2
 8006a54:	6812      	ldr	r2, [r2, #0]
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a5a:	605a      	str	r2, [r3, #4]
            } break;
 8006a5c:	e1d6      	b.n	8006e0c <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8006a62:	2290      	movs	r2, #144	@ 0x90
 8006a64:	18bb      	adds	r3, r7, r2
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d011      	beq.n	8006a90 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	18f9      	adds	r1, r7, r3
 8006a70:	18bb      	adds	r3, r7, r2
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	220a      	movs	r2, #10
 8006a76:	0018      	movs	r0, r3
 8006a78:	f007 fc98 	bl	800e3ac <strtol>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7ff fe59 	bl	800673c <minmea_isfield>
 8006a8a:	1e03      	subs	r3, r0, #0
 8006a8c:	d000      	beq.n	8006a90 <minmea_scan+0x308>
 8006a8e:	e1f2      	b.n	8006e76 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	1d1a      	adds	r2, r3, #4
 8006a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006a9a:	601a      	str	r2, [r3, #0]
            } break;
 8006a9c:	e1b6      	b.n	8006e0c <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8006a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa0:	1d1a      	adds	r2, r3, #4
 8006aa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 8006aa8:	2390      	movs	r3, #144	@ 0x90
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d014      	beq.n	8006adc <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 8006ab2:	e00a      	b.n	8006aca <minmea_scan+0x342>
                        *buf++ = *field++;
 8006ab4:	2190      	movs	r1, #144	@ 0x90
 8006ab6:	187b      	adds	r3, r7, r1
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	1c53      	adds	r3, r2, #1
 8006abc:	1879      	adds	r1, r7, r1
 8006abe:	600b      	str	r3, [r1, #0]
 8006ac0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	6779      	str	r1, [r7, #116]	@ 0x74
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8006aca:	2390      	movs	r3, #144	@ 0x90
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f7ff fe32 	bl	800673c <minmea_isfield>
 8006ad8:	1e03      	subs	r3, r0, #0
 8006ada:	d1eb      	bne.n	8006ab4 <minmea_scan+0x32c>
                }

                *buf = '\0';
 8006adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
            } break;
 8006ae2:	e193      	b.n	8006e0c <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8006ae4:	2290      	movs	r2, #144	@ 0x90
 8006ae6:	18bb      	adds	r3, r7, r2
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d100      	bne.n	8006af0 <minmea_scan+0x368>
 8006aee:	e1c4      	b.n	8006e7a <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 8006af0:	18bb      	adds	r3, r7, r2
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b24      	cmp	r3, #36	@ 0x24
 8006af8:	d000      	beq.n	8006afc <minmea_scan+0x374>
 8006afa:	e1c0      	b.n	8006e7e <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 8006afc:	2300      	movs	r3, #0
 8006afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b00:	e01c      	b.n	8006b3c <minmea_scan+0x3b4>
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	08011778 	.word	0x08011778
 8006b08:	08011a38 	.word	0x08011a38
 8006b0c:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8006b10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b12:	3301      	adds	r3, #1
 8006b14:	001a      	movs	r2, r3
 8006b16:	2390      	movs	r3, #144	@ 0x90
 8006b18:	18fb      	adds	r3, r7, r3
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	189b      	adds	r3, r3, r2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7ff fe0b 	bl	800673c <minmea_isfield>
 8006b26:	0003      	movs	r3, r0
 8006b28:	001a      	movs	r2, r3
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4053      	eors	r3, r2
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d000      	beq.n	8006b36 <minmea_scan+0x3ae>
 8006b34:	e1a5      	b.n	8006e82 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 8006b36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b38:	3301      	adds	r3, #1
 8006b3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	dde6      	ble.n	8006b10 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8006b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8006b4c:	2390      	movs	r3, #144	@ 0x90
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1c59      	adds	r1, r3, #1
 8006b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b56:	2205      	movs	r2, #5
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f007 fea8 	bl	800e8ae <memcpy>
                buf[5] = '\0';
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b60:	3305      	adds	r3, #5
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
            } break;
 8006b66:	e151      	b.n	8006e0c <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8006b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6a:	1d1a      	adds	r2, r3, #4
 8006b6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8006b72:	2301      	movs	r3, #1
 8006b74:	425b      	negs	r3, r3
 8006b76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b78:	2301      	movs	r3, #1
 8006b7a:	425b      	negs	r3, r3
 8006b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b7e:	2301      	movs	r3, #1
 8006b80:	425b      	negs	r3, r3
 8006b82:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8006b84:	2290      	movs	r2, #144	@ 0x90
 8006b86:	18bb      	adds	r3, r7, r2
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d067      	beq.n	8006c5e <minmea_scan+0x4d6>
 8006b8e:	18bb      	adds	r3, r7, r2
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f7ff fdd1 	bl	800673c <minmea_isfield>
 8006b9a:	1e03      	subs	r3, r0, #0
 8006b9c:	d05f      	beq.n	8006c5e <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ba2:	e011      	b.n	8006bc8 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8006ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba6:	2290      	movs	r2, #144	@ 0x90
 8006ba8:	18ba      	adds	r2, r7, r2
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	18d3      	adds	r3, r2, r3
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	4bbb      	ldr	r3, [pc, #748]	@ (8006ea0 <minmea_scan+0x718>)
 8006bb4:	18d3      	adds	r3, r2, r3
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	001a      	movs	r2, r3
 8006bba:	2304      	movs	r3, #4
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d100      	bne.n	8006bc2 <minmea_scan+0x43a>
 8006bc0:	e161      	b.n	8006e86 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 8006bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	ddea      	ble.n	8006ba4 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8006bce:	2490      	movs	r4, #144	@ 0x90
 8006bd0:	193b      	adds	r3, r7, r4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	211c      	movs	r1, #28
 8006bd8:	187b      	adds	r3, r7, r1
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	193b      	adds	r3, r7, r4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	187b      	adds	r3, r7, r1
 8006be6:	705a      	strb	r2, [r3, #1]
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	2200      	movs	r2, #0
 8006bec:	709a      	strb	r2, [r3, #2]
 8006bee:	187b      	adds	r3, r7, r1
 8006bf0:	220a      	movs	r2, #10
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f007 fbd9 	bl	800e3ac <strtol>
 8006bfa:	0003      	movs	r3, r0
 8006bfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8006bfe:	193b      	adds	r3, r7, r4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3302      	adds	r3, #2
 8006c04:	781a      	ldrb	r2, [r3, #0]
 8006c06:	2118      	movs	r1, #24
 8006c08:	187b      	adds	r3, r7, r1
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	193b      	adds	r3, r7, r4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3303      	adds	r3, #3
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	187b      	adds	r3, r7, r1
 8006c16:	705a      	strb	r2, [r3, #1]
 8006c18:	187b      	adds	r3, r7, r1
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	709a      	strb	r2, [r3, #2]
 8006c1e:	187b      	adds	r3, r7, r1
 8006c20:	220a      	movs	r2, #10
 8006c22:	2100      	movs	r1, #0
 8006c24:	0018      	movs	r0, r3
 8006c26:	f007 fbc1 	bl	800e3ac <strtol>
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8006c2e:	193b      	adds	r3, r7, r4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3304      	adds	r3, #4
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	2114      	movs	r1, #20
 8006c38:	187b      	adds	r3, r7, r1
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	193b      	adds	r3, r7, r4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3305      	adds	r3, #5
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	187b      	adds	r3, r7, r1
 8006c46:	705a      	strb	r2, [r3, #1]
 8006c48:	187b      	adds	r3, r7, r1
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	709a      	strb	r2, [r3, #2]
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	220a      	movs	r2, #10
 8006c52:	2100      	movs	r1, #0
 8006c54:	0018      	movs	r0, r3
 8006c56:	f007 fba9 	bl	800e3ac <strtol>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c62:	601a      	str	r2, [r3, #0]
                date->month = m;
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c68:	605a      	str	r2, [r3, #4]
                date->year = y;
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c6e:	609a      	str	r2, [r3, #8]
            } break;
 8006c70:	e0cc      	b.n	8006e0c <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	1d1a      	adds	r2, r3, #4
 8006c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	425b      	negs	r3, r3
 8006c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c82:	2301      	movs	r3, #1
 8006c84:	425b      	negs	r3, r3
 8006c86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c88:	2301      	movs	r3, #1
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c8e:	2301      	movs	r3, #1
 8006c90:	425b      	negs	r3, r3
 8006c92:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8006c94:	2290      	movs	r2, #144	@ 0x90
 8006c96:	18bb      	adds	r3, r7, r2
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d100      	bne.n	8006ca0 <minmea_scan+0x518>
 8006c9e:	e0a7      	b.n	8006df0 <minmea_scan+0x668>
 8006ca0:	18bb      	adds	r3, r7, r2
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f7ff fd48 	bl	800673c <minmea_isfield>
 8006cac:	1e03      	subs	r3, r0, #0
 8006cae:	d100      	bne.n	8006cb2 <minmea_scan+0x52a>
 8006cb0:	e09e      	b.n	8006df0 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb6:	e011      	b.n	8006cdc <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cba:	2290      	movs	r2, #144	@ 0x90
 8006cbc:	18ba      	adds	r2, r7, r2
 8006cbe:	6812      	ldr	r2, [r2, #0]
 8006cc0:	18d3      	adds	r3, r2, r3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	4b76      	ldr	r3, [pc, #472]	@ (8006ea0 <minmea_scan+0x718>)
 8006cc8:	18d3      	adds	r3, r2, r3
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	001a      	movs	r2, r3
 8006cce:	2304      	movs	r3, #4
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <minmea_scan+0x54e>
 8006cd4:	e0d9      	b.n	8006e8a <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 8006cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd8:	3301      	adds	r3, #1
 8006cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	ddea      	ble.n	8006cb8 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8006ce2:	2490      	movs	r4, #144	@ 0x90
 8006ce4:	193b      	adds	r3, r7, r4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	2110      	movs	r1, #16
 8006cec:	187b      	adds	r3, r7, r1
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	193b      	adds	r3, r7, r4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	781a      	ldrb	r2, [r3, #0]
 8006cf8:	187b      	adds	r3, r7, r1
 8006cfa:	705a      	strb	r2, [r3, #1]
 8006cfc:	187b      	adds	r3, r7, r1
 8006cfe:	2200      	movs	r2, #0
 8006d00:	709a      	strb	r2, [r3, #2]
 8006d02:	187b      	adds	r3, r7, r1
 8006d04:	220a      	movs	r2, #10
 8006d06:	2100      	movs	r1, #0
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f007 fb4f 	bl	800e3ac <strtol>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8006d12:	193b      	adds	r3, r7, r4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3302      	adds	r3, #2
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	210c      	movs	r1, #12
 8006d1c:	187b      	adds	r3, r7, r1
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	193b      	adds	r3, r7, r4
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3303      	adds	r3, #3
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	187b      	adds	r3, r7, r1
 8006d2a:	705a      	strb	r2, [r3, #1]
 8006d2c:	187b      	adds	r3, r7, r1
 8006d2e:	2200      	movs	r2, #0
 8006d30:	709a      	strb	r2, [r3, #2]
 8006d32:	187b      	adds	r3, r7, r1
 8006d34:	220a      	movs	r2, #10
 8006d36:	2100      	movs	r1, #0
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f007 fb37 	bl	800e3ac <strtol>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8006d42:	193b      	adds	r3, r7, r4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3304      	adds	r3, #4
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	2108      	movs	r1, #8
 8006d4c:	187b      	adds	r3, r7, r1
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	193b      	adds	r3, r7, r4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3305      	adds	r3, #5
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	705a      	strb	r2, [r3, #1]
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	2200      	movs	r2, #0
 8006d60:	709a      	strb	r2, [r3, #2]
 8006d62:	187b      	adds	r3, r7, r1
 8006d64:	220a      	movs	r2, #10
 8006d66:	2100      	movs	r1, #0
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f007 fb1f 	bl	800e3ac <strtol>
 8006d6e:	0003      	movs	r3, r0
 8006d70:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8006d72:	193b      	adds	r3, r7, r4
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3306      	adds	r3, #6
 8006d78:	193a      	adds	r2, r7, r4
 8006d7a:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8006d7c:	193b      	adds	r3, r7, r4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	1939      	adds	r1, r7, r4
 8006d84:	600a      	str	r2, [r1, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d8a:	d12f      	bne.n	8006dec <minmea_scan+0x664>
                        int value = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8006d90:	4b44      	ldr	r3, [pc, #272]	@ (8006ea4 <minmea_scan+0x71c>)
 8006d92:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8006d94:	e016      	b.n	8006dc4 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 8006d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d98:	0013      	movs	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	189b      	adds	r3, r3, r2
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	0019      	movs	r1, r3
 8006da2:	2090      	movs	r0, #144	@ 0x90
 8006da4:	183b      	adds	r3, r7, r0
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	1838      	adds	r0, r7, r0
 8006dac:	6002      	str	r2, [r0, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	3b30      	subs	r3, #48	@ 0x30
 8006db2:	18cb      	adds	r3, r1, r3
 8006db4:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 8006db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db8:	210a      	movs	r1, #10
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f7f9 fa52 	bl	8000264 <__divsi3>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8006dc4:	2390      	movs	r3, #144	@ 0x90
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	4b34      	ldr	r3, [pc, #208]	@ (8006ea0 <minmea_scan+0x718>)
 8006dd0:	18d3      	adds	r3, r2, r3
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	2304      	movs	r3, #4
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d002      	beq.n	8006de2 <minmea_scan+0x65a>
 8006ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	dcd9      	bgt.n	8006d96 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8006de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006de4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006de6:	4353      	muls	r3, r2
 8006de8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dea:	e001      	b.n	8006df0 <minmea_scan+0x668>
                    } else {
                        u = 0;
 8006dec:	2300      	movs	r3, #0
 8006dee:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8006df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006df4:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dfa:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e00:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8006e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e06:	60da      	str	r2, [r3, #12]
            } break;
 8006e08:	e000      	b.n	8006e0c <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 8006e0a:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8006e0c:	e002      	b.n	8006e14 <minmea_scan+0x68c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3301      	adds	r3, #1
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7ff fc8f 	bl	800673c <minmea_isfield>
 8006e1e:	1e03      	subs	r3, r0, #0
 8006e20:	d1f5      	bne.n	8006e0e <minmea_scan+0x686>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b2c      	cmp	r3, #44	@ 0x2c
 8006e28:	d107      	bne.n	8006e3a <minmea_scan+0x6b2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2290      	movs	r2, #144	@ 0x90
 8006e34:	18ba      	adds	r2, r7, r2
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	e003      	b.n	8006e42 <minmea_scan+0x6ba>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2290      	movs	r2, #144	@ 0x90
 8006e3e:	18ba      	adds	r2, r7, r2
 8006e40:	6013      	str	r3, [r2, #0]
    while (*format) {
 8006e42:	23a4      	movs	r3, #164	@ 0xa4
 8006e44:	2208      	movs	r2, #8
 8006e46:	189b      	adds	r3, r3, r2
 8006e48:	19db      	adds	r3, r3, r7
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d000      	beq.n	8006e54 <minmea_scan+0x6cc>
 8006e52:	e4b0      	b.n	80067b6 <minmea_scan+0x2e>
    }

    result = true;
 8006e54:	2397      	movs	r3, #151	@ 0x97
 8006e56:	18fb      	adds	r3, r7, r3
 8006e58:	2201      	movs	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e016      	b.n	8006e8c <minmea_scan+0x704>
            goto parse_error;
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	e014      	b.n	8006e8c <minmea_scan+0x704>
                goto parse_error;
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	e012      	b.n	8006e8c <minmea_scan+0x704>
                            goto parse_error;
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	e010      	b.n	8006e8c <minmea_scan+0x704>
                                    goto parse_error;
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	e00e      	b.n	8006e8c <minmea_scan+0x704>
                            goto parse_error;
 8006e6e:	46c0      	nop			@ (mov r8, r8)
 8006e70:	e00c      	b.n	8006e8c <minmea_scan+0x704>
                    goto parse_error;
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	e00a      	b.n	8006e8c <minmea_scan+0x704>
                        goto parse_error;
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	e008      	b.n	8006e8c <minmea_scan+0x704>
                    goto parse_error;
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	e006      	b.n	8006e8c <minmea_scan+0x704>
                    goto parse_error;
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	e004      	b.n	8006e8c <minmea_scan+0x704>
                        goto parse_error;
 8006e82:	46c0      	nop			@ (mov r8, r8)
 8006e84:	e002      	b.n	8006e8c <minmea_scan+0x704>
                            goto parse_error;
 8006e86:	46c0      	nop			@ (mov r8, r8)
 8006e88:	e000      	b.n	8006e8c <minmea_scan+0x704>
                            goto parse_error;
 8006e8a:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8006e8c:	2397      	movs	r3, #151	@ 0x97
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	781b      	ldrb	r3, [r3, #0]
}
 8006e92:	0018      	movs	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	b027      	add	sp, #156	@ 0x9c
 8006e98:	bcb0      	pop	{r4, r5, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	b003      	add	sp, #12
 8006e9e:	4718      	bx	r3
 8006ea0:	08011a38 	.word	0x08011a38
 8006ea4:	000f4240 	.word	0x000f4240

08006ea8 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8006ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eaa:	46de      	mov	lr, fp
 8006eac:	4657      	mov	r7, sl
 8006eae:	464e      	mov	r6, r9
 8006eb0:	4645      	mov	r5, r8
 8006eb2:	b5e0      	push	{r5, r6, r7, lr}
 8006eb4:	b097      	sub	sp, #92	@ 0x5c
 8006eb6:	af0c      	add	r7, sp, #48	@ 0x30
 8006eb8:	6178      	str	r0, [r7, #20]
 8006eba:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	001a      	movs	r2, r3
 8006ec4:	3210      	adds	r2, #16
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	0019      	movs	r1, r3
 8006eca:	3118      	adds	r1, #24
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	001c      	movs	r4, r3
 8006ed0:	3420      	adds	r4, #32
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	001d      	movs	r5, r3
 8006ed6:	3524      	adds	r5, #36	@ 0x24
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	001e      	movs	r6, r3
 8006edc:	3628      	adds	r6, #40	@ 0x28
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2030      	movs	r0, #48	@ 0x30
 8006ee2:	4684      	mov	ip, r0
 8006ee4:	449c      	add	ip, r3
 8006ee6:	4663      	mov	r3, ip
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2038      	movs	r0, #56	@ 0x38
 8006eee:	4680      	mov	r8, r0
 8006ef0:	4498      	add	r8, r3
 8006ef2:	4643      	mov	r3, r8
 8006ef4:	603b      	str	r3, [r7, #0]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	203c      	movs	r0, #60	@ 0x3c
 8006efa:	4681      	mov	r9, r0
 8006efc:	4499      	add	r9, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2044      	movs	r0, #68	@ 0x44
 8006f02:	4682      	mov	sl, r0
 8006f04:	449a      	add	sl, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	3348      	adds	r3, #72	@ 0x48
 8006f0a:	2010      	movs	r0, #16
 8006f0c:	4683      	mov	fp, r0
 8006f0e:	2008      	movs	r0, #8
 8006f10:	4684      	mov	ip, r0
 8006f12:	2008      	movs	r0, #8
 8006f14:	4680      	mov	r8, r0
 8006f16:	44b8      	add	r8, r7
 8006f18:	44c4      	add	ip, r8
 8006f1a:	44e3      	add	fp, ip
 8006f1c:	4658      	mov	r0, fp
 8006f1e:	60b8      	str	r0, [r7, #8]
 8006f20:	482a      	ldr	r0, [pc, #168]	@ (8006fcc <minmea_parse_gga+0x124>)
 8006f22:	4683      	mov	fp, r0
 8006f24:	6938      	ldr	r0, [r7, #16]
 8006f26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f28:	4653      	mov	r3, sl
 8006f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	9308      	str	r3, [sp, #32]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	9606      	str	r6, [sp, #24]
 8006f3a:	9505      	str	r5, [sp, #20]
 8006f3c:	9404      	str	r4, [sp, #16]
 8006f3e:	2408      	movs	r4, #8
 8006f40:	2508      	movs	r5, #8
 8006f42:	1963      	adds	r3, r4, r5
 8006f44:	2408      	movs	r4, #8
 8006f46:	46a4      	mov	ip, r4
 8006f48:	44bc      	add	ip, r7
 8006f4a:	4463      	add	r3, ip
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	9102      	str	r1, [sp, #8]
 8006f50:	210c      	movs	r1, #12
 8006f52:	194b      	adds	r3, r1, r5
 8006f54:	2108      	movs	r1, #8
 8006f56:	468c      	mov	ip, r1
 8006f58:	44bc      	add	ip, r7
 8006f5a:	4463      	add	r3, ip
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	9200      	str	r2, [sp, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4659      	mov	r1, fp
 8006f66:	f7ff fc0f 	bl	8006788 <minmea_scan>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4053      	eors	r3, r2
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e01d      	b.n	8006fb8 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	2208      	movs	r2, #8
 8006f80:	189b      	adds	r3, r3, r2
 8006f82:	2208      	movs	r2, #8
 8006f84:	4694      	mov	ip, r2
 8006f86:	44bc      	add	ip, r7
 8006f88:	4463      	add	r3, ip
 8006f8a:	3302      	adds	r3, #2
 8006f8c:	4a10      	ldr	r2, [pc, #64]	@ (8006fd0 <minmea_parse_gga+0x128>)
 8006f8e:	0011      	movs	r1, r2
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7f9 f8b7 	bl	8000104 <strcmp>
 8006f96:	1e03      	subs	r3, r0, #0
 8006f98:	d001      	beq.n	8006f9e <minmea_parse_gga+0xf6>
        return false;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e00c      	b.n	8006fb8 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	435a      	muls	r2, r3
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	435a      	muls	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	619a      	str	r2, [r3, #24]

    return true;
 8006fb6:	2301      	movs	r3, #1
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b00b      	add	sp, #44	@ 0x2c
 8006fbe:	bcf0      	pop	{r4, r5, r6, r7}
 8006fc0:	46bb      	mov	fp, r7
 8006fc2:	46b2      	mov	sl, r6
 8006fc4:	46a9      	mov	r9, r5
 8006fc6:	46a0      	mov	r8, r4
 8006fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	080110c4 	.word	0x080110c4
 8006fd0:	080110a4 	.word	0x080110a4

08006fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fda:	4b11      	ldr	r3, [pc, #68]	@ (8007020 <HAL_MspInit+0x4c>)
 8006fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fde:	4b10      	ldr	r3, [pc, #64]	@ (8007020 <HAL_MspInit+0x4c>)
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8006fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8007020 <HAL_MspInit+0x4c>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	2201      	movs	r2, #1
 8006fec:	4013      	ands	r3, r2
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <HAL_MspInit+0x4c>)
 8006ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8007020 <HAL_MspInit+0x4c>)
 8006ff8:	2180      	movs	r1, #128	@ 0x80
 8006ffa:	0549      	lsls	r1, r1, #21
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <HAL_MspInit+0x4c>)
 8007002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007004:	2380      	movs	r3, #128	@ 0x80
 8007006:	055b      	lsls	r3, r3, #21
 8007008:	4013      	ands	r3, r2
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800700e:	23c0      	movs	r3, #192	@ 0xc0
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	0018      	movs	r0, r3
 8007014:	f001 f948 	bl	80082a8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007018:	46c0      	nop			@ (mov r8, r8)
 800701a:	46bd      	mov	sp, r7
 800701c:	b002      	add	sp, #8
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40021000 	.word	0x40021000

08007024 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007024:	b590      	push	{r4, r7, lr}
 8007026:	b09d      	sub	sp, #116	@ 0x74
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800702c:	235c      	movs	r3, #92	@ 0x5c
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	0018      	movs	r0, r3
 8007032:	2314      	movs	r3, #20
 8007034:	001a      	movs	r2, r3
 8007036:	2100      	movs	r1, #0
 8007038:	f007 fba4 	bl	800e784 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800703c:	2410      	movs	r4, #16
 800703e:	193b      	adds	r3, r7, r4
 8007040:	0018      	movs	r0, r3
 8007042:	234c      	movs	r3, #76	@ 0x4c
 8007044:	001a      	movs	r2, r3
 8007046:	2100      	movs	r1, #0
 8007048:	f007 fb9c 	bl	800e784 <memset>
  if(hi2c->Instance==I2C1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a23      	ldr	r2, [pc, #140]	@ (80070e0 <HAL_I2C_MspInit+0xbc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d13f      	bne.n	80070d6 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007056:	193b      	adds	r3, r7, r4
 8007058:	2220      	movs	r2, #32
 800705a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800705c:	193b      	adds	r3, r7, r4
 800705e:	2200      	movs	r2, #0
 8007060:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007062:	193b      	adds	r3, r7, r4
 8007064:	0018      	movs	r0, r3
 8007066:	f002 ff87 	bl	8009f78 <HAL_RCCEx_PeriphCLKConfig>
 800706a:	1e03      	subs	r3, r0, #0
 800706c:	d001      	beq.n	8007072 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800706e:	f7ff fb5f 	bl	8006730 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007072:	4b1c      	ldr	r3, [pc, #112]	@ (80070e4 <HAL_I2C_MspInit+0xc0>)
 8007074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007076:	4b1b      	ldr	r3, [pc, #108]	@ (80070e4 <HAL_I2C_MspInit+0xc0>)
 8007078:	2101      	movs	r1, #1
 800707a:	430a      	orrs	r2, r1
 800707c:	635a      	str	r2, [r3, #52]	@ 0x34
 800707e:	4b19      	ldr	r3, [pc, #100]	@ (80070e4 <HAL_I2C_MspInit+0xc0>)
 8007080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007082:	2201      	movs	r2, #1
 8007084:	4013      	ands	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800708a:	215c      	movs	r1, #92	@ 0x5c
 800708c:	187b      	adds	r3, r7, r1
 800708e:	22c0      	movs	r2, #192	@ 0xc0
 8007090:	00d2      	lsls	r2, r2, #3
 8007092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007094:	187b      	adds	r3, r7, r1
 8007096:	2212      	movs	r2, #18
 8007098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800709a:	187b      	adds	r3, r7, r1
 800709c:	2200      	movs	r2, #0
 800709e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070a0:	187b      	adds	r3, r7, r1
 80070a2:	2200      	movs	r2, #0
 80070a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80070a6:	187b      	adds	r3, r7, r1
 80070a8:	2206      	movs	r2, #6
 80070aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ac:	187a      	adds	r2, r7, r1
 80070ae:	23a0      	movs	r3, #160	@ 0xa0
 80070b0:	05db      	lsls	r3, r3, #23
 80070b2:	0011      	movs	r1, r2
 80070b4:	0018      	movs	r0, r3
 80070b6:	f001 f9eb 	bl	8008490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80070ba:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <HAL_I2C_MspInit+0xc0>)
 80070bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <HAL_I2C_MspInit+0xc0>)
 80070c0:	2180      	movs	r1, #128	@ 0x80
 80070c2:	0389      	lsls	r1, r1, #14
 80070c4:	430a      	orrs	r2, r1
 80070c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80070c8:	4b06      	ldr	r3, [pc, #24]	@ (80070e4 <HAL_I2C_MspInit+0xc0>)
 80070ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070cc:	2380      	movs	r3, #128	@ 0x80
 80070ce:	039b      	lsls	r3, r3, #14
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80070d6:	46c0      	nop			@ (mov r8, r8)
 80070d8:	46bd      	mov	sp, r7
 80070da:	b01d      	add	sp, #116	@ 0x74
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	40005400 	.word	0x40005400
 80070e4:	40021000 	.word	0x40021000

080070e8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b097      	sub	sp, #92	@ 0x5c
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070f0:	240c      	movs	r4, #12
 80070f2:	193b      	adds	r3, r7, r4
 80070f4:	0018      	movs	r0, r3
 80070f6:	234c      	movs	r3, #76	@ 0x4c
 80070f8:	001a      	movs	r2, r3
 80070fa:	2100      	movs	r1, #0
 80070fc:	f007 fb42 	bl	800e784 <memset>
  if(hrtc->Instance==RTC)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a19      	ldr	r2, [pc, #100]	@ (800716c <HAL_RTC_MspInit+0x84>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d12c      	bne.n	8007164 <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800710a:	193b      	adds	r3, r7, r4
 800710c:	2280      	movs	r2, #128	@ 0x80
 800710e:	0292      	lsls	r2, r2, #10
 8007110:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007112:	193b      	adds	r3, r7, r4
 8007114:	2280      	movs	r2, #128	@ 0x80
 8007116:	0092      	lsls	r2, r2, #2
 8007118:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800711a:	193b      	adds	r3, r7, r4
 800711c:	0018      	movs	r0, r3
 800711e:	f002 ff2b 	bl	8009f78 <HAL_RCCEx_PeriphCLKConfig>
 8007122:	1e03      	subs	r3, r0, #0
 8007124:	d001      	beq.n	800712a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007126:	f7ff fb03 	bl	8006730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800712a:	4b11      	ldr	r3, [pc, #68]	@ (8007170 <HAL_RTC_MspInit+0x88>)
 800712c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800712e:	4b10      	ldr	r3, [pc, #64]	@ (8007170 <HAL_RTC_MspInit+0x88>)
 8007130:	2180      	movs	r1, #128	@ 0x80
 8007132:	0209      	lsls	r1, r1, #8
 8007134:	430a      	orrs	r2, r1
 8007136:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007138:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <HAL_RTC_MspInit+0x88>)
 800713a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <HAL_RTC_MspInit+0x88>)
 800713e:	2180      	movs	r1, #128	@ 0x80
 8007140:	00c9      	lsls	r1, r1, #3
 8007142:	430a      	orrs	r2, r1
 8007144:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007146:	4b0a      	ldr	r3, [pc, #40]	@ (8007170 <HAL_RTC_MspInit+0x88>)
 8007148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800714a:	2380      	movs	r3, #128	@ 0x80
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4013      	ands	r3, r2
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	2002      	movs	r0, #2
 800715a:	f001 f967 	bl	800842c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800715e:	2002      	movs	r0, #2
 8007160:	f001 f979 	bl	8008456 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007164:	46c0      	nop			@ (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	b017      	add	sp, #92	@ 0x5c
 800716a:	bd90      	pop	{r4, r7, pc}
 800716c:	40002800 	.word	0x40002800
 8007170:	40021000 	.word	0x40021000

08007174 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007174:	b590      	push	{r4, r7, lr}
 8007176:	b08b      	sub	sp, #44	@ 0x2c
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800717c:	2414      	movs	r4, #20
 800717e:	193b      	adds	r3, r7, r4
 8007180:	0018      	movs	r0, r3
 8007182:	2314      	movs	r3, #20
 8007184:	001a      	movs	r2, r3
 8007186:	2100      	movs	r1, #0
 8007188:	f007 fafc 	bl	800e784 <memset>
  if(hspi->Instance==SPI1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a2c      	ldr	r2, [pc, #176]	@ (8007244 <HAL_SPI_MspInit+0xd0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d151      	bne.n	800723a <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007196:	4b2c      	ldr	r3, [pc, #176]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 8007198:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800719a:	4b2b      	ldr	r3, [pc, #172]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 800719c:	2180      	movs	r1, #128	@ 0x80
 800719e:	0149      	lsls	r1, r1, #5
 80071a0:	430a      	orrs	r2, r1
 80071a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80071a4:	4b28      	ldr	r3, [pc, #160]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 80071a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071a8:	2380      	movs	r3, #128	@ 0x80
 80071aa:	015b      	lsls	r3, r3, #5
 80071ac:	4013      	ands	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b2:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 80071b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071b6:	4b24      	ldr	r3, [pc, #144]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 80071b8:	2101      	movs	r1, #1
 80071ba:	430a      	orrs	r2, r1
 80071bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 80071c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c2:	2201      	movs	r2, #1
 80071c4:	4013      	ands	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 80071cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 80071d0:	2108      	movs	r1, #8
 80071d2:	430a      	orrs	r2, r1
 80071d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80071d6:	4b1c      	ldr	r3, [pc, #112]	@ (8007248 <HAL_SPI_MspInit+0xd4>)
 80071d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071da:	2208      	movs	r2, #8
 80071dc:	4013      	ands	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80071e2:	193b      	adds	r3, r7, r4
 80071e4:	2202      	movs	r2, #2
 80071e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e8:	193b      	adds	r3, r7, r4
 80071ea:	2202      	movs	r2, #2
 80071ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	2200      	movs	r2, #0
 80071f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f4:	193b      	adds	r3, r7, r4
 80071f6:	2200      	movs	r2, #0
 80071f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80071fa:	193b      	adds	r3, r7, r4
 80071fc:	2200      	movs	r2, #0
 80071fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007200:	193a      	adds	r2, r7, r4
 8007202:	23a0      	movs	r3, #160	@ 0xa0
 8007204:	05db      	lsls	r3, r3, #23
 8007206:	0011      	movs	r1, r2
 8007208:	0018      	movs	r0, r3
 800720a:	f001 f941 	bl	8008490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800720e:	0021      	movs	r1, r4
 8007210:	187b      	adds	r3, r7, r1
 8007212:	2260      	movs	r2, #96	@ 0x60
 8007214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007216:	187b      	adds	r3, r7, r1
 8007218:	2202      	movs	r2, #2
 800721a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721c:	187b      	adds	r3, r7, r1
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007222:	187b      	adds	r3, r7, r1
 8007224:	2200      	movs	r2, #0
 8007226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007228:	187b      	adds	r3, r7, r1
 800722a:	2201      	movs	r2, #1
 800722c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800722e:	187b      	adds	r3, r7, r1
 8007230:	4a06      	ldr	r2, [pc, #24]	@ (800724c <HAL_SPI_MspInit+0xd8>)
 8007232:	0019      	movs	r1, r3
 8007234:	0010      	movs	r0, r2
 8007236:	f001 f92b 	bl	8008490 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	b00b      	add	sp, #44	@ 0x2c
 8007240:	bd90      	pop	{r4, r7, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	40013000 	.word	0x40013000
 8007248:	40021000 	.word	0x40021000
 800724c:	50000c00 	.word	0x50000c00

08007250 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a0a      	ldr	r2, [pc, #40]	@ (8007288 <HAL_TIM_Base_MspInit+0x38>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d10d      	bne.n	800727e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007262:	4b0a      	ldr	r3, [pc, #40]	@ (800728c <HAL_TIM_Base_MspInit+0x3c>)
 8007264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007266:	4b09      	ldr	r3, [pc, #36]	@ (800728c <HAL_TIM_Base_MspInit+0x3c>)
 8007268:	2180      	movs	r1, #128	@ 0x80
 800726a:	02c9      	lsls	r1, r1, #11
 800726c:	430a      	orrs	r2, r1
 800726e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <HAL_TIM_Base_MspInit+0x3c>)
 8007272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007274:	2380      	movs	r3, #128	@ 0x80
 8007276:	02db      	lsls	r3, r3, #11
 8007278:	4013      	ands	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 800727e:	46c0      	nop			@ (mov r8, r8)
 8007280:	46bd      	mov	sp, r7
 8007282:	b004      	add	sp, #16
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	40014800 	.word	0x40014800
 800728c:	40021000 	.word	0x40021000

08007290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b089      	sub	sp, #36	@ 0x24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007298:	240c      	movs	r4, #12
 800729a:	193b      	adds	r3, r7, r4
 800729c:	0018      	movs	r0, r3
 800729e:	2314      	movs	r3, #20
 80072a0:	001a      	movs	r2, r3
 80072a2:	2100      	movs	r1, #0
 80072a4:	f007 fa6e 	bl	800e784 <memset>
  if(htim->Instance==TIM17)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a14      	ldr	r2, [pc, #80]	@ (8007300 <HAL_TIM_MspPostInit+0x70>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d122      	bne.n	80072f8 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072b2:	4b14      	ldr	r3, [pc, #80]	@ (8007304 <HAL_TIM_MspPostInit+0x74>)
 80072b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072b6:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <HAL_TIM_MspPostInit+0x74>)
 80072b8:	2101      	movs	r1, #1
 80072ba:	430a      	orrs	r2, r1
 80072bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80072be:	4b11      	ldr	r3, [pc, #68]	@ (8007304 <HAL_TIM_MspPostInit+0x74>)
 80072c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c2:	2201      	movs	r2, #1
 80072c4:	4013      	ands	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80072ca:	0021      	movs	r1, r4
 80072cc:	187b      	adds	r3, r7, r1
 80072ce:	2280      	movs	r2, #128	@ 0x80
 80072d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d2:	187b      	adds	r3, r7, r1
 80072d4:	2202      	movs	r2, #2
 80072d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d8:	187b      	adds	r3, r7, r1
 80072da:	2200      	movs	r2, #0
 80072dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072de:	187b      	adds	r3, r7, r1
 80072e0:	2200      	movs	r2, #0
 80072e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80072e4:	187b      	adds	r3, r7, r1
 80072e6:	2205      	movs	r2, #5
 80072e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072ea:	187a      	adds	r2, r7, r1
 80072ec:	23a0      	movs	r3, #160	@ 0xa0
 80072ee:	05db      	lsls	r3, r3, #23
 80072f0:	0011      	movs	r1, r2
 80072f2:	0018      	movs	r0, r3
 80072f4:	f001 f8cc 	bl	8008490 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80072f8:	46c0      	nop			@ (mov r8, r8)
 80072fa:	46bd      	mov	sp, r7
 80072fc:	b009      	add	sp, #36	@ 0x24
 80072fe:	bd90      	pop	{r4, r7, pc}
 8007300:	40014800 	.word	0x40014800
 8007304:	40021000 	.word	0x40021000

08007308 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007308:	b590      	push	{r4, r7, lr}
 800730a:	b09f      	sub	sp, #124	@ 0x7c
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007310:	2364      	movs	r3, #100	@ 0x64
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	0018      	movs	r0, r3
 8007316:	2314      	movs	r3, #20
 8007318:	001a      	movs	r2, r3
 800731a:	2100      	movs	r1, #0
 800731c:	f007 fa32 	bl	800e784 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007320:	2418      	movs	r4, #24
 8007322:	193b      	adds	r3, r7, r4
 8007324:	0018      	movs	r0, r3
 8007326:	234c      	movs	r3, #76	@ 0x4c
 8007328:	001a      	movs	r2, r3
 800732a:	2100      	movs	r1, #0
 800732c:	f007 fa2a 	bl	800e784 <memset>
  if(huart->Instance==USART1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a45      	ldr	r2, [pc, #276]	@ (800744c <HAL_UART_MspInit+0x144>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d13e      	bne.n	80073b8 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800733a:	193b      	adds	r3, r7, r4
 800733c:	2201      	movs	r2, #1
 800733e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007340:	193b      	adds	r3, r7, r4
 8007342:	2200      	movs	r2, #0
 8007344:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007346:	193b      	adds	r3, r7, r4
 8007348:	0018      	movs	r0, r3
 800734a:	f002 fe15 	bl	8009f78 <HAL_RCCEx_PeriphCLKConfig>
 800734e:	1e03      	subs	r3, r0, #0
 8007350:	d001      	beq.n	8007356 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007352:	f7ff f9ed 	bl	8006730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007356:	4b3e      	ldr	r3, [pc, #248]	@ (8007450 <HAL_UART_MspInit+0x148>)
 8007358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800735a:	4b3d      	ldr	r3, [pc, #244]	@ (8007450 <HAL_UART_MspInit+0x148>)
 800735c:	2180      	movs	r1, #128	@ 0x80
 800735e:	01c9      	lsls	r1, r1, #7
 8007360:	430a      	orrs	r2, r1
 8007362:	641a      	str	r2, [r3, #64]	@ 0x40
 8007364:	4b3a      	ldr	r3, [pc, #232]	@ (8007450 <HAL_UART_MspInit+0x148>)
 8007366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007368:	2380      	movs	r3, #128	@ 0x80
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	4013      	ands	r3, r2
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007372:	4b37      	ldr	r3, [pc, #220]	@ (8007450 <HAL_UART_MspInit+0x148>)
 8007374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007376:	4b36      	ldr	r3, [pc, #216]	@ (8007450 <HAL_UART_MspInit+0x148>)
 8007378:	2104      	movs	r1, #4
 800737a:	430a      	orrs	r2, r1
 800737c:	635a      	str	r2, [r3, #52]	@ 0x34
 800737e:	4b34      	ldr	r3, [pc, #208]	@ (8007450 <HAL_UART_MspInit+0x148>)
 8007380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007382:	2204      	movs	r2, #4
 8007384:	4013      	ands	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800738a:	2164      	movs	r1, #100	@ 0x64
 800738c:	187b      	adds	r3, r7, r1
 800738e:	2230      	movs	r2, #48	@ 0x30
 8007390:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007392:	187b      	adds	r3, r7, r1
 8007394:	2202      	movs	r2, #2
 8007396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	187b      	adds	r3, r7, r1
 800739a:	2200      	movs	r2, #0
 800739c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800739e:	187b      	adds	r3, r7, r1
 80073a0:	2200      	movs	r2, #0
 80073a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80073a4:	187b      	adds	r3, r7, r1
 80073a6:	2201      	movs	r2, #1
 80073a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073aa:	187b      	adds	r3, r7, r1
 80073ac:	4a29      	ldr	r2, [pc, #164]	@ (8007454 <HAL_UART_MspInit+0x14c>)
 80073ae:	0019      	movs	r1, r3
 80073b0:	0010      	movs	r0, r2
 80073b2:	f001 f86d 	bl	8008490 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80073b6:	e044      	b.n	8007442 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a26      	ldr	r2, [pc, #152]	@ (8007458 <HAL_UART_MspInit+0x150>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d13f      	bne.n	8007442 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80073c2:	2118      	movs	r1, #24
 80073c4:	187b      	adds	r3, r7, r1
 80073c6:	2202      	movs	r2, #2
 80073c8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80073ca:	187b      	adds	r3, r7, r1
 80073cc:	2200      	movs	r2, #0
 80073ce:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80073d0:	187b      	adds	r3, r7, r1
 80073d2:	0018      	movs	r0, r3
 80073d4:	f002 fdd0 	bl	8009f78 <HAL_RCCEx_PeriphCLKConfig>
 80073d8:	1e03      	subs	r3, r0, #0
 80073da:	d001      	beq.n	80073e0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80073dc:	f7ff f9a8 	bl	8006730 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80073e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007450 <HAL_UART_MspInit+0x148>)
 80073e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007450 <HAL_UART_MspInit+0x148>)
 80073e6:	2180      	movs	r1, #128	@ 0x80
 80073e8:	0289      	lsls	r1, r1, #10
 80073ea:	430a      	orrs	r2, r1
 80073ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80073ee:	4b18      	ldr	r3, [pc, #96]	@ (8007450 <HAL_UART_MspInit+0x148>)
 80073f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073f2:	2380      	movs	r3, #128	@ 0x80
 80073f4:	029b      	lsls	r3, r3, #10
 80073f6:	4013      	ands	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073fc:	4b14      	ldr	r3, [pc, #80]	@ (8007450 <HAL_UART_MspInit+0x148>)
 80073fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007400:	4b13      	ldr	r3, [pc, #76]	@ (8007450 <HAL_UART_MspInit+0x148>)
 8007402:	2101      	movs	r1, #1
 8007404:	430a      	orrs	r2, r1
 8007406:	635a      	str	r2, [r3, #52]	@ 0x34
 8007408:	4b11      	ldr	r3, [pc, #68]	@ (8007450 <HAL_UART_MspInit+0x148>)
 800740a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740c:	2201      	movs	r2, #1
 800740e:	4013      	ands	r3, r2
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007414:	2164      	movs	r1, #100	@ 0x64
 8007416:	187b      	adds	r3, r7, r1
 8007418:	220c      	movs	r2, #12
 800741a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800741c:	187b      	adds	r3, r7, r1
 800741e:	2202      	movs	r2, #2
 8007420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007422:	187b      	adds	r3, r7, r1
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007428:	187b      	adds	r3, r7, r1
 800742a:	2200      	movs	r2, #0
 800742c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800742e:	187b      	adds	r3, r7, r1
 8007430:	2201      	movs	r2, #1
 8007432:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007434:	187a      	adds	r2, r7, r1
 8007436:	23a0      	movs	r3, #160	@ 0xa0
 8007438:	05db      	lsls	r3, r3, #23
 800743a:	0011      	movs	r1, r2
 800743c:	0018      	movs	r0, r3
 800743e:	f001 f827 	bl	8008490 <HAL_GPIO_Init>
}
 8007442:	46c0      	nop			@ (mov r8, r8)
 8007444:	46bd      	mov	sp, r7
 8007446:	b01f      	add	sp, #124	@ 0x7c
 8007448:	bd90      	pop	{r4, r7, pc}
 800744a:	46c0      	nop			@ (mov r8, r8)
 800744c:	40013800 	.word	0x40013800
 8007450:	40021000 	.word	0x40021000
 8007454:	50000800 	.word	0x50000800
 8007458:	40004400 	.word	0x40004400

0800745c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007460:	46c0      	nop			@ (mov r8, r8)
 8007462:	e7fd      	b.n	8007460 <NMI_Handler+0x4>

08007464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007468:	46c0      	nop			@ (mov r8, r8)
 800746a:	e7fd      	b.n	8007468 <HardFault_Handler+0x4>

0800746c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007470:	46c0      	nop			@ (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800747a:	46c0      	nop			@ (mov r8, r8)
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007484:	f000 fed0 	bl	8008228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007488:	46c0      	nop			@ (mov r8, r8)
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007494:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <RTC_TAMP_IRQHandler+0x1c>)
 8007496:	0018      	movs	r0, r3
 8007498:	f003 fb8c 	bl	800abb4 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800749c:	4b03      	ldr	r3, [pc, #12]	@ (80074ac <RTC_TAMP_IRQHandler+0x1c>)
 800749e:	0018      	movs	r0, r3
 80074a0:	f003 fd52 	bl	800af48 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80074a4:	46c0      	nop			@ (mov r8, r8)
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	46c0      	nop			@ (mov r8, r8)
 80074ac:	20001c1c 	.word	0x20001c1c

080074b0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80074b4:	2002      	movs	r0, #2
 80074b6:	f001 f991 	bl	80087dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80074ba:	46c0      	nop			@ (mov r8, r8)
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80074c4:	2004      	movs	r0, #4
 80074c6:	f001 f989 	bl	80087dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80074ca:	46c0      	nop			@ (mov r8, r8)
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	0018      	movs	r0, r3
 80074da:	f001 f97f 	bl	80087dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80074de:	46c0      	nop			@ (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  return 1;
 80074e8:	2301      	movs	r3, #1
}
 80074ea:	0018      	movs	r0, r3
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <_kill>:

int _kill(int pid, int sig)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80074fa:	f007 f9ab 	bl	800e854 <__errno>
 80074fe:	0003      	movs	r3, r0
 8007500:	2216      	movs	r2, #22
 8007502:	601a      	str	r2, [r3, #0]
  return -1;
 8007504:	2301      	movs	r3, #1
 8007506:	425b      	negs	r3, r3
}
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b002      	add	sp, #8
 800750e:	bd80      	pop	{r7, pc}

08007510 <_exit>:

void _exit (int status)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007518:	2301      	movs	r3, #1
 800751a:	425a      	negs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	0011      	movs	r1, r2
 8007520:	0018      	movs	r0, r3
 8007522:	f7ff ffe5 	bl	80074f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007526:	46c0      	nop			@ (mov r8, r8)
 8007528:	e7fd      	b.n	8007526 <_exit+0x16>

0800752a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e00a      	b.n	8007552 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800753c:	e000      	b.n	8007540 <_read+0x16>
 800753e:	bf00      	nop
 8007540:	0001      	movs	r1, r0
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	60ba      	str	r2, [r7, #8]
 8007548:	b2ca      	uxtb	r2, r1
 800754a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	3301      	adds	r3, #1
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	dbf0      	blt.n	800753c <_read+0x12>
  }

  return len;
 800755a:	687b      	ldr	r3, [r7, #4]
}
 800755c:	0018      	movs	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	b006      	add	sp, #24
 8007562:	bd80      	pop	{r7, pc}

08007564 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	e009      	b.n	800758a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	60ba      	str	r2, [r7, #8]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	0018      	movs	r0, r3
 8007580:	e000      	b.n	8007584 <_write+0x20>
 8007582:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	3301      	adds	r3, #1
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	429a      	cmp	r2, r3
 8007590:	dbf1      	blt.n	8007576 <_write+0x12>
  }
  return len;
 8007592:	687b      	ldr	r3, [r7, #4]
}
 8007594:	0018      	movs	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	b006      	add	sp, #24
 800759a:	bd80      	pop	{r7, pc}

0800759c <_close>:

int _close(int file)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80075a4:	2301      	movs	r3, #1
 80075a6:	425b      	negs	r3, r3
}
 80075a8:	0018      	movs	r0, r3
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b002      	add	sp, #8
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2280      	movs	r2, #128	@ 0x80
 80075be:	0192      	lsls	r2, r2, #6
 80075c0:	605a      	str	r2, [r3, #4]
  return 0;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	0018      	movs	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	b002      	add	sp, #8
 80075ca:	bd80      	pop	{r7, pc}

080075cc <_isatty>:

int _isatty(int file)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80075d4:	2301      	movs	r3, #1
}
 80075d6:	0018      	movs	r0, r3
 80075d8:	46bd      	mov	sp, r7
 80075da:	b002      	add	sp, #8
 80075dc:	bd80      	pop	{r7, pc}

080075de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	0018      	movs	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b004      	add	sp, #16
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <_sbrk+0x5c>)
 80075fe:	4b15      	ldr	r3, [pc, #84]	@ (8007654 <_sbrk+0x60>)
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007608:	4b13      	ldr	r3, [pc, #76]	@ (8007658 <_sbrk+0x64>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007610:	4b11      	ldr	r3, [pc, #68]	@ (8007658 <_sbrk+0x64>)
 8007612:	4a12      	ldr	r2, [pc, #72]	@ (800765c <_sbrk+0x68>)
 8007614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007616:	4b10      	ldr	r3, [pc, #64]	@ (8007658 <_sbrk+0x64>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	18d3      	adds	r3, r2, r3
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	429a      	cmp	r2, r3
 8007622:	d207      	bcs.n	8007634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007624:	f007 f916 	bl	800e854 <__errno>
 8007628:	0003      	movs	r3, r0
 800762a:	220c      	movs	r2, #12
 800762c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800762e:	2301      	movs	r3, #1
 8007630:	425b      	negs	r3, r3
 8007632:	e009      	b.n	8007648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007634:	4b08      	ldr	r3, [pc, #32]	@ (8007658 <_sbrk+0x64>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800763a:	4b07      	ldr	r3, [pc, #28]	@ (8007658 <_sbrk+0x64>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	18d2      	adds	r2, r2, r3
 8007642:	4b05      	ldr	r3, [pc, #20]	@ (8007658 <_sbrk+0x64>)
 8007644:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007646:	68fb      	ldr	r3, [r7, #12]
}
 8007648:	0018      	movs	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	b006      	add	sp, #24
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20024000 	.word	0x20024000
 8007654:	00000400 	.word	0x00000400
 8007658:	20001e20 	.word	0x20001e20
 800765c:	20001f78 	.word	0x20001f78

08007660 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007664:	46c0      	nop			@ (mov r8, r8)
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
    return property->u.value;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
}
 8007676:	0018      	movs	r0, r3
 8007678:	46bd      	mov	sp, r7
 800767a:	b002      	add	sp, #8
 800767c:	bd80      	pop	{r7, pc}

0800767e <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
    return json->type;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7c1b      	ldrb	r3, [r3, #16]
}
 800768a:	0018      	movs	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	b002      	add	sp, #8
 8007690:	bd80      	pop	{r7, pc}

08007692 <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	e011      	b.n	80076c8 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <json_getProperty+0x30>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	0011      	movs	r1, r2
 80076b4:	0018      	movs	r0, r3
 80076b6:	f7f8 fd25 	bl	8000104 <strcmp>
 80076ba:	1e03      	subs	r3, r0, #0
 80076bc:	d101      	bne.n	80076c2 <json_getProperty+0x30>
            return sibling;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	e006      	b.n	80076d0 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1ea      	bne.n	80076a4 <json_getProperty+0x12>
    return 0;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b004      	add	sp, #16
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 80076d8:	b5b0      	push	{r4, r5, r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	0011      	movs	r1, r2
 80076e8:	0018      	movs	r0, r3
 80076ea:	f7ff ffd2 	bl	8007692 <json_getProperty>
 80076ee:	0003      	movs	r3, r0
 80076f0:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <json_getPropertyValue+0x24>
 80076f8:	2300      	movs	r3, #0
 80076fa:	e012      	b.n	8007722 <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 80076fc:	250b      	movs	r5, #11
 80076fe:	197c      	adds	r4, r7, r5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	0018      	movs	r0, r3
 8007704:	f7ff ffbb 	bl	800767e <json_getType>
 8007708:	0003      	movs	r3, r0
 800770a:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 800770c:	197b      	adds	r3, r7, r5
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d801      	bhi.n	8007718 <json_getPropertyValue+0x40>
 8007714:	2300      	movs	r3, #0
 8007716:	e004      	b.n	8007722 <json_getPropertyValue+0x4a>
	return json_getValue( field );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0018      	movs	r0, r3
 800771c:	f7ff ffa5 	bl	800766a <json_getValue>
 8007720:	0003      	movs	r3, r0
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b004      	add	sp, #16
 8007728:	bdb0      	pop	{r4, r5, r7, pc}

0800772a <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	0018      	movs	r0, r3
 8007738:	f000 fc66 	bl	8008008 <goBlank>
 800773c:	0003      	movs	r3, r0
 800773e:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <json_createWithPool+0x2c>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b7b      	cmp	r3, #123	@ 0x7b
 800774c:	d005      	beq.n	800775a <json_createWithPool+0x30>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b5b      	cmp	r3, #91	@ 0x5b
 8007754:	d001      	beq.n	800775a <json_createWithPool+0x30>
 8007756:	2300      	movs	r3, #0
 8007758:	e01d      	b.n	8007796 <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	0010      	movs	r0, r2
 8007762:	4798      	blx	r3
 8007764:	0003      	movs	r3, r0
 8007766:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	0018      	movs	r0, r3
 8007782:	f000 faeb 	bl	8007d5c <objValue>
 8007786:	0003      	movs	r3, r0
 8007788:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <json_createWithPool+0x6a>
 8007790:	2300      	movs	r3, #0
 8007792:	e000      	b.n	8007796 <json_createWithPool+0x6c>
    return obj;
 8007794:	68bb      	ldr	r3, [r7, #8]
}
 8007796:	0018      	movs	r0, r3
 8007798:	46bd      	mov	sp, r7
 800779a:	b004      	add	sp, #16
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08a      	sub	sp, #40	@ 0x28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 80077ac:	2114      	movs	r1, #20
 80077ae:	187b      	adds	r3, r7, r1
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 80077b4:	187b      	adds	r3, r7, r1
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 80077ba:	187b      	adds	r3, r7, r1
 80077bc:	4a08      	ldr	r2, [pc, #32]	@ (80077e0 <json_create+0x40>)
 80077be:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 80077c0:	187b      	adds	r3, r7, r1
 80077c2:	4a08      	ldr	r2, [pc, #32]	@ (80077e4 <json_create+0x44>)
 80077c4:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 80077c6:	187b      	adds	r3, r7, r1
 80077c8:	330c      	adds	r3, #12
 80077ca:	001a      	movs	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	0011      	movs	r1, r2
 80077d0:	0018      	movs	r0, r3
 80077d2:	f7ff ffaa 	bl	800772a <json_createWithPool>
 80077d6:	0003      	movs	r3, r0
}
 80077d8:	0018      	movs	r0, r3
 80077da:	46bd      	mov	sp, r7
 80077dc:	b00a      	add	sp, #40	@ 0x28
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	08007f31 	.word	0x08007f31
 80077e4:	08007f51 	.word	0x08007f51

080077e8 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	0002      	movs	r2, r0
 80077f0:	1dfb      	adds	r3, r7, #7
 80077f2:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e011      	b.n	800781e <getEscape+0x36>
        if ( pair[i].ch == ch )
 80077fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007830 <getEscape+0x48>)
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	0052      	lsls	r2, r2, #1
 8007800:	5cd3      	ldrb	r3, [r2, r3]
 8007802:	1dfa      	adds	r2, r7, #7
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d106      	bne.n	8007818 <getEscape+0x30>
            return pair[i].code;
 800780a:	4a09      	ldr	r2, [pc, #36]	@ (8007830 <getEscape+0x48>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	18d3      	adds	r3, r2, r3
 8007812:	3301      	adds	r3, #1
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	e006      	b.n	8007826 <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b07      	cmp	r3, #7
 8007822:	d9ea      	bls.n	80077fa <getEscape+0x12>
    return '\0';
 8007824:	2300      	movs	r3, #0
}
 8007826:	0018      	movs	r0, r3
 8007828:	46bd      	mov	sp, r7
 800782a:	b004      	add	sp, #16
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			@ (mov r8, r8)
 8007830:	08011920 	.word	0x08011920

08007834 <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e010      	b.n	8007864 <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	18d3      	adds	r3, r2, r3
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	4b09      	ldr	r3, [pc, #36]	@ (8007874 <getCharFromUnicode+0x40>)
 800784e:	18d3      	adds	r3, r2, r3
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	001a      	movs	r2, r3
 8007854:	2344      	movs	r3, #68	@ 0x44
 8007856:	4013      	ands	r3, r2
 8007858:	d101      	bne.n	800785e <getCharFromUnicode+0x2a>
            return '\0';
 800785a:	2300      	movs	r3, #0
 800785c:	e006      	b.n	800786c <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d9eb      	bls.n	8007842 <getCharFromUnicode+0xe>
    return '?';
 800786a:	233f      	movs	r3, #63	@ 0x3f
}
 800786c:	0018      	movs	r0, r3
 800786e:	46bd      	mov	sp, r7
 8007870:	b004      	add	sp, #16
 8007872:	bd80      	pop	{r7, pc}
 8007874:	08011a38 	.word	0x08011a38

08007878 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 8007888:	e04f      	b.n	800792a <parseString+0xb2>
        if ( *head == '\"' ) {
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b22      	cmp	r3, #34	@ 0x22
 8007890:	d107      	bne.n	80078a2 <parseString+0x2a>
            *tail = '\0';
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	3301      	adds	r3, #1
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	e048      	b.n	8007934 <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b5c      	cmp	r3, #92	@ 0x5c
 80078a8:	d135      	bne.n	8007916 <parseString+0x9e>
            if ( *++head == 'u' ) {
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	3301      	adds	r3, #1
 80078ae:	617b      	str	r3, [r7, #20]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b75      	cmp	r3, #117	@ 0x75
 80078b6:	d119      	bne.n	80078ec <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	3301      	adds	r3, #1
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	250e      	movs	r5, #14
 80078c0:	197c      	adds	r4, r7, r5
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7ff ffb5 	bl	8007834 <getCharFromUnicode>
 80078ca:	0003      	movs	r3, r0
 80078cc:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 80078ce:	197b      	adds	r3, r7, r5
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <parseString+0x62>
 80078d6:	2300      	movs	r3, #0
 80078d8:	e02c      	b.n	8007934 <parseString+0xbc>
                *tail = ch;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	220e      	movs	r2, #14
 80078de:	18ba      	adds	r2, r7, r2
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	701a      	strb	r2, [r3, #0]
                head += 3;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	3303      	adds	r3, #3
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e018      	b.n	800791e <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	250f      	movs	r5, #15
 80078f2:	197c      	adds	r4, r7, r5
 80078f4:	0018      	movs	r0, r3
 80078f6:	f7ff ff77 	bl	80077e8 <getEscape>
 80078fa:	0003      	movs	r3, r0
 80078fc:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 80078fe:	197b      	adds	r3, r7, r5
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <parseString+0x92>
 8007906:	2300      	movs	r3, #0
 8007908:	e014      	b.n	8007934 <parseString+0xbc>
                *tail = esc;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	220f      	movs	r2, #15
 800790e:	18ba      	adds	r2, r7, r2
 8007910:	7812      	ldrb	r2, [r2, #0]
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e003      	b.n	800791e <parseString+0xa6>
            }
        }
        else *tail = *head;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	3301      	adds	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	3301      	adds	r3, #1
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1ab      	bne.n	800788a <parseString+0x12>
    }
    return 0;
 8007932:	2300      	movs	r3, #0
}
 8007934:	0018      	movs	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	b006      	add	sp, #24
 800793a:	bdb0      	pop	{r4, r5, r7, pc}

0800793c <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3301      	adds	r3, #1
 800794a:	607b      	str	r3, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	0018      	movs	r0, r3
 8007956:	f7ff ff8f 	bl	8007878 <parseString>
 800795a:	0003      	movs	r3, r0
 800795c:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <propertyName+0x2c>
 8007964:	2300      	movs	r3, #0
 8007966:	e017      	b.n	8007998 <propertyName+0x5c>
    ptr = goBlank( ptr );
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	0018      	movs	r0, r3
 800796c:	f000 fb4c 	bl	8008008 <goBlank>
 8007970:	0003      	movs	r3, r0
 8007972:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <propertyName+0x42>
 800797a:	2300      	movs	r3, #0
 800797c:	e00c      	b.n	8007998 <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b3a      	cmp	r3, #58	@ 0x3a
 8007988:	d001      	beq.n	800798e <propertyName+0x52>
 800798a:	2300      	movs	r3, #0
 800798c:	e004      	b.n	8007998 <propertyName+0x5c>
    return goBlank( ptr );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	0018      	movs	r0, r3
 8007992:	f000 fb39 	bl	8008008 <goBlank>
 8007996:	0003      	movs	r3, r0
}
 8007998:	0018      	movs	r0, r3
 800799a:	46bd      	mov	sp, r7
 800799c:	b002      	add	sp, #8
 800799e:	bd80      	pop	{r7, pc}

080079a0 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3301      	adds	r3, #1
 80079b8:	607b      	str	r3, [r7, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	0018      	movs	r0, r3
 80079be:	f7ff ff5b 	bl	8007878 <parseString>
 80079c2:	0003      	movs	r3, r0
 80079c4:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <textValue+0x30>
 80079cc:	2300      	movs	r3, #0
 80079ce:	e003      	b.n	80079d8 <textValue+0x38>
    property->type = JSON_TEXT;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2202      	movs	r2, #2
 80079d4:	741a      	strb	r2, [r3, #16]
    return ptr;
 80079d6:	687b      	ldr	r3, [r7, #4]
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b002      	add	sp, #8
 80079de:	bd80      	pop	{r7, pc}

080079e0 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
    while( *str )
 80079ea:	e00b      	b.n	8007a04 <checkStr+0x24>
        if ( *ptr++ != *str++ )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d001      	beq.n	8007a04 <checkStr+0x24>
            return 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e004      	b.n	8007a0e <checkStr+0x2e>
    while( *str )
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1ef      	bne.n	80079ec <checkStr+0xc>
    return ptr;
 8007a0c:	687b      	ldr	r3, [r7, #4]
}
 8007a0e:	0018      	movs	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b002      	add	sp, #8
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	001a      	movs	r2, r3
 8007a24:	1cfb      	adds	r3, r7, #3
 8007a26:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	0011      	movs	r1, r2
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f7ff ffd6 	bl	80079e0 <checkStr>
 8007a34:	0003      	movs	r3, r0
 8007a36:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <primitiveValue+0x40>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	0018      	movs	r0, r3
 8007a44:	f000 fb30 	bl	80080a8 <isEndOfPrimitive>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4053      	eors	r3, r2
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <primitiveValue+0x44>
 8007a56:	2300      	movs	r3, #0
 8007a58:	e00a      	b.n	8007a70 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f000 fb05 	bl	800806c <setToNull>
 8007a62:	0003      	movs	r3, r0
 8007a64:	60fb      	str	r3, [r7, #12]
    property->type = type;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	1cfa      	adds	r2, r7, #3
 8007a6a:	7812      	ldrb	r2, [r2, #0]
 8007a6c:	741a      	strb	r2, [r3, #16]
    return ptr;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b004      	add	sp, #16
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 8007a82:	4a05      	ldr	r2, [pc, #20]	@ (8007a98 <trueValue+0x20>)
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	2303      	movs	r3, #3
 8007a8a:	f7ff ffc4 	bl	8007a16 <primitiveValue>
 8007a8e:	0003      	movs	r3, r0
}
 8007a90:	0018      	movs	r0, r3
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b002      	add	sp, #8
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	0801110c 	.word	0x0801110c

08007a9c <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 8007aa6:	4a05      	ldr	r2, [pc, #20]	@ (8007abc <falseValue+0x20>)
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	2303      	movs	r3, #3
 8007aae:	f7ff ffb2 	bl	8007a16 <primitiveValue>
 8007ab2:	0003      	movs	r3, r0
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b002      	add	sp, #8
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	08011114 	.word	0x08011114

08007ac0 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 8007aca:	4a05      	ldr	r2, [pc, #20]	@ (8007ae0 <nullValue+0x20>)
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	2306      	movs	r3, #6
 8007ad2:	f7ff ffa0 	bl	8007a16 <primitiveValue>
 8007ad6:	0003      	movs	r3, r0
}
 8007ad8:	0018      	movs	r0, r3
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b002      	add	sp, #8
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	0801111c 	.word	0x0801111c

08007ae4 <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b2d      	cmp	r3, #45	@ 0x2d
 8007af2:	d003      	beq.n	8007afc <expValue+0x18>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b2b      	cmp	r3, #43	@ 0x2b
 8007afa:	d102      	bne.n	8007b02 <expValue+0x1e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3301      	adds	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	4b0b      	ldr	r3, [pc, #44]	@ (8007b38 <expValue+0x54>)
 8007b0a:	18d3      	adds	r3, r2, r3
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	001a      	movs	r2, r3
 8007b10:	2304      	movs	r3, #4
 8007b12:	4013      	ands	r3, r2
 8007b14:	d101      	bne.n	8007b1a <expValue+0x36>
 8007b16:	2300      	movs	r3, #0
 8007b18:	e009      	b.n	8007b2e <expValue+0x4a>
    ptr = goNum( ++ptr );
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	607b      	str	r3, [r7, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	0018      	movs	r0, r3
 8007b24:	f000 fa82 	bl	800802c <goNum>
 8007b28:	0003      	movs	r3, r0
 8007b2a:	607b      	str	r3, [r7, #4]
    return ptr;
 8007b2c:	687b      	ldr	r3, [r7, #4]
}
 8007b2e:	0018      	movs	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b002      	add	sp, #8
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	46c0      	nop			@ (mov r8, r8)
 8007b38:	08011a38 	.word	0x08011a38

08007b3c <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b84 <fraqValue+0x48>)
 8007b4c:	18d3      	adds	r3, r2, r3
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	001a      	movs	r2, r3
 8007b52:	2304      	movs	r3, #4
 8007b54:	4013      	ands	r3, r2
 8007b56:	d101      	bne.n	8007b5c <fraqValue+0x20>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e00e      	b.n	8007b7a <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	0018      	movs	r0, r3
 8007b66:	f000 fa61 	bl	800802c <goNum>
 8007b6a:	0003      	movs	r3, r0
 8007b6c:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <fraqValue+0x3c>
 8007b74:	2300      	movs	r3, #0
 8007b76:	e000      	b.n	8007b7a <fraqValue+0x3e>
    return ptr;
 8007b78:	687b      	ldr	r3, [r7, #4]
}
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b002      	add	sp, #8
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	46c0      	nop			@ (mov r8, r8)
 8007b84:	08011a38 	.word	0x08011a38

08007b88 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b2d      	cmp	r3, #45	@ 0x2d
 8007b98:	d102      	bne.n	8007ba0 <numValue+0x18>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8007d14 <numValue+0x18c>)
 8007ba8:	18d3      	adds	r3, r2, r3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	001a      	movs	r2, r3
 8007bae:	2304      	movs	r3, #4
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d101      	bne.n	8007bb8 <numValue+0x30>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e0a8      	b.n	8007d0a <numValue+0x182>
    if ( *ptr != '0' ) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b30      	cmp	r3, #48	@ 0x30
 8007bbe:	d00a      	beq.n	8007bd6 <numValue+0x4e>
        ptr = goNum( ptr );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f000 fa32 	bl	800802c <goNum>
 8007bc8:	0003      	movs	r3, r0
 8007bca:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d110      	bne.n	8007bf4 <numValue+0x6c>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e099      	b.n	8007d0a <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	4b4c      	ldr	r3, [pc, #304]	@ (8007d14 <numValue+0x18c>)
 8007be4:	18d3      	adds	r3, r2, r3
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	001a      	movs	r2, r3
 8007bea:	2304      	movs	r3, #4
 8007bec:	4013      	ands	r3, r2
 8007bee:	d001      	beq.n	8007bf4 <numValue+0x6c>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e08a      	b.n	8007d0a <numValue+0x182>
    property->type = JSON_INTEGER;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c00:	d110      	bne.n	8007c24 <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3301      	adds	r3, #1
 8007c06:	607b      	str	r3, [r7, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f7ff ff96 	bl	8007b3c <fraqValue>
 8007c10:	0003      	movs	r3, r0
 8007c12:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <numValue+0x96>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e075      	b.n	8007d0a <numValue+0x182>
        property->type = JSON_REAL;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2205      	movs	r2, #5
 8007c22:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b65      	cmp	r3, #101	@ 0x65
 8007c2a:	d003      	beq.n	8007c34 <numValue+0xac>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b45      	cmp	r3, #69	@ 0x45
 8007c32:	d110      	bne.n	8007c56 <numValue+0xce>
        ptr = expValue( ++ptr );
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3301      	adds	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	f7ff ff51 	bl	8007ae4 <expValue>
 8007c42:	0003      	movs	r3, r0
 8007c44:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <numValue+0xc8>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e05c      	b.n	8007d0a <numValue+0x182>
        property->type = JSON_REAL;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2205      	movs	r2, #5
 8007c54:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f000 fa24 	bl	80080a8 <isEndOfPrimitive>
 8007c60:	0003      	movs	r3, r0
 8007c62:	001a      	movs	r2, r3
 8007c64:	2301      	movs	r3, #1
 8007c66:	4053      	eors	r3, r2
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <numValue+0xea>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e04b      	b.n	8007d0a <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	7c1b      	ldrb	r3, [r3, #16]
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d140      	bne.n	8007cfc <numValue+0x174>
        char const* value = property->u.value;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	201b      	movs	r0, #27
 8007c86:	183b      	adds	r3, r7, r0
 8007c88:	3a2d      	subs	r2, #45	@ 0x2d
 8007c8a:	4251      	negs	r1, r2
 8007c8c:	414a      	adcs	r2, r1
 8007c8e:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 8007c90:	183b      	adds	r3, r7, r0
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <numValue+0x114>
 8007c98:	2314      	movs	r3, #20
 8007c9a:	e000      	b.n	8007c9e <numValue+0x116>
 8007c9c:	2313      	movs	r3, #19
 8007c9e:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d901      	bls.n	8007cb4 <numValue+0x12c>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e02a      	b.n	8007d0a <numValue+0x182>
        if ( len == maxdigits ) {
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d11f      	bne.n	8007cfc <numValue+0x174>
            char const tmp = *ptr;
 8007cbc:	230f      	movs	r3, #15
 8007cbe:	18fb      	adds	r3, r7, r3
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7812      	ldrb	r2, [r2, #0]
 8007cc4:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 8007ccc:	231b      	movs	r3, #27
 8007cce:	18fb      	adds	r3, r7, r3
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <numValue+0x152>
 8007cd6:	4b10      	ldr	r3, [pc, #64]	@ (8007d18 <numValue+0x190>)
 8007cd8:	e000      	b.n	8007cdc <numValue+0x154>
 8007cda:	4b10      	ldr	r3, [pc, #64]	@ (8007d1c <numValue+0x194>)
 8007cdc:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	0011      	movs	r1, r2
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7f8 fa0d 	bl	8000104 <strcmp>
 8007cea:	1e03      	subs	r3, r0, #0
 8007cec:	da01      	bge.n	8007cf2 <numValue+0x16a>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e00b      	b.n	8007d0a <numValue+0x182>
            *ptr = tmp;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	220f      	movs	r2, #15
 8007cf6:	18ba      	adds	r2, r7, r2
 8007cf8:	7812      	ldrb	r2, [r2, #0]
 8007cfa:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f000 f9b4 	bl	800806c <setToNull>
 8007d04:	0003      	movs	r3, r0
 8007d06:	607b      	str	r3, [r7, #4]
    return ptr;
 8007d08:	687b      	ldr	r3, [r7, #4]
}
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b008      	add	sp, #32
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	46c0      	nop			@ (mov r8, r8)
 8007d14:	08011a38 	.word	0x08011a38
 8007d18:	08011930 	.word	0x08011930
 8007d1c:	08011948 	.word	0x08011948

08007d20 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d106      	bne.n	8007d46 <add+0x26>
	    obj->u.c.child = property;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 8007d44:	e006      	b.n	8007d54 <add+0x34>
	    obj->u.c.last_child->sibling = property;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	60da      	str	r2, [r3, #12]
}
 8007d54:	46c0      	nop			@ (mov r8, r8)
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b002      	add	sp, #8
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	3b7b      	subs	r3, #123	@ 0x7b
 8007d6e:	1e5a      	subs	r2, r3, #1
 8007d70:	4193      	sbcs	r3, r2
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	001a      	movs	r2, r3
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
    ptr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 f93a 	bl	8008008 <goBlank>
 8007d94:	0003      	movs	r3, r0
 8007d96:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <objValue+0x46>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e0c0      	b.n	8007f24 <objValue+0x1c8>
        if ( *ptr == ',' ) {
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b2c      	cmp	r3, #44	@ 0x2c
 8007da8:	d103      	bne.n	8007db2 <objValue+0x56>
            ++ptr;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
            continue;
 8007db0:	e0b7      	b.n	8007f22 <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	7c1b      	ldrb	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <objValue+0x62>
 8007dba:	227d      	movs	r2, #125	@ 0x7d
 8007dbc:	e000      	b.n	8007dc0 <objValue+0x64>
 8007dbe:	225d      	movs	r2, #93	@ 0x5d
 8007dc0:	211f      	movs	r1, #31
 8007dc2:	187b      	adds	r3, r7, r1
 8007dc4:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	187a      	adds	r2, r7, r1
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d116      	bne.n	8007e00 <objValue+0xa4>
            *ptr = '\0';
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <objValue+0x92>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	e09a      	b.n	8007f24 <objValue+0x1c8>
            obj->sibling = 0;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]
            continue;
 8007dfe:	e090      	b.n	8007f22 <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	0010      	movs	r0, r2
 8007e08:	4798      	blx	r3
 8007e0a:	0003      	movs	r3, r0
 8007e0c:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <objValue+0xbc>
 8007e14:	2300      	movs	r3, #0
 8007e16:	e085      	b.n	8007f24 <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	7c1b      	ldrb	r3, [r3, #16]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d012      	beq.n	8007e46 <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b22      	cmp	r3, #34	@ 0x22
 8007e26:	d001      	beq.n	8007e2c <objValue+0xd0>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e07b      	b.n	8007f24 <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	0011      	movs	r1, r2
 8007e32:	0018      	movs	r0, r3
 8007e34:	f7ff fd82 	bl	800793c <propertyName>
 8007e38:	0003      	movs	r3, r0
 8007e3a:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d104      	bne.n	8007e4c <objValue+0xf0>
 8007e42:	2300      	movs	r3, #0
 8007e44:	e06e      	b.n	8007f24 <objValue+0x1c8>
        }
        else property->name = 0;
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	0011      	movs	r1, r2
 8007e52:	0018      	movs	r0, r3
 8007e54:	f7ff ff64 	bl	8007d20 <add>
        property->u.value = ptr;
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b22      	cmp	r3, #34	@ 0x22
 8007e64:	d02a      	beq.n	8007ebc <objValue+0x160>
 8007e66:	db4d      	blt.n	8007f04 <objValue+0x1a8>
 8007e68:	2b7b      	cmp	r3, #123	@ 0x7b
 8007e6a:	dc4b      	bgt.n	8007f04 <objValue+0x1a8>
 8007e6c:	2b5b      	cmp	r3, #91	@ 0x5b
 8007e6e:	db49      	blt.n	8007f04 <objValue+0x1a8>
 8007e70:	3b5b      	subs	r3, #91	@ 0x5b
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d846      	bhi.n	8007f04 <objValue+0x1a8>
 8007e76:	009a      	lsls	r2, r3, #2
 8007e78:	4b2c      	ldr	r3, [pc, #176]	@ (8007f2c <objValue+0x1d0>)
 8007e7a:	18d3      	adds	r3, r2, r3
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2200      	movs	r2, #0
 8007e84:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	601a      	str	r2, [r3, #0]
                obj = property;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]
                break;
 8007e9c:	e03b      	b.n	8007f16 <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	601a      	str	r2, [r3, #0]
                obj = property;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]
                break;
 8007eba:	e02c      	b.n	8007f16 <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	0011      	movs	r1, r2
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f7ff fd6c 	bl	80079a0 <textValue>
 8007ec8:	0003      	movs	r3, r0
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	e023      	b.n	8007f16 <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	0011      	movs	r1, r2
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f7ff fdcf 	bl	8007a78 <trueValue>
 8007eda:	0003      	movs	r3, r0
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e01a      	b.n	8007f16 <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	0011      	movs	r1, r2
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f7ff fdd8 	bl	8007a9c <falseValue>
 8007eec:	0003      	movs	r3, r0
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	e011      	b.n	8007f16 <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	0011      	movs	r1, r2
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f7ff fde1 	bl	8007ac0 <nullValue>
 8007efe:	0003      	movs	r3, r0
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	e008      	b.n	8007f16 <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	0011      	movs	r1, r2
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f7ff fe3c 	bl	8007b88 <numValue>
 8007f10:	0003      	movs	r3, r0
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d000      	beq.n	8007f1e <objValue+0x1c2>
 8007f1c:	e736      	b.n	8007d8c <objValue+0x30>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e000      	b.n	8007f24 <objValue+0x1c8>
    for(;;) {
 8007f22:	e733      	b.n	8007d8c <objValue+0x30>
    }
}
 8007f24:	0018      	movs	r0, r3
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b008      	add	sp, #32
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	0801189c 	.word	0x0801189c

08007f30 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3b0c      	subs	r3, #12
 8007f3c:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2201      	movs	r2, #1
 8007f42:	609a      	str	r2, [r3, #8]
    return spool->mem;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
}
 8007f48:	0018      	movs	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	b004      	add	sp, #16
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3b0c      	subs	r3, #12
 8007f5c:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d301      	bcc.n	8007f6e <poolAlloc+0x1e>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e00b      	b.n	8007f86 <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6819      	ldr	r1, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	1c50      	adds	r0, r2, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6098      	str	r0, [r3, #8]
 8007f7c:	0013      	movs	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	189b      	adds	r3, r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	18cb      	adds	r3, r1, r3
}
 8007f86:	0018      	movs	r0, r3
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	b004      	add	sp, #16
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	0002      	movs	r2, r0
 8007f96:	6039      	str	r1, [r7, #0]
 8007f98:	1dfb      	adds	r3, r7, #7
 8007f9a:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 8007f9c:	e009      	b.n	8007fb2 <isOneOfThem+0x24>
        if ( ch == *set++ )
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	603a      	str	r2, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	1dfa      	adds	r2, r7, #7
 8007fa8:	7812      	ldrb	r2, [r2, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d101      	bne.n	8007fb2 <isOneOfThem+0x24>
            return true;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e004      	b.n	8007fbc <isOneOfThem+0x2e>
    while( *set != '\0' )
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f1      	bne.n	8007f9e <isOneOfThem+0x10>
    return false;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b002      	add	sp, #8
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 8007fce:	e012      	b.n	8007ff6 <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	0011      	movs	r1, r2
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7ff ffd8 	bl	8007f8e <isOneOfThem>
 8007fde:	0003      	movs	r3, r0
 8007fe0:	001a      	movs	r2, r3
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4053      	eors	r3, r2
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <goWhile+0x2c>
            return str;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	e007      	b.n	8008000 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	607b      	str	r3, [r7, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e8      	bne.n	8007fd0 <goWhile+0xc>
    }
    return 0;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	0018      	movs	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	b002      	add	sp, #8
 8008006:	bd80      	pop	{r7, pc}

08008008 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8008010:	4a05      	ldr	r2, [pc, #20]	@ (8008028 <goBlank+0x20>)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	0011      	movs	r1, r2
 8008016:	0018      	movs	r0, r3
 8008018:	f7ff ffd4 	bl	8007fc4 <goWhile>
 800801c:	0003      	movs	r3, r0
}
 800801e:	0018      	movs	r0, r3
 8008020:	46bd      	mov	sp, r7
 8008022:	b002      	add	sp, #8
 8008024:	bd80      	pop	{r7, pc}
 8008026:	46c0      	nop			@ (mov r8, r8)
 8008028:	08011124 	.word	0x08011124

0800802c <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8008034:	e00e      	b.n	8008054 <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <goNum+0x3c>)
 800803e:	18d3      	adds	r3, r2, r3
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	001a      	movs	r2, r3
 8008044:	2304      	movs	r3, #4
 8008046:	4013      	ands	r3, r2
 8008048:	d101      	bne.n	800804e <goNum+0x22>
            return str;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	e007      	b.n	800805e <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3301      	adds	r3, #1
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1ec      	bne.n	8008036 <goNum+0xa>
    }
    return 0;
 800805c:	2300      	movs	r3, #0
}
 800805e:	0018      	movs	r0, r3
 8008060:	46bd      	mov	sp, r7
 8008062:	b002      	add	sp, #8
 8008064:	bd80      	pop	{r7, pc}
 8008066:	46c0      	nop			@ (mov r8, r8)
 8008068:	08011a38 	.word	0x08011a38

0800806c <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	4a0a      	ldr	r2, [pc, #40]	@ (80080a4 <setToNull+0x38>)
 800807a:	0011      	movs	r1, r2
 800807c:	0018      	movs	r0, r3
 800807e:	f7ff ff86 	bl	8007f8e <isOneOfThem>
 8008082:	0003      	movs	r3, r0
 8008084:	001a      	movs	r2, r3
 8008086:	2301      	movs	r3, #1
 8008088:	4053      	eors	r3, r2
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d004      	beq.n	800809a <setToNull+0x2e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]
    return ch;
 800809a:	687b      	ldr	r3, [r7, #4]
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b002      	add	sp, #8
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	0801112c 	.word	0x0801112c

080080a8 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	0002      	movs	r2, r0
 80080b0:	1dfb      	adds	r3, r7, #7
 80080b2:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 80080b4:	1dfb      	adds	r3, r7, #7
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b2c      	cmp	r3, #44	@ 0x2c
 80080ba:	d011      	beq.n	80080e0 <isEndOfPrimitive+0x38>
 80080bc:	4a0e      	ldr	r2, [pc, #56]	@ (80080f8 <isEndOfPrimitive+0x50>)
 80080be:	1dfb      	adds	r3, r7, #7
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	0011      	movs	r1, r2
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7ff ff62 	bl	8007f8e <isOneOfThem>
 80080ca:	1e03      	subs	r3, r0, #0
 80080cc:	d108      	bne.n	80080e0 <isEndOfPrimitive+0x38>
 80080ce:	4a0b      	ldr	r2, [pc, #44]	@ (80080fc <isEndOfPrimitive+0x54>)
 80080d0:	1dfb      	adds	r3, r7, #7
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	0011      	movs	r1, r2
 80080d6:	0018      	movs	r0, r3
 80080d8:	f7ff ff59 	bl	8007f8e <isOneOfThem>
 80080dc:	1e03      	subs	r3, r0, #0
 80080de:	d001      	beq.n	80080e4 <isEndOfPrimitive+0x3c>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <isEndOfPrimitive+0x3e>
 80080e4:	2300      	movs	r3, #0
 80080e6:	1c1a      	adds	r2, r3, #0
 80080e8:	2301      	movs	r3, #1
 80080ea:	4013      	ands	r3, r2
 80080ec:	b2db      	uxtb	r3, r3
}
 80080ee:	0018      	movs	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b002      	add	sp, #8
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	46c0      	nop			@ (mov r8, r8)
 80080f8:	08011124 	.word	0x08011124
 80080fc:	0801112c 	.word	0x0801112c

08008100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008100:	480d      	ldr	r0, [pc, #52]	@ (8008138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008102:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008104:	f7ff faac 	bl	8007660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008108:	480c      	ldr	r0, [pc, #48]	@ (800813c <LoopForever+0x6>)
  ldr r1, =_edata
 800810a:	490d      	ldr	r1, [pc, #52]	@ (8008140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800810c:	4a0d      	ldr	r2, [pc, #52]	@ (8008144 <LoopForever+0xe>)
  movs r3, #0
 800810e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008110:	e002      	b.n	8008118 <LoopCopyDataInit>

08008112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008116:	3304      	adds	r3, #4

08008118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800811a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800811c:	d3f9      	bcc.n	8008112 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800811e:	4a0a      	ldr	r2, [pc, #40]	@ (8008148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008120:	4c0a      	ldr	r4, [pc, #40]	@ (800814c <LoopForever+0x16>)
  movs r3, #0
 8008122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008124:	e001      	b.n	800812a <LoopFillZerobss>

08008126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008128:	3204      	adds	r2, #4

0800812a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800812a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800812c:	d3fb      	bcc.n	8008126 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800812e:	f006 fb97 	bl	800e860 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008132:	f7fc fa85 	bl	8004640 <main>

08008136 <LoopForever>:

LoopForever:
  b LoopForever
 8008136:	e7fe      	b.n	8008136 <LoopForever>
  ldr   r0, =_estack
 8008138:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800813c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008140:	20000b90 	.word	0x20000b90
  ldr r2, =_sidata
 8008144:	08011db0 	.word	0x08011db0
  ldr r2, =_sbss
 8008148:	20000b90 	.word	0x20000b90
  ldr r4, =_ebss
 800814c:	20001f74 	.word	0x20001f74

08008150 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008150:	e7fe      	b.n	8008150 <ADC1_COMP_IRQHandler>
	...

08008154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800815a:	1dfb      	adds	r3, r7, #7
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008160:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <HAL_Init+0x3c>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	4b0a      	ldr	r3, [pc, #40]	@ (8008190 <HAL_Init+0x3c>)
 8008166:	2180      	movs	r1, #128	@ 0x80
 8008168:	0049      	lsls	r1, r1, #1
 800816a:	430a      	orrs	r2, r1
 800816c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800816e:	2003      	movs	r0, #3
 8008170:	f000 f810 	bl	8008194 <HAL_InitTick>
 8008174:	1e03      	subs	r3, r0, #0
 8008176:	d003      	beq.n	8008180 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008178:	1dfb      	adds	r3, r7, #7
 800817a:	2201      	movs	r2, #1
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e001      	b.n	8008184 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008180:	f7fe ff28 	bl	8006fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008184:	1dfb      	adds	r3, r7, #7
 8008186:	781b      	ldrb	r3, [r3, #0]
}
 8008188:	0018      	movs	r0, r3
 800818a:	46bd      	mov	sp, r7
 800818c:	b002      	add	sp, #8
 800818e:	bd80      	pop	{r7, pc}
 8008190:	40022000 	.word	0x40022000

08008194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008194:	b590      	push	{r4, r7, lr}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800819c:	230f      	movs	r3, #15
 800819e:	18fb      	adds	r3, r7, r3
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80081a4:	4b1d      	ldr	r3, [pc, #116]	@ (800821c <HAL_InitTick+0x88>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d02b      	beq.n	8008204 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80081ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008220 <HAL_InitTick+0x8c>)
 80081ae:	681c      	ldr	r4, [r3, #0]
 80081b0:	4b1a      	ldr	r3, [pc, #104]	@ (800821c <HAL_InitTick+0x88>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	0019      	movs	r1, r3
 80081b6:	23fa      	movs	r3, #250	@ 0xfa
 80081b8:	0098      	lsls	r0, r3, #2
 80081ba:	f7f7 ffc9 	bl	8000150 <__udivsi3>
 80081be:	0003      	movs	r3, r0
 80081c0:	0019      	movs	r1, r3
 80081c2:	0020      	movs	r0, r4
 80081c4:	f7f7 ffc4 	bl	8000150 <__udivsi3>
 80081c8:	0003      	movs	r3, r0
 80081ca:	0018      	movs	r0, r3
 80081cc:	f000 f953 	bl	8008476 <HAL_SYSTICK_Config>
 80081d0:	1e03      	subs	r3, r0, #0
 80081d2:	d112      	bne.n	80081fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d80a      	bhi.n	80081f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	2301      	movs	r3, #1
 80081de:	425b      	negs	r3, r3
 80081e0:	2200      	movs	r2, #0
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 f922 	bl	800842c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80081e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008224 <HAL_InitTick+0x90>)
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	e00d      	b.n	800820c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80081f0:	230f      	movs	r3, #15
 80081f2:	18fb      	adds	r3, r7, r3
 80081f4:	2201      	movs	r2, #1
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e008      	b.n	800820c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80081fa:	230f      	movs	r3, #15
 80081fc:	18fb      	adds	r3, r7, r3
 80081fe:	2201      	movs	r2, #1
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e003      	b.n	800820c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008204:	230f      	movs	r3, #15
 8008206:	18fb      	adds	r3, r7, r3
 8008208:	2201      	movs	r2, #1
 800820a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800820c:	230f      	movs	r3, #15
 800820e:	18fb      	adds	r3, r7, r3
 8008210:	781b      	ldrb	r3, [r3, #0]
}
 8008212:	0018      	movs	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	b005      	add	sp, #20
 8008218:	bd90      	pop	{r4, r7, pc}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	200009b0 	.word	0x200009b0
 8008220:	200009a8 	.word	0x200009a8
 8008224:	200009ac 	.word	0x200009ac

08008228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_IncTick+0x1c>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	001a      	movs	r2, r3
 8008232:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <HAL_IncTick+0x20>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	18d2      	adds	r2, r2, r3
 8008238:	4b03      	ldr	r3, [pc, #12]	@ (8008248 <HAL_IncTick+0x20>)
 800823a:	601a      	str	r2, [r3, #0]
}
 800823c:	46c0      	nop			@ (mov r8, r8)
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	46c0      	nop			@ (mov r8, r8)
 8008244:	200009b0 	.word	0x200009b0
 8008248:	20001e24 	.word	0x20001e24

0800824c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  return uwTick;
 8008250:	4b02      	ldr	r3, [pc, #8]	@ (800825c <HAL_GetTick+0x10>)
 8008252:	681b      	ldr	r3, [r3, #0]
}
 8008254:	0018      	movs	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	46c0      	nop			@ (mov r8, r8)
 800825c:	20001e24 	.word	0x20001e24

08008260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008268:	f7ff fff0 	bl	800824c <HAL_GetTick>
 800826c:	0003      	movs	r3, r0
 800826e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	d005      	beq.n	8008286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800827a:	4b0a      	ldr	r3, [pc, #40]	@ (80082a4 <HAL_Delay+0x44>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	001a      	movs	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	189b      	adds	r3, r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008286:	46c0      	nop			@ (mov r8, r8)
 8008288:	f7ff ffe0 	bl	800824c <HAL_GetTick>
 800828c:	0002      	movs	r2, r0
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	429a      	cmp	r2, r3
 8008296:	d8f7      	bhi.n	8008288 <HAL_Delay+0x28>
  {
  }
}
 8008298:	46c0      	nop			@ (mov r8, r8)
 800829a:	46c0      	nop			@ (mov r8, r8)
 800829c:	46bd      	mov	sp, r7
 800829e:	b004      	add	sp, #16
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	46c0      	nop			@ (mov r8, r8)
 80082a4:	200009b0 	.word	0x200009b0

080082a8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80082b0:	4b06      	ldr	r3, [pc, #24]	@ (80082cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a06      	ldr	r2, [pc, #24]	@ (80082d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	0019      	movs	r1, r3
 80082ba:	4b04      	ldr	r3, [pc, #16]	@ (80082cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	430a      	orrs	r2, r1
 80082c0:	601a      	str	r2, [r3, #0]
}
 80082c2:	46c0      	nop			@ (mov r8, r8)
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b002      	add	sp, #8
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	40010000 	.word	0x40010000
 80082d0:	fffff9ff 	.word	0xfffff9ff

080082d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	0002      	movs	r2, r0
 80082dc:	1dfb      	adds	r3, r7, #7
 80082de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80082e0:	1dfb      	adds	r3, r7, #7
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80082e6:	d809      	bhi.n	80082fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082e8:	1dfb      	adds	r3, r7, #7
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	001a      	movs	r2, r3
 80082ee:	231f      	movs	r3, #31
 80082f0:	401a      	ands	r2, r3
 80082f2:	4b04      	ldr	r3, [pc, #16]	@ (8008304 <__NVIC_EnableIRQ+0x30>)
 80082f4:	2101      	movs	r1, #1
 80082f6:	4091      	lsls	r1, r2
 80082f8:	000a      	movs	r2, r1
 80082fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80082fc:	46c0      	nop			@ (mov r8, r8)
 80082fe:	46bd      	mov	sp, r7
 8008300:	b002      	add	sp, #8
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000e100 	.word	0xe000e100

08008308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008308:	b590      	push	{r4, r7, lr}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	0002      	movs	r2, r0
 8008310:	6039      	str	r1, [r7, #0]
 8008312:	1dfb      	adds	r3, r7, #7
 8008314:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008316:	1dfb      	adds	r3, r7, #7
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b7f      	cmp	r3, #127	@ 0x7f
 800831c:	d828      	bhi.n	8008370 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800831e:	4a2f      	ldr	r2, [pc, #188]	@ (80083dc <__NVIC_SetPriority+0xd4>)
 8008320:	1dfb      	adds	r3, r7, #7
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	b25b      	sxtb	r3, r3
 8008326:	089b      	lsrs	r3, r3, #2
 8008328:	33c0      	adds	r3, #192	@ 0xc0
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	589b      	ldr	r3, [r3, r2]
 800832e:	1dfa      	adds	r2, r7, #7
 8008330:	7812      	ldrb	r2, [r2, #0]
 8008332:	0011      	movs	r1, r2
 8008334:	2203      	movs	r2, #3
 8008336:	400a      	ands	r2, r1
 8008338:	00d2      	lsls	r2, r2, #3
 800833a:	21ff      	movs	r1, #255	@ 0xff
 800833c:	4091      	lsls	r1, r2
 800833e:	000a      	movs	r2, r1
 8008340:	43d2      	mvns	r2, r2
 8008342:	401a      	ands	r2, r3
 8008344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	019b      	lsls	r3, r3, #6
 800834a:	22ff      	movs	r2, #255	@ 0xff
 800834c:	401a      	ands	r2, r3
 800834e:	1dfb      	adds	r3, r7, #7
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	0018      	movs	r0, r3
 8008354:	2303      	movs	r3, #3
 8008356:	4003      	ands	r3, r0
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800835c:	481f      	ldr	r0, [pc, #124]	@ (80083dc <__NVIC_SetPriority+0xd4>)
 800835e:	1dfb      	adds	r3, r7, #7
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b25b      	sxtb	r3, r3
 8008364:	089b      	lsrs	r3, r3, #2
 8008366:	430a      	orrs	r2, r1
 8008368:	33c0      	adds	r3, #192	@ 0xc0
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800836e:	e031      	b.n	80083d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008370:	4a1b      	ldr	r2, [pc, #108]	@ (80083e0 <__NVIC_SetPriority+0xd8>)
 8008372:	1dfb      	adds	r3, r7, #7
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	0019      	movs	r1, r3
 8008378:	230f      	movs	r3, #15
 800837a:	400b      	ands	r3, r1
 800837c:	3b08      	subs	r3, #8
 800837e:	089b      	lsrs	r3, r3, #2
 8008380:	3306      	adds	r3, #6
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	18d3      	adds	r3, r2, r3
 8008386:	3304      	adds	r3, #4
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	1dfa      	adds	r2, r7, #7
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	0011      	movs	r1, r2
 8008390:	2203      	movs	r2, #3
 8008392:	400a      	ands	r2, r1
 8008394:	00d2      	lsls	r2, r2, #3
 8008396:	21ff      	movs	r1, #255	@ 0xff
 8008398:	4091      	lsls	r1, r2
 800839a:	000a      	movs	r2, r1
 800839c:	43d2      	mvns	r2, r2
 800839e:	401a      	ands	r2, r3
 80083a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	019b      	lsls	r3, r3, #6
 80083a6:	22ff      	movs	r2, #255	@ 0xff
 80083a8:	401a      	ands	r2, r3
 80083aa:	1dfb      	adds	r3, r7, #7
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	0018      	movs	r0, r3
 80083b0:	2303      	movs	r3, #3
 80083b2:	4003      	ands	r3, r0
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083b8:	4809      	ldr	r0, [pc, #36]	@ (80083e0 <__NVIC_SetPriority+0xd8>)
 80083ba:	1dfb      	adds	r3, r7, #7
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	001c      	movs	r4, r3
 80083c0:	230f      	movs	r3, #15
 80083c2:	4023      	ands	r3, r4
 80083c4:	3b08      	subs	r3, #8
 80083c6:	089b      	lsrs	r3, r3, #2
 80083c8:	430a      	orrs	r2, r1
 80083ca:	3306      	adds	r3, #6
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	18c3      	adds	r3, r0, r3
 80083d0:	3304      	adds	r3, #4
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	46c0      	nop			@ (mov r8, r8)
 80083d6:	46bd      	mov	sp, r7
 80083d8:	b003      	add	sp, #12
 80083da:	bd90      	pop	{r4, r7, pc}
 80083dc:	e000e100 	.word	0xe000e100
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1e5a      	subs	r2, r3, #1
 80083f0:	2380      	movs	r3, #128	@ 0x80
 80083f2:	045b      	lsls	r3, r3, #17
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d301      	bcc.n	80083fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083f8:	2301      	movs	r3, #1
 80083fa:	e010      	b.n	800841e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008428 <SysTick_Config+0x44>)
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	3a01      	subs	r2, #1
 8008402:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008404:	2301      	movs	r3, #1
 8008406:	425b      	negs	r3, r3
 8008408:	2103      	movs	r1, #3
 800840a:	0018      	movs	r0, r3
 800840c:	f7ff ff7c 	bl	8008308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008410:	4b05      	ldr	r3, [pc, #20]	@ (8008428 <SysTick_Config+0x44>)
 8008412:	2200      	movs	r2, #0
 8008414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008416:	4b04      	ldr	r3, [pc, #16]	@ (8008428 <SysTick_Config+0x44>)
 8008418:	2207      	movs	r2, #7
 800841a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800841c:	2300      	movs	r3, #0
}
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b002      	add	sp, #8
 8008424:	bd80      	pop	{r7, pc}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	e000e010 	.word	0xe000e010

0800842c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
 8008436:	210f      	movs	r1, #15
 8008438:	187b      	adds	r3, r7, r1
 800843a:	1c02      	adds	r2, r0, #0
 800843c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	187b      	adds	r3, r7, r1
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b25b      	sxtb	r3, r3
 8008446:	0011      	movs	r1, r2
 8008448:	0018      	movs	r0, r3
 800844a:	f7ff ff5d 	bl	8008308 <__NVIC_SetPriority>
}
 800844e:	46c0      	nop			@ (mov r8, r8)
 8008450:	46bd      	mov	sp, r7
 8008452:	b004      	add	sp, #16
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	0002      	movs	r2, r0
 800845e:	1dfb      	adds	r3, r7, #7
 8008460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008462:	1dfb      	adds	r3, r7, #7
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b25b      	sxtb	r3, r3
 8008468:	0018      	movs	r0, r3
 800846a:	f7ff ff33 	bl	80082d4 <__NVIC_EnableIRQ>
}
 800846e:	46c0      	nop			@ (mov r8, r8)
 8008470:	46bd      	mov	sp, r7
 8008472:	b002      	add	sp, #8
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	0018      	movs	r0, r3
 8008482:	f7ff ffaf 	bl	80083e4 <SysTick_Config>
 8008486:	0003      	movs	r3, r0
}
 8008488:	0018      	movs	r0, r3
 800848a:	46bd      	mov	sp, r7
 800848c:	b002      	add	sp, #8
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800849e:	e14d      	b.n	800873c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2101      	movs	r1, #1
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	4091      	lsls	r1, r2
 80084aa:	000a      	movs	r2, r1
 80084ac:	4013      	ands	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d100      	bne.n	80084b8 <HAL_GPIO_Init+0x28>
 80084b6:	e13e      	b.n	8008736 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2203      	movs	r2, #3
 80084be:	4013      	ands	r3, r2
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d005      	beq.n	80084d0 <HAL_GPIO_Init+0x40>
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2203      	movs	r2, #3
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d130      	bne.n	8008532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	2203      	movs	r2, #3
 80084dc:	409a      	lsls	r2, r3
 80084de:	0013      	movs	r3, r2
 80084e0:	43da      	mvns	r2, r3
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	4013      	ands	r3, r2
 80084e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	409a      	lsls	r2, r3
 80084f2:	0013      	movs	r3, r2
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008506:	2201      	movs	r2, #1
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	409a      	lsls	r2, r3
 800850c:	0013      	movs	r3, r2
 800850e:	43da      	mvns	r2, r3
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	4013      	ands	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	091b      	lsrs	r3, r3, #4
 800851c:	2201      	movs	r2, #1
 800851e:	401a      	ands	r2, r3
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	409a      	lsls	r2, r3
 8008524:	0013      	movs	r3, r2
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2203      	movs	r2, #3
 8008538:	4013      	ands	r3, r2
 800853a:	2b03      	cmp	r3, #3
 800853c:	d017      	beq.n	800856e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	2203      	movs	r2, #3
 800854a:	409a      	lsls	r2, r3
 800854c:	0013      	movs	r3, r2
 800854e:	43da      	mvns	r2, r3
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	4013      	ands	r3, r2
 8008554:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	409a      	lsls	r2, r3
 8008560:	0013      	movs	r3, r2
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2203      	movs	r2, #3
 8008574:	4013      	ands	r3, r2
 8008576:	2b02      	cmp	r3, #2
 8008578:	d123      	bne.n	80085c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	08da      	lsrs	r2, r3, #3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3208      	adds	r2, #8
 8008582:	0092      	lsls	r2, r2, #2
 8008584:	58d3      	ldr	r3, [r2, r3]
 8008586:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2207      	movs	r2, #7
 800858c:	4013      	ands	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	220f      	movs	r2, #15
 8008592:	409a      	lsls	r2, r3
 8008594:	0013      	movs	r3, r2
 8008596:	43da      	mvns	r2, r3
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	4013      	ands	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2107      	movs	r1, #7
 80085a6:	400b      	ands	r3, r1
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	409a      	lsls	r2, r3
 80085ac:	0013      	movs	r3, r2
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	08da      	lsrs	r2, r3, #3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3208      	adds	r2, #8
 80085bc:	0092      	lsls	r2, r2, #2
 80085be:	6939      	ldr	r1, [r7, #16]
 80085c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	2203      	movs	r2, #3
 80085ce:	409a      	lsls	r2, r3
 80085d0:	0013      	movs	r3, r2
 80085d2:	43da      	mvns	r2, r3
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4013      	ands	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	2203      	movs	r2, #3
 80085e0:	401a      	ands	r2, r3
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	409a      	lsls	r2, r3
 80085e8:	0013      	movs	r3, r2
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	23c0      	movs	r3, #192	@ 0xc0
 80085fc:	029b      	lsls	r3, r3, #10
 80085fe:	4013      	ands	r3, r2
 8008600:	d100      	bne.n	8008604 <HAL_GPIO_Init+0x174>
 8008602:	e098      	b.n	8008736 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008604:	4a53      	ldr	r2, [pc, #332]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	089b      	lsrs	r3, r3, #2
 800860a:	3318      	adds	r3, #24
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	589b      	ldr	r3, [r3, r2]
 8008610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2203      	movs	r2, #3
 8008616:	4013      	ands	r3, r2
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	220f      	movs	r2, #15
 800861c:	409a      	lsls	r2, r3
 800861e:	0013      	movs	r3, r2
 8008620:	43da      	mvns	r2, r3
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4013      	ands	r3, r2
 8008626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	23a0      	movs	r3, #160	@ 0xa0
 800862c:	05db      	lsls	r3, r3, #23
 800862e:	429a      	cmp	r2, r3
 8008630:	d019      	beq.n	8008666 <HAL_GPIO_Init+0x1d6>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a48      	ldr	r2, [pc, #288]	@ (8008758 <HAL_GPIO_Init+0x2c8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_GPIO_Init+0x1d2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a47      	ldr	r2, [pc, #284]	@ (800875c <HAL_GPIO_Init+0x2cc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00d      	beq.n	800865e <HAL_GPIO_Init+0x1ce>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a46      	ldr	r2, [pc, #280]	@ (8008760 <HAL_GPIO_Init+0x2d0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d007      	beq.n	800865a <HAL_GPIO_Init+0x1ca>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a45      	ldr	r2, [pc, #276]	@ (8008764 <HAL_GPIO_Init+0x2d4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <HAL_GPIO_Init+0x1c6>
 8008652:	2304      	movs	r3, #4
 8008654:	e008      	b.n	8008668 <HAL_GPIO_Init+0x1d8>
 8008656:	2305      	movs	r3, #5
 8008658:	e006      	b.n	8008668 <HAL_GPIO_Init+0x1d8>
 800865a:	2303      	movs	r3, #3
 800865c:	e004      	b.n	8008668 <HAL_GPIO_Init+0x1d8>
 800865e:	2302      	movs	r3, #2
 8008660:	e002      	b.n	8008668 <HAL_GPIO_Init+0x1d8>
 8008662:	2301      	movs	r3, #1
 8008664:	e000      	b.n	8008668 <HAL_GPIO_Init+0x1d8>
 8008666:	2300      	movs	r3, #0
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	2103      	movs	r1, #3
 800866c:	400a      	ands	r2, r1
 800866e:	00d2      	lsls	r2, r2, #3
 8008670:	4093      	lsls	r3, r2
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008678:	4936      	ldr	r1, [pc, #216]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	089b      	lsrs	r3, r3, #2
 800867e:	3318      	adds	r3, #24
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008686:	4b33      	ldr	r3, [pc, #204]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	43da      	mvns	r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	4013      	ands	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	2380      	movs	r3, #128	@ 0x80
 800869c:	035b      	lsls	r3, r3, #13
 800869e:	4013      	ands	r3, r2
 80086a0:	d003      	beq.n	80086aa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80086aa:	4b2a      	ldr	r3, [pc, #168]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80086b0:	4b28      	ldr	r3, [pc, #160]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	43da      	mvns	r2, r3
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	4013      	ands	r3, r2
 80086be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	2380      	movs	r3, #128	@ 0x80
 80086c6:	039b      	lsls	r3, r3, #14
 80086c8:	4013      	ands	r3, r2
 80086ca:	d003      	beq.n	80086d4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80086d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80086da:	4a1e      	ldr	r2, [pc, #120]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 80086dc:	2384      	movs	r3, #132	@ 0x84
 80086de:	58d3      	ldr	r3, [r2, r3]
 80086e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	43da      	mvns	r2, r3
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	4013      	ands	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	2380      	movs	r3, #128	@ 0x80
 80086f2:	029b      	lsls	r3, r3, #10
 80086f4:	4013      	ands	r3, r2
 80086f6:	d003      	beq.n	8008700 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008700:	4914      	ldr	r1, [pc, #80]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 8008702:	2284      	movs	r2, #132	@ 0x84
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008708:	4a12      	ldr	r2, [pc, #72]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 800870a:	2380      	movs	r3, #128	@ 0x80
 800870c:	58d3      	ldr	r3, [r2, r3]
 800870e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	43da      	mvns	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4013      	ands	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	2380      	movs	r3, #128	@ 0x80
 8008720:	025b      	lsls	r3, r3, #9
 8008722:	4013      	ands	r3, r2
 8008724:	d003      	beq.n	800872e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800872e:	4909      	ldr	r1, [pc, #36]	@ (8008754 <HAL_GPIO_Init+0x2c4>)
 8008730:	2280      	movs	r2, #128	@ 0x80
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	3301      	adds	r3, #1
 800873a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	40da      	lsrs	r2, r3
 8008744:	1e13      	subs	r3, r2, #0
 8008746:	d000      	beq.n	800874a <HAL_GPIO_Init+0x2ba>
 8008748:	e6aa      	b.n	80084a0 <HAL_GPIO_Init+0x10>
  }
}
 800874a:	46c0      	nop			@ (mov r8, r8)
 800874c:	46c0      	nop			@ (mov r8, r8)
 800874e:	46bd      	mov	sp, r7
 8008750:	b006      	add	sp, #24
 8008752:	bd80      	pop	{r7, pc}
 8008754:	40021800 	.word	0x40021800
 8008758:	50000400 	.word	0x50000400
 800875c:	50000800 	.word	0x50000800
 8008760:	50000c00 	.word	0x50000c00
 8008764:	50001000 	.word	0x50001000

08008768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	000a      	movs	r2, r1
 8008772:	1cbb      	adds	r3, r7, #2
 8008774:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	1cba      	adds	r2, r7, #2
 800877c:	8812      	ldrh	r2, [r2, #0]
 800877e:	4013      	ands	r3, r2
 8008780:	d004      	beq.n	800878c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008782:	230f      	movs	r3, #15
 8008784:	18fb      	adds	r3, r7, r3
 8008786:	2201      	movs	r2, #1
 8008788:	701a      	strb	r2, [r3, #0]
 800878a:	e003      	b.n	8008794 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800878c:	230f      	movs	r3, #15
 800878e:	18fb      	adds	r3, r7, r3
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008794:	230f      	movs	r3, #15
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	781b      	ldrb	r3, [r3, #0]
}
 800879a:	0018      	movs	r0, r3
 800879c:	46bd      	mov	sp, r7
 800879e:	b004      	add	sp, #16
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	0008      	movs	r0, r1
 80087ac:	0011      	movs	r1, r2
 80087ae:	1cbb      	adds	r3, r7, #2
 80087b0:	1c02      	adds	r2, r0, #0
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	1c7b      	adds	r3, r7, #1
 80087b6:	1c0a      	adds	r2, r1, #0
 80087b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087ba:	1c7b      	adds	r3, r7, #1
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80087c2:	1cbb      	adds	r3, r7, #2
 80087c4:	881a      	ldrh	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80087ca:	e003      	b.n	80087d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80087cc:	1cbb      	adds	r3, r7, #2
 80087ce:	881a      	ldrh	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80087d4:	46c0      	nop			@ (mov r8, r8)
 80087d6:	46bd      	mov	sp, r7
 80087d8:	b002      	add	sp, #8
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	0002      	movs	r2, r0
 80087e4:	1dbb      	adds	r3, r7, #6
 80087e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80087e8:	4b10      	ldr	r3, [pc, #64]	@ (800882c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	1dba      	adds	r2, r7, #6
 80087ee:	8812      	ldrh	r2, [r2, #0]
 80087f0:	4013      	ands	r3, r2
 80087f2:	d008      	beq.n	8008806 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80087f4:	4b0d      	ldr	r3, [pc, #52]	@ (800882c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80087f6:	1dba      	adds	r2, r7, #6
 80087f8:	8812      	ldrh	r2, [r2, #0]
 80087fa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80087fc:	1dbb      	adds	r3, r7, #6
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	0018      	movs	r0, r3
 8008802:	f7fd f891 	bl	8005928 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008806:	4b09      	ldr	r3, [pc, #36]	@ (800882c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	1dba      	adds	r2, r7, #6
 800880c:	8812      	ldrh	r2, [r2, #0]
 800880e:	4013      	ands	r3, r2
 8008810:	d008      	beq.n	8008824 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008812:	4b06      	ldr	r3, [pc, #24]	@ (800882c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008814:	1dba      	adds	r2, r7, #6
 8008816:	8812      	ldrh	r2, [r2, #0]
 8008818:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800881a:	1dbb      	adds	r3, r7, #6
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	0018      	movs	r0, r3
 8008820:	f000 f806 	bl	8008830 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008824:	46c0      	nop			@ (mov r8, r8)
 8008826:	46bd      	mov	sp, r7
 8008828:	b002      	add	sp, #8
 800882a:	bd80      	pop	{r7, pc}
 800882c:	40021800 	.word	0x40021800

08008830 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	0002      	movs	r2, r0
 8008838:	1dbb      	adds	r3, r7, #6
 800883a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800883c:	46c0      	nop			@ (mov r8, r8)
 800883e:	46bd      	mov	sp, r7
 8008840:	b002      	add	sp, #8
 8008842:	bd80      	pop	{r7, pc}

08008844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e08f      	b.n	8008976 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2241      	movs	r2, #65	@ 0x41
 800885a:	5c9b      	ldrb	r3, [r3, r2]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d107      	bne.n	8008872 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2240      	movs	r2, #64	@ 0x40
 8008866:	2100      	movs	r1, #0
 8008868:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	0018      	movs	r0, r3
 800886e:	f7fe fbd9 	bl	8007024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2241      	movs	r2, #65	@ 0x41
 8008876:	2124      	movs	r1, #36	@ 0x24
 8008878:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2101      	movs	r1, #1
 8008886:	438a      	bics	r2, r1
 8008888:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	493b      	ldr	r1, [pc, #236]	@ (8008980 <HAL_I2C_Init+0x13c>)
 8008894:	400a      	ands	r2, r1
 8008896:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4938      	ldr	r1, [pc, #224]	@ (8008984 <HAL_I2C_Init+0x140>)
 80088a4:	400a      	ands	r2, r1
 80088a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d108      	bne.n	80088c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2180      	movs	r1, #128	@ 0x80
 80088ba:	0209      	lsls	r1, r1, #8
 80088bc:	430a      	orrs	r2, r1
 80088be:	609a      	str	r2, [r3, #8]
 80088c0:	e007      	b.n	80088d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2184      	movs	r1, #132	@ 0x84
 80088cc:	0209      	lsls	r1, r1, #8
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d109      	bne.n	80088ee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2180      	movs	r1, #128	@ 0x80
 80088e6:	0109      	lsls	r1, r1, #4
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
 80088ec:	e007      	b.n	80088fe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4923      	ldr	r1, [pc, #140]	@ (8008988 <HAL_I2C_Init+0x144>)
 80088fa:	400a      	ands	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4920      	ldr	r1, [pc, #128]	@ (800898c <HAL_I2C_Init+0x148>)
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	491a      	ldr	r1, [pc, #104]	@ (8008984 <HAL_I2C_Init+0x140>)
 800891a:	400a      	ands	r2, r1
 800891c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	431a      	orrs	r2, r3
 8008928:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	69d9      	ldr	r1, [r3, #28]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2101      	movs	r1, #1
 8008954:	430a      	orrs	r2, r1
 8008956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2241      	movs	r2, #65	@ 0x41
 8008962:	2120      	movs	r1, #32
 8008964:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2242      	movs	r2, #66	@ 0x42
 8008970:	2100      	movs	r1, #0
 8008972:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b002      	add	sp, #8
 800897c:	bd80      	pop	{r7, pc}
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	f0ffffff 	.word	0xf0ffffff
 8008984:	ffff7fff 	.word	0xffff7fff
 8008988:	fffff7ff 	.word	0xfffff7ff
 800898c:	02008000 	.word	0x02008000

08008990 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b089      	sub	sp, #36	@ 0x24
 8008994:	af02      	add	r7, sp, #8
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	0008      	movs	r0, r1
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	0019      	movs	r1, r3
 800899e:	230a      	movs	r3, #10
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	1c02      	adds	r2, r0, #0
 80089a4:	801a      	strh	r2, [r3, #0]
 80089a6:	2308      	movs	r3, #8
 80089a8:	18fb      	adds	r3, r7, r3
 80089aa:	1c0a      	adds	r2, r1, #0
 80089ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2241      	movs	r2, #65	@ 0x41
 80089b2:	5c9b      	ldrb	r3, [r3, r2]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	d000      	beq.n	80089bc <HAL_I2C_Master_Transmit+0x2c>
 80089ba:	e10a      	b.n	8008bd2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2240      	movs	r2, #64	@ 0x40
 80089c0:	5c9b      	ldrb	r3, [r3, r2]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_I2C_Master_Transmit+0x3a>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e104      	b.n	8008bd4 <HAL_I2C_Master_Transmit+0x244>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2240      	movs	r2, #64	@ 0x40
 80089ce:	2101      	movs	r1, #1
 80089d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80089d2:	f7ff fc3b 	bl	800824c <HAL_GetTick>
 80089d6:	0003      	movs	r3, r0
 80089d8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80089da:	2380      	movs	r3, #128	@ 0x80
 80089dc:	0219      	lsls	r1, r3, #8
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2319      	movs	r3, #25
 80089e6:	2201      	movs	r2, #1
 80089e8:	f000 fa26 	bl	8008e38 <I2C_WaitOnFlagUntilTimeout>
 80089ec:	1e03      	subs	r3, r0, #0
 80089ee:	d001      	beq.n	80089f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0ef      	b.n	8008bd4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2241      	movs	r2, #65	@ 0x41
 80089f8:	2121      	movs	r1, #33	@ 0x21
 80089fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2242      	movs	r2, #66	@ 0x42
 8008a00:	2110      	movs	r1, #16
 8008a02:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2208      	movs	r2, #8
 8008a14:	18ba      	adds	r2, r7, r2
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	2bff      	cmp	r3, #255	@ 0xff
 8008a28:	d906      	bls.n	8008a38 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	22ff      	movs	r2, #255	@ 0xff
 8008a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008a30:	2380      	movs	r3, #128	@ 0x80
 8008a32:	045b      	lsls	r3, r3, #17
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	e007      	b.n	8008a48 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008a42:	2380      	movs	r3, #128	@ 0x80
 8008a44:	049b      	lsls	r3, r3, #18
 8008a46:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d027      	beq.n	8008aa0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a54:	781a      	ldrb	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	3301      	adds	r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	697c      	ldr	r4, [r7, #20]
 8008a8c:	230a      	movs	r3, #10
 8008a8e:	18fb      	adds	r3, r7, r3
 8008a90:	8819      	ldrh	r1, [r3, #0]
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	4b51      	ldr	r3, [pc, #324]	@ (8008bdc <HAL_I2C_Master_Transmit+0x24c>)
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	0023      	movs	r3, r4
 8008a9a:	f000 fc45 	bl	8009328 <I2C_TransferConfig>
 8008a9e:	e06f      	b.n	8008b80 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	697c      	ldr	r4, [r7, #20]
 8008aa8:	230a      	movs	r3, #10
 8008aaa:	18fb      	adds	r3, r7, r3
 8008aac:	8819      	ldrh	r1, [r3, #0]
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8008bdc <HAL_I2C_Master_Transmit+0x24c>)
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	0023      	movs	r3, r4
 8008ab6:	f000 fc37 	bl	8009328 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008aba:	e061      	b.n	8008b80 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f000 fa10 	bl	8008ee8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ac8:	1e03      	subs	r3, r0, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e081      	b.n	8008bd4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	3b01      	subs	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d03a      	beq.n	8008b80 <HAL_I2C_Master_Transmit+0x1f0>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d136      	bne.n	8008b80 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	0013      	movs	r3, r2
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2180      	movs	r1, #128	@ 0x80
 8008b20:	f000 f98a 	bl	8008e38 <I2C_WaitOnFlagUntilTimeout>
 8008b24:	1e03      	subs	r3, r0, #0
 8008b26:	d001      	beq.n	8008b2c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e053      	b.n	8008bd4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2bff      	cmp	r3, #255	@ 0xff
 8008b34:	d911      	bls.n	8008b5a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	22ff      	movs	r2, #255	@ 0xff
 8008b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	2380      	movs	r3, #128	@ 0x80
 8008b44:	045c      	lsls	r4, r3, #17
 8008b46:	230a      	movs	r3, #10
 8008b48:	18fb      	adds	r3, r7, r3
 8008b4a:	8819      	ldrh	r1, [r3, #0]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	0023      	movs	r3, r4
 8008b54:	f000 fbe8 	bl	8009328 <I2C_TransferConfig>
 8008b58:	e012      	b.n	8008b80 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	2380      	movs	r3, #128	@ 0x80
 8008b6c:	049c      	lsls	r4, r3, #18
 8008b6e:	230a      	movs	r3, #10
 8008b70:	18fb      	adds	r3, r7, r3
 8008b72:	8819      	ldrh	r1, [r3, #0]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	2300      	movs	r3, #0
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	0023      	movs	r3, r4
 8008b7c:	f000 fbd4 	bl	8009328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d198      	bne.n	8008abc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	0018      	movs	r0, r3
 8008b92:	f000 f9ef 	bl	8008f74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b96:	1e03      	subs	r3, r0, #0
 8008b98:	d001      	beq.n	8008b9e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e01a      	b.n	8008bd4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	490b      	ldr	r1, [pc, #44]	@ (8008be0 <HAL_I2C_Master_Transmit+0x250>)
 8008bb2:	400a      	ands	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2241      	movs	r2, #65	@ 0x41
 8008bba:	2120      	movs	r1, #32
 8008bbc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2242      	movs	r2, #66	@ 0x42
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2240      	movs	r2, #64	@ 0x40
 8008bca:	2100      	movs	r1, #0
 8008bcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e000      	b.n	8008bd4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
  }
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b007      	add	sp, #28
 8008bda:	bd90      	pop	{r4, r7, pc}
 8008bdc:	80002000 	.word	0x80002000
 8008be0:	fe00e800 	.word	0xfe00e800

08008be4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008be4:	b590      	push	{r4, r7, lr}
 8008be6:	b089      	sub	sp, #36	@ 0x24
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	0008      	movs	r0, r1
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	230a      	movs	r3, #10
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	1c02      	adds	r2, r0, #0
 8008bf8:	801a      	strh	r2, [r3, #0]
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	1c0a      	adds	r2, r1, #0
 8008c00:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2241      	movs	r2, #65	@ 0x41
 8008c06:	5c9b      	ldrb	r3, [r3, r2]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	d000      	beq.n	8008c10 <HAL_I2C_Master_Receive+0x2c>
 8008c0e:	e0e8      	b.n	8008de2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2240      	movs	r2, #64	@ 0x40
 8008c14:	5c9b      	ldrb	r3, [r3, r2]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d101      	bne.n	8008c1e <HAL_I2C_Master_Receive+0x3a>
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	e0e2      	b.n	8008de4 <HAL_I2C_Master_Receive+0x200>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2240      	movs	r2, #64	@ 0x40
 8008c22:	2101      	movs	r1, #1
 8008c24:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c26:	f7ff fb11 	bl	800824c <HAL_GetTick>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008c2e:	2380      	movs	r3, #128	@ 0x80
 8008c30:	0219      	lsls	r1, r3, #8
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	2319      	movs	r3, #25
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f000 f8fc 	bl	8008e38 <I2C_WaitOnFlagUntilTimeout>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d001      	beq.n	8008c48 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0cd      	b.n	8008de4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2241      	movs	r2, #65	@ 0x41
 8008c4c:	2122      	movs	r1, #34	@ 0x22
 8008c4e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2242      	movs	r2, #66	@ 0x42
 8008c54:	2110      	movs	r1, #16
 8008c56:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2208      	movs	r2, #8
 8008c68:	18ba      	adds	r2, r7, r2
 8008c6a:	8812      	ldrh	r2, [r2, #0]
 8008c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	2bff      	cmp	r3, #255	@ 0xff
 8008c7c:	d911      	bls.n	8008ca2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	22ff      	movs	r2, #255	@ 0xff
 8008c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	2380      	movs	r3, #128	@ 0x80
 8008c8c:	045c      	lsls	r4, r3, #17
 8008c8e:	230a      	movs	r3, #10
 8008c90:	18fb      	adds	r3, r7, r3
 8008c92:	8819      	ldrh	r1, [r3, #0]
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	4b55      	ldr	r3, [pc, #340]	@ (8008dec <HAL_I2C_Master_Receive+0x208>)
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	0023      	movs	r3, r4
 8008c9c:	f000 fb44 	bl	8009328 <I2C_TransferConfig>
 8008ca0:	e076      	b.n	8008d90 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	2380      	movs	r3, #128	@ 0x80
 8008cb4:	049c      	lsls	r4, r3, #18
 8008cb6:	230a      	movs	r3, #10
 8008cb8:	18fb      	adds	r3, r7, r3
 8008cba:	8819      	ldrh	r1, [r3, #0]
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8008dec <HAL_I2C_Master_Receive+0x208>)
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	0023      	movs	r3, r4
 8008cc4:	f000 fb30 	bl	8009328 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008cc8:	e062      	b.n	8008d90 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f000 f993 	bl	8008ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008cd6:	1e03      	subs	r3, r0, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e082      	b.n	8008de4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d03a      	beq.n	8008d90 <HAL_I2C_Master_Receive+0x1ac>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d136      	bne.n	8008d90 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	0013      	movs	r3, r2
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2180      	movs	r1, #128	@ 0x80
 8008d30:	f000 f882 	bl	8008e38 <I2C_WaitOnFlagUntilTimeout>
 8008d34:	1e03      	subs	r3, r0, #0
 8008d36:	d001      	beq.n	8008d3c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e053      	b.n	8008de4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2bff      	cmp	r3, #255	@ 0xff
 8008d44:	d911      	bls.n	8008d6a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	22ff      	movs	r2, #255	@ 0xff
 8008d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	2380      	movs	r3, #128	@ 0x80
 8008d54:	045c      	lsls	r4, r3, #17
 8008d56:	230a      	movs	r3, #10
 8008d58:	18fb      	adds	r3, r7, r3
 8008d5a:	8819      	ldrh	r1, [r3, #0]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	0023      	movs	r3, r4
 8008d64:	f000 fae0 	bl	8009328 <I2C_TransferConfig>
 8008d68:	e012      	b.n	8008d90 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	2380      	movs	r3, #128	@ 0x80
 8008d7c:	049c      	lsls	r4, r3, #18
 8008d7e:	230a      	movs	r3, #10
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	8819      	ldrh	r1, [r3, #0]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	2300      	movs	r3, #0
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	0023      	movs	r3, r4
 8008d8c:	f000 facc 	bl	8009328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d197      	bne.n	8008cca <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	0018      	movs	r0, r3
 8008da2:	f000 f8e7 	bl	8008f74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008da6:	1e03      	subs	r3, r0, #0
 8008da8:	d001      	beq.n	8008dae <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e01a      	b.n	8008de4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2220      	movs	r2, #32
 8008db4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	490b      	ldr	r1, [pc, #44]	@ (8008df0 <HAL_I2C_Master_Receive+0x20c>)
 8008dc2:	400a      	ands	r2, r1
 8008dc4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2241      	movs	r2, #65	@ 0x41
 8008dca:	2120      	movs	r1, #32
 8008dcc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2242      	movs	r2, #66	@ 0x42
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2240      	movs	r2, #64	@ 0x40
 8008dda:	2100      	movs	r1, #0
 8008ddc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e000      	b.n	8008de4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8008de2:	2302      	movs	r3, #2
  }
}
 8008de4:	0018      	movs	r0, r3
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b007      	add	sp, #28
 8008dea:	bd90      	pop	{r4, r7, pc}
 8008dec:	80002400 	.word	0x80002400
 8008df0:	fe00e800 	.word	0xfe00e800

08008df4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	2202      	movs	r2, #2
 8008e04:	4013      	ands	r3, r2
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d103      	bne.n	8008e12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d007      	beq.n	8008e30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	430a      	orrs	r2, r1
 8008e2e:	619a      	str	r2, [r3, #24]
  }
}
 8008e30:	46c0      	nop			@ (mov r8, r8)
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b002      	add	sp, #8
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	603b      	str	r3, [r7, #0]
 8008e44:	1dfb      	adds	r3, r7, #7
 8008e46:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e48:	e03a      	b.n	8008ec0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	0018      	movs	r0, r3
 8008e52:	f000 f971 	bl	8009138 <I2C_IsErrorOccurred>
 8008e56:	1e03      	subs	r3, r0, #0
 8008e58:	d001      	beq.n	8008e5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e040      	b.n	8008ee0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	3301      	adds	r3, #1
 8008e62:	d02d      	beq.n	8008ec0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e64:	f7ff f9f2 	bl	800824c <HAL_GetTick>
 8008e68:	0002      	movs	r2, r0
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <I2C_WaitOnFlagUntilTimeout+0x42>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d122      	bne.n	8008ec0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	4013      	ands	r3, r2
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	425a      	negs	r2, r3
 8008e8a:	4153      	adcs	r3, r2
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	001a      	movs	r2, r3
 8008e90:	1dfb      	adds	r3, r7, #7
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d113      	bne.n	8008ec0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2241      	movs	r2, #65	@ 0x41
 8008ea8:	2120      	movs	r1, #32
 8008eaa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2242      	movs	r2, #66	@ 0x42
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2240      	movs	r2, #64	@ 0x40
 8008eb8:	2100      	movs	r1, #0
 8008eba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e00f      	b.n	8008ee0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	425a      	negs	r2, r3
 8008ed0:	4153      	adcs	r3, r2
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	001a      	movs	r2, r3
 8008ed6:	1dfb      	adds	r3, r7, #7
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d0b5      	beq.n	8008e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	b004      	add	sp, #16
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ef4:	e032      	b.n	8008f5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	68b9      	ldr	r1, [r7, #8]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	0018      	movs	r0, r3
 8008efe:	f000 f91b 	bl	8009138 <I2C_IsErrorOccurred>
 8008f02:	1e03      	subs	r3, r0, #0
 8008f04:	d001      	beq.n	8008f0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e030      	b.n	8008f6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	d025      	beq.n	8008f5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f10:	f7ff f99c 	bl	800824c <HAL_GetTick>
 8008f14:	0002      	movs	r2, r0
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d11a      	bne.n	8008f5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d013      	beq.n	8008f5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f38:	2220      	movs	r2, #32
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2241      	movs	r2, #65	@ 0x41
 8008f44:	2120      	movs	r1, #32
 8008f46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2242      	movs	r2, #66	@ 0x42
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2240      	movs	r2, #64	@ 0x40
 8008f54:	2100      	movs	r1, #0
 8008f56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e007      	b.n	8008f6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	2202      	movs	r2, #2
 8008f64:	4013      	ands	r3, r2
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d1c5      	bne.n	8008ef6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	b004      	add	sp, #16
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f80:	e02f      	b.n	8008fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f000 f8d5 	bl	8009138 <I2C_IsErrorOccurred>
 8008f8e:	1e03      	subs	r3, r0, #0
 8008f90:	d001      	beq.n	8008f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e02d      	b.n	8008ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f96:	f7ff f959 	bl	800824c <HAL_GetTick>
 8008f9a:	0002      	movs	r2, r0
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d302      	bcc.n	8008fac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d11a      	bne.n	8008fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	d013      	beq.n	8008fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2241      	movs	r2, #65	@ 0x41
 8008fca:	2120      	movs	r1, #32
 8008fcc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2242      	movs	r2, #66	@ 0x42
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2240      	movs	r2, #64	@ 0x40
 8008fda:	2100      	movs	r1, #0
 8008fdc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e007      	b.n	8008ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d1c8      	bne.n	8008f82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	b004      	add	sp, #16
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009008:	2317      	movs	r3, #23
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	2200      	movs	r2, #0
 800900e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009010:	e07b      	b.n	800910a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	0018      	movs	r0, r3
 800901a:	f000 f88d 	bl	8009138 <I2C_IsErrorOccurred>
 800901e:	1e03      	subs	r3, r0, #0
 8009020:	d003      	beq.n	800902a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8009022:	2317      	movs	r3, #23
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	2201      	movs	r2, #1
 8009028:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	2220      	movs	r2, #32
 8009032:	4013      	ands	r3, r2
 8009034:	2b20      	cmp	r3, #32
 8009036:	d140      	bne.n	80090ba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8009038:	2117      	movs	r1, #23
 800903a:	187b      	adds	r3, r7, r1
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d13b      	bne.n	80090ba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	2204      	movs	r2, #4
 800904a:	4013      	ands	r3, r2
 800904c:	2b04      	cmp	r3, #4
 800904e:	d106      	bne.n	800905e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009058:	187b      	adds	r3, r7, r1
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	2210      	movs	r2, #16
 8009066:	4013      	ands	r3, r2
 8009068:	2b10      	cmp	r3, #16
 800906a:	d123      	bne.n	80090b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2210      	movs	r2, #16
 8009072:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2204      	movs	r2, #4
 8009078:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2220      	movs	r2, #32
 8009080:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4929      	ldr	r1, [pc, #164]	@ (8009134 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800908e:	400a      	ands	r2, r1
 8009090:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2241      	movs	r2, #65	@ 0x41
 8009096:	2120      	movs	r1, #32
 8009098:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2242      	movs	r2, #66	@ 0x42
 800909e:	2100      	movs	r1, #0
 80090a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2240      	movs	r2, #64	@ 0x40
 80090a6:	2100      	movs	r1, #0
 80090a8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80090aa:	2317      	movs	r3, #23
 80090ac:	18fb      	adds	r3, r7, r3
 80090ae:	2201      	movs	r2, #1
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	e002      	b.n	80090ba <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80090ba:	f7ff f8c7 	bl	800824c <HAL_GetTick>
 80090be:	0002      	movs	r2, r0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d302      	bcc.n	80090d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d11c      	bne.n	800910a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80090d0:	2017      	movs	r0, #23
 80090d2:	183b      	adds	r3, r7, r0
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d117      	bne.n	800910a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	2204      	movs	r2, #4
 80090e2:	4013      	ands	r3, r2
 80090e4:	2b04      	cmp	r3, #4
 80090e6:	d010      	beq.n	800910a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ec:	2220      	movs	r2, #32
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2241      	movs	r2, #65	@ 0x41
 80090f8:	2120      	movs	r1, #32
 80090fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2240      	movs	r2, #64	@ 0x40
 8009100:	2100      	movs	r1, #0
 8009102:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009104:	183b      	adds	r3, r7, r0
 8009106:	2201      	movs	r2, #1
 8009108:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	2204      	movs	r2, #4
 8009112:	4013      	ands	r3, r2
 8009114:	2b04      	cmp	r3, #4
 8009116:	d005      	beq.n	8009124 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009118:	2317      	movs	r3, #23
 800911a:	18fb      	adds	r3, r7, r3
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d100      	bne.n	8009124 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009122:	e776      	b.n	8009012 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8009124:	2317      	movs	r3, #23
 8009126:	18fb      	adds	r3, r7, r3
 8009128:	781b      	ldrb	r3, [r3, #0]
}
 800912a:	0018      	movs	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	b006      	add	sp, #24
 8009130:	bd80      	pop	{r7, pc}
 8009132:	46c0      	nop			@ (mov r8, r8)
 8009134:	fe00e800 	.word	0xfe00e800

08009138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08a      	sub	sp, #40	@ 0x28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009144:	2327      	movs	r3, #39	@ 0x27
 8009146:	18fb      	adds	r3, r7, r3
 8009148:	2200      	movs	r2, #0
 800914a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2210      	movs	r2, #16
 8009160:	4013      	ands	r3, r2
 8009162:	d100      	bne.n	8009166 <I2C_IsErrorOccurred+0x2e>
 8009164:	e079      	b.n	800925a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2210      	movs	r2, #16
 800916c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800916e:	e057      	b.n	8009220 <I2C_IsErrorOccurred+0xe8>
 8009170:	2227      	movs	r2, #39	@ 0x27
 8009172:	18bb      	adds	r3, r7, r2
 8009174:	18ba      	adds	r2, r7, r2
 8009176:	7812      	ldrb	r2, [r2, #0]
 8009178:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	3301      	adds	r3, #1
 800917e:	d04f      	beq.n	8009220 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009180:	f7ff f864 	bl	800824c <HAL_GetTick>
 8009184:	0002      	movs	r2, r0
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	429a      	cmp	r2, r3
 800918e:	d302      	bcc.n	8009196 <I2C_IsErrorOccurred+0x5e>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d144      	bne.n	8009220 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	2380      	movs	r3, #128	@ 0x80
 800919e:	01db      	lsls	r3, r3, #7
 80091a0:	4013      	ands	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80091a4:	2013      	movs	r0, #19
 80091a6:	183b      	adds	r3, r7, r0
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	2142      	movs	r1, #66	@ 0x42
 80091ac:	5c52      	ldrb	r2, [r2, r1]
 80091ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	2380      	movs	r3, #128	@ 0x80
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	401a      	ands	r2, r3
 80091bc:	2380      	movs	r3, #128	@ 0x80
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d126      	bne.n	8009212 <I2C_IsErrorOccurred+0xda>
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	2380      	movs	r3, #128	@ 0x80
 80091c8:	01db      	lsls	r3, r3, #7
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d021      	beq.n	8009212 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80091ce:	183b      	adds	r3, r7, r0
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d01d      	beq.n	8009212 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2180      	movs	r1, #128	@ 0x80
 80091e2:	01c9      	lsls	r1, r1, #7
 80091e4:	430a      	orrs	r2, r1
 80091e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80091e8:	f7ff f830 	bl	800824c <HAL_GetTick>
 80091ec:	0003      	movs	r3, r0
 80091ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091f0:	e00f      	b.n	8009212 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80091f2:	f7ff f82b 	bl	800824c <HAL_GetTick>
 80091f6:	0002      	movs	r2, r0
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	2b19      	cmp	r3, #25
 80091fe:	d908      	bls.n	8009212 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2220      	movs	r2, #32
 8009204:	4313      	orrs	r3, r2
 8009206:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009208:	2327      	movs	r3, #39	@ 0x27
 800920a:	18fb      	adds	r3, r7, r3
 800920c:	2201      	movs	r2, #1
 800920e:	701a      	strb	r2, [r3, #0]

              break;
 8009210:	e006      	b.n	8009220 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2220      	movs	r2, #32
 800921a:	4013      	ands	r3, r2
 800921c:	2b20      	cmp	r3, #32
 800921e:	d1e8      	bne.n	80091f2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	2220      	movs	r2, #32
 8009228:	4013      	ands	r3, r2
 800922a:	2b20      	cmp	r3, #32
 800922c:	d004      	beq.n	8009238 <I2C_IsErrorOccurred+0x100>
 800922e:	2327      	movs	r3, #39	@ 0x27
 8009230:	18fb      	adds	r3, r7, r3
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d09b      	beq.n	8009170 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009238:	2327      	movs	r3, #39	@ 0x27
 800923a:	18fb      	adds	r3, r7, r3
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d103      	bne.n	800924a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2220      	movs	r2, #32
 8009248:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	2204      	movs	r2, #4
 800924e:	4313      	orrs	r3, r2
 8009250:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009252:	2327      	movs	r3, #39	@ 0x27
 8009254:	18fb      	adds	r3, r7, r3
 8009256:	2201      	movs	r2, #1
 8009258:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	4013      	ands	r3, r2
 800926a:	d00c      	beq.n	8009286 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	2201      	movs	r2, #1
 8009270:	4313      	orrs	r3, r2
 8009272:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2280      	movs	r2, #128	@ 0x80
 800927a:	0052      	lsls	r2, r2, #1
 800927c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800927e:	2327      	movs	r3, #39	@ 0x27
 8009280:	18fb      	adds	r3, r7, r3
 8009282:	2201      	movs	r2, #1
 8009284:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	2380      	movs	r3, #128	@ 0x80
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	4013      	ands	r3, r2
 800928e:	d00c      	beq.n	80092aa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	2208      	movs	r2, #8
 8009294:	4313      	orrs	r3, r2
 8009296:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2280      	movs	r2, #128	@ 0x80
 800929e:	00d2      	lsls	r2, r2, #3
 80092a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092a2:	2327      	movs	r3, #39	@ 0x27
 80092a4:	18fb      	adds	r3, r7, r3
 80092a6:	2201      	movs	r2, #1
 80092a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	2380      	movs	r3, #128	@ 0x80
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4013      	ands	r3, r2
 80092b2:	d00c      	beq.n	80092ce <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	2202      	movs	r2, #2
 80092b8:	4313      	orrs	r3, r2
 80092ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2280      	movs	r2, #128	@ 0x80
 80092c2:	0092      	lsls	r2, r2, #2
 80092c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092c6:	2327      	movs	r3, #39	@ 0x27
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80092ce:	2327      	movs	r3, #39	@ 0x27
 80092d0:	18fb      	adds	r3, r7, r3
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d01d      	beq.n	8009314 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	0018      	movs	r0, r3
 80092dc:	f7ff fd8a 	bl	8008df4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	490e      	ldr	r1, [pc, #56]	@ (8009324 <I2C_IsErrorOccurred+0x1ec>)
 80092ec:	400a      	ands	r2, r1
 80092ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	431a      	orrs	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2241      	movs	r2, #65	@ 0x41
 8009300:	2120      	movs	r1, #32
 8009302:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2242      	movs	r2, #66	@ 0x42
 8009308:	2100      	movs	r1, #0
 800930a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2240      	movs	r2, #64	@ 0x40
 8009310:	2100      	movs	r1, #0
 8009312:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009314:	2327      	movs	r3, #39	@ 0x27
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	781b      	ldrb	r3, [r3, #0]
}
 800931a:	0018      	movs	r0, r3
 800931c:	46bd      	mov	sp, r7
 800931e:	b00a      	add	sp, #40	@ 0x28
 8009320:	bd80      	pop	{r7, pc}
 8009322:	46c0      	nop			@ (mov r8, r8)
 8009324:	fe00e800 	.word	0xfe00e800

08009328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009328:	b590      	push	{r4, r7, lr}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	0008      	movs	r0, r1
 8009332:	0011      	movs	r1, r2
 8009334:	607b      	str	r3, [r7, #4]
 8009336:	240a      	movs	r4, #10
 8009338:	193b      	adds	r3, r7, r4
 800933a:	1c02      	adds	r2, r0, #0
 800933c:	801a      	strh	r2, [r3, #0]
 800933e:	2009      	movs	r0, #9
 8009340:	183b      	adds	r3, r7, r0
 8009342:	1c0a      	adds	r2, r1, #0
 8009344:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009346:	193b      	adds	r3, r7, r4
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	059b      	lsls	r3, r3, #22
 800934c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800934e:	183b      	adds	r3, r7, r0
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	0419      	lsls	r1, r3, #16
 8009354:	23ff      	movs	r3, #255	@ 0xff
 8009356:	041b      	lsls	r3, r3, #16
 8009358:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800935a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	4313      	orrs	r3, r2
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009372:	0d51      	lsrs	r1, r2, #21
 8009374:	2280      	movs	r2, #128	@ 0x80
 8009376:	00d2      	lsls	r2, r2, #3
 8009378:	400a      	ands	r2, r1
 800937a:	4907      	ldr	r1, [pc, #28]	@ (8009398 <I2C_TransferConfig+0x70>)
 800937c:	430a      	orrs	r2, r1
 800937e:	43d2      	mvns	r2, r2
 8009380:	401a      	ands	r2, r3
 8009382:	0011      	movs	r1, r2
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	430a      	orrs	r2, r1
 800938c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800938e:	46c0      	nop			@ (mov r8, r8)
 8009390:	46bd      	mov	sp, r7
 8009392:	b007      	add	sp, #28
 8009394:	bd90      	pop	{r4, r7, pc}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	03ff63ff 	.word	0x03ff63ff

0800939c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2241      	movs	r2, #65	@ 0x41
 80093aa:	5c9b      	ldrb	r3, [r3, r2]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d138      	bne.n	8009424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2240      	movs	r2, #64	@ 0x40
 80093b6:	5c9b      	ldrb	r3, [r3, r2]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80093bc:	2302      	movs	r3, #2
 80093be:	e032      	b.n	8009426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2240      	movs	r2, #64	@ 0x40
 80093c4:	2101      	movs	r1, #1
 80093c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2241      	movs	r2, #65	@ 0x41
 80093cc:	2124      	movs	r1, #36	@ 0x24
 80093ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2101      	movs	r1, #1
 80093dc:	438a      	bics	r2, r1
 80093de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4911      	ldr	r1, [pc, #68]	@ (8009430 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80093ec:	400a      	ands	r2, r1
 80093ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6819      	ldr	r1, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2101      	movs	r1, #1
 800940c:	430a      	orrs	r2, r1
 800940e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2241      	movs	r2, #65	@ 0x41
 8009414:	2120      	movs	r1, #32
 8009416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2240      	movs	r2, #64	@ 0x40
 800941c:	2100      	movs	r1, #0
 800941e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	e000      	b.n	8009426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009424:	2302      	movs	r3, #2
  }
}
 8009426:	0018      	movs	r0, r3
 8009428:	46bd      	mov	sp, r7
 800942a:	b002      	add	sp, #8
 800942c:	bd80      	pop	{r7, pc}
 800942e:	46c0      	nop			@ (mov r8, r8)
 8009430:	ffffefff 	.word	0xffffefff

08009434 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2241      	movs	r2, #65	@ 0x41
 8009442:	5c9b      	ldrb	r3, [r3, r2]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b20      	cmp	r3, #32
 8009448:	d139      	bne.n	80094be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2240      	movs	r2, #64	@ 0x40
 800944e:	5c9b      	ldrb	r3, [r3, r2]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d101      	bne.n	8009458 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009454:	2302      	movs	r3, #2
 8009456:	e033      	b.n	80094c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2240      	movs	r2, #64	@ 0x40
 800945c:	2101      	movs	r1, #1
 800945e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2241      	movs	r2, #65	@ 0x41
 8009464:	2124      	movs	r1, #36	@ 0x24
 8009466:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2101      	movs	r1, #1
 8009474:	438a      	bics	r2, r1
 8009476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4a11      	ldr	r2, [pc, #68]	@ (80094c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009484:	4013      	ands	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2101      	movs	r1, #1
 80094a6:	430a      	orrs	r2, r1
 80094a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2241      	movs	r2, #65	@ 0x41
 80094ae:	2120      	movs	r1, #32
 80094b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2240      	movs	r2, #64	@ 0x40
 80094b6:	2100      	movs	r1, #0
 80094b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	e000      	b.n	80094c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80094be:	2302      	movs	r3, #2
  }
}
 80094c0:	0018      	movs	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	b004      	add	sp, #16
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	fffff0ff 	.word	0xfffff0ff

080094cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80094d4:	4b19      	ldr	r3, [pc, #100]	@ (800953c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a19      	ldr	r2, [pc, #100]	@ (8009540 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80094da:	4013      	ands	r3, r2
 80094dc:	0019      	movs	r1, r3
 80094de:	4b17      	ldr	r3, [pc, #92]	@ (800953c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	2380      	movs	r3, #128	@ 0x80
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d11f      	bne.n	8009530 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80094f0:	4b14      	ldr	r3, [pc, #80]	@ (8009544 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	0013      	movs	r3, r2
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	189b      	adds	r3, r3, r2
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	4912      	ldr	r1, [pc, #72]	@ (8009548 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80094fe:	0018      	movs	r0, r3
 8009500:	f7f6 fe26 	bl	8000150 <__udivsi3>
 8009504:	0003      	movs	r3, r0
 8009506:	3301      	adds	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800950a:	e008      	b.n	800951e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3b01      	subs	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	e001      	b.n	800951e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e009      	b.n	8009532 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800951e:	4b07      	ldr	r3, [pc, #28]	@ (800953c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	2380      	movs	r3, #128	@ 0x80
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	401a      	ands	r2, r3
 8009528:	2380      	movs	r3, #128	@ 0x80
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	429a      	cmp	r2, r3
 800952e:	d0ed      	beq.n	800950c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	0018      	movs	r0, r3
 8009534:	46bd      	mov	sp, r7
 8009536:	b004      	add	sp, #16
 8009538:	bd80      	pop	{r7, pc}
 800953a:	46c0      	nop			@ (mov r8, r8)
 800953c:	40007000 	.word	0x40007000
 8009540:	fffff9ff 	.word	0xfffff9ff
 8009544:	200009a8 	.word	0x200009a8
 8009548:	000f4240 	.word	0x000f4240

0800954c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009550:	4b03      	ldr	r3, [pc, #12]	@ (8009560 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	23e0      	movs	r3, #224	@ 0xe0
 8009556:	01db      	lsls	r3, r3, #7
 8009558:	4013      	ands	r3, r2
}
 800955a:	0018      	movs	r0, r3
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40021000 	.word	0x40021000

08009564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	f000 fb50 	bl	8009c18 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2201      	movs	r2, #1
 800957e:	4013      	ands	r3, r2
 8009580:	d100      	bne.n	8009584 <HAL_RCC_OscConfig+0x20>
 8009582:	e07c      	b.n	800967e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009584:	4bc3      	ldr	r3, [pc, #780]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2238      	movs	r2, #56	@ 0x38
 800958a:	4013      	ands	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800958e:	4bc1      	ldr	r3, [pc, #772]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2203      	movs	r2, #3
 8009594:	4013      	ands	r3, r2
 8009596:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2b10      	cmp	r3, #16
 800959c:	d102      	bne.n	80095a4 <HAL_RCC_OscConfig+0x40>
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d002      	beq.n	80095aa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	2b08      	cmp	r3, #8
 80095a8:	d10b      	bne.n	80095c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095aa:	4bba      	ldr	r3, [pc, #744]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	2380      	movs	r3, #128	@ 0x80
 80095b0:	029b      	lsls	r3, r3, #10
 80095b2:	4013      	ands	r3, r2
 80095b4:	d062      	beq.n	800967c <HAL_RCC_OscConfig+0x118>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d15e      	bne.n	800967c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e32a      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	2380      	movs	r3, #128	@ 0x80
 80095c8:	025b      	lsls	r3, r3, #9
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d107      	bne.n	80095de <HAL_RCC_OscConfig+0x7a>
 80095ce:	4bb1      	ldr	r3, [pc, #708]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4bb0      	ldr	r3, [pc, #704]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80095d4:	2180      	movs	r1, #128	@ 0x80
 80095d6:	0249      	lsls	r1, r1, #9
 80095d8:	430a      	orrs	r2, r1
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	e020      	b.n	8009620 <HAL_RCC_OscConfig+0xbc>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	23a0      	movs	r3, #160	@ 0xa0
 80095e4:	02db      	lsls	r3, r3, #11
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d10e      	bne.n	8009608 <HAL_RCC_OscConfig+0xa4>
 80095ea:	4baa      	ldr	r3, [pc, #680]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4ba9      	ldr	r3, [pc, #676]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80095f0:	2180      	movs	r1, #128	@ 0x80
 80095f2:	02c9      	lsls	r1, r1, #11
 80095f4:	430a      	orrs	r2, r1
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	4ba6      	ldr	r3, [pc, #664]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	4ba5      	ldr	r3, [pc, #660]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80095fe:	2180      	movs	r1, #128	@ 0x80
 8009600:	0249      	lsls	r1, r1, #9
 8009602:	430a      	orrs	r2, r1
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e00b      	b.n	8009620 <HAL_RCC_OscConfig+0xbc>
 8009608:	4ba2      	ldr	r3, [pc, #648]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	4ba1      	ldr	r3, [pc, #644]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800960e:	49a2      	ldr	r1, [pc, #648]	@ (8009898 <HAL_RCC_OscConfig+0x334>)
 8009610:	400a      	ands	r2, r1
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	4b9f      	ldr	r3, [pc, #636]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	4b9e      	ldr	r3, [pc, #632]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800961a:	49a0      	ldr	r1, [pc, #640]	@ (800989c <HAL_RCC_OscConfig+0x338>)
 800961c:	400a      	ands	r2, r1
 800961e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d014      	beq.n	8009652 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009628:	f7fe fe10 	bl	800824c <HAL_GetTick>
 800962c:	0003      	movs	r3, r0
 800962e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009630:	e008      	b.n	8009644 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009632:	f7fe fe0b 	bl	800824c <HAL_GetTick>
 8009636:	0002      	movs	r2, r0
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b64      	cmp	r3, #100	@ 0x64
 800963e:	d901      	bls.n	8009644 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e2e9      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009644:	4b93      	ldr	r3, [pc, #588]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	2380      	movs	r3, #128	@ 0x80
 800964a:	029b      	lsls	r3, r3, #10
 800964c:	4013      	ands	r3, r2
 800964e:	d0f0      	beq.n	8009632 <HAL_RCC_OscConfig+0xce>
 8009650:	e015      	b.n	800967e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009652:	f7fe fdfb 	bl	800824c <HAL_GetTick>
 8009656:	0003      	movs	r3, r0
 8009658:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800965a:	e008      	b.n	800966e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800965c:	f7fe fdf6 	bl	800824c <HAL_GetTick>
 8009660:	0002      	movs	r2, r0
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	2b64      	cmp	r3, #100	@ 0x64
 8009668:	d901      	bls.n	800966e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	e2d4      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800966e:	4b89      	ldr	r3, [pc, #548]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	2380      	movs	r3, #128	@ 0x80
 8009674:	029b      	lsls	r3, r3, #10
 8009676:	4013      	ands	r3, r2
 8009678:	d1f0      	bne.n	800965c <HAL_RCC_OscConfig+0xf8>
 800967a:	e000      	b.n	800967e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800967c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2202      	movs	r2, #2
 8009684:	4013      	ands	r3, r2
 8009686:	d100      	bne.n	800968a <HAL_RCC_OscConfig+0x126>
 8009688:	e099      	b.n	80097be <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800968a:	4b82      	ldr	r3, [pc, #520]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	2238      	movs	r2, #56	@ 0x38
 8009690:	4013      	ands	r3, r2
 8009692:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009694:	4b7f      	ldr	r3, [pc, #508]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	2203      	movs	r2, #3
 800969a:	4013      	ands	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2b10      	cmp	r3, #16
 80096a2:	d102      	bne.n	80096aa <HAL_RCC_OscConfig+0x146>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d002      	beq.n	80096b0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d135      	bne.n	800971c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096b0:	4b78      	ldr	r3, [pc, #480]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	2380      	movs	r3, #128	@ 0x80
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	4013      	ands	r3, r2
 80096ba:	d005      	beq.n	80096c8 <HAL_RCC_OscConfig+0x164>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e2a7      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c8:	4b72      	ldr	r3, [pc, #456]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	4a74      	ldr	r2, [pc, #464]	@ (80098a0 <HAL_RCC_OscConfig+0x33c>)
 80096ce:	4013      	ands	r3, r2
 80096d0:	0019      	movs	r1, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	021a      	lsls	r2, r3, #8
 80096d8:	4b6e      	ldr	r3, [pc, #440]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80096da:	430a      	orrs	r2, r1
 80096dc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d112      	bne.n	800970a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80096e4:	4b6b      	ldr	r3, [pc, #428]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a6e      	ldr	r2, [pc, #440]	@ (80098a4 <HAL_RCC_OscConfig+0x340>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	0019      	movs	r1, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	691a      	ldr	r2, [r3, #16]
 80096f2:	4b68      	ldr	r3, [pc, #416]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80096f4:	430a      	orrs	r2, r1
 80096f6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80096f8:	4b66      	ldr	r3, [pc, #408]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	0adb      	lsrs	r3, r3, #11
 80096fe:	2207      	movs	r2, #7
 8009700:	4013      	ands	r3, r2
 8009702:	4a69      	ldr	r2, [pc, #420]	@ (80098a8 <HAL_RCC_OscConfig+0x344>)
 8009704:	40da      	lsrs	r2, r3
 8009706:	4b69      	ldr	r3, [pc, #420]	@ (80098ac <HAL_RCC_OscConfig+0x348>)
 8009708:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800970a:	4b69      	ldr	r3, [pc, #420]	@ (80098b0 <HAL_RCC_OscConfig+0x34c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	0018      	movs	r0, r3
 8009710:	f7fe fd40 	bl	8008194 <HAL_InitTick>
 8009714:	1e03      	subs	r3, r0, #0
 8009716:	d051      	beq.n	80097bc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e27d      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d030      	beq.n	8009786 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009724:	4b5b      	ldr	r3, [pc, #364]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a5e      	ldr	r2, [pc, #376]	@ (80098a4 <HAL_RCC_OscConfig+0x340>)
 800972a:	4013      	ands	r3, r2
 800972c:	0019      	movs	r1, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	691a      	ldr	r2, [r3, #16]
 8009732:	4b58      	ldr	r3, [pc, #352]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009734:	430a      	orrs	r2, r1
 8009736:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009738:	4b56      	ldr	r3, [pc, #344]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	4b55      	ldr	r3, [pc, #340]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800973e:	2180      	movs	r1, #128	@ 0x80
 8009740:	0049      	lsls	r1, r1, #1
 8009742:	430a      	orrs	r2, r1
 8009744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009746:	f7fe fd81 	bl	800824c <HAL_GetTick>
 800974a:	0003      	movs	r3, r0
 800974c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800974e:	e008      	b.n	8009762 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009750:	f7fe fd7c 	bl	800824c <HAL_GetTick>
 8009754:	0002      	movs	r2, r0
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d901      	bls.n	8009762 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e25a      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009762:	4b4c      	ldr	r3, [pc, #304]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	2380      	movs	r3, #128	@ 0x80
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	4013      	ands	r3, r2
 800976c:	d0f0      	beq.n	8009750 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800976e:	4b49      	ldr	r3, [pc, #292]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	4a4b      	ldr	r2, [pc, #300]	@ (80098a0 <HAL_RCC_OscConfig+0x33c>)
 8009774:	4013      	ands	r3, r2
 8009776:	0019      	movs	r1, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	021a      	lsls	r2, r3, #8
 800977e:	4b45      	ldr	r3, [pc, #276]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009780:	430a      	orrs	r2, r1
 8009782:	605a      	str	r2, [r3, #4]
 8009784:	e01b      	b.n	80097be <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009786:	4b43      	ldr	r3, [pc, #268]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	4b42      	ldr	r3, [pc, #264]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800978c:	4949      	ldr	r1, [pc, #292]	@ (80098b4 <HAL_RCC_OscConfig+0x350>)
 800978e:	400a      	ands	r2, r1
 8009790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009792:	f7fe fd5b 	bl	800824c <HAL_GetTick>
 8009796:	0003      	movs	r3, r0
 8009798:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800979a:	e008      	b.n	80097ae <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800979c:	f7fe fd56 	bl	800824c <HAL_GetTick>
 80097a0:	0002      	movs	r2, r0
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d901      	bls.n	80097ae <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e234      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097ae:	4b39      	ldr	r3, [pc, #228]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	2380      	movs	r3, #128	@ 0x80
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	4013      	ands	r3, r2
 80097b8:	d1f0      	bne.n	800979c <HAL_RCC_OscConfig+0x238>
 80097ba:	e000      	b.n	80097be <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097bc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2208      	movs	r2, #8
 80097c4:	4013      	ands	r3, r2
 80097c6:	d047      	beq.n	8009858 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80097c8:	4b32      	ldr	r3, [pc, #200]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	2238      	movs	r2, #56	@ 0x38
 80097ce:	4013      	ands	r3, r2
 80097d0:	2b18      	cmp	r3, #24
 80097d2:	d10a      	bne.n	80097ea <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80097d4:	4b2f      	ldr	r3, [pc, #188]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80097d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097d8:	2202      	movs	r2, #2
 80097da:	4013      	ands	r3, r2
 80097dc:	d03c      	beq.n	8009858 <HAL_RCC_OscConfig+0x2f4>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d138      	bne.n	8009858 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e216      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d019      	beq.n	8009826 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80097f2:	4b28      	ldr	r3, [pc, #160]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80097f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80097f6:	4b27      	ldr	r3, [pc, #156]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 80097f8:	2101      	movs	r1, #1
 80097fa:	430a      	orrs	r2, r1
 80097fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fe:	f7fe fd25 	bl	800824c <HAL_GetTick>
 8009802:	0003      	movs	r3, r0
 8009804:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009808:	f7fe fd20 	bl	800824c <HAL_GetTick>
 800980c:	0002      	movs	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e1fe      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800981a:	4b1e      	ldr	r3, [pc, #120]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800981c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800981e:	2202      	movs	r2, #2
 8009820:	4013      	ands	r3, r2
 8009822:	d0f1      	beq.n	8009808 <HAL_RCC_OscConfig+0x2a4>
 8009824:	e018      	b.n	8009858 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009826:	4b1b      	ldr	r3, [pc, #108]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009828:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800982a:	4b1a      	ldr	r3, [pc, #104]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800982c:	2101      	movs	r1, #1
 800982e:	438a      	bics	r2, r1
 8009830:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009832:	f7fe fd0b 	bl	800824c <HAL_GetTick>
 8009836:	0003      	movs	r3, r0
 8009838:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800983c:	f7fe fd06 	bl	800824c <HAL_GetTick>
 8009840:	0002      	movs	r2, r0
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e1e4      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800984e:	4b11      	ldr	r3, [pc, #68]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 8009850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009852:	2202      	movs	r2, #2
 8009854:	4013      	ands	r3, r2
 8009856:	d1f1      	bne.n	800983c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2204      	movs	r2, #4
 800985e:	4013      	ands	r3, r2
 8009860:	d100      	bne.n	8009864 <HAL_RCC_OscConfig+0x300>
 8009862:	e0c7      	b.n	80099f4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009864:	231f      	movs	r3, #31
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	2200      	movs	r2, #0
 800986a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800986c:	4b09      	ldr	r3, [pc, #36]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	2238      	movs	r2, #56	@ 0x38
 8009872:	4013      	ands	r3, r2
 8009874:	2b20      	cmp	r3, #32
 8009876:	d11f      	bne.n	80098b8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009878:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <HAL_RCC_OscConfig+0x330>)
 800987a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800987c:	2202      	movs	r2, #2
 800987e:	4013      	ands	r3, r2
 8009880:	d100      	bne.n	8009884 <HAL_RCC_OscConfig+0x320>
 8009882:	e0b7      	b.n	80099f4 <HAL_RCC_OscConfig+0x490>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d000      	beq.n	800988e <HAL_RCC_OscConfig+0x32a>
 800988c:	e0b2      	b.n	80099f4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e1c2      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
 8009892:	46c0      	nop			@ (mov r8, r8)
 8009894:	40021000 	.word	0x40021000
 8009898:	fffeffff 	.word	0xfffeffff
 800989c:	fffbffff 	.word	0xfffbffff
 80098a0:	ffff80ff 	.word	0xffff80ff
 80098a4:	ffffc7ff 	.word	0xffffc7ff
 80098a8:	00f42400 	.word	0x00f42400
 80098ac:	200009a8 	.word	0x200009a8
 80098b0:	200009ac 	.word	0x200009ac
 80098b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80098b8:	4bb5      	ldr	r3, [pc, #724]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80098ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098bc:	2380      	movs	r3, #128	@ 0x80
 80098be:	055b      	lsls	r3, r3, #21
 80098c0:	4013      	ands	r3, r2
 80098c2:	d101      	bne.n	80098c8 <HAL_RCC_OscConfig+0x364>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e000      	b.n	80098ca <HAL_RCC_OscConfig+0x366>
 80098c8:	2300      	movs	r3, #0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d011      	beq.n	80098f2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80098ce:	4bb0      	ldr	r3, [pc, #704]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80098d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098d2:	4baf      	ldr	r3, [pc, #700]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80098d4:	2180      	movs	r1, #128	@ 0x80
 80098d6:	0549      	lsls	r1, r1, #21
 80098d8:	430a      	orrs	r2, r1
 80098da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80098dc:	4bac      	ldr	r3, [pc, #688]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80098de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098e0:	2380      	movs	r3, #128	@ 0x80
 80098e2:	055b      	lsls	r3, r3, #21
 80098e4:	4013      	ands	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80098ea:	231f      	movs	r3, #31
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098f2:	4ba8      	ldr	r3, [pc, #672]	@ (8009b94 <HAL_RCC_OscConfig+0x630>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	2380      	movs	r3, #128	@ 0x80
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	4013      	ands	r3, r2
 80098fc:	d11a      	bne.n	8009934 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098fe:	4ba5      	ldr	r3, [pc, #660]	@ (8009b94 <HAL_RCC_OscConfig+0x630>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4ba4      	ldr	r3, [pc, #656]	@ (8009b94 <HAL_RCC_OscConfig+0x630>)
 8009904:	2180      	movs	r1, #128	@ 0x80
 8009906:	0049      	lsls	r1, r1, #1
 8009908:	430a      	orrs	r2, r1
 800990a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800990c:	f7fe fc9e 	bl	800824c <HAL_GetTick>
 8009910:	0003      	movs	r3, r0
 8009912:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009914:	e008      	b.n	8009928 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009916:	f7fe fc99 	bl	800824c <HAL_GetTick>
 800991a:	0002      	movs	r2, r0
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	2b02      	cmp	r3, #2
 8009922:	d901      	bls.n	8009928 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e177      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009928:	4b9a      	ldr	r3, [pc, #616]	@ (8009b94 <HAL_RCC_OscConfig+0x630>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	2380      	movs	r3, #128	@ 0x80
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	4013      	ands	r3, r2
 8009932:	d0f0      	beq.n	8009916 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d106      	bne.n	800994a <HAL_RCC_OscConfig+0x3e6>
 800993c:	4b94      	ldr	r3, [pc, #592]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 800993e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009940:	4b93      	ldr	r3, [pc, #588]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009942:	2101      	movs	r1, #1
 8009944:	430a      	orrs	r2, r1
 8009946:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009948:	e01c      	b.n	8009984 <HAL_RCC_OscConfig+0x420>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	2b05      	cmp	r3, #5
 8009950:	d10c      	bne.n	800996c <HAL_RCC_OscConfig+0x408>
 8009952:	4b8f      	ldr	r3, [pc, #572]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009956:	4b8e      	ldr	r3, [pc, #568]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009958:	2104      	movs	r1, #4
 800995a:	430a      	orrs	r2, r1
 800995c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800995e:	4b8c      	ldr	r3, [pc, #560]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009962:	4b8b      	ldr	r3, [pc, #556]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009964:	2101      	movs	r1, #1
 8009966:	430a      	orrs	r2, r1
 8009968:	65da      	str	r2, [r3, #92]	@ 0x5c
 800996a:	e00b      	b.n	8009984 <HAL_RCC_OscConfig+0x420>
 800996c:	4b88      	ldr	r3, [pc, #544]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 800996e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009970:	4b87      	ldr	r3, [pc, #540]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009972:	2101      	movs	r1, #1
 8009974:	438a      	bics	r2, r1
 8009976:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009978:	4b85      	ldr	r3, [pc, #532]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 800997a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800997c:	4b84      	ldr	r3, [pc, #528]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 800997e:	2104      	movs	r1, #4
 8009980:	438a      	bics	r2, r1
 8009982:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d014      	beq.n	80099b6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998c:	f7fe fc5e 	bl	800824c <HAL_GetTick>
 8009990:	0003      	movs	r3, r0
 8009992:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009994:	e009      	b.n	80099aa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009996:	f7fe fc59 	bl	800824c <HAL_GetTick>
 800999a:	0002      	movs	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	4a7d      	ldr	r2, [pc, #500]	@ (8009b98 <HAL_RCC_OscConfig+0x634>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e136      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099aa:	4b79      	ldr	r3, [pc, #484]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80099ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099ae:	2202      	movs	r2, #2
 80099b0:	4013      	ands	r3, r2
 80099b2:	d0f0      	beq.n	8009996 <HAL_RCC_OscConfig+0x432>
 80099b4:	e013      	b.n	80099de <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b6:	f7fe fc49 	bl	800824c <HAL_GetTick>
 80099ba:	0003      	movs	r3, r0
 80099bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099be:	e009      	b.n	80099d4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099c0:	f7fe fc44 	bl	800824c <HAL_GetTick>
 80099c4:	0002      	movs	r2, r0
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	4a73      	ldr	r2, [pc, #460]	@ (8009b98 <HAL_RCC_OscConfig+0x634>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d901      	bls.n	80099d4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e121      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099d4:	4b6e      	ldr	r3, [pc, #440]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80099d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099d8:	2202      	movs	r2, #2
 80099da:	4013      	ands	r3, r2
 80099dc:	d1f0      	bne.n	80099c0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80099de:	231f      	movs	r3, #31
 80099e0:	18fb      	adds	r3, r7, r3
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d105      	bne.n	80099f4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80099e8:	4b69      	ldr	r3, [pc, #420]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80099ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ec:	4b68      	ldr	r3, [pc, #416]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 80099ee:	496b      	ldr	r1, [pc, #428]	@ (8009b9c <HAL_RCC_OscConfig+0x638>)
 80099f0:	400a      	ands	r2, r1
 80099f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2220      	movs	r2, #32
 80099fa:	4013      	ands	r3, r2
 80099fc:	d039      	beq.n	8009a72 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01b      	beq.n	8009a3e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009a06:	4b62      	ldr	r3, [pc, #392]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	4b61      	ldr	r3, [pc, #388]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a0c:	2180      	movs	r1, #128	@ 0x80
 8009a0e:	03c9      	lsls	r1, r1, #15
 8009a10:	430a      	orrs	r2, r1
 8009a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a14:	f7fe fc1a 	bl	800824c <HAL_GetTick>
 8009a18:	0003      	movs	r3, r0
 8009a1a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009a1c:	e008      	b.n	8009a30 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a1e:	f7fe fc15 	bl	800824c <HAL_GetTick>
 8009a22:	0002      	movs	r2, r0
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d901      	bls.n	8009a30 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e0f3      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009a30:	4b57      	ldr	r3, [pc, #348]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	2380      	movs	r3, #128	@ 0x80
 8009a36:	041b      	lsls	r3, r3, #16
 8009a38:	4013      	ands	r3, r2
 8009a3a:	d0f0      	beq.n	8009a1e <HAL_RCC_OscConfig+0x4ba>
 8009a3c:	e019      	b.n	8009a72 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009a3e:	4b54      	ldr	r3, [pc, #336]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4b53      	ldr	r3, [pc, #332]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a44:	4956      	ldr	r1, [pc, #344]	@ (8009ba0 <HAL_RCC_OscConfig+0x63c>)
 8009a46:	400a      	ands	r2, r1
 8009a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4a:	f7fe fbff 	bl	800824c <HAL_GetTick>
 8009a4e:	0003      	movs	r3, r0
 8009a50:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009a52:	e008      	b.n	8009a66 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009a54:	f7fe fbfa 	bl	800824c <HAL_GetTick>
 8009a58:	0002      	movs	r2, r0
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d901      	bls.n	8009a66 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e0d8      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009a66:	4b4a      	ldr	r3, [pc, #296]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	2380      	movs	r3, #128	@ 0x80
 8009a6c:	041b      	lsls	r3, r3, #16
 8009a6e:	4013      	ands	r3, r2
 8009a70:	d1f0      	bne.n	8009a54 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d100      	bne.n	8009a7c <HAL_RCC_OscConfig+0x518>
 8009a7a:	e0cc      	b.n	8009c16 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a7c:	4b44      	ldr	r3, [pc, #272]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2238      	movs	r2, #56	@ 0x38
 8009a82:	4013      	ands	r3, r2
 8009a84:	2b10      	cmp	r3, #16
 8009a86:	d100      	bne.n	8009a8a <HAL_RCC_OscConfig+0x526>
 8009a88:	e07b      	b.n	8009b82 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d156      	bne.n	8009b40 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a92:	4b3f      	ldr	r3, [pc, #252]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	4b3e      	ldr	r3, [pc, #248]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009a98:	4942      	ldr	r1, [pc, #264]	@ (8009ba4 <HAL_RCC_OscConfig+0x640>)
 8009a9a:	400a      	ands	r2, r1
 8009a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a9e:	f7fe fbd5 	bl	800824c <HAL_GetTick>
 8009aa2:	0003      	movs	r3, r0
 8009aa4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aa6:	e008      	b.n	8009aba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009aa8:	f7fe fbd0 	bl	800824c <HAL_GetTick>
 8009aac:	0002      	movs	r2, r0
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d901      	bls.n	8009aba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e0ae      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aba:	4b35      	ldr	r3, [pc, #212]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	2380      	movs	r3, #128	@ 0x80
 8009ac0:	049b      	lsls	r3, r3, #18
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	d1f0      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ac6:	4b32      	ldr	r3, [pc, #200]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	4a37      	ldr	r2, [pc, #220]	@ (8009ba8 <HAL_RCC_OscConfig+0x644>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	0019      	movs	r1, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ade:	021b      	lsls	r3, r3, #8
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af2:	431a      	orrs	r2, r3
 8009af4:	4b26      	ldr	r3, [pc, #152]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009af6:	430a      	orrs	r2, r1
 8009af8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009afa:	4b25      	ldr	r3, [pc, #148]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b24      	ldr	r3, [pc, #144]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b00:	2180      	movs	r1, #128	@ 0x80
 8009b02:	0449      	lsls	r1, r1, #17
 8009b04:	430a      	orrs	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009b08:	4b21      	ldr	r3, [pc, #132]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	4b20      	ldr	r3, [pc, #128]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b0e:	2180      	movs	r1, #128	@ 0x80
 8009b10:	0549      	lsls	r1, r1, #21
 8009b12:	430a      	orrs	r2, r1
 8009b14:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b16:	f7fe fb99 	bl	800824c <HAL_GetTick>
 8009b1a:	0003      	movs	r3, r0
 8009b1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b1e:	e008      	b.n	8009b32 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b20:	f7fe fb94 	bl	800824c <HAL_GetTick>
 8009b24:	0002      	movs	r2, r0
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e072      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b32:	4b17      	ldr	r3, [pc, #92]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	2380      	movs	r3, #128	@ 0x80
 8009b38:	049b      	lsls	r3, r3, #18
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	d0f0      	beq.n	8009b20 <HAL_RCC_OscConfig+0x5bc>
 8009b3e:	e06a      	b.n	8009c16 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b40:	4b13      	ldr	r3, [pc, #76]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	4b12      	ldr	r3, [pc, #72]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b46:	4917      	ldr	r1, [pc, #92]	@ (8009ba4 <HAL_RCC_OscConfig+0x640>)
 8009b48:	400a      	ands	r2, r1
 8009b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4c:	f7fe fb7e 	bl	800824c <HAL_GetTick>
 8009b50:	0003      	movs	r3, r0
 8009b52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b54:	e008      	b.n	8009b68 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b56:	f7fe fb79 	bl	800824c <HAL_GetTick>
 8009b5a:	0002      	movs	r2, r0
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e057      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009b68:	4b09      	ldr	r3, [pc, #36]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	2380      	movs	r3, #128	@ 0x80
 8009b6e:	049b      	lsls	r3, r3, #18
 8009b70:	4013      	ands	r3, r2
 8009b72:	d1f0      	bne.n	8009b56 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009b74:	4b06      	ldr	r3, [pc, #24]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	4b05      	ldr	r3, [pc, #20]	@ (8009b90 <HAL_RCC_OscConfig+0x62c>)
 8009b7a:	490c      	ldr	r1, [pc, #48]	@ (8009bac <HAL_RCC_OscConfig+0x648>)
 8009b7c:	400a      	ands	r2, r1
 8009b7e:	60da      	str	r2, [r3, #12]
 8009b80:	e049      	b.n	8009c16 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d112      	bne.n	8009bb0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e044      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
 8009b8e:	46c0      	nop			@ (mov r8, r8)
 8009b90:	40021000 	.word	0x40021000
 8009b94:	40007000 	.word	0x40007000
 8009b98:	00001388 	.word	0x00001388
 8009b9c:	efffffff 	.word	0xefffffff
 8009ba0:	ffbfffff 	.word	0xffbfffff
 8009ba4:	feffffff 	.word	0xfeffffff
 8009ba8:	11c1808c 	.word	0x11c1808c
 8009bac:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8009c20 <HAL_RCC_OscConfig+0x6bc>)
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2203      	movs	r2, #3
 8009bba:	401a      	ands	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d126      	bne.n	8009c12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2270      	movs	r2, #112	@ 0x70
 8009bc8:	401a      	ands	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d11f      	bne.n	8009c12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	23fe      	movs	r3, #254	@ 0xfe
 8009bd6:	01db      	lsls	r3, r3, #7
 8009bd8:	401a      	ands	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bde:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d116      	bne.n	8009c12 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009be4:	697a      	ldr	r2, [r7, #20]
 8009be6:	23f8      	movs	r3, #248	@ 0xf8
 8009be8:	039b      	lsls	r3, r3, #14
 8009bea:	401a      	ands	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d10e      	bne.n	8009c12 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	23e0      	movs	r3, #224	@ 0xe0
 8009bf8:	051b      	lsls	r3, r3, #20
 8009bfa:	401a      	ands	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d106      	bne.n	8009c12 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	0f5b      	lsrs	r3, r3, #29
 8009c08:	075a      	lsls	r2, r3, #29
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d001      	beq.n	8009c16 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	0018      	movs	r0, r3
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	b008      	add	sp, #32
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	40021000 	.word	0x40021000

08009c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e0e9      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c38:	4b76      	ldr	r3, [pc, #472]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2207      	movs	r2, #7
 8009c3e:	4013      	ands	r3, r2
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d91e      	bls.n	8009c84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c46:	4b73      	ldr	r3, [pc, #460]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2207      	movs	r2, #7
 8009c4c:	4393      	bics	r3, r2
 8009c4e:	0019      	movs	r1, r3
 8009c50:	4b70      	ldr	r3, [pc, #448]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009c58:	f7fe faf8 	bl	800824c <HAL_GetTick>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009c60:	e009      	b.n	8009c76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c62:	f7fe faf3 	bl	800824c <HAL_GetTick>
 8009c66:	0002      	movs	r2, r0
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8009e18 <HAL_RCC_ClockConfig+0x1f4>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e0ca      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009c76:	4b67      	ldr	r3, [pc, #412]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2207      	movs	r2, #7
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	683a      	ldr	r2, [r7, #0]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d1ee      	bne.n	8009c62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	d015      	beq.n	8009cba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2204      	movs	r2, #4
 8009c94:	4013      	ands	r3, r2
 8009c96:	d006      	beq.n	8009ca6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009c98:	4b60      	ldr	r3, [pc, #384]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009c9a:	689a      	ldr	r2, [r3, #8]
 8009c9c:	4b5f      	ldr	r3, [pc, #380]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009c9e:	21e0      	movs	r1, #224	@ 0xe0
 8009ca0:	01c9      	lsls	r1, r1, #7
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	4a5d      	ldr	r2, [pc, #372]	@ (8009e20 <HAL_RCC_ClockConfig+0x1fc>)
 8009cac:	4013      	ands	r3, r2
 8009cae:	0019      	movs	r1, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	4b59      	ldr	r3, [pc, #356]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	d057      	beq.n	8009d74 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d107      	bne.n	8009cdc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ccc:	4b53      	ldr	r3, [pc, #332]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	2380      	movs	r3, #128	@ 0x80
 8009cd2:	029b      	lsls	r3, r3, #10
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	d12b      	bne.n	8009d30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e097      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d107      	bne.n	8009cf4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	2380      	movs	r3, #128	@ 0x80
 8009cea:	049b      	lsls	r3, r3, #18
 8009cec:	4013      	ands	r3, r2
 8009cee:	d11f      	bne.n	8009d30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e08b      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d107      	bne.n	8009d0c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cfc:	4b47      	ldr	r3, [pc, #284]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	2380      	movs	r3, #128	@ 0x80
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	4013      	ands	r3, r2
 8009d06:	d113      	bne.n	8009d30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e07f      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	2b03      	cmp	r3, #3
 8009d12:	d106      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d14:	4b41      	ldr	r3, [pc, #260]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d18:	2202      	movs	r2, #2
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	d108      	bne.n	8009d30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e074      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d22:	4b3e      	ldr	r3, [pc, #248]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d26:	2202      	movs	r2, #2
 8009d28:	4013      	ands	r3, r2
 8009d2a:	d101      	bne.n	8009d30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e06d      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d30:	4b3a      	ldr	r3, [pc, #232]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2207      	movs	r2, #7
 8009d36:	4393      	bics	r3, r2
 8009d38:	0019      	movs	r1, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	4b37      	ldr	r3, [pc, #220]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009d40:	430a      	orrs	r2, r1
 8009d42:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d44:	f7fe fa82 	bl	800824c <HAL_GetTick>
 8009d48:	0003      	movs	r3, r0
 8009d4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d4c:	e009      	b.n	8009d62 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d4e:	f7fe fa7d 	bl	800824c <HAL_GetTick>
 8009d52:	0002      	movs	r2, r0
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	4a2f      	ldr	r2, [pc, #188]	@ (8009e18 <HAL_RCC_ClockConfig+0x1f4>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e054      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d62:	4b2e      	ldr	r3, [pc, #184]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2238      	movs	r2, #56	@ 0x38
 8009d68:	401a      	ands	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d1ec      	bne.n	8009d4e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009d74:	4b27      	ldr	r3, [pc, #156]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2207      	movs	r2, #7
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d21e      	bcs.n	8009dc0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d82:	4b24      	ldr	r3, [pc, #144]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2207      	movs	r2, #7
 8009d88:	4393      	bics	r3, r2
 8009d8a:	0019      	movs	r1, r3
 8009d8c:	4b21      	ldr	r3, [pc, #132]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009d94:	f7fe fa5a 	bl	800824c <HAL_GetTick>
 8009d98:	0003      	movs	r3, r0
 8009d9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009d9c:	e009      	b.n	8009db2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d9e:	f7fe fa55 	bl	800824c <HAL_GetTick>
 8009da2:	0002      	movs	r2, r0
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e18 <HAL_RCC_ClockConfig+0x1f4>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d901      	bls.n	8009db2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e02c      	b.n	8009e0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009db2:	4b18      	ldr	r3, [pc, #96]	@ (8009e14 <HAL_RCC_ClockConfig+0x1f0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2207      	movs	r2, #7
 8009db8:	4013      	ands	r3, r2
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d1ee      	bne.n	8009d9e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2204      	movs	r2, #4
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	d009      	beq.n	8009dde <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009dca:	4b14      	ldr	r3, [pc, #80]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	4a15      	ldr	r2, [pc, #84]	@ (8009e24 <HAL_RCC_ClockConfig+0x200>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	0019      	movs	r1, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68da      	ldr	r2, [r3, #12]
 8009dd8:	4b10      	ldr	r3, [pc, #64]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009dde:	f000 f829 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 8009de2:	0001      	movs	r1, r0
 8009de4:	4b0d      	ldr	r3, [pc, #52]	@ (8009e1c <HAL_RCC_ClockConfig+0x1f8>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	0a1b      	lsrs	r3, r3, #8
 8009dea:	220f      	movs	r2, #15
 8009dec:	401a      	ands	r2, r3
 8009dee:	4b0e      	ldr	r3, [pc, #56]	@ (8009e28 <HAL_RCC_ClockConfig+0x204>)
 8009df0:	0092      	lsls	r2, r2, #2
 8009df2:	58d3      	ldr	r3, [r2, r3]
 8009df4:	221f      	movs	r2, #31
 8009df6:	4013      	ands	r3, r2
 8009df8:	000a      	movs	r2, r1
 8009dfa:	40da      	lsrs	r2, r3
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8009e2c <HAL_RCC_ClockConfig+0x208>)
 8009dfe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009e00:	4b0b      	ldr	r3, [pc, #44]	@ (8009e30 <HAL_RCC_ClockConfig+0x20c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	0018      	movs	r0, r3
 8009e06:	f7fe f9c5 	bl	8008194 <HAL_InitTick>
 8009e0a:	0003      	movs	r3, r0
}
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	b004      	add	sp, #16
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	40022000 	.word	0x40022000
 8009e18:	00001388 	.word	0x00001388
 8009e1c:	40021000 	.word	0x40021000
 8009e20:	fffff0ff 	.word	0xfffff0ff
 8009e24:	ffff8fff 	.word	0xffff8fff
 8009e28:	0801183c 	.word	0x0801183c
 8009e2c:	200009a8 	.word	0x200009a8
 8009e30:	200009ac 	.word	0x200009ac

08009e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	2238      	movs	r2, #56	@ 0x38
 8009e40:	4013      	ands	r3, r2
 8009e42:	d10f      	bne.n	8009e64 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009e44:	4b39      	ldr	r3, [pc, #228]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	0adb      	lsrs	r3, r3, #11
 8009e4a:	2207      	movs	r2, #7
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	2201      	movs	r2, #1
 8009e50:	409a      	lsls	r2, r3
 8009e52:	0013      	movs	r3, r2
 8009e54:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	4835      	ldr	r0, [pc, #212]	@ (8009f30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009e5a:	f7f6 f979 	bl	8000150 <__udivsi3>
 8009e5e:	0003      	movs	r3, r0
 8009e60:	613b      	str	r3, [r7, #16]
 8009e62:	e05d      	b.n	8009f20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009e64:	4b31      	ldr	r3, [pc, #196]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	2238      	movs	r2, #56	@ 0x38
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d102      	bne.n	8009e76 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009e70:	4b30      	ldr	r3, [pc, #192]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x100>)
 8009e72:	613b      	str	r3, [r7, #16]
 8009e74:	e054      	b.n	8009f20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e76:	4b2d      	ldr	r3, [pc, #180]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2238      	movs	r2, #56	@ 0x38
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	2b10      	cmp	r3, #16
 8009e80:	d138      	bne.n	8009ef4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009e82:	4b2a      	ldr	r3, [pc, #168]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	2203      	movs	r2, #3
 8009e88:	4013      	ands	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009e8c:	4b27      	ldr	r3, [pc, #156]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	091b      	lsrs	r3, r3, #4
 8009e92:	2207      	movs	r2, #7
 8009e94:	4013      	ands	r3, r2
 8009e96:	3301      	adds	r3, #1
 8009e98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d10d      	bne.n	8009ebc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	4824      	ldr	r0, [pc, #144]	@ (8009f34 <HAL_RCC_GetSysClockFreq+0x100>)
 8009ea4:	f7f6 f954 	bl	8000150 <__udivsi3>
 8009ea8:	0003      	movs	r3, r0
 8009eaa:	0019      	movs	r1, r3
 8009eac:	4b1f      	ldr	r3, [pc, #124]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	0a1b      	lsrs	r3, r3, #8
 8009eb2:	227f      	movs	r2, #127	@ 0x7f
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	434b      	muls	r3, r1
 8009eb8:	617b      	str	r3, [r7, #20]
        break;
 8009eba:	e00d      	b.n	8009ed8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009ebc:	68b9      	ldr	r1, [r7, #8]
 8009ebe:	481c      	ldr	r0, [pc, #112]	@ (8009f30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009ec0:	f7f6 f946 	bl	8000150 <__udivsi3>
 8009ec4:	0003      	movs	r3, r0
 8009ec6:	0019      	movs	r1, r3
 8009ec8:	4b18      	ldr	r3, [pc, #96]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	0a1b      	lsrs	r3, r3, #8
 8009ece:	227f      	movs	r2, #127	@ 0x7f
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	434b      	muls	r3, r1
 8009ed4:	617b      	str	r3, [r7, #20]
        break;
 8009ed6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009ed8:	4b14      	ldr	r3, [pc, #80]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	0f5b      	lsrs	r3, r3, #29
 8009ede:	2207      	movs	r2, #7
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	6978      	ldr	r0, [r7, #20]
 8009eea:	f7f6 f931 	bl	8000150 <__udivsi3>
 8009eee:	0003      	movs	r3, r0
 8009ef0:	613b      	str	r3, [r7, #16]
 8009ef2:	e015      	b.n	8009f20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2238      	movs	r2, #56	@ 0x38
 8009efa:	4013      	ands	r3, r2
 8009efc:	2b20      	cmp	r3, #32
 8009efe:	d103      	bne.n	8009f08 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009f00:	2380      	movs	r3, #128	@ 0x80
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	613b      	str	r3, [r7, #16]
 8009f06:	e00b      	b.n	8009f20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009f08:	4b08      	ldr	r3, [pc, #32]	@ (8009f2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2238      	movs	r2, #56	@ 0x38
 8009f0e:	4013      	ands	r3, r2
 8009f10:	2b18      	cmp	r3, #24
 8009f12:	d103      	bne.n	8009f1c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009f14:	23fa      	movs	r3, #250	@ 0xfa
 8009f16:	01db      	lsls	r3, r3, #7
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	e001      	b.n	8009f20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009f20:	693b      	ldr	r3, [r7, #16]
}
 8009f22:	0018      	movs	r0, r3
 8009f24:	46bd      	mov	sp, r7
 8009f26:	b006      	add	sp, #24
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	46c0      	nop			@ (mov r8, r8)
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	00f42400 	.word	0x00f42400
 8009f34:	007a1200 	.word	0x007a1200

08009f38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f3c:	4b02      	ldr	r3, [pc, #8]	@ (8009f48 <HAL_RCC_GetHCLKFreq+0x10>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
}
 8009f40:	0018      	movs	r0, r3
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	46c0      	nop			@ (mov r8, r8)
 8009f48:	200009a8 	.word	0x200009a8

08009f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f4c:	b5b0      	push	{r4, r5, r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009f50:	f7ff fff2 	bl	8009f38 <HAL_RCC_GetHCLKFreq>
 8009f54:	0004      	movs	r4, r0
 8009f56:	f7ff faf9 	bl	800954c <LL_RCC_GetAPB1Prescaler>
 8009f5a:	0003      	movs	r3, r0
 8009f5c:	0b1a      	lsrs	r2, r3, #12
 8009f5e:	4b05      	ldr	r3, [pc, #20]	@ (8009f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f60:	0092      	lsls	r2, r2, #2
 8009f62:	58d3      	ldr	r3, [r2, r3]
 8009f64:	221f      	movs	r2, #31
 8009f66:	4013      	ands	r3, r2
 8009f68:	40dc      	lsrs	r4, r3
 8009f6a:	0023      	movs	r3, r4
}
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bdb0      	pop	{r4, r5, r7, pc}
 8009f72:	46c0      	nop			@ (mov r8, r8)
 8009f74:	0801187c 	.word	0x0801187c

08009f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009f80:	2313      	movs	r3, #19
 8009f82:	18fb      	adds	r3, r7, r3
 8009f84:	2200      	movs	r2, #0
 8009f86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009f88:	2312      	movs	r3, #18
 8009f8a:	18fb      	adds	r3, r7, r3
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	2380      	movs	r3, #128	@ 0x80
 8009f96:	029b      	lsls	r3, r3, #10
 8009f98:	4013      	ands	r3, r2
 8009f9a:	d100      	bne.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009f9c:	e0ad      	b.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f9e:	2011      	movs	r0, #17
 8009fa0:	183b      	adds	r3, r7, r0
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fa6:	4b47      	ldr	r3, [pc, #284]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009fa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009faa:	2380      	movs	r3, #128	@ 0x80
 8009fac:	055b      	lsls	r3, r3, #21
 8009fae:	4013      	ands	r3, r2
 8009fb0:	d110      	bne.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fb2:	4b44      	ldr	r3, [pc, #272]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fb6:	4b43      	ldr	r3, [pc, #268]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009fb8:	2180      	movs	r1, #128	@ 0x80
 8009fba:	0549      	lsls	r1, r1, #21
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009fc0:	4b40      	ldr	r3, [pc, #256]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009fc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fc4:	2380      	movs	r3, #128	@ 0x80
 8009fc6:	055b      	lsls	r3, r3, #21
 8009fc8:	4013      	ands	r3, r2
 8009fca:	60bb      	str	r3, [r7, #8]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fce:	183b      	adds	r3, r7, r0
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fd4:	4b3c      	ldr	r3, [pc, #240]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	4b3b      	ldr	r3, [pc, #236]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009fda:	2180      	movs	r1, #128	@ 0x80
 8009fdc:	0049      	lsls	r1, r1, #1
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fe2:	f7fe f933 	bl	800824c <HAL_GetTick>
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fea:	e00b      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fec:	f7fe f92e 	bl	800824c <HAL_GetTick>
 8009ff0:	0002      	movs	r2, r0
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d904      	bls.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009ffa:	2313      	movs	r3, #19
 8009ffc:	18fb      	adds	r3, r7, r3
 8009ffe:	2203      	movs	r2, #3
 800a000:	701a      	strb	r2, [r3, #0]
        break;
 800a002:	e005      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a004:	4b30      	ldr	r3, [pc, #192]	@ (800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	2380      	movs	r3, #128	@ 0x80
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	4013      	ands	r3, r2
 800a00e:	d0ed      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a010:	2313      	movs	r3, #19
 800a012:	18fb      	adds	r3, r7, r3
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d15e      	bne.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a01a:	4b2a      	ldr	r3, [pc, #168]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a01c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a01e:	23c0      	movs	r3, #192	@ 0xc0
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4013      	ands	r3, r2
 800a024:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d019      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	429a      	cmp	r2, r3
 800a034:	d014      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a036:	4b23      	ldr	r3, [pc, #140]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a03a:	4a24      	ldr	r2, [pc, #144]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a040:	4b20      	ldr	r3, [pc, #128]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a044:	4b1f      	ldr	r3, [pc, #124]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a046:	2180      	movs	r1, #128	@ 0x80
 800a048:	0249      	lsls	r1, r1, #9
 800a04a:	430a      	orrs	r2, r1
 800a04c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a04e:	4b1d      	ldr	r3, [pc, #116]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a050:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a052:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a054:	491e      	ldr	r1, [pc, #120]	@ (800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800a056:	400a      	ands	r2, r1
 800a058:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a05a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2201      	movs	r2, #1
 800a064:	4013      	ands	r3, r2
 800a066:	d016      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a068:	f7fe f8f0 	bl	800824c <HAL_GetTick>
 800a06c:	0003      	movs	r3, r0
 800a06e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a070:	e00c      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a072:	f7fe f8eb 	bl	800824c <HAL_GetTick>
 800a076:	0002      	movs	r2, r0
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	4a15      	ldr	r2, [pc, #84]	@ (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d904      	bls.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a082:	2313      	movs	r3, #19
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	2203      	movs	r2, #3
 800a088:	701a      	strb	r2, [r3, #0]
            break;
 800a08a:	e004      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a08c:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a08e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a090:	2202      	movs	r2, #2
 800a092:	4013      	ands	r3, r2
 800a094:	d0ed      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a096:	2313      	movs	r3, #19
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0a0:	4b08      	ldr	r3, [pc, #32]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a0a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0a4:	4a09      	ldr	r2, [pc, #36]	@ (800a0cc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	0019      	movs	r1, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0ae:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0b4:	e016      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a0b6:	2312      	movs	r3, #18
 800a0b8:	18fb      	adds	r3, r7, r3
 800a0ba:	2213      	movs	r2, #19
 800a0bc:	18ba      	adds	r2, r7, r2
 800a0be:	7812      	ldrb	r2, [r2, #0]
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	e00f      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a0c4:	40021000 	.word	0x40021000
 800a0c8:	40007000 	.word	0x40007000
 800a0cc:	fffffcff 	.word	0xfffffcff
 800a0d0:	fffeffff 	.word	0xfffeffff
 800a0d4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d8:	2312      	movs	r3, #18
 800a0da:	18fb      	adds	r3, r7, r3
 800a0dc:	2213      	movs	r2, #19
 800a0de:	18ba      	adds	r2, r7, r2
 800a0e0:	7812      	ldrb	r2, [r2, #0]
 800a0e2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a0e4:	2311      	movs	r3, #17
 800a0e6:	18fb      	adds	r3, r7, r3
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d105      	bne.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0ee:	4bb6      	ldr	r3, [pc, #728]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0f2:	4bb5      	ldr	r3, [pc, #724]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0f4:	49b5      	ldr	r1, [pc, #724]	@ (800a3cc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800a0f6:	400a      	ands	r2, r1
 800a0f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2201      	movs	r2, #1
 800a100:	4013      	ands	r3, r2
 800a102:	d009      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a104:	4bb0      	ldr	r3, [pc, #704]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a108:	2203      	movs	r2, #3
 800a10a:	4393      	bics	r3, r2
 800a10c:	0019      	movs	r1, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	4bad      	ldr	r3, [pc, #692]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a114:	430a      	orrs	r2, r1
 800a116:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2202      	movs	r2, #2
 800a11e:	4013      	ands	r3, r2
 800a120:	d009      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a122:	4ba9      	ldr	r3, [pc, #676]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a126:	220c      	movs	r2, #12
 800a128:	4393      	bics	r3, r2
 800a12a:	0019      	movs	r1, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	4ba5      	ldr	r3, [pc, #660]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a132:	430a      	orrs	r2, r1
 800a134:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2204      	movs	r2, #4
 800a13c:	4013      	ands	r3, r2
 800a13e:	d009      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a140:	4ba1      	ldr	r3, [pc, #644]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a144:	2230      	movs	r2, #48	@ 0x30
 800a146:	4393      	bics	r3, r2
 800a148:	0019      	movs	r1, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	4b9e      	ldr	r3, [pc, #632]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a150:	430a      	orrs	r2, r1
 800a152:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2210      	movs	r2, #16
 800a15a:	4013      	ands	r3, r2
 800a15c:	d009      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a15e:	4b9a      	ldr	r3, [pc, #616]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a162:	4a9b      	ldr	r2, [pc, #620]	@ (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800a164:	4013      	ands	r3, r2
 800a166:	0019      	movs	r1, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	4b96      	ldr	r3, [pc, #600]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a16e:	430a      	orrs	r2, r1
 800a170:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	2380      	movs	r3, #128	@ 0x80
 800a178:	015b      	lsls	r3, r3, #5
 800a17a:	4013      	ands	r3, r2
 800a17c:	d009      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800a17e:	4b92      	ldr	r3, [pc, #584]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a182:	4a94      	ldr	r2, [pc, #592]	@ (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a184:	4013      	ands	r3, r2
 800a186:	0019      	movs	r1, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	695a      	ldr	r2, [r3, #20]
 800a18c:	4b8e      	ldr	r3, [pc, #568]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a18e:	430a      	orrs	r2, r1
 800a190:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	2380      	movs	r3, #128	@ 0x80
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4013      	ands	r3, r2
 800a19c:	d009      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a19e:	4b8a      	ldr	r3, [pc, #552]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a2:	4a8d      	ldr	r2, [pc, #564]	@ (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	0019      	movs	r1, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ac:	4b86      	ldr	r3, [pc, #536]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	2380      	movs	r3, #128	@ 0x80
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	d009      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a1be:	4b82      	ldr	r3, [pc, #520]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c2:	4a86      	ldr	r2, [pc, #536]	@ (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	0019      	movs	r1, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1cc:	4b7e      	ldr	r3, [pc, #504]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	4013      	ands	r3, r2
 800a1da:	d009      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a1dc:	4b7a      	ldr	r3, [pc, #488]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1e0:	4a7f      	ldr	r2, [pc, #508]	@ (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	0019      	movs	r1, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	699a      	ldr	r2, [r3, #24]
 800a1ea:	4b77      	ldr	r3, [pc, #476]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2240      	movs	r2, #64	@ 0x40
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	d009      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a1fa:	4b73      	ldr	r3, [pc, #460]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1fe:	4a79      	ldr	r2, [pc, #484]	@ (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a200:	4013      	ands	r3, r2
 800a202:	0019      	movs	r1, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	69da      	ldr	r2, [r3, #28]
 800a208:	4b6f      	ldr	r3, [pc, #444]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a20a:	430a      	orrs	r2, r1
 800a20c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	2380      	movs	r3, #128	@ 0x80
 800a214:	01db      	lsls	r3, r3, #7
 800a216:	4013      	ands	r3, r2
 800a218:	d015      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a21a:	4b6b      	ldr	r3, [pc, #428]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a21c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	0899      	lsrs	r1, r3, #2
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a226:	4b68      	ldr	r3, [pc, #416]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a228:	430a      	orrs	r2, r1
 800a22a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	05db      	lsls	r3, r3, #23
 800a234:	429a      	cmp	r2, r3
 800a236:	d106      	bne.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a238:	4b63      	ldr	r3, [pc, #396]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	4b62      	ldr	r3, [pc, #392]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a23e:	2180      	movs	r1, #128	@ 0x80
 800a240:	0249      	lsls	r1, r1, #9
 800a242:	430a      	orrs	r2, r1
 800a244:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	2380      	movs	r3, #128	@ 0x80
 800a24c:	031b      	lsls	r3, r3, #12
 800a24e:	4013      	ands	r3, r2
 800a250:	d009      	beq.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a252:	4b5d      	ldr	r3, [pc, #372]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a256:	2240      	movs	r2, #64	@ 0x40
 800a258:	4393      	bics	r3, r2
 800a25a:	0019      	movs	r1, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a260:	4b59      	ldr	r3, [pc, #356]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a262:	430a      	orrs	r2, r1
 800a264:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	2380      	movs	r3, #128	@ 0x80
 800a26c:	039b      	lsls	r3, r3, #14
 800a26e:	4013      	ands	r3, r2
 800a270:	d016      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a272:	4b55      	ldr	r3, [pc, #340]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a276:	4a5c      	ldr	r2, [pc, #368]	@ (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a278:	4013      	ands	r3, r2
 800a27a:	0019      	movs	r1, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a280:	4b51      	ldr	r3, [pc, #324]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a282:	430a      	orrs	r2, r1
 800a284:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a28a:	2380      	movs	r3, #128	@ 0x80
 800a28c:	03db      	lsls	r3, r3, #15
 800a28e:	429a      	cmp	r2, r3
 800a290:	d106      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a292:	4b4d      	ldr	r3, [pc, #308]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	4b4c      	ldr	r3, [pc, #304]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a298:	2180      	movs	r1, #128	@ 0x80
 800a29a:	0449      	lsls	r1, r1, #17
 800a29c:	430a      	orrs	r2, r1
 800a29e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	2380      	movs	r3, #128	@ 0x80
 800a2a6:	03db      	lsls	r3, r3, #15
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	d016      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a2ac:	4b46      	ldr	r3, [pc, #280]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b0:	4a4e      	ldr	r2, [pc, #312]	@ (800a3ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	0019      	movs	r1, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2ba:	4b43      	ldr	r3, [pc, #268]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2c4:	2380      	movs	r3, #128	@ 0x80
 800a2c6:	045b      	lsls	r3, r3, #17
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d106      	bne.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a2cc:	4b3e      	ldr	r3, [pc, #248]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	4b3d      	ldr	r3, [pc, #244]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a2d2:	2180      	movs	r1, #128	@ 0x80
 800a2d4:	0449      	lsls	r1, r1, #17
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	2380      	movs	r3, #128	@ 0x80
 800a2e0:	011b      	lsls	r3, r3, #4
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	d014      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a2e6:	4b38      	ldr	r3, [pc, #224]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	4393      	bics	r3, r2
 800a2ee:	0019      	movs	r1, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a1a      	ldr	r2, [r3, #32]
 800a2f4:	4b34      	ldr	r3, [pc, #208]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d106      	bne.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a302:	4b31      	ldr	r3, [pc, #196]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	4b30      	ldr	r3, [pc, #192]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a308:	2180      	movs	r1, #128	@ 0x80
 800a30a:	0249      	lsls	r1, r1, #9
 800a30c:	430a      	orrs	r2, r1
 800a30e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	2380      	movs	r3, #128	@ 0x80
 800a316:	019b      	lsls	r3, r3, #6
 800a318:	4013      	ands	r3, r2
 800a31a:	d014      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a31c:	4b2a      	ldr	r3, [pc, #168]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a31e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a320:	220c      	movs	r2, #12
 800a322:	4393      	bics	r3, r2
 800a324:	0019      	movs	r1, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a32a:	4b27      	ldr	r3, [pc, #156]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a32c:	430a      	orrs	r2, r1
 800a32e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	2b04      	cmp	r3, #4
 800a336:	d106      	bne.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a338:	4b23      	ldr	r3, [pc, #140]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a33a:	68da      	ldr	r2, [r3, #12]
 800a33c:	4b22      	ldr	r3, [pc, #136]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a33e:	2180      	movs	r1, #128	@ 0x80
 800a340:	0249      	lsls	r1, r1, #9
 800a342:	430a      	orrs	r2, r1
 800a344:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	2380      	movs	r3, #128	@ 0x80
 800a34c:	045b      	lsls	r3, r3, #17
 800a34e:	4013      	ands	r3, r2
 800a350:	d016      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a352:	4b1d      	ldr	r3, [pc, #116]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a356:	4a22      	ldr	r2, [pc, #136]	@ (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a358:	4013      	ands	r3, r2
 800a35a:	0019      	movs	r1, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a360:	4b19      	ldr	r3, [pc, #100]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a362:	430a      	orrs	r2, r1
 800a364:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a36a:	2380      	movs	r3, #128	@ 0x80
 800a36c:	019b      	lsls	r3, r3, #6
 800a36e:	429a      	cmp	r2, r3
 800a370:	d106      	bne.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a372:	4b15      	ldr	r3, [pc, #84]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	4b14      	ldr	r3, [pc, #80]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a378:	2180      	movs	r1, #128	@ 0x80
 800a37a:	0449      	lsls	r1, r1, #17
 800a37c:	430a      	orrs	r2, r1
 800a37e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	2380      	movs	r3, #128	@ 0x80
 800a386:	049b      	lsls	r3, r3, #18
 800a388:	4013      	ands	r3, r2
 800a38a:	d016      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a38c:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a38e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a390:	4a10      	ldr	r2, [pc, #64]	@ (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a392:	4013      	ands	r3, r2
 800a394:	0019      	movs	r1, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a39a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a39c:	430a      	orrs	r2, r1
 800a39e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a3a4:	2380      	movs	r3, #128	@ 0x80
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d106      	bne.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a3ac:	4b06      	ldr	r3, [pc, #24]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	4b05      	ldr	r3, [pc, #20]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a3b2:	2180      	movs	r1, #128	@ 0x80
 800a3b4:	0449      	lsls	r1, r1, #17
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a3ba:	2312      	movs	r3, #18
 800a3bc:	18fb      	adds	r3, r7, r3
 800a3be:	781b      	ldrb	r3, [r3, #0]
}
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	b006      	add	sp, #24
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	40021000 	.word	0x40021000
 800a3cc:	efffffff 	.word	0xefffffff
 800a3d0:	fffff3ff 	.word	0xfffff3ff
 800a3d4:	fffffcff 	.word	0xfffffcff
 800a3d8:	fff3ffff 	.word	0xfff3ffff
 800a3dc:	ffcfffff 	.word	0xffcfffff
 800a3e0:	ffffcfff 	.word	0xffffcfff
 800a3e4:	ffff3fff 	.word	0xffff3fff
 800a3e8:	ffbfffff 	.word	0xffbfffff
 800a3ec:	feffffff 	.word	0xfeffffff

0800a3f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a3f0:	b5b0      	push	{r4, r5, r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a3f8:	230f      	movs	r3, #15
 800a3fa:	18fb      	adds	r3, r7, r3
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d100      	bne.n	800a408 <HAL_RTC_Init+0x18>
 800a406:	e08c      	b.n	800a522 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2229      	movs	r2, #41	@ 0x29
 800a40c:	5c9b      	ldrb	r3, [r3, r2]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10b      	bne.n	800a42c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2228      	movs	r2, #40	@ 0x28
 800a418:	2100      	movs	r1, #0
 800a41a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2288      	movs	r2, #136	@ 0x88
 800a420:	0212      	lsls	r2, r2, #8
 800a422:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	0018      	movs	r0, r3
 800a428:	f7fc fe5e 	bl	80070e8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2229      	movs	r2, #41	@ 0x29
 800a430:	2102      	movs	r1, #2
 800a432:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	2210      	movs	r2, #16
 800a43c:	4013      	ands	r3, r2
 800a43e:	2b10      	cmp	r3, #16
 800a440:	d062      	beq.n	800a508 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	22ca      	movs	r2, #202	@ 0xca
 800a448:	625a      	str	r2, [r3, #36]	@ 0x24
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2253      	movs	r2, #83	@ 0x53
 800a450:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a452:	250f      	movs	r5, #15
 800a454:	197c      	adds	r4, r7, r5
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	0018      	movs	r0, r3
 800a45a:	f000 fc0f 	bl	800ac7c <RTC_EnterInitMode>
 800a45e:	0003      	movs	r3, r0
 800a460:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800a462:	0028      	movs	r0, r5
 800a464:	183b      	adds	r3, r7, r0
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d12c      	bne.n	800a4c6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	492e      	ldr	r1, [pc, #184]	@ (800a530 <HAL_RTC_Init+0x140>)
 800a478:	400a      	ands	r2, r1
 800a47a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6999      	ldr	r1, [r3, #24]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	431a      	orrs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	430a      	orrs	r2, r1
 800a498:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6912      	ldr	r2, [r2, #16]
 800a4a2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6919      	ldr	r1, [r3, #16]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	041a      	lsls	r2, r3, #16
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a4b8:	183c      	adds	r4, r7, r0
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f000 fc1f 	bl	800ad00 <RTC_ExitInitMode>
 800a4c2:	0003      	movs	r3, r0
 800a4c4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800a4c6:	230f      	movs	r3, #15
 800a4c8:	18fb      	adds	r3, r7, r3
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d116      	bne.n	800a4fe <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699a      	ldr	r2, [r3, #24]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	00d2      	lsls	r2, r2, #3
 800a4dc:	08d2      	lsrs	r2, r2, #3
 800a4de:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6999      	ldr	r1, [r3, #24]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	22ff      	movs	r2, #255	@ 0xff
 800a504:	625a      	str	r2, [r3, #36]	@ 0x24
 800a506:	e003      	b.n	800a510 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a508:	230f      	movs	r3, #15
 800a50a:	18fb      	adds	r3, r7, r3
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800a510:	230f      	movs	r3, #15
 800a512:	18fb      	adds	r3, r7, r3
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d103      	bne.n	800a522 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2229      	movs	r2, #41	@ 0x29
 800a51e:	2101      	movs	r1, #1
 800a520:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800a522:	230f      	movs	r3, #15
 800a524:	18fb      	adds	r3, r7, r3
 800a526:	781b      	ldrb	r3, [r3, #0]
}
 800a528:	0018      	movs	r0, r3
 800a52a:	46bd      	mov	sp, r7
 800a52c:	b004      	add	sp, #16
 800a52e:	bdb0      	pop	{r4, r5, r7, pc}
 800a530:	fb8fffbf 	.word	0xfb8fffbf

0800a534 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a534:	b5b0      	push	{r4, r5, r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2228      	movs	r2, #40	@ 0x28
 800a544:	5c9b      	ldrb	r3, [r3, r2]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d101      	bne.n	800a54e <HAL_RTC_SetTime+0x1a>
 800a54a:	2302      	movs	r3, #2
 800a54c:	e092      	b.n	800a674 <HAL_RTC_SetTime+0x140>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2228      	movs	r2, #40	@ 0x28
 800a552:	2101      	movs	r1, #1
 800a554:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2229      	movs	r2, #41	@ 0x29
 800a55a:	2102      	movs	r1, #2
 800a55c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	22ca      	movs	r2, #202	@ 0xca
 800a564:	625a      	str	r2, [r3, #36]	@ 0x24
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2253      	movs	r2, #83	@ 0x53
 800a56c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a56e:	2513      	movs	r5, #19
 800a570:	197c      	adds	r4, r7, r5
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	0018      	movs	r0, r3
 800a576:	f000 fb81 	bl	800ac7c <RTC_EnterInitMode>
 800a57a:	0003      	movs	r3, r0
 800a57c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800a57e:	197b      	adds	r3, r7, r5
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d162      	bne.n	800a64c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d125      	bne.n	800a5d8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	2240      	movs	r2, #64	@ 0x40
 800a594:	4013      	ands	r3, r2
 800a596:	d102      	bne.n	800a59e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2200      	movs	r2, #0
 800a59c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f000 fbf0 	bl	800ad88 <RTC_ByteToBcd2>
 800a5a8:	0003      	movs	r3, r0
 800a5aa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	785b      	ldrb	r3, [r3, #1]
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f000 fbe9 	bl	800ad88 <RTC_ByteToBcd2>
 800a5b6:	0003      	movs	r3, r0
 800a5b8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5ba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f000 fbe1 	bl	800ad88 <RTC_ByteToBcd2>
 800a5c6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a5c8:	0022      	movs	r2, r4
 800a5ca:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	78db      	ldrb	r3, [r3, #3]
 800a5d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e017      	b.n	800a608 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	2240      	movs	r2, #64	@ 0x40
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	d102      	bne.n	800a5ea <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a5f6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a5fc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	78db      	ldrb	r3, [r3, #3]
 800a602:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a604:	4313      	orrs	r3, r2
 800a606:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	491b      	ldr	r1, [pc, #108]	@ (800a67c <HAL_RTC_SetTime+0x148>)
 800a610:	400a      	ands	r2, r1
 800a612:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4918      	ldr	r1, [pc, #96]	@ (800a680 <HAL_RTC_SetTime+0x14c>)
 800a620:	400a      	ands	r2, r1
 800a622:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6999      	ldr	r1, [r3, #24]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	431a      	orrs	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a63c:	2313      	movs	r3, #19
 800a63e:	18fc      	adds	r4, r7, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	0018      	movs	r0, r3
 800a644:	f000 fb5c 	bl	800ad00 <RTC_ExitInitMode>
 800a648:	0003      	movs	r3, r0
 800a64a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	22ff      	movs	r2, #255	@ 0xff
 800a652:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800a654:	2313      	movs	r3, #19
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d103      	bne.n	800a666 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2229      	movs	r2, #41	@ 0x29
 800a662:	2101      	movs	r1, #1
 800a664:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2228      	movs	r2, #40	@ 0x28
 800a66a:	2100      	movs	r1, #0
 800a66c:	5499      	strb	r1, [r3, r2]

  return status;
 800a66e:	2313      	movs	r3, #19
 800a670:	18fb      	adds	r3, r7, r3
 800a672:	781b      	ldrb	r3, [r3, #0]
}
 800a674:	0018      	movs	r0, r3
 800a676:	46bd      	mov	sp, r7
 800a678:	b006      	add	sp, #24
 800a67a:	bdb0      	pop	{r4, r5, r7, pc}
 800a67c:	007f7f7f 	.word	0x007f7f7f
 800a680:	fffbffff 	.word	0xfffbffff

0800a684 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a684:	b5b0      	push	{r4, r5, r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2228      	movs	r2, #40	@ 0x28
 800a694:	5c9b      	ldrb	r3, [r3, r2]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <HAL_RTC_SetDate+0x1a>
 800a69a:	2302      	movs	r3, #2
 800a69c:	e07e      	b.n	800a79c <HAL_RTC_SetDate+0x118>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2228      	movs	r2, #40	@ 0x28
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2229      	movs	r2, #41	@ 0x29
 800a6aa:	2102      	movs	r1, #2
 800a6ac:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10e      	bne.n	800a6d2 <HAL_RTC_SetDate+0x4e>
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	785b      	ldrb	r3, [r3, #1]
 800a6b8:	001a      	movs	r2, r3
 800a6ba:	2310      	movs	r3, #16
 800a6bc:	4013      	ands	r3, r2
 800a6be:	d008      	beq.n	800a6d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	4393      	bics	r3, r2
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	330a      	adds	r3, #10
 800a6cc:	b2da      	uxtb	r2, r3
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d11c      	bne.n	800a712 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	78db      	ldrb	r3, [r3, #3]
 800a6dc:	0018      	movs	r0, r3
 800a6de:	f000 fb53 	bl	800ad88 <RTC_ByteToBcd2>
 800a6e2:	0003      	movs	r3, r0
 800a6e4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	785b      	ldrb	r3, [r3, #1]
 800a6ea:	0018      	movs	r0, r3
 800a6ec:	f000 fb4c 	bl	800ad88 <RTC_ByteToBcd2>
 800a6f0:	0003      	movs	r3, r0
 800a6f2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6f4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	789b      	ldrb	r3, [r3, #2]
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f000 fb44 	bl	800ad88 <RTC_ByteToBcd2>
 800a700:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a702:	0022      	movs	r2, r4
 800a704:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a70c:	4313      	orrs	r3, r2
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	e00e      	b.n	800a730 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	78db      	ldrb	r3, [r3, #3]
 800a716:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	785b      	ldrb	r3, [r3, #1]
 800a71c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a71e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a724:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	22ca      	movs	r2, #202	@ 0xca
 800a736:	625a      	str	r2, [r3, #36]	@ 0x24
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2253      	movs	r2, #83	@ 0x53
 800a73e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a740:	2513      	movs	r5, #19
 800a742:	197c      	adds	r4, r7, r5
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	0018      	movs	r0, r3
 800a748:	f000 fa98 	bl	800ac7c <RTC_EnterInitMode>
 800a74c:	0003      	movs	r3, r0
 800a74e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800a750:	0028      	movs	r0, r5
 800a752:	183b      	adds	r3, r7, r0
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10c      	bne.n	800a774 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	4910      	ldr	r1, [pc, #64]	@ (800a7a4 <HAL_RTC_SetDate+0x120>)
 800a762:	400a      	ands	r2, r1
 800a764:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a766:	183c      	adds	r4, r7, r0
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	0018      	movs	r0, r3
 800a76c:	f000 fac8 	bl	800ad00 <RTC_ExitInitMode>
 800a770:	0003      	movs	r3, r0
 800a772:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	22ff      	movs	r2, #255	@ 0xff
 800a77a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a77c:	2313      	movs	r3, #19
 800a77e:	18fb      	adds	r3, r7, r3
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d103      	bne.n	800a78e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2229      	movs	r2, #41	@ 0x29
 800a78a:	2101      	movs	r1, #1
 800a78c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2228      	movs	r2, #40	@ 0x28
 800a792:	2100      	movs	r1, #0
 800a794:	5499      	strb	r1, [r3, r2]

  return status;
 800a796:	2313      	movs	r3, #19
 800a798:	18fb      	adds	r3, r7, r3
 800a79a:	781b      	ldrb	r3, [r3, #0]
}
 800a79c:	0018      	movs	r0, r3
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	b006      	add	sp, #24
 800a7a2:	bdb0      	pop	{r4, r5, r7, pc}
 800a7a4:	00ffff3f 	.word	0x00ffff3f

0800a7a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b089      	sub	sp, #36	@ 0x24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2228      	movs	r2, #40	@ 0x28
 800a7b8:	5c9b      	ldrb	r3, [r3, r2]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_RTC_SetAlarm_IT+0x1a>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e127      	b.n	800aa12 <HAL_RTC_SetAlarm_IT+0x26a>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2228      	movs	r2, #40	@ 0x28
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2229      	movs	r2, #41	@ 0x29
 800a7ce:	2102      	movs	r1, #2
 800a7d0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d136      	bne.n	800a846 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	2240      	movs	r2, #64	@ 0x40
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	d102      	bne.n	800a7ea <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	f000 faca 	bl	800ad88 <RTC_ByteToBcd2>
 800a7f4:	0003      	movs	r3, r0
 800a7f6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	785b      	ldrb	r3, [r3, #1]
 800a7fc:	0018      	movs	r0, r3
 800a7fe:	f000 fac3 	bl	800ad88 <RTC_ByteToBcd2>
 800a802:	0003      	movs	r3, r0
 800a804:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a806:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	789b      	ldrb	r3, [r3, #2]
 800a80c:	0018      	movs	r0, r3
 800a80e:	f000 fabb 	bl	800ad88 <RTC_ByteToBcd2>
 800a812:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a814:	0022      	movs	r2, r4
 800a816:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	78db      	ldrb	r3, [r3, #3]
 800a81c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a81e:	431a      	orrs	r2, r3
 800a820:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2220      	movs	r2, #32
 800a826:	5c9b      	ldrb	r3, [r3, r2]
 800a828:	0018      	movs	r0, r3
 800a82a:	f000 faad 	bl	800ad88 <RTC_ByteToBcd2>
 800a82e:	0003      	movs	r3, r0
 800a830:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a832:	0022      	movs	r2, r4
 800a834:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a83a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a840:	4313      	orrs	r3, r2
 800a842:	61fb      	str	r3, [r7, #28]
 800a844:	e022      	b.n	800a88c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	2240      	movs	r2, #64	@ 0x40
 800a84e:	4013      	ands	r3, r2
 800a850:	d102      	bne.n	800a858 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2200      	movs	r2, #0
 800a856:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a864:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a86a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	78db      	ldrb	r3, [r3, #3]
 800a870:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a872:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2120      	movs	r1, #32
 800a878:	5c5b      	ldrb	r3, [r3, r1]
 800a87a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a87c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a882:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a888:	4313      	orrs	r3, r2
 800a88a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	4313      	orrs	r3, r2
 800a896:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	22ca      	movs	r2, #202	@ 0xca
 800a89e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2253      	movs	r2, #83	@ 0x53
 800a8a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8ac:	2380      	movs	r3, #128	@ 0x80
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d14c      	bne.n	800a94e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	699a      	ldr	r2, [r3, #24]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4957      	ldr	r1, [pc, #348]	@ (800aa1c <HAL_RTC_SetAlarm_IT+0x274>)
 800a8c0:	400a      	ands	r2, r1
 800a8c2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800a8d4:	f7fd fcba 	bl	800824c <HAL_GetTick>
 800a8d8:	0003      	movs	r3, r0
 800a8da:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a8dc:	e016      	b.n	800a90c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8de:	f7fd fcb5 	bl	800824c <HAL_GetTick>
 800a8e2:	0002      	movs	r2, r0
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	23fa      	movs	r3, #250	@ 0xfa
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d90d      	bls.n	800a90c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	22ff      	movs	r2, #255	@ 0xff
 800a8f6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2229      	movs	r2, #41	@ 0x29
 800a8fc:	2103      	movs	r1, #3
 800a8fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2228      	movs	r2, #40	@ 0x28
 800a904:	2100      	movs	r1, #0
 800a906:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e082      	b.n	800aa12 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	4013      	ands	r3, r2
 800a916:	d0e2      	beq.n	800a8de <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	699a      	ldr	r2, [r3, #24]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2180      	movs	r1, #128	@ 0x80
 800a934:	0049      	lsls	r1, r1, #1
 800a936:	430a      	orrs	r2, r1
 800a938:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2180      	movs	r1, #128	@ 0x80
 800a946:	0149      	lsls	r1, r1, #5
 800a948:	430a      	orrs	r2, r1
 800a94a:	619a      	str	r2, [r3, #24]
 800a94c:	e04b      	b.n	800a9e6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	699a      	ldr	r2, [r3, #24]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4931      	ldr	r1, [pc, #196]	@ (800aa20 <HAL_RTC_SetAlarm_IT+0x278>)
 800a95a:	400a      	ands	r2, r1
 800a95c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2102      	movs	r1, #2
 800a96a:	430a      	orrs	r2, r1
 800a96c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800a96e:	f7fd fc6d 	bl	800824c <HAL_GetTick>
 800a972:	0003      	movs	r3, r0
 800a974:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a976:	e016      	b.n	800a9a6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a978:	f7fd fc68 	bl	800824c <HAL_GetTick>
 800a97c:	0002      	movs	r2, r0
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	1ad2      	subs	r2, r2, r3
 800a982:	23fa      	movs	r3, #250	@ 0xfa
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	429a      	cmp	r2, r3
 800a988:	d90d      	bls.n	800a9a6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	22ff      	movs	r2, #255	@ 0xff
 800a990:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2229      	movs	r2, #41	@ 0x29
 800a996:	2103      	movs	r1, #3
 800a998:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2228      	movs	r2, #40	@ 0x28
 800a99e:	2100      	movs	r1, #0
 800a9a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e035      	b.n	800aa12 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	d0e2      	beq.n	800a978 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	699a      	ldr	r2, [r3, #24]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2180      	movs	r1, #128	@ 0x80
 800a9ce:	0089      	lsls	r1, r1, #2
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	699a      	ldr	r2, [r3, #24]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2180      	movs	r1, #128	@ 0x80
 800a9e0:	0189      	lsls	r1, r1, #6
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a9e6:	4a0f      	ldr	r2, [pc, #60]	@ (800aa24 <HAL_RTC_SetAlarm_IT+0x27c>)
 800a9e8:	2380      	movs	r3, #128	@ 0x80
 800a9ea:	58d3      	ldr	r3, [r2, r3]
 800a9ec:	490d      	ldr	r1, [pc, #52]	@ (800aa24 <HAL_RTC_SetAlarm_IT+0x27c>)
 800a9ee:	2280      	movs	r2, #128	@ 0x80
 800a9f0:	0312      	lsls	r2, r2, #12
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	2280      	movs	r2, #128	@ 0x80
 800a9f6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	22ff      	movs	r2, #255	@ 0xff
 800a9fe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2229      	movs	r2, #41	@ 0x29
 800aa04:	2101      	movs	r1, #1
 800aa06:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2228      	movs	r2, #40	@ 0x28
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	0018      	movs	r0, r3
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b009      	add	sp, #36	@ 0x24
 800aa18:	bd90      	pop	{r4, r7, pc}
 800aa1a:	46c0      	nop			@ (mov r8, r8)
 800aa1c:	fffffeff 	.word	0xfffffeff
 800aa20:	fffffdff 	.word	0xfffffdff
 800aa24:	40021800 	.word	0x40021800

0800aa28 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
 800aa34:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	2380      	movs	r3, #128	@ 0x80
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d144      	bne.n	800aaca <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2280      	movs	r2, #128	@ 0x80
 800aa44:	0052      	lsls	r2, r2, #1
 800aa46:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa56:	045b      	lsls	r3, r3, #17
 800aa58:	0c5b      	lsrs	r3, r3, #17
 800aa5a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	0c1b      	lsrs	r3, r3, #16
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	223f      	movs	r2, #63	@ 0x3f
 800aa64:	4013      	ands	r3, r2
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	0a1b      	lsrs	r3, r3, #8
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	227f      	movs	r2, #127	@ 0x7f
 800aa74:	4013      	ands	r3, r2
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	227f      	movs	r2, #127	@ 0x7f
 800aa82:	4013      	ands	r3, r2
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	0d9b      	lsrs	r3, r3, #22
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2201      	movs	r2, #1
 800aa92:	4013      	ands	r3, r2
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	0e1b      	lsrs	r3, r3, #24
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	223f      	movs	r2, #63	@ 0x3f
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	b2d9      	uxtb	r1, r3
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2220      	movs	r2, #32
 800aab0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800aab2:	697a      	ldr	r2, [r7, #20]
 800aab4:	2380      	movs	r3, #128	@ 0x80
 800aab6:	05db      	lsls	r3, r3, #23
 800aab8:	401a      	ands	r2, r3
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	4a3b      	ldr	r2, [pc, #236]	@ (800abb0 <HAL_RTC_GetAlarm+0x188>)
 800aac2:	401a      	ands	r2, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	615a      	str	r2, [r3, #20]
 800aac8:	e043      	b.n	800ab52 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2280      	movs	r2, #128	@ 0x80
 800aace:	0092      	lsls	r2, r2, #2
 800aad0:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aad8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aae0:	045b      	lsls	r3, r3, #17
 800aae2:	0c5b      	lsrs	r3, r3, #17
 800aae4:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	0c1b      	lsrs	r3, r3, #16
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	223f      	movs	r2, #63	@ 0x3f
 800aaee:	4013      	ands	r3, r2
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	0a1b      	lsrs	r3, r3, #8
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	227f      	movs	r2, #127	@ 0x7f
 800aafe:	4013      	ands	r3, r2
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	227f      	movs	r2, #127	@ 0x7f
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	0d9b      	lsrs	r3, r3, #22
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	0e1b      	lsrs	r3, r3, #24
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	223f      	movs	r2, #63	@ 0x3f
 800ab32:	4013      	ands	r3, r2
 800ab34:	b2d9      	uxtb	r1, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	2380      	movs	r3, #128	@ 0x80
 800ab40:	05db      	lsls	r3, r3, #23
 800ab42:	401a      	ands	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	4a19      	ldr	r2, [pc, #100]	@ (800abb0 <HAL_RTC_GetAlarm+0x188>)
 800ab4c:	401a      	ands	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d125      	bne.n	800aba4 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	f000 f93b 	bl	800add8 <RTC_Bcd2ToByte>
 800ab62:	0003      	movs	r3, r0
 800ab64:	001a      	movs	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	0018      	movs	r0, r3
 800ab70:	f000 f932 	bl	800add8 <RTC_Bcd2ToByte>
 800ab74:	0003      	movs	r3, r0
 800ab76:	001a      	movs	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	789b      	ldrb	r3, [r3, #2]
 800ab80:	0018      	movs	r0, r3
 800ab82:	f000 f929 	bl	800add8 <RTC_Bcd2ToByte>
 800ab86:	0003      	movs	r3, r0
 800ab88:	001a      	movs	r2, r3
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2220      	movs	r2, #32
 800ab92:	5c9b      	ldrb	r3, [r3, r2]
 800ab94:	0018      	movs	r0, r3
 800ab96:	f000 f91f 	bl	800add8 <RTC_Bcd2ToByte>
 800ab9a:	0003      	movs	r3, r0
 800ab9c:	0019      	movs	r1, r3
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2220      	movs	r2, #32
 800aba2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	0018      	movs	r0, r3
 800aba8:	46bd      	mov	sp, r7
 800abaa:	b006      	add	sp, #24
 800abac:	bd80      	pop	{r7, pc}
 800abae:	46c0      	nop			@ (mov r8, r8)
 800abb0:	80808080 	.word	0x80808080

0800abb4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	699a      	ldr	r2, [r3, #24]
 800abc2:	2380      	movs	r3, #128	@ 0x80
 800abc4:	015b      	lsls	r3, r3, #5
 800abc6:	4013      	ands	r3, r2
 800abc8:	d011      	beq.n	800abee <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abd0:	2201      	movs	r2, #1
 800abd2:	4013      	ands	r3, r2
 800abd4:	d00b      	beq.n	800abee <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2101      	movs	r1, #1
 800abe2:	430a      	orrs	r2, r1
 800abe4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	0018      	movs	r0, r3
 800abea:	f7fb fd81 	bl	80066f0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	699a      	ldr	r2, [r3, #24]
 800abf4:	2380      	movs	r3, #128	@ 0x80
 800abf6:	019b      	lsls	r3, r3, #6
 800abf8:	4013      	ands	r3, r2
 800abfa:	d011      	beq.n	800ac20 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac02:	2202      	movs	r2, #2
 800ac04:	4013      	ands	r3, r2
 800ac06:	d00b      	beq.n	800ac20 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2102      	movs	r1, #2
 800ac14:	430a      	orrs	r2, r1
 800ac16:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	0018      	movs	r0, r3
 800ac1c:	f000 f9ba 	bl	800af94 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2229      	movs	r2, #41	@ 0x29
 800ac24:	2101      	movs	r1, #1
 800ac26:	5499      	strb	r1, [r3, r2]
}
 800ac28:	46c0      	nop			@ (mov r8, r8)
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b002      	add	sp, #8
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a0e      	ldr	r2, [pc, #56]	@ (800ac78 <HAL_RTC_WaitForSynchro+0x48>)
 800ac3e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ac40:	f7fd fb04 	bl	800824c <HAL_GetTick>
 800ac44:	0003      	movs	r3, r0
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ac48:	e00a      	b.n	800ac60 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac4a:	f7fd faff 	bl	800824c <HAL_GetTick>
 800ac4e:	0002      	movs	r2, r0
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	1ad2      	subs	r2, r2, r3
 800ac54:	23fa      	movs	r3, #250	@ 0xfa
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d901      	bls.n	800ac60 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e006      	b.n	800ac6e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	2220      	movs	r2, #32
 800ac68:	4013      	ands	r3, r2
 800ac6a:	d0ee      	beq.n	800ac4a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	0018      	movs	r0, r3
 800ac70:	46bd      	mov	sp, r7
 800ac72:	b004      	add	sp, #16
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	46c0      	nop			@ (mov r8, r8)
 800ac78:	0001005f 	.word	0x0001005f

0800ac7c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800ac84:	230f      	movs	r3, #15
 800ac86:	18fb      	adds	r3, r7, r3
 800ac88:	2200      	movs	r2, #0
 800ac8a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	2240      	movs	r2, #64	@ 0x40
 800ac94:	4013      	ands	r3, r2
 800ac96:	d12c      	bne.n	800acf2 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68da      	ldr	r2, [r3, #12]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2180      	movs	r1, #128	@ 0x80
 800aca4:	430a      	orrs	r2, r1
 800aca6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800aca8:	f7fd fad0 	bl	800824c <HAL_GetTick>
 800acac:	0003      	movs	r3, r0
 800acae:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800acb0:	e014      	b.n	800acdc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800acb2:	f7fd facb 	bl	800824c <HAL_GetTick>
 800acb6:	0002      	movs	r2, r0
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	1ad2      	subs	r2, r2, r3
 800acbc:	200f      	movs	r0, #15
 800acbe:	183b      	adds	r3, r7, r0
 800acc0:	1839      	adds	r1, r7, r0
 800acc2:	7809      	ldrb	r1, [r1, #0]
 800acc4:	7019      	strb	r1, [r3, #0]
 800acc6:	23fa      	movs	r3, #250	@ 0xfa
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	429a      	cmp	r2, r3
 800accc:	d906      	bls.n	800acdc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800acce:	183b      	adds	r3, r7, r0
 800acd0:	2203      	movs	r2, #3
 800acd2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2229      	movs	r2, #41	@ 0x29
 800acd8:	2103      	movs	r1, #3
 800acda:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	2240      	movs	r2, #64	@ 0x40
 800ace4:	4013      	ands	r3, r2
 800ace6:	d104      	bne.n	800acf2 <RTC_EnterInitMode+0x76>
 800ace8:	230f      	movs	r3, #15
 800acea:	18fb      	adds	r3, r7, r3
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d1df      	bne.n	800acb2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800acf2:	230f      	movs	r3, #15
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	781b      	ldrb	r3, [r3, #0]
}
 800acf8:	0018      	movs	r0, r3
 800acfa:	46bd      	mov	sp, r7
 800acfc:	b004      	add	sp, #16
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad08:	240f      	movs	r4, #15
 800ad0a:	193b      	adds	r3, r7, r4
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ad10:	4b1c      	ldr	r3, [pc, #112]	@ (800ad84 <RTC_ExitInitMode+0x84>)
 800ad12:	68da      	ldr	r2, [r3, #12]
 800ad14:	4b1b      	ldr	r3, [pc, #108]	@ (800ad84 <RTC_ExitInitMode+0x84>)
 800ad16:	2180      	movs	r1, #128	@ 0x80
 800ad18:	438a      	bics	r2, r1
 800ad1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ad1c:	4b19      	ldr	r3, [pc, #100]	@ (800ad84 <RTC_ExitInitMode+0x84>)
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	2220      	movs	r2, #32
 800ad22:	4013      	ands	r3, r2
 800ad24:	d10d      	bne.n	800ad42 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	0018      	movs	r0, r3
 800ad2a:	f7ff ff81 	bl	800ac30 <HAL_RTC_WaitForSynchro>
 800ad2e:	1e03      	subs	r3, r0, #0
 800ad30:	d021      	beq.n	800ad76 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2229      	movs	r2, #41	@ 0x29
 800ad36:	2103      	movs	r1, #3
 800ad38:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ad3a:	193b      	adds	r3, r7, r4
 800ad3c:	2203      	movs	r2, #3
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	e019      	b.n	800ad76 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ad42:	4b10      	ldr	r3, [pc, #64]	@ (800ad84 <RTC_ExitInitMode+0x84>)
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	4b0f      	ldr	r3, [pc, #60]	@ (800ad84 <RTC_ExitInitMode+0x84>)
 800ad48:	2120      	movs	r1, #32
 800ad4a:	438a      	bics	r2, r1
 800ad4c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	0018      	movs	r0, r3
 800ad52:	f7ff ff6d 	bl	800ac30 <HAL_RTC_WaitForSynchro>
 800ad56:	1e03      	subs	r3, r0, #0
 800ad58:	d007      	beq.n	800ad6a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2229      	movs	r2, #41	@ 0x29
 800ad5e:	2103      	movs	r1, #3
 800ad60:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ad62:	230f      	movs	r3, #15
 800ad64:	18fb      	adds	r3, r7, r3
 800ad66:	2203      	movs	r2, #3
 800ad68:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ad6a:	4b06      	ldr	r3, [pc, #24]	@ (800ad84 <RTC_ExitInitMode+0x84>)
 800ad6c:	699a      	ldr	r2, [r3, #24]
 800ad6e:	4b05      	ldr	r3, [pc, #20]	@ (800ad84 <RTC_ExitInitMode+0x84>)
 800ad70:	2120      	movs	r1, #32
 800ad72:	430a      	orrs	r2, r1
 800ad74:	619a      	str	r2, [r3, #24]
  }

  return status;
 800ad76:	230f      	movs	r3, #15
 800ad78:	18fb      	adds	r3, r7, r3
 800ad7a:	781b      	ldrb	r3, [r3, #0]
}
 800ad7c:	0018      	movs	r0, r3
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	b005      	add	sp, #20
 800ad82:	bd90      	pop	{r4, r7, pc}
 800ad84:	40002800 	.word	0x40002800

0800ad88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	0002      	movs	r2, r0
 800ad90:	1dfb      	adds	r3, r7, #7
 800ad92:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800ad98:	230b      	movs	r3, #11
 800ad9a:	18fb      	adds	r3, r7, r3
 800ad9c:	1dfa      	adds	r2, r7, #7
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800ada2:	e008      	b.n	800adb6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	3301      	adds	r3, #1
 800ada8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800adaa:	220b      	movs	r2, #11
 800adac:	18bb      	adds	r3, r7, r2
 800adae:	18ba      	adds	r2, r7, r2
 800adb0:	7812      	ldrb	r2, [r2, #0]
 800adb2:	3a0a      	subs	r2, #10
 800adb4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800adb6:	210b      	movs	r1, #11
 800adb8:	187b      	adds	r3, r7, r1
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b09      	cmp	r3, #9
 800adbe:	d8f1      	bhi.n	800ada4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	011b      	lsls	r3, r3, #4
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	187b      	adds	r3, r7, r1
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	4313      	orrs	r3, r2
 800adce:	b2db      	uxtb	r3, r3
}
 800add0:	0018      	movs	r0, r3
 800add2:	46bd      	mov	sp, r7
 800add4:	b004      	add	sp, #16
 800add6:	bd80      	pop	{r7, pc}

0800add8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	0002      	movs	r2, r0
 800ade0:	1dfb      	adds	r3, r7, #7
 800ade2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800ade4:	1dfb      	adds	r3, r7, #7
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	091b      	lsrs	r3, r3, #4
 800adea:	b2db      	uxtb	r3, r3
 800adec:	001a      	movs	r2, r3
 800adee:	0013      	movs	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	189b      	adds	r3, r3, r2
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	1dfb      	adds	r3, r7, #7
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	210f      	movs	r1, #15
 800ae02:	400b      	ands	r3, r1
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	18d3      	adds	r3, r2, r3
 800ae08:	b2db      	uxtb	r3, r3
}
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b004      	add	sp, #16
 800ae10:	bd80      	pop	{r7, pc}
	...

0800ae14 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2228      	movs	r2, #40	@ 0x28
 800ae24:	5c9b      	ldrb	r3, [r3, r2]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d101      	bne.n	800ae2e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800ae2a:	2302      	movs	r3, #2
 800ae2c:	e082      	b.n	800af34 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2228      	movs	r2, #40	@ 0x28
 800ae32:	2101      	movs	r1, #1
 800ae34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2229      	movs	r2, #41	@ 0x29
 800ae3a:	2102      	movs	r1, #2
 800ae3c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	22ca      	movs	r2, #202	@ 0xca
 800ae44:	625a      	str	r2, [r3, #36]	@ 0x24
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2253      	movs	r2, #83	@ 0x53
 800ae4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	699a      	ldr	r2, [r3, #24]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4938      	ldr	r1, [pc, #224]	@ (800af3c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800ae5a:	400a      	ands	r2, r1
 800ae5c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2104      	movs	r1, #4
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ae6e:	4b34      	ldr	r3, [pc, #208]	@ (800af40 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	2240      	movs	r2, #64	@ 0x40
 800ae74:	4013      	ands	r3, r2
 800ae76:	d121      	bne.n	800aebc <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800ae78:	f7fd f9e8 	bl	800824c <HAL_GetTick>
 800ae7c:	0003      	movs	r3, r0
 800ae7e:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ae80:	e016      	b.n	800aeb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ae82:	f7fd f9e3 	bl	800824c <HAL_GetTick>
 800ae86:	0002      	movs	r2, r0
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	1ad2      	subs	r2, r2, r3
 800ae8c:	23fa      	movs	r3, #250	@ 0xfa
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d90d      	bls.n	800aeb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	22ff      	movs	r2, #255	@ 0xff
 800ae9a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2229      	movs	r2, #41	@ 0x29
 800aea0:	2103      	movs	r1, #3
 800aea2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2228      	movs	r2, #40	@ 0x28
 800aea8:	2100      	movs	r1, #0
 800aeaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e041      	b.n	800af34 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	2204      	movs	r2, #4
 800aeb8:	4013      	ands	r3, r2
 800aeba:	d0e2      	beq.n	800ae82 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699a      	ldr	r2, [r3, #24]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2107      	movs	r1, #7
 800aed0:	438a      	bics	r2, r1
 800aed2:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6999      	ldr	r1, [r3, #24]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	430a      	orrs	r2, r1
 800aee2:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800aee4:	4a17      	ldr	r2, [pc, #92]	@ (800af44 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800aee6:	2380      	movs	r3, #128	@ 0x80
 800aee8:	58d3      	ldr	r3, [r2, r3]
 800aeea:	4916      	ldr	r1, [pc, #88]	@ (800af44 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800aeec:	2280      	movs	r2, #128	@ 0x80
 800aeee:	0312      	lsls	r2, r2, #12
 800aef0:	4313      	orrs	r3, r2
 800aef2:	2280      	movs	r2, #128	@ 0x80
 800aef4:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	699a      	ldr	r2, [r3, #24]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2180      	movs	r1, #128	@ 0x80
 800af02:	01c9      	lsls	r1, r1, #7
 800af04:	430a      	orrs	r2, r1
 800af06:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2180      	movs	r1, #128	@ 0x80
 800af14:	00c9      	lsls	r1, r1, #3
 800af16:	430a      	orrs	r2, r1
 800af18:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	22ff      	movs	r2, #255	@ 0xff
 800af20:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2229      	movs	r2, #41	@ 0x29
 800af26:	2101      	movs	r1, #1
 800af28:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2228      	movs	r2, #40	@ 0x28
 800af2e:	2100      	movs	r1, #0
 800af30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	0018      	movs	r0, r3
 800af36:	46bd      	mov	sp, r7
 800af38:	b006      	add	sp, #24
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	fffffbff 	.word	0xfffffbff
 800af40:	40002800 	.word	0x40002800
 800af44:	40021800 	.word	0x40021800

0800af48 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af56:	2204      	movs	r2, #4
 800af58:	4013      	ands	r3, r2
 800af5a:	d00b      	beq.n	800af74 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2104      	movs	r1, #4
 800af68:	430a      	orrs	r2, r1
 800af6a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	0018      	movs	r0, r3
 800af70:	f000 f808 	bl	800af84 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2229      	movs	r2, #41	@ 0x29
 800af78:	2101      	movs	r1, #1
 800af7a:	5499      	strb	r1, [r3, r2]
}
 800af7c:	46c0      	nop			@ (mov r8, r8)
 800af7e:	46bd      	mov	sp, r7
 800af80:	b002      	add	sp, #8
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800af8c:	46c0      	nop			@ (mov r8, r8)
 800af8e:	46bd      	mov	sp, r7
 800af90:	b002      	add	sp, #8
 800af92:	bd80      	pop	{r7, pc}

0800af94 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800af9c:	46c0      	nop			@ (mov r8, r8)
 800af9e:	46bd      	mov	sp, r7
 800afa0:	b002      	add	sp, #8
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e0a8      	b.n	800b108 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d109      	bne.n	800afd2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	685a      	ldr	r2, [r3, #4]
 800afc2:	2382      	movs	r3, #130	@ 0x82
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d009      	beq.n	800afde <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	61da      	str	r2, [r3, #28]
 800afd0:	e005      	b.n	800afde <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	225d      	movs	r2, #93	@ 0x5d
 800afe8:	5c9b      	ldrb	r3, [r3, r2]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d107      	bne.n	800b000 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	225c      	movs	r2, #92	@ 0x5c
 800aff4:	2100      	movs	r1, #0
 800aff6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	0018      	movs	r0, r3
 800affc:	f7fc f8ba 	bl	8007174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	225d      	movs	r2, #93	@ 0x5d
 800b004:	2102      	movs	r1, #2
 800b006:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2140      	movs	r1, #64	@ 0x40
 800b014:	438a      	bics	r2, r1
 800b016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	23e0      	movs	r3, #224	@ 0xe0
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	429a      	cmp	r2, r3
 800b022:	d902      	bls.n	800b02a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b024:	2300      	movs	r3, #0
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	e002      	b.n	800b030 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b02a:	2380      	movs	r3, #128	@ 0x80
 800b02c:	015b      	lsls	r3, r3, #5
 800b02e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	23f0      	movs	r3, #240	@ 0xf0
 800b036:	011b      	lsls	r3, r3, #4
 800b038:	429a      	cmp	r2, r3
 800b03a:	d008      	beq.n	800b04e <HAL_SPI_Init+0xaa>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68da      	ldr	r2, [r3, #12]
 800b040:	23e0      	movs	r3, #224	@ 0xe0
 800b042:	00db      	lsls	r3, r3, #3
 800b044:	429a      	cmp	r2, r3
 800b046:	d002      	beq.n	800b04e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	2382      	movs	r3, #130	@ 0x82
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	401a      	ands	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6899      	ldr	r1, [r3, #8]
 800b05c:	2384      	movs	r3, #132	@ 0x84
 800b05e:	021b      	lsls	r3, r3, #8
 800b060:	400b      	ands	r3, r1
 800b062:	431a      	orrs	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	2102      	movs	r1, #2
 800b06a:	400b      	ands	r3, r1
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	2101      	movs	r1, #1
 800b074:	400b      	ands	r3, r1
 800b076:	431a      	orrs	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6999      	ldr	r1, [r3, #24]
 800b07c:	2380      	movs	r3, #128	@ 0x80
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	400b      	ands	r3, r1
 800b082:	431a      	orrs	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	2138      	movs	r1, #56	@ 0x38
 800b08a:	400b      	ands	r3, r1
 800b08c:	431a      	orrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	2180      	movs	r1, #128	@ 0x80
 800b094:	400b      	ands	r3, r1
 800b096:	431a      	orrs	r2, r3
 800b098:	0011      	movs	r1, r2
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b09e:	2380      	movs	r3, #128	@ 0x80
 800b0a0:	019b      	lsls	r3, r3, #6
 800b0a2:	401a      	ands	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	0c1b      	lsrs	r3, r3, #16
 800b0b2:	2204      	movs	r2, #4
 800b0b4:	401a      	ands	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ba:	2110      	movs	r1, #16
 800b0bc:	400b      	ands	r3, r1
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0c4:	2108      	movs	r1, #8
 800b0c6:	400b      	ands	r3, r1
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68d9      	ldr	r1, [r3, #12]
 800b0ce:	23f0      	movs	r3, #240	@ 0xf0
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	400b      	ands	r3, r1
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	0011      	movs	r1, r2
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	2380      	movs	r3, #128	@ 0x80
 800b0dc:	015b      	lsls	r3, r3, #5
 800b0de:	401a      	ands	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	69da      	ldr	r2, [r3, #28]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4907      	ldr	r1, [pc, #28]	@ (800b110 <HAL_SPI_Init+0x16c>)
 800b0f4:	400a      	ands	r2, r1
 800b0f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	225d      	movs	r2, #93	@ 0x5d
 800b102:	2101      	movs	r1, #1
 800b104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	0018      	movs	r0, r3
 800b10a:	46bd      	mov	sp, r7
 800b10c:	b004      	add	sp, #16
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	fffff7ff 	.word	0xfffff7ff

0800b114 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	603b      	str	r3, [r7, #0]
 800b120:	1dbb      	adds	r3, r7, #6
 800b122:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b124:	231f      	movs	r3, #31
 800b126:	18fb      	adds	r3, r7, r3
 800b128:	2200      	movs	r2, #0
 800b12a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	225c      	movs	r2, #92	@ 0x5c
 800b130:	5c9b      	ldrb	r3, [r3, r2]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d101      	bne.n	800b13a <HAL_SPI_Transmit+0x26>
 800b136:	2302      	movs	r3, #2
 800b138:	e147      	b.n	800b3ca <HAL_SPI_Transmit+0x2b6>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	225c      	movs	r2, #92	@ 0x5c
 800b13e:	2101      	movs	r1, #1
 800b140:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b142:	f7fd f883 	bl	800824c <HAL_GetTick>
 800b146:	0003      	movs	r3, r0
 800b148:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b14a:	2316      	movs	r3, #22
 800b14c:	18fb      	adds	r3, r7, r3
 800b14e:	1dba      	adds	r2, r7, #6
 800b150:	8812      	ldrh	r2, [r2, #0]
 800b152:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	225d      	movs	r2, #93	@ 0x5d
 800b158:	5c9b      	ldrb	r3, [r3, r2]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d004      	beq.n	800b16a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b160:	231f      	movs	r3, #31
 800b162:	18fb      	adds	r3, r7, r3
 800b164:	2202      	movs	r2, #2
 800b166:	701a      	strb	r2, [r3, #0]
    goto error;
 800b168:	e128      	b.n	800b3bc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <HAL_SPI_Transmit+0x64>
 800b170:	1dbb      	adds	r3, r7, #6
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b178:	231f      	movs	r3, #31
 800b17a:	18fb      	adds	r3, r7, r3
 800b17c:	2201      	movs	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b180:	e11c      	b.n	800b3bc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	225d      	movs	r2, #93	@ 0x5d
 800b186:	2103      	movs	r1, #3
 800b188:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	1dba      	adds	r2, r7, #6
 800b19a:	8812      	ldrh	r2, [r2, #0]
 800b19c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	1dba      	adds	r2, r7, #6
 800b1a2:	8812      	ldrh	r2, [r2, #0]
 800b1a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2244      	movs	r2, #68	@ 0x44
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2246      	movs	r2, #70	@ 0x46
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	2380      	movs	r3, #128	@ 0x80
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d110      	bne.n	800b1f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2140      	movs	r1, #64	@ 0x40
 800b1e0:	438a      	bics	r2, r1
 800b1e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2180      	movs	r1, #128	@ 0x80
 800b1f0:	01c9      	lsls	r1, r1, #7
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2240      	movs	r2, #64	@ 0x40
 800b1fe:	4013      	ands	r3, r2
 800b200:	2b40      	cmp	r3, #64	@ 0x40
 800b202:	d007      	beq.n	800b214 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2140      	movs	r1, #64	@ 0x40
 800b210:	430a      	orrs	r2, r1
 800b212:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	23e0      	movs	r3, #224	@ 0xe0
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d952      	bls.n	800b2c6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d004      	beq.n	800b232 <HAL_SPI_Transmit+0x11e>
 800b228:	2316      	movs	r3, #22
 800b22a:	18fb      	adds	r3, r7, r3
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d143      	bne.n	800b2ba <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b236:	881a      	ldrh	r2, [r3, #0]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b242:	1c9a      	adds	r2, r3, #2
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	3b01      	subs	r3, #1
 800b250:	b29a      	uxth	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b256:	e030      	b.n	800b2ba <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	2202      	movs	r2, #2
 800b260:	4013      	ands	r3, r2
 800b262:	2b02      	cmp	r3, #2
 800b264:	d112      	bne.n	800b28c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26a:	881a      	ldrh	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b276:	1c9a      	adds	r2, r3, #2
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b280:	b29b      	uxth	r3, r3
 800b282:	3b01      	subs	r3, #1
 800b284:	b29a      	uxth	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b28a:	e016      	b.n	800b2ba <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b28c:	f7fc ffde 	bl	800824c <HAL_GetTick>
 800b290:	0002      	movs	r2, r0
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	1ad3      	subs	r3, r2, r3
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d802      	bhi.n	800b2a2 <HAL_SPI_Transmit+0x18e>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	d102      	bne.n	800b2a8 <HAL_SPI_Transmit+0x194>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d108      	bne.n	800b2ba <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b2a8:	231f      	movs	r3, #31
 800b2aa:	18fb      	adds	r3, r7, r3
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	225d      	movs	r2, #93	@ 0x5d
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	5499      	strb	r1, [r3, r2]
          goto error;
 800b2b8:	e080      	b.n	800b3bc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1c9      	bne.n	800b258 <HAL_SPI_Transmit+0x144>
 800b2c4:	e053      	b.n	800b36e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d004      	beq.n	800b2d8 <HAL_SPI_Transmit+0x1c4>
 800b2ce:	2316      	movs	r3, #22
 800b2d0:	18fb      	adds	r3, r7, r3
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d145      	bne.n	800b364 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	7812      	ldrb	r2, [r2, #0]
 800b2e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b2fe:	e031      	b.n	800b364 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	2202      	movs	r2, #2
 800b308:	4013      	ands	r3, r2
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d113      	bne.n	800b336 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	330c      	adds	r3, #12
 800b318:	7812      	ldrb	r2, [r2, #0]
 800b31a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	3b01      	subs	r3, #1
 800b32e:	b29a      	uxth	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b334:	e016      	b.n	800b364 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b336:	f7fc ff89 	bl	800824c <HAL_GetTick>
 800b33a:	0002      	movs	r2, r0
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d802      	bhi.n	800b34c <HAL_SPI_Transmit+0x238>
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	3301      	adds	r3, #1
 800b34a:	d102      	bne.n	800b352 <HAL_SPI_Transmit+0x23e>
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d108      	bne.n	800b364 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b352:	231f      	movs	r3, #31
 800b354:	18fb      	adds	r3, r7, r3
 800b356:	2203      	movs	r2, #3
 800b358:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	225d      	movs	r2, #93	@ 0x5d
 800b35e:	2101      	movs	r1, #1
 800b360:	5499      	strb	r1, [r3, r2]
          goto error;
 800b362:	e02b      	b.n	800b3bc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b368:	b29b      	uxth	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1c8      	bne.n	800b300 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	0018      	movs	r0, r3
 800b376:	f000 f95d 	bl	800b634 <SPI_EndRxTxTransaction>
 800b37a:	1e03      	subs	r3, r0, #0
 800b37c:	d002      	beq.n	800b384 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b38c:	2300      	movs	r3, #0
 800b38e:	613b      	str	r3, [r7, #16]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	613b      	str	r3, [r7, #16]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	613b      	str	r3, [r7, #16]
 800b3a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b3aa:	231f      	movs	r3, #31
 800b3ac:	18fb      	adds	r3, r7, r3
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	701a      	strb	r2, [r3, #0]
 800b3b2:	e003      	b.n	800b3bc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	225d      	movs	r2, #93	@ 0x5d
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	225c      	movs	r2, #92	@ 0x5c
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b3c4:	231f      	movs	r3, #31
 800b3c6:	18fb      	adds	r3, r7, r3
 800b3c8:	781b      	ldrb	r3, [r3, #0]
}
 800b3ca:	0018      	movs	r0, r3
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	b008      	add	sp, #32
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	1dfb      	adds	r3, r7, #7
 800b3e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b3e4:	f7fc ff32 	bl	800824c <HAL_GetTick>
 800b3e8:	0002      	movs	r2, r0
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	1a9b      	subs	r3, r3, r2
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	18d3      	adds	r3, r2, r3
 800b3f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b3f4:	f7fc ff2a 	bl	800824c <HAL_GetTick>
 800b3f8:	0003      	movs	r3, r0
 800b3fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b3fc:	4b3a      	ldr	r3, [pc, #232]	@ (800b4e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	015b      	lsls	r3, r3, #5
 800b402:	0d1b      	lsrs	r3, r3, #20
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	4353      	muls	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b40a:	e058      	b.n	800b4be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	3301      	adds	r3, #1
 800b410:	d055      	beq.n	800b4be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b412:	f7fc ff1b 	bl	800824c <HAL_GetTick>
 800b416:	0002      	movs	r2, r0
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	69fa      	ldr	r2, [r7, #28]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d902      	bls.n	800b428 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d142      	bne.n	800b4ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	21e0      	movs	r1, #224	@ 0xe0
 800b434:	438a      	bics	r2, r1
 800b436:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	2382      	movs	r3, #130	@ 0x82
 800b43e:	005b      	lsls	r3, r3, #1
 800b440:	429a      	cmp	r2, r3
 800b442:	d113      	bne.n	800b46c <SPI_WaitFlagStateUntilTimeout+0x98>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	2380      	movs	r3, #128	@ 0x80
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d005      	beq.n	800b45c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	689a      	ldr	r2, [r3, #8]
 800b454:	2380      	movs	r3, #128	@ 0x80
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	429a      	cmp	r2, r3
 800b45a:	d107      	bne.n	800b46c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2140      	movs	r1, #64	@ 0x40
 800b468:	438a      	bics	r2, r1
 800b46a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b470:	2380      	movs	r3, #128	@ 0x80
 800b472:	019b      	lsls	r3, r3, #6
 800b474:	429a      	cmp	r2, r3
 800b476:	d110      	bne.n	800b49a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	491a      	ldr	r1, [pc, #104]	@ (800b4ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b484:	400a      	ands	r2, r1
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2180      	movs	r1, #128	@ 0x80
 800b494:	0189      	lsls	r1, r1, #6
 800b496:	430a      	orrs	r2, r1
 800b498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	225d      	movs	r2, #93	@ 0x5d
 800b49e:	2101      	movs	r1, #1
 800b4a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	225c      	movs	r2, #92	@ 0x5c
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e017      	b.n	800b4de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	425a      	negs	r2, r3
 800b4ce:	4153      	adcs	r3, r2
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	001a      	movs	r2, r3
 800b4d4:	1dfb      	adds	r3, r7, #7
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d197      	bne.n	800b40c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	0018      	movs	r0, r3
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b008      	add	sp, #32
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	46c0      	nop			@ (mov r8, r8)
 800b4e8:	200009a8 	.word	0x200009a8
 800b4ec:	ffffdfff 	.word	0xffffdfff

0800b4f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08a      	sub	sp, #40	@ 0x28
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b4fe:	2317      	movs	r3, #23
 800b500:	18fb      	adds	r3, r7, r3
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b506:	f7fc fea1 	bl	800824c <HAL_GetTick>
 800b50a:	0002      	movs	r2, r0
 800b50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	18d3      	adds	r3, r2, r3
 800b514:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b516:	f7fc fe99 	bl	800824c <HAL_GetTick>
 800b51a:	0003      	movs	r3, r0
 800b51c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	330c      	adds	r3, #12
 800b524:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b526:	4b41      	ldr	r3, [pc, #260]	@ (800b62c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	0013      	movs	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	189b      	adds	r3, r3, r2
 800b530:	00da      	lsls	r2, r3, #3
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	0d1b      	lsrs	r3, r3, #20
 800b536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b538:	4353      	muls	r3, r2
 800b53a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b53c:	e068      	b.n	800b610 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	23c0      	movs	r3, #192	@ 0xc0
 800b542:	00db      	lsls	r3, r3, #3
 800b544:	429a      	cmp	r2, r3
 800b546:	d10a      	bne.n	800b55e <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d107      	bne.n	800b55e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b2da      	uxtb	r2, r3
 800b554:	2117      	movs	r1, #23
 800b556:	187b      	adds	r3, r7, r1
 800b558:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b55a:	187b      	adds	r3, r7, r1
 800b55c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	3301      	adds	r3, #1
 800b562:	d055      	beq.n	800b610 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b564:	f7fc fe72 	bl	800824c <HAL_GetTick>
 800b568:	0002      	movs	r2, r0
 800b56a:	6a3b      	ldr	r3, [r7, #32]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b570:	429a      	cmp	r2, r3
 800b572:	d902      	bls.n	800b57a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b576:	2b00      	cmp	r3, #0
 800b578:	d142      	bne.n	800b600 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	21e0      	movs	r1, #224	@ 0xe0
 800b586:	438a      	bics	r2, r1
 800b588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	2382      	movs	r3, #130	@ 0x82
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	429a      	cmp	r2, r3
 800b594:	d113      	bne.n	800b5be <SPI_WaitFifoStateUntilTimeout+0xce>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	689a      	ldr	r2, [r3, #8]
 800b59a:	2380      	movs	r3, #128	@ 0x80
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d005      	beq.n	800b5ae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	2380      	movs	r3, #128	@ 0x80
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d107      	bne.n	800b5be <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2140      	movs	r1, #64	@ 0x40
 800b5ba:	438a      	bics	r2, r1
 800b5bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b5c2:	2380      	movs	r3, #128	@ 0x80
 800b5c4:	019b      	lsls	r3, r3, #6
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d110      	bne.n	800b5ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4916      	ldr	r1, [pc, #88]	@ (800b630 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b5d6:	400a      	ands	r2, r1
 800b5d8:	601a      	str	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2180      	movs	r1, #128	@ 0x80
 800b5e6:	0189      	lsls	r1, r1, #6
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	225d      	movs	r2, #93	@ 0x5d
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	225c      	movs	r2, #92	@ 0x5c
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e010      	b.n	800b622 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	4013      	ands	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d18e      	bne.n	800b53e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	0018      	movs	r0, r3
 800b624:	46bd      	mov	sp, r7
 800b626:	b00a      	add	sp, #40	@ 0x28
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	46c0      	nop			@ (mov r8, r8)
 800b62c:	200009a8 	.word	0x200009a8
 800b630:	ffffdfff 	.word	0xffffdfff

0800b634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af02      	add	r7, sp, #8
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	23c0      	movs	r3, #192	@ 0xc0
 800b644:	0159      	lsls	r1, r3, #5
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	0013      	movs	r3, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	f7ff ff4e 	bl	800b4f0 <SPI_WaitFifoStateUntilTimeout>
 800b654:	1e03      	subs	r3, r0, #0
 800b656:	d007      	beq.n	800b668 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b65c:	2220      	movs	r2, #32
 800b65e:	431a      	orrs	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e027      	b.n	800b6b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	0013      	movs	r3, r2
 800b672:	2200      	movs	r2, #0
 800b674:	2180      	movs	r1, #128	@ 0x80
 800b676:	f7ff fead 	bl	800b3d4 <SPI_WaitFlagStateUntilTimeout>
 800b67a:	1e03      	subs	r3, r0, #0
 800b67c:	d007      	beq.n	800b68e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b682:	2220      	movs	r2, #32
 800b684:	431a      	orrs	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e014      	b.n	800b6b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	23c0      	movs	r3, #192	@ 0xc0
 800b692:	00d9      	lsls	r1, r3, #3
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	0013      	movs	r3, r2
 800b69c:	2200      	movs	r2, #0
 800b69e:	f7ff ff27 	bl	800b4f0 <SPI_WaitFifoStateUntilTimeout>
 800b6a2:	1e03      	subs	r3, r0, #0
 800b6a4:	d007      	beq.n	800b6b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	431a      	orrs	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	e000      	b.n	800b6b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	0018      	movs	r0, r3
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	b004      	add	sp, #16
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e04a      	b.n	800b768 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	223d      	movs	r2, #61	@ 0x3d
 800b6d6:	5c9b      	ldrb	r3, [r3, r2]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d107      	bne.n	800b6ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	223c      	movs	r2, #60	@ 0x3c
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f7fb fdb1 	bl	8007250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	223d      	movs	r2, #61	@ 0x3d
 800b6f2:	2102      	movs	r1, #2
 800b6f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	0019      	movs	r1, r3
 800b700:	0010      	movs	r0, r2
 800b702:	f000 fb11 	bl	800bd28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2248      	movs	r2, #72	@ 0x48
 800b70a:	2101      	movs	r1, #1
 800b70c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	223e      	movs	r2, #62	@ 0x3e
 800b712:	2101      	movs	r1, #1
 800b714:	5499      	strb	r1, [r3, r2]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	223f      	movs	r2, #63	@ 0x3f
 800b71a:	2101      	movs	r1, #1
 800b71c:	5499      	strb	r1, [r3, r2]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2240      	movs	r2, #64	@ 0x40
 800b722:	2101      	movs	r1, #1
 800b724:	5499      	strb	r1, [r3, r2]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2241      	movs	r2, #65	@ 0x41
 800b72a:	2101      	movs	r1, #1
 800b72c:	5499      	strb	r1, [r3, r2]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2242      	movs	r2, #66	@ 0x42
 800b732:	2101      	movs	r1, #1
 800b734:	5499      	strb	r1, [r3, r2]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2243      	movs	r2, #67	@ 0x43
 800b73a:	2101      	movs	r1, #1
 800b73c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2244      	movs	r2, #68	@ 0x44
 800b742:	2101      	movs	r1, #1
 800b744:	5499      	strb	r1, [r3, r2]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2245      	movs	r2, #69	@ 0x45
 800b74a:	2101      	movs	r1, #1
 800b74c:	5499      	strb	r1, [r3, r2]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2246      	movs	r2, #70	@ 0x46
 800b752:	2101      	movs	r1, #1
 800b754:	5499      	strb	r1, [r3, r2]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2247      	movs	r2, #71	@ 0x47
 800b75a:	2101      	movs	r1, #1
 800b75c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	223d      	movs	r2, #61	@ 0x3d
 800b762:	2101      	movs	r1, #1
 800b764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	0018      	movs	r0, r3
 800b76a:	46bd      	mov	sp, r7
 800b76c:	b002      	add	sp, #8
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e04a      	b.n	800b818 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	223d      	movs	r2, #61	@ 0x3d
 800b786:	5c9b      	ldrb	r3, [r3, r2]
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d107      	bne.n	800b79e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	223c      	movs	r2, #60	@ 0x3c
 800b792:	2100      	movs	r1, #0
 800b794:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	0018      	movs	r0, r3
 800b79a:	f000 f841 	bl	800b820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	223d      	movs	r2, #61	@ 0x3d
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	0019      	movs	r1, r3
 800b7b0:	0010      	movs	r0, r2
 800b7b2:	f000 fab9 	bl	800bd28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2248      	movs	r2, #72	@ 0x48
 800b7ba:	2101      	movs	r1, #1
 800b7bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	223e      	movs	r2, #62	@ 0x3e
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	5499      	strb	r1, [r3, r2]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	223f      	movs	r2, #63	@ 0x3f
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	5499      	strb	r1, [r3, r2]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2240      	movs	r2, #64	@ 0x40
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	5499      	strb	r1, [r3, r2]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2241      	movs	r2, #65	@ 0x41
 800b7da:	2101      	movs	r1, #1
 800b7dc:	5499      	strb	r1, [r3, r2]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2242      	movs	r2, #66	@ 0x42
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	5499      	strb	r1, [r3, r2]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2243      	movs	r2, #67	@ 0x43
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2244      	movs	r2, #68	@ 0x44
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	5499      	strb	r1, [r3, r2]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2245      	movs	r2, #69	@ 0x45
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	5499      	strb	r1, [r3, r2]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2246      	movs	r2, #70	@ 0x46
 800b802:	2101      	movs	r1, #1
 800b804:	5499      	strb	r1, [r3, r2]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2247      	movs	r2, #71	@ 0x47
 800b80a:	2101      	movs	r1, #1
 800b80c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	223d      	movs	r2, #61	@ 0x3d
 800b812:	2101      	movs	r1, #1
 800b814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	0018      	movs	r0, r3
 800b81a:	46bd      	mov	sp, r7
 800b81c:	b002      	add	sp, #8
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b828:	46c0      	nop			@ (mov r8, r8)
 800b82a:	46bd      	mov	sp, r7
 800b82c:	b002      	add	sp, #8
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d108      	bne.n	800b852 <HAL_TIM_PWM_Start+0x22>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	223e      	movs	r2, #62	@ 0x3e
 800b844:	5c9b      	ldrb	r3, [r3, r2]
 800b846:	b2db      	uxtb	r3, r3
 800b848:	3b01      	subs	r3, #1
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	4193      	sbcs	r3, r2
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	e037      	b.n	800b8c2 <HAL_TIM_PWM_Start+0x92>
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b04      	cmp	r3, #4
 800b856:	d108      	bne.n	800b86a <HAL_TIM_PWM_Start+0x3a>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	223f      	movs	r2, #63	@ 0x3f
 800b85c:	5c9b      	ldrb	r3, [r3, r2]
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	3b01      	subs	r3, #1
 800b862:	1e5a      	subs	r2, r3, #1
 800b864:	4193      	sbcs	r3, r2
 800b866:	b2db      	uxtb	r3, r3
 800b868:	e02b      	b.n	800b8c2 <HAL_TIM_PWM_Start+0x92>
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b08      	cmp	r3, #8
 800b86e:	d108      	bne.n	800b882 <HAL_TIM_PWM_Start+0x52>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2240      	movs	r2, #64	@ 0x40
 800b874:	5c9b      	ldrb	r3, [r3, r2]
 800b876:	b2db      	uxtb	r3, r3
 800b878:	3b01      	subs	r3, #1
 800b87a:	1e5a      	subs	r2, r3, #1
 800b87c:	4193      	sbcs	r3, r2
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	e01f      	b.n	800b8c2 <HAL_TIM_PWM_Start+0x92>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2b0c      	cmp	r3, #12
 800b886:	d108      	bne.n	800b89a <HAL_TIM_PWM_Start+0x6a>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2241      	movs	r2, #65	@ 0x41
 800b88c:	5c9b      	ldrb	r3, [r3, r2]
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	1e5a      	subs	r2, r3, #1
 800b894:	4193      	sbcs	r3, r2
 800b896:	b2db      	uxtb	r3, r3
 800b898:	e013      	b.n	800b8c2 <HAL_TIM_PWM_Start+0x92>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b10      	cmp	r3, #16
 800b89e:	d108      	bne.n	800b8b2 <HAL_TIM_PWM_Start+0x82>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2242      	movs	r2, #66	@ 0x42
 800b8a4:	5c9b      	ldrb	r3, [r3, r2]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	1e5a      	subs	r2, r3, #1
 800b8ac:	4193      	sbcs	r3, r2
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	e007      	b.n	800b8c2 <HAL_TIM_PWM_Start+0x92>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2243      	movs	r2, #67	@ 0x43
 800b8b6:	5c9b      	ldrb	r3, [r3, r2]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	1e5a      	subs	r2, r3, #1
 800b8be:	4193      	sbcs	r3, r2
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e090      	b.n	800b9ec <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d104      	bne.n	800b8da <HAL_TIM_PWM_Start+0xaa>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	223e      	movs	r2, #62	@ 0x3e
 800b8d4:	2102      	movs	r1, #2
 800b8d6:	5499      	strb	r1, [r3, r2]
 800b8d8:	e023      	b.n	800b922 <HAL_TIM_PWM_Start+0xf2>
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	2b04      	cmp	r3, #4
 800b8de:	d104      	bne.n	800b8ea <HAL_TIM_PWM_Start+0xba>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	223f      	movs	r2, #63	@ 0x3f
 800b8e4:	2102      	movs	r1, #2
 800b8e6:	5499      	strb	r1, [r3, r2]
 800b8e8:	e01b      	b.n	800b922 <HAL_TIM_PWM_Start+0xf2>
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b08      	cmp	r3, #8
 800b8ee:	d104      	bne.n	800b8fa <HAL_TIM_PWM_Start+0xca>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2240      	movs	r2, #64	@ 0x40
 800b8f4:	2102      	movs	r1, #2
 800b8f6:	5499      	strb	r1, [r3, r2]
 800b8f8:	e013      	b.n	800b922 <HAL_TIM_PWM_Start+0xf2>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b0c      	cmp	r3, #12
 800b8fe:	d104      	bne.n	800b90a <HAL_TIM_PWM_Start+0xda>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2241      	movs	r2, #65	@ 0x41
 800b904:	2102      	movs	r1, #2
 800b906:	5499      	strb	r1, [r3, r2]
 800b908:	e00b      	b.n	800b922 <HAL_TIM_PWM_Start+0xf2>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b10      	cmp	r3, #16
 800b90e:	d104      	bne.n	800b91a <HAL_TIM_PWM_Start+0xea>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2242      	movs	r2, #66	@ 0x42
 800b914:	2102      	movs	r1, #2
 800b916:	5499      	strb	r1, [r3, r2]
 800b918:	e003      	b.n	800b922 <HAL_TIM_PWM_Start+0xf2>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2243      	movs	r2, #67	@ 0x43
 800b91e:	2102      	movs	r1, #2
 800b920:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	2201      	movs	r2, #1
 800b92a:	0018      	movs	r0, r3
 800b92c:	f000 fd58 	bl	800c3e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a2f      	ldr	r2, [pc, #188]	@ (800b9f4 <HAL_TIM_PWM_Start+0x1c4>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00e      	beq.n	800b958 <HAL_TIM_PWM_Start+0x128>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a2e      	ldr	r2, [pc, #184]	@ (800b9f8 <HAL_TIM_PWM_Start+0x1c8>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d009      	beq.n	800b958 <HAL_TIM_PWM_Start+0x128>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a2c      	ldr	r2, [pc, #176]	@ (800b9fc <HAL_TIM_PWM_Start+0x1cc>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d004      	beq.n	800b958 <HAL_TIM_PWM_Start+0x128>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a2b      	ldr	r2, [pc, #172]	@ (800ba00 <HAL_TIM_PWM_Start+0x1d0>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d101      	bne.n	800b95c <HAL_TIM_PWM_Start+0x12c>
 800b958:	2301      	movs	r3, #1
 800b95a:	e000      	b.n	800b95e <HAL_TIM_PWM_Start+0x12e>
 800b95c:	2300      	movs	r3, #0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2180      	movs	r1, #128	@ 0x80
 800b96e:	0209      	lsls	r1, r1, #8
 800b970:	430a      	orrs	r2, r1
 800b972:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a1e      	ldr	r2, [pc, #120]	@ (800b9f4 <HAL_TIM_PWM_Start+0x1c4>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d014      	beq.n	800b9a8 <HAL_TIM_PWM_Start+0x178>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	2380      	movs	r3, #128	@ 0x80
 800b984:	05db      	lsls	r3, r3, #23
 800b986:	429a      	cmp	r2, r3
 800b988:	d00e      	beq.n	800b9a8 <HAL_TIM_PWM_Start+0x178>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a1d      	ldr	r2, [pc, #116]	@ (800ba04 <HAL_TIM_PWM_Start+0x1d4>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d009      	beq.n	800b9a8 <HAL_TIM_PWM_Start+0x178>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a1b      	ldr	r2, [pc, #108]	@ (800ba08 <HAL_TIM_PWM_Start+0x1d8>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d004      	beq.n	800b9a8 <HAL_TIM_PWM_Start+0x178>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a15      	ldr	r2, [pc, #84]	@ (800b9f8 <HAL_TIM_PWM_Start+0x1c8>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d116      	bne.n	800b9d6 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	4a17      	ldr	r2, [pc, #92]	@ (800ba0c <HAL_TIM_PWM_Start+0x1dc>)
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2b06      	cmp	r3, #6
 800b9b8:	d016      	beq.n	800b9e8 <HAL_TIM_PWM_Start+0x1b8>
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	2380      	movs	r3, #128	@ 0x80
 800b9be:	025b      	lsls	r3, r3, #9
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d011      	beq.n	800b9e8 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d4:	e008      	b.n	800b9e8 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	601a      	str	r2, [r3, #0]
 800b9e6:	e000      	b.n	800b9ea <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	b004      	add	sp, #16
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	40012c00 	.word	0x40012c00
 800b9f8:	40014000 	.word	0x40014000
 800b9fc:	40014400 	.word	0x40014400
 800ba00:	40014800 	.word	0x40014800
 800ba04:	40000400 	.word	0x40000400
 800ba08:	40000800 	.word	0x40000800
 800ba0c:	00010007 	.word	0x00010007

0800ba10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	2200      	movs	r2, #0
 800ba22:	0018      	movs	r0, r3
 800ba24:	f000 fcdc 	bl	800c3e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a37      	ldr	r2, [pc, #220]	@ (800bb0c <HAL_TIM_PWM_Stop+0xfc>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d00e      	beq.n	800ba50 <HAL_TIM_PWM_Stop+0x40>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a36      	ldr	r2, [pc, #216]	@ (800bb10 <HAL_TIM_PWM_Stop+0x100>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d009      	beq.n	800ba50 <HAL_TIM_PWM_Stop+0x40>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a34      	ldr	r2, [pc, #208]	@ (800bb14 <HAL_TIM_PWM_Stop+0x104>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d004      	beq.n	800ba50 <HAL_TIM_PWM_Stop+0x40>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a33      	ldr	r2, [pc, #204]	@ (800bb18 <HAL_TIM_PWM_Stop+0x108>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d101      	bne.n	800ba54 <HAL_TIM_PWM_Stop+0x44>
 800ba50:	2301      	movs	r3, #1
 800ba52:	e000      	b.n	800ba56 <HAL_TIM_PWM_Stop+0x46>
 800ba54:	2300      	movs	r3, #0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d013      	beq.n	800ba82 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	4a2e      	ldr	r2, [pc, #184]	@ (800bb1c <HAL_TIM_PWM_Stop+0x10c>)
 800ba62:	4013      	ands	r3, r2
 800ba64:	d10d      	bne.n	800ba82 <HAL_TIM_PWM_Stop+0x72>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	4a2c      	ldr	r2, [pc, #176]	@ (800bb20 <HAL_TIM_PWM_Stop+0x110>)
 800ba6e:	4013      	ands	r3, r2
 800ba70:	d107      	bne.n	800ba82 <HAL_TIM_PWM_Stop+0x72>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4929      	ldr	r1, [pc, #164]	@ (800bb24 <HAL_TIM_PWM_Stop+0x114>)
 800ba7e:	400a      	ands	r2, r1
 800ba80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	6a1b      	ldr	r3, [r3, #32]
 800ba88:	4a24      	ldr	r2, [pc, #144]	@ (800bb1c <HAL_TIM_PWM_Stop+0x10c>)
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	d10d      	bne.n	800baaa <HAL_TIM_PWM_Stop+0x9a>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6a1b      	ldr	r3, [r3, #32]
 800ba94:	4a22      	ldr	r2, [pc, #136]	@ (800bb20 <HAL_TIM_PWM_Stop+0x110>)
 800ba96:	4013      	ands	r3, r2
 800ba98:	d107      	bne.n	800baaa <HAL_TIM_PWM_Stop+0x9a>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2101      	movs	r1, #1
 800baa6:	438a      	bics	r2, r1
 800baa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <HAL_TIM_PWM_Stop+0xaa>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	223e      	movs	r2, #62	@ 0x3e
 800bab4:	2101      	movs	r1, #1
 800bab6:	5499      	strb	r1, [r3, r2]
 800bab8:	e023      	b.n	800bb02 <HAL_TIM_PWM_Stop+0xf2>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b04      	cmp	r3, #4
 800babe:	d104      	bne.n	800baca <HAL_TIM_PWM_Stop+0xba>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	223f      	movs	r2, #63	@ 0x3f
 800bac4:	2101      	movs	r1, #1
 800bac6:	5499      	strb	r1, [r3, r2]
 800bac8:	e01b      	b.n	800bb02 <HAL_TIM_PWM_Stop+0xf2>
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	2b08      	cmp	r3, #8
 800bace:	d104      	bne.n	800bada <HAL_TIM_PWM_Stop+0xca>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2240      	movs	r2, #64	@ 0x40
 800bad4:	2101      	movs	r1, #1
 800bad6:	5499      	strb	r1, [r3, r2]
 800bad8:	e013      	b.n	800bb02 <HAL_TIM_PWM_Stop+0xf2>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b0c      	cmp	r3, #12
 800bade:	d104      	bne.n	800baea <HAL_TIM_PWM_Stop+0xda>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2241      	movs	r2, #65	@ 0x41
 800bae4:	2101      	movs	r1, #1
 800bae6:	5499      	strb	r1, [r3, r2]
 800bae8:	e00b      	b.n	800bb02 <HAL_TIM_PWM_Stop+0xf2>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b10      	cmp	r3, #16
 800baee:	d104      	bne.n	800bafa <HAL_TIM_PWM_Stop+0xea>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2242      	movs	r2, #66	@ 0x42
 800baf4:	2101      	movs	r1, #1
 800baf6:	5499      	strb	r1, [r3, r2]
 800baf8:	e003      	b.n	800bb02 <HAL_TIM_PWM_Stop+0xf2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2243      	movs	r2, #67	@ 0x43
 800bafe:	2101      	movs	r1, #1
 800bb00:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	0018      	movs	r0, r3
 800bb06:	46bd      	mov	sp, r7
 800bb08:	b002      	add	sp, #8
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	40012c00 	.word	0x40012c00
 800bb10:	40014000 	.word	0x40014000
 800bb14:	40014400 	.word	0x40014400
 800bb18:	40014800 	.word	0x40014800
 800bb1c:	00001111 	.word	0x00001111
 800bb20:	00000444 	.word	0x00000444
 800bb24:	ffff7fff 	.word	0xffff7fff

0800bb28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb34:	2317      	movs	r3, #23
 800bb36:	18fb      	adds	r3, r7, r3
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	223c      	movs	r2, #60	@ 0x3c
 800bb40:	5c9b      	ldrb	r3, [r3, r2]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d101      	bne.n	800bb4a <HAL_TIM_PWM_ConfigChannel+0x22>
 800bb46:	2302      	movs	r3, #2
 800bb48:	e0e5      	b.n	800bd16 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	223c      	movs	r2, #60	@ 0x3c
 800bb4e:	2101      	movs	r1, #1
 800bb50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b14      	cmp	r3, #20
 800bb56:	d900      	bls.n	800bb5a <HAL_TIM_PWM_ConfigChannel+0x32>
 800bb58:	e0d1      	b.n	800bcfe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	009a      	lsls	r2, r3, #2
 800bb5e:	4b70      	ldr	r3, [pc, #448]	@ (800bd20 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800bb60:	18d3      	adds	r3, r2, r3
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	0011      	movs	r1, r2
 800bb6e:	0018      	movs	r0, r3
 800bb70:	f000 f972 	bl	800be58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2108      	movs	r1, #8
 800bb80:	430a      	orrs	r2, r1
 800bb82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	699a      	ldr	r2, [r3, #24]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2104      	movs	r1, #4
 800bb90:	438a      	bics	r2, r1
 800bb92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6999      	ldr	r1, [r3, #24]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	691a      	ldr	r2, [r3, #16]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	430a      	orrs	r2, r1
 800bba4:	619a      	str	r2, [r3, #24]
      break;
 800bba6:	e0af      	b.n	800bd08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	0011      	movs	r1, r2
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f000 f9db 	bl	800bf6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	699a      	ldr	r2, [r3, #24]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2180      	movs	r1, #128	@ 0x80
 800bbc2:	0109      	lsls	r1, r1, #4
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	699a      	ldr	r2, [r3, #24]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4954      	ldr	r1, [pc, #336]	@ (800bd24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800bbd4:	400a      	ands	r2, r1
 800bbd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6999      	ldr	r1, [r3, #24]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	021a      	lsls	r2, r3, #8
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	619a      	str	r2, [r3, #24]
      break;
 800bbec:	e08c      	b.n	800bd08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	0011      	movs	r1, r2
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	f000 fa3c 	bl	800c074 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	69da      	ldr	r2, [r3, #28]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2108      	movs	r1, #8
 800bc08:	430a      	orrs	r2, r1
 800bc0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	69da      	ldr	r2, [r3, #28]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2104      	movs	r1, #4
 800bc18:	438a      	bics	r2, r1
 800bc1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	69d9      	ldr	r1, [r3, #28]
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	691a      	ldr	r2, [r3, #16]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	61da      	str	r2, [r3, #28]
      break;
 800bc2e:	e06b      	b.n	800bd08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	0011      	movs	r1, r2
 800bc38:	0018      	movs	r0, r3
 800bc3a:	f000 faa3 	bl	800c184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	69da      	ldr	r2, [r3, #28]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2180      	movs	r1, #128	@ 0x80
 800bc4a:	0109      	lsls	r1, r1, #4
 800bc4c:	430a      	orrs	r2, r1
 800bc4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	69da      	ldr	r2, [r3, #28]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4932      	ldr	r1, [pc, #200]	@ (800bd24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800bc5c:	400a      	ands	r2, r1
 800bc5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69d9      	ldr	r1, [r3, #28]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	021a      	lsls	r2, r3, #8
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	430a      	orrs	r2, r1
 800bc72:	61da      	str	r2, [r3, #28]
      break;
 800bc74:	e048      	b.n	800bd08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	0011      	movs	r1, r2
 800bc7e:	0018      	movs	r0, r3
 800bc80:	f000 faea 	bl	800c258 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2108      	movs	r1, #8
 800bc90:	430a      	orrs	r2, r1
 800bc92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2104      	movs	r1, #4
 800bca0:	438a      	bics	r2, r1
 800bca2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	691a      	ldr	r2, [r3, #16]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bcb6:	e027      	b.n	800bd08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	0011      	movs	r1, r2
 800bcc0:	0018      	movs	r0, r3
 800bcc2:	f000 fb29 	bl	800c318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2180      	movs	r1, #128	@ 0x80
 800bcd2:	0109      	lsls	r1, r1, #4
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4910      	ldr	r1, [pc, #64]	@ (800bd24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800bce4:	400a      	ands	r2, r1
 800bce6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	021a      	lsls	r2, r3, #8
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bcfc:	e004      	b.n	800bd08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800bcfe:	2317      	movs	r3, #23
 800bd00:	18fb      	adds	r3, r7, r3
 800bd02:	2201      	movs	r2, #1
 800bd04:	701a      	strb	r2, [r3, #0]
      break;
 800bd06:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	223c      	movs	r2, #60	@ 0x3c
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	5499      	strb	r1, [r3, r2]

  return status;
 800bd10:	2317      	movs	r3, #23
 800bd12:	18fb      	adds	r3, r7, r3
 800bd14:	781b      	ldrb	r3, [r3, #0]
}
 800bd16:	0018      	movs	r0, r3
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	b006      	add	sp, #24
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	46c0      	nop			@ (mov r8, r8)
 800bd20:	0801195c 	.word	0x0801195c
 800bd24:	fffffbff 	.word	0xfffffbff

0800bd28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a3f      	ldr	r2, [pc, #252]	@ (800be38 <TIM_Base_SetConfig+0x110>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d00c      	beq.n	800bd5a <TIM_Base_SetConfig+0x32>
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	2380      	movs	r3, #128	@ 0x80
 800bd44:	05db      	lsls	r3, r3, #23
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d007      	beq.n	800bd5a <TIM_Base_SetConfig+0x32>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a3b      	ldr	r2, [pc, #236]	@ (800be3c <TIM_Base_SetConfig+0x114>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d003      	beq.n	800bd5a <TIM_Base_SetConfig+0x32>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a3a      	ldr	r2, [pc, #232]	@ (800be40 <TIM_Base_SetConfig+0x118>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d108      	bne.n	800bd6c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2270      	movs	r2, #112	@ 0x70
 800bd5e:	4393      	bics	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a32      	ldr	r2, [pc, #200]	@ (800be38 <TIM_Base_SetConfig+0x110>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d01c      	beq.n	800bdae <TIM_Base_SetConfig+0x86>
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	2380      	movs	r3, #128	@ 0x80
 800bd78:	05db      	lsls	r3, r3, #23
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d017      	beq.n	800bdae <TIM_Base_SetConfig+0x86>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a2e      	ldr	r2, [pc, #184]	@ (800be3c <TIM_Base_SetConfig+0x114>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d013      	beq.n	800bdae <TIM_Base_SetConfig+0x86>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a2d      	ldr	r2, [pc, #180]	@ (800be40 <TIM_Base_SetConfig+0x118>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d00f      	beq.n	800bdae <TIM_Base_SetConfig+0x86>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4a2c      	ldr	r2, [pc, #176]	@ (800be44 <TIM_Base_SetConfig+0x11c>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d00b      	beq.n	800bdae <TIM_Base_SetConfig+0x86>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a2b      	ldr	r2, [pc, #172]	@ (800be48 <TIM_Base_SetConfig+0x120>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d007      	beq.n	800bdae <TIM_Base_SetConfig+0x86>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a2a      	ldr	r2, [pc, #168]	@ (800be4c <TIM_Base_SetConfig+0x124>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d003      	beq.n	800bdae <TIM_Base_SetConfig+0x86>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a29      	ldr	r2, [pc, #164]	@ (800be50 <TIM_Base_SetConfig+0x128>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d108      	bne.n	800bdc0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4a28      	ldr	r2, [pc, #160]	@ (800be54 <TIM_Base_SetConfig+0x12c>)
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2280      	movs	r2, #128	@ 0x80
 800bdc4:	4393      	bics	r3, r2
 800bdc6:	001a      	movs	r2, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a13      	ldr	r2, [pc, #76]	@ (800be38 <TIM_Base_SetConfig+0x110>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d00b      	beq.n	800be06 <TIM_Base_SetConfig+0xde>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a15      	ldr	r2, [pc, #84]	@ (800be48 <TIM_Base_SetConfig+0x120>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d007      	beq.n	800be06 <TIM_Base_SetConfig+0xde>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a14      	ldr	r2, [pc, #80]	@ (800be4c <TIM_Base_SetConfig+0x124>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d003      	beq.n	800be06 <TIM_Base_SetConfig+0xde>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a13      	ldr	r2, [pc, #76]	@ (800be50 <TIM_Base_SetConfig+0x128>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d103      	bne.n	800be0e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	691a      	ldr	r2, [r3, #16]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	2201      	movs	r2, #1
 800be1a:	4013      	ands	r3, r2
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d106      	bne.n	800be2e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	2201      	movs	r2, #1
 800be26:	4393      	bics	r3, r2
 800be28:	001a      	movs	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	611a      	str	r2, [r3, #16]
  }
}
 800be2e:	46c0      	nop			@ (mov r8, r8)
 800be30:	46bd      	mov	sp, r7
 800be32:	b004      	add	sp, #16
 800be34:	bd80      	pop	{r7, pc}
 800be36:	46c0      	nop			@ (mov r8, r8)
 800be38:	40012c00 	.word	0x40012c00
 800be3c:	40000400 	.word	0x40000400
 800be40:	40000800 	.word	0x40000800
 800be44:	40002000 	.word	0x40002000
 800be48:	40014000 	.word	0x40014000
 800be4c:	40014400 	.word	0x40014400
 800be50:	40014800 	.word	0x40014800
 800be54:	fffffcff 	.word	0xfffffcff

0800be58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	2201      	movs	r2, #1
 800be6e:	4393      	bics	r3, r2
 800be70:	001a      	movs	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	4a32      	ldr	r2, [pc, #200]	@ (800bf50 <TIM_OC1_SetConfig+0xf8>)
 800be86:	4013      	ands	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2203      	movs	r2, #3
 800be8e:	4393      	bics	r3, r2
 800be90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4313      	orrs	r3, r2
 800be9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	2202      	movs	r2, #2
 800bea0:	4393      	bics	r3, r2
 800bea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4313      	orrs	r3, r2
 800beac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a28      	ldr	r2, [pc, #160]	@ (800bf54 <TIM_OC1_SetConfig+0xfc>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d00b      	beq.n	800bece <TIM_OC1_SetConfig+0x76>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a27      	ldr	r2, [pc, #156]	@ (800bf58 <TIM_OC1_SetConfig+0x100>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d007      	beq.n	800bece <TIM_OC1_SetConfig+0x76>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a26      	ldr	r2, [pc, #152]	@ (800bf5c <TIM_OC1_SetConfig+0x104>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d003      	beq.n	800bece <TIM_OC1_SetConfig+0x76>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a25      	ldr	r2, [pc, #148]	@ (800bf60 <TIM_OC1_SetConfig+0x108>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d10c      	bne.n	800bee8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2208      	movs	r2, #8
 800bed2:	4393      	bics	r3, r2
 800bed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	4313      	orrs	r3, r2
 800bede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2204      	movs	r2, #4
 800bee4:	4393      	bics	r3, r2
 800bee6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a1a      	ldr	r2, [pc, #104]	@ (800bf54 <TIM_OC1_SetConfig+0xfc>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d00b      	beq.n	800bf08 <TIM_OC1_SetConfig+0xb0>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a19      	ldr	r2, [pc, #100]	@ (800bf58 <TIM_OC1_SetConfig+0x100>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d007      	beq.n	800bf08 <TIM_OC1_SetConfig+0xb0>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a18      	ldr	r2, [pc, #96]	@ (800bf5c <TIM_OC1_SetConfig+0x104>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d003      	beq.n	800bf08 <TIM_OC1_SetConfig+0xb0>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a17      	ldr	r2, [pc, #92]	@ (800bf60 <TIM_OC1_SetConfig+0x108>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d111      	bne.n	800bf2c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	4a16      	ldr	r2, [pc, #88]	@ (800bf64 <TIM_OC1_SetConfig+0x10c>)
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	4a15      	ldr	r2, [pc, #84]	@ (800bf68 <TIM_OC1_SetConfig+0x110>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	685a      	ldr	r2, [r3, #4]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	621a      	str	r2, [r3, #32]
}
 800bf46:	46c0      	nop			@ (mov r8, r8)
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	b006      	add	sp, #24
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	46c0      	nop			@ (mov r8, r8)
 800bf50:	fffeff8f 	.word	0xfffeff8f
 800bf54:	40012c00 	.word	0x40012c00
 800bf58:	40014000 	.word	0x40014000
 800bf5c:	40014400 	.word	0x40014400
 800bf60:	40014800 	.word	0x40014800
 800bf64:	fffffeff 	.word	0xfffffeff
 800bf68:	fffffdff 	.word	0xfffffdff

0800bf6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b086      	sub	sp, #24
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a1b      	ldr	r3, [r3, #32]
 800bf80:	2210      	movs	r2, #16
 800bf82:	4393      	bics	r3, r2
 800bf84:	001a      	movs	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	4a2e      	ldr	r2, [pc, #184]	@ (800c054 <TIM_OC2_SetConfig+0xe8>)
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	4a2d      	ldr	r2, [pc, #180]	@ (800c058 <TIM_OC2_SetConfig+0xec>)
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	021b      	lsls	r3, r3, #8
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	4393      	bics	r3, r2
 800bfb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	011b      	lsls	r3, r3, #4
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a24      	ldr	r2, [pc, #144]	@ (800c05c <TIM_OC2_SetConfig+0xf0>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d10d      	bne.n	800bfea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2280      	movs	r2, #128	@ 0x80
 800bfd2:	4393      	bics	r3, r2
 800bfd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	2240      	movs	r2, #64	@ 0x40
 800bfe6:	4393      	bics	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a1b      	ldr	r2, [pc, #108]	@ (800c05c <TIM_OC2_SetConfig+0xf0>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d00b      	beq.n	800c00a <TIM_OC2_SetConfig+0x9e>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a1a      	ldr	r2, [pc, #104]	@ (800c060 <TIM_OC2_SetConfig+0xf4>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d007      	beq.n	800c00a <TIM_OC2_SetConfig+0x9e>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a19      	ldr	r2, [pc, #100]	@ (800c064 <TIM_OC2_SetConfig+0xf8>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d003      	beq.n	800c00a <TIM_OC2_SetConfig+0x9e>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a18      	ldr	r2, [pc, #96]	@ (800c068 <TIM_OC2_SetConfig+0xfc>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d113      	bne.n	800c032 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	4a17      	ldr	r2, [pc, #92]	@ (800c06c <TIM_OC2_SetConfig+0x100>)
 800c00e:	4013      	ands	r3, r2
 800c010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	4a16      	ldr	r2, [pc, #88]	@ (800c070 <TIM_OC2_SetConfig+0x104>)
 800c016:	4013      	ands	r3, r2
 800c018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	4313      	orrs	r3, r2
 800c024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	4313      	orrs	r3, r2
 800c030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	685a      	ldr	r2, [r3, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	621a      	str	r2, [r3, #32]
}
 800c04c:	46c0      	nop			@ (mov r8, r8)
 800c04e:	46bd      	mov	sp, r7
 800c050:	b006      	add	sp, #24
 800c052:	bd80      	pop	{r7, pc}
 800c054:	feff8fff 	.word	0xfeff8fff
 800c058:	fffffcff 	.word	0xfffffcff
 800c05c:	40012c00 	.word	0x40012c00
 800c060:	40014000 	.word	0x40014000
 800c064:	40014400 	.word	0x40014400
 800c068:	40014800 	.word	0x40014800
 800c06c:	fffffbff 	.word	0xfffffbff
 800c070:	fffff7ff 	.word	0xfffff7ff

0800c074 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a1b      	ldr	r3, [r3, #32]
 800c088:	4a33      	ldr	r2, [pc, #204]	@ (800c158 <TIM_OC3_SetConfig+0xe4>)
 800c08a:	401a      	ands	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	69db      	ldr	r3, [r3, #28]
 800c09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4a2f      	ldr	r2, [pc, #188]	@ (800c15c <TIM_OC3_SetConfig+0xe8>)
 800c0a0:	4013      	ands	r3, r2
 800c0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2203      	movs	r2, #3
 800c0a8:	4393      	bics	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	4a29      	ldr	r2, [pc, #164]	@ (800c160 <TIM_OC3_SetConfig+0xec>)
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	021b      	lsls	r3, r3, #8
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a25      	ldr	r2, [pc, #148]	@ (800c164 <TIM_OC3_SetConfig+0xf0>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d10d      	bne.n	800c0ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	4a24      	ldr	r2, [pc, #144]	@ (800c168 <TIM_OC3_SetConfig+0xf4>)
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	021b      	lsls	r3, r3, #8
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	4a20      	ldr	r2, [pc, #128]	@ (800c16c <TIM_OC3_SetConfig+0xf8>)
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a1c      	ldr	r2, [pc, #112]	@ (800c164 <TIM_OC3_SetConfig+0xf0>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d00b      	beq.n	800c10e <TIM_OC3_SetConfig+0x9a>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c170 <TIM_OC3_SetConfig+0xfc>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d007      	beq.n	800c10e <TIM_OC3_SetConfig+0x9a>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a1c      	ldr	r2, [pc, #112]	@ (800c174 <TIM_OC3_SetConfig+0x100>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d003      	beq.n	800c10e <TIM_OC3_SetConfig+0x9a>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a1b      	ldr	r2, [pc, #108]	@ (800c178 <TIM_OC3_SetConfig+0x104>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d113      	bne.n	800c136 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	4a1a      	ldr	r2, [pc, #104]	@ (800c17c <TIM_OC3_SetConfig+0x108>)
 800c112:	4013      	ands	r3, r2
 800c114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	4a19      	ldr	r2, [pc, #100]	@ (800c180 <TIM_OC3_SetConfig+0x10c>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	695b      	ldr	r3, [r3, #20]
 800c122:	011b      	lsls	r3, r3, #4
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	4313      	orrs	r3, r2
 800c128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	4313      	orrs	r3, r2
 800c134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	693a      	ldr	r2, [r7, #16]
 800c13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	621a      	str	r2, [r3, #32]
}
 800c150:	46c0      	nop			@ (mov r8, r8)
 800c152:	46bd      	mov	sp, r7
 800c154:	b006      	add	sp, #24
 800c156:	bd80      	pop	{r7, pc}
 800c158:	fffffeff 	.word	0xfffffeff
 800c15c:	fffeff8f 	.word	0xfffeff8f
 800c160:	fffffdff 	.word	0xfffffdff
 800c164:	40012c00 	.word	0x40012c00
 800c168:	fffff7ff 	.word	0xfffff7ff
 800c16c:	fffffbff 	.word	0xfffffbff
 800c170:	40014000 	.word	0x40014000
 800c174:	40014400 	.word	0x40014400
 800c178:	40014800 	.word	0x40014800
 800c17c:	ffffefff 	.word	0xffffefff
 800c180:	ffffdfff 	.word	0xffffdfff

0800c184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	4a26      	ldr	r2, [pc, #152]	@ (800c234 <TIM_OC4_SetConfig+0xb0>)
 800c19a:	401a      	ands	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	69db      	ldr	r3, [r3, #28]
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4a22      	ldr	r2, [pc, #136]	@ (800c238 <TIM_OC4_SetConfig+0xb4>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	4a21      	ldr	r2, [pc, #132]	@ (800c23c <TIM_OC4_SetConfig+0xb8>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	021b      	lsls	r3, r3, #8
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	4a1d      	ldr	r2, [pc, #116]	@ (800c240 <TIM_OC4_SetConfig+0xbc>)
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	031b      	lsls	r3, r3, #12
 800c1d6:	693a      	ldr	r2, [r7, #16]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a19      	ldr	r2, [pc, #100]	@ (800c244 <TIM_OC4_SetConfig+0xc0>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d00b      	beq.n	800c1fc <TIM_OC4_SetConfig+0x78>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a18      	ldr	r2, [pc, #96]	@ (800c248 <TIM_OC4_SetConfig+0xc4>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d007      	beq.n	800c1fc <TIM_OC4_SetConfig+0x78>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a17      	ldr	r2, [pc, #92]	@ (800c24c <TIM_OC4_SetConfig+0xc8>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d003      	beq.n	800c1fc <TIM_OC4_SetConfig+0x78>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a16      	ldr	r2, [pc, #88]	@ (800c250 <TIM_OC4_SetConfig+0xcc>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d109      	bne.n	800c210 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	4a15      	ldr	r2, [pc, #84]	@ (800c254 <TIM_OC4_SetConfig+0xd0>)
 800c200:	4013      	ands	r3, r2
 800c202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	019b      	lsls	r3, r3, #6
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	697a      	ldr	r2, [r7, #20]
 800c214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685a      	ldr	r2, [r3, #4]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	621a      	str	r2, [r3, #32]
}
 800c22a:	46c0      	nop			@ (mov r8, r8)
 800c22c:	46bd      	mov	sp, r7
 800c22e:	b006      	add	sp, #24
 800c230:	bd80      	pop	{r7, pc}
 800c232:	46c0      	nop			@ (mov r8, r8)
 800c234:	ffffefff 	.word	0xffffefff
 800c238:	feff8fff 	.word	0xfeff8fff
 800c23c:	fffffcff 	.word	0xfffffcff
 800c240:	ffffdfff 	.word	0xffffdfff
 800c244:	40012c00 	.word	0x40012c00
 800c248:	40014000 	.word	0x40014000
 800c24c:	40014400 	.word	0x40014400
 800c250:	40014800 	.word	0x40014800
 800c254:	ffffbfff 	.word	0xffffbfff

0800c258 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6a1b      	ldr	r3, [r3, #32]
 800c266:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a1b      	ldr	r3, [r3, #32]
 800c26c:	4a23      	ldr	r2, [pc, #140]	@ (800c2fc <TIM_OC5_SetConfig+0xa4>)
 800c26e:	401a      	ands	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	4a1f      	ldr	r2, [pc, #124]	@ (800c300 <TIM_OC5_SetConfig+0xa8>)
 800c284:	4013      	ands	r3, r2
 800c286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	4a1b      	ldr	r2, [pc, #108]	@ (800c304 <TIM_OC5_SetConfig+0xac>)
 800c296:	4013      	ands	r3, r2
 800c298:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	041b      	lsls	r3, r3, #16
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a17      	ldr	r2, [pc, #92]	@ (800c308 <TIM_OC5_SetConfig+0xb0>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d00b      	beq.n	800c2c6 <TIM_OC5_SetConfig+0x6e>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a16      	ldr	r2, [pc, #88]	@ (800c30c <TIM_OC5_SetConfig+0xb4>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d007      	beq.n	800c2c6 <TIM_OC5_SetConfig+0x6e>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a15      	ldr	r2, [pc, #84]	@ (800c310 <TIM_OC5_SetConfig+0xb8>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d003      	beq.n	800c2c6 <TIM_OC5_SetConfig+0x6e>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a14      	ldr	r2, [pc, #80]	@ (800c314 <TIM_OC5_SetConfig+0xbc>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d109      	bne.n	800c2da <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	4a0c      	ldr	r2, [pc, #48]	@ (800c2fc <TIM_OC5_SetConfig+0xa4>)
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	021b      	lsls	r3, r3, #8
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	685a      	ldr	r2, [r3, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	621a      	str	r2, [r3, #32]
}
 800c2f4:	46c0      	nop			@ (mov r8, r8)
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	b006      	add	sp, #24
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	fffeffff 	.word	0xfffeffff
 800c300:	fffeff8f 	.word	0xfffeff8f
 800c304:	fffdffff 	.word	0xfffdffff
 800c308:	40012c00 	.word	0x40012c00
 800c30c:	40014000 	.word	0x40014000
 800c310:	40014400 	.word	0x40014400
 800c314:	40014800 	.word	0x40014800

0800c318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a1b      	ldr	r3, [r3, #32]
 800c326:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	4a24      	ldr	r2, [pc, #144]	@ (800c3c0 <TIM_OC6_SetConfig+0xa8>)
 800c32e:	401a      	ands	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	4a20      	ldr	r2, [pc, #128]	@ (800c3c4 <TIM_OC6_SetConfig+0xac>)
 800c344:	4013      	ands	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	4313      	orrs	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	4a1c      	ldr	r2, [pc, #112]	@ (800c3c8 <TIM_OC6_SetConfig+0xb0>)
 800c358:	4013      	ands	r3, r2
 800c35a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	051b      	lsls	r3, r3, #20
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	4313      	orrs	r3, r2
 800c366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a18      	ldr	r2, [pc, #96]	@ (800c3cc <TIM_OC6_SetConfig+0xb4>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d00b      	beq.n	800c388 <TIM_OC6_SetConfig+0x70>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a17      	ldr	r2, [pc, #92]	@ (800c3d0 <TIM_OC6_SetConfig+0xb8>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d007      	beq.n	800c388 <TIM_OC6_SetConfig+0x70>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a16      	ldr	r2, [pc, #88]	@ (800c3d4 <TIM_OC6_SetConfig+0xbc>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d003      	beq.n	800c388 <TIM_OC6_SetConfig+0x70>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a15      	ldr	r2, [pc, #84]	@ (800c3d8 <TIM_OC6_SetConfig+0xc0>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d109      	bne.n	800c39c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	4a14      	ldr	r2, [pc, #80]	@ (800c3dc <TIM_OC6_SetConfig+0xc4>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	029b      	lsls	r3, r3, #10
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	4313      	orrs	r3, r2
 800c39a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	621a      	str	r2, [r3, #32]
}
 800c3b6:	46c0      	nop			@ (mov r8, r8)
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	b006      	add	sp, #24
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	46c0      	nop			@ (mov r8, r8)
 800c3c0:	ffefffff 	.word	0xffefffff
 800c3c4:	feff8fff 	.word	0xfeff8fff
 800c3c8:	ffdfffff 	.word	0xffdfffff
 800c3cc:	40012c00 	.word	0x40012c00
 800c3d0:	40014000 	.word	0x40014000
 800c3d4:	40014400 	.word	0x40014400
 800c3d8:	40014800 	.word	0x40014800
 800c3dc:	fffbffff 	.word	0xfffbffff

0800c3e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	221f      	movs	r2, #31
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	409a      	lsls	r2, r3
 800c3f6:	0013      	movs	r3, r2
 800c3f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	43d2      	mvns	r2, r2
 800c402:	401a      	ands	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6a1a      	ldr	r2, [r3, #32]
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	211f      	movs	r1, #31
 800c410:	400b      	ands	r3, r1
 800c412:	6879      	ldr	r1, [r7, #4]
 800c414:	4099      	lsls	r1, r3
 800c416:	000b      	movs	r3, r1
 800c418:	431a      	orrs	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	621a      	str	r2, [r3, #32]
}
 800c41e:	46c0      	nop			@ (mov r8, r8)
 800c420:	46bd      	mov	sp, r7
 800c422:	b006      	add	sp, #24
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c432:	2300      	movs	r3, #0
 800c434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	223c      	movs	r2, #60	@ 0x3c
 800c43a:	5c9b      	ldrb	r3, [r3, r2]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d101      	bne.n	800c444 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c440:	2302      	movs	r3, #2
 800c442:	e06f      	b.n	800c524 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	223c      	movs	r2, #60	@ 0x3c
 800c448:	2101      	movs	r1, #1
 800c44a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	22ff      	movs	r2, #255	@ 0xff
 800c450:	4393      	bics	r3, r2
 800c452:	001a      	movs	r2, r3
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4a33      	ldr	r2, [pc, #204]	@ (800c52c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c460:	401a      	ands	r2, r3
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	4a30      	ldr	r2, [pc, #192]	@ (800c530 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c46e:	401a      	ands	r2, r3
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	4313      	orrs	r3, r2
 800c476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	4a2e      	ldr	r2, [pc, #184]	@ (800c534 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c47c:	401a      	ands	r2, r3
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4313      	orrs	r3, r2
 800c484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4a2b      	ldr	r2, [pc, #172]	@ (800c538 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c48a:	401a      	ands	r2, r3
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	4313      	orrs	r3, r2
 800c492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4a29      	ldr	r2, [pc, #164]	@ (800c53c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c498:	401a      	ands	r2, r3
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	4a26      	ldr	r2, [pc, #152]	@ (800c540 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c4a6:	401a      	ands	r2, r3
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	4a24      	ldr	r2, [pc, #144]	@ (800c544 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c4b4:	401a      	ands	r2, r3
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	699b      	ldr	r3, [r3, #24]
 800c4ba:	041b      	lsls	r3, r3, #16
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4a21      	ldr	r2, [pc, #132]	@ (800c548 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c4c4:	401a      	ands	r2, r3
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a1e      	ldr	r2, [pc, #120]	@ (800c54c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d11c      	bne.n	800c512 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4a1d      	ldr	r2, [pc, #116]	@ (800c550 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c4dc:	401a      	ands	r2, r3
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e2:	051b      	lsls	r3, r3, #20
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c554 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c4ec:	401a      	ands	r2, r3
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4a17      	ldr	r2, [pc, #92]	@ (800c558 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c4fa:	401a      	ands	r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c500:	4313      	orrs	r3, r2
 800c502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	4a15      	ldr	r2, [pc, #84]	@ (800c55c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c508:	401a      	ands	r2, r3
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50e:	4313      	orrs	r3, r2
 800c510:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	223c      	movs	r2, #60	@ 0x3c
 800c51e:	2100      	movs	r1, #0
 800c520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	0018      	movs	r0, r3
 800c526:	46bd      	mov	sp, r7
 800c528:	b004      	add	sp, #16
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	fffffcff 	.word	0xfffffcff
 800c530:	fffffbff 	.word	0xfffffbff
 800c534:	fffff7ff 	.word	0xfffff7ff
 800c538:	ffffefff 	.word	0xffffefff
 800c53c:	ffffdfff 	.word	0xffffdfff
 800c540:	ffffbfff 	.word	0xffffbfff
 800c544:	fff0ffff 	.word	0xfff0ffff
 800c548:	efffffff 	.word	0xefffffff
 800c54c:	40012c00 	.word	0x40012c00
 800c550:	ff0fffff 	.word	0xff0fffff
 800c554:	feffffff 	.word	0xfeffffff
 800c558:	fdffffff 	.word	0xfdffffff
 800c55c:	dfffffff 	.word	0xdfffffff

0800c560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e046      	b.n	800c600 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2288      	movs	r2, #136	@ 0x88
 800c576:	589b      	ldr	r3, [r3, r2]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d107      	bne.n	800c58c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2284      	movs	r2, #132	@ 0x84
 800c580:	2100      	movs	r1, #0
 800c582:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	0018      	movs	r0, r3
 800c588:	f7fa febe 	bl	8007308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2288      	movs	r2, #136	@ 0x88
 800c590:	2124      	movs	r1, #36	@ 0x24
 800c592:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2101      	movs	r1, #1
 800c5a0:	438a      	bics	r2, r1
 800c5a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d003      	beq.n	800c5b4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	0018      	movs	r0, r3
 800c5b0:	f000 fd0c 	bl	800cfcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	0018      	movs	r0, r3
 800c5b8:	f000 f9b2 	bl	800c920 <UART_SetConfig>
 800c5bc:	0003      	movs	r3, r0
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d101      	bne.n	800c5c6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e01c      	b.n	800c600 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	490d      	ldr	r1, [pc, #52]	@ (800c608 <HAL_UART_Init+0xa8>)
 800c5d2:	400a      	ands	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	689a      	ldr	r2, [r3, #8]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	212a      	movs	r1, #42	@ 0x2a
 800c5e2:	438a      	bics	r2, r1
 800c5e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	0018      	movs	r0, r3
 800c5fa:	f000 fd9b 	bl	800d134 <UART_CheckIdleState>
 800c5fe:	0003      	movs	r3, r0
}
 800c600:	0018      	movs	r0, r3
 800c602:	46bd      	mov	sp, r7
 800c604:	b002      	add	sp, #8
 800c606:	bd80      	pop	{r7, pc}
 800c608:	ffffb7ff 	.word	0xffffb7ff

0800c60c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08a      	sub	sp, #40	@ 0x28
 800c610:	af02      	add	r7, sp, #8
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	1dbb      	adds	r3, r7, #6
 800c61a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2288      	movs	r2, #136	@ 0x88
 800c620:	589b      	ldr	r3, [r3, r2]
 800c622:	2b20      	cmp	r3, #32
 800c624:	d000      	beq.n	800c628 <HAL_UART_Transmit+0x1c>
 800c626:	e090      	b.n	800c74a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <HAL_UART_Transmit+0x2a>
 800c62e:	1dbb      	adds	r3, r7, #6
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	e088      	b.n	800c74c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	2380      	movs	r3, #128	@ 0x80
 800c640:	015b      	lsls	r3, r3, #5
 800c642:	429a      	cmp	r2, r3
 800c644:	d109      	bne.n	800c65a <HAL_UART_Transmit+0x4e>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d105      	bne.n	800c65a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2201      	movs	r2, #1
 800c652:	4013      	ands	r3, r2
 800c654:	d001      	beq.n	800c65a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	e078      	b.n	800c74c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2290      	movs	r2, #144	@ 0x90
 800c65e:	2100      	movs	r1, #0
 800c660:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2288      	movs	r2, #136	@ 0x88
 800c666:	2121      	movs	r1, #33	@ 0x21
 800c668:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c66a:	f7fb fdef 	bl	800824c <HAL_GetTick>
 800c66e:	0003      	movs	r3, r0
 800c670:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	1dba      	adds	r2, r7, #6
 800c676:	2154      	movs	r1, #84	@ 0x54
 800c678:	8812      	ldrh	r2, [r2, #0]
 800c67a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	1dba      	adds	r2, r7, #6
 800c680:	2156      	movs	r1, #86	@ 0x56
 800c682:	8812      	ldrh	r2, [r2, #0]
 800c684:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	689a      	ldr	r2, [r3, #8]
 800c68a:	2380      	movs	r3, #128	@ 0x80
 800c68c:	015b      	lsls	r3, r3, #5
 800c68e:	429a      	cmp	r2, r3
 800c690:	d108      	bne.n	800c6a4 <HAL_UART_Transmit+0x98>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d104      	bne.n	800c6a4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c69a:	2300      	movs	r3, #0
 800c69c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	e003      	b.n	800c6ac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c6ac:	e030      	b.n	800c710 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	0013      	movs	r3, r2
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2180      	movs	r1, #128	@ 0x80
 800c6bc:	f000 fde4 	bl	800d288 <UART_WaitOnFlagUntilTimeout>
 800c6c0:	1e03      	subs	r3, r0, #0
 800c6c2:	d005      	beq.n	800c6d0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2288      	movs	r2, #136	@ 0x88
 800c6c8:	2120      	movs	r1, #32
 800c6ca:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c6cc:	2303      	movs	r3, #3
 800c6ce:	e03d      	b.n	800c74c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10b      	bne.n	800c6ee <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	001a      	movs	r2, r3
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	05d2      	lsls	r2, r2, #23
 800c6e2:	0dd2      	lsrs	r2, r2, #23
 800c6e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	3302      	adds	r3, #2
 800c6ea:	61bb      	str	r3, [r7, #24]
 800c6ec:	e007      	b.n	800c6fe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	781a      	ldrb	r2, [r3, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2256      	movs	r2, #86	@ 0x56
 800c702:	5a9b      	ldrh	r3, [r3, r2]
 800c704:	b29b      	uxth	r3, r3
 800c706:	3b01      	subs	r3, #1
 800c708:	b299      	uxth	r1, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2256      	movs	r2, #86	@ 0x56
 800c70e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2256      	movs	r2, #86	@ 0x56
 800c714:	5a9b      	ldrh	r3, [r3, r2]
 800c716:	b29b      	uxth	r3, r3
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1c8      	bne.n	800c6ae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	0013      	movs	r3, r2
 800c726:	2200      	movs	r2, #0
 800c728:	2140      	movs	r1, #64	@ 0x40
 800c72a:	f000 fdad 	bl	800d288 <UART_WaitOnFlagUntilTimeout>
 800c72e:	1e03      	subs	r3, r0, #0
 800c730:	d005      	beq.n	800c73e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2288      	movs	r2, #136	@ 0x88
 800c736:	2120      	movs	r1, #32
 800c738:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e006      	b.n	800c74c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2288      	movs	r2, #136	@ 0x88
 800c742:	2120      	movs	r1, #32
 800c744:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c746:	2300      	movs	r3, #0
 800c748:	e000      	b.n	800c74c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800c74a:	2302      	movs	r3, #2
  }
}
 800c74c:	0018      	movs	r0, r3
 800c74e:	46bd      	mov	sp, r7
 800c750:	b008      	add	sp, #32
 800c752:	bd80      	pop	{r7, pc}

0800c754 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b08a      	sub	sp, #40	@ 0x28
 800c758:	af02      	add	r7, sp, #8
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	603b      	str	r3, [r7, #0]
 800c760:	1dbb      	adds	r3, r7, #6
 800c762:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	228c      	movs	r2, #140	@ 0x8c
 800c768:	589b      	ldr	r3, [r3, r2]
 800c76a:	2b20      	cmp	r3, #32
 800c76c:	d000      	beq.n	800c770 <HAL_UART_Receive+0x1c>
 800c76e:	e0d0      	b.n	800c912 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <HAL_UART_Receive+0x2a>
 800c776:	1dbb      	adds	r3, r7, #6
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	e0c8      	b.n	800c914 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	689a      	ldr	r2, [r3, #8]
 800c786:	2380      	movs	r3, #128	@ 0x80
 800c788:	015b      	lsls	r3, r3, #5
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d109      	bne.n	800c7a2 <HAL_UART_Receive+0x4e>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d105      	bne.n	800c7a2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2201      	movs	r2, #1
 800c79a:	4013      	ands	r3, r2
 800c79c:	d001      	beq.n	800c7a2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e0b8      	b.n	800c914 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2290      	movs	r2, #144	@ 0x90
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	228c      	movs	r2, #140	@ 0x8c
 800c7ae:	2122      	movs	r1, #34	@ 0x22
 800c7b0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c7b8:	f7fb fd48 	bl	800824c <HAL_GetTick>
 800c7bc:	0003      	movs	r3, r0
 800c7be:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	1dba      	adds	r2, r7, #6
 800c7c4:	215c      	movs	r1, #92	@ 0x5c
 800c7c6:	8812      	ldrh	r2, [r2, #0]
 800c7c8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	1dba      	adds	r2, r7, #6
 800c7ce:	215e      	movs	r1, #94	@ 0x5e
 800c7d0:	8812      	ldrh	r2, [r2, #0]
 800c7d2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	689a      	ldr	r2, [r3, #8]
 800c7d8:	2380      	movs	r3, #128	@ 0x80
 800c7da:	015b      	lsls	r3, r3, #5
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d10d      	bne.n	800c7fc <HAL_UART_Receive+0xa8>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d104      	bne.n	800c7f2 <HAL_UART_Receive+0x9e>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2260      	movs	r2, #96	@ 0x60
 800c7ec:	494b      	ldr	r1, [pc, #300]	@ (800c91c <HAL_UART_Receive+0x1c8>)
 800c7ee:	5299      	strh	r1, [r3, r2]
 800c7f0:	e02e      	b.n	800c850 <HAL_UART_Receive+0xfc>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2260      	movs	r2, #96	@ 0x60
 800c7f6:	21ff      	movs	r1, #255	@ 0xff
 800c7f8:	5299      	strh	r1, [r3, r2]
 800c7fa:	e029      	b.n	800c850 <HAL_UART_Receive+0xfc>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10d      	bne.n	800c820 <HAL_UART_Receive+0xcc>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d104      	bne.n	800c816 <HAL_UART_Receive+0xc2>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2260      	movs	r2, #96	@ 0x60
 800c810:	21ff      	movs	r1, #255	@ 0xff
 800c812:	5299      	strh	r1, [r3, r2]
 800c814:	e01c      	b.n	800c850 <HAL_UART_Receive+0xfc>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2260      	movs	r2, #96	@ 0x60
 800c81a:	217f      	movs	r1, #127	@ 0x7f
 800c81c:	5299      	strh	r1, [r3, r2]
 800c81e:	e017      	b.n	800c850 <HAL_UART_Receive+0xfc>
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	689a      	ldr	r2, [r3, #8]
 800c824:	2380      	movs	r3, #128	@ 0x80
 800c826:	055b      	lsls	r3, r3, #21
 800c828:	429a      	cmp	r2, r3
 800c82a:	d10d      	bne.n	800c848 <HAL_UART_Receive+0xf4>
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d104      	bne.n	800c83e <HAL_UART_Receive+0xea>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2260      	movs	r2, #96	@ 0x60
 800c838:	217f      	movs	r1, #127	@ 0x7f
 800c83a:	5299      	strh	r1, [r3, r2]
 800c83c:	e008      	b.n	800c850 <HAL_UART_Receive+0xfc>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2260      	movs	r2, #96	@ 0x60
 800c842:	213f      	movs	r1, #63	@ 0x3f
 800c844:	5299      	strh	r1, [r3, r2]
 800c846:	e003      	b.n	800c850 <HAL_UART_Receive+0xfc>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2260      	movs	r2, #96	@ 0x60
 800c84c:	2100      	movs	r1, #0
 800c84e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800c850:	2312      	movs	r3, #18
 800c852:	18fb      	adds	r3, r7, r3
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	2160      	movs	r1, #96	@ 0x60
 800c858:	5a52      	ldrh	r2, [r2, r1]
 800c85a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	689a      	ldr	r2, [r3, #8]
 800c860:	2380      	movs	r3, #128	@ 0x80
 800c862:	015b      	lsls	r3, r3, #5
 800c864:	429a      	cmp	r2, r3
 800c866:	d108      	bne.n	800c87a <HAL_UART_Receive+0x126>
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d104      	bne.n	800c87a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800c870:	2300      	movs	r3, #0
 800c872:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	61bb      	str	r3, [r7, #24]
 800c878:	e003      	b.n	800c882 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c87e:	2300      	movs	r3, #0
 800c880:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c882:	e03a      	b.n	800c8fa <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	0013      	movs	r3, r2
 800c88e:	2200      	movs	r2, #0
 800c890:	2120      	movs	r1, #32
 800c892:	f000 fcf9 	bl	800d288 <UART_WaitOnFlagUntilTimeout>
 800c896:	1e03      	subs	r3, r0, #0
 800c898:	d005      	beq.n	800c8a6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	228c      	movs	r2, #140	@ 0x8c
 800c89e:	2120      	movs	r1, #32
 800c8a0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e036      	b.n	800c914 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10e      	bne.n	800c8ca <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	2212      	movs	r2, #18
 800c8b6:	18ba      	adds	r2, r7, r2
 800c8b8:	8812      	ldrh	r2, [r2, #0]
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	3302      	adds	r3, #2
 800c8c6:	61bb      	str	r3, [r7, #24]
 800c8c8:	e00e      	b.n	800c8e8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2212      	movs	r2, #18
 800c8d4:	18ba      	adds	r2, r7, r2
 800c8d6:	8812      	ldrh	r2, [r2, #0]
 800c8d8:	b2d2      	uxtb	r2, r2
 800c8da:	4013      	ands	r3, r2
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	225e      	movs	r2, #94	@ 0x5e
 800c8ec:	5a9b      	ldrh	r3, [r3, r2]
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	b299      	uxth	r1, r3
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	225e      	movs	r2, #94	@ 0x5e
 800c8f8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	225e      	movs	r2, #94	@ 0x5e
 800c8fe:	5a9b      	ldrh	r3, [r3, r2]
 800c900:	b29b      	uxth	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1be      	bne.n	800c884 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	228c      	movs	r2, #140	@ 0x8c
 800c90a:	2120      	movs	r1, #32
 800c90c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	e000      	b.n	800c914 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800c912:	2302      	movs	r3, #2
  }
}
 800c914:	0018      	movs	r0, r3
 800c916:	46bd      	mov	sp, r7
 800c918:	b008      	add	sp, #32
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	000001ff 	.word	0x000001ff

0800c920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c920:	b5b0      	push	{r4, r5, r7, lr}
 800c922:	b090      	sub	sp, #64	@ 0x40
 800c924:	af00      	add	r7, sp, #0
 800c926:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c928:	231a      	movs	r3, #26
 800c92a:	2220      	movs	r2, #32
 800c92c:	189b      	adds	r3, r3, r2
 800c92e:	19db      	adds	r3, r3, r7
 800c930:	2200      	movs	r2, #0
 800c932:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c936:	689a      	ldr	r2, [r3, #8]
 800c938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	431a      	orrs	r2, r3
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	431a      	orrs	r2, r3
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	4313      	orrs	r3, r2
 800c94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4ac1      	ldr	r2, [pc, #772]	@ (800cc58 <UART_SetConfig+0x338>)
 800c954:	4013      	ands	r3, r2
 800c956:	0019      	movs	r1, r3
 800c958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c95e:	430b      	orrs	r3, r1
 800c960:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	4abc      	ldr	r2, [pc, #752]	@ (800cc5c <UART_SetConfig+0x33c>)
 800c96a:	4013      	ands	r3, r2
 800c96c:	0018      	movs	r0, r3
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	68d9      	ldr	r1, [r3, #12]
 800c972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	0003      	movs	r3, r0
 800c978:	430b      	orrs	r3, r1
 800c97a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4ab6      	ldr	r2, [pc, #728]	@ (800cc60 <UART_SetConfig+0x340>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d009      	beq.n	800c9a0 <UART_SetConfig+0x80>
 800c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4ab4      	ldr	r2, [pc, #720]	@ (800cc64 <UART_SetConfig+0x344>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d004      	beq.n	800c9a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c99c:	4313      	orrs	r3, r2
 800c99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	4ab0      	ldr	r2, [pc, #704]	@ (800cc68 <UART_SetConfig+0x348>)
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	0019      	movs	r1, r3
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b2:	430b      	orrs	r3, r1
 800c9b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9bc:	220f      	movs	r2, #15
 800c9be:	4393      	bics	r3, r2
 800c9c0:	0018      	movs	r0, r3
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	0003      	movs	r3, r0
 800c9cc:	430b      	orrs	r3, r1
 800c9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4aa5      	ldr	r2, [pc, #660]	@ (800cc6c <UART_SetConfig+0x34c>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d131      	bne.n	800ca3e <UART_SetConfig+0x11e>
 800c9da:	4ba5      	ldr	r3, [pc, #660]	@ (800cc70 <UART_SetConfig+0x350>)
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9de:	2203      	movs	r2, #3
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d01d      	beq.n	800ca22 <UART_SetConfig+0x102>
 800c9e6:	d823      	bhi.n	800ca30 <UART_SetConfig+0x110>
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d00c      	beq.n	800ca06 <UART_SetConfig+0xe6>
 800c9ec:	d820      	bhi.n	800ca30 <UART_SetConfig+0x110>
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <UART_SetConfig+0xd8>
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d00e      	beq.n	800ca14 <UART_SetConfig+0xf4>
 800c9f6:	e01b      	b.n	800ca30 <UART_SetConfig+0x110>
 800c9f8:	231b      	movs	r3, #27
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	189b      	adds	r3, r3, r2
 800c9fe:	19db      	adds	r3, r3, r7
 800ca00:	2200      	movs	r2, #0
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	e154      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca06:	231b      	movs	r3, #27
 800ca08:	2220      	movs	r2, #32
 800ca0a:	189b      	adds	r3, r3, r2
 800ca0c:	19db      	adds	r3, r3, r7
 800ca0e:	2202      	movs	r2, #2
 800ca10:	701a      	strb	r2, [r3, #0]
 800ca12:	e14d      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca14:	231b      	movs	r3, #27
 800ca16:	2220      	movs	r2, #32
 800ca18:	189b      	adds	r3, r3, r2
 800ca1a:	19db      	adds	r3, r3, r7
 800ca1c:	2204      	movs	r2, #4
 800ca1e:	701a      	strb	r2, [r3, #0]
 800ca20:	e146      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca22:	231b      	movs	r3, #27
 800ca24:	2220      	movs	r2, #32
 800ca26:	189b      	adds	r3, r3, r2
 800ca28:	19db      	adds	r3, r3, r7
 800ca2a:	2208      	movs	r2, #8
 800ca2c:	701a      	strb	r2, [r3, #0]
 800ca2e:	e13f      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca30:	231b      	movs	r3, #27
 800ca32:	2220      	movs	r2, #32
 800ca34:	189b      	adds	r3, r3, r2
 800ca36:	19db      	adds	r3, r3, r7
 800ca38:	2210      	movs	r2, #16
 800ca3a:	701a      	strb	r2, [r3, #0]
 800ca3c:	e138      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a8c      	ldr	r2, [pc, #560]	@ (800cc74 <UART_SetConfig+0x354>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d131      	bne.n	800caac <UART_SetConfig+0x18c>
 800ca48:	4b89      	ldr	r3, [pc, #548]	@ (800cc70 <UART_SetConfig+0x350>)
 800ca4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca4c:	220c      	movs	r2, #12
 800ca4e:	4013      	ands	r3, r2
 800ca50:	2b0c      	cmp	r3, #12
 800ca52:	d01d      	beq.n	800ca90 <UART_SetConfig+0x170>
 800ca54:	d823      	bhi.n	800ca9e <UART_SetConfig+0x17e>
 800ca56:	2b08      	cmp	r3, #8
 800ca58:	d00c      	beq.n	800ca74 <UART_SetConfig+0x154>
 800ca5a:	d820      	bhi.n	800ca9e <UART_SetConfig+0x17e>
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <UART_SetConfig+0x146>
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d00e      	beq.n	800ca82 <UART_SetConfig+0x162>
 800ca64:	e01b      	b.n	800ca9e <UART_SetConfig+0x17e>
 800ca66:	231b      	movs	r3, #27
 800ca68:	2220      	movs	r2, #32
 800ca6a:	189b      	adds	r3, r3, r2
 800ca6c:	19db      	adds	r3, r3, r7
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	e11d      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca74:	231b      	movs	r3, #27
 800ca76:	2220      	movs	r2, #32
 800ca78:	189b      	adds	r3, r3, r2
 800ca7a:	19db      	adds	r3, r3, r7
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	e116      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca82:	231b      	movs	r3, #27
 800ca84:	2220      	movs	r2, #32
 800ca86:	189b      	adds	r3, r3, r2
 800ca88:	19db      	adds	r3, r3, r7
 800ca8a:	2204      	movs	r2, #4
 800ca8c:	701a      	strb	r2, [r3, #0]
 800ca8e:	e10f      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca90:	231b      	movs	r3, #27
 800ca92:	2220      	movs	r2, #32
 800ca94:	189b      	adds	r3, r3, r2
 800ca96:	19db      	adds	r3, r3, r7
 800ca98:	2208      	movs	r2, #8
 800ca9a:	701a      	strb	r2, [r3, #0]
 800ca9c:	e108      	b.n	800ccb0 <UART_SetConfig+0x390>
 800ca9e:	231b      	movs	r3, #27
 800caa0:	2220      	movs	r2, #32
 800caa2:	189b      	adds	r3, r3, r2
 800caa4:	19db      	adds	r3, r3, r7
 800caa6:	2210      	movs	r2, #16
 800caa8:	701a      	strb	r2, [r3, #0]
 800caaa:	e101      	b.n	800ccb0 <UART_SetConfig+0x390>
 800caac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a71      	ldr	r2, [pc, #452]	@ (800cc78 <UART_SetConfig+0x358>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d131      	bne.n	800cb1a <UART_SetConfig+0x1fa>
 800cab6:	4b6e      	ldr	r3, [pc, #440]	@ (800cc70 <UART_SetConfig+0x350>)
 800cab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caba:	2230      	movs	r2, #48	@ 0x30
 800cabc:	4013      	ands	r3, r2
 800cabe:	2b30      	cmp	r3, #48	@ 0x30
 800cac0:	d01d      	beq.n	800cafe <UART_SetConfig+0x1de>
 800cac2:	d823      	bhi.n	800cb0c <UART_SetConfig+0x1ec>
 800cac4:	2b20      	cmp	r3, #32
 800cac6:	d00c      	beq.n	800cae2 <UART_SetConfig+0x1c2>
 800cac8:	d820      	bhi.n	800cb0c <UART_SetConfig+0x1ec>
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <UART_SetConfig+0x1b4>
 800cace:	2b10      	cmp	r3, #16
 800cad0:	d00e      	beq.n	800caf0 <UART_SetConfig+0x1d0>
 800cad2:	e01b      	b.n	800cb0c <UART_SetConfig+0x1ec>
 800cad4:	231b      	movs	r3, #27
 800cad6:	2220      	movs	r2, #32
 800cad8:	189b      	adds	r3, r3, r2
 800cada:	19db      	adds	r3, r3, r7
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	e0e6      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cae2:	231b      	movs	r3, #27
 800cae4:	2220      	movs	r2, #32
 800cae6:	189b      	adds	r3, r3, r2
 800cae8:	19db      	adds	r3, r3, r7
 800caea:	2202      	movs	r2, #2
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	e0df      	b.n	800ccb0 <UART_SetConfig+0x390>
 800caf0:	231b      	movs	r3, #27
 800caf2:	2220      	movs	r2, #32
 800caf4:	189b      	adds	r3, r3, r2
 800caf6:	19db      	adds	r3, r3, r7
 800caf8:	2204      	movs	r2, #4
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	e0d8      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cafe:	231b      	movs	r3, #27
 800cb00:	2220      	movs	r2, #32
 800cb02:	189b      	adds	r3, r3, r2
 800cb04:	19db      	adds	r3, r3, r7
 800cb06:	2208      	movs	r2, #8
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	e0d1      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cb0c:	231b      	movs	r3, #27
 800cb0e:	2220      	movs	r2, #32
 800cb10:	189b      	adds	r3, r3, r2
 800cb12:	19db      	adds	r3, r3, r7
 800cb14:	2210      	movs	r2, #16
 800cb16:	701a      	strb	r2, [r3, #0]
 800cb18:	e0ca      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a57      	ldr	r2, [pc, #348]	@ (800cc7c <UART_SetConfig+0x35c>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d106      	bne.n	800cb32 <UART_SetConfig+0x212>
 800cb24:	231b      	movs	r3, #27
 800cb26:	2220      	movs	r2, #32
 800cb28:	189b      	adds	r3, r3, r2
 800cb2a:	19db      	adds	r3, r3, r7
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
 800cb30:	e0be      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a52      	ldr	r2, [pc, #328]	@ (800cc80 <UART_SetConfig+0x360>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d106      	bne.n	800cb4a <UART_SetConfig+0x22a>
 800cb3c:	231b      	movs	r3, #27
 800cb3e:	2220      	movs	r2, #32
 800cb40:	189b      	adds	r3, r3, r2
 800cb42:	19db      	adds	r3, r3, r7
 800cb44:	2200      	movs	r2, #0
 800cb46:	701a      	strb	r2, [r3, #0]
 800cb48:	e0b2      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a4d      	ldr	r2, [pc, #308]	@ (800cc84 <UART_SetConfig+0x364>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d106      	bne.n	800cb62 <UART_SetConfig+0x242>
 800cb54:	231b      	movs	r3, #27
 800cb56:	2220      	movs	r2, #32
 800cb58:	189b      	adds	r3, r3, r2
 800cb5a:	19db      	adds	r3, r3, r7
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	701a      	strb	r2, [r3, #0]
 800cb60:	e0a6      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a3e      	ldr	r2, [pc, #248]	@ (800cc60 <UART_SetConfig+0x340>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d13e      	bne.n	800cbea <UART_SetConfig+0x2ca>
 800cb6c:	4b40      	ldr	r3, [pc, #256]	@ (800cc70 <UART_SetConfig+0x350>)
 800cb6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb70:	23c0      	movs	r3, #192	@ 0xc0
 800cb72:	011b      	lsls	r3, r3, #4
 800cb74:	4013      	ands	r3, r2
 800cb76:	22c0      	movs	r2, #192	@ 0xc0
 800cb78:	0112      	lsls	r2, r2, #4
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d027      	beq.n	800cbce <UART_SetConfig+0x2ae>
 800cb7e:	22c0      	movs	r2, #192	@ 0xc0
 800cb80:	0112      	lsls	r2, r2, #4
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d82a      	bhi.n	800cbdc <UART_SetConfig+0x2bc>
 800cb86:	2280      	movs	r2, #128	@ 0x80
 800cb88:	0112      	lsls	r2, r2, #4
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d011      	beq.n	800cbb2 <UART_SetConfig+0x292>
 800cb8e:	2280      	movs	r2, #128	@ 0x80
 800cb90:	0112      	lsls	r2, r2, #4
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d822      	bhi.n	800cbdc <UART_SetConfig+0x2bc>
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d004      	beq.n	800cba4 <UART_SetConfig+0x284>
 800cb9a:	2280      	movs	r2, #128	@ 0x80
 800cb9c:	00d2      	lsls	r2, r2, #3
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d00e      	beq.n	800cbc0 <UART_SetConfig+0x2a0>
 800cba2:	e01b      	b.n	800cbdc <UART_SetConfig+0x2bc>
 800cba4:	231b      	movs	r3, #27
 800cba6:	2220      	movs	r2, #32
 800cba8:	189b      	adds	r3, r3, r2
 800cbaa:	19db      	adds	r3, r3, r7
 800cbac:	2200      	movs	r2, #0
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	e07e      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cbb2:	231b      	movs	r3, #27
 800cbb4:	2220      	movs	r2, #32
 800cbb6:	189b      	adds	r3, r3, r2
 800cbb8:	19db      	adds	r3, r3, r7
 800cbba:	2202      	movs	r2, #2
 800cbbc:	701a      	strb	r2, [r3, #0]
 800cbbe:	e077      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cbc0:	231b      	movs	r3, #27
 800cbc2:	2220      	movs	r2, #32
 800cbc4:	189b      	adds	r3, r3, r2
 800cbc6:	19db      	adds	r3, r3, r7
 800cbc8:	2204      	movs	r2, #4
 800cbca:	701a      	strb	r2, [r3, #0]
 800cbcc:	e070      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cbce:	231b      	movs	r3, #27
 800cbd0:	2220      	movs	r2, #32
 800cbd2:	189b      	adds	r3, r3, r2
 800cbd4:	19db      	adds	r3, r3, r7
 800cbd6:	2208      	movs	r2, #8
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	e069      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cbdc:	231b      	movs	r3, #27
 800cbde:	2220      	movs	r2, #32
 800cbe0:	189b      	adds	r3, r3, r2
 800cbe2:	19db      	adds	r3, r3, r7
 800cbe4:	2210      	movs	r2, #16
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	e062      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a1d      	ldr	r2, [pc, #116]	@ (800cc64 <UART_SetConfig+0x344>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d157      	bne.n	800cca4 <UART_SetConfig+0x384>
 800cbf4:	4b1e      	ldr	r3, [pc, #120]	@ (800cc70 <UART_SetConfig+0x350>)
 800cbf6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbf8:	23c0      	movs	r3, #192	@ 0xc0
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	22c0      	movs	r2, #192	@ 0xc0
 800cc00:	0092      	lsls	r2, r2, #2
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d040      	beq.n	800cc88 <UART_SetConfig+0x368>
 800cc06:	22c0      	movs	r2, #192	@ 0xc0
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d843      	bhi.n	800cc96 <UART_SetConfig+0x376>
 800cc0e:	2280      	movs	r2, #128	@ 0x80
 800cc10:	0092      	lsls	r2, r2, #2
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d011      	beq.n	800cc3a <UART_SetConfig+0x31a>
 800cc16:	2280      	movs	r2, #128	@ 0x80
 800cc18:	0092      	lsls	r2, r2, #2
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d83b      	bhi.n	800cc96 <UART_SetConfig+0x376>
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d004      	beq.n	800cc2c <UART_SetConfig+0x30c>
 800cc22:	2280      	movs	r2, #128	@ 0x80
 800cc24:	0052      	lsls	r2, r2, #1
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d00e      	beq.n	800cc48 <UART_SetConfig+0x328>
 800cc2a:	e034      	b.n	800cc96 <UART_SetConfig+0x376>
 800cc2c:	231b      	movs	r3, #27
 800cc2e:	2220      	movs	r2, #32
 800cc30:	189b      	adds	r3, r3, r2
 800cc32:	19db      	adds	r3, r3, r7
 800cc34:	2200      	movs	r2, #0
 800cc36:	701a      	strb	r2, [r3, #0]
 800cc38:	e03a      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cc3a:	231b      	movs	r3, #27
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	189b      	adds	r3, r3, r2
 800cc40:	19db      	adds	r3, r3, r7
 800cc42:	2202      	movs	r2, #2
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	e033      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cc48:	231b      	movs	r3, #27
 800cc4a:	2220      	movs	r2, #32
 800cc4c:	189b      	adds	r3, r3, r2
 800cc4e:	19db      	adds	r3, r3, r7
 800cc50:	2204      	movs	r2, #4
 800cc52:	701a      	strb	r2, [r3, #0]
 800cc54:	e02c      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cc56:	46c0      	nop			@ (mov r8, r8)
 800cc58:	cfff69f3 	.word	0xcfff69f3
 800cc5c:	ffffcfff 	.word	0xffffcfff
 800cc60:	40008000 	.word	0x40008000
 800cc64:	40008400 	.word	0x40008400
 800cc68:	11fff4ff 	.word	0x11fff4ff
 800cc6c:	40013800 	.word	0x40013800
 800cc70:	40021000 	.word	0x40021000
 800cc74:	40004400 	.word	0x40004400
 800cc78:	40004800 	.word	0x40004800
 800cc7c:	40004c00 	.word	0x40004c00
 800cc80:	40005000 	.word	0x40005000
 800cc84:	40013c00 	.word	0x40013c00
 800cc88:	231b      	movs	r3, #27
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	189b      	adds	r3, r3, r2
 800cc8e:	19db      	adds	r3, r3, r7
 800cc90:	2208      	movs	r2, #8
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	e00c      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cc96:	231b      	movs	r3, #27
 800cc98:	2220      	movs	r2, #32
 800cc9a:	189b      	adds	r3, r3, r2
 800cc9c:	19db      	adds	r3, r3, r7
 800cc9e:	2210      	movs	r2, #16
 800cca0:	701a      	strb	r2, [r3, #0]
 800cca2:	e005      	b.n	800ccb0 <UART_SetConfig+0x390>
 800cca4:	231b      	movs	r3, #27
 800cca6:	2220      	movs	r2, #32
 800cca8:	189b      	adds	r3, r3, r2
 800ccaa:	19db      	adds	r3, r3, r7
 800ccac:	2210      	movs	r2, #16
 800ccae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4ac1      	ldr	r2, [pc, #772]	@ (800cfbc <UART_SetConfig+0x69c>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d005      	beq.n	800ccc6 <UART_SetConfig+0x3a6>
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4ac0      	ldr	r2, [pc, #768]	@ (800cfc0 <UART_SetConfig+0x6a0>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d000      	beq.n	800ccc6 <UART_SetConfig+0x3a6>
 800ccc4:	e093      	b.n	800cdee <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ccc6:	231b      	movs	r3, #27
 800ccc8:	2220      	movs	r2, #32
 800ccca:	189b      	adds	r3, r3, r2
 800cccc:	19db      	adds	r3, r3, r7
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b08      	cmp	r3, #8
 800ccd2:	d015      	beq.n	800cd00 <UART_SetConfig+0x3e0>
 800ccd4:	dc18      	bgt.n	800cd08 <UART_SetConfig+0x3e8>
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	d00d      	beq.n	800ccf6 <UART_SetConfig+0x3d6>
 800ccda:	dc15      	bgt.n	800cd08 <UART_SetConfig+0x3e8>
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <UART_SetConfig+0x3c6>
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d005      	beq.n	800ccf0 <UART_SetConfig+0x3d0>
 800cce4:	e010      	b.n	800cd08 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cce6:	f7fd f931 	bl	8009f4c <HAL_RCC_GetPCLK1Freq>
 800ccea:	0003      	movs	r3, r0
 800ccec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ccee:	e014      	b.n	800cd1a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ccf0:	4bb4      	ldr	r3, [pc, #720]	@ (800cfc4 <UART_SetConfig+0x6a4>)
 800ccf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ccf4:	e011      	b.n	800cd1a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccf6:	f7fd f89d 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 800ccfa:	0003      	movs	r3, r0
 800ccfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ccfe:	e00c      	b.n	800cd1a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd00:	2380      	movs	r3, #128	@ 0x80
 800cd02:	021b      	lsls	r3, r3, #8
 800cd04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd06:	e008      	b.n	800cd1a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cd0c:	231a      	movs	r3, #26
 800cd0e:	2220      	movs	r2, #32
 800cd10:	189b      	adds	r3, r3, r2
 800cd12:	19db      	adds	r3, r3, r7
 800cd14:	2201      	movs	r2, #1
 800cd16:	701a      	strb	r2, [r3, #0]
        break;
 800cd18:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d100      	bne.n	800cd22 <UART_SetConfig+0x402>
 800cd20:	e135      	b.n	800cf8e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd26:	4ba8      	ldr	r3, [pc, #672]	@ (800cfc8 <UART_SetConfig+0x6a8>)
 800cd28:	0052      	lsls	r2, r2, #1
 800cd2a:	5ad3      	ldrh	r3, [r2, r3]
 800cd2c:	0019      	movs	r1, r3
 800cd2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cd30:	f7f3 fa0e 	bl	8000150 <__udivsi3>
 800cd34:	0003      	movs	r3, r0
 800cd36:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	0013      	movs	r3, r2
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	189b      	adds	r3, r3, r2
 800cd42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d305      	bcc.n	800cd54 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cd4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d906      	bls.n	800cd62 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800cd54:	231a      	movs	r3, #26
 800cd56:	2220      	movs	r2, #32
 800cd58:	189b      	adds	r3, r3, r2
 800cd5a:	19db      	adds	r3, r3, r7
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	701a      	strb	r2, [r3, #0]
 800cd60:	e044      	b.n	800cdec <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd64:	61bb      	str	r3, [r7, #24]
 800cd66:	2300      	movs	r3, #0
 800cd68:	61fb      	str	r3, [r7, #28]
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd6e:	4b96      	ldr	r3, [pc, #600]	@ (800cfc8 <UART_SetConfig+0x6a8>)
 800cd70:	0052      	lsls	r2, r2, #1
 800cd72:	5ad3      	ldrh	r3, [r2, r3]
 800cd74:	613b      	str	r3, [r7, #16]
 800cd76:	2300      	movs	r3, #0
 800cd78:	617b      	str	r3, [r7, #20]
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	69b8      	ldr	r0, [r7, #24]
 800cd80:	69f9      	ldr	r1, [r7, #28]
 800cd82:	f7f3 fbd3 	bl	800052c <__aeabi_uldivmod>
 800cd86:	0002      	movs	r2, r0
 800cd88:	000b      	movs	r3, r1
 800cd8a:	0e11      	lsrs	r1, r2, #24
 800cd8c:	021d      	lsls	r5, r3, #8
 800cd8e:	430d      	orrs	r5, r1
 800cd90:	0214      	lsls	r4, r2, #8
 800cd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	085b      	lsrs	r3, r3, #1
 800cd98:	60bb      	str	r3, [r7, #8]
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	60fb      	str	r3, [r7, #12]
 800cd9e:	68b8      	ldr	r0, [r7, #8]
 800cda0:	68f9      	ldr	r1, [r7, #12]
 800cda2:	1900      	adds	r0, r0, r4
 800cda4:	4169      	adcs	r1, r5
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	2300      	movs	r3, #0
 800cdae:	607b      	str	r3, [r7, #4]
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f7f3 fbba 	bl	800052c <__aeabi_uldivmod>
 800cdb8:	0002      	movs	r2, r0
 800cdba:	000b      	movs	r3, r1
 800cdbc:	0013      	movs	r3, r2
 800cdbe:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cdc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdc2:	23c0      	movs	r3, #192	@ 0xc0
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d309      	bcc.n	800cdde <UART_SetConfig+0x4be>
 800cdca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdcc:	2380      	movs	r3, #128	@ 0x80
 800cdce:	035b      	lsls	r3, r3, #13
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d204      	bcs.n	800cdde <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdda:	60da      	str	r2, [r3, #12]
 800cddc:	e006      	b.n	800cdec <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800cdde:	231a      	movs	r3, #26
 800cde0:	2220      	movs	r2, #32
 800cde2:	189b      	adds	r3, r3, r2
 800cde4:	19db      	adds	r3, r3, r7
 800cde6:	2201      	movs	r2, #1
 800cde8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800cdea:	e0d0      	b.n	800cf8e <UART_SetConfig+0x66e>
 800cdec:	e0cf      	b.n	800cf8e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf0:	69da      	ldr	r2, [r3, #28]
 800cdf2:	2380      	movs	r3, #128	@ 0x80
 800cdf4:	021b      	lsls	r3, r3, #8
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d000      	beq.n	800cdfc <UART_SetConfig+0x4dc>
 800cdfa:	e070      	b.n	800cede <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800cdfc:	231b      	movs	r3, #27
 800cdfe:	2220      	movs	r2, #32
 800ce00:	189b      	adds	r3, r3, r2
 800ce02:	19db      	adds	r3, r3, r7
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b08      	cmp	r3, #8
 800ce08:	d015      	beq.n	800ce36 <UART_SetConfig+0x516>
 800ce0a:	dc18      	bgt.n	800ce3e <UART_SetConfig+0x51e>
 800ce0c:	2b04      	cmp	r3, #4
 800ce0e:	d00d      	beq.n	800ce2c <UART_SetConfig+0x50c>
 800ce10:	dc15      	bgt.n	800ce3e <UART_SetConfig+0x51e>
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d002      	beq.n	800ce1c <UART_SetConfig+0x4fc>
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d005      	beq.n	800ce26 <UART_SetConfig+0x506>
 800ce1a:	e010      	b.n	800ce3e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce1c:	f7fd f896 	bl	8009f4c <HAL_RCC_GetPCLK1Freq>
 800ce20:	0003      	movs	r3, r0
 800ce22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce24:	e014      	b.n	800ce50 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce26:	4b67      	ldr	r3, [pc, #412]	@ (800cfc4 <UART_SetConfig+0x6a4>)
 800ce28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce2a:	e011      	b.n	800ce50 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce2c:	f7fd f802 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 800ce30:	0003      	movs	r3, r0
 800ce32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce34:	e00c      	b.n	800ce50 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce36:	2380      	movs	r3, #128	@ 0x80
 800ce38:	021b      	lsls	r3, r3, #8
 800ce3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ce3c:	e008      	b.n	800ce50 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800ce42:	231a      	movs	r3, #26
 800ce44:	2220      	movs	r2, #32
 800ce46:	189b      	adds	r3, r3, r2
 800ce48:	19db      	adds	r3, r3, r7
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	701a      	strb	r2, [r3, #0]
        break;
 800ce4e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d100      	bne.n	800ce58 <UART_SetConfig+0x538>
 800ce56:	e09a      	b.n	800cf8e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce5c:	4b5a      	ldr	r3, [pc, #360]	@ (800cfc8 <UART_SetConfig+0x6a8>)
 800ce5e:	0052      	lsls	r2, r2, #1
 800ce60:	5ad3      	ldrh	r3, [r2, r3]
 800ce62:	0019      	movs	r1, r3
 800ce64:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ce66:	f7f3 f973 	bl	8000150 <__udivsi3>
 800ce6a:	0003      	movs	r3, r0
 800ce6c:	005a      	lsls	r2, r3, #1
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	085b      	lsrs	r3, r3, #1
 800ce74:	18d2      	adds	r2, r2, r3
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	0019      	movs	r1, r3
 800ce7c:	0010      	movs	r0, r2
 800ce7e:	f7f3 f967 	bl	8000150 <__udivsi3>
 800ce82:	0003      	movs	r3, r0
 800ce84:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce88:	2b0f      	cmp	r3, #15
 800ce8a:	d921      	bls.n	800ced0 <UART_SetConfig+0x5b0>
 800ce8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce8e:	2380      	movs	r3, #128	@ 0x80
 800ce90:	025b      	lsls	r3, r3, #9
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d21c      	bcs.n	800ced0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	200e      	movs	r0, #14
 800ce9c:	2420      	movs	r4, #32
 800ce9e:	1903      	adds	r3, r0, r4
 800cea0:	19db      	adds	r3, r3, r7
 800cea2:	210f      	movs	r1, #15
 800cea4:	438a      	bics	r2, r1
 800cea6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceaa:	085b      	lsrs	r3, r3, #1
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	2207      	movs	r2, #7
 800ceb0:	4013      	ands	r3, r2
 800ceb2:	b299      	uxth	r1, r3
 800ceb4:	1903      	adds	r3, r0, r4
 800ceb6:	19db      	adds	r3, r3, r7
 800ceb8:	1902      	adds	r2, r0, r4
 800ceba:	19d2      	adds	r2, r2, r7
 800cebc:	8812      	ldrh	r2, [r2, #0]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	1902      	adds	r2, r0, r4
 800cec8:	19d2      	adds	r2, r2, r7
 800ceca:	8812      	ldrh	r2, [r2, #0]
 800cecc:	60da      	str	r2, [r3, #12]
 800cece:	e05e      	b.n	800cf8e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800ced0:	231a      	movs	r3, #26
 800ced2:	2220      	movs	r2, #32
 800ced4:	189b      	adds	r3, r3, r2
 800ced6:	19db      	adds	r3, r3, r7
 800ced8:	2201      	movs	r2, #1
 800ceda:	701a      	strb	r2, [r3, #0]
 800cedc:	e057      	b.n	800cf8e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cede:	231b      	movs	r3, #27
 800cee0:	2220      	movs	r2, #32
 800cee2:	189b      	adds	r3, r3, r2
 800cee4:	19db      	adds	r3, r3, r7
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	2b08      	cmp	r3, #8
 800ceea:	d015      	beq.n	800cf18 <UART_SetConfig+0x5f8>
 800ceec:	dc18      	bgt.n	800cf20 <UART_SetConfig+0x600>
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	d00d      	beq.n	800cf0e <UART_SetConfig+0x5ee>
 800cef2:	dc15      	bgt.n	800cf20 <UART_SetConfig+0x600>
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <UART_SetConfig+0x5de>
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d005      	beq.n	800cf08 <UART_SetConfig+0x5e8>
 800cefc:	e010      	b.n	800cf20 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cefe:	f7fd f825 	bl	8009f4c <HAL_RCC_GetPCLK1Freq>
 800cf02:	0003      	movs	r3, r0
 800cf04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf06:	e014      	b.n	800cf32 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf08:	4b2e      	ldr	r3, [pc, #184]	@ (800cfc4 <UART_SetConfig+0x6a4>)
 800cf0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf0c:	e011      	b.n	800cf32 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf0e:	f7fc ff91 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 800cf12:	0003      	movs	r3, r0
 800cf14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf16:	e00c      	b.n	800cf32 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf18:	2380      	movs	r3, #128	@ 0x80
 800cf1a:	021b      	lsls	r3, r3, #8
 800cf1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf1e:	e008      	b.n	800cf32 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800cf20:	2300      	movs	r3, #0
 800cf22:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cf24:	231a      	movs	r3, #26
 800cf26:	2220      	movs	r2, #32
 800cf28:	189b      	adds	r3, r3, r2
 800cf2a:	19db      	adds	r3, r3, r7
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	701a      	strb	r2, [r3, #0]
        break;
 800cf30:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800cf32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d02a      	beq.n	800cf8e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf3c:	4b22      	ldr	r3, [pc, #136]	@ (800cfc8 <UART_SetConfig+0x6a8>)
 800cf3e:	0052      	lsls	r2, r2, #1
 800cf40:	5ad3      	ldrh	r3, [r2, r3]
 800cf42:	0019      	movs	r1, r3
 800cf44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cf46:	f7f3 f903 	bl	8000150 <__udivsi3>
 800cf4a:	0003      	movs	r3, r0
 800cf4c:	001a      	movs	r2, r3
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	085b      	lsrs	r3, r3, #1
 800cf54:	18d2      	adds	r2, r2, r3
 800cf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	0019      	movs	r1, r3
 800cf5c:	0010      	movs	r0, r2
 800cf5e:	f7f3 f8f7 	bl	8000150 <__udivsi3>
 800cf62:	0003      	movs	r3, r0
 800cf64:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf68:	2b0f      	cmp	r3, #15
 800cf6a:	d90a      	bls.n	800cf82 <UART_SetConfig+0x662>
 800cf6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf6e:	2380      	movs	r3, #128	@ 0x80
 800cf70:	025b      	lsls	r3, r3, #9
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d205      	bcs.n	800cf82 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	60da      	str	r2, [r3, #12]
 800cf80:	e005      	b.n	800cf8e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800cf82:	231a      	movs	r3, #26
 800cf84:	2220      	movs	r2, #32
 800cf86:	189b      	adds	r3, r3, r2
 800cf88:	19db      	adds	r3, r3, r7
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf90:	226a      	movs	r2, #106	@ 0x6a
 800cf92:	2101      	movs	r1, #1
 800cf94:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf98:	2268      	movs	r2, #104	@ 0x68
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cfaa:	231a      	movs	r3, #26
 800cfac:	2220      	movs	r2, #32
 800cfae:	189b      	adds	r3, r3, r2
 800cfb0:	19db      	adds	r3, r3, r7
 800cfb2:	781b      	ldrb	r3, [r3, #0]
}
 800cfb4:	0018      	movs	r0, r3
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	b010      	add	sp, #64	@ 0x40
 800cfba:	bdb0      	pop	{r4, r5, r7, pc}
 800cfbc:	40008000 	.word	0x40008000
 800cfc0:	40008400 	.word	0x40008400
 800cfc4:	00f42400 	.word	0x00f42400
 800cfc8:	080119b0 	.word	0x080119b0

0800cfcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfd8:	2208      	movs	r2, #8
 800cfda:	4013      	ands	r3, r2
 800cfdc:	d00b      	beq.n	800cff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	4a4a      	ldr	r2, [pc, #296]	@ (800d110 <UART_AdvFeatureConfig+0x144>)
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	0019      	movs	r1, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	430a      	orrs	r2, r1
 800cff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cffa:	2201      	movs	r2, #1
 800cffc:	4013      	ands	r3, r2
 800cffe:	d00b      	beq.n	800d018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	4a43      	ldr	r2, [pc, #268]	@ (800d114 <UART_AdvFeatureConfig+0x148>)
 800d008:	4013      	ands	r3, r2
 800d00a:	0019      	movs	r1, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	430a      	orrs	r2, r1
 800d016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d01c:	2202      	movs	r2, #2
 800d01e:	4013      	ands	r3, r2
 800d020:	d00b      	beq.n	800d03a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	4a3b      	ldr	r2, [pc, #236]	@ (800d118 <UART_AdvFeatureConfig+0x14c>)
 800d02a:	4013      	ands	r3, r2
 800d02c:	0019      	movs	r1, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	430a      	orrs	r2, r1
 800d038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d03e:	2204      	movs	r2, #4
 800d040:	4013      	ands	r3, r2
 800d042:	d00b      	beq.n	800d05c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	4a34      	ldr	r2, [pc, #208]	@ (800d11c <UART_AdvFeatureConfig+0x150>)
 800d04c:	4013      	ands	r3, r2
 800d04e:	0019      	movs	r1, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	430a      	orrs	r2, r1
 800d05a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d060:	2210      	movs	r2, #16
 800d062:	4013      	ands	r3, r2
 800d064:	d00b      	beq.n	800d07e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	4a2c      	ldr	r2, [pc, #176]	@ (800d120 <UART_AdvFeatureConfig+0x154>)
 800d06e:	4013      	ands	r3, r2
 800d070:	0019      	movs	r1, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	430a      	orrs	r2, r1
 800d07c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d082:	2220      	movs	r2, #32
 800d084:	4013      	ands	r3, r2
 800d086:	d00b      	beq.n	800d0a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	4a25      	ldr	r2, [pc, #148]	@ (800d124 <UART_AdvFeatureConfig+0x158>)
 800d090:	4013      	ands	r3, r2
 800d092:	0019      	movs	r1, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	430a      	orrs	r2, r1
 800d09e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a4:	2240      	movs	r2, #64	@ 0x40
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	d01d      	beq.n	800d0e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d128 <UART_AdvFeatureConfig+0x15c>)
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	0019      	movs	r1, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0c6:	2380      	movs	r3, #128	@ 0x80
 800d0c8:	035b      	lsls	r3, r3, #13
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d10b      	bne.n	800d0e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	4a15      	ldr	r2, [pc, #84]	@ (800d12c <UART_AdvFeatureConfig+0x160>)
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	0019      	movs	r1, r3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ea:	2280      	movs	r2, #128	@ 0x80
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	d00b      	beq.n	800d108 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	4a0e      	ldr	r2, [pc, #56]	@ (800d130 <UART_AdvFeatureConfig+0x164>)
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	0019      	movs	r1, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	430a      	orrs	r2, r1
 800d106:	605a      	str	r2, [r3, #4]
  }
}
 800d108:	46c0      	nop			@ (mov r8, r8)
 800d10a:	46bd      	mov	sp, r7
 800d10c:	b002      	add	sp, #8
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	ffff7fff 	.word	0xffff7fff
 800d114:	fffdffff 	.word	0xfffdffff
 800d118:	fffeffff 	.word	0xfffeffff
 800d11c:	fffbffff 	.word	0xfffbffff
 800d120:	ffffefff 	.word	0xffffefff
 800d124:	ffffdfff 	.word	0xffffdfff
 800d128:	ffefffff 	.word	0xffefffff
 800d12c:	ff9fffff 	.word	0xff9fffff
 800d130:	fff7ffff 	.word	0xfff7ffff

0800d134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b092      	sub	sp, #72	@ 0x48
 800d138:	af02      	add	r7, sp, #8
 800d13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2290      	movs	r2, #144	@ 0x90
 800d140:	2100      	movs	r1, #0
 800d142:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d144:	f7fb f882 	bl	800824c <HAL_GetTick>
 800d148:	0003      	movs	r3, r0
 800d14a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2208      	movs	r2, #8
 800d154:	4013      	ands	r3, r2
 800d156:	2b08      	cmp	r3, #8
 800d158:	d12d      	bne.n	800d1b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d15c:	2280      	movs	r2, #128	@ 0x80
 800d15e:	0391      	lsls	r1, r2, #14
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	4a47      	ldr	r2, [pc, #284]	@ (800d280 <UART_CheckIdleState+0x14c>)
 800d164:	9200      	str	r2, [sp, #0]
 800d166:	2200      	movs	r2, #0
 800d168:	f000 f88e 	bl	800d288 <UART_WaitOnFlagUntilTimeout>
 800d16c:	1e03      	subs	r3, r0, #0
 800d16e:	d022      	beq.n	800d1b6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d170:	f3ef 8310 	mrs	r3, PRIMASK
 800d174:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d178:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d17a:	2301      	movs	r3, #1
 800d17c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d180:	f383 8810 	msr	PRIMASK, r3
}
 800d184:	46c0      	nop			@ (mov r8, r8)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2180      	movs	r1, #128	@ 0x80
 800d192:	438a      	bics	r2, r1
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19c:	f383 8810 	msr	PRIMASK, r3
}
 800d1a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2288      	movs	r2, #136	@ 0x88
 800d1a6:	2120      	movs	r1, #32
 800d1a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2284      	movs	r2, #132	@ 0x84
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	e060      	b.n	800d278 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2204      	movs	r2, #4
 800d1be:	4013      	ands	r3, r2
 800d1c0:	2b04      	cmp	r3, #4
 800d1c2:	d146      	bne.n	800d252 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1c6:	2280      	movs	r2, #128	@ 0x80
 800d1c8:	03d1      	lsls	r1, r2, #15
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	4a2c      	ldr	r2, [pc, #176]	@ (800d280 <UART_CheckIdleState+0x14c>)
 800d1ce:	9200      	str	r2, [sp, #0]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f000 f859 	bl	800d288 <UART_WaitOnFlagUntilTimeout>
 800d1d6:	1e03      	subs	r3, r0, #0
 800d1d8:	d03b      	beq.n	800d252 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1da:	f3ef 8310 	mrs	r3, PRIMASK
 800d1de:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	f383 8810 	msr	PRIMASK, r3
}
 800d1ee:	46c0      	nop			@ (mov r8, r8)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4922      	ldr	r1, [pc, #136]	@ (800d284 <UART_CheckIdleState+0x150>)
 800d1fc:	400a      	ands	r2, r1
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	f383 8810 	msr	PRIMASK, r3
}
 800d20a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d20c:	f3ef 8310 	mrs	r3, PRIMASK
 800d210:	61bb      	str	r3, [r7, #24]
  return(result);
 800d212:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d214:	633b      	str	r3, [r7, #48]	@ 0x30
 800d216:	2301      	movs	r3, #1
 800d218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	f383 8810 	msr	PRIMASK, r3
}
 800d220:	46c0      	nop			@ (mov r8, r8)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	689a      	ldr	r2, [r3, #8]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2101      	movs	r1, #1
 800d22e:	438a      	bics	r2, r1
 800d230:	609a      	str	r2, [r3, #8]
 800d232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d234:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d236:	6a3b      	ldr	r3, [r7, #32]
 800d238:	f383 8810 	msr	PRIMASK, r3
}
 800d23c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	228c      	movs	r2, #140	@ 0x8c
 800d242:	2120      	movs	r1, #32
 800d244:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2284      	movs	r2, #132	@ 0x84
 800d24a:	2100      	movs	r1, #0
 800d24c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d24e:	2303      	movs	r3, #3
 800d250:	e012      	b.n	800d278 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2288      	movs	r2, #136	@ 0x88
 800d256:	2120      	movs	r1, #32
 800d258:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	228c      	movs	r2, #140	@ 0x8c
 800d25e:	2120      	movs	r1, #32
 800d260:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2200      	movs	r2, #0
 800d266:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2284      	movs	r2, #132	@ 0x84
 800d272:	2100      	movs	r1, #0
 800d274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	0018      	movs	r0, r3
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b010      	add	sp, #64	@ 0x40
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	01ffffff 	.word	0x01ffffff
 800d284:	fffffedf 	.word	0xfffffedf

0800d288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	603b      	str	r3, [r7, #0]
 800d294:	1dfb      	adds	r3, r7, #7
 800d296:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d298:	e051      	b.n	800d33e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	3301      	adds	r3, #1
 800d29e:	d04e      	beq.n	800d33e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2a0:	f7fa ffd4 	bl	800824c <HAL_GetTick>
 800d2a4:	0002      	movs	r2, r0
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	69ba      	ldr	r2, [r7, #24]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d302      	bcc.n	800d2b6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d101      	bne.n	800d2ba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	e051      	b.n	800d35e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2204      	movs	r2, #4
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	d03b      	beq.n	800d33e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2b80      	cmp	r3, #128	@ 0x80
 800d2ca:	d038      	beq.n	800d33e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2b40      	cmp	r3, #64	@ 0x40
 800d2d0:	d035      	beq.n	800d33e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	69db      	ldr	r3, [r3, #28]
 800d2d8:	2208      	movs	r2, #8
 800d2da:	4013      	ands	r3, r2
 800d2dc:	2b08      	cmp	r3, #8
 800d2de:	d111      	bne.n	800d304 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	2208      	movs	r2, #8
 800d2e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	f000 f83c 	bl	800d368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2290      	movs	r2, #144	@ 0x90
 800d2f4:	2108      	movs	r1, #8
 800d2f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2284      	movs	r2, #132	@ 0x84
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	e02c      	b.n	800d35e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	69da      	ldr	r2, [r3, #28]
 800d30a:	2380      	movs	r3, #128	@ 0x80
 800d30c:	011b      	lsls	r3, r3, #4
 800d30e:	401a      	ands	r2, r3
 800d310:	2380      	movs	r3, #128	@ 0x80
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	429a      	cmp	r2, r3
 800d316:	d112      	bne.n	800d33e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2280      	movs	r2, #128	@ 0x80
 800d31e:	0112      	lsls	r2, r2, #4
 800d320:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	0018      	movs	r0, r3
 800d326:	f000 f81f 	bl	800d368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2290      	movs	r2, #144	@ 0x90
 800d32e:	2120      	movs	r1, #32
 800d330:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2284      	movs	r2, #132	@ 0x84
 800d336:	2100      	movs	r1, #0
 800d338:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d33a:	2303      	movs	r3, #3
 800d33c:	e00f      	b.n	800d35e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	69db      	ldr	r3, [r3, #28]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	4013      	ands	r3, r2
 800d348:	68ba      	ldr	r2, [r7, #8]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	425a      	negs	r2, r3
 800d34e:	4153      	adcs	r3, r2
 800d350:	b2db      	uxtb	r3, r3
 800d352:	001a      	movs	r2, r3
 800d354:	1dfb      	adds	r3, r7, #7
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d09e      	beq.n	800d29a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	0018      	movs	r0, r3
 800d360:	46bd      	mov	sp, r7
 800d362:	b004      	add	sp, #16
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b08e      	sub	sp, #56	@ 0x38
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d370:	f3ef 8310 	mrs	r3, PRIMASK
 800d374:	617b      	str	r3, [r7, #20]
  return(result);
 800d376:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d378:	637b      	str	r3, [r7, #52]	@ 0x34
 800d37a:	2301      	movs	r3, #1
 800d37c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	f383 8810 	msr	PRIMASK, r3
}
 800d384:	46c0      	nop			@ (mov r8, r8)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4926      	ldr	r1, [pc, #152]	@ (800d42c <UART_EndRxTransfer+0xc4>)
 800d392:	400a      	ands	r2, r1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	f383 8810 	msr	PRIMASK, r3
}
 800d3a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d3a6:	623b      	str	r3, [r7, #32]
  return(result);
 800d3a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b2:	f383 8810 	msr	PRIMASK, r3
}
 800d3b6:	46c0      	nop			@ (mov r8, r8)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689a      	ldr	r2, [r3, #8]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	491b      	ldr	r1, [pc, #108]	@ (800d430 <UART_EndRxTransfer+0xc8>)
 800d3c4:	400a      	ands	r2, r1
 800d3c6:	609a      	str	r2, [r3, #8]
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ce:	f383 8810 	msr	PRIMASK, r3
}
 800d3d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d118      	bne.n	800d40e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d3e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f383 8810 	msr	PRIMASK, r3
}
 800d3f0:	46c0      	nop			@ (mov r8, r8)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2110      	movs	r1, #16
 800d3fe:	438a      	bics	r2, r1
 800d400:	601a      	str	r2, [r3, #0]
 800d402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	f383 8810 	msr	PRIMASK, r3
}
 800d40c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	228c      	movs	r2, #140	@ 0x8c
 800d412:	2120      	movs	r1, #32
 800d414:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d422:	46c0      	nop			@ (mov r8, r8)
 800d424:	46bd      	mov	sp, r7
 800d426:	b00e      	add	sp, #56	@ 0x38
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	46c0      	nop			@ (mov r8, r8)
 800d42c:	fffffedf 	.word	0xfffffedf
 800d430:	effffffe 	.word	0xeffffffe

0800d434 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2284      	movs	r2, #132	@ 0x84
 800d440:	5c9b      	ldrb	r3, [r3, r2]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d101      	bne.n	800d44a <HAL_UARTEx_DisableFifoMode+0x16>
 800d446:	2302      	movs	r3, #2
 800d448:	e027      	b.n	800d49a <HAL_UARTEx_DisableFifoMode+0x66>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2284      	movs	r2, #132	@ 0x84
 800d44e:	2101      	movs	r1, #1
 800d450:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2288      	movs	r2, #136	@ 0x88
 800d456:	2124      	movs	r1, #36	@ 0x24
 800d458:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2101      	movs	r1, #1
 800d46e:	438a      	bics	r2, r1
 800d470:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	4a0b      	ldr	r2, [pc, #44]	@ (800d4a4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800d476:	4013      	ands	r3, r2
 800d478:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2288      	movs	r2, #136	@ 0x88
 800d48c:	2120      	movs	r1, #32
 800d48e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2284      	movs	r2, #132	@ 0x84
 800d494:	2100      	movs	r1, #0
 800d496:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	0018      	movs	r0, r3
 800d49c:	46bd      	mov	sp, r7
 800d49e:	b004      	add	sp, #16
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	46c0      	nop			@ (mov r8, r8)
 800d4a4:	dfffffff 	.word	0xdfffffff

0800d4a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2284      	movs	r2, #132	@ 0x84
 800d4b6:	5c9b      	ldrb	r3, [r3, r2]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d101      	bne.n	800d4c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d4bc:	2302      	movs	r3, #2
 800d4be:	e02e      	b.n	800d51e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2284      	movs	r2, #132	@ 0x84
 800d4c4:	2101      	movs	r1, #1
 800d4c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2288      	movs	r2, #136	@ 0x88
 800d4cc:	2124      	movs	r1, #36	@ 0x24
 800d4ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2101      	movs	r1, #1
 800d4e4:	438a      	bics	r2, r1
 800d4e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	08d9      	lsrs	r1, r3, #3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	430a      	orrs	r2, r1
 800d4fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	0018      	movs	r0, r3
 800d500:	f000 f854 	bl	800d5ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2288      	movs	r2, #136	@ 0x88
 800d510:	2120      	movs	r1, #32
 800d512:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2284      	movs	r2, #132	@ 0x84
 800d518:	2100      	movs	r1, #0
 800d51a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	0018      	movs	r0, r3
 800d520:	46bd      	mov	sp, r7
 800d522:	b004      	add	sp, #16
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2284      	movs	r2, #132	@ 0x84
 800d536:	5c9b      	ldrb	r3, [r3, r2]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d101      	bne.n	800d540 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d53c:	2302      	movs	r3, #2
 800d53e:	e02f      	b.n	800d5a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2284      	movs	r2, #132	@ 0x84
 800d544:	2101      	movs	r1, #1
 800d546:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2288      	movs	r2, #136	@ 0x88
 800d54c:	2124      	movs	r1, #36	@ 0x24
 800d54e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2101      	movs	r1, #1
 800d564:	438a      	bics	r2, r1
 800d566:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	4a0e      	ldr	r2, [pc, #56]	@ (800d5a8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800d570:	4013      	ands	r3, r2
 800d572:	0019      	movs	r1, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	430a      	orrs	r2, r1
 800d57c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	0018      	movs	r0, r3
 800d582:	f000 f813 	bl	800d5ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2288      	movs	r2, #136	@ 0x88
 800d592:	2120      	movs	r1, #32
 800d594:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2284      	movs	r2, #132	@ 0x84
 800d59a:	2100      	movs	r1, #0
 800d59c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	b004      	add	sp, #16
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	f1ffffff 	.word	0xf1ffffff

0800d5ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d108      	bne.n	800d5ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	226a      	movs	r2, #106	@ 0x6a
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2268      	movs	r2, #104	@ 0x68
 800d5c8:	2101      	movs	r1, #1
 800d5ca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d5cc:	e043      	b.n	800d656 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d5ce:	260f      	movs	r6, #15
 800d5d0:	19bb      	adds	r3, r7, r6
 800d5d2:	2208      	movs	r2, #8
 800d5d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d5d6:	200e      	movs	r0, #14
 800d5d8:	183b      	adds	r3, r7, r0
 800d5da:	2208      	movs	r2, #8
 800d5dc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	0e5b      	lsrs	r3, r3, #25
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	240d      	movs	r4, #13
 800d5ea:	193b      	adds	r3, r7, r4
 800d5ec:	2107      	movs	r1, #7
 800d5ee:	400a      	ands	r2, r1
 800d5f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	0f5b      	lsrs	r3, r3, #29
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	250c      	movs	r5, #12
 800d5fe:	197b      	adds	r3, r7, r5
 800d600:	2107      	movs	r1, #7
 800d602:	400a      	ands	r2, r1
 800d604:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d606:	183b      	adds	r3, r7, r0
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	197a      	adds	r2, r7, r5
 800d60c:	7812      	ldrb	r2, [r2, #0]
 800d60e:	4914      	ldr	r1, [pc, #80]	@ (800d660 <UARTEx_SetNbDataToProcess+0xb4>)
 800d610:	5c8a      	ldrb	r2, [r1, r2]
 800d612:	435a      	muls	r2, r3
 800d614:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800d616:	197b      	adds	r3, r7, r5
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	4a12      	ldr	r2, [pc, #72]	@ (800d664 <UARTEx_SetNbDataToProcess+0xb8>)
 800d61c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d61e:	0019      	movs	r1, r3
 800d620:	f7f2 fe20 	bl	8000264 <__divsi3>
 800d624:	0003      	movs	r3, r0
 800d626:	b299      	uxth	r1, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	226a      	movs	r2, #106	@ 0x6a
 800d62c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d62e:	19bb      	adds	r3, r7, r6
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	193a      	adds	r2, r7, r4
 800d634:	7812      	ldrb	r2, [r2, #0]
 800d636:	490a      	ldr	r1, [pc, #40]	@ (800d660 <UARTEx_SetNbDataToProcess+0xb4>)
 800d638:	5c8a      	ldrb	r2, [r1, r2]
 800d63a:	435a      	muls	r2, r3
 800d63c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800d63e:	193b      	adds	r3, r7, r4
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	4a08      	ldr	r2, [pc, #32]	@ (800d664 <UARTEx_SetNbDataToProcess+0xb8>)
 800d644:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d646:	0019      	movs	r1, r3
 800d648:	f7f2 fe0c 	bl	8000264 <__divsi3>
 800d64c:	0003      	movs	r3, r0
 800d64e:	b299      	uxth	r1, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2268      	movs	r2, #104	@ 0x68
 800d654:	5299      	strh	r1, [r3, r2]
}
 800d656:	46c0      	nop			@ (mov r8, r8)
 800d658:	46bd      	mov	sp, r7
 800d65a:	b005      	add	sp, #20
 800d65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d65e:	46c0      	nop			@ (mov r8, r8)
 800d660:	080119c8 	.word	0x080119c8
 800d664:	080119d0 	.word	0x080119d0

0800d668 <sulp>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	0016      	movs	r6, r2
 800d66c:	000d      	movs	r5, r1
 800d66e:	f002 f925 	bl	800f8bc <__ulp>
 800d672:	2e00      	cmp	r6, #0
 800d674:	d00d      	beq.n	800d692 <sulp+0x2a>
 800d676:	236b      	movs	r3, #107	@ 0x6b
 800d678:	006a      	lsls	r2, r5, #1
 800d67a:	0d52      	lsrs	r2, r2, #21
 800d67c:	1a9b      	subs	r3, r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	dd07      	ble.n	800d692 <sulp+0x2a>
 800d682:	2400      	movs	r4, #0
 800d684:	4a03      	ldr	r2, [pc, #12]	@ (800d694 <sulp+0x2c>)
 800d686:	051b      	lsls	r3, r3, #20
 800d688:	189d      	adds	r5, r3, r2
 800d68a:	002b      	movs	r3, r5
 800d68c:	0022      	movs	r2, r4
 800d68e:	f7f4 ff95 	bl	80025bc <__aeabi_dmul>
 800d692:	bd70      	pop	{r4, r5, r6, pc}
 800d694:	3ff00000 	.word	0x3ff00000

0800d698 <_strtod_l>:
 800d698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d69a:	b0a3      	sub	sp, #140	@ 0x8c
 800d69c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2600      	movs	r6, #0
 800d6a2:	2700      	movs	r7, #0
 800d6a4:	9005      	str	r0, [sp, #20]
 800d6a6:	9109      	str	r1, [sp, #36]	@ 0x24
 800d6a8:	921e      	str	r2, [sp, #120]	@ 0x78
 800d6aa:	911d      	str	r1, [sp, #116]	@ 0x74
 800d6ac:	780a      	ldrb	r2, [r1, #0]
 800d6ae:	2a2b      	cmp	r2, #43	@ 0x2b
 800d6b0:	d053      	beq.n	800d75a <_strtod_l+0xc2>
 800d6b2:	d83f      	bhi.n	800d734 <_strtod_l+0x9c>
 800d6b4:	2a0d      	cmp	r2, #13
 800d6b6:	d839      	bhi.n	800d72c <_strtod_l+0x94>
 800d6b8:	2a08      	cmp	r2, #8
 800d6ba:	d839      	bhi.n	800d730 <_strtod_l+0x98>
 800d6bc:	2a00      	cmp	r2, #0
 800d6be:	d042      	beq.n	800d746 <_strtod_l+0xae>
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	9212      	str	r2, [sp, #72]	@ 0x48
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800d6c8:	910c      	str	r1, [sp, #48]	@ 0x30
 800d6ca:	782a      	ldrb	r2, [r5, #0]
 800d6cc:	2a30      	cmp	r2, #48	@ 0x30
 800d6ce:	d000      	beq.n	800d6d2 <_strtod_l+0x3a>
 800d6d0:	e083      	b.n	800d7da <_strtod_l+0x142>
 800d6d2:	786a      	ldrb	r2, [r5, #1]
 800d6d4:	3120      	adds	r1, #32
 800d6d6:	438a      	bics	r2, r1
 800d6d8:	2a58      	cmp	r2, #88	@ 0x58
 800d6da:	d000      	beq.n	800d6de <_strtod_l+0x46>
 800d6dc:	e073      	b.n	800d7c6 <_strtod_l+0x12e>
 800d6de:	9302      	str	r3, [sp, #8]
 800d6e0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d6e2:	4a95      	ldr	r2, [pc, #596]	@ (800d938 <_strtod_l+0x2a0>)
 800d6e4:	9301      	str	r3, [sp, #4]
 800d6e6:	ab1e      	add	r3, sp, #120	@ 0x78
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	9805      	ldr	r0, [sp, #20]
 800d6ec:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d6ee:	a91d      	add	r1, sp, #116	@ 0x74
 800d6f0:	f001 f99e 	bl	800ea30 <__gethex>
 800d6f4:	230f      	movs	r3, #15
 800d6f6:	0002      	movs	r2, r0
 800d6f8:	401a      	ands	r2, r3
 800d6fa:	0004      	movs	r4, r0
 800d6fc:	9206      	str	r2, [sp, #24]
 800d6fe:	4218      	tst	r0, r3
 800d700:	d005      	beq.n	800d70e <_strtod_l+0x76>
 800d702:	2a06      	cmp	r2, #6
 800d704:	d12b      	bne.n	800d75e <_strtod_l+0xc6>
 800d706:	2300      	movs	r3, #0
 800d708:	3501      	adds	r5, #1
 800d70a:	951d      	str	r5, [sp, #116]	@ 0x74
 800d70c:	9312      	str	r3, [sp, #72]	@ 0x48
 800d70e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d710:	2b00      	cmp	r3, #0
 800d712:	d002      	beq.n	800d71a <_strtod_l+0x82>
 800d714:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d716:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d019      	beq.n	800d754 <_strtod_l+0xbc>
 800d720:	2380      	movs	r3, #128	@ 0x80
 800d722:	0030      	movs	r0, r6
 800d724:	061b      	lsls	r3, r3, #24
 800d726:	18f9      	adds	r1, r7, r3
 800d728:	b023      	add	sp, #140	@ 0x8c
 800d72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d72c:	2a20      	cmp	r2, #32
 800d72e:	d1c7      	bne.n	800d6c0 <_strtod_l+0x28>
 800d730:	3101      	adds	r1, #1
 800d732:	e7ba      	b.n	800d6aa <_strtod_l+0x12>
 800d734:	2a2d      	cmp	r2, #45	@ 0x2d
 800d736:	d1c3      	bne.n	800d6c0 <_strtod_l+0x28>
 800d738:	3a2c      	subs	r2, #44	@ 0x2c
 800d73a:	9212      	str	r2, [sp, #72]	@ 0x48
 800d73c:	1c4a      	adds	r2, r1, #1
 800d73e:	921d      	str	r2, [sp, #116]	@ 0x74
 800d740:	784a      	ldrb	r2, [r1, #1]
 800d742:	2a00      	cmp	r2, #0
 800d744:	d1be      	bne.n	800d6c4 <_strtod_l+0x2c>
 800d746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d748:	931d      	str	r3, [sp, #116]	@ 0x74
 800d74a:	2300      	movs	r3, #0
 800d74c:	9312      	str	r3, [sp, #72]	@ 0x48
 800d74e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1df      	bne.n	800d714 <_strtod_l+0x7c>
 800d754:	0030      	movs	r0, r6
 800d756:	0039      	movs	r1, r7
 800d758:	e7e6      	b.n	800d728 <_strtod_l+0x90>
 800d75a:	2200      	movs	r2, #0
 800d75c:	e7ed      	b.n	800d73a <_strtod_l+0xa2>
 800d75e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d760:	2a00      	cmp	r2, #0
 800d762:	d007      	beq.n	800d774 <_strtod_l+0xdc>
 800d764:	2135      	movs	r1, #53	@ 0x35
 800d766:	a820      	add	r0, sp, #128	@ 0x80
 800d768:	f002 f99e 	bl	800faa8 <__copybits>
 800d76c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d76e:	9805      	ldr	r0, [sp, #20]
 800d770:	f001 fd58 	bl	800f224 <_Bfree>
 800d774:	9806      	ldr	r0, [sp, #24]
 800d776:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d778:	3801      	subs	r0, #1
 800d77a:	2804      	cmp	r0, #4
 800d77c:	d806      	bhi.n	800d78c <_strtod_l+0xf4>
 800d77e:	f7f2 fcd3 	bl	8000128 <__gnu_thumb1_case_uqi>
 800d782:	0312      	.short	0x0312
 800d784:	1e1c      	.short	0x1e1c
 800d786:	12          	.byte	0x12
 800d787:	00          	.byte	0x00
 800d788:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d78a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800d78c:	05e4      	lsls	r4, r4, #23
 800d78e:	d502      	bpl.n	800d796 <_strtod_l+0xfe>
 800d790:	2380      	movs	r3, #128	@ 0x80
 800d792:	061b      	lsls	r3, r3, #24
 800d794:	431f      	orrs	r7, r3
 800d796:	4b69      	ldr	r3, [pc, #420]	@ (800d93c <_strtod_l+0x2a4>)
 800d798:	423b      	tst	r3, r7
 800d79a:	d1b8      	bne.n	800d70e <_strtod_l+0x76>
 800d79c:	f001 f85a 	bl	800e854 <__errno>
 800d7a0:	2322      	movs	r3, #34	@ 0x22
 800d7a2:	6003      	str	r3, [r0, #0]
 800d7a4:	e7b3      	b.n	800d70e <_strtod_l+0x76>
 800d7a6:	4966      	ldr	r1, [pc, #408]	@ (800d940 <_strtod_l+0x2a8>)
 800d7a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d7aa:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d7ac:	400a      	ands	r2, r1
 800d7ae:	4965      	ldr	r1, [pc, #404]	@ (800d944 <_strtod_l+0x2ac>)
 800d7b0:	185b      	adds	r3, r3, r1
 800d7b2:	051b      	lsls	r3, r3, #20
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	0017      	movs	r7, r2
 800d7b8:	e7e8      	b.n	800d78c <_strtod_l+0xf4>
 800d7ba:	4f60      	ldr	r7, [pc, #384]	@ (800d93c <_strtod_l+0x2a4>)
 800d7bc:	e7e6      	b.n	800d78c <_strtod_l+0xf4>
 800d7be:	2601      	movs	r6, #1
 800d7c0:	4f61      	ldr	r7, [pc, #388]	@ (800d948 <_strtod_l+0x2b0>)
 800d7c2:	4276      	negs	r6, r6
 800d7c4:	e7e2      	b.n	800d78c <_strtod_l+0xf4>
 800d7c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	921d      	str	r2, [sp, #116]	@ 0x74
 800d7cc:	785b      	ldrb	r3, [r3, #1]
 800d7ce:	2b30      	cmp	r3, #48	@ 0x30
 800d7d0:	d0f9      	beq.n	800d7c6 <_strtod_l+0x12e>
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d09b      	beq.n	800d70e <_strtod_l+0x76>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7da:	2500      	movs	r5, #0
 800d7dc:	220a      	movs	r2, #10
 800d7de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7e0:	950d      	str	r5, [sp, #52]	@ 0x34
 800d7e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7e4:	9508      	str	r5, [sp, #32]
 800d7e6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d7e8:	7804      	ldrb	r4, [r0, #0]
 800d7ea:	0023      	movs	r3, r4
 800d7ec:	3b30      	subs	r3, #48	@ 0x30
 800d7ee:	b2d9      	uxtb	r1, r3
 800d7f0:	2909      	cmp	r1, #9
 800d7f2:	d927      	bls.n	800d844 <_strtod_l+0x1ac>
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	4955      	ldr	r1, [pc, #340]	@ (800d94c <_strtod_l+0x2b4>)
 800d7f8:	f000 ffcc 	bl	800e794 <strncmp>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d031      	beq.n	800d864 <_strtod_l+0x1cc>
 800d800:	2000      	movs	r0, #0
 800d802:	0023      	movs	r3, r4
 800d804:	4684      	mov	ip, r0
 800d806:	9a08      	ldr	r2, [sp, #32]
 800d808:	900e      	str	r0, [sp, #56]	@ 0x38
 800d80a:	9206      	str	r2, [sp, #24]
 800d80c:	2220      	movs	r2, #32
 800d80e:	0019      	movs	r1, r3
 800d810:	4391      	bics	r1, r2
 800d812:	000a      	movs	r2, r1
 800d814:	2100      	movs	r1, #0
 800d816:	9107      	str	r1, [sp, #28]
 800d818:	2a45      	cmp	r2, #69	@ 0x45
 800d81a:	d000      	beq.n	800d81e <_strtod_l+0x186>
 800d81c:	e0c0      	b.n	800d9a0 <_strtod_l+0x308>
 800d81e:	9b06      	ldr	r3, [sp, #24]
 800d820:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d822:	4303      	orrs	r3, r0
 800d824:	4313      	orrs	r3, r2
 800d826:	428b      	cmp	r3, r1
 800d828:	d08d      	beq.n	800d746 <_strtod_l+0xae>
 800d82a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d82c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d82e:	3301      	adds	r3, #1
 800d830:	931d      	str	r3, [sp, #116]	@ 0x74
 800d832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	2b2b      	cmp	r3, #43	@ 0x2b
 800d838:	d070      	beq.n	800d91c <_strtod_l+0x284>
 800d83a:	000c      	movs	r4, r1
 800d83c:	2b2d      	cmp	r3, #45	@ 0x2d
 800d83e:	d173      	bne.n	800d928 <_strtod_l+0x290>
 800d840:	2401      	movs	r4, #1
 800d842:	e06c      	b.n	800d91e <_strtod_l+0x286>
 800d844:	9908      	ldr	r1, [sp, #32]
 800d846:	2908      	cmp	r1, #8
 800d848:	dc09      	bgt.n	800d85e <_strtod_l+0x1c6>
 800d84a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d84c:	4351      	muls	r1, r2
 800d84e:	185b      	adds	r3, r3, r1
 800d850:	930d      	str	r3, [sp, #52]	@ 0x34
 800d852:	9b08      	ldr	r3, [sp, #32]
 800d854:	3001      	adds	r0, #1
 800d856:	3301      	adds	r3, #1
 800d858:	9308      	str	r3, [sp, #32]
 800d85a:	901d      	str	r0, [sp, #116]	@ 0x74
 800d85c:	e7c3      	b.n	800d7e6 <_strtod_l+0x14e>
 800d85e:	4355      	muls	r5, r2
 800d860:	195d      	adds	r5, r3, r5
 800d862:	e7f6      	b.n	800d852 <_strtod_l+0x1ba>
 800d864:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d866:	1c5a      	adds	r2, r3, #1
 800d868:	921d      	str	r2, [sp, #116]	@ 0x74
 800d86a:	9a08      	ldr	r2, [sp, #32]
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	2a00      	cmp	r2, #0
 800d870:	d03a      	beq.n	800d8e8 <_strtod_l+0x250>
 800d872:	900e      	str	r0, [sp, #56]	@ 0x38
 800d874:	9206      	str	r2, [sp, #24]
 800d876:	001a      	movs	r2, r3
 800d878:	3a30      	subs	r2, #48	@ 0x30
 800d87a:	2a09      	cmp	r2, #9
 800d87c:	d912      	bls.n	800d8a4 <_strtod_l+0x20c>
 800d87e:	2201      	movs	r2, #1
 800d880:	4694      	mov	ip, r2
 800d882:	e7c3      	b.n	800d80c <_strtod_l+0x174>
 800d884:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d886:	3001      	adds	r0, #1
 800d888:	1c5a      	adds	r2, r3, #1
 800d88a:	921d      	str	r2, [sp, #116]	@ 0x74
 800d88c:	785b      	ldrb	r3, [r3, #1]
 800d88e:	2b30      	cmp	r3, #48	@ 0x30
 800d890:	d0f8      	beq.n	800d884 <_strtod_l+0x1ec>
 800d892:	001a      	movs	r2, r3
 800d894:	3a31      	subs	r2, #49	@ 0x31
 800d896:	2a08      	cmp	r2, #8
 800d898:	d83b      	bhi.n	800d912 <_strtod_l+0x27a>
 800d89a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d89c:	2000      	movs	r0, #0
 800d89e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d8a0:	9006      	str	r0, [sp, #24]
 800d8a2:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d8a4:	001a      	movs	r2, r3
 800d8a6:	1c41      	adds	r1, r0, #1
 800d8a8:	3a30      	subs	r2, #48	@ 0x30
 800d8aa:	2b30      	cmp	r3, #48	@ 0x30
 800d8ac:	d016      	beq.n	800d8dc <_strtod_l+0x244>
 800d8ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8b0:	185b      	adds	r3, r3, r1
 800d8b2:	930e      	str	r3, [sp, #56]	@ 0x38
 800d8b4:	9b06      	ldr	r3, [sp, #24]
 800d8b6:	210a      	movs	r1, #10
 800d8b8:	469c      	mov	ip, r3
 800d8ba:	4484      	add	ip, r0
 800d8bc:	459c      	cmp	ip, r3
 800d8be:	d115      	bne.n	800d8ec <_strtod_l+0x254>
 800d8c0:	9906      	ldr	r1, [sp, #24]
 800d8c2:	9b06      	ldr	r3, [sp, #24]
 800d8c4:	3101      	adds	r1, #1
 800d8c6:	1809      	adds	r1, r1, r0
 800d8c8:	181b      	adds	r3, r3, r0
 800d8ca:	9106      	str	r1, [sp, #24]
 800d8cc:	2b08      	cmp	r3, #8
 800d8ce:	dc19      	bgt.n	800d904 <_strtod_l+0x26c>
 800d8d0:	230a      	movs	r3, #10
 800d8d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d8d4:	434b      	muls	r3, r1
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	18d3      	adds	r3, r2, r3
 800d8da:	930d      	str	r3, [sp, #52]	@ 0x34
 800d8dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d8de:	0008      	movs	r0, r1
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	921d      	str	r2, [sp, #116]	@ 0x74
 800d8e4:	785b      	ldrb	r3, [r3, #1]
 800d8e6:	e7c6      	b.n	800d876 <_strtod_l+0x1de>
 800d8e8:	9808      	ldr	r0, [sp, #32]
 800d8ea:	e7d0      	b.n	800d88e <_strtod_l+0x1f6>
 800d8ec:	1c5c      	adds	r4, r3, #1
 800d8ee:	2b08      	cmp	r3, #8
 800d8f0:	dc04      	bgt.n	800d8fc <_strtod_l+0x264>
 800d8f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8f4:	434b      	muls	r3, r1
 800d8f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800d8f8:	0023      	movs	r3, r4
 800d8fa:	e7df      	b.n	800d8bc <_strtod_l+0x224>
 800d8fc:	2c10      	cmp	r4, #16
 800d8fe:	dcfb      	bgt.n	800d8f8 <_strtod_l+0x260>
 800d900:	434d      	muls	r5, r1
 800d902:	e7f9      	b.n	800d8f8 <_strtod_l+0x260>
 800d904:	2100      	movs	r1, #0
 800d906:	2b0f      	cmp	r3, #15
 800d908:	dce8      	bgt.n	800d8dc <_strtod_l+0x244>
 800d90a:	230a      	movs	r3, #10
 800d90c:	435d      	muls	r5, r3
 800d90e:	1955      	adds	r5, r2, r5
 800d910:	e7e4      	b.n	800d8dc <_strtod_l+0x244>
 800d912:	2200      	movs	r2, #0
 800d914:	920e      	str	r2, [sp, #56]	@ 0x38
 800d916:	9206      	str	r2, [sp, #24]
 800d918:	3201      	adds	r2, #1
 800d91a:	e7b1      	b.n	800d880 <_strtod_l+0x1e8>
 800d91c:	2400      	movs	r4, #0
 800d91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d920:	3302      	adds	r3, #2
 800d922:	931d      	str	r3, [sp, #116]	@ 0x74
 800d924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d926:	789b      	ldrb	r3, [r3, #2]
 800d928:	001a      	movs	r2, r3
 800d92a:	3a30      	subs	r2, #48	@ 0x30
 800d92c:	2a09      	cmp	r2, #9
 800d92e:	d913      	bls.n	800d958 <_strtod_l+0x2c0>
 800d930:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d932:	921d      	str	r2, [sp, #116]	@ 0x74
 800d934:	2200      	movs	r2, #0
 800d936:	e032      	b.n	800d99e <_strtod_l+0x306>
 800d938:	080119fc 	.word	0x080119fc
 800d93c:	7ff00000 	.word	0x7ff00000
 800d940:	ffefffff 	.word	0xffefffff
 800d944:	00000433 	.word	0x00000433
 800d948:	7fffffff 	.word	0x7fffffff
 800d94c:	080119d8 	.word	0x080119d8
 800d950:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	921d      	str	r2, [sp, #116]	@ 0x74
 800d956:	785b      	ldrb	r3, [r3, #1]
 800d958:	2b30      	cmp	r3, #48	@ 0x30
 800d95a:	d0f9      	beq.n	800d950 <_strtod_l+0x2b8>
 800d95c:	2200      	movs	r2, #0
 800d95e:	9207      	str	r2, [sp, #28]
 800d960:	001a      	movs	r2, r3
 800d962:	3a31      	subs	r2, #49	@ 0x31
 800d964:	2a08      	cmp	r2, #8
 800d966:	d81b      	bhi.n	800d9a0 <_strtod_l+0x308>
 800d968:	3b30      	subs	r3, #48	@ 0x30
 800d96a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d96c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d96e:	9307      	str	r3, [sp, #28]
 800d970:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d972:	1c59      	adds	r1, r3, #1
 800d974:	911d      	str	r1, [sp, #116]	@ 0x74
 800d976:	785b      	ldrb	r3, [r3, #1]
 800d978:	001a      	movs	r2, r3
 800d97a:	3a30      	subs	r2, #48	@ 0x30
 800d97c:	2a09      	cmp	r2, #9
 800d97e:	d93a      	bls.n	800d9f6 <_strtod_l+0x35e>
 800d980:	9a07      	ldr	r2, [sp, #28]
 800d982:	1a8a      	subs	r2, r1, r2
 800d984:	49b4      	ldr	r1, [pc, #720]	@ (800dc58 <_strtod_l+0x5c0>)
 800d986:	9107      	str	r1, [sp, #28]
 800d988:	2a08      	cmp	r2, #8
 800d98a:	dc04      	bgt.n	800d996 <_strtod_l+0x2fe>
 800d98c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d98e:	9207      	str	r2, [sp, #28]
 800d990:	428a      	cmp	r2, r1
 800d992:	dd00      	ble.n	800d996 <_strtod_l+0x2fe>
 800d994:	9107      	str	r1, [sp, #28]
 800d996:	2c00      	cmp	r4, #0
 800d998:	d002      	beq.n	800d9a0 <_strtod_l+0x308>
 800d99a:	9a07      	ldr	r2, [sp, #28]
 800d99c:	4252      	negs	r2, r2
 800d99e:	9207      	str	r2, [sp, #28]
 800d9a0:	9a06      	ldr	r2, [sp, #24]
 800d9a2:	2a00      	cmp	r2, #0
 800d9a4:	d14d      	bne.n	800da42 <_strtod_l+0x3aa>
 800d9a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d9a8:	4310      	orrs	r0, r2
 800d9aa:	d000      	beq.n	800d9ae <_strtod_l+0x316>
 800d9ac:	e6af      	b.n	800d70e <_strtod_l+0x76>
 800d9ae:	4662      	mov	r2, ip
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	d000      	beq.n	800d9b6 <_strtod_l+0x31e>
 800d9b4:	e6c7      	b.n	800d746 <_strtod_l+0xae>
 800d9b6:	2b69      	cmp	r3, #105	@ 0x69
 800d9b8:	d027      	beq.n	800da0a <_strtod_l+0x372>
 800d9ba:	dc23      	bgt.n	800da04 <_strtod_l+0x36c>
 800d9bc:	2b49      	cmp	r3, #73	@ 0x49
 800d9be:	d024      	beq.n	800da0a <_strtod_l+0x372>
 800d9c0:	2b4e      	cmp	r3, #78	@ 0x4e
 800d9c2:	d000      	beq.n	800d9c6 <_strtod_l+0x32e>
 800d9c4:	e6bf      	b.n	800d746 <_strtod_l+0xae>
 800d9c6:	49a5      	ldr	r1, [pc, #660]	@ (800dc5c <_strtod_l+0x5c4>)
 800d9c8:	a81d      	add	r0, sp, #116	@ 0x74
 800d9ca:	f001 fa67 	bl	800ee9c <__match>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d100      	bne.n	800d9d4 <_strtod_l+0x33c>
 800d9d2:	e6b8      	b.n	800d746 <_strtod_l+0xae>
 800d9d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	2b28      	cmp	r3, #40	@ 0x28
 800d9da:	d12c      	bne.n	800da36 <_strtod_l+0x39e>
 800d9dc:	49a0      	ldr	r1, [pc, #640]	@ (800dc60 <_strtod_l+0x5c8>)
 800d9de:	aa20      	add	r2, sp, #128	@ 0x80
 800d9e0:	a81d      	add	r0, sp, #116	@ 0x74
 800d9e2:	f001 fa6f 	bl	800eec4 <__hexnan>
 800d9e6:	2805      	cmp	r0, #5
 800d9e8:	d125      	bne.n	800da36 <_strtod_l+0x39e>
 800d9ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d9ec:	4a9d      	ldr	r2, [pc, #628]	@ (800dc64 <_strtod_l+0x5cc>)
 800d9ee:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d9f0:	431a      	orrs	r2, r3
 800d9f2:	0017      	movs	r7, r2
 800d9f4:	e68b      	b.n	800d70e <_strtod_l+0x76>
 800d9f6:	220a      	movs	r2, #10
 800d9f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d9fa:	434a      	muls	r2, r1
 800d9fc:	18d2      	adds	r2, r2, r3
 800d9fe:	3a30      	subs	r2, #48	@ 0x30
 800da00:	9210      	str	r2, [sp, #64]	@ 0x40
 800da02:	e7b5      	b.n	800d970 <_strtod_l+0x2d8>
 800da04:	2b6e      	cmp	r3, #110	@ 0x6e
 800da06:	d0de      	beq.n	800d9c6 <_strtod_l+0x32e>
 800da08:	e69d      	b.n	800d746 <_strtod_l+0xae>
 800da0a:	4997      	ldr	r1, [pc, #604]	@ (800dc68 <_strtod_l+0x5d0>)
 800da0c:	a81d      	add	r0, sp, #116	@ 0x74
 800da0e:	f001 fa45 	bl	800ee9c <__match>
 800da12:	2800      	cmp	r0, #0
 800da14:	d100      	bne.n	800da18 <_strtod_l+0x380>
 800da16:	e696      	b.n	800d746 <_strtod_l+0xae>
 800da18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da1a:	4994      	ldr	r1, [pc, #592]	@ (800dc6c <_strtod_l+0x5d4>)
 800da1c:	3b01      	subs	r3, #1
 800da1e:	a81d      	add	r0, sp, #116	@ 0x74
 800da20:	931d      	str	r3, [sp, #116]	@ 0x74
 800da22:	f001 fa3b 	bl	800ee9c <__match>
 800da26:	2800      	cmp	r0, #0
 800da28:	d102      	bne.n	800da30 <_strtod_l+0x398>
 800da2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da2c:	3301      	adds	r3, #1
 800da2e:	931d      	str	r3, [sp, #116]	@ 0x74
 800da30:	2600      	movs	r6, #0
 800da32:	4f8c      	ldr	r7, [pc, #560]	@ (800dc64 <_strtod_l+0x5cc>)
 800da34:	e66b      	b.n	800d70e <_strtod_l+0x76>
 800da36:	488e      	ldr	r0, [pc, #568]	@ (800dc70 <_strtod_l+0x5d8>)
 800da38:	f000 ff42 	bl	800e8c0 <nan>
 800da3c:	0006      	movs	r6, r0
 800da3e:	000f      	movs	r7, r1
 800da40:	e665      	b.n	800d70e <_strtod_l+0x76>
 800da42:	9b07      	ldr	r3, [sp, #28]
 800da44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da46:	1a9b      	subs	r3, r3, r2
 800da48:	930c      	str	r3, [sp, #48]	@ 0x30
 800da4a:	9b08      	ldr	r3, [sp, #32]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <_strtod_l+0x3bc>
 800da50:	9b06      	ldr	r3, [sp, #24]
 800da52:	9308      	str	r3, [sp, #32]
 800da54:	9c06      	ldr	r4, [sp, #24]
 800da56:	2c10      	cmp	r4, #16
 800da58:	dd00      	ble.n	800da5c <_strtod_l+0x3c4>
 800da5a:	2410      	movs	r4, #16
 800da5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800da5e:	f7f5 fc9d 	bl	800339c <__aeabi_ui2d>
 800da62:	9b06      	ldr	r3, [sp, #24]
 800da64:	0006      	movs	r6, r0
 800da66:	000f      	movs	r7, r1
 800da68:	2b09      	cmp	r3, #9
 800da6a:	dc13      	bgt.n	800da94 <_strtod_l+0x3fc>
 800da6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d100      	bne.n	800da74 <_strtod_l+0x3dc>
 800da72:	e64c      	b.n	800d70e <_strtod_l+0x76>
 800da74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da76:	2b00      	cmp	r3, #0
 800da78:	dc00      	bgt.n	800da7c <_strtod_l+0x3e4>
 800da7a:	e07e      	b.n	800db7a <_strtod_l+0x4e2>
 800da7c:	2b16      	cmp	r3, #22
 800da7e:	dc63      	bgt.n	800db48 <_strtod_l+0x4b0>
 800da80:	497c      	ldr	r1, [pc, #496]	@ (800dc74 <_strtod_l+0x5dc>)
 800da82:	00db      	lsls	r3, r3, #3
 800da84:	18c9      	adds	r1, r1, r3
 800da86:	0032      	movs	r2, r6
 800da88:	6808      	ldr	r0, [r1, #0]
 800da8a:	6849      	ldr	r1, [r1, #4]
 800da8c:	003b      	movs	r3, r7
 800da8e:	f7f4 fd95 	bl	80025bc <__aeabi_dmul>
 800da92:	e7d3      	b.n	800da3c <_strtod_l+0x3a4>
 800da94:	0022      	movs	r2, r4
 800da96:	4b77      	ldr	r3, [pc, #476]	@ (800dc74 <_strtod_l+0x5dc>)
 800da98:	3a09      	subs	r2, #9
 800da9a:	00d2      	lsls	r2, r2, #3
 800da9c:	189b      	adds	r3, r3, r2
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	f7f4 fd8b 	bl	80025bc <__aeabi_dmul>
 800daa6:	0006      	movs	r6, r0
 800daa8:	0028      	movs	r0, r5
 800daaa:	000f      	movs	r7, r1
 800daac:	f7f5 fc76 	bl	800339c <__aeabi_ui2d>
 800dab0:	000b      	movs	r3, r1
 800dab2:	0002      	movs	r2, r0
 800dab4:	0039      	movs	r1, r7
 800dab6:	0030      	movs	r0, r6
 800dab8:	f7f3 fdd8 	bl	800166c <__aeabi_dadd>
 800dabc:	9b06      	ldr	r3, [sp, #24]
 800dabe:	0006      	movs	r6, r0
 800dac0:	000f      	movs	r7, r1
 800dac2:	2b0f      	cmp	r3, #15
 800dac4:	ddd2      	ble.n	800da6c <_strtod_l+0x3d4>
 800dac6:	9b06      	ldr	r3, [sp, #24]
 800dac8:	1b1c      	subs	r4, r3, r4
 800daca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dacc:	18e4      	adds	r4, r4, r3
 800dace:	2c00      	cmp	r4, #0
 800dad0:	dc00      	bgt.n	800dad4 <_strtod_l+0x43c>
 800dad2:	e09b      	b.n	800dc0c <_strtod_l+0x574>
 800dad4:	220f      	movs	r2, #15
 800dad6:	0023      	movs	r3, r4
 800dad8:	4013      	ands	r3, r2
 800dada:	4214      	tst	r4, r2
 800dadc:	d00a      	beq.n	800daf4 <_strtod_l+0x45c>
 800dade:	4965      	ldr	r1, [pc, #404]	@ (800dc74 <_strtod_l+0x5dc>)
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	18c9      	adds	r1, r1, r3
 800dae4:	0032      	movs	r2, r6
 800dae6:	6808      	ldr	r0, [r1, #0]
 800dae8:	6849      	ldr	r1, [r1, #4]
 800daea:	003b      	movs	r3, r7
 800daec:	f7f4 fd66 	bl	80025bc <__aeabi_dmul>
 800daf0:	0006      	movs	r6, r0
 800daf2:	000f      	movs	r7, r1
 800daf4:	230f      	movs	r3, #15
 800daf6:	439c      	bics	r4, r3
 800daf8:	d073      	beq.n	800dbe2 <_strtod_l+0x54a>
 800dafa:	3326      	adds	r3, #38	@ 0x26
 800dafc:	33ff      	adds	r3, #255	@ 0xff
 800dafe:	429c      	cmp	r4, r3
 800db00:	dd4b      	ble.n	800db9a <_strtod_l+0x502>
 800db02:	2300      	movs	r3, #0
 800db04:	9306      	str	r3, [sp, #24]
 800db06:	9307      	str	r3, [sp, #28]
 800db08:	930d      	str	r3, [sp, #52]	@ 0x34
 800db0a:	9308      	str	r3, [sp, #32]
 800db0c:	2322      	movs	r3, #34	@ 0x22
 800db0e:	2600      	movs	r6, #0
 800db10:	9a05      	ldr	r2, [sp, #20]
 800db12:	4f54      	ldr	r7, [pc, #336]	@ (800dc64 <_strtod_l+0x5cc>)
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db18:	42b3      	cmp	r3, r6
 800db1a:	d100      	bne.n	800db1e <_strtod_l+0x486>
 800db1c:	e5f7      	b.n	800d70e <_strtod_l+0x76>
 800db1e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800db20:	9805      	ldr	r0, [sp, #20]
 800db22:	f001 fb7f 	bl	800f224 <_Bfree>
 800db26:	9908      	ldr	r1, [sp, #32]
 800db28:	9805      	ldr	r0, [sp, #20]
 800db2a:	f001 fb7b 	bl	800f224 <_Bfree>
 800db2e:	9907      	ldr	r1, [sp, #28]
 800db30:	9805      	ldr	r0, [sp, #20]
 800db32:	f001 fb77 	bl	800f224 <_Bfree>
 800db36:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800db38:	9805      	ldr	r0, [sp, #20]
 800db3a:	f001 fb73 	bl	800f224 <_Bfree>
 800db3e:	9906      	ldr	r1, [sp, #24]
 800db40:	9805      	ldr	r0, [sp, #20]
 800db42:	f001 fb6f 	bl	800f224 <_Bfree>
 800db46:	e5e2      	b.n	800d70e <_strtod_l+0x76>
 800db48:	2325      	movs	r3, #37	@ 0x25
 800db4a:	9a06      	ldr	r2, [sp, #24]
 800db4c:	1a9b      	subs	r3, r3, r2
 800db4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800db50:	4293      	cmp	r3, r2
 800db52:	dbb8      	blt.n	800dac6 <_strtod_l+0x42e>
 800db54:	240f      	movs	r4, #15
 800db56:	9b06      	ldr	r3, [sp, #24]
 800db58:	4d46      	ldr	r5, [pc, #280]	@ (800dc74 <_strtod_l+0x5dc>)
 800db5a:	1ae4      	subs	r4, r4, r3
 800db5c:	00e1      	lsls	r1, r4, #3
 800db5e:	1869      	adds	r1, r5, r1
 800db60:	0032      	movs	r2, r6
 800db62:	6808      	ldr	r0, [r1, #0]
 800db64:	6849      	ldr	r1, [r1, #4]
 800db66:	003b      	movs	r3, r7
 800db68:	f7f4 fd28 	bl	80025bc <__aeabi_dmul>
 800db6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db6e:	1b1c      	subs	r4, r3, r4
 800db70:	00e4      	lsls	r4, r4, #3
 800db72:	192d      	adds	r5, r5, r4
 800db74:	682a      	ldr	r2, [r5, #0]
 800db76:	686b      	ldr	r3, [r5, #4]
 800db78:	e789      	b.n	800da8e <_strtod_l+0x3f6>
 800db7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db7c:	3316      	adds	r3, #22
 800db7e:	dba2      	blt.n	800dac6 <_strtod_l+0x42e>
 800db80:	9907      	ldr	r1, [sp, #28]
 800db82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db84:	4b3b      	ldr	r3, [pc, #236]	@ (800dc74 <_strtod_l+0x5dc>)
 800db86:	1a52      	subs	r2, r2, r1
 800db88:	00d2      	lsls	r2, r2, #3
 800db8a:	189b      	adds	r3, r3, r2
 800db8c:	0030      	movs	r0, r6
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	0039      	movs	r1, r7
 800db94:	f7f4 f8ce 	bl	8001d34 <__aeabi_ddiv>
 800db98:	e750      	b.n	800da3c <_strtod_l+0x3a4>
 800db9a:	2300      	movs	r3, #0
 800db9c:	0030      	movs	r0, r6
 800db9e:	0039      	movs	r1, r7
 800dba0:	4d35      	ldr	r5, [pc, #212]	@ (800dc78 <_strtod_l+0x5e0>)
 800dba2:	1124      	asrs	r4, r4, #4
 800dba4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dba6:	2c01      	cmp	r4, #1
 800dba8:	dc1e      	bgt.n	800dbe8 <_strtod_l+0x550>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <_strtod_l+0x51a>
 800dbae:	0006      	movs	r6, r0
 800dbb0:	000f      	movs	r7, r1
 800dbb2:	4b32      	ldr	r3, [pc, #200]	@ (800dc7c <_strtod_l+0x5e4>)
 800dbb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbb6:	18ff      	adds	r7, r7, r3
 800dbb8:	4b2f      	ldr	r3, [pc, #188]	@ (800dc78 <_strtod_l+0x5e0>)
 800dbba:	00d5      	lsls	r5, r2, #3
 800dbbc:	195d      	adds	r5, r3, r5
 800dbbe:	0032      	movs	r2, r6
 800dbc0:	6828      	ldr	r0, [r5, #0]
 800dbc2:	6869      	ldr	r1, [r5, #4]
 800dbc4:	003b      	movs	r3, r7
 800dbc6:	f7f4 fcf9 	bl	80025bc <__aeabi_dmul>
 800dbca:	4b26      	ldr	r3, [pc, #152]	@ (800dc64 <_strtod_l+0x5cc>)
 800dbcc:	4a2c      	ldr	r2, [pc, #176]	@ (800dc80 <_strtod_l+0x5e8>)
 800dbce:	0006      	movs	r6, r0
 800dbd0:	400b      	ands	r3, r1
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d895      	bhi.n	800db02 <_strtod_l+0x46a>
 800dbd6:	4a2b      	ldr	r2, [pc, #172]	@ (800dc84 <_strtod_l+0x5ec>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d913      	bls.n	800dc04 <_strtod_l+0x56c>
 800dbdc:	2601      	movs	r6, #1
 800dbde:	4f2a      	ldr	r7, [pc, #168]	@ (800dc88 <_strtod_l+0x5f0>)
 800dbe0:	4276      	negs	r6, r6
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbe6:	e086      	b.n	800dcf6 <_strtod_l+0x65e>
 800dbe8:	2201      	movs	r2, #1
 800dbea:	4214      	tst	r4, r2
 800dbec:	d004      	beq.n	800dbf8 <_strtod_l+0x560>
 800dbee:	682a      	ldr	r2, [r5, #0]
 800dbf0:	686b      	ldr	r3, [r5, #4]
 800dbf2:	f7f4 fce3 	bl	80025bc <__aeabi_dmul>
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbfa:	1064      	asrs	r4, r4, #1
 800dbfc:	3201      	adds	r2, #1
 800dbfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc00:	3508      	adds	r5, #8
 800dc02:	e7d0      	b.n	800dba6 <_strtod_l+0x50e>
 800dc04:	23d4      	movs	r3, #212	@ 0xd4
 800dc06:	049b      	lsls	r3, r3, #18
 800dc08:	18cf      	adds	r7, r1, r3
 800dc0a:	e7ea      	b.n	800dbe2 <_strtod_l+0x54a>
 800dc0c:	2c00      	cmp	r4, #0
 800dc0e:	d0e8      	beq.n	800dbe2 <_strtod_l+0x54a>
 800dc10:	4264      	negs	r4, r4
 800dc12:	230f      	movs	r3, #15
 800dc14:	0022      	movs	r2, r4
 800dc16:	401a      	ands	r2, r3
 800dc18:	421c      	tst	r4, r3
 800dc1a:	d00a      	beq.n	800dc32 <_strtod_l+0x59a>
 800dc1c:	4b15      	ldr	r3, [pc, #84]	@ (800dc74 <_strtod_l+0x5dc>)
 800dc1e:	00d2      	lsls	r2, r2, #3
 800dc20:	189b      	adds	r3, r3, r2
 800dc22:	0030      	movs	r0, r6
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	0039      	movs	r1, r7
 800dc2a:	f7f4 f883 	bl	8001d34 <__aeabi_ddiv>
 800dc2e:	0006      	movs	r6, r0
 800dc30:	000f      	movs	r7, r1
 800dc32:	1124      	asrs	r4, r4, #4
 800dc34:	d0d5      	beq.n	800dbe2 <_strtod_l+0x54a>
 800dc36:	2c1f      	cmp	r4, #31
 800dc38:	dd28      	ble.n	800dc8c <_strtod_l+0x5f4>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	9306      	str	r3, [sp, #24]
 800dc3e:	9307      	str	r3, [sp, #28]
 800dc40:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc42:	9308      	str	r3, [sp, #32]
 800dc44:	2322      	movs	r3, #34	@ 0x22
 800dc46:	9a05      	ldr	r2, [sp, #20]
 800dc48:	2600      	movs	r6, #0
 800dc4a:	6013      	str	r3, [r2, #0]
 800dc4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc4e:	2700      	movs	r7, #0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d000      	beq.n	800dc56 <_strtod_l+0x5be>
 800dc54:	e763      	b.n	800db1e <_strtod_l+0x486>
 800dc56:	e55a      	b.n	800d70e <_strtod_l+0x76>
 800dc58:	00004e1f 	.word	0x00004e1f
 800dc5c:	080119e3 	.word	0x080119e3
 800dc60:	080119e8 	.word	0x080119e8
 800dc64:	7ff00000 	.word	0x7ff00000
 800dc68:	080119da 	.word	0x080119da
 800dc6c:	080119dd 	.word	0x080119dd
 800dc70:	08011d8e 	.word	0x08011d8e
 800dc74:	08011c58 	.word	0x08011c58
 800dc78:	08011c30 	.word	0x08011c30
 800dc7c:	fcb00000 	.word	0xfcb00000
 800dc80:	7ca00000 	.word	0x7ca00000
 800dc84:	7c900000 	.word	0x7c900000
 800dc88:	7fefffff 	.word	0x7fefffff
 800dc8c:	2310      	movs	r3, #16
 800dc8e:	0022      	movs	r2, r4
 800dc90:	401a      	ands	r2, r3
 800dc92:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc94:	421c      	tst	r4, r3
 800dc96:	d001      	beq.n	800dc9c <_strtod_l+0x604>
 800dc98:	335a      	adds	r3, #90	@ 0x5a
 800dc9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc9c:	0030      	movs	r0, r6
 800dc9e:	0039      	movs	r1, r7
 800dca0:	2300      	movs	r3, #0
 800dca2:	4dbf      	ldr	r5, [pc, #764]	@ (800dfa0 <_strtod_l+0x908>)
 800dca4:	2201      	movs	r2, #1
 800dca6:	4214      	tst	r4, r2
 800dca8:	d004      	beq.n	800dcb4 <_strtod_l+0x61c>
 800dcaa:	682a      	ldr	r2, [r5, #0]
 800dcac:	686b      	ldr	r3, [r5, #4]
 800dcae:	f7f4 fc85 	bl	80025bc <__aeabi_dmul>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	1064      	asrs	r4, r4, #1
 800dcb6:	3508      	adds	r5, #8
 800dcb8:	2c00      	cmp	r4, #0
 800dcba:	d1f3      	bne.n	800dca4 <_strtod_l+0x60c>
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <_strtod_l+0x62c>
 800dcc0:	0006      	movs	r6, r0
 800dcc2:	000f      	movs	r7, r1
 800dcc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00d      	beq.n	800dce6 <_strtod_l+0x64e>
 800dcca:	236b      	movs	r3, #107	@ 0x6b
 800dccc:	007a      	lsls	r2, r7, #1
 800dcce:	0d52      	lsrs	r2, r2, #21
 800dcd0:	0039      	movs	r1, r7
 800dcd2:	1a9b      	subs	r3, r3, r2
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	dd06      	ble.n	800dce6 <_strtod_l+0x64e>
 800dcd8:	2b1f      	cmp	r3, #31
 800dcda:	dd5a      	ble.n	800dd92 <_strtod_l+0x6fa>
 800dcdc:	2600      	movs	r6, #0
 800dcde:	2b34      	cmp	r3, #52	@ 0x34
 800dce0:	dd50      	ble.n	800dd84 <_strtod_l+0x6ec>
 800dce2:	27dc      	movs	r7, #220	@ 0xdc
 800dce4:	04bf      	lsls	r7, r7, #18
 800dce6:	2200      	movs	r2, #0
 800dce8:	2300      	movs	r3, #0
 800dcea:	0030      	movs	r0, r6
 800dcec:	0039      	movs	r1, r7
 800dcee:	f7f2 fbb5 	bl	800045c <__aeabi_dcmpeq>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d1a1      	bne.n	800dc3a <_strtod_l+0x5a2>
 800dcf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcf8:	9a08      	ldr	r2, [sp, #32]
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dcfe:	9b06      	ldr	r3, [sp, #24]
 800dd00:	9805      	ldr	r0, [sp, #20]
 800dd02:	f001 faf7 	bl	800f2f4 <__s2b>
 800dd06:	900d      	str	r0, [sp, #52]	@ 0x34
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d100      	bne.n	800dd0e <_strtod_l+0x676>
 800dd0c:	e6f9      	b.n	800db02 <_strtod_l+0x46a>
 800dd0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd10:	9907      	ldr	r1, [sp, #28]
 800dd12:	17da      	asrs	r2, r3, #31
 800dd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd16:	1a5b      	subs	r3, r3, r1
 800dd18:	401a      	ands	r2, r3
 800dd1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd1c:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dd1e:	43db      	mvns	r3, r3
 800dd20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dd22:	17db      	asrs	r3, r3, #31
 800dd24:	401a      	ands	r2, r3
 800dd26:	2300      	movs	r3, #0
 800dd28:	921a      	str	r2, [sp, #104]	@ 0x68
 800dd2a:	9306      	str	r3, [sp, #24]
 800dd2c:	9307      	str	r3, [sp, #28]
 800dd2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd30:	9805      	ldr	r0, [sp, #20]
 800dd32:	6859      	ldr	r1, [r3, #4]
 800dd34:	f001 fa32 	bl	800f19c <_Balloc>
 800dd38:	9008      	str	r0, [sp, #32]
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d100      	bne.n	800dd40 <_strtod_l+0x6a8>
 800dd3e:	e6e5      	b.n	800db0c <_strtod_l+0x474>
 800dd40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd42:	300c      	adds	r0, #12
 800dd44:	0019      	movs	r1, r3
 800dd46:	691a      	ldr	r2, [r3, #16]
 800dd48:	310c      	adds	r1, #12
 800dd4a:	3202      	adds	r2, #2
 800dd4c:	0092      	lsls	r2, r2, #2
 800dd4e:	f000 fdae 	bl	800e8ae <memcpy>
 800dd52:	ab20      	add	r3, sp, #128	@ 0x80
 800dd54:	9301      	str	r3, [sp, #4]
 800dd56:	ab1f      	add	r3, sp, #124	@ 0x7c
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	0032      	movs	r2, r6
 800dd5c:	003b      	movs	r3, r7
 800dd5e:	9805      	ldr	r0, [sp, #20]
 800dd60:	9610      	str	r6, [sp, #64]	@ 0x40
 800dd62:	9711      	str	r7, [sp, #68]	@ 0x44
 800dd64:	f001 fe16 	bl	800f994 <__d2b>
 800dd68:	901e      	str	r0, [sp, #120]	@ 0x78
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d100      	bne.n	800dd70 <_strtod_l+0x6d8>
 800dd6e:	e6cd      	b.n	800db0c <_strtod_l+0x474>
 800dd70:	2101      	movs	r1, #1
 800dd72:	9805      	ldr	r0, [sp, #20]
 800dd74:	f001 fb5a 	bl	800f42c <__i2b>
 800dd78:	9007      	str	r0, [sp, #28]
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d10e      	bne.n	800dd9c <_strtod_l+0x704>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	9307      	str	r3, [sp, #28]
 800dd82:	e6c3      	b.n	800db0c <_strtod_l+0x474>
 800dd84:	234b      	movs	r3, #75	@ 0x4b
 800dd86:	1a9a      	subs	r2, r3, r2
 800dd88:	3b4c      	subs	r3, #76	@ 0x4c
 800dd8a:	4093      	lsls	r3, r2
 800dd8c:	4019      	ands	r1, r3
 800dd8e:	000f      	movs	r7, r1
 800dd90:	e7a9      	b.n	800dce6 <_strtod_l+0x64e>
 800dd92:	2201      	movs	r2, #1
 800dd94:	4252      	negs	r2, r2
 800dd96:	409a      	lsls	r2, r3
 800dd98:	4016      	ands	r6, r2
 800dd9a:	e7a4      	b.n	800dce6 <_strtod_l+0x64e>
 800dd9c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dd9e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dda0:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800dda2:	1ad4      	subs	r4, r2, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	db01      	blt.n	800ddac <_strtod_l+0x714>
 800dda8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800ddaa:	195d      	adds	r5, r3, r5
 800ddac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ddb0:	1a5b      	subs	r3, r3, r1
 800ddb2:	2136      	movs	r1, #54	@ 0x36
 800ddb4:	189b      	adds	r3, r3, r2
 800ddb6:	1a8a      	subs	r2, r1, r2
 800ddb8:	497a      	ldr	r1, [pc, #488]	@ (800dfa4 <_strtod_l+0x90c>)
 800ddba:	2001      	movs	r0, #1
 800ddbc:	468c      	mov	ip, r1
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	9116      	str	r1, [sp, #88]	@ 0x58
 800ddc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ddc6:	4563      	cmp	r3, ip
 800ddc8:	da06      	bge.n	800ddd8 <_strtod_l+0x740>
 800ddca:	4661      	mov	r1, ip
 800ddcc:	1ac9      	subs	r1, r1, r3
 800ddce:	1a52      	subs	r2, r2, r1
 800ddd0:	291f      	cmp	r1, #31
 800ddd2:	dc3f      	bgt.n	800de54 <_strtod_l+0x7bc>
 800ddd4:	4088      	lsls	r0, r1
 800ddd6:	9014      	str	r0, [sp, #80]	@ 0x50
 800ddd8:	18ab      	adds	r3, r5, r2
 800ddda:	930e      	str	r3, [sp, #56]	@ 0x38
 800dddc:	18a4      	adds	r4, r4, r2
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dde2:	191c      	adds	r4, r3, r4
 800dde4:	002b      	movs	r3, r5
 800dde6:	4295      	cmp	r5, r2
 800dde8:	dd00      	ble.n	800ddec <_strtod_l+0x754>
 800ddea:	0013      	movs	r3, r2
 800ddec:	42a3      	cmp	r3, r4
 800ddee:	dd00      	ble.n	800ddf2 <_strtod_l+0x75a>
 800ddf0:	0023      	movs	r3, r4
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	dd04      	ble.n	800de00 <_strtod_l+0x768>
 800ddf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddf8:	1ae4      	subs	r4, r4, r3
 800ddfa:	1ad2      	subs	r2, r2, r3
 800ddfc:	920e      	str	r2, [sp, #56]	@ 0x38
 800ddfe:	1aed      	subs	r5, r5, r3
 800de00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de02:	2b00      	cmp	r3, #0
 800de04:	dd16      	ble.n	800de34 <_strtod_l+0x79c>
 800de06:	001a      	movs	r2, r3
 800de08:	9907      	ldr	r1, [sp, #28]
 800de0a:	9805      	ldr	r0, [sp, #20]
 800de0c:	f001 fbd8 	bl	800f5c0 <__pow5mult>
 800de10:	9007      	str	r0, [sp, #28]
 800de12:	2800      	cmp	r0, #0
 800de14:	d0b3      	beq.n	800dd7e <_strtod_l+0x6e6>
 800de16:	0001      	movs	r1, r0
 800de18:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800de1a:	9805      	ldr	r0, [sp, #20]
 800de1c:	f001 fb1e 	bl	800f45c <__multiply>
 800de20:	9013      	str	r0, [sp, #76]	@ 0x4c
 800de22:	2800      	cmp	r0, #0
 800de24:	d100      	bne.n	800de28 <_strtod_l+0x790>
 800de26:	e671      	b.n	800db0c <_strtod_l+0x474>
 800de28:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800de2a:	9805      	ldr	r0, [sp, #20]
 800de2c:	f001 f9fa 	bl	800f224 <_Bfree>
 800de30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de32:	931e      	str	r3, [sp, #120]	@ 0x78
 800de34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de36:	2b00      	cmp	r3, #0
 800de38:	dc12      	bgt.n	800de60 <_strtod_l+0x7c8>
 800de3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	dd18      	ble.n	800de72 <_strtod_l+0x7da>
 800de40:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800de42:	9908      	ldr	r1, [sp, #32]
 800de44:	9805      	ldr	r0, [sp, #20]
 800de46:	f001 fbbb 	bl	800f5c0 <__pow5mult>
 800de4a:	9008      	str	r0, [sp, #32]
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d110      	bne.n	800de72 <_strtod_l+0x7da>
 800de50:	2300      	movs	r3, #0
 800de52:	e65a      	b.n	800db0a <_strtod_l+0x472>
 800de54:	4954      	ldr	r1, [pc, #336]	@ (800dfa8 <_strtod_l+0x910>)
 800de56:	1acb      	subs	r3, r1, r3
 800de58:	0001      	movs	r1, r0
 800de5a:	4099      	lsls	r1, r3
 800de5c:	9116      	str	r1, [sp, #88]	@ 0x58
 800de5e:	e7ba      	b.n	800ddd6 <_strtod_l+0x73e>
 800de60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de62:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800de64:	9805      	ldr	r0, [sp, #20]
 800de66:	f001 fc07 	bl	800f678 <__lshift>
 800de6a:	901e      	str	r0, [sp, #120]	@ 0x78
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d1e4      	bne.n	800de3a <_strtod_l+0x7a2>
 800de70:	e64c      	b.n	800db0c <_strtod_l+0x474>
 800de72:	2c00      	cmp	r4, #0
 800de74:	dd07      	ble.n	800de86 <_strtod_l+0x7ee>
 800de76:	0022      	movs	r2, r4
 800de78:	9908      	ldr	r1, [sp, #32]
 800de7a:	9805      	ldr	r0, [sp, #20]
 800de7c:	f001 fbfc 	bl	800f678 <__lshift>
 800de80:	9008      	str	r0, [sp, #32]
 800de82:	2800      	cmp	r0, #0
 800de84:	d0e4      	beq.n	800de50 <_strtod_l+0x7b8>
 800de86:	2d00      	cmp	r5, #0
 800de88:	dd08      	ble.n	800de9c <_strtod_l+0x804>
 800de8a:	002a      	movs	r2, r5
 800de8c:	9907      	ldr	r1, [sp, #28]
 800de8e:	9805      	ldr	r0, [sp, #20]
 800de90:	f001 fbf2 	bl	800f678 <__lshift>
 800de94:	9007      	str	r0, [sp, #28]
 800de96:	2800      	cmp	r0, #0
 800de98:	d100      	bne.n	800de9c <_strtod_l+0x804>
 800de9a:	e637      	b.n	800db0c <_strtod_l+0x474>
 800de9c:	9a08      	ldr	r2, [sp, #32]
 800de9e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dea0:	9805      	ldr	r0, [sp, #20]
 800dea2:	f001 fc71 	bl	800f788 <__mdiff>
 800dea6:	9006      	str	r0, [sp, #24]
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d100      	bne.n	800deae <_strtod_l+0x816>
 800deac:	e62e      	b.n	800db0c <_strtod_l+0x474>
 800deae:	68c3      	ldr	r3, [r0, #12]
 800deb0:	9907      	ldr	r1, [sp, #28]
 800deb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800deb4:	2300      	movs	r3, #0
 800deb6:	60c3      	str	r3, [r0, #12]
 800deb8:	f001 fc4a 	bl	800f750 <__mcmp>
 800debc:	2800      	cmp	r0, #0
 800debe:	da3b      	bge.n	800df38 <_strtod_l+0x8a0>
 800dec0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dec2:	4333      	orrs	r3, r6
 800dec4:	d167      	bne.n	800df96 <_strtod_l+0x8fe>
 800dec6:	033b      	lsls	r3, r7, #12
 800dec8:	d165      	bne.n	800df96 <_strtod_l+0x8fe>
 800deca:	22d6      	movs	r2, #214	@ 0xd6
 800decc:	4b37      	ldr	r3, [pc, #220]	@ (800dfac <_strtod_l+0x914>)
 800dece:	04d2      	lsls	r2, r2, #19
 800ded0:	403b      	ands	r3, r7
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d95f      	bls.n	800df96 <_strtod_l+0x8fe>
 800ded6:	9b06      	ldr	r3, [sp, #24]
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d103      	bne.n	800dee6 <_strtod_l+0x84e>
 800dede:	9b06      	ldr	r3, [sp, #24]
 800dee0:	691b      	ldr	r3, [r3, #16]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	dd57      	ble.n	800df96 <_strtod_l+0x8fe>
 800dee6:	9906      	ldr	r1, [sp, #24]
 800dee8:	2201      	movs	r2, #1
 800deea:	9805      	ldr	r0, [sp, #20]
 800deec:	f001 fbc4 	bl	800f678 <__lshift>
 800def0:	9907      	ldr	r1, [sp, #28]
 800def2:	9006      	str	r0, [sp, #24]
 800def4:	f001 fc2c 	bl	800f750 <__mcmp>
 800def8:	2800      	cmp	r0, #0
 800defa:	dd4c      	ble.n	800df96 <_strtod_l+0x8fe>
 800defc:	4b2b      	ldr	r3, [pc, #172]	@ (800dfac <_strtod_l+0x914>)
 800defe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df00:	403b      	ands	r3, r7
 800df02:	2a00      	cmp	r2, #0
 800df04:	d074      	beq.n	800dff0 <_strtod_l+0x958>
 800df06:	22d6      	movs	r2, #214	@ 0xd6
 800df08:	04d2      	lsls	r2, r2, #19
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d870      	bhi.n	800dff0 <_strtod_l+0x958>
 800df0e:	22dc      	movs	r2, #220	@ 0xdc
 800df10:	0492      	lsls	r2, r2, #18
 800df12:	4293      	cmp	r3, r2
 800df14:	d800      	bhi.n	800df18 <_strtod_l+0x880>
 800df16:	e695      	b.n	800dc44 <_strtod_l+0x5ac>
 800df18:	0030      	movs	r0, r6
 800df1a:	0039      	movs	r1, r7
 800df1c:	4b24      	ldr	r3, [pc, #144]	@ (800dfb0 <_strtod_l+0x918>)
 800df1e:	2200      	movs	r2, #0
 800df20:	f7f4 fb4c 	bl	80025bc <__aeabi_dmul>
 800df24:	4b21      	ldr	r3, [pc, #132]	@ (800dfac <_strtod_l+0x914>)
 800df26:	0006      	movs	r6, r0
 800df28:	000f      	movs	r7, r1
 800df2a:	420b      	tst	r3, r1
 800df2c:	d000      	beq.n	800df30 <_strtod_l+0x898>
 800df2e:	e5f6      	b.n	800db1e <_strtod_l+0x486>
 800df30:	2322      	movs	r3, #34	@ 0x22
 800df32:	9a05      	ldr	r2, [sp, #20]
 800df34:	6013      	str	r3, [r2, #0]
 800df36:	e5f2      	b.n	800db1e <_strtod_l+0x486>
 800df38:	970e      	str	r7, [sp, #56]	@ 0x38
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d175      	bne.n	800e02a <_strtod_l+0x992>
 800df3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df40:	033b      	lsls	r3, r7, #12
 800df42:	0b1b      	lsrs	r3, r3, #12
 800df44:	2a00      	cmp	r2, #0
 800df46:	d039      	beq.n	800dfbc <_strtod_l+0x924>
 800df48:	4a1a      	ldr	r2, [pc, #104]	@ (800dfb4 <_strtod_l+0x91c>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d138      	bne.n	800dfc0 <_strtod_l+0x928>
 800df4e:	2101      	movs	r1, #1
 800df50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df52:	4249      	negs	r1, r1
 800df54:	0032      	movs	r2, r6
 800df56:	0008      	movs	r0, r1
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00b      	beq.n	800df74 <_strtod_l+0x8dc>
 800df5c:	24d4      	movs	r4, #212	@ 0xd4
 800df5e:	4b13      	ldr	r3, [pc, #76]	@ (800dfac <_strtod_l+0x914>)
 800df60:	0008      	movs	r0, r1
 800df62:	403b      	ands	r3, r7
 800df64:	04e4      	lsls	r4, r4, #19
 800df66:	42a3      	cmp	r3, r4
 800df68:	d804      	bhi.n	800df74 <_strtod_l+0x8dc>
 800df6a:	306c      	adds	r0, #108	@ 0x6c
 800df6c:	0d1b      	lsrs	r3, r3, #20
 800df6e:	1ac3      	subs	r3, r0, r3
 800df70:	4099      	lsls	r1, r3
 800df72:	0008      	movs	r0, r1
 800df74:	4282      	cmp	r2, r0
 800df76:	d123      	bne.n	800dfc0 <_strtod_l+0x928>
 800df78:	4b0f      	ldr	r3, [pc, #60]	@ (800dfb8 <_strtod_l+0x920>)
 800df7a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800df7c:	4299      	cmp	r1, r3
 800df7e:	d102      	bne.n	800df86 <_strtod_l+0x8ee>
 800df80:	3201      	adds	r2, #1
 800df82:	d100      	bne.n	800df86 <_strtod_l+0x8ee>
 800df84:	e5c2      	b.n	800db0c <_strtod_l+0x474>
 800df86:	4b09      	ldr	r3, [pc, #36]	@ (800dfac <_strtod_l+0x914>)
 800df88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df8a:	2600      	movs	r6, #0
 800df8c:	401a      	ands	r2, r3
 800df8e:	0013      	movs	r3, r2
 800df90:	2280      	movs	r2, #128	@ 0x80
 800df92:	0352      	lsls	r2, r2, #13
 800df94:	189f      	adds	r7, r3, r2
 800df96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1bd      	bne.n	800df18 <_strtod_l+0x880>
 800df9c:	e5bf      	b.n	800db1e <_strtod_l+0x486>
 800df9e:	46c0      	nop			@ (mov r8, r8)
 800dfa0:	08011a10 	.word	0x08011a10
 800dfa4:	fffffc02 	.word	0xfffffc02
 800dfa8:	fffffbe2 	.word	0xfffffbe2
 800dfac:	7ff00000 	.word	0x7ff00000
 800dfb0:	39500000 	.word	0x39500000
 800dfb4:	000fffff 	.word	0x000fffff
 800dfb8:	7fefffff 	.word	0x7fefffff
 800dfbc:	4333      	orrs	r3, r6
 800dfbe:	d09d      	beq.n	800defc <_strtod_l+0x864>
 800dfc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d01c      	beq.n	800e000 <_strtod_l+0x968>
 800dfc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfc8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dfca:	4213      	tst	r3, r2
 800dfcc:	d0e3      	beq.n	800df96 <_strtod_l+0x8fe>
 800dfce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfd0:	0030      	movs	r0, r6
 800dfd2:	0039      	movs	r1, r7
 800dfd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d016      	beq.n	800e008 <_strtod_l+0x970>
 800dfda:	f7ff fb45 	bl	800d668 <sulp>
 800dfde:	0002      	movs	r2, r0
 800dfe0:	000b      	movs	r3, r1
 800dfe2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dfe4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800dfe6:	f7f3 fb41 	bl	800166c <__aeabi_dadd>
 800dfea:	0006      	movs	r6, r0
 800dfec:	000f      	movs	r7, r1
 800dfee:	e7d2      	b.n	800df96 <_strtod_l+0x8fe>
 800dff0:	2601      	movs	r6, #1
 800dff2:	4a92      	ldr	r2, [pc, #584]	@ (800e23c <_strtod_l+0xba4>)
 800dff4:	4276      	negs	r6, r6
 800dff6:	189b      	adds	r3, r3, r2
 800dff8:	4a91      	ldr	r2, [pc, #580]	@ (800e240 <_strtod_l+0xba8>)
 800dffa:	431a      	orrs	r2, r3
 800dffc:	0017      	movs	r7, r2
 800dffe:	e7ca      	b.n	800df96 <_strtod_l+0x8fe>
 800e000:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e002:	4233      	tst	r3, r6
 800e004:	d0c7      	beq.n	800df96 <_strtod_l+0x8fe>
 800e006:	e7e2      	b.n	800dfce <_strtod_l+0x936>
 800e008:	f7ff fb2e 	bl	800d668 <sulp>
 800e00c:	0002      	movs	r2, r0
 800e00e:	000b      	movs	r3, r1
 800e010:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e012:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e014:	f7f4 fd9a 	bl	8002b4c <__aeabi_dsub>
 800e018:	2200      	movs	r2, #0
 800e01a:	2300      	movs	r3, #0
 800e01c:	0006      	movs	r6, r0
 800e01e:	000f      	movs	r7, r1
 800e020:	f7f2 fa1c 	bl	800045c <__aeabi_dcmpeq>
 800e024:	2800      	cmp	r0, #0
 800e026:	d0b6      	beq.n	800df96 <_strtod_l+0x8fe>
 800e028:	e60c      	b.n	800dc44 <_strtod_l+0x5ac>
 800e02a:	9907      	ldr	r1, [sp, #28]
 800e02c:	9806      	ldr	r0, [sp, #24]
 800e02e:	f001 fd11 	bl	800fa54 <__ratio>
 800e032:	2380      	movs	r3, #128	@ 0x80
 800e034:	2200      	movs	r2, #0
 800e036:	05db      	lsls	r3, r3, #23
 800e038:	0004      	movs	r4, r0
 800e03a:	000d      	movs	r5, r1
 800e03c:	f7f2 fa1e 	bl	800047c <__aeabi_dcmple>
 800e040:	2800      	cmp	r0, #0
 800e042:	d06c      	beq.n	800e11e <_strtod_l+0xa86>
 800e044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e046:	2b00      	cmp	r3, #0
 800e048:	d177      	bne.n	800e13a <_strtod_l+0xaa2>
 800e04a:	2e00      	cmp	r6, #0
 800e04c:	d157      	bne.n	800e0fe <_strtod_l+0xa66>
 800e04e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e050:	031b      	lsls	r3, r3, #12
 800e052:	d15a      	bne.n	800e10a <_strtod_l+0xa72>
 800e054:	2200      	movs	r2, #0
 800e056:	0020      	movs	r0, r4
 800e058:	0029      	movs	r1, r5
 800e05a:	4b7a      	ldr	r3, [pc, #488]	@ (800e244 <_strtod_l+0xbac>)
 800e05c:	f7f2 fa04 	bl	8000468 <__aeabi_dcmplt>
 800e060:	2800      	cmp	r0, #0
 800e062:	d159      	bne.n	800e118 <_strtod_l+0xa80>
 800e064:	0020      	movs	r0, r4
 800e066:	0029      	movs	r1, r5
 800e068:	2200      	movs	r2, #0
 800e06a:	4b77      	ldr	r3, [pc, #476]	@ (800e248 <_strtod_l+0xbb0>)
 800e06c:	f7f4 faa6 	bl	80025bc <__aeabi_dmul>
 800e070:	0004      	movs	r4, r0
 800e072:	000d      	movs	r5, r1
 800e074:	2380      	movs	r3, #128	@ 0x80
 800e076:	061b      	lsls	r3, r3, #24
 800e078:	18eb      	adds	r3, r5, r3
 800e07a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e07c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e07e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e080:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e082:	9214      	str	r2, [sp, #80]	@ 0x50
 800e084:	9315      	str	r3, [sp, #84]	@ 0x54
 800e086:	4a71      	ldr	r2, [pc, #452]	@ (800e24c <_strtod_l+0xbb4>)
 800e088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e08a:	4013      	ands	r3, r2
 800e08c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e08e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e090:	4b6f      	ldr	r3, [pc, #444]	@ (800e250 <_strtod_l+0xbb8>)
 800e092:	429a      	cmp	r2, r3
 800e094:	d000      	beq.n	800e098 <_strtod_l+0xa00>
 800e096:	e087      	b.n	800e1a8 <_strtod_l+0xb10>
 800e098:	4a6e      	ldr	r2, [pc, #440]	@ (800e254 <_strtod_l+0xbbc>)
 800e09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e09c:	4694      	mov	ip, r2
 800e09e:	4463      	add	r3, ip
 800e0a0:	001f      	movs	r7, r3
 800e0a2:	0030      	movs	r0, r6
 800e0a4:	0019      	movs	r1, r3
 800e0a6:	f001 fc09 	bl	800f8bc <__ulp>
 800e0aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0ae:	f7f4 fa85 	bl	80025bc <__aeabi_dmul>
 800e0b2:	0032      	movs	r2, r6
 800e0b4:	003b      	movs	r3, r7
 800e0b6:	f7f3 fad9 	bl	800166c <__aeabi_dadd>
 800e0ba:	4a64      	ldr	r2, [pc, #400]	@ (800e24c <_strtod_l+0xbb4>)
 800e0bc:	4b66      	ldr	r3, [pc, #408]	@ (800e258 <_strtod_l+0xbc0>)
 800e0be:	0006      	movs	r6, r0
 800e0c0:	400a      	ands	r2, r1
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d940      	bls.n	800e148 <_strtod_l+0xab0>
 800e0c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e0c8:	4a64      	ldr	r2, [pc, #400]	@ (800e25c <_strtod_l+0xbc4>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d103      	bne.n	800e0d6 <_strtod_l+0xa3e>
 800e0ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	d100      	bne.n	800e0d6 <_strtod_l+0xa3e>
 800e0d4:	e51a      	b.n	800db0c <_strtod_l+0x474>
 800e0d6:	2601      	movs	r6, #1
 800e0d8:	4f60      	ldr	r7, [pc, #384]	@ (800e25c <_strtod_l+0xbc4>)
 800e0da:	4276      	negs	r6, r6
 800e0dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e0de:	9805      	ldr	r0, [sp, #20]
 800e0e0:	f001 f8a0 	bl	800f224 <_Bfree>
 800e0e4:	9908      	ldr	r1, [sp, #32]
 800e0e6:	9805      	ldr	r0, [sp, #20]
 800e0e8:	f001 f89c 	bl	800f224 <_Bfree>
 800e0ec:	9907      	ldr	r1, [sp, #28]
 800e0ee:	9805      	ldr	r0, [sp, #20]
 800e0f0:	f001 f898 	bl	800f224 <_Bfree>
 800e0f4:	9906      	ldr	r1, [sp, #24]
 800e0f6:	9805      	ldr	r0, [sp, #20]
 800e0f8:	f001 f894 	bl	800f224 <_Bfree>
 800e0fc:	e617      	b.n	800dd2e <_strtod_l+0x696>
 800e0fe:	2e01      	cmp	r6, #1
 800e100:	d103      	bne.n	800e10a <_strtod_l+0xa72>
 800e102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e104:	2b00      	cmp	r3, #0
 800e106:	d100      	bne.n	800e10a <_strtod_l+0xa72>
 800e108:	e59c      	b.n	800dc44 <_strtod_l+0x5ac>
 800e10a:	2300      	movs	r3, #0
 800e10c:	4c54      	ldr	r4, [pc, #336]	@ (800e260 <_strtod_l+0xbc8>)
 800e10e:	4d4d      	ldr	r5, [pc, #308]	@ (800e244 <_strtod_l+0xbac>)
 800e110:	930a      	str	r3, [sp, #40]	@ 0x28
 800e112:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e114:	2400      	movs	r4, #0
 800e116:	e7b2      	b.n	800e07e <_strtod_l+0x9e6>
 800e118:	2400      	movs	r4, #0
 800e11a:	4d4b      	ldr	r5, [pc, #300]	@ (800e248 <_strtod_l+0xbb0>)
 800e11c:	e7aa      	b.n	800e074 <_strtod_l+0x9dc>
 800e11e:	0020      	movs	r0, r4
 800e120:	0029      	movs	r1, r5
 800e122:	4b49      	ldr	r3, [pc, #292]	@ (800e248 <_strtod_l+0xbb0>)
 800e124:	2200      	movs	r2, #0
 800e126:	f7f4 fa49 	bl	80025bc <__aeabi_dmul>
 800e12a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e12c:	0004      	movs	r4, r0
 800e12e:	000d      	movs	r5, r1
 800e130:	2b00      	cmp	r3, #0
 800e132:	d09f      	beq.n	800e074 <_strtod_l+0x9dc>
 800e134:	940a      	str	r4, [sp, #40]	@ 0x28
 800e136:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e138:	e7a1      	b.n	800e07e <_strtod_l+0x9e6>
 800e13a:	2300      	movs	r3, #0
 800e13c:	4c41      	ldr	r4, [pc, #260]	@ (800e244 <_strtod_l+0xbac>)
 800e13e:	0025      	movs	r5, r4
 800e140:	930a      	str	r3, [sp, #40]	@ 0x28
 800e142:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e144:	001c      	movs	r4, r3
 800e146:	e79a      	b.n	800e07e <_strtod_l+0x9e6>
 800e148:	23d4      	movs	r3, #212	@ 0xd4
 800e14a:	049b      	lsls	r3, r3, #18
 800e14c:	18cf      	adds	r7, r1, r3
 800e14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e150:	9710      	str	r7, [sp, #64]	@ 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1c2      	bne.n	800e0dc <_strtod_l+0xa44>
 800e156:	4b3d      	ldr	r3, [pc, #244]	@ (800e24c <_strtod_l+0xbb4>)
 800e158:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e15a:	403b      	ands	r3, r7
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d1bd      	bne.n	800e0dc <_strtod_l+0xa44>
 800e160:	0020      	movs	r0, r4
 800e162:	0029      	movs	r1, r5
 800e164:	f7f2 fa66 	bl	8000634 <__aeabi_d2lz>
 800e168:	f7f2 fa9e 	bl	80006a8 <__aeabi_l2d>
 800e16c:	0002      	movs	r2, r0
 800e16e:	000b      	movs	r3, r1
 800e170:	0020      	movs	r0, r4
 800e172:	0029      	movs	r1, r5
 800e174:	f7f4 fcea 	bl	8002b4c <__aeabi_dsub>
 800e178:	033c      	lsls	r4, r7, #12
 800e17a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e17c:	0b24      	lsrs	r4, r4, #12
 800e17e:	4334      	orrs	r4, r6
 800e180:	900e      	str	r0, [sp, #56]	@ 0x38
 800e182:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e184:	4a37      	ldr	r2, [pc, #220]	@ (800e264 <_strtod_l+0xbcc>)
 800e186:	431c      	orrs	r4, r3
 800e188:	d052      	beq.n	800e230 <_strtod_l+0xb98>
 800e18a:	4b37      	ldr	r3, [pc, #220]	@ (800e268 <_strtod_l+0xbd0>)
 800e18c:	f7f2 f96c 	bl	8000468 <__aeabi_dcmplt>
 800e190:	2800      	cmp	r0, #0
 800e192:	d000      	beq.n	800e196 <_strtod_l+0xafe>
 800e194:	e4c3      	b.n	800db1e <_strtod_l+0x486>
 800e196:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e198:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e19a:	4a34      	ldr	r2, [pc, #208]	@ (800e26c <_strtod_l+0xbd4>)
 800e19c:	4b2a      	ldr	r3, [pc, #168]	@ (800e248 <_strtod_l+0xbb0>)
 800e19e:	f7f2 f977 	bl	8000490 <__aeabi_dcmpgt>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d09a      	beq.n	800e0dc <_strtod_l+0xa44>
 800e1a6:	e4ba      	b.n	800db1e <_strtod_l+0x486>
 800e1a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d02a      	beq.n	800e204 <_strtod_l+0xb6c>
 800e1ae:	23d4      	movs	r3, #212	@ 0xd4
 800e1b0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e1b2:	04db      	lsls	r3, r3, #19
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d825      	bhi.n	800e204 <_strtod_l+0xb6c>
 800e1b8:	0020      	movs	r0, r4
 800e1ba:	0029      	movs	r1, r5
 800e1bc:	4a2c      	ldr	r2, [pc, #176]	@ (800e270 <_strtod_l+0xbd8>)
 800e1be:	4b2d      	ldr	r3, [pc, #180]	@ (800e274 <_strtod_l+0xbdc>)
 800e1c0:	f7f2 f95c 	bl	800047c <__aeabi_dcmple>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d016      	beq.n	800e1f6 <_strtod_l+0xb5e>
 800e1c8:	0020      	movs	r0, r4
 800e1ca:	0029      	movs	r1, r5
 800e1cc:	f7f2 fa14 	bl	80005f8 <__aeabi_d2uiz>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d100      	bne.n	800e1d6 <_strtod_l+0xb3e>
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	f7f5 f8e1 	bl	800339c <__aeabi_ui2d>
 800e1da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e1dc:	0004      	movs	r4, r0
 800e1de:	000d      	movs	r5, r1
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d122      	bne.n	800e22a <_strtod_l+0xb92>
 800e1e4:	2380      	movs	r3, #128	@ 0x80
 800e1e6:	061b      	lsls	r3, r3, #24
 800e1e8:	18cb      	adds	r3, r1, r3
 800e1ea:	9018      	str	r0, [sp, #96]	@ 0x60
 800e1ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800e1ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e1f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1f2:	9214      	str	r2, [sp, #80]	@ 0x50
 800e1f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e1f6:	22d6      	movs	r2, #214	@ 0xd6
 800e1f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e1fa:	04d2      	lsls	r2, r2, #19
 800e1fc:	189b      	adds	r3, r3, r2
 800e1fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e200:	1a9b      	subs	r3, r3, r2
 800e202:	9315      	str	r3, [sp, #84]	@ 0x54
 800e204:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e206:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e208:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e20a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e20c:	f001 fb56 	bl	800f8bc <__ulp>
 800e210:	0002      	movs	r2, r0
 800e212:	000b      	movs	r3, r1
 800e214:	0030      	movs	r0, r6
 800e216:	0039      	movs	r1, r7
 800e218:	f7f4 f9d0 	bl	80025bc <__aeabi_dmul>
 800e21c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e21e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e220:	f7f3 fa24 	bl	800166c <__aeabi_dadd>
 800e224:	0006      	movs	r6, r0
 800e226:	000f      	movs	r7, r1
 800e228:	e791      	b.n	800e14e <_strtod_l+0xab6>
 800e22a:	9418      	str	r4, [sp, #96]	@ 0x60
 800e22c:	9519      	str	r5, [sp, #100]	@ 0x64
 800e22e:	e7de      	b.n	800e1ee <_strtod_l+0xb56>
 800e230:	4b11      	ldr	r3, [pc, #68]	@ (800e278 <_strtod_l+0xbe0>)
 800e232:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e234:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e236:	f7f2 f917 	bl	8000468 <__aeabi_dcmplt>
 800e23a:	e7b2      	b.n	800e1a2 <_strtod_l+0xb0a>
 800e23c:	fff00000 	.word	0xfff00000
 800e240:	000fffff 	.word	0x000fffff
 800e244:	3ff00000 	.word	0x3ff00000
 800e248:	3fe00000 	.word	0x3fe00000
 800e24c:	7ff00000 	.word	0x7ff00000
 800e250:	7fe00000 	.word	0x7fe00000
 800e254:	fcb00000 	.word	0xfcb00000
 800e258:	7c9fffff 	.word	0x7c9fffff
 800e25c:	7fefffff 	.word	0x7fefffff
 800e260:	bff00000 	.word	0xbff00000
 800e264:	94a03595 	.word	0x94a03595
 800e268:	3fdfffff 	.word	0x3fdfffff
 800e26c:	35afe535 	.word	0x35afe535
 800e270:	ffc00000 	.word	0xffc00000
 800e274:	41dfffff 	.word	0x41dfffff
 800e278:	3fcfffff 	.word	0x3fcfffff

0800e27c <strtod>:
 800e27c:	b510      	push	{r4, lr}
 800e27e:	4c04      	ldr	r4, [pc, #16]	@ (800e290 <strtod+0x14>)
 800e280:	000a      	movs	r2, r1
 800e282:	0001      	movs	r1, r0
 800e284:	4b03      	ldr	r3, [pc, #12]	@ (800e294 <strtod+0x18>)
 800e286:	6820      	ldr	r0, [r4, #0]
 800e288:	f7ff fa06 	bl	800d698 <_strtod_l>
 800e28c:	bd10      	pop	{r4, pc}
 800e28e:	46c0      	nop			@ (mov r8, r8)
 800e290:	20000b2c 	.word	0x20000b2c
 800e294:	200009c0 	.word	0x200009c0

0800e298 <_strtol_l.constprop.0>:
 800e298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29a:	b085      	sub	sp, #20
 800e29c:	0017      	movs	r7, r2
 800e29e:	001e      	movs	r6, r3
 800e2a0:	9003      	str	r0, [sp, #12]
 800e2a2:	9101      	str	r1, [sp, #4]
 800e2a4:	2b24      	cmp	r3, #36	@ 0x24
 800e2a6:	d844      	bhi.n	800e332 <_strtol_l.constprop.0+0x9a>
 800e2a8:	000c      	movs	r4, r1
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d041      	beq.n	800e332 <_strtol_l.constprop.0+0x9a>
 800e2ae:	4b3d      	ldr	r3, [pc, #244]	@ (800e3a4 <_strtol_l.constprop.0+0x10c>)
 800e2b0:	2208      	movs	r2, #8
 800e2b2:	469c      	mov	ip, r3
 800e2b4:	0023      	movs	r3, r4
 800e2b6:	4661      	mov	r1, ip
 800e2b8:	781d      	ldrb	r5, [r3, #0]
 800e2ba:	3401      	adds	r4, #1
 800e2bc:	5d48      	ldrb	r0, [r1, r5]
 800e2be:	0001      	movs	r1, r0
 800e2c0:	4011      	ands	r1, r2
 800e2c2:	4210      	tst	r0, r2
 800e2c4:	d1f6      	bne.n	800e2b4 <_strtol_l.constprop.0+0x1c>
 800e2c6:	2d2d      	cmp	r5, #45	@ 0x2d
 800e2c8:	d13a      	bne.n	800e340 <_strtol_l.constprop.0+0xa8>
 800e2ca:	7825      	ldrb	r5, [r4, #0]
 800e2cc:	1c9c      	adds	r4, r3, #2
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	2210      	movs	r2, #16
 800e2d4:	0033      	movs	r3, r6
 800e2d6:	4393      	bics	r3, r2
 800e2d8:	d109      	bne.n	800e2ee <_strtol_l.constprop.0+0x56>
 800e2da:	2d30      	cmp	r5, #48	@ 0x30
 800e2dc:	d136      	bne.n	800e34c <_strtol_l.constprop.0+0xb4>
 800e2de:	2120      	movs	r1, #32
 800e2e0:	7823      	ldrb	r3, [r4, #0]
 800e2e2:	438b      	bics	r3, r1
 800e2e4:	2b58      	cmp	r3, #88	@ 0x58
 800e2e6:	d131      	bne.n	800e34c <_strtol_l.constprop.0+0xb4>
 800e2e8:	0016      	movs	r6, r2
 800e2ea:	7865      	ldrb	r5, [r4, #1]
 800e2ec:	3402      	adds	r4, #2
 800e2ee:	4a2e      	ldr	r2, [pc, #184]	@ (800e3a8 <_strtol_l.constprop.0+0x110>)
 800e2f0:	9b00      	ldr	r3, [sp, #0]
 800e2f2:	4694      	mov	ip, r2
 800e2f4:	4463      	add	r3, ip
 800e2f6:	0031      	movs	r1, r6
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	9302      	str	r3, [sp, #8]
 800e2fc:	f7f1 ffae 	bl	800025c <__aeabi_uidivmod>
 800e300:	2200      	movs	r2, #0
 800e302:	4684      	mov	ip, r0
 800e304:	0010      	movs	r0, r2
 800e306:	002b      	movs	r3, r5
 800e308:	3b30      	subs	r3, #48	@ 0x30
 800e30a:	2b09      	cmp	r3, #9
 800e30c:	d825      	bhi.n	800e35a <_strtol_l.constprop.0+0xc2>
 800e30e:	001d      	movs	r5, r3
 800e310:	42ae      	cmp	r6, r5
 800e312:	dd31      	ble.n	800e378 <_strtol_l.constprop.0+0xe0>
 800e314:	1c53      	adds	r3, r2, #1
 800e316:	d009      	beq.n	800e32c <_strtol_l.constprop.0+0x94>
 800e318:	2201      	movs	r2, #1
 800e31a:	4252      	negs	r2, r2
 800e31c:	4584      	cmp	ip, r0
 800e31e:	d305      	bcc.n	800e32c <_strtol_l.constprop.0+0x94>
 800e320:	d101      	bne.n	800e326 <_strtol_l.constprop.0+0x8e>
 800e322:	42a9      	cmp	r1, r5
 800e324:	db25      	blt.n	800e372 <_strtol_l.constprop.0+0xda>
 800e326:	2201      	movs	r2, #1
 800e328:	4370      	muls	r0, r6
 800e32a:	1828      	adds	r0, r5, r0
 800e32c:	7825      	ldrb	r5, [r4, #0]
 800e32e:	3401      	adds	r4, #1
 800e330:	e7e9      	b.n	800e306 <_strtol_l.constprop.0+0x6e>
 800e332:	f000 fa8f 	bl	800e854 <__errno>
 800e336:	2316      	movs	r3, #22
 800e338:	6003      	str	r3, [r0, #0]
 800e33a:	2000      	movs	r0, #0
 800e33c:	b005      	add	sp, #20
 800e33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e340:	9100      	str	r1, [sp, #0]
 800e342:	2d2b      	cmp	r5, #43	@ 0x2b
 800e344:	d1c5      	bne.n	800e2d2 <_strtol_l.constprop.0+0x3a>
 800e346:	7825      	ldrb	r5, [r4, #0]
 800e348:	1c9c      	adds	r4, r3, #2
 800e34a:	e7c2      	b.n	800e2d2 <_strtol_l.constprop.0+0x3a>
 800e34c:	2e00      	cmp	r6, #0
 800e34e:	d1ce      	bne.n	800e2ee <_strtol_l.constprop.0+0x56>
 800e350:	3608      	adds	r6, #8
 800e352:	2d30      	cmp	r5, #48	@ 0x30
 800e354:	d0cb      	beq.n	800e2ee <_strtol_l.constprop.0+0x56>
 800e356:	3602      	adds	r6, #2
 800e358:	e7c9      	b.n	800e2ee <_strtol_l.constprop.0+0x56>
 800e35a:	002b      	movs	r3, r5
 800e35c:	3b41      	subs	r3, #65	@ 0x41
 800e35e:	2b19      	cmp	r3, #25
 800e360:	d801      	bhi.n	800e366 <_strtol_l.constprop.0+0xce>
 800e362:	3d37      	subs	r5, #55	@ 0x37
 800e364:	e7d4      	b.n	800e310 <_strtol_l.constprop.0+0x78>
 800e366:	002b      	movs	r3, r5
 800e368:	3b61      	subs	r3, #97	@ 0x61
 800e36a:	2b19      	cmp	r3, #25
 800e36c:	d804      	bhi.n	800e378 <_strtol_l.constprop.0+0xe0>
 800e36e:	3d57      	subs	r5, #87	@ 0x57
 800e370:	e7ce      	b.n	800e310 <_strtol_l.constprop.0+0x78>
 800e372:	2201      	movs	r2, #1
 800e374:	4252      	negs	r2, r2
 800e376:	e7d9      	b.n	800e32c <_strtol_l.constprop.0+0x94>
 800e378:	1c53      	adds	r3, r2, #1
 800e37a:	d108      	bne.n	800e38e <_strtol_l.constprop.0+0xf6>
 800e37c:	2322      	movs	r3, #34	@ 0x22
 800e37e:	9a03      	ldr	r2, [sp, #12]
 800e380:	9802      	ldr	r0, [sp, #8]
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	2f00      	cmp	r7, #0
 800e386:	d0d9      	beq.n	800e33c <_strtol_l.constprop.0+0xa4>
 800e388:	1e63      	subs	r3, r4, #1
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	e007      	b.n	800e39e <_strtol_l.constprop.0+0x106>
 800e38e:	9b00      	ldr	r3, [sp, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d000      	beq.n	800e396 <_strtol_l.constprop.0+0xfe>
 800e394:	4240      	negs	r0, r0
 800e396:	2f00      	cmp	r7, #0
 800e398:	d0d0      	beq.n	800e33c <_strtol_l.constprop.0+0xa4>
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	d1f4      	bne.n	800e388 <_strtol_l.constprop.0+0xf0>
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	603b      	str	r3, [r7, #0]
 800e3a2:	e7cb      	b.n	800e33c <_strtol_l.constprop.0+0xa4>
 800e3a4:	08011a39 	.word	0x08011a39
 800e3a8:	7fffffff 	.word	0x7fffffff

0800e3ac <strtol>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	4c04      	ldr	r4, [pc, #16]	@ (800e3c0 <strtol+0x14>)
 800e3b0:	0013      	movs	r3, r2
 800e3b2:	000a      	movs	r2, r1
 800e3b4:	0001      	movs	r1, r0
 800e3b6:	6820      	ldr	r0, [r4, #0]
 800e3b8:	f7ff ff6e 	bl	800e298 <_strtol_l.constprop.0>
 800e3bc:	bd10      	pop	{r4, pc}
 800e3be:	46c0      	nop			@ (mov r8, r8)
 800e3c0:	20000b2c 	.word	0x20000b2c

0800e3c4 <_strtoll_l.constprop.0>:
 800e3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3c6:	b08d      	sub	sp, #52	@ 0x34
 800e3c8:	000c      	movs	r4, r1
 800e3ca:	9102      	str	r1, [sp, #8]
 800e3cc:	001e      	movs	r6, r3
 800e3ce:	2108      	movs	r1, #8
 800e3d0:	4f4c      	ldr	r7, [pc, #304]	@ (800e504 <_strtoll_l.constprop.0+0x140>)
 800e3d2:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3d4:	9203      	str	r2, [sp, #12]
 800e3d6:	0023      	movs	r3, r4
 800e3d8:	781a      	ldrb	r2, [r3, #0]
 800e3da:	3401      	adds	r4, #1
 800e3dc:	5cbd      	ldrb	r5, [r7, r2]
 800e3de:	0028      	movs	r0, r5
 800e3e0:	4008      	ands	r0, r1
 800e3e2:	420d      	tst	r5, r1
 800e3e4:	d1f7      	bne.n	800e3d6 <_strtoll_l.constprop.0+0x12>
 800e3e6:	0015      	movs	r5, r2
 800e3e8:	2a2d      	cmp	r2, #45	@ 0x2d
 800e3ea:	d14f      	bne.n	800e48c <_strtoll_l.constprop.0+0xc8>
 800e3ec:	7825      	ldrb	r5, [r4, #0]
 800e3ee:	1c9c      	adds	r4, r3, #2
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	9301      	str	r3, [sp, #4]
 800e3f4:	2210      	movs	r2, #16
 800e3f6:	0033      	movs	r3, r6
 800e3f8:	4393      	bics	r3, r2
 800e3fa:	d109      	bne.n	800e410 <_strtoll_l.constprop.0+0x4c>
 800e3fc:	2d30      	cmp	r5, #48	@ 0x30
 800e3fe:	d14b      	bne.n	800e498 <_strtoll_l.constprop.0+0xd4>
 800e400:	2120      	movs	r1, #32
 800e402:	7823      	ldrb	r3, [r4, #0]
 800e404:	438b      	bics	r3, r1
 800e406:	2b58      	cmp	r3, #88	@ 0x58
 800e408:	d146      	bne.n	800e498 <_strtoll_l.constprop.0+0xd4>
 800e40a:	0016      	movs	r6, r2
 800e40c:	7865      	ldrb	r5, [r4, #1]
 800e40e:	3402      	adds	r4, #2
 800e410:	2001      	movs	r0, #1
 800e412:	2300      	movs	r3, #0
 800e414:	493c      	ldr	r1, [pc, #240]	@ (800e508 <_strtoll_l.constprop.0+0x144>)
 800e416:	9a01      	ldr	r2, [sp, #4]
 800e418:	4240      	negs	r0, r0
 800e41a:	1812      	adds	r2, r2, r0
 800e41c:	414b      	adcs	r3, r1
 800e41e:	9204      	str	r2, [sp, #16]
 800e420:	9305      	str	r3, [sp, #20]
 800e422:	9804      	ldr	r0, [sp, #16]
 800e424:	9905      	ldr	r1, [sp, #20]
 800e426:	17f3      	asrs	r3, r6, #31
 800e428:	0032      	movs	r2, r6
 800e42a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e42c:	f7f2 f87e 	bl	800052c <__aeabi_uldivmod>
 800e430:	2300      	movs	r3, #0
 800e432:	000f      	movs	r7, r1
 800e434:	9008      	str	r0, [sp, #32]
 800e436:	2100      	movs	r1, #0
 800e438:	2000      	movs	r0, #0
 800e43a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e43c:	002a      	movs	r2, r5
 800e43e:	3a30      	subs	r2, #48	@ 0x30
 800e440:	2a09      	cmp	r2, #9
 800e442:	d830      	bhi.n	800e4a6 <_strtoll_l.constprop.0+0xe2>
 800e444:	0015      	movs	r5, r2
 800e446:	42ae      	cmp	r6, r5
 800e448:	dd3c      	ble.n	800e4c4 <_strtoll_l.constprop.0+0x100>
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	d01b      	beq.n	800e486 <_strtoll_l.constprop.0+0xc2>
 800e44e:	42b9      	cmp	r1, r7
 800e450:	d835      	bhi.n	800e4be <_strtoll_l.constprop.0+0xfa>
 800e452:	d102      	bne.n	800e45a <_strtoll_l.constprop.0+0x96>
 800e454:	9b08      	ldr	r3, [sp, #32]
 800e456:	4298      	cmp	r0, r3
 800e458:	d831      	bhi.n	800e4be <_strtoll_l.constprop.0+0xfa>
 800e45a:	9b08      	ldr	r3, [sp, #32]
 800e45c:	4283      	cmp	r3, r0
 800e45e:	d104      	bne.n	800e46a <_strtoll_l.constprop.0+0xa6>
 800e460:	428f      	cmp	r7, r1
 800e462:	d102      	bne.n	800e46a <_strtoll_l.constprop.0+0xa6>
 800e464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e466:	42ab      	cmp	r3, r5
 800e468:	db29      	blt.n	800e4be <_strtoll_l.constprop.0+0xfa>
 800e46a:	0002      	movs	r2, r0
 800e46c:	000b      	movs	r3, r1
 800e46e:	0030      	movs	r0, r6
 800e470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e472:	f7f2 f87b 	bl	800056c <__aeabi_lmul>
 800e476:	17eb      	asrs	r3, r5, #31
 800e478:	9506      	str	r5, [sp, #24]
 800e47a:	9307      	str	r3, [sp, #28]
 800e47c:	9a06      	ldr	r2, [sp, #24]
 800e47e:	9b07      	ldr	r3, [sp, #28]
 800e480:	1880      	adds	r0, r0, r2
 800e482:	4159      	adcs	r1, r3
 800e484:	2301      	movs	r3, #1
 800e486:	7825      	ldrb	r5, [r4, #0]
 800e488:	3401      	adds	r4, #1
 800e48a:	e7d7      	b.n	800e43c <_strtoll_l.constprop.0+0x78>
 800e48c:	9001      	str	r0, [sp, #4]
 800e48e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e490:	d1b0      	bne.n	800e3f4 <_strtoll_l.constprop.0+0x30>
 800e492:	7825      	ldrb	r5, [r4, #0]
 800e494:	1c9c      	adds	r4, r3, #2
 800e496:	e7ad      	b.n	800e3f4 <_strtoll_l.constprop.0+0x30>
 800e498:	2e00      	cmp	r6, #0
 800e49a:	d1b9      	bne.n	800e410 <_strtoll_l.constprop.0+0x4c>
 800e49c:	3608      	adds	r6, #8
 800e49e:	2d30      	cmp	r5, #48	@ 0x30
 800e4a0:	d0b6      	beq.n	800e410 <_strtoll_l.constprop.0+0x4c>
 800e4a2:	3602      	adds	r6, #2
 800e4a4:	e7b4      	b.n	800e410 <_strtoll_l.constprop.0+0x4c>
 800e4a6:	002a      	movs	r2, r5
 800e4a8:	3a41      	subs	r2, #65	@ 0x41
 800e4aa:	2a19      	cmp	r2, #25
 800e4ac:	d801      	bhi.n	800e4b2 <_strtoll_l.constprop.0+0xee>
 800e4ae:	3d37      	subs	r5, #55	@ 0x37
 800e4b0:	e7c9      	b.n	800e446 <_strtoll_l.constprop.0+0x82>
 800e4b2:	002a      	movs	r2, r5
 800e4b4:	3a61      	subs	r2, #97	@ 0x61
 800e4b6:	2a19      	cmp	r2, #25
 800e4b8:	d804      	bhi.n	800e4c4 <_strtoll_l.constprop.0+0x100>
 800e4ba:	3d57      	subs	r5, #87	@ 0x57
 800e4bc:	e7c3      	b.n	800e446 <_strtoll_l.constprop.0+0x82>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	425b      	negs	r3, r3
 800e4c2:	e7e0      	b.n	800e486 <_strtoll_l.constprop.0+0xc2>
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	d109      	bne.n	800e4dc <_strtoll_l.constprop.0+0x118>
 800e4c8:	9804      	ldr	r0, [sp, #16]
 800e4ca:	9905      	ldr	r1, [sp, #20]
 800e4cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4ce:	3323      	adds	r3, #35	@ 0x23
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10e      	bne.n	800e4f6 <_strtoll_l.constprop.0+0x132>
 800e4d8:	b00d      	add	sp, #52	@ 0x34
 800e4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4dc:	9a01      	ldr	r2, [sp, #4]
 800e4de:	2a00      	cmp	r2, #0
 800e4e0:	d004      	beq.n	800e4ec <_strtoll_l.constprop.0+0x128>
 800e4e2:	0005      	movs	r5, r0
 800e4e4:	000e      	movs	r6, r1
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4268      	negs	r0, r5
 800e4ea:	41b1      	sbcs	r1, r6
 800e4ec:	9a03      	ldr	r2, [sp, #12]
 800e4ee:	2a00      	cmp	r2, #0
 800e4f0:	d0f2      	beq.n	800e4d8 <_strtoll_l.constprop.0+0x114>
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <_strtoll_l.constprop.0+0x136>
 800e4f6:	1e63      	subs	r3, r4, #1
 800e4f8:	9302      	str	r3, [sp, #8]
 800e4fa:	9b03      	ldr	r3, [sp, #12]
 800e4fc:	9a02      	ldr	r2, [sp, #8]
 800e4fe:	601a      	str	r2, [r3, #0]
 800e500:	e7ea      	b.n	800e4d8 <_strtoll_l.constprop.0+0x114>
 800e502:	46c0      	nop			@ (mov r8, r8)
 800e504:	08011a39 	.word	0x08011a39
 800e508:	7fffffff 	.word	0x7fffffff

0800e50c <strtoll>:
 800e50c:	b510      	push	{r4, lr}
 800e50e:	4c04      	ldr	r4, [pc, #16]	@ (800e520 <strtoll+0x14>)
 800e510:	0013      	movs	r3, r2
 800e512:	000a      	movs	r2, r1
 800e514:	0001      	movs	r1, r0
 800e516:	6820      	ldr	r0, [r4, #0]
 800e518:	f7ff ff54 	bl	800e3c4 <_strtoll_l.constprop.0>
 800e51c:	bd10      	pop	{r4, pc}
 800e51e:	46c0      	nop			@ (mov r8, r8)
 800e520:	20000b2c 	.word	0x20000b2c

0800e524 <std>:
 800e524:	2300      	movs	r3, #0
 800e526:	b510      	push	{r4, lr}
 800e528:	0004      	movs	r4, r0
 800e52a:	6003      	str	r3, [r0, #0]
 800e52c:	6043      	str	r3, [r0, #4]
 800e52e:	6083      	str	r3, [r0, #8]
 800e530:	8181      	strh	r1, [r0, #12]
 800e532:	6643      	str	r3, [r0, #100]	@ 0x64
 800e534:	81c2      	strh	r2, [r0, #14]
 800e536:	6103      	str	r3, [r0, #16]
 800e538:	6143      	str	r3, [r0, #20]
 800e53a:	6183      	str	r3, [r0, #24]
 800e53c:	0019      	movs	r1, r3
 800e53e:	2208      	movs	r2, #8
 800e540:	305c      	adds	r0, #92	@ 0x5c
 800e542:	f000 f91f 	bl	800e784 <memset>
 800e546:	4b0b      	ldr	r3, [pc, #44]	@ (800e574 <std+0x50>)
 800e548:	6224      	str	r4, [r4, #32]
 800e54a:	6263      	str	r3, [r4, #36]	@ 0x24
 800e54c:	4b0a      	ldr	r3, [pc, #40]	@ (800e578 <std+0x54>)
 800e54e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e550:	4b0a      	ldr	r3, [pc, #40]	@ (800e57c <std+0x58>)
 800e552:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e554:	4b0a      	ldr	r3, [pc, #40]	@ (800e580 <std+0x5c>)
 800e556:	6323      	str	r3, [r4, #48]	@ 0x30
 800e558:	4b0a      	ldr	r3, [pc, #40]	@ (800e584 <std+0x60>)
 800e55a:	429c      	cmp	r4, r3
 800e55c:	d005      	beq.n	800e56a <std+0x46>
 800e55e:	4b0a      	ldr	r3, [pc, #40]	@ (800e588 <std+0x64>)
 800e560:	429c      	cmp	r4, r3
 800e562:	d002      	beq.n	800e56a <std+0x46>
 800e564:	4b09      	ldr	r3, [pc, #36]	@ (800e58c <std+0x68>)
 800e566:	429c      	cmp	r4, r3
 800e568:	d103      	bne.n	800e572 <std+0x4e>
 800e56a:	0020      	movs	r0, r4
 800e56c:	3058      	adds	r0, #88	@ 0x58
 800e56e:	f000 f99b 	bl	800e8a8 <__retarget_lock_init_recursive>
 800e572:	bd10      	pop	{r4, pc}
 800e574:	0800e6ed 	.word	0x0800e6ed
 800e578:	0800e715 	.word	0x0800e715
 800e57c:	0800e74d 	.word	0x0800e74d
 800e580:	0800e779 	.word	0x0800e779
 800e584:	20001e28 	.word	0x20001e28
 800e588:	20001e90 	.word	0x20001e90
 800e58c:	20001ef8 	.word	0x20001ef8

0800e590 <stdio_exit_handler>:
 800e590:	b510      	push	{r4, lr}
 800e592:	4a03      	ldr	r2, [pc, #12]	@ (800e5a0 <stdio_exit_handler+0x10>)
 800e594:	4903      	ldr	r1, [pc, #12]	@ (800e5a4 <stdio_exit_handler+0x14>)
 800e596:	4804      	ldr	r0, [pc, #16]	@ (800e5a8 <stdio_exit_handler+0x18>)
 800e598:	f000 f86c 	bl	800e674 <_fwalk_sglue>
 800e59c:	bd10      	pop	{r4, pc}
 800e59e:	46c0      	nop			@ (mov r8, r8)
 800e5a0:	200009b4 	.word	0x200009b4
 800e5a4:	08010499 	.word	0x08010499
 800e5a8:	20000b30 	.word	0x20000b30

0800e5ac <cleanup_stdio>:
 800e5ac:	6841      	ldr	r1, [r0, #4]
 800e5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e5dc <cleanup_stdio+0x30>)
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	0004      	movs	r4, r0
 800e5b4:	4299      	cmp	r1, r3
 800e5b6:	d001      	beq.n	800e5bc <cleanup_stdio+0x10>
 800e5b8:	f001 ff6e 	bl	8010498 <_fflush_r>
 800e5bc:	68a1      	ldr	r1, [r4, #8]
 800e5be:	4b08      	ldr	r3, [pc, #32]	@ (800e5e0 <cleanup_stdio+0x34>)
 800e5c0:	4299      	cmp	r1, r3
 800e5c2:	d002      	beq.n	800e5ca <cleanup_stdio+0x1e>
 800e5c4:	0020      	movs	r0, r4
 800e5c6:	f001 ff67 	bl	8010498 <_fflush_r>
 800e5ca:	68e1      	ldr	r1, [r4, #12]
 800e5cc:	4b05      	ldr	r3, [pc, #20]	@ (800e5e4 <cleanup_stdio+0x38>)
 800e5ce:	4299      	cmp	r1, r3
 800e5d0:	d002      	beq.n	800e5d8 <cleanup_stdio+0x2c>
 800e5d2:	0020      	movs	r0, r4
 800e5d4:	f001 ff60 	bl	8010498 <_fflush_r>
 800e5d8:	bd10      	pop	{r4, pc}
 800e5da:	46c0      	nop			@ (mov r8, r8)
 800e5dc:	20001e28 	.word	0x20001e28
 800e5e0:	20001e90 	.word	0x20001e90
 800e5e4:	20001ef8 	.word	0x20001ef8

0800e5e8 <global_stdio_init.part.0>:
 800e5e8:	b510      	push	{r4, lr}
 800e5ea:	4b09      	ldr	r3, [pc, #36]	@ (800e610 <global_stdio_init.part.0+0x28>)
 800e5ec:	4a09      	ldr	r2, [pc, #36]	@ (800e614 <global_stdio_init.part.0+0x2c>)
 800e5ee:	2104      	movs	r1, #4
 800e5f0:	601a      	str	r2, [r3, #0]
 800e5f2:	4809      	ldr	r0, [pc, #36]	@ (800e618 <global_stdio_init.part.0+0x30>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f7ff ff95 	bl	800e524 <std>
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	2109      	movs	r1, #9
 800e5fe:	4807      	ldr	r0, [pc, #28]	@ (800e61c <global_stdio_init.part.0+0x34>)
 800e600:	f7ff ff90 	bl	800e524 <std>
 800e604:	2202      	movs	r2, #2
 800e606:	2112      	movs	r1, #18
 800e608:	4805      	ldr	r0, [pc, #20]	@ (800e620 <global_stdio_init.part.0+0x38>)
 800e60a:	f7ff ff8b 	bl	800e524 <std>
 800e60e:	bd10      	pop	{r4, pc}
 800e610:	20001f60 	.word	0x20001f60
 800e614:	0800e591 	.word	0x0800e591
 800e618:	20001e28 	.word	0x20001e28
 800e61c:	20001e90 	.word	0x20001e90
 800e620:	20001ef8 	.word	0x20001ef8

0800e624 <__sfp_lock_acquire>:
 800e624:	b510      	push	{r4, lr}
 800e626:	4802      	ldr	r0, [pc, #8]	@ (800e630 <__sfp_lock_acquire+0xc>)
 800e628:	f000 f93f 	bl	800e8aa <__retarget_lock_acquire_recursive>
 800e62c:	bd10      	pop	{r4, pc}
 800e62e:	46c0      	nop			@ (mov r8, r8)
 800e630:	20001f69 	.word	0x20001f69

0800e634 <__sfp_lock_release>:
 800e634:	b510      	push	{r4, lr}
 800e636:	4802      	ldr	r0, [pc, #8]	@ (800e640 <__sfp_lock_release+0xc>)
 800e638:	f000 f938 	bl	800e8ac <__retarget_lock_release_recursive>
 800e63c:	bd10      	pop	{r4, pc}
 800e63e:	46c0      	nop			@ (mov r8, r8)
 800e640:	20001f69 	.word	0x20001f69

0800e644 <__sinit>:
 800e644:	b510      	push	{r4, lr}
 800e646:	0004      	movs	r4, r0
 800e648:	f7ff ffec 	bl	800e624 <__sfp_lock_acquire>
 800e64c:	6a23      	ldr	r3, [r4, #32]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <__sinit+0x14>
 800e652:	f7ff ffef 	bl	800e634 <__sfp_lock_release>
 800e656:	bd10      	pop	{r4, pc}
 800e658:	4b04      	ldr	r3, [pc, #16]	@ (800e66c <__sinit+0x28>)
 800e65a:	6223      	str	r3, [r4, #32]
 800e65c:	4b04      	ldr	r3, [pc, #16]	@ (800e670 <__sinit+0x2c>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1f6      	bne.n	800e652 <__sinit+0xe>
 800e664:	f7ff ffc0 	bl	800e5e8 <global_stdio_init.part.0>
 800e668:	e7f3      	b.n	800e652 <__sinit+0xe>
 800e66a:	46c0      	nop			@ (mov r8, r8)
 800e66c:	0800e5ad 	.word	0x0800e5ad
 800e670:	20001f60 	.word	0x20001f60

0800e674 <_fwalk_sglue>:
 800e674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e676:	0014      	movs	r4, r2
 800e678:	2600      	movs	r6, #0
 800e67a:	9000      	str	r0, [sp, #0]
 800e67c:	9101      	str	r1, [sp, #4]
 800e67e:	68a5      	ldr	r5, [r4, #8]
 800e680:	6867      	ldr	r7, [r4, #4]
 800e682:	3f01      	subs	r7, #1
 800e684:	d504      	bpl.n	800e690 <_fwalk_sglue+0x1c>
 800e686:	6824      	ldr	r4, [r4, #0]
 800e688:	2c00      	cmp	r4, #0
 800e68a:	d1f8      	bne.n	800e67e <_fwalk_sglue+0xa>
 800e68c:	0030      	movs	r0, r6
 800e68e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e690:	89ab      	ldrh	r3, [r5, #12]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d908      	bls.n	800e6a8 <_fwalk_sglue+0x34>
 800e696:	220e      	movs	r2, #14
 800e698:	5eab      	ldrsh	r3, [r5, r2]
 800e69a:	3301      	adds	r3, #1
 800e69c:	d004      	beq.n	800e6a8 <_fwalk_sglue+0x34>
 800e69e:	0029      	movs	r1, r5
 800e6a0:	9800      	ldr	r0, [sp, #0]
 800e6a2:	9b01      	ldr	r3, [sp, #4]
 800e6a4:	4798      	blx	r3
 800e6a6:	4306      	orrs	r6, r0
 800e6a8:	3568      	adds	r5, #104	@ 0x68
 800e6aa:	e7ea      	b.n	800e682 <_fwalk_sglue+0xe>

0800e6ac <siprintf>:
 800e6ac:	b40e      	push	{r1, r2, r3}
 800e6ae:	b500      	push	{lr}
 800e6b0:	490b      	ldr	r1, [pc, #44]	@ (800e6e0 <siprintf+0x34>)
 800e6b2:	b09c      	sub	sp, #112	@ 0x70
 800e6b4:	ab1d      	add	r3, sp, #116	@ 0x74
 800e6b6:	9002      	str	r0, [sp, #8]
 800e6b8:	9006      	str	r0, [sp, #24]
 800e6ba:	9107      	str	r1, [sp, #28]
 800e6bc:	9104      	str	r1, [sp, #16]
 800e6be:	4809      	ldr	r0, [pc, #36]	@ (800e6e4 <siprintf+0x38>)
 800e6c0:	4909      	ldr	r1, [pc, #36]	@ (800e6e8 <siprintf+0x3c>)
 800e6c2:	cb04      	ldmia	r3!, {r2}
 800e6c4:	9105      	str	r1, [sp, #20]
 800e6c6:	6800      	ldr	r0, [r0, #0]
 800e6c8:	a902      	add	r1, sp, #8
 800e6ca:	9301      	str	r3, [sp, #4]
 800e6cc:	f001 fa9e 	bl	800fc0c <_svfiprintf_r>
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	9b02      	ldr	r3, [sp, #8]
 800e6d4:	701a      	strb	r2, [r3, #0]
 800e6d6:	b01c      	add	sp, #112	@ 0x70
 800e6d8:	bc08      	pop	{r3}
 800e6da:	b003      	add	sp, #12
 800e6dc:	4718      	bx	r3
 800e6de:	46c0      	nop			@ (mov r8, r8)
 800e6e0:	7fffffff 	.word	0x7fffffff
 800e6e4:	20000b2c 	.word	0x20000b2c
 800e6e8:	ffff0208 	.word	0xffff0208

0800e6ec <__sread>:
 800e6ec:	b570      	push	{r4, r5, r6, lr}
 800e6ee:	000c      	movs	r4, r1
 800e6f0:	250e      	movs	r5, #14
 800e6f2:	5f49      	ldrsh	r1, [r1, r5]
 800e6f4:	f000 f886 	bl	800e804 <_read_r>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	db03      	blt.n	800e704 <__sread+0x18>
 800e6fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e6fe:	181b      	adds	r3, r3, r0
 800e700:	6563      	str	r3, [r4, #84]	@ 0x54
 800e702:	bd70      	pop	{r4, r5, r6, pc}
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	4a02      	ldr	r2, [pc, #8]	@ (800e710 <__sread+0x24>)
 800e708:	4013      	ands	r3, r2
 800e70a:	81a3      	strh	r3, [r4, #12]
 800e70c:	e7f9      	b.n	800e702 <__sread+0x16>
 800e70e:	46c0      	nop			@ (mov r8, r8)
 800e710:	ffffefff 	.word	0xffffefff

0800e714 <__swrite>:
 800e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e716:	001f      	movs	r7, r3
 800e718:	898b      	ldrh	r3, [r1, #12]
 800e71a:	0005      	movs	r5, r0
 800e71c:	000c      	movs	r4, r1
 800e71e:	0016      	movs	r6, r2
 800e720:	05db      	lsls	r3, r3, #23
 800e722:	d505      	bpl.n	800e730 <__swrite+0x1c>
 800e724:	230e      	movs	r3, #14
 800e726:	5ec9      	ldrsh	r1, [r1, r3]
 800e728:	2200      	movs	r2, #0
 800e72a:	2302      	movs	r3, #2
 800e72c:	f000 f856 	bl	800e7dc <_lseek_r>
 800e730:	89a3      	ldrh	r3, [r4, #12]
 800e732:	4a05      	ldr	r2, [pc, #20]	@ (800e748 <__swrite+0x34>)
 800e734:	0028      	movs	r0, r5
 800e736:	4013      	ands	r3, r2
 800e738:	81a3      	strh	r3, [r4, #12]
 800e73a:	0032      	movs	r2, r6
 800e73c:	230e      	movs	r3, #14
 800e73e:	5ee1      	ldrsh	r1, [r4, r3]
 800e740:	003b      	movs	r3, r7
 800e742:	f000 f873 	bl	800e82c <_write_r>
 800e746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e748:	ffffefff 	.word	0xffffefff

0800e74c <__sseek>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	000c      	movs	r4, r1
 800e750:	250e      	movs	r5, #14
 800e752:	5f49      	ldrsh	r1, [r1, r5]
 800e754:	f000 f842 	bl	800e7dc <_lseek_r>
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	1c42      	adds	r2, r0, #1
 800e75c:	d103      	bne.n	800e766 <__sseek+0x1a>
 800e75e:	4a05      	ldr	r2, [pc, #20]	@ (800e774 <__sseek+0x28>)
 800e760:	4013      	ands	r3, r2
 800e762:	81a3      	strh	r3, [r4, #12]
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	2280      	movs	r2, #128	@ 0x80
 800e768:	0152      	lsls	r2, r2, #5
 800e76a:	4313      	orrs	r3, r2
 800e76c:	81a3      	strh	r3, [r4, #12]
 800e76e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e770:	e7f8      	b.n	800e764 <__sseek+0x18>
 800e772:	46c0      	nop			@ (mov r8, r8)
 800e774:	ffffefff 	.word	0xffffefff

0800e778 <__sclose>:
 800e778:	b510      	push	{r4, lr}
 800e77a:	230e      	movs	r3, #14
 800e77c:	5ec9      	ldrsh	r1, [r1, r3]
 800e77e:	f000 f81b 	bl	800e7b8 <_close_r>
 800e782:	bd10      	pop	{r4, pc}

0800e784 <memset>:
 800e784:	0003      	movs	r3, r0
 800e786:	1882      	adds	r2, r0, r2
 800e788:	4293      	cmp	r3, r2
 800e78a:	d100      	bne.n	800e78e <memset+0xa>
 800e78c:	4770      	bx	lr
 800e78e:	7019      	strb	r1, [r3, #0]
 800e790:	3301      	adds	r3, #1
 800e792:	e7f9      	b.n	800e788 <memset+0x4>

0800e794 <strncmp>:
 800e794:	b530      	push	{r4, r5, lr}
 800e796:	0005      	movs	r5, r0
 800e798:	1e10      	subs	r0, r2, #0
 800e79a:	d00b      	beq.n	800e7b4 <strncmp+0x20>
 800e79c:	2400      	movs	r4, #0
 800e79e:	3a01      	subs	r2, #1
 800e7a0:	5d2b      	ldrb	r3, [r5, r4]
 800e7a2:	5d08      	ldrb	r0, [r1, r4]
 800e7a4:	4283      	cmp	r3, r0
 800e7a6:	d104      	bne.n	800e7b2 <strncmp+0x1e>
 800e7a8:	42a2      	cmp	r2, r4
 800e7aa:	d002      	beq.n	800e7b2 <strncmp+0x1e>
 800e7ac:	3401      	adds	r4, #1
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1f6      	bne.n	800e7a0 <strncmp+0xc>
 800e7b2:	1a18      	subs	r0, r3, r0
 800e7b4:	bd30      	pop	{r4, r5, pc}
	...

0800e7b8 <_close_r>:
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	b570      	push	{r4, r5, r6, lr}
 800e7bc:	4d06      	ldr	r5, [pc, #24]	@ (800e7d8 <_close_r+0x20>)
 800e7be:	0004      	movs	r4, r0
 800e7c0:	0008      	movs	r0, r1
 800e7c2:	602b      	str	r3, [r5, #0]
 800e7c4:	f7f8 feea 	bl	800759c <_close>
 800e7c8:	1c43      	adds	r3, r0, #1
 800e7ca:	d103      	bne.n	800e7d4 <_close_r+0x1c>
 800e7cc:	682b      	ldr	r3, [r5, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d000      	beq.n	800e7d4 <_close_r+0x1c>
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	bd70      	pop	{r4, r5, r6, pc}
 800e7d6:	46c0      	nop			@ (mov r8, r8)
 800e7d8:	20001f64 	.word	0x20001f64

0800e7dc <_lseek_r>:
 800e7dc:	b570      	push	{r4, r5, r6, lr}
 800e7de:	0004      	movs	r4, r0
 800e7e0:	0008      	movs	r0, r1
 800e7e2:	0011      	movs	r1, r2
 800e7e4:	001a      	movs	r2, r3
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	4d05      	ldr	r5, [pc, #20]	@ (800e800 <_lseek_r+0x24>)
 800e7ea:	602b      	str	r3, [r5, #0]
 800e7ec:	f7f8 fef7 	bl	80075de <_lseek>
 800e7f0:	1c43      	adds	r3, r0, #1
 800e7f2:	d103      	bne.n	800e7fc <_lseek_r+0x20>
 800e7f4:	682b      	ldr	r3, [r5, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d000      	beq.n	800e7fc <_lseek_r+0x20>
 800e7fa:	6023      	str	r3, [r4, #0]
 800e7fc:	bd70      	pop	{r4, r5, r6, pc}
 800e7fe:	46c0      	nop			@ (mov r8, r8)
 800e800:	20001f64 	.word	0x20001f64

0800e804 <_read_r>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	0004      	movs	r4, r0
 800e808:	0008      	movs	r0, r1
 800e80a:	0011      	movs	r1, r2
 800e80c:	001a      	movs	r2, r3
 800e80e:	2300      	movs	r3, #0
 800e810:	4d05      	ldr	r5, [pc, #20]	@ (800e828 <_read_r+0x24>)
 800e812:	602b      	str	r3, [r5, #0]
 800e814:	f7f8 fe89 	bl	800752a <_read>
 800e818:	1c43      	adds	r3, r0, #1
 800e81a:	d103      	bne.n	800e824 <_read_r+0x20>
 800e81c:	682b      	ldr	r3, [r5, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d000      	beq.n	800e824 <_read_r+0x20>
 800e822:	6023      	str	r3, [r4, #0]
 800e824:	bd70      	pop	{r4, r5, r6, pc}
 800e826:	46c0      	nop			@ (mov r8, r8)
 800e828:	20001f64 	.word	0x20001f64

0800e82c <_write_r>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	0004      	movs	r4, r0
 800e830:	0008      	movs	r0, r1
 800e832:	0011      	movs	r1, r2
 800e834:	001a      	movs	r2, r3
 800e836:	2300      	movs	r3, #0
 800e838:	4d05      	ldr	r5, [pc, #20]	@ (800e850 <_write_r+0x24>)
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f8 fe92 	bl	8007564 <_write>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d103      	bne.n	800e84c <_write_r+0x20>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d000      	beq.n	800e84c <_write_r+0x20>
 800e84a:	6023      	str	r3, [r4, #0]
 800e84c:	bd70      	pop	{r4, r5, r6, pc}
 800e84e:	46c0      	nop			@ (mov r8, r8)
 800e850:	20001f64 	.word	0x20001f64

0800e854 <__errno>:
 800e854:	4b01      	ldr	r3, [pc, #4]	@ (800e85c <__errno+0x8>)
 800e856:	6818      	ldr	r0, [r3, #0]
 800e858:	4770      	bx	lr
 800e85a:	46c0      	nop			@ (mov r8, r8)
 800e85c:	20000b2c 	.word	0x20000b2c

0800e860 <__libc_init_array>:
 800e860:	b570      	push	{r4, r5, r6, lr}
 800e862:	2600      	movs	r6, #0
 800e864:	4c0c      	ldr	r4, [pc, #48]	@ (800e898 <__libc_init_array+0x38>)
 800e866:	4d0d      	ldr	r5, [pc, #52]	@ (800e89c <__libc_init_array+0x3c>)
 800e868:	1b64      	subs	r4, r4, r5
 800e86a:	10a4      	asrs	r4, r4, #2
 800e86c:	42a6      	cmp	r6, r4
 800e86e:	d109      	bne.n	800e884 <__libc_init_array+0x24>
 800e870:	2600      	movs	r6, #0
 800e872:	f002 fadb 	bl	8010e2c <_init>
 800e876:	4c0a      	ldr	r4, [pc, #40]	@ (800e8a0 <__libc_init_array+0x40>)
 800e878:	4d0a      	ldr	r5, [pc, #40]	@ (800e8a4 <__libc_init_array+0x44>)
 800e87a:	1b64      	subs	r4, r4, r5
 800e87c:	10a4      	asrs	r4, r4, #2
 800e87e:	42a6      	cmp	r6, r4
 800e880:	d105      	bne.n	800e88e <__libc_init_array+0x2e>
 800e882:	bd70      	pop	{r4, r5, r6, pc}
 800e884:	00b3      	lsls	r3, r6, #2
 800e886:	58eb      	ldr	r3, [r5, r3]
 800e888:	4798      	blx	r3
 800e88a:	3601      	adds	r6, #1
 800e88c:	e7ee      	b.n	800e86c <__libc_init_array+0xc>
 800e88e:	00b3      	lsls	r3, r6, #2
 800e890:	58eb      	ldr	r3, [r5, r3]
 800e892:	4798      	blx	r3
 800e894:	3601      	adds	r6, #1
 800e896:	e7f2      	b.n	800e87e <__libc_init_array+0x1e>
 800e898:	08011da8 	.word	0x08011da8
 800e89c:	08011da8 	.word	0x08011da8
 800e8a0:	08011dac 	.word	0x08011dac
 800e8a4:	08011da8 	.word	0x08011da8

0800e8a8 <__retarget_lock_init_recursive>:
 800e8a8:	4770      	bx	lr

0800e8aa <__retarget_lock_acquire_recursive>:
 800e8aa:	4770      	bx	lr

0800e8ac <__retarget_lock_release_recursive>:
 800e8ac:	4770      	bx	lr

0800e8ae <memcpy>:
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	b510      	push	{r4, lr}
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d100      	bne.n	800e8b8 <memcpy+0xa>
 800e8b6:	bd10      	pop	{r4, pc}
 800e8b8:	5ccc      	ldrb	r4, [r1, r3]
 800e8ba:	54c4      	strb	r4, [r0, r3]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	e7f8      	b.n	800e8b2 <memcpy+0x4>

0800e8c0 <nan>:
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	4901      	ldr	r1, [pc, #4]	@ (800e8c8 <nan+0x8>)
 800e8c4:	4770      	bx	lr
 800e8c6:	46c0      	nop			@ (mov r8, r8)
 800e8c8:	7ff80000 	.word	0x7ff80000

0800e8cc <_free_r>:
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	0005      	movs	r5, r0
 800e8d0:	1e0c      	subs	r4, r1, #0
 800e8d2:	d010      	beq.n	800e8f6 <_free_r+0x2a>
 800e8d4:	3c04      	subs	r4, #4
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	da00      	bge.n	800e8de <_free_r+0x12>
 800e8dc:	18e4      	adds	r4, r4, r3
 800e8de:	0028      	movs	r0, r5
 800e8e0:	f000 fc4c 	bl	800f17c <__malloc_lock>
 800e8e4:	4a1d      	ldr	r2, [pc, #116]	@ (800e95c <_free_r+0x90>)
 800e8e6:	6813      	ldr	r3, [r2, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d105      	bne.n	800e8f8 <_free_r+0x2c>
 800e8ec:	6063      	str	r3, [r4, #4]
 800e8ee:	6014      	str	r4, [r2, #0]
 800e8f0:	0028      	movs	r0, r5
 800e8f2:	f000 fc4b 	bl	800f18c <__malloc_unlock>
 800e8f6:	bd70      	pop	{r4, r5, r6, pc}
 800e8f8:	42a3      	cmp	r3, r4
 800e8fa:	d908      	bls.n	800e90e <_free_r+0x42>
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	1821      	adds	r1, r4, r0
 800e900:	428b      	cmp	r3, r1
 800e902:	d1f3      	bne.n	800e8ec <_free_r+0x20>
 800e904:	6819      	ldr	r1, [r3, #0]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	1809      	adds	r1, r1, r0
 800e90a:	6021      	str	r1, [r4, #0]
 800e90c:	e7ee      	b.n	800e8ec <_free_r+0x20>
 800e90e:	001a      	movs	r2, r3
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d001      	beq.n	800e91a <_free_r+0x4e>
 800e916:	42a3      	cmp	r3, r4
 800e918:	d9f9      	bls.n	800e90e <_free_r+0x42>
 800e91a:	6811      	ldr	r1, [r2, #0]
 800e91c:	1850      	adds	r0, r2, r1
 800e91e:	42a0      	cmp	r0, r4
 800e920:	d10b      	bne.n	800e93a <_free_r+0x6e>
 800e922:	6820      	ldr	r0, [r4, #0]
 800e924:	1809      	adds	r1, r1, r0
 800e926:	1850      	adds	r0, r2, r1
 800e928:	6011      	str	r1, [r2, #0]
 800e92a:	4283      	cmp	r3, r0
 800e92c:	d1e0      	bne.n	800e8f0 <_free_r+0x24>
 800e92e:	6818      	ldr	r0, [r3, #0]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	1841      	adds	r1, r0, r1
 800e934:	6011      	str	r1, [r2, #0]
 800e936:	6053      	str	r3, [r2, #4]
 800e938:	e7da      	b.n	800e8f0 <_free_r+0x24>
 800e93a:	42a0      	cmp	r0, r4
 800e93c:	d902      	bls.n	800e944 <_free_r+0x78>
 800e93e:	230c      	movs	r3, #12
 800e940:	602b      	str	r3, [r5, #0]
 800e942:	e7d5      	b.n	800e8f0 <_free_r+0x24>
 800e944:	6820      	ldr	r0, [r4, #0]
 800e946:	1821      	adds	r1, r4, r0
 800e948:	428b      	cmp	r3, r1
 800e94a:	d103      	bne.n	800e954 <_free_r+0x88>
 800e94c:	6819      	ldr	r1, [r3, #0]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	1809      	adds	r1, r1, r0
 800e952:	6021      	str	r1, [r4, #0]
 800e954:	6063      	str	r3, [r4, #4]
 800e956:	6054      	str	r4, [r2, #4]
 800e958:	e7ca      	b.n	800e8f0 <_free_r+0x24>
 800e95a:	46c0      	nop			@ (mov r8, r8)
 800e95c:	20001f70 	.word	0x20001f70

0800e960 <rshift>:
 800e960:	0002      	movs	r2, r0
 800e962:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e964:	6904      	ldr	r4, [r0, #16]
 800e966:	b085      	sub	sp, #20
 800e968:	3214      	adds	r2, #20
 800e96a:	114b      	asrs	r3, r1, #5
 800e96c:	0016      	movs	r6, r2
 800e96e:	9302      	str	r3, [sp, #8]
 800e970:	429c      	cmp	r4, r3
 800e972:	dd31      	ble.n	800e9d8 <rshift+0x78>
 800e974:	261f      	movs	r6, #31
 800e976:	000f      	movs	r7, r1
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	00a5      	lsls	r5, r4, #2
 800e97c:	18d3      	adds	r3, r2, r3
 800e97e:	4037      	ands	r7, r6
 800e980:	1955      	adds	r5, r2, r5
 800e982:	9300      	str	r3, [sp, #0]
 800e984:	9701      	str	r7, [sp, #4]
 800e986:	4231      	tst	r1, r6
 800e988:	d10d      	bne.n	800e9a6 <rshift+0x46>
 800e98a:	0016      	movs	r6, r2
 800e98c:	0019      	movs	r1, r3
 800e98e:	428d      	cmp	r5, r1
 800e990:	d836      	bhi.n	800ea00 <rshift+0xa0>
 800e992:	9b00      	ldr	r3, [sp, #0]
 800e994:	2600      	movs	r6, #0
 800e996:	3b03      	subs	r3, #3
 800e998:	429d      	cmp	r5, r3
 800e99a:	d302      	bcc.n	800e9a2 <rshift+0x42>
 800e99c:	9b02      	ldr	r3, [sp, #8]
 800e99e:	1ae4      	subs	r4, r4, r3
 800e9a0:	00a6      	lsls	r6, r4, #2
 800e9a2:	1996      	adds	r6, r2, r6
 800e9a4:	e018      	b.n	800e9d8 <rshift+0x78>
 800e9a6:	2120      	movs	r1, #32
 800e9a8:	9e01      	ldr	r6, [sp, #4]
 800e9aa:	9f01      	ldr	r7, [sp, #4]
 800e9ac:	1b89      	subs	r1, r1, r6
 800e9ae:	9e00      	ldr	r6, [sp, #0]
 800e9b0:	9103      	str	r1, [sp, #12]
 800e9b2:	ce02      	ldmia	r6!, {r1}
 800e9b4:	4694      	mov	ip, r2
 800e9b6:	40f9      	lsrs	r1, r7
 800e9b8:	42b5      	cmp	r5, r6
 800e9ba:	d816      	bhi.n	800e9ea <rshift+0x8a>
 800e9bc:	9b00      	ldr	r3, [sp, #0]
 800e9be:	2600      	movs	r6, #0
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	429d      	cmp	r5, r3
 800e9c4:	d303      	bcc.n	800e9ce <rshift+0x6e>
 800e9c6:	9b02      	ldr	r3, [sp, #8]
 800e9c8:	1ae4      	subs	r4, r4, r3
 800e9ca:	00a6      	lsls	r6, r4, #2
 800e9cc:	3e04      	subs	r6, #4
 800e9ce:	1996      	adds	r6, r2, r6
 800e9d0:	6031      	str	r1, [r6, #0]
 800e9d2:	2900      	cmp	r1, #0
 800e9d4:	d000      	beq.n	800e9d8 <rshift+0x78>
 800e9d6:	3604      	adds	r6, #4
 800e9d8:	1ab1      	subs	r1, r6, r2
 800e9da:	1089      	asrs	r1, r1, #2
 800e9dc:	6101      	str	r1, [r0, #16]
 800e9de:	4296      	cmp	r6, r2
 800e9e0:	d101      	bne.n	800e9e6 <rshift+0x86>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	6143      	str	r3, [r0, #20]
 800e9e6:	b005      	add	sp, #20
 800e9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ea:	6837      	ldr	r7, [r6, #0]
 800e9ec:	9b03      	ldr	r3, [sp, #12]
 800e9ee:	409f      	lsls	r7, r3
 800e9f0:	430f      	orrs	r7, r1
 800e9f2:	4661      	mov	r1, ip
 800e9f4:	c180      	stmia	r1!, {r7}
 800e9f6:	468c      	mov	ip, r1
 800e9f8:	9b01      	ldr	r3, [sp, #4]
 800e9fa:	ce02      	ldmia	r6!, {r1}
 800e9fc:	40d9      	lsrs	r1, r3
 800e9fe:	e7db      	b.n	800e9b8 <rshift+0x58>
 800ea00:	c980      	ldmia	r1!, {r7}
 800ea02:	c680      	stmia	r6!, {r7}
 800ea04:	e7c3      	b.n	800e98e <rshift+0x2e>

0800ea06 <__hexdig_fun>:
 800ea06:	0002      	movs	r2, r0
 800ea08:	3a30      	subs	r2, #48	@ 0x30
 800ea0a:	0003      	movs	r3, r0
 800ea0c:	2a09      	cmp	r2, #9
 800ea0e:	d802      	bhi.n	800ea16 <__hexdig_fun+0x10>
 800ea10:	3b20      	subs	r3, #32
 800ea12:	b2d8      	uxtb	r0, r3
 800ea14:	4770      	bx	lr
 800ea16:	0002      	movs	r2, r0
 800ea18:	3a61      	subs	r2, #97	@ 0x61
 800ea1a:	2a05      	cmp	r2, #5
 800ea1c:	d801      	bhi.n	800ea22 <__hexdig_fun+0x1c>
 800ea1e:	3b47      	subs	r3, #71	@ 0x47
 800ea20:	e7f7      	b.n	800ea12 <__hexdig_fun+0xc>
 800ea22:	001a      	movs	r2, r3
 800ea24:	3a41      	subs	r2, #65	@ 0x41
 800ea26:	2000      	movs	r0, #0
 800ea28:	2a05      	cmp	r2, #5
 800ea2a:	d8f3      	bhi.n	800ea14 <__hexdig_fun+0xe>
 800ea2c:	3b27      	subs	r3, #39	@ 0x27
 800ea2e:	e7f0      	b.n	800ea12 <__hexdig_fun+0xc>

0800ea30 <__gethex>:
 800ea30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea32:	b089      	sub	sp, #36	@ 0x24
 800ea34:	9307      	str	r3, [sp, #28]
 800ea36:	680b      	ldr	r3, [r1, #0]
 800ea38:	9201      	str	r2, [sp, #4]
 800ea3a:	9003      	str	r0, [sp, #12]
 800ea3c:	9106      	str	r1, [sp, #24]
 800ea3e:	1c9a      	adds	r2, r3, #2
 800ea40:	0011      	movs	r1, r2
 800ea42:	3201      	adds	r2, #1
 800ea44:	1e50      	subs	r0, r2, #1
 800ea46:	7800      	ldrb	r0, [r0, #0]
 800ea48:	2830      	cmp	r0, #48	@ 0x30
 800ea4a:	d0f9      	beq.n	800ea40 <__gethex+0x10>
 800ea4c:	1acb      	subs	r3, r1, r3
 800ea4e:	3b02      	subs	r3, #2
 800ea50:	9305      	str	r3, [sp, #20]
 800ea52:	9100      	str	r1, [sp, #0]
 800ea54:	f7ff ffd7 	bl	800ea06 <__hexdig_fun>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	001d      	movs	r5, r3
 800ea5c:	9302      	str	r3, [sp, #8]
 800ea5e:	4298      	cmp	r0, r3
 800ea60:	d11e      	bne.n	800eaa0 <__gethex+0x70>
 800ea62:	2201      	movs	r2, #1
 800ea64:	49a6      	ldr	r1, [pc, #664]	@ (800ed00 <__gethex+0x2d0>)
 800ea66:	9800      	ldr	r0, [sp, #0]
 800ea68:	f7ff fe94 	bl	800e794 <strncmp>
 800ea6c:	0007      	movs	r7, r0
 800ea6e:	42a8      	cmp	r0, r5
 800ea70:	d000      	beq.n	800ea74 <__gethex+0x44>
 800ea72:	e06a      	b.n	800eb4a <__gethex+0x11a>
 800ea74:	9b00      	ldr	r3, [sp, #0]
 800ea76:	7858      	ldrb	r0, [r3, #1]
 800ea78:	1c5c      	adds	r4, r3, #1
 800ea7a:	f7ff ffc4 	bl	800ea06 <__hexdig_fun>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	9302      	str	r3, [sp, #8]
 800ea82:	42a8      	cmp	r0, r5
 800ea84:	d02f      	beq.n	800eae6 <__gethex+0xb6>
 800ea86:	9400      	str	r4, [sp, #0]
 800ea88:	9b00      	ldr	r3, [sp, #0]
 800ea8a:	7818      	ldrb	r0, [r3, #0]
 800ea8c:	2830      	cmp	r0, #48	@ 0x30
 800ea8e:	d009      	beq.n	800eaa4 <__gethex+0x74>
 800ea90:	f7ff ffb9 	bl	800ea06 <__hexdig_fun>
 800ea94:	4242      	negs	r2, r0
 800ea96:	4142      	adcs	r2, r0
 800ea98:	2301      	movs	r3, #1
 800ea9a:	0025      	movs	r5, r4
 800ea9c:	9202      	str	r2, [sp, #8]
 800ea9e:	9305      	str	r3, [sp, #20]
 800eaa0:	9c00      	ldr	r4, [sp, #0]
 800eaa2:	e004      	b.n	800eaae <__gethex+0x7e>
 800eaa4:	9b00      	ldr	r3, [sp, #0]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	e7ed      	b.n	800ea88 <__gethex+0x58>
 800eaac:	3401      	adds	r4, #1
 800eaae:	7820      	ldrb	r0, [r4, #0]
 800eab0:	f7ff ffa9 	bl	800ea06 <__hexdig_fun>
 800eab4:	1e07      	subs	r7, r0, #0
 800eab6:	d1f9      	bne.n	800eaac <__gethex+0x7c>
 800eab8:	2201      	movs	r2, #1
 800eaba:	0020      	movs	r0, r4
 800eabc:	4990      	ldr	r1, [pc, #576]	@ (800ed00 <__gethex+0x2d0>)
 800eabe:	f7ff fe69 	bl	800e794 <strncmp>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d10d      	bne.n	800eae2 <__gethex+0xb2>
 800eac6:	2d00      	cmp	r5, #0
 800eac8:	d106      	bne.n	800ead8 <__gethex+0xa8>
 800eaca:	3401      	adds	r4, #1
 800eacc:	0025      	movs	r5, r4
 800eace:	7820      	ldrb	r0, [r4, #0]
 800ead0:	f7ff ff99 	bl	800ea06 <__hexdig_fun>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	d102      	bne.n	800eade <__gethex+0xae>
 800ead8:	1b2d      	subs	r5, r5, r4
 800eada:	00af      	lsls	r7, r5, #2
 800eadc:	e003      	b.n	800eae6 <__gethex+0xb6>
 800eade:	3401      	adds	r4, #1
 800eae0:	e7f5      	b.n	800eace <__gethex+0x9e>
 800eae2:	2d00      	cmp	r5, #0
 800eae4:	d1f8      	bne.n	800ead8 <__gethex+0xa8>
 800eae6:	2220      	movs	r2, #32
 800eae8:	7823      	ldrb	r3, [r4, #0]
 800eaea:	0026      	movs	r6, r4
 800eaec:	4393      	bics	r3, r2
 800eaee:	2b50      	cmp	r3, #80	@ 0x50
 800eaf0:	d11d      	bne.n	800eb2e <__gethex+0xfe>
 800eaf2:	7863      	ldrb	r3, [r4, #1]
 800eaf4:	2b2b      	cmp	r3, #43	@ 0x2b
 800eaf6:	d02d      	beq.n	800eb54 <__gethex+0x124>
 800eaf8:	2b2d      	cmp	r3, #45	@ 0x2d
 800eafa:	d02f      	beq.n	800eb5c <__gethex+0x12c>
 800eafc:	2300      	movs	r3, #0
 800eafe:	1c66      	adds	r6, r4, #1
 800eb00:	9304      	str	r3, [sp, #16]
 800eb02:	7830      	ldrb	r0, [r6, #0]
 800eb04:	f7ff ff7f 	bl	800ea06 <__hexdig_fun>
 800eb08:	1e43      	subs	r3, r0, #1
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	0005      	movs	r5, r0
 800eb0e:	2b18      	cmp	r3, #24
 800eb10:	d82a      	bhi.n	800eb68 <__gethex+0x138>
 800eb12:	7870      	ldrb	r0, [r6, #1]
 800eb14:	f7ff ff77 	bl	800ea06 <__hexdig_fun>
 800eb18:	1e43      	subs	r3, r0, #1
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	3601      	adds	r6, #1
 800eb1e:	3d10      	subs	r5, #16
 800eb20:	2b18      	cmp	r3, #24
 800eb22:	d91d      	bls.n	800eb60 <__gethex+0x130>
 800eb24:	9b04      	ldr	r3, [sp, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d000      	beq.n	800eb2c <__gethex+0xfc>
 800eb2a:	426d      	negs	r5, r5
 800eb2c:	197f      	adds	r7, r7, r5
 800eb2e:	9b06      	ldr	r3, [sp, #24]
 800eb30:	601e      	str	r6, [r3, #0]
 800eb32:	9b02      	ldr	r3, [sp, #8]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d019      	beq.n	800eb6c <__gethex+0x13c>
 800eb38:	9b05      	ldr	r3, [sp, #20]
 800eb3a:	2606      	movs	r6, #6
 800eb3c:	425a      	negs	r2, r3
 800eb3e:	4153      	adcs	r3, r2
 800eb40:	425b      	negs	r3, r3
 800eb42:	401e      	ands	r6, r3
 800eb44:	0030      	movs	r0, r6
 800eb46:	b009      	add	sp, #36	@ 0x24
 800eb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	2700      	movs	r7, #0
 800eb4e:	9c00      	ldr	r4, [sp, #0]
 800eb50:	9302      	str	r3, [sp, #8]
 800eb52:	e7c8      	b.n	800eae6 <__gethex+0xb6>
 800eb54:	2300      	movs	r3, #0
 800eb56:	9304      	str	r3, [sp, #16]
 800eb58:	1ca6      	adds	r6, r4, #2
 800eb5a:	e7d2      	b.n	800eb02 <__gethex+0xd2>
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e7fa      	b.n	800eb56 <__gethex+0x126>
 800eb60:	230a      	movs	r3, #10
 800eb62:	435d      	muls	r5, r3
 800eb64:	182d      	adds	r5, r5, r0
 800eb66:	e7d4      	b.n	800eb12 <__gethex+0xe2>
 800eb68:	0026      	movs	r6, r4
 800eb6a:	e7e0      	b.n	800eb2e <__gethex+0xfe>
 800eb6c:	9b00      	ldr	r3, [sp, #0]
 800eb6e:	9902      	ldr	r1, [sp, #8]
 800eb70:	1ae3      	subs	r3, r4, r3
 800eb72:	3b01      	subs	r3, #1
 800eb74:	2b07      	cmp	r3, #7
 800eb76:	dc0a      	bgt.n	800eb8e <__gethex+0x15e>
 800eb78:	9803      	ldr	r0, [sp, #12]
 800eb7a:	f000 fb0f 	bl	800f19c <_Balloc>
 800eb7e:	1e05      	subs	r5, r0, #0
 800eb80:	d108      	bne.n	800eb94 <__gethex+0x164>
 800eb82:	002a      	movs	r2, r5
 800eb84:	21e4      	movs	r1, #228	@ 0xe4
 800eb86:	4b5f      	ldr	r3, [pc, #380]	@ (800ed04 <__gethex+0x2d4>)
 800eb88:	485f      	ldr	r0, [pc, #380]	@ (800ed08 <__gethex+0x2d8>)
 800eb8a:	f001 fd83 	bl	8010694 <__assert_func>
 800eb8e:	3101      	adds	r1, #1
 800eb90:	105b      	asrs	r3, r3, #1
 800eb92:	e7ef      	b.n	800eb74 <__gethex+0x144>
 800eb94:	0003      	movs	r3, r0
 800eb96:	3314      	adds	r3, #20
 800eb98:	9302      	str	r3, [sp, #8]
 800eb9a:	9305      	str	r3, [sp, #20]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	001e      	movs	r6, r3
 800eba0:	9304      	str	r3, [sp, #16]
 800eba2:	9b00      	ldr	r3, [sp, #0]
 800eba4:	42a3      	cmp	r3, r4
 800eba6:	d338      	bcc.n	800ec1a <__gethex+0x1ea>
 800eba8:	9c05      	ldr	r4, [sp, #20]
 800ebaa:	9b02      	ldr	r3, [sp, #8]
 800ebac:	c440      	stmia	r4!, {r6}
 800ebae:	1ae4      	subs	r4, r4, r3
 800ebb0:	10a4      	asrs	r4, r4, #2
 800ebb2:	0030      	movs	r0, r6
 800ebb4:	612c      	str	r4, [r5, #16]
 800ebb6:	f000 fbe9 	bl	800f38c <__hi0bits>
 800ebba:	9b01      	ldr	r3, [sp, #4]
 800ebbc:	0164      	lsls	r4, r4, #5
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	1a26      	subs	r6, r4, r0
 800ebc2:	9300      	str	r3, [sp, #0]
 800ebc4:	429e      	cmp	r6, r3
 800ebc6:	dd52      	ble.n	800ec6e <__gethex+0x23e>
 800ebc8:	1af6      	subs	r6, r6, r3
 800ebca:	0031      	movs	r1, r6
 800ebcc:	0028      	movs	r0, r5
 800ebce:	f000 ff8c 	bl	800faea <__any_on>
 800ebd2:	1e04      	subs	r4, r0, #0
 800ebd4:	d00f      	beq.n	800ebf6 <__gethex+0x1c6>
 800ebd6:	2401      	movs	r4, #1
 800ebd8:	231f      	movs	r3, #31
 800ebda:	0020      	movs	r0, r4
 800ebdc:	1e72      	subs	r2, r6, #1
 800ebde:	4013      	ands	r3, r2
 800ebe0:	4098      	lsls	r0, r3
 800ebe2:	0003      	movs	r3, r0
 800ebe4:	1151      	asrs	r1, r2, #5
 800ebe6:	9802      	ldr	r0, [sp, #8]
 800ebe8:	0089      	lsls	r1, r1, #2
 800ebea:	5809      	ldr	r1, [r1, r0]
 800ebec:	4219      	tst	r1, r3
 800ebee:	d002      	beq.n	800ebf6 <__gethex+0x1c6>
 800ebf0:	42a2      	cmp	r2, r4
 800ebf2:	dc34      	bgt.n	800ec5e <__gethex+0x22e>
 800ebf4:	2402      	movs	r4, #2
 800ebf6:	0031      	movs	r1, r6
 800ebf8:	0028      	movs	r0, r5
 800ebfa:	f7ff feb1 	bl	800e960 <rshift>
 800ebfe:	19bf      	adds	r7, r7, r6
 800ec00:	9b01      	ldr	r3, [sp, #4]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	42bb      	cmp	r3, r7
 800ec06:	da42      	bge.n	800ec8e <__gethex+0x25e>
 800ec08:	0029      	movs	r1, r5
 800ec0a:	9803      	ldr	r0, [sp, #12]
 800ec0c:	f000 fb0a 	bl	800f224 <_Bfree>
 800ec10:	2300      	movs	r3, #0
 800ec12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec14:	26a3      	movs	r6, #163	@ 0xa3
 800ec16:	6013      	str	r3, [r2, #0]
 800ec18:	e794      	b.n	800eb44 <__gethex+0x114>
 800ec1a:	3c01      	subs	r4, #1
 800ec1c:	7823      	ldrb	r3, [r4, #0]
 800ec1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec20:	d012      	beq.n	800ec48 <__gethex+0x218>
 800ec22:	9b04      	ldr	r3, [sp, #16]
 800ec24:	2b20      	cmp	r3, #32
 800ec26:	d104      	bne.n	800ec32 <__gethex+0x202>
 800ec28:	9b05      	ldr	r3, [sp, #20]
 800ec2a:	c340      	stmia	r3!, {r6}
 800ec2c:	2600      	movs	r6, #0
 800ec2e:	9305      	str	r3, [sp, #20]
 800ec30:	9604      	str	r6, [sp, #16]
 800ec32:	7820      	ldrb	r0, [r4, #0]
 800ec34:	f7ff fee7 	bl	800ea06 <__hexdig_fun>
 800ec38:	230f      	movs	r3, #15
 800ec3a:	4018      	ands	r0, r3
 800ec3c:	9b04      	ldr	r3, [sp, #16]
 800ec3e:	4098      	lsls	r0, r3
 800ec40:	3304      	adds	r3, #4
 800ec42:	4306      	orrs	r6, r0
 800ec44:	9304      	str	r3, [sp, #16]
 800ec46:	e7ac      	b.n	800eba2 <__gethex+0x172>
 800ec48:	9b00      	ldr	r3, [sp, #0]
 800ec4a:	42a3      	cmp	r3, r4
 800ec4c:	d8e9      	bhi.n	800ec22 <__gethex+0x1f2>
 800ec4e:	2201      	movs	r2, #1
 800ec50:	0020      	movs	r0, r4
 800ec52:	492b      	ldr	r1, [pc, #172]	@ (800ed00 <__gethex+0x2d0>)
 800ec54:	f7ff fd9e 	bl	800e794 <strncmp>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	d1e2      	bne.n	800ec22 <__gethex+0x1f2>
 800ec5c:	e7a1      	b.n	800eba2 <__gethex+0x172>
 800ec5e:	0028      	movs	r0, r5
 800ec60:	1eb1      	subs	r1, r6, #2
 800ec62:	f000 ff42 	bl	800faea <__any_on>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d0c4      	beq.n	800ebf4 <__gethex+0x1c4>
 800ec6a:	2403      	movs	r4, #3
 800ec6c:	e7c3      	b.n	800ebf6 <__gethex+0x1c6>
 800ec6e:	9b00      	ldr	r3, [sp, #0]
 800ec70:	2400      	movs	r4, #0
 800ec72:	429e      	cmp	r6, r3
 800ec74:	dac4      	bge.n	800ec00 <__gethex+0x1d0>
 800ec76:	1b9e      	subs	r6, r3, r6
 800ec78:	0029      	movs	r1, r5
 800ec7a:	0032      	movs	r2, r6
 800ec7c:	9803      	ldr	r0, [sp, #12]
 800ec7e:	f000 fcfb 	bl	800f678 <__lshift>
 800ec82:	0003      	movs	r3, r0
 800ec84:	3314      	adds	r3, #20
 800ec86:	0005      	movs	r5, r0
 800ec88:	1bbf      	subs	r7, r7, r6
 800ec8a:	9302      	str	r3, [sp, #8]
 800ec8c:	e7b8      	b.n	800ec00 <__gethex+0x1d0>
 800ec8e:	9b01      	ldr	r3, [sp, #4]
 800ec90:	685e      	ldr	r6, [r3, #4]
 800ec92:	42be      	cmp	r6, r7
 800ec94:	dd6f      	ble.n	800ed76 <__gethex+0x346>
 800ec96:	9b00      	ldr	r3, [sp, #0]
 800ec98:	1bf6      	subs	r6, r6, r7
 800ec9a:	42b3      	cmp	r3, r6
 800ec9c:	dc36      	bgt.n	800ed0c <__gethex+0x2dc>
 800ec9e:	9b01      	ldr	r3, [sp, #4]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d024      	beq.n	800ecf0 <__gethex+0x2c0>
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d026      	beq.n	800ecf8 <__gethex+0x2c8>
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d117      	bne.n	800ecde <__gethex+0x2ae>
 800ecae:	9b00      	ldr	r3, [sp, #0]
 800ecb0:	42b3      	cmp	r3, r6
 800ecb2:	d114      	bne.n	800ecde <__gethex+0x2ae>
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d10b      	bne.n	800ecd0 <__gethex+0x2a0>
 800ecb8:	9b01      	ldr	r3, [sp, #4]
 800ecba:	9a07      	ldr	r2, [sp, #28]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	2662      	movs	r6, #98	@ 0x62
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	9a02      	ldr	r2, [sp, #8]
 800ecc6:	612b      	str	r3, [r5, #16]
 800ecc8:	6013      	str	r3, [r2, #0]
 800ecca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eccc:	601d      	str	r5, [r3, #0]
 800ecce:	e739      	b.n	800eb44 <__gethex+0x114>
 800ecd0:	9900      	ldr	r1, [sp, #0]
 800ecd2:	0028      	movs	r0, r5
 800ecd4:	3901      	subs	r1, #1
 800ecd6:	f000 ff08 	bl	800faea <__any_on>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d1ec      	bne.n	800ecb8 <__gethex+0x288>
 800ecde:	0029      	movs	r1, r5
 800ece0:	9803      	ldr	r0, [sp, #12]
 800ece2:	f000 fa9f 	bl	800f224 <_Bfree>
 800ece6:	2300      	movs	r3, #0
 800ece8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecea:	2650      	movs	r6, #80	@ 0x50
 800ecec:	6013      	str	r3, [r2, #0]
 800ecee:	e729      	b.n	800eb44 <__gethex+0x114>
 800ecf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1f3      	bne.n	800ecde <__gethex+0x2ae>
 800ecf6:	e7df      	b.n	800ecb8 <__gethex+0x288>
 800ecf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1dc      	bne.n	800ecb8 <__gethex+0x288>
 800ecfe:	e7ee      	b.n	800ecde <__gethex+0x2ae>
 800ed00:	080119d8 	.word	0x080119d8
 800ed04:	08011b41 	.word	0x08011b41
 800ed08:	08011b52 	.word	0x08011b52
 800ed0c:	1e77      	subs	r7, r6, #1
 800ed0e:	2c00      	cmp	r4, #0
 800ed10:	d12f      	bne.n	800ed72 <__gethex+0x342>
 800ed12:	2f00      	cmp	r7, #0
 800ed14:	d004      	beq.n	800ed20 <__gethex+0x2f0>
 800ed16:	0039      	movs	r1, r7
 800ed18:	0028      	movs	r0, r5
 800ed1a:	f000 fee6 	bl	800faea <__any_on>
 800ed1e:	0004      	movs	r4, r0
 800ed20:	231f      	movs	r3, #31
 800ed22:	117a      	asrs	r2, r7, #5
 800ed24:	401f      	ands	r7, r3
 800ed26:	3b1e      	subs	r3, #30
 800ed28:	40bb      	lsls	r3, r7
 800ed2a:	9902      	ldr	r1, [sp, #8]
 800ed2c:	0092      	lsls	r2, r2, #2
 800ed2e:	5852      	ldr	r2, [r2, r1]
 800ed30:	421a      	tst	r2, r3
 800ed32:	d001      	beq.n	800ed38 <__gethex+0x308>
 800ed34:	2302      	movs	r3, #2
 800ed36:	431c      	orrs	r4, r3
 800ed38:	9b00      	ldr	r3, [sp, #0]
 800ed3a:	0031      	movs	r1, r6
 800ed3c:	1b9b      	subs	r3, r3, r6
 800ed3e:	2602      	movs	r6, #2
 800ed40:	0028      	movs	r0, r5
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	f7ff fe0c 	bl	800e960 <rshift>
 800ed48:	9b01      	ldr	r3, [sp, #4]
 800ed4a:	685f      	ldr	r7, [r3, #4]
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	d03f      	beq.n	800edd0 <__gethex+0x3a0>
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d010      	beq.n	800ed7a <__gethex+0x34a>
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d012      	beq.n	800ed82 <__gethex+0x352>
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d106      	bne.n	800ed6e <__gethex+0x33e>
 800ed60:	07a2      	lsls	r2, r4, #30
 800ed62:	d504      	bpl.n	800ed6e <__gethex+0x33e>
 800ed64:	9a02      	ldr	r2, [sp, #8]
 800ed66:	6812      	ldr	r2, [r2, #0]
 800ed68:	4314      	orrs	r4, r2
 800ed6a:	421c      	tst	r4, r3
 800ed6c:	d10c      	bne.n	800ed88 <__gethex+0x358>
 800ed6e:	2310      	movs	r3, #16
 800ed70:	e02d      	b.n	800edce <__gethex+0x39e>
 800ed72:	2401      	movs	r4, #1
 800ed74:	e7d4      	b.n	800ed20 <__gethex+0x2f0>
 800ed76:	2601      	movs	r6, #1
 800ed78:	e7e8      	b.n	800ed4c <__gethex+0x31c>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ed7e:	1a9b      	subs	r3, r3, r2
 800ed80:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d0f2      	beq.n	800ed6e <__gethex+0x33e>
 800ed88:	692b      	ldr	r3, [r5, #16]
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	9302      	str	r3, [sp, #8]
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	9304      	str	r3, [sp, #16]
 800ed92:	002b      	movs	r3, r5
 800ed94:	9a04      	ldr	r2, [sp, #16]
 800ed96:	3314      	adds	r3, #20
 800ed98:	1899      	adds	r1, r3, r2
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	1c54      	adds	r4, r2, #1
 800ed9e:	d01c      	beq.n	800edda <__gethex+0x3aa>
 800eda0:	3201      	adds	r2, #1
 800eda2:	601a      	str	r2, [r3, #0]
 800eda4:	002b      	movs	r3, r5
 800eda6:	3314      	adds	r3, #20
 800eda8:	2e02      	cmp	r6, #2
 800edaa:	d13f      	bne.n	800ee2c <__gethex+0x3fc>
 800edac:	9a01      	ldr	r2, [sp, #4]
 800edae:	9900      	ldr	r1, [sp, #0]
 800edb0:	6812      	ldr	r2, [r2, #0]
 800edb2:	3a01      	subs	r2, #1
 800edb4:	428a      	cmp	r2, r1
 800edb6:	d109      	bne.n	800edcc <__gethex+0x39c>
 800edb8:	000a      	movs	r2, r1
 800edba:	201f      	movs	r0, #31
 800edbc:	4010      	ands	r0, r2
 800edbe:	2201      	movs	r2, #1
 800edc0:	4082      	lsls	r2, r0
 800edc2:	1149      	asrs	r1, r1, #5
 800edc4:	0089      	lsls	r1, r1, #2
 800edc6:	58cb      	ldr	r3, [r1, r3]
 800edc8:	4213      	tst	r3, r2
 800edca:	d13d      	bne.n	800ee48 <__gethex+0x418>
 800edcc:	2320      	movs	r3, #32
 800edce:	431e      	orrs	r6, r3
 800edd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edd2:	601d      	str	r5, [r3, #0]
 800edd4:	9b07      	ldr	r3, [sp, #28]
 800edd6:	601f      	str	r7, [r3, #0]
 800edd8:	e6b4      	b.n	800eb44 <__gethex+0x114>
 800edda:	c301      	stmia	r3!, {r0}
 800eddc:	4299      	cmp	r1, r3
 800edde:	d8dc      	bhi.n	800ed9a <__gethex+0x36a>
 800ede0:	68ab      	ldr	r3, [r5, #8]
 800ede2:	9a02      	ldr	r2, [sp, #8]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	db18      	blt.n	800ee1a <__gethex+0x3ea>
 800ede8:	6869      	ldr	r1, [r5, #4]
 800edea:	9803      	ldr	r0, [sp, #12]
 800edec:	3101      	adds	r1, #1
 800edee:	f000 f9d5 	bl	800f19c <_Balloc>
 800edf2:	1e04      	subs	r4, r0, #0
 800edf4:	d104      	bne.n	800ee00 <__gethex+0x3d0>
 800edf6:	0022      	movs	r2, r4
 800edf8:	2184      	movs	r1, #132	@ 0x84
 800edfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ee70 <__gethex+0x440>)
 800edfc:	481d      	ldr	r0, [pc, #116]	@ (800ee74 <__gethex+0x444>)
 800edfe:	e6c4      	b.n	800eb8a <__gethex+0x15a>
 800ee00:	0029      	movs	r1, r5
 800ee02:	692a      	ldr	r2, [r5, #16]
 800ee04:	310c      	adds	r1, #12
 800ee06:	3202      	adds	r2, #2
 800ee08:	0092      	lsls	r2, r2, #2
 800ee0a:	300c      	adds	r0, #12
 800ee0c:	f7ff fd4f 	bl	800e8ae <memcpy>
 800ee10:	0029      	movs	r1, r5
 800ee12:	9803      	ldr	r0, [sp, #12]
 800ee14:	f000 fa06 	bl	800f224 <_Bfree>
 800ee18:	0025      	movs	r5, r4
 800ee1a:	692b      	ldr	r3, [r5, #16]
 800ee1c:	1c5a      	adds	r2, r3, #1
 800ee1e:	612a      	str	r2, [r5, #16]
 800ee20:	2201      	movs	r2, #1
 800ee22:	3304      	adds	r3, #4
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	18eb      	adds	r3, r5, r3
 800ee28:	605a      	str	r2, [r3, #4]
 800ee2a:	e7bb      	b.n	800eda4 <__gethex+0x374>
 800ee2c:	692a      	ldr	r2, [r5, #16]
 800ee2e:	9902      	ldr	r1, [sp, #8]
 800ee30:	428a      	cmp	r2, r1
 800ee32:	dd0b      	ble.n	800ee4c <__gethex+0x41c>
 800ee34:	2101      	movs	r1, #1
 800ee36:	0028      	movs	r0, r5
 800ee38:	f7ff fd92 	bl	800e960 <rshift>
 800ee3c:	9b01      	ldr	r3, [sp, #4]
 800ee3e:	3701      	adds	r7, #1
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	42bb      	cmp	r3, r7
 800ee44:	da00      	bge.n	800ee48 <__gethex+0x418>
 800ee46:	e6df      	b.n	800ec08 <__gethex+0x1d8>
 800ee48:	2601      	movs	r6, #1
 800ee4a:	e7bf      	b.n	800edcc <__gethex+0x39c>
 800ee4c:	221f      	movs	r2, #31
 800ee4e:	9c00      	ldr	r4, [sp, #0]
 800ee50:	9900      	ldr	r1, [sp, #0]
 800ee52:	4014      	ands	r4, r2
 800ee54:	4211      	tst	r1, r2
 800ee56:	d0f7      	beq.n	800ee48 <__gethex+0x418>
 800ee58:	9a04      	ldr	r2, [sp, #16]
 800ee5a:	189b      	adds	r3, r3, r2
 800ee5c:	3b04      	subs	r3, #4
 800ee5e:	6818      	ldr	r0, [r3, #0]
 800ee60:	f000 fa94 	bl	800f38c <__hi0bits>
 800ee64:	2320      	movs	r3, #32
 800ee66:	1b1b      	subs	r3, r3, r4
 800ee68:	4298      	cmp	r0, r3
 800ee6a:	dbe3      	blt.n	800ee34 <__gethex+0x404>
 800ee6c:	e7ec      	b.n	800ee48 <__gethex+0x418>
 800ee6e:	46c0      	nop			@ (mov r8, r8)
 800ee70:	08011b41 	.word	0x08011b41
 800ee74:	08011b52 	.word	0x08011b52

0800ee78 <L_shift>:
 800ee78:	2308      	movs	r3, #8
 800ee7a:	b570      	push	{r4, r5, r6, lr}
 800ee7c:	2520      	movs	r5, #32
 800ee7e:	1a9a      	subs	r2, r3, r2
 800ee80:	0092      	lsls	r2, r2, #2
 800ee82:	1aad      	subs	r5, r5, r2
 800ee84:	6843      	ldr	r3, [r0, #4]
 800ee86:	6804      	ldr	r4, [r0, #0]
 800ee88:	001e      	movs	r6, r3
 800ee8a:	40ae      	lsls	r6, r5
 800ee8c:	40d3      	lsrs	r3, r2
 800ee8e:	4334      	orrs	r4, r6
 800ee90:	6004      	str	r4, [r0, #0]
 800ee92:	6043      	str	r3, [r0, #4]
 800ee94:	3004      	adds	r0, #4
 800ee96:	4288      	cmp	r0, r1
 800ee98:	d3f4      	bcc.n	800ee84 <L_shift+0xc>
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}

0800ee9c <__match>:
 800ee9c:	b530      	push	{r4, r5, lr}
 800ee9e:	6803      	ldr	r3, [r0, #0]
 800eea0:	780c      	ldrb	r4, [r1, #0]
 800eea2:	3301      	adds	r3, #1
 800eea4:	2c00      	cmp	r4, #0
 800eea6:	d102      	bne.n	800eeae <__match+0x12>
 800eea8:	6003      	str	r3, [r0, #0]
 800eeaa:	2001      	movs	r0, #1
 800eeac:	bd30      	pop	{r4, r5, pc}
 800eeae:	781a      	ldrb	r2, [r3, #0]
 800eeb0:	0015      	movs	r5, r2
 800eeb2:	3d41      	subs	r5, #65	@ 0x41
 800eeb4:	2d19      	cmp	r5, #25
 800eeb6:	d800      	bhi.n	800eeba <__match+0x1e>
 800eeb8:	3220      	adds	r2, #32
 800eeba:	3101      	adds	r1, #1
 800eebc:	42a2      	cmp	r2, r4
 800eebe:	d0ef      	beq.n	800eea0 <__match+0x4>
 800eec0:	2000      	movs	r0, #0
 800eec2:	e7f3      	b.n	800eeac <__match+0x10>

0800eec4 <__hexnan>:
 800eec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eec6:	680b      	ldr	r3, [r1, #0]
 800eec8:	b08b      	sub	sp, #44	@ 0x2c
 800eeca:	9201      	str	r2, [sp, #4]
 800eecc:	9901      	ldr	r1, [sp, #4]
 800eece:	115a      	asrs	r2, r3, #5
 800eed0:	0092      	lsls	r2, r2, #2
 800eed2:	188a      	adds	r2, r1, r2
 800eed4:	9202      	str	r2, [sp, #8]
 800eed6:	0019      	movs	r1, r3
 800eed8:	221f      	movs	r2, #31
 800eeda:	4011      	ands	r1, r2
 800eedc:	9008      	str	r0, [sp, #32]
 800eede:	9106      	str	r1, [sp, #24]
 800eee0:	4213      	tst	r3, r2
 800eee2:	d002      	beq.n	800eeea <__hexnan+0x26>
 800eee4:	9b02      	ldr	r3, [sp, #8]
 800eee6:	3304      	adds	r3, #4
 800eee8:	9302      	str	r3, [sp, #8]
 800eeea:	9b02      	ldr	r3, [sp, #8]
 800eeec:	2500      	movs	r5, #0
 800eeee:	1f1f      	subs	r7, r3, #4
 800eef0:	003e      	movs	r6, r7
 800eef2:	003c      	movs	r4, r7
 800eef4:	9b08      	ldr	r3, [sp, #32]
 800eef6:	603d      	str	r5, [r7, #0]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	9507      	str	r5, [sp, #28]
 800eefc:	9305      	str	r3, [sp, #20]
 800eefe:	9503      	str	r5, [sp, #12]
 800ef00:	9b05      	ldr	r3, [sp, #20]
 800ef02:	3301      	adds	r3, #1
 800ef04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef06:	9b05      	ldr	r3, [sp, #20]
 800ef08:	785b      	ldrb	r3, [r3, #1]
 800ef0a:	9304      	str	r3, [sp, #16]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d028      	beq.n	800ef62 <__hexnan+0x9e>
 800ef10:	9804      	ldr	r0, [sp, #16]
 800ef12:	f7ff fd78 	bl	800ea06 <__hexdig_fun>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d155      	bne.n	800efc6 <__hexnan+0x102>
 800ef1a:	9b04      	ldr	r3, [sp, #16]
 800ef1c:	2b20      	cmp	r3, #32
 800ef1e:	d819      	bhi.n	800ef54 <__hexnan+0x90>
 800ef20:	9b03      	ldr	r3, [sp, #12]
 800ef22:	9a07      	ldr	r2, [sp, #28]
 800ef24:	4293      	cmp	r3, r2
 800ef26:	dd12      	ble.n	800ef4e <__hexnan+0x8a>
 800ef28:	42b4      	cmp	r4, r6
 800ef2a:	d206      	bcs.n	800ef3a <__hexnan+0x76>
 800ef2c:	2d07      	cmp	r5, #7
 800ef2e:	dc04      	bgt.n	800ef3a <__hexnan+0x76>
 800ef30:	002a      	movs	r2, r5
 800ef32:	0031      	movs	r1, r6
 800ef34:	0020      	movs	r0, r4
 800ef36:	f7ff ff9f 	bl	800ee78 <L_shift>
 800ef3a:	9b01      	ldr	r3, [sp, #4]
 800ef3c:	2508      	movs	r5, #8
 800ef3e:	429c      	cmp	r4, r3
 800ef40:	d905      	bls.n	800ef4e <__hexnan+0x8a>
 800ef42:	1f26      	subs	r6, r4, #4
 800ef44:	2500      	movs	r5, #0
 800ef46:	0034      	movs	r4, r6
 800ef48:	9b03      	ldr	r3, [sp, #12]
 800ef4a:	6035      	str	r5, [r6, #0]
 800ef4c:	9307      	str	r3, [sp, #28]
 800ef4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef50:	9305      	str	r3, [sp, #20]
 800ef52:	e7d5      	b.n	800ef00 <__hexnan+0x3c>
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	2b29      	cmp	r3, #41	@ 0x29
 800ef58:	d15a      	bne.n	800f010 <__hexnan+0x14c>
 800ef5a:	9b05      	ldr	r3, [sp, #20]
 800ef5c:	9a08      	ldr	r2, [sp, #32]
 800ef5e:	3302      	adds	r3, #2
 800ef60:	6013      	str	r3, [r2, #0]
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d053      	beq.n	800f010 <__hexnan+0x14c>
 800ef68:	42b4      	cmp	r4, r6
 800ef6a:	d206      	bcs.n	800ef7a <__hexnan+0xb6>
 800ef6c:	2d07      	cmp	r5, #7
 800ef6e:	dc04      	bgt.n	800ef7a <__hexnan+0xb6>
 800ef70:	002a      	movs	r2, r5
 800ef72:	0031      	movs	r1, r6
 800ef74:	0020      	movs	r0, r4
 800ef76:	f7ff ff7f 	bl	800ee78 <L_shift>
 800ef7a:	9b01      	ldr	r3, [sp, #4]
 800ef7c:	429c      	cmp	r4, r3
 800ef7e:	d936      	bls.n	800efee <__hexnan+0x12a>
 800ef80:	001a      	movs	r2, r3
 800ef82:	0023      	movs	r3, r4
 800ef84:	cb02      	ldmia	r3!, {r1}
 800ef86:	c202      	stmia	r2!, {r1}
 800ef88:	429f      	cmp	r7, r3
 800ef8a:	d2fb      	bcs.n	800ef84 <__hexnan+0xc0>
 800ef8c:	9b02      	ldr	r3, [sp, #8]
 800ef8e:	1c61      	adds	r1, r4, #1
 800ef90:	1eda      	subs	r2, r3, #3
 800ef92:	2304      	movs	r3, #4
 800ef94:	4291      	cmp	r1, r2
 800ef96:	d805      	bhi.n	800efa4 <__hexnan+0xe0>
 800ef98:	9b02      	ldr	r3, [sp, #8]
 800ef9a:	3b04      	subs	r3, #4
 800ef9c:	1b1b      	subs	r3, r3, r4
 800ef9e:	089b      	lsrs	r3, r3, #2
 800efa0:	3301      	adds	r3, #1
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	9a01      	ldr	r2, [sp, #4]
 800efa6:	18d3      	adds	r3, r2, r3
 800efa8:	2200      	movs	r2, #0
 800efaa:	c304      	stmia	r3!, {r2}
 800efac:	429f      	cmp	r7, r3
 800efae:	d2fc      	bcs.n	800efaa <__hexnan+0xe6>
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d104      	bne.n	800efc0 <__hexnan+0xfc>
 800efb6:	9b01      	ldr	r3, [sp, #4]
 800efb8:	429f      	cmp	r7, r3
 800efba:	d127      	bne.n	800f00c <__hexnan+0x148>
 800efbc:	2301      	movs	r3, #1
 800efbe:	603b      	str	r3, [r7, #0]
 800efc0:	2005      	movs	r0, #5
 800efc2:	b00b      	add	sp, #44	@ 0x2c
 800efc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc6:	9b03      	ldr	r3, [sp, #12]
 800efc8:	3501      	adds	r5, #1
 800efca:	3301      	adds	r3, #1
 800efcc:	9303      	str	r3, [sp, #12]
 800efce:	2d08      	cmp	r5, #8
 800efd0:	dd06      	ble.n	800efe0 <__hexnan+0x11c>
 800efd2:	9b01      	ldr	r3, [sp, #4]
 800efd4:	429c      	cmp	r4, r3
 800efd6:	d9ba      	bls.n	800ef4e <__hexnan+0x8a>
 800efd8:	2300      	movs	r3, #0
 800efda:	2501      	movs	r5, #1
 800efdc:	3c04      	subs	r4, #4
 800efde:	6023      	str	r3, [r4, #0]
 800efe0:	220f      	movs	r2, #15
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	4010      	ands	r0, r2
 800efe6:	011b      	lsls	r3, r3, #4
 800efe8:	4303      	orrs	r3, r0
 800efea:	6023      	str	r3, [r4, #0]
 800efec:	e7af      	b.n	800ef4e <__hexnan+0x8a>
 800efee:	9b06      	ldr	r3, [sp, #24]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d0dd      	beq.n	800efb0 <__hexnan+0xec>
 800eff4:	2320      	movs	r3, #32
 800eff6:	9a06      	ldr	r2, [sp, #24]
 800eff8:	9902      	ldr	r1, [sp, #8]
 800effa:	1a9b      	subs	r3, r3, r2
 800effc:	2201      	movs	r2, #1
 800effe:	4252      	negs	r2, r2
 800f000:	40da      	lsrs	r2, r3
 800f002:	3904      	subs	r1, #4
 800f004:	680b      	ldr	r3, [r1, #0]
 800f006:	4013      	ands	r3, r2
 800f008:	600b      	str	r3, [r1, #0]
 800f00a:	e7d1      	b.n	800efb0 <__hexnan+0xec>
 800f00c:	3f04      	subs	r7, #4
 800f00e:	e7cf      	b.n	800efb0 <__hexnan+0xec>
 800f010:	2004      	movs	r0, #4
 800f012:	e7d6      	b.n	800efc2 <__hexnan+0xfe>

0800f014 <sbrk_aligned>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	4e0f      	ldr	r6, [pc, #60]	@ (800f054 <sbrk_aligned+0x40>)
 800f018:	000d      	movs	r5, r1
 800f01a:	6831      	ldr	r1, [r6, #0]
 800f01c:	0004      	movs	r4, r0
 800f01e:	2900      	cmp	r1, #0
 800f020:	d102      	bne.n	800f028 <sbrk_aligned+0x14>
 800f022:	f001 fb19 	bl	8010658 <_sbrk_r>
 800f026:	6030      	str	r0, [r6, #0]
 800f028:	0029      	movs	r1, r5
 800f02a:	0020      	movs	r0, r4
 800f02c:	f001 fb14 	bl	8010658 <_sbrk_r>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d103      	bne.n	800f03c <sbrk_aligned+0x28>
 800f034:	2501      	movs	r5, #1
 800f036:	426d      	negs	r5, r5
 800f038:	0028      	movs	r0, r5
 800f03a:	bd70      	pop	{r4, r5, r6, pc}
 800f03c:	2303      	movs	r3, #3
 800f03e:	1cc5      	adds	r5, r0, #3
 800f040:	439d      	bics	r5, r3
 800f042:	42a8      	cmp	r0, r5
 800f044:	d0f8      	beq.n	800f038 <sbrk_aligned+0x24>
 800f046:	1a29      	subs	r1, r5, r0
 800f048:	0020      	movs	r0, r4
 800f04a:	f001 fb05 	bl	8010658 <_sbrk_r>
 800f04e:	3001      	adds	r0, #1
 800f050:	d1f2      	bne.n	800f038 <sbrk_aligned+0x24>
 800f052:	e7ef      	b.n	800f034 <sbrk_aligned+0x20>
 800f054:	20001f6c 	.word	0x20001f6c

0800f058 <_malloc_r>:
 800f058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f05a:	2203      	movs	r2, #3
 800f05c:	1ccb      	adds	r3, r1, #3
 800f05e:	4393      	bics	r3, r2
 800f060:	3308      	adds	r3, #8
 800f062:	0005      	movs	r5, r0
 800f064:	001f      	movs	r7, r3
 800f066:	2b0c      	cmp	r3, #12
 800f068:	d234      	bcs.n	800f0d4 <_malloc_r+0x7c>
 800f06a:	270c      	movs	r7, #12
 800f06c:	42b9      	cmp	r1, r7
 800f06e:	d833      	bhi.n	800f0d8 <_malloc_r+0x80>
 800f070:	0028      	movs	r0, r5
 800f072:	f000 f883 	bl	800f17c <__malloc_lock>
 800f076:	4e37      	ldr	r6, [pc, #220]	@ (800f154 <_malloc_r+0xfc>)
 800f078:	6833      	ldr	r3, [r6, #0]
 800f07a:	001c      	movs	r4, r3
 800f07c:	2c00      	cmp	r4, #0
 800f07e:	d12f      	bne.n	800f0e0 <_malloc_r+0x88>
 800f080:	0039      	movs	r1, r7
 800f082:	0028      	movs	r0, r5
 800f084:	f7ff ffc6 	bl	800f014 <sbrk_aligned>
 800f088:	0004      	movs	r4, r0
 800f08a:	1c43      	adds	r3, r0, #1
 800f08c:	d15f      	bne.n	800f14e <_malloc_r+0xf6>
 800f08e:	6834      	ldr	r4, [r6, #0]
 800f090:	9400      	str	r4, [sp, #0]
 800f092:	9b00      	ldr	r3, [sp, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d14a      	bne.n	800f12e <_malloc_r+0xd6>
 800f098:	2c00      	cmp	r4, #0
 800f09a:	d052      	beq.n	800f142 <_malloc_r+0xea>
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	0028      	movs	r0, r5
 800f0a0:	18e3      	adds	r3, r4, r3
 800f0a2:	9900      	ldr	r1, [sp, #0]
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	f001 fad7 	bl	8010658 <_sbrk_r>
 800f0aa:	9b01      	ldr	r3, [sp, #4]
 800f0ac:	4283      	cmp	r3, r0
 800f0ae:	d148      	bne.n	800f142 <_malloc_r+0xea>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	0028      	movs	r0, r5
 800f0b4:	1aff      	subs	r7, r7, r3
 800f0b6:	0039      	movs	r1, r7
 800f0b8:	f7ff ffac 	bl	800f014 <sbrk_aligned>
 800f0bc:	3001      	adds	r0, #1
 800f0be:	d040      	beq.n	800f142 <_malloc_r+0xea>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	19db      	adds	r3, r3, r7
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	6833      	ldr	r3, [r6, #0]
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	2a00      	cmp	r2, #0
 800f0cc:	d133      	bne.n	800f136 <_malloc_r+0xde>
 800f0ce:	9b00      	ldr	r3, [sp, #0]
 800f0d0:	6033      	str	r3, [r6, #0]
 800f0d2:	e019      	b.n	800f108 <_malloc_r+0xb0>
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dac9      	bge.n	800f06c <_malloc_r+0x14>
 800f0d8:	230c      	movs	r3, #12
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	2000      	movs	r0, #0
 800f0de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f0e0:	6821      	ldr	r1, [r4, #0]
 800f0e2:	1bc9      	subs	r1, r1, r7
 800f0e4:	d420      	bmi.n	800f128 <_malloc_r+0xd0>
 800f0e6:	290b      	cmp	r1, #11
 800f0e8:	d90a      	bls.n	800f100 <_malloc_r+0xa8>
 800f0ea:	19e2      	adds	r2, r4, r7
 800f0ec:	6027      	str	r7, [r4, #0]
 800f0ee:	42a3      	cmp	r3, r4
 800f0f0:	d104      	bne.n	800f0fc <_malloc_r+0xa4>
 800f0f2:	6032      	str	r2, [r6, #0]
 800f0f4:	6863      	ldr	r3, [r4, #4]
 800f0f6:	6011      	str	r1, [r2, #0]
 800f0f8:	6053      	str	r3, [r2, #4]
 800f0fa:	e005      	b.n	800f108 <_malloc_r+0xb0>
 800f0fc:	605a      	str	r2, [r3, #4]
 800f0fe:	e7f9      	b.n	800f0f4 <_malloc_r+0x9c>
 800f100:	6862      	ldr	r2, [r4, #4]
 800f102:	42a3      	cmp	r3, r4
 800f104:	d10e      	bne.n	800f124 <_malloc_r+0xcc>
 800f106:	6032      	str	r2, [r6, #0]
 800f108:	0028      	movs	r0, r5
 800f10a:	f000 f83f 	bl	800f18c <__malloc_unlock>
 800f10e:	0020      	movs	r0, r4
 800f110:	2207      	movs	r2, #7
 800f112:	300b      	adds	r0, #11
 800f114:	1d23      	adds	r3, r4, #4
 800f116:	4390      	bics	r0, r2
 800f118:	1ac2      	subs	r2, r0, r3
 800f11a:	4298      	cmp	r0, r3
 800f11c:	d0df      	beq.n	800f0de <_malloc_r+0x86>
 800f11e:	1a1b      	subs	r3, r3, r0
 800f120:	50a3      	str	r3, [r4, r2]
 800f122:	e7dc      	b.n	800f0de <_malloc_r+0x86>
 800f124:	605a      	str	r2, [r3, #4]
 800f126:	e7ef      	b.n	800f108 <_malloc_r+0xb0>
 800f128:	0023      	movs	r3, r4
 800f12a:	6864      	ldr	r4, [r4, #4]
 800f12c:	e7a6      	b.n	800f07c <_malloc_r+0x24>
 800f12e:	9c00      	ldr	r4, [sp, #0]
 800f130:	6863      	ldr	r3, [r4, #4]
 800f132:	9300      	str	r3, [sp, #0]
 800f134:	e7ad      	b.n	800f092 <_malloc_r+0x3a>
 800f136:	001a      	movs	r2, r3
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	42a3      	cmp	r3, r4
 800f13c:	d1fb      	bne.n	800f136 <_malloc_r+0xde>
 800f13e:	2300      	movs	r3, #0
 800f140:	e7da      	b.n	800f0f8 <_malloc_r+0xa0>
 800f142:	230c      	movs	r3, #12
 800f144:	0028      	movs	r0, r5
 800f146:	602b      	str	r3, [r5, #0]
 800f148:	f000 f820 	bl	800f18c <__malloc_unlock>
 800f14c:	e7c6      	b.n	800f0dc <_malloc_r+0x84>
 800f14e:	6007      	str	r7, [r0, #0]
 800f150:	e7da      	b.n	800f108 <_malloc_r+0xb0>
 800f152:	46c0      	nop			@ (mov r8, r8)
 800f154:	20001f70 	.word	0x20001f70

0800f158 <__ascii_mbtowc>:
 800f158:	b082      	sub	sp, #8
 800f15a:	2900      	cmp	r1, #0
 800f15c:	d100      	bne.n	800f160 <__ascii_mbtowc+0x8>
 800f15e:	a901      	add	r1, sp, #4
 800f160:	1e10      	subs	r0, r2, #0
 800f162:	d006      	beq.n	800f172 <__ascii_mbtowc+0x1a>
 800f164:	2b00      	cmp	r3, #0
 800f166:	d006      	beq.n	800f176 <__ascii_mbtowc+0x1e>
 800f168:	7813      	ldrb	r3, [r2, #0]
 800f16a:	600b      	str	r3, [r1, #0]
 800f16c:	7810      	ldrb	r0, [r2, #0]
 800f16e:	1e43      	subs	r3, r0, #1
 800f170:	4198      	sbcs	r0, r3
 800f172:	b002      	add	sp, #8
 800f174:	4770      	bx	lr
 800f176:	2002      	movs	r0, #2
 800f178:	4240      	negs	r0, r0
 800f17a:	e7fa      	b.n	800f172 <__ascii_mbtowc+0x1a>

0800f17c <__malloc_lock>:
 800f17c:	b510      	push	{r4, lr}
 800f17e:	4802      	ldr	r0, [pc, #8]	@ (800f188 <__malloc_lock+0xc>)
 800f180:	f7ff fb93 	bl	800e8aa <__retarget_lock_acquire_recursive>
 800f184:	bd10      	pop	{r4, pc}
 800f186:	46c0      	nop			@ (mov r8, r8)
 800f188:	20001f68 	.word	0x20001f68

0800f18c <__malloc_unlock>:
 800f18c:	b510      	push	{r4, lr}
 800f18e:	4802      	ldr	r0, [pc, #8]	@ (800f198 <__malloc_unlock+0xc>)
 800f190:	f7ff fb8c 	bl	800e8ac <__retarget_lock_release_recursive>
 800f194:	bd10      	pop	{r4, pc}
 800f196:	46c0      	nop			@ (mov r8, r8)
 800f198:	20001f68 	.word	0x20001f68

0800f19c <_Balloc>:
 800f19c:	b570      	push	{r4, r5, r6, lr}
 800f19e:	69c5      	ldr	r5, [r0, #28]
 800f1a0:	0006      	movs	r6, r0
 800f1a2:	000c      	movs	r4, r1
 800f1a4:	2d00      	cmp	r5, #0
 800f1a6:	d10e      	bne.n	800f1c6 <_Balloc+0x2a>
 800f1a8:	2010      	movs	r0, #16
 800f1aa:	f001 fabf 	bl	801072c <malloc>
 800f1ae:	1e02      	subs	r2, r0, #0
 800f1b0:	61f0      	str	r0, [r6, #28]
 800f1b2:	d104      	bne.n	800f1be <_Balloc+0x22>
 800f1b4:	216b      	movs	r1, #107	@ 0x6b
 800f1b6:	4b19      	ldr	r3, [pc, #100]	@ (800f21c <_Balloc+0x80>)
 800f1b8:	4819      	ldr	r0, [pc, #100]	@ (800f220 <_Balloc+0x84>)
 800f1ba:	f001 fa6b 	bl	8010694 <__assert_func>
 800f1be:	6045      	str	r5, [r0, #4]
 800f1c0:	6085      	str	r5, [r0, #8]
 800f1c2:	6005      	str	r5, [r0, #0]
 800f1c4:	60c5      	str	r5, [r0, #12]
 800f1c6:	69f5      	ldr	r5, [r6, #28]
 800f1c8:	68eb      	ldr	r3, [r5, #12]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d013      	beq.n	800f1f6 <_Balloc+0x5a>
 800f1ce:	69f3      	ldr	r3, [r6, #28]
 800f1d0:	00a2      	lsls	r2, r4, #2
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	189b      	adds	r3, r3, r2
 800f1d6:	6818      	ldr	r0, [r3, #0]
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d118      	bne.n	800f20e <_Balloc+0x72>
 800f1dc:	2101      	movs	r1, #1
 800f1de:	000d      	movs	r5, r1
 800f1e0:	40a5      	lsls	r5, r4
 800f1e2:	1d6a      	adds	r2, r5, #5
 800f1e4:	0030      	movs	r0, r6
 800f1e6:	0092      	lsls	r2, r2, #2
 800f1e8:	f001 fa72 	bl	80106d0 <_calloc_r>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	d00c      	beq.n	800f20a <_Balloc+0x6e>
 800f1f0:	6044      	str	r4, [r0, #4]
 800f1f2:	6085      	str	r5, [r0, #8]
 800f1f4:	e00d      	b.n	800f212 <_Balloc+0x76>
 800f1f6:	2221      	movs	r2, #33	@ 0x21
 800f1f8:	2104      	movs	r1, #4
 800f1fa:	0030      	movs	r0, r6
 800f1fc:	f001 fa68 	bl	80106d0 <_calloc_r>
 800f200:	69f3      	ldr	r3, [r6, #28]
 800f202:	60e8      	str	r0, [r5, #12]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1e1      	bne.n	800f1ce <_Balloc+0x32>
 800f20a:	2000      	movs	r0, #0
 800f20c:	bd70      	pop	{r4, r5, r6, pc}
 800f20e:	6802      	ldr	r2, [r0, #0]
 800f210:	601a      	str	r2, [r3, #0]
 800f212:	2300      	movs	r3, #0
 800f214:	6103      	str	r3, [r0, #16]
 800f216:	60c3      	str	r3, [r0, #12]
 800f218:	e7f8      	b.n	800f20c <_Balloc+0x70>
 800f21a:	46c0      	nop			@ (mov r8, r8)
 800f21c:	08011bb2 	.word	0x08011bb2
 800f220:	08011bc9 	.word	0x08011bc9

0800f224 <_Bfree>:
 800f224:	b570      	push	{r4, r5, r6, lr}
 800f226:	69c6      	ldr	r6, [r0, #28]
 800f228:	0005      	movs	r5, r0
 800f22a:	000c      	movs	r4, r1
 800f22c:	2e00      	cmp	r6, #0
 800f22e:	d10e      	bne.n	800f24e <_Bfree+0x2a>
 800f230:	2010      	movs	r0, #16
 800f232:	f001 fa7b 	bl	801072c <malloc>
 800f236:	1e02      	subs	r2, r0, #0
 800f238:	61e8      	str	r0, [r5, #28]
 800f23a:	d104      	bne.n	800f246 <_Bfree+0x22>
 800f23c:	218f      	movs	r1, #143	@ 0x8f
 800f23e:	4b09      	ldr	r3, [pc, #36]	@ (800f264 <_Bfree+0x40>)
 800f240:	4809      	ldr	r0, [pc, #36]	@ (800f268 <_Bfree+0x44>)
 800f242:	f001 fa27 	bl	8010694 <__assert_func>
 800f246:	6046      	str	r6, [r0, #4]
 800f248:	6086      	str	r6, [r0, #8]
 800f24a:	6006      	str	r6, [r0, #0]
 800f24c:	60c6      	str	r6, [r0, #12]
 800f24e:	2c00      	cmp	r4, #0
 800f250:	d007      	beq.n	800f262 <_Bfree+0x3e>
 800f252:	69eb      	ldr	r3, [r5, #28]
 800f254:	6862      	ldr	r2, [r4, #4]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	0092      	lsls	r2, r2, #2
 800f25a:	189b      	adds	r3, r3, r2
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	6022      	str	r2, [r4, #0]
 800f260:	601c      	str	r4, [r3, #0]
 800f262:	bd70      	pop	{r4, r5, r6, pc}
 800f264:	08011bb2 	.word	0x08011bb2
 800f268:	08011bc9 	.word	0x08011bc9

0800f26c <__multadd>:
 800f26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f26e:	000f      	movs	r7, r1
 800f270:	9001      	str	r0, [sp, #4]
 800f272:	000c      	movs	r4, r1
 800f274:	001e      	movs	r6, r3
 800f276:	2000      	movs	r0, #0
 800f278:	690d      	ldr	r5, [r1, #16]
 800f27a:	3714      	adds	r7, #20
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	3001      	adds	r0, #1
 800f280:	b299      	uxth	r1, r3
 800f282:	4351      	muls	r1, r2
 800f284:	0c1b      	lsrs	r3, r3, #16
 800f286:	4353      	muls	r3, r2
 800f288:	1989      	adds	r1, r1, r6
 800f28a:	0c0e      	lsrs	r6, r1, #16
 800f28c:	199b      	adds	r3, r3, r6
 800f28e:	0c1e      	lsrs	r6, r3, #16
 800f290:	b289      	uxth	r1, r1
 800f292:	041b      	lsls	r3, r3, #16
 800f294:	185b      	adds	r3, r3, r1
 800f296:	c708      	stmia	r7!, {r3}
 800f298:	4285      	cmp	r5, r0
 800f29a:	dcef      	bgt.n	800f27c <__multadd+0x10>
 800f29c:	2e00      	cmp	r6, #0
 800f29e:	d022      	beq.n	800f2e6 <__multadd+0x7a>
 800f2a0:	68a3      	ldr	r3, [r4, #8]
 800f2a2:	42ab      	cmp	r3, r5
 800f2a4:	dc19      	bgt.n	800f2da <__multadd+0x6e>
 800f2a6:	6861      	ldr	r1, [r4, #4]
 800f2a8:	9801      	ldr	r0, [sp, #4]
 800f2aa:	3101      	adds	r1, #1
 800f2ac:	f7ff ff76 	bl	800f19c <_Balloc>
 800f2b0:	1e07      	subs	r7, r0, #0
 800f2b2:	d105      	bne.n	800f2c0 <__multadd+0x54>
 800f2b4:	003a      	movs	r2, r7
 800f2b6:	21ba      	movs	r1, #186	@ 0xba
 800f2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800f2ec <__multadd+0x80>)
 800f2ba:	480d      	ldr	r0, [pc, #52]	@ (800f2f0 <__multadd+0x84>)
 800f2bc:	f001 f9ea 	bl	8010694 <__assert_func>
 800f2c0:	0021      	movs	r1, r4
 800f2c2:	6922      	ldr	r2, [r4, #16]
 800f2c4:	310c      	adds	r1, #12
 800f2c6:	3202      	adds	r2, #2
 800f2c8:	0092      	lsls	r2, r2, #2
 800f2ca:	300c      	adds	r0, #12
 800f2cc:	f7ff faef 	bl	800e8ae <memcpy>
 800f2d0:	0021      	movs	r1, r4
 800f2d2:	9801      	ldr	r0, [sp, #4]
 800f2d4:	f7ff ffa6 	bl	800f224 <_Bfree>
 800f2d8:	003c      	movs	r4, r7
 800f2da:	1d2b      	adds	r3, r5, #4
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	18e3      	adds	r3, r4, r3
 800f2e0:	3501      	adds	r5, #1
 800f2e2:	605e      	str	r6, [r3, #4]
 800f2e4:	6125      	str	r5, [r4, #16]
 800f2e6:	0020      	movs	r0, r4
 800f2e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f2ea:	46c0      	nop			@ (mov r8, r8)
 800f2ec:	08011b41 	.word	0x08011b41
 800f2f0:	08011bc9 	.word	0x08011bc9

0800f2f4 <__s2b>:
 800f2f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2f6:	0007      	movs	r7, r0
 800f2f8:	0018      	movs	r0, r3
 800f2fa:	000c      	movs	r4, r1
 800f2fc:	3008      	adds	r0, #8
 800f2fe:	2109      	movs	r1, #9
 800f300:	9301      	str	r3, [sp, #4]
 800f302:	0015      	movs	r5, r2
 800f304:	f7f0 ffae 	bl	8000264 <__divsi3>
 800f308:	2301      	movs	r3, #1
 800f30a:	2100      	movs	r1, #0
 800f30c:	4283      	cmp	r3, r0
 800f30e:	db0a      	blt.n	800f326 <__s2b+0x32>
 800f310:	0038      	movs	r0, r7
 800f312:	f7ff ff43 	bl	800f19c <_Balloc>
 800f316:	1e01      	subs	r1, r0, #0
 800f318:	d108      	bne.n	800f32c <__s2b+0x38>
 800f31a:	000a      	movs	r2, r1
 800f31c:	4b19      	ldr	r3, [pc, #100]	@ (800f384 <__s2b+0x90>)
 800f31e:	481a      	ldr	r0, [pc, #104]	@ (800f388 <__s2b+0x94>)
 800f320:	31d3      	adds	r1, #211	@ 0xd3
 800f322:	f001 f9b7 	bl	8010694 <__assert_func>
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	3101      	adds	r1, #1
 800f32a:	e7ef      	b.n	800f30c <__s2b+0x18>
 800f32c:	9b08      	ldr	r3, [sp, #32]
 800f32e:	6143      	str	r3, [r0, #20]
 800f330:	2301      	movs	r3, #1
 800f332:	6103      	str	r3, [r0, #16]
 800f334:	2d09      	cmp	r5, #9
 800f336:	dd18      	ble.n	800f36a <__s2b+0x76>
 800f338:	0023      	movs	r3, r4
 800f33a:	3309      	adds	r3, #9
 800f33c:	001e      	movs	r6, r3
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	1964      	adds	r4, r4, r5
 800f342:	7833      	ldrb	r3, [r6, #0]
 800f344:	220a      	movs	r2, #10
 800f346:	0038      	movs	r0, r7
 800f348:	3b30      	subs	r3, #48	@ 0x30
 800f34a:	f7ff ff8f 	bl	800f26c <__multadd>
 800f34e:	3601      	adds	r6, #1
 800f350:	0001      	movs	r1, r0
 800f352:	42a6      	cmp	r6, r4
 800f354:	d1f5      	bne.n	800f342 <__s2b+0x4e>
 800f356:	002c      	movs	r4, r5
 800f358:	9b00      	ldr	r3, [sp, #0]
 800f35a:	3c08      	subs	r4, #8
 800f35c:	191c      	adds	r4, r3, r4
 800f35e:	002e      	movs	r6, r5
 800f360:	9b01      	ldr	r3, [sp, #4]
 800f362:	429e      	cmp	r6, r3
 800f364:	db04      	blt.n	800f370 <__s2b+0x7c>
 800f366:	0008      	movs	r0, r1
 800f368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f36a:	2509      	movs	r5, #9
 800f36c:	340a      	adds	r4, #10
 800f36e:	e7f6      	b.n	800f35e <__s2b+0x6a>
 800f370:	1b63      	subs	r3, r4, r5
 800f372:	5d9b      	ldrb	r3, [r3, r6]
 800f374:	220a      	movs	r2, #10
 800f376:	0038      	movs	r0, r7
 800f378:	3b30      	subs	r3, #48	@ 0x30
 800f37a:	f7ff ff77 	bl	800f26c <__multadd>
 800f37e:	3601      	adds	r6, #1
 800f380:	0001      	movs	r1, r0
 800f382:	e7ed      	b.n	800f360 <__s2b+0x6c>
 800f384:	08011b41 	.word	0x08011b41
 800f388:	08011bc9 	.word	0x08011bc9

0800f38c <__hi0bits>:
 800f38c:	2280      	movs	r2, #128	@ 0x80
 800f38e:	0003      	movs	r3, r0
 800f390:	0252      	lsls	r2, r2, #9
 800f392:	2000      	movs	r0, #0
 800f394:	4293      	cmp	r3, r2
 800f396:	d201      	bcs.n	800f39c <__hi0bits+0x10>
 800f398:	041b      	lsls	r3, r3, #16
 800f39a:	3010      	adds	r0, #16
 800f39c:	2280      	movs	r2, #128	@ 0x80
 800f39e:	0452      	lsls	r2, r2, #17
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d201      	bcs.n	800f3a8 <__hi0bits+0x1c>
 800f3a4:	3008      	adds	r0, #8
 800f3a6:	021b      	lsls	r3, r3, #8
 800f3a8:	2280      	movs	r2, #128	@ 0x80
 800f3aa:	0552      	lsls	r2, r2, #21
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d201      	bcs.n	800f3b4 <__hi0bits+0x28>
 800f3b0:	3004      	adds	r0, #4
 800f3b2:	011b      	lsls	r3, r3, #4
 800f3b4:	2280      	movs	r2, #128	@ 0x80
 800f3b6:	05d2      	lsls	r2, r2, #23
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d201      	bcs.n	800f3c0 <__hi0bits+0x34>
 800f3bc:	3002      	adds	r0, #2
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	db03      	blt.n	800f3cc <__hi0bits+0x40>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	4213      	tst	r3, r2
 800f3c8:	d100      	bne.n	800f3cc <__hi0bits+0x40>
 800f3ca:	2020      	movs	r0, #32
 800f3cc:	4770      	bx	lr

0800f3ce <__lo0bits>:
 800f3ce:	6803      	ldr	r3, [r0, #0]
 800f3d0:	0001      	movs	r1, r0
 800f3d2:	2207      	movs	r2, #7
 800f3d4:	0018      	movs	r0, r3
 800f3d6:	4010      	ands	r0, r2
 800f3d8:	4213      	tst	r3, r2
 800f3da:	d00d      	beq.n	800f3f8 <__lo0bits+0x2a>
 800f3dc:	3a06      	subs	r2, #6
 800f3de:	2000      	movs	r0, #0
 800f3e0:	4213      	tst	r3, r2
 800f3e2:	d105      	bne.n	800f3f0 <__lo0bits+0x22>
 800f3e4:	3002      	adds	r0, #2
 800f3e6:	4203      	tst	r3, r0
 800f3e8:	d003      	beq.n	800f3f2 <__lo0bits+0x24>
 800f3ea:	40d3      	lsrs	r3, r2
 800f3ec:	0010      	movs	r0, r2
 800f3ee:	600b      	str	r3, [r1, #0]
 800f3f0:	4770      	bx	lr
 800f3f2:	089b      	lsrs	r3, r3, #2
 800f3f4:	600b      	str	r3, [r1, #0]
 800f3f6:	e7fb      	b.n	800f3f0 <__lo0bits+0x22>
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	2a00      	cmp	r2, #0
 800f3fc:	d101      	bne.n	800f402 <__lo0bits+0x34>
 800f3fe:	2010      	movs	r0, #16
 800f400:	0c1b      	lsrs	r3, r3, #16
 800f402:	b2da      	uxtb	r2, r3
 800f404:	2a00      	cmp	r2, #0
 800f406:	d101      	bne.n	800f40c <__lo0bits+0x3e>
 800f408:	3008      	adds	r0, #8
 800f40a:	0a1b      	lsrs	r3, r3, #8
 800f40c:	071a      	lsls	r2, r3, #28
 800f40e:	d101      	bne.n	800f414 <__lo0bits+0x46>
 800f410:	3004      	adds	r0, #4
 800f412:	091b      	lsrs	r3, r3, #4
 800f414:	079a      	lsls	r2, r3, #30
 800f416:	d101      	bne.n	800f41c <__lo0bits+0x4e>
 800f418:	3002      	adds	r0, #2
 800f41a:	089b      	lsrs	r3, r3, #2
 800f41c:	07da      	lsls	r2, r3, #31
 800f41e:	d4e9      	bmi.n	800f3f4 <__lo0bits+0x26>
 800f420:	3001      	adds	r0, #1
 800f422:	085b      	lsrs	r3, r3, #1
 800f424:	d1e6      	bne.n	800f3f4 <__lo0bits+0x26>
 800f426:	2020      	movs	r0, #32
 800f428:	e7e2      	b.n	800f3f0 <__lo0bits+0x22>
	...

0800f42c <__i2b>:
 800f42c:	b510      	push	{r4, lr}
 800f42e:	000c      	movs	r4, r1
 800f430:	2101      	movs	r1, #1
 800f432:	f7ff feb3 	bl	800f19c <_Balloc>
 800f436:	2800      	cmp	r0, #0
 800f438:	d107      	bne.n	800f44a <__i2b+0x1e>
 800f43a:	2146      	movs	r1, #70	@ 0x46
 800f43c:	4c05      	ldr	r4, [pc, #20]	@ (800f454 <__i2b+0x28>)
 800f43e:	0002      	movs	r2, r0
 800f440:	4b05      	ldr	r3, [pc, #20]	@ (800f458 <__i2b+0x2c>)
 800f442:	0020      	movs	r0, r4
 800f444:	31ff      	adds	r1, #255	@ 0xff
 800f446:	f001 f925 	bl	8010694 <__assert_func>
 800f44a:	2301      	movs	r3, #1
 800f44c:	6144      	str	r4, [r0, #20]
 800f44e:	6103      	str	r3, [r0, #16]
 800f450:	bd10      	pop	{r4, pc}
 800f452:	46c0      	nop			@ (mov r8, r8)
 800f454:	08011bc9 	.word	0x08011bc9
 800f458:	08011b41 	.word	0x08011b41

0800f45c <__multiply>:
 800f45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45e:	0014      	movs	r4, r2
 800f460:	690a      	ldr	r2, [r1, #16]
 800f462:	6923      	ldr	r3, [r4, #16]
 800f464:	000d      	movs	r5, r1
 800f466:	b08b      	sub	sp, #44	@ 0x2c
 800f468:	429a      	cmp	r2, r3
 800f46a:	db02      	blt.n	800f472 <__multiply+0x16>
 800f46c:	0023      	movs	r3, r4
 800f46e:	000c      	movs	r4, r1
 800f470:	001d      	movs	r5, r3
 800f472:	6927      	ldr	r7, [r4, #16]
 800f474:	692e      	ldr	r6, [r5, #16]
 800f476:	6861      	ldr	r1, [r4, #4]
 800f478:	19bb      	adds	r3, r7, r6
 800f47a:	9303      	str	r3, [sp, #12]
 800f47c:	68a3      	ldr	r3, [r4, #8]
 800f47e:	19ba      	adds	r2, r7, r6
 800f480:	4293      	cmp	r3, r2
 800f482:	da00      	bge.n	800f486 <__multiply+0x2a>
 800f484:	3101      	adds	r1, #1
 800f486:	f7ff fe89 	bl	800f19c <_Balloc>
 800f48a:	9002      	str	r0, [sp, #8]
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d106      	bne.n	800f49e <__multiply+0x42>
 800f490:	21b1      	movs	r1, #177	@ 0xb1
 800f492:	4b49      	ldr	r3, [pc, #292]	@ (800f5b8 <__multiply+0x15c>)
 800f494:	4849      	ldr	r0, [pc, #292]	@ (800f5bc <__multiply+0x160>)
 800f496:	9a02      	ldr	r2, [sp, #8]
 800f498:	0049      	lsls	r1, r1, #1
 800f49a:	f001 f8fb 	bl	8010694 <__assert_func>
 800f49e:	9b02      	ldr	r3, [sp, #8]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	3314      	adds	r3, #20
 800f4a4:	469c      	mov	ip, r3
 800f4a6:	19bb      	adds	r3, r7, r6
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4463      	add	r3, ip
 800f4ac:	9304      	str	r3, [sp, #16]
 800f4ae:	4663      	mov	r3, ip
 800f4b0:	9904      	ldr	r1, [sp, #16]
 800f4b2:	428b      	cmp	r3, r1
 800f4b4:	d32a      	bcc.n	800f50c <__multiply+0xb0>
 800f4b6:	0023      	movs	r3, r4
 800f4b8:	00bf      	lsls	r7, r7, #2
 800f4ba:	3314      	adds	r3, #20
 800f4bc:	3514      	adds	r5, #20
 800f4be:	9308      	str	r3, [sp, #32]
 800f4c0:	00b6      	lsls	r6, r6, #2
 800f4c2:	19db      	adds	r3, r3, r7
 800f4c4:	9305      	str	r3, [sp, #20]
 800f4c6:	19ab      	adds	r3, r5, r6
 800f4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4ca:	2304      	movs	r3, #4
 800f4cc:	9306      	str	r3, [sp, #24]
 800f4ce:	0023      	movs	r3, r4
 800f4d0:	9a05      	ldr	r2, [sp, #20]
 800f4d2:	3315      	adds	r3, #21
 800f4d4:	9501      	str	r5, [sp, #4]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d305      	bcc.n	800f4e6 <__multiply+0x8a>
 800f4da:	1b13      	subs	r3, r2, r4
 800f4dc:	3b15      	subs	r3, #21
 800f4de:	089b      	lsrs	r3, r3, #2
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	9306      	str	r3, [sp, #24]
 800f4e6:	9b01      	ldr	r3, [sp, #4]
 800f4e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d310      	bcc.n	800f510 <__multiply+0xb4>
 800f4ee:	9b03      	ldr	r3, [sp, #12]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dd05      	ble.n	800f500 <__multiply+0xa4>
 800f4f4:	9b04      	ldr	r3, [sp, #16]
 800f4f6:	3b04      	subs	r3, #4
 800f4f8:	9304      	str	r3, [sp, #16]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d056      	beq.n	800f5ae <__multiply+0x152>
 800f500:	9b02      	ldr	r3, [sp, #8]
 800f502:	9a03      	ldr	r2, [sp, #12]
 800f504:	0018      	movs	r0, r3
 800f506:	611a      	str	r2, [r3, #16]
 800f508:	b00b      	add	sp, #44	@ 0x2c
 800f50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f50c:	c304      	stmia	r3!, {r2}
 800f50e:	e7cf      	b.n	800f4b0 <__multiply+0x54>
 800f510:	9b01      	ldr	r3, [sp, #4]
 800f512:	6818      	ldr	r0, [r3, #0]
 800f514:	b280      	uxth	r0, r0
 800f516:	2800      	cmp	r0, #0
 800f518:	d01e      	beq.n	800f558 <__multiply+0xfc>
 800f51a:	4667      	mov	r7, ip
 800f51c:	2500      	movs	r5, #0
 800f51e:	9e08      	ldr	r6, [sp, #32]
 800f520:	ce02      	ldmia	r6!, {r1}
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	9307      	str	r3, [sp, #28]
 800f526:	b28b      	uxth	r3, r1
 800f528:	4343      	muls	r3, r0
 800f52a:	001a      	movs	r2, r3
 800f52c:	466b      	mov	r3, sp
 800f52e:	0c09      	lsrs	r1, r1, #16
 800f530:	8b9b      	ldrh	r3, [r3, #28]
 800f532:	4341      	muls	r1, r0
 800f534:	18d3      	adds	r3, r2, r3
 800f536:	9a07      	ldr	r2, [sp, #28]
 800f538:	195b      	adds	r3, r3, r5
 800f53a:	0c12      	lsrs	r2, r2, #16
 800f53c:	1889      	adds	r1, r1, r2
 800f53e:	0c1a      	lsrs	r2, r3, #16
 800f540:	188a      	adds	r2, r1, r2
 800f542:	b29b      	uxth	r3, r3
 800f544:	0c15      	lsrs	r5, r2, #16
 800f546:	0412      	lsls	r2, r2, #16
 800f548:	431a      	orrs	r2, r3
 800f54a:	9b05      	ldr	r3, [sp, #20]
 800f54c:	c704      	stmia	r7!, {r2}
 800f54e:	42b3      	cmp	r3, r6
 800f550:	d8e6      	bhi.n	800f520 <__multiply+0xc4>
 800f552:	4663      	mov	r3, ip
 800f554:	9a06      	ldr	r2, [sp, #24]
 800f556:	509d      	str	r5, [r3, r2]
 800f558:	9b01      	ldr	r3, [sp, #4]
 800f55a:	6818      	ldr	r0, [r3, #0]
 800f55c:	0c00      	lsrs	r0, r0, #16
 800f55e:	d020      	beq.n	800f5a2 <__multiply+0x146>
 800f560:	4663      	mov	r3, ip
 800f562:	0025      	movs	r5, r4
 800f564:	4661      	mov	r1, ip
 800f566:	2700      	movs	r7, #0
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3514      	adds	r5, #20
 800f56c:	682a      	ldr	r2, [r5, #0]
 800f56e:	680e      	ldr	r6, [r1, #0]
 800f570:	b292      	uxth	r2, r2
 800f572:	4342      	muls	r2, r0
 800f574:	0c36      	lsrs	r6, r6, #16
 800f576:	1992      	adds	r2, r2, r6
 800f578:	19d2      	adds	r2, r2, r7
 800f57a:	0416      	lsls	r6, r2, #16
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	431e      	orrs	r6, r3
 800f580:	600e      	str	r6, [r1, #0]
 800f582:	cd40      	ldmia	r5!, {r6}
 800f584:	684b      	ldr	r3, [r1, #4]
 800f586:	0c36      	lsrs	r6, r6, #16
 800f588:	4346      	muls	r6, r0
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	0c12      	lsrs	r2, r2, #16
 800f58e:	18f3      	adds	r3, r6, r3
 800f590:	189b      	adds	r3, r3, r2
 800f592:	9a05      	ldr	r2, [sp, #20]
 800f594:	0c1f      	lsrs	r7, r3, #16
 800f596:	3104      	adds	r1, #4
 800f598:	42aa      	cmp	r2, r5
 800f59a:	d8e7      	bhi.n	800f56c <__multiply+0x110>
 800f59c:	4662      	mov	r2, ip
 800f59e:	9906      	ldr	r1, [sp, #24]
 800f5a0:	5053      	str	r3, [r2, r1]
 800f5a2:	9b01      	ldr	r3, [sp, #4]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	9301      	str	r3, [sp, #4]
 800f5a8:	2304      	movs	r3, #4
 800f5aa:	449c      	add	ip, r3
 800f5ac:	e79b      	b.n	800f4e6 <__multiply+0x8a>
 800f5ae:	9b03      	ldr	r3, [sp, #12]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	9303      	str	r3, [sp, #12]
 800f5b4:	e79b      	b.n	800f4ee <__multiply+0x92>
 800f5b6:	46c0      	nop			@ (mov r8, r8)
 800f5b8:	08011b41 	.word	0x08011b41
 800f5bc:	08011bc9 	.word	0x08011bc9

0800f5c0 <__pow5mult>:
 800f5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5c2:	2303      	movs	r3, #3
 800f5c4:	0015      	movs	r5, r2
 800f5c6:	0007      	movs	r7, r0
 800f5c8:	000e      	movs	r6, r1
 800f5ca:	401a      	ands	r2, r3
 800f5cc:	421d      	tst	r5, r3
 800f5ce:	d008      	beq.n	800f5e2 <__pow5mult+0x22>
 800f5d0:	4925      	ldr	r1, [pc, #148]	@ (800f668 <__pow5mult+0xa8>)
 800f5d2:	3a01      	subs	r2, #1
 800f5d4:	0092      	lsls	r2, r2, #2
 800f5d6:	5852      	ldr	r2, [r2, r1]
 800f5d8:	2300      	movs	r3, #0
 800f5da:	0031      	movs	r1, r6
 800f5dc:	f7ff fe46 	bl	800f26c <__multadd>
 800f5e0:	0006      	movs	r6, r0
 800f5e2:	10ad      	asrs	r5, r5, #2
 800f5e4:	d03d      	beq.n	800f662 <__pow5mult+0xa2>
 800f5e6:	69fc      	ldr	r4, [r7, #28]
 800f5e8:	2c00      	cmp	r4, #0
 800f5ea:	d10f      	bne.n	800f60c <__pow5mult+0x4c>
 800f5ec:	2010      	movs	r0, #16
 800f5ee:	f001 f89d 	bl	801072c <malloc>
 800f5f2:	1e02      	subs	r2, r0, #0
 800f5f4:	61f8      	str	r0, [r7, #28]
 800f5f6:	d105      	bne.n	800f604 <__pow5mult+0x44>
 800f5f8:	21b4      	movs	r1, #180	@ 0xb4
 800f5fa:	4b1c      	ldr	r3, [pc, #112]	@ (800f66c <__pow5mult+0xac>)
 800f5fc:	481c      	ldr	r0, [pc, #112]	@ (800f670 <__pow5mult+0xb0>)
 800f5fe:	31ff      	adds	r1, #255	@ 0xff
 800f600:	f001 f848 	bl	8010694 <__assert_func>
 800f604:	6044      	str	r4, [r0, #4]
 800f606:	6084      	str	r4, [r0, #8]
 800f608:	6004      	str	r4, [r0, #0]
 800f60a:	60c4      	str	r4, [r0, #12]
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	689c      	ldr	r4, [r3, #8]
 800f610:	9301      	str	r3, [sp, #4]
 800f612:	2c00      	cmp	r4, #0
 800f614:	d108      	bne.n	800f628 <__pow5mult+0x68>
 800f616:	0038      	movs	r0, r7
 800f618:	4916      	ldr	r1, [pc, #88]	@ (800f674 <__pow5mult+0xb4>)
 800f61a:	f7ff ff07 	bl	800f42c <__i2b>
 800f61e:	9b01      	ldr	r3, [sp, #4]
 800f620:	0004      	movs	r4, r0
 800f622:	6098      	str	r0, [r3, #8]
 800f624:	2300      	movs	r3, #0
 800f626:	6003      	str	r3, [r0, #0]
 800f628:	2301      	movs	r3, #1
 800f62a:	421d      	tst	r5, r3
 800f62c:	d00a      	beq.n	800f644 <__pow5mult+0x84>
 800f62e:	0031      	movs	r1, r6
 800f630:	0022      	movs	r2, r4
 800f632:	0038      	movs	r0, r7
 800f634:	f7ff ff12 	bl	800f45c <__multiply>
 800f638:	0031      	movs	r1, r6
 800f63a:	9001      	str	r0, [sp, #4]
 800f63c:	0038      	movs	r0, r7
 800f63e:	f7ff fdf1 	bl	800f224 <_Bfree>
 800f642:	9e01      	ldr	r6, [sp, #4]
 800f644:	106d      	asrs	r5, r5, #1
 800f646:	d00c      	beq.n	800f662 <__pow5mult+0xa2>
 800f648:	6820      	ldr	r0, [r4, #0]
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d107      	bne.n	800f65e <__pow5mult+0x9e>
 800f64e:	0022      	movs	r2, r4
 800f650:	0021      	movs	r1, r4
 800f652:	0038      	movs	r0, r7
 800f654:	f7ff ff02 	bl	800f45c <__multiply>
 800f658:	2300      	movs	r3, #0
 800f65a:	6020      	str	r0, [r4, #0]
 800f65c:	6003      	str	r3, [r0, #0]
 800f65e:	0004      	movs	r4, r0
 800f660:	e7e2      	b.n	800f628 <__pow5mult+0x68>
 800f662:	0030      	movs	r0, r6
 800f664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f666:	46c0      	nop			@ (mov r8, r8)
 800f668:	08011c24 	.word	0x08011c24
 800f66c:	08011bb2 	.word	0x08011bb2
 800f670:	08011bc9 	.word	0x08011bc9
 800f674:	00000271 	.word	0x00000271

0800f678 <__lshift>:
 800f678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f67a:	000c      	movs	r4, r1
 800f67c:	0016      	movs	r6, r2
 800f67e:	6923      	ldr	r3, [r4, #16]
 800f680:	1157      	asrs	r7, r2, #5
 800f682:	b085      	sub	sp, #20
 800f684:	18fb      	adds	r3, r7, r3
 800f686:	9301      	str	r3, [sp, #4]
 800f688:	3301      	adds	r3, #1
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	6849      	ldr	r1, [r1, #4]
 800f68e:	68a3      	ldr	r3, [r4, #8]
 800f690:	9002      	str	r0, [sp, #8]
 800f692:	9a00      	ldr	r2, [sp, #0]
 800f694:	4293      	cmp	r3, r2
 800f696:	db10      	blt.n	800f6ba <__lshift+0x42>
 800f698:	9802      	ldr	r0, [sp, #8]
 800f69a:	f7ff fd7f 	bl	800f19c <_Balloc>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	0001      	movs	r1, r0
 800f6a2:	0005      	movs	r5, r0
 800f6a4:	001a      	movs	r2, r3
 800f6a6:	3114      	adds	r1, #20
 800f6a8:	4298      	cmp	r0, r3
 800f6aa:	d10c      	bne.n	800f6c6 <__lshift+0x4e>
 800f6ac:	21ef      	movs	r1, #239	@ 0xef
 800f6ae:	002a      	movs	r2, r5
 800f6b0:	4b25      	ldr	r3, [pc, #148]	@ (800f748 <__lshift+0xd0>)
 800f6b2:	4826      	ldr	r0, [pc, #152]	@ (800f74c <__lshift+0xd4>)
 800f6b4:	0049      	lsls	r1, r1, #1
 800f6b6:	f000 ffed 	bl	8010694 <__assert_func>
 800f6ba:	3101      	adds	r1, #1
 800f6bc:	005b      	lsls	r3, r3, #1
 800f6be:	e7e8      	b.n	800f692 <__lshift+0x1a>
 800f6c0:	0098      	lsls	r0, r3, #2
 800f6c2:	500a      	str	r2, [r1, r0]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	42bb      	cmp	r3, r7
 800f6c8:	dbfa      	blt.n	800f6c0 <__lshift+0x48>
 800f6ca:	43fb      	mvns	r3, r7
 800f6cc:	17db      	asrs	r3, r3, #31
 800f6ce:	401f      	ands	r7, r3
 800f6d0:	00bf      	lsls	r7, r7, #2
 800f6d2:	0023      	movs	r3, r4
 800f6d4:	201f      	movs	r0, #31
 800f6d6:	19c9      	adds	r1, r1, r7
 800f6d8:	0037      	movs	r7, r6
 800f6da:	6922      	ldr	r2, [r4, #16]
 800f6dc:	3314      	adds	r3, #20
 800f6de:	0092      	lsls	r2, r2, #2
 800f6e0:	189a      	adds	r2, r3, r2
 800f6e2:	4007      	ands	r7, r0
 800f6e4:	4206      	tst	r6, r0
 800f6e6:	d029      	beq.n	800f73c <__lshift+0xc4>
 800f6e8:	3001      	adds	r0, #1
 800f6ea:	1bc0      	subs	r0, r0, r7
 800f6ec:	9003      	str	r0, [sp, #12]
 800f6ee:	468c      	mov	ip, r1
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	681e      	ldr	r6, [r3, #0]
 800f6f4:	40be      	lsls	r6, r7
 800f6f6:	4306      	orrs	r6, r0
 800f6f8:	4660      	mov	r0, ip
 800f6fa:	c040      	stmia	r0!, {r6}
 800f6fc:	4684      	mov	ip, r0
 800f6fe:	9e03      	ldr	r6, [sp, #12]
 800f700:	cb01      	ldmia	r3!, {r0}
 800f702:	40f0      	lsrs	r0, r6
 800f704:	429a      	cmp	r2, r3
 800f706:	d8f4      	bhi.n	800f6f2 <__lshift+0x7a>
 800f708:	0026      	movs	r6, r4
 800f70a:	3615      	adds	r6, #21
 800f70c:	2304      	movs	r3, #4
 800f70e:	42b2      	cmp	r2, r6
 800f710:	d304      	bcc.n	800f71c <__lshift+0xa4>
 800f712:	1b13      	subs	r3, r2, r4
 800f714:	3b15      	subs	r3, #21
 800f716:	089b      	lsrs	r3, r3, #2
 800f718:	3301      	adds	r3, #1
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	50c8      	str	r0, [r1, r3]
 800f71e:	2800      	cmp	r0, #0
 800f720:	d002      	beq.n	800f728 <__lshift+0xb0>
 800f722:	9b01      	ldr	r3, [sp, #4]
 800f724:	3302      	adds	r3, #2
 800f726:	9300      	str	r3, [sp, #0]
 800f728:	9b00      	ldr	r3, [sp, #0]
 800f72a:	9802      	ldr	r0, [sp, #8]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	0021      	movs	r1, r4
 800f730:	612b      	str	r3, [r5, #16]
 800f732:	f7ff fd77 	bl	800f224 <_Bfree>
 800f736:	0028      	movs	r0, r5
 800f738:	b005      	add	sp, #20
 800f73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f73c:	cb01      	ldmia	r3!, {r0}
 800f73e:	c101      	stmia	r1!, {r0}
 800f740:	429a      	cmp	r2, r3
 800f742:	d8fb      	bhi.n	800f73c <__lshift+0xc4>
 800f744:	e7f0      	b.n	800f728 <__lshift+0xb0>
 800f746:	46c0      	nop			@ (mov r8, r8)
 800f748:	08011b41 	.word	0x08011b41
 800f74c:	08011bc9 	.word	0x08011bc9

0800f750 <__mcmp>:
 800f750:	b530      	push	{r4, r5, lr}
 800f752:	690b      	ldr	r3, [r1, #16]
 800f754:	6904      	ldr	r4, [r0, #16]
 800f756:	0002      	movs	r2, r0
 800f758:	1ae0      	subs	r0, r4, r3
 800f75a:	429c      	cmp	r4, r3
 800f75c:	d10f      	bne.n	800f77e <__mcmp+0x2e>
 800f75e:	3214      	adds	r2, #20
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	3114      	adds	r1, #20
 800f764:	0014      	movs	r4, r2
 800f766:	18c9      	adds	r1, r1, r3
 800f768:	18d2      	adds	r2, r2, r3
 800f76a:	3a04      	subs	r2, #4
 800f76c:	3904      	subs	r1, #4
 800f76e:	6815      	ldr	r5, [r2, #0]
 800f770:	680b      	ldr	r3, [r1, #0]
 800f772:	429d      	cmp	r5, r3
 800f774:	d004      	beq.n	800f780 <__mcmp+0x30>
 800f776:	2001      	movs	r0, #1
 800f778:	429d      	cmp	r5, r3
 800f77a:	d200      	bcs.n	800f77e <__mcmp+0x2e>
 800f77c:	3802      	subs	r0, #2
 800f77e:	bd30      	pop	{r4, r5, pc}
 800f780:	4294      	cmp	r4, r2
 800f782:	d3f2      	bcc.n	800f76a <__mcmp+0x1a>
 800f784:	e7fb      	b.n	800f77e <__mcmp+0x2e>
	...

0800f788 <__mdiff>:
 800f788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f78a:	000c      	movs	r4, r1
 800f78c:	b087      	sub	sp, #28
 800f78e:	9000      	str	r0, [sp, #0]
 800f790:	0011      	movs	r1, r2
 800f792:	0020      	movs	r0, r4
 800f794:	0017      	movs	r7, r2
 800f796:	f7ff ffdb 	bl	800f750 <__mcmp>
 800f79a:	1e05      	subs	r5, r0, #0
 800f79c:	d110      	bne.n	800f7c0 <__mdiff+0x38>
 800f79e:	0001      	movs	r1, r0
 800f7a0:	9800      	ldr	r0, [sp, #0]
 800f7a2:	f7ff fcfb 	bl	800f19c <_Balloc>
 800f7a6:	1e02      	subs	r2, r0, #0
 800f7a8:	d104      	bne.n	800f7b4 <__mdiff+0x2c>
 800f7aa:	4b40      	ldr	r3, [pc, #256]	@ (800f8ac <__mdiff+0x124>)
 800f7ac:	4840      	ldr	r0, [pc, #256]	@ (800f8b0 <__mdiff+0x128>)
 800f7ae:	4941      	ldr	r1, [pc, #260]	@ (800f8b4 <__mdiff+0x12c>)
 800f7b0:	f000 ff70 	bl	8010694 <__assert_func>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	6145      	str	r5, [r0, #20]
 800f7b8:	6103      	str	r3, [r0, #16]
 800f7ba:	0010      	movs	r0, r2
 800f7bc:	b007      	add	sp, #28
 800f7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7c0:	2600      	movs	r6, #0
 800f7c2:	42b0      	cmp	r0, r6
 800f7c4:	da03      	bge.n	800f7ce <__mdiff+0x46>
 800f7c6:	0023      	movs	r3, r4
 800f7c8:	003c      	movs	r4, r7
 800f7ca:	001f      	movs	r7, r3
 800f7cc:	3601      	adds	r6, #1
 800f7ce:	6861      	ldr	r1, [r4, #4]
 800f7d0:	9800      	ldr	r0, [sp, #0]
 800f7d2:	f7ff fce3 	bl	800f19c <_Balloc>
 800f7d6:	1e02      	subs	r2, r0, #0
 800f7d8:	d103      	bne.n	800f7e2 <__mdiff+0x5a>
 800f7da:	4b34      	ldr	r3, [pc, #208]	@ (800f8ac <__mdiff+0x124>)
 800f7dc:	4834      	ldr	r0, [pc, #208]	@ (800f8b0 <__mdiff+0x128>)
 800f7de:	4936      	ldr	r1, [pc, #216]	@ (800f8b8 <__mdiff+0x130>)
 800f7e0:	e7e6      	b.n	800f7b0 <__mdiff+0x28>
 800f7e2:	6923      	ldr	r3, [r4, #16]
 800f7e4:	3414      	adds	r4, #20
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	18e3      	adds	r3, r4, r3
 800f7ec:	0021      	movs	r1, r4
 800f7ee:	9401      	str	r4, [sp, #4]
 800f7f0:	003c      	movs	r4, r7
 800f7f2:	9302      	str	r3, [sp, #8]
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	3414      	adds	r4, #20
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	18e3      	adds	r3, r4, r3
 800f7fc:	9303      	str	r3, [sp, #12]
 800f7fe:	0003      	movs	r3, r0
 800f800:	60c6      	str	r6, [r0, #12]
 800f802:	468c      	mov	ip, r1
 800f804:	2000      	movs	r0, #0
 800f806:	3314      	adds	r3, #20
 800f808:	9304      	str	r3, [sp, #16]
 800f80a:	9305      	str	r3, [sp, #20]
 800f80c:	4663      	mov	r3, ip
 800f80e:	cb20      	ldmia	r3!, {r5}
 800f810:	b2a9      	uxth	r1, r5
 800f812:	000e      	movs	r6, r1
 800f814:	469c      	mov	ip, r3
 800f816:	cc08      	ldmia	r4!, {r3}
 800f818:	0c2d      	lsrs	r5, r5, #16
 800f81a:	b299      	uxth	r1, r3
 800f81c:	1a71      	subs	r1, r6, r1
 800f81e:	1809      	adds	r1, r1, r0
 800f820:	0c1b      	lsrs	r3, r3, #16
 800f822:	1408      	asrs	r0, r1, #16
 800f824:	1aeb      	subs	r3, r5, r3
 800f826:	181b      	adds	r3, r3, r0
 800f828:	1418      	asrs	r0, r3, #16
 800f82a:	b289      	uxth	r1, r1
 800f82c:	041b      	lsls	r3, r3, #16
 800f82e:	4319      	orrs	r1, r3
 800f830:	9b05      	ldr	r3, [sp, #20]
 800f832:	c302      	stmia	r3!, {r1}
 800f834:	9305      	str	r3, [sp, #20]
 800f836:	9b03      	ldr	r3, [sp, #12]
 800f838:	42a3      	cmp	r3, r4
 800f83a:	d8e7      	bhi.n	800f80c <__mdiff+0x84>
 800f83c:	0039      	movs	r1, r7
 800f83e:	9c03      	ldr	r4, [sp, #12]
 800f840:	3115      	adds	r1, #21
 800f842:	2304      	movs	r3, #4
 800f844:	428c      	cmp	r4, r1
 800f846:	d304      	bcc.n	800f852 <__mdiff+0xca>
 800f848:	1be3      	subs	r3, r4, r7
 800f84a:	3b15      	subs	r3, #21
 800f84c:	089b      	lsrs	r3, r3, #2
 800f84e:	3301      	adds	r3, #1
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	9901      	ldr	r1, [sp, #4]
 800f854:	18cd      	adds	r5, r1, r3
 800f856:	9904      	ldr	r1, [sp, #16]
 800f858:	002e      	movs	r6, r5
 800f85a:	18cb      	adds	r3, r1, r3
 800f85c:	001f      	movs	r7, r3
 800f85e:	9902      	ldr	r1, [sp, #8]
 800f860:	428e      	cmp	r6, r1
 800f862:	d311      	bcc.n	800f888 <__mdiff+0x100>
 800f864:	9c02      	ldr	r4, [sp, #8]
 800f866:	1ee9      	subs	r1, r5, #3
 800f868:	2000      	movs	r0, #0
 800f86a:	428c      	cmp	r4, r1
 800f86c:	d304      	bcc.n	800f878 <__mdiff+0xf0>
 800f86e:	0021      	movs	r1, r4
 800f870:	3103      	adds	r1, #3
 800f872:	1b49      	subs	r1, r1, r5
 800f874:	0889      	lsrs	r1, r1, #2
 800f876:	0088      	lsls	r0, r1, #2
 800f878:	181b      	adds	r3, r3, r0
 800f87a:	3b04      	subs	r3, #4
 800f87c:	6819      	ldr	r1, [r3, #0]
 800f87e:	2900      	cmp	r1, #0
 800f880:	d010      	beq.n	800f8a4 <__mdiff+0x11c>
 800f882:	9b00      	ldr	r3, [sp, #0]
 800f884:	6113      	str	r3, [r2, #16]
 800f886:	e798      	b.n	800f7ba <__mdiff+0x32>
 800f888:	4684      	mov	ip, r0
 800f88a:	ce02      	ldmia	r6!, {r1}
 800f88c:	b288      	uxth	r0, r1
 800f88e:	4460      	add	r0, ip
 800f890:	1400      	asrs	r0, r0, #16
 800f892:	0c0c      	lsrs	r4, r1, #16
 800f894:	1904      	adds	r4, r0, r4
 800f896:	4461      	add	r1, ip
 800f898:	1420      	asrs	r0, r4, #16
 800f89a:	b289      	uxth	r1, r1
 800f89c:	0424      	lsls	r4, r4, #16
 800f89e:	4321      	orrs	r1, r4
 800f8a0:	c702      	stmia	r7!, {r1}
 800f8a2:	e7dc      	b.n	800f85e <__mdiff+0xd6>
 800f8a4:	9900      	ldr	r1, [sp, #0]
 800f8a6:	3901      	subs	r1, #1
 800f8a8:	9100      	str	r1, [sp, #0]
 800f8aa:	e7e6      	b.n	800f87a <__mdiff+0xf2>
 800f8ac:	08011b41 	.word	0x08011b41
 800f8b0:	08011bc9 	.word	0x08011bc9
 800f8b4:	00000237 	.word	0x00000237
 800f8b8:	00000245 	.word	0x00000245

0800f8bc <__ulp>:
 800f8bc:	b510      	push	{r4, lr}
 800f8be:	2400      	movs	r4, #0
 800f8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f8f4 <__ulp+0x38>)
 800f8c2:	4a0d      	ldr	r2, [pc, #52]	@ (800f8f8 <__ulp+0x3c>)
 800f8c4:	400b      	ands	r3, r1
 800f8c6:	189b      	adds	r3, r3, r2
 800f8c8:	42a3      	cmp	r3, r4
 800f8ca:	dc06      	bgt.n	800f8da <__ulp+0x1e>
 800f8cc:	425b      	negs	r3, r3
 800f8ce:	151a      	asrs	r2, r3, #20
 800f8d0:	2a13      	cmp	r2, #19
 800f8d2:	dc05      	bgt.n	800f8e0 <__ulp+0x24>
 800f8d4:	2380      	movs	r3, #128	@ 0x80
 800f8d6:	031b      	lsls	r3, r3, #12
 800f8d8:	4113      	asrs	r3, r2
 800f8da:	0019      	movs	r1, r3
 800f8dc:	0020      	movs	r0, r4
 800f8de:	bd10      	pop	{r4, pc}
 800f8e0:	3a14      	subs	r2, #20
 800f8e2:	2401      	movs	r4, #1
 800f8e4:	2a1e      	cmp	r2, #30
 800f8e6:	dc02      	bgt.n	800f8ee <__ulp+0x32>
 800f8e8:	2480      	movs	r4, #128	@ 0x80
 800f8ea:	0624      	lsls	r4, r4, #24
 800f8ec:	40d4      	lsrs	r4, r2
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e7f3      	b.n	800f8da <__ulp+0x1e>
 800f8f2:	46c0      	nop			@ (mov r8, r8)
 800f8f4:	7ff00000 	.word	0x7ff00000
 800f8f8:	fcc00000 	.word	0xfcc00000

0800f8fc <__b2d>:
 800f8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8fe:	0006      	movs	r6, r0
 800f900:	6903      	ldr	r3, [r0, #16]
 800f902:	3614      	adds	r6, #20
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	18f3      	adds	r3, r6, r3
 800f908:	1f1d      	subs	r5, r3, #4
 800f90a:	682c      	ldr	r4, [r5, #0]
 800f90c:	000f      	movs	r7, r1
 800f90e:	0020      	movs	r0, r4
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	f7ff fd3b 	bl	800f38c <__hi0bits>
 800f916:	2220      	movs	r2, #32
 800f918:	1a12      	subs	r2, r2, r0
 800f91a:	603a      	str	r2, [r7, #0]
 800f91c:	0003      	movs	r3, r0
 800f91e:	4a1c      	ldr	r2, [pc, #112]	@ (800f990 <__b2d+0x94>)
 800f920:	280a      	cmp	r0, #10
 800f922:	dc15      	bgt.n	800f950 <__b2d+0x54>
 800f924:	210b      	movs	r1, #11
 800f926:	0027      	movs	r7, r4
 800f928:	1a09      	subs	r1, r1, r0
 800f92a:	40cf      	lsrs	r7, r1
 800f92c:	433a      	orrs	r2, r7
 800f92e:	468c      	mov	ip, r1
 800f930:	0011      	movs	r1, r2
 800f932:	2200      	movs	r2, #0
 800f934:	42ae      	cmp	r6, r5
 800f936:	d202      	bcs.n	800f93e <__b2d+0x42>
 800f938:	9a01      	ldr	r2, [sp, #4]
 800f93a:	3a08      	subs	r2, #8
 800f93c:	6812      	ldr	r2, [r2, #0]
 800f93e:	3315      	adds	r3, #21
 800f940:	409c      	lsls	r4, r3
 800f942:	4663      	mov	r3, ip
 800f944:	0027      	movs	r7, r4
 800f946:	40da      	lsrs	r2, r3
 800f948:	4317      	orrs	r7, r2
 800f94a:	0038      	movs	r0, r7
 800f94c:	b003      	add	sp, #12
 800f94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f950:	2700      	movs	r7, #0
 800f952:	42ae      	cmp	r6, r5
 800f954:	d202      	bcs.n	800f95c <__b2d+0x60>
 800f956:	9d01      	ldr	r5, [sp, #4]
 800f958:	3d08      	subs	r5, #8
 800f95a:	682f      	ldr	r7, [r5, #0]
 800f95c:	210b      	movs	r1, #11
 800f95e:	4249      	negs	r1, r1
 800f960:	468c      	mov	ip, r1
 800f962:	449c      	add	ip, r3
 800f964:	2b0b      	cmp	r3, #11
 800f966:	d010      	beq.n	800f98a <__b2d+0x8e>
 800f968:	4661      	mov	r1, ip
 800f96a:	2320      	movs	r3, #32
 800f96c:	408c      	lsls	r4, r1
 800f96e:	1a5b      	subs	r3, r3, r1
 800f970:	0039      	movs	r1, r7
 800f972:	40d9      	lsrs	r1, r3
 800f974:	430c      	orrs	r4, r1
 800f976:	4322      	orrs	r2, r4
 800f978:	0011      	movs	r1, r2
 800f97a:	2200      	movs	r2, #0
 800f97c:	42b5      	cmp	r5, r6
 800f97e:	d901      	bls.n	800f984 <__b2d+0x88>
 800f980:	3d04      	subs	r5, #4
 800f982:	682a      	ldr	r2, [r5, #0]
 800f984:	4664      	mov	r4, ip
 800f986:	40a7      	lsls	r7, r4
 800f988:	e7dd      	b.n	800f946 <__b2d+0x4a>
 800f98a:	4322      	orrs	r2, r4
 800f98c:	0011      	movs	r1, r2
 800f98e:	e7dc      	b.n	800f94a <__b2d+0x4e>
 800f990:	3ff00000 	.word	0x3ff00000

0800f994 <__d2b>:
 800f994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f996:	2101      	movs	r1, #1
 800f998:	0016      	movs	r6, r2
 800f99a:	001f      	movs	r7, r3
 800f99c:	f7ff fbfe 	bl	800f19c <_Balloc>
 800f9a0:	1e04      	subs	r4, r0, #0
 800f9a2:	d105      	bne.n	800f9b0 <__d2b+0x1c>
 800f9a4:	0022      	movs	r2, r4
 800f9a6:	4b25      	ldr	r3, [pc, #148]	@ (800fa3c <__d2b+0xa8>)
 800f9a8:	4825      	ldr	r0, [pc, #148]	@ (800fa40 <__d2b+0xac>)
 800f9aa:	4926      	ldr	r1, [pc, #152]	@ (800fa44 <__d2b+0xb0>)
 800f9ac:	f000 fe72 	bl	8010694 <__assert_func>
 800f9b0:	033b      	lsls	r3, r7, #12
 800f9b2:	007d      	lsls	r5, r7, #1
 800f9b4:	0b1b      	lsrs	r3, r3, #12
 800f9b6:	0d6d      	lsrs	r5, r5, #21
 800f9b8:	d002      	beq.n	800f9c0 <__d2b+0x2c>
 800f9ba:	2280      	movs	r2, #128	@ 0x80
 800f9bc:	0352      	lsls	r2, r2, #13
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	9301      	str	r3, [sp, #4]
 800f9c2:	2e00      	cmp	r6, #0
 800f9c4:	d025      	beq.n	800fa12 <__d2b+0x7e>
 800f9c6:	4668      	mov	r0, sp
 800f9c8:	9600      	str	r6, [sp, #0]
 800f9ca:	f7ff fd00 	bl	800f3ce <__lo0bits>
 800f9ce:	9b01      	ldr	r3, [sp, #4]
 800f9d0:	9900      	ldr	r1, [sp, #0]
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d01b      	beq.n	800fa0e <__d2b+0x7a>
 800f9d6:	2220      	movs	r2, #32
 800f9d8:	001e      	movs	r6, r3
 800f9da:	1a12      	subs	r2, r2, r0
 800f9dc:	4096      	lsls	r6, r2
 800f9de:	0032      	movs	r2, r6
 800f9e0:	40c3      	lsrs	r3, r0
 800f9e2:	430a      	orrs	r2, r1
 800f9e4:	6162      	str	r2, [r4, #20]
 800f9e6:	9301      	str	r3, [sp, #4]
 800f9e8:	9e01      	ldr	r6, [sp, #4]
 800f9ea:	61a6      	str	r6, [r4, #24]
 800f9ec:	1e73      	subs	r3, r6, #1
 800f9ee:	419e      	sbcs	r6, r3
 800f9f0:	3601      	adds	r6, #1
 800f9f2:	6126      	str	r6, [r4, #16]
 800f9f4:	2d00      	cmp	r5, #0
 800f9f6:	d014      	beq.n	800fa22 <__d2b+0x8e>
 800f9f8:	2635      	movs	r6, #53	@ 0x35
 800f9fa:	4b13      	ldr	r3, [pc, #76]	@ (800fa48 <__d2b+0xb4>)
 800f9fc:	18ed      	adds	r5, r5, r3
 800f9fe:	9b08      	ldr	r3, [sp, #32]
 800fa00:	182d      	adds	r5, r5, r0
 800fa02:	601d      	str	r5, [r3, #0]
 800fa04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa06:	1a36      	subs	r6, r6, r0
 800fa08:	601e      	str	r6, [r3, #0]
 800fa0a:	0020      	movs	r0, r4
 800fa0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa0e:	6161      	str	r1, [r4, #20]
 800fa10:	e7ea      	b.n	800f9e8 <__d2b+0x54>
 800fa12:	a801      	add	r0, sp, #4
 800fa14:	f7ff fcdb 	bl	800f3ce <__lo0bits>
 800fa18:	9b01      	ldr	r3, [sp, #4]
 800fa1a:	2601      	movs	r6, #1
 800fa1c:	6163      	str	r3, [r4, #20]
 800fa1e:	3020      	adds	r0, #32
 800fa20:	e7e7      	b.n	800f9f2 <__d2b+0x5e>
 800fa22:	4b0a      	ldr	r3, [pc, #40]	@ (800fa4c <__d2b+0xb8>)
 800fa24:	18c0      	adds	r0, r0, r3
 800fa26:	9b08      	ldr	r3, [sp, #32]
 800fa28:	6018      	str	r0, [r3, #0]
 800fa2a:	4b09      	ldr	r3, [pc, #36]	@ (800fa50 <__d2b+0xbc>)
 800fa2c:	18f3      	adds	r3, r6, r3
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	18e3      	adds	r3, r4, r3
 800fa32:	6958      	ldr	r0, [r3, #20]
 800fa34:	f7ff fcaa 	bl	800f38c <__hi0bits>
 800fa38:	0176      	lsls	r6, r6, #5
 800fa3a:	e7e3      	b.n	800fa04 <__d2b+0x70>
 800fa3c:	08011b41 	.word	0x08011b41
 800fa40:	08011bc9 	.word	0x08011bc9
 800fa44:	0000030f 	.word	0x0000030f
 800fa48:	fffffbcd 	.word	0xfffffbcd
 800fa4c:	fffffbce 	.word	0xfffffbce
 800fa50:	3fffffff 	.word	0x3fffffff

0800fa54 <__ratio>:
 800fa54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa56:	b087      	sub	sp, #28
 800fa58:	000f      	movs	r7, r1
 800fa5a:	a904      	add	r1, sp, #16
 800fa5c:	0006      	movs	r6, r0
 800fa5e:	f7ff ff4d 	bl	800f8fc <__b2d>
 800fa62:	9000      	str	r0, [sp, #0]
 800fa64:	9101      	str	r1, [sp, #4]
 800fa66:	9b00      	ldr	r3, [sp, #0]
 800fa68:	9c01      	ldr	r4, [sp, #4]
 800fa6a:	0038      	movs	r0, r7
 800fa6c:	a905      	add	r1, sp, #20
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	9403      	str	r4, [sp, #12]
 800fa72:	f7ff ff43 	bl	800f8fc <__b2d>
 800fa76:	000d      	movs	r5, r1
 800fa78:	0002      	movs	r2, r0
 800fa7a:	000b      	movs	r3, r1
 800fa7c:	6930      	ldr	r0, [r6, #16]
 800fa7e:	6939      	ldr	r1, [r7, #16]
 800fa80:	9e04      	ldr	r6, [sp, #16]
 800fa82:	1a40      	subs	r0, r0, r1
 800fa84:	9905      	ldr	r1, [sp, #20]
 800fa86:	0140      	lsls	r0, r0, #5
 800fa88:	1a71      	subs	r1, r6, r1
 800fa8a:	1841      	adds	r1, r0, r1
 800fa8c:	0508      	lsls	r0, r1, #20
 800fa8e:	2900      	cmp	r1, #0
 800fa90:	dd08      	ble.n	800faa4 <__ratio+0x50>
 800fa92:	9901      	ldr	r1, [sp, #4]
 800fa94:	1841      	adds	r1, r0, r1
 800fa96:	9103      	str	r1, [sp, #12]
 800fa98:	9802      	ldr	r0, [sp, #8]
 800fa9a:	9903      	ldr	r1, [sp, #12]
 800fa9c:	f7f2 f94a 	bl	8001d34 <__aeabi_ddiv>
 800faa0:	b007      	add	sp, #28
 800faa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faa4:	1a2b      	subs	r3, r5, r0
 800faa6:	e7f7      	b.n	800fa98 <__ratio+0x44>

0800faa8 <__copybits>:
 800faa8:	b570      	push	{r4, r5, r6, lr}
 800faaa:	0014      	movs	r4, r2
 800faac:	0005      	movs	r5, r0
 800faae:	3901      	subs	r1, #1
 800fab0:	6913      	ldr	r3, [r2, #16]
 800fab2:	1149      	asrs	r1, r1, #5
 800fab4:	3101      	adds	r1, #1
 800fab6:	0089      	lsls	r1, r1, #2
 800fab8:	3414      	adds	r4, #20
 800faba:	009b      	lsls	r3, r3, #2
 800fabc:	1841      	adds	r1, r0, r1
 800fabe:	18e3      	adds	r3, r4, r3
 800fac0:	42a3      	cmp	r3, r4
 800fac2:	d80d      	bhi.n	800fae0 <__copybits+0x38>
 800fac4:	0014      	movs	r4, r2
 800fac6:	3411      	adds	r4, #17
 800fac8:	2500      	movs	r5, #0
 800faca:	429c      	cmp	r4, r3
 800facc:	d803      	bhi.n	800fad6 <__copybits+0x2e>
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	3b11      	subs	r3, #17
 800fad2:	089b      	lsrs	r3, r3, #2
 800fad4:	009d      	lsls	r5, r3, #2
 800fad6:	2300      	movs	r3, #0
 800fad8:	1940      	adds	r0, r0, r5
 800fada:	4281      	cmp	r1, r0
 800fadc:	d803      	bhi.n	800fae6 <__copybits+0x3e>
 800fade:	bd70      	pop	{r4, r5, r6, pc}
 800fae0:	cc40      	ldmia	r4!, {r6}
 800fae2:	c540      	stmia	r5!, {r6}
 800fae4:	e7ec      	b.n	800fac0 <__copybits+0x18>
 800fae6:	c008      	stmia	r0!, {r3}
 800fae8:	e7f7      	b.n	800fada <__copybits+0x32>

0800faea <__any_on>:
 800faea:	0002      	movs	r2, r0
 800faec:	6900      	ldr	r0, [r0, #16]
 800faee:	b510      	push	{r4, lr}
 800faf0:	3214      	adds	r2, #20
 800faf2:	114b      	asrs	r3, r1, #5
 800faf4:	4298      	cmp	r0, r3
 800faf6:	db13      	blt.n	800fb20 <__any_on+0x36>
 800faf8:	dd0c      	ble.n	800fb14 <__any_on+0x2a>
 800fafa:	241f      	movs	r4, #31
 800fafc:	0008      	movs	r0, r1
 800fafe:	4020      	ands	r0, r4
 800fb00:	4221      	tst	r1, r4
 800fb02:	d007      	beq.n	800fb14 <__any_on+0x2a>
 800fb04:	0099      	lsls	r1, r3, #2
 800fb06:	588c      	ldr	r4, [r1, r2]
 800fb08:	0021      	movs	r1, r4
 800fb0a:	40c1      	lsrs	r1, r0
 800fb0c:	4081      	lsls	r1, r0
 800fb0e:	2001      	movs	r0, #1
 800fb10:	428c      	cmp	r4, r1
 800fb12:	d104      	bne.n	800fb1e <__any_on+0x34>
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	18d3      	adds	r3, r2, r3
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d803      	bhi.n	800fb24 <__any_on+0x3a>
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	bd10      	pop	{r4, pc}
 800fb20:	0003      	movs	r3, r0
 800fb22:	e7f7      	b.n	800fb14 <__any_on+0x2a>
 800fb24:	3b04      	subs	r3, #4
 800fb26:	6819      	ldr	r1, [r3, #0]
 800fb28:	2900      	cmp	r1, #0
 800fb2a:	d0f5      	beq.n	800fb18 <__any_on+0x2e>
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	e7f6      	b.n	800fb1e <__any_on+0x34>

0800fb30 <__ascii_wctomb>:
 800fb30:	0003      	movs	r3, r0
 800fb32:	1e08      	subs	r0, r1, #0
 800fb34:	d005      	beq.n	800fb42 <__ascii_wctomb+0x12>
 800fb36:	2aff      	cmp	r2, #255	@ 0xff
 800fb38:	d904      	bls.n	800fb44 <__ascii_wctomb+0x14>
 800fb3a:	228a      	movs	r2, #138	@ 0x8a
 800fb3c:	2001      	movs	r0, #1
 800fb3e:	601a      	str	r2, [r3, #0]
 800fb40:	4240      	negs	r0, r0
 800fb42:	4770      	bx	lr
 800fb44:	2001      	movs	r0, #1
 800fb46:	700a      	strb	r2, [r1, #0]
 800fb48:	e7fb      	b.n	800fb42 <__ascii_wctomb+0x12>
	...

0800fb4c <__ssputs_r>:
 800fb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb4e:	688e      	ldr	r6, [r1, #8]
 800fb50:	b085      	sub	sp, #20
 800fb52:	001f      	movs	r7, r3
 800fb54:	000c      	movs	r4, r1
 800fb56:	680b      	ldr	r3, [r1, #0]
 800fb58:	9002      	str	r0, [sp, #8]
 800fb5a:	9203      	str	r2, [sp, #12]
 800fb5c:	42be      	cmp	r6, r7
 800fb5e:	d830      	bhi.n	800fbc2 <__ssputs_r+0x76>
 800fb60:	210c      	movs	r1, #12
 800fb62:	5e62      	ldrsh	r2, [r4, r1]
 800fb64:	2190      	movs	r1, #144	@ 0x90
 800fb66:	00c9      	lsls	r1, r1, #3
 800fb68:	420a      	tst	r2, r1
 800fb6a:	d028      	beq.n	800fbbe <__ssputs_r+0x72>
 800fb6c:	2003      	movs	r0, #3
 800fb6e:	6921      	ldr	r1, [r4, #16]
 800fb70:	1a5b      	subs	r3, r3, r1
 800fb72:	9301      	str	r3, [sp, #4]
 800fb74:	6963      	ldr	r3, [r4, #20]
 800fb76:	4343      	muls	r3, r0
 800fb78:	9801      	ldr	r0, [sp, #4]
 800fb7a:	0fdd      	lsrs	r5, r3, #31
 800fb7c:	18ed      	adds	r5, r5, r3
 800fb7e:	1c7b      	adds	r3, r7, #1
 800fb80:	181b      	adds	r3, r3, r0
 800fb82:	106d      	asrs	r5, r5, #1
 800fb84:	42ab      	cmp	r3, r5
 800fb86:	d900      	bls.n	800fb8a <__ssputs_r+0x3e>
 800fb88:	001d      	movs	r5, r3
 800fb8a:	0552      	lsls	r2, r2, #21
 800fb8c:	d528      	bpl.n	800fbe0 <__ssputs_r+0x94>
 800fb8e:	0029      	movs	r1, r5
 800fb90:	9802      	ldr	r0, [sp, #8]
 800fb92:	f7ff fa61 	bl	800f058 <_malloc_r>
 800fb96:	1e06      	subs	r6, r0, #0
 800fb98:	d02c      	beq.n	800fbf4 <__ssputs_r+0xa8>
 800fb9a:	9a01      	ldr	r2, [sp, #4]
 800fb9c:	6921      	ldr	r1, [r4, #16]
 800fb9e:	f7fe fe86 	bl	800e8ae <memcpy>
 800fba2:	89a2      	ldrh	r2, [r4, #12]
 800fba4:	4b18      	ldr	r3, [pc, #96]	@ (800fc08 <__ssputs_r+0xbc>)
 800fba6:	401a      	ands	r2, r3
 800fba8:	2380      	movs	r3, #128	@ 0x80
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	81a3      	strh	r3, [r4, #12]
 800fbae:	9b01      	ldr	r3, [sp, #4]
 800fbb0:	6126      	str	r6, [r4, #16]
 800fbb2:	18f6      	adds	r6, r6, r3
 800fbb4:	6026      	str	r6, [r4, #0]
 800fbb6:	003e      	movs	r6, r7
 800fbb8:	6165      	str	r5, [r4, #20]
 800fbba:	1aed      	subs	r5, r5, r3
 800fbbc:	60a5      	str	r5, [r4, #8]
 800fbbe:	42be      	cmp	r6, r7
 800fbc0:	d900      	bls.n	800fbc4 <__ssputs_r+0x78>
 800fbc2:	003e      	movs	r6, r7
 800fbc4:	0032      	movs	r2, r6
 800fbc6:	9903      	ldr	r1, [sp, #12]
 800fbc8:	6820      	ldr	r0, [r4, #0]
 800fbca:	f000 fd31 	bl	8010630 <memmove>
 800fbce:	2000      	movs	r0, #0
 800fbd0:	68a3      	ldr	r3, [r4, #8]
 800fbd2:	1b9b      	subs	r3, r3, r6
 800fbd4:	60a3      	str	r3, [r4, #8]
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	199b      	adds	r3, r3, r6
 800fbda:	6023      	str	r3, [r4, #0]
 800fbdc:	b005      	add	sp, #20
 800fbde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbe0:	002a      	movs	r2, r5
 800fbe2:	9802      	ldr	r0, [sp, #8]
 800fbe4:	f000 fdac 	bl	8010740 <_realloc_r>
 800fbe8:	1e06      	subs	r6, r0, #0
 800fbea:	d1e0      	bne.n	800fbae <__ssputs_r+0x62>
 800fbec:	6921      	ldr	r1, [r4, #16]
 800fbee:	9802      	ldr	r0, [sp, #8]
 800fbf0:	f7fe fe6c 	bl	800e8cc <_free_r>
 800fbf4:	230c      	movs	r3, #12
 800fbf6:	2001      	movs	r0, #1
 800fbf8:	9a02      	ldr	r2, [sp, #8]
 800fbfa:	4240      	negs	r0, r0
 800fbfc:	6013      	str	r3, [r2, #0]
 800fbfe:	89a2      	ldrh	r2, [r4, #12]
 800fc00:	3334      	adds	r3, #52	@ 0x34
 800fc02:	4313      	orrs	r3, r2
 800fc04:	81a3      	strh	r3, [r4, #12]
 800fc06:	e7e9      	b.n	800fbdc <__ssputs_r+0x90>
 800fc08:	fffffb7f 	.word	0xfffffb7f

0800fc0c <_svfiprintf_r>:
 800fc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc0e:	b0a1      	sub	sp, #132	@ 0x84
 800fc10:	9003      	str	r0, [sp, #12]
 800fc12:	001d      	movs	r5, r3
 800fc14:	898b      	ldrh	r3, [r1, #12]
 800fc16:	000f      	movs	r7, r1
 800fc18:	0016      	movs	r6, r2
 800fc1a:	061b      	lsls	r3, r3, #24
 800fc1c:	d511      	bpl.n	800fc42 <_svfiprintf_r+0x36>
 800fc1e:	690b      	ldr	r3, [r1, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d10e      	bne.n	800fc42 <_svfiprintf_r+0x36>
 800fc24:	2140      	movs	r1, #64	@ 0x40
 800fc26:	f7ff fa17 	bl	800f058 <_malloc_r>
 800fc2a:	6038      	str	r0, [r7, #0]
 800fc2c:	6138      	str	r0, [r7, #16]
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	d105      	bne.n	800fc3e <_svfiprintf_r+0x32>
 800fc32:	230c      	movs	r3, #12
 800fc34:	9a03      	ldr	r2, [sp, #12]
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	2001      	movs	r0, #1
 800fc3a:	4240      	negs	r0, r0
 800fc3c:	e0cf      	b.n	800fdde <_svfiprintf_r+0x1d2>
 800fc3e:	2340      	movs	r3, #64	@ 0x40
 800fc40:	617b      	str	r3, [r7, #20]
 800fc42:	2300      	movs	r3, #0
 800fc44:	ac08      	add	r4, sp, #32
 800fc46:	6163      	str	r3, [r4, #20]
 800fc48:	3320      	adds	r3, #32
 800fc4a:	7663      	strb	r3, [r4, #25]
 800fc4c:	3310      	adds	r3, #16
 800fc4e:	76a3      	strb	r3, [r4, #26]
 800fc50:	9507      	str	r5, [sp, #28]
 800fc52:	0035      	movs	r5, r6
 800fc54:	782b      	ldrb	r3, [r5, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d001      	beq.n	800fc5e <_svfiprintf_r+0x52>
 800fc5a:	2b25      	cmp	r3, #37	@ 0x25
 800fc5c:	d148      	bne.n	800fcf0 <_svfiprintf_r+0xe4>
 800fc5e:	1bab      	subs	r3, r5, r6
 800fc60:	9305      	str	r3, [sp, #20]
 800fc62:	42b5      	cmp	r5, r6
 800fc64:	d00b      	beq.n	800fc7e <_svfiprintf_r+0x72>
 800fc66:	0032      	movs	r2, r6
 800fc68:	0039      	movs	r1, r7
 800fc6a:	9803      	ldr	r0, [sp, #12]
 800fc6c:	f7ff ff6e 	bl	800fb4c <__ssputs_r>
 800fc70:	3001      	adds	r0, #1
 800fc72:	d100      	bne.n	800fc76 <_svfiprintf_r+0x6a>
 800fc74:	e0ae      	b.n	800fdd4 <_svfiprintf_r+0x1c8>
 800fc76:	6963      	ldr	r3, [r4, #20]
 800fc78:	9a05      	ldr	r2, [sp, #20]
 800fc7a:	189b      	adds	r3, r3, r2
 800fc7c:	6163      	str	r3, [r4, #20]
 800fc7e:	782b      	ldrb	r3, [r5, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d100      	bne.n	800fc86 <_svfiprintf_r+0x7a>
 800fc84:	e0a6      	b.n	800fdd4 <_svfiprintf_r+0x1c8>
 800fc86:	2201      	movs	r2, #1
 800fc88:	2300      	movs	r3, #0
 800fc8a:	4252      	negs	r2, r2
 800fc8c:	6062      	str	r2, [r4, #4]
 800fc8e:	a904      	add	r1, sp, #16
 800fc90:	3254      	adds	r2, #84	@ 0x54
 800fc92:	1852      	adds	r2, r2, r1
 800fc94:	1c6e      	adds	r6, r5, #1
 800fc96:	6023      	str	r3, [r4, #0]
 800fc98:	60e3      	str	r3, [r4, #12]
 800fc9a:	60a3      	str	r3, [r4, #8]
 800fc9c:	7013      	strb	r3, [r2, #0]
 800fc9e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fca0:	4b54      	ldr	r3, [pc, #336]	@ (800fdf4 <_svfiprintf_r+0x1e8>)
 800fca2:	2205      	movs	r2, #5
 800fca4:	0018      	movs	r0, r3
 800fca6:	7831      	ldrb	r1, [r6, #0]
 800fca8:	9305      	str	r3, [sp, #20]
 800fcaa:	f000 fce7 	bl	801067c <memchr>
 800fcae:	1c75      	adds	r5, r6, #1
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	d11f      	bne.n	800fcf4 <_svfiprintf_r+0xe8>
 800fcb4:	6822      	ldr	r2, [r4, #0]
 800fcb6:	06d3      	lsls	r3, r2, #27
 800fcb8:	d504      	bpl.n	800fcc4 <_svfiprintf_r+0xb8>
 800fcba:	2353      	movs	r3, #83	@ 0x53
 800fcbc:	a904      	add	r1, sp, #16
 800fcbe:	185b      	adds	r3, r3, r1
 800fcc0:	2120      	movs	r1, #32
 800fcc2:	7019      	strb	r1, [r3, #0]
 800fcc4:	0713      	lsls	r3, r2, #28
 800fcc6:	d504      	bpl.n	800fcd2 <_svfiprintf_r+0xc6>
 800fcc8:	2353      	movs	r3, #83	@ 0x53
 800fcca:	a904      	add	r1, sp, #16
 800fccc:	185b      	adds	r3, r3, r1
 800fcce:	212b      	movs	r1, #43	@ 0x2b
 800fcd0:	7019      	strb	r1, [r3, #0]
 800fcd2:	7833      	ldrb	r3, [r6, #0]
 800fcd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcd6:	d016      	beq.n	800fd06 <_svfiprintf_r+0xfa>
 800fcd8:	0035      	movs	r5, r6
 800fcda:	2100      	movs	r1, #0
 800fcdc:	200a      	movs	r0, #10
 800fcde:	68e3      	ldr	r3, [r4, #12]
 800fce0:	782a      	ldrb	r2, [r5, #0]
 800fce2:	1c6e      	adds	r6, r5, #1
 800fce4:	3a30      	subs	r2, #48	@ 0x30
 800fce6:	2a09      	cmp	r2, #9
 800fce8:	d950      	bls.n	800fd8c <_svfiprintf_r+0x180>
 800fcea:	2900      	cmp	r1, #0
 800fcec:	d111      	bne.n	800fd12 <_svfiprintf_r+0x106>
 800fcee:	e017      	b.n	800fd20 <_svfiprintf_r+0x114>
 800fcf0:	3501      	adds	r5, #1
 800fcf2:	e7af      	b.n	800fc54 <_svfiprintf_r+0x48>
 800fcf4:	9b05      	ldr	r3, [sp, #20]
 800fcf6:	6822      	ldr	r2, [r4, #0]
 800fcf8:	1ac0      	subs	r0, r0, r3
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	4083      	lsls	r3, r0
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	002e      	movs	r6, r5
 800fd02:	6023      	str	r3, [r4, #0]
 800fd04:	e7cc      	b.n	800fca0 <_svfiprintf_r+0x94>
 800fd06:	9b07      	ldr	r3, [sp, #28]
 800fd08:	1d19      	adds	r1, r3, #4
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	9107      	str	r1, [sp, #28]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	db01      	blt.n	800fd16 <_svfiprintf_r+0x10a>
 800fd12:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd14:	e004      	b.n	800fd20 <_svfiprintf_r+0x114>
 800fd16:	425b      	negs	r3, r3
 800fd18:	60e3      	str	r3, [r4, #12]
 800fd1a:	2302      	movs	r3, #2
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	6023      	str	r3, [r4, #0]
 800fd20:	782b      	ldrb	r3, [r5, #0]
 800fd22:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd24:	d10c      	bne.n	800fd40 <_svfiprintf_r+0x134>
 800fd26:	786b      	ldrb	r3, [r5, #1]
 800fd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd2a:	d134      	bne.n	800fd96 <_svfiprintf_r+0x18a>
 800fd2c:	9b07      	ldr	r3, [sp, #28]
 800fd2e:	3502      	adds	r5, #2
 800fd30:	1d1a      	adds	r2, r3, #4
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	9207      	str	r2, [sp, #28]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	da01      	bge.n	800fd3e <_svfiprintf_r+0x132>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	425b      	negs	r3, r3
 800fd3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd40:	4e2d      	ldr	r6, [pc, #180]	@ (800fdf8 <_svfiprintf_r+0x1ec>)
 800fd42:	2203      	movs	r2, #3
 800fd44:	0030      	movs	r0, r6
 800fd46:	7829      	ldrb	r1, [r5, #0]
 800fd48:	f000 fc98 	bl	801067c <memchr>
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d006      	beq.n	800fd5e <_svfiprintf_r+0x152>
 800fd50:	2340      	movs	r3, #64	@ 0x40
 800fd52:	1b80      	subs	r0, r0, r6
 800fd54:	4083      	lsls	r3, r0
 800fd56:	6822      	ldr	r2, [r4, #0]
 800fd58:	3501      	adds	r5, #1
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	6023      	str	r3, [r4, #0]
 800fd5e:	7829      	ldrb	r1, [r5, #0]
 800fd60:	2206      	movs	r2, #6
 800fd62:	4826      	ldr	r0, [pc, #152]	@ (800fdfc <_svfiprintf_r+0x1f0>)
 800fd64:	1c6e      	adds	r6, r5, #1
 800fd66:	7621      	strb	r1, [r4, #24]
 800fd68:	f000 fc88 	bl	801067c <memchr>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d038      	beq.n	800fde2 <_svfiprintf_r+0x1d6>
 800fd70:	4b23      	ldr	r3, [pc, #140]	@ (800fe00 <_svfiprintf_r+0x1f4>)
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d122      	bne.n	800fdbc <_svfiprintf_r+0x1b0>
 800fd76:	2207      	movs	r2, #7
 800fd78:	9b07      	ldr	r3, [sp, #28]
 800fd7a:	3307      	adds	r3, #7
 800fd7c:	4393      	bics	r3, r2
 800fd7e:	3308      	adds	r3, #8
 800fd80:	9307      	str	r3, [sp, #28]
 800fd82:	6963      	ldr	r3, [r4, #20]
 800fd84:	9a04      	ldr	r2, [sp, #16]
 800fd86:	189b      	adds	r3, r3, r2
 800fd88:	6163      	str	r3, [r4, #20]
 800fd8a:	e762      	b.n	800fc52 <_svfiprintf_r+0x46>
 800fd8c:	4343      	muls	r3, r0
 800fd8e:	0035      	movs	r5, r6
 800fd90:	2101      	movs	r1, #1
 800fd92:	189b      	adds	r3, r3, r2
 800fd94:	e7a4      	b.n	800fce0 <_svfiprintf_r+0xd4>
 800fd96:	2300      	movs	r3, #0
 800fd98:	200a      	movs	r0, #10
 800fd9a:	0019      	movs	r1, r3
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	6063      	str	r3, [r4, #4]
 800fda0:	782a      	ldrb	r2, [r5, #0]
 800fda2:	1c6e      	adds	r6, r5, #1
 800fda4:	3a30      	subs	r2, #48	@ 0x30
 800fda6:	2a09      	cmp	r2, #9
 800fda8:	d903      	bls.n	800fdb2 <_svfiprintf_r+0x1a6>
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d0c8      	beq.n	800fd40 <_svfiprintf_r+0x134>
 800fdae:	9109      	str	r1, [sp, #36]	@ 0x24
 800fdb0:	e7c6      	b.n	800fd40 <_svfiprintf_r+0x134>
 800fdb2:	4341      	muls	r1, r0
 800fdb4:	0035      	movs	r5, r6
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	1889      	adds	r1, r1, r2
 800fdba:	e7f1      	b.n	800fda0 <_svfiprintf_r+0x194>
 800fdbc:	aa07      	add	r2, sp, #28
 800fdbe:	9200      	str	r2, [sp, #0]
 800fdc0:	0021      	movs	r1, r4
 800fdc2:	003a      	movs	r2, r7
 800fdc4:	4b0f      	ldr	r3, [pc, #60]	@ (800fe04 <_svfiprintf_r+0x1f8>)
 800fdc6:	9803      	ldr	r0, [sp, #12]
 800fdc8:	e000      	b.n	800fdcc <_svfiprintf_r+0x1c0>
 800fdca:	bf00      	nop
 800fdcc:	9004      	str	r0, [sp, #16]
 800fdce:	9b04      	ldr	r3, [sp, #16]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	d1d6      	bne.n	800fd82 <_svfiprintf_r+0x176>
 800fdd4:	89bb      	ldrh	r3, [r7, #12]
 800fdd6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fdd8:	065b      	lsls	r3, r3, #25
 800fdda:	d500      	bpl.n	800fdde <_svfiprintf_r+0x1d2>
 800fddc:	e72c      	b.n	800fc38 <_svfiprintf_r+0x2c>
 800fdde:	b021      	add	sp, #132	@ 0x84
 800fde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fde2:	aa07      	add	r2, sp, #28
 800fde4:	9200      	str	r2, [sp, #0]
 800fde6:	0021      	movs	r1, r4
 800fde8:	003a      	movs	r2, r7
 800fdea:	4b06      	ldr	r3, [pc, #24]	@ (800fe04 <_svfiprintf_r+0x1f8>)
 800fdec:	9803      	ldr	r0, [sp, #12]
 800fdee:	f000 f9bf 	bl	8010170 <_printf_i>
 800fdf2:	e7eb      	b.n	800fdcc <_svfiprintf_r+0x1c0>
 800fdf4:	08011d20 	.word	0x08011d20
 800fdf8:	08011d26 	.word	0x08011d26
 800fdfc:	08011d2a 	.word	0x08011d2a
 800fe00:	00000000 	.word	0x00000000
 800fe04:	0800fb4d 	.word	0x0800fb4d

0800fe08 <__sfputc_r>:
 800fe08:	6893      	ldr	r3, [r2, #8]
 800fe0a:	b510      	push	{r4, lr}
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	6093      	str	r3, [r2, #8]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	da04      	bge.n	800fe1e <__sfputc_r+0x16>
 800fe14:	6994      	ldr	r4, [r2, #24]
 800fe16:	42a3      	cmp	r3, r4
 800fe18:	db07      	blt.n	800fe2a <__sfputc_r+0x22>
 800fe1a:	290a      	cmp	r1, #10
 800fe1c:	d005      	beq.n	800fe2a <__sfputc_r+0x22>
 800fe1e:	6813      	ldr	r3, [r2, #0]
 800fe20:	1c58      	adds	r0, r3, #1
 800fe22:	6010      	str	r0, [r2, #0]
 800fe24:	7019      	strb	r1, [r3, #0]
 800fe26:	0008      	movs	r0, r1
 800fe28:	bd10      	pop	{r4, pc}
 800fe2a:	f000 fb60 	bl	80104ee <__swbuf_r>
 800fe2e:	0001      	movs	r1, r0
 800fe30:	e7f9      	b.n	800fe26 <__sfputc_r+0x1e>

0800fe32 <__sfputs_r>:
 800fe32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe34:	0006      	movs	r6, r0
 800fe36:	000f      	movs	r7, r1
 800fe38:	0014      	movs	r4, r2
 800fe3a:	18d5      	adds	r5, r2, r3
 800fe3c:	42ac      	cmp	r4, r5
 800fe3e:	d101      	bne.n	800fe44 <__sfputs_r+0x12>
 800fe40:	2000      	movs	r0, #0
 800fe42:	e007      	b.n	800fe54 <__sfputs_r+0x22>
 800fe44:	7821      	ldrb	r1, [r4, #0]
 800fe46:	003a      	movs	r2, r7
 800fe48:	0030      	movs	r0, r6
 800fe4a:	f7ff ffdd 	bl	800fe08 <__sfputc_r>
 800fe4e:	3401      	adds	r4, #1
 800fe50:	1c43      	adds	r3, r0, #1
 800fe52:	d1f3      	bne.n	800fe3c <__sfputs_r+0xa>
 800fe54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe58 <_vfiprintf_r>:
 800fe58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe5a:	b0a1      	sub	sp, #132	@ 0x84
 800fe5c:	000f      	movs	r7, r1
 800fe5e:	0015      	movs	r5, r2
 800fe60:	001e      	movs	r6, r3
 800fe62:	9003      	str	r0, [sp, #12]
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d004      	beq.n	800fe72 <_vfiprintf_r+0x1a>
 800fe68:	6a03      	ldr	r3, [r0, #32]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d101      	bne.n	800fe72 <_vfiprintf_r+0x1a>
 800fe6e:	f7fe fbe9 	bl	800e644 <__sinit>
 800fe72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe74:	07db      	lsls	r3, r3, #31
 800fe76:	d405      	bmi.n	800fe84 <_vfiprintf_r+0x2c>
 800fe78:	89bb      	ldrh	r3, [r7, #12]
 800fe7a:	059b      	lsls	r3, r3, #22
 800fe7c:	d402      	bmi.n	800fe84 <_vfiprintf_r+0x2c>
 800fe7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fe80:	f7fe fd13 	bl	800e8aa <__retarget_lock_acquire_recursive>
 800fe84:	89bb      	ldrh	r3, [r7, #12]
 800fe86:	071b      	lsls	r3, r3, #28
 800fe88:	d502      	bpl.n	800fe90 <_vfiprintf_r+0x38>
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d113      	bne.n	800feb8 <_vfiprintf_r+0x60>
 800fe90:	0039      	movs	r1, r7
 800fe92:	9803      	ldr	r0, [sp, #12]
 800fe94:	f000 fb6e 	bl	8010574 <__swsetup_r>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d00d      	beq.n	800feb8 <_vfiprintf_r+0x60>
 800fe9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe9e:	07db      	lsls	r3, r3, #31
 800fea0:	d503      	bpl.n	800feaa <_vfiprintf_r+0x52>
 800fea2:	2001      	movs	r0, #1
 800fea4:	4240      	negs	r0, r0
 800fea6:	b021      	add	sp, #132	@ 0x84
 800fea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feaa:	89bb      	ldrh	r3, [r7, #12]
 800feac:	059b      	lsls	r3, r3, #22
 800feae:	d4f8      	bmi.n	800fea2 <_vfiprintf_r+0x4a>
 800feb0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800feb2:	f7fe fcfb 	bl	800e8ac <__retarget_lock_release_recursive>
 800feb6:	e7f4      	b.n	800fea2 <_vfiprintf_r+0x4a>
 800feb8:	2300      	movs	r3, #0
 800feba:	ac08      	add	r4, sp, #32
 800febc:	6163      	str	r3, [r4, #20]
 800febe:	3320      	adds	r3, #32
 800fec0:	7663      	strb	r3, [r4, #25]
 800fec2:	3310      	adds	r3, #16
 800fec4:	76a3      	strb	r3, [r4, #26]
 800fec6:	9607      	str	r6, [sp, #28]
 800fec8:	002e      	movs	r6, r5
 800feca:	7833      	ldrb	r3, [r6, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <_vfiprintf_r+0x7c>
 800fed0:	2b25      	cmp	r3, #37	@ 0x25
 800fed2:	d148      	bne.n	800ff66 <_vfiprintf_r+0x10e>
 800fed4:	1b73      	subs	r3, r6, r5
 800fed6:	9305      	str	r3, [sp, #20]
 800fed8:	42ae      	cmp	r6, r5
 800feda:	d00b      	beq.n	800fef4 <_vfiprintf_r+0x9c>
 800fedc:	002a      	movs	r2, r5
 800fede:	0039      	movs	r1, r7
 800fee0:	9803      	ldr	r0, [sp, #12]
 800fee2:	f7ff ffa6 	bl	800fe32 <__sfputs_r>
 800fee6:	3001      	adds	r0, #1
 800fee8:	d100      	bne.n	800feec <_vfiprintf_r+0x94>
 800feea:	e0ae      	b.n	801004a <_vfiprintf_r+0x1f2>
 800feec:	6963      	ldr	r3, [r4, #20]
 800feee:	9a05      	ldr	r2, [sp, #20]
 800fef0:	189b      	adds	r3, r3, r2
 800fef2:	6163      	str	r3, [r4, #20]
 800fef4:	7833      	ldrb	r3, [r6, #0]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d100      	bne.n	800fefc <_vfiprintf_r+0xa4>
 800fefa:	e0a6      	b.n	801004a <_vfiprintf_r+0x1f2>
 800fefc:	2201      	movs	r2, #1
 800fefe:	2300      	movs	r3, #0
 800ff00:	4252      	negs	r2, r2
 800ff02:	6062      	str	r2, [r4, #4]
 800ff04:	a904      	add	r1, sp, #16
 800ff06:	3254      	adds	r2, #84	@ 0x54
 800ff08:	1852      	adds	r2, r2, r1
 800ff0a:	1c75      	adds	r5, r6, #1
 800ff0c:	6023      	str	r3, [r4, #0]
 800ff0e:	60e3      	str	r3, [r4, #12]
 800ff10:	60a3      	str	r3, [r4, #8]
 800ff12:	7013      	strb	r3, [r2, #0]
 800ff14:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ff16:	4b59      	ldr	r3, [pc, #356]	@ (801007c <_vfiprintf_r+0x224>)
 800ff18:	2205      	movs	r2, #5
 800ff1a:	0018      	movs	r0, r3
 800ff1c:	7829      	ldrb	r1, [r5, #0]
 800ff1e:	9305      	str	r3, [sp, #20]
 800ff20:	f000 fbac 	bl	801067c <memchr>
 800ff24:	1c6e      	adds	r6, r5, #1
 800ff26:	2800      	cmp	r0, #0
 800ff28:	d11f      	bne.n	800ff6a <_vfiprintf_r+0x112>
 800ff2a:	6822      	ldr	r2, [r4, #0]
 800ff2c:	06d3      	lsls	r3, r2, #27
 800ff2e:	d504      	bpl.n	800ff3a <_vfiprintf_r+0xe2>
 800ff30:	2353      	movs	r3, #83	@ 0x53
 800ff32:	a904      	add	r1, sp, #16
 800ff34:	185b      	adds	r3, r3, r1
 800ff36:	2120      	movs	r1, #32
 800ff38:	7019      	strb	r1, [r3, #0]
 800ff3a:	0713      	lsls	r3, r2, #28
 800ff3c:	d504      	bpl.n	800ff48 <_vfiprintf_r+0xf0>
 800ff3e:	2353      	movs	r3, #83	@ 0x53
 800ff40:	a904      	add	r1, sp, #16
 800ff42:	185b      	adds	r3, r3, r1
 800ff44:	212b      	movs	r1, #43	@ 0x2b
 800ff46:	7019      	strb	r1, [r3, #0]
 800ff48:	782b      	ldrb	r3, [r5, #0]
 800ff4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff4c:	d016      	beq.n	800ff7c <_vfiprintf_r+0x124>
 800ff4e:	002e      	movs	r6, r5
 800ff50:	2100      	movs	r1, #0
 800ff52:	200a      	movs	r0, #10
 800ff54:	68e3      	ldr	r3, [r4, #12]
 800ff56:	7832      	ldrb	r2, [r6, #0]
 800ff58:	1c75      	adds	r5, r6, #1
 800ff5a:	3a30      	subs	r2, #48	@ 0x30
 800ff5c:	2a09      	cmp	r2, #9
 800ff5e:	d950      	bls.n	8010002 <_vfiprintf_r+0x1aa>
 800ff60:	2900      	cmp	r1, #0
 800ff62:	d111      	bne.n	800ff88 <_vfiprintf_r+0x130>
 800ff64:	e017      	b.n	800ff96 <_vfiprintf_r+0x13e>
 800ff66:	3601      	adds	r6, #1
 800ff68:	e7af      	b.n	800feca <_vfiprintf_r+0x72>
 800ff6a:	9b05      	ldr	r3, [sp, #20]
 800ff6c:	6822      	ldr	r2, [r4, #0]
 800ff6e:	1ac0      	subs	r0, r0, r3
 800ff70:	2301      	movs	r3, #1
 800ff72:	4083      	lsls	r3, r0
 800ff74:	4313      	orrs	r3, r2
 800ff76:	0035      	movs	r5, r6
 800ff78:	6023      	str	r3, [r4, #0]
 800ff7a:	e7cc      	b.n	800ff16 <_vfiprintf_r+0xbe>
 800ff7c:	9b07      	ldr	r3, [sp, #28]
 800ff7e:	1d19      	adds	r1, r3, #4
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	9107      	str	r1, [sp, #28]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	db01      	blt.n	800ff8c <_vfiprintf_r+0x134>
 800ff88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff8a:	e004      	b.n	800ff96 <_vfiprintf_r+0x13e>
 800ff8c:	425b      	negs	r3, r3
 800ff8e:	60e3      	str	r3, [r4, #12]
 800ff90:	2302      	movs	r3, #2
 800ff92:	4313      	orrs	r3, r2
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	7833      	ldrb	r3, [r6, #0]
 800ff98:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff9a:	d10c      	bne.n	800ffb6 <_vfiprintf_r+0x15e>
 800ff9c:	7873      	ldrb	r3, [r6, #1]
 800ff9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffa0:	d134      	bne.n	801000c <_vfiprintf_r+0x1b4>
 800ffa2:	9b07      	ldr	r3, [sp, #28]
 800ffa4:	3602      	adds	r6, #2
 800ffa6:	1d1a      	adds	r2, r3, #4
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	9207      	str	r2, [sp, #28]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	da01      	bge.n	800ffb4 <_vfiprintf_r+0x15c>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	425b      	negs	r3, r3
 800ffb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffb6:	4d32      	ldr	r5, [pc, #200]	@ (8010080 <_vfiprintf_r+0x228>)
 800ffb8:	2203      	movs	r2, #3
 800ffba:	0028      	movs	r0, r5
 800ffbc:	7831      	ldrb	r1, [r6, #0]
 800ffbe:	f000 fb5d 	bl	801067c <memchr>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d006      	beq.n	800ffd4 <_vfiprintf_r+0x17c>
 800ffc6:	2340      	movs	r3, #64	@ 0x40
 800ffc8:	1b40      	subs	r0, r0, r5
 800ffca:	4083      	lsls	r3, r0
 800ffcc:	6822      	ldr	r2, [r4, #0]
 800ffce:	3601      	adds	r6, #1
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	7831      	ldrb	r1, [r6, #0]
 800ffd6:	2206      	movs	r2, #6
 800ffd8:	482a      	ldr	r0, [pc, #168]	@ (8010084 <_vfiprintf_r+0x22c>)
 800ffda:	1c75      	adds	r5, r6, #1
 800ffdc:	7621      	strb	r1, [r4, #24]
 800ffde:	f000 fb4d 	bl	801067c <memchr>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d040      	beq.n	8010068 <_vfiprintf_r+0x210>
 800ffe6:	4b28      	ldr	r3, [pc, #160]	@ (8010088 <_vfiprintf_r+0x230>)
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d122      	bne.n	8010032 <_vfiprintf_r+0x1da>
 800ffec:	2207      	movs	r2, #7
 800ffee:	9b07      	ldr	r3, [sp, #28]
 800fff0:	3307      	adds	r3, #7
 800fff2:	4393      	bics	r3, r2
 800fff4:	3308      	adds	r3, #8
 800fff6:	9307      	str	r3, [sp, #28]
 800fff8:	6963      	ldr	r3, [r4, #20]
 800fffa:	9a04      	ldr	r2, [sp, #16]
 800fffc:	189b      	adds	r3, r3, r2
 800fffe:	6163      	str	r3, [r4, #20]
 8010000:	e762      	b.n	800fec8 <_vfiprintf_r+0x70>
 8010002:	4343      	muls	r3, r0
 8010004:	002e      	movs	r6, r5
 8010006:	2101      	movs	r1, #1
 8010008:	189b      	adds	r3, r3, r2
 801000a:	e7a4      	b.n	800ff56 <_vfiprintf_r+0xfe>
 801000c:	2300      	movs	r3, #0
 801000e:	200a      	movs	r0, #10
 8010010:	0019      	movs	r1, r3
 8010012:	3601      	adds	r6, #1
 8010014:	6063      	str	r3, [r4, #4]
 8010016:	7832      	ldrb	r2, [r6, #0]
 8010018:	1c75      	adds	r5, r6, #1
 801001a:	3a30      	subs	r2, #48	@ 0x30
 801001c:	2a09      	cmp	r2, #9
 801001e:	d903      	bls.n	8010028 <_vfiprintf_r+0x1d0>
 8010020:	2b00      	cmp	r3, #0
 8010022:	d0c8      	beq.n	800ffb6 <_vfiprintf_r+0x15e>
 8010024:	9109      	str	r1, [sp, #36]	@ 0x24
 8010026:	e7c6      	b.n	800ffb6 <_vfiprintf_r+0x15e>
 8010028:	4341      	muls	r1, r0
 801002a:	002e      	movs	r6, r5
 801002c:	2301      	movs	r3, #1
 801002e:	1889      	adds	r1, r1, r2
 8010030:	e7f1      	b.n	8010016 <_vfiprintf_r+0x1be>
 8010032:	aa07      	add	r2, sp, #28
 8010034:	9200      	str	r2, [sp, #0]
 8010036:	0021      	movs	r1, r4
 8010038:	003a      	movs	r2, r7
 801003a:	4b14      	ldr	r3, [pc, #80]	@ (801008c <_vfiprintf_r+0x234>)
 801003c:	9803      	ldr	r0, [sp, #12]
 801003e:	e000      	b.n	8010042 <_vfiprintf_r+0x1ea>
 8010040:	bf00      	nop
 8010042:	9004      	str	r0, [sp, #16]
 8010044:	9b04      	ldr	r3, [sp, #16]
 8010046:	3301      	adds	r3, #1
 8010048:	d1d6      	bne.n	800fff8 <_vfiprintf_r+0x1a0>
 801004a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801004c:	07db      	lsls	r3, r3, #31
 801004e:	d405      	bmi.n	801005c <_vfiprintf_r+0x204>
 8010050:	89bb      	ldrh	r3, [r7, #12]
 8010052:	059b      	lsls	r3, r3, #22
 8010054:	d402      	bmi.n	801005c <_vfiprintf_r+0x204>
 8010056:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010058:	f7fe fc28 	bl	800e8ac <__retarget_lock_release_recursive>
 801005c:	89bb      	ldrh	r3, [r7, #12]
 801005e:	065b      	lsls	r3, r3, #25
 8010060:	d500      	bpl.n	8010064 <_vfiprintf_r+0x20c>
 8010062:	e71e      	b.n	800fea2 <_vfiprintf_r+0x4a>
 8010064:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010066:	e71e      	b.n	800fea6 <_vfiprintf_r+0x4e>
 8010068:	aa07      	add	r2, sp, #28
 801006a:	9200      	str	r2, [sp, #0]
 801006c:	0021      	movs	r1, r4
 801006e:	003a      	movs	r2, r7
 8010070:	4b06      	ldr	r3, [pc, #24]	@ (801008c <_vfiprintf_r+0x234>)
 8010072:	9803      	ldr	r0, [sp, #12]
 8010074:	f000 f87c 	bl	8010170 <_printf_i>
 8010078:	e7e3      	b.n	8010042 <_vfiprintf_r+0x1ea>
 801007a:	46c0      	nop			@ (mov r8, r8)
 801007c:	08011d20 	.word	0x08011d20
 8010080:	08011d26 	.word	0x08011d26
 8010084:	08011d2a 	.word	0x08011d2a
 8010088:	00000000 	.word	0x00000000
 801008c:	0800fe33 	.word	0x0800fe33

08010090 <_printf_common>:
 8010090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010092:	0016      	movs	r6, r2
 8010094:	9301      	str	r3, [sp, #4]
 8010096:	688a      	ldr	r2, [r1, #8]
 8010098:	690b      	ldr	r3, [r1, #16]
 801009a:	000c      	movs	r4, r1
 801009c:	9000      	str	r0, [sp, #0]
 801009e:	4293      	cmp	r3, r2
 80100a0:	da00      	bge.n	80100a4 <_printf_common+0x14>
 80100a2:	0013      	movs	r3, r2
 80100a4:	0022      	movs	r2, r4
 80100a6:	6033      	str	r3, [r6, #0]
 80100a8:	3243      	adds	r2, #67	@ 0x43
 80100aa:	7812      	ldrb	r2, [r2, #0]
 80100ac:	2a00      	cmp	r2, #0
 80100ae:	d001      	beq.n	80100b4 <_printf_common+0x24>
 80100b0:	3301      	adds	r3, #1
 80100b2:	6033      	str	r3, [r6, #0]
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	069b      	lsls	r3, r3, #26
 80100b8:	d502      	bpl.n	80100c0 <_printf_common+0x30>
 80100ba:	6833      	ldr	r3, [r6, #0]
 80100bc:	3302      	adds	r3, #2
 80100be:	6033      	str	r3, [r6, #0]
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	2306      	movs	r3, #6
 80100c4:	0015      	movs	r5, r2
 80100c6:	401d      	ands	r5, r3
 80100c8:	421a      	tst	r2, r3
 80100ca:	d027      	beq.n	801011c <_printf_common+0x8c>
 80100cc:	0023      	movs	r3, r4
 80100ce:	3343      	adds	r3, #67	@ 0x43
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	1e5a      	subs	r2, r3, #1
 80100d4:	4193      	sbcs	r3, r2
 80100d6:	6822      	ldr	r2, [r4, #0]
 80100d8:	0692      	lsls	r2, r2, #26
 80100da:	d430      	bmi.n	801013e <_printf_common+0xae>
 80100dc:	0022      	movs	r2, r4
 80100de:	9901      	ldr	r1, [sp, #4]
 80100e0:	9800      	ldr	r0, [sp, #0]
 80100e2:	9d08      	ldr	r5, [sp, #32]
 80100e4:	3243      	adds	r2, #67	@ 0x43
 80100e6:	47a8      	blx	r5
 80100e8:	3001      	adds	r0, #1
 80100ea:	d025      	beq.n	8010138 <_printf_common+0xa8>
 80100ec:	2206      	movs	r2, #6
 80100ee:	6823      	ldr	r3, [r4, #0]
 80100f0:	2500      	movs	r5, #0
 80100f2:	4013      	ands	r3, r2
 80100f4:	2b04      	cmp	r3, #4
 80100f6:	d105      	bne.n	8010104 <_printf_common+0x74>
 80100f8:	6833      	ldr	r3, [r6, #0]
 80100fa:	68e5      	ldr	r5, [r4, #12]
 80100fc:	1aed      	subs	r5, r5, r3
 80100fe:	43eb      	mvns	r3, r5
 8010100:	17db      	asrs	r3, r3, #31
 8010102:	401d      	ands	r5, r3
 8010104:	68a3      	ldr	r3, [r4, #8]
 8010106:	6922      	ldr	r2, [r4, #16]
 8010108:	4293      	cmp	r3, r2
 801010a:	dd01      	ble.n	8010110 <_printf_common+0x80>
 801010c:	1a9b      	subs	r3, r3, r2
 801010e:	18ed      	adds	r5, r5, r3
 8010110:	2600      	movs	r6, #0
 8010112:	42b5      	cmp	r5, r6
 8010114:	d120      	bne.n	8010158 <_printf_common+0xc8>
 8010116:	2000      	movs	r0, #0
 8010118:	e010      	b.n	801013c <_printf_common+0xac>
 801011a:	3501      	adds	r5, #1
 801011c:	68e3      	ldr	r3, [r4, #12]
 801011e:	6832      	ldr	r2, [r6, #0]
 8010120:	1a9b      	subs	r3, r3, r2
 8010122:	42ab      	cmp	r3, r5
 8010124:	ddd2      	ble.n	80100cc <_printf_common+0x3c>
 8010126:	0022      	movs	r2, r4
 8010128:	2301      	movs	r3, #1
 801012a:	9901      	ldr	r1, [sp, #4]
 801012c:	9800      	ldr	r0, [sp, #0]
 801012e:	9f08      	ldr	r7, [sp, #32]
 8010130:	3219      	adds	r2, #25
 8010132:	47b8      	blx	r7
 8010134:	3001      	adds	r0, #1
 8010136:	d1f0      	bne.n	801011a <_printf_common+0x8a>
 8010138:	2001      	movs	r0, #1
 801013a:	4240      	negs	r0, r0
 801013c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801013e:	2030      	movs	r0, #48	@ 0x30
 8010140:	18e1      	adds	r1, r4, r3
 8010142:	3143      	adds	r1, #67	@ 0x43
 8010144:	7008      	strb	r0, [r1, #0]
 8010146:	0021      	movs	r1, r4
 8010148:	1c5a      	adds	r2, r3, #1
 801014a:	3145      	adds	r1, #69	@ 0x45
 801014c:	7809      	ldrb	r1, [r1, #0]
 801014e:	18a2      	adds	r2, r4, r2
 8010150:	3243      	adds	r2, #67	@ 0x43
 8010152:	3302      	adds	r3, #2
 8010154:	7011      	strb	r1, [r2, #0]
 8010156:	e7c1      	b.n	80100dc <_printf_common+0x4c>
 8010158:	0022      	movs	r2, r4
 801015a:	2301      	movs	r3, #1
 801015c:	9901      	ldr	r1, [sp, #4]
 801015e:	9800      	ldr	r0, [sp, #0]
 8010160:	9f08      	ldr	r7, [sp, #32]
 8010162:	321a      	adds	r2, #26
 8010164:	47b8      	blx	r7
 8010166:	3001      	adds	r0, #1
 8010168:	d0e6      	beq.n	8010138 <_printf_common+0xa8>
 801016a:	3601      	adds	r6, #1
 801016c:	e7d1      	b.n	8010112 <_printf_common+0x82>
	...

08010170 <_printf_i>:
 8010170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010172:	b08b      	sub	sp, #44	@ 0x2c
 8010174:	9206      	str	r2, [sp, #24]
 8010176:	000a      	movs	r2, r1
 8010178:	3243      	adds	r2, #67	@ 0x43
 801017a:	9307      	str	r3, [sp, #28]
 801017c:	9005      	str	r0, [sp, #20]
 801017e:	9203      	str	r2, [sp, #12]
 8010180:	7e0a      	ldrb	r2, [r1, #24]
 8010182:	000c      	movs	r4, r1
 8010184:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010186:	2a78      	cmp	r2, #120	@ 0x78
 8010188:	d809      	bhi.n	801019e <_printf_i+0x2e>
 801018a:	2a62      	cmp	r2, #98	@ 0x62
 801018c:	d80b      	bhi.n	80101a6 <_printf_i+0x36>
 801018e:	2a00      	cmp	r2, #0
 8010190:	d100      	bne.n	8010194 <_printf_i+0x24>
 8010192:	e0bc      	b.n	801030e <_printf_i+0x19e>
 8010194:	497b      	ldr	r1, [pc, #492]	@ (8010384 <_printf_i+0x214>)
 8010196:	9104      	str	r1, [sp, #16]
 8010198:	2a58      	cmp	r2, #88	@ 0x58
 801019a:	d100      	bne.n	801019e <_printf_i+0x2e>
 801019c:	e090      	b.n	80102c0 <_printf_i+0x150>
 801019e:	0025      	movs	r5, r4
 80101a0:	3542      	adds	r5, #66	@ 0x42
 80101a2:	702a      	strb	r2, [r5, #0]
 80101a4:	e022      	b.n	80101ec <_printf_i+0x7c>
 80101a6:	0010      	movs	r0, r2
 80101a8:	3863      	subs	r0, #99	@ 0x63
 80101aa:	2815      	cmp	r0, #21
 80101ac:	d8f7      	bhi.n	801019e <_printf_i+0x2e>
 80101ae:	f7ef ffc5 	bl	800013c <__gnu_thumb1_case_shi>
 80101b2:	0016      	.short	0x0016
 80101b4:	fff6001f 	.word	0xfff6001f
 80101b8:	fff6fff6 	.word	0xfff6fff6
 80101bc:	001ffff6 	.word	0x001ffff6
 80101c0:	fff6fff6 	.word	0xfff6fff6
 80101c4:	fff6fff6 	.word	0xfff6fff6
 80101c8:	003600a1 	.word	0x003600a1
 80101cc:	fff60080 	.word	0xfff60080
 80101d0:	00b2fff6 	.word	0x00b2fff6
 80101d4:	0036fff6 	.word	0x0036fff6
 80101d8:	fff6fff6 	.word	0xfff6fff6
 80101dc:	0084      	.short	0x0084
 80101de:	0025      	movs	r5, r4
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	3542      	adds	r5, #66	@ 0x42
 80101e4:	1d11      	adds	r1, r2, #4
 80101e6:	6019      	str	r1, [r3, #0]
 80101e8:	6813      	ldr	r3, [r2, #0]
 80101ea:	702b      	strb	r3, [r5, #0]
 80101ec:	2301      	movs	r3, #1
 80101ee:	e0a0      	b.n	8010332 <_printf_i+0x1c2>
 80101f0:	6818      	ldr	r0, [r3, #0]
 80101f2:	6809      	ldr	r1, [r1, #0]
 80101f4:	1d02      	adds	r2, r0, #4
 80101f6:	060d      	lsls	r5, r1, #24
 80101f8:	d50b      	bpl.n	8010212 <_printf_i+0xa2>
 80101fa:	6806      	ldr	r6, [r0, #0]
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	2e00      	cmp	r6, #0
 8010200:	da03      	bge.n	801020a <_printf_i+0x9a>
 8010202:	232d      	movs	r3, #45	@ 0x2d
 8010204:	9a03      	ldr	r2, [sp, #12]
 8010206:	4276      	negs	r6, r6
 8010208:	7013      	strb	r3, [r2, #0]
 801020a:	4b5e      	ldr	r3, [pc, #376]	@ (8010384 <_printf_i+0x214>)
 801020c:	270a      	movs	r7, #10
 801020e:	9304      	str	r3, [sp, #16]
 8010210:	e018      	b.n	8010244 <_printf_i+0xd4>
 8010212:	6806      	ldr	r6, [r0, #0]
 8010214:	601a      	str	r2, [r3, #0]
 8010216:	0649      	lsls	r1, r1, #25
 8010218:	d5f1      	bpl.n	80101fe <_printf_i+0x8e>
 801021a:	b236      	sxth	r6, r6
 801021c:	e7ef      	b.n	80101fe <_printf_i+0x8e>
 801021e:	6808      	ldr	r0, [r1, #0]
 8010220:	6819      	ldr	r1, [r3, #0]
 8010222:	c940      	ldmia	r1!, {r6}
 8010224:	0605      	lsls	r5, r0, #24
 8010226:	d402      	bmi.n	801022e <_printf_i+0xbe>
 8010228:	0640      	lsls	r0, r0, #25
 801022a:	d500      	bpl.n	801022e <_printf_i+0xbe>
 801022c:	b2b6      	uxth	r6, r6
 801022e:	6019      	str	r1, [r3, #0]
 8010230:	4b54      	ldr	r3, [pc, #336]	@ (8010384 <_printf_i+0x214>)
 8010232:	270a      	movs	r7, #10
 8010234:	9304      	str	r3, [sp, #16]
 8010236:	2a6f      	cmp	r2, #111	@ 0x6f
 8010238:	d100      	bne.n	801023c <_printf_i+0xcc>
 801023a:	3f02      	subs	r7, #2
 801023c:	0023      	movs	r3, r4
 801023e:	2200      	movs	r2, #0
 8010240:	3343      	adds	r3, #67	@ 0x43
 8010242:	701a      	strb	r2, [r3, #0]
 8010244:	6863      	ldr	r3, [r4, #4]
 8010246:	60a3      	str	r3, [r4, #8]
 8010248:	2b00      	cmp	r3, #0
 801024a:	db03      	blt.n	8010254 <_printf_i+0xe4>
 801024c:	2104      	movs	r1, #4
 801024e:	6822      	ldr	r2, [r4, #0]
 8010250:	438a      	bics	r2, r1
 8010252:	6022      	str	r2, [r4, #0]
 8010254:	2e00      	cmp	r6, #0
 8010256:	d102      	bne.n	801025e <_printf_i+0xee>
 8010258:	9d03      	ldr	r5, [sp, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00c      	beq.n	8010278 <_printf_i+0x108>
 801025e:	9d03      	ldr	r5, [sp, #12]
 8010260:	0030      	movs	r0, r6
 8010262:	0039      	movs	r1, r7
 8010264:	f7ef fffa 	bl	800025c <__aeabi_uidivmod>
 8010268:	9b04      	ldr	r3, [sp, #16]
 801026a:	3d01      	subs	r5, #1
 801026c:	5c5b      	ldrb	r3, [r3, r1]
 801026e:	702b      	strb	r3, [r5, #0]
 8010270:	0033      	movs	r3, r6
 8010272:	0006      	movs	r6, r0
 8010274:	429f      	cmp	r7, r3
 8010276:	d9f3      	bls.n	8010260 <_printf_i+0xf0>
 8010278:	2f08      	cmp	r7, #8
 801027a:	d109      	bne.n	8010290 <_printf_i+0x120>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	07db      	lsls	r3, r3, #31
 8010280:	d506      	bpl.n	8010290 <_printf_i+0x120>
 8010282:	6862      	ldr	r2, [r4, #4]
 8010284:	6923      	ldr	r3, [r4, #16]
 8010286:	429a      	cmp	r2, r3
 8010288:	dc02      	bgt.n	8010290 <_printf_i+0x120>
 801028a:	2330      	movs	r3, #48	@ 0x30
 801028c:	3d01      	subs	r5, #1
 801028e:	702b      	strb	r3, [r5, #0]
 8010290:	9b03      	ldr	r3, [sp, #12]
 8010292:	1b5b      	subs	r3, r3, r5
 8010294:	6123      	str	r3, [r4, #16]
 8010296:	9b07      	ldr	r3, [sp, #28]
 8010298:	0021      	movs	r1, r4
 801029a:	9300      	str	r3, [sp, #0]
 801029c:	9805      	ldr	r0, [sp, #20]
 801029e:	9b06      	ldr	r3, [sp, #24]
 80102a0:	aa09      	add	r2, sp, #36	@ 0x24
 80102a2:	f7ff fef5 	bl	8010090 <_printf_common>
 80102a6:	3001      	adds	r0, #1
 80102a8:	d148      	bne.n	801033c <_printf_i+0x1cc>
 80102aa:	2001      	movs	r0, #1
 80102ac:	4240      	negs	r0, r0
 80102ae:	b00b      	add	sp, #44	@ 0x2c
 80102b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b2:	2220      	movs	r2, #32
 80102b4:	6809      	ldr	r1, [r1, #0]
 80102b6:	430a      	orrs	r2, r1
 80102b8:	6022      	str	r2, [r4, #0]
 80102ba:	2278      	movs	r2, #120	@ 0x78
 80102bc:	4932      	ldr	r1, [pc, #200]	@ (8010388 <_printf_i+0x218>)
 80102be:	9104      	str	r1, [sp, #16]
 80102c0:	0021      	movs	r1, r4
 80102c2:	3145      	adds	r1, #69	@ 0x45
 80102c4:	700a      	strb	r2, [r1, #0]
 80102c6:	6819      	ldr	r1, [r3, #0]
 80102c8:	6822      	ldr	r2, [r4, #0]
 80102ca:	c940      	ldmia	r1!, {r6}
 80102cc:	0610      	lsls	r0, r2, #24
 80102ce:	d402      	bmi.n	80102d6 <_printf_i+0x166>
 80102d0:	0650      	lsls	r0, r2, #25
 80102d2:	d500      	bpl.n	80102d6 <_printf_i+0x166>
 80102d4:	b2b6      	uxth	r6, r6
 80102d6:	6019      	str	r1, [r3, #0]
 80102d8:	07d3      	lsls	r3, r2, #31
 80102da:	d502      	bpl.n	80102e2 <_printf_i+0x172>
 80102dc:	2320      	movs	r3, #32
 80102de:	4313      	orrs	r3, r2
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	2e00      	cmp	r6, #0
 80102e4:	d001      	beq.n	80102ea <_printf_i+0x17a>
 80102e6:	2710      	movs	r7, #16
 80102e8:	e7a8      	b.n	801023c <_printf_i+0xcc>
 80102ea:	2220      	movs	r2, #32
 80102ec:	6823      	ldr	r3, [r4, #0]
 80102ee:	4393      	bics	r3, r2
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	e7f8      	b.n	80102e6 <_printf_i+0x176>
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	680d      	ldr	r5, [r1, #0]
 80102f8:	1d10      	adds	r0, r2, #4
 80102fa:	6949      	ldr	r1, [r1, #20]
 80102fc:	6018      	str	r0, [r3, #0]
 80102fe:	6813      	ldr	r3, [r2, #0]
 8010300:	062e      	lsls	r6, r5, #24
 8010302:	d501      	bpl.n	8010308 <_printf_i+0x198>
 8010304:	6019      	str	r1, [r3, #0]
 8010306:	e002      	b.n	801030e <_printf_i+0x19e>
 8010308:	066d      	lsls	r5, r5, #25
 801030a:	d5fb      	bpl.n	8010304 <_printf_i+0x194>
 801030c:	8019      	strh	r1, [r3, #0]
 801030e:	2300      	movs	r3, #0
 8010310:	9d03      	ldr	r5, [sp, #12]
 8010312:	6123      	str	r3, [r4, #16]
 8010314:	e7bf      	b.n	8010296 <_printf_i+0x126>
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	1d11      	adds	r1, r2, #4
 801031a:	6019      	str	r1, [r3, #0]
 801031c:	6815      	ldr	r5, [r2, #0]
 801031e:	2100      	movs	r1, #0
 8010320:	0028      	movs	r0, r5
 8010322:	6862      	ldr	r2, [r4, #4]
 8010324:	f000 f9aa 	bl	801067c <memchr>
 8010328:	2800      	cmp	r0, #0
 801032a:	d001      	beq.n	8010330 <_printf_i+0x1c0>
 801032c:	1b40      	subs	r0, r0, r5
 801032e:	6060      	str	r0, [r4, #4]
 8010330:	6863      	ldr	r3, [r4, #4]
 8010332:	6123      	str	r3, [r4, #16]
 8010334:	2300      	movs	r3, #0
 8010336:	9a03      	ldr	r2, [sp, #12]
 8010338:	7013      	strb	r3, [r2, #0]
 801033a:	e7ac      	b.n	8010296 <_printf_i+0x126>
 801033c:	002a      	movs	r2, r5
 801033e:	6923      	ldr	r3, [r4, #16]
 8010340:	9906      	ldr	r1, [sp, #24]
 8010342:	9805      	ldr	r0, [sp, #20]
 8010344:	9d07      	ldr	r5, [sp, #28]
 8010346:	47a8      	blx	r5
 8010348:	3001      	adds	r0, #1
 801034a:	d0ae      	beq.n	80102aa <_printf_i+0x13a>
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	079b      	lsls	r3, r3, #30
 8010350:	d415      	bmi.n	801037e <_printf_i+0x20e>
 8010352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010354:	68e0      	ldr	r0, [r4, #12]
 8010356:	4298      	cmp	r0, r3
 8010358:	daa9      	bge.n	80102ae <_printf_i+0x13e>
 801035a:	0018      	movs	r0, r3
 801035c:	e7a7      	b.n	80102ae <_printf_i+0x13e>
 801035e:	0022      	movs	r2, r4
 8010360:	2301      	movs	r3, #1
 8010362:	9906      	ldr	r1, [sp, #24]
 8010364:	9805      	ldr	r0, [sp, #20]
 8010366:	9e07      	ldr	r6, [sp, #28]
 8010368:	3219      	adds	r2, #25
 801036a:	47b0      	blx	r6
 801036c:	3001      	adds	r0, #1
 801036e:	d09c      	beq.n	80102aa <_printf_i+0x13a>
 8010370:	3501      	adds	r5, #1
 8010372:	68e3      	ldr	r3, [r4, #12]
 8010374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010376:	1a9b      	subs	r3, r3, r2
 8010378:	42ab      	cmp	r3, r5
 801037a:	dcf0      	bgt.n	801035e <_printf_i+0x1ee>
 801037c:	e7e9      	b.n	8010352 <_printf_i+0x1e2>
 801037e:	2500      	movs	r5, #0
 8010380:	e7f7      	b.n	8010372 <_printf_i+0x202>
 8010382:	46c0      	nop			@ (mov r8, r8)
 8010384:	08011d31 	.word	0x08011d31
 8010388:	08011d42 	.word	0x08011d42

0801038c <__sflush_r>:
 801038c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801038e:	220c      	movs	r2, #12
 8010390:	5e8b      	ldrsh	r3, [r1, r2]
 8010392:	0005      	movs	r5, r0
 8010394:	000c      	movs	r4, r1
 8010396:	071a      	lsls	r2, r3, #28
 8010398:	d456      	bmi.n	8010448 <__sflush_r+0xbc>
 801039a:	684a      	ldr	r2, [r1, #4]
 801039c:	2a00      	cmp	r2, #0
 801039e:	dc02      	bgt.n	80103a6 <__sflush_r+0x1a>
 80103a0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80103a2:	2a00      	cmp	r2, #0
 80103a4:	dd4e      	ble.n	8010444 <__sflush_r+0xb8>
 80103a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80103a8:	2f00      	cmp	r7, #0
 80103aa:	d04b      	beq.n	8010444 <__sflush_r+0xb8>
 80103ac:	2200      	movs	r2, #0
 80103ae:	2080      	movs	r0, #128	@ 0x80
 80103b0:	682e      	ldr	r6, [r5, #0]
 80103b2:	602a      	str	r2, [r5, #0]
 80103b4:	001a      	movs	r2, r3
 80103b6:	0140      	lsls	r0, r0, #5
 80103b8:	6a21      	ldr	r1, [r4, #32]
 80103ba:	4002      	ands	r2, r0
 80103bc:	4203      	tst	r3, r0
 80103be:	d033      	beq.n	8010428 <__sflush_r+0x9c>
 80103c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80103c2:	89a3      	ldrh	r3, [r4, #12]
 80103c4:	075b      	lsls	r3, r3, #29
 80103c6:	d506      	bpl.n	80103d6 <__sflush_r+0x4a>
 80103c8:	6863      	ldr	r3, [r4, #4]
 80103ca:	1ad2      	subs	r2, r2, r3
 80103cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <__sflush_r+0x4a>
 80103d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80103d4:	1ad2      	subs	r2, r2, r3
 80103d6:	2300      	movs	r3, #0
 80103d8:	0028      	movs	r0, r5
 80103da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80103dc:	6a21      	ldr	r1, [r4, #32]
 80103de:	47b8      	blx	r7
 80103e0:	89a2      	ldrh	r2, [r4, #12]
 80103e2:	1c43      	adds	r3, r0, #1
 80103e4:	d106      	bne.n	80103f4 <__sflush_r+0x68>
 80103e6:	6829      	ldr	r1, [r5, #0]
 80103e8:	291d      	cmp	r1, #29
 80103ea:	d846      	bhi.n	801047a <__sflush_r+0xee>
 80103ec:	4b29      	ldr	r3, [pc, #164]	@ (8010494 <__sflush_r+0x108>)
 80103ee:	410b      	asrs	r3, r1
 80103f0:	07db      	lsls	r3, r3, #31
 80103f2:	d442      	bmi.n	801047a <__sflush_r+0xee>
 80103f4:	2300      	movs	r3, #0
 80103f6:	6063      	str	r3, [r4, #4]
 80103f8:	6923      	ldr	r3, [r4, #16]
 80103fa:	6023      	str	r3, [r4, #0]
 80103fc:	04d2      	lsls	r2, r2, #19
 80103fe:	d505      	bpl.n	801040c <__sflush_r+0x80>
 8010400:	1c43      	adds	r3, r0, #1
 8010402:	d102      	bne.n	801040a <__sflush_r+0x7e>
 8010404:	682b      	ldr	r3, [r5, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d100      	bne.n	801040c <__sflush_r+0x80>
 801040a:	6560      	str	r0, [r4, #84]	@ 0x54
 801040c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801040e:	602e      	str	r6, [r5, #0]
 8010410:	2900      	cmp	r1, #0
 8010412:	d017      	beq.n	8010444 <__sflush_r+0xb8>
 8010414:	0023      	movs	r3, r4
 8010416:	3344      	adds	r3, #68	@ 0x44
 8010418:	4299      	cmp	r1, r3
 801041a:	d002      	beq.n	8010422 <__sflush_r+0x96>
 801041c:	0028      	movs	r0, r5
 801041e:	f7fe fa55 	bl	800e8cc <_free_r>
 8010422:	2300      	movs	r3, #0
 8010424:	6363      	str	r3, [r4, #52]	@ 0x34
 8010426:	e00d      	b.n	8010444 <__sflush_r+0xb8>
 8010428:	2301      	movs	r3, #1
 801042a:	0028      	movs	r0, r5
 801042c:	47b8      	blx	r7
 801042e:	0002      	movs	r2, r0
 8010430:	1c43      	adds	r3, r0, #1
 8010432:	d1c6      	bne.n	80103c2 <__sflush_r+0x36>
 8010434:	682b      	ldr	r3, [r5, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d0c3      	beq.n	80103c2 <__sflush_r+0x36>
 801043a:	2b1d      	cmp	r3, #29
 801043c:	d001      	beq.n	8010442 <__sflush_r+0xb6>
 801043e:	2b16      	cmp	r3, #22
 8010440:	d11a      	bne.n	8010478 <__sflush_r+0xec>
 8010442:	602e      	str	r6, [r5, #0]
 8010444:	2000      	movs	r0, #0
 8010446:	e01e      	b.n	8010486 <__sflush_r+0xfa>
 8010448:	690e      	ldr	r6, [r1, #16]
 801044a:	2e00      	cmp	r6, #0
 801044c:	d0fa      	beq.n	8010444 <__sflush_r+0xb8>
 801044e:	680f      	ldr	r7, [r1, #0]
 8010450:	600e      	str	r6, [r1, #0]
 8010452:	1bba      	subs	r2, r7, r6
 8010454:	9201      	str	r2, [sp, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	079b      	lsls	r3, r3, #30
 801045a:	d100      	bne.n	801045e <__sflush_r+0xd2>
 801045c:	694a      	ldr	r2, [r1, #20]
 801045e:	60a2      	str	r2, [r4, #8]
 8010460:	9b01      	ldr	r3, [sp, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	ddee      	ble.n	8010444 <__sflush_r+0xb8>
 8010466:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010468:	0032      	movs	r2, r6
 801046a:	001f      	movs	r7, r3
 801046c:	0028      	movs	r0, r5
 801046e:	9b01      	ldr	r3, [sp, #4]
 8010470:	6a21      	ldr	r1, [r4, #32]
 8010472:	47b8      	blx	r7
 8010474:	2800      	cmp	r0, #0
 8010476:	dc07      	bgt.n	8010488 <__sflush_r+0xfc>
 8010478:	89a2      	ldrh	r2, [r4, #12]
 801047a:	2340      	movs	r3, #64	@ 0x40
 801047c:	2001      	movs	r0, #1
 801047e:	4313      	orrs	r3, r2
 8010480:	b21b      	sxth	r3, r3
 8010482:	81a3      	strh	r3, [r4, #12]
 8010484:	4240      	negs	r0, r0
 8010486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010488:	9b01      	ldr	r3, [sp, #4]
 801048a:	1836      	adds	r6, r6, r0
 801048c:	1a1b      	subs	r3, r3, r0
 801048e:	9301      	str	r3, [sp, #4]
 8010490:	e7e6      	b.n	8010460 <__sflush_r+0xd4>
 8010492:	46c0      	nop			@ (mov r8, r8)
 8010494:	dfbffffe 	.word	0xdfbffffe

08010498 <_fflush_r>:
 8010498:	690b      	ldr	r3, [r1, #16]
 801049a:	b570      	push	{r4, r5, r6, lr}
 801049c:	0005      	movs	r5, r0
 801049e:	000c      	movs	r4, r1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d102      	bne.n	80104aa <_fflush_r+0x12>
 80104a4:	2500      	movs	r5, #0
 80104a6:	0028      	movs	r0, r5
 80104a8:	bd70      	pop	{r4, r5, r6, pc}
 80104aa:	2800      	cmp	r0, #0
 80104ac:	d004      	beq.n	80104b8 <_fflush_r+0x20>
 80104ae:	6a03      	ldr	r3, [r0, #32]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d101      	bne.n	80104b8 <_fflush_r+0x20>
 80104b4:	f7fe f8c6 	bl	800e644 <__sinit>
 80104b8:	220c      	movs	r2, #12
 80104ba:	5ea3      	ldrsh	r3, [r4, r2]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d0f1      	beq.n	80104a4 <_fflush_r+0xc>
 80104c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80104c2:	07d2      	lsls	r2, r2, #31
 80104c4:	d404      	bmi.n	80104d0 <_fflush_r+0x38>
 80104c6:	059b      	lsls	r3, r3, #22
 80104c8:	d402      	bmi.n	80104d0 <_fflush_r+0x38>
 80104ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104cc:	f7fe f9ed 	bl	800e8aa <__retarget_lock_acquire_recursive>
 80104d0:	0028      	movs	r0, r5
 80104d2:	0021      	movs	r1, r4
 80104d4:	f7ff ff5a 	bl	801038c <__sflush_r>
 80104d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104da:	0005      	movs	r5, r0
 80104dc:	07db      	lsls	r3, r3, #31
 80104de:	d4e2      	bmi.n	80104a6 <_fflush_r+0xe>
 80104e0:	89a3      	ldrh	r3, [r4, #12]
 80104e2:	059b      	lsls	r3, r3, #22
 80104e4:	d4df      	bmi.n	80104a6 <_fflush_r+0xe>
 80104e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104e8:	f7fe f9e0 	bl	800e8ac <__retarget_lock_release_recursive>
 80104ec:	e7db      	b.n	80104a6 <_fflush_r+0xe>

080104ee <__swbuf_r>:
 80104ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f0:	0006      	movs	r6, r0
 80104f2:	000d      	movs	r5, r1
 80104f4:	0014      	movs	r4, r2
 80104f6:	2800      	cmp	r0, #0
 80104f8:	d004      	beq.n	8010504 <__swbuf_r+0x16>
 80104fa:	6a03      	ldr	r3, [r0, #32]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d101      	bne.n	8010504 <__swbuf_r+0x16>
 8010500:	f7fe f8a0 	bl	800e644 <__sinit>
 8010504:	69a3      	ldr	r3, [r4, #24]
 8010506:	60a3      	str	r3, [r4, #8]
 8010508:	89a3      	ldrh	r3, [r4, #12]
 801050a:	071b      	lsls	r3, r3, #28
 801050c:	d502      	bpl.n	8010514 <__swbuf_r+0x26>
 801050e:	6923      	ldr	r3, [r4, #16]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d109      	bne.n	8010528 <__swbuf_r+0x3a>
 8010514:	0021      	movs	r1, r4
 8010516:	0030      	movs	r0, r6
 8010518:	f000 f82c 	bl	8010574 <__swsetup_r>
 801051c:	2800      	cmp	r0, #0
 801051e:	d003      	beq.n	8010528 <__swbuf_r+0x3a>
 8010520:	2501      	movs	r5, #1
 8010522:	426d      	negs	r5, r5
 8010524:	0028      	movs	r0, r5
 8010526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010528:	6923      	ldr	r3, [r4, #16]
 801052a:	6820      	ldr	r0, [r4, #0]
 801052c:	b2ef      	uxtb	r7, r5
 801052e:	1ac0      	subs	r0, r0, r3
 8010530:	6963      	ldr	r3, [r4, #20]
 8010532:	b2ed      	uxtb	r5, r5
 8010534:	4283      	cmp	r3, r0
 8010536:	dc05      	bgt.n	8010544 <__swbuf_r+0x56>
 8010538:	0021      	movs	r1, r4
 801053a:	0030      	movs	r0, r6
 801053c:	f7ff ffac 	bl	8010498 <_fflush_r>
 8010540:	2800      	cmp	r0, #0
 8010542:	d1ed      	bne.n	8010520 <__swbuf_r+0x32>
 8010544:	68a3      	ldr	r3, [r4, #8]
 8010546:	3001      	adds	r0, #1
 8010548:	3b01      	subs	r3, #1
 801054a:	60a3      	str	r3, [r4, #8]
 801054c:	6823      	ldr	r3, [r4, #0]
 801054e:	1c5a      	adds	r2, r3, #1
 8010550:	6022      	str	r2, [r4, #0]
 8010552:	701f      	strb	r7, [r3, #0]
 8010554:	6963      	ldr	r3, [r4, #20]
 8010556:	4283      	cmp	r3, r0
 8010558:	d004      	beq.n	8010564 <__swbuf_r+0x76>
 801055a:	89a3      	ldrh	r3, [r4, #12]
 801055c:	07db      	lsls	r3, r3, #31
 801055e:	d5e1      	bpl.n	8010524 <__swbuf_r+0x36>
 8010560:	2d0a      	cmp	r5, #10
 8010562:	d1df      	bne.n	8010524 <__swbuf_r+0x36>
 8010564:	0021      	movs	r1, r4
 8010566:	0030      	movs	r0, r6
 8010568:	f7ff ff96 	bl	8010498 <_fflush_r>
 801056c:	2800      	cmp	r0, #0
 801056e:	d0d9      	beq.n	8010524 <__swbuf_r+0x36>
 8010570:	e7d6      	b.n	8010520 <__swbuf_r+0x32>
	...

08010574 <__swsetup_r>:
 8010574:	4b2d      	ldr	r3, [pc, #180]	@ (801062c <__swsetup_r+0xb8>)
 8010576:	b570      	push	{r4, r5, r6, lr}
 8010578:	0005      	movs	r5, r0
 801057a:	6818      	ldr	r0, [r3, #0]
 801057c:	000c      	movs	r4, r1
 801057e:	2800      	cmp	r0, #0
 8010580:	d004      	beq.n	801058c <__swsetup_r+0x18>
 8010582:	6a03      	ldr	r3, [r0, #32]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d101      	bne.n	801058c <__swsetup_r+0x18>
 8010588:	f7fe f85c 	bl	800e644 <__sinit>
 801058c:	230c      	movs	r3, #12
 801058e:	5ee2      	ldrsh	r2, [r4, r3]
 8010590:	0713      	lsls	r3, r2, #28
 8010592:	d423      	bmi.n	80105dc <__swsetup_r+0x68>
 8010594:	06d3      	lsls	r3, r2, #27
 8010596:	d407      	bmi.n	80105a8 <__swsetup_r+0x34>
 8010598:	2309      	movs	r3, #9
 801059a:	602b      	str	r3, [r5, #0]
 801059c:	2340      	movs	r3, #64	@ 0x40
 801059e:	2001      	movs	r0, #1
 80105a0:	4313      	orrs	r3, r2
 80105a2:	81a3      	strh	r3, [r4, #12]
 80105a4:	4240      	negs	r0, r0
 80105a6:	e03a      	b.n	801061e <__swsetup_r+0xaa>
 80105a8:	0752      	lsls	r2, r2, #29
 80105aa:	d513      	bpl.n	80105d4 <__swsetup_r+0x60>
 80105ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105ae:	2900      	cmp	r1, #0
 80105b0:	d008      	beq.n	80105c4 <__swsetup_r+0x50>
 80105b2:	0023      	movs	r3, r4
 80105b4:	3344      	adds	r3, #68	@ 0x44
 80105b6:	4299      	cmp	r1, r3
 80105b8:	d002      	beq.n	80105c0 <__swsetup_r+0x4c>
 80105ba:	0028      	movs	r0, r5
 80105bc:	f7fe f986 	bl	800e8cc <_free_r>
 80105c0:	2300      	movs	r3, #0
 80105c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80105c4:	2224      	movs	r2, #36	@ 0x24
 80105c6:	89a3      	ldrh	r3, [r4, #12]
 80105c8:	4393      	bics	r3, r2
 80105ca:	81a3      	strh	r3, [r4, #12]
 80105cc:	2300      	movs	r3, #0
 80105ce:	6063      	str	r3, [r4, #4]
 80105d0:	6923      	ldr	r3, [r4, #16]
 80105d2:	6023      	str	r3, [r4, #0]
 80105d4:	2308      	movs	r3, #8
 80105d6:	89a2      	ldrh	r2, [r4, #12]
 80105d8:	4313      	orrs	r3, r2
 80105da:	81a3      	strh	r3, [r4, #12]
 80105dc:	6923      	ldr	r3, [r4, #16]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d10b      	bne.n	80105fa <__swsetup_r+0x86>
 80105e2:	21a0      	movs	r1, #160	@ 0xa0
 80105e4:	2280      	movs	r2, #128	@ 0x80
 80105e6:	89a3      	ldrh	r3, [r4, #12]
 80105e8:	0089      	lsls	r1, r1, #2
 80105ea:	0092      	lsls	r2, r2, #2
 80105ec:	400b      	ands	r3, r1
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d003      	beq.n	80105fa <__swsetup_r+0x86>
 80105f2:	0021      	movs	r1, r4
 80105f4:	0028      	movs	r0, r5
 80105f6:	f000 f90d 	bl	8010814 <__smakebuf_r>
 80105fa:	230c      	movs	r3, #12
 80105fc:	5ee2      	ldrsh	r2, [r4, r3]
 80105fe:	2101      	movs	r1, #1
 8010600:	0013      	movs	r3, r2
 8010602:	400b      	ands	r3, r1
 8010604:	420a      	tst	r2, r1
 8010606:	d00b      	beq.n	8010620 <__swsetup_r+0xac>
 8010608:	2300      	movs	r3, #0
 801060a:	60a3      	str	r3, [r4, #8]
 801060c:	6963      	ldr	r3, [r4, #20]
 801060e:	425b      	negs	r3, r3
 8010610:	61a3      	str	r3, [r4, #24]
 8010612:	2000      	movs	r0, #0
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	4283      	cmp	r3, r0
 8010618:	d101      	bne.n	801061e <__swsetup_r+0xaa>
 801061a:	0613      	lsls	r3, r2, #24
 801061c:	d4be      	bmi.n	801059c <__swsetup_r+0x28>
 801061e:	bd70      	pop	{r4, r5, r6, pc}
 8010620:	0791      	lsls	r1, r2, #30
 8010622:	d400      	bmi.n	8010626 <__swsetup_r+0xb2>
 8010624:	6963      	ldr	r3, [r4, #20]
 8010626:	60a3      	str	r3, [r4, #8]
 8010628:	e7f3      	b.n	8010612 <__swsetup_r+0x9e>
 801062a:	46c0      	nop			@ (mov r8, r8)
 801062c:	20000b2c 	.word	0x20000b2c

08010630 <memmove>:
 8010630:	b510      	push	{r4, lr}
 8010632:	4288      	cmp	r0, r1
 8010634:	d806      	bhi.n	8010644 <memmove+0x14>
 8010636:	2300      	movs	r3, #0
 8010638:	429a      	cmp	r2, r3
 801063a:	d008      	beq.n	801064e <memmove+0x1e>
 801063c:	5ccc      	ldrb	r4, [r1, r3]
 801063e:	54c4      	strb	r4, [r0, r3]
 8010640:	3301      	adds	r3, #1
 8010642:	e7f9      	b.n	8010638 <memmove+0x8>
 8010644:	188b      	adds	r3, r1, r2
 8010646:	4298      	cmp	r0, r3
 8010648:	d2f5      	bcs.n	8010636 <memmove+0x6>
 801064a:	3a01      	subs	r2, #1
 801064c:	d200      	bcs.n	8010650 <memmove+0x20>
 801064e:	bd10      	pop	{r4, pc}
 8010650:	5c8b      	ldrb	r3, [r1, r2]
 8010652:	5483      	strb	r3, [r0, r2]
 8010654:	e7f9      	b.n	801064a <memmove+0x1a>
	...

08010658 <_sbrk_r>:
 8010658:	2300      	movs	r3, #0
 801065a:	b570      	push	{r4, r5, r6, lr}
 801065c:	4d06      	ldr	r5, [pc, #24]	@ (8010678 <_sbrk_r+0x20>)
 801065e:	0004      	movs	r4, r0
 8010660:	0008      	movs	r0, r1
 8010662:	602b      	str	r3, [r5, #0]
 8010664:	f7f6 ffc6 	bl	80075f4 <_sbrk>
 8010668:	1c43      	adds	r3, r0, #1
 801066a:	d103      	bne.n	8010674 <_sbrk_r+0x1c>
 801066c:	682b      	ldr	r3, [r5, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d000      	beq.n	8010674 <_sbrk_r+0x1c>
 8010672:	6023      	str	r3, [r4, #0]
 8010674:	bd70      	pop	{r4, r5, r6, pc}
 8010676:	46c0      	nop			@ (mov r8, r8)
 8010678:	20001f64 	.word	0x20001f64

0801067c <memchr>:
 801067c:	b2c9      	uxtb	r1, r1
 801067e:	1882      	adds	r2, r0, r2
 8010680:	4290      	cmp	r0, r2
 8010682:	d101      	bne.n	8010688 <memchr+0xc>
 8010684:	2000      	movs	r0, #0
 8010686:	4770      	bx	lr
 8010688:	7803      	ldrb	r3, [r0, #0]
 801068a:	428b      	cmp	r3, r1
 801068c:	d0fb      	beq.n	8010686 <memchr+0xa>
 801068e:	3001      	adds	r0, #1
 8010690:	e7f6      	b.n	8010680 <memchr+0x4>
	...

08010694 <__assert_func>:
 8010694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010696:	0014      	movs	r4, r2
 8010698:	001a      	movs	r2, r3
 801069a:	4b09      	ldr	r3, [pc, #36]	@ (80106c0 <__assert_func+0x2c>)
 801069c:	0005      	movs	r5, r0
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	000e      	movs	r6, r1
 80106a2:	68d8      	ldr	r0, [r3, #12]
 80106a4:	4b07      	ldr	r3, [pc, #28]	@ (80106c4 <__assert_func+0x30>)
 80106a6:	2c00      	cmp	r4, #0
 80106a8:	d101      	bne.n	80106ae <__assert_func+0x1a>
 80106aa:	4b07      	ldr	r3, [pc, #28]	@ (80106c8 <__assert_func+0x34>)
 80106ac:	001c      	movs	r4, r3
 80106ae:	4907      	ldr	r1, [pc, #28]	@ (80106cc <__assert_func+0x38>)
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	9402      	str	r4, [sp, #8]
 80106b4:	002b      	movs	r3, r5
 80106b6:	9600      	str	r6, [sp, #0]
 80106b8:	f000 f872 	bl	80107a0 <fiprintf>
 80106bc:	f000 f910 	bl	80108e0 <abort>
 80106c0:	20000b2c 	.word	0x20000b2c
 80106c4:	08011d53 	.word	0x08011d53
 80106c8:	08011d8e 	.word	0x08011d8e
 80106cc:	08011d60 	.word	0x08011d60

080106d0 <_calloc_r>:
 80106d0:	b570      	push	{r4, r5, r6, lr}
 80106d2:	0c0b      	lsrs	r3, r1, #16
 80106d4:	0c15      	lsrs	r5, r2, #16
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d11e      	bne.n	8010718 <_calloc_r+0x48>
 80106da:	2d00      	cmp	r5, #0
 80106dc:	d10c      	bne.n	80106f8 <_calloc_r+0x28>
 80106de:	b289      	uxth	r1, r1
 80106e0:	b294      	uxth	r4, r2
 80106e2:	434c      	muls	r4, r1
 80106e4:	0021      	movs	r1, r4
 80106e6:	f7fe fcb7 	bl	800f058 <_malloc_r>
 80106ea:	1e05      	subs	r5, r0, #0
 80106ec:	d01a      	beq.n	8010724 <_calloc_r+0x54>
 80106ee:	0022      	movs	r2, r4
 80106f0:	2100      	movs	r1, #0
 80106f2:	f7fe f847 	bl	800e784 <memset>
 80106f6:	e016      	b.n	8010726 <_calloc_r+0x56>
 80106f8:	1c2b      	adds	r3, r5, #0
 80106fa:	1c0c      	adds	r4, r1, #0
 80106fc:	b289      	uxth	r1, r1
 80106fe:	b292      	uxth	r2, r2
 8010700:	434a      	muls	r2, r1
 8010702:	b29b      	uxth	r3, r3
 8010704:	b2a1      	uxth	r1, r4
 8010706:	4359      	muls	r1, r3
 8010708:	0c14      	lsrs	r4, r2, #16
 801070a:	190c      	adds	r4, r1, r4
 801070c:	0c23      	lsrs	r3, r4, #16
 801070e:	d107      	bne.n	8010720 <_calloc_r+0x50>
 8010710:	0424      	lsls	r4, r4, #16
 8010712:	b292      	uxth	r2, r2
 8010714:	4314      	orrs	r4, r2
 8010716:	e7e5      	b.n	80106e4 <_calloc_r+0x14>
 8010718:	2d00      	cmp	r5, #0
 801071a:	d101      	bne.n	8010720 <_calloc_r+0x50>
 801071c:	1c14      	adds	r4, r2, #0
 801071e:	e7ed      	b.n	80106fc <_calloc_r+0x2c>
 8010720:	230c      	movs	r3, #12
 8010722:	6003      	str	r3, [r0, #0]
 8010724:	2500      	movs	r5, #0
 8010726:	0028      	movs	r0, r5
 8010728:	bd70      	pop	{r4, r5, r6, pc}
	...

0801072c <malloc>:
 801072c:	b510      	push	{r4, lr}
 801072e:	4b03      	ldr	r3, [pc, #12]	@ (801073c <malloc+0x10>)
 8010730:	0001      	movs	r1, r0
 8010732:	6818      	ldr	r0, [r3, #0]
 8010734:	f7fe fc90 	bl	800f058 <_malloc_r>
 8010738:	bd10      	pop	{r4, pc}
 801073a:	46c0      	nop			@ (mov r8, r8)
 801073c:	20000b2c 	.word	0x20000b2c

08010740 <_realloc_r>:
 8010740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010742:	0006      	movs	r6, r0
 8010744:	000c      	movs	r4, r1
 8010746:	0015      	movs	r5, r2
 8010748:	2900      	cmp	r1, #0
 801074a:	d105      	bne.n	8010758 <_realloc_r+0x18>
 801074c:	0011      	movs	r1, r2
 801074e:	f7fe fc83 	bl	800f058 <_malloc_r>
 8010752:	0004      	movs	r4, r0
 8010754:	0020      	movs	r0, r4
 8010756:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010758:	2a00      	cmp	r2, #0
 801075a:	d103      	bne.n	8010764 <_realloc_r+0x24>
 801075c:	f7fe f8b6 	bl	800e8cc <_free_r>
 8010760:	2400      	movs	r4, #0
 8010762:	e7f7      	b.n	8010754 <_realloc_r+0x14>
 8010764:	f000 f8c3 	bl	80108ee <_malloc_usable_size_r>
 8010768:	0007      	movs	r7, r0
 801076a:	4285      	cmp	r5, r0
 801076c:	d802      	bhi.n	8010774 <_realloc_r+0x34>
 801076e:	0843      	lsrs	r3, r0, #1
 8010770:	42ab      	cmp	r3, r5
 8010772:	d3ef      	bcc.n	8010754 <_realloc_r+0x14>
 8010774:	0029      	movs	r1, r5
 8010776:	0030      	movs	r0, r6
 8010778:	f7fe fc6e 	bl	800f058 <_malloc_r>
 801077c:	9001      	str	r0, [sp, #4]
 801077e:	2800      	cmp	r0, #0
 8010780:	d0ee      	beq.n	8010760 <_realloc_r+0x20>
 8010782:	002a      	movs	r2, r5
 8010784:	42bd      	cmp	r5, r7
 8010786:	d900      	bls.n	801078a <_realloc_r+0x4a>
 8010788:	003a      	movs	r2, r7
 801078a:	0021      	movs	r1, r4
 801078c:	9801      	ldr	r0, [sp, #4]
 801078e:	f7fe f88e 	bl	800e8ae <memcpy>
 8010792:	0021      	movs	r1, r4
 8010794:	0030      	movs	r0, r6
 8010796:	f7fe f899 	bl	800e8cc <_free_r>
 801079a:	9c01      	ldr	r4, [sp, #4]
 801079c:	e7da      	b.n	8010754 <_realloc_r+0x14>
	...

080107a0 <fiprintf>:
 80107a0:	b40e      	push	{r1, r2, r3}
 80107a2:	b517      	push	{r0, r1, r2, r4, lr}
 80107a4:	4c05      	ldr	r4, [pc, #20]	@ (80107bc <fiprintf+0x1c>)
 80107a6:	ab05      	add	r3, sp, #20
 80107a8:	cb04      	ldmia	r3!, {r2}
 80107aa:	0001      	movs	r1, r0
 80107ac:	6820      	ldr	r0, [r4, #0]
 80107ae:	9301      	str	r3, [sp, #4]
 80107b0:	f7ff fb52 	bl	800fe58 <_vfiprintf_r>
 80107b4:	bc1e      	pop	{r1, r2, r3, r4}
 80107b6:	bc08      	pop	{r3}
 80107b8:	b003      	add	sp, #12
 80107ba:	4718      	bx	r3
 80107bc:	20000b2c 	.word	0x20000b2c

080107c0 <__swhatbuf_r>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	000e      	movs	r6, r1
 80107c4:	001d      	movs	r5, r3
 80107c6:	230e      	movs	r3, #14
 80107c8:	5ec9      	ldrsh	r1, [r1, r3]
 80107ca:	0014      	movs	r4, r2
 80107cc:	b096      	sub	sp, #88	@ 0x58
 80107ce:	2900      	cmp	r1, #0
 80107d0:	da0c      	bge.n	80107ec <__swhatbuf_r+0x2c>
 80107d2:	89b2      	ldrh	r2, [r6, #12]
 80107d4:	2380      	movs	r3, #128	@ 0x80
 80107d6:	0011      	movs	r1, r2
 80107d8:	4019      	ands	r1, r3
 80107da:	421a      	tst	r2, r3
 80107dc:	d114      	bne.n	8010808 <__swhatbuf_r+0x48>
 80107de:	2380      	movs	r3, #128	@ 0x80
 80107e0:	00db      	lsls	r3, r3, #3
 80107e2:	2000      	movs	r0, #0
 80107e4:	6029      	str	r1, [r5, #0]
 80107e6:	6023      	str	r3, [r4, #0]
 80107e8:	b016      	add	sp, #88	@ 0x58
 80107ea:	bd70      	pop	{r4, r5, r6, pc}
 80107ec:	466a      	mov	r2, sp
 80107ee:	f000 f853 	bl	8010898 <_fstat_r>
 80107f2:	2800      	cmp	r0, #0
 80107f4:	dbed      	blt.n	80107d2 <__swhatbuf_r+0x12>
 80107f6:	23f0      	movs	r3, #240	@ 0xf0
 80107f8:	9901      	ldr	r1, [sp, #4]
 80107fa:	021b      	lsls	r3, r3, #8
 80107fc:	4019      	ands	r1, r3
 80107fe:	4b04      	ldr	r3, [pc, #16]	@ (8010810 <__swhatbuf_r+0x50>)
 8010800:	18c9      	adds	r1, r1, r3
 8010802:	424b      	negs	r3, r1
 8010804:	4159      	adcs	r1, r3
 8010806:	e7ea      	b.n	80107de <__swhatbuf_r+0x1e>
 8010808:	2100      	movs	r1, #0
 801080a:	2340      	movs	r3, #64	@ 0x40
 801080c:	e7e9      	b.n	80107e2 <__swhatbuf_r+0x22>
 801080e:	46c0      	nop			@ (mov r8, r8)
 8010810:	ffffe000 	.word	0xffffe000

08010814 <__smakebuf_r>:
 8010814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010816:	2602      	movs	r6, #2
 8010818:	898b      	ldrh	r3, [r1, #12]
 801081a:	0005      	movs	r5, r0
 801081c:	000c      	movs	r4, r1
 801081e:	b085      	sub	sp, #20
 8010820:	4233      	tst	r3, r6
 8010822:	d007      	beq.n	8010834 <__smakebuf_r+0x20>
 8010824:	0023      	movs	r3, r4
 8010826:	3347      	adds	r3, #71	@ 0x47
 8010828:	6023      	str	r3, [r4, #0]
 801082a:	6123      	str	r3, [r4, #16]
 801082c:	2301      	movs	r3, #1
 801082e:	6163      	str	r3, [r4, #20]
 8010830:	b005      	add	sp, #20
 8010832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010834:	ab03      	add	r3, sp, #12
 8010836:	aa02      	add	r2, sp, #8
 8010838:	f7ff ffc2 	bl	80107c0 <__swhatbuf_r>
 801083c:	9f02      	ldr	r7, [sp, #8]
 801083e:	9001      	str	r0, [sp, #4]
 8010840:	0039      	movs	r1, r7
 8010842:	0028      	movs	r0, r5
 8010844:	f7fe fc08 	bl	800f058 <_malloc_r>
 8010848:	2800      	cmp	r0, #0
 801084a:	d108      	bne.n	801085e <__smakebuf_r+0x4a>
 801084c:	220c      	movs	r2, #12
 801084e:	5ea3      	ldrsh	r3, [r4, r2]
 8010850:	059a      	lsls	r2, r3, #22
 8010852:	d4ed      	bmi.n	8010830 <__smakebuf_r+0x1c>
 8010854:	2203      	movs	r2, #3
 8010856:	4393      	bics	r3, r2
 8010858:	431e      	orrs	r6, r3
 801085a:	81a6      	strh	r6, [r4, #12]
 801085c:	e7e2      	b.n	8010824 <__smakebuf_r+0x10>
 801085e:	2380      	movs	r3, #128	@ 0x80
 8010860:	89a2      	ldrh	r2, [r4, #12]
 8010862:	6020      	str	r0, [r4, #0]
 8010864:	4313      	orrs	r3, r2
 8010866:	81a3      	strh	r3, [r4, #12]
 8010868:	9b03      	ldr	r3, [sp, #12]
 801086a:	6120      	str	r0, [r4, #16]
 801086c:	6167      	str	r7, [r4, #20]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d00c      	beq.n	801088c <__smakebuf_r+0x78>
 8010872:	0028      	movs	r0, r5
 8010874:	230e      	movs	r3, #14
 8010876:	5ee1      	ldrsh	r1, [r4, r3]
 8010878:	f000 f820 	bl	80108bc <_isatty_r>
 801087c:	2800      	cmp	r0, #0
 801087e:	d005      	beq.n	801088c <__smakebuf_r+0x78>
 8010880:	2303      	movs	r3, #3
 8010882:	89a2      	ldrh	r2, [r4, #12]
 8010884:	439a      	bics	r2, r3
 8010886:	3b02      	subs	r3, #2
 8010888:	4313      	orrs	r3, r2
 801088a:	81a3      	strh	r3, [r4, #12]
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	9a01      	ldr	r2, [sp, #4]
 8010890:	4313      	orrs	r3, r2
 8010892:	81a3      	strh	r3, [r4, #12]
 8010894:	e7cc      	b.n	8010830 <__smakebuf_r+0x1c>
	...

08010898 <_fstat_r>:
 8010898:	2300      	movs	r3, #0
 801089a:	b570      	push	{r4, r5, r6, lr}
 801089c:	4d06      	ldr	r5, [pc, #24]	@ (80108b8 <_fstat_r+0x20>)
 801089e:	0004      	movs	r4, r0
 80108a0:	0008      	movs	r0, r1
 80108a2:	0011      	movs	r1, r2
 80108a4:	602b      	str	r3, [r5, #0]
 80108a6:	f7f6 fe83 	bl	80075b0 <_fstat>
 80108aa:	1c43      	adds	r3, r0, #1
 80108ac:	d103      	bne.n	80108b6 <_fstat_r+0x1e>
 80108ae:	682b      	ldr	r3, [r5, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d000      	beq.n	80108b6 <_fstat_r+0x1e>
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	bd70      	pop	{r4, r5, r6, pc}
 80108b8:	20001f64 	.word	0x20001f64

080108bc <_isatty_r>:
 80108bc:	2300      	movs	r3, #0
 80108be:	b570      	push	{r4, r5, r6, lr}
 80108c0:	4d06      	ldr	r5, [pc, #24]	@ (80108dc <_isatty_r+0x20>)
 80108c2:	0004      	movs	r4, r0
 80108c4:	0008      	movs	r0, r1
 80108c6:	602b      	str	r3, [r5, #0]
 80108c8:	f7f6 fe80 	bl	80075cc <_isatty>
 80108cc:	1c43      	adds	r3, r0, #1
 80108ce:	d103      	bne.n	80108d8 <_isatty_r+0x1c>
 80108d0:	682b      	ldr	r3, [r5, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d000      	beq.n	80108d8 <_isatty_r+0x1c>
 80108d6:	6023      	str	r3, [r4, #0]
 80108d8:	bd70      	pop	{r4, r5, r6, pc}
 80108da:	46c0      	nop			@ (mov r8, r8)
 80108dc:	20001f64 	.word	0x20001f64

080108e0 <abort>:
 80108e0:	2006      	movs	r0, #6
 80108e2:	b510      	push	{r4, lr}
 80108e4:	f000 f834 	bl	8010950 <raise>
 80108e8:	2001      	movs	r0, #1
 80108ea:	f7f6 fe11 	bl	8007510 <_exit>

080108ee <_malloc_usable_size_r>:
 80108ee:	1f0b      	subs	r3, r1, #4
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	1f18      	subs	r0, r3, #4
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	da01      	bge.n	80108fc <_malloc_usable_size_r+0xe>
 80108f8:	580b      	ldr	r3, [r1, r0]
 80108fa:	18c0      	adds	r0, r0, r3
 80108fc:	4770      	bx	lr

080108fe <_raise_r>:
 80108fe:	b570      	push	{r4, r5, r6, lr}
 8010900:	0004      	movs	r4, r0
 8010902:	000d      	movs	r5, r1
 8010904:	291f      	cmp	r1, #31
 8010906:	d904      	bls.n	8010912 <_raise_r+0x14>
 8010908:	2316      	movs	r3, #22
 801090a:	6003      	str	r3, [r0, #0]
 801090c:	2001      	movs	r0, #1
 801090e:	4240      	negs	r0, r0
 8010910:	bd70      	pop	{r4, r5, r6, pc}
 8010912:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010914:	2b00      	cmp	r3, #0
 8010916:	d004      	beq.n	8010922 <_raise_r+0x24>
 8010918:	008a      	lsls	r2, r1, #2
 801091a:	189b      	adds	r3, r3, r2
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	2a00      	cmp	r2, #0
 8010920:	d108      	bne.n	8010934 <_raise_r+0x36>
 8010922:	0020      	movs	r0, r4
 8010924:	f000 f830 	bl	8010988 <_getpid_r>
 8010928:	002a      	movs	r2, r5
 801092a:	0001      	movs	r1, r0
 801092c:	0020      	movs	r0, r4
 801092e:	f000 f819 	bl	8010964 <_kill_r>
 8010932:	e7ed      	b.n	8010910 <_raise_r+0x12>
 8010934:	2a01      	cmp	r2, #1
 8010936:	d009      	beq.n	801094c <_raise_r+0x4e>
 8010938:	1c51      	adds	r1, r2, #1
 801093a:	d103      	bne.n	8010944 <_raise_r+0x46>
 801093c:	2316      	movs	r3, #22
 801093e:	6003      	str	r3, [r0, #0]
 8010940:	2001      	movs	r0, #1
 8010942:	e7e5      	b.n	8010910 <_raise_r+0x12>
 8010944:	2100      	movs	r1, #0
 8010946:	0028      	movs	r0, r5
 8010948:	6019      	str	r1, [r3, #0]
 801094a:	4790      	blx	r2
 801094c:	2000      	movs	r0, #0
 801094e:	e7df      	b.n	8010910 <_raise_r+0x12>

08010950 <raise>:
 8010950:	b510      	push	{r4, lr}
 8010952:	4b03      	ldr	r3, [pc, #12]	@ (8010960 <raise+0x10>)
 8010954:	0001      	movs	r1, r0
 8010956:	6818      	ldr	r0, [r3, #0]
 8010958:	f7ff ffd1 	bl	80108fe <_raise_r>
 801095c:	bd10      	pop	{r4, pc}
 801095e:	46c0      	nop			@ (mov r8, r8)
 8010960:	20000b2c 	.word	0x20000b2c

08010964 <_kill_r>:
 8010964:	2300      	movs	r3, #0
 8010966:	b570      	push	{r4, r5, r6, lr}
 8010968:	4d06      	ldr	r5, [pc, #24]	@ (8010984 <_kill_r+0x20>)
 801096a:	0004      	movs	r4, r0
 801096c:	0008      	movs	r0, r1
 801096e:	0011      	movs	r1, r2
 8010970:	602b      	str	r3, [r5, #0]
 8010972:	f7f6 fdbd 	bl	80074f0 <_kill>
 8010976:	1c43      	adds	r3, r0, #1
 8010978:	d103      	bne.n	8010982 <_kill_r+0x1e>
 801097a:	682b      	ldr	r3, [r5, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d000      	beq.n	8010982 <_kill_r+0x1e>
 8010980:	6023      	str	r3, [r4, #0]
 8010982:	bd70      	pop	{r4, r5, r6, pc}
 8010984:	20001f64 	.word	0x20001f64

08010988 <_getpid_r>:
 8010988:	b510      	push	{r4, lr}
 801098a:	f7f6 fdab 	bl	80074e4 <_getpid>
 801098e:	bd10      	pop	{r4, pc}

08010990 <fmod>:
 8010990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010992:	0014      	movs	r4, r2
 8010994:	001d      	movs	r5, r3
 8010996:	9000      	str	r0, [sp, #0]
 8010998:	9101      	str	r1, [sp, #4]
 801099a:	f000 f931 	bl	8010c00 <__ieee754_fmod>
 801099e:	0022      	movs	r2, r4
 80109a0:	0006      	movs	r6, r0
 80109a2:	000f      	movs	r7, r1
 80109a4:	9800      	ldr	r0, [sp, #0]
 80109a6:	9901      	ldr	r1, [sp, #4]
 80109a8:	002b      	movs	r3, r5
 80109aa:	f7f2 fc6b 	bl	8003284 <__aeabi_dcmpun>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	d113      	bne.n	80109da <fmod+0x4a>
 80109b2:	2200      	movs	r2, #0
 80109b4:	2300      	movs	r3, #0
 80109b6:	0020      	movs	r0, r4
 80109b8:	0029      	movs	r1, r5
 80109ba:	f7ef fd4f 	bl	800045c <__aeabi_dcmpeq>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d00b      	beq.n	80109da <fmod+0x4a>
 80109c2:	f7fd ff47 	bl	800e854 <__errno>
 80109c6:	2321      	movs	r3, #33	@ 0x21
 80109c8:	2200      	movs	r2, #0
 80109ca:	6003      	str	r3, [r0, #0]
 80109cc:	2300      	movs	r3, #0
 80109ce:	0010      	movs	r0, r2
 80109d0:	0019      	movs	r1, r3
 80109d2:	f7f1 f9af 	bl	8001d34 <__aeabi_ddiv>
 80109d6:	0006      	movs	r6, r0
 80109d8:	000f      	movs	r7, r1
 80109da:	0030      	movs	r0, r6
 80109dc:	0039      	movs	r1, r7
 80109de:	b003      	add	sp, #12
 80109e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109e2 <sqrt>:
 80109e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e4:	0004      	movs	r4, r0
 80109e6:	000d      	movs	r5, r1
 80109e8:	f000 f822 	bl	8010a30 <__ieee754_sqrt>
 80109ec:	0022      	movs	r2, r4
 80109ee:	0006      	movs	r6, r0
 80109f0:	000f      	movs	r7, r1
 80109f2:	002b      	movs	r3, r5
 80109f4:	0020      	movs	r0, r4
 80109f6:	0029      	movs	r1, r5
 80109f8:	f7f2 fc44 	bl	8003284 <__aeabi_dcmpun>
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d113      	bne.n	8010a28 <sqrt+0x46>
 8010a00:	2200      	movs	r2, #0
 8010a02:	2300      	movs	r3, #0
 8010a04:	0020      	movs	r0, r4
 8010a06:	0029      	movs	r1, r5
 8010a08:	f7ef fd2e 	bl	8000468 <__aeabi_dcmplt>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d00b      	beq.n	8010a28 <sqrt+0x46>
 8010a10:	f7fd ff20 	bl	800e854 <__errno>
 8010a14:	2321      	movs	r3, #33	@ 0x21
 8010a16:	2200      	movs	r2, #0
 8010a18:	6003      	str	r3, [r0, #0]
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	0010      	movs	r0, r2
 8010a1e:	0019      	movs	r1, r3
 8010a20:	f7f1 f988 	bl	8001d34 <__aeabi_ddiv>
 8010a24:	0006      	movs	r6, r0
 8010a26:	000f      	movs	r7, r1
 8010a28:	0030      	movs	r0, r6
 8010a2a:	0039      	movs	r1, r7
 8010a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a30 <__ieee754_sqrt>:
 8010a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a32:	000a      	movs	r2, r1
 8010a34:	000d      	movs	r5, r1
 8010a36:	496d      	ldr	r1, [pc, #436]	@ (8010bec <__ieee754_sqrt+0x1bc>)
 8010a38:	0004      	movs	r4, r0
 8010a3a:	0003      	movs	r3, r0
 8010a3c:	0008      	movs	r0, r1
 8010a3e:	b087      	sub	sp, #28
 8010a40:	4028      	ands	r0, r5
 8010a42:	4288      	cmp	r0, r1
 8010a44:	d111      	bne.n	8010a6a <__ieee754_sqrt+0x3a>
 8010a46:	0022      	movs	r2, r4
 8010a48:	002b      	movs	r3, r5
 8010a4a:	0020      	movs	r0, r4
 8010a4c:	0029      	movs	r1, r5
 8010a4e:	f7f1 fdb5 	bl	80025bc <__aeabi_dmul>
 8010a52:	0002      	movs	r2, r0
 8010a54:	000b      	movs	r3, r1
 8010a56:	0020      	movs	r0, r4
 8010a58:	0029      	movs	r1, r5
 8010a5a:	f7f0 fe07 	bl	800166c <__aeabi_dadd>
 8010a5e:	0004      	movs	r4, r0
 8010a60:	000d      	movs	r5, r1
 8010a62:	0020      	movs	r0, r4
 8010a64:	0029      	movs	r1, r5
 8010a66:	b007      	add	sp, #28
 8010a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a6a:	2d00      	cmp	r5, #0
 8010a6c:	dc11      	bgt.n	8010a92 <__ieee754_sqrt+0x62>
 8010a6e:	0069      	lsls	r1, r5, #1
 8010a70:	0849      	lsrs	r1, r1, #1
 8010a72:	4321      	orrs	r1, r4
 8010a74:	d0f5      	beq.n	8010a62 <__ieee754_sqrt+0x32>
 8010a76:	2000      	movs	r0, #0
 8010a78:	4285      	cmp	r5, r0
 8010a7a:	d010      	beq.n	8010a9e <__ieee754_sqrt+0x6e>
 8010a7c:	0022      	movs	r2, r4
 8010a7e:	002b      	movs	r3, r5
 8010a80:	0020      	movs	r0, r4
 8010a82:	0029      	movs	r1, r5
 8010a84:	f7f2 f862 	bl	8002b4c <__aeabi_dsub>
 8010a88:	0002      	movs	r2, r0
 8010a8a:	000b      	movs	r3, r1
 8010a8c:	f7f1 f952 	bl	8001d34 <__aeabi_ddiv>
 8010a90:	e7e5      	b.n	8010a5e <__ieee754_sqrt+0x2e>
 8010a92:	1528      	asrs	r0, r5, #20
 8010a94:	d115      	bne.n	8010ac2 <__ieee754_sqrt+0x92>
 8010a96:	2480      	movs	r4, #128	@ 0x80
 8010a98:	2100      	movs	r1, #0
 8010a9a:	0364      	lsls	r4, r4, #13
 8010a9c:	e007      	b.n	8010aae <__ieee754_sqrt+0x7e>
 8010a9e:	0ada      	lsrs	r2, r3, #11
 8010aa0:	3815      	subs	r0, #21
 8010aa2:	055b      	lsls	r3, r3, #21
 8010aa4:	2a00      	cmp	r2, #0
 8010aa6:	d0fa      	beq.n	8010a9e <__ieee754_sqrt+0x6e>
 8010aa8:	e7f5      	b.n	8010a96 <__ieee754_sqrt+0x66>
 8010aaa:	0052      	lsls	r2, r2, #1
 8010aac:	3101      	adds	r1, #1
 8010aae:	4222      	tst	r2, r4
 8010ab0:	d0fb      	beq.n	8010aaa <__ieee754_sqrt+0x7a>
 8010ab2:	1e4c      	subs	r4, r1, #1
 8010ab4:	1b00      	subs	r0, r0, r4
 8010ab6:	2420      	movs	r4, #32
 8010ab8:	001d      	movs	r5, r3
 8010aba:	1a64      	subs	r4, r4, r1
 8010abc:	40e5      	lsrs	r5, r4
 8010abe:	408b      	lsls	r3, r1
 8010ac0:	432a      	orrs	r2, r5
 8010ac2:	494b      	ldr	r1, [pc, #300]	@ (8010bf0 <__ieee754_sqrt+0x1c0>)
 8010ac4:	0312      	lsls	r2, r2, #12
 8010ac6:	1844      	adds	r4, r0, r1
 8010ac8:	2180      	movs	r1, #128	@ 0x80
 8010aca:	0b12      	lsrs	r2, r2, #12
 8010acc:	0349      	lsls	r1, r1, #13
 8010ace:	4311      	orrs	r1, r2
 8010ad0:	07c0      	lsls	r0, r0, #31
 8010ad2:	d403      	bmi.n	8010adc <__ieee754_sqrt+0xac>
 8010ad4:	0fda      	lsrs	r2, r3, #31
 8010ad6:	0049      	lsls	r1, r1, #1
 8010ad8:	1851      	adds	r1, r2, r1
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	2500      	movs	r5, #0
 8010ade:	1062      	asrs	r2, r4, #1
 8010ae0:	0049      	lsls	r1, r1, #1
 8010ae2:	2480      	movs	r4, #128	@ 0x80
 8010ae4:	9205      	str	r2, [sp, #20]
 8010ae6:	0fda      	lsrs	r2, r3, #31
 8010ae8:	1852      	adds	r2, r2, r1
 8010aea:	2016      	movs	r0, #22
 8010aec:	0029      	movs	r1, r5
 8010aee:	005b      	lsls	r3, r3, #1
 8010af0:	03a4      	lsls	r4, r4, #14
 8010af2:	190e      	adds	r6, r1, r4
 8010af4:	4296      	cmp	r6, r2
 8010af6:	dc02      	bgt.n	8010afe <__ieee754_sqrt+0xce>
 8010af8:	1931      	adds	r1, r6, r4
 8010afa:	1b92      	subs	r2, r2, r6
 8010afc:	192d      	adds	r5, r5, r4
 8010afe:	0fde      	lsrs	r6, r3, #31
 8010b00:	0052      	lsls	r2, r2, #1
 8010b02:	3801      	subs	r0, #1
 8010b04:	1992      	adds	r2, r2, r6
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	0864      	lsrs	r4, r4, #1
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d1f1      	bne.n	8010af2 <__ieee754_sqrt+0xc2>
 8010b0e:	2620      	movs	r6, #32
 8010b10:	2780      	movs	r7, #128	@ 0x80
 8010b12:	0004      	movs	r4, r0
 8010b14:	9604      	str	r6, [sp, #16]
 8010b16:	063f      	lsls	r7, r7, #24
 8010b18:	19c6      	adds	r6, r0, r7
 8010b1a:	46b4      	mov	ip, r6
 8010b1c:	4291      	cmp	r1, r2
 8010b1e:	db02      	blt.n	8010b26 <__ieee754_sqrt+0xf6>
 8010b20:	d114      	bne.n	8010b4c <__ieee754_sqrt+0x11c>
 8010b22:	429e      	cmp	r6, r3
 8010b24:	d812      	bhi.n	8010b4c <__ieee754_sqrt+0x11c>
 8010b26:	4660      	mov	r0, ip
 8010b28:	4666      	mov	r6, ip
 8010b2a:	19c0      	adds	r0, r0, r7
 8010b2c:	9100      	str	r1, [sp, #0]
 8010b2e:	2e00      	cmp	r6, #0
 8010b30:	da03      	bge.n	8010b3a <__ieee754_sqrt+0x10a>
 8010b32:	43c6      	mvns	r6, r0
 8010b34:	0ff6      	lsrs	r6, r6, #31
 8010b36:	198e      	adds	r6, r1, r6
 8010b38:	9600      	str	r6, [sp, #0]
 8010b3a:	1a52      	subs	r2, r2, r1
 8010b3c:	4563      	cmp	r3, ip
 8010b3e:	4189      	sbcs	r1, r1
 8010b40:	4249      	negs	r1, r1
 8010b42:	1a52      	subs	r2, r2, r1
 8010b44:	4661      	mov	r1, ip
 8010b46:	1a5b      	subs	r3, r3, r1
 8010b48:	9900      	ldr	r1, [sp, #0]
 8010b4a:	19e4      	adds	r4, r4, r7
 8010b4c:	0fde      	lsrs	r6, r3, #31
 8010b4e:	0052      	lsls	r2, r2, #1
 8010b50:	1992      	adds	r2, r2, r6
 8010b52:	9e04      	ldr	r6, [sp, #16]
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	3e01      	subs	r6, #1
 8010b58:	087f      	lsrs	r7, r7, #1
 8010b5a:	9604      	str	r6, [sp, #16]
 8010b5c:	2e00      	cmp	r6, #0
 8010b5e:	d1db      	bne.n	8010b18 <__ieee754_sqrt+0xe8>
 8010b60:	431a      	orrs	r2, r3
 8010b62:	d01f      	beq.n	8010ba4 <__ieee754_sqrt+0x174>
 8010b64:	4e23      	ldr	r6, [pc, #140]	@ (8010bf4 <__ieee754_sqrt+0x1c4>)
 8010b66:	4f24      	ldr	r7, [pc, #144]	@ (8010bf8 <__ieee754_sqrt+0x1c8>)
 8010b68:	6830      	ldr	r0, [r6, #0]
 8010b6a:	6871      	ldr	r1, [r6, #4]
 8010b6c:	683a      	ldr	r2, [r7, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	9200      	str	r2, [sp, #0]
 8010b72:	9301      	str	r3, [sp, #4]
 8010b74:	6832      	ldr	r2, [r6, #0]
 8010b76:	6873      	ldr	r3, [r6, #4]
 8010b78:	9202      	str	r2, [sp, #8]
 8010b7a:	9303      	str	r3, [sp, #12]
 8010b7c:	9a00      	ldr	r2, [sp, #0]
 8010b7e:	9b01      	ldr	r3, [sp, #4]
 8010b80:	f7f1 ffe4 	bl	8002b4c <__aeabi_dsub>
 8010b84:	0002      	movs	r2, r0
 8010b86:	000b      	movs	r3, r1
 8010b88:	9802      	ldr	r0, [sp, #8]
 8010b8a:	9903      	ldr	r1, [sp, #12]
 8010b8c:	f7ef fc76 	bl	800047c <__aeabi_dcmple>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	d007      	beq.n	8010ba4 <__ieee754_sqrt+0x174>
 8010b94:	6830      	ldr	r0, [r6, #0]
 8010b96:	6871      	ldr	r1, [r6, #4]
 8010b98:	683a      	ldr	r2, [r7, #0]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	1c67      	adds	r7, r4, #1
 8010b9e:	d10f      	bne.n	8010bc0 <__ieee754_sqrt+0x190>
 8010ba0:	9c04      	ldr	r4, [sp, #16]
 8010ba2:	3501      	adds	r5, #1
 8010ba4:	4b15      	ldr	r3, [pc, #84]	@ (8010bfc <__ieee754_sqrt+0x1cc>)
 8010ba6:	106a      	asrs	r2, r5, #1
 8010ba8:	18d2      	adds	r2, r2, r3
 8010baa:	0863      	lsrs	r3, r4, #1
 8010bac:	07ed      	lsls	r5, r5, #31
 8010bae:	d502      	bpl.n	8010bb6 <__ieee754_sqrt+0x186>
 8010bb0:	2180      	movs	r1, #128	@ 0x80
 8010bb2:	0609      	lsls	r1, r1, #24
 8010bb4:	430b      	orrs	r3, r1
 8010bb6:	9905      	ldr	r1, [sp, #20]
 8010bb8:	001c      	movs	r4, r3
 8010bba:	0509      	lsls	r1, r1, #20
 8010bbc:	188d      	adds	r5, r1, r2
 8010bbe:	e750      	b.n	8010a62 <__ieee754_sqrt+0x32>
 8010bc0:	f7f0 fd54 	bl	800166c <__aeabi_dadd>
 8010bc4:	6877      	ldr	r7, [r6, #4]
 8010bc6:	6836      	ldr	r6, [r6, #0]
 8010bc8:	0002      	movs	r2, r0
 8010bca:	000b      	movs	r3, r1
 8010bcc:	0030      	movs	r0, r6
 8010bce:	0039      	movs	r1, r7
 8010bd0:	f7ef fc4a 	bl	8000468 <__aeabi_dcmplt>
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	d004      	beq.n	8010be2 <__ieee754_sqrt+0x1b2>
 8010bd8:	3402      	adds	r4, #2
 8010bda:	4263      	negs	r3, r4
 8010bdc:	4163      	adcs	r3, r4
 8010bde:	18ed      	adds	r5, r5, r3
 8010be0:	e7e0      	b.n	8010ba4 <__ieee754_sqrt+0x174>
 8010be2:	2301      	movs	r3, #1
 8010be4:	3401      	adds	r4, #1
 8010be6:	439c      	bics	r4, r3
 8010be8:	e7dc      	b.n	8010ba4 <__ieee754_sqrt+0x174>
 8010bea:	46c0      	nop			@ (mov r8, r8)
 8010bec:	7ff00000 	.word	0x7ff00000
 8010bf0:	fffffc01 	.word	0xfffffc01
 8010bf4:	20000b88 	.word	0x20000b88
 8010bf8:	20000b80 	.word	0x20000b80
 8010bfc:	3fe00000 	.word	0x3fe00000

08010c00 <__ieee754_fmod>:
 8010c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c02:	b085      	sub	sp, #20
 8010c04:	9200      	str	r2, [sp, #0]
 8010c06:	9301      	str	r3, [sp, #4]
 8010c08:	9b01      	ldr	r3, [sp, #4]
 8010c0a:	9e00      	ldr	r6, [sp, #0]
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	085b      	lsrs	r3, r3, #1
 8010c10:	469c      	mov	ip, r3
 8010c12:	9603      	str	r6, [sp, #12]
 8010c14:	4333      	orrs	r3, r6
 8010c16:	d00d      	beq.n	8010c34 <__ieee754_fmod+0x34>
 8010c18:	4b7a      	ldr	r3, [pc, #488]	@ (8010e04 <__ieee754_fmod+0x204>)
 8010c1a:	004a      	lsls	r2, r1, #1
 8010c1c:	000d      	movs	r5, r1
 8010c1e:	0852      	lsrs	r2, r2, #1
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d807      	bhi.n	8010c34 <__ieee754_fmod+0x34>
 8010c24:	4664      	mov	r4, ip
 8010c26:	4273      	negs	r3, r6
 8010c28:	4333      	orrs	r3, r6
 8010c2a:	0fdb      	lsrs	r3, r3, #31
 8010c2c:	4323      	orrs	r3, r4
 8010c2e:	4c76      	ldr	r4, [pc, #472]	@ (8010e08 <__ieee754_fmod+0x208>)
 8010c30:	42a3      	cmp	r3, r4
 8010c32:	d909      	bls.n	8010c48 <__ieee754_fmod+0x48>
 8010c34:	9a00      	ldr	r2, [sp, #0]
 8010c36:	9b01      	ldr	r3, [sp, #4]
 8010c38:	f7f1 fcc0 	bl	80025bc <__aeabi_dmul>
 8010c3c:	0002      	movs	r2, r0
 8010c3e:	000b      	movs	r3, r1
 8010c40:	f7f1 f878 	bl	8001d34 <__aeabi_ddiv>
 8010c44:	b005      	add	sp, #20
 8010c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c48:	0fcc      	lsrs	r4, r1, #31
 8010c4a:	07e4      	lsls	r4, r4, #31
 8010c4c:	0007      	movs	r7, r0
 8010c4e:	0003      	movs	r3, r0
 8010c50:	9402      	str	r4, [sp, #8]
 8010c52:	4562      	cmp	r2, ip
 8010c54:	dc0a      	bgt.n	8010c6c <__ieee754_fmod+0x6c>
 8010c56:	dbf5      	blt.n	8010c44 <__ieee754_fmod+0x44>
 8010c58:	4286      	cmp	r6, r0
 8010c5a:	d8f3      	bhi.n	8010c44 <__ieee754_fmod+0x44>
 8010c5c:	d106      	bne.n	8010c6c <__ieee754_fmod+0x6c>
 8010c5e:	0022      	movs	r2, r4
 8010c60:	4b6a      	ldr	r3, [pc, #424]	@ (8010e0c <__ieee754_fmod+0x20c>)
 8010c62:	0f12      	lsrs	r2, r2, #28
 8010c64:	189b      	adds	r3, r3, r2
 8010c66:	6818      	ldr	r0, [r3, #0]
 8010c68:	6859      	ldr	r1, [r3, #4]
 8010c6a:	e7eb      	b.n	8010c44 <__ieee754_fmod+0x44>
 8010c6c:	4866      	ldr	r0, [pc, #408]	@ (8010e08 <__ieee754_fmod+0x208>)
 8010c6e:	4205      	tst	r5, r0
 8010c70:	d14c      	bne.n	8010d0c <__ieee754_fmod+0x10c>
 8010c72:	2a00      	cmp	r2, #0
 8010c74:	d143      	bne.n	8010cfe <__ieee754_fmod+0xfe>
 8010c76:	0038      	movs	r0, r7
 8010c78:	4965      	ldr	r1, [pc, #404]	@ (8010e10 <__ieee754_fmod+0x210>)
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	dc3c      	bgt.n	8010cf8 <__ieee754_fmod+0xf8>
 8010c7e:	4862      	ldr	r0, [pc, #392]	@ (8010e08 <__ieee754_fmod+0x208>)
 8010c80:	9c01      	ldr	r4, [sp, #4]
 8010c82:	4220      	tst	r0, r4
 8010c84:	d150      	bne.n	8010d28 <__ieee754_fmod+0x128>
 8010c86:	4660      	mov	r0, ip
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	d146      	bne.n	8010d1a <__ieee754_fmod+0x11a>
 8010c8c:	4860      	ldr	r0, [pc, #384]	@ (8010e10 <__ieee754_fmod+0x210>)
 8010c8e:	2e00      	cmp	r6, #0
 8010c90:	dc40      	bgt.n	8010d14 <__ieee754_fmod+0x114>
 8010c92:	4c60      	ldr	r4, [pc, #384]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010c94:	42a1      	cmp	r1, r4
 8010c96:	db4c      	blt.n	8010d32 <__ieee754_fmod+0x132>
 8010c98:	2280      	movs	r2, #128	@ 0x80
 8010c9a:	032f      	lsls	r7, r5, #12
 8010c9c:	0b3f      	lsrs	r7, r7, #12
 8010c9e:	0352      	lsls	r2, r2, #13
 8010ca0:	433a      	orrs	r2, r7
 8010ca2:	4c5c      	ldr	r4, [pc, #368]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010ca4:	42a0      	cmp	r0, r4
 8010ca6:	db59      	blt.n	8010d5c <__ieee754_fmod+0x15c>
 8010ca8:	2580      	movs	r5, #128	@ 0x80
 8010caa:	9c01      	ldr	r4, [sp, #4]
 8010cac:	036d      	lsls	r5, r5, #13
 8010cae:	0324      	lsls	r4, r4, #12
 8010cb0:	0b24      	lsrs	r4, r4, #12
 8010cb2:	4325      	orrs	r5, r4
 8010cb4:	1a09      	subs	r1, r1, r0
 8010cb6:	9e03      	ldr	r6, [sp, #12]
 8010cb8:	1b54      	subs	r4, r2, r5
 8010cba:	1b9f      	subs	r7, r3, r6
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	d165      	bne.n	8010d8c <__ieee754_fmod+0x18c>
 8010cc0:	42b3      	cmp	r3, r6
 8010cc2:	4189      	sbcs	r1, r1
 8010cc4:	4249      	negs	r1, r1
 8010cc6:	1a64      	subs	r4, r4, r1
 8010cc8:	d401      	bmi.n	8010cce <__ieee754_fmod+0xce>
 8010cca:	003b      	movs	r3, r7
 8010ccc:	0022      	movs	r2, r4
 8010cce:	0011      	movs	r1, r2
 8010cd0:	4319      	orrs	r1, r3
 8010cd2:	d06a      	beq.n	8010daa <__ieee754_fmod+0x1aa>
 8010cd4:	2180      	movs	r1, #128	@ 0x80
 8010cd6:	0349      	lsls	r1, r1, #13
 8010cd8:	428a      	cmp	r2, r1
 8010cda:	db6e      	blt.n	8010dba <__ieee754_fmod+0x1ba>
 8010cdc:	494d      	ldr	r1, [pc, #308]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010cde:	4288      	cmp	r0, r1
 8010ce0:	db71      	blt.n	8010dc6 <__ieee754_fmod+0x1c6>
 8010ce2:	494d      	ldr	r1, [pc, #308]	@ (8010e18 <__ieee754_fmod+0x218>)
 8010ce4:	1852      	adds	r2, r2, r1
 8010ce6:	9902      	ldr	r1, [sp, #8]
 8010ce8:	430a      	orrs	r2, r1
 8010cea:	494c      	ldr	r1, [pc, #304]	@ (8010e1c <__ieee754_fmod+0x21c>)
 8010cec:	1840      	adds	r0, r0, r1
 8010cee:	0504      	lsls	r4, r0, #20
 8010cf0:	4322      	orrs	r2, r4
 8010cf2:	0011      	movs	r1, r2
 8010cf4:	0018      	movs	r0, r3
 8010cf6:	e7a5      	b.n	8010c44 <__ieee754_fmod+0x44>
 8010cf8:	3901      	subs	r1, #1
 8010cfa:	0040      	lsls	r0, r0, #1
 8010cfc:	e7bd      	b.n	8010c7a <__ieee754_fmod+0x7a>
 8010cfe:	4945      	ldr	r1, [pc, #276]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010d00:	02d0      	lsls	r0, r2, #11
 8010d02:	2800      	cmp	r0, #0
 8010d04:	ddbb      	ble.n	8010c7e <__ieee754_fmod+0x7e>
 8010d06:	3901      	subs	r1, #1
 8010d08:	0040      	lsls	r0, r0, #1
 8010d0a:	e7fa      	b.n	8010d02 <__ieee754_fmod+0x102>
 8010d0c:	4844      	ldr	r0, [pc, #272]	@ (8010e20 <__ieee754_fmod+0x220>)
 8010d0e:	1511      	asrs	r1, r2, #20
 8010d10:	1809      	adds	r1, r1, r0
 8010d12:	e7b4      	b.n	8010c7e <__ieee754_fmod+0x7e>
 8010d14:	3801      	subs	r0, #1
 8010d16:	0076      	lsls	r6, r6, #1
 8010d18:	e7b9      	b.n	8010c8e <__ieee754_fmod+0x8e>
 8010d1a:	02c6      	lsls	r6, r0, #11
 8010d1c:	483d      	ldr	r0, [pc, #244]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010d1e:	2e00      	cmp	r6, #0
 8010d20:	ddb7      	ble.n	8010c92 <__ieee754_fmod+0x92>
 8010d22:	3801      	subs	r0, #1
 8010d24:	0076      	lsls	r6, r6, #1
 8010d26:	e7fa      	b.n	8010d1e <__ieee754_fmod+0x11e>
 8010d28:	4660      	mov	r0, ip
 8010d2a:	4c3d      	ldr	r4, [pc, #244]	@ (8010e20 <__ieee754_fmod+0x220>)
 8010d2c:	1500      	asrs	r0, r0, #20
 8010d2e:	1900      	adds	r0, r0, r4
 8010d30:	e7af      	b.n	8010c92 <__ieee754_fmod+0x92>
 8010d32:	4b38      	ldr	r3, [pc, #224]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010d34:	1a5b      	subs	r3, r3, r1
 8010d36:	2b1f      	cmp	r3, #31
 8010d38:	dc0a      	bgt.n	8010d50 <__ieee754_fmod+0x150>
 8010d3a:	409a      	lsls	r2, r3
 8010d3c:	003c      	movs	r4, r7
 8010d3e:	0015      	movs	r5, r2
 8010d40:	4a38      	ldr	r2, [pc, #224]	@ (8010e24 <__ieee754_fmod+0x224>)
 8010d42:	409f      	lsls	r7, r3
 8010d44:	188a      	adds	r2, r1, r2
 8010d46:	40d4      	lsrs	r4, r2
 8010d48:	0022      	movs	r2, r4
 8010d4a:	003b      	movs	r3, r7
 8010d4c:	432a      	orrs	r2, r5
 8010d4e:	e7a8      	b.n	8010ca2 <__ieee754_fmod+0xa2>
 8010d50:	003a      	movs	r2, r7
 8010d52:	4b35      	ldr	r3, [pc, #212]	@ (8010e28 <__ieee754_fmod+0x228>)
 8010d54:	1a5b      	subs	r3, r3, r1
 8010d56:	409a      	lsls	r2, r3
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e7a2      	b.n	8010ca2 <__ieee754_fmod+0xa2>
 8010d5c:	4c2d      	ldr	r4, [pc, #180]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010d5e:	1a27      	subs	r7, r4, r0
 8010d60:	2f1f      	cmp	r7, #31
 8010d62:	dc0c      	bgt.n	8010d7e <__ieee754_fmod+0x17e>
 8010d64:	4c2f      	ldr	r4, [pc, #188]	@ (8010e24 <__ieee754_fmod+0x224>)
 8010d66:	4665      	mov	r5, ip
 8010d68:	46a4      	mov	ip, r4
 8010d6a:	4484      	add	ip, r0
 8010d6c:	4666      	mov	r6, ip
 8010d6e:	9c00      	ldr	r4, [sp, #0]
 8010d70:	40bd      	lsls	r5, r7
 8010d72:	40f4      	lsrs	r4, r6
 8010d74:	4325      	orrs	r5, r4
 8010d76:	9c00      	ldr	r4, [sp, #0]
 8010d78:	40bc      	lsls	r4, r7
 8010d7a:	9403      	str	r4, [sp, #12]
 8010d7c:	e79a      	b.n	8010cb4 <__ieee754_fmod+0xb4>
 8010d7e:	4d2a      	ldr	r5, [pc, #168]	@ (8010e28 <__ieee754_fmod+0x228>)
 8010d80:	9c00      	ldr	r4, [sp, #0]
 8010d82:	1a2d      	subs	r5, r5, r0
 8010d84:	40ac      	lsls	r4, r5
 8010d86:	0025      	movs	r5, r4
 8010d88:	2400      	movs	r4, #0
 8010d8a:	e7f6      	b.n	8010d7a <__ieee754_fmod+0x17a>
 8010d8c:	9e03      	ldr	r6, [sp, #12]
 8010d8e:	42b3      	cmp	r3, r6
 8010d90:	41b6      	sbcs	r6, r6
 8010d92:	4276      	negs	r6, r6
 8010d94:	1ba4      	subs	r4, r4, r6
 8010d96:	d505      	bpl.n	8010da4 <__ieee754_fmod+0x1a4>
 8010d98:	0fdc      	lsrs	r4, r3, #31
 8010d9a:	0052      	lsls	r2, r2, #1
 8010d9c:	1912      	adds	r2, r2, r4
 8010d9e:	005b      	lsls	r3, r3, #1
 8010da0:	3901      	subs	r1, #1
 8010da2:	e788      	b.n	8010cb6 <__ieee754_fmod+0xb6>
 8010da4:	0023      	movs	r3, r4
 8010da6:	433b      	orrs	r3, r7
 8010da8:	d102      	bne.n	8010db0 <__ieee754_fmod+0x1b0>
 8010daa:	4b18      	ldr	r3, [pc, #96]	@ (8010e0c <__ieee754_fmod+0x20c>)
 8010dac:	9a02      	ldr	r2, [sp, #8]
 8010dae:	e758      	b.n	8010c62 <__ieee754_fmod+0x62>
 8010db0:	0064      	lsls	r4, r4, #1
 8010db2:	0ffa      	lsrs	r2, r7, #31
 8010db4:	18a2      	adds	r2, r4, r2
 8010db6:	007b      	lsls	r3, r7, #1
 8010db8:	e7f2      	b.n	8010da0 <__ieee754_fmod+0x1a0>
 8010dba:	0fdc      	lsrs	r4, r3, #31
 8010dbc:	0052      	lsls	r2, r2, #1
 8010dbe:	1912      	adds	r2, r2, r4
 8010dc0:	005b      	lsls	r3, r3, #1
 8010dc2:	3801      	subs	r0, #1
 8010dc4:	e788      	b.n	8010cd8 <__ieee754_fmod+0xd8>
 8010dc6:	4913      	ldr	r1, [pc, #76]	@ (8010e14 <__ieee754_fmod+0x214>)
 8010dc8:	1a0e      	subs	r6, r1, r0
 8010dca:	2e14      	cmp	r6, #20
 8010dcc:	dc0b      	bgt.n	8010de6 <__ieee754_fmod+0x1e6>
 8010dce:	40f3      	lsrs	r3, r6
 8010dd0:	0019      	movs	r1, r3
 8010dd2:	4b14      	ldr	r3, [pc, #80]	@ (8010e24 <__ieee754_fmod+0x224>)
 8010dd4:	18c0      	adds	r0, r0, r3
 8010dd6:	0013      	movs	r3, r2
 8010dd8:	4083      	lsls	r3, r0
 8010dda:	4132      	asrs	r2, r6
 8010ddc:	430b      	orrs	r3, r1
 8010dde:	9c02      	ldr	r4, [sp, #8]
 8010de0:	4314      	orrs	r4, r2
 8010de2:	0021      	movs	r1, r4
 8010de4:	e786      	b.n	8010cf4 <__ieee754_fmod+0xf4>
 8010de6:	2e1f      	cmp	r6, #31
 8010de8:	dc06      	bgt.n	8010df8 <__ieee754_fmod+0x1f8>
 8010dea:	490e      	ldr	r1, [pc, #56]	@ (8010e24 <__ieee754_fmod+0x224>)
 8010dec:	40f3      	lsrs	r3, r6
 8010dee:	1840      	adds	r0, r0, r1
 8010df0:	4082      	lsls	r2, r0
 8010df2:	4313      	orrs	r3, r2
 8010df4:	9a02      	ldr	r2, [sp, #8]
 8010df6:	e7f2      	b.n	8010dde <__ieee754_fmod+0x1de>
 8010df8:	4b0b      	ldr	r3, [pc, #44]	@ (8010e28 <__ieee754_fmod+0x228>)
 8010dfa:	1a1b      	subs	r3, r3, r0
 8010dfc:	411a      	asrs	r2, r3
 8010dfe:	0013      	movs	r3, r2
 8010e00:	e7f8      	b.n	8010df4 <__ieee754_fmod+0x1f4>
 8010e02:	46c0      	nop			@ (mov r8, r8)
 8010e04:	7fefffff 	.word	0x7fefffff
 8010e08:	7ff00000 	.word	0x7ff00000
 8010e0c:	08011d90 	.word	0x08011d90
 8010e10:	fffffbed 	.word	0xfffffbed
 8010e14:	fffffc02 	.word	0xfffffc02
 8010e18:	fff00000 	.word	0xfff00000
 8010e1c:	000003ff 	.word	0x000003ff
 8010e20:	fffffc01 	.word	0xfffffc01
 8010e24:	0000041e 	.word	0x0000041e
 8010e28:	fffffbe2 	.word	0xfffffbe2

08010e2c <_init>:
 8010e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e2e:	46c0      	nop			@ (mov r8, r8)
 8010e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e32:	bc08      	pop	{r3}
 8010e34:	469e      	mov	lr, r3
 8010e36:	4770      	bx	lr

08010e38 <_fini>:
 8010e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3a:	46c0      	nop			@ (mov r8, r8)
 8010e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e3e:	bc08      	pop	{r3}
 8010e40:	469e      	mov	lr, r3
 8010e42:	4770      	bx	lr
