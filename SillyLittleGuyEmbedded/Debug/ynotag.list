
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011908  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  080119c8  080119c8  000129c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012920  08012920  000164f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012920  08012920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012928  08012928  000164f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012928  08012928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801292c  0801292c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000024f8  20000000  08012930  00014000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00001468  200024f8  08014e28  000164f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003960  08014e28  00016960  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000164f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0f7  00000000  00000000  00016520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f7a  00000000  00000000  00034617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00038598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000169e  00000000  00000000  0003a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020761  00000000  00000000  0003b82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000225cc  00000000  00000000  0005bf8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc410  00000000  00000000  0007e55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f44  00000000  00000000  0014a9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001528f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200024f8 	.word	0x200024f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801199c 	.word	0x0801199c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200024fc 	.word	0x200024fc
 8000104:	0801199c 	.word	0x0801199c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f002 f863 	bl	800251c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 ffa3 	bl	80023ac <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f855 	bl	800251c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f84b 	bl	800251c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ffcd 	bl	8002434 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 ffc3 	bl	8002434 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fd15 	bl	8000ef4 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fc95 	bl	8000e04 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fd07 	bl	8000ef4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fcfd 	bl	8000ef4 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fca3 	bl	8000e54 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fc99 	bl	8000e54 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	0008      	movs	r0, r1
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	@ (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	@ (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f8da 	bl	8000718 <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)

08000570 <__aeabi_lmul>:
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46ce      	mov	lr, r9
 8000574:	4699      	mov	r9, r3
 8000576:	0c03      	lsrs	r3, r0, #16
 8000578:	469c      	mov	ip, r3
 800057a:	0413      	lsls	r3, r2, #16
 800057c:	4647      	mov	r7, r8
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	001d      	movs	r5, r3
 8000582:	000e      	movs	r6, r1
 8000584:	4661      	mov	r1, ip
 8000586:	0404      	lsls	r4, r0, #16
 8000588:	0c24      	lsrs	r4, r4, #16
 800058a:	b580      	push	{r7, lr}
 800058c:	0007      	movs	r7, r0
 800058e:	0c10      	lsrs	r0, r2, #16
 8000590:	434b      	muls	r3, r1
 8000592:	4365      	muls	r5, r4
 8000594:	4341      	muls	r1, r0
 8000596:	4360      	muls	r0, r4
 8000598:	0c2c      	lsrs	r4, r5, #16
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	1824      	adds	r4, r4, r0
 800059e:	468c      	mov	ip, r1
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d903      	bls.n	80005ac <__aeabi_lmul+0x3c>
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	025b      	lsls	r3, r3, #9
 80005a8:	4698      	mov	r8, r3
 80005aa:	44c4      	add	ip, r8
 80005ac:	4649      	mov	r1, r9
 80005ae:	4379      	muls	r1, r7
 80005b0:	4356      	muls	r6, r2
 80005b2:	0c23      	lsrs	r3, r4, #16
 80005b4:	042d      	lsls	r5, r5, #16
 80005b6:	0c2d      	lsrs	r5, r5, #16
 80005b8:	1989      	adds	r1, r1, r6
 80005ba:	4463      	add	r3, ip
 80005bc:	0424      	lsls	r4, r4, #16
 80005be:	1960      	adds	r0, r4, r5
 80005c0:	18c9      	adds	r1, r1, r3
 80005c2:	bcc0      	pop	{r6, r7}
 80005c4:	46b9      	mov	r9, r7
 80005c6:	46b0      	mov	r8, r6
 80005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)

080005cc <__aeabi_f2uiz>:
 80005cc:	219e      	movs	r1, #158	@ 0x9e
 80005ce:	b510      	push	{r4, lr}
 80005d0:	05c9      	lsls	r1, r1, #23
 80005d2:	1c04      	adds	r4, r0, #0
 80005d4:	f7ff ffa2 	bl	800051c <__aeabi_fcmpge>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d103      	bne.n	80005e4 <__aeabi_f2uiz+0x18>
 80005dc:	1c20      	adds	r0, r4, #0
 80005de:	f000 ffb9 	bl	8001554 <__aeabi_f2iz>
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	219e      	movs	r1, #158	@ 0x9e
 80005e6:	1c20      	adds	r0, r4, #0
 80005e8:	05c9      	lsls	r1, r1, #23
 80005ea:	f000 fe0f 	bl	800120c <__aeabi_fsub>
 80005ee:	f000 ffb1 	bl	8001554 <__aeabi_f2iz>
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	469c      	mov	ip, r3
 80005f8:	4460      	add	r0, ip
 80005fa:	e7f2      	b.n	80005e2 <__aeabi_f2uiz+0x16>

080005fc <__aeabi_d2uiz>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2200      	movs	r2, #0
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__aeabi_d2uiz+0x38>)
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	f7ff ff4f 	bl	80004a8 <__aeabi_dcmpge>
 800060a:	2800      	cmp	r0, #0
 800060c:	d104      	bne.n	8000618 <__aeabi_d2uiz+0x1c>
 800060e:	0020      	movs	r0, r4
 8000610:	0029      	movs	r1, r5
 8000612:	f002 fe7b 	bl	800330c <__aeabi_d2iz>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <__aeabi_d2uiz+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	0020      	movs	r0, r4
 800061e:	0029      	movs	r1, r5
 8000620:	f002 fab6 	bl	8002b90 <__aeabi_dsub>
 8000624:	f002 fe72 	bl	800330c <__aeabi_d2iz>
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	061b      	lsls	r3, r3, #24
 800062c:	469c      	mov	ip, r3
 800062e:	4460      	add	r0, ip
 8000630:	e7f1      	b.n	8000616 <__aeabi_d2uiz+0x1a>
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	41e00000 	.word	0x41e00000

08000638 <__aeabi_d2lz>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	0004      	movs	r4, r0
 8000640:	000d      	movs	r5, r1
 8000642:	f7ff ff13 	bl	800046c <__aeabi_dcmplt>
 8000646:	2800      	cmp	r0, #0
 8000648:	d108      	bne.n	800065c <__aeabi_d2lz+0x24>
 800064a:	0020      	movs	r0, r4
 800064c:	0029      	movs	r1, r5
 800064e:	f000 f82f 	bl	80006b0 <__aeabi_d2ulz>
 8000652:	0002      	movs	r2, r0
 8000654:	000b      	movs	r3, r1
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	061b      	lsls	r3, r3, #24
 8000660:	18e9      	adds	r1, r5, r3
 8000662:	0020      	movs	r0, r4
 8000664:	f000 f824 	bl	80006b0 <__aeabi_d2ulz>
 8000668:	2300      	movs	r3, #0
 800066a:	4242      	negs	r2, r0
 800066c:	418b      	sbcs	r3, r1
 800066e:	e7f2      	b.n	8000656 <__aeabi_d2lz+0x1e>

08000670 <__aeabi_f2ulz>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f002 fed9 	bl	8003428 <__aeabi_f2d>
 8000676:	2200      	movs	r2, #0
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <__aeabi_f2ulz+0x38>)
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	f001 ffbf 	bl	8002600 <__aeabi_dmul>
 8000682:	f7ff ffbb 	bl	80005fc <__aeabi_d2uiz>
 8000686:	0006      	movs	r6, r0
 8000688:	f002 feaa 	bl	80033e0 <__aeabi_ui2d>
 800068c:	2200      	movs	r2, #0
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <__aeabi_f2ulz+0x3c>)
 8000690:	f001 ffb6 	bl	8002600 <__aeabi_dmul>
 8000694:	0002      	movs	r2, r0
 8000696:	000b      	movs	r3, r1
 8000698:	0020      	movs	r0, r4
 800069a:	0029      	movs	r1, r5
 800069c:	f002 fa78 	bl	8002b90 <__aeabi_dsub>
 80006a0:	f7ff ffac 	bl	80005fc <__aeabi_d2uiz>
 80006a4:	0031      	movs	r1, r6
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	3df00000 	.word	0x3df00000
 80006ac:	41f00000 	.word	0x41f00000

080006b0 <__aeabi_d2ulz>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <__aeabi_d2ulz+0x34>)
 80006b6:	000d      	movs	r5, r1
 80006b8:	0004      	movs	r4, r0
 80006ba:	f001 ffa1 	bl	8002600 <__aeabi_dmul>
 80006be:	f7ff ff9d 	bl	80005fc <__aeabi_d2uiz>
 80006c2:	0006      	movs	r6, r0
 80006c4:	f002 fe8c 	bl	80033e0 <__aeabi_ui2d>
 80006c8:	2200      	movs	r2, #0
 80006ca:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <__aeabi_d2ulz+0x38>)
 80006cc:	f001 ff98 	bl	8002600 <__aeabi_dmul>
 80006d0:	0002      	movs	r2, r0
 80006d2:	000b      	movs	r3, r1
 80006d4:	0020      	movs	r0, r4
 80006d6:	0029      	movs	r1, r5
 80006d8:	f002 fa5a 	bl	8002b90 <__aeabi_dsub>
 80006dc:	f7ff ff8e 	bl	80005fc <__aeabi_d2uiz>
 80006e0:	0031      	movs	r1, r6
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	3df00000 	.word	0x3df00000
 80006e8:	41f00000 	.word	0x41f00000

080006ec <__aeabi_l2d>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	0006      	movs	r6, r0
 80006f0:	0008      	movs	r0, r1
 80006f2:	f002 fe47 	bl	8003384 <__aeabi_i2d>
 80006f6:	2200      	movs	r2, #0
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <__aeabi_l2d+0x28>)
 80006fa:	f001 ff81 	bl	8002600 <__aeabi_dmul>
 80006fe:	000d      	movs	r5, r1
 8000700:	0004      	movs	r4, r0
 8000702:	0030      	movs	r0, r6
 8000704:	f002 fe6c 	bl	80033e0 <__aeabi_ui2d>
 8000708:	002b      	movs	r3, r5
 800070a:	0022      	movs	r2, r4
 800070c:	f000 ffd0 	bl	80016b0 <__aeabi_dadd>
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	41f00000 	.word	0x41f00000

08000718 <__udivmoddi4>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	4657      	mov	r7, sl
 800071c:	464e      	mov	r6, r9
 800071e:	4645      	mov	r5, r8
 8000720:	46de      	mov	lr, fp
 8000722:	b5e0      	push	{r5, r6, r7, lr}
 8000724:	0004      	movs	r4, r0
 8000726:	000d      	movs	r5, r1
 8000728:	4692      	mov	sl, r2
 800072a:	4699      	mov	r9, r3
 800072c:	b083      	sub	sp, #12
 800072e:	428b      	cmp	r3, r1
 8000730:	d830      	bhi.n	8000794 <__udivmoddi4+0x7c>
 8000732:	d02d      	beq.n	8000790 <__udivmoddi4+0x78>
 8000734:	4649      	mov	r1, r9
 8000736:	4650      	mov	r0, sl
 8000738:	f002 ff60 	bl	80035fc <__clzdi2>
 800073c:	0029      	movs	r1, r5
 800073e:	0006      	movs	r6, r0
 8000740:	0020      	movs	r0, r4
 8000742:	f002 ff5b 	bl	80035fc <__clzdi2>
 8000746:	1a33      	subs	r3, r6, r0
 8000748:	4698      	mov	r8, r3
 800074a:	3b20      	subs	r3, #32
 800074c:	d434      	bmi.n	80007b8 <__udivmoddi4+0xa0>
 800074e:	469b      	mov	fp, r3
 8000750:	4653      	mov	r3, sl
 8000752:	465a      	mov	r2, fp
 8000754:	4093      	lsls	r3, r2
 8000756:	4642      	mov	r2, r8
 8000758:	001f      	movs	r7, r3
 800075a:	4653      	mov	r3, sl
 800075c:	4093      	lsls	r3, r2
 800075e:	001e      	movs	r6, r3
 8000760:	42af      	cmp	r7, r5
 8000762:	d83b      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000764:	42af      	cmp	r7, r5
 8000766:	d100      	bne.n	800076a <__udivmoddi4+0x52>
 8000768:	e079      	b.n	800085e <__udivmoddi4+0x146>
 800076a:	465b      	mov	r3, fp
 800076c:	1ba4      	subs	r4, r4, r6
 800076e:	41bd      	sbcs	r5, r7
 8000770:	2b00      	cmp	r3, #0
 8000772:	da00      	bge.n	8000776 <__udivmoddi4+0x5e>
 8000774:	e076      	b.n	8000864 <__udivmoddi4+0x14c>
 8000776:	2200      	movs	r2, #0
 8000778:	2300      	movs	r3, #0
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2301      	movs	r3, #1
 8000780:	465a      	mov	r2, fp
 8000782:	4093      	lsls	r3, r2
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2301      	movs	r3, #1
 8000788:	4642      	mov	r2, r8
 800078a:	4093      	lsls	r3, r2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	e029      	b.n	80007e4 <__udivmoddi4+0xcc>
 8000790:	4282      	cmp	r2, r0
 8000792:	d9cf      	bls.n	8000734 <__udivmoddi4+0x1c>
 8000794:	2200      	movs	r2, #0
 8000796:	2300      	movs	r3, #0
 8000798:	9200      	str	r2, [sp, #0]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <__udivmoddi4+0x8e>
 80007a2:	601c      	str	r4, [r3, #0]
 80007a4:	605d      	str	r5, [r3, #4]
 80007a6:	9800      	ldr	r0, [sp, #0]
 80007a8:	9901      	ldr	r1, [sp, #4]
 80007aa:	b003      	add	sp, #12
 80007ac:	bcf0      	pop	{r4, r5, r6, r7}
 80007ae:	46bb      	mov	fp, r7
 80007b0:	46b2      	mov	sl, r6
 80007b2:	46a9      	mov	r9, r5
 80007b4:	46a0      	mov	r8, r4
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	4642      	mov	r2, r8
 80007ba:	469b      	mov	fp, r3
 80007bc:	2320      	movs	r3, #32
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	4652      	mov	r2, sl
 80007c2:	40da      	lsrs	r2, r3
 80007c4:	4641      	mov	r1, r8
 80007c6:	0013      	movs	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	408a      	lsls	r2, r1
 80007cc:	0017      	movs	r7, r2
 80007ce:	4642      	mov	r2, r8
 80007d0:	431f      	orrs	r7, r3
 80007d2:	4653      	mov	r3, sl
 80007d4:	4093      	lsls	r3, r2
 80007d6:	001e      	movs	r6, r3
 80007d8:	42af      	cmp	r7, r5
 80007da:	d9c3      	bls.n	8000764 <__udivmoddi4+0x4c>
 80007dc:	2200      	movs	r2, #0
 80007de:	2300      	movs	r3, #0
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	4643      	mov	r3, r8
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0d8      	beq.n	800079c <__udivmoddi4+0x84>
 80007ea:	07fb      	lsls	r3, r7, #31
 80007ec:	0872      	lsrs	r2, r6, #1
 80007ee:	431a      	orrs	r2, r3
 80007f0:	4646      	mov	r6, r8
 80007f2:	087b      	lsrs	r3, r7, #1
 80007f4:	e00e      	b.n	8000814 <__udivmoddi4+0xfc>
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d101      	bne.n	80007fe <__udivmoddi4+0xe6>
 80007fa:	42a2      	cmp	r2, r4
 80007fc:	d80c      	bhi.n	8000818 <__udivmoddi4+0x100>
 80007fe:	1aa4      	subs	r4, r4, r2
 8000800:	419d      	sbcs	r5, r3
 8000802:	2001      	movs	r0, #1
 8000804:	1924      	adds	r4, r4, r4
 8000806:	416d      	adcs	r5, r5
 8000808:	2100      	movs	r1, #0
 800080a:	3e01      	subs	r6, #1
 800080c:	1824      	adds	r4, r4, r0
 800080e:	414d      	adcs	r5, r1
 8000810:	2e00      	cmp	r6, #0
 8000812:	d006      	beq.n	8000822 <__udivmoddi4+0x10a>
 8000814:	42ab      	cmp	r3, r5
 8000816:	d9ee      	bls.n	80007f6 <__udivmoddi4+0xde>
 8000818:	3e01      	subs	r6, #1
 800081a:	1924      	adds	r4, r4, r4
 800081c:	416d      	adcs	r5, r5
 800081e:	2e00      	cmp	r6, #0
 8000820:	d1f8      	bne.n	8000814 <__udivmoddi4+0xfc>
 8000822:	9800      	ldr	r0, [sp, #0]
 8000824:	9901      	ldr	r1, [sp, #4]
 8000826:	465b      	mov	r3, fp
 8000828:	1900      	adds	r0, r0, r4
 800082a:	4169      	adcs	r1, r5
 800082c:	2b00      	cmp	r3, #0
 800082e:	db24      	blt.n	800087a <__udivmoddi4+0x162>
 8000830:	002b      	movs	r3, r5
 8000832:	465a      	mov	r2, fp
 8000834:	4644      	mov	r4, r8
 8000836:	40d3      	lsrs	r3, r2
 8000838:	002a      	movs	r2, r5
 800083a:	40e2      	lsrs	r2, r4
 800083c:	001c      	movs	r4, r3
 800083e:	465b      	mov	r3, fp
 8000840:	0015      	movs	r5, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	db2a      	blt.n	800089c <__udivmoddi4+0x184>
 8000846:	0026      	movs	r6, r4
 8000848:	409e      	lsls	r6, r3
 800084a:	0033      	movs	r3, r6
 800084c:	0026      	movs	r6, r4
 800084e:	4647      	mov	r7, r8
 8000850:	40be      	lsls	r6, r7
 8000852:	0032      	movs	r2, r6
 8000854:	1a80      	subs	r0, r0, r2
 8000856:	4199      	sbcs	r1, r3
 8000858:	9000      	str	r0, [sp, #0]
 800085a:	9101      	str	r1, [sp, #4]
 800085c:	e79e      	b.n	800079c <__udivmoddi4+0x84>
 800085e:	42a3      	cmp	r3, r4
 8000860:	d8bc      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000862:	e782      	b.n	800076a <__udivmoddi4+0x52>
 8000864:	4642      	mov	r2, r8
 8000866:	2320      	movs	r3, #32
 8000868:	2100      	movs	r1, #0
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	2200      	movs	r2, #0
 800086e:	9100      	str	r1, [sp, #0]
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	40da      	lsrs	r2, r3
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	e785      	b.n	8000786 <__udivmoddi4+0x6e>
 800087a:	4642      	mov	r2, r8
 800087c:	2320      	movs	r3, #32
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	002a      	movs	r2, r5
 8000882:	4646      	mov	r6, r8
 8000884:	409a      	lsls	r2, r3
 8000886:	0023      	movs	r3, r4
 8000888:	40f3      	lsrs	r3, r6
 800088a:	4644      	mov	r4, r8
 800088c:	4313      	orrs	r3, r2
 800088e:	002a      	movs	r2, r5
 8000890:	40e2      	lsrs	r2, r4
 8000892:	001c      	movs	r4, r3
 8000894:	465b      	mov	r3, fp
 8000896:	0015      	movs	r5, r2
 8000898:	2b00      	cmp	r3, #0
 800089a:	dad4      	bge.n	8000846 <__udivmoddi4+0x12e>
 800089c:	4642      	mov	r2, r8
 800089e:	002f      	movs	r7, r5
 80008a0:	2320      	movs	r3, #32
 80008a2:	0026      	movs	r6, r4
 80008a4:	4097      	lsls	r7, r2
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	40de      	lsrs	r6, r3
 80008aa:	003b      	movs	r3, r7
 80008ac:	4333      	orrs	r3, r6
 80008ae:	e7cd      	b.n	800084c <__udivmoddi4+0x134>

080008b0 <__aeabi_fadd>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	46ce      	mov	lr, r9
 80008b4:	4647      	mov	r7, r8
 80008b6:	0243      	lsls	r3, r0, #9
 80008b8:	0a5a      	lsrs	r2, r3, #9
 80008ba:	024e      	lsls	r6, r1, #9
 80008bc:	0045      	lsls	r5, r0, #1
 80008be:	0fc4      	lsrs	r4, r0, #31
 80008c0:	0048      	lsls	r0, r1, #1
 80008c2:	4691      	mov	r9, r2
 80008c4:	0e2d      	lsrs	r5, r5, #24
 80008c6:	0a72      	lsrs	r2, r6, #9
 80008c8:	0e00      	lsrs	r0, r0, #24
 80008ca:	4694      	mov	ip, r2
 80008cc:	b580      	push	{r7, lr}
 80008ce:	099b      	lsrs	r3, r3, #6
 80008d0:	0fc9      	lsrs	r1, r1, #31
 80008d2:	09b6      	lsrs	r6, r6, #6
 80008d4:	1a2a      	subs	r2, r5, r0
 80008d6:	428c      	cmp	r4, r1
 80008d8:	d021      	beq.n	800091e <__aeabi_fadd+0x6e>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	dd0d      	ble.n	80008fa <__aeabi_fadd+0x4a>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d12d      	bne.n	800093e <__aeabi_fadd+0x8e>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fadd+0x38>
 80008e6:	e08d      	b.n	8000a04 <__aeabi_fadd+0x154>
 80008e8:	1e51      	subs	r1, r2, #1
 80008ea:	2a01      	cmp	r2, #1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fadd+0x40>
 80008ee:	e11d      	b.n	8000b2c <__aeabi_fadd+0x27c>
 80008f0:	2aff      	cmp	r2, #255	@ 0xff
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x46>
 80008f4:	e0ab      	b.n	8000a4e <__aeabi_fadd+0x19e>
 80008f6:	000a      	movs	r2, r1
 80008f8:	e027      	b.n	800094a <__aeabi_fadd+0x9a>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d04d      	beq.n	800099a <__aeabi_fadd+0xea>
 80008fe:	1b42      	subs	r2, r0, r5
 8000900:	2d00      	cmp	r5, #0
 8000902:	d000      	beq.n	8000906 <__aeabi_fadd+0x56>
 8000904:	e0cc      	b.n	8000aa0 <__aeabi_fadd+0x1f0>
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fadd+0x5c>
 800090a:	e079      	b.n	8000a00 <__aeabi_fadd+0x150>
 800090c:	1e54      	subs	r4, r2, #1
 800090e:	2a01      	cmp	r2, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x64>
 8000912:	e128      	b.n	8000b66 <__aeabi_fadd+0x2b6>
 8000914:	2aff      	cmp	r2, #255	@ 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x6a>
 8000918:	e097      	b.n	8000a4a <__aeabi_fadd+0x19a>
 800091a:	0022      	movs	r2, r4
 800091c:	e0c5      	b.n	8000aaa <__aeabi_fadd+0x1fa>
 800091e:	2a00      	cmp	r2, #0
 8000920:	dc00      	bgt.n	8000924 <__aeabi_fadd+0x74>
 8000922:	e096      	b.n	8000a52 <__aeabi_fadd+0x1a2>
 8000924:	2800      	cmp	r0, #0
 8000926:	d04f      	beq.n	80009c8 <__aeabi_fadd+0x118>
 8000928:	2dff      	cmp	r5, #255	@ 0xff
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x7e>
 800092c:	e08f      	b.n	8000a4e <__aeabi_fadd+0x19e>
 800092e:	2180      	movs	r1, #128	@ 0x80
 8000930:	04c9      	lsls	r1, r1, #19
 8000932:	430e      	orrs	r6, r1
 8000934:	2a1b      	cmp	r2, #27
 8000936:	dd51      	ble.n	80009dc <__aeabi_fadd+0x12c>
 8000938:	002a      	movs	r2, r5
 800093a:	3301      	adds	r3, #1
 800093c:	e018      	b.n	8000970 <__aeabi_fadd+0xc0>
 800093e:	2dff      	cmp	r5, #255	@ 0xff
 8000940:	d100      	bne.n	8000944 <__aeabi_fadd+0x94>
 8000942:	e084      	b.n	8000a4e <__aeabi_fadd+0x19e>
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	04c9      	lsls	r1, r1, #19
 8000948:	430e      	orrs	r6, r1
 800094a:	2101      	movs	r1, #1
 800094c:	2a1b      	cmp	r2, #27
 800094e:	dc08      	bgt.n	8000962 <__aeabi_fadd+0xb2>
 8000950:	0031      	movs	r1, r6
 8000952:	2020      	movs	r0, #32
 8000954:	40d1      	lsrs	r1, r2
 8000956:	1a82      	subs	r2, r0, r2
 8000958:	4096      	lsls	r6, r2
 800095a:	0032      	movs	r2, r6
 800095c:	1e50      	subs	r0, r2, #1
 800095e:	4182      	sbcs	r2, r0
 8000960:	4311      	orrs	r1, r2
 8000962:	1a5b      	subs	r3, r3, r1
 8000964:	015a      	lsls	r2, r3, #5
 8000966:	d459      	bmi.n	8000a1c <__aeabi_fadd+0x16c>
 8000968:	2107      	movs	r1, #7
 800096a:	002a      	movs	r2, r5
 800096c:	4019      	ands	r1, r3
 800096e:	d049      	beq.n	8000a04 <__aeabi_fadd+0x154>
 8000970:	210f      	movs	r1, #15
 8000972:	4019      	ands	r1, r3
 8000974:	2904      	cmp	r1, #4
 8000976:	d000      	beq.n	800097a <__aeabi_fadd+0xca>
 8000978:	3304      	adds	r3, #4
 800097a:	0159      	lsls	r1, r3, #5
 800097c:	d542      	bpl.n	8000a04 <__aeabi_fadd+0x154>
 800097e:	1c50      	adds	r0, r2, #1
 8000980:	2afe      	cmp	r2, #254	@ 0xfe
 8000982:	d03a      	beq.n	80009fa <__aeabi_fadd+0x14a>
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	b2c0      	uxtb	r0, r0
 8000988:	0a5b      	lsrs	r3, r3, #9
 800098a:	05c0      	lsls	r0, r0, #23
 800098c:	4318      	orrs	r0, r3
 800098e:	07e4      	lsls	r4, r4, #31
 8000990:	4320      	orrs	r0, r4
 8000992:	bcc0      	pop	{r6, r7}
 8000994:	46b9      	mov	r9, r7
 8000996:	46b0      	mov	r8, r6
 8000998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800099a:	20fe      	movs	r0, #254	@ 0xfe
 800099c:	4680      	mov	r8, r0
 800099e:	1c6f      	adds	r7, r5, #1
 80009a0:	0038      	movs	r0, r7
 80009a2:	4647      	mov	r7, r8
 80009a4:	4207      	tst	r7, r0
 80009a6:	d000      	beq.n	80009aa <__aeabi_fadd+0xfa>
 80009a8:	e08e      	b.n	8000ac8 <__aeabi_fadd+0x218>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x100>
 80009ae:	e0b4      	b.n	8000b1a <__aeabi_fadd+0x26a>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fadd+0x106>
 80009b4:	e0db      	b.n	8000b6e <__aeabi_fadd+0x2be>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d06c      	beq.n	8000a94 <__aeabi_fadd+0x1e4>
 80009ba:	1b98      	subs	r0, r3, r6
 80009bc:	0145      	lsls	r5, r0, #5
 80009be:	d400      	bmi.n	80009c2 <__aeabi_fadd+0x112>
 80009c0:	e0f7      	b.n	8000bb2 <__aeabi_fadd+0x302>
 80009c2:	000c      	movs	r4, r1
 80009c4:	1af3      	subs	r3, r6, r3
 80009c6:	e03d      	b.n	8000a44 <__aeabi_fadd+0x194>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d01b      	beq.n	8000a04 <__aeabi_fadd+0x154>
 80009cc:	1e51      	subs	r1, r2, #1
 80009ce:	2a01      	cmp	r2, #1
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fadd+0x124>
 80009d2:	e082      	b.n	8000ada <__aeabi_fadd+0x22a>
 80009d4:	2aff      	cmp	r2, #255	@ 0xff
 80009d6:	d03a      	beq.n	8000a4e <__aeabi_fadd+0x19e>
 80009d8:	000a      	movs	r2, r1
 80009da:	e7ab      	b.n	8000934 <__aeabi_fadd+0x84>
 80009dc:	0031      	movs	r1, r6
 80009de:	2020      	movs	r0, #32
 80009e0:	40d1      	lsrs	r1, r2
 80009e2:	1a82      	subs	r2, r0, r2
 80009e4:	4096      	lsls	r6, r2
 80009e6:	0032      	movs	r2, r6
 80009e8:	1e50      	subs	r0, r2, #1
 80009ea:	4182      	sbcs	r2, r0
 80009ec:	430a      	orrs	r2, r1
 80009ee:	189b      	adds	r3, r3, r2
 80009f0:	015a      	lsls	r2, r3, #5
 80009f2:	d5b9      	bpl.n	8000968 <__aeabi_fadd+0xb8>
 80009f4:	1c6a      	adds	r2, r5, #1
 80009f6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009f8:	d175      	bne.n	8000ae6 <__aeabi_fadd+0x236>
 80009fa:	20ff      	movs	r0, #255	@ 0xff
 80009fc:	2300      	movs	r3, #0
 80009fe:	e7c4      	b.n	800098a <__aeabi_fadd+0xda>
 8000a00:	000c      	movs	r4, r1
 8000a02:	0033      	movs	r3, r6
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	2aff      	cmp	r2, #255	@ 0xff
 8000a08:	d146      	bne.n	8000a98 <__aeabi_fadd+0x1e8>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f5      	beq.n	80009fa <__aeabi_fadd+0x14a>
 8000a0e:	2280      	movs	r2, #128	@ 0x80
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	4313      	orrs	r3, r2
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	20ff      	movs	r0, #255	@ 0xff
 8000a18:	0a5b      	lsrs	r3, r3, #9
 8000a1a:	e7b6      	b.n	800098a <__aeabi_fadd+0xda>
 8000a1c:	019f      	lsls	r7, r3, #6
 8000a1e:	09bf      	lsrs	r7, r7, #6
 8000a20:	0038      	movs	r0, r7
 8000a22:	f002 fdcd 	bl	80035c0 <__clzsi2>
 8000a26:	3805      	subs	r0, #5
 8000a28:	4087      	lsls	r7, r0
 8000a2a:	4285      	cmp	r5, r0
 8000a2c:	dc24      	bgt.n	8000a78 <__aeabi_fadd+0x1c8>
 8000a2e:	003b      	movs	r3, r7
 8000a30:	2120      	movs	r1, #32
 8000a32:	1b42      	subs	r2, r0, r5
 8000a34:	3201      	adds	r2, #1
 8000a36:	40d3      	lsrs	r3, r2
 8000a38:	1a8a      	subs	r2, r1, r2
 8000a3a:	4097      	lsls	r7, r2
 8000a3c:	1e7a      	subs	r2, r7, #1
 8000a3e:	4197      	sbcs	r7, r2
 8000a40:	2200      	movs	r2, #0
 8000a42:	433b      	orrs	r3, r7
 8000a44:	0759      	lsls	r1, r3, #29
 8000a46:	d193      	bne.n	8000970 <__aeabi_fadd+0xc0>
 8000a48:	e797      	b.n	800097a <__aeabi_fadd+0xca>
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	0033      	movs	r3, r6
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	e7db      	b.n	8000a0a <__aeabi_fadd+0x15a>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d014      	beq.n	8000a80 <__aeabi_fadd+0x1d0>
 8000a56:	1b42      	subs	r2, r0, r5
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d14b      	bne.n	8000af4 <__aeabi_fadd+0x244>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0d0      	beq.n	8000a02 <__aeabi_fadd+0x152>
 8000a60:	1e51      	subs	r1, r2, #1
 8000a62:	2a01      	cmp	r2, #1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x1b8>
 8000a66:	e09e      	b.n	8000ba6 <__aeabi_fadd+0x2f6>
 8000a68:	2aff      	cmp	r2, #255	@ 0xff
 8000a6a:	d0ef      	beq.n	8000a4c <__aeabi_fadd+0x19c>
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	2a1b      	cmp	r2, #27
 8000a70:	dd5f      	ble.n	8000b32 <__aeabi_fadd+0x282>
 8000a72:	0002      	movs	r2, r0
 8000a74:	1c73      	adds	r3, r6, #1
 8000a76:	e77b      	b.n	8000970 <__aeabi_fadd+0xc0>
 8000a78:	4b50      	ldr	r3, [pc, #320]	@ (8000bbc <__aeabi_fadd+0x30c>)
 8000a7a:	1a2a      	subs	r2, r5, r0
 8000a7c:	403b      	ands	r3, r7
 8000a7e:	e7e1      	b.n	8000a44 <__aeabi_fadd+0x194>
 8000a80:	21fe      	movs	r1, #254	@ 0xfe
 8000a82:	1c6a      	adds	r2, r5, #1
 8000a84:	4211      	tst	r1, r2
 8000a86:	d13b      	bne.n	8000b00 <__aeabi_fadd+0x250>
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d15d      	bne.n	8000b48 <__aeabi_fadd+0x298>
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d07f      	beq.n	8000b90 <__aeabi_fadd+0x2e0>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d17f      	bne.n	8000b94 <__aeabi_fadd+0x2e4>
 8000a94:	2200      	movs	r2, #0
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	025b      	lsls	r3, r3, #9
 8000a9a:	0a5b      	lsrs	r3, r3, #9
 8000a9c:	b2d0      	uxtb	r0, r2
 8000a9e:	e774      	b.n	800098a <__aeabi_fadd+0xda>
 8000aa0:	28ff      	cmp	r0, #255	@ 0xff
 8000aa2:	d0d2      	beq.n	8000a4a <__aeabi_fadd+0x19a>
 8000aa4:	2480      	movs	r4, #128	@ 0x80
 8000aa6:	04e4      	lsls	r4, r4, #19
 8000aa8:	4323      	orrs	r3, r4
 8000aaa:	2401      	movs	r4, #1
 8000aac:	2a1b      	cmp	r2, #27
 8000aae:	dc07      	bgt.n	8000ac0 <__aeabi_fadd+0x210>
 8000ab0:	001c      	movs	r4, r3
 8000ab2:	2520      	movs	r5, #32
 8000ab4:	40d4      	lsrs	r4, r2
 8000ab6:	1aaa      	subs	r2, r5, r2
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	1e5a      	subs	r2, r3, #1
 8000abc:	4193      	sbcs	r3, r2
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	1b33      	subs	r3, r6, r4
 8000ac2:	0005      	movs	r5, r0
 8000ac4:	000c      	movs	r4, r1
 8000ac6:	e74d      	b.n	8000964 <__aeabi_fadd+0xb4>
 8000ac8:	1b9f      	subs	r7, r3, r6
 8000aca:	017a      	lsls	r2, r7, #5
 8000acc:	d422      	bmi.n	8000b14 <__aeabi_fadd+0x264>
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	d1a6      	bne.n	8000a20 <__aeabi_fadd+0x170>
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e757      	b.n	800098a <__aeabi_fadd+0xda>
 8000ada:	199b      	adds	r3, r3, r6
 8000adc:	2501      	movs	r5, #1
 8000ade:	3201      	adds	r2, #1
 8000ae0:	0159      	lsls	r1, r3, #5
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_fadd+0x236>
 8000ae4:	e740      	b.n	8000968 <__aeabi_fadd+0xb8>
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4835      	ldr	r0, [pc, #212]	@ (8000bc0 <__aeabi_fadd+0x310>)
 8000aea:	4019      	ands	r1, r3
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	4003      	ands	r3, r0
 8000af0:	430b      	orrs	r3, r1
 8000af2:	e7a7      	b.n	8000a44 <__aeabi_fadd+0x194>
 8000af4:	28ff      	cmp	r0, #255	@ 0xff
 8000af6:	d0a9      	beq.n	8000a4c <__aeabi_fadd+0x19c>
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	04c9      	lsls	r1, r1, #19
 8000afc:	430b      	orrs	r3, r1
 8000afe:	e7b6      	b.n	8000a6e <__aeabi_fadd+0x1be>
 8000b00:	2aff      	cmp	r2, #255	@ 0xff
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fadd+0x256>
 8000b04:	e779      	b.n	80009fa <__aeabi_fadd+0x14a>
 8000b06:	199b      	adds	r3, r3, r6
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	0759      	lsls	r1, r3, #29
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fadd+0x260>
 8000b0e:	e72f      	b.n	8000970 <__aeabi_fadd+0xc0>
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	e7c1      	b.n	8000a98 <__aeabi_fadd+0x1e8>
 8000b14:	000c      	movs	r4, r1
 8000b16:	1af7      	subs	r7, r6, r3
 8000b18:	e782      	b.n	8000a20 <__aeabi_fadd+0x170>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d12c      	bne.n	8000b78 <__aeabi_fadd+0x2c8>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d193      	bne.n	8000a4a <__aeabi_fadd+0x19a>
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	2400      	movs	r4, #0
 8000b26:	20ff      	movs	r0, #255	@ 0xff
 8000b28:	03db      	lsls	r3, r3, #15
 8000b2a:	e72e      	b.n	800098a <__aeabi_fadd+0xda>
 8000b2c:	2501      	movs	r5, #1
 8000b2e:	1b9b      	subs	r3, r3, r6
 8000b30:	e718      	b.n	8000964 <__aeabi_fadd+0xb4>
 8000b32:	0019      	movs	r1, r3
 8000b34:	2520      	movs	r5, #32
 8000b36:	40d1      	lsrs	r1, r2
 8000b38:	1aaa      	subs	r2, r5, r2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	4193      	sbcs	r3, r2
 8000b40:	430b      	orrs	r3, r1
 8000b42:	0005      	movs	r5, r0
 8000b44:	199b      	adds	r3, r3, r6
 8000b46:	e753      	b.n	80009f0 <__aeabi_fadd+0x140>
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fadd+0x29e>
 8000b4c:	e77e      	b.n	8000a4c <__aeabi_fadd+0x19c>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fadd+0x2a4>
 8000b52:	e77c      	b.n	8000a4e <__aeabi_fadd+0x19e>
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	03d2      	lsls	r2, r2, #15
 8000b58:	4591      	cmp	r9, r2
 8000b5a:	d302      	bcc.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b5c:	4594      	cmp	ip, r2
 8000b5e:	d200      	bcs.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b60:	0033      	movs	r3, r6
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	e753      	b.n	8000a0e <__aeabi_fadd+0x15e>
 8000b66:	000c      	movs	r4, r1
 8000b68:	1af3      	subs	r3, r6, r3
 8000b6a:	3501      	adds	r5, #1
 8000b6c:	e6fa      	b.n	8000964 <__aeabi_fadd+0xb4>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0af      	beq.n	8000ad2 <__aeabi_fadd+0x222>
 8000b72:	000c      	movs	r4, r1
 8000b74:	0033      	movs	r3, r6
 8000b76:	e78d      	b.n	8000a94 <__aeabi_fadd+0x1e4>
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fadd+0x2ce>
 8000b7c:	e767      	b.n	8000a4e <__aeabi_fadd+0x19e>
 8000b7e:	2280      	movs	r2, #128	@ 0x80
 8000b80:	03d2      	lsls	r2, r2, #15
 8000b82:	4591      	cmp	r9, r2
 8000b84:	d3ed      	bcc.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b86:	4594      	cmp	ip, r2
 8000b88:	d2eb      	bcs.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b8a:	000c      	movs	r4, r1
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	e7e8      	b.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b90:	0033      	movs	r3, r6
 8000b92:	e77f      	b.n	8000a94 <__aeabi_fadd+0x1e4>
 8000b94:	199b      	adds	r3, r3, r6
 8000b96:	2200      	movs	r2, #0
 8000b98:	0159      	lsls	r1, r3, #5
 8000b9a:	d5b9      	bpl.n	8000b10 <__aeabi_fadd+0x260>
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <__aeabi_fadd+0x30c>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	e778      	b.n	8000a98 <__aeabi_fadd+0x1e8>
 8000ba6:	199b      	adds	r3, r3, r6
 8000ba8:	3201      	adds	r2, #1
 8000baa:	3501      	adds	r5, #1
 8000bac:	0159      	lsls	r1, r3, #5
 8000bae:	d49a      	bmi.n	8000ae6 <__aeabi_fadd+0x236>
 8000bb0:	e6da      	b.n	8000968 <__aeabi_fadd+0xb8>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d08d      	beq.n	8000ad2 <__aeabi_fadd+0x222>
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	e76e      	b.n	8000a98 <__aeabi_fadd+0x1e8>
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	fbffffff 	.word	0xfbffffff
 8000bc0:	7dffffff 	.word	0x7dffffff

08000bc4 <__aeabi_fdiv>:
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	464f      	mov	r7, r9
 8000bc8:	4646      	mov	r6, r8
 8000bca:	46d6      	mov	lr, sl
 8000bcc:	0244      	lsls	r4, r0, #9
 8000bce:	b5c0      	push	{r6, r7, lr}
 8000bd0:	0047      	lsls	r7, r0, #1
 8000bd2:	1c0e      	adds	r6, r1, #0
 8000bd4:	0a64      	lsrs	r4, r4, #9
 8000bd6:	0e3f      	lsrs	r7, r7, #24
 8000bd8:	0fc5      	lsrs	r5, r0, #31
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d03c      	beq.n	8000c58 <__aeabi_fdiv+0x94>
 8000bde:	2fff      	cmp	r7, #255	@ 0xff
 8000be0:	d042      	beq.n	8000c68 <__aeabi_fdiv+0xa4>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	4699      	mov	r9, r3
 8000be8:	469a      	mov	sl, r3
 8000bea:	00e4      	lsls	r4, r4, #3
 8000bec:	04d2      	lsls	r2, r2, #19
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	3f7f      	subs	r7, #127	@ 0x7f
 8000bf2:	0273      	lsls	r3, r6, #9
 8000bf4:	0a5b      	lsrs	r3, r3, #9
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	0073      	lsls	r3, r6, #1
 8000bfa:	0e1b      	lsrs	r3, r3, #24
 8000bfc:	0ff6      	lsrs	r6, r6, #31
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d01b      	beq.n	8000c3a <__aeabi_fdiv+0x76>
 8000c02:	2bff      	cmp	r3, #255	@ 0xff
 8000c04:	d013      	beq.n	8000c2e <__aeabi_fdiv+0x6a>
 8000c06:	4642      	mov	r2, r8
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	00d2      	lsls	r2, r2, #3
 8000c0c:	04c9      	lsls	r1, r1, #19
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	4688      	mov	r8, r1
 8000c12:	2000      	movs	r0, #0
 8000c14:	3b7f      	subs	r3, #127	@ 0x7f
 8000c16:	0029      	movs	r1, r5
 8000c18:	1aff      	subs	r7, r7, r3
 8000c1a:	464b      	mov	r3, r9
 8000c1c:	4071      	eors	r1, r6
 8000c1e:	b2c9      	uxtb	r1, r1
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d900      	bls.n	8000c26 <__aeabi_fdiv+0x62>
 8000c24:	e0b5      	b.n	8000d92 <__aeabi_fdiv+0x1ce>
 8000c26:	4a74      	ldr	r2, [pc, #464]	@ (8000df8 <__aeabi_fdiv+0x234>)
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	58d3      	ldr	r3, [r2, r3]
 8000c2c:	469f      	mov	pc, r3
 8000c2e:	4643      	mov	r3, r8
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d13f      	bne.n	8000cb4 <__aeabi_fdiv+0xf0>
 8000c34:	3fff      	subs	r7, #255	@ 0xff
 8000c36:	3302      	adds	r3, #2
 8000c38:	e003      	b.n	8000c42 <__aeabi_fdiv+0x7e>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d12d      	bne.n	8000c9c <__aeabi_fdiv+0xd8>
 8000c40:	2301      	movs	r3, #1
 8000c42:	0029      	movs	r1, r5
 8000c44:	464a      	mov	r2, r9
 8000c46:	4071      	eors	r1, r6
 8000c48:	b2c9      	uxtb	r1, r1
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	2a0e      	cmp	r2, #14
 8000c4e:	d838      	bhi.n	8000cc2 <__aeabi_fdiv+0xfe>
 8000c50:	486a      	ldr	r0, [pc, #424]	@ (8000dfc <__aeabi_fdiv+0x238>)
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	5882      	ldr	r2, [r0, r2]
 8000c56:	4697      	mov	pc, r2
 8000c58:	2c00      	cmp	r4, #0
 8000c5a:	d113      	bne.n	8000c84 <__aeabi_fdiv+0xc0>
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	4699      	mov	r9, r3
 8000c60:	3b03      	subs	r3, #3
 8000c62:	2700      	movs	r7, #0
 8000c64:	469a      	mov	sl, r3
 8000c66:	e7c4      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d105      	bne.n	8000c78 <__aeabi_fdiv+0xb4>
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b06      	subs	r3, #6
 8000c72:	27ff      	movs	r7, #255	@ 0xff
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7bc      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c78:	230c      	movs	r3, #12
 8000c7a:	4699      	mov	r9, r3
 8000c7c:	3b09      	subs	r3, #9
 8000c7e:	27ff      	movs	r7, #255	@ 0xff
 8000c80:	469a      	mov	sl, r3
 8000c82:	e7b6      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c84:	0020      	movs	r0, r4
 8000c86:	f002 fc9b 	bl	80035c0 <__clzsi2>
 8000c8a:	2776      	movs	r7, #118	@ 0x76
 8000c8c:	1f43      	subs	r3, r0, #5
 8000c8e:	409c      	lsls	r4, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	427f      	negs	r7, r7
 8000c94:	4699      	mov	r9, r3
 8000c96:	469a      	mov	sl, r3
 8000c98:	1a3f      	subs	r7, r7, r0
 8000c9a:	e7aa      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	f002 fc8f 	bl	80035c0 <__clzsi2>
 8000ca2:	4642      	mov	r2, r8
 8000ca4:	1f43      	subs	r3, r0, #5
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	2376      	movs	r3, #118	@ 0x76
 8000caa:	425b      	negs	r3, r3
 8000cac:	1a1b      	subs	r3, r3, r0
 8000cae:	4690      	mov	r8, r2
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7b0      	b.n	8000c16 <__aeabi_fdiv+0x52>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	464a      	mov	r2, r9
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	4691      	mov	r9, r2
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	33fc      	adds	r3, #252	@ 0xfc
 8000cc0:	e7a9      	b.n	8000c16 <__aeabi_fdiv+0x52>
 8000cc2:	000d      	movs	r5, r1
 8000cc4:	20ff      	movs	r0, #255	@ 0xff
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	05c0      	lsls	r0, r0, #23
 8000cca:	07ed      	lsls	r5, r5, #31
 8000ccc:	4310      	orrs	r0, r2
 8000cce:	4328      	orrs	r0, r5
 8000cd0:	bce0      	pop	{r5, r6, r7}
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46b1      	mov	r9, r6
 8000cd6:	46a8      	mov	r8, r5
 8000cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cda:	000d      	movs	r5, r1
 8000cdc:	2000      	movs	r0, #0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	e7f2      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d0ed      	beq.n	8000cc4 <__aeabi_fdiv+0x100>
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d033      	beq.n	8000d54 <__aeabi_fdiv+0x190>
 8000cec:	46a0      	mov	r8, r4
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d105      	bne.n	8000cfe <__aeabi_fdiv+0x13a>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e7e7      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	2803      	cmp	r0, #3
 8000cfc:	d07a      	beq.n	8000df4 <__aeabi_fdiv+0x230>
 8000cfe:	003b      	movs	r3, r7
 8000d00:	337f      	adds	r3, #127	@ 0x7f
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dd2d      	ble.n	8000d62 <__aeabi_fdiv+0x19e>
 8000d06:	4642      	mov	r2, r8
 8000d08:	0752      	lsls	r2, r2, #29
 8000d0a:	d007      	beq.n	8000d1c <__aeabi_fdiv+0x158>
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	4641      	mov	r1, r8
 8000d10:	400a      	ands	r2, r1
 8000d12:	2a04      	cmp	r2, #4
 8000d14:	d002      	beq.n	8000d1c <__aeabi_fdiv+0x158>
 8000d16:	2204      	movs	r2, #4
 8000d18:	4694      	mov	ip, r2
 8000d1a:	44e0      	add	r8, ip
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	d505      	bpl.n	8000d2e <__aeabi_fdiv+0x16a>
 8000d22:	4642      	mov	r2, r8
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <__aeabi_fdiv+0x23c>)
 8000d26:	401a      	ands	r2, r3
 8000d28:	003b      	movs	r3, r7
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	3380      	adds	r3, #128	@ 0x80
 8000d2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d30:	dcc8      	bgt.n	8000cc4 <__aeabi_fdiv+0x100>
 8000d32:	4642      	mov	r2, r8
 8000d34:	0192      	lsls	r2, r2, #6
 8000d36:	0a52      	lsrs	r2, r2, #9
 8000d38:	b2d8      	uxtb	r0, r3
 8000d3a:	e7c5      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	2500      	movs	r5, #0
 8000d40:	20ff      	movs	r0, #255	@ 0xff
 8000d42:	03d2      	lsls	r2, r2, #15
 8000d44:	e7c0      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d46:	2280      	movs	r2, #128	@ 0x80
 8000d48:	03d2      	lsls	r2, r2, #15
 8000d4a:	4214      	tst	r4, r2
 8000d4c:	d002      	beq.n	8000d54 <__aeabi_fdiv+0x190>
 8000d4e:	4643      	mov	r3, r8
 8000d50:	4213      	tst	r3, r2
 8000d52:	d049      	beq.n	8000de8 <__aeabi_fdiv+0x224>
 8000d54:	2280      	movs	r2, #128	@ 0x80
 8000d56:	03d2      	lsls	r2, r2, #15
 8000d58:	4322      	orrs	r2, r4
 8000d5a:	0252      	lsls	r2, r2, #9
 8000d5c:	20ff      	movs	r0, #255	@ 0xff
 8000d5e:	0a52      	lsrs	r2, r2, #9
 8000d60:	e7b2      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d62:	2201      	movs	r2, #1
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b1b      	cmp	r3, #27
 8000d68:	dcc3      	bgt.n	8000cf2 <__aeabi_fdiv+0x12e>
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	40da      	lsrs	r2, r3
 8000d6e:	4643      	mov	r3, r8
 8000d70:	379e      	adds	r7, #158	@ 0x9e
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	1e59      	subs	r1, r3, #1
 8000d76:	418b      	sbcs	r3, r1
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	0753      	lsls	r3, r2, #29
 8000d7c:	d004      	beq.n	8000d88 <__aeabi_fdiv+0x1c4>
 8000d7e:	230f      	movs	r3, #15
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_fdiv+0x1c4>
 8000d86:	3204      	adds	r2, #4
 8000d88:	0153      	lsls	r3, r2, #5
 8000d8a:	d529      	bpl.n	8000de0 <__aeabi_fdiv+0x21c>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	e79a      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d92:	4642      	mov	r2, r8
 8000d94:	0163      	lsls	r3, r4, #5
 8000d96:	0155      	lsls	r5, r2, #5
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d215      	bcs.n	8000dc8 <__aeabi_fdiv+0x204>
 8000d9c:	201b      	movs	r0, #27
 8000d9e:	2200      	movs	r2, #0
 8000da0:	3f01      	subs	r7, #1
 8000da2:	2601      	movs	r6, #1
 8000da4:	001c      	movs	r4, r3
 8000da6:	0052      	lsls	r2, r2, #1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	db01      	blt.n	8000db2 <__aeabi_fdiv+0x1ee>
 8000dae:	429d      	cmp	r5, r3
 8000db0:	d801      	bhi.n	8000db6 <__aeabi_fdiv+0x1f2>
 8000db2:	1b5b      	subs	r3, r3, r5
 8000db4:	4332      	orrs	r2, r6
 8000db6:	3801      	subs	r0, #1
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d1f3      	bne.n	8000da4 <__aeabi_fdiv+0x1e0>
 8000dbc:	1e58      	subs	r0, r3, #1
 8000dbe:	4183      	sbcs	r3, r0
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	000d      	movs	r5, r1
 8000dc6:	e79a      	b.n	8000cfe <__aeabi_fdiv+0x13a>
 8000dc8:	201a      	movs	r0, #26
 8000dca:	2201      	movs	r2, #1
 8000dcc:	1b5b      	subs	r3, r3, r5
 8000dce:	e7e8      	b.n	8000da2 <__aeabi_fdiv+0x1de>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	425a      	negs	r2, r3
 8000dd4:	4153      	adcs	r3, r2
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	0035      	movs	r5, r6
 8000dda:	2200      	movs	r2, #0
 8000ddc:	b2d8      	uxtb	r0, r3
 8000dde:	e773      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000de0:	0192      	lsls	r2, r2, #6
 8000de2:	2000      	movs	r0, #0
 8000de4:	0a52      	lsrs	r2, r2, #9
 8000de6:	e76f      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000de8:	431a      	orrs	r2, r3
 8000dea:	0252      	lsls	r2, r2, #9
 8000dec:	0035      	movs	r5, r6
 8000dee:	20ff      	movs	r0, #255	@ 0xff
 8000df0:	0a52      	lsrs	r2, r2, #9
 8000df2:	e769      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000df4:	4644      	mov	r4, r8
 8000df6:	e7ad      	b.n	8000d54 <__aeabi_fdiv+0x190>
 8000df8:	08011cb0 	.word	0x08011cb0
 8000dfc:	08011cf0 	.word	0x08011cf0
 8000e00:	f7ffffff 	.word	0xf7ffffff

08000e04 <__eqsf2>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	0042      	lsls	r2, r0, #1
 8000e08:	024e      	lsls	r6, r1, #9
 8000e0a:	004c      	lsls	r4, r1, #1
 8000e0c:	0245      	lsls	r5, r0, #9
 8000e0e:	0a6d      	lsrs	r5, r5, #9
 8000e10:	0e12      	lsrs	r2, r2, #24
 8000e12:	0fc3      	lsrs	r3, r0, #31
 8000e14:	0a76      	lsrs	r6, r6, #9
 8000e16:	0e24      	lsrs	r4, r4, #24
 8000e18:	0fc9      	lsrs	r1, r1, #31
 8000e1a:	2aff      	cmp	r2, #255	@ 0xff
 8000e1c:	d010      	beq.n	8000e40 <__eqsf2+0x3c>
 8000e1e:	2cff      	cmp	r4, #255	@ 0xff
 8000e20:	d00c      	beq.n	8000e3c <__eqsf2+0x38>
 8000e22:	2001      	movs	r0, #1
 8000e24:	42a2      	cmp	r2, r4
 8000e26:	d10a      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e28:	42b5      	cmp	r5, r6
 8000e2a:	d108      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d00f      	beq.n	8000e50 <__eqsf2+0x4c>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	d104      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e34:	0028      	movs	r0, r5
 8000e36:	1e43      	subs	r3, r0, #1
 8000e38:	4198      	sbcs	r0, r3
 8000e3a:	e000      	b.n	8000e3e <__eqsf2+0x3a>
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	2001      	movs	r0, #1
 8000e42:	2cff      	cmp	r4, #255	@ 0xff
 8000e44:	d1fb      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e46:	4335      	orrs	r5, r6
 8000e48:	d1f9      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e4a:	404b      	eors	r3, r1
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	e7f6      	b.n	8000e3e <__eqsf2+0x3a>
 8000e50:	2000      	movs	r0, #0
 8000e52:	e7f4      	b.n	8000e3e <__eqsf2+0x3a>

08000e54 <__gesf2>:
 8000e54:	b530      	push	{r4, r5, lr}
 8000e56:	0042      	lsls	r2, r0, #1
 8000e58:	0244      	lsls	r4, r0, #9
 8000e5a:	024d      	lsls	r5, r1, #9
 8000e5c:	0fc3      	lsrs	r3, r0, #31
 8000e5e:	0048      	lsls	r0, r1, #1
 8000e60:	0a64      	lsrs	r4, r4, #9
 8000e62:	0e12      	lsrs	r2, r2, #24
 8000e64:	0a6d      	lsrs	r5, r5, #9
 8000e66:	0e00      	lsrs	r0, r0, #24
 8000e68:	0fc9      	lsrs	r1, r1, #31
 8000e6a:	2aff      	cmp	r2, #255	@ 0xff
 8000e6c:	d019      	beq.n	8000ea2 <__gesf2+0x4e>
 8000e6e:	28ff      	cmp	r0, #255	@ 0xff
 8000e70:	d00b      	beq.n	8000e8a <__gesf2+0x36>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d11e      	bne.n	8000eb4 <__gesf2+0x60>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d10b      	bne.n	8000e92 <__gesf2+0x3e>
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d027      	beq.n	8000ece <__gesf2+0x7a>
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	d134      	bne.n	8000eec <__gesf2+0x98>
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d02f      	beq.n	8000ee6 <__gesf2+0x92>
 8000e86:	0008      	movs	r0, r1
 8000e88:	bd30      	pop	{r4, r5, pc}
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d128      	bne.n	8000ee0 <__gesf2+0x8c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d101      	bne.n	8000e96 <__gesf2+0x42>
 8000e92:	2c00      	cmp	r4, #0
 8000e94:	d0f5      	beq.n	8000e82 <__gesf2+0x2e>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d107      	bne.n	8000eaa <__gesf2+0x56>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d023      	beq.n	8000ee6 <__gesf2+0x92>
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	e7f2      	b.n	8000e88 <__gesf2+0x34>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d11c      	bne.n	8000ee0 <__gesf2+0x8c>
 8000ea6:	28ff      	cmp	r0, #255	@ 0xff
 8000ea8:	d014      	beq.n	8000ed4 <__gesf2+0x80>
 8000eaa:	1e58      	subs	r0, r3, #1
 8000eac:	2302      	movs	r3, #2
 8000eae:	4018      	ands	r0, r3
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	e7e9      	b.n	8000e88 <__gesf2+0x34>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d0f8      	beq.n	8000eaa <__gesf2+0x56>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d1f6      	bne.n	8000eaa <__gesf2+0x56>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	dcf4      	bgt.n	8000eaa <__gesf2+0x56>
 8000ec0:	dbeb      	blt.n	8000e9a <__gesf2+0x46>
 8000ec2:	42ac      	cmp	r4, r5
 8000ec4:	d8f1      	bhi.n	8000eaa <__gesf2+0x56>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	42ac      	cmp	r4, r5
 8000eca:	d2dd      	bcs.n	8000e88 <__gesf2+0x34>
 8000ecc:	e7e5      	b.n	8000e9a <__gesf2+0x46>
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d0da      	beq.n	8000e88 <__gesf2+0x34>
 8000ed2:	e7ea      	b.n	8000eaa <__gesf2+0x56>
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d103      	bne.n	8000ee0 <__gesf2+0x8c>
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d1e6      	bne.n	8000eaa <__gesf2+0x56>
 8000edc:	2000      	movs	r0, #0
 8000ede:	e7d3      	b.n	8000e88 <__gesf2+0x34>
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	4240      	negs	r0, r0
 8000ee4:	e7d0      	b.n	8000e88 <__gesf2+0x34>
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4240      	negs	r0, r0
 8000eea:	e7cd      	b.n	8000e88 <__gesf2+0x34>
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d0e8      	beq.n	8000ec2 <__gesf2+0x6e>
 8000ef0:	e7db      	b.n	8000eaa <__gesf2+0x56>
 8000ef2:	46c0      	nop			@ (mov r8, r8)

08000ef4 <__lesf2>:
 8000ef4:	b530      	push	{r4, r5, lr}
 8000ef6:	0042      	lsls	r2, r0, #1
 8000ef8:	0244      	lsls	r4, r0, #9
 8000efa:	024d      	lsls	r5, r1, #9
 8000efc:	0fc3      	lsrs	r3, r0, #31
 8000efe:	0048      	lsls	r0, r1, #1
 8000f00:	0a64      	lsrs	r4, r4, #9
 8000f02:	0e12      	lsrs	r2, r2, #24
 8000f04:	0a6d      	lsrs	r5, r5, #9
 8000f06:	0e00      	lsrs	r0, r0, #24
 8000f08:	0fc9      	lsrs	r1, r1, #31
 8000f0a:	2aff      	cmp	r2, #255	@ 0xff
 8000f0c:	d01a      	beq.n	8000f44 <__lesf2+0x50>
 8000f0e:	28ff      	cmp	r0, #255	@ 0xff
 8000f10:	d00e      	beq.n	8000f30 <__lesf2+0x3c>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d11e      	bne.n	8000f54 <__lesf2+0x60>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d10e      	bne.n	8000f38 <__lesf2+0x44>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d02a      	beq.n	8000f74 <__lesf2+0x80>
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	d00c      	beq.n	8000f3c <__lesf2+0x48>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d01d      	beq.n	8000f62 <__lesf2+0x6e>
 8000f26:	1e58      	subs	r0, r3, #1
 8000f28:	2302      	movs	r3, #2
 8000f2a:	4018      	ands	r0, r3
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	e010      	b.n	8000f52 <__lesf2+0x5e>
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d10d      	bne.n	8000f50 <__lesf2+0x5c>
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d120      	bne.n	8000f7a <__lesf2+0x86>
 8000f38:	2c00      	cmp	r4, #0
 8000f3a:	d11e      	bne.n	8000f7a <__lesf2+0x86>
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	d023      	beq.n	8000f88 <__lesf2+0x94>
 8000f40:	0008      	movs	r0, r1
 8000f42:	e006      	b.n	8000f52 <__lesf2+0x5e>
 8000f44:	2c00      	cmp	r4, #0
 8000f46:	d103      	bne.n	8000f50 <__lesf2+0x5c>
 8000f48:	28ff      	cmp	r0, #255	@ 0xff
 8000f4a:	d1ec      	bne.n	8000f26 <__lesf2+0x32>
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d017      	beq.n	8000f80 <__lesf2+0x8c>
 8000f50:	2002      	movs	r0, #2
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d0e6      	beq.n	8000f26 <__lesf2+0x32>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d1e4      	bne.n	8000f26 <__lesf2+0x32>
 8000f5c:	4282      	cmp	r2, r0
 8000f5e:	dce2      	bgt.n	8000f26 <__lesf2+0x32>
 8000f60:	db04      	blt.n	8000f6c <__lesf2+0x78>
 8000f62:	42ac      	cmp	r4, r5
 8000f64:	d8df      	bhi.n	8000f26 <__lesf2+0x32>
 8000f66:	2000      	movs	r0, #0
 8000f68:	42ac      	cmp	r4, r5
 8000f6a:	d2f2      	bcs.n	8000f52 <__lesf2+0x5e>
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <__lesf2+0x94>
 8000f70:	0018      	movs	r0, r3
 8000f72:	e7ee      	b.n	8000f52 <__lesf2+0x5e>
 8000f74:	2c00      	cmp	r4, #0
 8000f76:	d0ec      	beq.n	8000f52 <__lesf2+0x5e>
 8000f78:	e7d5      	b.n	8000f26 <__lesf2+0x32>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1d3      	bne.n	8000f26 <__lesf2+0x32>
 8000f7e:	e7f5      	b.n	8000f6c <__lesf2+0x78>
 8000f80:	2000      	movs	r0, #0
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d0e5      	beq.n	8000f52 <__lesf2+0x5e>
 8000f86:	e7ce      	b.n	8000f26 <__lesf2+0x32>
 8000f88:	2001      	movs	r0, #1
 8000f8a:	4240      	negs	r0, r0
 8000f8c:	e7e1      	b.n	8000f52 <__lesf2+0x5e>
 8000f8e:	46c0      	nop			@ (mov r8, r8)

08000f90 <__aeabi_fmul>:
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	464f      	mov	r7, r9
 8000f94:	4646      	mov	r6, r8
 8000f96:	46d6      	mov	lr, sl
 8000f98:	0243      	lsls	r3, r0, #9
 8000f9a:	0a5b      	lsrs	r3, r3, #9
 8000f9c:	0045      	lsls	r5, r0, #1
 8000f9e:	b5c0      	push	{r6, r7, lr}
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	1c0f      	adds	r7, r1, #0
 8000fa4:	0e2d      	lsrs	r5, r5, #24
 8000fa6:	0fc6      	lsrs	r6, r0, #31
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fmul+0x1e>
 8000fac:	e088      	b.n	80010c0 <__aeabi_fmul+0x130>
 8000fae:	2dff      	cmp	r5, #255	@ 0xff
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fmul+0x24>
 8000fb2:	e08d      	b.n	80010d0 <__aeabi_fmul+0x140>
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	04d2      	lsls	r2, r2, #19
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4691      	mov	r9, r2
 8000fc0:	4698      	mov	r8, r3
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fc6:	027c      	lsls	r4, r7, #9
 8000fc8:	007b      	lsls	r3, r7, #1
 8000fca:	0a64      	lsrs	r4, r4, #9
 8000fcc:	0e1b      	lsrs	r3, r3, #24
 8000fce:	0fff      	lsrs	r7, r7, #31
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d068      	beq.n	80010a6 <__aeabi_fmul+0x116>
 8000fd4:	2bff      	cmp	r3, #255	@ 0xff
 8000fd6:	d021      	beq.n	800101c <__aeabi_fmul+0x8c>
 8000fd8:	2280      	movs	r2, #128	@ 0x80
 8000fda:	00e4      	lsls	r4, r4, #3
 8000fdc:	04d2      	lsls	r2, r2, #19
 8000fde:	4314      	orrs	r4, r2
 8000fe0:	4642      	mov	r2, r8
 8000fe2:	3b7f      	subs	r3, #127	@ 0x7f
 8000fe4:	195b      	adds	r3, r3, r5
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	1c5d      	adds	r5, r3, #1
 8000fea:	2a0a      	cmp	r2, #10
 8000fec:	dc2e      	bgt.n	800104c <__aeabi_fmul+0xbc>
 8000fee:	407e      	eors	r6, r7
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	2a02      	cmp	r2, #2
 8000ff4:	dc23      	bgt.n	800103e <__aeabi_fmul+0xae>
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	2a01      	cmp	r2, #1
 8000ffa:	d900      	bls.n	8000ffe <__aeabi_fmul+0x6e>
 8000ffc:	e0bd      	b.n	800117a <__aeabi_fmul+0x1ea>
 8000ffe:	2902      	cmp	r1, #2
 8001000:	d06e      	beq.n	80010e0 <__aeabi_fmul+0x150>
 8001002:	2901      	cmp	r1, #1
 8001004:	d12c      	bne.n	8001060 <__aeabi_fmul+0xd0>
 8001006:	2000      	movs	r0, #0
 8001008:	2200      	movs	r2, #0
 800100a:	05c0      	lsls	r0, r0, #23
 800100c:	07f6      	lsls	r6, r6, #31
 800100e:	4310      	orrs	r0, r2
 8001010:	4330      	orrs	r0, r6
 8001012:	bce0      	pop	{r5, r6, r7}
 8001014:	46ba      	mov	sl, r7
 8001016:	46b1      	mov	r9, r6
 8001018:	46a8      	mov	r8, r5
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101c:	002b      	movs	r3, r5
 800101e:	33ff      	adds	r3, #255	@ 0xff
 8001020:	2c00      	cmp	r4, #0
 8001022:	d065      	beq.n	80010f0 <__aeabi_fmul+0x160>
 8001024:	2203      	movs	r2, #3
 8001026:	4641      	mov	r1, r8
 8001028:	4311      	orrs	r1, r2
 800102a:	0032      	movs	r2, r6
 800102c:	3501      	adds	r5, #1
 800102e:	4688      	mov	r8, r1
 8001030:	407a      	eors	r2, r7
 8001032:	35ff      	adds	r5, #255	@ 0xff
 8001034:	290a      	cmp	r1, #10
 8001036:	dd00      	ble.n	800103a <__aeabi_fmul+0xaa>
 8001038:	e0d8      	b.n	80011ec <__aeabi_fmul+0x25c>
 800103a:	0016      	movs	r6, r2
 800103c:	2103      	movs	r1, #3
 800103e:	4640      	mov	r0, r8
 8001040:	2201      	movs	r2, #1
 8001042:	4082      	lsls	r2, r0
 8001044:	20a6      	movs	r0, #166	@ 0xa6
 8001046:	00c0      	lsls	r0, r0, #3
 8001048:	4202      	tst	r2, r0
 800104a:	d020      	beq.n	800108e <__aeabi_fmul+0xfe>
 800104c:	4653      	mov	r3, sl
 800104e:	2b02      	cmp	r3, #2
 8001050:	d046      	beq.n	80010e0 <__aeabi_fmul+0x150>
 8001052:	2b03      	cmp	r3, #3
 8001054:	d100      	bne.n	8001058 <__aeabi_fmul+0xc8>
 8001056:	e0bb      	b.n	80011d0 <__aeabi_fmul+0x240>
 8001058:	4651      	mov	r1, sl
 800105a:	464c      	mov	r4, r9
 800105c:	2901      	cmp	r1, #1
 800105e:	d0d2      	beq.n	8001006 <__aeabi_fmul+0x76>
 8001060:	002b      	movs	r3, r5
 8001062:	337f      	adds	r3, #127	@ 0x7f
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd70      	ble.n	800114a <__aeabi_fmul+0x1ba>
 8001068:	0762      	lsls	r2, r4, #29
 800106a:	d004      	beq.n	8001076 <__aeabi_fmul+0xe6>
 800106c:	220f      	movs	r2, #15
 800106e:	4022      	ands	r2, r4
 8001070:	2a04      	cmp	r2, #4
 8001072:	d000      	beq.n	8001076 <__aeabi_fmul+0xe6>
 8001074:	3404      	adds	r4, #4
 8001076:	0122      	lsls	r2, r4, #4
 8001078:	d503      	bpl.n	8001082 <__aeabi_fmul+0xf2>
 800107a:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <__aeabi_fmul+0x278>)
 800107c:	401c      	ands	r4, r3
 800107e:	002b      	movs	r3, r5
 8001080:	3380      	adds	r3, #128	@ 0x80
 8001082:	2bfe      	cmp	r3, #254	@ 0xfe
 8001084:	dc2c      	bgt.n	80010e0 <__aeabi_fmul+0x150>
 8001086:	01a2      	lsls	r2, r4, #6
 8001088:	0a52      	lsrs	r2, r2, #9
 800108a:	b2d8      	uxtb	r0, r3
 800108c:	e7bd      	b.n	800100a <__aeabi_fmul+0x7a>
 800108e:	2090      	movs	r0, #144	@ 0x90
 8001090:	0080      	lsls	r0, r0, #2
 8001092:	4202      	tst	r2, r0
 8001094:	d127      	bne.n	80010e6 <__aeabi_fmul+0x156>
 8001096:	38b9      	subs	r0, #185	@ 0xb9
 8001098:	38ff      	subs	r0, #255	@ 0xff
 800109a:	4210      	tst	r0, r2
 800109c:	d06d      	beq.n	800117a <__aeabi_fmul+0x1ea>
 800109e:	003e      	movs	r6, r7
 80010a0:	46a1      	mov	r9, r4
 80010a2:	468a      	mov	sl, r1
 80010a4:	e7d2      	b.n	800104c <__aeabi_fmul+0xbc>
 80010a6:	2c00      	cmp	r4, #0
 80010a8:	d141      	bne.n	800112e <__aeabi_fmul+0x19e>
 80010aa:	2301      	movs	r3, #1
 80010ac:	4642      	mov	r2, r8
 80010ae:	431a      	orrs	r2, r3
 80010b0:	4690      	mov	r8, r2
 80010b2:	002b      	movs	r3, r5
 80010b4:	4642      	mov	r2, r8
 80010b6:	2101      	movs	r1, #1
 80010b8:	1c5d      	adds	r5, r3, #1
 80010ba:	2a0a      	cmp	r2, #10
 80010bc:	dd97      	ble.n	8000fee <__aeabi_fmul+0x5e>
 80010be:	e7c5      	b.n	800104c <__aeabi_fmul+0xbc>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d126      	bne.n	8001112 <__aeabi_fmul+0x182>
 80010c4:	2304      	movs	r3, #4
 80010c6:	4698      	mov	r8, r3
 80010c8:	3b03      	subs	r3, #3
 80010ca:	2500      	movs	r5, #0
 80010cc:	469a      	mov	sl, r3
 80010ce:	e77a      	b.n	8000fc6 <__aeabi_fmul+0x36>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d118      	bne.n	8001106 <__aeabi_fmul+0x176>
 80010d4:	2308      	movs	r3, #8
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b06      	subs	r3, #6
 80010da:	25ff      	movs	r5, #255	@ 0xff
 80010dc:	469a      	mov	sl, r3
 80010de:	e772      	b.n	8000fc6 <__aeabi_fmul+0x36>
 80010e0:	20ff      	movs	r0, #255	@ 0xff
 80010e2:	2200      	movs	r2, #0
 80010e4:	e791      	b.n	800100a <__aeabi_fmul+0x7a>
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	2600      	movs	r6, #0
 80010ea:	20ff      	movs	r0, #255	@ 0xff
 80010ec:	03d2      	lsls	r2, r2, #15
 80010ee:	e78c      	b.n	800100a <__aeabi_fmul+0x7a>
 80010f0:	4641      	mov	r1, r8
 80010f2:	2202      	movs	r2, #2
 80010f4:	3501      	adds	r5, #1
 80010f6:	4311      	orrs	r1, r2
 80010f8:	4688      	mov	r8, r1
 80010fa:	35ff      	adds	r5, #255	@ 0xff
 80010fc:	290a      	cmp	r1, #10
 80010fe:	dca5      	bgt.n	800104c <__aeabi_fmul+0xbc>
 8001100:	2102      	movs	r1, #2
 8001102:	407e      	eors	r6, r7
 8001104:	e774      	b.n	8000ff0 <__aeabi_fmul+0x60>
 8001106:	230c      	movs	r3, #12
 8001108:	4698      	mov	r8, r3
 800110a:	3b09      	subs	r3, #9
 800110c:	25ff      	movs	r5, #255	@ 0xff
 800110e:	469a      	mov	sl, r3
 8001110:	e759      	b.n	8000fc6 <__aeabi_fmul+0x36>
 8001112:	0018      	movs	r0, r3
 8001114:	f002 fa54 	bl	80035c0 <__clzsi2>
 8001118:	464a      	mov	r2, r9
 800111a:	1f43      	subs	r3, r0, #5
 800111c:	2576      	movs	r5, #118	@ 0x76
 800111e:	409a      	lsls	r2, r3
 8001120:	2300      	movs	r3, #0
 8001122:	426d      	negs	r5, r5
 8001124:	4691      	mov	r9, r2
 8001126:	4698      	mov	r8, r3
 8001128:	469a      	mov	sl, r3
 800112a:	1a2d      	subs	r5, r5, r0
 800112c:	e74b      	b.n	8000fc6 <__aeabi_fmul+0x36>
 800112e:	0020      	movs	r0, r4
 8001130:	f002 fa46 	bl	80035c0 <__clzsi2>
 8001134:	4642      	mov	r2, r8
 8001136:	1f43      	subs	r3, r0, #5
 8001138:	409c      	lsls	r4, r3
 800113a:	1a2b      	subs	r3, r5, r0
 800113c:	3b76      	subs	r3, #118	@ 0x76
 800113e:	2100      	movs	r1, #0
 8001140:	1c5d      	adds	r5, r3, #1
 8001142:	2a0a      	cmp	r2, #10
 8001144:	dc00      	bgt.n	8001148 <__aeabi_fmul+0x1b8>
 8001146:	e752      	b.n	8000fee <__aeabi_fmul+0x5e>
 8001148:	e780      	b.n	800104c <__aeabi_fmul+0xbc>
 800114a:	2201      	movs	r2, #1
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b1b      	cmp	r3, #27
 8001150:	dd00      	ble.n	8001154 <__aeabi_fmul+0x1c4>
 8001152:	e758      	b.n	8001006 <__aeabi_fmul+0x76>
 8001154:	359e      	adds	r5, #158	@ 0x9e
 8001156:	0022      	movs	r2, r4
 8001158:	40ac      	lsls	r4, r5
 800115a:	40da      	lsrs	r2, r3
 800115c:	1e63      	subs	r3, r4, #1
 800115e:	419c      	sbcs	r4, r3
 8001160:	4322      	orrs	r2, r4
 8001162:	0753      	lsls	r3, r2, #29
 8001164:	d004      	beq.n	8001170 <__aeabi_fmul+0x1e0>
 8001166:	230f      	movs	r3, #15
 8001168:	4013      	ands	r3, r2
 800116a:	2b04      	cmp	r3, #4
 800116c:	d000      	beq.n	8001170 <__aeabi_fmul+0x1e0>
 800116e:	3204      	adds	r2, #4
 8001170:	0153      	lsls	r3, r2, #5
 8001172:	d537      	bpl.n	80011e4 <__aeabi_fmul+0x254>
 8001174:	2001      	movs	r0, #1
 8001176:	2200      	movs	r2, #0
 8001178:	e747      	b.n	800100a <__aeabi_fmul+0x7a>
 800117a:	0c21      	lsrs	r1, r4, #16
 800117c:	464a      	mov	r2, r9
 800117e:	0424      	lsls	r4, r4, #16
 8001180:	0c24      	lsrs	r4, r4, #16
 8001182:	0027      	movs	r7, r4
 8001184:	0c10      	lsrs	r0, r2, #16
 8001186:	0412      	lsls	r2, r2, #16
 8001188:	0c12      	lsrs	r2, r2, #16
 800118a:	4344      	muls	r4, r0
 800118c:	4357      	muls	r7, r2
 800118e:	4348      	muls	r0, r1
 8001190:	4351      	muls	r1, r2
 8001192:	0c3a      	lsrs	r2, r7, #16
 8001194:	1909      	adds	r1, r1, r4
 8001196:	1852      	adds	r2, r2, r1
 8001198:	4294      	cmp	r4, r2
 800119a:	d903      	bls.n	80011a4 <__aeabi_fmul+0x214>
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	0249      	lsls	r1, r1, #9
 80011a0:	468c      	mov	ip, r1
 80011a2:	4460      	add	r0, ip
 80011a4:	043f      	lsls	r7, r7, #16
 80011a6:	0411      	lsls	r1, r2, #16
 80011a8:	0c3f      	lsrs	r7, r7, #16
 80011aa:	19c9      	adds	r1, r1, r7
 80011ac:	018c      	lsls	r4, r1, #6
 80011ae:	1e67      	subs	r7, r4, #1
 80011b0:	41bc      	sbcs	r4, r7
 80011b2:	0c12      	lsrs	r2, r2, #16
 80011b4:	0e89      	lsrs	r1, r1, #26
 80011b6:	1812      	adds	r2, r2, r0
 80011b8:	430c      	orrs	r4, r1
 80011ba:	0192      	lsls	r2, r2, #6
 80011bc:	4314      	orrs	r4, r2
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	d50e      	bpl.n	80011e0 <__aeabi_fmul+0x250>
 80011c2:	2301      	movs	r3, #1
 80011c4:	0862      	lsrs	r2, r4, #1
 80011c6:	401c      	ands	r4, r3
 80011c8:	4314      	orrs	r4, r2
 80011ca:	e749      	b.n	8001060 <__aeabi_fmul+0xd0>
 80011cc:	003e      	movs	r6, r7
 80011ce:	46a1      	mov	r9, r4
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	464b      	mov	r3, r9
 80011d4:	03d2      	lsls	r2, r2, #15
 80011d6:	431a      	orrs	r2, r3
 80011d8:	0252      	lsls	r2, r2, #9
 80011da:	20ff      	movs	r0, #255	@ 0xff
 80011dc:	0a52      	lsrs	r2, r2, #9
 80011de:	e714      	b.n	800100a <__aeabi_fmul+0x7a>
 80011e0:	001d      	movs	r5, r3
 80011e2:	e73d      	b.n	8001060 <__aeabi_fmul+0xd0>
 80011e4:	0192      	lsls	r2, r2, #6
 80011e6:	2000      	movs	r0, #0
 80011e8:	0a52      	lsrs	r2, r2, #9
 80011ea:	e70e      	b.n	800100a <__aeabi_fmul+0x7a>
 80011ec:	290f      	cmp	r1, #15
 80011ee:	d1ed      	bne.n	80011cc <__aeabi_fmul+0x23c>
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	464b      	mov	r3, r9
 80011f4:	03d2      	lsls	r2, r2, #15
 80011f6:	4213      	tst	r3, r2
 80011f8:	d0ea      	beq.n	80011d0 <__aeabi_fmul+0x240>
 80011fa:	4214      	tst	r4, r2
 80011fc:	d1e8      	bne.n	80011d0 <__aeabi_fmul+0x240>
 80011fe:	003e      	movs	r6, r7
 8001200:	20ff      	movs	r0, #255	@ 0xff
 8001202:	4322      	orrs	r2, r4
 8001204:	e701      	b.n	800100a <__aeabi_fmul+0x7a>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	f7ffffff 	.word	0xf7ffffff

0800120c <__aeabi_fsub>:
 800120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120e:	4647      	mov	r7, r8
 8001210:	46ce      	mov	lr, r9
 8001212:	024e      	lsls	r6, r1, #9
 8001214:	0243      	lsls	r3, r0, #9
 8001216:	0045      	lsls	r5, r0, #1
 8001218:	0a72      	lsrs	r2, r6, #9
 800121a:	0fc4      	lsrs	r4, r0, #31
 800121c:	0048      	lsls	r0, r1, #1
 800121e:	b580      	push	{r7, lr}
 8001220:	4694      	mov	ip, r2
 8001222:	0a5f      	lsrs	r7, r3, #9
 8001224:	0e2d      	lsrs	r5, r5, #24
 8001226:	099b      	lsrs	r3, r3, #6
 8001228:	0e00      	lsrs	r0, r0, #24
 800122a:	0fc9      	lsrs	r1, r1, #31
 800122c:	09b6      	lsrs	r6, r6, #6
 800122e:	28ff      	cmp	r0, #255	@ 0xff
 8001230:	d024      	beq.n	800127c <__aeabi_fsub+0x70>
 8001232:	2201      	movs	r2, #1
 8001234:	4051      	eors	r1, r2
 8001236:	1a2a      	subs	r2, r5, r0
 8001238:	428c      	cmp	r4, r1
 800123a:	d00f      	beq.n	800125c <__aeabi_fsub+0x50>
 800123c:	2a00      	cmp	r2, #0
 800123e:	dc00      	bgt.n	8001242 <__aeabi_fsub+0x36>
 8001240:	e16a      	b.n	8001518 <__aeabi_fsub+0x30c>
 8001242:	2800      	cmp	r0, #0
 8001244:	d135      	bne.n	80012b2 <__aeabi_fsub+0xa6>
 8001246:	2e00      	cmp	r6, #0
 8001248:	d100      	bne.n	800124c <__aeabi_fsub+0x40>
 800124a:	e0a2      	b.n	8001392 <__aeabi_fsub+0x186>
 800124c:	1e51      	subs	r1, r2, #1
 800124e:	2a01      	cmp	r2, #1
 8001250:	d100      	bne.n	8001254 <__aeabi_fsub+0x48>
 8001252:	e124      	b.n	800149e <__aeabi_fsub+0x292>
 8001254:	2aff      	cmp	r2, #255	@ 0xff
 8001256:	d021      	beq.n	800129c <__aeabi_fsub+0x90>
 8001258:	000a      	movs	r2, r1
 800125a:	e02f      	b.n	80012bc <__aeabi_fsub+0xb0>
 800125c:	2a00      	cmp	r2, #0
 800125e:	dc00      	bgt.n	8001262 <__aeabi_fsub+0x56>
 8001260:	e167      	b.n	8001532 <__aeabi_fsub+0x326>
 8001262:	2800      	cmp	r0, #0
 8001264:	d05e      	beq.n	8001324 <__aeabi_fsub+0x118>
 8001266:	2dff      	cmp	r5, #255	@ 0xff
 8001268:	d018      	beq.n	800129c <__aeabi_fsub+0x90>
 800126a:	2180      	movs	r1, #128	@ 0x80
 800126c:	04c9      	lsls	r1, r1, #19
 800126e:	430e      	orrs	r6, r1
 8001270:	2a1b      	cmp	r2, #27
 8001272:	dc00      	bgt.n	8001276 <__aeabi_fsub+0x6a>
 8001274:	e076      	b.n	8001364 <__aeabi_fsub+0x158>
 8001276:	002a      	movs	r2, r5
 8001278:	3301      	adds	r3, #1
 800127a:	e032      	b.n	80012e2 <__aeabi_fsub+0xd6>
 800127c:	002a      	movs	r2, r5
 800127e:	3aff      	subs	r2, #255	@ 0xff
 8001280:	4691      	mov	r9, r2
 8001282:	2e00      	cmp	r6, #0
 8001284:	d042      	beq.n	800130c <__aeabi_fsub+0x100>
 8001286:	428c      	cmp	r4, r1
 8001288:	d055      	beq.n	8001336 <__aeabi_fsub+0x12a>
 800128a:	464a      	mov	r2, r9
 800128c:	2a00      	cmp	r2, #0
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x86>
 8001290:	e09c      	b.n	80013cc <__aeabi_fsub+0x1c0>
 8001292:	2d00      	cmp	r5, #0
 8001294:	d100      	bne.n	8001298 <__aeabi_fsub+0x8c>
 8001296:	e077      	b.n	8001388 <__aeabi_fsub+0x17c>
 8001298:	000c      	movs	r4, r1
 800129a:	0033      	movs	r3, r6
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <__aeabi_fsub+0x98>
 80012a2:	e06e      	b.n	8001382 <__aeabi_fsub+0x176>
 80012a4:	2280      	movs	r2, #128	@ 0x80
 80012a6:	03d2      	lsls	r2, r2, #15
 80012a8:	4313      	orrs	r3, r2
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	20ff      	movs	r0, #255	@ 0xff
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	e024      	b.n	80012fc <__aeabi_fsub+0xf0>
 80012b2:	2dff      	cmp	r5, #255	@ 0xff
 80012b4:	d0f2      	beq.n	800129c <__aeabi_fsub+0x90>
 80012b6:	2180      	movs	r1, #128	@ 0x80
 80012b8:	04c9      	lsls	r1, r1, #19
 80012ba:	430e      	orrs	r6, r1
 80012bc:	2101      	movs	r1, #1
 80012be:	2a1b      	cmp	r2, #27
 80012c0:	dc08      	bgt.n	80012d4 <__aeabi_fsub+0xc8>
 80012c2:	0031      	movs	r1, r6
 80012c4:	2020      	movs	r0, #32
 80012c6:	40d1      	lsrs	r1, r2
 80012c8:	1a82      	subs	r2, r0, r2
 80012ca:	4096      	lsls	r6, r2
 80012cc:	0032      	movs	r2, r6
 80012ce:	1e50      	subs	r0, r2, #1
 80012d0:	4182      	sbcs	r2, r0
 80012d2:	4311      	orrs	r1, r2
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	015a      	lsls	r2, r3, #5
 80012d8:	d460      	bmi.n	800139c <__aeabi_fsub+0x190>
 80012da:	2107      	movs	r1, #7
 80012dc:	002a      	movs	r2, r5
 80012de:	4019      	ands	r1, r3
 80012e0:	d057      	beq.n	8001392 <__aeabi_fsub+0x186>
 80012e2:	210f      	movs	r1, #15
 80012e4:	4019      	ands	r1, r3
 80012e6:	2904      	cmp	r1, #4
 80012e8:	d000      	beq.n	80012ec <__aeabi_fsub+0xe0>
 80012ea:	3304      	adds	r3, #4
 80012ec:	0159      	lsls	r1, r3, #5
 80012ee:	d550      	bpl.n	8001392 <__aeabi_fsub+0x186>
 80012f0:	1c50      	adds	r0, r2, #1
 80012f2:	2afe      	cmp	r2, #254	@ 0xfe
 80012f4:	d045      	beq.n	8001382 <__aeabi_fsub+0x176>
 80012f6:	019b      	lsls	r3, r3, #6
 80012f8:	b2c0      	uxtb	r0, r0
 80012fa:	0a5b      	lsrs	r3, r3, #9
 80012fc:	05c0      	lsls	r0, r0, #23
 80012fe:	4318      	orrs	r0, r3
 8001300:	07e4      	lsls	r4, r4, #31
 8001302:	4320      	orrs	r0, r4
 8001304:	bcc0      	pop	{r6, r7}
 8001306:	46b9      	mov	r9, r7
 8001308:	46b0      	mov	r8, r6
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130c:	2201      	movs	r2, #1
 800130e:	4051      	eors	r1, r2
 8001310:	428c      	cmp	r4, r1
 8001312:	d1ba      	bne.n	800128a <__aeabi_fsub+0x7e>
 8001314:	464a      	mov	r2, r9
 8001316:	2a00      	cmp	r2, #0
 8001318:	d010      	beq.n	800133c <__aeabi_fsub+0x130>
 800131a:	2d00      	cmp	r5, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x114>
 800131e:	e098      	b.n	8001452 <__aeabi_fsub+0x246>
 8001320:	2300      	movs	r3, #0
 8001322:	e7bb      	b.n	800129c <__aeabi_fsub+0x90>
 8001324:	2e00      	cmp	r6, #0
 8001326:	d034      	beq.n	8001392 <__aeabi_fsub+0x186>
 8001328:	1e51      	subs	r1, r2, #1
 800132a:	2a01      	cmp	r2, #1
 800132c:	d06e      	beq.n	800140c <__aeabi_fsub+0x200>
 800132e:	2aff      	cmp	r2, #255	@ 0xff
 8001330:	d0b4      	beq.n	800129c <__aeabi_fsub+0x90>
 8001332:	000a      	movs	r2, r1
 8001334:	e79c      	b.n	8001270 <__aeabi_fsub+0x64>
 8001336:	2a00      	cmp	r2, #0
 8001338:	d000      	beq.n	800133c <__aeabi_fsub+0x130>
 800133a:	e088      	b.n	800144e <__aeabi_fsub+0x242>
 800133c:	20fe      	movs	r0, #254	@ 0xfe
 800133e:	1c6a      	adds	r2, r5, #1
 8001340:	4210      	tst	r0, r2
 8001342:	d000      	beq.n	8001346 <__aeabi_fsub+0x13a>
 8001344:	e092      	b.n	800146c <__aeabi_fsub+0x260>
 8001346:	2d00      	cmp	r5, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x140>
 800134a:	e0a4      	b.n	8001496 <__aeabi_fsub+0x28a>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_fsub+0x146>
 8001350:	e0cb      	b.n	80014ea <__aeabi_fsub+0x2de>
 8001352:	2e00      	cmp	r6, #0
 8001354:	d000      	beq.n	8001358 <__aeabi_fsub+0x14c>
 8001356:	e0ca      	b.n	80014ee <__aeabi_fsub+0x2e2>
 8001358:	2200      	movs	r2, #0
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	0a5b      	lsrs	r3, r3, #9
 8001360:	b2d0      	uxtb	r0, r2
 8001362:	e7cb      	b.n	80012fc <__aeabi_fsub+0xf0>
 8001364:	0031      	movs	r1, r6
 8001366:	2020      	movs	r0, #32
 8001368:	40d1      	lsrs	r1, r2
 800136a:	1a82      	subs	r2, r0, r2
 800136c:	4096      	lsls	r6, r2
 800136e:	0032      	movs	r2, r6
 8001370:	1e50      	subs	r0, r2, #1
 8001372:	4182      	sbcs	r2, r0
 8001374:	430a      	orrs	r2, r1
 8001376:	189b      	adds	r3, r3, r2
 8001378:	015a      	lsls	r2, r3, #5
 800137a:	d5ae      	bpl.n	80012da <__aeabi_fsub+0xce>
 800137c:	1c6a      	adds	r2, r5, #1
 800137e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001380:	d14a      	bne.n	8001418 <__aeabi_fsub+0x20c>
 8001382:	20ff      	movs	r0, #255	@ 0xff
 8001384:	2300      	movs	r3, #0
 8001386:	e7b9      	b.n	80012fc <__aeabi_fsub+0xf0>
 8001388:	22ff      	movs	r2, #255	@ 0xff
 800138a:	2b00      	cmp	r3, #0
 800138c:	d14b      	bne.n	8001426 <__aeabi_fsub+0x21a>
 800138e:	000c      	movs	r4, r1
 8001390:	0033      	movs	r3, r6
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	2aff      	cmp	r2, #255	@ 0xff
 8001396:	d100      	bne.n	800139a <__aeabi_fsub+0x18e>
 8001398:	e781      	b.n	800129e <__aeabi_fsub+0x92>
 800139a:	e7df      	b.n	800135c <__aeabi_fsub+0x150>
 800139c:	019f      	lsls	r7, r3, #6
 800139e:	09bf      	lsrs	r7, r7, #6
 80013a0:	0038      	movs	r0, r7
 80013a2:	f002 f90d 	bl	80035c0 <__clzsi2>
 80013a6:	3805      	subs	r0, #5
 80013a8:	4087      	lsls	r7, r0
 80013aa:	4285      	cmp	r5, r0
 80013ac:	dc21      	bgt.n	80013f2 <__aeabi_fsub+0x1e6>
 80013ae:	003b      	movs	r3, r7
 80013b0:	2120      	movs	r1, #32
 80013b2:	1b42      	subs	r2, r0, r5
 80013b4:	3201      	adds	r2, #1
 80013b6:	40d3      	lsrs	r3, r2
 80013b8:	1a8a      	subs	r2, r1, r2
 80013ba:	4097      	lsls	r7, r2
 80013bc:	1e7a      	subs	r2, r7, #1
 80013be:	4197      	sbcs	r7, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	433b      	orrs	r3, r7
 80013c4:	0759      	lsls	r1, r3, #29
 80013c6:	d000      	beq.n	80013ca <__aeabi_fsub+0x1be>
 80013c8:	e78b      	b.n	80012e2 <__aeabi_fsub+0xd6>
 80013ca:	e78f      	b.n	80012ec <__aeabi_fsub+0xe0>
 80013cc:	20fe      	movs	r0, #254	@ 0xfe
 80013ce:	1c6a      	adds	r2, r5, #1
 80013d0:	4210      	tst	r0, r2
 80013d2:	d112      	bne.n	80013fa <__aeabi_fsub+0x1ee>
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	d152      	bne.n	800147e <__aeabi_fsub+0x272>
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d07c      	beq.n	80014d6 <__aeabi_fsub+0x2ca>
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d0bb      	beq.n	8001358 <__aeabi_fsub+0x14c>
 80013e0:	1b9a      	subs	r2, r3, r6
 80013e2:	0150      	lsls	r0, r2, #5
 80013e4:	d400      	bmi.n	80013e8 <__aeabi_fsub+0x1dc>
 80013e6:	e08b      	b.n	8001500 <__aeabi_fsub+0x2f4>
 80013e8:	2401      	movs	r4, #1
 80013ea:	2200      	movs	r2, #0
 80013ec:	1af3      	subs	r3, r6, r3
 80013ee:	400c      	ands	r4, r1
 80013f0:	e7e8      	b.n	80013c4 <__aeabi_fsub+0x1b8>
 80013f2:	4b56      	ldr	r3, [pc, #344]	@ (800154c <__aeabi_fsub+0x340>)
 80013f4:	1a2a      	subs	r2, r5, r0
 80013f6:	403b      	ands	r3, r7
 80013f8:	e7e4      	b.n	80013c4 <__aeabi_fsub+0x1b8>
 80013fa:	1b9f      	subs	r7, r3, r6
 80013fc:	017a      	lsls	r2, r7, #5
 80013fe:	d446      	bmi.n	800148e <__aeabi_fsub+0x282>
 8001400:	2f00      	cmp	r7, #0
 8001402:	d1cd      	bne.n	80013a0 <__aeabi_fsub+0x194>
 8001404:	2400      	movs	r4, #0
 8001406:	2000      	movs	r0, #0
 8001408:	2300      	movs	r3, #0
 800140a:	e777      	b.n	80012fc <__aeabi_fsub+0xf0>
 800140c:	199b      	adds	r3, r3, r6
 800140e:	2501      	movs	r5, #1
 8001410:	3201      	adds	r2, #1
 8001412:	0159      	lsls	r1, r3, #5
 8001414:	d400      	bmi.n	8001418 <__aeabi_fsub+0x20c>
 8001416:	e760      	b.n	80012da <__aeabi_fsub+0xce>
 8001418:	2101      	movs	r1, #1
 800141a:	484d      	ldr	r0, [pc, #308]	@ (8001550 <__aeabi_fsub+0x344>)
 800141c:	4019      	ands	r1, r3
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	4003      	ands	r3, r0
 8001422:	430b      	orrs	r3, r1
 8001424:	e7ce      	b.n	80013c4 <__aeabi_fsub+0x1b8>
 8001426:	1e57      	subs	r7, r2, #1
 8001428:	2a01      	cmp	r2, #1
 800142a:	d05a      	beq.n	80014e2 <__aeabi_fsub+0x2d6>
 800142c:	000c      	movs	r4, r1
 800142e:	2aff      	cmp	r2, #255	@ 0xff
 8001430:	d033      	beq.n	800149a <__aeabi_fsub+0x28e>
 8001432:	2201      	movs	r2, #1
 8001434:	2f1b      	cmp	r7, #27
 8001436:	dc07      	bgt.n	8001448 <__aeabi_fsub+0x23c>
 8001438:	2120      	movs	r1, #32
 800143a:	1bc9      	subs	r1, r1, r7
 800143c:	001a      	movs	r2, r3
 800143e:	408b      	lsls	r3, r1
 8001440:	40fa      	lsrs	r2, r7
 8001442:	1e59      	subs	r1, r3, #1
 8001444:	418b      	sbcs	r3, r1
 8001446:	431a      	orrs	r2, r3
 8001448:	0005      	movs	r5, r0
 800144a:	1ab3      	subs	r3, r6, r2
 800144c:	e743      	b.n	80012d6 <__aeabi_fsub+0xca>
 800144e:	2d00      	cmp	r5, #0
 8001450:	d123      	bne.n	800149a <__aeabi_fsub+0x28e>
 8001452:	22ff      	movs	r2, #255	@ 0xff
 8001454:	2b00      	cmp	r3, #0
 8001456:	d09b      	beq.n	8001390 <__aeabi_fsub+0x184>
 8001458:	1e51      	subs	r1, r2, #1
 800145a:	2a01      	cmp	r2, #1
 800145c:	d0d6      	beq.n	800140c <__aeabi_fsub+0x200>
 800145e:	2aff      	cmp	r2, #255	@ 0xff
 8001460:	d01b      	beq.n	800149a <__aeabi_fsub+0x28e>
 8001462:	291b      	cmp	r1, #27
 8001464:	dd2c      	ble.n	80014c0 <__aeabi_fsub+0x2b4>
 8001466:	0002      	movs	r2, r0
 8001468:	1c73      	adds	r3, r6, #1
 800146a:	e73a      	b.n	80012e2 <__aeabi_fsub+0xd6>
 800146c:	2aff      	cmp	r2, #255	@ 0xff
 800146e:	d088      	beq.n	8001382 <__aeabi_fsub+0x176>
 8001470:	199b      	adds	r3, r3, r6
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	0759      	lsls	r1, r3, #29
 8001476:	d000      	beq.n	800147a <__aeabi_fsub+0x26e>
 8001478:	e733      	b.n	80012e2 <__aeabi_fsub+0xd6>
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	e76e      	b.n	800135c <__aeabi_fsub+0x150>
 800147e:	2b00      	cmp	r3, #0
 8001480:	d110      	bne.n	80014a4 <__aeabi_fsub+0x298>
 8001482:	2e00      	cmp	r6, #0
 8001484:	d043      	beq.n	800150e <__aeabi_fsub+0x302>
 8001486:	2401      	movs	r4, #1
 8001488:	0033      	movs	r3, r6
 800148a:	400c      	ands	r4, r1
 800148c:	e706      	b.n	800129c <__aeabi_fsub+0x90>
 800148e:	2401      	movs	r4, #1
 8001490:	1af7      	subs	r7, r6, r3
 8001492:	400c      	ands	r4, r1
 8001494:	e784      	b.n	80013a0 <__aeabi_fsub+0x194>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <__aeabi_fsub+0x298>
 800149a:	0033      	movs	r3, r6
 800149c:	e6fe      	b.n	800129c <__aeabi_fsub+0x90>
 800149e:	2501      	movs	r5, #1
 80014a0:	1b9b      	subs	r3, r3, r6
 80014a2:	e718      	b.n	80012d6 <__aeabi_fsub+0xca>
 80014a4:	2e00      	cmp	r6, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_fsub+0x29e>
 80014a8:	e6f8      	b.n	800129c <__aeabi_fsub+0x90>
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	03d2      	lsls	r2, r2, #15
 80014ae:	4297      	cmp	r7, r2
 80014b0:	d304      	bcc.n	80014bc <__aeabi_fsub+0x2b0>
 80014b2:	4594      	cmp	ip, r2
 80014b4:	d202      	bcs.n	80014bc <__aeabi_fsub+0x2b0>
 80014b6:	2401      	movs	r4, #1
 80014b8:	0033      	movs	r3, r6
 80014ba:	400c      	ands	r4, r1
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	e6f1      	b.n	80012a4 <__aeabi_fsub+0x98>
 80014c0:	001a      	movs	r2, r3
 80014c2:	2520      	movs	r5, #32
 80014c4:	40ca      	lsrs	r2, r1
 80014c6:	1a69      	subs	r1, r5, r1
 80014c8:	408b      	lsls	r3, r1
 80014ca:	1e59      	subs	r1, r3, #1
 80014cc:	418b      	sbcs	r3, r1
 80014ce:	4313      	orrs	r3, r2
 80014d0:	0005      	movs	r5, r0
 80014d2:	199b      	adds	r3, r3, r6
 80014d4:	e750      	b.n	8001378 <__aeabi_fsub+0x16c>
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d094      	beq.n	8001404 <__aeabi_fsub+0x1f8>
 80014da:	2401      	movs	r4, #1
 80014dc:	0033      	movs	r3, r6
 80014de:	400c      	ands	r4, r1
 80014e0:	e73a      	b.n	8001358 <__aeabi_fsub+0x14c>
 80014e2:	000c      	movs	r4, r1
 80014e4:	2501      	movs	r5, #1
 80014e6:	1af3      	subs	r3, r6, r3
 80014e8:	e6f5      	b.n	80012d6 <__aeabi_fsub+0xca>
 80014ea:	0033      	movs	r3, r6
 80014ec:	e734      	b.n	8001358 <__aeabi_fsub+0x14c>
 80014ee:	199b      	adds	r3, r3, r6
 80014f0:	2200      	movs	r2, #0
 80014f2:	0159      	lsls	r1, r3, #5
 80014f4:	d5c1      	bpl.n	800147a <__aeabi_fsub+0x26e>
 80014f6:	4a15      	ldr	r2, [pc, #84]	@ (800154c <__aeabi_fsub+0x340>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	2201      	movs	r2, #1
 80014fe:	e72d      	b.n	800135c <__aeabi_fsub+0x150>
 8001500:	2a00      	cmp	r2, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_fsub+0x2fa>
 8001504:	e77e      	b.n	8001404 <__aeabi_fsub+0x1f8>
 8001506:	0013      	movs	r3, r2
 8001508:	2200      	movs	r2, #0
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	e726      	b.n	800135c <__aeabi_fsub+0x150>
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	2400      	movs	r4, #0
 8001512:	20ff      	movs	r0, #255	@ 0xff
 8001514:	03db      	lsls	r3, r3, #15
 8001516:	e6f1      	b.n	80012fc <__aeabi_fsub+0xf0>
 8001518:	2a00      	cmp	r2, #0
 800151a:	d100      	bne.n	800151e <__aeabi_fsub+0x312>
 800151c:	e756      	b.n	80013cc <__aeabi_fsub+0x1c0>
 800151e:	1b47      	subs	r7, r0, r5
 8001520:	003a      	movs	r2, r7
 8001522:	2d00      	cmp	r5, #0
 8001524:	d100      	bne.n	8001528 <__aeabi_fsub+0x31c>
 8001526:	e730      	b.n	800138a <__aeabi_fsub+0x17e>
 8001528:	2280      	movs	r2, #128	@ 0x80
 800152a:	04d2      	lsls	r2, r2, #19
 800152c:	000c      	movs	r4, r1
 800152e:	4313      	orrs	r3, r2
 8001530:	e77f      	b.n	8001432 <__aeabi_fsub+0x226>
 8001532:	2a00      	cmp	r2, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x32c>
 8001536:	e701      	b.n	800133c <__aeabi_fsub+0x130>
 8001538:	1b41      	subs	r1, r0, r5
 800153a:	2d00      	cmp	r5, #0
 800153c:	d101      	bne.n	8001542 <__aeabi_fsub+0x336>
 800153e:	000a      	movs	r2, r1
 8001540:	e788      	b.n	8001454 <__aeabi_fsub+0x248>
 8001542:	2280      	movs	r2, #128	@ 0x80
 8001544:	04d2      	lsls	r2, r2, #19
 8001546:	4313      	orrs	r3, r2
 8001548:	e78b      	b.n	8001462 <__aeabi_fsub+0x256>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	fbffffff 	.word	0xfbffffff
 8001550:	7dffffff 	.word	0x7dffffff

08001554 <__aeabi_f2iz>:
 8001554:	0241      	lsls	r1, r0, #9
 8001556:	0042      	lsls	r2, r0, #1
 8001558:	0fc3      	lsrs	r3, r0, #31
 800155a:	0a49      	lsrs	r1, r1, #9
 800155c:	2000      	movs	r0, #0
 800155e:	0e12      	lsrs	r2, r2, #24
 8001560:	2a7e      	cmp	r2, #126	@ 0x7e
 8001562:	dd03      	ble.n	800156c <__aeabi_f2iz+0x18>
 8001564:	2a9d      	cmp	r2, #157	@ 0x9d
 8001566:	dd02      	ble.n	800156e <__aeabi_f2iz+0x1a>
 8001568:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <__aeabi_f2iz+0x3c>)
 800156a:	1898      	adds	r0, r3, r2
 800156c:	4770      	bx	lr
 800156e:	2080      	movs	r0, #128	@ 0x80
 8001570:	0400      	lsls	r0, r0, #16
 8001572:	4301      	orrs	r1, r0
 8001574:	2a95      	cmp	r2, #149	@ 0x95
 8001576:	dc07      	bgt.n	8001588 <__aeabi_f2iz+0x34>
 8001578:	2096      	movs	r0, #150	@ 0x96
 800157a:	1a82      	subs	r2, r0, r2
 800157c:	40d1      	lsrs	r1, r2
 800157e:	4248      	negs	r0, r1
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f3      	bne.n	800156c <__aeabi_f2iz+0x18>
 8001584:	0008      	movs	r0, r1
 8001586:	e7f1      	b.n	800156c <__aeabi_f2iz+0x18>
 8001588:	3a96      	subs	r2, #150	@ 0x96
 800158a:	4091      	lsls	r1, r2
 800158c:	e7f7      	b.n	800157e <__aeabi_f2iz+0x2a>
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	7fffffff 	.word	0x7fffffff

08001594 <__aeabi_i2f>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	2800      	cmp	r0, #0
 8001598:	d013      	beq.n	80015c2 <__aeabi_i2f+0x2e>
 800159a:	17c3      	asrs	r3, r0, #31
 800159c:	18c5      	adds	r5, r0, r3
 800159e:	405d      	eors	r5, r3
 80015a0:	0fc4      	lsrs	r4, r0, #31
 80015a2:	0028      	movs	r0, r5
 80015a4:	f002 f80c 	bl	80035c0 <__clzsi2>
 80015a8:	239e      	movs	r3, #158	@ 0x9e
 80015aa:	0001      	movs	r1, r0
 80015ac:	1a1b      	subs	r3, r3, r0
 80015ae:	2b96      	cmp	r3, #150	@ 0x96
 80015b0:	dc0f      	bgt.n	80015d2 <__aeabi_i2f+0x3e>
 80015b2:	2808      	cmp	r0, #8
 80015b4:	d034      	beq.n	8001620 <__aeabi_i2f+0x8c>
 80015b6:	3908      	subs	r1, #8
 80015b8:	408d      	lsls	r5, r1
 80015ba:	026d      	lsls	r5, r5, #9
 80015bc:	0a6d      	lsrs	r5, r5, #9
 80015be:	b2d8      	uxtb	r0, r3
 80015c0:	e002      	b.n	80015c8 <__aeabi_i2f+0x34>
 80015c2:	2400      	movs	r4, #0
 80015c4:	2000      	movs	r0, #0
 80015c6:	2500      	movs	r5, #0
 80015c8:	05c0      	lsls	r0, r0, #23
 80015ca:	4328      	orrs	r0, r5
 80015cc:	07e4      	lsls	r4, r4, #31
 80015ce:	4320      	orrs	r0, r4
 80015d0:	bd70      	pop	{r4, r5, r6, pc}
 80015d2:	2b99      	cmp	r3, #153	@ 0x99
 80015d4:	dc16      	bgt.n	8001604 <__aeabi_i2f+0x70>
 80015d6:	1f42      	subs	r2, r0, #5
 80015d8:	2805      	cmp	r0, #5
 80015da:	d000      	beq.n	80015de <__aeabi_i2f+0x4a>
 80015dc:	4095      	lsls	r5, r2
 80015de:	002a      	movs	r2, r5
 80015e0:	4811      	ldr	r0, [pc, #68]	@ (8001628 <__aeabi_i2f+0x94>)
 80015e2:	4002      	ands	r2, r0
 80015e4:	076e      	lsls	r6, r5, #29
 80015e6:	d009      	beq.n	80015fc <__aeabi_i2f+0x68>
 80015e8:	260f      	movs	r6, #15
 80015ea:	4035      	ands	r5, r6
 80015ec:	2d04      	cmp	r5, #4
 80015ee:	d005      	beq.n	80015fc <__aeabi_i2f+0x68>
 80015f0:	3204      	adds	r2, #4
 80015f2:	0155      	lsls	r5, r2, #5
 80015f4:	d502      	bpl.n	80015fc <__aeabi_i2f+0x68>
 80015f6:	239f      	movs	r3, #159	@ 0x9f
 80015f8:	4002      	ands	r2, r0
 80015fa:	1a5b      	subs	r3, r3, r1
 80015fc:	0192      	lsls	r2, r2, #6
 80015fe:	0a55      	lsrs	r5, r2, #9
 8001600:	b2d8      	uxtb	r0, r3
 8001602:	e7e1      	b.n	80015c8 <__aeabi_i2f+0x34>
 8001604:	2205      	movs	r2, #5
 8001606:	1a12      	subs	r2, r2, r0
 8001608:	0028      	movs	r0, r5
 800160a:	40d0      	lsrs	r0, r2
 800160c:	0002      	movs	r2, r0
 800160e:	0008      	movs	r0, r1
 8001610:	301b      	adds	r0, #27
 8001612:	4085      	lsls	r5, r0
 8001614:	0028      	movs	r0, r5
 8001616:	1e45      	subs	r5, r0, #1
 8001618:	41a8      	sbcs	r0, r5
 800161a:	4302      	orrs	r2, r0
 800161c:	0015      	movs	r5, r2
 800161e:	e7de      	b.n	80015de <__aeabi_i2f+0x4a>
 8001620:	026d      	lsls	r5, r5, #9
 8001622:	2096      	movs	r0, #150	@ 0x96
 8001624:	0a6d      	lsrs	r5, r5, #9
 8001626:	e7cf      	b.n	80015c8 <__aeabi_i2f+0x34>
 8001628:	fbffffff 	.word	0xfbffffff

0800162c <__aeabi_ui2f>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	1e04      	subs	r4, r0, #0
 8001630:	d00e      	beq.n	8001650 <__aeabi_ui2f+0x24>
 8001632:	f001 ffc5 	bl	80035c0 <__clzsi2>
 8001636:	239e      	movs	r3, #158	@ 0x9e
 8001638:	0001      	movs	r1, r0
 800163a:	1a1b      	subs	r3, r3, r0
 800163c:	2b96      	cmp	r3, #150	@ 0x96
 800163e:	dc0c      	bgt.n	800165a <__aeabi_ui2f+0x2e>
 8001640:	2808      	cmp	r0, #8
 8001642:	d02f      	beq.n	80016a4 <__aeabi_ui2f+0x78>
 8001644:	3908      	subs	r1, #8
 8001646:	408c      	lsls	r4, r1
 8001648:	0264      	lsls	r4, r4, #9
 800164a:	0a64      	lsrs	r4, r4, #9
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	e001      	b.n	8001654 <__aeabi_ui2f+0x28>
 8001650:	2000      	movs	r0, #0
 8001652:	2400      	movs	r4, #0
 8001654:	05c0      	lsls	r0, r0, #23
 8001656:	4320      	orrs	r0, r4
 8001658:	bd70      	pop	{r4, r5, r6, pc}
 800165a:	2b99      	cmp	r3, #153	@ 0x99
 800165c:	dc16      	bgt.n	800168c <__aeabi_ui2f+0x60>
 800165e:	1f42      	subs	r2, r0, #5
 8001660:	2805      	cmp	r0, #5
 8001662:	d000      	beq.n	8001666 <__aeabi_ui2f+0x3a>
 8001664:	4094      	lsls	r4, r2
 8001666:	0022      	movs	r2, r4
 8001668:	4810      	ldr	r0, [pc, #64]	@ (80016ac <__aeabi_ui2f+0x80>)
 800166a:	4002      	ands	r2, r0
 800166c:	0765      	lsls	r5, r4, #29
 800166e:	d009      	beq.n	8001684 <__aeabi_ui2f+0x58>
 8001670:	250f      	movs	r5, #15
 8001672:	402c      	ands	r4, r5
 8001674:	2c04      	cmp	r4, #4
 8001676:	d005      	beq.n	8001684 <__aeabi_ui2f+0x58>
 8001678:	3204      	adds	r2, #4
 800167a:	0154      	lsls	r4, r2, #5
 800167c:	d502      	bpl.n	8001684 <__aeabi_ui2f+0x58>
 800167e:	239f      	movs	r3, #159	@ 0x9f
 8001680:	4002      	ands	r2, r0
 8001682:	1a5b      	subs	r3, r3, r1
 8001684:	0192      	lsls	r2, r2, #6
 8001686:	0a54      	lsrs	r4, r2, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e7e3      	b.n	8001654 <__aeabi_ui2f+0x28>
 800168c:	0002      	movs	r2, r0
 800168e:	0020      	movs	r0, r4
 8001690:	321b      	adds	r2, #27
 8001692:	4090      	lsls	r0, r2
 8001694:	0002      	movs	r2, r0
 8001696:	1e50      	subs	r0, r2, #1
 8001698:	4182      	sbcs	r2, r0
 800169a:	2005      	movs	r0, #5
 800169c:	1a40      	subs	r0, r0, r1
 800169e:	40c4      	lsrs	r4, r0
 80016a0:	4314      	orrs	r4, r2
 80016a2:	e7e0      	b.n	8001666 <__aeabi_ui2f+0x3a>
 80016a4:	0264      	lsls	r4, r4, #9
 80016a6:	2096      	movs	r0, #150	@ 0x96
 80016a8:	0a64      	lsrs	r4, r4, #9
 80016aa:	e7d3      	b.n	8001654 <__aeabi_ui2f+0x28>
 80016ac:	fbffffff 	.word	0xfbffffff

080016b0 <__aeabi_dadd>:
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	4657      	mov	r7, sl
 80016b4:	464e      	mov	r6, r9
 80016b6:	4645      	mov	r5, r8
 80016b8:	46de      	mov	lr, fp
 80016ba:	b5e0      	push	{r5, r6, r7, lr}
 80016bc:	b083      	sub	sp, #12
 80016be:	9000      	str	r0, [sp, #0]
 80016c0:	9101      	str	r1, [sp, #4]
 80016c2:	030c      	lsls	r4, r1, #12
 80016c4:	004f      	lsls	r7, r1, #1
 80016c6:	0fce      	lsrs	r6, r1, #31
 80016c8:	0a61      	lsrs	r1, r4, #9
 80016ca:	9c00      	ldr	r4, [sp, #0]
 80016cc:	031d      	lsls	r5, r3, #12
 80016ce:	0f64      	lsrs	r4, r4, #29
 80016d0:	430c      	orrs	r4, r1
 80016d2:	9900      	ldr	r1, [sp, #0]
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	00c8      	lsls	r0, r1, #3
 80016da:	0059      	lsls	r1, r3, #1
 80016dc:	0d4b      	lsrs	r3, r1, #21
 80016de:	4699      	mov	r9, r3
 80016e0:	9a00      	ldr	r2, [sp, #0]
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	0a6d      	lsrs	r5, r5, #9
 80016e6:	0fd9      	lsrs	r1, r3, #31
 80016e8:	0f53      	lsrs	r3, r2, #29
 80016ea:	432b      	orrs	r3, r5
 80016ec:	469a      	mov	sl, r3
 80016ee:	9b00      	ldr	r3, [sp, #0]
 80016f0:	0d7f      	lsrs	r7, r7, #21
 80016f2:	00da      	lsls	r2, r3, #3
 80016f4:	4694      	mov	ip, r2
 80016f6:	464a      	mov	r2, r9
 80016f8:	46b0      	mov	r8, r6
 80016fa:	1aba      	subs	r2, r7, r2
 80016fc:	428e      	cmp	r6, r1
 80016fe:	d100      	bne.n	8001702 <__aeabi_dadd+0x52>
 8001700:	e0b0      	b.n	8001864 <__aeabi_dadd+0x1b4>
 8001702:	2a00      	cmp	r2, #0
 8001704:	dc00      	bgt.n	8001708 <__aeabi_dadd+0x58>
 8001706:	e078      	b.n	80017fa <__aeabi_dadd+0x14a>
 8001708:	4649      	mov	r1, r9
 800170a:	2900      	cmp	r1, #0
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x60>
 800170e:	e0e9      	b.n	80018e4 <__aeabi_dadd+0x234>
 8001710:	49c9      	ldr	r1, [pc, #804]	@ (8001a38 <__aeabi_dadd+0x388>)
 8001712:	428f      	cmp	r7, r1
 8001714:	d100      	bne.n	8001718 <__aeabi_dadd+0x68>
 8001716:	e195      	b.n	8001a44 <__aeabi_dadd+0x394>
 8001718:	2501      	movs	r5, #1
 800171a:	2a38      	cmp	r2, #56	@ 0x38
 800171c:	dc16      	bgt.n	800174c <__aeabi_dadd+0x9c>
 800171e:	2180      	movs	r1, #128	@ 0x80
 8001720:	4653      	mov	r3, sl
 8001722:	0409      	lsls	r1, r1, #16
 8001724:	430b      	orrs	r3, r1
 8001726:	469a      	mov	sl, r3
 8001728:	2a1f      	cmp	r2, #31
 800172a:	dd00      	ble.n	800172e <__aeabi_dadd+0x7e>
 800172c:	e1e7      	b.n	8001afe <__aeabi_dadd+0x44e>
 800172e:	2120      	movs	r1, #32
 8001730:	4655      	mov	r5, sl
 8001732:	1a8b      	subs	r3, r1, r2
 8001734:	4661      	mov	r1, ip
 8001736:	409d      	lsls	r5, r3
 8001738:	40d1      	lsrs	r1, r2
 800173a:	430d      	orrs	r5, r1
 800173c:	4661      	mov	r1, ip
 800173e:	4099      	lsls	r1, r3
 8001740:	1e4b      	subs	r3, r1, #1
 8001742:	4199      	sbcs	r1, r3
 8001744:	4653      	mov	r3, sl
 8001746:	40d3      	lsrs	r3, r2
 8001748:	430d      	orrs	r5, r1
 800174a:	1ae4      	subs	r4, r4, r3
 800174c:	1b45      	subs	r5, r0, r5
 800174e:	42a8      	cmp	r0, r5
 8001750:	4180      	sbcs	r0, r0
 8001752:	4240      	negs	r0, r0
 8001754:	1a24      	subs	r4, r4, r0
 8001756:	0223      	lsls	r3, r4, #8
 8001758:	d400      	bmi.n	800175c <__aeabi_dadd+0xac>
 800175a:	e10f      	b.n	800197c <__aeabi_dadd+0x2cc>
 800175c:	0264      	lsls	r4, r4, #9
 800175e:	0a64      	lsrs	r4, r4, #9
 8001760:	2c00      	cmp	r4, #0
 8001762:	d100      	bne.n	8001766 <__aeabi_dadd+0xb6>
 8001764:	e139      	b.n	80019da <__aeabi_dadd+0x32a>
 8001766:	0020      	movs	r0, r4
 8001768:	f001 ff2a 	bl	80035c0 <__clzsi2>
 800176c:	0003      	movs	r3, r0
 800176e:	3b08      	subs	r3, #8
 8001770:	2120      	movs	r1, #32
 8001772:	0028      	movs	r0, r5
 8001774:	1aca      	subs	r2, r1, r3
 8001776:	40d0      	lsrs	r0, r2
 8001778:	409c      	lsls	r4, r3
 800177a:	0002      	movs	r2, r0
 800177c:	409d      	lsls	r5, r3
 800177e:	4322      	orrs	r2, r4
 8001780:	429f      	cmp	r7, r3
 8001782:	dd00      	ble.n	8001786 <__aeabi_dadd+0xd6>
 8001784:	e173      	b.n	8001a6e <__aeabi_dadd+0x3be>
 8001786:	1bd8      	subs	r0, r3, r7
 8001788:	3001      	adds	r0, #1
 800178a:	1a09      	subs	r1, r1, r0
 800178c:	002c      	movs	r4, r5
 800178e:	408d      	lsls	r5, r1
 8001790:	40c4      	lsrs	r4, r0
 8001792:	1e6b      	subs	r3, r5, #1
 8001794:	419d      	sbcs	r5, r3
 8001796:	0013      	movs	r3, r2
 8001798:	40c2      	lsrs	r2, r0
 800179a:	408b      	lsls	r3, r1
 800179c:	4325      	orrs	r5, r4
 800179e:	2700      	movs	r7, #0
 80017a0:	0014      	movs	r4, r2
 80017a2:	431d      	orrs	r5, r3
 80017a4:	076b      	lsls	r3, r5, #29
 80017a6:	d009      	beq.n	80017bc <__aeabi_dadd+0x10c>
 80017a8:	230f      	movs	r3, #15
 80017aa:	402b      	ands	r3, r5
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d005      	beq.n	80017bc <__aeabi_dadd+0x10c>
 80017b0:	1d2b      	adds	r3, r5, #4
 80017b2:	42ab      	cmp	r3, r5
 80017b4:	41ad      	sbcs	r5, r5
 80017b6:	426d      	negs	r5, r5
 80017b8:	1964      	adds	r4, r4, r5
 80017ba:	001d      	movs	r5, r3
 80017bc:	0223      	lsls	r3, r4, #8
 80017be:	d400      	bmi.n	80017c2 <__aeabi_dadd+0x112>
 80017c0:	e12d      	b.n	8001a1e <__aeabi_dadd+0x36e>
 80017c2:	4a9d      	ldr	r2, [pc, #628]	@ (8001a38 <__aeabi_dadd+0x388>)
 80017c4:	3701      	adds	r7, #1
 80017c6:	4297      	cmp	r7, r2
 80017c8:	d100      	bne.n	80017cc <__aeabi_dadd+0x11c>
 80017ca:	e0d3      	b.n	8001974 <__aeabi_dadd+0x2c4>
 80017cc:	4646      	mov	r6, r8
 80017ce:	499b      	ldr	r1, [pc, #620]	@ (8001a3c <__aeabi_dadd+0x38c>)
 80017d0:	08ed      	lsrs	r5, r5, #3
 80017d2:	4021      	ands	r1, r4
 80017d4:	074a      	lsls	r2, r1, #29
 80017d6:	432a      	orrs	r2, r5
 80017d8:	057c      	lsls	r4, r7, #21
 80017da:	024d      	lsls	r5, r1, #9
 80017dc:	0b2d      	lsrs	r5, r5, #12
 80017de:	0d64      	lsrs	r4, r4, #21
 80017e0:	0524      	lsls	r4, r4, #20
 80017e2:	432c      	orrs	r4, r5
 80017e4:	07f6      	lsls	r6, r6, #31
 80017e6:	4334      	orrs	r4, r6
 80017e8:	0010      	movs	r0, r2
 80017ea:	0021      	movs	r1, r4
 80017ec:	b003      	add	sp, #12
 80017ee:	bcf0      	pop	{r4, r5, r6, r7}
 80017f0:	46bb      	mov	fp, r7
 80017f2:	46b2      	mov	sl, r6
 80017f4:	46a9      	mov	r9, r5
 80017f6:	46a0      	mov	r8, r4
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d100      	bne.n	8001800 <__aeabi_dadd+0x150>
 80017fe:	e084      	b.n	800190a <__aeabi_dadd+0x25a>
 8001800:	464a      	mov	r2, r9
 8001802:	1bd2      	subs	r2, r2, r7
 8001804:	2f00      	cmp	r7, #0
 8001806:	d000      	beq.n	800180a <__aeabi_dadd+0x15a>
 8001808:	e16d      	b.n	8001ae6 <__aeabi_dadd+0x436>
 800180a:	0025      	movs	r5, r4
 800180c:	4305      	orrs	r5, r0
 800180e:	d100      	bne.n	8001812 <__aeabi_dadd+0x162>
 8001810:	e127      	b.n	8001a62 <__aeabi_dadd+0x3b2>
 8001812:	1e56      	subs	r6, r2, #1
 8001814:	2a01      	cmp	r2, #1
 8001816:	d100      	bne.n	800181a <__aeabi_dadd+0x16a>
 8001818:	e23b      	b.n	8001c92 <__aeabi_dadd+0x5e2>
 800181a:	4d87      	ldr	r5, [pc, #540]	@ (8001a38 <__aeabi_dadd+0x388>)
 800181c:	42aa      	cmp	r2, r5
 800181e:	d100      	bne.n	8001822 <__aeabi_dadd+0x172>
 8001820:	e26a      	b.n	8001cf8 <__aeabi_dadd+0x648>
 8001822:	2501      	movs	r5, #1
 8001824:	2e38      	cmp	r6, #56	@ 0x38
 8001826:	dc12      	bgt.n	800184e <__aeabi_dadd+0x19e>
 8001828:	0032      	movs	r2, r6
 800182a:	2a1f      	cmp	r2, #31
 800182c:	dd00      	ble.n	8001830 <__aeabi_dadd+0x180>
 800182e:	e1f8      	b.n	8001c22 <__aeabi_dadd+0x572>
 8001830:	2620      	movs	r6, #32
 8001832:	0025      	movs	r5, r4
 8001834:	1ab6      	subs	r6, r6, r2
 8001836:	0007      	movs	r7, r0
 8001838:	4653      	mov	r3, sl
 800183a:	40b0      	lsls	r0, r6
 800183c:	40d4      	lsrs	r4, r2
 800183e:	40b5      	lsls	r5, r6
 8001840:	40d7      	lsrs	r7, r2
 8001842:	1e46      	subs	r6, r0, #1
 8001844:	41b0      	sbcs	r0, r6
 8001846:	1b1b      	subs	r3, r3, r4
 8001848:	469a      	mov	sl, r3
 800184a:	433d      	orrs	r5, r7
 800184c:	4305      	orrs	r5, r0
 800184e:	4662      	mov	r2, ip
 8001850:	1b55      	subs	r5, r2, r5
 8001852:	45ac      	cmp	ip, r5
 8001854:	4192      	sbcs	r2, r2
 8001856:	4653      	mov	r3, sl
 8001858:	4252      	negs	r2, r2
 800185a:	000e      	movs	r6, r1
 800185c:	464f      	mov	r7, r9
 800185e:	4688      	mov	r8, r1
 8001860:	1a9c      	subs	r4, r3, r2
 8001862:	e778      	b.n	8001756 <__aeabi_dadd+0xa6>
 8001864:	2a00      	cmp	r2, #0
 8001866:	dc00      	bgt.n	800186a <__aeabi_dadd+0x1ba>
 8001868:	e08e      	b.n	8001988 <__aeabi_dadd+0x2d8>
 800186a:	4649      	mov	r1, r9
 800186c:	2900      	cmp	r1, #0
 800186e:	d175      	bne.n	800195c <__aeabi_dadd+0x2ac>
 8001870:	4661      	mov	r1, ip
 8001872:	4653      	mov	r3, sl
 8001874:	4319      	orrs	r1, r3
 8001876:	d100      	bne.n	800187a <__aeabi_dadd+0x1ca>
 8001878:	e0f6      	b.n	8001a68 <__aeabi_dadd+0x3b8>
 800187a:	1e51      	subs	r1, r2, #1
 800187c:	2a01      	cmp	r2, #1
 800187e:	d100      	bne.n	8001882 <__aeabi_dadd+0x1d2>
 8001880:	e191      	b.n	8001ba6 <__aeabi_dadd+0x4f6>
 8001882:	4d6d      	ldr	r5, [pc, #436]	@ (8001a38 <__aeabi_dadd+0x388>)
 8001884:	42aa      	cmp	r2, r5
 8001886:	d100      	bne.n	800188a <__aeabi_dadd+0x1da>
 8001888:	e0dc      	b.n	8001a44 <__aeabi_dadd+0x394>
 800188a:	2501      	movs	r5, #1
 800188c:	2938      	cmp	r1, #56	@ 0x38
 800188e:	dc14      	bgt.n	80018ba <__aeabi_dadd+0x20a>
 8001890:	000a      	movs	r2, r1
 8001892:	2a1f      	cmp	r2, #31
 8001894:	dd00      	ble.n	8001898 <__aeabi_dadd+0x1e8>
 8001896:	e1a2      	b.n	8001bde <__aeabi_dadd+0x52e>
 8001898:	2120      	movs	r1, #32
 800189a:	4653      	mov	r3, sl
 800189c:	1a89      	subs	r1, r1, r2
 800189e:	408b      	lsls	r3, r1
 80018a0:	001d      	movs	r5, r3
 80018a2:	4663      	mov	r3, ip
 80018a4:	40d3      	lsrs	r3, r2
 80018a6:	431d      	orrs	r5, r3
 80018a8:	4663      	mov	r3, ip
 80018aa:	408b      	lsls	r3, r1
 80018ac:	0019      	movs	r1, r3
 80018ae:	1e4b      	subs	r3, r1, #1
 80018b0:	4199      	sbcs	r1, r3
 80018b2:	4653      	mov	r3, sl
 80018b4:	40d3      	lsrs	r3, r2
 80018b6:	430d      	orrs	r5, r1
 80018b8:	18e4      	adds	r4, r4, r3
 80018ba:	182d      	adds	r5, r5, r0
 80018bc:	4285      	cmp	r5, r0
 80018be:	4180      	sbcs	r0, r0
 80018c0:	4240      	negs	r0, r0
 80018c2:	1824      	adds	r4, r4, r0
 80018c4:	0223      	lsls	r3, r4, #8
 80018c6:	d559      	bpl.n	800197c <__aeabi_dadd+0x2cc>
 80018c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001a38 <__aeabi_dadd+0x388>)
 80018ca:	3701      	adds	r7, #1
 80018cc:	429f      	cmp	r7, r3
 80018ce:	d051      	beq.n	8001974 <__aeabi_dadd+0x2c4>
 80018d0:	2101      	movs	r1, #1
 80018d2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a3c <__aeabi_dadd+0x38c>)
 80018d4:	086a      	lsrs	r2, r5, #1
 80018d6:	401c      	ands	r4, r3
 80018d8:	4029      	ands	r1, r5
 80018da:	430a      	orrs	r2, r1
 80018dc:	07e5      	lsls	r5, r4, #31
 80018de:	4315      	orrs	r5, r2
 80018e0:	0864      	lsrs	r4, r4, #1
 80018e2:	e75f      	b.n	80017a4 <__aeabi_dadd+0xf4>
 80018e4:	4661      	mov	r1, ip
 80018e6:	4653      	mov	r3, sl
 80018e8:	4319      	orrs	r1, r3
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x23e>
 80018ec:	e0bc      	b.n	8001a68 <__aeabi_dadd+0x3b8>
 80018ee:	1e51      	subs	r1, r2, #1
 80018f0:	2a01      	cmp	r2, #1
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dadd+0x246>
 80018f4:	e164      	b.n	8001bc0 <__aeabi_dadd+0x510>
 80018f6:	4d50      	ldr	r5, [pc, #320]	@ (8001a38 <__aeabi_dadd+0x388>)
 80018f8:	42aa      	cmp	r2, r5
 80018fa:	d100      	bne.n	80018fe <__aeabi_dadd+0x24e>
 80018fc:	e16a      	b.n	8001bd4 <__aeabi_dadd+0x524>
 80018fe:	2501      	movs	r5, #1
 8001900:	2938      	cmp	r1, #56	@ 0x38
 8001902:	dd00      	ble.n	8001906 <__aeabi_dadd+0x256>
 8001904:	e722      	b.n	800174c <__aeabi_dadd+0x9c>
 8001906:	000a      	movs	r2, r1
 8001908:	e70e      	b.n	8001728 <__aeabi_dadd+0x78>
 800190a:	4a4d      	ldr	r2, [pc, #308]	@ (8001a40 <__aeabi_dadd+0x390>)
 800190c:	1c7d      	adds	r5, r7, #1
 800190e:	4215      	tst	r5, r2
 8001910:	d000      	beq.n	8001914 <__aeabi_dadd+0x264>
 8001912:	e0d0      	b.n	8001ab6 <__aeabi_dadd+0x406>
 8001914:	0025      	movs	r5, r4
 8001916:	4662      	mov	r2, ip
 8001918:	4653      	mov	r3, sl
 800191a:	4305      	orrs	r5, r0
 800191c:	431a      	orrs	r2, r3
 800191e:	2f00      	cmp	r7, #0
 8001920:	d000      	beq.n	8001924 <__aeabi_dadd+0x274>
 8001922:	e137      	b.n	8001b94 <__aeabi_dadd+0x4e4>
 8001924:	2d00      	cmp	r5, #0
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x27a>
 8001928:	e1a8      	b.n	8001c7c <__aeabi_dadd+0x5cc>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d100      	bne.n	8001930 <__aeabi_dadd+0x280>
 800192e:	e16a      	b.n	8001c06 <__aeabi_dadd+0x556>
 8001930:	4663      	mov	r3, ip
 8001932:	1ac5      	subs	r5, r0, r3
 8001934:	4653      	mov	r3, sl
 8001936:	1ae2      	subs	r2, r4, r3
 8001938:	42a8      	cmp	r0, r5
 800193a:	419b      	sbcs	r3, r3
 800193c:	425b      	negs	r3, r3
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	021a      	lsls	r2, r3, #8
 8001942:	d400      	bmi.n	8001946 <__aeabi_dadd+0x296>
 8001944:	e203      	b.n	8001d4e <__aeabi_dadd+0x69e>
 8001946:	4663      	mov	r3, ip
 8001948:	1a1d      	subs	r5, r3, r0
 800194a:	45ac      	cmp	ip, r5
 800194c:	4192      	sbcs	r2, r2
 800194e:	4653      	mov	r3, sl
 8001950:	4252      	negs	r2, r2
 8001952:	1b1c      	subs	r4, r3, r4
 8001954:	000e      	movs	r6, r1
 8001956:	4688      	mov	r8, r1
 8001958:	1aa4      	subs	r4, r4, r2
 800195a:	e723      	b.n	80017a4 <__aeabi_dadd+0xf4>
 800195c:	4936      	ldr	r1, [pc, #216]	@ (8001a38 <__aeabi_dadd+0x388>)
 800195e:	428f      	cmp	r7, r1
 8001960:	d070      	beq.n	8001a44 <__aeabi_dadd+0x394>
 8001962:	2501      	movs	r5, #1
 8001964:	2a38      	cmp	r2, #56	@ 0x38
 8001966:	dca8      	bgt.n	80018ba <__aeabi_dadd+0x20a>
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	4653      	mov	r3, sl
 800196c:	0409      	lsls	r1, r1, #16
 800196e:	430b      	orrs	r3, r1
 8001970:	469a      	mov	sl, r3
 8001972:	e78e      	b.n	8001892 <__aeabi_dadd+0x1e2>
 8001974:	003c      	movs	r4, r7
 8001976:	2500      	movs	r5, #0
 8001978:	2200      	movs	r2, #0
 800197a:	e731      	b.n	80017e0 <__aeabi_dadd+0x130>
 800197c:	2307      	movs	r3, #7
 800197e:	402b      	ands	r3, r5
 8001980:	2b00      	cmp	r3, #0
 8001982:	d000      	beq.n	8001986 <__aeabi_dadd+0x2d6>
 8001984:	e710      	b.n	80017a8 <__aeabi_dadd+0xf8>
 8001986:	e093      	b.n	8001ab0 <__aeabi_dadd+0x400>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d074      	beq.n	8001a76 <__aeabi_dadd+0x3c6>
 800198c:	464a      	mov	r2, r9
 800198e:	1bd2      	subs	r2, r2, r7
 8001990:	2f00      	cmp	r7, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_dadd+0x2e6>
 8001994:	e0c7      	b.n	8001b26 <__aeabi_dadd+0x476>
 8001996:	4928      	ldr	r1, [pc, #160]	@ (8001a38 <__aeabi_dadd+0x388>)
 8001998:	4589      	cmp	r9, r1
 800199a:	d100      	bne.n	800199e <__aeabi_dadd+0x2ee>
 800199c:	e185      	b.n	8001caa <__aeabi_dadd+0x5fa>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dc12      	bgt.n	80019ca <__aeabi_dadd+0x31a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	0409      	lsls	r1, r1, #16
 80019a8:	430c      	orrs	r4, r1
 80019aa:	2a1f      	cmp	r2, #31
 80019ac:	dd00      	ble.n	80019b0 <__aeabi_dadd+0x300>
 80019ae:	e1ab      	b.n	8001d08 <__aeabi_dadd+0x658>
 80019b0:	2120      	movs	r1, #32
 80019b2:	0025      	movs	r5, r4
 80019b4:	1a89      	subs	r1, r1, r2
 80019b6:	0007      	movs	r7, r0
 80019b8:	4088      	lsls	r0, r1
 80019ba:	408d      	lsls	r5, r1
 80019bc:	40d7      	lsrs	r7, r2
 80019be:	1e41      	subs	r1, r0, #1
 80019c0:	4188      	sbcs	r0, r1
 80019c2:	40d4      	lsrs	r4, r2
 80019c4:	433d      	orrs	r5, r7
 80019c6:	4305      	orrs	r5, r0
 80019c8:	44a2      	add	sl, r4
 80019ca:	4465      	add	r5, ip
 80019cc:	4565      	cmp	r5, ip
 80019ce:	4192      	sbcs	r2, r2
 80019d0:	4252      	negs	r2, r2
 80019d2:	4452      	add	r2, sl
 80019d4:	0014      	movs	r4, r2
 80019d6:	464f      	mov	r7, r9
 80019d8:	e774      	b.n	80018c4 <__aeabi_dadd+0x214>
 80019da:	0028      	movs	r0, r5
 80019dc:	f001 fdf0 	bl	80035c0 <__clzsi2>
 80019e0:	0003      	movs	r3, r0
 80019e2:	3318      	adds	r3, #24
 80019e4:	2b1f      	cmp	r3, #31
 80019e6:	dc00      	bgt.n	80019ea <__aeabi_dadd+0x33a>
 80019e8:	e6c2      	b.n	8001770 <__aeabi_dadd+0xc0>
 80019ea:	002a      	movs	r2, r5
 80019ec:	3808      	subs	r0, #8
 80019ee:	4082      	lsls	r2, r0
 80019f0:	429f      	cmp	r7, r3
 80019f2:	dd00      	ble.n	80019f6 <__aeabi_dadd+0x346>
 80019f4:	e0a9      	b.n	8001b4a <__aeabi_dadd+0x49a>
 80019f6:	1bdb      	subs	r3, r3, r7
 80019f8:	1c58      	adds	r0, r3, #1
 80019fa:	281f      	cmp	r0, #31
 80019fc:	dc00      	bgt.n	8001a00 <__aeabi_dadd+0x350>
 80019fe:	e1ac      	b.n	8001d5a <__aeabi_dadd+0x6aa>
 8001a00:	0015      	movs	r5, r2
 8001a02:	3b1f      	subs	r3, #31
 8001a04:	40dd      	lsrs	r5, r3
 8001a06:	2820      	cmp	r0, #32
 8001a08:	d005      	beq.n	8001a16 <__aeabi_dadd+0x366>
 8001a0a:	2340      	movs	r3, #64	@ 0x40
 8001a0c:	1a1b      	subs	r3, r3, r0
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	1e53      	subs	r3, r2, #1
 8001a12:	419a      	sbcs	r2, r3
 8001a14:	4315      	orrs	r5, r2
 8001a16:	2307      	movs	r3, #7
 8001a18:	2700      	movs	r7, #0
 8001a1a:	402b      	ands	r3, r5
 8001a1c:	e7b0      	b.n	8001980 <__aeabi_dadd+0x2d0>
 8001a1e:	08ed      	lsrs	r5, r5, #3
 8001a20:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <__aeabi_dadd+0x388>)
 8001a22:	0762      	lsls	r2, r4, #29
 8001a24:	432a      	orrs	r2, r5
 8001a26:	08e4      	lsrs	r4, r4, #3
 8001a28:	429f      	cmp	r7, r3
 8001a2a:	d00f      	beq.n	8001a4c <__aeabi_dadd+0x39c>
 8001a2c:	0324      	lsls	r4, r4, #12
 8001a2e:	0b25      	lsrs	r5, r4, #12
 8001a30:	057c      	lsls	r4, r7, #21
 8001a32:	0d64      	lsrs	r4, r4, #21
 8001a34:	e6d4      	b.n	80017e0 <__aeabi_dadd+0x130>
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	000007ff 	.word	0x000007ff
 8001a3c:	ff7fffff 	.word	0xff7fffff
 8001a40:	000007fe 	.word	0x000007fe
 8001a44:	08c0      	lsrs	r0, r0, #3
 8001a46:	0762      	lsls	r2, r4, #29
 8001a48:	4302      	orrs	r2, r0
 8001a4a:	08e4      	lsrs	r4, r4, #3
 8001a4c:	0013      	movs	r3, r2
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x3a4>
 8001a52:	e186      	b.n	8001d62 <__aeabi_dadd+0x6b2>
 8001a54:	2580      	movs	r5, #128	@ 0x80
 8001a56:	032d      	lsls	r5, r5, #12
 8001a58:	4325      	orrs	r5, r4
 8001a5a:	032d      	lsls	r5, r5, #12
 8001a5c:	4cc3      	ldr	r4, [pc, #780]	@ (8001d6c <__aeabi_dadd+0x6bc>)
 8001a5e:	0b2d      	lsrs	r5, r5, #12
 8001a60:	e6be      	b.n	80017e0 <__aeabi_dadd+0x130>
 8001a62:	4660      	mov	r0, ip
 8001a64:	4654      	mov	r4, sl
 8001a66:	000e      	movs	r6, r1
 8001a68:	0017      	movs	r7, r2
 8001a6a:	08c5      	lsrs	r5, r0, #3
 8001a6c:	e7d8      	b.n	8001a20 <__aeabi_dadd+0x370>
 8001a6e:	4cc0      	ldr	r4, [pc, #768]	@ (8001d70 <__aeabi_dadd+0x6c0>)
 8001a70:	1aff      	subs	r7, r7, r3
 8001a72:	4014      	ands	r4, r2
 8001a74:	e696      	b.n	80017a4 <__aeabi_dadd+0xf4>
 8001a76:	4abf      	ldr	r2, [pc, #764]	@ (8001d74 <__aeabi_dadd+0x6c4>)
 8001a78:	1c79      	adds	r1, r7, #1
 8001a7a:	4211      	tst	r1, r2
 8001a7c:	d16b      	bne.n	8001b56 <__aeabi_dadd+0x4a6>
 8001a7e:	0022      	movs	r2, r4
 8001a80:	4302      	orrs	r2, r0
 8001a82:	2f00      	cmp	r7, #0
 8001a84:	d000      	beq.n	8001a88 <__aeabi_dadd+0x3d8>
 8001a86:	e0db      	b.n	8001c40 <__aeabi_dadd+0x590>
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dadd+0x3de>
 8001a8c:	e12d      	b.n	8001cea <__aeabi_dadd+0x63a>
 8001a8e:	4662      	mov	r2, ip
 8001a90:	4653      	mov	r3, sl
 8001a92:	431a      	orrs	r2, r3
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dadd+0x3e8>
 8001a96:	e0b6      	b.n	8001c06 <__aeabi_dadd+0x556>
 8001a98:	4663      	mov	r3, ip
 8001a9a:	18c5      	adds	r5, r0, r3
 8001a9c:	4285      	cmp	r5, r0
 8001a9e:	4180      	sbcs	r0, r0
 8001aa0:	4454      	add	r4, sl
 8001aa2:	4240      	negs	r0, r0
 8001aa4:	1824      	adds	r4, r4, r0
 8001aa6:	0223      	lsls	r3, r4, #8
 8001aa8:	d502      	bpl.n	8001ab0 <__aeabi_dadd+0x400>
 8001aaa:	000f      	movs	r7, r1
 8001aac:	4bb0      	ldr	r3, [pc, #704]	@ (8001d70 <__aeabi_dadd+0x6c0>)
 8001aae:	401c      	ands	r4, r3
 8001ab0:	003a      	movs	r2, r7
 8001ab2:	0028      	movs	r0, r5
 8001ab4:	e7d8      	b.n	8001a68 <__aeabi_dadd+0x3b8>
 8001ab6:	4662      	mov	r2, ip
 8001ab8:	1a85      	subs	r5, r0, r2
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	4691      	mov	r9, r2
 8001ac4:	1ae3      	subs	r3, r4, r3
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	464b      	mov	r3, r9
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	4691      	mov	r9, r2
 8001ad0:	021a      	lsls	r2, r3, #8
 8001ad2:	d454      	bmi.n	8001b7e <__aeabi_dadd+0x4ce>
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	464c      	mov	r4, r9
 8001ad8:	432a      	orrs	r2, r5
 8001ada:	d000      	beq.n	8001ade <__aeabi_dadd+0x42e>
 8001adc:	e640      	b.n	8001760 <__aeabi_dadd+0xb0>
 8001ade:	2600      	movs	r6, #0
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	2500      	movs	r5, #0
 8001ae4:	e67c      	b.n	80017e0 <__aeabi_dadd+0x130>
 8001ae6:	4da1      	ldr	r5, [pc, #644]	@ (8001d6c <__aeabi_dadd+0x6bc>)
 8001ae8:	45a9      	cmp	r9, r5
 8001aea:	d100      	bne.n	8001aee <__aeabi_dadd+0x43e>
 8001aec:	e090      	b.n	8001c10 <__aeabi_dadd+0x560>
 8001aee:	2501      	movs	r5, #1
 8001af0:	2a38      	cmp	r2, #56	@ 0x38
 8001af2:	dd00      	ble.n	8001af6 <__aeabi_dadd+0x446>
 8001af4:	e6ab      	b.n	800184e <__aeabi_dadd+0x19e>
 8001af6:	2580      	movs	r5, #128	@ 0x80
 8001af8:	042d      	lsls	r5, r5, #16
 8001afa:	432c      	orrs	r4, r5
 8001afc:	e695      	b.n	800182a <__aeabi_dadd+0x17a>
 8001afe:	0011      	movs	r1, r2
 8001b00:	4655      	mov	r5, sl
 8001b02:	3920      	subs	r1, #32
 8001b04:	40cd      	lsrs	r5, r1
 8001b06:	46a9      	mov	r9, r5
 8001b08:	2a20      	cmp	r2, #32
 8001b0a:	d006      	beq.n	8001b1a <__aeabi_dadd+0x46a>
 8001b0c:	2140      	movs	r1, #64	@ 0x40
 8001b0e:	4653      	mov	r3, sl
 8001b10:	1a8a      	subs	r2, r1, r2
 8001b12:	4093      	lsls	r3, r2
 8001b14:	4662      	mov	r2, ip
 8001b16:	431a      	orrs	r2, r3
 8001b18:	4694      	mov	ip, r2
 8001b1a:	4665      	mov	r5, ip
 8001b1c:	1e6b      	subs	r3, r5, #1
 8001b1e:	419d      	sbcs	r5, r3
 8001b20:	464b      	mov	r3, r9
 8001b22:	431d      	orrs	r5, r3
 8001b24:	e612      	b.n	800174c <__aeabi_dadd+0x9c>
 8001b26:	0021      	movs	r1, r4
 8001b28:	4301      	orrs	r1, r0
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dadd+0x47e>
 8001b2c:	e0c4      	b.n	8001cb8 <__aeabi_dadd+0x608>
 8001b2e:	1e51      	subs	r1, r2, #1
 8001b30:	2a01      	cmp	r2, #1
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dadd+0x486>
 8001b34:	e0fb      	b.n	8001d2e <__aeabi_dadd+0x67e>
 8001b36:	4d8d      	ldr	r5, [pc, #564]	@ (8001d6c <__aeabi_dadd+0x6bc>)
 8001b38:	42aa      	cmp	r2, r5
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dadd+0x48e>
 8001b3c:	e0b5      	b.n	8001caa <__aeabi_dadd+0x5fa>
 8001b3e:	2501      	movs	r5, #1
 8001b40:	2938      	cmp	r1, #56	@ 0x38
 8001b42:	dd00      	ble.n	8001b46 <__aeabi_dadd+0x496>
 8001b44:	e741      	b.n	80019ca <__aeabi_dadd+0x31a>
 8001b46:	000a      	movs	r2, r1
 8001b48:	e72f      	b.n	80019aa <__aeabi_dadd+0x2fa>
 8001b4a:	4c89      	ldr	r4, [pc, #548]	@ (8001d70 <__aeabi_dadd+0x6c0>)
 8001b4c:	1aff      	subs	r7, r7, r3
 8001b4e:	4014      	ands	r4, r2
 8001b50:	0762      	lsls	r2, r4, #29
 8001b52:	08e4      	lsrs	r4, r4, #3
 8001b54:	e76a      	b.n	8001a2c <__aeabi_dadd+0x37c>
 8001b56:	4a85      	ldr	r2, [pc, #532]	@ (8001d6c <__aeabi_dadd+0x6bc>)
 8001b58:	4291      	cmp	r1, r2
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dadd+0x4ae>
 8001b5c:	e0e3      	b.n	8001d26 <__aeabi_dadd+0x676>
 8001b5e:	4663      	mov	r3, ip
 8001b60:	18c2      	adds	r2, r0, r3
 8001b62:	4282      	cmp	r2, r0
 8001b64:	4180      	sbcs	r0, r0
 8001b66:	0023      	movs	r3, r4
 8001b68:	4240      	negs	r0, r0
 8001b6a:	4453      	add	r3, sl
 8001b6c:	181b      	adds	r3, r3, r0
 8001b6e:	07dd      	lsls	r5, r3, #31
 8001b70:	085c      	lsrs	r4, r3, #1
 8001b72:	2307      	movs	r3, #7
 8001b74:	0852      	lsrs	r2, r2, #1
 8001b76:	4315      	orrs	r5, r2
 8001b78:	000f      	movs	r7, r1
 8001b7a:	402b      	ands	r3, r5
 8001b7c:	e700      	b.n	8001980 <__aeabi_dadd+0x2d0>
 8001b7e:	4663      	mov	r3, ip
 8001b80:	1a1d      	subs	r5, r3, r0
 8001b82:	45ac      	cmp	ip, r5
 8001b84:	4192      	sbcs	r2, r2
 8001b86:	4653      	mov	r3, sl
 8001b88:	4252      	negs	r2, r2
 8001b8a:	1b1c      	subs	r4, r3, r4
 8001b8c:	000e      	movs	r6, r1
 8001b8e:	4688      	mov	r8, r1
 8001b90:	1aa4      	subs	r4, r4, r2
 8001b92:	e5e5      	b.n	8001760 <__aeabi_dadd+0xb0>
 8001b94:	2d00      	cmp	r5, #0
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x4ea>
 8001b98:	e091      	b.n	8001cbe <__aeabi_dadd+0x60e>
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d138      	bne.n	8001c10 <__aeabi_dadd+0x560>
 8001b9e:	2480      	movs	r4, #128	@ 0x80
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	0324      	lsls	r4, r4, #12
 8001ba4:	e756      	b.n	8001a54 <__aeabi_dadd+0x3a4>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	18c5      	adds	r5, r0, r3
 8001baa:	4285      	cmp	r5, r0
 8001bac:	4180      	sbcs	r0, r0
 8001bae:	4454      	add	r4, sl
 8001bb0:	4240      	negs	r0, r0
 8001bb2:	1824      	adds	r4, r4, r0
 8001bb4:	2701      	movs	r7, #1
 8001bb6:	0223      	lsls	r3, r4, #8
 8001bb8:	d400      	bmi.n	8001bbc <__aeabi_dadd+0x50c>
 8001bba:	e6df      	b.n	800197c <__aeabi_dadd+0x2cc>
 8001bbc:	2702      	movs	r7, #2
 8001bbe:	e687      	b.n	80018d0 <__aeabi_dadd+0x220>
 8001bc0:	4663      	mov	r3, ip
 8001bc2:	1ac5      	subs	r5, r0, r3
 8001bc4:	42a8      	cmp	r0, r5
 8001bc6:	4180      	sbcs	r0, r0
 8001bc8:	4653      	mov	r3, sl
 8001bca:	4240      	negs	r0, r0
 8001bcc:	1ae4      	subs	r4, r4, r3
 8001bce:	2701      	movs	r7, #1
 8001bd0:	1a24      	subs	r4, r4, r0
 8001bd2:	e5c0      	b.n	8001756 <__aeabi_dadd+0xa6>
 8001bd4:	0762      	lsls	r2, r4, #29
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	08e4      	lsrs	r4, r4, #3
 8001bdc:	e736      	b.n	8001a4c <__aeabi_dadd+0x39c>
 8001bde:	0011      	movs	r1, r2
 8001be0:	4653      	mov	r3, sl
 8001be2:	3920      	subs	r1, #32
 8001be4:	40cb      	lsrs	r3, r1
 8001be6:	4699      	mov	r9, r3
 8001be8:	2a20      	cmp	r2, #32
 8001bea:	d006      	beq.n	8001bfa <__aeabi_dadd+0x54a>
 8001bec:	2140      	movs	r1, #64	@ 0x40
 8001bee:	4653      	mov	r3, sl
 8001bf0:	1a8a      	subs	r2, r1, r2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	4662      	mov	r2, ip
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	4694      	mov	ip, r2
 8001bfa:	4665      	mov	r5, ip
 8001bfc:	1e6b      	subs	r3, r5, #1
 8001bfe:	419d      	sbcs	r5, r3
 8001c00:	464b      	mov	r3, r9
 8001c02:	431d      	orrs	r5, r3
 8001c04:	e659      	b.n	80018ba <__aeabi_dadd+0x20a>
 8001c06:	0762      	lsls	r2, r4, #29
 8001c08:	08c0      	lsrs	r0, r0, #3
 8001c0a:	4302      	orrs	r2, r0
 8001c0c:	08e4      	lsrs	r4, r4, #3
 8001c0e:	e70d      	b.n	8001a2c <__aeabi_dadd+0x37c>
 8001c10:	4653      	mov	r3, sl
 8001c12:	075a      	lsls	r2, r3, #29
 8001c14:	4663      	mov	r3, ip
 8001c16:	08d8      	lsrs	r0, r3, #3
 8001c18:	4653      	mov	r3, sl
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	4302      	orrs	r2, r0
 8001c1e:	08dc      	lsrs	r4, r3, #3
 8001c20:	e714      	b.n	8001a4c <__aeabi_dadd+0x39c>
 8001c22:	0015      	movs	r5, r2
 8001c24:	0026      	movs	r6, r4
 8001c26:	3d20      	subs	r5, #32
 8001c28:	40ee      	lsrs	r6, r5
 8001c2a:	2a20      	cmp	r2, #32
 8001c2c:	d003      	beq.n	8001c36 <__aeabi_dadd+0x586>
 8001c2e:	2540      	movs	r5, #64	@ 0x40
 8001c30:	1aaa      	subs	r2, r5, r2
 8001c32:	4094      	lsls	r4, r2
 8001c34:	4320      	orrs	r0, r4
 8001c36:	1e42      	subs	r2, r0, #1
 8001c38:	4190      	sbcs	r0, r2
 8001c3a:	0005      	movs	r5, r0
 8001c3c:	4335      	orrs	r5, r6
 8001c3e:	e606      	b.n	800184e <__aeabi_dadd+0x19e>
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d07c      	beq.n	8001d3e <__aeabi_dadd+0x68e>
 8001c44:	4662      	mov	r2, ip
 8001c46:	4653      	mov	r3, sl
 8001c48:	08c0      	lsrs	r0, r0, #3
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dadd+0x5a0>
 8001c4e:	e6fa      	b.n	8001a46 <__aeabi_dadd+0x396>
 8001c50:	0762      	lsls	r2, r4, #29
 8001c52:	4310      	orrs	r0, r2
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	08e4      	lsrs	r4, r4, #3
 8001c58:	0312      	lsls	r2, r2, #12
 8001c5a:	4214      	tst	r4, r2
 8001c5c:	d008      	beq.n	8001c70 <__aeabi_dadd+0x5c0>
 8001c5e:	08d9      	lsrs	r1, r3, #3
 8001c60:	4211      	tst	r1, r2
 8001c62:	d105      	bne.n	8001c70 <__aeabi_dadd+0x5c0>
 8001c64:	4663      	mov	r3, ip
 8001c66:	08d8      	lsrs	r0, r3, #3
 8001c68:	4653      	mov	r3, sl
 8001c6a:	000c      	movs	r4, r1
 8001c6c:	075b      	lsls	r3, r3, #29
 8001c6e:	4318      	orrs	r0, r3
 8001c70:	0f42      	lsrs	r2, r0, #29
 8001c72:	00c0      	lsls	r0, r0, #3
 8001c74:	08c0      	lsrs	r0, r0, #3
 8001c76:	0752      	lsls	r2, r2, #29
 8001c78:	4302      	orrs	r2, r0
 8001c7a:	e6e7      	b.n	8001a4c <__aeabi_dadd+0x39c>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dadd+0x5d2>
 8001c80:	e72d      	b.n	8001ade <__aeabi_dadd+0x42e>
 8001c82:	4663      	mov	r3, ip
 8001c84:	08d8      	lsrs	r0, r3, #3
 8001c86:	4653      	mov	r3, sl
 8001c88:	075a      	lsls	r2, r3, #29
 8001c8a:	000e      	movs	r6, r1
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	08dc      	lsrs	r4, r3, #3
 8001c90:	e6cc      	b.n	8001a2c <__aeabi_dadd+0x37c>
 8001c92:	4663      	mov	r3, ip
 8001c94:	1a1d      	subs	r5, r3, r0
 8001c96:	45ac      	cmp	ip, r5
 8001c98:	4192      	sbcs	r2, r2
 8001c9a:	4653      	mov	r3, sl
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	1b1c      	subs	r4, r3, r4
 8001ca0:	000e      	movs	r6, r1
 8001ca2:	4688      	mov	r8, r1
 8001ca4:	1aa4      	subs	r4, r4, r2
 8001ca6:	3701      	adds	r7, #1
 8001ca8:	e555      	b.n	8001756 <__aeabi_dadd+0xa6>
 8001caa:	4663      	mov	r3, ip
 8001cac:	08d9      	lsrs	r1, r3, #3
 8001cae:	4653      	mov	r3, sl
 8001cb0:	075a      	lsls	r2, r3, #29
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	08dc      	lsrs	r4, r3, #3
 8001cb6:	e6c9      	b.n	8001a4c <__aeabi_dadd+0x39c>
 8001cb8:	4660      	mov	r0, ip
 8001cba:	4654      	mov	r4, sl
 8001cbc:	e6d4      	b.n	8001a68 <__aeabi_dadd+0x3b8>
 8001cbe:	08c0      	lsrs	r0, r0, #3
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dadd+0x616>
 8001cc4:	e6bf      	b.n	8001a46 <__aeabi_dadd+0x396>
 8001cc6:	0762      	lsls	r2, r4, #29
 8001cc8:	4310      	orrs	r0, r2
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	08e4      	lsrs	r4, r4, #3
 8001cce:	0312      	lsls	r2, r2, #12
 8001cd0:	4214      	tst	r4, r2
 8001cd2:	d0cd      	beq.n	8001c70 <__aeabi_dadd+0x5c0>
 8001cd4:	08dd      	lsrs	r5, r3, #3
 8001cd6:	4215      	tst	r5, r2
 8001cd8:	d1ca      	bne.n	8001c70 <__aeabi_dadd+0x5c0>
 8001cda:	4663      	mov	r3, ip
 8001cdc:	08d8      	lsrs	r0, r3, #3
 8001cde:	4653      	mov	r3, sl
 8001ce0:	075b      	lsls	r3, r3, #29
 8001ce2:	000e      	movs	r6, r1
 8001ce4:	002c      	movs	r4, r5
 8001ce6:	4318      	orrs	r0, r3
 8001ce8:	e7c2      	b.n	8001c70 <__aeabi_dadd+0x5c0>
 8001cea:	4663      	mov	r3, ip
 8001cec:	08d9      	lsrs	r1, r3, #3
 8001cee:	4653      	mov	r3, sl
 8001cf0:	075a      	lsls	r2, r3, #29
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	08dc      	lsrs	r4, r3, #3
 8001cf6:	e699      	b.n	8001a2c <__aeabi_dadd+0x37c>
 8001cf8:	4663      	mov	r3, ip
 8001cfa:	08d8      	lsrs	r0, r3, #3
 8001cfc:	4653      	mov	r3, sl
 8001cfe:	075a      	lsls	r2, r3, #29
 8001d00:	000e      	movs	r6, r1
 8001d02:	4302      	orrs	r2, r0
 8001d04:	08dc      	lsrs	r4, r3, #3
 8001d06:	e6a1      	b.n	8001a4c <__aeabi_dadd+0x39c>
 8001d08:	0011      	movs	r1, r2
 8001d0a:	0027      	movs	r7, r4
 8001d0c:	3920      	subs	r1, #32
 8001d0e:	40cf      	lsrs	r7, r1
 8001d10:	2a20      	cmp	r2, #32
 8001d12:	d003      	beq.n	8001d1c <__aeabi_dadd+0x66c>
 8001d14:	2140      	movs	r1, #64	@ 0x40
 8001d16:	1a8a      	subs	r2, r1, r2
 8001d18:	4094      	lsls	r4, r2
 8001d1a:	4320      	orrs	r0, r4
 8001d1c:	1e42      	subs	r2, r0, #1
 8001d1e:	4190      	sbcs	r0, r2
 8001d20:	0005      	movs	r5, r0
 8001d22:	433d      	orrs	r5, r7
 8001d24:	e651      	b.n	80019ca <__aeabi_dadd+0x31a>
 8001d26:	000c      	movs	r4, r1
 8001d28:	2500      	movs	r5, #0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	e558      	b.n	80017e0 <__aeabi_dadd+0x130>
 8001d2e:	4460      	add	r0, ip
 8001d30:	4560      	cmp	r0, ip
 8001d32:	4192      	sbcs	r2, r2
 8001d34:	4454      	add	r4, sl
 8001d36:	4252      	negs	r2, r2
 8001d38:	0005      	movs	r5, r0
 8001d3a:	18a4      	adds	r4, r4, r2
 8001d3c:	e73a      	b.n	8001bb4 <__aeabi_dadd+0x504>
 8001d3e:	4653      	mov	r3, sl
 8001d40:	075a      	lsls	r2, r3, #29
 8001d42:	4663      	mov	r3, ip
 8001d44:	08d9      	lsrs	r1, r3, #3
 8001d46:	4653      	mov	r3, sl
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	08dc      	lsrs	r4, r3, #3
 8001d4c:	e67e      	b.n	8001a4c <__aeabi_dadd+0x39c>
 8001d4e:	001a      	movs	r2, r3
 8001d50:	001c      	movs	r4, r3
 8001d52:	432a      	orrs	r2, r5
 8001d54:	d000      	beq.n	8001d58 <__aeabi_dadd+0x6a8>
 8001d56:	e6ab      	b.n	8001ab0 <__aeabi_dadd+0x400>
 8001d58:	e6c1      	b.n	8001ade <__aeabi_dadd+0x42e>
 8001d5a:	2120      	movs	r1, #32
 8001d5c:	2500      	movs	r5, #0
 8001d5e:	1a09      	subs	r1, r1, r0
 8001d60:	e519      	b.n	8001796 <__aeabi_dadd+0xe6>
 8001d62:	2200      	movs	r2, #0
 8001d64:	2500      	movs	r5, #0
 8001d66:	4c01      	ldr	r4, [pc, #4]	@ (8001d6c <__aeabi_dadd+0x6bc>)
 8001d68:	e53a      	b.n	80017e0 <__aeabi_dadd+0x130>
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	000007ff 	.word	0x000007ff
 8001d70:	ff7fffff 	.word	0xff7fffff
 8001d74:	000007fe 	.word	0x000007fe

08001d78 <__aeabi_ddiv>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	46de      	mov	lr, fp
 8001d7c:	4645      	mov	r5, r8
 8001d7e:	4657      	mov	r7, sl
 8001d80:	464e      	mov	r6, r9
 8001d82:	b5e0      	push	{r5, r6, r7, lr}
 8001d84:	b087      	sub	sp, #28
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	030b      	lsls	r3, r1, #12
 8001d8c:	0b1b      	lsrs	r3, r3, #12
 8001d8e:	469b      	mov	fp, r3
 8001d90:	0fca      	lsrs	r2, r1, #31
 8001d92:	004b      	lsls	r3, r1, #1
 8001d94:	0004      	movs	r4, r0
 8001d96:	4680      	mov	r8, r0
 8001d98:	0d5b      	lsrs	r3, r3, #21
 8001d9a:	9202      	str	r2, [sp, #8]
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_ddiv+0x28>
 8001d9e:	e16a      	b.n	8002076 <__aeabi_ddiv+0x2fe>
 8001da0:	4ad4      	ldr	r2, [pc, #848]	@ (80020f4 <__aeabi_ddiv+0x37c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d100      	bne.n	8001da8 <__aeabi_ddiv+0x30>
 8001da6:	e18c      	b.n	80020c2 <__aeabi_ddiv+0x34a>
 8001da8:	4659      	mov	r1, fp
 8001daa:	0f42      	lsrs	r2, r0, #29
 8001dac:	00c9      	lsls	r1, r1, #3
 8001dae:	430a      	orrs	r2, r1
 8001db0:	2180      	movs	r1, #128	@ 0x80
 8001db2:	0409      	lsls	r1, r1, #16
 8001db4:	4311      	orrs	r1, r2
 8001db6:	00c2      	lsls	r2, r0, #3
 8001db8:	4690      	mov	r8, r2
 8001dba:	4acf      	ldr	r2, [pc, #828]	@ (80020f8 <__aeabi_ddiv+0x380>)
 8001dbc:	4689      	mov	r9, r1
 8001dbe:	4692      	mov	sl, r2
 8001dc0:	449a      	add	sl, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2400      	movs	r4, #0
 8001dc6:	9303      	str	r3, [sp, #12]
 8001dc8:	9e00      	ldr	r6, [sp, #0]
 8001dca:	9f01      	ldr	r7, [sp, #4]
 8001dcc:	033b      	lsls	r3, r7, #12
 8001dce:	0b1b      	lsrs	r3, r3, #12
 8001dd0:	469b      	mov	fp, r3
 8001dd2:	007b      	lsls	r3, r7, #1
 8001dd4:	0030      	movs	r0, r6
 8001dd6:	0d5b      	lsrs	r3, r3, #21
 8001dd8:	0ffd      	lsrs	r5, r7, #31
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_ddiv+0x68>
 8001dde:	e128      	b.n	8002032 <__aeabi_ddiv+0x2ba>
 8001de0:	4ac4      	ldr	r2, [pc, #784]	@ (80020f4 <__aeabi_ddiv+0x37c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d100      	bne.n	8001de8 <__aeabi_ddiv+0x70>
 8001de6:	e177      	b.n	80020d8 <__aeabi_ddiv+0x360>
 8001de8:	4659      	mov	r1, fp
 8001dea:	0f72      	lsrs	r2, r6, #29
 8001dec:	00c9      	lsls	r1, r1, #3
 8001dee:	430a      	orrs	r2, r1
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	0409      	lsls	r1, r1, #16
 8001df4:	4311      	orrs	r1, r2
 8001df6:	468b      	mov	fp, r1
 8001df8:	49bf      	ldr	r1, [pc, #764]	@ (80020f8 <__aeabi_ddiv+0x380>)
 8001dfa:	00f2      	lsls	r2, r6, #3
 8001dfc:	468c      	mov	ip, r1
 8001dfe:	4651      	mov	r1, sl
 8001e00:	4463      	add	r3, ip
 8001e02:	1acb      	subs	r3, r1, r3
 8001e04:	469a      	mov	sl, r3
 8001e06:	2300      	movs	r3, #0
 8001e08:	9e02      	ldr	r6, [sp, #8]
 8001e0a:	406e      	eors	r6, r5
 8001e0c:	2c0f      	cmp	r4, #15
 8001e0e:	d827      	bhi.n	8001e60 <__aeabi_ddiv+0xe8>
 8001e10:	49ba      	ldr	r1, [pc, #744]	@ (80020fc <__aeabi_ddiv+0x384>)
 8001e12:	00a4      	lsls	r4, r4, #2
 8001e14:	5909      	ldr	r1, [r1, r4]
 8001e16:	468f      	mov	pc, r1
 8001e18:	46cb      	mov	fp, r9
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	9e02      	ldr	r6, [sp, #8]
 8001e1e:	9b03      	ldr	r3, [sp, #12]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d016      	beq.n	8001e52 <__aeabi_ddiv+0xda>
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d100      	bne.n	8001e2a <__aeabi_ddiv+0xb2>
 8001e28:	e2a6      	b.n	8002378 <__aeabi_ddiv+0x600>
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_ddiv+0xb8>
 8001e2e:	e0df      	b.n	8001ff0 <__aeabi_ddiv+0x278>
 8001e30:	2200      	movs	r2, #0
 8001e32:	2300      	movs	r3, #0
 8001e34:	2400      	movs	r4, #0
 8001e36:	4690      	mov	r8, r2
 8001e38:	051b      	lsls	r3, r3, #20
 8001e3a:	4323      	orrs	r3, r4
 8001e3c:	07f6      	lsls	r6, r6, #31
 8001e3e:	4333      	orrs	r3, r6
 8001e40:	4640      	mov	r0, r8
 8001e42:	0019      	movs	r1, r3
 8001e44:	b007      	add	sp, #28
 8001e46:	bcf0      	pop	{r4, r5, r6, r7}
 8001e48:	46bb      	mov	fp, r7
 8001e4a:	46b2      	mov	sl, r6
 8001e4c:	46a9      	mov	r9, r5
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e52:	2200      	movs	r2, #0
 8001e54:	2400      	movs	r4, #0
 8001e56:	4690      	mov	r8, r2
 8001e58:	4ba6      	ldr	r3, [pc, #664]	@ (80020f4 <__aeabi_ddiv+0x37c>)
 8001e5a:	e7ed      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 8001e5c:	002e      	movs	r6, r5
 8001e5e:	e7df      	b.n	8001e20 <__aeabi_ddiv+0xa8>
 8001e60:	45cb      	cmp	fp, r9
 8001e62:	d200      	bcs.n	8001e66 <__aeabi_ddiv+0xee>
 8001e64:	e1d4      	b.n	8002210 <__aeabi_ddiv+0x498>
 8001e66:	d100      	bne.n	8001e6a <__aeabi_ddiv+0xf2>
 8001e68:	e1cf      	b.n	800220a <__aeabi_ddiv+0x492>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	469c      	mov	ip, r3
 8001e70:	4644      	mov	r4, r8
 8001e72:	4648      	mov	r0, r9
 8001e74:	2700      	movs	r7, #0
 8001e76:	44e2      	add	sl, ip
 8001e78:	465b      	mov	r3, fp
 8001e7a:	0e15      	lsrs	r5, r2, #24
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	431d      	orrs	r5, r3
 8001e80:	0c19      	lsrs	r1, r3, #16
 8001e82:	042b      	lsls	r3, r5, #16
 8001e84:	0212      	lsls	r2, r2, #8
 8001e86:	9500      	str	r5, [sp, #0]
 8001e88:	0c1d      	lsrs	r5, r3, #16
 8001e8a:	4691      	mov	r9, r2
 8001e8c:	9102      	str	r1, [sp, #8]
 8001e8e:	9503      	str	r5, [sp, #12]
 8001e90:	f7fe f9e6 	bl	8000260 <__aeabi_uidivmod>
 8001e94:	0002      	movs	r2, r0
 8001e96:	436a      	muls	r2, r5
 8001e98:	040b      	lsls	r3, r1, #16
 8001e9a:	0c21      	lsrs	r1, r4, #16
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	4319      	orrs	r1, r3
 8001ea0:	428a      	cmp	r2, r1
 8001ea2:	d909      	bls.n	8001eb8 <__aeabi_ddiv+0x140>
 8001ea4:	9d00      	ldr	r5, [sp, #0]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	46ac      	mov	ip, r5
 8001eaa:	425b      	negs	r3, r3
 8001eac:	4461      	add	r1, ip
 8001eae:	469c      	mov	ip, r3
 8001eb0:	44e0      	add	r8, ip
 8001eb2:	428d      	cmp	r5, r1
 8001eb4:	d800      	bhi.n	8001eb8 <__aeabi_ddiv+0x140>
 8001eb6:	e1fb      	b.n	80022b0 <__aeabi_ddiv+0x538>
 8001eb8:	1a88      	subs	r0, r1, r2
 8001eba:	9902      	ldr	r1, [sp, #8]
 8001ebc:	f7fe f9d0 	bl	8000260 <__aeabi_uidivmod>
 8001ec0:	9a03      	ldr	r2, [sp, #12]
 8001ec2:	0424      	lsls	r4, r4, #16
 8001ec4:	4342      	muls	r2, r0
 8001ec6:	0409      	lsls	r1, r1, #16
 8001ec8:	0c24      	lsrs	r4, r4, #16
 8001eca:	0003      	movs	r3, r0
 8001ecc:	430c      	orrs	r4, r1
 8001ece:	42a2      	cmp	r2, r4
 8001ed0:	d906      	bls.n	8001ee0 <__aeabi_ddiv+0x168>
 8001ed2:	9900      	ldr	r1, [sp, #0]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	468c      	mov	ip, r1
 8001ed8:	4464      	add	r4, ip
 8001eda:	42a1      	cmp	r1, r4
 8001edc:	d800      	bhi.n	8001ee0 <__aeabi_ddiv+0x168>
 8001ede:	e1e1      	b.n	80022a4 <__aeabi_ddiv+0x52c>
 8001ee0:	1aa0      	subs	r0, r4, r2
 8001ee2:	4642      	mov	r2, r8
 8001ee4:	0412      	lsls	r2, r2, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	4693      	mov	fp, r2
 8001eea:	464b      	mov	r3, r9
 8001eec:	4659      	mov	r1, fp
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	001d      	movs	r5, r3
 8001ef2:	9304      	str	r3, [sp, #16]
 8001ef4:	040b      	lsls	r3, r1, #16
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	0409      	lsls	r1, r1, #16
 8001efa:	0c09      	lsrs	r1, r1, #16
 8001efc:	000c      	movs	r4, r1
 8001efe:	0c1b      	lsrs	r3, r3, #16
 8001f00:	435c      	muls	r4, r3
 8001f02:	0c12      	lsrs	r2, r2, #16
 8001f04:	436b      	muls	r3, r5
 8001f06:	4688      	mov	r8, r1
 8001f08:	4351      	muls	r1, r2
 8001f0a:	436a      	muls	r2, r5
 8001f0c:	0c25      	lsrs	r5, r4, #16
 8001f0e:	46ac      	mov	ip, r5
 8001f10:	185b      	adds	r3, r3, r1
 8001f12:	4463      	add	r3, ip
 8001f14:	4299      	cmp	r1, r3
 8001f16:	d903      	bls.n	8001f20 <__aeabi_ddiv+0x1a8>
 8001f18:	2180      	movs	r1, #128	@ 0x80
 8001f1a:	0249      	lsls	r1, r1, #9
 8001f1c:	468c      	mov	ip, r1
 8001f1e:	4462      	add	r2, ip
 8001f20:	0c19      	lsrs	r1, r3, #16
 8001f22:	0424      	lsls	r4, r4, #16
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	0c24      	lsrs	r4, r4, #16
 8001f28:	188a      	adds	r2, r1, r2
 8001f2a:	191c      	adds	r4, r3, r4
 8001f2c:	4290      	cmp	r0, r2
 8001f2e:	d302      	bcc.n	8001f36 <__aeabi_ddiv+0x1be>
 8001f30:	d116      	bne.n	8001f60 <__aeabi_ddiv+0x1e8>
 8001f32:	42a7      	cmp	r7, r4
 8001f34:	d214      	bcs.n	8001f60 <__aeabi_ddiv+0x1e8>
 8001f36:	465b      	mov	r3, fp
 8001f38:	9d00      	ldr	r5, [sp, #0]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	444f      	add	r7, r9
 8001f3e:	9305      	str	r3, [sp, #20]
 8001f40:	454f      	cmp	r7, r9
 8001f42:	419b      	sbcs	r3, r3
 8001f44:	46ac      	mov	ip, r5
 8001f46:	425b      	negs	r3, r3
 8001f48:	4463      	add	r3, ip
 8001f4a:	18c0      	adds	r0, r0, r3
 8001f4c:	4285      	cmp	r5, r0
 8001f4e:	d300      	bcc.n	8001f52 <__aeabi_ddiv+0x1da>
 8001f50:	e1a1      	b.n	8002296 <__aeabi_ddiv+0x51e>
 8001f52:	4282      	cmp	r2, r0
 8001f54:	d900      	bls.n	8001f58 <__aeabi_ddiv+0x1e0>
 8001f56:	e1f6      	b.n	8002346 <__aeabi_ddiv+0x5ce>
 8001f58:	d100      	bne.n	8001f5c <__aeabi_ddiv+0x1e4>
 8001f5a:	e1f1      	b.n	8002340 <__aeabi_ddiv+0x5c8>
 8001f5c:	9b05      	ldr	r3, [sp, #20]
 8001f5e:	469b      	mov	fp, r3
 8001f60:	1b3c      	subs	r4, r7, r4
 8001f62:	42a7      	cmp	r7, r4
 8001f64:	41bf      	sbcs	r7, r7
 8001f66:	9d00      	ldr	r5, [sp, #0]
 8001f68:	1a80      	subs	r0, r0, r2
 8001f6a:	427f      	negs	r7, r7
 8001f6c:	1bc0      	subs	r0, r0, r7
 8001f6e:	4285      	cmp	r5, r0
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x1fc>
 8001f72:	e1d0      	b.n	8002316 <__aeabi_ddiv+0x59e>
 8001f74:	9902      	ldr	r1, [sp, #8]
 8001f76:	f7fe f973 	bl	8000260 <__aeabi_uidivmod>
 8001f7a:	9a03      	ldr	r2, [sp, #12]
 8001f7c:	040b      	lsls	r3, r1, #16
 8001f7e:	4342      	muls	r2, r0
 8001f80:	0c21      	lsrs	r1, r4, #16
 8001f82:	0007      	movs	r7, r0
 8001f84:	4319      	orrs	r1, r3
 8001f86:	428a      	cmp	r2, r1
 8001f88:	d900      	bls.n	8001f8c <__aeabi_ddiv+0x214>
 8001f8a:	e178      	b.n	800227e <__aeabi_ddiv+0x506>
 8001f8c:	1a88      	subs	r0, r1, r2
 8001f8e:	9902      	ldr	r1, [sp, #8]
 8001f90:	f7fe f966 	bl	8000260 <__aeabi_uidivmod>
 8001f94:	9a03      	ldr	r2, [sp, #12]
 8001f96:	0424      	lsls	r4, r4, #16
 8001f98:	4342      	muls	r2, r0
 8001f9a:	0409      	lsls	r1, r1, #16
 8001f9c:	0c24      	lsrs	r4, r4, #16
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	430c      	orrs	r4, r1
 8001fa2:	42a2      	cmp	r2, r4
 8001fa4:	d900      	bls.n	8001fa8 <__aeabi_ddiv+0x230>
 8001fa6:	e15d      	b.n	8002264 <__aeabi_ddiv+0x4ec>
 8001fa8:	4641      	mov	r1, r8
 8001faa:	1aa4      	subs	r4, r4, r2
 8001fac:	043a      	lsls	r2, r7, #16
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	9d04      	ldr	r5, [sp, #16]
 8001fb2:	0413      	lsls	r3, r2, #16
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	4359      	muls	r1, r3
 8001fb8:	4647      	mov	r7, r8
 8001fba:	436b      	muls	r3, r5
 8001fbc:	469c      	mov	ip, r3
 8001fbe:	0c10      	lsrs	r0, r2, #16
 8001fc0:	4347      	muls	r7, r0
 8001fc2:	0c0b      	lsrs	r3, r1, #16
 8001fc4:	44bc      	add	ip, r7
 8001fc6:	4463      	add	r3, ip
 8001fc8:	4368      	muls	r0, r5
 8001fca:	429f      	cmp	r7, r3
 8001fcc:	d903      	bls.n	8001fd6 <__aeabi_ddiv+0x25e>
 8001fce:	2580      	movs	r5, #128	@ 0x80
 8001fd0:	026d      	lsls	r5, r5, #9
 8001fd2:	46ac      	mov	ip, r5
 8001fd4:	4460      	add	r0, ip
 8001fd6:	0c1f      	lsrs	r7, r3, #16
 8001fd8:	0409      	lsls	r1, r1, #16
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	0c09      	lsrs	r1, r1, #16
 8001fde:	183f      	adds	r7, r7, r0
 8001fe0:	185b      	adds	r3, r3, r1
 8001fe2:	42bc      	cmp	r4, r7
 8001fe4:	d200      	bcs.n	8001fe8 <__aeabi_ddiv+0x270>
 8001fe6:	e102      	b.n	80021ee <__aeabi_ddiv+0x476>
 8001fe8:	d100      	bne.n	8001fec <__aeabi_ddiv+0x274>
 8001fea:	e0fd      	b.n	80021e8 <__aeabi_ddiv+0x470>
 8001fec:	2301      	movs	r3, #1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <__aeabi_ddiv+0x388>)
 8001ff2:	4453      	add	r3, sl
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dc00      	bgt.n	8001ffa <__aeabi_ddiv+0x282>
 8001ff8:	e0ae      	b.n	8002158 <__aeabi_ddiv+0x3e0>
 8001ffa:	0751      	lsls	r1, r2, #29
 8001ffc:	d000      	beq.n	8002000 <__aeabi_ddiv+0x288>
 8001ffe:	e198      	b.n	8002332 <__aeabi_ddiv+0x5ba>
 8002000:	4659      	mov	r1, fp
 8002002:	01c9      	lsls	r1, r1, #7
 8002004:	d506      	bpl.n	8002014 <__aeabi_ddiv+0x29c>
 8002006:	4659      	mov	r1, fp
 8002008:	4b3e      	ldr	r3, [pc, #248]	@ (8002104 <__aeabi_ddiv+0x38c>)
 800200a:	4019      	ands	r1, r3
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	468b      	mov	fp, r1
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4453      	add	r3, sl
 8002014:	493c      	ldr	r1, [pc, #240]	@ (8002108 <__aeabi_ddiv+0x390>)
 8002016:	428b      	cmp	r3, r1
 8002018:	dd00      	ble.n	800201c <__aeabi_ddiv+0x2a4>
 800201a:	e71a      	b.n	8001e52 <__aeabi_ddiv+0xda>
 800201c:	4659      	mov	r1, fp
 800201e:	08d2      	lsrs	r2, r2, #3
 8002020:	0749      	lsls	r1, r1, #29
 8002022:	4311      	orrs	r1, r2
 8002024:	465a      	mov	r2, fp
 8002026:	055b      	lsls	r3, r3, #21
 8002028:	0254      	lsls	r4, r2, #9
 800202a:	4688      	mov	r8, r1
 800202c:	0b24      	lsrs	r4, r4, #12
 800202e:	0d5b      	lsrs	r3, r3, #21
 8002030:	e702      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 8002032:	465a      	mov	r2, fp
 8002034:	9b00      	ldr	r3, [sp, #0]
 8002036:	431a      	orrs	r2, r3
 8002038:	d100      	bne.n	800203c <__aeabi_ddiv+0x2c4>
 800203a:	e07e      	b.n	800213a <__aeabi_ddiv+0x3c2>
 800203c:	465b      	mov	r3, fp
 800203e:	2b00      	cmp	r3, #0
 8002040:	d100      	bne.n	8002044 <__aeabi_ddiv+0x2cc>
 8002042:	e100      	b.n	8002246 <__aeabi_ddiv+0x4ce>
 8002044:	4658      	mov	r0, fp
 8002046:	f001 fabb 	bl	80035c0 <__clzsi2>
 800204a:	0002      	movs	r2, r0
 800204c:	0003      	movs	r3, r0
 800204e:	3a0b      	subs	r2, #11
 8002050:	271d      	movs	r7, #29
 8002052:	9e00      	ldr	r6, [sp, #0]
 8002054:	1aba      	subs	r2, r7, r2
 8002056:	0019      	movs	r1, r3
 8002058:	4658      	mov	r0, fp
 800205a:	40d6      	lsrs	r6, r2
 800205c:	3908      	subs	r1, #8
 800205e:	4088      	lsls	r0, r1
 8002060:	0032      	movs	r2, r6
 8002062:	4302      	orrs	r2, r0
 8002064:	4693      	mov	fp, r2
 8002066:	9a00      	ldr	r2, [sp, #0]
 8002068:	408a      	lsls	r2, r1
 800206a:	4928      	ldr	r1, [pc, #160]	@ (800210c <__aeabi_ddiv+0x394>)
 800206c:	4453      	add	r3, sl
 800206e:	468a      	mov	sl, r1
 8002070:	449a      	add	sl, r3
 8002072:	2300      	movs	r3, #0
 8002074:	e6c8      	b.n	8001e08 <__aeabi_ddiv+0x90>
 8002076:	465b      	mov	r3, fp
 8002078:	4303      	orrs	r3, r0
 800207a:	4699      	mov	r9, r3
 800207c:	d056      	beq.n	800212c <__aeabi_ddiv+0x3b4>
 800207e:	465b      	mov	r3, fp
 8002080:	2b00      	cmp	r3, #0
 8002082:	d100      	bne.n	8002086 <__aeabi_ddiv+0x30e>
 8002084:	e0cd      	b.n	8002222 <__aeabi_ddiv+0x4aa>
 8002086:	4658      	mov	r0, fp
 8002088:	f001 fa9a 	bl	80035c0 <__clzsi2>
 800208c:	230b      	movs	r3, #11
 800208e:	425b      	negs	r3, r3
 8002090:	469c      	mov	ip, r3
 8002092:	0002      	movs	r2, r0
 8002094:	4484      	add	ip, r0
 8002096:	4666      	mov	r6, ip
 8002098:	231d      	movs	r3, #29
 800209a:	1b9b      	subs	r3, r3, r6
 800209c:	0026      	movs	r6, r4
 800209e:	0011      	movs	r1, r2
 80020a0:	4658      	mov	r0, fp
 80020a2:	40de      	lsrs	r6, r3
 80020a4:	3908      	subs	r1, #8
 80020a6:	4088      	lsls	r0, r1
 80020a8:	0033      	movs	r3, r6
 80020aa:	4303      	orrs	r3, r0
 80020ac:	4699      	mov	r9, r3
 80020ae:	0023      	movs	r3, r4
 80020b0:	408b      	lsls	r3, r1
 80020b2:	4698      	mov	r8, r3
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <__aeabi_ddiv+0x398>)
 80020b6:	2400      	movs	r4, #0
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	469a      	mov	sl, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	9303      	str	r3, [sp, #12]
 80020c0:	e682      	b.n	8001dc8 <__aeabi_ddiv+0x50>
 80020c2:	465a      	mov	r2, fp
 80020c4:	4302      	orrs	r2, r0
 80020c6:	4691      	mov	r9, r2
 80020c8:	d12a      	bne.n	8002120 <__aeabi_ddiv+0x3a8>
 80020ca:	2200      	movs	r2, #0
 80020cc:	469a      	mov	sl, r3
 80020ce:	2302      	movs	r3, #2
 80020d0:	4690      	mov	r8, r2
 80020d2:	2408      	movs	r4, #8
 80020d4:	9303      	str	r3, [sp, #12]
 80020d6:	e677      	b.n	8001dc8 <__aeabi_ddiv+0x50>
 80020d8:	465a      	mov	r2, fp
 80020da:	9b00      	ldr	r3, [sp, #0]
 80020dc:	431a      	orrs	r2, r3
 80020de:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <__aeabi_ddiv+0x39c>)
 80020e0:	469c      	mov	ip, r3
 80020e2:	44e2      	add	sl, ip
 80020e4:	2a00      	cmp	r2, #0
 80020e6:	d117      	bne.n	8002118 <__aeabi_ddiv+0x3a0>
 80020e8:	2302      	movs	r3, #2
 80020ea:	431c      	orrs	r4, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	469b      	mov	fp, r3
 80020f0:	3302      	adds	r3, #2
 80020f2:	e689      	b.n	8001e08 <__aeabi_ddiv+0x90>
 80020f4:	000007ff 	.word	0x000007ff
 80020f8:	fffffc01 	.word	0xfffffc01
 80020fc:	08011d2c 	.word	0x08011d2c
 8002100:	000003ff 	.word	0x000003ff
 8002104:	feffffff 	.word	0xfeffffff
 8002108:	000007fe 	.word	0x000007fe
 800210c:	000003f3 	.word	0x000003f3
 8002110:	fffffc0d 	.word	0xfffffc0d
 8002114:	fffff801 	.word	0xfffff801
 8002118:	2303      	movs	r3, #3
 800211a:	0032      	movs	r2, r6
 800211c:	431c      	orrs	r4, r3
 800211e:	e673      	b.n	8001e08 <__aeabi_ddiv+0x90>
 8002120:	469a      	mov	sl, r3
 8002122:	2303      	movs	r3, #3
 8002124:	46d9      	mov	r9, fp
 8002126:	240c      	movs	r4, #12
 8002128:	9303      	str	r3, [sp, #12]
 800212a:	e64d      	b.n	8001dc8 <__aeabi_ddiv+0x50>
 800212c:	2300      	movs	r3, #0
 800212e:	4698      	mov	r8, r3
 8002130:	469a      	mov	sl, r3
 8002132:	3301      	adds	r3, #1
 8002134:	2404      	movs	r4, #4
 8002136:	9303      	str	r3, [sp, #12]
 8002138:	e646      	b.n	8001dc8 <__aeabi_ddiv+0x50>
 800213a:	2301      	movs	r3, #1
 800213c:	431c      	orrs	r4, r3
 800213e:	2300      	movs	r3, #0
 8002140:	469b      	mov	fp, r3
 8002142:	3301      	adds	r3, #1
 8002144:	e660      	b.n	8001e08 <__aeabi_ddiv+0x90>
 8002146:	2300      	movs	r3, #0
 8002148:	2480      	movs	r4, #128	@ 0x80
 800214a:	4698      	mov	r8, r3
 800214c:	2600      	movs	r6, #0
 800214e:	4b92      	ldr	r3, [pc, #584]	@ (8002398 <__aeabi_ddiv+0x620>)
 8002150:	0324      	lsls	r4, r4, #12
 8002152:	e671      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 8002154:	2201      	movs	r2, #1
 8002156:	4252      	negs	r2, r2
 8002158:	2101      	movs	r1, #1
 800215a:	1ac9      	subs	r1, r1, r3
 800215c:	2938      	cmp	r1, #56	@ 0x38
 800215e:	dd00      	ble.n	8002162 <__aeabi_ddiv+0x3ea>
 8002160:	e666      	b.n	8001e30 <__aeabi_ddiv+0xb8>
 8002162:	291f      	cmp	r1, #31
 8002164:	dc00      	bgt.n	8002168 <__aeabi_ddiv+0x3f0>
 8002166:	e0ab      	b.n	80022c0 <__aeabi_ddiv+0x548>
 8002168:	201f      	movs	r0, #31
 800216a:	4240      	negs	r0, r0
 800216c:	1ac3      	subs	r3, r0, r3
 800216e:	4658      	mov	r0, fp
 8002170:	40d8      	lsrs	r0, r3
 8002172:	0003      	movs	r3, r0
 8002174:	2920      	cmp	r1, #32
 8002176:	d004      	beq.n	8002182 <__aeabi_ddiv+0x40a>
 8002178:	4658      	mov	r0, fp
 800217a:	4988      	ldr	r1, [pc, #544]	@ (800239c <__aeabi_ddiv+0x624>)
 800217c:	4451      	add	r1, sl
 800217e:	4088      	lsls	r0, r1
 8002180:	4302      	orrs	r2, r0
 8002182:	1e51      	subs	r1, r2, #1
 8002184:	418a      	sbcs	r2, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	2307      	movs	r3, #7
 800218a:	0019      	movs	r1, r3
 800218c:	2400      	movs	r4, #0
 800218e:	4011      	ands	r1, r2
 8002190:	4213      	tst	r3, r2
 8002192:	d00c      	beq.n	80021ae <__aeabi_ddiv+0x436>
 8002194:	230f      	movs	r3, #15
 8002196:	4013      	ands	r3, r2
 8002198:	2b04      	cmp	r3, #4
 800219a:	d100      	bne.n	800219e <__aeabi_ddiv+0x426>
 800219c:	e0f9      	b.n	8002392 <__aeabi_ddiv+0x61a>
 800219e:	1d11      	adds	r1, r2, #4
 80021a0:	4291      	cmp	r1, r2
 80021a2:	419b      	sbcs	r3, r3
 80021a4:	000a      	movs	r2, r1
 80021a6:	425b      	negs	r3, r3
 80021a8:	0759      	lsls	r1, r3, #29
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	0b1c      	lsrs	r4, r3, #12
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	430a      	orrs	r2, r1
 80021b2:	4690      	mov	r8, r2
 80021b4:	2300      	movs	r3, #0
 80021b6:	e63f      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 80021b8:	2480      	movs	r4, #128	@ 0x80
 80021ba:	464b      	mov	r3, r9
 80021bc:	0324      	lsls	r4, r4, #12
 80021be:	4223      	tst	r3, r4
 80021c0:	d009      	beq.n	80021d6 <__aeabi_ddiv+0x45e>
 80021c2:	465b      	mov	r3, fp
 80021c4:	4223      	tst	r3, r4
 80021c6:	d106      	bne.n	80021d6 <__aeabi_ddiv+0x45e>
 80021c8:	431c      	orrs	r4, r3
 80021ca:	0324      	lsls	r4, r4, #12
 80021cc:	002e      	movs	r6, r5
 80021ce:	4690      	mov	r8, r2
 80021d0:	4b71      	ldr	r3, [pc, #452]	@ (8002398 <__aeabi_ddiv+0x620>)
 80021d2:	0b24      	lsrs	r4, r4, #12
 80021d4:	e630      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 80021d6:	2480      	movs	r4, #128	@ 0x80
 80021d8:	464b      	mov	r3, r9
 80021da:	0324      	lsls	r4, r4, #12
 80021dc:	431c      	orrs	r4, r3
 80021de:	0324      	lsls	r4, r4, #12
 80021e0:	9e02      	ldr	r6, [sp, #8]
 80021e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002398 <__aeabi_ddiv+0x620>)
 80021e4:	0b24      	lsrs	r4, r4, #12
 80021e6:	e627      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_ddiv+0x476>
 80021ec:	e700      	b.n	8001ff0 <__aeabi_ddiv+0x278>
 80021ee:	9800      	ldr	r0, [sp, #0]
 80021f0:	1e51      	subs	r1, r2, #1
 80021f2:	4684      	mov	ip, r0
 80021f4:	4464      	add	r4, ip
 80021f6:	4284      	cmp	r4, r0
 80021f8:	d200      	bcs.n	80021fc <__aeabi_ddiv+0x484>
 80021fa:	e084      	b.n	8002306 <__aeabi_ddiv+0x58e>
 80021fc:	42bc      	cmp	r4, r7
 80021fe:	d200      	bcs.n	8002202 <__aeabi_ddiv+0x48a>
 8002200:	e0ae      	b.n	8002360 <__aeabi_ddiv+0x5e8>
 8002202:	d100      	bne.n	8002206 <__aeabi_ddiv+0x48e>
 8002204:	e0c1      	b.n	800238a <__aeabi_ddiv+0x612>
 8002206:	000a      	movs	r2, r1
 8002208:	e6f0      	b.n	8001fec <__aeabi_ddiv+0x274>
 800220a:	4542      	cmp	r2, r8
 800220c:	d900      	bls.n	8002210 <__aeabi_ddiv+0x498>
 800220e:	e62c      	b.n	8001e6a <__aeabi_ddiv+0xf2>
 8002210:	464b      	mov	r3, r9
 8002212:	07dc      	lsls	r4, r3, #31
 8002214:	0858      	lsrs	r0, r3, #1
 8002216:	4643      	mov	r3, r8
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	431c      	orrs	r4, r3
 800221c:	4643      	mov	r3, r8
 800221e:	07df      	lsls	r7, r3, #31
 8002220:	e62a      	b.n	8001e78 <__aeabi_ddiv+0x100>
 8002222:	f001 f9cd 	bl	80035c0 <__clzsi2>
 8002226:	2315      	movs	r3, #21
 8002228:	469c      	mov	ip, r3
 800222a:	4484      	add	ip, r0
 800222c:	0002      	movs	r2, r0
 800222e:	4663      	mov	r3, ip
 8002230:	3220      	adds	r2, #32
 8002232:	2b1c      	cmp	r3, #28
 8002234:	dc00      	bgt.n	8002238 <__aeabi_ddiv+0x4c0>
 8002236:	e72e      	b.n	8002096 <__aeabi_ddiv+0x31e>
 8002238:	0023      	movs	r3, r4
 800223a:	3808      	subs	r0, #8
 800223c:	4083      	lsls	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	2300      	movs	r3, #0
 8002242:	4698      	mov	r8, r3
 8002244:	e736      	b.n	80020b4 <__aeabi_ddiv+0x33c>
 8002246:	f001 f9bb 	bl	80035c0 <__clzsi2>
 800224a:	0002      	movs	r2, r0
 800224c:	0003      	movs	r3, r0
 800224e:	3215      	adds	r2, #21
 8002250:	3320      	adds	r3, #32
 8002252:	2a1c      	cmp	r2, #28
 8002254:	dc00      	bgt.n	8002258 <__aeabi_ddiv+0x4e0>
 8002256:	e6fb      	b.n	8002050 <__aeabi_ddiv+0x2d8>
 8002258:	9900      	ldr	r1, [sp, #0]
 800225a:	3808      	subs	r0, #8
 800225c:	4081      	lsls	r1, r0
 800225e:	2200      	movs	r2, #0
 8002260:	468b      	mov	fp, r1
 8002262:	e702      	b.n	800206a <__aeabi_ddiv+0x2f2>
 8002264:	9900      	ldr	r1, [sp, #0]
 8002266:	3b01      	subs	r3, #1
 8002268:	468c      	mov	ip, r1
 800226a:	4464      	add	r4, ip
 800226c:	42a1      	cmp	r1, r4
 800226e:	d900      	bls.n	8002272 <__aeabi_ddiv+0x4fa>
 8002270:	e69a      	b.n	8001fa8 <__aeabi_ddiv+0x230>
 8002272:	42a2      	cmp	r2, r4
 8002274:	d800      	bhi.n	8002278 <__aeabi_ddiv+0x500>
 8002276:	e697      	b.n	8001fa8 <__aeabi_ddiv+0x230>
 8002278:	1e83      	subs	r3, r0, #2
 800227a:	4464      	add	r4, ip
 800227c:	e694      	b.n	8001fa8 <__aeabi_ddiv+0x230>
 800227e:	46ac      	mov	ip, r5
 8002280:	4461      	add	r1, ip
 8002282:	3f01      	subs	r7, #1
 8002284:	428d      	cmp	r5, r1
 8002286:	d900      	bls.n	800228a <__aeabi_ddiv+0x512>
 8002288:	e680      	b.n	8001f8c <__aeabi_ddiv+0x214>
 800228a:	428a      	cmp	r2, r1
 800228c:	d800      	bhi.n	8002290 <__aeabi_ddiv+0x518>
 800228e:	e67d      	b.n	8001f8c <__aeabi_ddiv+0x214>
 8002290:	1e87      	subs	r7, r0, #2
 8002292:	4461      	add	r1, ip
 8002294:	e67a      	b.n	8001f8c <__aeabi_ddiv+0x214>
 8002296:	4285      	cmp	r5, r0
 8002298:	d000      	beq.n	800229c <__aeabi_ddiv+0x524>
 800229a:	e65f      	b.n	8001f5c <__aeabi_ddiv+0x1e4>
 800229c:	45b9      	cmp	r9, r7
 800229e:	d900      	bls.n	80022a2 <__aeabi_ddiv+0x52a>
 80022a0:	e65c      	b.n	8001f5c <__aeabi_ddiv+0x1e4>
 80022a2:	e656      	b.n	8001f52 <__aeabi_ddiv+0x1da>
 80022a4:	42a2      	cmp	r2, r4
 80022a6:	d800      	bhi.n	80022aa <__aeabi_ddiv+0x532>
 80022a8:	e61a      	b.n	8001ee0 <__aeabi_ddiv+0x168>
 80022aa:	1e83      	subs	r3, r0, #2
 80022ac:	4464      	add	r4, ip
 80022ae:	e617      	b.n	8001ee0 <__aeabi_ddiv+0x168>
 80022b0:	428a      	cmp	r2, r1
 80022b2:	d800      	bhi.n	80022b6 <__aeabi_ddiv+0x53e>
 80022b4:	e600      	b.n	8001eb8 <__aeabi_ddiv+0x140>
 80022b6:	46ac      	mov	ip, r5
 80022b8:	1e83      	subs	r3, r0, #2
 80022ba:	4698      	mov	r8, r3
 80022bc:	4461      	add	r1, ip
 80022be:	e5fb      	b.n	8001eb8 <__aeabi_ddiv+0x140>
 80022c0:	4837      	ldr	r0, [pc, #220]	@ (80023a0 <__aeabi_ddiv+0x628>)
 80022c2:	0014      	movs	r4, r2
 80022c4:	4450      	add	r0, sl
 80022c6:	4082      	lsls	r2, r0
 80022c8:	465b      	mov	r3, fp
 80022ca:	0017      	movs	r7, r2
 80022cc:	4083      	lsls	r3, r0
 80022ce:	40cc      	lsrs	r4, r1
 80022d0:	1e7a      	subs	r2, r7, #1
 80022d2:	4197      	sbcs	r7, r2
 80022d4:	4323      	orrs	r3, r4
 80022d6:	433b      	orrs	r3, r7
 80022d8:	001a      	movs	r2, r3
 80022da:	465b      	mov	r3, fp
 80022dc:	40cb      	lsrs	r3, r1
 80022de:	0751      	lsls	r1, r2, #29
 80022e0:	d009      	beq.n	80022f6 <__aeabi_ddiv+0x57e>
 80022e2:	210f      	movs	r1, #15
 80022e4:	4011      	ands	r1, r2
 80022e6:	2904      	cmp	r1, #4
 80022e8:	d005      	beq.n	80022f6 <__aeabi_ddiv+0x57e>
 80022ea:	1d11      	adds	r1, r2, #4
 80022ec:	4291      	cmp	r1, r2
 80022ee:	4192      	sbcs	r2, r2
 80022f0:	4252      	negs	r2, r2
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	000a      	movs	r2, r1
 80022f6:	0219      	lsls	r1, r3, #8
 80022f8:	d400      	bmi.n	80022fc <__aeabi_ddiv+0x584>
 80022fa:	e755      	b.n	80021a8 <__aeabi_ddiv+0x430>
 80022fc:	2200      	movs	r2, #0
 80022fe:	2301      	movs	r3, #1
 8002300:	2400      	movs	r4, #0
 8002302:	4690      	mov	r8, r2
 8002304:	e598      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 8002306:	000a      	movs	r2, r1
 8002308:	42bc      	cmp	r4, r7
 800230a:	d000      	beq.n	800230e <__aeabi_ddiv+0x596>
 800230c:	e66e      	b.n	8001fec <__aeabi_ddiv+0x274>
 800230e:	454b      	cmp	r3, r9
 8002310:	d000      	beq.n	8002314 <__aeabi_ddiv+0x59c>
 8002312:	e66b      	b.n	8001fec <__aeabi_ddiv+0x274>
 8002314:	e66c      	b.n	8001ff0 <__aeabi_ddiv+0x278>
 8002316:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <__aeabi_ddiv+0x62c>)
 8002318:	4a23      	ldr	r2, [pc, #140]	@ (80023a8 <__aeabi_ddiv+0x630>)
 800231a:	4453      	add	r3, sl
 800231c:	4592      	cmp	sl, r2
 800231e:	da00      	bge.n	8002322 <__aeabi_ddiv+0x5aa>
 8002320:	e718      	b.n	8002154 <__aeabi_ddiv+0x3dc>
 8002322:	2101      	movs	r1, #1
 8002324:	4249      	negs	r1, r1
 8002326:	1d0a      	adds	r2, r1, #4
 8002328:	428a      	cmp	r2, r1
 800232a:	4189      	sbcs	r1, r1
 800232c:	4249      	negs	r1, r1
 800232e:	448b      	add	fp, r1
 8002330:	e666      	b.n	8002000 <__aeabi_ddiv+0x288>
 8002332:	210f      	movs	r1, #15
 8002334:	4011      	ands	r1, r2
 8002336:	2904      	cmp	r1, #4
 8002338:	d100      	bne.n	800233c <__aeabi_ddiv+0x5c4>
 800233a:	e661      	b.n	8002000 <__aeabi_ddiv+0x288>
 800233c:	0011      	movs	r1, r2
 800233e:	e7f2      	b.n	8002326 <__aeabi_ddiv+0x5ae>
 8002340:	42bc      	cmp	r4, r7
 8002342:	d800      	bhi.n	8002346 <__aeabi_ddiv+0x5ce>
 8002344:	e60a      	b.n	8001f5c <__aeabi_ddiv+0x1e4>
 8002346:	2302      	movs	r3, #2
 8002348:	425b      	negs	r3, r3
 800234a:	469c      	mov	ip, r3
 800234c:	9900      	ldr	r1, [sp, #0]
 800234e:	444f      	add	r7, r9
 8002350:	454f      	cmp	r7, r9
 8002352:	419b      	sbcs	r3, r3
 8002354:	44e3      	add	fp, ip
 8002356:	468c      	mov	ip, r1
 8002358:	425b      	negs	r3, r3
 800235a:	4463      	add	r3, ip
 800235c:	18c0      	adds	r0, r0, r3
 800235e:	e5ff      	b.n	8001f60 <__aeabi_ddiv+0x1e8>
 8002360:	4649      	mov	r1, r9
 8002362:	9d00      	ldr	r5, [sp, #0]
 8002364:	0048      	lsls	r0, r1, #1
 8002366:	4548      	cmp	r0, r9
 8002368:	4189      	sbcs	r1, r1
 800236a:	46ac      	mov	ip, r5
 800236c:	4249      	negs	r1, r1
 800236e:	4461      	add	r1, ip
 8002370:	4681      	mov	r9, r0
 8002372:	3a02      	subs	r2, #2
 8002374:	1864      	adds	r4, r4, r1
 8002376:	e7c7      	b.n	8002308 <__aeabi_ddiv+0x590>
 8002378:	2480      	movs	r4, #128	@ 0x80
 800237a:	465b      	mov	r3, fp
 800237c:	0324      	lsls	r4, r4, #12
 800237e:	431c      	orrs	r4, r3
 8002380:	0324      	lsls	r4, r4, #12
 8002382:	4690      	mov	r8, r2
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__aeabi_ddiv+0x620>)
 8002386:	0b24      	lsrs	r4, r4, #12
 8002388:	e556      	b.n	8001e38 <__aeabi_ddiv+0xc0>
 800238a:	4599      	cmp	r9, r3
 800238c:	d3e8      	bcc.n	8002360 <__aeabi_ddiv+0x5e8>
 800238e:	000a      	movs	r2, r1
 8002390:	e7bd      	b.n	800230e <__aeabi_ddiv+0x596>
 8002392:	2300      	movs	r3, #0
 8002394:	e708      	b.n	80021a8 <__aeabi_ddiv+0x430>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	000007ff 	.word	0x000007ff
 800239c:	0000043e 	.word	0x0000043e
 80023a0:	0000041e 	.word	0x0000041e
 80023a4:	000003ff 	.word	0x000003ff
 80023a8:	fffffc02 	.word	0xfffffc02

080023ac <__eqdf2>:
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	4657      	mov	r7, sl
 80023b0:	46de      	mov	lr, fp
 80023b2:	464e      	mov	r6, r9
 80023b4:	4645      	mov	r5, r8
 80023b6:	b5e0      	push	{r5, r6, r7, lr}
 80023b8:	000d      	movs	r5, r1
 80023ba:	0004      	movs	r4, r0
 80023bc:	0fe8      	lsrs	r0, r5, #31
 80023be:	4683      	mov	fp, r0
 80023c0:	0309      	lsls	r1, r1, #12
 80023c2:	0fd8      	lsrs	r0, r3, #31
 80023c4:	0b09      	lsrs	r1, r1, #12
 80023c6:	4682      	mov	sl, r0
 80023c8:	4819      	ldr	r0, [pc, #100]	@ (8002430 <__eqdf2+0x84>)
 80023ca:	468c      	mov	ip, r1
 80023cc:	031f      	lsls	r7, r3, #12
 80023ce:	0069      	lsls	r1, r5, #1
 80023d0:	005e      	lsls	r6, r3, #1
 80023d2:	0d49      	lsrs	r1, r1, #21
 80023d4:	0b3f      	lsrs	r7, r7, #12
 80023d6:	0d76      	lsrs	r6, r6, #21
 80023d8:	4281      	cmp	r1, r0
 80023da:	d018      	beq.n	800240e <__eqdf2+0x62>
 80023dc:	4286      	cmp	r6, r0
 80023de:	d00f      	beq.n	8002400 <__eqdf2+0x54>
 80023e0:	2001      	movs	r0, #1
 80023e2:	42b1      	cmp	r1, r6
 80023e4:	d10d      	bne.n	8002402 <__eqdf2+0x56>
 80023e6:	45bc      	cmp	ip, r7
 80023e8:	d10b      	bne.n	8002402 <__eqdf2+0x56>
 80023ea:	4294      	cmp	r4, r2
 80023ec:	d109      	bne.n	8002402 <__eqdf2+0x56>
 80023ee:	45d3      	cmp	fp, sl
 80023f0:	d01c      	beq.n	800242c <__eqdf2+0x80>
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d105      	bne.n	8002402 <__eqdf2+0x56>
 80023f6:	4660      	mov	r0, ip
 80023f8:	4320      	orrs	r0, r4
 80023fa:	1e43      	subs	r3, r0, #1
 80023fc:	4198      	sbcs	r0, r3
 80023fe:	e000      	b.n	8002402 <__eqdf2+0x56>
 8002400:	2001      	movs	r0, #1
 8002402:	bcf0      	pop	{r4, r5, r6, r7}
 8002404:	46bb      	mov	fp, r7
 8002406:	46b2      	mov	sl, r6
 8002408:	46a9      	mov	r9, r5
 800240a:	46a0      	mov	r8, r4
 800240c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240e:	2001      	movs	r0, #1
 8002410:	428e      	cmp	r6, r1
 8002412:	d1f6      	bne.n	8002402 <__eqdf2+0x56>
 8002414:	4661      	mov	r1, ip
 8002416:	4339      	orrs	r1, r7
 8002418:	000f      	movs	r7, r1
 800241a:	4317      	orrs	r7, r2
 800241c:	4327      	orrs	r7, r4
 800241e:	d1f0      	bne.n	8002402 <__eqdf2+0x56>
 8002420:	465b      	mov	r3, fp
 8002422:	4652      	mov	r2, sl
 8002424:	1a98      	subs	r0, r3, r2
 8002426:	1e43      	subs	r3, r0, #1
 8002428:	4198      	sbcs	r0, r3
 800242a:	e7ea      	b.n	8002402 <__eqdf2+0x56>
 800242c:	2000      	movs	r0, #0
 800242e:	e7e8      	b.n	8002402 <__eqdf2+0x56>
 8002430:	000007ff 	.word	0x000007ff

08002434 <__gedf2>:
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	4657      	mov	r7, sl
 8002438:	464e      	mov	r6, r9
 800243a:	4645      	mov	r5, r8
 800243c:	46de      	mov	lr, fp
 800243e:	b5e0      	push	{r5, r6, r7, lr}
 8002440:	000d      	movs	r5, r1
 8002442:	030f      	lsls	r7, r1, #12
 8002444:	0b39      	lsrs	r1, r7, #12
 8002446:	b083      	sub	sp, #12
 8002448:	0004      	movs	r4, r0
 800244a:	4680      	mov	r8, r0
 800244c:	9101      	str	r1, [sp, #4]
 800244e:	0058      	lsls	r0, r3, #1
 8002450:	0fe9      	lsrs	r1, r5, #31
 8002452:	4f31      	ldr	r7, [pc, #196]	@ (8002518 <__gedf2+0xe4>)
 8002454:	0d40      	lsrs	r0, r0, #21
 8002456:	468c      	mov	ip, r1
 8002458:	006e      	lsls	r6, r5, #1
 800245a:	0319      	lsls	r1, r3, #12
 800245c:	4682      	mov	sl, r0
 800245e:	4691      	mov	r9, r2
 8002460:	0d76      	lsrs	r6, r6, #21
 8002462:	0b09      	lsrs	r1, r1, #12
 8002464:	0fd8      	lsrs	r0, r3, #31
 8002466:	42be      	cmp	r6, r7
 8002468:	d01f      	beq.n	80024aa <__gedf2+0x76>
 800246a:	45ba      	cmp	sl, r7
 800246c:	d00f      	beq.n	800248e <__gedf2+0x5a>
 800246e:	2e00      	cmp	r6, #0
 8002470:	d12f      	bne.n	80024d2 <__gedf2+0x9e>
 8002472:	4655      	mov	r5, sl
 8002474:	9e01      	ldr	r6, [sp, #4]
 8002476:	4334      	orrs	r4, r6
 8002478:	2d00      	cmp	r5, #0
 800247a:	d127      	bne.n	80024cc <__gedf2+0x98>
 800247c:	430a      	orrs	r2, r1
 800247e:	d03a      	beq.n	80024f6 <__gedf2+0xc2>
 8002480:	2c00      	cmp	r4, #0
 8002482:	d145      	bne.n	8002510 <__gedf2+0xdc>
 8002484:	2800      	cmp	r0, #0
 8002486:	d11a      	bne.n	80024be <__gedf2+0x8a>
 8002488:	2001      	movs	r0, #1
 800248a:	4240      	negs	r0, r0
 800248c:	e017      	b.n	80024be <__gedf2+0x8a>
 800248e:	4311      	orrs	r1, r2
 8002490:	d13b      	bne.n	800250a <__gedf2+0xd6>
 8002492:	2e00      	cmp	r6, #0
 8002494:	d102      	bne.n	800249c <__gedf2+0x68>
 8002496:	9f01      	ldr	r7, [sp, #4]
 8002498:	4327      	orrs	r7, r4
 800249a:	d0f3      	beq.n	8002484 <__gedf2+0x50>
 800249c:	4584      	cmp	ip, r0
 800249e:	d109      	bne.n	80024b4 <__gedf2+0x80>
 80024a0:	4663      	mov	r3, ip
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <__gedf2+0x54>
 80024a6:	4660      	mov	r0, ip
 80024a8:	e009      	b.n	80024be <__gedf2+0x8a>
 80024aa:	9f01      	ldr	r7, [sp, #4]
 80024ac:	4327      	orrs	r7, r4
 80024ae:	d12c      	bne.n	800250a <__gedf2+0xd6>
 80024b0:	45b2      	cmp	sl, r6
 80024b2:	d024      	beq.n	80024fe <__gedf2+0xca>
 80024b4:	4663      	mov	r3, ip
 80024b6:	2002      	movs	r0, #2
 80024b8:	3b01      	subs	r3, #1
 80024ba:	4018      	ands	r0, r3
 80024bc:	3801      	subs	r0, #1
 80024be:	b003      	add	sp, #12
 80024c0:	bcf0      	pop	{r4, r5, r6, r7}
 80024c2:	46bb      	mov	fp, r7
 80024c4:	46b2      	mov	sl, r6
 80024c6:	46a9      	mov	r9, r5
 80024c8:	46a0      	mov	r8, r4
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024cc:	2c00      	cmp	r4, #0
 80024ce:	d0d9      	beq.n	8002484 <__gedf2+0x50>
 80024d0:	e7e4      	b.n	800249c <__gedf2+0x68>
 80024d2:	4654      	mov	r4, sl
 80024d4:	2c00      	cmp	r4, #0
 80024d6:	d0ed      	beq.n	80024b4 <__gedf2+0x80>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d1eb      	bne.n	80024b4 <__gedf2+0x80>
 80024dc:	4556      	cmp	r6, sl
 80024de:	dce9      	bgt.n	80024b4 <__gedf2+0x80>
 80024e0:	dbde      	blt.n	80024a0 <__gedf2+0x6c>
 80024e2:	9b01      	ldr	r3, [sp, #4]
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d8e5      	bhi.n	80024b4 <__gedf2+0x80>
 80024e8:	d1da      	bne.n	80024a0 <__gedf2+0x6c>
 80024ea:	45c8      	cmp	r8, r9
 80024ec:	d8e2      	bhi.n	80024b4 <__gedf2+0x80>
 80024ee:	2000      	movs	r0, #0
 80024f0:	45c8      	cmp	r8, r9
 80024f2:	d2e4      	bcs.n	80024be <__gedf2+0x8a>
 80024f4:	e7d4      	b.n	80024a0 <__gedf2+0x6c>
 80024f6:	2000      	movs	r0, #0
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d0e0      	beq.n	80024be <__gedf2+0x8a>
 80024fc:	e7da      	b.n	80024b4 <__gedf2+0x80>
 80024fe:	4311      	orrs	r1, r2
 8002500:	d103      	bne.n	800250a <__gedf2+0xd6>
 8002502:	4584      	cmp	ip, r0
 8002504:	d1d6      	bne.n	80024b4 <__gedf2+0x80>
 8002506:	2000      	movs	r0, #0
 8002508:	e7d9      	b.n	80024be <__gedf2+0x8a>
 800250a:	2002      	movs	r0, #2
 800250c:	4240      	negs	r0, r0
 800250e:	e7d6      	b.n	80024be <__gedf2+0x8a>
 8002510:	4584      	cmp	ip, r0
 8002512:	d0e6      	beq.n	80024e2 <__gedf2+0xae>
 8002514:	e7ce      	b.n	80024b4 <__gedf2+0x80>
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	000007ff 	.word	0x000007ff

0800251c <__ledf2>:
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	4657      	mov	r7, sl
 8002520:	464e      	mov	r6, r9
 8002522:	4645      	mov	r5, r8
 8002524:	46de      	mov	lr, fp
 8002526:	b5e0      	push	{r5, r6, r7, lr}
 8002528:	000d      	movs	r5, r1
 800252a:	030f      	lsls	r7, r1, #12
 800252c:	0004      	movs	r4, r0
 800252e:	4680      	mov	r8, r0
 8002530:	0fe8      	lsrs	r0, r5, #31
 8002532:	0b39      	lsrs	r1, r7, #12
 8002534:	4684      	mov	ip, r0
 8002536:	b083      	sub	sp, #12
 8002538:	0058      	lsls	r0, r3, #1
 800253a:	4f30      	ldr	r7, [pc, #192]	@ (80025fc <__ledf2+0xe0>)
 800253c:	0d40      	lsrs	r0, r0, #21
 800253e:	9101      	str	r1, [sp, #4]
 8002540:	031e      	lsls	r6, r3, #12
 8002542:	0069      	lsls	r1, r5, #1
 8002544:	4682      	mov	sl, r0
 8002546:	4691      	mov	r9, r2
 8002548:	0d49      	lsrs	r1, r1, #21
 800254a:	0b36      	lsrs	r6, r6, #12
 800254c:	0fd8      	lsrs	r0, r3, #31
 800254e:	42b9      	cmp	r1, r7
 8002550:	d020      	beq.n	8002594 <__ledf2+0x78>
 8002552:	45ba      	cmp	sl, r7
 8002554:	d00f      	beq.n	8002576 <__ledf2+0x5a>
 8002556:	2900      	cmp	r1, #0
 8002558:	d12b      	bne.n	80025b2 <__ledf2+0x96>
 800255a:	9901      	ldr	r1, [sp, #4]
 800255c:	430c      	orrs	r4, r1
 800255e:	4651      	mov	r1, sl
 8002560:	2900      	cmp	r1, #0
 8002562:	d137      	bne.n	80025d4 <__ledf2+0xb8>
 8002564:	4332      	orrs	r2, r6
 8002566:	d038      	beq.n	80025da <__ledf2+0xbe>
 8002568:	2c00      	cmp	r4, #0
 800256a:	d144      	bne.n	80025f6 <__ledf2+0xda>
 800256c:	2800      	cmp	r0, #0
 800256e:	d119      	bne.n	80025a4 <__ledf2+0x88>
 8002570:	2001      	movs	r0, #1
 8002572:	4240      	negs	r0, r0
 8002574:	e016      	b.n	80025a4 <__ledf2+0x88>
 8002576:	4316      	orrs	r6, r2
 8002578:	d113      	bne.n	80025a2 <__ledf2+0x86>
 800257a:	2900      	cmp	r1, #0
 800257c:	d102      	bne.n	8002584 <__ledf2+0x68>
 800257e:	9f01      	ldr	r7, [sp, #4]
 8002580:	4327      	orrs	r7, r4
 8002582:	d0f3      	beq.n	800256c <__ledf2+0x50>
 8002584:	4584      	cmp	ip, r0
 8002586:	d020      	beq.n	80025ca <__ledf2+0xae>
 8002588:	4663      	mov	r3, ip
 800258a:	2002      	movs	r0, #2
 800258c:	3b01      	subs	r3, #1
 800258e:	4018      	ands	r0, r3
 8002590:	3801      	subs	r0, #1
 8002592:	e007      	b.n	80025a4 <__ledf2+0x88>
 8002594:	9f01      	ldr	r7, [sp, #4]
 8002596:	4327      	orrs	r7, r4
 8002598:	d103      	bne.n	80025a2 <__ledf2+0x86>
 800259a:	458a      	cmp	sl, r1
 800259c:	d1f4      	bne.n	8002588 <__ledf2+0x6c>
 800259e:	4316      	orrs	r6, r2
 80025a0:	d01f      	beq.n	80025e2 <__ledf2+0xc6>
 80025a2:	2002      	movs	r0, #2
 80025a4:	b003      	add	sp, #12
 80025a6:	bcf0      	pop	{r4, r5, r6, r7}
 80025a8:	46bb      	mov	fp, r7
 80025aa:	46b2      	mov	sl, r6
 80025ac:	46a9      	mov	r9, r5
 80025ae:	46a0      	mov	r8, r4
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b2:	4654      	mov	r4, sl
 80025b4:	2c00      	cmp	r4, #0
 80025b6:	d0e7      	beq.n	8002588 <__ledf2+0x6c>
 80025b8:	4584      	cmp	ip, r0
 80025ba:	d1e5      	bne.n	8002588 <__ledf2+0x6c>
 80025bc:	4551      	cmp	r1, sl
 80025be:	dce3      	bgt.n	8002588 <__ledf2+0x6c>
 80025c0:	db03      	blt.n	80025ca <__ledf2+0xae>
 80025c2:	9b01      	ldr	r3, [sp, #4]
 80025c4:	42b3      	cmp	r3, r6
 80025c6:	d8df      	bhi.n	8002588 <__ledf2+0x6c>
 80025c8:	d00f      	beq.n	80025ea <__ledf2+0xce>
 80025ca:	4663      	mov	r3, ip
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0cf      	beq.n	8002570 <__ledf2+0x54>
 80025d0:	4660      	mov	r0, ip
 80025d2:	e7e7      	b.n	80025a4 <__ledf2+0x88>
 80025d4:	2c00      	cmp	r4, #0
 80025d6:	d0c9      	beq.n	800256c <__ledf2+0x50>
 80025d8:	e7d4      	b.n	8002584 <__ledf2+0x68>
 80025da:	2000      	movs	r0, #0
 80025dc:	2c00      	cmp	r4, #0
 80025de:	d0e1      	beq.n	80025a4 <__ledf2+0x88>
 80025e0:	e7d2      	b.n	8002588 <__ledf2+0x6c>
 80025e2:	4584      	cmp	ip, r0
 80025e4:	d1d0      	bne.n	8002588 <__ledf2+0x6c>
 80025e6:	2000      	movs	r0, #0
 80025e8:	e7dc      	b.n	80025a4 <__ledf2+0x88>
 80025ea:	45c8      	cmp	r8, r9
 80025ec:	d8cc      	bhi.n	8002588 <__ledf2+0x6c>
 80025ee:	2000      	movs	r0, #0
 80025f0:	45c8      	cmp	r8, r9
 80025f2:	d2d7      	bcs.n	80025a4 <__ledf2+0x88>
 80025f4:	e7e9      	b.n	80025ca <__ledf2+0xae>
 80025f6:	4584      	cmp	ip, r0
 80025f8:	d0e3      	beq.n	80025c2 <__ledf2+0xa6>
 80025fa:	e7c5      	b.n	8002588 <__ledf2+0x6c>
 80025fc:	000007ff 	.word	0x000007ff

08002600 <__aeabi_dmul>:
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	4657      	mov	r7, sl
 8002604:	46de      	mov	lr, fp
 8002606:	464e      	mov	r6, r9
 8002608:	4645      	mov	r5, r8
 800260a:	b5e0      	push	{r5, r6, r7, lr}
 800260c:	001f      	movs	r7, r3
 800260e:	030b      	lsls	r3, r1, #12
 8002610:	0b1b      	lsrs	r3, r3, #12
 8002612:	0016      	movs	r6, r2
 8002614:	469a      	mov	sl, r3
 8002616:	0fca      	lsrs	r2, r1, #31
 8002618:	004b      	lsls	r3, r1, #1
 800261a:	0004      	movs	r4, r0
 800261c:	4693      	mov	fp, r2
 800261e:	b087      	sub	sp, #28
 8002620:	0d5b      	lsrs	r3, r3, #21
 8002622:	d100      	bne.n	8002626 <__aeabi_dmul+0x26>
 8002624:	e0d5      	b.n	80027d2 <__aeabi_dmul+0x1d2>
 8002626:	4abb      	ldr	r2, [pc, #748]	@ (8002914 <__aeabi_dmul+0x314>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d100      	bne.n	800262e <__aeabi_dmul+0x2e>
 800262c:	e0f8      	b.n	8002820 <__aeabi_dmul+0x220>
 800262e:	4651      	mov	r1, sl
 8002630:	0f42      	lsrs	r2, r0, #29
 8002632:	00c9      	lsls	r1, r1, #3
 8002634:	430a      	orrs	r2, r1
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	0409      	lsls	r1, r1, #16
 800263a:	4311      	orrs	r1, r2
 800263c:	00c2      	lsls	r2, r0, #3
 800263e:	4691      	mov	r9, r2
 8002640:	4ab5      	ldr	r2, [pc, #724]	@ (8002918 <__aeabi_dmul+0x318>)
 8002642:	468a      	mov	sl, r1
 8002644:	189d      	adds	r5, r3, r2
 8002646:	2300      	movs	r3, #0
 8002648:	4698      	mov	r8, r3
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	033c      	lsls	r4, r7, #12
 800264e:	007b      	lsls	r3, r7, #1
 8002650:	0ffa      	lsrs	r2, r7, #31
 8002652:	0030      	movs	r0, r6
 8002654:	0b24      	lsrs	r4, r4, #12
 8002656:	0d5b      	lsrs	r3, r3, #21
 8002658:	9200      	str	r2, [sp, #0]
 800265a:	d100      	bne.n	800265e <__aeabi_dmul+0x5e>
 800265c:	e096      	b.n	800278c <__aeabi_dmul+0x18c>
 800265e:	4aad      	ldr	r2, [pc, #692]	@ (8002914 <__aeabi_dmul+0x314>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d031      	beq.n	80026c8 <__aeabi_dmul+0xc8>
 8002664:	0f72      	lsrs	r2, r6, #29
 8002666:	00e4      	lsls	r4, r4, #3
 8002668:	4322      	orrs	r2, r4
 800266a:	2480      	movs	r4, #128	@ 0x80
 800266c:	0424      	lsls	r4, r4, #16
 800266e:	4314      	orrs	r4, r2
 8002670:	4aa9      	ldr	r2, [pc, #676]	@ (8002918 <__aeabi_dmul+0x318>)
 8002672:	00f0      	lsls	r0, r6, #3
 8002674:	4694      	mov	ip, r2
 8002676:	4463      	add	r3, ip
 8002678:	195b      	adds	r3, r3, r5
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	9201      	str	r2, [sp, #4]
 800267e:	4642      	mov	r2, r8
 8002680:	2600      	movs	r6, #0
 8002682:	2a0a      	cmp	r2, #10
 8002684:	dc42      	bgt.n	800270c <__aeabi_dmul+0x10c>
 8002686:	465a      	mov	r2, fp
 8002688:	9900      	ldr	r1, [sp, #0]
 800268a:	404a      	eors	r2, r1
 800268c:	4693      	mov	fp, r2
 800268e:	4642      	mov	r2, r8
 8002690:	2a02      	cmp	r2, #2
 8002692:	dc32      	bgt.n	80026fa <__aeabi_dmul+0xfa>
 8002694:	3a01      	subs	r2, #1
 8002696:	2a01      	cmp	r2, #1
 8002698:	d900      	bls.n	800269c <__aeabi_dmul+0x9c>
 800269a:	e149      	b.n	8002930 <__aeabi_dmul+0x330>
 800269c:	2e02      	cmp	r6, #2
 800269e:	d100      	bne.n	80026a2 <__aeabi_dmul+0xa2>
 80026a0:	e0ca      	b.n	8002838 <__aeabi_dmul+0x238>
 80026a2:	2e01      	cmp	r6, #1
 80026a4:	d13d      	bne.n	8002722 <__aeabi_dmul+0x122>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2400      	movs	r4, #0
 80026aa:	2200      	movs	r2, #0
 80026ac:	0010      	movs	r0, r2
 80026ae:	465a      	mov	r2, fp
 80026b0:	051b      	lsls	r3, r3, #20
 80026b2:	4323      	orrs	r3, r4
 80026b4:	07d2      	lsls	r2, r2, #31
 80026b6:	4313      	orrs	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	b007      	add	sp, #28
 80026bc:	bcf0      	pop	{r4, r5, r6, r7}
 80026be:	46bb      	mov	fp, r7
 80026c0:	46b2      	mov	sl, r6
 80026c2:	46a9      	mov	r9, r5
 80026c4:	46a0      	mov	r8, r4
 80026c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026c8:	4b92      	ldr	r3, [pc, #584]	@ (8002914 <__aeabi_dmul+0x314>)
 80026ca:	4326      	orrs	r6, r4
 80026cc:	18eb      	adds	r3, r5, r3
 80026ce:	2e00      	cmp	r6, #0
 80026d0:	d100      	bne.n	80026d4 <__aeabi_dmul+0xd4>
 80026d2:	e0bb      	b.n	800284c <__aeabi_dmul+0x24c>
 80026d4:	2203      	movs	r2, #3
 80026d6:	4641      	mov	r1, r8
 80026d8:	4311      	orrs	r1, r2
 80026da:	465a      	mov	r2, fp
 80026dc:	4688      	mov	r8, r1
 80026de:	9900      	ldr	r1, [sp, #0]
 80026e0:	404a      	eors	r2, r1
 80026e2:	2180      	movs	r1, #128	@ 0x80
 80026e4:	0109      	lsls	r1, r1, #4
 80026e6:	468c      	mov	ip, r1
 80026e8:	0029      	movs	r1, r5
 80026ea:	4461      	add	r1, ip
 80026ec:	9101      	str	r1, [sp, #4]
 80026ee:	4641      	mov	r1, r8
 80026f0:	290a      	cmp	r1, #10
 80026f2:	dd00      	ble.n	80026f6 <__aeabi_dmul+0xf6>
 80026f4:	e233      	b.n	8002b5e <__aeabi_dmul+0x55e>
 80026f6:	4693      	mov	fp, r2
 80026f8:	2603      	movs	r6, #3
 80026fa:	4642      	mov	r2, r8
 80026fc:	2701      	movs	r7, #1
 80026fe:	4097      	lsls	r7, r2
 8002700:	21a6      	movs	r1, #166	@ 0xa6
 8002702:	003a      	movs	r2, r7
 8002704:	00c9      	lsls	r1, r1, #3
 8002706:	400a      	ands	r2, r1
 8002708:	420f      	tst	r7, r1
 800270a:	d031      	beq.n	8002770 <__aeabi_dmul+0x170>
 800270c:	9e02      	ldr	r6, [sp, #8]
 800270e:	2e02      	cmp	r6, #2
 8002710:	d100      	bne.n	8002714 <__aeabi_dmul+0x114>
 8002712:	e235      	b.n	8002b80 <__aeabi_dmul+0x580>
 8002714:	2e03      	cmp	r6, #3
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x11a>
 8002718:	e1d2      	b.n	8002ac0 <__aeabi_dmul+0x4c0>
 800271a:	4654      	mov	r4, sl
 800271c:	4648      	mov	r0, r9
 800271e:	2e01      	cmp	r6, #1
 8002720:	d0c1      	beq.n	80026a6 <__aeabi_dmul+0xa6>
 8002722:	9a01      	ldr	r2, [sp, #4]
 8002724:	4b7d      	ldr	r3, [pc, #500]	@ (800291c <__aeabi_dmul+0x31c>)
 8002726:	4694      	mov	ip, r2
 8002728:	4463      	add	r3, ip
 800272a:	2b00      	cmp	r3, #0
 800272c:	dc00      	bgt.n	8002730 <__aeabi_dmul+0x130>
 800272e:	e0c0      	b.n	80028b2 <__aeabi_dmul+0x2b2>
 8002730:	0742      	lsls	r2, r0, #29
 8002732:	d009      	beq.n	8002748 <__aeabi_dmul+0x148>
 8002734:	220f      	movs	r2, #15
 8002736:	4002      	ands	r2, r0
 8002738:	2a04      	cmp	r2, #4
 800273a:	d005      	beq.n	8002748 <__aeabi_dmul+0x148>
 800273c:	1d02      	adds	r2, r0, #4
 800273e:	4282      	cmp	r2, r0
 8002740:	4180      	sbcs	r0, r0
 8002742:	4240      	negs	r0, r0
 8002744:	1824      	adds	r4, r4, r0
 8002746:	0010      	movs	r0, r2
 8002748:	01e2      	lsls	r2, r4, #7
 800274a:	d506      	bpl.n	800275a <__aeabi_dmul+0x15a>
 800274c:	4b74      	ldr	r3, [pc, #464]	@ (8002920 <__aeabi_dmul+0x320>)
 800274e:	9a01      	ldr	r2, [sp, #4]
 8002750:	401c      	ands	r4, r3
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	4694      	mov	ip, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4463      	add	r3, ip
 800275a:	4a72      	ldr	r2, [pc, #456]	@ (8002924 <__aeabi_dmul+0x324>)
 800275c:	4293      	cmp	r3, r2
 800275e:	dc6b      	bgt.n	8002838 <__aeabi_dmul+0x238>
 8002760:	0762      	lsls	r2, r4, #29
 8002762:	08c0      	lsrs	r0, r0, #3
 8002764:	0264      	lsls	r4, r4, #9
 8002766:	055b      	lsls	r3, r3, #21
 8002768:	4302      	orrs	r2, r0
 800276a:	0b24      	lsrs	r4, r4, #12
 800276c:	0d5b      	lsrs	r3, r3, #21
 800276e:	e79d      	b.n	80026ac <__aeabi_dmul+0xac>
 8002770:	2190      	movs	r1, #144	@ 0x90
 8002772:	0089      	lsls	r1, r1, #2
 8002774:	420f      	tst	r7, r1
 8002776:	d163      	bne.n	8002840 <__aeabi_dmul+0x240>
 8002778:	2288      	movs	r2, #136	@ 0x88
 800277a:	423a      	tst	r2, r7
 800277c:	d100      	bne.n	8002780 <__aeabi_dmul+0x180>
 800277e:	e0d7      	b.n	8002930 <__aeabi_dmul+0x330>
 8002780:	9b00      	ldr	r3, [sp, #0]
 8002782:	46a2      	mov	sl, r4
 8002784:	469b      	mov	fp, r3
 8002786:	4681      	mov	r9, r0
 8002788:	9602      	str	r6, [sp, #8]
 800278a:	e7bf      	b.n	800270c <__aeabi_dmul+0x10c>
 800278c:	0023      	movs	r3, r4
 800278e:	4333      	orrs	r3, r6
 8002790:	d100      	bne.n	8002794 <__aeabi_dmul+0x194>
 8002792:	e07f      	b.n	8002894 <__aeabi_dmul+0x294>
 8002794:	2c00      	cmp	r4, #0
 8002796:	d100      	bne.n	800279a <__aeabi_dmul+0x19a>
 8002798:	e1ad      	b.n	8002af6 <__aeabi_dmul+0x4f6>
 800279a:	0020      	movs	r0, r4
 800279c:	f000 ff10 	bl	80035c0 <__clzsi2>
 80027a0:	0002      	movs	r2, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3a0b      	subs	r2, #11
 80027a6:	201d      	movs	r0, #29
 80027a8:	0019      	movs	r1, r3
 80027aa:	1a82      	subs	r2, r0, r2
 80027ac:	0030      	movs	r0, r6
 80027ae:	3908      	subs	r1, #8
 80027b0:	40d0      	lsrs	r0, r2
 80027b2:	408c      	lsls	r4, r1
 80027b4:	4304      	orrs	r4, r0
 80027b6:	0030      	movs	r0, r6
 80027b8:	4088      	lsls	r0, r1
 80027ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002928 <__aeabi_dmul+0x328>)
 80027bc:	1aeb      	subs	r3, r5, r3
 80027be:	4694      	mov	ip, r2
 80027c0:	4463      	add	r3, ip
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	9201      	str	r2, [sp, #4]
 80027c6:	4642      	mov	r2, r8
 80027c8:	2600      	movs	r6, #0
 80027ca:	2a0a      	cmp	r2, #10
 80027cc:	dc00      	bgt.n	80027d0 <__aeabi_dmul+0x1d0>
 80027ce:	e75a      	b.n	8002686 <__aeabi_dmul+0x86>
 80027d0:	e79c      	b.n	800270c <__aeabi_dmul+0x10c>
 80027d2:	4653      	mov	r3, sl
 80027d4:	4303      	orrs	r3, r0
 80027d6:	4699      	mov	r9, r3
 80027d8:	d054      	beq.n	8002884 <__aeabi_dmul+0x284>
 80027da:	4653      	mov	r3, sl
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d100      	bne.n	80027e2 <__aeabi_dmul+0x1e2>
 80027e0:	e177      	b.n	8002ad2 <__aeabi_dmul+0x4d2>
 80027e2:	4650      	mov	r0, sl
 80027e4:	f000 feec 	bl	80035c0 <__clzsi2>
 80027e8:	230b      	movs	r3, #11
 80027ea:	425b      	negs	r3, r3
 80027ec:	469c      	mov	ip, r3
 80027ee:	0002      	movs	r2, r0
 80027f0:	4484      	add	ip, r0
 80027f2:	0011      	movs	r1, r2
 80027f4:	4650      	mov	r0, sl
 80027f6:	3908      	subs	r1, #8
 80027f8:	4088      	lsls	r0, r1
 80027fa:	231d      	movs	r3, #29
 80027fc:	4680      	mov	r8, r0
 80027fe:	4660      	mov	r0, ip
 8002800:	1a1b      	subs	r3, r3, r0
 8002802:	0020      	movs	r0, r4
 8002804:	40d8      	lsrs	r0, r3
 8002806:	0003      	movs	r3, r0
 8002808:	4640      	mov	r0, r8
 800280a:	4303      	orrs	r3, r0
 800280c:	469a      	mov	sl, r3
 800280e:	0023      	movs	r3, r4
 8002810:	408b      	lsls	r3, r1
 8002812:	4699      	mov	r9, r3
 8002814:	2300      	movs	r3, #0
 8002816:	4d44      	ldr	r5, [pc, #272]	@ (8002928 <__aeabi_dmul+0x328>)
 8002818:	4698      	mov	r8, r3
 800281a:	1aad      	subs	r5, r5, r2
 800281c:	9302      	str	r3, [sp, #8]
 800281e:	e715      	b.n	800264c <__aeabi_dmul+0x4c>
 8002820:	4652      	mov	r2, sl
 8002822:	4302      	orrs	r2, r0
 8002824:	4691      	mov	r9, r2
 8002826:	d126      	bne.n	8002876 <__aeabi_dmul+0x276>
 8002828:	2200      	movs	r2, #0
 800282a:	001d      	movs	r5, r3
 800282c:	2302      	movs	r3, #2
 800282e:	4692      	mov	sl, r2
 8002830:	3208      	adds	r2, #8
 8002832:	4690      	mov	r8, r2
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	e709      	b.n	800264c <__aeabi_dmul+0x4c>
 8002838:	2400      	movs	r4, #0
 800283a:	2200      	movs	r2, #0
 800283c:	4b35      	ldr	r3, [pc, #212]	@ (8002914 <__aeabi_dmul+0x314>)
 800283e:	e735      	b.n	80026ac <__aeabi_dmul+0xac>
 8002840:	2300      	movs	r3, #0
 8002842:	2480      	movs	r4, #128	@ 0x80
 8002844:	469b      	mov	fp, r3
 8002846:	0324      	lsls	r4, r4, #12
 8002848:	4b32      	ldr	r3, [pc, #200]	@ (8002914 <__aeabi_dmul+0x314>)
 800284a:	e72f      	b.n	80026ac <__aeabi_dmul+0xac>
 800284c:	2202      	movs	r2, #2
 800284e:	4641      	mov	r1, r8
 8002850:	4311      	orrs	r1, r2
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	4694      	mov	ip, r2
 8002858:	002a      	movs	r2, r5
 800285a:	4462      	add	r2, ip
 800285c:	4688      	mov	r8, r1
 800285e:	9201      	str	r2, [sp, #4]
 8002860:	290a      	cmp	r1, #10
 8002862:	dd00      	ble.n	8002866 <__aeabi_dmul+0x266>
 8002864:	e752      	b.n	800270c <__aeabi_dmul+0x10c>
 8002866:	465a      	mov	r2, fp
 8002868:	2000      	movs	r0, #0
 800286a:	9900      	ldr	r1, [sp, #0]
 800286c:	0004      	movs	r4, r0
 800286e:	404a      	eors	r2, r1
 8002870:	4693      	mov	fp, r2
 8002872:	2602      	movs	r6, #2
 8002874:	e70b      	b.n	800268e <__aeabi_dmul+0x8e>
 8002876:	220c      	movs	r2, #12
 8002878:	001d      	movs	r5, r3
 800287a:	2303      	movs	r3, #3
 800287c:	4681      	mov	r9, r0
 800287e:	4690      	mov	r8, r2
 8002880:	9302      	str	r3, [sp, #8]
 8002882:	e6e3      	b.n	800264c <__aeabi_dmul+0x4c>
 8002884:	2300      	movs	r3, #0
 8002886:	469a      	mov	sl, r3
 8002888:	3304      	adds	r3, #4
 800288a:	4698      	mov	r8, r3
 800288c:	3b03      	subs	r3, #3
 800288e:	2500      	movs	r5, #0
 8002890:	9302      	str	r3, [sp, #8]
 8002892:	e6db      	b.n	800264c <__aeabi_dmul+0x4c>
 8002894:	4642      	mov	r2, r8
 8002896:	3301      	adds	r3, #1
 8002898:	431a      	orrs	r2, r3
 800289a:	002b      	movs	r3, r5
 800289c:	4690      	mov	r8, r2
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	9201      	str	r2, [sp, #4]
 80028a2:	4642      	mov	r2, r8
 80028a4:	2400      	movs	r4, #0
 80028a6:	2000      	movs	r0, #0
 80028a8:	2601      	movs	r6, #1
 80028aa:	2a0a      	cmp	r2, #10
 80028ac:	dc00      	bgt.n	80028b0 <__aeabi_dmul+0x2b0>
 80028ae:	e6ea      	b.n	8002686 <__aeabi_dmul+0x86>
 80028b0:	e72c      	b.n	800270c <__aeabi_dmul+0x10c>
 80028b2:	2201      	movs	r2, #1
 80028b4:	1ad2      	subs	r2, r2, r3
 80028b6:	2a38      	cmp	r2, #56	@ 0x38
 80028b8:	dd00      	ble.n	80028bc <__aeabi_dmul+0x2bc>
 80028ba:	e6f4      	b.n	80026a6 <__aeabi_dmul+0xa6>
 80028bc:	2a1f      	cmp	r2, #31
 80028be:	dc00      	bgt.n	80028c2 <__aeabi_dmul+0x2c2>
 80028c0:	e12a      	b.n	8002b18 <__aeabi_dmul+0x518>
 80028c2:	211f      	movs	r1, #31
 80028c4:	4249      	negs	r1, r1
 80028c6:	1acb      	subs	r3, r1, r3
 80028c8:	0021      	movs	r1, r4
 80028ca:	40d9      	lsrs	r1, r3
 80028cc:	000b      	movs	r3, r1
 80028ce:	2a20      	cmp	r2, #32
 80028d0:	d005      	beq.n	80028de <__aeabi_dmul+0x2de>
 80028d2:	4a16      	ldr	r2, [pc, #88]	@ (800292c <__aeabi_dmul+0x32c>)
 80028d4:	9d01      	ldr	r5, [sp, #4]
 80028d6:	4694      	mov	ip, r2
 80028d8:	4465      	add	r5, ip
 80028da:	40ac      	lsls	r4, r5
 80028dc:	4320      	orrs	r0, r4
 80028de:	1e42      	subs	r2, r0, #1
 80028e0:	4190      	sbcs	r0, r2
 80028e2:	4318      	orrs	r0, r3
 80028e4:	2307      	movs	r3, #7
 80028e6:	0019      	movs	r1, r3
 80028e8:	2400      	movs	r4, #0
 80028ea:	4001      	ands	r1, r0
 80028ec:	4203      	tst	r3, r0
 80028ee:	d00c      	beq.n	800290a <__aeabi_dmul+0x30a>
 80028f0:	230f      	movs	r3, #15
 80028f2:	4003      	ands	r3, r0
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d100      	bne.n	80028fa <__aeabi_dmul+0x2fa>
 80028f8:	e140      	b.n	8002b7c <__aeabi_dmul+0x57c>
 80028fa:	1d03      	adds	r3, r0, #4
 80028fc:	4283      	cmp	r3, r0
 80028fe:	41a4      	sbcs	r4, r4
 8002900:	0018      	movs	r0, r3
 8002902:	4264      	negs	r4, r4
 8002904:	0761      	lsls	r1, r4, #29
 8002906:	0264      	lsls	r4, r4, #9
 8002908:	0b24      	lsrs	r4, r4, #12
 800290a:	08c2      	lsrs	r2, r0, #3
 800290c:	2300      	movs	r3, #0
 800290e:	430a      	orrs	r2, r1
 8002910:	e6cc      	b.n	80026ac <__aeabi_dmul+0xac>
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	000007ff 	.word	0x000007ff
 8002918:	fffffc01 	.word	0xfffffc01
 800291c:	000003ff 	.word	0x000003ff
 8002920:	feffffff 	.word	0xfeffffff
 8002924:	000007fe 	.word	0x000007fe
 8002928:	fffffc0d 	.word	0xfffffc0d
 800292c:	0000043e 	.word	0x0000043e
 8002930:	4649      	mov	r1, r9
 8002932:	464a      	mov	r2, r9
 8002934:	0409      	lsls	r1, r1, #16
 8002936:	0c09      	lsrs	r1, r1, #16
 8002938:	000d      	movs	r5, r1
 800293a:	0c16      	lsrs	r6, r2, #16
 800293c:	0c02      	lsrs	r2, r0, #16
 800293e:	0400      	lsls	r0, r0, #16
 8002940:	0c00      	lsrs	r0, r0, #16
 8002942:	4345      	muls	r5, r0
 8002944:	46ac      	mov	ip, r5
 8002946:	0005      	movs	r5, r0
 8002948:	4375      	muls	r5, r6
 800294a:	46a8      	mov	r8, r5
 800294c:	0015      	movs	r5, r2
 800294e:	000f      	movs	r7, r1
 8002950:	4375      	muls	r5, r6
 8002952:	9200      	str	r2, [sp, #0]
 8002954:	9502      	str	r5, [sp, #8]
 8002956:	002a      	movs	r2, r5
 8002958:	9d00      	ldr	r5, [sp, #0]
 800295a:	436f      	muls	r7, r5
 800295c:	4665      	mov	r5, ip
 800295e:	0c2d      	lsrs	r5, r5, #16
 8002960:	46a9      	mov	r9, r5
 8002962:	4447      	add	r7, r8
 8002964:	444f      	add	r7, r9
 8002966:	45b8      	cmp	r8, r7
 8002968:	d905      	bls.n	8002976 <__aeabi_dmul+0x376>
 800296a:	0015      	movs	r5, r2
 800296c:	2280      	movs	r2, #128	@ 0x80
 800296e:	0252      	lsls	r2, r2, #9
 8002970:	4690      	mov	r8, r2
 8002972:	4445      	add	r5, r8
 8002974:	9502      	str	r5, [sp, #8]
 8002976:	0c3d      	lsrs	r5, r7, #16
 8002978:	9503      	str	r5, [sp, #12]
 800297a:	4665      	mov	r5, ip
 800297c:	042d      	lsls	r5, r5, #16
 800297e:	043f      	lsls	r7, r7, #16
 8002980:	0c2d      	lsrs	r5, r5, #16
 8002982:	46ac      	mov	ip, r5
 8002984:	003d      	movs	r5, r7
 8002986:	4465      	add	r5, ip
 8002988:	9504      	str	r5, [sp, #16]
 800298a:	0c25      	lsrs	r5, r4, #16
 800298c:	0424      	lsls	r4, r4, #16
 800298e:	0c24      	lsrs	r4, r4, #16
 8002990:	46ac      	mov	ip, r5
 8002992:	0025      	movs	r5, r4
 8002994:	4375      	muls	r5, r6
 8002996:	46a8      	mov	r8, r5
 8002998:	4665      	mov	r5, ip
 800299a:	000f      	movs	r7, r1
 800299c:	4369      	muls	r1, r5
 800299e:	4441      	add	r1, r8
 80029a0:	4689      	mov	r9, r1
 80029a2:	4367      	muls	r7, r4
 80029a4:	0c39      	lsrs	r1, r7, #16
 80029a6:	4449      	add	r1, r9
 80029a8:	436e      	muls	r6, r5
 80029aa:	4588      	cmp	r8, r1
 80029ac:	d903      	bls.n	80029b6 <__aeabi_dmul+0x3b6>
 80029ae:	2280      	movs	r2, #128	@ 0x80
 80029b0:	0252      	lsls	r2, r2, #9
 80029b2:	4690      	mov	r8, r2
 80029b4:	4446      	add	r6, r8
 80029b6:	0c0d      	lsrs	r5, r1, #16
 80029b8:	46a8      	mov	r8, r5
 80029ba:	0035      	movs	r5, r6
 80029bc:	4445      	add	r5, r8
 80029be:	9505      	str	r5, [sp, #20]
 80029c0:	9d03      	ldr	r5, [sp, #12]
 80029c2:	043f      	lsls	r7, r7, #16
 80029c4:	46a8      	mov	r8, r5
 80029c6:	0c3f      	lsrs	r7, r7, #16
 80029c8:	0409      	lsls	r1, r1, #16
 80029ca:	19c9      	adds	r1, r1, r7
 80029cc:	4488      	add	r8, r1
 80029ce:	4645      	mov	r5, r8
 80029d0:	9503      	str	r5, [sp, #12]
 80029d2:	4655      	mov	r5, sl
 80029d4:	042e      	lsls	r6, r5, #16
 80029d6:	0c36      	lsrs	r6, r6, #16
 80029d8:	0c2f      	lsrs	r7, r5, #16
 80029da:	0035      	movs	r5, r6
 80029dc:	4345      	muls	r5, r0
 80029de:	4378      	muls	r0, r7
 80029e0:	4681      	mov	r9, r0
 80029e2:	0038      	movs	r0, r7
 80029e4:	46a8      	mov	r8, r5
 80029e6:	0c2d      	lsrs	r5, r5, #16
 80029e8:	46aa      	mov	sl, r5
 80029ea:	9a00      	ldr	r2, [sp, #0]
 80029ec:	4350      	muls	r0, r2
 80029ee:	4372      	muls	r2, r6
 80029f0:	444a      	add	r2, r9
 80029f2:	4452      	add	r2, sl
 80029f4:	4591      	cmp	r9, r2
 80029f6:	d903      	bls.n	8002a00 <__aeabi_dmul+0x400>
 80029f8:	2580      	movs	r5, #128	@ 0x80
 80029fa:	026d      	lsls	r5, r5, #9
 80029fc:	46a9      	mov	r9, r5
 80029fe:	4448      	add	r0, r9
 8002a00:	0c15      	lsrs	r5, r2, #16
 8002a02:	46a9      	mov	r9, r5
 8002a04:	4645      	mov	r5, r8
 8002a06:	042d      	lsls	r5, r5, #16
 8002a08:	0c2d      	lsrs	r5, r5, #16
 8002a0a:	46a8      	mov	r8, r5
 8002a0c:	4665      	mov	r5, ip
 8002a0e:	437d      	muls	r5, r7
 8002a10:	0412      	lsls	r2, r2, #16
 8002a12:	4448      	add	r0, r9
 8002a14:	4490      	add	r8, r2
 8002a16:	46a9      	mov	r9, r5
 8002a18:	0032      	movs	r2, r6
 8002a1a:	4665      	mov	r5, ip
 8002a1c:	4362      	muls	r2, r4
 8002a1e:	436e      	muls	r6, r5
 8002a20:	437c      	muls	r4, r7
 8002a22:	0c17      	lsrs	r7, r2, #16
 8002a24:	1936      	adds	r6, r6, r4
 8002a26:	19bf      	adds	r7, r7, r6
 8002a28:	42bc      	cmp	r4, r7
 8002a2a:	d903      	bls.n	8002a34 <__aeabi_dmul+0x434>
 8002a2c:	2480      	movs	r4, #128	@ 0x80
 8002a2e:	0264      	lsls	r4, r4, #9
 8002a30:	46a4      	mov	ip, r4
 8002a32:	44e1      	add	r9, ip
 8002a34:	9c02      	ldr	r4, [sp, #8]
 8002a36:	9e03      	ldr	r6, [sp, #12]
 8002a38:	46a4      	mov	ip, r4
 8002a3a:	9d05      	ldr	r5, [sp, #20]
 8002a3c:	4466      	add	r6, ip
 8002a3e:	428e      	cmp	r6, r1
 8002a40:	4189      	sbcs	r1, r1
 8002a42:	46ac      	mov	ip, r5
 8002a44:	0412      	lsls	r2, r2, #16
 8002a46:	043c      	lsls	r4, r7, #16
 8002a48:	0c12      	lsrs	r2, r2, #16
 8002a4a:	18a2      	adds	r2, r4, r2
 8002a4c:	4462      	add	r2, ip
 8002a4e:	4249      	negs	r1, r1
 8002a50:	1854      	adds	r4, r2, r1
 8002a52:	4446      	add	r6, r8
 8002a54:	46a4      	mov	ip, r4
 8002a56:	4546      	cmp	r6, r8
 8002a58:	41a4      	sbcs	r4, r4
 8002a5a:	4682      	mov	sl, r0
 8002a5c:	4264      	negs	r4, r4
 8002a5e:	46a0      	mov	r8, r4
 8002a60:	42aa      	cmp	r2, r5
 8002a62:	4192      	sbcs	r2, r2
 8002a64:	458c      	cmp	ip, r1
 8002a66:	4189      	sbcs	r1, r1
 8002a68:	44e2      	add	sl, ip
 8002a6a:	44d0      	add	r8, sl
 8002a6c:	4249      	negs	r1, r1
 8002a6e:	4252      	negs	r2, r2
 8002a70:	430a      	orrs	r2, r1
 8002a72:	45a0      	cmp	r8, r4
 8002a74:	41a4      	sbcs	r4, r4
 8002a76:	4582      	cmp	sl, r0
 8002a78:	4189      	sbcs	r1, r1
 8002a7a:	4264      	negs	r4, r4
 8002a7c:	4249      	negs	r1, r1
 8002a7e:	430c      	orrs	r4, r1
 8002a80:	4641      	mov	r1, r8
 8002a82:	0c3f      	lsrs	r7, r7, #16
 8002a84:	19d2      	adds	r2, r2, r7
 8002a86:	1912      	adds	r2, r2, r4
 8002a88:	0dcc      	lsrs	r4, r1, #23
 8002a8a:	9904      	ldr	r1, [sp, #16]
 8002a8c:	0270      	lsls	r0, r6, #9
 8002a8e:	4308      	orrs	r0, r1
 8002a90:	1e41      	subs	r1, r0, #1
 8002a92:	4188      	sbcs	r0, r1
 8002a94:	4641      	mov	r1, r8
 8002a96:	444a      	add	r2, r9
 8002a98:	0df6      	lsrs	r6, r6, #23
 8002a9a:	0252      	lsls	r2, r2, #9
 8002a9c:	4330      	orrs	r0, r6
 8002a9e:	0249      	lsls	r1, r1, #9
 8002aa0:	4314      	orrs	r4, r2
 8002aa2:	4308      	orrs	r0, r1
 8002aa4:	01d2      	lsls	r2, r2, #7
 8002aa6:	d535      	bpl.n	8002b14 <__aeabi_dmul+0x514>
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	0843      	lsrs	r3, r0, #1
 8002aac:	4002      	ands	r2, r0
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	07e0      	lsls	r0, r4, #31
 8002ab2:	4318      	orrs	r0, r3
 8002ab4:	0864      	lsrs	r4, r4, #1
 8002ab6:	e634      	b.n	8002722 <__aeabi_dmul+0x122>
 8002ab8:	9b00      	ldr	r3, [sp, #0]
 8002aba:	46a2      	mov	sl, r4
 8002abc:	469b      	mov	fp, r3
 8002abe:	4681      	mov	r9, r0
 8002ac0:	2480      	movs	r4, #128	@ 0x80
 8002ac2:	4653      	mov	r3, sl
 8002ac4:	0324      	lsls	r4, r4, #12
 8002ac6:	431c      	orrs	r4, r3
 8002ac8:	0324      	lsls	r4, r4, #12
 8002aca:	464a      	mov	r2, r9
 8002acc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <__aeabi_dmul+0x588>)
 8002ace:	0b24      	lsrs	r4, r4, #12
 8002ad0:	e5ec      	b.n	80026ac <__aeabi_dmul+0xac>
 8002ad2:	f000 fd75 	bl	80035c0 <__clzsi2>
 8002ad6:	2315      	movs	r3, #21
 8002ad8:	469c      	mov	ip, r3
 8002ada:	4484      	add	ip, r0
 8002adc:	0002      	movs	r2, r0
 8002ade:	4663      	mov	r3, ip
 8002ae0:	3220      	adds	r2, #32
 8002ae2:	2b1c      	cmp	r3, #28
 8002ae4:	dc00      	bgt.n	8002ae8 <__aeabi_dmul+0x4e8>
 8002ae6:	e684      	b.n	80027f2 <__aeabi_dmul+0x1f2>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	4699      	mov	r9, r3
 8002aec:	0023      	movs	r3, r4
 8002aee:	3808      	subs	r0, #8
 8002af0:	4083      	lsls	r3, r0
 8002af2:	469a      	mov	sl, r3
 8002af4:	e68e      	b.n	8002814 <__aeabi_dmul+0x214>
 8002af6:	f000 fd63 	bl	80035c0 <__clzsi2>
 8002afa:	0002      	movs	r2, r0
 8002afc:	0003      	movs	r3, r0
 8002afe:	3215      	adds	r2, #21
 8002b00:	3320      	adds	r3, #32
 8002b02:	2a1c      	cmp	r2, #28
 8002b04:	dc00      	bgt.n	8002b08 <__aeabi_dmul+0x508>
 8002b06:	e64e      	b.n	80027a6 <__aeabi_dmul+0x1a6>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	0034      	movs	r4, r6
 8002b0c:	3a08      	subs	r2, #8
 8002b0e:	2000      	movs	r0, #0
 8002b10:	4094      	lsls	r4, r2
 8002b12:	e652      	b.n	80027ba <__aeabi_dmul+0x1ba>
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	e604      	b.n	8002722 <__aeabi_dmul+0x122>
 8002b18:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <__aeabi_dmul+0x58c>)
 8002b1a:	0021      	movs	r1, r4
 8002b1c:	469c      	mov	ip, r3
 8002b1e:	0003      	movs	r3, r0
 8002b20:	9d01      	ldr	r5, [sp, #4]
 8002b22:	40d3      	lsrs	r3, r2
 8002b24:	4465      	add	r5, ip
 8002b26:	40a9      	lsls	r1, r5
 8002b28:	4319      	orrs	r1, r3
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	40ab      	lsls	r3, r5
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	4183      	sbcs	r3, r0
 8002b32:	4319      	orrs	r1, r3
 8002b34:	0008      	movs	r0, r1
 8002b36:	40d4      	lsrs	r4, r2
 8002b38:	074b      	lsls	r3, r1, #29
 8002b3a:	d009      	beq.n	8002b50 <__aeabi_dmul+0x550>
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	400b      	ands	r3, r1
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d005      	beq.n	8002b50 <__aeabi_dmul+0x550>
 8002b44:	1d0b      	adds	r3, r1, #4
 8002b46:	428b      	cmp	r3, r1
 8002b48:	4180      	sbcs	r0, r0
 8002b4a:	4240      	negs	r0, r0
 8002b4c:	1824      	adds	r4, r4, r0
 8002b4e:	0018      	movs	r0, r3
 8002b50:	0223      	lsls	r3, r4, #8
 8002b52:	d400      	bmi.n	8002b56 <__aeabi_dmul+0x556>
 8002b54:	e6d6      	b.n	8002904 <__aeabi_dmul+0x304>
 8002b56:	2301      	movs	r3, #1
 8002b58:	2400      	movs	r4, #0
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	e5a6      	b.n	80026ac <__aeabi_dmul+0xac>
 8002b5e:	290f      	cmp	r1, #15
 8002b60:	d1aa      	bne.n	8002ab8 <__aeabi_dmul+0x4b8>
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	4652      	mov	r2, sl
 8002b66:	031b      	lsls	r3, r3, #12
 8002b68:	421a      	tst	r2, r3
 8002b6a:	d0a9      	beq.n	8002ac0 <__aeabi_dmul+0x4c0>
 8002b6c:	421c      	tst	r4, r3
 8002b6e:	d1a7      	bne.n	8002ac0 <__aeabi_dmul+0x4c0>
 8002b70:	431c      	orrs	r4, r3
 8002b72:	9b00      	ldr	r3, [sp, #0]
 8002b74:	0002      	movs	r2, r0
 8002b76:	469b      	mov	fp, r3
 8002b78:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <__aeabi_dmul+0x588>)
 8002b7a:	e597      	b.n	80026ac <__aeabi_dmul+0xac>
 8002b7c:	2400      	movs	r4, #0
 8002b7e:	e6c1      	b.n	8002904 <__aeabi_dmul+0x304>
 8002b80:	2400      	movs	r4, #0
 8002b82:	4b01      	ldr	r3, [pc, #4]	@ (8002b88 <__aeabi_dmul+0x588>)
 8002b84:	0022      	movs	r2, r4
 8002b86:	e591      	b.n	80026ac <__aeabi_dmul+0xac>
 8002b88:	000007ff 	.word	0x000007ff
 8002b8c:	0000041e 	.word	0x0000041e

08002b90 <__aeabi_dsub>:
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b92:	464e      	mov	r6, r9
 8002b94:	4645      	mov	r5, r8
 8002b96:	46de      	mov	lr, fp
 8002b98:	4657      	mov	r7, sl
 8002b9a:	b5e0      	push	{r5, r6, r7, lr}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	9000      	str	r0, [sp, #0]
 8002ba0:	9101      	str	r1, [sp, #4]
 8002ba2:	030c      	lsls	r4, r1, #12
 8002ba4:	004f      	lsls	r7, r1, #1
 8002ba6:	0fce      	lsrs	r6, r1, #31
 8002ba8:	0a61      	lsrs	r1, r4, #9
 8002baa:	9c00      	ldr	r4, [sp, #0]
 8002bac:	46b0      	mov	r8, r6
 8002bae:	0f64      	lsrs	r4, r4, #29
 8002bb0:	430c      	orrs	r4, r1
 8002bb2:	9900      	ldr	r1, [sp, #0]
 8002bb4:	0d7f      	lsrs	r7, r7, #21
 8002bb6:	00c8      	lsls	r0, r1, #3
 8002bb8:	0011      	movs	r1, r2
 8002bba:	001a      	movs	r2, r3
 8002bbc:	031b      	lsls	r3, r3, #12
 8002bbe:	469c      	mov	ip, r3
 8002bc0:	9100      	str	r1, [sp, #0]
 8002bc2:	9201      	str	r2, [sp, #4]
 8002bc4:	0051      	lsls	r1, r2, #1
 8002bc6:	0d4b      	lsrs	r3, r1, #21
 8002bc8:	4699      	mov	r9, r3
 8002bca:	9b01      	ldr	r3, [sp, #4]
 8002bcc:	9d00      	ldr	r5, [sp, #0]
 8002bce:	0fd9      	lsrs	r1, r3, #31
 8002bd0:	4663      	mov	r3, ip
 8002bd2:	0f6a      	lsrs	r2, r5, #29
 8002bd4:	0a5b      	lsrs	r3, r3, #9
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	00ea      	lsls	r2, r5, #3
 8002bda:	4694      	mov	ip, r2
 8002bdc:	4693      	mov	fp, r2
 8002bde:	4ac1      	ldr	r2, [pc, #772]	@ (8002ee4 <__aeabi_dsub+0x354>)
 8002be0:	9003      	str	r0, [sp, #12]
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	4591      	cmp	r9, r2
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x5a>
 8002be8:	e0cd      	b.n	8002d86 <__aeabi_dsub+0x1f6>
 8002bea:	2501      	movs	r5, #1
 8002bec:	4069      	eors	r1, r5
 8002bee:	464d      	mov	r5, r9
 8002bf0:	1b7d      	subs	r5, r7, r5
 8002bf2:	46aa      	mov	sl, r5
 8002bf4:	428e      	cmp	r6, r1
 8002bf6:	d100      	bne.n	8002bfa <__aeabi_dsub+0x6a>
 8002bf8:	e080      	b.n	8002cfc <__aeabi_dsub+0x16c>
 8002bfa:	2d00      	cmp	r5, #0
 8002bfc:	dc00      	bgt.n	8002c00 <__aeabi_dsub+0x70>
 8002bfe:	e335      	b.n	800326c <__aeabi_dsub+0x6dc>
 8002c00:	4649      	mov	r1, r9
 8002c02:	2900      	cmp	r1, #0
 8002c04:	d100      	bne.n	8002c08 <__aeabi_dsub+0x78>
 8002c06:	e0df      	b.n	8002dc8 <__aeabi_dsub+0x238>
 8002c08:	4297      	cmp	r7, r2
 8002c0a:	d100      	bne.n	8002c0e <__aeabi_dsub+0x7e>
 8002c0c:	e194      	b.n	8002f38 <__aeabi_dsub+0x3a8>
 8002c0e:	4652      	mov	r2, sl
 8002c10:	2501      	movs	r5, #1
 8002c12:	2a38      	cmp	r2, #56	@ 0x38
 8002c14:	dc19      	bgt.n	8002c4a <__aeabi_dsub+0xba>
 8002c16:	2280      	movs	r2, #128	@ 0x80
 8002c18:	9b02      	ldr	r3, [sp, #8]
 8002c1a:	0412      	lsls	r2, r2, #16
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4652      	mov	r2, sl
 8002c22:	2a1f      	cmp	r2, #31
 8002c24:	dd00      	ble.n	8002c28 <__aeabi_dsub+0x98>
 8002c26:	e1e3      	b.n	8002ff0 <__aeabi_dsub+0x460>
 8002c28:	4653      	mov	r3, sl
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	4661      	mov	r1, ip
 8002c2e:	9d02      	ldr	r5, [sp, #8]
 8002c30:	1ad2      	subs	r2, r2, r3
 8002c32:	4095      	lsls	r5, r2
 8002c34:	40d9      	lsrs	r1, r3
 8002c36:	430d      	orrs	r5, r1
 8002c38:	4661      	mov	r1, ip
 8002c3a:	4091      	lsls	r1, r2
 8002c3c:	000a      	movs	r2, r1
 8002c3e:	1e51      	subs	r1, r2, #1
 8002c40:	418a      	sbcs	r2, r1
 8002c42:	4315      	orrs	r5, r2
 8002c44:	9a02      	ldr	r2, [sp, #8]
 8002c46:	40da      	lsrs	r2, r3
 8002c48:	1aa4      	subs	r4, r4, r2
 8002c4a:	1b45      	subs	r5, r0, r5
 8002c4c:	42a8      	cmp	r0, r5
 8002c4e:	4180      	sbcs	r0, r0
 8002c50:	4240      	negs	r0, r0
 8002c52:	1a24      	subs	r4, r4, r0
 8002c54:	0223      	lsls	r3, r4, #8
 8002c56:	d400      	bmi.n	8002c5a <__aeabi_dsub+0xca>
 8002c58:	e13d      	b.n	8002ed6 <__aeabi_dsub+0x346>
 8002c5a:	0264      	lsls	r4, r4, #9
 8002c5c:	0a64      	lsrs	r4, r4, #9
 8002c5e:	2c00      	cmp	r4, #0
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dsub+0xd4>
 8002c62:	e147      	b.n	8002ef4 <__aeabi_dsub+0x364>
 8002c64:	0020      	movs	r0, r4
 8002c66:	f000 fcab 	bl	80035c0 <__clzsi2>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	3b08      	subs	r3, #8
 8002c6e:	2120      	movs	r1, #32
 8002c70:	0028      	movs	r0, r5
 8002c72:	1aca      	subs	r2, r1, r3
 8002c74:	40d0      	lsrs	r0, r2
 8002c76:	409c      	lsls	r4, r3
 8002c78:	0002      	movs	r2, r0
 8002c7a:	409d      	lsls	r5, r3
 8002c7c:	4322      	orrs	r2, r4
 8002c7e:	429f      	cmp	r7, r3
 8002c80:	dd00      	ble.n	8002c84 <__aeabi_dsub+0xf4>
 8002c82:	e177      	b.n	8002f74 <__aeabi_dsub+0x3e4>
 8002c84:	1bd8      	subs	r0, r3, r7
 8002c86:	3001      	adds	r0, #1
 8002c88:	1a09      	subs	r1, r1, r0
 8002c8a:	002c      	movs	r4, r5
 8002c8c:	408d      	lsls	r5, r1
 8002c8e:	40c4      	lsrs	r4, r0
 8002c90:	1e6b      	subs	r3, r5, #1
 8002c92:	419d      	sbcs	r5, r3
 8002c94:	0013      	movs	r3, r2
 8002c96:	40c2      	lsrs	r2, r0
 8002c98:	408b      	lsls	r3, r1
 8002c9a:	4325      	orrs	r5, r4
 8002c9c:	2700      	movs	r7, #0
 8002c9e:	0014      	movs	r4, r2
 8002ca0:	431d      	orrs	r5, r3
 8002ca2:	076b      	lsls	r3, r5, #29
 8002ca4:	d009      	beq.n	8002cba <__aeabi_dsub+0x12a>
 8002ca6:	230f      	movs	r3, #15
 8002ca8:	402b      	ands	r3, r5
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d005      	beq.n	8002cba <__aeabi_dsub+0x12a>
 8002cae:	1d2b      	adds	r3, r5, #4
 8002cb0:	42ab      	cmp	r3, r5
 8002cb2:	41ad      	sbcs	r5, r5
 8002cb4:	426d      	negs	r5, r5
 8002cb6:	1964      	adds	r4, r4, r5
 8002cb8:	001d      	movs	r5, r3
 8002cba:	0223      	lsls	r3, r4, #8
 8002cbc:	d400      	bmi.n	8002cc0 <__aeabi_dsub+0x130>
 8002cbe:	e140      	b.n	8002f42 <__aeabi_dsub+0x3b2>
 8002cc0:	4a88      	ldr	r2, [pc, #544]	@ (8002ee4 <__aeabi_dsub+0x354>)
 8002cc2:	3701      	adds	r7, #1
 8002cc4:	4297      	cmp	r7, r2
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x13a>
 8002cc8:	e101      	b.n	8002ece <__aeabi_dsub+0x33e>
 8002cca:	2601      	movs	r6, #1
 8002ccc:	4643      	mov	r3, r8
 8002cce:	4986      	ldr	r1, [pc, #536]	@ (8002ee8 <__aeabi_dsub+0x358>)
 8002cd0:	08ed      	lsrs	r5, r5, #3
 8002cd2:	4021      	ands	r1, r4
 8002cd4:	074a      	lsls	r2, r1, #29
 8002cd6:	432a      	orrs	r2, r5
 8002cd8:	057c      	lsls	r4, r7, #21
 8002cda:	024d      	lsls	r5, r1, #9
 8002cdc:	0b2d      	lsrs	r5, r5, #12
 8002cde:	0d64      	lsrs	r4, r4, #21
 8002ce0:	401e      	ands	r6, r3
 8002ce2:	0524      	lsls	r4, r4, #20
 8002ce4:	432c      	orrs	r4, r5
 8002ce6:	07f6      	lsls	r6, r6, #31
 8002ce8:	4334      	orrs	r4, r6
 8002cea:	0010      	movs	r0, r2
 8002cec:	0021      	movs	r1, r4
 8002cee:	b005      	add	sp, #20
 8002cf0:	bcf0      	pop	{r4, r5, r6, r7}
 8002cf2:	46bb      	mov	fp, r7
 8002cf4:	46b2      	mov	sl, r6
 8002cf6:	46a9      	mov	r9, r5
 8002cf8:	46a0      	mov	r8, r4
 8002cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	dc00      	bgt.n	8002d02 <__aeabi_dsub+0x172>
 8002d00:	e2d0      	b.n	80032a4 <__aeabi_dsub+0x714>
 8002d02:	4649      	mov	r1, r9
 8002d04:	2900      	cmp	r1, #0
 8002d06:	d000      	beq.n	8002d0a <__aeabi_dsub+0x17a>
 8002d08:	e0d4      	b.n	8002eb4 <__aeabi_dsub+0x324>
 8002d0a:	4661      	mov	r1, ip
 8002d0c:	9b02      	ldr	r3, [sp, #8]
 8002d0e:	4319      	orrs	r1, r3
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x184>
 8002d12:	e12b      	b.n	8002f6c <__aeabi_dsub+0x3dc>
 8002d14:	1e69      	subs	r1, r5, #1
 8002d16:	2d01      	cmp	r5, #1
 8002d18:	d100      	bne.n	8002d1c <__aeabi_dsub+0x18c>
 8002d1a:	e1d9      	b.n	80030d0 <__aeabi_dsub+0x540>
 8002d1c:	4295      	cmp	r5, r2
 8002d1e:	d100      	bne.n	8002d22 <__aeabi_dsub+0x192>
 8002d20:	e10a      	b.n	8002f38 <__aeabi_dsub+0x3a8>
 8002d22:	2501      	movs	r5, #1
 8002d24:	2938      	cmp	r1, #56	@ 0x38
 8002d26:	dc17      	bgt.n	8002d58 <__aeabi_dsub+0x1c8>
 8002d28:	468a      	mov	sl, r1
 8002d2a:	4653      	mov	r3, sl
 8002d2c:	2b1f      	cmp	r3, #31
 8002d2e:	dd00      	ble.n	8002d32 <__aeabi_dsub+0x1a2>
 8002d30:	e1e7      	b.n	8003102 <__aeabi_dsub+0x572>
 8002d32:	2220      	movs	r2, #32
 8002d34:	1ad2      	subs	r2, r2, r3
 8002d36:	9b02      	ldr	r3, [sp, #8]
 8002d38:	4661      	mov	r1, ip
 8002d3a:	4093      	lsls	r3, r2
 8002d3c:	001d      	movs	r5, r3
 8002d3e:	4653      	mov	r3, sl
 8002d40:	40d9      	lsrs	r1, r3
 8002d42:	4663      	mov	r3, ip
 8002d44:	4093      	lsls	r3, r2
 8002d46:	001a      	movs	r2, r3
 8002d48:	430d      	orrs	r5, r1
 8002d4a:	1e51      	subs	r1, r2, #1
 8002d4c:	418a      	sbcs	r2, r1
 8002d4e:	4653      	mov	r3, sl
 8002d50:	4315      	orrs	r5, r2
 8002d52:	9a02      	ldr	r2, [sp, #8]
 8002d54:	40da      	lsrs	r2, r3
 8002d56:	18a4      	adds	r4, r4, r2
 8002d58:	182d      	adds	r5, r5, r0
 8002d5a:	4285      	cmp	r5, r0
 8002d5c:	4180      	sbcs	r0, r0
 8002d5e:	4240      	negs	r0, r0
 8002d60:	1824      	adds	r4, r4, r0
 8002d62:	0223      	lsls	r3, r4, #8
 8002d64:	d400      	bmi.n	8002d68 <__aeabi_dsub+0x1d8>
 8002d66:	e0b6      	b.n	8002ed6 <__aeabi_dsub+0x346>
 8002d68:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee4 <__aeabi_dsub+0x354>)
 8002d6a:	3701      	adds	r7, #1
 8002d6c:	429f      	cmp	r7, r3
 8002d6e:	d100      	bne.n	8002d72 <__aeabi_dsub+0x1e2>
 8002d70:	e0ad      	b.n	8002ece <__aeabi_dsub+0x33e>
 8002d72:	2101      	movs	r1, #1
 8002d74:	4b5c      	ldr	r3, [pc, #368]	@ (8002ee8 <__aeabi_dsub+0x358>)
 8002d76:	086a      	lsrs	r2, r5, #1
 8002d78:	401c      	ands	r4, r3
 8002d7a:	4029      	ands	r1, r5
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	07e5      	lsls	r5, r4, #31
 8002d80:	4315      	orrs	r5, r2
 8002d82:	0864      	lsrs	r4, r4, #1
 8002d84:	e78d      	b.n	8002ca2 <__aeabi_dsub+0x112>
 8002d86:	4a59      	ldr	r2, [pc, #356]	@ (8002eec <__aeabi_dsub+0x35c>)
 8002d88:	9b02      	ldr	r3, [sp, #8]
 8002d8a:	4692      	mov	sl, r2
 8002d8c:	4662      	mov	r2, ip
 8002d8e:	44ba      	add	sl, r7
 8002d90:	431a      	orrs	r2, r3
 8002d92:	d02c      	beq.n	8002dee <__aeabi_dsub+0x25e>
 8002d94:	428e      	cmp	r6, r1
 8002d96:	d02e      	beq.n	8002df6 <__aeabi_dsub+0x266>
 8002d98:	4652      	mov	r2, sl
 8002d9a:	2a00      	cmp	r2, #0
 8002d9c:	d060      	beq.n	8002e60 <__aeabi_dsub+0x2d0>
 8002d9e:	2f00      	cmp	r7, #0
 8002da0:	d100      	bne.n	8002da4 <__aeabi_dsub+0x214>
 8002da2:	e0db      	b.n	8002f5c <__aeabi_dsub+0x3cc>
 8002da4:	4663      	mov	r3, ip
 8002da6:	000e      	movs	r6, r1
 8002da8:	9c02      	ldr	r4, [sp, #8]
 8002daa:	08d8      	lsrs	r0, r3, #3
 8002dac:	0762      	lsls	r2, r4, #29
 8002dae:	4302      	orrs	r2, r0
 8002db0:	08e4      	lsrs	r4, r4, #3
 8002db2:	0013      	movs	r3, r2
 8002db4:	4323      	orrs	r3, r4
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x22a>
 8002db8:	e254      	b.n	8003264 <__aeabi_dsub+0x6d4>
 8002dba:	2580      	movs	r5, #128	@ 0x80
 8002dbc:	032d      	lsls	r5, r5, #12
 8002dbe:	4325      	orrs	r5, r4
 8002dc0:	032d      	lsls	r5, r5, #12
 8002dc2:	4c48      	ldr	r4, [pc, #288]	@ (8002ee4 <__aeabi_dsub+0x354>)
 8002dc4:	0b2d      	lsrs	r5, r5, #12
 8002dc6:	e78c      	b.n	8002ce2 <__aeabi_dsub+0x152>
 8002dc8:	4661      	mov	r1, ip
 8002dca:	9b02      	ldr	r3, [sp, #8]
 8002dcc:	4319      	orrs	r1, r3
 8002dce:	d100      	bne.n	8002dd2 <__aeabi_dsub+0x242>
 8002dd0:	e0cc      	b.n	8002f6c <__aeabi_dsub+0x3dc>
 8002dd2:	0029      	movs	r1, r5
 8002dd4:	3901      	subs	r1, #1
 8002dd6:	2d01      	cmp	r5, #1
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x24c>
 8002dda:	e188      	b.n	80030ee <__aeabi_dsub+0x55e>
 8002ddc:	4295      	cmp	r5, r2
 8002dde:	d100      	bne.n	8002de2 <__aeabi_dsub+0x252>
 8002de0:	e0aa      	b.n	8002f38 <__aeabi_dsub+0x3a8>
 8002de2:	2501      	movs	r5, #1
 8002de4:	2938      	cmp	r1, #56	@ 0x38
 8002de6:	dd00      	ble.n	8002dea <__aeabi_dsub+0x25a>
 8002de8:	e72f      	b.n	8002c4a <__aeabi_dsub+0xba>
 8002dea:	468a      	mov	sl, r1
 8002dec:	e718      	b.n	8002c20 <__aeabi_dsub+0x90>
 8002dee:	2201      	movs	r2, #1
 8002df0:	4051      	eors	r1, r2
 8002df2:	428e      	cmp	r6, r1
 8002df4:	d1d0      	bne.n	8002d98 <__aeabi_dsub+0x208>
 8002df6:	4653      	mov	r3, sl
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d100      	bne.n	8002dfe <__aeabi_dsub+0x26e>
 8002dfc:	e0be      	b.n	8002f7c <__aeabi_dsub+0x3ec>
 8002dfe:	2f00      	cmp	r7, #0
 8002e00:	d000      	beq.n	8002e04 <__aeabi_dsub+0x274>
 8002e02:	e138      	b.n	8003076 <__aeabi_dsub+0x4e6>
 8002e04:	46ca      	mov	sl, r9
 8002e06:	0022      	movs	r2, r4
 8002e08:	4302      	orrs	r2, r0
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x27e>
 8002e0c:	e1e2      	b.n	80031d4 <__aeabi_dsub+0x644>
 8002e0e:	4653      	mov	r3, sl
 8002e10:	1e59      	subs	r1, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x288>
 8002e16:	e20d      	b.n	8003234 <__aeabi_dsub+0x6a4>
 8002e18:	4a32      	ldr	r2, [pc, #200]	@ (8002ee4 <__aeabi_dsub+0x354>)
 8002e1a:	4592      	cmp	sl, r2
 8002e1c:	d100      	bne.n	8002e20 <__aeabi_dsub+0x290>
 8002e1e:	e1d2      	b.n	80031c6 <__aeabi_dsub+0x636>
 8002e20:	2701      	movs	r7, #1
 8002e22:	2938      	cmp	r1, #56	@ 0x38
 8002e24:	dc13      	bgt.n	8002e4e <__aeabi_dsub+0x2be>
 8002e26:	291f      	cmp	r1, #31
 8002e28:	dd00      	ble.n	8002e2c <__aeabi_dsub+0x29c>
 8002e2a:	e1ee      	b.n	800320a <__aeabi_dsub+0x67a>
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	9b02      	ldr	r3, [sp, #8]
 8002e30:	1a52      	subs	r2, r2, r1
 8002e32:	0025      	movs	r5, r4
 8002e34:	0007      	movs	r7, r0
 8002e36:	469a      	mov	sl, r3
 8002e38:	40cc      	lsrs	r4, r1
 8002e3a:	4090      	lsls	r0, r2
 8002e3c:	4095      	lsls	r5, r2
 8002e3e:	40cf      	lsrs	r7, r1
 8002e40:	44a2      	add	sl, r4
 8002e42:	1e42      	subs	r2, r0, #1
 8002e44:	4190      	sbcs	r0, r2
 8002e46:	4653      	mov	r3, sl
 8002e48:	432f      	orrs	r7, r5
 8002e4a:	4307      	orrs	r7, r0
 8002e4c:	9302      	str	r3, [sp, #8]
 8002e4e:	003d      	movs	r5, r7
 8002e50:	4465      	add	r5, ip
 8002e52:	4565      	cmp	r5, ip
 8002e54:	4192      	sbcs	r2, r2
 8002e56:	9b02      	ldr	r3, [sp, #8]
 8002e58:	4252      	negs	r2, r2
 8002e5a:	464f      	mov	r7, r9
 8002e5c:	18d4      	adds	r4, r2, r3
 8002e5e:	e780      	b.n	8002d62 <__aeabi_dsub+0x1d2>
 8002e60:	4a23      	ldr	r2, [pc, #140]	@ (8002ef0 <__aeabi_dsub+0x360>)
 8002e62:	1c7d      	adds	r5, r7, #1
 8002e64:	4215      	tst	r5, r2
 8002e66:	d000      	beq.n	8002e6a <__aeabi_dsub+0x2da>
 8002e68:	e0aa      	b.n	8002fc0 <__aeabi_dsub+0x430>
 8002e6a:	4662      	mov	r2, ip
 8002e6c:	0025      	movs	r5, r4
 8002e6e:	9b02      	ldr	r3, [sp, #8]
 8002e70:	4305      	orrs	r5, r0
 8002e72:	431a      	orrs	r2, r3
 8002e74:	2f00      	cmp	r7, #0
 8002e76:	d000      	beq.n	8002e7a <__aeabi_dsub+0x2ea>
 8002e78:	e0f5      	b.n	8003066 <__aeabi_dsub+0x4d6>
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	d100      	bne.n	8002e80 <__aeabi_dsub+0x2f0>
 8002e7e:	e16b      	b.n	8003158 <__aeabi_dsub+0x5c8>
 8002e80:	2a00      	cmp	r2, #0
 8002e82:	d100      	bne.n	8002e86 <__aeabi_dsub+0x2f6>
 8002e84:	e152      	b.n	800312c <__aeabi_dsub+0x59c>
 8002e86:	4663      	mov	r3, ip
 8002e88:	1ac5      	subs	r5, r0, r3
 8002e8a:	9b02      	ldr	r3, [sp, #8]
 8002e8c:	1ae2      	subs	r2, r4, r3
 8002e8e:	42a8      	cmp	r0, r5
 8002e90:	419b      	sbcs	r3, r3
 8002e92:	425b      	negs	r3, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	021a      	lsls	r2, r3, #8
 8002e98:	d400      	bmi.n	8002e9c <__aeabi_dsub+0x30c>
 8002e9a:	e1d5      	b.n	8003248 <__aeabi_dsub+0x6b8>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	1a1d      	subs	r5, r3, r0
 8002ea0:	45ac      	cmp	ip, r5
 8002ea2:	4192      	sbcs	r2, r2
 8002ea4:	2601      	movs	r6, #1
 8002ea6:	9b02      	ldr	r3, [sp, #8]
 8002ea8:	4252      	negs	r2, r2
 8002eaa:	1b1c      	subs	r4, r3, r4
 8002eac:	4688      	mov	r8, r1
 8002eae:	1aa4      	subs	r4, r4, r2
 8002eb0:	400e      	ands	r6, r1
 8002eb2:	e6f6      	b.n	8002ca2 <__aeabi_dsub+0x112>
 8002eb4:	4297      	cmp	r7, r2
 8002eb6:	d03f      	beq.n	8002f38 <__aeabi_dsub+0x3a8>
 8002eb8:	4652      	mov	r2, sl
 8002eba:	2501      	movs	r5, #1
 8002ebc:	2a38      	cmp	r2, #56	@ 0x38
 8002ebe:	dd00      	ble.n	8002ec2 <__aeabi_dsub+0x332>
 8002ec0:	e74a      	b.n	8002d58 <__aeabi_dsub+0x1c8>
 8002ec2:	2280      	movs	r2, #128	@ 0x80
 8002ec4:	9b02      	ldr	r3, [sp, #8]
 8002ec6:	0412      	lsls	r2, r2, #16
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	e72d      	b.n	8002d2a <__aeabi_dsub+0x19a>
 8002ece:	003c      	movs	r4, r7
 8002ed0:	2500      	movs	r5, #0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	e705      	b.n	8002ce2 <__aeabi_dsub+0x152>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	402b      	ands	r3, r5
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d000      	beq.n	8002ee0 <__aeabi_dsub+0x350>
 8002ede:	e6e2      	b.n	8002ca6 <__aeabi_dsub+0x116>
 8002ee0:	e06b      	b.n	8002fba <__aeabi_dsub+0x42a>
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	000007ff 	.word	0x000007ff
 8002ee8:	ff7fffff 	.word	0xff7fffff
 8002eec:	fffff801 	.word	0xfffff801
 8002ef0:	000007fe 	.word	0x000007fe
 8002ef4:	0028      	movs	r0, r5
 8002ef6:	f000 fb63 	bl	80035c0 <__clzsi2>
 8002efa:	0003      	movs	r3, r0
 8002efc:	3318      	adds	r3, #24
 8002efe:	2b1f      	cmp	r3, #31
 8002f00:	dc00      	bgt.n	8002f04 <__aeabi_dsub+0x374>
 8002f02:	e6b4      	b.n	8002c6e <__aeabi_dsub+0xde>
 8002f04:	002a      	movs	r2, r5
 8002f06:	3808      	subs	r0, #8
 8002f08:	4082      	lsls	r2, r0
 8002f0a:	429f      	cmp	r7, r3
 8002f0c:	dd00      	ble.n	8002f10 <__aeabi_dsub+0x380>
 8002f0e:	e0b9      	b.n	8003084 <__aeabi_dsub+0x4f4>
 8002f10:	1bdb      	subs	r3, r3, r7
 8002f12:	1c58      	adds	r0, r3, #1
 8002f14:	281f      	cmp	r0, #31
 8002f16:	dc00      	bgt.n	8002f1a <__aeabi_dsub+0x38a>
 8002f18:	e1a0      	b.n	800325c <__aeabi_dsub+0x6cc>
 8002f1a:	0015      	movs	r5, r2
 8002f1c:	3b1f      	subs	r3, #31
 8002f1e:	40dd      	lsrs	r5, r3
 8002f20:	2820      	cmp	r0, #32
 8002f22:	d005      	beq.n	8002f30 <__aeabi_dsub+0x3a0>
 8002f24:	2340      	movs	r3, #64	@ 0x40
 8002f26:	1a1b      	subs	r3, r3, r0
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	1e53      	subs	r3, r2, #1
 8002f2c:	419a      	sbcs	r2, r3
 8002f2e:	4315      	orrs	r5, r2
 8002f30:	2307      	movs	r3, #7
 8002f32:	2700      	movs	r7, #0
 8002f34:	402b      	ands	r3, r5
 8002f36:	e7d0      	b.n	8002eda <__aeabi_dsub+0x34a>
 8002f38:	08c0      	lsrs	r0, r0, #3
 8002f3a:	0762      	lsls	r2, r4, #29
 8002f3c:	4302      	orrs	r2, r0
 8002f3e:	08e4      	lsrs	r4, r4, #3
 8002f40:	e737      	b.n	8002db2 <__aeabi_dsub+0x222>
 8002f42:	08ea      	lsrs	r2, r5, #3
 8002f44:	0763      	lsls	r3, r4, #29
 8002f46:	431a      	orrs	r2, r3
 8002f48:	4bd3      	ldr	r3, [pc, #844]	@ (8003298 <__aeabi_dsub+0x708>)
 8002f4a:	08e4      	lsrs	r4, r4, #3
 8002f4c:	429f      	cmp	r7, r3
 8002f4e:	d100      	bne.n	8002f52 <__aeabi_dsub+0x3c2>
 8002f50:	e72f      	b.n	8002db2 <__aeabi_dsub+0x222>
 8002f52:	0324      	lsls	r4, r4, #12
 8002f54:	0b25      	lsrs	r5, r4, #12
 8002f56:	057c      	lsls	r4, r7, #21
 8002f58:	0d64      	lsrs	r4, r4, #21
 8002f5a:	e6c2      	b.n	8002ce2 <__aeabi_dsub+0x152>
 8002f5c:	46ca      	mov	sl, r9
 8002f5e:	0022      	movs	r2, r4
 8002f60:	4302      	orrs	r2, r0
 8002f62:	d158      	bne.n	8003016 <__aeabi_dsub+0x486>
 8002f64:	4663      	mov	r3, ip
 8002f66:	000e      	movs	r6, r1
 8002f68:	9c02      	ldr	r4, [sp, #8]
 8002f6a:	9303      	str	r3, [sp, #12]
 8002f6c:	9b03      	ldr	r3, [sp, #12]
 8002f6e:	4657      	mov	r7, sl
 8002f70:	08da      	lsrs	r2, r3, #3
 8002f72:	e7e7      	b.n	8002f44 <__aeabi_dsub+0x3b4>
 8002f74:	4cc9      	ldr	r4, [pc, #804]	@ (800329c <__aeabi_dsub+0x70c>)
 8002f76:	1aff      	subs	r7, r7, r3
 8002f78:	4014      	ands	r4, r2
 8002f7a:	e692      	b.n	8002ca2 <__aeabi_dsub+0x112>
 8002f7c:	4dc8      	ldr	r5, [pc, #800]	@ (80032a0 <__aeabi_dsub+0x710>)
 8002f7e:	1c7a      	adds	r2, r7, #1
 8002f80:	422a      	tst	r2, r5
 8002f82:	d000      	beq.n	8002f86 <__aeabi_dsub+0x3f6>
 8002f84:	e084      	b.n	8003090 <__aeabi_dsub+0x500>
 8002f86:	0022      	movs	r2, r4
 8002f88:	4302      	orrs	r2, r0
 8002f8a:	2f00      	cmp	r7, #0
 8002f8c:	d000      	beq.n	8002f90 <__aeabi_dsub+0x400>
 8002f8e:	e0ef      	b.n	8003170 <__aeabi_dsub+0x5e0>
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x406>
 8002f94:	e0e5      	b.n	8003162 <__aeabi_dsub+0x5d2>
 8002f96:	4662      	mov	r2, ip
 8002f98:	9902      	ldr	r1, [sp, #8]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	d100      	bne.n	8002fa0 <__aeabi_dsub+0x410>
 8002f9e:	e0c5      	b.n	800312c <__aeabi_dsub+0x59c>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	18c5      	adds	r5, r0, r3
 8002fa4:	468c      	mov	ip, r1
 8002fa6:	4285      	cmp	r5, r0
 8002fa8:	4180      	sbcs	r0, r0
 8002faa:	4464      	add	r4, ip
 8002fac:	4240      	negs	r0, r0
 8002fae:	1824      	adds	r4, r4, r0
 8002fb0:	0223      	lsls	r3, r4, #8
 8002fb2:	d502      	bpl.n	8002fba <__aeabi_dsub+0x42a>
 8002fb4:	4bb9      	ldr	r3, [pc, #740]	@ (800329c <__aeabi_dsub+0x70c>)
 8002fb6:	3701      	adds	r7, #1
 8002fb8:	401c      	ands	r4, r3
 8002fba:	46ba      	mov	sl, r7
 8002fbc:	9503      	str	r5, [sp, #12]
 8002fbe:	e7d5      	b.n	8002f6c <__aeabi_dsub+0x3dc>
 8002fc0:	4662      	mov	r2, ip
 8002fc2:	1a85      	subs	r5, r0, r2
 8002fc4:	42a8      	cmp	r0, r5
 8002fc6:	4192      	sbcs	r2, r2
 8002fc8:	4252      	negs	r2, r2
 8002fca:	4691      	mov	r9, r2
 8002fcc:	9b02      	ldr	r3, [sp, #8]
 8002fce:	1ae3      	subs	r3, r4, r3
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	464b      	mov	r3, r9
 8002fd4:	1ad2      	subs	r2, r2, r3
 8002fd6:	0013      	movs	r3, r2
 8002fd8:	4691      	mov	r9, r2
 8002fda:	021a      	lsls	r2, r3, #8
 8002fdc:	d46c      	bmi.n	80030b8 <__aeabi_dsub+0x528>
 8002fde:	464a      	mov	r2, r9
 8002fe0:	464c      	mov	r4, r9
 8002fe2:	432a      	orrs	r2, r5
 8002fe4:	d000      	beq.n	8002fe8 <__aeabi_dsub+0x458>
 8002fe6:	e63a      	b.n	8002c5e <__aeabi_dsub+0xce>
 8002fe8:	2600      	movs	r6, #0
 8002fea:	2400      	movs	r4, #0
 8002fec:	2500      	movs	r5, #0
 8002fee:	e678      	b.n	8002ce2 <__aeabi_dsub+0x152>
 8002ff0:	9902      	ldr	r1, [sp, #8]
 8002ff2:	4653      	mov	r3, sl
 8002ff4:	000d      	movs	r5, r1
 8002ff6:	3a20      	subs	r2, #32
 8002ff8:	40d5      	lsrs	r5, r2
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d006      	beq.n	800300c <__aeabi_dsub+0x47c>
 8002ffe:	2240      	movs	r2, #64	@ 0x40
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	000b      	movs	r3, r1
 8003004:	4093      	lsls	r3, r2
 8003006:	4662      	mov	r2, ip
 8003008:	431a      	orrs	r2, r3
 800300a:	4693      	mov	fp, r2
 800300c:	465b      	mov	r3, fp
 800300e:	1e5a      	subs	r2, r3, #1
 8003010:	4193      	sbcs	r3, r2
 8003012:	431d      	orrs	r5, r3
 8003014:	e619      	b.n	8002c4a <__aeabi_dsub+0xba>
 8003016:	4653      	mov	r3, sl
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d100      	bne.n	8003020 <__aeabi_dsub+0x490>
 800301e:	e0c6      	b.n	80031ae <__aeabi_dsub+0x61e>
 8003020:	4e9d      	ldr	r6, [pc, #628]	@ (8003298 <__aeabi_dsub+0x708>)
 8003022:	45b2      	cmp	sl, r6
 8003024:	d100      	bne.n	8003028 <__aeabi_dsub+0x498>
 8003026:	e6bd      	b.n	8002da4 <__aeabi_dsub+0x214>
 8003028:	4688      	mov	r8, r1
 800302a:	000e      	movs	r6, r1
 800302c:	2501      	movs	r5, #1
 800302e:	2a38      	cmp	r2, #56	@ 0x38
 8003030:	dc10      	bgt.n	8003054 <__aeabi_dsub+0x4c4>
 8003032:	2a1f      	cmp	r2, #31
 8003034:	dc7f      	bgt.n	8003136 <__aeabi_dsub+0x5a6>
 8003036:	2120      	movs	r1, #32
 8003038:	0025      	movs	r5, r4
 800303a:	1a89      	subs	r1, r1, r2
 800303c:	0007      	movs	r7, r0
 800303e:	4088      	lsls	r0, r1
 8003040:	408d      	lsls	r5, r1
 8003042:	40d7      	lsrs	r7, r2
 8003044:	40d4      	lsrs	r4, r2
 8003046:	1e41      	subs	r1, r0, #1
 8003048:	4188      	sbcs	r0, r1
 800304a:	9b02      	ldr	r3, [sp, #8]
 800304c:	433d      	orrs	r5, r7
 800304e:	1b1b      	subs	r3, r3, r4
 8003050:	4305      	orrs	r5, r0
 8003052:	9302      	str	r3, [sp, #8]
 8003054:	4662      	mov	r2, ip
 8003056:	1b55      	subs	r5, r2, r5
 8003058:	45ac      	cmp	ip, r5
 800305a:	4192      	sbcs	r2, r2
 800305c:	9b02      	ldr	r3, [sp, #8]
 800305e:	4252      	negs	r2, r2
 8003060:	464f      	mov	r7, r9
 8003062:	1a9c      	subs	r4, r3, r2
 8003064:	e5f6      	b.n	8002c54 <__aeabi_dsub+0xc4>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d000      	beq.n	800306c <__aeabi_dsub+0x4dc>
 800306a:	e0b7      	b.n	80031dc <__aeabi_dsub+0x64c>
 800306c:	2a00      	cmp	r2, #0
 800306e:	d100      	bne.n	8003072 <__aeabi_dsub+0x4e2>
 8003070:	e0f0      	b.n	8003254 <__aeabi_dsub+0x6c4>
 8003072:	2601      	movs	r6, #1
 8003074:	400e      	ands	r6, r1
 8003076:	4663      	mov	r3, ip
 8003078:	9802      	ldr	r0, [sp, #8]
 800307a:	08d9      	lsrs	r1, r3, #3
 800307c:	0742      	lsls	r2, r0, #29
 800307e:	430a      	orrs	r2, r1
 8003080:	08c4      	lsrs	r4, r0, #3
 8003082:	e696      	b.n	8002db2 <__aeabi_dsub+0x222>
 8003084:	4c85      	ldr	r4, [pc, #532]	@ (800329c <__aeabi_dsub+0x70c>)
 8003086:	1aff      	subs	r7, r7, r3
 8003088:	4014      	ands	r4, r2
 800308a:	0762      	lsls	r2, r4, #29
 800308c:	08e4      	lsrs	r4, r4, #3
 800308e:	e760      	b.n	8002f52 <__aeabi_dsub+0x3c2>
 8003090:	4981      	ldr	r1, [pc, #516]	@ (8003298 <__aeabi_dsub+0x708>)
 8003092:	428a      	cmp	r2, r1
 8003094:	d100      	bne.n	8003098 <__aeabi_dsub+0x508>
 8003096:	e0c9      	b.n	800322c <__aeabi_dsub+0x69c>
 8003098:	4663      	mov	r3, ip
 800309a:	18c1      	adds	r1, r0, r3
 800309c:	4281      	cmp	r1, r0
 800309e:	4180      	sbcs	r0, r0
 80030a0:	9b02      	ldr	r3, [sp, #8]
 80030a2:	4240      	negs	r0, r0
 80030a4:	18e3      	adds	r3, r4, r3
 80030a6:	181b      	adds	r3, r3, r0
 80030a8:	07dd      	lsls	r5, r3, #31
 80030aa:	085c      	lsrs	r4, r3, #1
 80030ac:	2307      	movs	r3, #7
 80030ae:	0849      	lsrs	r1, r1, #1
 80030b0:	430d      	orrs	r5, r1
 80030b2:	0017      	movs	r7, r2
 80030b4:	402b      	ands	r3, r5
 80030b6:	e710      	b.n	8002eda <__aeabi_dsub+0x34a>
 80030b8:	4663      	mov	r3, ip
 80030ba:	1a1d      	subs	r5, r3, r0
 80030bc:	45ac      	cmp	ip, r5
 80030be:	4192      	sbcs	r2, r2
 80030c0:	2601      	movs	r6, #1
 80030c2:	9b02      	ldr	r3, [sp, #8]
 80030c4:	4252      	negs	r2, r2
 80030c6:	1b1c      	subs	r4, r3, r4
 80030c8:	4688      	mov	r8, r1
 80030ca:	1aa4      	subs	r4, r4, r2
 80030cc:	400e      	ands	r6, r1
 80030ce:	e5c6      	b.n	8002c5e <__aeabi_dsub+0xce>
 80030d0:	4663      	mov	r3, ip
 80030d2:	18c5      	adds	r5, r0, r3
 80030d4:	9b02      	ldr	r3, [sp, #8]
 80030d6:	4285      	cmp	r5, r0
 80030d8:	4180      	sbcs	r0, r0
 80030da:	469c      	mov	ip, r3
 80030dc:	4240      	negs	r0, r0
 80030de:	4464      	add	r4, ip
 80030e0:	1824      	adds	r4, r4, r0
 80030e2:	2701      	movs	r7, #1
 80030e4:	0223      	lsls	r3, r4, #8
 80030e6:	d400      	bmi.n	80030ea <__aeabi_dsub+0x55a>
 80030e8:	e6f5      	b.n	8002ed6 <__aeabi_dsub+0x346>
 80030ea:	2702      	movs	r7, #2
 80030ec:	e641      	b.n	8002d72 <__aeabi_dsub+0x1e2>
 80030ee:	4663      	mov	r3, ip
 80030f0:	1ac5      	subs	r5, r0, r3
 80030f2:	42a8      	cmp	r0, r5
 80030f4:	4180      	sbcs	r0, r0
 80030f6:	9b02      	ldr	r3, [sp, #8]
 80030f8:	4240      	negs	r0, r0
 80030fa:	1ae4      	subs	r4, r4, r3
 80030fc:	2701      	movs	r7, #1
 80030fe:	1a24      	subs	r4, r4, r0
 8003100:	e5a8      	b.n	8002c54 <__aeabi_dsub+0xc4>
 8003102:	9d02      	ldr	r5, [sp, #8]
 8003104:	4652      	mov	r2, sl
 8003106:	002b      	movs	r3, r5
 8003108:	3a20      	subs	r2, #32
 800310a:	40d3      	lsrs	r3, r2
 800310c:	0019      	movs	r1, r3
 800310e:	4653      	mov	r3, sl
 8003110:	2b20      	cmp	r3, #32
 8003112:	d006      	beq.n	8003122 <__aeabi_dsub+0x592>
 8003114:	2240      	movs	r2, #64	@ 0x40
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	002b      	movs	r3, r5
 800311a:	4093      	lsls	r3, r2
 800311c:	4662      	mov	r2, ip
 800311e:	431a      	orrs	r2, r3
 8003120:	4693      	mov	fp, r2
 8003122:	465d      	mov	r5, fp
 8003124:	1e6b      	subs	r3, r5, #1
 8003126:	419d      	sbcs	r5, r3
 8003128:	430d      	orrs	r5, r1
 800312a:	e615      	b.n	8002d58 <__aeabi_dsub+0x1c8>
 800312c:	0762      	lsls	r2, r4, #29
 800312e:	08c0      	lsrs	r0, r0, #3
 8003130:	4302      	orrs	r2, r0
 8003132:	08e4      	lsrs	r4, r4, #3
 8003134:	e70d      	b.n	8002f52 <__aeabi_dsub+0x3c2>
 8003136:	0011      	movs	r1, r2
 8003138:	0027      	movs	r7, r4
 800313a:	3920      	subs	r1, #32
 800313c:	40cf      	lsrs	r7, r1
 800313e:	2a20      	cmp	r2, #32
 8003140:	d005      	beq.n	800314e <__aeabi_dsub+0x5be>
 8003142:	2140      	movs	r1, #64	@ 0x40
 8003144:	1a8a      	subs	r2, r1, r2
 8003146:	4094      	lsls	r4, r2
 8003148:	0025      	movs	r5, r4
 800314a:	4305      	orrs	r5, r0
 800314c:	9503      	str	r5, [sp, #12]
 800314e:	9d03      	ldr	r5, [sp, #12]
 8003150:	1e6a      	subs	r2, r5, #1
 8003152:	4195      	sbcs	r5, r2
 8003154:	433d      	orrs	r5, r7
 8003156:	e77d      	b.n	8003054 <__aeabi_dsub+0x4c4>
 8003158:	2a00      	cmp	r2, #0
 800315a:	d100      	bne.n	800315e <__aeabi_dsub+0x5ce>
 800315c:	e744      	b.n	8002fe8 <__aeabi_dsub+0x458>
 800315e:	2601      	movs	r6, #1
 8003160:	400e      	ands	r6, r1
 8003162:	4663      	mov	r3, ip
 8003164:	08d9      	lsrs	r1, r3, #3
 8003166:	9b02      	ldr	r3, [sp, #8]
 8003168:	075a      	lsls	r2, r3, #29
 800316a:	430a      	orrs	r2, r1
 800316c:	08dc      	lsrs	r4, r3, #3
 800316e:	e6f0      	b.n	8002f52 <__aeabi_dsub+0x3c2>
 8003170:	2a00      	cmp	r2, #0
 8003172:	d028      	beq.n	80031c6 <__aeabi_dsub+0x636>
 8003174:	4662      	mov	r2, ip
 8003176:	9f02      	ldr	r7, [sp, #8]
 8003178:	08c0      	lsrs	r0, r0, #3
 800317a:	433a      	orrs	r2, r7
 800317c:	d100      	bne.n	8003180 <__aeabi_dsub+0x5f0>
 800317e:	e6dc      	b.n	8002f3a <__aeabi_dsub+0x3aa>
 8003180:	0762      	lsls	r2, r4, #29
 8003182:	4310      	orrs	r0, r2
 8003184:	2280      	movs	r2, #128	@ 0x80
 8003186:	08e4      	lsrs	r4, r4, #3
 8003188:	0312      	lsls	r2, r2, #12
 800318a:	4214      	tst	r4, r2
 800318c:	d009      	beq.n	80031a2 <__aeabi_dsub+0x612>
 800318e:	08fd      	lsrs	r5, r7, #3
 8003190:	4215      	tst	r5, r2
 8003192:	d106      	bne.n	80031a2 <__aeabi_dsub+0x612>
 8003194:	4663      	mov	r3, ip
 8003196:	2601      	movs	r6, #1
 8003198:	002c      	movs	r4, r5
 800319a:	08d8      	lsrs	r0, r3, #3
 800319c:	077b      	lsls	r3, r7, #29
 800319e:	4318      	orrs	r0, r3
 80031a0:	400e      	ands	r6, r1
 80031a2:	0f42      	lsrs	r2, r0, #29
 80031a4:	00c0      	lsls	r0, r0, #3
 80031a6:	08c0      	lsrs	r0, r0, #3
 80031a8:	0752      	lsls	r2, r2, #29
 80031aa:	4302      	orrs	r2, r0
 80031ac:	e601      	b.n	8002db2 <__aeabi_dsub+0x222>
 80031ae:	4663      	mov	r3, ip
 80031b0:	1a1d      	subs	r5, r3, r0
 80031b2:	45ac      	cmp	ip, r5
 80031b4:	4192      	sbcs	r2, r2
 80031b6:	9b02      	ldr	r3, [sp, #8]
 80031b8:	4252      	negs	r2, r2
 80031ba:	1b1c      	subs	r4, r3, r4
 80031bc:	000e      	movs	r6, r1
 80031be:	4688      	mov	r8, r1
 80031c0:	2701      	movs	r7, #1
 80031c2:	1aa4      	subs	r4, r4, r2
 80031c4:	e546      	b.n	8002c54 <__aeabi_dsub+0xc4>
 80031c6:	4663      	mov	r3, ip
 80031c8:	08d9      	lsrs	r1, r3, #3
 80031ca:	9b02      	ldr	r3, [sp, #8]
 80031cc:	075a      	lsls	r2, r3, #29
 80031ce:	430a      	orrs	r2, r1
 80031d0:	08dc      	lsrs	r4, r3, #3
 80031d2:	e5ee      	b.n	8002db2 <__aeabi_dsub+0x222>
 80031d4:	4663      	mov	r3, ip
 80031d6:	9c02      	ldr	r4, [sp, #8]
 80031d8:	9303      	str	r3, [sp, #12]
 80031da:	e6c7      	b.n	8002f6c <__aeabi_dsub+0x3dc>
 80031dc:	08c0      	lsrs	r0, r0, #3
 80031de:	2a00      	cmp	r2, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x654>
 80031e2:	e6aa      	b.n	8002f3a <__aeabi_dsub+0x3aa>
 80031e4:	0762      	lsls	r2, r4, #29
 80031e6:	4310      	orrs	r0, r2
 80031e8:	2280      	movs	r2, #128	@ 0x80
 80031ea:	08e4      	lsrs	r4, r4, #3
 80031ec:	0312      	lsls	r2, r2, #12
 80031ee:	4214      	tst	r4, r2
 80031f0:	d0d7      	beq.n	80031a2 <__aeabi_dsub+0x612>
 80031f2:	9f02      	ldr	r7, [sp, #8]
 80031f4:	08fd      	lsrs	r5, r7, #3
 80031f6:	4215      	tst	r5, r2
 80031f8:	d1d3      	bne.n	80031a2 <__aeabi_dsub+0x612>
 80031fa:	4663      	mov	r3, ip
 80031fc:	2601      	movs	r6, #1
 80031fe:	08d8      	lsrs	r0, r3, #3
 8003200:	077b      	lsls	r3, r7, #29
 8003202:	002c      	movs	r4, r5
 8003204:	4318      	orrs	r0, r3
 8003206:	400e      	ands	r6, r1
 8003208:	e7cb      	b.n	80031a2 <__aeabi_dsub+0x612>
 800320a:	000a      	movs	r2, r1
 800320c:	0027      	movs	r7, r4
 800320e:	3a20      	subs	r2, #32
 8003210:	40d7      	lsrs	r7, r2
 8003212:	2920      	cmp	r1, #32
 8003214:	d005      	beq.n	8003222 <__aeabi_dsub+0x692>
 8003216:	2240      	movs	r2, #64	@ 0x40
 8003218:	1a52      	subs	r2, r2, r1
 800321a:	4094      	lsls	r4, r2
 800321c:	0025      	movs	r5, r4
 800321e:	4305      	orrs	r5, r0
 8003220:	9503      	str	r5, [sp, #12]
 8003222:	9d03      	ldr	r5, [sp, #12]
 8003224:	1e6a      	subs	r2, r5, #1
 8003226:	4195      	sbcs	r5, r2
 8003228:	432f      	orrs	r7, r5
 800322a:	e610      	b.n	8002e4e <__aeabi_dsub+0x2be>
 800322c:	0014      	movs	r4, r2
 800322e:	2500      	movs	r5, #0
 8003230:	2200      	movs	r2, #0
 8003232:	e556      	b.n	8002ce2 <__aeabi_dsub+0x152>
 8003234:	9b02      	ldr	r3, [sp, #8]
 8003236:	4460      	add	r0, ip
 8003238:	4699      	mov	r9, r3
 800323a:	4560      	cmp	r0, ip
 800323c:	4192      	sbcs	r2, r2
 800323e:	444c      	add	r4, r9
 8003240:	4252      	negs	r2, r2
 8003242:	0005      	movs	r5, r0
 8003244:	18a4      	adds	r4, r4, r2
 8003246:	e74c      	b.n	80030e2 <__aeabi_dsub+0x552>
 8003248:	001a      	movs	r2, r3
 800324a:	001c      	movs	r4, r3
 800324c:	432a      	orrs	r2, r5
 800324e:	d000      	beq.n	8003252 <__aeabi_dsub+0x6c2>
 8003250:	e6b3      	b.n	8002fba <__aeabi_dsub+0x42a>
 8003252:	e6c9      	b.n	8002fe8 <__aeabi_dsub+0x458>
 8003254:	2480      	movs	r4, #128	@ 0x80
 8003256:	2600      	movs	r6, #0
 8003258:	0324      	lsls	r4, r4, #12
 800325a:	e5ae      	b.n	8002dba <__aeabi_dsub+0x22a>
 800325c:	2120      	movs	r1, #32
 800325e:	2500      	movs	r5, #0
 8003260:	1a09      	subs	r1, r1, r0
 8003262:	e517      	b.n	8002c94 <__aeabi_dsub+0x104>
 8003264:	2200      	movs	r2, #0
 8003266:	2500      	movs	r5, #0
 8003268:	4c0b      	ldr	r4, [pc, #44]	@ (8003298 <__aeabi_dsub+0x708>)
 800326a:	e53a      	b.n	8002ce2 <__aeabi_dsub+0x152>
 800326c:	2d00      	cmp	r5, #0
 800326e:	d100      	bne.n	8003272 <__aeabi_dsub+0x6e2>
 8003270:	e5f6      	b.n	8002e60 <__aeabi_dsub+0x2d0>
 8003272:	464b      	mov	r3, r9
 8003274:	1bda      	subs	r2, r3, r7
 8003276:	4692      	mov	sl, r2
 8003278:	2f00      	cmp	r7, #0
 800327a:	d100      	bne.n	800327e <__aeabi_dsub+0x6ee>
 800327c:	e66f      	b.n	8002f5e <__aeabi_dsub+0x3ce>
 800327e:	2a38      	cmp	r2, #56	@ 0x38
 8003280:	dc05      	bgt.n	800328e <__aeabi_dsub+0x6fe>
 8003282:	2680      	movs	r6, #128	@ 0x80
 8003284:	0436      	lsls	r6, r6, #16
 8003286:	4334      	orrs	r4, r6
 8003288:	4688      	mov	r8, r1
 800328a:	000e      	movs	r6, r1
 800328c:	e6d1      	b.n	8003032 <__aeabi_dsub+0x4a2>
 800328e:	4688      	mov	r8, r1
 8003290:	000e      	movs	r6, r1
 8003292:	2501      	movs	r5, #1
 8003294:	e6de      	b.n	8003054 <__aeabi_dsub+0x4c4>
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	000007ff 	.word	0x000007ff
 800329c:	ff7fffff 	.word	0xff7fffff
 80032a0:	000007fe 	.word	0x000007fe
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	d100      	bne.n	80032aa <__aeabi_dsub+0x71a>
 80032a8:	e668      	b.n	8002f7c <__aeabi_dsub+0x3ec>
 80032aa:	464b      	mov	r3, r9
 80032ac:	1bd9      	subs	r1, r3, r7
 80032ae:	2f00      	cmp	r7, #0
 80032b0:	d101      	bne.n	80032b6 <__aeabi_dsub+0x726>
 80032b2:	468a      	mov	sl, r1
 80032b4:	e5a7      	b.n	8002e06 <__aeabi_dsub+0x276>
 80032b6:	2701      	movs	r7, #1
 80032b8:	2938      	cmp	r1, #56	@ 0x38
 80032ba:	dd00      	ble.n	80032be <__aeabi_dsub+0x72e>
 80032bc:	e5c7      	b.n	8002e4e <__aeabi_dsub+0x2be>
 80032be:	2280      	movs	r2, #128	@ 0x80
 80032c0:	0412      	lsls	r2, r2, #16
 80032c2:	4314      	orrs	r4, r2
 80032c4:	e5af      	b.n	8002e26 <__aeabi_dsub+0x296>
 80032c6:	46c0      	nop			@ (mov r8, r8)

080032c8 <__aeabi_dcmpun>:
 80032c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ca:	46c6      	mov	lr, r8
 80032cc:	031e      	lsls	r6, r3, #12
 80032ce:	0b36      	lsrs	r6, r6, #12
 80032d0:	46b0      	mov	r8, r6
 80032d2:	4e0d      	ldr	r6, [pc, #52]	@ (8003308 <__aeabi_dcmpun+0x40>)
 80032d4:	030c      	lsls	r4, r1, #12
 80032d6:	004d      	lsls	r5, r1, #1
 80032d8:	005f      	lsls	r7, r3, #1
 80032da:	b500      	push	{lr}
 80032dc:	0b24      	lsrs	r4, r4, #12
 80032de:	0d6d      	lsrs	r5, r5, #21
 80032e0:	0d7f      	lsrs	r7, r7, #21
 80032e2:	42b5      	cmp	r5, r6
 80032e4:	d00b      	beq.n	80032fe <__aeabi_dcmpun+0x36>
 80032e6:	4908      	ldr	r1, [pc, #32]	@ (8003308 <__aeabi_dcmpun+0x40>)
 80032e8:	2000      	movs	r0, #0
 80032ea:	428f      	cmp	r7, r1
 80032ec:	d104      	bne.n	80032f8 <__aeabi_dcmpun+0x30>
 80032ee:	4646      	mov	r6, r8
 80032f0:	4316      	orrs	r6, r2
 80032f2:	0030      	movs	r0, r6
 80032f4:	1e43      	subs	r3, r0, #1
 80032f6:	4198      	sbcs	r0, r3
 80032f8:	bc80      	pop	{r7}
 80032fa:	46b8      	mov	r8, r7
 80032fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fe:	4304      	orrs	r4, r0
 8003300:	2001      	movs	r0, #1
 8003302:	2c00      	cmp	r4, #0
 8003304:	d1f8      	bne.n	80032f8 <__aeabi_dcmpun+0x30>
 8003306:	e7ee      	b.n	80032e6 <__aeabi_dcmpun+0x1e>
 8003308:	000007ff 	.word	0x000007ff

0800330c <__aeabi_d2iz>:
 800330c:	000b      	movs	r3, r1
 800330e:	0002      	movs	r2, r0
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	4d16      	ldr	r5, [pc, #88]	@ (800336c <__aeabi_d2iz+0x60>)
 8003314:	030c      	lsls	r4, r1, #12
 8003316:	b082      	sub	sp, #8
 8003318:	0049      	lsls	r1, r1, #1
 800331a:	2000      	movs	r0, #0
 800331c:	9200      	str	r2, [sp, #0]
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	0b24      	lsrs	r4, r4, #12
 8003322:	0d49      	lsrs	r1, r1, #21
 8003324:	0fde      	lsrs	r6, r3, #31
 8003326:	42a9      	cmp	r1, r5
 8003328:	dd04      	ble.n	8003334 <__aeabi_d2iz+0x28>
 800332a:	4811      	ldr	r0, [pc, #68]	@ (8003370 <__aeabi_d2iz+0x64>)
 800332c:	4281      	cmp	r1, r0
 800332e:	dd03      	ble.n	8003338 <__aeabi_d2iz+0x2c>
 8003330:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <__aeabi_d2iz+0x68>)
 8003332:	18f0      	adds	r0, r6, r3
 8003334:	b002      	add	sp, #8
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	2080      	movs	r0, #128	@ 0x80
 800333a:	0340      	lsls	r0, r0, #13
 800333c:	4320      	orrs	r0, r4
 800333e:	4c0e      	ldr	r4, [pc, #56]	@ (8003378 <__aeabi_d2iz+0x6c>)
 8003340:	1a64      	subs	r4, r4, r1
 8003342:	2c1f      	cmp	r4, #31
 8003344:	dd08      	ble.n	8003358 <__aeabi_d2iz+0x4c>
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <__aeabi_d2iz+0x70>)
 8003348:	1a5b      	subs	r3, r3, r1
 800334a:	40d8      	lsrs	r0, r3
 800334c:	0003      	movs	r3, r0
 800334e:	4258      	negs	r0, r3
 8003350:	2e00      	cmp	r6, #0
 8003352:	d1ef      	bne.n	8003334 <__aeabi_d2iz+0x28>
 8003354:	0018      	movs	r0, r3
 8003356:	e7ed      	b.n	8003334 <__aeabi_d2iz+0x28>
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <__aeabi_d2iz+0x74>)
 800335a:	9a00      	ldr	r2, [sp, #0]
 800335c:	469c      	mov	ip, r3
 800335e:	0003      	movs	r3, r0
 8003360:	4461      	add	r1, ip
 8003362:	408b      	lsls	r3, r1
 8003364:	40e2      	lsrs	r2, r4
 8003366:	4313      	orrs	r3, r2
 8003368:	e7f1      	b.n	800334e <__aeabi_d2iz+0x42>
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	000003fe 	.word	0x000003fe
 8003370:	0000041d 	.word	0x0000041d
 8003374:	7fffffff 	.word	0x7fffffff
 8003378:	00000433 	.word	0x00000433
 800337c:	00000413 	.word	0x00000413
 8003380:	fffffbed 	.word	0xfffffbed

08003384 <__aeabi_i2d>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	2800      	cmp	r0, #0
 8003388:	d016      	beq.n	80033b8 <__aeabi_i2d+0x34>
 800338a:	17c3      	asrs	r3, r0, #31
 800338c:	18c5      	adds	r5, r0, r3
 800338e:	405d      	eors	r5, r3
 8003390:	0fc4      	lsrs	r4, r0, #31
 8003392:	0028      	movs	r0, r5
 8003394:	f000 f914 	bl	80035c0 <__clzsi2>
 8003398:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <__aeabi_i2d+0x58>)
 800339a:	1a1b      	subs	r3, r3, r0
 800339c:	055b      	lsls	r3, r3, #21
 800339e:	0d5b      	lsrs	r3, r3, #21
 80033a0:	280a      	cmp	r0, #10
 80033a2:	dc14      	bgt.n	80033ce <__aeabi_i2d+0x4a>
 80033a4:	0002      	movs	r2, r0
 80033a6:	002e      	movs	r6, r5
 80033a8:	3215      	adds	r2, #21
 80033aa:	4096      	lsls	r6, r2
 80033ac:	220b      	movs	r2, #11
 80033ae:	1a12      	subs	r2, r2, r0
 80033b0:	40d5      	lsrs	r5, r2
 80033b2:	032d      	lsls	r5, r5, #12
 80033b4:	0b2d      	lsrs	r5, r5, #12
 80033b6:	e003      	b.n	80033c0 <__aeabi_i2d+0x3c>
 80033b8:	2400      	movs	r4, #0
 80033ba:	2300      	movs	r3, #0
 80033bc:	2500      	movs	r5, #0
 80033be:	2600      	movs	r6, #0
 80033c0:	051b      	lsls	r3, r3, #20
 80033c2:	432b      	orrs	r3, r5
 80033c4:	07e4      	lsls	r4, r4, #31
 80033c6:	4323      	orrs	r3, r4
 80033c8:	0030      	movs	r0, r6
 80033ca:	0019      	movs	r1, r3
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	380b      	subs	r0, #11
 80033d0:	4085      	lsls	r5, r0
 80033d2:	032d      	lsls	r5, r5, #12
 80033d4:	2600      	movs	r6, #0
 80033d6:	0b2d      	lsrs	r5, r5, #12
 80033d8:	e7f2      	b.n	80033c0 <__aeabi_i2d+0x3c>
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	0000041e 	.word	0x0000041e

080033e0 <__aeabi_ui2d>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	1e04      	subs	r4, r0, #0
 80033e4:	d010      	beq.n	8003408 <__aeabi_ui2d+0x28>
 80033e6:	f000 f8eb 	bl	80035c0 <__clzsi2>
 80033ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <__aeabi_ui2d+0x44>)
 80033ec:	1a1b      	subs	r3, r3, r0
 80033ee:	055b      	lsls	r3, r3, #21
 80033f0:	0d5b      	lsrs	r3, r3, #21
 80033f2:	280a      	cmp	r0, #10
 80033f4:	dc0f      	bgt.n	8003416 <__aeabi_ui2d+0x36>
 80033f6:	220b      	movs	r2, #11
 80033f8:	0021      	movs	r1, r4
 80033fa:	1a12      	subs	r2, r2, r0
 80033fc:	40d1      	lsrs	r1, r2
 80033fe:	3015      	adds	r0, #21
 8003400:	030a      	lsls	r2, r1, #12
 8003402:	4084      	lsls	r4, r0
 8003404:	0b12      	lsrs	r2, r2, #12
 8003406:	e001      	b.n	800340c <__aeabi_ui2d+0x2c>
 8003408:	2300      	movs	r3, #0
 800340a:	2200      	movs	r2, #0
 800340c:	051b      	lsls	r3, r3, #20
 800340e:	4313      	orrs	r3, r2
 8003410:	0020      	movs	r0, r4
 8003412:	0019      	movs	r1, r3
 8003414:	bd10      	pop	{r4, pc}
 8003416:	0022      	movs	r2, r4
 8003418:	380b      	subs	r0, #11
 800341a:	4082      	lsls	r2, r0
 800341c:	0312      	lsls	r2, r2, #12
 800341e:	2400      	movs	r4, #0
 8003420:	0b12      	lsrs	r2, r2, #12
 8003422:	e7f3      	b.n	800340c <__aeabi_ui2d+0x2c>
 8003424:	0000041e 	.word	0x0000041e

08003428 <__aeabi_f2d>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	0242      	lsls	r2, r0, #9
 800342c:	0043      	lsls	r3, r0, #1
 800342e:	0fc4      	lsrs	r4, r0, #31
 8003430:	20fe      	movs	r0, #254	@ 0xfe
 8003432:	0e1b      	lsrs	r3, r3, #24
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	0a55      	lsrs	r5, r2, #9
 8003438:	4208      	tst	r0, r1
 800343a:	d00c      	beq.n	8003456 <__aeabi_f2d+0x2e>
 800343c:	21e0      	movs	r1, #224	@ 0xe0
 800343e:	0089      	lsls	r1, r1, #2
 8003440:	468c      	mov	ip, r1
 8003442:	076d      	lsls	r5, r5, #29
 8003444:	0b12      	lsrs	r2, r2, #12
 8003446:	4463      	add	r3, ip
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	07e4      	lsls	r4, r4, #31
 800344e:	4323      	orrs	r3, r4
 8003450:	0028      	movs	r0, r5
 8003452:	0019      	movs	r1, r3
 8003454:	bd70      	pop	{r4, r5, r6, pc}
 8003456:	2b00      	cmp	r3, #0
 8003458:	d114      	bne.n	8003484 <__aeabi_f2d+0x5c>
 800345a:	2d00      	cmp	r5, #0
 800345c:	d01b      	beq.n	8003496 <__aeabi_f2d+0x6e>
 800345e:	0028      	movs	r0, r5
 8003460:	f000 f8ae 	bl	80035c0 <__clzsi2>
 8003464:	280a      	cmp	r0, #10
 8003466:	dc1c      	bgt.n	80034a2 <__aeabi_f2d+0x7a>
 8003468:	230b      	movs	r3, #11
 800346a:	002a      	movs	r2, r5
 800346c:	1a1b      	subs	r3, r3, r0
 800346e:	40da      	lsrs	r2, r3
 8003470:	0003      	movs	r3, r0
 8003472:	3315      	adds	r3, #21
 8003474:	409d      	lsls	r5, r3
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <__aeabi_f2d+0x88>)
 8003478:	0312      	lsls	r2, r2, #12
 800347a:	1a1b      	subs	r3, r3, r0
 800347c:	055b      	lsls	r3, r3, #21
 800347e:	0b12      	lsrs	r2, r2, #12
 8003480:	0d5b      	lsrs	r3, r3, #21
 8003482:	e7e1      	b.n	8003448 <__aeabi_f2d+0x20>
 8003484:	2d00      	cmp	r5, #0
 8003486:	d009      	beq.n	800349c <__aeabi_f2d+0x74>
 8003488:	0b13      	lsrs	r3, r2, #12
 800348a:	2280      	movs	r2, #128	@ 0x80
 800348c:	0312      	lsls	r2, r2, #12
 800348e:	431a      	orrs	r2, r3
 8003490:	076d      	lsls	r5, r5, #29
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <__aeabi_f2d+0x8c>)
 8003494:	e7d8      	b.n	8003448 <__aeabi_f2d+0x20>
 8003496:	2300      	movs	r3, #0
 8003498:	2200      	movs	r2, #0
 800349a:	e7d5      	b.n	8003448 <__aeabi_f2d+0x20>
 800349c:	2200      	movs	r2, #0
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <__aeabi_f2d+0x8c>)
 80034a0:	e7d2      	b.n	8003448 <__aeabi_f2d+0x20>
 80034a2:	0003      	movs	r3, r0
 80034a4:	002a      	movs	r2, r5
 80034a6:	3b0b      	subs	r3, #11
 80034a8:	409a      	lsls	r2, r3
 80034aa:	2500      	movs	r5, #0
 80034ac:	e7e3      	b.n	8003476 <__aeabi_f2d+0x4e>
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	00000389 	.word	0x00000389
 80034b4:	000007ff 	.word	0x000007ff

080034b8 <__aeabi_d2f>:
 80034b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ba:	004b      	lsls	r3, r1, #1
 80034bc:	030f      	lsls	r7, r1, #12
 80034be:	0d5b      	lsrs	r3, r3, #21
 80034c0:	4c3b      	ldr	r4, [pc, #236]	@ (80035b0 <__aeabi_d2f+0xf8>)
 80034c2:	0f45      	lsrs	r5, r0, #29
 80034c4:	b083      	sub	sp, #12
 80034c6:	0a7f      	lsrs	r7, r7, #9
 80034c8:	1c5e      	adds	r6, r3, #1
 80034ca:	432f      	orrs	r7, r5
 80034cc:	9000      	str	r0, [sp, #0]
 80034ce:	9101      	str	r1, [sp, #4]
 80034d0:	0fca      	lsrs	r2, r1, #31
 80034d2:	00c5      	lsls	r5, r0, #3
 80034d4:	4226      	tst	r6, r4
 80034d6:	d00b      	beq.n	80034f0 <__aeabi_d2f+0x38>
 80034d8:	4936      	ldr	r1, [pc, #216]	@ (80035b4 <__aeabi_d2f+0xfc>)
 80034da:	185c      	adds	r4, r3, r1
 80034dc:	2cfe      	cmp	r4, #254	@ 0xfe
 80034de:	dd13      	ble.n	8003508 <__aeabi_d2f+0x50>
 80034e0:	20ff      	movs	r0, #255	@ 0xff
 80034e2:	2300      	movs	r3, #0
 80034e4:	05c0      	lsls	r0, r0, #23
 80034e6:	4318      	orrs	r0, r3
 80034e8:	07d2      	lsls	r2, r2, #31
 80034ea:	4310      	orrs	r0, r2
 80034ec:	b003      	add	sp, #12
 80034ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <__aeabi_d2f+0x42>
 80034f4:	2000      	movs	r0, #0
 80034f6:	2300      	movs	r3, #0
 80034f8:	e7f4      	b.n	80034e4 <__aeabi_d2f+0x2c>
 80034fa:	433d      	orrs	r5, r7
 80034fc:	d0f0      	beq.n	80034e0 <__aeabi_d2f+0x28>
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	03db      	lsls	r3, r3, #15
 8003502:	20ff      	movs	r0, #255	@ 0xff
 8003504:	433b      	orrs	r3, r7
 8003506:	e7ed      	b.n	80034e4 <__aeabi_d2f+0x2c>
 8003508:	2c00      	cmp	r4, #0
 800350a:	dd14      	ble.n	8003536 <__aeabi_d2f+0x7e>
 800350c:	9b00      	ldr	r3, [sp, #0]
 800350e:	00ff      	lsls	r7, r7, #3
 8003510:	019b      	lsls	r3, r3, #6
 8003512:	1e58      	subs	r0, r3, #1
 8003514:	4183      	sbcs	r3, r0
 8003516:	0f69      	lsrs	r1, r5, #29
 8003518:	433b      	orrs	r3, r7
 800351a:	430b      	orrs	r3, r1
 800351c:	0759      	lsls	r1, r3, #29
 800351e:	d041      	beq.n	80035a4 <__aeabi_d2f+0xec>
 8003520:	210f      	movs	r1, #15
 8003522:	4019      	ands	r1, r3
 8003524:	2904      	cmp	r1, #4
 8003526:	d028      	beq.n	800357a <__aeabi_d2f+0xc2>
 8003528:	3304      	adds	r3, #4
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	d525      	bpl.n	800357a <__aeabi_d2f+0xc2>
 800352e:	3401      	adds	r4, #1
 8003530:	2300      	movs	r3, #0
 8003532:	b2e0      	uxtb	r0, r4
 8003534:	e7d6      	b.n	80034e4 <__aeabi_d2f+0x2c>
 8003536:	0021      	movs	r1, r4
 8003538:	3117      	adds	r1, #23
 800353a:	dbdb      	blt.n	80034f4 <__aeabi_d2f+0x3c>
 800353c:	2180      	movs	r1, #128	@ 0x80
 800353e:	201e      	movs	r0, #30
 8003540:	0409      	lsls	r1, r1, #16
 8003542:	4339      	orrs	r1, r7
 8003544:	1b00      	subs	r0, r0, r4
 8003546:	281f      	cmp	r0, #31
 8003548:	dd1b      	ble.n	8003582 <__aeabi_d2f+0xca>
 800354a:	2602      	movs	r6, #2
 800354c:	4276      	negs	r6, r6
 800354e:	1b34      	subs	r4, r6, r4
 8003550:	000e      	movs	r6, r1
 8003552:	40e6      	lsrs	r6, r4
 8003554:	0034      	movs	r4, r6
 8003556:	2820      	cmp	r0, #32
 8003558:	d004      	beq.n	8003564 <__aeabi_d2f+0xac>
 800355a:	4817      	ldr	r0, [pc, #92]	@ (80035b8 <__aeabi_d2f+0x100>)
 800355c:	4684      	mov	ip, r0
 800355e:	4463      	add	r3, ip
 8003560:	4099      	lsls	r1, r3
 8003562:	430d      	orrs	r5, r1
 8003564:	002b      	movs	r3, r5
 8003566:	1e59      	subs	r1, r3, #1
 8003568:	418b      	sbcs	r3, r1
 800356a:	4323      	orrs	r3, r4
 800356c:	0759      	lsls	r1, r3, #29
 800356e:	d015      	beq.n	800359c <__aeabi_d2f+0xe4>
 8003570:	210f      	movs	r1, #15
 8003572:	2400      	movs	r4, #0
 8003574:	4019      	ands	r1, r3
 8003576:	2904      	cmp	r1, #4
 8003578:	d117      	bne.n	80035aa <__aeabi_d2f+0xf2>
 800357a:	019b      	lsls	r3, r3, #6
 800357c:	0a5b      	lsrs	r3, r3, #9
 800357e:	b2e0      	uxtb	r0, r4
 8003580:	e7b0      	b.n	80034e4 <__aeabi_d2f+0x2c>
 8003582:	4c0e      	ldr	r4, [pc, #56]	@ (80035bc <__aeabi_d2f+0x104>)
 8003584:	191c      	adds	r4, r3, r4
 8003586:	002b      	movs	r3, r5
 8003588:	40a5      	lsls	r5, r4
 800358a:	40c3      	lsrs	r3, r0
 800358c:	40a1      	lsls	r1, r4
 800358e:	1e68      	subs	r0, r5, #1
 8003590:	4185      	sbcs	r5, r0
 8003592:	4329      	orrs	r1, r5
 8003594:	430b      	orrs	r3, r1
 8003596:	2400      	movs	r4, #0
 8003598:	0759      	lsls	r1, r3, #29
 800359a:	d1c1      	bne.n	8003520 <__aeabi_d2f+0x68>
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	2000      	movs	r0, #0
 80035a0:	0a5b      	lsrs	r3, r3, #9
 80035a2:	e79f      	b.n	80034e4 <__aeabi_d2f+0x2c>
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	b2e0      	uxtb	r0, r4
 80035a8:	e79c      	b.n	80034e4 <__aeabi_d2f+0x2c>
 80035aa:	3304      	adds	r3, #4
 80035ac:	e7e5      	b.n	800357a <__aeabi_d2f+0xc2>
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	000007fe 	.word	0x000007fe
 80035b4:	fffffc80 	.word	0xfffffc80
 80035b8:	fffffca2 	.word	0xfffffca2
 80035bc:	fffffc82 	.word	0xfffffc82

080035c0 <__clzsi2>:
 80035c0:	211c      	movs	r1, #28
 80035c2:	2301      	movs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	4298      	cmp	r0, r3
 80035c8:	d301      	bcc.n	80035ce <__clzsi2+0xe>
 80035ca:	0c00      	lsrs	r0, r0, #16
 80035cc:	3910      	subs	r1, #16
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	4298      	cmp	r0, r3
 80035d2:	d301      	bcc.n	80035d8 <__clzsi2+0x18>
 80035d4:	0a00      	lsrs	r0, r0, #8
 80035d6:	3908      	subs	r1, #8
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	4298      	cmp	r0, r3
 80035dc:	d301      	bcc.n	80035e2 <__clzsi2+0x22>
 80035de:	0900      	lsrs	r0, r0, #4
 80035e0:	3904      	subs	r1, #4
 80035e2:	a202      	add	r2, pc, #8	@ (adr r2, 80035ec <__clzsi2+0x2c>)
 80035e4:	5c10      	ldrb	r0, [r2, r0]
 80035e6:	1840      	adds	r0, r0, r1
 80035e8:	4770      	bx	lr
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	02020304 	.word	0x02020304
 80035f0:	01010101 	.word	0x01010101
	...

080035fc <__clzdi2>:
 80035fc:	b510      	push	{r4, lr}
 80035fe:	2900      	cmp	r1, #0
 8003600:	d103      	bne.n	800360a <__clzdi2+0xe>
 8003602:	f7ff ffdd 	bl	80035c0 <__clzsi2>
 8003606:	3020      	adds	r0, #32
 8003608:	e002      	b.n	8003610 <__clzdi2+0x14>
 800360a:	0008      	movs	r0, r1
 800360c:	f7ff ffd8 	bl	80035c0 <__clzsi2>
 8003610:	bd10      	pop	{r4, pc}
 8003612:	46c0      	nop			@ (mov r8, r8)

08003614 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	0004      	movs	r4, r0
 800361c:	0008      	movs	r0, r1
 800361e:	0011      	movs	r1, r2
 8003620:	1dbb      	adds	r3, r7, #6
 8003622:	1c22      	adds	r2, r4, #0
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	1c02      	adds	r2, r0, #0
 800362a:	801a      	strh	r2, [r3, #0]
 800362c:	1cbb      	adds	r3, r7, #2
 800362e:	1c0a      	adds	r2, r1, #0
 8003630:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	8818      	ldrh	r0, [r3, #0]
 8003636:	1dbb      	adds	r3, r7, #6
 8003638:	8819      	ldrh	r1, [r3, #0]
 800363a:	1cbb      	adds	r3, r7, #2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	001a      	movs	r2, r3
 8003640:	f000 fef8 	bl	8004434 <ST7735_DrawPixel>
}
 8003644:	46c0      	nop			@ (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b003      	add	sp, #12
 800364a:	bd90      	pop	{r4, r7, pc}

0800364c <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364e:	46c6      	mov	lr, r8
 8003650:	b500      	push	{lr}
 8003652:	b090      	sub	sp, #64	@ 0x40
 8003654:	af04      	add	r7, sp, #16
 8003656:	468c      	mov	ip, r1
 8003658:	0016      	movs	r6, r2
 800365a:	0019      	movs	r1, r3
 800365c:	221e      	movs	r2, #30
 800365e:	18ba      	adds	r2, r7, r2
 8003660:	1c03      	adds	r3, r0, #0
 8003662:	8013      	strh	r3, [r2, #0]
 8003664:	231c      	movs	r3, #28
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	4662      	mov	r2, ip
 800366a:	801a      	strh	r2, [r3, #0]
 800366c:	201a      	movs	r0, #26
 800366e:	183b      	adds	r3, r7, r0
 8003670:	1c32      	adds	r2, r6, #0
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	2018      	movs	r0, #24
 8003676:	183b      	adds	r3, r7, r0
 8003678:	1c0a      	adds	r2, r1, #0
 800367a:	801a      	strh	r2, [r3, #0]
 800367c:	466b      	mov	r3, sp
 800367e:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8003680:	230c      	movs	r3, #12
 8003682:	0001      	movs	r1, r0
 8003684:	185e      	adds	r6, r3, r1
 8003686:	19f2      	adds	r2, r6, r7
 8003688:	2030      	movs	r0, #48	@ 0x30
 800368a:	1846      	adds	r6, r0, r1
 800368c:	19f3      	adds	r3, r6, r7
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8003692:	201a      	movs	r0, #26
 8003694:	183b      	adds	r3, r7, r0
 8003696:	2200      	movs	r2, #0
 8003698:	5e9b      	ldrsh	r3, [r3, r2]
 800369a:	187a      	adds	r2, r7, r1
 800369c:	2000      	movs	r0, #0
 800369e:	5e12      	ldrsh	r2, [r2, r0]
 80036a0:	4353      	muls	r3, r2
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a6:	001a      	movs	r2, r3
 80036a8:	60ba      	str	r2, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	60fa      	str	r2, [r7, #12]
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	68f9      	ldr	r1, [r7, #12]
 80036b2:	0002      	movs	r2, r0
 80036b4:	0ed2      	lsrs	r2, r2, #27
 80036b6:	000e      	movs	r6, r1
 80036b8:	0176      	lsls	r6, r6, #5
 80036ba:	617e      	str	r6, [r7, #20]
 80036bc:	697e      	ldr	r6, [r7, #20]
 80036be:	4316      	orrs	r6, r2
 80036c0:	617e      	str	r6, [r7, #20]
 80036c2:	0002      	movs	r2, r0
 80036c4:	0152      	lsls	r2, r2, #5
 80036c6:	613a      	str	r2, [r7, #16]
 80036c8:	001a      	movs	r2, r3
 80036ca:	603a      	str	r2, [r7, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	6838      	ldr	r0, [r7, #0]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	0002      	movs	r2, r0
 80036d6:	0ed2      	lsrs	r2, r2, #27
 80036d8:	000e      	movs	r6, r1
 80036da:	0175      	lsls	r5, r6, #5
 80036dc:	4315      	orrs	r5, r2
 80036de:	0002      	movs	r2, r0
 80036e0:	0154      	lsls	r4, r2, #5
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	3307      	adds	r3, #7
 80036e6:	08db      	lsrs	r3, r3, #3
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	466a      	mov	r2, sp
 80036ec:	1ad2      	subs	r2, r2, r3
 80036ee:	4695      	mov	sp, r2
 80036f0:	ab04      	add	r3, sp, #16
 80036f2:	3301      	adds	r3, #1
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 80036fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fc:	2200      	movs	r2, #0
 80036fe:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8003700:	201a      	movs	r0, #26
 8003702:	183b      	adds	r3, r7, r0
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2118      	movs	r1, #24
 8003708:	187a      	adds	r2, r7, r1
 800370a:	8812      	ldrh	r2, [r2, #0]
 800370c:	4353      	muls	r3, r2
 800370e:	b29a      	uxth	r2, r3
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8003714:	221e      	movs	r2, #30
 8003716:	18bb      	adds	r3, r7, r2
 8003718:	881c      	ldrh	r4, [r3, #0]
 800371a:	231c      	movs	r3, #28
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	881d      	ldrh	r5, [r3, #0]
 8003720:	183b      	adds	r3, r7, r0
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	0008      	movs	r0, r1
 8003726:	187a      	adds	r2, r7, r1
 8003728:	8812      	ldrh	r2, [r2, #0]
 800372a:	210c      	movs	r1, #12
 800372c:	1809      	adds	r1, r1, r0
 800372e:	19c9      	adds	r1, r1, r7
 8003730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003732:	2601      	movs	r6, #1
 8003734:	46b4      	mov	ip, r6
 8003736:	4666      	mov	r6, ip
 8003738:	9602      	str	r6, [sp, #8]
 800373a:	9201      	str	r2, [sp, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	002b      	movs	r3, r5
 8003740:	0022      	movs	r2, r4
 8003742:	f000 fbc5 	bl	8003ed0 <drawImage>
 8003746:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003748:	46c0      	nop			@ (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b00c      	add	sp, #48	@ 0x30
 800374e:	bc80      	pop	{r7}
 8003750:	46b8      	mov	r8, r7
 8003752:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003754 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	0004      	movs	r4, r0
 800375c:	0008      	movs	r0, r1
 800375e:	0011      	movs	r1, r2
 8003760:	1dbb      	adds	r3, r7, #6
 8003762:	1c22      	adds	r2, r4, #0
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	1c02      	adds	r2, r0, #0
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	1cbb      	adds	r3, r7, #2
 800376e:	1c0a      	adds	r2, r1, #0
 8003770:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003772:	1cbb      	adds	r3, r7, #2
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	2100      	movs	r1, #0
 800377a:	5e59      	ldrsh	r1, [r3, r1]
 800377c:	1dbb      	adds	r3, r7, #6
 800377e:	2000      	movs	r0, #0
 8003780:	5e1b      	ldrsh	r3, [r3, r0]
 8003782:	0018      	movs	r0, r3
 8003784:	f7ff ff46 	bl	8003614 <drawPixel>
}
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b003      	add	sp, #12
 800378e:	bd90      	pop	{r4, r7, pc}

08003790 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	0005      	movs	r5, r0
 8003798:	000c      	movs	r4, r1
 800379a:	0010      	movs	r0, r2
 800379c:	0019      	movs	r1, r3
 800379e:	1dbb      	adds	r3, r7, #6
 80037a0:	1c2a      	adds	r2, r5, #0
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	1c22      	adds	r2, r4, #0
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	1cbb      	adds	r3, r7, #2
 80037ac:	1c02      	adds	r2, r0, #0
 80037ae:	801a      	strh	r2, [r3, #0]
 80037b0:	003b      	movs	r3, r7
 80037b2:	1c0a      	adds	r2, r1, #0
 80037b4:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80037b6:	003b      	movs	r3, r7
 80037b8:	2200      	movs	r2, #0
 80037ba:	5e9a      	ldrsh	r2, [r3, r2]
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	2100      	movs	r1, #0
 80037c0:	5e5b      	ldrsh	r3, [r3, r1]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	17d9      	asrs	r1, r3, #31
 80037c6:	185a      	adds	r2, r3, r1
 80037c8:	404a      	eors	r2, r1
 80037ca:	1cbb      	adds	r3, r7, #2
 80037cc:	2100      	movs	r1, #0
 80037ce:	5e59      	ldrsh	r1, [r3, r1]
 80037d0:	1dbb      	adds	r3, r7, #6
 80037d2:	2000      	movs	r0, #0
 80037d4:	5e1b      	ldrsh	r3, [r3, r0]
 80037d6:	1acb      	subs	r3, r1, r3
 80037d8:	17d9      	asrs	r1, r3, #31
 80037da:	185b      	adds	r3, r3, r1
 80037dc:	404b      	eors	r3, r1
 80037de:	2101      	movs	r1, #1
 80037e0:	429a      	cmp	r2, r3
 80037e2:	dc01      	bgt.n	80037e8 <writeLine+0x58>
 80037e4:	2300      	movs	r3, #0
 80037e6:	1c19      	adds	r1, r3, #0
 80037e8:	b2ca      	uxtb	r2, r1
 80037ea:	211a      	movs	r1, #26
 80037ec:	187b      	adds	r3, r7, r1
 80037ee:	801a      	strh	r2, [r3, #0]
    if (steep) {
 80037f0:	187b      	adds	r3, r7, r1
 80037f2:	2200      	movs	r2, #0
 80037f4:	5e9b      	ldrsh	r3, [r3, r2]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d019      	beq.n	800382e <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 80037fa:	2118      	movs	r1, #24
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	1dba      	adds	r2, r7, #6
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	1dbb      	adds	r3, r7, #6
 8003806:	1d3a      	adds	r2, r7, #4
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	187a      	adds	r2, r7, r1
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8003814:	2116      	movs	r1, #22
 8003816:	187b      	adds	r3, r7, r1
 8003818:	1cba      	adds	r2, r7, #2
 800381a:	8812      	ldrh	r2, [r2, #0]
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	1cbb      	adds	r3, r7, #2
 8003820:	003a      	movs	r2, r7
 8003822:	8812      	ldrh	r2, [r2, #0]
 8003824:	801a      	strh	r2, [r3, #0]
 8003826:	003b      	movs	r3, r7
 8003828:	187a      	adds	r2, r7, r1
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 800382e:	1dba      	adds	r2, r7, #6
 8003830:	1cbb      	adds	r3, r7, #2
 8003832:	2100      	movs	r1, #0
 8003834:	5e52      	ldrsh	r2, [r2, r1]
 8003836:	2100      	movs	r1, #0
 8003838:	5e5b      	ldrsh	r3, [r3, r1]
 800383a:	429a      	cmp	r2, r3
 800383c:	dd19      	ble.n	8003872 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 800383e:	2114      	movs	r1, #20
 8003840:	187b      	adds	r3, r7, r1
 8003842:	1dba      	adds	r2, r7, #6
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	801a      	strh	r2, [r3, #0]
 8003848:	1dbb      	adds	r3, r7, #6
 800384a:	1cba      	adds	r2, r7, #2
 800384c:	8812      	ldrh	r2, [r2, #0]
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	1cbb      	adds	r3, r7, #2
 8003852:	187a      	adds	r2, r7, r1
 8003854:	8812      	ldrh	r2, [r2, #0]
 8003856:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8003858:	2112      	movs	r1, #18
 800385a:	187b      	adds	r3, r7, r1
 800385c:	1d3a      	adds	r2, r7, #4
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	003a      	movs	r2, r7
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	801a      	strh	r2, [r3, #0]
 800386a:	003b      	movs	r3, r7
 800386c:	187a      	adds	r2, r7, r1
 800386e:	8812      	ldrh	r2, [r2, #0]
 8003870:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003872:	1cbb      	adds	r3, r7, #2
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	1dbb      	adds	r3, r7, #6
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	b29a      	uxth	r2, r3
 800387e:	2010      	movs	r0, #16
 8003880:	183b      	adds	r3, r7, r0
 8003882:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8003884:	003b      	movs	r3, r7
 8003886:	2200      	movs	r2, #0
 8003888:	5e9a      	ldrsh	r2, [r3, r2]
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	2100      	movs	r1, #0
 800388e:	5e5b      	ldrsh	r3, [r3, r1]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	17d9      	asrs	r1, r3, #31
 8003894:	185a      	adds	r2, r3, r1
 8003896:	404a      	eors	r2, r1
 8003898:	230e      	movs	r3, #14
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 800389e:	231e      	movs	r3, #30
 80038a0:	18fa      	adds	r2, r7, r3
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	2100      	movs	r1, #0
 80038a6:	5e5b      	ldrsh	r3, [r3, r1]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	da00      	bge.n	80038ae <writeLine+0x11e>
 80038ac:	3301      	adds	r3, #1
 80038ae:	105b      	asrs	r3, r3, #1
 80038b0:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 80038b2:	1d3a      	adds	r2, r7, #4
 80038b4:	003b      	movs	r3, r7
 80038b6:	2100      	movs	r1, #0
 80038b8:	5e52      	ldrsh	r2, [r2, r1]
 80038ba:	2100      	movs	r1, #0
 80038bc:	5e5b      	ldrsh	r3, [r3, r1]
 80038be:	429a      	cmp	r2, r3
 80038c0:	da04      	bge.n	80038cc <writeLine+0x13c>
        ystep = 1;
 80038c2:	231c      	movs	r3, #28
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	2201      	movs	r2, #1
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	e04d      	b.n	8003968 <writeLine+0x1d8>
    } else {
        ystep = -1;
 80038cc:	231c      	movs	r3, #28
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	2201      	movs	r2, #1
 80038d2:	4252      	negs	r2, r2
 80038d4:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 80038d6:	e047      	b.n	8003968 <writeLine+0x1d8>
        if (steep) {
 80038d8:	231a      	movs	r3, #26
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	5e9b      	ldrsh	r3, [r3, r2]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00c      	beq.n	80038fe <writeLine+0x16e>
            writePixel(y0, x0, color);
 80038e4:	2330      	movs	r3, #48	@ 0x30
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	881a      	ldrh	r2, [r3, #0]
 80038ea:	1dbb      	adds	r3, r7, #6
 80038ec:	2100      	movs	r1, #0
 80038ee:	5e59      	ldrsh	r1, [r3, r1]
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	2000      	movs	r0, #0
 80038f4:	5e1b      	ldrsh	r3, [r3, r0]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7ff ff2c 	bl	8003754 <writePixel>
 80038fc:	e00b      	b.n	8003916 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 80038fe:	2330      	movs	r3, #48	@ 0x30
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	2100      	movs	r1, #0
 8003908:	5e59      	ldrsh	r1, [r3, r1]
 800390a:	1dbb      	adds	r3, r7, #6
 800390c:	2000      	movs	r0, #0
 800390e:	5e1b      	ldrsh	r3, [r3, r0]
 8003910:	0018      	movs	r0, r3
 8003912:	f7ff ff1f 	bl	8003754 <writePixel>
        }
        err -= dy;
 8003916:	211e      	movs	r1, #30
 8003918:	187b      	adds	r3, r7, r1
 800391a:	881a      	ldrh	r2, [r3, #0]
 800391c:	230e      	movs	r3, #14
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	b29a      	uxth	r2, r3
 8003926:	187b      	adds	r3, r7, r1
 8003928:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 800392a:	187b      	adds	r3, r7, r1
 800392c:	2200      	movs	r2, #0
 800392e:	5e9b      	ldrsh	r3, [r3, r2]
 8003930:	2b00      	cmp	r3, #0
 8003932:	da11      	bge.n	8003958 <writeLine+0x1c8>
            y0 += ystep;
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	231c      	movs	r3, #28
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	18d3      	adds	r3, r2, r3
 8003940:	b29a      	uxth	r2, r3
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003946:	187b      	adds	r3, r7, r1
 8003948:	881a      	ldrh	r2, [r3, #0]
 800394a:	2310      	movs	r3, #16
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	18d3      	adds	r3, r2, r3
 8003952:	b29a      	uxth	r2, r3
 8003954:	187b      	adds	r3, r7, r1
 8003956:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	2200      	movs	r2, #0
 800395c:	5e9b      	ldrsh	r3, [r3, r2]
 800395e:	b29b      	uxth	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	1dbb      	adds	r3, r7, #6
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	1dba      	adds	r2, r7, #6
 800396a:	1cbb      	adds	r3, r7, #2
 800396c:	2100      	movs	r1, #0
 800396e:	5e52      	ldrsh	r2, [r2, r1]
 8003970:	2100      	movs	r1, #0
 8003972:	5e5b      	ldrsh	r3, [r3, r1]
 8003974:	429a      	cmp	r2, r3
 8003976:	ddaf      	ble.n	80038d8 <writeLine+0x148>
        }
    }
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b008      	add	sp, #32
 8003980:	bdb0      	pop	{r4, r5, r7, pc}

08003982 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003982:	b5b0      	push	{r4, r5, r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af02      	add	r7, sp, #8
 8003988:	0005      	movs	r5, r0
 800398a:	000c      	movs	r4, r1
 800398c:	0010      	movs	r0, r2
 800398e:	0019      	movs	r1, r3
 8003990:	1dbb      	adds	r3, r7, #6
 8003992:	1c2a      	adds	r2, r5, #0
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	1c22      	adds	r2, r4, #0
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	1cbb      	adds	r3, r7, #2
 800399e:	1c02      	adds	r2, r0, #0
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	003b      	movs	r3, r7
 80039a4:	1c0a      	adds	r2, r1, #0
 80039a6:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	1cbb      	adds	r3, r7, #2
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	b21c      	sxth	r4, r3
 80039ba:	1dbb      	adds	r3, r7, #6
 80039bc:	2200      	movs	r2, #0
 80039be:	5e9a      	ldrsh	r2, [r3, r2]
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	2100      	movs	r1, #0
 80039c4:	5e59      	ldrsh	r1, [r3, r1]
 80039c6:	1dbb      	adds	r3, r7, #6
 80039c8:	2000      	movs	r0, #0
 80039ca:	5e18      	ldrsh	r0, [r3, r0]
 80039cc:	003b      	movs	r3, r7
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	0023      	movs	r3, r4
 80039d4:	f7ff fedc 	bl	8003790 <writeLine>
}
 80039d8:	46c0      	nop			@ (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bdb0      	pop	{r4, r5, r7, pc}

080039e0 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	0005      	movs	r5, r0
 80039e8:	000c      	movs	r4, r1
 80039ea:	0010      	movs	r0, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1c2a      	adds	r2, r5, #0
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	003b      	movs	r3, r7
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	1cbb      	adds	r3, r7, #2
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	18d3      	adds	r3, r2, r3
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b21a      	sxth	r2, r3
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	2400      	movs	r4, #0
 8003a1c:	5f1c      	ldrsh	r4, [r3, r4]
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	2100      	movs	r1, #0
 8003a22:	5e59      	ldrsh	r1, [r3, r1]
 8003a24:	1dbb      	adds	r3, r7, #6
 8003a26:	2000      	movs	r0, #0
 8003a28:	5e18      	ldrsh	r0, [r3, r0]
 8003a2a:	003b      	movs	r3, r7
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	0023      	movs	r3, r4
 8003a32:	f7ff fead 	bl	8003790 <writeLine>
}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bdb0      	pop	{r4, r5, r7, pc}

08003a3e <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003a3e:	b5b0      	push	{r4, r5, r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	0005      	movs	r5, r0
 8003a46:	000c      	movs	r4, r1
 8003a48:	0010      	movs	r0, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	1dbb      	adds	r3, r7, #6
 8003a4e:	1c2a      	adds	r2, r5, #0
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	1c22      	adds	r2, r4, #0
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	1cbb      	adds	r3, r7, #2
 8003a5a:	1c02      	adds	r2, r0, #0
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	003b      	movs	r3, r7
 8003a60:	1c0a      	adds	r2, r1, #0
 8003a62:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003a64:	1dba      	adds	r2, r7, #6
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5e52      	ldrsh	r2, [r2, r1]
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	5e5b      	ldrsh	r3, [r3, r1]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d12a      	bne.n	8003aca <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003a74:	1d3a      	adds	r2, r7, #4
 8003a76:	003b      	movs	r3, r7
 8003a78:	2100      	movs	r1, #0
 8003a7a:	5e52      	ldrsh	r2, [r2, r1]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5e5b      	ldrsh	r3, [r3, r1]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	dd0c      	ble.n	8003a9e <drawLine+0x60>
 8003a84:	210c      	movs	r1, #12
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	1d3a      	adds	r2, r7, #4
 8003a8a:	8812      	ldrh	r2, [r2, #0]
 8003a8c:	801a      	strh	r2, [r3, #0]
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	003a      	movs	r2, r7
 8003a92:	8812      	ldrh	r2, [r2, #0]
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	003b      	movs	r3, r7
 8003a98:	187a      	adds	r2, r7, r1
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003a9e:	003b      	movs	r3, r7
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21a      	sxth	r2, r3
 8003ab0:	2320      	movs	r3, #32
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	881c      	ldrh	r4, [r3, #0]
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5e59      	ldrsh	r1, [r3, r1]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	2000      	movs	r0, #0
 8003ac0:	5e18      	ldrsh	r0, [r3, r0]
 8003ac2:	0023      	movs	r3, r4
 8003ac4:	f7ff ff5d 	bl	8003982 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003ac8:	e045      	b.n	8003b56 <drawLine+0x118>
    } else if(y0 == y1){
 8003aca:	1d3a      	adds	r2, r7, #4
 8003acc:	003b      	movs	r3, r7
 8003ace:	2100      	movs	r1, #0
 8003ad0:	5e52      	ldrsh	r2, [r2, r1]
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	5e5b      	ldrsh	r3, [r3, r1]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d12a      	bne.n	8003b30 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003ada:	1dba      	adds	r2, r7, #6
 8003adc:	1cbb      	adds	r3, r7, #2
 8003ade:	2100      	movs	r1, #0
 8003ae0:	5e52      	ldrsh	r2, [r2, r1]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5e5b      	ldrsh	r3, [r3, r1]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	dd0c      	ble.n	8003b04 <drawLine+0xc6>
 8003aea:	210e      	movs	r1, #14
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	1dba      	adds	r2, r7, #6
 8003af0:	8812      	ldrh	r2, [r2, #0]
 8003af2:	801a      	strh	r2, [r3, #0]
 8003af4:	1dbb      	adds	r3, r7, #6
 8003af6:	1cba      	adds	r2, r7, #2
 8003af8:	8812      	ldrh	r2, [r2, #0]
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	1cbb      	adds	r3, r7, #2
 8003afe:	187a      	adds	r2, r7, r1
 8003b00:	8812      	ldrh	r2, [r2, #0]
 8003b02:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003b04:	1cbb      	adds	r3, r7, #2
 8003b06:	881a      	ldrh	r2, [r3, #0]
 8003b08:	1dbb      	adds	r3, r7, #6
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3301      	adds	r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b21a      	sxth	r2, r3
 8003b16:	2320      	movs	r3, #32
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	881c      	ldrh	r4, [r3, #0]
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5e59      	ldrsh	r1, [r3, r1]
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	2000      	movs	r0, #0
 8003b26:	5e18      	ldrsh	r0, [r3, r0]
 8003b28:	0023      	movs	r3, r4
 8003b2a:	f7ff ff59 	bl	80039e0 <drawFastHLine>
}
 8003b2e:	e012      	b.n	8003b56 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003b30:	003b      	movs	r3, r7
 8003b32:	2400      	movs	r4, #0
 8003b34:	5f1c      	ldrsh	r4, [r3, r4]
 8003b36:	1cbb      	adds	r3, r7, #2
 8003b38:	2200      	movs	r2, #0
 8003b3a:	5e9a      	ldrsh	r2, [r3, r2]
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	2100      	movs	r1, #0
 8003b40:	5e59      	ldrsh	r1, [r3, r1]
 8003b42:	1dbb      	adds	r3, r7, #6
 8003b44:	2000      	movs	r0, #0
 8003b46:	5e18      	ldrsh	r0, [r3, r0]
 8003b48:	2320      	movs	r3, #32
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	0023      	movs	r3, r4
 8003b52:	f7ff fe1d 	bl	8003790 <writeLine>
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b004      	add	sp, #16
 8003b5c:	bdb0      	pop	{r4, r5, r7, pc}

08003b5e <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b60:	b089      	sub	sp, #36	@ 0x24
 8003b62:	af02      	add	r7, sp, #8
 8003b64:	0004      	movs	r4, r0
 8003b66:	0008      	movs	r0, r1
 8003b68:	60ba      	str	r2, [r7, #8]
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	230e      	movs	r3, #14
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	1c22      	adds	r2, r4, #0
 8003b72:	801a      	strh	r2, [r3, #0]
 8003b74:	230c      	movs	r3, #12
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	1c02      	adds	r2, r0, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
 8003b7c:	1dbb      	adds	r3, r7, #6
 8003b7e:	1c0a      	adds	r2, r1, #0
 8003b80:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003b82:	2316      	movs	r3, #22
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	2200      	movs	r2, #0
 8003b88:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003b8a:	e03f      	b.n	8003c0c <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003b8c:	2516      	movs	r5, #22
 8003b8e:	197b      	adds	r3, r7, r5
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	18d3      	adds	r3, r2, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	469c      	mov	ip, r3
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	2400      	movs	r4, #0
 8003b9e:	5f1c      	ldrsh	r4, [r3, r4]
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5e59      	ldrsh	r1, [r3, r1]
 8003ba8:	260e      	movs	r6, #14
 8003baa:	19bb      	adds	r3, r7, r6
 8003bac:	2000      	movs	r0, #0
 8003bae:	5e18      	ldrsh	r0, [r3, r0]
 8003bb0:	232c      	movs	r3, #44	@ 0x2c
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	189b      	adds	r3, r3, r2
 8003bb6:	19db      	adds	r3, r3, r7
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	2328      	movs	r3, #40	@ 0x28
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	0023      	movs	r3, r4
 8003bca:	4662      	mov	r2, ip
 8003bcc:	f000 f82c 	bl	8003c28 <drawChar>
		x+=(size*6)+spacing;
 8003bd0:	232c      	movs	r3, #44	@ 0x2c
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	185b      	adds	r3, r3, r1
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	1c1a      	adds	r2, r3, #0
 8003bde:	1c13      	adds	r3, r2, #0
 8003be0:	18db      	adds	r3, r3, r3
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	18db      	adds	r3, r3, r3
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	2330      	movs	r3, #48	@ 0x30
 8003bea:	185b      	adds	r3, r3, r1
 8003bec:	19db      	adds	r3, r3, r7
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	18d3      	adds	r3, r2, r3
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	19bb      	adds	r3, r7, r6
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	18d3      	adds	r3, r2, r3
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	19bb      	adds	r3, r7, r6
 8003c00:	801a      	strh	r2, [r3, #0]
		i++;
 8003c02:	197b      	adds	r3, r7, r5
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	197b      	adds	r3, r7, r5
 8003c08:	3201      	adds	r2, #1
 8003c0a:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8003c0c:	2316      	movs	r3, #22
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1b7      	bne.n	8003b8c <drawString+0x2e>
	}
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b007      	add	sp, #28
 8003c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c28 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003c28:	b5b0      	push	{r4, r5, r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	0005      	movs	r5, r0
 8003c30:	000c      	movs	r4, r1
 8003c32:	0010      	movs	r0, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	1c2a      	adds	r2, r5, #0
 8003c3a:	801a      	strh	r2, [r3, #0]
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	1c22      	adds	r2, r4, #0
 8003c40:	801a      	strh	r2, [r3, #0]
 8003c42:	1cfb      	adds	r3, r7, #3
 8003c44:	1c02      	adds	r2, r0, #0
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	003b      	movs	r3, r7
 8003c4a:	1c0a      	adds	r2, r1, #0
 8003c4c:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e0bd      	b.n	8003dd0 <drawChar+0x1a8>
    if ((i) == 5)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d104      	bne.n	8003c64 <drawChar+0x3c>
      line = 0x0;
 8003c5a:	2317      	movs	r3, #23
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e00b      	b.n	8003c7c <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003c64:	1cfb      	adds	r3, r7, #3
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	0013      	movs	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	189a      	adds	r2, r3, r2
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	18d2      	adds	r2, r2, r3
 8003c72:	2317      	movs	r3, #23
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	495b      	ldr	r1, [pc, #364]	@ (8003de4 <drawChar+0x1bc>)
 8003c78:	5c8a      	ldrb	r2, [r1, r2]
 8003c7a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	e09f      	b.n	8003dc2 <drawChar+0x19a>
      if (line & 0x1) {
 8003c82:	2317      	movs	r3, #23
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d043      	beq.n	8003d16 <drawChar+0xee>
        if (size == 1)
 8003c8e:	232c      	movs	r3, #44	@ 0x2c
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d115      	bne.n	8003cc4 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	1dbb      	adds	r3, r7, #6
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	b218      	sxth	r0, r3
 8003ca6:	1d3b      	adds	r3, r7, #4
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3307      	adds	r3, #7
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b219      	sxth	r1, r3
 8003cb8:	003b      	movs	r3, r7
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	f7ff fd49 	bl	8003754 <writePixel>
 8003cc2:	e075      	b.n	8003db0 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8003cc4:	212c      	movs	r1, #44	@ 0x2c
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	4353      	muls	r3, r2
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	1dbb      	adds	r3, r7, #6
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	18d3      	adds	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	b218      	sxth	r0, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	000c      	movs	r4, r1
 8003ce8:	187a      	adds	r2, r7, r1
 8003cea:	7812      	ldrb	r2, [r2, #0]
 8003cec:	b292      	uxth	r2, r2
 8003cee:	4353      	muls	r3, r2
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	18d3      	adds	r3, r2, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b219      	sxth	r1, r3
 8003cfc:	193b      	adds	r3, r7, r4
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b21a      	sxth	r2, r3
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b21c      	sxth	r4, r3
 8003d08:	003b      	movs	r3, r7
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	0023      	movs	r3, r4
 8003d10:	f7ff fc9c 	bl	800364c <fillRect>
 8003d14:	e04c      	b.n	8003db0 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003d16:	2428      	movs	r4, #40	@ 0x28
 8003d18:	193b      	adds	r3, r7, r4
 8003d1a:	0039      	movs	r1, r7
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	5e9a      	ldrsh	r2, [r3, r2]
 8003d20:	2300      	movs	r3, #0
 8003d22:	5ecb      	ldrsh	r3, [r1, r3]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d043      	beq.n	8003db0 <drawChar+0x188>
        if (size == 1) // default size
 8003d28:	232c      	movs	r3, #44	@ 0x2c
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d115      	bne.n	8003d5e <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	1dbb      	adds	r3, r7, #6
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	18d3      	adds	r3, r2, r3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b218      	sxth	r0, r3
 8003d40:	1d3b      	adds	r3, r7, #4
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3307      	adds	r3, #7
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b219      	sxth	r1, r3
 8003d52:	193b      	adds	r3, r7, r4
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	001a      	movs	r2, r3
 8003d58:	f7ff fcfc 	bl	8003754 <writePixel>
 8003d5c:	e028      	b.n	8003db0 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8003d5e:	212c      	movs	r1, #44	@ 0x2c
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	b292      	uxth	r2, r2
 8003d6a:	4353      	muls	r3, r2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	1dbb      	adds	r3, r7, #6
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	b218      	sxth	r0, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	000c      	movs	r4, r1
 8003d82:	187a      	adds	r2, r7, r1
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	b292      	uxth	r2, r2
 8003d88:	4353      	muls	r3, r2
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	18d3      	adds	r3, r2, r3
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	b219      	sxth	r1, r3
 8003d96:	193b      	adds	r3, r7, r4
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b21a      	sxth	r2, r3
 8003d9c:	193b      	adds	r3, r7, r4
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b21c      	sxth	r4, r3
 8003da2:	2328      	movs	r3, #40	@ 0x28
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	0023      	movs	r3, r4
 8003dac:	f7ff fc4e 	bl	800364c <fillRect>
        }
      }
      line >>= 1;
 8003db0:	2217      	movs	r2, #23
 8003db2:	18bb      	adds	r3, r7, r2
 8003db4:	18ba      	adds	r2, r7, r2
 8003db6:	7812      	ldrb	r2, [r2, #0]
 8003db8:	0852      	lsrs	r2, r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	dc00      	bgt.n	8003dca <drawChar+0x1a2>
 8003dc8:	e75b      	b.n	8003c82 <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	dc00      	bgt.n	8003dd8 <drawChar+0x1b0>
 8003dd6:	e73d      	b.n	8003c54 <drawChar+0x2c>
    }
  }
}
 8003dd8:	46c0      	nop			@ (mov r8, r8)
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b006      	add	sp, #24
 8003de0:	bdb0      	pop	{r4, r5, r7, pc}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	08011d6c 	.word	0x08011d6c

08003de8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dea:	b091      	sub	sp, #68	@ 0x44
 8003dec:	af04      	add	r7, sp, #16
 8003dee:	231e      	movs	r3, #30
 8003df0:	18f9      	adds	r1, r7, r3
 8003df2:	8008      	strh	r0, [r1, #0]
 8003df4:	4669      	mov	r1, sp
 8003df6:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8003df8:	210c      	movs	r1, #12
 8003dfa:	2318      	movs	r3, #24
 8003dfc:	18cb      	adds	r3, r1, r3
 8003dfe:	19d9      	adds	r1, r3, r7
 8003e00:	231e      	movs	r3, #30
 8003e02:	18f8      	adds	r0, r7, r3
 8003e04:	8800      	ldrh	r0, [r0, #0]
 8003e06:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8003e08:	492f      	ldr	r1, [pc, #188]	@ (8003ec8 <fillScreen+0xe0>)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	5ec9      	ldrsh	r1, [r1, r3]
 8003e0e:	0008      	movs	r0, r1
 8003e10:	492e      	ldr	r1, [pc, #184]	@ (8003ecc <fillScreen+0xe4>)
 8003e12:	2300      	movs	r3, #0
 8003e14:	5ec9      	ldrsh	r1, [r1, r3]
 8003e16:	4341      	muls	r1, r0
 8003e18:	1e48      	subs	r0, r1, #1
 8003e1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003e1c:	0008      	movs	r0, r1
 8003e1e:	6138      	str	r0, [r7, #16]
 8003e20:	2000      	movs	r0, #0
 8003e22:	6178      	str	r0, [r7, #20]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	0010      	movs	r0, r2
 8003e2a:	0ec0      	lsrs	r0, r0, #27
 8003e2c:	613a      	str	r2, [r7, #16]
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	015d      	lsls	r5, r3, #5
 8003e32:	4305      	orrs	r5, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	015c      	lsls	r4, r3, #5
 8003e38:	0008      	movs	r0, r1
 8003e3a:	6038      	str	r0, [r7, #0]
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	683c      	ldr	r4, [r7, #0]
 8003e42:	687d      	ldr	r5, [r7, #4]
 8003e44:	0023      	movs	r3, r4
 8003e46:	0ed8      	lsrs	r0, r3, #27
 8003e48:	002b      	movs	r3, r5
 8003e4a:	015b      	lsls	r3, r3, #5
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4303      	orrs	r3, r0
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	0023      	movs	r3, r4
 8003e56:	015b      	lsls	r3, r3, #5
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	000b      	movs	r3, r1
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	3307      	adds	r3, #7
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	466a      	mov	r2, sp
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	469d      	mov	sp, r3
 8003e6a:	ab04      	add	r3, sp, #16
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	2200      	movs	r2, #0
 8003e78:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8003e7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <fillScreen+0xe0>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	5e9b      	ldrsh	r3, [r3, r2]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4a12      	ldr	r2, [pc, #72]	@ (8003ecc <fillScreen+0xe4>)
 8003e84:	2000      	movs	r0, #0
 8003e86:	5e12      	ldrsh	r2, [r2, r0]
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	4353      	muls	r3, r2
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <fillScreen+0xe0>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	5e9b      	ldrsh	r3, [r3, r2]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ecc <fillScreen+0xe4>)
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	5e12      	ldrsh	r2, [r2, r0]
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	210c      	movs	r1, #12
 8003ea4:	2018      	movs	r0, #24
 8003ea6:	1809      	adds	r1, r1, r0
 8003ea8:	19c9      	adds	r1, r1, r7
 8003eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eac:	2401      	movs	r4, #1
 8003eae:	9402      	str	r4, [sp, #8]
 8003eb0:	9201      	str	r2, [sp, #4]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f000 f80a 	bl	8003ed0 <drawImage>
 8003ebc:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b00d      	add	sp, #52	@ 0x34
 8003ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	20002514 	.word	0x20002514
 8003ecc:	20002516 	.word	0x20002516

08003ed0 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	46c6      	mov	lr, r8
 8003ed4:	b500      	push	{lr}
 8003ed6:	b092      	sub	sp, #72	@ 0x48
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	6278      	str	r0, [r7, #36]	@ 0x24
 8003edc:	6239      	str	r1, [r7, #32]
 8003ede:	0019      	movs	r1, r3
 8003ee0:	231e      	movs	r3, #30
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	231c      	movs	r3, #28
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	1c0a      	adds	r2, r1, #0
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	466b      	mov	r3, sp
 8003ef0:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8003ef2:	2322      	movs	r3, #34	@ 0x22
 8003ef4:	2118      	movs	r1, #24
 8003ef6:	185b      	adds	r3, r3, r1
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	2200      	movs	r2, #0
 8003efc:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t pixelBuffer[w*h];
 8003efe:	2340      	movs	r3, #64	@ 0x40
 8003f00:	185b      	adds	r3, r3, r1
 8003f02:	19db      	adds	r3, r3, r7
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	2244      	movs	r2, #68	@ 0x44
 8003f08:	1852      	adds	r2, r2, r1
 8003f0a:	19d2      	adds	r2, r2, r7
 8003f0c:	8812      	ldrh	r2, [r2, #0]
 8003f0e:	4353      	muls	r3, r2
 8003f10:	1e5a      	subs	r2, r3, #1
 8003f12:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f14:	001a      	movs	r2, r3
 8003f16:	60ba      	str	r2, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60fa      	str	r2, [r7, #12]
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	0002      	movs	r2, r0
 8003f22:	0f12      	lsrs	r2, r2, #28
 8003f24:	000e      	movs	r6, r1
 8003f26:	0136      	lsls	r6, r6, #4
 8003f28:	617e      	str	r6, [r7, #20]
 8003f2a:	697e      	ldr	r6, [r7, #20]
 8003f2c:	4316      	orrs	r6, r2
 8003f2e:	617e      	str	r6, [r7, #20]
 8003f30:	0002      	movs	r2, r0
 8003f32:	0112      	lsls	r2, r2, #4
 8003f34:	613a      	str	r2, [r7, #16]
 8003f36:	001a      	movs	r2, r3
 8003f38:	603a      	str	r2, [r7, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	0002      	movs	r2, r0
 8003f44:	0f12      	lsrs	r2, r2, #28
 8003f46:	000e      	movs	r6, r1
 8003f48:	0135      	lsls	r5, r6, #4
 8003f4a:	4315      	orrs	r5, r2
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	0114      	lsls	r4, r2, #4
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	3307      	adds	r3, #7
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	466a      	mov	r2, sp
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	469d      	mov	sp, r3
 8003f5e:	ab02      	add	r3, sp, #8
 8003f60:	3301      	adds	r3, #1
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	633b      	str	r3, [r7, #48]	@ 0x30

for(i=0; i<c; i++)
 8003f68:	2326      	movs	r3, #38	@ 0x26
 8003f6a:	2118      	movs	r1, #24
 8003f6c:	185b      	adds	r3, r3, r1
 8003f6e:	19db      	adds	r3, r3, r7
 8003f70:	2200      	movs	r2, #0
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	e05d      	b.n	8004032 <drawImage+0x162>
{
	ind = image[i][0];
 8003f76:	2126      	movs	r1, #38	@ 0x26
 8003f78:	2018      	movs	r0, #24
 8003f7a:	180b      	adds	r3, r1, r0
 8003f7c:	19db      	adds	r3, r3, r7
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	18d2      	adds	r2, r2, r3
 8003f86:	2316      	movs	r3, #22
 8003f88:	181b      	adds	r3, r3, r0
 8003f8a:	19db      	adds	r3, r3, r7
 8003f8c:	8812      	ldrh	r2, [r2, #0]
 8003f8e:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8003f90:	180b      	adds	r3, r1, r0
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9a:	18d2      	adds	r2, r2, r3
 8003f9c:	2314      	movs	r3, #20
 8003f9e:	181b      	adds	r3, r3, r0
 8003fa0:	19db      	adds	r3, r3, r7
 8003fa2:	8852      	ldrh	r2, [r2, #2]
 8003fa4:	801a      	strh	r2, [r3, #0]

	for(j=0; j<count; j++)
 8003fa6:	2324      	movs	r3, #36	@ 0x24
 8003fa8:	181b      	adds	r3, r3, r0
 8003faa:	19db      	adds	r3, r3, r7
 8003fac:	2200      	movs	r2, #0
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	e02c      	b.n	800400c <drawImage+0x13c>
	{
		pixelBuffer[totalInd++] = ((palette[ind] & 0xFF)<<8) | (palette[ind] >> 8);
 8003fb2:	2116      	movs	r1, #22
 8003fb4:	2018      	movs	r0, #24
 8003fb6:	180b      	adds	r3, r1, r0
 8003fb8:	19db      	adds	r3, r3, r7
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	6a3a      	ldr	r2, [r7, #32]
 8003fc0:	18d3      	adds	r3, r2, r3
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	b21a      	sxth	r2, r3
 8003fc8:	180b      	adds	r3, r1, r0
 8003fca:	19db      	adds	r3, r3, r7
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	18cb      	adds	r3, r1, r3
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b21b      	sxth	r3, r3
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b219      	sxth	r1, r3
 8003fe0:	2222      	movs	r2, #34	@ 0x22
 8003fe2:	1813      	adds	r3, r2, r0
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	0004      	movs	r4, r0
 8003fea:	1812      	adds	r2, r2, r0
 8003fec:	19d2      	adds	r2, r2, r7
 8003fee:	1c58      	adds	r0, r3, #1
 8003ff0:	8010      	strh	r0, [r2, #0]
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	b289      	uxth	r1, r1
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	0052      	lsls	r2, r2, #1
 8003ffa:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8003ffc:	2124      	movs	r1, #36	@ 0x24
 8003ffe:	190b      	adds	r3, r1, r4
 8004000:	19db      	adds	r3, r3, r7
 8004002:	881a      	ldrh	r2, [r3, #0]
 8004004:	190b      	adds	r3, r1, r4
 8004006:	19db      	adds	r3, r3, r7
 8004008:	3201      	adds	r2, #1
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	2324      	movs	r3, #36	@ 0x24
 800400e:	2018      	movs	r0, #24
 8004010:	181b      	adds	r3, r3, r0
 8004012:	19da      	adds	r2, r3, r7
 8004014:	2314      	movs	r3, #20
 8004016:	181b      	adds	r3, r3, r0
 8004018:	19db      	adds	r3, r3, r7
 800401a:	8812      	ldrh	r2, [r2, #0]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d3c7      	bcc.n	8003fb2 <drawImage+0xe2>
for(i=0; i<c; i++)
 8004022:	2126      	movs	r1, #38	@ 0x26
 8004024:	180b      	adds	r3, r1, r0
 8004026:	19db      	adds	r3, r3, r7
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	180b      	adds	r3, r1, r0
 800402c:	19db      	adds	r3, r3, r7
 800402e:	3201      	adds	r2, #1
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	2326      	movs	r3, #38	@ 0x26
 8004034:	2118      	movs	r1, #24
 8004036:	185b      	adds	r3, r3, r1
 8004038:	19da      	adds	r2, r3, r7
 800403a:	2348      	movs	r3, #72	@ 0x48
 800403c:	185b      	adds	r3, r3, r1
 800403e:	19db      	adds	r3, r3, r7
 8004040:	8812      	ldrh	r2, [r2, #0]
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d396      	bcc.n	8003f76 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, pixelBuffer);
 8004048:	2344      	movs	r3, #68	@ 0x44
 800404a:	185b      	adds	r3, r3, r1
 800404c:	19db      	adds	r3, r3, r7
 800404e:	881c      	ldrh	r4, [r3, #0]
 8004050:	2340      	movs	r3, #64	@ 0x40
 8004052:	185b      	adds	r3, r3, r1
 8004054:	19db      	adds	r3, r3, r7
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	231e      	movs	r3, #30
 800405a:	18fb      	adds	r3, r7, r3
 800405c:	8819      	ldrh	r1, [r3, #0]
 800405e:	231c      	movs	r3, #28
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	8818      	ldrh	r0, [r3, #0]
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	0023      	movs	r3, r4
 800406a:	f000 fa31 	bl	80044d0 <ST7735_DrawImage>
 800406e:	46c5      	mov	sp, r8
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b010      	add	sp, #64	@ 0x40
 8004076:	bc80      	pop	{r7}
 8004078:	46b8      	mov	r8, r7
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800407c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8004080:	23a0      	movs	r3, #160	@ 0xa0
 8004082:	05db      	lsls	r3, r3, #23
 8004084:	2200      	movs	r2, #0
 8004086:	2120      	movs	r1, #32
 8004088:	0018      	movs	r0, r3
 800408a:	f005 f942 	bl	8009312 <HAL_GPIO_WritePin>
}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8004098:	23a0      	movs	r3, #160	@ 0xa0
 800409a:	05db      	lsls	r3, r3, #23
 800409c:	2201      	movs	r2, #1
 800409e:	2120      	movs	r1, #32
 80040a0:	0018      	movs	r0, r3
 80040a2:	f005 f936 	bl	8009312 <HAL_GPIO_WritePin>
}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <ST7735_Reset>:

void ST7735_Reset()
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	0219      	lsls	r1, r3, #8
 80040b4:	23a0      	movs	r3, #160	@ 0xa0
 80040b6:	05db      	lsls	r3, r3, #23
 80040b8:	2200      	movs	r2, #0
 80040ba:	0018      	movs	r0, r3
 80040bc:	f005 f929 	bl	8009312 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80040c0:	2005      	movs	r0, #5
 80040c2:	f004 fcd3 	bl	8008a6c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80040c6:	2380      	movs	r3, #128	@ 0x80
 80040c8:	0219      	lsls	r1, r3, #8
 80040ca:	23a0      	movs	r3, #160	@ 0xa0
 80040cc:	05db      	lsls	r3, r3, #23
 80040ce:	2201      	movs	r2, #1
 80040d0:	0018      	movs	r0, r3
 80040d2:	f005 f91e 	bl	8009312 <HAL_GPIO_WritePin>
}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	0002      	movs	r2, r0
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80040e8:	23a0      	movs	r3, #160	@ 0xa0
 80040ea:	05db      	lsls	r3, r3, #23
 80040ec:	2200      	movs	r2, #0
 80040ee:	2110      	movs	r1, #16
 80040f0:	0018      	movs	r0, r3
 80040f2:	f005 f90e 	bl	8009312 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80040f6:	2301      	movs	r3, #1
 80040f8:	425b      	negs	r3, r3
 80040fa:	1df9      	adds	r1, r7, #7
 80040fc:	4803      	ldr	r0, [pc, #12]	@ (800410c <ST7735_WriteCommand+0x30>)
 80040fe:	2201      	movs	r2, #1
 8004100:	f007 fdc0 	bl	800bc84 <HAL_SPI_Transmit>
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b002      	add	sp, #8
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20003618 	.word	0x20003618

08004110 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800411a:	23a0      	movs	r3, #160	@ 0xa0
 800411c:	05db      	lsls	r3, r3, #23
 800411e:	2201      	movs	r2, #1
 8004120:	2110      	movs	r1, #16
 8004122:	0018      	movs	r0, r3
 8004124:	f005 f8f5 	bl	8009312 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	b29a      	uxth	r2, r3
 800412c:	2301      	movs	r3, #1
 800412e:	425b      	negs	r3, r3
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4803      	ldr	r0, [pc, #12]	@ (8004140 <ST7735_WriteData+0x30>)
 8004134:	f007 fda6 	bl	800bc84 <HAL_SPI_Transmit>
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20003618 	.word	0x20003618

08004144 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	220f      	movs	r2, #15
 8004154:	18ba      	adds	r2, r7, r2
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800415a:	e04a      	b.n	80041f2 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	210b      	movs	r1, #11
 8004164:	187a      	adds	r2, r7, r1
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800416a:	187b      	adds	r3, r7, r1
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	0018      	movs	r0, r3
 8004170:	f7ff ffb4 	bl	80040dc <ST7735_WriteCommand>

        numArgs = *addr++;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	200a      	movs	r0, #10
 800417c:	183a      	adds	r2, r7, r0
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8004182:	183b      	adds	r3, r7, r0
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b29a      	uxth	r2, r3
 8004188:	230c      	movs	r3, #12
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2180      	movs	r1, #128	@ 0x80
 800418e:	400a      	ands	r2, r1
 8004190:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8004192:	183b      	adds	r3, r7, r0
 8004194:	183a      	adds	r2, r7, r0
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	217f      	movs	r1, #127	@ 0x7f
 800419a:	400a      	ands	r2, r1
 800419c:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 800419e:	183b      	adds	r3, r7, r0
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80041a6:	0004      	movs	r4, r0
 80041a8:	183b      	adds	r3, r7, r0
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	0011      	movs	r1, r2
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7ff ffad 	bl	8004110 <ST7735_WriteData>
            addr += numArgs;
 80041b6:	193b      	adds	r3, r7, r4
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	18d3      	adds	r3, r2, r3
 80041be:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80041c0:	210c      	movs	r1, #12
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d013      	beq.n	80041f2 <DisplayInit+0xae>
            ms = *addr++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	2bff      	cmp	r3, #255	@ 0xff
 80041dc:	d103      	bne.n	80041e6 <DisplayInit+0xa2>
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	22fa      	movs	r2, #250	@ 0xfa
 80041e2:	0052      	lsls	r2, r2, #1
 80041e4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80041e6:	230c      	movs	r3, #12
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f004 fc3d 	bl	8008a6c <HAL_Delay>
    while(numCommands--) {
 80041f2:	220f      	movs	r2, #15
 80041f4:	18bb      	adds	r3, r7, r2
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	18ba      	adds	r2, r7, r2
 80041fa:	1e59      	subs	r1, r3, #1
 80041fc:	7011      	strb	r1, [r2, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ac      	bne.n	800415c <DisplayInit+0x18>
        }
    }
}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b005      	add	sp, #20
 800420a:	bd90      	pop	{r4, r7, pc}

0800420c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800420c:	b5b0      	push	{r4, r5, r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	0005      	movs	r5, r0
 8004214:	000c      	movs	r4, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	1c2a      	adds	r2, r5, #0
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	1dbb      	adds	r3, r7, #6
 8004222:	1c22      	adds	r2, r4, #0
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	1d7b      	adds	r3, r7, #5
 8004228:	1c02      	adds	r2, r0, #0
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	1c0a      	adds	r2, r1, #0
 8004230:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8004232:	202a      	movs	r0, #42	@ 0x2a
 8004234:	f7ff ff52 	bl	80040dc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8004238:	210c      	movs	r1, #12
 800423a:	187b      	adds	r3, r7, r1
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	4b1c      	ldr	r3, [pc, #112]	@ (80042b4 <ST7735_SetAddressWindow+0xa8>)
 8004242:	781a      	ldrb	r2, [r3, #0]
 8004244:	1dfb      	adds	r3, r7, #7
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	18d3      	adds	r3, r2, r3
 800424a:	b2da      	uxtb	r2, r3
 800424c:	187b      	adds	r3, r7, r1
 800424e:	705a      	strb	r2, [r3, #1]
 8004250:	187b      	adds	r3, r7, r1
 8004252:	2200      	movs	r2, #0
 8004254:	709a      	strb	r2, [r3, #2]
 8004256:	4b17      	ldr	r3, [pc, #92]	@ (80042b4 <ST7735_SetAddressWindow+0xa8>)
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	1d7b      	adds	r3, r7, #5
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	18d3      	adds	r3, r2, r3
 8004260:	b2da      	uxtb	r2, r3
 8004262:	187b      	adds	r3, r7, r1
 8004264:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8004266:	000c      	movs	r4, r1
 8004268:	187b      	adds	r3, r7, r1
 800426a:	2104      	movs	r1, #4
 800426c:	0018      	movs	r0, r3
 800426e:	f7ff ff4f 	bl	8004110 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8004272:	202b      	movs	r0, #43	@ 0x2b
 8004274:	f7ff ff32 	bl	80040dc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8004278:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <ST7735_SetAddressWindow+0xac>)
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	1dbb      	adds	r3, r7, #6
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	18d3      	adds	r3, r2, r3
 8004282:	b2da      	uxtb	r2, r3
 8004284:	0021      	movs	r1, r4
 8004286:	187b      	adds	r3, r7, r1
 8004288:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800428a:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <ST7735_SetAddressWindow+0xac>)
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	b2da      	uxtb	r2, r3
 8004296:	187b      	adds	r3, r7, r1
 8004298:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800429a:	187b      	adds	r3, r7, r1
 800429c:	2104      	movs	r1, #4
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff ff36 	bl	8004110 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80042a4:	202c      	movs	r0, #44	@ 0x2c
 80042a6:	f7ff ff19 	bl	80040dc <ST7735_WriteCommand>
}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bdb0      	pop	{r4, r5, r7, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	2000251b 	.word	0x2000251b
 80042b8:	2000251c 	.word	0x2000251c

080042bc <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	0002      	movs	r2, r0
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80042c8:	f7ff fed8 	bl	800407c <ST7735_Select>
    ST7735_Reset();
 80042cc:	f7ff feee 	bl	80040ac <ST7735_Reset>
    DisplayInit(init_cmds1);
 80042d0:	4b0e      	ldr	r3, [pc, #56]	@ (800430c <ST7735_Init+0x50>)
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7ff ff36 	bl	8004144 <DisplayInit>
    DisplayInit(init_cmds2);
 80042d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <ST7735_Init+0x54>)
 80042da:	0018      	movs	r0, r3
 80042dc:	f7ff ff32 	bl	8004144 <DisplayInit>
    DisplayInit(init_cmds3);
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <ST7735_Init+0x58>)
 80042e2:	0018      	movs	r0, r3
 80042e4:	f7ff ff2e 	bl	8004144 <DisplayInit>
    ST7735_Select();
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();
#else
    _colstart = 0;
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <ST7735_Init+0x5c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <ST7735_Init+0x60>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80042f4:	1dfb      	adds	r3, r7, #7
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f000 f811 	bl	8004320 <ST7735_SetRotation>
    ST7735_Unselect();
 80042fe:	f7ff fec9 	bl	8004094 <ST7735_Unselect>

}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b002      	add	sp, #8
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	08012268 	.word	0x08012268
 8004310:	080122a0 	.word	0x080122a0
 8004314:	080122b0 	.word	0x080122b0
 8004318:	20002519 	.word	0x20002519
 800431c:	2000251a 	.word	0x2000251a

08004320 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	0002      	movs	r2, r0
 8004328:	1dfb      	adds	r3, r7, #7
 800432a:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 800432c:	230f      	movs	r3, #15
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8004334:	1dfb      	adds	r3, r7, #7
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2203      	movs	r2, #3
 800433a:	4013      	ands	r3, r2
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b36      	ldr	r3, [pc, #216]	@ (8004418 <ST7735_SetRotation+0xf8>)
 8004340:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8004342:	4b35      	ldr	r3, [pc, #212]	@ (8004418 <ST7735_SetRotation+0xf8>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b03      	cmp	r3, #3
 8004348:	d041      	beq.n	80043ce <ST7735_SetRotation+0xae>
 800434a:	dc53      	bgt.n	80043f4 <ST7735_SetRotation+0xd4>
 800434c:	2b02      	cmp	r3, #2
 800434e:	d02b      	beq.n	80043a8 <ST7735_SetRotation+0x88>
 8004350:	dc50      	bgt.n	80043f4 <ST7735_SetRotation+0xd4>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <ST7735_SetRotation+0x3c>
 8004356:	2b01      	cmp	r3, #1
 8004358:	d013      	beq.n	8004382 <ST7735_SetRotation+0x62>
 800435a:	e04b      	b.n	80043f4 <ST7735_SetRotation+0xd4>
  {
  case 0:
#ifdef ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800435c:	230f      	movs	r3, #15
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	22c0      	movs	r2, #192	@ 0xc0
 8004362:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004364:	4b2d      	ldr	r3, [pc, #180]	@ (800441c <ST7735_SetRotation+0xfc>)
 8004366:	22a0      	movs	r2, #160	@ 0xa0
 8004368:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800436a:	4b2d      	ldr	r3, [pc, #180]	@ (8004420 <ST7735_SetRotation+0x100>)
 800436c:	2280      	movs	r2, #128	@ 0x80
 800436e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8004370:	4b2c      	ldr	r3, [pc, #176]	@ (8004424 <ST7735_SetRotation+0x104>)
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <ST7735_SetRotation+0x108>)
 8004376:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8004378:	4b2c      	ldr	r3, [pc, #176]	@ (800442c <ST7735_SetRotation+0x10c>)
 800437a:	781a      	ldrb	r2, [r3, #0]
 800437c:	4b2c      	ldr	r3, [pc, #176]	@ (8004430 <ST7735_SetRotation+0x110>)
 800437e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004380:	e038      	b.n	80043f4 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004382:	230f      	movs	r3, #15
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	22a0      	movs	r2, #160	@ 0xa0
 8004388:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800438a:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <ST7735_SetRotation+0x100>)
 800438c:	22a0      	movs	r2, #160	@ 0xa0
 800438e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004390:	4b22      	ldr	r3, [pc, #136]	@ (800441c <ST7735_SetRotation+0xfc>)
 8004392:	2280      	movs	r2, #128	@ 0x80
 8004394:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8004396:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <ST7735_SetRotation+0x104>)
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <ST7735_SetRotation+0x110>)
 800439c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800439e:	4b23      	ldr	r3, [pc, #140]	@ (800442c <ST7735_SetRotation+0x10c>)
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	4b21      	ldr	r3, [pc, #132]	@ (8004428 <ST7735_SetRotation+0x108>)
 80043a4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80043a6:	e025      	b.n	80043f4 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_RGB;
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	2200      	movs	r2, #0
 80043ae:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80043b0:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <ST7735_SetRotation+0xfc>)
 80043b2:	22a0      	movs	r2, #160	@ 0xa0
 80043b4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80043b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <ST7735_SetRotation+0x100>)
 80043b8:	2280      	movs	r2, #128	@ 0x80
 80043ba:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80043bc:	4b19      	ldr	r3, [pc, #100]	@ (8004424 <ST7735_SetRotation+0x104>)
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	4b19      	ldr	r3, [pc, #100]	@ (8004428 <ST7735_SetRotation+0x108>)
 80043c2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80043c4:	4b19      	ldr	r3, [pc, #100]	@ (800442c <ST7735_SetRotation+0x10c>)
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <ST7735_SetRotation+0x110>)
 80043ca:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80043cc:	e012      	b.n	80043f4 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80043ce:	230f      	movs	r3, #15
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2260      	movs	r2, #96	@ 0x60
 80043d4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80043d6:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <ST7735_SetRotation+0x100>)
 80043d8:	22a0      	movs	r2, #160	@ 0xa0
 80043da:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80043dc:	4b0f      	ldr	r3, [pc, #60]	@ (800441c <ST7735_SetRotation+0xfc>)
 80043de:	2280      	movs	r2, #128	@ 0x80
 80043e0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <ST7735_SetRotation+0x104>)
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <ST7735_SetRotation+0x110>)
 80043e8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <ST7735_SetRotation+0x10c>)
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <ST7735_SetRotation+0x108>)
 80043f0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80043f2:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 80043f4:	f7ff fe42 	bl	800407c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80043f8:	2036      	movs	r0, #54	@ 0x36
 80043fa:	f7ff fe6f 	bl	80040dc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80043fe:	230f      	movs	r3, #15
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	2101      	movs	r1, #1
 8004404:	0018      	movs	r0, r3
 8004406:	f7ff fe83 	bl	8004110 <ST7735_WriteData>
  ST7735_Unselect();
 800440a:	f7ff fe43 	bl	8004094 <ST7735_Unselect>
}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	46bd      	mov	sp, r7
 8004412:	b004      	add	sp, #16
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	20002518 	.word	0x20002518
 800441c:	20002516 	.word	0x20002516
 8004420:	20002514 	.word	0x20002514
 8004424:	20002519 	.word	0x20002519
 8004428:	2000251b 	.word	0x2000251b
 800442c:	2000251a 	.word	0x2000251a
 8004430:	2000251c 	.word	0x2000251c

08004434 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8004434:	b590      	push	{r4, r7, lr}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	0004      	movs	r4, r0
 800443c:	0008      	movs	r0, r1
 800443e:	0011      	movs	r1, r2
 8004440:	1dbb      	adds	r3, r7, #6
 8004442:	1c22      	adds	r2, r4, #0
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	1c02      	adds	r2, r0, #0
 800444a:	801a      	strh	r2, [r3, #0]
 800444c:	1cbb      	adds	r3, r7, #2
 800444e:	1c0a      	adds	r2, r1, #0
 8004450:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8004452:	1dbb      	adds	r3, r7, #6
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	4a1c      	ldr	r2, [pc, #112]	@ (80044c8 <ST7735_DrawPixel+0x94>)
 8004458:	2100      	movs	r1, #0
 800445a:	5e52      	ldrsh	r2, [r2, r1]
 800445c:	4293      	cmp	r3, r2
 800445e:	da2f      	bge.n	80044c0 <ST7735_DrawPixel+0x8c>
 8004460:	1d3b      	adds	r3, r7, #4
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	4a19      	ldr	r2, [pc, #100]	@ (80044cc <ST7735_DrawPixel+0x98>)
 8004466:	2100      	movs	r1, #0
 8004468:	5e52      	ldrsh	r2, [r2, r1]
 800446a:	4293      	cmp	r3, r2
 800446c:	da28      	bge.n	80044c0 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 800446e:	f7ff fe05 	bl	800407c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8004472:	1dbb      	adds	r3, r7, #6
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b2d8      	uxtb	r0, r3
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b2d9      	uxtb	r1, r3
 800447e:	1dbb      	adds	r3, r7, #6
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3301      	adds	r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	1d3b      	adds	r3, r7, #4
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3301      	adds	r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f7ff febb 	bl	800420c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8004496:	1cbb      	adds	r3, r7, #2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	210c      	movs	r1, #12
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	1cbb      	adds	r3, r7, #2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	2102      	movs	r1, #2
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff fe2b 	bl	8004110 <ST7735_WriteData>

    ST7735_Unselect();
 80044ba:	f7ff fdeb 	bl	8004094 <ST7735_Unselect>
 80044be:	e000      	b.n	80044c2 <ST7735_DrawPixel+0x8e>
        return;
 80044c0:	46c0      	nop			@ (mov r8, r8)
}
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b005      	add	sp, #20
 80044c6:	bd90      	pop	{r4, r7, pc}
 80044c8:	20002514 	.word	0x20002514
 80044cc:	20002516 	.word	0x20002516

080044d0 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80044d0:	b5b0      	push	{r4, r5, r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	0005      	movs	r5, r0
 80044d8:	000c      	movs	r4, r1
 80044da:	0010      	movs	r0, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	1dbb      	adds	r3, r7, #6
 80044e0:	1c2a      	adds	r2, r5, #0
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	1c22      	adds	r2, r4, #0
 80044e8:	801a      	strh	r2, [r3, #0]
 80044ea:	1cbb      	adds	r3, r7, #2
 80044ec:	1c02      	adds	r2, r0, #0
 80044ee:	801a      	strh	r2, [r3, #0]
 80044f0:	003b      	movs	r3, r7
 80044f2:	1c0a      	adds	r2, r1, #0
 80044f4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80044f6:	1dbb      	adds	r3, r7, #6
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	4a2a      	ldr	r2, [pc, #168]	@ (80045a4 <ST7735_DrawImage+0xd4>)
 80044fc:	2100      	movs	r1, #0
 80044fe:	5e52      	ldrsh	r2, [r2, r1]
 8004500:	4293      	cmp	r3, r2
 8004502:	da47      	bge.n	8004594 <ST7735_DrawImage+0xc4>
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	4a27      	ldr	r2, [pc, #156]	@ (80045a8 <ST7735_DrawImage+0xd8>)
 800450a:	2100      	movs	r1, #0
 800450c:	5e52      	ldrsh	r2, [r2, r1]
 800450e:	4293      	cmp	r3, r2
 8004510:	da40      	bge.n	8004594 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	1cbb      	adds	r3, r7, #2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	4a21      	ldr	r2, [pc, #132]	@ (80045a4 <ST7735_DrawImage+0xd4>)
 800451e:	2100      	movs	r1, #0
 8004520:	5e52      	ldrsh	r2, [r2, r1]
 8004522:	4293      	cmp	r3, r2
 8004524:	dc38      	bgt.n	8004598 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	881a      	ldrh	r2, [r3, #0]
 800452a:	003b      	movs	r3, r7
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	18d3      	adds	r3, r2, r3
 8004530:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <ST7735_DrawImage+0xd8>)
 8004532:	2100      	movs	r1, #0
 8004534:	5e52      	ldrsh	r2, [r2, r1]
 8004536:	4293      	cmp	r3, r2
 8004538:	dc30      	bgt.n	800459c <ST7735_DrawImage+0xcc>

    ST7735_Select();
 800453a:	f7ff fd9f 	bl	800407c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	b2d8      	uxtb	r0, r3
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b2d9      	uxtb	r1, r3
 800454a:	1dbb      	adds	r3, r7, #6
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	1cbb      	adds	r3, r7, #2
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	18d3      	adds	r3, r2, r3
 8004558:	b2db      	uxtb	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b2dc      	uxtb	r4, r3
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	003b      	movs	r3, r7
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	18d3      	adds	r3, r2, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	0022      	movs	r2, r4
 8004574:	f7ff fe4a 	bl	800420c <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8004578:	1cbb      	adds	r3, r7, #2
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	003a      	movs	r2, r7
 800457e:	8812      	ldrh	r2, [r2, #0]
 8004580:	4353      	muls	r3, r2
 8004582:	005a      	lsls	r2, r3, #1
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	0011      	movs	r1, r2
 8004588:	0018      	movs	r0, r3
 800458a:	f7ff fdc1 	bl	8004110 <ST7735_WriteData>
    ST7735_Unselect();
 800458e:	f7ff fd81 	bl	8004094 <ST7735_Unselect>
 8004592:	e004      	b.n	800459e <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8004594:	46c0      	nop			@ (mov r8, r8)
 8004596:	e002      	b.n	800459e <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8004598:	46c0      	nop			@ (mov r8, r8)
 800459a:	e000      	b.n	800459e <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 800459c:	46c0      	nop			@ (mov r8, r8)
}
 800459e:	46bd      	mov	sp, r7
 80045a0:	b002      	add	sp, #8
 80045a2:	bdb0      	pop	{r4, r5, r7, pc}
 80045a4:	20002514 	.word	0x20002514
 80045a8:	20002516 	.word	0x20002516

080045ac <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80045ac:	b5b0      	push	{r4, r5, r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <minmea_tocoord+0x14>
        return NAN;
 80045bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004630 <minmea_tocoord+0x84>)
 80045be:	e033      	b.n	8004628 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2164      	movs	r1, #100	@ 0x64
 80045ca:	434b      	muls	r3, r1
 80045cc:	0019      	movs	r1, r3
 80045ce:	0010      	movs	r0, r2
 80045d0:	f7fb fe4a 	bl	8000268 <__divsi3>
 80045d4:	0003      	movs	r3, r0
 80045d6:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2164      	movs	r1, #100	@ 0x64
 80045e2:	434b      	muls	r3, r1
 80045e4:	0019      	movs	r1, r3
 80045e6:	0010      	movs	r0, r2
 80045e8:	f7fb ff24 	bl	8000434 <__aeabi_idivmod>
 80045ec:	000b      	movs	r3, r1
 80045ee:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7fc ffcf 	bl	8001594 <__aeabi_i2f>
 80045f6:	1c04      	adds	r4, r0, #0
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f7fc ffcb 	bl	8001594 <__aeabi_i2f>
 80045fe:	1c05      	adds	r5, r0, #0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	0013      	movs	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	0018      	movs	r0, r3
 800460e:	f7fc ffc1 	bl	8001594 <__aeabi_i2f>
 8004612:	1c03      	adds	r3, r0, #0
 8004614:	1c19      	adds	r1, r3, #0
 8004616:	1c28      	adds	r0, r5, #0
 8004618:	f7fc fad4 	bl	8000bc4 <__aeabi_fdiv>
 800461c:	1c03      	adds	r3, r0, #0
 800461e:	1c19      	adds	r1, r3, #0
 8004620:	1c20      	adds	r0, r4, #0
 8004622:	f7fc f945 	bl	80008b0 <__aeabi_fadd>
 8004626:	1c03      	adds	r3, r0, #0
}
 8004628:	1c18      	adds	r0, r3, #0
 800462a:	46bd      	mov	sp, r7
 800462c:	b004      	add	sp, #16
 800462e:	bdb0      	pop	{r4, r5, r7, pc}
 8004630:	7fc00000 	.word	0x7fc00000

08004634 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    return json->sibling;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	220a      	movs	r2, #10
 800466a:	2100      	movs	r1, #0
 800466c:	0018      	movs	r0, r3
 800466e:	f00a fd05 	bl	800f07c <strtoll>
 8004672:	0002      	movs	r2, r0
 8004674:	000b      	movs	r3, r1
}
 8004676:	0010      	movs	r0, r2
 8004678:	0019      	movs	r1, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2100      	movs	r1, #0
 800468e:	0018      	movs	r0, r3
 8004690:	f00a fbac 	bl	800edec <strtod>
 8004694:	0002      	movs	r2, r0
 8004696:	000b      	movs	r3, r1
}
 8004698:	0010      	movs	r0, r2
 800469a:	0019      	movs	r1, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046a4:	b5b0      	push	{r4, r5, r7, lr}
 80046a6:	b08e      	sub	sp, #56	@ 0x38
 80046a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046aa:	f004 f959 	bl	8008960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046ae:	f000 fc9f 	bl	8004ff0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	StructInit();
 80046b2:	f001 f9c3 	bl	8005a3c <StructInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046b6:	f000 ff51 	bl	800555c <MX_GPIO_Init>
  MX_I2C1_Init();
 80046ba:	f000 fcfb 	bl	80050b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80046be:	f000 fde9 	bl	8005294 <MX_SPI1_Init>
  MX_TIM17_Init();
 80046c2:	f000 fe27 	bl	8005314 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80046c6:	f000 fead 	bl	8005424 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80046ca:	f000 fef9 	bl	80054c0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80046ce:	f000 fd31 	bl	8005134 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	PeripheralInit();
 80046d2:	f001 f975 	bl	80059c0 <PeripheralInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//Before entering the while, fill the screen to clear it once
	fillScreen(BLACK);
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7ff fb86 	bl	8003de8 <fillScreen>
	while (1) {
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 80046dc:	4aad      	ldr	r2, [pc, #692]	@ (8004994 <main+0x2f0>)
 80046de:	2392      	movs	r3, #146	@ 0x92
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	58d3      	ldr	r3, [r2, r3]
 80046e4:	4aab      	ldr	r2, [pc, #684]	@ (8004994 <main+0x2f0>)
 80046e6:	7c12      	ldrb	r2, [r2, #16]
 80046e8:	3201      	adds	r2, #1
 80046ea:	435a      	muls	r2, r3
 80046ec:	0011      	movs	r1, r2
 80046ee:	4aa9      	ldr	r2, [pc, #676]	@ (8004994 <main+0x2f0>)
 80046f0:	2394      	movs	r3, #148	@ 0x94
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	50d1      	str	r1, [r2, r3]
		_ADXL343_ReadReg8(0x15, &steps, 2);
 80046f6:	4ba8      	ldr	r3, [pc, #672]	@ (8004998 <main+0x2f4>)
 80046f8:	2202      	movs	r2, #2
 80046fa:	0019      	movs	r1, r3
 80046fc:	2015      	movs	r0, #21
 80046fe:	f001 fe17 	bl	8006330 <_ADXL343_ReadReg8>

		//SendData();
		//ReceiveData();
		//_ADXL343_ReadReg8(0x00, &steps, 1);
		if (CheckExp(game.dailyGoal, game.stepsToday) == 1) {
 8004702:	4aa4      	ldr	r2, [pc, #656]	@ (8004994 <main+0x2f0>)
 8004704:	2392      	movs	r3, #146	@ 0x92
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	58d3      	ldr	r3, [r2, r3]
 800470a:	0018      	movs	r0, r3
 800470c:	4aa1      	ldr	r2, [pc, #644]	@ (8004994 <main+0x2f0>)
 800470e:	2390      	movs	r3, #144	@ 0x90
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	58d3      	ldr	r3, [r2, r3]
 8004714:	0019      	movs	r1, r3
 8004716:	f002 f919 	bl	800694c <CheckExp>
 800471a:	0003      	movs	r3, r0
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10c      	bne.n	800473a <main+0x96>
			game.mood += moodIncrementUp;
 8004720:	4b9c      	ldr	r3, [pc, #624]	@ (8004994 <main+0x2f0>)
 8004722:	7c5a      	ldrb	r2, [r3, #17]
 8004724:	2301      	movs	r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b99      	ldr	r3, [pc, #612]	@ (8004994 <main+0x2f0>)
 800472e:	745a      	strb	r2, [r3, #17]
			game.stepsToday = 0;
 8004730:	4a98      	ldr	r2, [pc, #608]	@ (8004994 <main+0x2f0>)
 8004732:	2390      	movs	r3, #144	@ 0x90
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2100      	movs	r1, #0
 8004738:	50d1      	str	r1, [r2, r3]
		}
		if(CheckExp(game.weeklyGoal, game.weeklySteps)==1) {
 800473a:	4a96      	ldr	r2, [pc, #600]	@ (8004994 <main+0x2f0>)
 800473c:	2394      	movs	r3, #148	@ 0x94
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	58d3      	ldr	r3, [r2, r3]
 8004742:	0018      	movs	r0, r3
 8004744:	4a93      	ldr	r2, [pc, #588]	@ (8004994 <main+0x2f0>)
 8004746:	238e      	movs	r3, #142	@ 0x8e
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	58d3      	ldr	r3, [r2, r3]
 800474c:	0019      	movs	r1, r3
 800474e:	f002 f8fd 	bl	800694c <CheckExp>
 8004752:	0003      	movs	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d106      	bne.n	8004766 <main+0xc2>
			Evolve();
 8004758:	f001 fb06 	bl	8005d68 <Evolve>
			game.weeklySteps=0;
 800475c:	4a8d      	ldr	r2, [pc, #564]	@ (8004994 <main+0x2f0>)
 800475e:	238e      	movs	r3, #142	@ 0x8e
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2100      	movs	r1, #0
 8004764:	50d1      	str	r1, [r2, r3]
		}

		if (checkTime) {
 8004766:	4b8d      	ldr	r3, [pc, #564]	@ (800499c <main+0x2f8>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d04c      	beq.n	8004808 <main+0x164>
			FlashWrite();
 800476e:	f001 fb35 	bl	8005ddc <FlashWrite>
			if (((game.time.minutes % dayLength) == 0)
 8004772:	4b88      	ldr	r3, [pc, #544]	@ (8004994 <main+0x2f0>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	0011      	movs	r1, r2
 800477a:	0018      	movs	r0, r3
 800477c:	f7fb fe5a 	bl	8000434 <__aeabi_idivmod>
 8004780:	1e0b      	subs	r3, r1, #0
 8004782:	d12c      	bne.n	80047de <main+0x13a>
					&& game.time.seconds > 0) {
 8004784:	4b83      	ldr	r3, [pc, #524]	@ (8004994 <main+0x2f0>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	dd28      	ble.n	80047de <main+0x13a>
				if (CheckExp(game.dailyGoal, game.stepsToday) == -1)
 800478c:	4a81      	ldr	r2, [pc, #516]	@ (8004994 <main+0x2f0>)
 800478e:	2392      	movs	r3, #146	@ 0x92
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	58d3      	ldr	r3, [r2, r3]
 8004794:	0018      	movs	r0, r3
 8004796:	4a7f      	ldr	r2, [pc, #508]	@ (8004994 <main+0x2f0>)
 8004798:	2390      	movs	r3, #144	@ 0x90
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	58d3      	ldr	r3, [r2, r3]
 800479e:	0019      	movs	r1, r3
 80047a0:	f002 f8d4 	bl	800694c <CheckExp>
 80047a4:	0003      	movs	r3, r0
 80047a6:	3301      	adds	r3, #1
 80047a8:	d107      	bne.n	80047ba <main+0x116>
					game.mood -= moodIncrementDown;
 80047aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004994 <main+0x2f0>)
 80047ac:	7c5a      	ldrb	r2, [r3, #17]
 80047ae:	2301      	movs	r3, #1
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4b77      	ldr	r3, [pc, #476]	@ (8004994 <main+0x2f0>)
 80047b8:	745a      	strb	r2, [r3, #17]
				game.stepsToday = 0;
 80047ba:	4a76      	ldr	r2, [pc, #472]	@ (8004994 <main+0x2f0>)
 80047bc:	2390      	movs	r3, #144	@ 0x90
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	2100      	movs	r1, #0
 80047c2:	50d1      	str	r1, [r2, r3]
				memset(&game.positions, 0, sizeof(game.positions));
 80047c4:	2380      	movs	r3, #128	@ 0x80
 80047c6:	005a      	lsls	r2, r3, #1
 80047c8:	4b75      	ldr	r3, [pc, #468]	@ (80049a0 <main+0x2fc>)
 80047ca:	2100      	movs	r1, #0
 80047cc:	0018      	movs	r0, r3
 80047ce:	f00a fd91 	bl	800f2f4 <memset>
				game.numLocations = 0;
 80047d2:	4b70      	ldr	r3, [pc, #448]	@ (8004994 <main+0x2f0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]
				checkTime = 0;
 80047d8:	4b70      	ldr	r3, [pc, #448]	@ (800499c <main+0x2f8>)
 80047da:	2200      	movs	r2, #0
 80047dc:	801a      	strh	r2, [r3, #0]
			}

			if (((game.time.minutes % weekLength) == 0)
 80047de:	4b6d      	ldr	r3, [pc, #436]	@ (8004994 <main+0x2f0>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	0011      	movs	r1, r2
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7fb fe24 	bl	8000434 <__aeabi_idivmod>
 80047ec:	1e0b      	subs	r3, r1, #0
 80047ee:	d10b      	bne.n	8004808 <main+0x164>
					&& game.time.seconds > 0) {
 80047f0:	4b68      	ldr	r3, [pc, #416]	@ (8004994 <main+0x2f0>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dd07      	ble.n	8004808 <main+0x164>
				game.weeklySteps = 0;
 80047f8:	4a66      	ldr	r2, [pc, #408]	@ (8004994 <main+0x2f0>)
 80047fa:	238e      	movs	r3, #142	@ 0x8e
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2100      	movs	r1, #0
 8004800:	50d1      	str	r1, [r2, r3]
				checkTime = 0;
 8004802:	4b66      	ldr	r3, [pc, #408]	@ (800499c <main+0x2f8>)
 8004804:	2200      	movs	r2, #0
 8004806:	801a      	strh	r2, [r3, #0]
			}
		}
		if (steps != 0) {
 8004808:	4b63      	ldr	r3, [pc, #396]	@ (8004998 <main+0x2f4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d027      	beq.n	8004860 <main+0x1bc>
			game.stepsToday += steps;
 8004810:	4a60      	ldr	r2, [pc, #384]	@ (8004994 <main+0x2f0>)
 8004812:	2390      	movs	r3, #144	@ 0x90
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	58d2      	ldr	r2, [r2, r3]
 8004818:	4b5f      	ldr	r3, [pc, #380]	@ (8004998 <main+0x2f4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	18d1      	adds	r1, r2, r3
 800481e:	4a5d      	ldr	r2, [pc, #372]	@ (8004994 <main+0x2f0>)
 8004820:	2390      	movs	r3, #144	@ 0x90
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	50d1      	str	r1, [r2, r3]
			game.weeklySteps += steps;
 8004826:	4a5b      	ldr	r2, [pc, #364]	@ (8004994 <main+0x2f0>)
 8004828:	238e      	movs	r3, #142	@ 0x8e
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	58d2      	ldr	r2, [r2, r3]
 800482e:	4b5a      	ldr	r3, [pc, #360]	@ (8004998 <main+0x2f4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	18d1      	adds	r1, r2, r3
 8004834:	4a57      	ldr	r2, [pc, #348]	@ (8004994 <main+0x2f0>)
 8004836:	238e      	movs	r3, #142	@ 0x8e
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	50d1      	str	r1, [r2, r3]
			game.allSteps += steps;
 800483c:	4a55      	ldr	r2, [pc, #340]	@ (8004994 <main+0x2f0>)
 800483e:	238c      	movs	r3, #140	@ 0x8c
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	58d2      	ldr	r2, [r2, r3]
 8004844:	4b54      	ldr	r3, [pc, #336]	@ (8004998 <main+0x2f4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	18d1      	adds	r1, r2, r3
 800484a:	4a52      	ldr	r2, [pc, #328]	@ (8004994 <main+0x2f0>)
 800484c:	238c      	movs	r3, #140	@ 0x8c
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	50d1      	str	r1, [r2, r3]
			steps = 0;
 8004852:	4b51      	ldr	r3, [pc, #324]	@ (8004998 <main+0x2f4>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
			_ADXL343_WriteReg8(0x7E, 0xB1);
 8004858:	21b1      	movs	r1, #177	@ 0xb1
 800485a:	207e      	movs	r0, #126	@ 0x7e
 800485c:	f001 fd9a 	bl	8006394 <_ADXL343_WriteReg8>
		}
		++updateScreen;
 8004860:	4b50      	ldr	r3, [pc, #320]	@ (80049a4 <main+0x300>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	4b4f      	ldr	r3, [pc, #316]	@ (80049a4 <main+0x300>)
 8004868:	601a      	str	r2, [r3, #0]
		//SendData();
		//HAL_UART_Transmit(&huart2, "hello", 5, 100);
		switch (currentMenu) {
 800486a:	4b4f      	ldr	r3, [pc, #316]	@ (80049a8 <main+0x304>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b04      	cmp	r3, #4
 8004870:	d100      	bne.n	8004874 <main+0x1d0>
 8004872:	e231      	b.n	8004cd8 <main+0x634>
 8004874:	dd00      	ble.n	8004878 <main+0x1d4>
 8004876:	e392      	b.n	8004f9e <main+0x8fa>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d100      	bne.n	800487e <main+0x1da>
 800487c:	e0aa      	b.n	80049d4 <main+0x330>
 800487e:	2b01      	cmp	r3, #1
 8004880:	d000      	beq.n	8004884 <main+0x1e0>
 8004882:	e38c      	b.n	8004f9e <main+0x8fa>
		case Main:
			if ((totalFrames) % 600 == 0){
 8004884:	4b49      	ldr	r3, [pc, #292]	@ (80049ac <main+0x308>)
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	2296      	movs	r2, #150	@ 0x96
 800488a:	0091      	lsls	r1, r2, #2
 800488c:	0018      	movs	r0, r3
 800488e:	f7fb fce7 	bl	8000260 <__aeabi_uidivmod>
 8004892:	000b      	movs	r3, r1
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <main+0x200>
				GetLatLon();
 800489a:	f002 f89b 	bl	80069d4 <GetLatLon>
				checkTime=1;
 800489e:	4b3f      	ldr	r3, [pc, #252]	@ (800499c <main+0x2f8>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	801a      	strh	r2, [r3, #0]
			}

			if (updateScreen >= 3) {
 80048a4:	4b3f      	ldr	r3, [pc, #252]	@ (80049a4 <main+0x300>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d92e      	bls.n	800490a <main+0x266>
				updateScreen = 0;
 80048ac:	4b3d      	ldr	r3, [pc, #244]	@ (80049a4 <main+0x300>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
				if(checkTime==1)
 80048b2:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <main+0x2f8>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d103      	bne.n	80048c2 <main+0x21e>
				AnimateCharacterSitting(imgPalette);
 80048ba:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <main+0x30c>)
 80048bc:	0018      	movs	r0, r3
 80048be:	f001 fcbb 	bl	8006238 <AnimateCharacterSitting>
				//Update steps
				drawString(0, 150, "-SILLY LITTLE GUY-", WHITE, BLACK, 1, 1);
 80048c2:	2301      	movs	r3, #1
 80048c4:	425b      	negs	r3, r3
 80048c6:	4a3b      	ldr	r2, [pc, #236]	@ (80049b4 <main+0x310>)
 80048c8:	2101      	movs	r1, #1
 80048ca:	9102      	str	r1, [sp, #8]
 80048cc:	2101      	movs	r1, #1
 80048ce:	9101      	str	r1, [sp, #4]
 80048d0:	2100      	movs	r1, #0
 80048d2:	9100      	str	r1, [sp, #0]
 80048d4:	2196      	movs	r1, #150	@ 0x96
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7ff f941 	bl	8003b5e <drawString>
				sprintf(buffer2, "Steps: %d ", game.stepsToday);
 80048dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004994 <main+0x2f0>)
 80048de:	2390      	movs	r3, #144	@ 0x90
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	58d2      	ldr	r2, [r2, r3]
 80048e4:	4934      	ldr	r1, [pc, #208]	@ (80049b8 <main+0x314>)
 80048e6:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <main+0x318>)
 80048e8:	0018      	movs	r0, r3
 80048ea:	f00a fc97 	bl	800f21c <siprintf>
				drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 80048ee:	4a33      	ldr	r2, [pc, #204]	@ (80049bc <main+0x318>)
 80048f0:	2301      	movs	r3, #1
 80048f2:	9302      	str	r3, [sp, #8]
 80048f4:	2301      	movs	r3, #1
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	4b31      	ldr	r3, [pc, #196]	@ (80049c0 <main+0x31c>)
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	210a      	movs	r1, #10
 8004900:	2000      	movs	r0, #0
 8004902:	f7ff f92c 	bl	8003b5e <drawString>
				Emote();
 8004906:	f002 f9bb 	bl	8006c80 <Emote>
			}

			//Interact with the SLG
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 800490a:	4b2e      	ldr	r3, [pc, #184]	@ (80049c4 <main+0x320>)
 800490c:	2102      	movs	r1, #2
 800490e:	0018      	movs	r0, r3
 8004910:	f004 fce2 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004914:	0003      	movs	r3, r0
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <main+0x27a>
				//if(game.weeklySteps == game.weeklyGoal)
				//{
					//Evolve();
				//}
				//Evolve();
				FlashErase();
 800491a:	f001 fa41 	bl	8005da0 <FlashErase>
				//FlashWrite();
				//StructInit();
			}

			//Change current Menu
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 800491e:	4b2a      	ldr	r3, [pc, #168]	@ (80049c8 <main+0x324>)
 8004920:	2104      	movs	r1, #4
 8004922:	0018      	movs	r0, r3
 8004924:	f004 fcd8 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004928:	0003      	movs	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d111      	bne.n	8004952 <main+0x2ae>
				effect = MenuBeep;
 800492e:	4b27      	ldr	r3, [pc, #156]	@ (80049cc <main+0x328>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004934:	4b25      	ldr	r3, [pc, #148]	@ (80049cc <main+0x328>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 fedd 	bl	80056f8 <PlayEffect>

				currentMenu = Settings;
 800493e:	4b1a      	ldr	r3, [pc, #104]	@ (80049a8 <main+0x304>)
 8004940:	2204      	movs	r2, #4
 8004942:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004944:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <main+0x32c>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 800494a:	2000      	movs	r0, #0
 800494c:	f7ff fa4c 	bl	8003de8 <fillScreen>
				canChange = 0;
				fillScreen(BLACK);
			} else
				canChange = 1;

			break;
 8004950:	e325      	b.n	8004f9e <main+0x8fa>
			} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	011a      	lsls	r2, r3, #4
 8004956:	23a0      	movs	r3, #160	@ 0xa0
 8004958:	05db      	lsls	r3, r3, #23
 800495a:	0011      	movs	r1, r2
 800495c:	0018      	movs	r0, r3
 800495e:	f004 fcbb 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004962:	0003      	movs	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d111      	bne.n	800498c <main+0x2e8>
				effect = MenuBeep;
 8004968:	4b18      	ldr	r3, [pc, #96]	@ (80049cc <main+0x328>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 800496e:	4b17      	ldr	r3, [pc, #92]	@ (80049cc <main+0x328>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	0018      	movs	r0, r3
 8004974:	f000 fec0 	bl	80056f8 <PlayEffect>
				currentMenu = StatsDisplay;
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <main+0x304>)
 800497a:	2200      	movs	r2, #0
 800497c:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 800497e:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <main+0x32c>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff fa2f 	bl	8003de8 <fillScreen>
			break;
 800498a:	e308      	b.n	8004f9e <main+0x8fa>
				canChange = 1;
 800498c:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <main+0x32c>)
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
			break;
 8004992:	e304      	b.n	8004f9e <main+0x8fa>
 8004994:	200025b4 	.word	0x200025b4
 8004998:	20003588 	.word	0x20003588
 800499c:	20002288 	.word	0x20002288
 80049a0:	200025cc 	.word	0x200025cc
 80049a4:	20002524 	.word	0x20002524
 80049a8:	2000228a 	.word	0x2000228a
 80049ac:	20002758 	.word	0x20002758
 80049b0:	20000000 	.word	0x20000000
 80049b4:	080119c8 	.word	0x080119c8
 80049b8:	080119dc 	.word	0x080119dc
 80049bc:	20003524 	.word	0x20003524
 80049c0:	ffff96cd 	.word	0xffff96cd
 80049c4:	50000800 	.word	0x50000800
 80049c8:	50000400 	.word	0x50000400
 80049cc:	20002520 	.word	0x20002520
 80049d0:	2000228b 	.word	0x2000228b
		case StatsDisplay:

			if (updateScreen >= 5) {
 80049d4:	4bec      	ldr	r3, [pc, #944]	@ (8004d88 <main+0x6e4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d800      	bhi.n	80049de <main+0x33a>
 80049dc:	e15e      	b.n	8004c9c <main+0x5f8>
				//fillScreen(BLACK);

				drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 80049de:	2301      	movs	r3, #1
 80049e0:	425b      	negs	r3, r3
 80049e2:	4aea      	ldr	r2, [pc, #936]	@ (8004d8c <main+0x6e8>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	9102      	str	r1, [sp, #8]
 80049e8:	2101      	movs	r1, #1
 80049ea:	9101      	str	r1, [sp, #4]
 80049ec:	2100      	movs	r1, #0
 80049ee:	9100      	str	r1, [sp, #0]
 80049f0:	2196      	movs	r1, #150	@ 0x96
 80049f2:	2000      	movs	r0, #0
 80049f4:	f7ff f8b3 	bl	8003b5e <drawString>
				sprintf(buffer2, "Today: %d ", game.stepsToday);
 80049f8:	4ae5      	ldr	r2, [pc, #916]	@ (8004d90 <main+0x6ec>)
 80049fa:	2390      	movs	r3, #144	@ 0x90
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	58d2      	ldr	r2, [r2, r3]
 8004a00:	49e4      	ldr	r1, [pc, #912]	@ (8004d94 <main+0x6f0>)
 8004a02:	4be5      	ldr	r3, [pc, #916]	@ (8004d98 <main+0x6f4>)
 8004a04:	0018      	movs	r0, r3
 8004a06:	f00a fc09 	bl	800f21c <siprintf>
				drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	425b      	negs	r3, r3
 8004a0e:	4ae2      	ldr	r2, [pc, #904]	@ (8004d98 <main+0x6f4>)
 8004a10:	2101      	movs	r1, #1
 8004a12:	9102      	str	r1, [sp, #8]
 8004a14:	2101      	movs	r1, #1
 8004a16:	9101      	str	r1, [sp, #4]
 8004a18:	2100      	movs	r1, #0
 8004a1a:	9100      	str	r1, [sp, #0]
 8004a1c:	218c      	movs	r1, #140	@ 0x8c
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7ff f89d 	bl	8003b5e <drawString>
				sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004a24:	4ada      	ldr	r2, [pc, #872]	@ (8004d90 <main+0x6ec>)
 8004a26:	238e      	movs	r3, #142	@ 0x8e
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	58d2      	ldr	r2, [r2, r3]
 8004a2c:	49db      	ldr	r1, [pc, #876]	@ (8004d9c <main+0x6f8>)
 8004a2e:	4bda      	ldr	r3, [pc, #872]	@ (8004d98 <main+0x6f4>)
 8004a30:	0018      	movs	r0, r3
 8004a32:	f00a fbf3 	bl	800f21c <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004a36:	2301      	movs	r3, #1
 8004a38:	425b      	negs	r3, r3
 8004a3a:	4ad7      	ldr	r2, [pc, #860]	@ (8004d98 <main+0x6f4>)
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	9102      	str	r1, [sp, #8]
 8004a40:	2101      	movs	r1, #1
 8004a42:	9101      	str	r1, [sp, #4]
 8004a44:	2100      	movs	r1, #0
 8004a46:	9100      	str	r1, [sp, #0]
 8004a48:	2182      	movs	r1, #130	@ 0x82
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7ff f887 	bl	8003b5e <drawString>
				sprintf(buffer2, "All time: %d ", game.allSteps);
 8004a50:	4acf      	ldr	r2, [pc, #828]	@ (8004d90 <main+0x6ec>)
 8004a52:	238c      	movs	r3, #140	@ 0x8c
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	58d2      	ldr	r2, [r2, r3]
 8004a58:	49d1      	ldr	r1, [pc, #836]	@ (8004da0 <main+0x6fc>)
 8004a5a:	4bcf      	ldr	r3, [pc, #828]	@ (8004d98 <main+0x6f4>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f00a fbdd 	bl	800f21c <siprintf>
				drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004a62:	2301      	movs	r3, #1
 8004a64:	425b      	negs	r3, r3
 8004a66:	4acc      	ldr	r2, [pc, #816]	@ (8004d98 <main+0x6f4>)
 8004a68:	2101      	movs	r1, #1
 8004a6a:	9102      	str	r1, [sp, #8]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	9101      	str	r1, [sp, #4]
 8004a70:	2100      	movs	r1, #0
 8004a72:	9100      	str	r1, [sp, #0]
 8004a74:	2178      	movs	r1, #120	@ 0x78
 8004a76:	2000      	movs	r0, #0
 8004a78:	f7ff f871 	bl	8003b5e <drawString>
				drawString(0, 110, "POSITIONS", WHITE, BLACK, 1, 1);
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	425b      	negs	r3, r3
 8004a80:	4ac8      	ldr	r2, [pc, #800]	@ (8004da4 <main+0x700>)
 8004a82:	2101      	movs	r1, #1
 8004a84:	9102      	str	r1, [sp, #8]
 8004a86:	2101      	movs	r1, #1
 8004a88:	9101      	str	r1, [sp, #4]
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	9100      	str	r1, [sp, #0]
 8004a8e:	216e      	movs	r1, #110	@ 0x6e
 8004a90:	2000      	movs	r0, #0
 8004a92:	f7ff f864 	bl	8003b5e <drawString>
				sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004a96:	4bbe      	ldr	r3, [pc, #760]	@ (8004d90 <main+0x6ec>)
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	49c3      	ldr	r1, [pc, #780]	@ (8004da8 <main+0x704>)
 8004a9c:	4bbe      	ldr	r3, [pc, #760]	@ (8004d98 <main+0x6f4>)
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f00a fbbc 	bl	800f21c <siprintf>
				drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	425b      	negs	r3, r3
 8004aa8:	4abb      	ldr	r2, [pc, #748]	@ (8004d98 <main+0x6f4>)
 8004aaa:	2101      	movs	r1, #1
 8004aac:	9102      	str	r1, [sp, #8]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	9101      	str	r1, [sp, #4]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	9100      	str	r1, [sp, #0]
 8004ab6:	2164      	movs	r1, #100	@ 0x64
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7ff f850 	bl	8003b5e <drawString>
				sprintf(buffer2, "Old Lat: %d.%d",
						(int) (game.positions[game.numLocations - 1].lat),
 8004abe:	4bb4      	ldr	r3, [pc, #720]	@ (8004d90 <main+0x6ec>)
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	4bb2      	ldr	r3, [pc, #712]	@ (8004d90 <main+0x6ec>)
 8004ac6:	3203      	adds	r2, #3
 8004ac8:	00d2      	lsls	r2, r2, #3
 8004aca:	58d3      	ldr	r3, [r2, r3]
				sprintf(buffer2, "Old Lat: %d.%d",
 8004acc:	1c18      	adds	r0, r3, #0
 8004ace:	f7fc fd41 	bl	8001554 <__aeabi_f2iz>
 8004ad2:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lat)
 8004ad4:	4bae      	ldr	r3, [pc, #696]	@ (8004d90 <main+0x6ec>)
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	1e5a      	subs	r2, r3, #1
 8004ada:	4bad      	ldr	r3, [pc, #692]	@ (8004d90 <main+0x6ec>)
 8004adc:	3203      	adds	r2, #3
 8004ade:	00d2      	lsls	r2, r2, #3
 8004ae0:	58d3      	ldr	r3, [r2, r3]
										* 10000)) % 10000));
 8004ae2:	49b2      	ldr	r1, [pc, #712]	@ (8004dac <main+0x708>)
 8004ae4:	1c18      	adds	r0, r3, #0
 8004ae6:	f7fc fa53 	bl	8000f90 <__aeabi_fmul>
 8004aea:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lat)
 8004aec:	1c18      	adds	r0, r3, #0
 8004aee:	f7fc fd31 	bl	8001554 <__aeabi_f2iz>
 8004af2:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004af4:	49ae      	ldr	r1, [pc, #696]	@ (8004db0 <main+0x70c>)
 8004af6:	0018      	movs	r0, r3
 8004af8:	f7fb fc9c 	bl	8000434 <__aeabi_idivmod>
 8004afc:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lat: %d.%d",
 8004afe:	17da      	asrs	r2, r3, #31
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	4053      	eors	r3, r2
 8004b04:	49ab      	ldr	r1, [pc, #684]	@ (8004db4 <main+0x710>)
 8004b06:	48a4      	ldr	r0, [pc, #656]	@ (8004d98 <main+0x6f4>)
 8004b08:	0022      	movs	r2, r4
 8004b0a:	f00a fb87 	bl	800f21c <siprintf>
				drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004b0e:	2301      	movs	r3, #1
 8004b10:	425b      	negs	r3, r3
 8004b12:	4aa1      	ldr	r2, [pc, #644]	@ (8004d98 <main+0x6f4>)
 8004b14:	2101      	movs	r1, #1
 8004b16:	9102      	str	r1, [sp, #8]
 8004b18:	2101      	movs	r1, #1
 8004b1a:	9101      	str	r1, [sp, #4]
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	9100      	str	r1, [sp, #0]
 8004b20:	215a      	movs	r1, #90	@ 0x5a
 8004b22:	2000      	movs	r0, #0
 8004b24:	f7ff f81b 	bl	8003b5e <drawString>
				sprintf(buffer2, "Old Lon: %d.%d",
						(int) (game.positions[game.numLocations - 1].lon),
 8004b28:	4b99      	ldr	r3, [pc, #612]	@ (8004d90 <main+0x6ec>)
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	4a98      	ldr	r2, [pc, #608]	@ (8004d90 <main+0x6ec>)
 8004b30:	3303      	adds	r3, #3
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	18d3      	adds	r3, r2, r3
 8004b36:	3304      	adds	r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
				sprintf(buffer2, "Old Lon: %d.%d",
 8004b3a:	1c18      	adds	r0, r3, #0
 8004b3c:	f7fc fd0a 	bl	8001554 <__aeabi_f2iz>
 8004b40:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lon)
 8004b42:	4b93      	ldr	r3, [pc, #588]	@ (8004d90 <main+0x6ec>)
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	4a91      	ldr	r2, [pc, #580]	@ (8004d90 <main+0x6ec>)
 8004b4a:	3303      	adds	r3, #3
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	18d3      	adds	r3, r2, r3
 8004b50:	3304      	adds	r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
										* 10000)) % 10000));
 8004b54:	4995      	ldr	r1, [pc, #596]	@ (8004dac <main+0x708>)
 8004b56:	1c18      	adds	r0, r3, #0
 8004b58:	f7fc fa1a 	bl	8000f90 <__aeabi_fmul>
 8004b5c:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lon)
 8004b5e:	1c18      	adds	r0, r3, #0
 8004b60:	f7fc fcf8 	bl	8001554 <__aeabi_f2iz>
 8004b64:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004b66:	4992      	ldr	r1, [pc, #584]	@ (8004db0 <main+0x70c>)
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fb fc63 	bl	8000434 <__aeabi_idivmod>
 8004b6e:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lon: %d.%d",
 8004b70:	17da      	asrs	r2, r3, #31
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	4053      	eors	r3, r2
 8004b76:	4990      	ldr	r1, [pc, #576]	@ (8004db8 <main+0x714>)
 8004b78:	4887      	ldr	r0, [pc, #540]	@ (8004d98 <main+0x6f4>)
 8004b7a:	0022      	movs	r2, r4
 8004b7c:	f00a fb4e 	bl	800f21c <siprintf>
				drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004b80:	2301      	movs	r3, #1
 8004b82:	425b      	negs	r3, r3
 8004b84:	4a84      	ldr	r2, [pc, #528]	@ (8004d98 <main+0x6f4>)
 8004b86:	2101      	movs	r1, #1
 8004b88:	9102      	str	r1, [sp, #8]
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	9101      	str	r1, [sp, #4]
 8004b8e:	2100      	movs	r1, #0
 8004b90:	9100      	str	r1, [sp, #0]
 8004b92:	2150      	movs	r1, #80	@ 0x50
 8004b94:	2000      	movs	r0, #0
 8004b96:	f7fe ffe2 	bl	8003b5e <drawString>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004b9a:	4b88      	ldr	r3, [pc, #544]	@ (8004dbc <main+0x718>)
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f004 fb9a 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d175      	bne.n	8004c96 <main+0x5f2>
					if(GetJustLatLon().lat<2000.0f){
 8004baa:	003b      	movs	r3, r7
 8004bac:	0018      	movs	r0, r3
 8004bae:	f002 f923 	bl	8006df8 <GetJustLatLon>
 8004bb2:	003b      	movs	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4982      	ldr	r1, [pc, #520]	@ (8004dc0 <main+0x71c>)
 8004bb8:	1c18      	adds	r0, r3, #0
 8004bba:	f7fb fc91 	bl	80004e0 <__aeabi_fcmplt>
 8004bbe:	1e03      	subs	r3, r0, #0
 8004bc0:	d069      	beq.n	8004c96 <main+0x5f2>
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8004bc2:	2408      	movs	r4, #8
 8004bc4:	193b      	adds	r3, r7, r4
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f002 f916 	bl	8006df8 <GetJustLatLon>
 8004bcc:	193b      	adds	r3, r7, r4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	1c18      	adds	r0, r3, #0
 8004bd2:	f7fc fcbf 	bl	8001554 <__aeabi_f2iz>
 8004bd6:	0004      	movs	r4, r0
							abs(
									((int) ((GetJustLatLon().lat) * 10000))
 8004bd8:	2510      	movs	r5, #16
 8004bda:	197b      	adds	r3, r7, r5
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f002 f90b 	bl	8006df8 <GetJustLatLon>
 8004be2:	197b      	adds	r3, r7, r5
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4971      	ldr	r1, [pc, #452]	@ (8004dac <main+0x708>)
 8004be8:	1c18      	adds	r0, r3, #0
 8004bea:	f7fc f9d1 	bl	8000f90 <__aeabi_fmul>
 8004bee:	1c03      	adds	r3, r0, #0
 8004bf0:	1c18      	adds	r0, r3, #0
 8004bf2:	f7fc fcaf 	bl	8001554 <__aeabi_f2iz>
 8004bf6:	0003      	movs	r3, r0
											% 10000));
 8004bf8:	496d      	ldr	r1, [pc, #436]	@ (8004db0 <main+0x70c>)
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7fb fc1a 	bl	8000434 <__aeabi_idivmod>
 8004c00:	000b      	movs	r3, r1
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8004c02:	17da      	asrs	r2, r3, #31
 8004c04:	189b      	adds	r3, r3, r2
 8004c06:	4053      	eors	r3, r2
 8004c08:	496e      	ldr	r1, [pc, #440]	@ (8004dc4 <main+0x720>)
 8004c0a:	4863      	ldr	r0, [pc, #396]	@ (8004d98 <main+0x6f4>)
 8004c0c:	0022      	movs	r2, r4
 8004c0e:	f00a fb05 	bl	800f21c <siprintf>
					drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004c12:	2301      	movs	r3, #1
 8004c14:	425b      	negs	r3, r3
 8004c16:	4a60      	ldr	r2, [pc, #384]	@ (8004d98 <main+0x6f4>)
 8004c18:	2101      	movs	r1, #1
 8004c1a:	9102      	str	r1, [sp, #8]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	9101      	str	r1, [sp, #4]
 8004c20:	2100      	movs	r1, #0
 8004c22:	9100      	str	r1, [sp, #0]
 8004c24:	2146      	movs	r1, #70	@ 0x46
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7fe ff99 	bl	8003b5e <drawString>
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 8004c2c:	2418      	movs	r4, #24
 8004c2e:	193b      	adds	r3, r7, r4
 8004c30:	0018      	movs	r0, r3
 8004c32:	f002 f8e1 	bl	8006df8 <GetJustLatLon>
 8004c36:	193b      	adds	r3, r7, r4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	1c18      	adds	r0, r3, #0
 8004c3c:	f7fc fc8a 	bl	8001554 <__aeabi_f2iz>
 8004c40:	0004      	movs	r4, r0
							abs(
									(int) (((GetJustLatLon().lon) * 10000))
 8004c42:	2520      	movs	r5, #32
 8004c44:	197b      	adds	r3, r7, r5
 8004c46:	0018      	movs	r0, r3
 8004c48:	f002 f8d6 	bl	8006df8 <GetJustLatLon>
 8004c4c:	197b      	adds	r3, r7, r5
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4956      	ldr	r1, [pc, #344]	@ (8004dac <main+0x708>)
 8004c52:	1c18      	adds	r0, r3, #0
 8004c54:	f7fc f99c 	bl	8000f90 <__aeabi_fmul>
 8004c58:	1c03      	adds	r3, r0, #0
 8004c5a:	1c18      	adds	r0, r3, #0
 8004c5c:	f7fc fc7a 	bl	8001554 <__aeabi_f2iz>
 8004c60:	0003      	movs	r3, r0
											% 10000));
 8004c62:	4953      	ldr	r1, [pc, #332]	@ (8004db0 <main+0x70c>)
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fb fbe5 	bl	8000434 <__aeabi_idivmod>
 8004c6a:	000b      	movs	r3, r1
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 8004c6c:	17da      	asrs	r2, r3, #31
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	4053      	eors	r3, r2
 8004c72:	4955      	ldr	r1, [pc, #340]	@ (8004dc8 <main+0x724>)
 8004c74:	4848      	ldr	r0, [pc, #288]	@ (8004d98 <main+0x6f4>)
 8004c76:	0022      	movs	r2, r4
 8004c78:	f00a fad0 	bl	800f21c <siprintf>
					drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	425b      	negs	r3, r3
 8004c80:	4a45      	ldr	r2, [pc, #276]	@ (8004d98 <main+0x6f4>)
 8004c82:	2101      	movs	r1, #1
 8004c84:	9102      	str	r1, [sp, #8]
 8004c86:	2101      	movs	r1, #1
 8004c88:	9101      	str	r1, [sp, #4]
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	9100      	str	r1, [sp, #0]
 8004c8e:	213c      	movs	r1, #60	@ 0x3c
 8004c90:	2000      	movs	r0, #0
 8004c92:	f7fe ff64 	bl	8003b5e <drawString>
				}
				}
				updateScreen = 0;
 8004c96:	4b3c      	ldr	r3, [pc, #240]	@ (8004d88 <main+0x6e4>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004dcc <main+0x728>)
 8004c9e:	2104      	movs	r1, #4
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f004 fb19 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004ca6:	0003      	movs	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d111      	bne.n	8004cd0 <main+0x62c>
				effect = MenuBeep;
 8004cac:	4b48      	ldr	r3, [pc, #288]	@ (8004dd0 <main+0x72c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004cb2:	4b47      	ldr	r3, [pc, #284]	@ (8004dd0 <main+0x72c>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 fd1e 	bl	80056f8 <PlayEffect>

				currentMenu = Main;
 8004cbc:	4b45      	ldr	r3, [pc, #276]	@ (8004dd4 <main+0x730>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004cc2:	4b45      	ldr	r3, [pc, #276]	@ (8004dd8 <main+0x734>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004cc8:	2000      	movs	r0, #0
 8004cca:	f7ff f88d 	bl	8003de8 <fillScreen>
			} else
				canChange = 1;

			break;
 8004cce:	e166      	b.n	8004f9e <main+0x8fa>
				canChange = 1;
 8004cd0:	4b41      	ldr	r3, [pc, #260]	@ (8004dd8 <main+0x734>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
			break;
 8004cd6:	e162      	b.n	8004f9e <main+0x8fa>
			//{
			//SendData();
			//ReceiveData();
			//}

			if (updateScreen >= 2) {
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <main+0x6e4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d800      	bhi.n	8004ce2 <main+0x63e>
 8004ce0:	e138      	b.n	8004f54 <main+0x8b0>
				updateScreen = 0;
 8004ce2:	4b29      	ldr	r3, [pc, #164]	@ (8004d88 <main+0x6e4>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
				drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 8004ce8:	2301      	movs	r3, #1
 8004cea:	425b      	negs	r3, r3
 8004cec:	4a3b      	ldr	r2, [pc, #236]	@ (8004ddc <main+0x738>)
 8004cee:	2101      	movs	r1, #1
 8004cf0:	9102      	str	r1, [sp, #8]
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	9101      	str	r1, [sp, #4]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	9100      	str	r1, [sp, #0]
 8004cfa:	2196      	movs	r1, #150	@ 0x96
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7fe ff2e 	bl	8003b5e <drawString>
				sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 8004d02:	4a23      	ldr	r2, [pc, #140]	@ (8004d90 <main+0x6ec>)
 8004d04:	2392      	movs	r3, #146	@ 0x92
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	58d2      	ldr	r2, [r2, r3]
 8004d0a:	4935      	ldr	r1, [pc, #212]	@ (8004de0 <main+0x73c>)
 8004d0c:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <main+0x6f4>)
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f00a fa84 	bl	800f21c <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8004d14:	2301      	movs	r3, #1
 8004d16:	425b      	negs	r3, r3
 8004d18:	4a1f      	ldr	r2, [pc, #124]	@ (8004d98 <main+0x6f4>)
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	9102      	str	r1, [sp, #8]
 8004d1e:	2101      	movs	r1, #1
 8004d20:	9101      	str	r1, [sp, #4]
 8004d22:	2100      	movs	r1, #0
 8004d24:	9100      	str	r1, [sp, #0]
 8004d26:	2182      	movs	r1, #130	@ 0x82
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f7fe ff18 	bl	8003b5e <drawString>
				drawString(0, 110, "UPLOAD DATA", WHITE, BLACK, 1, 1);
 8004d2e:	2301      	movs	r3, #1
 8004d30:	425b      	negs	r3, r3
 8004d32:	4a2c      	ldr	r2, [pc, #176]	@ (8004de4 <main+0x740>)
 8004d34:	2101      	movs	r1, #1
 8004d36:	9102      	str	r1, [sp, #8]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	9101      	str	r1, [sp, #4]
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	9100      	str	r1, [sp, #0]
 8004d40:	216e      	movs	r1, #110	@ 0x6e
 8004d42:	2000      	movs	r0, #0
 8004d44:	f7fe ff0b 	bl	8003b5e <drawString>
				if (editDifficulty) {
 8004d48:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <main+0x744>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d100      	bne.n	8004d52 <main+0x6ae>
 8004d50:	e097      	b.n	8004e82 <main+0x7de>
					//Editing difficulty
					drawLine(0, 125, 128, 125, WHITE);
 8004d52:	4b26      	ldr	r3, [pc, #152]	@ (8004dec <main+0x748>)
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	237d      	movs	r3, #125	@ 0x7d
 8004d58:	2280      	movs	r2, #128	@ 0x80
 8004d5a:	217d      	movs	r1, #125	@ 0x7d
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f7fe fe6e 	bl	8003a3e <drawLine>
					//GET OUT when the center button is pressed!
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8004d62:	4b16      	ldr	r3, [pc, #88]	@ (8004dbc <main+0x718>)
 8004d64:	2102      	movs	r1, #2
 8004d66:	0018      	movs	r0, r3
 8004d68:	f004 fab6 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004d6c:	1e03      	subs	r3, r0, #0
 8004d6e:	d03f      	beq.n	8004df0 <main+0x74c>
						editDifficulty = 0;
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <main+0x744>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
						drawLine(0, 125, 128, 125, BLACK);
 8004d76:	2300      	movs	r3, #0
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	237d      	movs	r3, #125	@ 0x7d
 8004d7c:	2280      	movs	r2, #128	@ 0x80
 8004d7e:	217d      	movs	r1, #125	@ 0x7d
 8004d80:	2000      	movs	r0, #0
 8004d82:	f7fe fe5c 	bl	8003a3e <drawLine>
 8004d86:	e05a      	b.n	8004e3e <main+0x79a>
 8004d88:	20002524 	.word	0x20002524
 8004d8c:	080119e8 	.word	0x080119e8
 8004d90:	200025b4 	.word	0x200025b4
 8004d94:	080119f0 	.word	0x080119f0
 8004d98:	20003524 	.word	0x20003524
 8004d9c:	080119fc 	.word	0x080119fc
 8004da0:	08011a0c 	.word	0x08011a0c
 8004da4:	08011a1c 	.word	0x08011a1c
 8004da8:	08011a28 	.word	0x08011a28
 8004dac:	461c4000 	.word	0x461c4000
 8004db0:	00002710 	.word	0x00002710
 8004db4:	08011a38 	.word	0x08011a38
 8004db8:	08011a48 	.word	0x08011a48
 8004dbc:	50000800 	.word	0x50000800
 8004dc0:	44fa0000 	.word	0x44fa0000
 8004dc4:	08011a58 	.word	0x08011a58
 8004dc8:	08011a64 	.word	0x08011a64
 8004dcc:	50000400 	.word	0x50000400
 8004dd0:	20002520 	.word	0x20002520
 8004dd4:	2000228a 	.word	0x2000228a
 8004dd8:	2000228b 	.word	0x2000228b
 8004ddc:	08011a70 	.word	0x08011a70
 8004de0:	08011a7c 	.word	0x08011a7c
 8004de4:	08011a88 	.word	0x08011a88
 8004de8:	20003590 	.word	0x20003590
 8004dec:	0000ffff 	.word	0x0000ffff
					}
					//Right increments the goal
					else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8004df0:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb0 <main+0x90c>)
 8004df2:	2104      	movs	r1, #4
 8004df4:	0018      	movs	r0, r3
 8004df6:	f004 fa6f 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d00b      	beq.n	8004e16 <main+0x772>
						game.dailyGoal += 1000;
 8004dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb4 <main+0x910>)
 8004e00:	2392      	movs	r3, #146	@ 0x92
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	58d3      	ldr	r3, [r2, r3]
 8004e06:	22fa      	movs	r2, #250	@ 0xfa
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	1899      	adds	r1, r3, r2
 8004e0c:	4a69      	ldr	r2, [pc, #420]	@ (8004fb4 <main+0x910>)
 8004e0e:	2392      	movs	r3, #146	@ 0x92
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	50d1      	str	r1, [r2, r3]
 8004e14:	e013      	b.n	8004e3e <main+0x79a>
					}
					//Left decrements the goal
					else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	011a      	lsls	r2, r3, #4
 8004e1a:	23a0      	movs	r3, #160	@ 0xa0
 8004e1c:	05db      	lsls	r3, r3, #23
 8004e1e:	0011      	movs	r1, r2
 8004e20:	0018      	movs	r0, r3
 8004e22:	f004 fa59 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004e26:	1e03      	subs	r3, r0, #0
 8004e28:	d009      	beq.n	8004e3e <main+0x79a>
						game.dailyGoal -= 1000;
 8004e2a:	4a62      	ldr	r2, [pc, #392]	@ (8004fb4 <main+0x910>)
 8004e2c:	2392      	movs	r3, #146	@ 0x92
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	58d3      	ldr	r3, [r2, r3]
 8004e32:	4a61      	ldr	r2, [pc, #388]	@ (8004fb8 <main+0x914>)
 8004e34:	1899      	adds	r1, r3, r2
 8004e36:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb4 <main+0x910>)
 8004e38:	2392      	movs	r3, #146	@ 0x92
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	50d1      	str	r1, [r2, r3]
					}

					if (game.dailyGoal >= 999000) {
 8004e3e:	4a5d      	ldr	r2, [pc, #372]	@ (8004fb4 <main+0x910>)
 8004e40:	2392      	movs	r3, #146	@ 0x92
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	58d3      	ldr	r3, [r2, r3]
 8004e46:	4a5d      	ldr	r2, [pc, #372]	@ (8004fbc <main+0x918>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d905      	bls.n	8004e58 <main+0x7b4>
						game.dailyGoal = 0;
 8004e4c:	4a59      	ldr	r2, [pc, #356]	@ (8004fb4 <main+0x910>)
 8004e4e:	2392      	movs	r3, #146	@ 0x92
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	2100      	movs	r1, #0
 8004e54:	50d1      	str	r1, [r2, r3]
 8004e56:	e00a      	b.n	8004e6e <main+0x7ca>
					} else if (game.dailyGoal <= 0) {
 8004e58:	4a56      	ldr	r2, [pc, #344]	@ (8004fb4 <main+0x910>)
 8004e5a:	2392      	movs	r3, #146	@ 0x92
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	58d3      	ldr	r3, [r2, r3]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <main+0x7ca>
						game.dailyGoal = 999000;
 8004e64:	4a53      	ldr	r2, [pc, #332]	@ (8004fb4 <main+0x910>)
 8004e66:	2392      	movs	r3, #146	@ 0x92
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4955      	ldr	r1, [pc, #340]	@ (8004fc0 <main+0x91c>)
 8004e6c:	50d1      	str	r1, [r2, r3]
					}
					sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 8004e6e:	4a51      	ldr	r2, [pc, #324]	@ (8004fb4 <main+0x910>)
 8004e70:	2392      	movs	r3, #146	@ 0x92
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	58d2      	ldr	r2, [r2, r3]
 8004e76:	4953      	ldr	r1, [pc, #332]	@ (8004fc4 <main+0x920>)
 8004e78:	4b53      	ldr	r3, [pc, #332]	@ (8004fc8 <main+0x924>)
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f00a f9ce 	bl	800f21c <siprintf>
 8004e80:	e068      	b.n	8004f54 <main+0x8b0>

				} else if (userUpload) {
 8004e82:	4b52      	ldr	r3, [pc, #328]	@ (8004fcc <main+0x928>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d009      	beq.n	8004e9e <main+0x7fa>
					FlashWrite();
 8004e8a:	f000 ffa7 	bl	8005ddc <FlashWrite>

					userUpload = 0;
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fcc <main+0x928>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
					SendData();
 8004e94:	f001 faa6 	bl	80063e4 <SendData>
					ReceiveData();
 8004e98:	f001 fb6c 	bl	8006574 <ReceiveData>
 8004e9c:	e05a      	b.n	8004f54 <main+0x8b0>
				} else {
					//Difficulty
					if (currentSetting == 0) {
 8004e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd0 <main+0x92c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d110      	bne.n	8004ec8 <main+0x824>
						//Try to underline the option being selected
						drawLine(0, 125, 20, 125, WHITE);
 8004ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8004fd4 <main+0x930>)
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	237d      	movs	r3, #125	@ 0x7d
 8004eac:	2214      	movs	r2, #20
 8004eae:	217d      	movs	r1, #125	@ 0x7d
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f7fe fdc4 	bl	8003a3e <drawLine>
						//Then erase the highlight under the other option not being selected
						drawLine(0, 105, 20, 105, BLACK);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2369      	movs	r3, #105	@ 0x69
 8004ebc:	2214      	movs	r2, #20
 8004ebe:	2169      	movs	r1, #105	@ 0x69
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f7fe fdbc 	bl	8003a3e <drawLine>
 8004ec6:	e013      	b.n	8004ef0 <main+0x84c>
					}
					//Upload
					else if (currentSetting == 1) {
 8004ec8:	4b41      	ldr	r3, [pc, #260]	@ (8004fd0 <main+0x92c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10f      	bne.n	8004ef0 <main+0x84c>
						drawLine(0, 105, 20, 105, WHITE);
 8004ed0:	4b40      	ldr	r3, [pc, #256]	@ (8004fd4 <main+0x930>)
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	2369      	movs	r3, #105	@ 0x69
 8004ed6:	2214      	movs	r2, #20
 8004ed8:	2169      	movs	r1, #105	@ 0x69
 8004eda:	2000      	movs	r0, #0
 8004edc:	f7fe fdaf 	bl	8003a3e <drawLine>
						drawLine(0, 125, 20, 125, BLACK);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	237d      	movs	r3, #125	@ 0x7d
 8004ee6:	2214      	movs	r2, #20
 8004ee8:	217d      	movs	r1, #125	@ 0x7d
 8004eea:	2000      	movs	r0, #0
 8004eec:	f7fe fda7 	bl	8003a3e <drawLine>
					}
					//IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb0 <main+0x90c>)
 8004ef2:	2104      	movs	r1, #4
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f004 f9ef 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004efa:	0003      	movs	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d10c      	bne.n	8004f1a <main+0x876>
						++currentSetting;
 8004f00:	4b33      	ldr	r3, [pc, #204]	@ (8004fd0 <main+0x92c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	4b32      	ldr	r3, [pc, #200]	@ (8004fd0 <main+0x92c>)
 8004f08:	601a      	str	r2, [r3, #0]
						if (currentSetting > 1)
 8004f0a:	4b31      	ldr	r3, [pc, #196]	@ (8004fd0 <main+0x92c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d920      	bls.n	8004f54 <main+0x8b0>
							currentSetting = 0;
 8004f12:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd0 <main+0x92c>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e01c      	b.n	8004f54 <main+0x8b0>
					}
					//PD6=Center button
					else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 8004f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fd8 <main+0x934>)
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f004 f9da 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004f24:	1e03      	subs	r3, r0, #0
 8004f26:	d007      	beq.n	8004f38 <main+0x894>
							&& currentSetting == 0) {
 8004f28:	4b29      	ldr	r3, [pc, #164]	@ (8004fd0 <main+0x92c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d103      	bne.n	8004f38 <main+0x894>
						editDifficulty = 1;
 8004f30:	4b2a      	ldr	r3, [pc, #168]	@ (8004fdc <main+0x938>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e00d      	b.n	8004f54 <main+0x8b0>
					} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 8004f38:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <main+0x934>)
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f004 f9cb 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d006      	beq.n	8004f54 <main+0x8b0>
							&& currentSetting == 1) {
 8004f46:	4b22      	ldr	r3, [pc, #136]	@ (8004fd0 <main+0x92c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d102      	bne.n	8004f54 <main+0x8b0>
						userUpload = 1;
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <main+0x928>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
					}
				}
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	011a      	lsls	r2, r3, #4
 8004f58:	23a0      	movs	r3, #160	@ 0xa0
 8004f5a:	05db      	lsls	r3, r3, #23
 8004f5c:	0011      	movs	r1, r2
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f004 f9ba 	bl	80092d8 <HAL_GPIO_ReadPin>
 8004f64:	0003      	movs	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d115      	bne.n	8004f96 <main+0x8f2>
					&& !editDifficulty) {
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004fdc <main+0x938>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d111      	bne.n	8004f96 <main+0x8f2>
				effect = MenuBeep;
 8004f72:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe0 <main+0x93c>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004f78:	4b19      	ldr	r3, [pc, #100]	@ (8004fe0 <main+0x93c>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 fbbb 	bl	80056f8 <PlayEffect>

				currentMenu = Main;
 8004f82:	4b18      	ldr	r3, [pc, #96]	@ (8004fe4 <main+0x940>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004f88:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <main+0x944>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7fe ff2a 	bl	8003de8 <fillScreen>
			} else
				canChange = 1;
			break;
 8004f94:	e002      	b.n	8004f9c <main+0x8f8>
				canChange = 1;
 8004f96:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <main+0x944>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
			break;
 8004f9c:	46c0      	nop			@ (mov r8, r8)

		}
		totalFrames++;
 8004f9e:	4b13      	ldr	r3, [pc, #76]	@ (8004fec <main+0x948>)
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <main+0x948>)
 8004fa8:	801a      	strh	r2, [r3, #0]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8004faa:	f7ff fb97 	bl	80046dc <main+0x38>
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	50000400 	.word	0x50000400
 8004fb4:	200025b4 	.word	0x200025b4
 8004fb8:	fffffc18 	.word	0xfffffc18
 8004fbc:	000f3e57 	.word	0x000f3e57
 8004fc0:	000f3e58 	.word	0x000f3e58
 8004fc4:	08011a94 	.word	0x08011a94
 8004fc8:	20003524 	.word	0x20003524
 8004fcc:	20003594 	.word	0x20003594
 8004fd0:	2000358c 	.word	0x2000358c
 8004fd4:	0000ffff 	.word	0x0000ffff
 8004fd8:	50000800 	.word	0x50000800
 8004fdc:	20003590 	.word	0x20003590
 8004fe0:	20002520 	.word	0x20002520
 8004fe4:	2000228a 	.word	0x2000228a
 8004fe8:	2000228b 	.word	0x2000228b
 8004fec:	20002758 	.word	0x20002758

08004ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b095      	sub	sp, #84	@ 0x54
 8004ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ff6:	2414      	movs	r4, #20
 8004ff8:	193b      	adds	r3, r7, r4
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	233c      	movs	r3, #60	@ 0x3c
 8004ffe:	001a      	movs	r2, r3
 8005000:	2100      	movs	r1, #0
 8005002:	f00a f977 	bl	800f2f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005006:	1d3b      	adds	r3, r7, #4
 8005008:	0018      	movs	r0, r3
 800500a:	2310      	movs	r3, #16
 800500c:	001a      	movs	r2, r3
 800500e:	2100      	movs	r1, #0
 8005010:	f00a f970 	bl	800f2f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005014:	2380      	movs	r3, #128	@ 0x80
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	0018      	movs	r0, r3
 800501a:	f005 f80f 	bl	800a03c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800501e:	193b      	adds	r3, r7, r4
 8005020:	220a      	movs	r2, #10
 8005022:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005024:	193b      	adds	r3, r7, r4
 8005026:	2280      	movs	r2, #128	@ 0x80
 8005028:	0052      	lsls	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800502c:	0021      	movs	r1, r4
 800502e:	187b      	adds	r3, r7, r1
 8005030:	2200      	movs	r2, #0
 8005032:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005034:	187b      	adds	r3, r7, r1
 8005036:	2240      	movs	r2, #64	@ 0x40
 8005038:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800503a:	187b      	adds	r3, r7, r1
 800503c:	2201      	movs	r2, #1
 800503e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005040:	187b      	adds	r3, r7, r1
 8005042:	2202      	movs	r2, #2
 8005044:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005046:	187b      	adds	r3, r7, r1
 8005048:	2202      	movs	r2, #2
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800504c:	187b      	adds	r3, r7, r1
 800504e:	2200      	movs	r2, #0
 8005050:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005052:	187b      	adds	r3, r7, r1
 8005054:	2208      	movs	r2, #8
 8005056:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005058:	187b      	adds	r3, r7, r1
 800505a:	2280      	movs	r2, #128	@ 0x80
 800505c:	0292      	lsls	r2, r2, #10
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005060:	187b      	adds	r3, r7, r1
 8005062:	2280      	movs	r2, #128	@ 0x80
 8005064:	0492      	lsls	r2, r2, #18
 8005066:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005068:	187b      	adds	r3, r7, r1
 800506a:	2280      	movs	r2, #128	@ 0x80
 800506c:	0592      	lsls	r2, r2, #22
 800506e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005070:	187b      	adds	r3, r7, r1
 8005072:	0018      	movs	r0, r3
 8005074:	f005 f82e 	bl	800a0d4 <HAL_RCC_OscConfig>
 8005078:	1e03      	subs	r3, r0, #0
 800507a:	d001      	beq.n	8005080 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800507c:	f001 ff5e 	bl	8006f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005080:	1d3b      	adds	r3, r7, #4
 8005082:	2207      	movs	r2, #7
 8005084:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	2202      	movs	r2, #2
 800508a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	2200      	movs	r2, #0
 8005096:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	2102      	movs	r1, #2
 800509c:	0018      	movs	r0, r3
 800509e:	f005 fb79 	bl	800a794 <HAL_RCC_ClockConfig>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d001      	beq.n	80050aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80050a6:	f001 ff49 	bl	8006f3c <Error_Handler>
  }
}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b015      	add	sp, #84	@ 0x54
 80050b0:	bd90      	pop	{r4, r7, pc}
	...

080050b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050ba:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <MX_I2C1_Init+0x78>)
 80050bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80050be:	4b1a      	ldr	r3, [pc, #104]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005130 <MX_I2C1_Init+0x7c>)
 80050c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80050c4:	4b18      	ldr	r3, [pc, #96]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050ca:	4b17      	ldr	r3, [pc, #92]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050d0:	4b15      	ldr	r3, [pc, #84]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80050d6:	4b14      	ldr	r3, [pc, #80]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050d8:	2200      	movs	r2, #0
 80050da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80050dc:	4b12      	ldr	r3, [pc, #72]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050de:	2200      	movs	r2, #0
 80050e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050e2:	4b11      	ldr	r3, [pc, #68]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <MX_I2C1_Init+0x74>)
 80050f0:	0018      	movs	r0, r3
 80050f2:	f004 f95f 	bl	80093b4 <HAL_I2C_Init>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d001      	beq.n	80050fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80050fa:	f001 ff1f 	bl	8006f3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <MX_I2C1_Init+0x74>)
 8005100:	2100      	movs	r1, #0
 8005102:	0018      	movs	r0, r3
 8005104:	f004 ff02 	bl	8009f0c <HAL_I2CEx_ConfigAnalogFilter>
 8005108:	1e03      	subs	r3, r0, #0
 800510a:	d001      	beq.n	8005110 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800510c:	f001 ff16 	bl	8006f3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <MX_I2C1_Init+0x74>)
 8005112:	2100      	movs	r1, #0
 8005114:	0018      	movs	r0, r3
 8005116:	f004 ff45 	bl	8009fa4 <HAL_I2CEx_ConfigDigitalFilter>
 800511a:	1e03      	subs	r3, r0, #0
 800511c:	d001      	beq.n	8005122 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800511e:	f001 ff0d 	bl	8006f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20003598 	.word	0x20003598
 800512c:	40005400 	.word	0x40005400
 8005130:	10b17db5 	.word	0x10b17db5

08005134 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b090      	sub	sp, #64	@ 0x40
 8005138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800513a:	232c      	movs	r3, #44	@ 0x2c
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	0018      	movs	r0, r3
 8005140:	2314      	movs	r3, #20
 8005142:	001a      	movs	r2, r3
 8005144:	2100      	movs	r1, #0
 8005146:	f00a f8d5 	bl	800f2f4 <memset>
  RTC_DateTypeDef sDate = {0};
 800514a:	2328      	movs	r3, #40	@ 0x28
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8005152:	003b      	movs	r3, r7
 8005154:	0018      	movs	r0, r3
 8005156:	2328      	movs	r3, #40	@ 0x28
 8005158:	001a      	movs	r2, r3
 800515a:	2100      	movs	r1, #0
 800515c:	f00a f8ca 	bl	800f2f4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005160:	4b49      	ldr	r3, [pc, #292]	@ (8005288 <MX_RTC_Init+0x154>)
 8005162:	4a4a      	ldr	r2, [pc, #296]	@ (800528c <MX_RTC_Init+0x158>)
 8005164:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005166:	4b48      	ldr	r3, [pc, #288]	@ (8005288 <MX_RTC_Init+0x154>)
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800516c:	4b46      	ldr	r3, [pc, #280]	@ (8005288 <MX_RTC_Init+0x154>)
 800516e:	227f      	movs	r2, #127	@ 0x7f
 8005170:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8005172:	4b45      	ldr	r3, [pc, #276]	@ (8005288 <MX_RTC_Init+0x154>)
 8005174:	22ff      	movs	r2, #255	@ 0xff
 8005176:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005178:	4b43      	ldr	r3, [pc, #268]	@ (8005288 <MX_RTC_Init+0x154>)
 800517a:	2200      	movs	r2, #0
 800517c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800517e:	4b42      	ldr	r3, [pc, #264]	@ (8005288 <MX_RTC_Init+0x154>)
 8005180:	2200      	movs	r2, #0
 8005182:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005184:	4b40      	ldr	r3, [pc, #256]	@ (8005288 <MX_RTC_Init+0x154>)
 8005186:	2200      	movs	r2, #0
 8005188:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800518a:	4b3f      	ldr	r3, [pc, #252]	@ (8005288 <MX_RTC_Init+0x154>)
 800518c:	2280      	movs	r2, #128	@ 0x80
 800518e:	05d2      	lsls	r2, r2, #23
 8005190:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005192:	4b3d      	ldr	r3, [pc, #244]	@ (8005288 <MX_RTC_Init+0x154>)
 8005194:	2200      	movs	r2, #0
 8005196:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005198:	4b3b      	ldr	r3, [pc, #236]	@ (8005288 <MX_RTC_Init+0x154>)
 800519a:	0018      	movs	r0, r3
 800519c:	f005 fee0 	bl	800af60 <HAL_RTC_Init>
 80051a0:	1e03      	subs	r3, r0, #0
 80051a2:	d001      	beq.n	80051a8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80051a4:	f001 feca 	bl	8006f3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80051a8:	212c      	movs	r1, #44	@ 0x2c
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	2200      	movs	r2, #0
 80051b4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80051b6:	187b      	adds	r3, r7, r1
 80051b8:	2200      	movs	r2, #0
 80051ba:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80051bc:	187b      	adds	r3, r7, r1
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80051c2:	187b      	adds	r3, r7, r1
 80051c4:	2200      	movs	r2, #0
 80051c6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80051c8:	187b      	adds	r3, r7, r1
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80051ce:	1879      	adds	r1, r7, r1
 80051d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005288 <MX_RTC_Init+0x154>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	0018      	movs	r0, r3
 80051d6:	f005 ff65 	bl	800b0a4 <HAL_RTC_SetTime>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d001      	beq.n	80051e2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80051de:	f001 fead 	bl	8006f3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80051e2:	2128      	movs	r1, #40	@ 0x28
 80051e4:	187b      	adds	r3, r7, r1
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80051ea:	187b      	adds	r3, r7, r1
 80051ec:	2201      	movs	r2, #1
 80051ee:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80051f0:	187b      	adds	r3, r7, r1
 80051f2:	2201      	movs	r2, #1
 80051f4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80051f6:	187b      	adds	r3, r7, r1
 80051f8:	2200      	movs	r2, #0
 80051fa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80051fc:	1879      	adds	r1, r7, r1
 80051fe:	4b22      	ldr	r3, [pc, #136]	@ (8005288 <MX_RTC_Init+0x154>)
 8005200:	2201      	movs	r2, #1
 8005202:	0018      	movs	r0, r3
 8005204:	f005 fff6 	bl	800b1f4 <HAL_RTC_SetDate>
 8005208:	1e03      	subs	r3, r0, #0
 800520a:	d001      	beq.n	8005210 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800520c:	f001 fe96 	bl	8006f3c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8005210:	003b      	movs	r3, r7
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8005216:	003b      	movs	r3, r7
 8005218:	2200      	movs	r2, #0
 800521a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 800521c:	003b      	movs	r3, r7
 800521e:	2201      	movs	r2, #1
 8005220:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8005222:	003b      	movs	r3, r7
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005228:	003b      	movs	r3, r7
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800522e:	003b      	movs	r3, r7
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005234:	003b      	movs	r3, r7
 8005236:	2200      	movs	r2, #0
 8005238:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800523a:	003b      	movs	r3, r7
 800523c:	2200      	movs	r2, #0
 800523e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005240:	003b      	movs	r3, r7
 8005242:	2200      	movs	r2, #0
 8005244:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8005246:	003b      	movs	r3, r7
 8005248:	2220      	movs	r2, #32
 800524a:	2101      	movs	r1, #1
 800524c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800524e:	003b      	movs	r3, r7
 8005250:	2280      	movs	r2, #128	@ 0x80
 8005252:	0052      	lsls	r2, r2, #1
 8005254:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005256:	0039      	movs	r1, r7
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <MX_RTC_Init+0x154>)
 800525a:	2201      	movs	r2, #1
 800525c:	0018      	movs	r0, r3
 800525e:	f006 f85b 	bl	800b318 <HAL_RTC_SetAlarm_IT>
 8005262:	1e03      	subs	r3, r0, #0
 8005264:	d001      	beq.n	800526a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8005266:	f001 fe69 	bl	8006f3c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800526a:	4909      	ldr	r1, [pc, #36]	@ (8005290 <MX_RTC_Init+0x15c>)
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <MX_RTC_Init+0x154>)
 800526e:	2200      	movs	r2, #0
 8005270:	0018      	movs	r0, r3
 8005272:	f006 fb87 	bl	800b984 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005276:	1e03      	subs	r3, r0, #0
 8005278:	d001      	beq.n	800527e <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 800527a:	f001 fe5f 	bl	8006f3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	b010      	add	sp, #64	@ 0x40
 8005284:	bd80      	pop	{r7, pc}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	200035ec 	.word	0x200035ec
 800528c:	40002800 	.word	0x40002800
 8005290:	0000500b 	.word	0x0000500b

08005294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005298:	4b1c      	ldr	r3, [pc, #112]	@ (800530c <MX_SPI1_Init+0x78>)
 800529a:	4a1d      	ldr	r2, [pc, #116]	@ (8005310 <MX_SPI1_Init+0x7c>)
 800529c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <MX_SPI1_Init+0x78>)
 80052a0:	2282      	movs	r2, #130	@ 0x82
 80052a2:	0052      	lsls	r2, r2, #1
 80052a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80052a6:	4b19      	ldr	r3, [pc, #100]	@ (800530c <MX_SPI1_Init+0x78>)
 80052a8:	2280      	movs	r2, #128	@ 0x80
 80052aa:	0212      	lsls	r2, r2, #8
 80052ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052ae:	4b17      	ldr	r3, [pc, #92]	@ (800530c <MX_SPI1_Init+0x78>)
 80052b0:	22e0      	movs	r2, #224	@ 0xe0
 80052b2:	00d2      	lsls	r2, r2, #3
 80052b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052b6:	4b15      	ldr	r3, [pc, #84]	@ (800530c <MX_SPI1_Init+0x78>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052bc:	4b13      	ldr	r3, [pc, #76]	@ (800530c <MX_SPI1_Init+0x78>)
 80052be:	2200      	movs	r2, #0
 80052c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052c2:	4b12      	ldr	r3, [pc, #72]	@ (800530c <MX_SPI1_Init+0x78>)
 80052c4:	2280      	movs	r2, #128	@ 0x80
 80052c6:	0092      	lsls	r2, r2, #2
 80052c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80052ca:	4b10      	ldr	r3, [pc, #64]	@ (800530c <MX_SPI1_Init+0x78>)
 80052cc:	2220      	movs	r2, #32
 80052ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052d0:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <MX_SPI1_Init+0x78>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <MX_SPI1_Init+0x78>)
 80052d8:	2200      	movs	r2, #0
 80052da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052dc:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <MX_SPI1_Init+0x78>)
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80052e2:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <MX_SPI1_Init+0x78>)
 80052e4:	2207      	movs	r2, #7
 80052e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80052e8:	4b08      	ldr	r3, [pc, #32]	@ (800530c <MX_SPI1_Init+0x78>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052ee:	4b07      	ldr	r3, [pc, #28]	@ (800530c <MX_SPI1_Init+0x78>)
 80052f0:	2208      	movs	r2, #8
 80052f2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <MX_SPI1_Init+0x78>)
 80052f6:	0018      	movs	r0, r3
 80052f8:	f006 fc0c 	bl	800bb14 <HAL_SPI_Init>
 80052fc:	1e03      	subs	r3, r0, #0
 80052fe:	d001      	beq.n	8005304 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8005300:	f001 fe1c 	bl	8006f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005304:	46c0      	nop			@ (mov r8, r8)
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			@ (mov r8, r8)
 800530c:	20003618 	.word	0x20003618
 8005310:	40013000 	.word	0x40013000

08005314 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b094      	sub	sp, #80	@ 0x50
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800531a:	2334      	movs	r3, #52	@ 0x34
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	0018      	movs	r0, r3
 8005320:	231c      	movs	r3, #28
 8005322:	001a      	movs	r2, r3
 8005324:	2100      	movs	r1, #0
 8005326:	f009 ffe5 	bl	800f2f4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800532a:	003b      	movs	r3, r7
 800532c:	0018      	movs	r0, r3
 800532e:	2334      	movs	r3, #52	@ 0x34
 8005330:	001a      	movs	r2, r3
 8005332:	2100      	movs	r1, #0
 8005334:	f009 ffde 	bl	800f2f4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005338:	4b37      	ldr	r3, [pc, #220]	@ (8005418 <MX_TIM17_Init+0x104>)
 800533a:	4a38      	ldr	r2, [pc, #224]	@ (800541c <MX_TIM17_Init+0x108>)
 800533c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800533e:	4b36      	ldr	r3, [pc, #216]	@ (8005418 <MX_TIM17_Init+0x104>)
 8005340:	2200      	movs	r2, #0
 8005342:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005344:	4b34      	ldr	r3, [pc, #208]	@ (8005418 <MX_TIM17_Init+0x104>)
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800534a:	4b33      	ldr	r3, [pc, #204]	@ (8005418 <MX_TIM17_Init+0x104>)
 800534c:	4a34      	ldr	r2, [pc, #208]	@ (8005420 <MX_TIM17_Init+0x10c>)
 800534e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005350:	4b31      	ldr	r3, [pc, #196]	@ (8005418 <MX_TIM17_Init+0x104>)
 8005352:	2200      	movs	r2, #0
 8005354:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005356:	4b30      	ldr	r3, [pc, #192]	@ (8005418 <MX_TIM17_Init+0x104>)
 8005358:	2200      	movs	r2, #0
 800535a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800535c:	4b2e      	ldr	r3, [pc, #184]	@ (8005418 <MX_TIM17_Init+0x104>)
 800535e:	2200      	movs	r2, #0
 8005360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005362:	4b2d      	ldr	r3, [pc, #180]	@ (8005418 <MX_TIM17_Init+0x104>)
 8005364:	0018      	movs	r0, r3
 8005366:	f006 ff63 	bl	800c230 <HAL_TIM_Base_Init>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d001      	beq.n	8005372 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800536e:	f001 fde5 	bl	8006f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8005372:	4b29      	ldr	r3, [pc, #164]	@ (8005418 <MX_TIM17_Init+0x104>)
 8005374:	0018      	movs	r0, r3
 8005376:	f006 ffb3 	bl	800c2e0 <HAL_TIM_PWM_Init>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d001      	beq.n	8005382 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800537e:	f001 fddd 	bl	8006f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005382:	2134      	movs	r1, #52	@ 0x34
 8005384:	187b      	adds	r3, r7, r1
 8005386:	2260      	movs	r2, #96	@ 0x60
 8005388:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800538a:	187b      	adds	r3, r7, r1
 800538c:	2200      	movs	r2, #0
 800538e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005390:	187b      	adds	r3, r7, r1
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005396:	187b      	adds	r3, r7, r1
 8005398:	2200      	movs	r2, #0
 800539a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800539c:	187b      	adds	r3, r7, r1
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	2200      	movs	r2, #0
 80053a6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80053a8:	187b      	adds	r3, r7, r1
 80053aa:	2200      	movs	r2, #0
 80053ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053ae:	1879      	adds	r1, r7, r1
 80053b0:	4b19      	ldr	r3, [pc, #100]	@ (8005418 <MX_TIM17_Init+0x104>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	0018      	movs	r0, r3
 80053b6:	f007 f96f 	bl	800c698 <HAL_TIM_PWM_ConfigChannel>
 80053ba:	1e03      	subs	r3, r0, #0
 80053bc:	d001      	beq.n	80053c2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80053be:	f001 fdbd 	bl	8006f3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80053c2:	003b      	movs	r3, r7
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80053c8:	003b      	movs	r3, r7
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80053ce:	003b      	movs	r3, r7
 80053d0:	2200      	movs	r2, #0
 80053d2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80053d4:	003b      	movs	r3, r7
 80053d6:	2200      	movs	r2, #0
 80053d8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80053da:	003b      	movs	r3, r7
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053e0:	003b      	movs	r3, r7
 80053e2:	2280      	movs	r2, #128	@ 0x80
 80053e4:	0192      	lsls	r2, r2, #6
 80053e6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80053e8:	003b      	movs	r3, r7
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053ee:	003b      	movs	r3, r7
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80053f4:	003a      	movs	r2, r7
 80053f6:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <MX_TIM17_Init+0x104>)
 80053f8:	0011      	movs	r1, r2
 80053fa:	0018      	movs	r0, r3
 80053fc:	f007 fdcc 	bl	800cf98 <HAL_TIMEx_ConfigBreakDeadTime>
 8005400:	1e03      	subs	r3, r0, #0
 8005402:	d001      	beq.n	8005408 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8005404:	f001 fd9a 	bl	8006f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005408:	4b03      	ldr	r3, [pc, #12]	@ (8005418 <MX_TIM17_Init+0x104>)
 800540a:	0018      	movs	r0, r3
 800540c:	f002 fb46 	bl	8007a9c <HAL_TIM_MspPostInit>

}
 8005410:	46c0      	nop			@ (mov r8, r8)
 8005412:	46bd      	mov	sp, r7
 8005414:	b014      	add	sp, #80	@ 0x50
 8005416:	bd80      	pop	{r7, pc}
 8005418:	2000367c 	.word	0x2000367c
 800541c:	40014800 	.word	0x40014800
 8005420:	0000ffff 	.word	0x0000ffff

08005424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005428:	4b23      	ldr	r3, [pc, #140]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 800542a:	4a24      	ldr	r2, [pc, #144]	@ (80054bc <MX_USART1_UART_Init+0x98>)
 800542c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800542e:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005430:	2296      	movs	r2, #150	@ 0x96
 8005432:	0192      	lsls	r2, r2, #6
 8005434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005436:	4b20      	ldr	r3, [pc, #128]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005438:	2200      	movs	r2, #0
 800543a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800543c:	4b1e      	ldr	r3, [pc, #120]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 800543e:	2200      	movs	r2, #0
 8005440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005442:	4b1d      	ldr	r3, [pc, #116]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005444:	2200      	movs	r2, #0
 8005446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005448:	4b1b      	ldr	r3, [pc, #108]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 800544a:	220c      	movs	r2, #12
 800544c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800544e:	4b1a      	ldr	r3, [pc, #104]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005450:	2200      	movs	r2, #0
 8005452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005454:	4b18      	ldr	r3, [pc, #96]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800545a:	4b17      	ldr	r3, [pc, #92]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 800545c:	2200      	movs	r2, #0
 800545e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005460:	4b15      	ldr	r3, [pc, #84]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005462:	2200      	movs	r2, #0
 8005464:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005468:	2200      	movs	r2, #0
 800546a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800546c:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 800546e:	0018      	movs	r0, r3
 8005470:	f007 fe2e 	bl	800d0d0 <HAL_UART_Init>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d001      	beq.n	800547c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005478:	f001 fd60 	bl	8006f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800547c:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 800547e:	2100      	movs	r1, #0
 8005480:	0018      	movs	r0, r3
 8005482:	f008 fdc9 	bl	800e018 <HAL_UARTEx_SetTxFifoThreshold>
 8005486:	1e03      	subs	r3, r0, #0
 8005488:	d001      	beq.n	800548e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800548a:	f001 fd57 	bl	8006f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800548e:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 8005490:	2100      	movs	r1, #0
 8005492:	0018      	movs	r0, r3
 8005494:	f008 fe00 	bl	800e098 <HAL_UARTEx_SetRxFifoThreshold>
 8005498:	1e03      	subs	r3, r0, #0
 800549a:	d001      	beq.n	80054a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800549c:	f001 fd4e 	bl	8006f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80054a0:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <MX_USART1_UART_Init+0x94>)
 80054a2:	0018      	movs	r0, r3
 80054a4:	f008 fd7e 	bl	800dfa4 <HAL_UARTEx_DisableFifoMode>
 80054a8:	1e03      	subs	r3, r0, #0
 80054aa:	d001      	beq.n	80054b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80054ac:	f001 fd46 	bl	8006f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054b0:	46c0      	nop			@ (mov r8, r8)
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	200036c8 	.word	0x200036c8
 80054bc:	40013800 	.word	0x40013800

080054c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80054c4:	4b23      	ldr	r3, [pc, #140]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054c6:	4a24      	ldr	r2, [pc, #144]	@ (8005558 <MX_USART2_UART_Init+0x98>)
 80054c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80054ca:	4b22      	ldr	r3, [pc, #136]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054cc:	22e1      	movs	r2, #225	@ 0xe1
 80054ce:	0252      	lsls	r2, r2, #9
 80054d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80054d2:	4b20      	ldr	r3, [pc, #128]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054da:	2200      	movs	r2, #0
 80054dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054de:	4b1d      	ldr	r3, [pc, #116]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054e6:	220c      	movs	r2, #12
 80054e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054f0:	4b18      	ldr	r3, [pc, #96]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054f6:	4b17      	ldr	r3, [pc, #92]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054fc:	4b15      	ldr	r3, [pc, #84]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 80054fe:	2200      	movs	r2, #0
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005502:	4b14      	ldr	r3, [pc, #80]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 8005504:	2200      	movs	r2, #0
 8005506:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005508:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 800550a:	0018      	movs	r0, r3
 800550c:	f007 fde0 	bl	800d0d0 <HAL_UART_Init>
 8005510:	1e03      	subs	r3, r0, #0
 8005512:	d001      	beq.n	8005518 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005514:	f001 fd12 	bl	8006f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005518:	4b0e      	ldr	r3, [pc, #56]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 800551a:	2100      	movs	r1, #0
 800551c:	0018      	movs	r0, r3
 800551e:	f008 fd7b 	bl	800e018 <HAL_UARTEx_SetTxFifoThreshold>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d001      	beq.n	800552a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005526:	f001 fd09 	bl	8006f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800552a:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 800552c:	2100      	movs	r1, #0
 800552e:	0018      	movs	r0, r3
 8005530:	f008 fdb2 	bl	800e098 <HAL_UARTEx_SetRxFifoThreshold>
 8005534:	1e03      	subs	r3, r0, #0
 8005536:	d001      	beq.n	800553c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005538:	f001 fd00 	bl	8006f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <MX_USART2_UART_Init+0x94>)
 800553e:	0018      	movs	r0, r3
 8005540:	f008 fd30 	bl	800dfa4 <HAL_UARTEx_DisableFifoMode>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d001      	beq.n	800554c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005548:	f001 fcf8 	bl	8006f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800554c:	46c0      	nop			@ (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	46c0      	nop			@ (mov r8, r8)
 8005554:	2000375c 	.word	0x2000375c
 8005558:	40004400 	.word	0x40004400

0800555c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800555c:	b590      	push	{r4, r7, lr}
 800555e:	b08b      	sub	sp, #44	@ 0x2c
 8005560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005562:	2414      	movs	r4, #20
 8005564:	193b      	adds	r3, r7, r4
 8005566:	0018      	movs	r0, r3
 8005568:	2314      	movs	r3, #20
 800556a:	001a      	movs	r2, r3
 800556c:	2100      	movs	r1, #0
 800556e:	f009 fec1 	bl	800f2f4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005572:	4b4d      	ldr	r3, [pc, #308]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 8005574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005576:	4b4c      	ldr	r3, [pc, #304]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 8005578:	2104      	movs	r1, #4
 800557a:	430a      	orrs	r2, r1
 800557c:	635a      	str	r2, [r3, #52]	@ 0x34
 800557e:	4b4a      	ldr	r3, [pc, #296]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 8005580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005582:	2204      	movs	r2, #4
 8005584:	4013      	ands	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800558a:	4b47      	ldr	r3, [pc, #284]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 800558c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800558e:	4b46      	ldr	r3, [pc, #280]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 8005590:	2101      	movs	r1, #1
 8005592:	430a      	orrs	r2, r1
 8005594:	635a      	str	r2, [r3, #52]	@ 0x34
 8005596:	4b44      	ldr	r3, [pc, #272]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 8005598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559a:	2201      	movs	r2, #1
 800559c:	4013      	ands	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a2:	4b41      	ldr	r3, [pc, #260]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 80055a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055a6:	4b40      	ldr	r3, [pc, #256]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 80055a8:	2102      	movs	r1, #2
 80055aa:	430a      	orrs	r2, r1
 80055ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80055ae:	4b3e      	ldr	r3, [pc, #248]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 80055b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b2:	2202      	movs	r2, #2
 80055b4:	4013      	ands	r3, r2
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ba:	4b3b      	ldr	r3, [pc, #236]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 80055bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055be:	4b3a      	ldr	r3, [pc, #232]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 80055c0:	2108      	movs	r1, #8
 80055c2:	430a      	orrs	r2, r1
 80055c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80055c6:	4b38      	ldr	r3, [pc, #224]	@ (80056a8 <MX_GPIO_Init+0x14c>)
 80055c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ca:	2208      	movs	r2, #8
 80055cc:	4013      	ands	r3, r2
 80055ce:	607b      	str	r3, [r7, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 80055d2:	4936      	ldr	r1, [pc, #216]	@ (80056ac <MX_GPIO_Init+0x150>)
 80055d4:	23a0      	movs	r3, #160	@ 0xa0
 80055d6:	05db      	lsls	r3, r3, #23
 80055d8:	2200      	movs	r2, #0
 80055da:	0018      	movs	r0, r3
 80055dc:	f003 fe99 	bl	8009312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80055e0:	193b      	adds	r3, r7, r4
 80055e2:	2202      	movs	r2, #2
 80055e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055e6:	193b      	adds	r3, r7, r4
 80055e8:	2288      	movs	r2, #136	@ 0x88
 80055ea:	0352      	lsls	r2, r2, #13
 80055ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055f4:	193b      	adds	r3, r7, r4
 80055f6:	4a2e      	ldr	r2, [pc, #184]	@ (80056b0 <MX_GPIO_Init+0x154>)
 80055f8:	0019      	movs	r1, r3
 80055fa:	0010      	movs	r0, r2
 80055fc:	f003 fd00 	bl	8009000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8005600:	193b      	adds	r3, r7, r4
 8005602:	4a2a      	ldr	r2, [pc, #168]	@ (80056ac <MX_GPIO_Init+0x150>)
 8005604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005606:	193b      	adds	r3, r7, r4
 8005608:	2201      	movs	r2, #1
 800560a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560c:	193b      	adds	r3, r7, r4
 800560e:	2200      	movs	r2, #0
 8005610:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005612:	193b      	adds	r3, r7, r4
 8005614:	2200      	movs	r2, #0
 8005616:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005618:	193a      	adds	r2, r7, r4
 800561a:	23a0      	movs	r3, #160	@ 0xa0
 800561c:	05db      	lsls	r3, r3, #23
 800561e:	0011      	movs	r1, r2
 8005620:	0018      	movs	r0, r3
 8005622:	f003 fced 	bl	8009000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005626:	0021      	movs	r1, r4
 8005628:	187b      	adds	r3, r7, r1
 800562a:	2204      	movs	r2, #4
 800562c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800562e:	187b      	adds	r3, r7, r1
 8005630:	2288      	movs	r2, #136	@ 0x88
 8005632:	0352      	lsls	r2, r2, #13
 8005634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005636:	187b      	adds	r3, r7, r1
 8005638:	2200      	movs	r2, #0
 800563a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	000c      	movs	r4, r1
 800563e:	187b      	adds	r3, r7, r1
 8005640:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <MX_GPIO_Init+0x158>)
 8005642:	0019      	movs	r1, r3
 8005644:	0010      	movs	r0, r2
 8005646:	f003 fcdb 	bl	8009000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800564a:	0021      	movs	r1, r4
 800564c:	187b      	adds	r3, r7, r1
 800564e:	2280      	movs	r2, #128	@ 0x80
 8005650:	0112      	lsls	r2, r2, #4
 8005652:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005654:	187b      	adds	r3, r7, r1
 8005656:	2288      	movs	r2, #136	@ 0x88
 8005658:	0352      	lsls	r2, r2, #13
 800565a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	187b      	adds	r3, r7, r1
 800565e:	2200      	movs	r2, #0
 8005660:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005662:	187a      	adds	r2, r7, r1
 8005664:	23a0      	movs	r3, #160	@ 0xa0
 8005666:	05db      	lsls	r3, r3, #23
 8005668:	0011      	movs	r1, r2
 800566a:	0018      	movs	r0, r3
 800566c:	f003 fcc8 	bl	8009000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005670:	2200      	movs	r2, #0
 8005672:	2100      	movs	r1, #0
 8005674:	2005      	movs	r0, #5
 8005676:	f003 fadf 	bl	8008c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800567a:	2005      	movs	r0, #5
 800567c:	f003 faf1 	bl	8008c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8005680:	2200      	movs	r2, #0
 8005682:	2100      	movs	r1, #0
 8005684:	2006      	movs	r0, #6
 8005686:	f003 fad7 	bl	8008c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800568a:	2006      	movs	r0, #6
 800568c:	f003 fae9 	bl	8008c62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005690:	2200      	movs	r2, #0
 8005692:	2100      	movs	r1, #0
 8005694:	2007      	movs	r0, #7
 8005696:	f003 facf 	bl	8008c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800569a:	2007      	movs	r0, #7
 800569c:	f003 fae1 	bl	8008c62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80056a0:	46c0      	nop			@ (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b00b      	add	sp, #44	@ 0x2c
 80056a6:	bd90      	pop	{r4, r7, pc}
 80056a8:	40021000 	.word	0x40021000
 80056ac:	00008031 	.word	0x00008031
 80056b0:	50000800 	.word	0x50000800
 80056b4:	50000400 	.word	0x50000400

080056b8 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq) {
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	0002      	movs	r2, r0
 80056c0:	1dbb      	adds	r3, r7, #6
 80056c2:	801a      	strh	r2, [r3, #0]
	TIM17->ARR = (uint32_t) (987 * (float) 1000 / (float) freq);
 80056c4:	1dbb      	adds	r3, r7, #6
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fb ffaf 	bl	800162c <__aeabi_ui2f>
 80056ce:	1c03      	adds	r3, r0, #0
 80056d0:	1c19      	adds	r1, r3, #0
 80056d2:	4807      	ldr	r0, [pc, #28]	@ (80056f0 <ChangeNote+0x38>)
 80056d4:	f7fb fa76 	bl	8000bc4 <__aeabi_fdiv>
 80056d8:	1c03      	adds	r3, r0, #0
 80056da:	4c06      	ldr	r4, [pc, #24]	@ (80056f4 <ChangeNote+0x3c>)
 80056dc:	1c18      	adds	r0, r3, #0
 80056de:	f7fa ff75 	bl	80005cc <__aeabi_f2uiz>
 80056e2:	0003      	movs	r3, r0
 80056e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b003      	add	sp, #12
 80056ec:	bd90      	pop	{r4, r7, pc}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	4970f780 	.word	0x4970f780
 80056f4:	40014800 	.word	0x40014800

080056f8 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	0002      	movs	r2, r0
 8005700:	1dfb      	adds	r3, r7, #7
 8005702:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005704:	4ba0      	ldr	r3, [pc, #640]	@ (8005988 <PlayEffect+0x290>)
 8005706:	2100      	movs	r1, #0
 8005708:	0018      	movs	r0, r3
 800570a:	f006 fe49 	bl	800c3a0 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 800570e:	2005      	movs	r0, #5
 8005710:	f003 f9ac 	bl	8008a6c <HAL_Delay>
	switch (effect) {
 8005714:	1dfb      	adds	r3, r7, #7
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b06      	cmp	r3, #6
 800571a:	d900      	bls.n	800571e <PlayEffect+0x26>
 800571c:	e12a      	b.n	8005974 <PlayEffect+0x27c>
 800571e:	009a      	lsls	r2, r3, #2
 8005720:	4b9a      	ldr	r3, [pc, #616]	@ (800598c <PlayEffect+0x294>)
 8005722:	18d3      	adds	r3, r2, r3
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	469f      	mov	pc, r3
	case MenuBeep:

		curNote = G * 3;
 8005728:	4b99      	ldr	r3, [pc, #612]	@ (8005990 <PlayEffect+0x298>)
 800572a:	2293      	movs	r2, #147	@ 0x93
 800572c:	0112      	lsls	r2, r2, #4
 800572e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005730:	4b97      	ldr	r3, [pc, #604]	@ (8005990 <PlayEffect+0x298>)
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	0018      	movs	r0, r3
 8005736:	f7ff ffbf 	bl	80056b8 <ChangeNote>
		HAL_Delay(25);
 800573a:	2019      	movs	r0, #25
 800573c:	f003 f996 	bl	8008a6c <HAL_Delay>

		curNote = G * 2;
 8005740:	4b93      	ldr	r3, [pc, #588]	@ (8005990 <PlayEffect+0x298>)
 8005742:	22c4      	movs	r2, #196	@ 0xc4
 8005744:	00d2      	lsls	r2, r2, #3
 8005746:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005748:	4b91      	ldr	r3, [pc, #580]	@ (8005990 <PlayEffect+0x298>)
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	0018      	movs	r0, r3
 800574e:	f7ff ffb3 	bl	80056b8 <ChangeNote>
		HAL_Delay(25);
 8005752:	2019      	movs	r0, #25
 8005754:	f003 f98a 	bl	8008a6c <HAL_Delay>

		break;
 8005758:	e10c      	b.n	8005974 <PlayEffect+0x27c>
	case EggNoise:

		curNote = A;
 800575a:	4b8d      	ldr	r3, [pc, #564]	@ (8005990 <PlayEffect+0x298>)
 800575c:	22dc      	movs	r2, #220	@ 0xdc
 800575e:	0052      	lsls	r2, r2, #1
 8005760:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005762:	4b8b      	ldr	r3, [pc, #556]	@ (8005990 <PlayEffect+0x298>)
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	0018      	movs	r0, r3
 8005768:	f7ff ffa6 	bl	80056b8 <ChangeNote>
		HAL_Delay(20);
 800576c:	2014      	movs	r0, #20
 800576e:	f003 f97d 	bl	8008a6c <HAL_Delay>

		curNote = C;
 8005772:	4b87      	ldr	r3, [pc, #540]	@ (8005990 <PlayEffect+0x298>)
 8005774:	4a87      	ldr	r2, [pc, #540]	@ (8005994 <PlayEffect+0x29c>)
 8005776:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005778:	4b85      	ldr	r3, [pc, #532]	@ (8005990 <PlayEffect+0x298>)
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	0018      	movs	r0, r3
 800577e:	f7ff ff9b 	bl	80056b8 <ChangeNote>
		HAL_Delay(20);
 8005782:	2014      	movs	r0, #20
 8005784:	f003 f972 	bl	8008a6c <HAL_Delay>

		curNote = A;
 8005788:	4b81      	ldr	r3, [pc, #516]	@ (8005990 <PlayEffect+0x298>)
 800578a:	22dc      	movs	r2, #220	@ 0xdc
 800578c:	0052      	lsls	r2, r2, #1
 800578e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005790:	4b7f      	ldr	r3, [pc, #508]	@ (8005990 <PlayEffect+0x298>)
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff ff8f 	bl	80056b8 <ChangeNote>
		HAL_Delay(20);
 800579a:	2014      	movs	r0, #20
 800579c:	f003 f966 	bl	8008a6c <HAL_Delay>

		curNote = C;
 80057a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005990 <PlayEffect+0x298>)
 80057a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005994 <PlayEffect+0x29c>)
 80057a4:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005990 <PlayEffect+0x298>)
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	0018      	movs	r0, r3
 80057ac:	f7ff ff84 	bl	80056b8 <ChangeNote>
		HAL_Delay(20);
 80057b0:	2014      	movs	r0, #20
 80057b2:	f003 f95b 	bl	8008a6c <HAL_Delay>

		break;
 80057b6:	e0dd      	b.n	8005974 <PlayEffect+0x27c>
	case YoungNoiseHappy:

		curNote = F * 4;
 80057b8:	4b75      	ldr	r3, [pc, #468]	@ (8005990 <PlayEffect+0x298>)
 80057ba:	4a77      	ldr	r2, [pc, #476]	@ (8005998 <PlayEffect+0x2a0>)
 80057bc:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057be:	4b74      	ldr	r3, [pc, #464]	@ (8005990 <PlayEffect+0x298>)
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f7ff ff78 	bl	80056b8 <ChangeNote>
		HAL_Delay(35);
 80057c8:	2023      	movs	r0, #35	@ 0x23
 80057ca:	f003 f94f 	bl	8008a6c <HAL_Delay>

		curNote = B * 4;
 80057ce:	4b70      	ldr	r3, [pc, #448]	@ (8005990 <PlayEffect+0x298>)
 80057d0:	22f7      	movs	r2, #247	@ 0xf7
 80057d2:	00d2      	lsls	r2, r2, #3
 80057d4:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057d6:	4b6e      	ldr	r3, [pc, #440]	@ (8005990 <PlayEffect+0x298>)
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff ff6c 	bl	80056b8 <ChangeNote>
		HAL_Delay(15);
 80057e0:	200f      	movs	r0, #15
 80057e2:	f003 f943 	bl	8008a6c <HAL_Delay>

		break;
 80057e6:	e0c5      	b.n	8005974 <PlayEffect+0x27c>
	case YoungNoiseSad:

		curNote = B * 4;
 80057e8:	4b69      	ldr	r3, [pc, #420]	@ (8005990 <PlayEffect+0x298>)
 80057ea:	22f7      	movs	r2, #247	@ 0xf7
 80057ec:	00d2      	lsls	r2, r2, #3
 80057ee:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057f0:	4b67      	ldr	r3, [pc, #412]	@ (8005990 <PlayEffect+0x298>)
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7ff ff5f 	bl	80056b8 <ChangeNote>
		HAL_Delay(35);
 80057fa:	2023      	movs	r0, #35	@ 0x23
 80057fc:	f003 f936 	bl	8008a6c <HAL_Delay>

		curNote = B * 3;
 8005800:	4b63      	ldr	r3, [pc, #396]	@ (8005990 <PlayEffect+0x298>)
 8005802:	4a66      	ldr	r2, [pc, #408]	@ (800599c <PlayEffect+0x2a4>)
 8005804:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005806:	4b62      	ldr	r3, [pc, #392]	@ (8005990 <PlayEffect+0x298>)
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	0018      	movs	r0, r3
 800580c:	f7ff ff54 	bl	80056b8 <ChangeNote>
		HAL_Delay(15);
 8005810:	200f      	movs	r0, #15
 8005812:	f003 f92b 	bl	8008a6c <HAL_Delay>

		break;
 8005816:	e0ad      	b.n	8005974 <PlayEffect+0x27c>
	case AdultNoiseHappy:

		curNote = F / 4;
 8005818:	4b5d      	ldr	r3, [pc, #372]	@ (8005990 <PlayEffect+0x298>)
 800581a:	22ae      	movs	r2, #174	@ 0xae
 800581c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800581e:	4b5c      	ldr	r3, [pc, #368]	@ (8005990 <PlayEffect+0x298>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff ff48 	bl	80056b8 <ChangeNote>
		HAL_Delay(35);
 8005828:	2023      	movs	r0, #35	@ 0x23
 800582a:	f003 f91f 	bl	8008a6c <HAL_Delay>

		curNote = B / 4;
 800582e:	4b58      	ldr	r3, [pc, #352]	@ (8005990 <PlayEffect+0x298>)
 8005830:	227b      	movs	r2, #123	@ 0x7b
 8005832:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005834:	4b56      	ldr	r3, [pc, #344]	@ (8005990 <PlayEffect+0x298>)
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	0018      	movs	r0, r3
 800583a:	f7ff ff3d 	bl	80056b8 <ChangeNote>
		HAL_Delay(15);
 800583e:	200f      	movs	r0, #15
 8005840:	f003 f914 	bl	8008a6c <HAL_Delay>

		break;
 8005844:	e096      	b.n	8005974 <PlayEffect+0x27c>
	case AdultNoiseSad:

		curNote = C / 4;
 8005846:	4b52      	ldr	r3, [pc, #328]	@ (8005990 <PlayEffect+0x298>)
 8005848:	2282      	movs	r2, #130	@ 0x82
 800584a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800584c:	4b50      	ldr	r3, [pc, #320]	@ (8005990 <PlayEffect+0x298>)
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	0018      	movs	r0, r3
 8005852:	f7ff ff31 	bl	80056b8 <ChangeNote>
		HAL_Delay(35);
 8005856:	2023      	movs	r0, #35	@ 0x23
 8005858:	f003 f908 	bl	8008a6c <HAL_Delay>

		curNote = A / 4;
 800585c:	4b4c      	ldr	r3, [pc, #304]	@ (8005990 <PlayEffect+0x298>)
 800585e:	226e      	movs	r2, #110	@ 0x6e
 8005860:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005862:	4b4b      	ldr	r3, [pc, #300]	@ (8005990 <PlayEffect+0x298>)
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff ff26 	bl	80056b8 <ChangeNote>
		HAL_Delay(15);
 800586c:	200f      	movs	r0, #15
 800586e:	f003 f8fd 	bl	8008a6c <HAL_Delay>

		break;
 8005872:	e07f      	b.n	8005974 <PlayEffect+0x27c>
	case Evolution:

		curNote = A * 2;
 8005874:	4b46      	ldr	r3, [pc, #280]	@ (8005990 <PlayEffect+0x298>)
 8005876:	22dc      	movs	r2, #220	@ 0xdc
 8005878:	0092      	lsls	r2, r2, #2
 800587a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800587c:	4b44      	ldr	r3, [pc, #272]	@ (8005990 <PlayEffect+0x298>)
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff ff19 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 8005886:	2032      	movs	r0, #50	@ 0x32
 8005888:	f003 f8f0 	bl	8008a6c <HAL_Delay>

		curNote = B * 2;
 800588c:	4b40      	ldr	r3, [pc, #256]	@ (8005990 <PlayEffect+0x298>)
 800588e:	22f7      	movs	r2, #247	@ 0xf7
 8005890:	0092      	lsls	r2, r2, #2
 8005892:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005894:	4b3e      	ldr	r3, [pc, #248]	@ (8005990 <PlayEffect+0x298>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff ff0d 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 800589e:	2032      	movs	r0, #50	@ 0x32
 80058a0:	f003 f8e4 	bl	8008a6c <HAL_Delay>

		curNote = C * 2;
 80058a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005990 <PlayEffect+0x298>)
 80058a6:	4a3e      	ldr	r2, [pc, #248]	@ (80059a0 <PlayEffect+0x2a8>)
 80058a8:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058aa:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <PlayEffect+0x298>)
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7ff ff02 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 80058b4:	2032      	movs	r0, #50	@ 0x32
 80058b6:	f003 f8d9 	bl	8008a6c <HAL_Delay>

		curNote = A * 2;
 80058ba:	4b35      	ldr	r3, [pc, #212]	@ (8005990 <PlayEffect+0x298>)
 80058bc:	22dc      	movs	r2, #220	@ 0xdc
 80058be:	0092      	lsls	r2, r2, #2
 80058c0:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058c2:	4b33      	ldr	r3, [pc, #204]	@ (8005990 <PlayEffect+0x298>)
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f7ff fef6 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 80058cc:	2032      	movs	r0, #50	@ 0x32
 80058ce:	f003 f8cd 	bl	8008a6c <HAL_Delay>

		curNote = C * 2;
 80058d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005990 <PlayEffect+0x298>)
 80058d4:	4a32      	ldr	r2, [pc, #200]	@ (80059a0 <PlayEffect+0x2a8>)
 80058d6:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005990 <PlayEffect+0x298>)
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	0018      	movs	r0, r3
 80058de:	f7ff feeb 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 80058e2:	2032      	movs	r0, #50	@ 0x32
 80058e4:	f003 f8c2 	bl	8008a6c <HAL_Delay>

		curNote = D * 2;
 80058e8:	4b29      	ldr	r3, [pc, #164]	@ (8005990 <PlayEffect+0x298>)
 80058ea:	4a2e      	ldr	r2, [pc, #184]	@ (80059a4 <PlayEffect+0x2ac>)
 80058ec:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058ee:	4b28      	ldr	r3, [pc, #160]	@ (8005990 <PlayEffect+0x298>)
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	0018      	movs	r0, r3
 80058f4:	f7ff fee0 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 80058f8:	2032      	movs	r0, #50	@ 0x32
 80058fa:	f003 f8b7 	bl	8008a6c <HAL_Delay>

		curNote = B * 2;
 80058fe:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <PlayEffect+0x298>)
 8005900:	22f7      	movs	r2, #247	@ 0xf7
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005906:	4b22      	ldr	r3, [pc, #136]	@ (8005990 <PlayEffect+0x298>)
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	0018      	movs	r0, r3
 800590c:	f7ff fed4 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 8005910:	2032      	movs	r0, #50	@ 0x32
 8005912:	f003 f8ab 	bl	8008a6c <HAL_Delay>

		curNote = D * 2;
 8005916:	4b1e      	ldr	r3, [pc, #120]	@ (8005990 <PlayEffect+0x298>)
 8005918:	4a22      	ldr	r2, [pc, #136]	@ (80059a4 <PlayEffect+0x2ac>)
 800591a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800591c:	4b1c      	ldr	r3, [pc, #112]	@ (8005990 <PlayEffect+0x298>)
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	0018      	movs	r0, r3
 8005922:	f7ff fec9 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 8005926:	2032      	movs	r0, #50	@ 0x32
 8005928:	f003 f8a0 	bl	8008a6c <HAL_Delay>

		curNote = E * 2;
 800592c:	4b18      	ldr	r3, [pc, #96]	@ (8005990 <PlayEffect+0x298>)
 800592e:	4a1e      	ldr	r2, [pc, #120]	@ (80059a8 <PlayEffect+0x2b0>)
 8005930:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005932:	4b17      	ldr	r3, [pc, #92]	@ (8005990 <PlayEffect+0x298>)
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	0018      	movs	r0, r3
 8005938:	f7ff febe 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 800593c:	2032      	movs	r0, #50	@ 0x32
 800593e:	f003 f895 	bl	8008a6c <HAL_Delay>

		curNote = G * 2;
 8005942:	4b13      	ldr	r3, [pc, #76]	@ (8005990 <PlayEffect+0x298>)
 8005944:	22c4      	movs	r2, #196	@ 0xc4
 8005946:	00d2      	lsls	r2, r2, #3
 8005948:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800594a:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <PlayEffect+0x298>)
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	0018      	movs	r0, r3
 8005950:	f7ff feb2 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 8005954:	2032      	movs	r0, #50	@ 0x32
 8005956:	f003 f889 	bl	8008a6c <HAL_Delay>

		curNote = G * 2;
 800595a:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <PlayEffect+0x298>)
 800595c:	22c4      	movs	r2, #196	@ 0xc4
 800595e:	00d2      	lsls	r2, r2, #3
 8005960:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005962:	4b0b      	ldr	r3, [pc, #44]	@ (8005990 <PlayEffect+0x298>)
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	0018      	movs	r0, r3
 8005968:	f7ff fea6 	bl	80056b8 <ChangeNote>
		HAL_Delay(50);
 800596c:	2032      	movs	r0, #50	@ 0x32
 800596e:	f003 f87d 	bl	8008a6c <HAL_Delay>

		break;
 8005972:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005974:	4b04      	ldr	r3, [pc, #16]	@ (8005988 <PlayEffect+0x290>)
 8005976:	2100      	movs	r1, #0
 8005978:	0018      	movs	r0, r3
 800597a:	f006 fe01 	bl	800c580 <HAL_TIM_PWM_Stop>
}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	2000367c 	.word	0x2000367c
 800598c:	080122dc 	.word	0x080122dc
 8005990:	2000251e 	.word	0x2000251e
 8005994:	0000020b 	.word	0x0000020b
 8005998:	00000ae8 	.word	0x00000ae8
 800599c:	000005ca 	.word	0x000005ca
 80059a0:	00000416 	.word	0x00000416
 80059a4:	00000496 	.word	0x00000496
 80059a8:	00000526 	.word	0x00000526

080059ac <HAL_GPIO_EXTI_Rising_Callback>:
//INTERRUPTS ARE CALLED BACK HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	0002      	movs	r2, r0
 80059b4:	1dbb      	adds	r3, r7, #6
 80059b6:	801a      	strh	r2, [r3, #0]
	 //Left=2048
	 else if(GPIO_PIN==2048)
	 {

	 }*/
}
 80059b8:	46c0      	nop			@ (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b002      	add	sp, #8
 80059be:	bd80      	pop	{r7, pc}

080059c0 <PeripheralInit>:

//AURORA: Put custom functions here!
void PeripheralInit(void) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
	ST7735_Unselect();
 80059c4:	f7fe fb66 	bl	8004094 <ST7735_Unselect>
	ST7735_Init(1);
 80059c8:	2001      	movs	r0, #1
 80059ca:	f7fe fc77 	bl	80042bc <ST7735_Init>

	fillScreen(BLACK);
 80059ce:	2000      	movs	r0, #0
 80059d0:	f7fe fa0a 	bl	8003de8 <fillScreen>
	buffer[0] = 'A';
 80059d4:	4b17      	ldr	r3, [pc, #92]	@ (8005a34 <PeripheralInit+0x74>)
 80059d6:	2241      	movs	r2, #65	@ 0x41
 80059d8:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'B';
 80059da:	4b16      	ldr	r3, [pc, #88]	@ (8005a34 <PeripheralInit+0x74>)
 80059dc:	2242      	movs	r2, #66	@ 0x42
 80059de:	705a      	strb	r2, [r3, #1]
	TIM17->CCR1 = 5;
 80059e0:	4b15      	ldr	r3, [pc, #84]	@ (8005a38 <PeripheralInit+0x78>)
 80059e2:	2205      	movs	r2, #5
 80059e4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->PSC = 64;
 80059e6:	4b14      	ldr	r3, [pc, #80]	@ (8005a38 <PeripheralInit+0x78>)
 80059e8:	2240      	movs	r2, #64	@ 0x40
 80059ea:	629a      	str	r2, [r3, #40]	@ 0x28
	//uint8_t ret=0;
	//_ADXL343_Init();

	//Pedometer Setup
	_ADXL343_WriteReg8(0x19, 0x02);
 80059ec:	2102      	movs	r1, #2
 80059ee:	2019      	movs	r0, #25
 80059f0:	f000 fcd0 	bl	8006394 <_ADXL343_WriteReg8>
	////wait

	_ADXL343_WriteReg8(0x7C, 0x01);
 80059f4:	2101      	movs	r1, #1
 80059f6:	207c      	movs	r0, #124	@ 0x7c
 80059f8:	f000 fccc 	bl	8006394 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1A, 0x38);
 80059fc:	2138      	movs	r1, #56	@ 0x38
 80059fe:	201a      	movs	r0, #26
 8005a00:	f000 fcc8 	bl	8006394 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1B, 0x04);
 8005a04:	2104      	movs	r1, #4
 8005a06:	201b      	movs	r0, #27
 8005a08:	f000 fcc4 	bl	8006394 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1F, 0x80);
 8005a0c:	2180      	movs	r1, #128	@ 0x80
 8005a0e:	201f      	movs	r0, #31
 8005a10:	f000 fcc0 	bl	8006394 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x21, 0x80);
 8005a14:	2180      	movs	r1, #128	@ 0x80
 8005a16:	2021      	movs	r0, #33	@ 0x21
 8005a18:	f000 fcbc 	bl	8006394 <_ADXL343_WriteReg8>

	//  //Step Counter
	_ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	2018      	movs	r0, #24
 8005a20:	f000 fcb8 	bl	8006394 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8005a24:	2101      	movs	r1, #1
 8005a26:	2020      	movs	r0, #32
 8005a28:	f000 fcb4 	bl	8006394 <_ADXL343_WriteReg8>
}
 8005a2c:	46c0      	nop			@ (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	2000275c 	.word	0x2000275c
 8005a38:	40014800 	.word	0x40014800

08005a3c <StructInit>:
//INITIALIZE GAME VALUES
void StructInit(void) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
	steps = 0;
 8005a42:	4bae      	ldr	r3, [pc, #696]	@ (8005cfc <StructInit+0x2c0>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
	uint32_t Address = 0x0803F800;
 8005a48:	4bad      	ldr	r3, [pc, #692]	@ (8005d00 <StructInit+0x2c4>)
 8005a4a:	60fb      	str	r3, [r7, #12]

	//ANIMATIONS FOR EGG
	eggSitting0.Body = *imgEggSitting0;
 8005a4c:	4bad      	ldr	r3, [pc, #692]	@ (8005d04 <StructInit+0x2c8>)
 8005a4e:	4aae      	ldr	r2, [pc, #696]	@ (8005d08 <StructInit+0x2cc>)
 8005a50:	601a      	str	r2, [r3, #0]
	eggSitting0.Size = 226;
 8005a52:	4bac      	ldr	r3, [pc, #688]	@ (8005d04 <StructInit+0x2c8>)
 8005a54:	22e2      	movs	r2, #226	@ 0xe2
 8005a56:	605a      	str	r2, [r3, #4]
	animEggSitting[0] = eggSitting0;
 8005a58:	4bac      	ldr	r3, [pc, #688]	@ (8005d0c <StructInit+0x2d0>)
 8005a5a:	4aaa      	ldr	r2, [pc, #680]	@ (8005d04 <StructInit+0x2c8>)
 8005a5c:	ca03      	ldmia	r2!, {r0, r1}
 8005a5e:	c303      	stmia	r3!, {r0, r1}
	eggSitting1.Body = *imgEggSitting1;
 8005a60:	4bab      	ldr	r3, [pc, #684]	@ (8005d10 <StructInit+0x2d4>)
 8005a62:	4aac      	ldr	r2, [pc, #688]	@ (8005d14 <StructInit+0x2d8>)
 8005a64:	601a      	str	r2, [r3, #0]
	eggSitting1.Size = 227;
 8005a66:	4baa      	ldr	r3, [pc, #680]	@ (8005d10 <StructInit+0x2d4>)
 8005a68:	22e3      	movs	r2, #227	@ 0xe3
 8005a6a:	605a      	str	r2, [r3, #4]
	animEggSitting[1] = eggSitting1;
 8005a6c:	4ba7      	ldr	r3, [pc, #668]	@ (8005d0c <StructInit+0x2d0>)
 8005a6e:	4aa8      	ldr	r2, [pc, #672]	@ (8005d10 <StructInit+0x2d4>)
 8005a70:	3308      	adds	r3, #8
 8005a72:	ca03      	ldmia	r2!, {r0, r1}
 8005a74:	c303      	stmia	r3!, {r0, r1}
	eggSitting2.Body = *imgEggSitting2;
 8005a76:	4ba8      	ldr	r3, [pc, #672]	@ (8005d18 <StructInit+0x2dc>)
 8005a78:	4aa8      	ldr	r2, [pc, #672]	@ (8005d1c <StructInit+0x2e0>)
 8005a7a:	601a      	str	r2, [r3, #0]
	eggSitting2.Size = 221;
 8005a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8005d18 <StructInit+0x2dc>)
 8005a7e:	22dd      	movs	r2, #221	@ 0xdd
 8005a80:	605a      	str	r2, [r3, #4]
	animEggSitting[2] = eggSitting2;
 8005a82:	4ba2      	ldr	r3, [pc, #648]	@ (8005d0c <StructInit+0x2d0>)
 8005a84:	4aa4      	ldr	r2, [pc, #656]	@ (8005d18 <StructInit+0x2dc>)
 8005a86:	3310      	adds	r3, #16
 8005a88:	ca03      	ldmia	r2!, {r0, r1}
 8005a8a:	c303      	stmia	r3!, {r0, r1}
	eggSitting3.Body = *imgEggSitting3;
 8005a8c:	4ba4      	ldr	r3, [pc, #656]	@ (8005d20 <StructInit+0x2e4>)
 8005a8e:	4aa5      	ldr	r2, [pc, #660]	@ (8005d24 <StructInit+0x2e8>)
 8005a90:	601a      	str	r2, [r3, #0]
	eggSitting3.Size = 217;
 8005a92:	4ba3      	ldr	r3, [pc, #652]	@ (8005d20 <StructInit+0x2e4>)
 8005a94:	22d9      	movs	r2, #217	@ 0xd9
 8005a96:	605a      	str	r2, [r3, #4]
	animEggSitting[3] = eggSitting3;
 8005a98:	4b9c      	ldr	r3, [pc, #624]	@ (8005d0c <StructInit+0x2d0>)
 8005a9a:	4aa1      	ldr	r2, [pc, #644]	@ (8005d20 <StructInit+0x2e4>)
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	ca03      	ldmia	r2!, {r0, r1}
 8005aa0:	c303      	stmia	r3!, {r0, r1}
	eggSitting4.Body = *imgEggSitting4;
 8005aa2:	4ba1      	ldr	r3, [pc, #644]	@ (8005d28 <StructInit+0x2ec>)
 8005aa4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d2c <StructInit+0x2f0>)
 8005aa6:	601a      	str	r2, [r3, #0]
	eggSitting4.Size = 221;
 8005aa8:	4b9f      	ldr	r3, [pc, #636]	@ (8005d28 <StructInit+0x2ec>)
 8005aaa:	22dd      	movs	r2, #221	@ 0xdd
 8005aac:	605a      	str	r2, [r3, #4]
	animEggSitting[4] = eggSitting4;
 8005aae:	4b97      	ldr	r3, [pc, #604]	@ (8005d0c <StructInit+0x2d0>)
 8005ab0:	4a9d      	ldr	r2, [pc, #628]	@ (8005d28 <StructInit+0x2ec>)
 8005ab2:	3320      	adds	r3, #32
 8005ab4:	ca03      	ldmia	r2!, {r0, r1}
 8005ab6:	c303      	stmia	r3!, {r0, r1}

	//ANIMATIONS FOR BABY DRAGON
	sitting0.Body = *imgSitting0;
 8005ab8:	4b9d      	ldr	r3, [pc, #628]	@ (8005d30 <StructInit+0x2f4>)
 8005aba:	4a9e      	ldr	r2, [pc, #632]	@ (8005d34 <StructInit+0x2f8>)
 8005abc:	601a      	str	r2, [r3, #0]
	sitting0.Size = 307;
 8005abe:	4b9c      	ldr	r3, [pc, #624]	@ (8005d30 <StructInit+0x2f4>)
 8005ac0:	2234      	movs	r2, #52	@ 0x34
 8005ac2:	32ff      	adds	r2, #255	@ 0xff
 8005ac4:	605a      	str	r2, [r3, #4]
	sitting1.Body = *imgSitting1;
 8005ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d38 <StructInit+0x2fc>)
 8005ac8:	4a9c      	ldr	r2, [pc, #624]	@ (8005d3c <StructInit+0x300>)
 8005aca:	601a      	str	r2, [r3, #0]
	sitting1.Size = 305;
 8005acc:	4b9a      	ldr	r3, [pc, #616]	@ (8005d38 <StructInit+0x2fc>)
 8005ace:	2232      	movs	r2, #50	@ 0x32
 8005ad0:	32ff      	adds	r2, #255	@ 0xff
 8005ad2:	605a      	str	r2, [r3, #4]
	animSitting[0] = sitting0;
 8005ad4:	4b9a      	ldr	r3, [pc, #616]	@ (8005d40 <StructInit+0x304>)
 8005ad6:	4a96      	ldr	r2, [pc, #600]	@ (8005d30 <StructInit+0x2f4>)
 8005ad8:	ca03      	ldmia	r2!, {r0, r1}
 8005ada:	c303      	stmia	r3!, {r0, r1}
	animSitting[1] = sitting1;
 8005adc:	4b98      	ldr	r3, [pc, #608]	@ (8005d40 <StructInit+0x304>)
 8005ade:	4a96      	ldr	r2, [pc, #600]	@ (8005d38 <StructInit+0x2fc>)
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	ca03      	ldmia	r2!, {r0, r1}
 8005ae4:	c303      	stmia	r3!, {r0, r1}

	//ANIMATIONS FOR ADULT DRAGON
	adultSitting0.Body = *imgAdultSitting0;
 8005ae6:	4b97      	ldr	r3, [pc, #604]	@ (8005d44 <StructInit+0x308>)
 8005ae8:	4a97      	ldr	r2, [pc, #604]	@ (8005d48 <StructInit+0x30c>)
 8005aea:	601a      	str	r2, [r3, #0]
	adultSitting0.Size = 481;
 8005aec:	4b95      	ldr	r3, [pc, #596]	@ (8005d44 <StructInit+0x308>)
 8005aee:	22e2      	movs	r2, #226	@ 0xe2
 8005af0:	32ff      	adds	r2, #255	@ 0xff
 8005af2:	605a      	str	r2, [r3, #4]
	animAdultSitting[0] = adultSitting0;
 8005af4:	4b95      	ldr	r3, [pc, #596]	@ (8005d4c <StructInit+0x310>)
 8005af6:	4a93      	ldr	r2, [pc, #588]	@ (8005d44 <StructInit+0x308>)
 8005af8:	ca03      	ldmia	r2!, {r0, r1}
 8005afa:	c303      	stmia	r3!, {r0, r1}

	if ((*(__IO uint64_t*) (Address)) == (uint64_t) 0x12345678) {
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	4993      	ldr	r1, [pc, #588]	@ (8005d50 <StructInit+0x314>)
 8005b04:	428a      	cmp	r2, r1
 8005b06:	d000      	beq.n	8005b0a <StructInit+0xce>
 8005b08:	e0a7      	b.n	8005c5a <StructInit+0x21e>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d000      	beq.n	8005b10 <StructInit+0xd4>
 8005b0e:	e0a4      	b.n	8005c5a <StructInit+0x21e>
		Address += 8;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3308      	adds	r3, #8
 8005b14:	60fb      	str	r3, [r7, #12]
		game.allSteps = (unsigned int) (*(__IO uint64_t*) (Address));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	0011      	movs	r1, r2
 8005b1e:	4a8d      	ldr	r2, [pc, #564]	@ (8005d54 <StructInit+0x318>)
 8005b20:	238c      	movs	r3, #140	@ 0x8c
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3308      	adds	r3, #8
 8005b2a:	60fb      	str	r3, [r7, #12]
		game.stepsToday = (unsigned int) (*(__IO uint64_t*) (Address));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	0011      	movs	r1, r2
 8005b34:	4a87      	ldr	r2, [pc, #540]	@ (8005d54 <StructInit+0x318>)
 8005b36:	2390      	movs	r3, #144	@ 0x90
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	60fb      	str	r3, [r7, #12]
		game.weeklySteps = (unsigned int) (*(__IO uint64_t*) (Address));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	0011      	movs	r1, r2
 8005b4a:	4a82      	ldr	r2, [pc, #520]	@ (8005d54 <StructInit+0x318>)
 8005b4c:	238e      	movs	r3, #142	@ 0x8e
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3308      	adds	r3, #8
 8005b56:	60fb      	str	r3, [r7, #12]
		game.dailyGoal = (unsigned int) (*(__IO uint64_t*) (Address));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	0011      	movs	r1, r2
 8005b60:	4a7c      	ldr	r2, [pc, #496]	@ (8005d54 <StructInit+0x318>)
 8005b62:	2392      	movs	r3, #146	@ 0x92
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	60fb      	str	r3, [r7, #12]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005b6e:	4a79      	ldr	r2, [pc, #484]	@ (8005d54 <StructInit+0x318>)
 8005b70:	2392      	movs	r3, #146	@ 0x92
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	58d3      	ldr	r3, [r2, r3]
 8005b76:	4a77      	ldr	r2, [pc, #476]	@ (8005d54 <StructInit+0x318>)
 8005b78:	7c12      	ldrb	r2, [r2, #16]
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	435a      	muls	r2, r3
 8005b7e:	0011      	movs	r1, r2
 8005b80:	4a74      	ldr	r2, [pc, #464]	@ (8005d54 <StructInit+0x318>)
 8005b82:	2394      	movs	r3, #148	@ 0x94
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	60fb      	str	r3, [r7, #12]
		game.evo = (unsigned char) (*(__IO uint64_t*) (Address));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	4b6f      	ldr	r3, [pc, #444]	@ (8005d54 <StructInit+0x318>)
 8005b98:	741a      	strb	r2, [r3, #16]
		Address += 8;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	60fb      	str	r3, [r7, #12]
		game.mood = (unsigned char) (*(__IO uint64_t*) (Address));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d54 <StructInit+0x318>)
 8005baa:	745a      	strb	r2, [r3, #17]
		Address += 8;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	60fb      	str	r3, [r7, #12]
		game.numLocations = (unsigned int) (*(__IO uint64_t*) (Address));
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4b66      	ldr	r3, [pc, #408]	@ (8005d54 <StructInit+0x318>)
 8005bba:	615a      	str	r2, [r3, #20]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	e010      	b.n	8005be4 <StructInit+0x1a8>
			Address += 1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
			game.uid[flashI] = (char) (*(__IO uint8_t*) (Address));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	b2d8      	uxtb	r0, r3
 8005bce:	4961      	ldr	r1, [pc, #388]	@ (8005d54 <StructInit+0x318>)
 8005bd0:	2396      	movs	r3, #150	@ 0x96
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	188a      	adds	r2, r1, r2
 8005bd8:	18d3      	adds	r3, r2, r3
 8005bda:	1c02      	adds	r2, r0, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b1f      	cmp	r3, #31
 8005be8:	ddeb      	ble.n	8005bc2 <StructInit+0x186>
		}
		for (int flashI = 0; flashI < 32; flashI++) {
 8005bea:	2300      	movs	r3, #0
 8005bec:	607b      	str	r3, [r7, #4]
 8005bee:	e030      	b.n	8005c52 <StructInit+0x216>
			Address += 8;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lat =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	0013      	movs	r3, r2
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fb fcc8 	bl	8001594 <__aeabi_i2f>
 8005c04:	1c03      	adds	r3, r0, #0
 8005c06:	4954      	ldr	r1, [pc, #336]	@ (8005d58 <StructInit+0x31c>)
 8005c08:	1c18      	adds	r0, r3, #0
 8005c0a:	f7fa ffdb 	bl	8000bc4 <__aeabi_fdiv>
 8005c0e:	1c03      	adds	r3, r0, #0
 8005c10:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lat =
 8005c12:	4b50      	ldr	r3, [pc, #320]	@ (8005d54 <StructInit+0x318>)
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	3203      	adds	r2, #3
 8005c18:	00d2      	lsls	r2, r2, #3
 8005c1a:	50d1      	str	r1, [r2, r3]
			Address += 8;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lon =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	0013      	movs	r3, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fb fcb2 	bl	8001594 <__aeabi_i2f>
 8005c30:	1c03      	adds	r3, r0, #0
 8005c32:	4949      	ldr	r1, [pc, #292]	@ (8005d58 <StructInit+0x31c>)
 8005c34:	1c18      	adds	r0, r3, #0
 8005c36:	f7fa ffc5 	bl	8000bc4 <__aeabi_fdiv>
 8005c3a:	1c03      	adds	r3, r0, #0
 8005c3c:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lon =
 8005c3e:	4a45      	ldr	r2, [pc, #276]	@ (8005d54 <StructInit+0x318>)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3303      	adds	r3, #3
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	3304      	adds	r3, #4
 8005c4a:	6019      	str	r1, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b1f      	cmp	r3, #31
 8005c56:	ddcb      	ble.n	8005bf0 <StructInit+0x1b4>
		game.positions[0] = dummy;
		game.positions[1] = dummy;
		game.positions[2] = dummy;
		game.time.hours = 0;
	}
}
 8005c58:	e04b      	b.n	8005cf2 <StructInit+0x2b6>
		game.evo = 0;
 8005c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d54 <StructInit+0x318>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	741a      	strb	r2, [r3, #16]
		game.uid[0] = 'h';
 8005c60:	4a3c      	ldr	r2, [pc, #240]	@ (8005d54 <StructInit+0x318>)
 8005c62:	2396      	movs	r3, #150	@ 0x96
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	2168      	movs	r1, #104	@ 0x68
 8005c68:	54d1      	strb	r1, [r2, r3]
		game.uid[1] = 'i';
 8005c6a:	4a3a      	ldr	r2, [pc, #232]	@ (8005d54 <StructInit+0x318>)
 8005c6c:	232e      	movs	r3, #46	@ 0x2e
 8005c6e:	33ff      	adds	r3, #255	@ 0xff
 8005c70:	2169      	movs	r1, #105	@ 0x69
 8005c72:	54d1      	strb	r1, [r2, r3]
		game.allSteps = 0;
 8005c74:	4a37      	ldr	r2, [pc, #220]	@ (8005d54 <StructInit+0x318>)
 8005c76:	238c      	movs	r3, #140	@ 0x8c
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	50d1      	str	r1, [r2, r3]
		game.mood = 1;
 8005c7e:	4b35      	ldr	r3, [pc, #212]	@ (8005d54 <StructInit+0x318>)
 8005c80:	2201      	movs	r2, #1
 8005c82:	745a      	strb	r2, [r3, #17]
		game.numLocations = 3;
 8005c84:	4b33      	ldr	r3, [pc, #204]	@ (8005d54 <StructInit+0x318>)
 8005c86:	2203      	movs	r2, #3
 8005c88:	615a      	str	r2, [r3, #20]
		game.stepsToday = 0;
 8005c8a:	4a32      	ldr	r2, [pc, #200]	@ (8005d54 <StructInit+0x318>)
 8005c8c:	2390      	movs	r3, #144	@ 0x90
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2100      	movs	r1, #0
 8005c92:	50d1      	str	r1, [r2, r3]
		game.weeklySteps = 0;
 8005c94:	4a2f      	ldr	r2, [pc, #188]	@ (8005d54 <StructInit+0x318>)
 8005c96:	238e      	movs	r3, #142	@ 0x8e
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	50d1      	str	r1, [r2, r3]
		game.dailyGoal = 50;
 8005c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005d54 <StructInit+0x318>)
 8005ca0:	2392      	movs	r3, #146	@ 0x92
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	2132      	movs	r1, #50	@ 0x32
 8005ca6:	50d1      	str	r1, [r2, r3]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d54 <StructInit+0x318>)
 8005caa:	2392      	movs	r3, #146	@ 0x92
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	58d3      	ldr	r3, [r2, r3]
 8005cb0:	4a28      	ldr	r2, [pc, #160]	@ (8005d54 <StructInit+0x318>)
 8005cb2:	7c12      	ldrb	r2, [r2, #16]
 8005cb4:	3201      	adds	r2, #1
 8005cb6:	435a      	muls	r2, r3
 8005cb8:	0011      	movs	r1, r2
 8005cba:	4a26      	ldr	r2, [pc, #152]	@ (8005d54 <StructInit+0x318>)
 8005cbc:	2394      	movs	r3, #148	@ 0x94
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	50d1      	str	r1, [r2, r3]
		dummy.lat = 12.34567;
 8005cc2:	4b26      	ldr	r3, [pc, #152]	@ (8005d5c <StructInit+0x320>)
 8005cc4:	4a26      	ldr	r2, [pc, #152]	@ (8005d60 <StructInit+0x324>)
 8005cc6:	601a      	str	r2, [r3, #0]
		dummy.lon = -89.10111;
 8005cc8:	4b24      	ldr	r3, [pc, #144]	@ (8005d5c <StructInit+0x320>)
 8005cca:	4a26      	ldr	r2, [pc, #152]	@ (8005d64 <StructInit+0x328>)
 8005ccc:	605a      	str	r2, [r3, #4]
		game.positions[0] = dummy;
 8005cce:	4b21      	ldr	r3, [pc, #132]	@ (8005d54 <StructInit+0x318>)
 8005cd0:	4a22      	ldr	r2, [pc, #136]	@ (8005d5c <StructInit+0x320>)
 8005cd2:	3318      	adds	r3, #24
 8005cd4:	ca03      	ldmia	r2!, {r0, r1}
 8005cd6:	c303      	stmia	r3!, {r0, r1}
		game.positions[1] = dummy;
 8005cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8005d54 <StructInit+0x318>)
 8005cda:	4a20      	ldr	r2, [pc, #128]	@ (8005d5c <StructInit+0x320>)
 8005cdc:	3320      	adds	r3, #32
 8005cde:	ca03      	ldmia	r2!, {r0, r1}
 8005ce0:	c303      	stmia	r3!, {r0, r1}
		game.positions[2] = dummy;
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d54 <StructInit+0x318>)
 8005ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d5c <StructInit+0x320>)
 8005ce6:	3328      	adds	r3, #40	@ 0x28
 8005ce8:	ca03      	ldmia	r2!, {r0, r1}
 8005cea:	c303      	stmia	r3!, {r0, r1}
		game.time.hours = 0;
 8005cec:	4b19      	ldr	r3, [pc, #100]	@ (8005d54 <StructInit+0x318>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b004      	add	sp, #16
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	20003588 	.word	0x20003588
 8005d00:	0803f800 	.word	0x0803f800
 8005d04:	20002528 	.word	0x20002528
 8005d08:	20000014 	.word	0x20000014
 8005d0c:	20002550 	.word	0x20002550
 8005d10:	20002530 	.word	0x20002530
 8005d14:	2000039c 	.word	0x2000039c
 8005d18:	20002538 	.word	0x20002538
 8005d1c:	20000728 	.word	0x20000728
 8005d20:	20002540 	.word	0x20002540
 8005d24:	20000a9c 	.word	0x20000a9c
 8005d28:	20002548 	.word	0x20002548
 8005d2c:	20000e00 	.word	0x20000e00
 8005d30:	20002578 	.word	0x20002578
 8005d34:	20001174 	.word	0x20001174
 8005d38:	20002580 	.word	0x20002580
 8005d3c:	20001640 	.word	0x20001640
 8005d40:	20002588 	.word	0x20002588
 8005d44:	20002598 	.word	0x20002598
 8005d48:	20001b04 	.word	0x20001b04
 8005d4c:	200025a0 	.word	0x200025a0
 8005d50:	12345678 	.word	0x12345678
 8005d54:	200025b4 	.word	0x200025b4
 8005d58:	47c35000 	.word	0x47c35000
 8005d5c:	20002700 	.word	0x20002700
 8005d60:	414587dd 	.word	0x414587dd
 8005d64:	c2b233c5 	.word	0xc2b233c5

08005d68 <Evolve>:
//Method for displaying the evolution animation
void Evolve() {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
	if (game.evo < 2)
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <Evolve+0x30>)
 8005d6e:	7c1b      	ldrb	r3, [r3, #16]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d80d      	bhi.n	8005d90 <Evolve+0x28>
	{
		effect = Evolution;
 8005d74:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <Evolve+0x34>)
 8005d76:	2206      	movs	r2, #6
 8005d78:	701a      	strb	r2, [r3, #0]
		PlayEffect(effect);
 8005d7a:	4b08      	ldr	r3, [pc, #32]	@ (8005d9c <Evolve+0x34>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f7ff fcba 	bl	80056f8 <PlayEffect>
		game.evo += 1;
 8005d84:	4b04      	ldr	r3, [pc, #16]	@ (8005d98 <Evolve+0x30>)
 8005d86:	7c1b      	ldrb	r3, [r3, #16]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	4b02      	ldr	r3, [pc, #8]	@ (8005d98 <Evolve+0x30>)
 8005d8e:	741a      	strb	r2, [r3, #16]
	}
}
 8005d90:	46c0      	nop			@ (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	200025b4 	.word	0x200025b4
 8005d9c:	20002520 	.word	0x20002520

08005da0 <FlashErase>:
void FlashErase() {
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8005da6:	2408      	movs	r4, #8
 8005da8:	193b      	adds	r3, r7, r4
 8005daa:	2204      	movs	r2, #4
 8005dac:	605a      	str	r2, [r3, #4]
	tryit.NbPages = 1;
 8005dae:	193b      	adds	r3, r7, r4
 8005db0:	2201      	movs	r2, #1
 8005db2:	60da      	str	r2, [r3, #12]
	tryit.Page = 127;
 8005db4:	193b      	adds	r3, r7, r4
 8005db6:	227f      	movs	r2, #127	@ 0x7f
 8005db8:	609a      	str	r2, [r3, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 8005dba:	193b      	adds	r3, r7, r4
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	601a      	str	r2, [r3, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 8005dc0:	f002 ffba 	bl	8008d38 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 8005dc4:	1d3a      	adds	r2, r7, #4
 8005dc6:	193b      	adds	r3, r7, r4
 8005dc8:	0011      	movs	r1, r2
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f003 f868 	bl	8008ea0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8005dd0:	f002 ffd6 	bl	8008d80 <HAL_FLASH_Lock>
}
 8005dd4:	46c0      	nop			@ (mov r8, r8)
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b007      	add	sp, #28
 8005dda:	bd90      	pop	{r4, r7, pc}

08005ddc <FlashWrite>:
void FlashWrite() {
 8005ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dde:	4cce      	ldr	r4, [pc, #824]	@ (8006118 <FlashWrite+0x33c>)
 8005de0:	44a5      	add	sp, r4
 8005de2:	af00      	add	r7, sp, #0
	uint32_t Address = 0x0803F800;
 8005de4:	4bcd      	ldr	r3, [pc, #820]	@ (800611c <FlashWrite+0x340>)
 8005de6:	4cce      	ldr	r4, [pc, #824]	@ (8006120 <FlashWrite+0x344>)
 8005de8:	2140      	movs	r1, #64	@ 0x40
 8005dea:	1862      	adds	r2, r4, r1
 8005dec:	19d2      	adds	r2, r2, r7
 8005dee:	6013      	str	r3, [r2, #0]
	uint8_t flashBuffer[496] = "I am the very model of a modern major general.";
 8005df0:	4bcc      	ldr	r3, [pc, #816]	@ (8006124 <FlashWrite+0x348>)
 8005df2:	48cd      	ldr	r0, [pc, #820]	@ (8006128 <FlashWrite+0x34c>)
 8005df4:	181b      	adds	r3, r3, r0
 8005df6:	187a      	adds	r2, r7, r1
 8005df8:	189c      	adds	r4, r3, r2
 8005dfa:	4bcc      	ldr	r3, [pc, #816]	@ (800612c <FlashWrite+0x350>)
 8005dfc:	0020      	movs	r0, r4
 8005dfe:	0019      	movs	r1, r3
 8005e00:	232f      	movs	r3, #47	@ 0x2f
 8005e02:	001a      	movs	r2, r3
 8005e04:	f009 fb0b 	bl	800f41e <memcpy>
 8005e08:	232f      	movs	r3, #47	@ 0x2f
 8005e0a:	18e0      	adds	r0, r4, r3
 8005e0c:	23c2      	movs	r3, #194	@ 0xc2
 8005e0e:	33ff      	adds	r3, #255	@ 0xff
 8005e10:	001a      	movs	r2, r3
 8005e12:	2100      	movs	r1, #0
 8005e14:	f009 fa6e 	bl	800f2f4 <memset>
	uint64_t flashTestBuffer[496];
	uint64_t xyz = 0;
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	49c4      	ldr	r1, [pc, #784]	@ (8006130 <FlashWrite+0x354>)
 8005e1e:	2040      	movs	r0, #64	@ 0x40
 8005e20:	1809      	adds	r1, r1, r0
 8005e22:	19c9      	adds	r1, r1, r7
 8005e24:	600a      	str	r2, [r1, #0]
 8005e26:	604b      	str	r3, [r1, #4]
	int chunkI = 8;
 8005e28:	2308      	movs	r3, #8
 8005e2a:	4ac2      	ldr	r2, [pc, #776]	@ (8006134 <FlashWrite+0x358>)
 8005e2c:	0001      	movs	r1, r0
 8005e2e:	1852      	adds	r2, r2, r1
 8005e30:	19d2      	adds	r2, r2, r7
 8005e32:	6013      	str	r3, [r2, #0]

	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8005e34:	4bc0      	ldr	r3, [pc, #768]	@ (8006138 <FlashWrite+0x35c>)
 8005e36:	48bc      	ldr	r0, [pc, #752]	@ (8006128 <FlashWrite+0x34c>)
 8005e38:	181b      	adds	r3, r3, r0
 8005e3a:	187a      	adds	r2, r7, r1
 8005e3c:	189a      	adds	r2, r3, r2
 8005e3e:	2304      	movs	r3, #4
 8005e40:	6053      	str	r3, [r2, #4]
	tryit.NbPages = 1;
 8005e42:	4bbd      	ldr	r3, [pc, #756]	@ (8006138 <FlashWrite+0x35c>)
 8005e44:	181b      	adds	r3, r3, r0
 8005e46:	187a      	adds	r2, r7, r1
 8005e48:	189a      	adds	r2, r3, r2
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	60d3      	str	r3, [r2, #12]
	tryit.Page = 127;
 8005e4e:	4bba      	ldr	r3, [pc, #744]	@ (8006138 <FlashWrite+0x35c>)
 8005e50:	181b      	adds	r3, r3, r0
 8005e52:	187a      	adds	r2, r7, r1
 8005e54:	189a      	adds	r2, r3, r2
 8005e56:	237f      	movs	r3, #127	@ 0x7f
 8005e58:	6093      	str	r3, [r2, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 8005e5a:	4bb7      	ldr	r3, [pc, #732]	@ (8006138 <FlashWrite+0x35c>)
 8005e5c:	181b      	adds	r3, r3, r0
 8005e5e:	000c      	movs	r4, r1
 8005e60:	187a      	adds	r2, r7, r1
 8005e62:	189a      	adds	r2, r3, r2
 8005e64:	2302      	movs	r3, #2
 8005e66:	6013      	str	r3, [r2, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 8005e68:	f002 ff66 	bl	8008d38 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 8005e6c:	2344      	movs	r3, #68	@ 0x44
 8005e6e:	18fa      	adds	r2, r7, r3
 8005e70:	2308      	movs	r3, #8
 8005e72:	191b      	adds	r3, r3, r4
 8005e74:	19db      	adds	r3, r3, r7
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f003 f811 	bl	8008ea0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005e7e:	4aaf      	ldr	r2, [pc, #700]	@ (800613c <FlashWrite+0x360>)
 8005e80:	2300      	movs	r3, #0
 8005e82:	4ca7      	ldr	r4, [pc, #668]	@ (8006120 <FlashWrite+0x344>)
 8005e84:	2040      	movs	r0, #64	@ 0x40
 8005e86:	1821      	adds	r1, r4, r0
 8005e88:	19c9      	adds	r1, r1, r7
 8005e8a:	6809      	ldr	r1, [r1, #0]
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	f002 ff05 	bl	8008c9c <HAL_FLASH_Program>
			(uint64_t) 0x12345678);
	Address += 8;
 8005e92:	0021      	movs	r1, r4
 8005e94:	2040      	movs	r0, #64	@ 0x40
 8005e96:	180b      	adds	r3, r1, r0
 8005e98:	19db      	adds	r3, r3, r7
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	180a      	adds	r2, r1, r0
 8005ea0:	19d2      	adds	r2, r2, r7
 8005ea2:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.allSteps);
 8005ea4:	4aa6      	ldr	r2, [pc, #664]	@ (8006140 <FlashWrite+0x364>)
 8005ea6:	238c      	movs	r3, #140	@ 0x8c
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005eac:	001d      	movs	r5, r3
 8005eae:	2300      	movs	r3, #0
 8005eb0:	001e      	movs	r6, r3
 8005eb2:	000c      	movs	r4, r1
 8005eb4:	180b      	adds	r3, r1, r0
 8005eb6:	19db      	adds	r3, r3, r7
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	002a      	movs	r2, r5
 8005ebc:	0033      	movs	r3, r6
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	f002 feec 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8005ec4:	0021      	movs	r1, r4
 8005ec6:	2040      	movs	r0, #64	@ 0x40
 8005ec8:	180b      	adds	r3, r1, r0
 8005eca:	19db      	adds	r3, r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	180a      	adds	r2, r1, r0
 8005ed2:	19d2      	adds	r2, r2, r7
 8005ed4:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.stepsToday);
 8005ed6:	4a9a      	ldr	r2, [pc, #616]	@ (8006140 <FlashWrite+0x364>)
 8005ed8:	2390      	movs	r3, #144	@ 0x90
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005ede:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee4:	000c      	movs	r4, r1
 8005ee6:	0005      	movs	r5, r0
 8005ee8:	180b      	adds	r3, r1, r0
 8005eea:	19db      	adds	r3, r3, r7
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	f002 fed2 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8005ef8:	0021      	movs	r1, r4
 8005efa:	0028      	movs	r0, r5
 8005efc:	180b      	adds	r3, r1, r0
 8005efe:	19db      	adds	r3, r3, r7
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3308      	adds	r3, #8
 8005f04:	180a      	adds	r2, r1, r0
 8005f06:	19d2      	adds	r2, r2, r7
 8005f08:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklySteps);
 8005f0a:	4a8d      	ldr	r2, [pc, #564]	@ (8006140 <FlashWrite+0x364>)
 8005f0c:	238e      	movs	r3, #142	@ 0x8e
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005f12:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f14:	2300      	movs	r3, #0
 8005f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f18:	000c      	movs	r4, r1
 8005f1a:	0005      	movs	r5, r0
 8005f1c:	180b      	adds	r3, r1, r0
 8005f1e:	19db      	adds	r3, r3, r7
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f26:	2001      	movs	r0, #1
 8005f28:	f002 feb8 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8005f2c:	0021      	movs	r1, r4
 8005f2e:	0028      	movs	r0, r5
 8005f30:	180b      	adds	r3, r1, r0
 8005f32:	19db      	adds	r3, r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	180a      	adds	r2, r1, r0
 8005f3a:	19d2      	adds	r2, r2, r7
 8005f3c:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.dailyGoal);
 8005f3e:	4a80      	ldr	r2, [pc, #512]	@ (8006140 <FlashWrite+0x364>)
 8005f40:	2392      	movs	r3, #146	@ 0x92
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005f46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f48:	2300      	movs	r3, #0
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f4c:	000c      	movs	r4, r1
 8005f4e:	0005      	movs	r5, r0
 8005f50:	180b      	adds	r3, r1, r0
 8005f52:	19db      	adds	r3, r3, r7
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	f002 fe9e 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8005f60:	0021      	movs	r1, r4
 8005f62:	0028      	movs	r0, r5
 8005f64:	180b      	adds	r3, r1, r0
 8005f66:	19db      	adds	r3, r3, r7
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	180a      	adds	r2, r1, r0
 8005f6e:	19d2      	adds	r2, r2, r7
 8005f70:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklyGoal);
 8005f72:	4a73      	ldr	r2, [pc, #460]	@ (8006140 <FlashWrite+0x364>)
 8005f74:	2394      	movs	r3, #148	@ 0x94
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f80:	000c      	movs	r4, r1
 8005f82:	0005      	movs	r5, r0
 8005f84:	180b      	adds	r3, r1, r0
 8005f86:	19db      	adds	r3, r3, r7
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f002 fe84 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8005f94:	0022      	movs	r2, r4
 8005f96:	0028      	movs	r0, r5
 8005f98:	1813      	adds	r3, r2, r0
 8005f9a:	19db      	adds	r3, r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	1811      	adds	r1, r2, r0
 8005fa2:	19c9      	adds	r1, r1, r7
 8005fa4:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.evo);
 8005fa6:	4b66      	ldr	r3, [pc, #408]	@ (8006140 <FlashWrite+0x364>)
 8005fa8:	7c1b      	ldrb	r3, [r3, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	2300      	movs	r3, #0
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	0014      	movs	r4, r2
 8005fb2:	0005      	movs	r5, r0
 8005fb4:	1813      	adds	r3, r2, r0
 8005fb6:	19db      	adds	r3, r3, r7
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	f002 fe6c 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8005fc4:	0022      	movs	r2, r4
 8005fc6:	0028      	movs	r0, r5
 8005fc8:	1813      	adds	r3, r2, r0
 8005fca:	19db      	adds	r3, r3, r7
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	1811      	adds	r1, r2, r0
 8005fd2:	19c9      	adds	r1, r1, r7
 8005fd4:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.mood);
 8005fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8006140 <FlashWrite+0x364>)
 8005fd8:	7c5b      	ldrb	r3, [r3, #17]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	0014      	movs	r4, r2
 8005fe2:	0005      	movs	r5, r0
 8005fe4:	1813      	adds	r3, r2, r0
 8005fe6:	19db      	adds	r3, r3, r7
 8005fe8:	6819      	ldr	r1, [r3, #0]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2001      	movs	r0, #1
 8005ff0:	f002 fe54 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8005ff4:	0022      	movs	r2, r4
 8005ff6:	0028      	movs	r0, r5
 8005ff8:	1813      	adds	r3, r2, r0
 8005ffa:	19db      	adds	r3, r3, r7
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	1811      	adds	r1, r2, r0
 8006002:	19c9      	adds	r1, r1, r7
 8006004:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.numLocations);
 8006006:	4b4e      	ldr	r3, [pc, #312]	@ (8006140 <FlashWrite+0x364>)
 8006008:	695b      	ldr	r3, [r3, #20]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800600a:	60bb      	str	r3, [r7, #8]
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	0014      	movs	r4, r2
 8006012:	0005      	movs	r5, r0
 8006014:	1813      	adds	r3, r2, r0
 8006016:	19db      	adds	r3, r3, r7
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2001      	movs	r0, #1
 8006020:	f002 fe3c 	bl	8008c9c <HAL_FLASH_Program>
	Address += 8;
 8006024:	0022      	movs	r2, r4
 8006026:	0028      	movs	r0, r5
 8006028:	1813      	adds	r3, r2, r0
 800602a:	19db      	adds	r3, r3, r7
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3308      	adds	r3, #8
 8006030:	1812      	adds	r2, r2, r0
 8006032:	19d2      	adds	r2, r2, r7
 8006034:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 8006036:	2300      	movs	r3, #0
 8006038:	4a42      	ldr	r2, [pc, #264]	@ (8006144 <FlashWrite+0x368>)
 800603a:	1812      	adds	r2, r2, r0
 800603c:	19d2      	adds	r2, r2, r7
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e05c      	b.n	80060fc <FlashWrite+0x320>
		xyz += (game.uid[flashI]) << ((8 - (chunkI)) * 8);
 8006042:	493f      	ldr	r1, [pc, #252]	@ (8006140 <FlashWrite+0x364>)
 8006044:	2396      	movs	r3, #150	@ 0x96
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4a3e      	ldr	r2, [pc, #248]	@ (8006144 <FlashWrite+0x368>)
 800604a:	2040      	movs	r0, #64	@ 0x40
 800604c:	1812      	adds	r2, r2, r0
 800604e:	19d2      	adds	r2, r2, r7
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	188a      	adds	r2, r1, r2
 8006054:	18d3      	adds	r3, r2, r3
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	0019      	movs	r1, r3
 800605a:	4c36      	ldr	r4, [pc, #216]	@ (8006134 <FlashWrite+0x358>)
 800605c:	1823      	adds	r3, r4, r0
 800605e:	19db      	adds	r3, r3, r7
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2208      	movs	r2, #8
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4099      	lsls	r1, r3
 800606a:	000b      	movs	r3, r1
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	17db      	asrs	r3, r3, #31
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	4d2f      	ldr	r5, [pc, #188]	@ (8006130 <FlashWrite+0x354>)
 8006074:	0006      	movs	r6, r0
 8006076:	182b      	adds	r3, r5, r0
 8006078:	19db      	adds	r3, r3, r7
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	6838      	ldr	r0, [r7, #0]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	1812      	adds	r2, r2, r0
 8006084:	414b      	adcs	r3, r1
 8006086:	0029      	movs	r1, r5
 8006088:	1988      	adds	r0, r1, r6
 800608a:	19c0      	adds	r0, r0, r7
 800608c:	6002      	str	r2, [r0, #0]
 800608e:	6043      	str	r3, [r0, #4]
		if (--chunkI == 0) {
 8006090:	0030      	movs	r0, r6
 8006092:	19a3      	adds	r3, r4, r6
 8006094:	19db      	adds	r3, r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3b01      	subs	r3, #1
 800609a:	1822      	adds	r2, r4, r0
 800609c:	19d2      	adds	r2, r2, r7
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	1823      	adds	r3, r4, r0
 80060a2:	19db      	adds	r3, r3, r7
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11f      	bne.n	80060ea <FlashWrite+0x30e>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, xyz);
 80060aa:	000d      	movs	r5, r1
 80060ac:	180b      	adds	r3, r1, r0
 80060ae:	19db      	adds	r3, r3, r7
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4e1a      	ldr	r6, [pc, #104]	@ (8006120 <FlashWrite+0x344>)
 80060b6:	1831      	adds	r1, r6, r0
 80060b8:	19c9      	adds	r1, r1, r7
 80060ba:	6809      	ldr	r1, [r1, #0]
 80060bc:	2001      	movs	r0, #1
 80060be:	f002 fded 	bl	8008c9c <HAL_FLASH_Program>
			chunkI = 8;
 80060c2:	2308      	movs	r3, #8
 80060c4:	2140      	movs	r1, #64	@ 0x40
 80060c6:	1862      	adds	r2, r4, r1
 80060c8:	19d2      	adds	r2, r2, r7
 80060ca:	6013      	str	r3, [r2, #0]
			xyz = 0;
 80060cc:	2200      	movs	r2, #0
 80060ce:	2300      	movs	r3, #0
 80060d0:	0008      	movs	r0, r1
 80060d2:	1869      	adds	r1, r5, r1
 80060d4:	19c9      	adds	r1, r1, r7
 80060d6:	600a      	str	r2, [r1, #0]
 80060d8:	604b      	str	r3, [r1, #4]
			Address += 8;
 80060da:	0002      	movs	r2, r0
 80060dc:	18b3      	adds	r3, r6, r2
 80060de:	19db      	adds	r3, r3, r7
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3308      	adds	r3, #8
 80060e4:	18b2      	adds	r2, r6, r2
 80060e6:	19d2      	adds	r2, r2, r7
 80060e8:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 80060ea:	4a16      	ldr	r2, [pc, #88]	@ (8006144 <FlashWrite+0x368>)
 80060ec:	2140      	movs	r1, #64	@ 0x40
 80060ee:	1853      	adds	r3, r2, r1
 80060f0:	19db      	adds	r3, r3, r7
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	1852      	adds	r2, r2, r1
 80060f8:	19d2      	adds	r2, r2, r7
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	4b11      	ldr	r3, [pc, #68]	@ (8006144 <FlashWrite+0x368>)
 80060fe:	2140      	movs	r1, #64	@ 0x40
 8006100:	185b      	adds	r3, r3, r1
 8006102:	19db      	adds	r3, r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b1f      	cmp	r3, #31
 8006108:	dd9b      	ble.n	8006042 <FlashWrite+0x266>
		}
	}
	for (int flashI = 0; flashI < 32; flashI++) {
 800610a:	2300      	movs	r3, #0
 800610c:	4a0e      	ldr	r2, [pc, #56]	@ (8006148 <FlashWrite+0x36c>)
 800610e:	1852      	adds	r2, r2, r1
 8006110:	19d2      	adds	r2, r2, r7
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e065      	b.n	80061e2 <FlashWrite+0x406>
 8006116:	46c0      	nop			@ (mov r8, r8)
 8006118:	ffffee14 	.word	0xffffee14
 800611c:	0803f800 	.word	0x0803f800
 8006120:	000011a4 	.word	0x000011a4
 8006124:	fffffdf4 	.word	0xfffffdf4
 8006128:	000011a8 	.word	0x000011a8
 800612c:	08011aa4 	.word	0x08011aa4
 8006130:	00001198 	.word	0x00001198
 8006134:	00001194 	.word	0x00001194
 8006138:	ffffee60 	.word	0xffffee60
 800613c:	12345678 	.word	0x12345678
 8006140:	200025b4 	.word	0x200025b4
 8006144:	00001190 	.word	0x00001190
 8006148:	0000118c 	.word	0x0000118c
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lat * 100000));
 800614c:	4b33      	ldr	r3, [pc, #204]	@ (800621c <FlashWrite+0x440>)
 800614e:	4d34      	ldr	r5, [pc, #208]	@ (8006220 <FlashWrite+0x444>)
 8006150:	2640      	movs	r6, #64	@ 0x40
 8006152:	19aa      	adds	r2, r5, r6
 8006154:	19d2      	adds	r2, r2, r7
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	3203      	adds	r2, #3
 800615a:	00d2      	lsls	r2, r2, #3
 800615c:	58d3      	ldr	r3, [r2, r3]
 800615e:	4931      	ldr	r1, [pc, #196]	@ (8006224 <FlashWrite+0x448>)
 8006160:	1c18      	adds	r0, r3, #0
 8006162:	f7fa ff15 	bl	8000f90 <__aeabi_fmul>
 8006166:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8006168:	1c18      	adds	r0, r3, #0
 800616a:	f7fa fa81 	bl	8000670 <__aeabi_f2ulz>
 800616e:	0002      	movs	r2, r0
 8006170:	000b      	movs	r3, r1
 8006172:	4c2d      	ldr	r4, [pc, #180]	@ (8006228 <FlashWrite+0x44c>)
 8006174:	19a1      	adds	r1, r4, r6
 8006176:	19c9      	adds	r1, r1, r7
 8006178:	6809      	ldr	r1, [r1, #0]
 800617a:	2001      	movs	r0, #1
 800617c:	f002 fd8e 	bl	8008c9c <HAL_FLASH_Program>
		Address += 8;
 8006180:	19a3      	adds	r3, r4, r6
 8006182:	19db      	adds	r3, r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3308      	adds	r3, #8
 8006188:	19a2      	adds	r2, r4, r6
 800618a:	19d2      	adds	r2, r2, r7
 800618c:	6013      	str	r3, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lon * 100000));
 800618e:	4a23      	ldr	r2, [pc, #140]	@ (800621c <FlashWrite+0x440>)
 8006190:	19ab      	adds	r3, r5, r6
 8006192:	19db      	adds	r3, r3, r7
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3303      	adds	r3, #3
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	18d3      	adds	r3, r2, r3
 800619c:	3304      	adds	r3, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4920      	ldr	r1, [pc, #128]	@ (8006224 <FlashWrite+0x448>)
 80061a2:	1c18      	adds	r0, r3, #0
 80061a4:	f7fa fef4 	bl	8000f90 <__aeabi_fmul>
 80061a8:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80061aa:	1c18      	adds	r0, r3, #0
 80061ac:	f7fa fa60 	bl	8000670 <__aeabi_f2ulz>
 80061b0:	0002      	movs	r2, r0
 80061b2:	000b      	movs	r3, r1
 80061b4:	19a1      	adds	r1, r4, r6
 80061b6:	19c9      	adds	r1, r1, r7
 80061b8:	6809      	ldr	r1, [r1, #0]
 80061ba:	2001      	movs	r0, #1
 80061bc:	f002 fd6e 	bl	8008c9c <HAL_FLASH_Program>
		Address += 8;
 80061c0:	0032      	movs	r2, r6
 80061c2:	19a3      	adds	r3, r4, r6
 80061c4:	19db      	adds	r3, r3, r7
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3308      	adds	r3, #8
 80061ca:	0016      	movs	r6, r2
 80061cc:	18a2      	adds	r2, r4, r2
 80061ce:	19d2      	adds	r2, r2, r7
 80061d0:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 80061d2:	0032      	movs	r2, r6
 80061d4:	18ab      	adds	r3, r5, r2
 80061d6:	19db      	adds	r3, r3, r7
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	18aa      	adds	r2, r5, r2
 80061de:	19d2      	adds	r2, r2, r7
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006220 <FlashWrite+0x444>)
 80061e4:	2040      	movs	r0, #64	@ 0x40
 80061e6:	181b      	adds	r3, r3, r0
 80061e8:	19db      	adds	r3, r3, r7
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b1f      	cmp	r3, #31
 80061ee:	ddad      	ble.n	800614c <FlashWrite+0x370>
	}
	Address = 0x0803F808;
 80061f0:	4b0e      	ldr	r3, [pc, #56]	@ (800622c <FlashWrite+0x450>)
 80061f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006228 <FlashWrite+0x44c>)
 80061f4:	1811      	adds	r1, r2, r0
 80061f6:	19c9      	adds	r1, r1, r7
 80061f8:	600b      	str	r3, [r1, #0]
	xyz = *(__IO uint64_t*) (Address);
 80061fa:	1813      	adds	r3, r2, r0
 80061fc:	19db      	adds	r3, r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	490a      	ldr	r1, [pc, #40]	@ (8006230 <FlashWrite+0x454>)
 8006206:	1809      	adds	r1, r1, r0
 8006208:	19c9      	adds	r1, r1, r7
 800620a:	600a      	str	r2, [r1, #0]
 800620c:	604b      	str	r3, [r1, #4]
	HAL_FLASH_Lock();
 800620e:	f002 fdb7 	bl	8008d80 <HAL_FLASH_Lock>
}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	46bd      	mov	sp, r7
 8006216:	4b07      	ldr	r3, [pc, #28]	@ (8006234 <FlashWrite+0x458>)
 8006218:	449d      	add	sp, r3
 800621a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800621c:	200025b4 	.word	0x200025b4
 8006220:	0000118c 	.word	0x0000118c
 8006224:	47c35000 	.word	0x47c35000
 8006228:	000011a4 	.word	0x000011a4
 800622c:	0803f808 	.word	0x0803f808
 8006230:	00001198 	.word	0x00001198
 8006234:	000011ec 	.word	0x000011ec

08006238 <AnimateCharacterSitting>:
void AnimateCharacterSitting(uint16_t palette[])
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af04      	add	r7, sp, #16
 800623e:	6078      	str	r0, [r7, #4]
	switch(game.evo)
 8006240:	4b1a      	ldr	r3, [pc, #104]	@ (80062ac <AnimateCharacterSitting+0x74>)
 8006242:	7c1b      	ldrb	r3, [r3, #16]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d01f      	beq.n	8006288 <AnimateCharacterSitting+0x50>
 8006248:	dc2b      	bgt.n	80062a2 <AnimateCharacterSitting+0x6a>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <AnimateCharacterSitting+0x1c>
 800624e:	2b01      	cmp	r3, #1
 8006250:	d00d      	beq.n	800626e <AnimateCharacterSitting+0x36>
		break;
	case 2:
		Animate(animAdultSitting,palette,0,30,30,80,80);
		break;
		}
}/*
 8006252:	e026      	b.n	80062a2 <AnimateCharacterSitting+0x6a>
		Animate(animEggSitting,palette,4,30,30,64,64);
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4816      	ldr	r0, [pc, #88]	@ (80062b0 <AnimateCharacterSitting+0x78>)
 8006258:	2340      	movs	r3, #64	@ 0x40
 800625a:	9302      	str	r3, [sp, #8]
 800625c:	2340      	movs	r3, #64	@ 0x40
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	231e      	movs	r3, #30
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	231e      	movs	r3, #30
 8006266:	2204      	movs	r2, #4
 8006268:	f000 f828 	bl	80062bc <Animate>
		break;
 800626c:	e019      	b.n	80062a2 <AnimateCharacterSitting+0x6a>
		Animate(animSitting,palette,1,30,30,64,64);
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4810      	ldr	r0, [pc, #64]	@ (80062b4 <AnimateCharacterSitting+0x7c>)
 8006272:	2340      	movs	r3, #64	@ 0x40
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	2340      	movs	r3, #64	@ 0x40
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	231e      	movs	r3, #30
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	231e      	movs	r3, #30
 8006280:	2201      	movs	r2, #1
 8006282:	f000 f81b 	bl	80062bc <Animate>
		break;
 8006286:	e00c      	b.n	80062a2 <AnimateCharacterSitting+0x6a>
		Animate(animAdultSitting,palette,0,30,30,80,80);
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	480b      	ldr	r0, [pc, #44]	@ (80062b8 <AnimateCharacterSitting+0x80>)
 800628c:	2350      	movs	r3, #80	@ 0x50
 800628e:	9302      	str	r3, [sp, #8]
 8006290:	2350      	movs	r3, #80	@ 0x50
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	231e      	movs	r3, #30
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	231e      	movs	r3, #30
 800629a:	2200      	movs	r2, #0
 800629c:	f000 f80e 	bl	80062bc <Animate>
		break;
 80062a0:	46c0      	nop			@ (mov r8, r8)
}/*
 80062a2:	46c0      	nop			@ (mov r8, r8)
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b002      	add	sp, #8
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	200025b4 	.word	0x200025b4
 80062b0:	20002550 	.word	0x20002550
 80062b4:	20002588 	.word	0x20002588
 80062b8:	200025a0 	.word	0x200025a0

080062bc <Animate>:
		Animate(animAdultWalking,palette,0,30,30,80,80);
		break;
		}
}*/
void Animate(struct Img *animation, uint16_t palette[], unsigned int frameCount, unsigned int xPos,
		unsigned int yPos, unsigned int xSize, unsigned int ySize) {
 80062bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062be:	b089      	sub	sp, #36	@ 0x24
 80062c0:	af04      	add	r7, sp, #16
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
	++currentFrame;
 80062ca:	4b18      	ldr	r3, [pc, #96]	@ (800632c <Animate+0x70>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	4b16      	ldr	r3, [pc, #88]	@ (800632c <Animate+0x70>)
 80062d2:	601a      	str	r2, [r3, #0]
	if (currentFrame > frameCount) {
 80062d4:	4b15      	ldr	r3, [pc, #84]	@ (800632c <Animate+0x70>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d202      	bcs.n	80062e4 <Animate+0x28>
		currentFrame = 0;
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <Animate+0x70>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, xPos, yPos, xSize, ySize,
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <Animate+0x70>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	18d3      	adds	r3, r2, r3
 80062ee:	681c      	ldr	r4, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	b29d      	uxth	r5, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f6:	b29e      	uxth	r6, r3
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	b299      	uxth	r1, r3
			animation[currentFrame].Size);
 8006300:	4b0a      	ldr	r3, [pc, #40]	@ (800632c <Animate+0x70>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	18c3      	adds	r3, r0, r3
 800630a:	685b      	ldr	r3, [r3, #4]
	drawImage(animation[currentFrame].Body, palette, xPos, yPos, xSize, ySize,
 800630c:	b29b      	uxth	r3, r3
 800630e:	68b8      	ldr	r0, [r7, #8]
 8006310:	9302      	str	r3, [sp, #8]
 8006312:	9101      	str	r1, [sp, #4]
 8006314:	9200      	str	r2, [sp, #0]
 8006316:	0033      	movs	r3, r6
 8006318:	002a      	movs	r2, r5
 800631a:	0001      	movs	r1, r0
 800631c:	0020      	movs	r0, r4
 800631e:	f7fd fdd7 	bl	8003ed0 <drawImage>
	return;
 8006322:	46c0      	nop			@ (mov r8, r8)
}
 8006324:	46bd      	mov	sp, r7
 8006326:	b005      	add	sp, #20
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	200025b0 	.word	0x200025b0

08006330 <_ADXL343_ReadReg8>:

int _ADXL343_ReadReg8(unsigned char TargetRegister, unsigned char *TargetValue,
		uint8_t size) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af02      	add	r7, sp, #8
 8006336:	6039      	str	r1, [r7, #0]
 8006338:	0011      	movs	r1, r2
 800633a:	1dfb      	adds	r3, r7, #7
 800633c:	1c02      	adds	r2, r0, #0
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	1dbb      	adds	r3, r7, #6
 8006342:	1c0a      	adds	r2, r1, #0
 8006344:	701a      	strb	r2, [r3, #0]
	if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, &TargetRegister, 1, 1000)
 8006346:	1dfa      	adds	r2, r7, #7
 8006348:	4811      	ldr	r0, [pc, #68]	@ (8006390 <_ADXL343_ReadReg8+0x60>)
 800634a:	23fa      	movs	r3, #250	@ 0xfa
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2301      	movs	r3, #1
 8006352:	2128      	movs	r1, #40	@ 0x28
 8006354:	f003 f8d4 	bl	8009500 <HAL_I2C_Master_Transmit>
 8006358:	1e03      	subs	r3, r0, #0
 800635a:	d002      	beq.n	8006362 <_ADXL343_ReadReg8+0x32>
			== HAL_OK)
		return -1;
 800635c:	2301      	movs	r3, #1
 800635e:	425b      	negs	r3, r3
 8006360:	e011      	b.n	8006386 <_ADXL343_ReadReg8+0x56>

	if (!HAL_I2C_Master_Receive(&hi2c1, 0x14 << 1, TargetValue, size, 1000)
 8006362:	1dbb      	adds	r3, r7, #6
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	b299      	uxth	r1, r3
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	4809      	ldr	r0, [pc, #36]	@ (8006390 <_ADXL343_ReadReg8+0x60>)
 800636c:	23fa      	movs	r3, #250	@ 0xfa
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	000b      	movs	r3, r1
 8006374:	2128      	movs	r1, #40	@ 0x28
 8006376:	f003 f9ed 	bl	8009754 <HAL_I2C_Master_Receive>
 800637a:	1e03      	subs	r3, r0, #0
 800637c:	d002      	beq.n	8006384 <_ADXL343_ReadReg8+0x54>
			== HAL_OK)
		return -2;
 800637e:	2302      	movs	r3, #2
 8006380:	425b      	negs	r3, r3
 8006382:	e000      	b.n	8006386 <_ADXL343_ReadReg8+0x56>

	return 0;
 8006384:	2300      	movs	r3, #0
}
 8006386:	0018      	movs	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	b002      	add	sp, #8
 800638c:	bd80      	pop	{r7, pc}
 800638e:	46c0      	nop			@ (mov r8, r8)
 8006390:	20003598 	.word	0x20003598

08006394 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8(unsigned char TargetRegister, unsigned char TargetValue) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af02      	add	r7, sp, #8
 800639a:	0002      	movs	r2, r0
 800639c:	1dfb      	adds	r3, r7, #7
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	1dbb      	adds	r3, r7, #6
 80063a2:	1c0a      	adds	r2, r1, #0
 80063a4:	701a      	strb	r2, [r3, #0]
	unsigned char buff[2];
	buff[0] = TargetRegister;
 80063a6:	210c      	movs	r1, #12
 80063a8:	187b      	adds	r3, r7, r1
 80063aa:	1dfa      	adds	r2, r7, #7
 80063ac:	7812      	ldrb	r2, [r2, #0]
 80063ae:	701a      	strb	r2, [r3, #0]
	buff[1] = TargetValue;
 80063b0:	187b      	adds	r3, r7, r1
 80063b2:	1dba      	adds	r2, r7, #6
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, buff, 2, 1000) == HAL_OK)
 80063b8:	187a      	adds	r2, r7, r1
 80063ba:	4809      	ldr	r0, [pc, #36]	@ (80063e0 <_ADXL343_WriteReg8+0x4c>)
 80063bc:	23fa      	movs	r3, #250	@ 0xfa
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	2302      	movs	r3, #2
 80063c4:	2128      	movs	r1, #40	@ 0x28
 80063c6:	f003 f89b 	bl	8009500 <HAL_I2C_Master_Transmit>
 80063ca:	1e03      	subs	r3, r0, #0
 80063cc:	d102      	bne.n	80063d4 <_ADXL343_WriteReg8+0x40>
		return -1;
 80063ce:	2301      	movs	r3, #1
 80063d0:	425b      	negs	r3, r3
 80063d2:	e000      	b.n	80063d6 <_ADXL343_WriteReg8+0x42>

	return 0;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	0018      	movs	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	b004      	add	sp, #16
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	46c0      	nop			@ (mov r8, r8)
 80063e0:	20003598 	.word	0x20003598

080063e4 <SendData>:
void SendData() {
 80063e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e6:	46c6      	mov	lr, r8
 80063e8:	b500      	push	{lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer,
 80063ee:	4a59      	ldr	r2, [pc, #356]	@ (8006554 <SendData+0x170>)
 80063f0:	238c      	movs	r3, #140	@ 0x8c
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	58d4      	ldr	r4, [r2, r3]
 80063f6:	4a57      	ldr	r2, [pc, #348]	@ (8006554 <SendData+0x170>)
 80063f8:	238e      	movs	r3, #142	@ 0x8e
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	58d5      	ldr	r5, [r2, r3]
 80063fe:	4a55      	ldr	r2, [pc, #340]	@ (8006554 <SendData+0x170>)
 8006400:	2390      	movs	r3, #144	@ 0x90
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	58d3      	ldr	r3, [r2, r3]
 8006406:	4698      	mov	r8, r3
			"(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r",
			game.allSteps, game.weeklySteps, game.stepsToday, game.uid,
			game.mood, game.dailyGoal, game.evo);
 8006408:	4a52      	ldr	r2, [pc, #328]	@ (8006554 <SendData+0x170>)
 800640a:	7c52      	ldrb	r2, [r2, #17]
	sprintf(sendBuffer,
 800640c:	0016      	movs	r6, r2
 800640e:	4951      	ldr	r1, [pc, #324]	@ (8006554 <SendData+0x170>)
 8006410:	2292      	movs	r2, #146	@ 0x92
 8006412:	0052      	lsls	r2, r2, #1
 8006414:	588a      	ldr	r2, [r1, r2]
			game.mood, game.dailyGoal, game.evo);
 8006416:	494f      	ldr	r1, [pc, #316]	@ (8006554 <SendData+0x170>)
 8006418:	7c09      	ldrb	r1, [r1, #16]
	sprintf(sendBuffer,
 800641a:	468c      	mov	ip, r1
 800641c:	494e      	ldr	r1, [pc, #312]	@ (8006558 <SendData+0x174>)
 800641e:	484f      	ldr	r0, [pc, #316]	@ (800655c <SendData+0x178>)
 8006420:	4663      	mov	r3, ip
 8006422:	9304      	str	r3, [sp, #16]
 8006424:	9203      	str	r2, [sp, #12]
 8006426:	9602      	str	r6, [sp, #8]
 8006428:	4a4d      	ldr	r2, [pc, #308]	@ (8006560 <SendData+0x17c>)
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	4643      	mov	r3, r8
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	002b      	movs	r3, r5
 8006432:	0022      	movs	r2, r4
 8006434:	f008 fef2 	bl	800f21c <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8006438:	4b48      	ldr	r3, [pc, #288]	@ (800655c <SendData+0x178>)
 800643a:	0018      	movs	r0, r3
 800643c:	f7f9 fe6e 	bl	800011c <strlen>
 8006440:	0003      	movs	r3, r0
 8006442:	b29a      	uxth	r2, r3
 8006444:	4945      	ldr	r1, [pc, #276]	@ (800655c <SendData+0x178>)
 8006446:	4847      	ldr	r0, [pc, #284]	@ (8006564 <SendData+0x180>)
 8006448:	23c8      	movs	r3, #200	@ 0xc8
 800644a:	f006 fe97 	bl	800d17c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 800644e:	2300      	movs	r3, #0
 8006450:	607b      	str	r3, [r7, #4]
 8006452:	e072      	b.n	800653a <SendData+0x156>
		HAL_Delay(5);
 8006454:	2005      	movs	r0, #5
 8006456:	f002 fb09 	bl	8008a6c <HAL_Delay>
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 800645a:	2300      	movs	r3, #0
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	e007      	b.n	8006470 <SendData+0x8c>
			sendBuffer[clrIndex] = 0;
 8006460:	4a3e      	ldr	r2, [pc, #248]	@ (800655c <SendData+0x178>)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	18d3      	adds	r3, r2, r3
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	23c8      	movs	r3, #200	@ 0xc8
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	429a      	cmp	r2, r3
 8006478:	d3f2      	bcc.n	8006460 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
				((int) game.positions[posIndex].lat),
 800647a:	4b36      	ldr	r3, [pc, #216]	@ (8006554 <SendData+0x170>)
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	3203      	adds	r2, #3
 8006480:	00d2      	lsls	r2, r2, #3
 8006482:	58d3      	ldr	r3, [r2, r3]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006484:	1c18      	adds	r0, r3, #0
 8006486:	f7fb f865 	bl	8001554 <__aeabi_f2iz>
 800648a:	0006      	movs	r6, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lat,
 800648c:	4b31      	ldr	r3, [pc, #196]	@ (8006554 <SendData+0x170>)
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	3203      	adds	r2, #3
 8006492:	00d2      	lsls	r2, r2, #3
 8006494:	58d3      	ldr	r3, [r2, r3]
 8006496:	1c18      	adds	r0, r3, #0
 8006498:	f7fc ffc6 	bl	8003428 <__aeabi_f2d>
 800649c:	2200      	movs	r2, #0
 800649e:	4b32      	ldr	r3, [pc, #200]	@ (8006568 <SendData+0x184>)
 80064a0:	f00b f82e 	bl	8011500 <fmod>
								(double) 1)) * 10000)),
 80064a4:	2200      	movs	r2, #0
 80064a6:	4b31      	ldr	r3, [pc, #196]	@ (800656c <SendData+0x188>)
 80064a8:	f7fc f8aa 	bl	8002600 <__aeabi_dmul>
 80064ac:	0002      	movs	r2, r0
 80064ae:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lat,
 80064b0:	0010      	movs	r0, r2
 80064b2:	0019      	movs	r1, r3
 80064b4:	f7fc ff2a 	bl	800330c <__aeabi_d2iz>
 80064b8:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 80064ba:	17da      	asrs	r2, r3, #31
 80064bc:	189c      	adds	r4, r3, r2
 80064be:	4054      	eors	r4, r2
				((int) game.positions[posIndex].lon),
 80064c0:	4a24      	ldr	r2, [pc, #144]	@ (8006554 <SendData+0x170>)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3303      	adds	r3, #3
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	18d3      	adds	r3, r2, r3
 80064ca:	3304      	adds	r3, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 80064ce:	1c18      	adds	r0, r3, #0
 80064d0:	f7fb f840 	bl	8001554 <__aeabi_f2iz>
 80064d4:	0005      	movs	r5, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lon,
 80064d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006554 <SendData+0x170>)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3303      	adds	r3, #3
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	18d3      	adds	r3, r2, r3
 80064e0:	3304      	adds	r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	1c18      	adds	r0, r3, #0
 80064e6:	f7fc ff9f 	bl	8003428 <__aeabi_f2d>
 80064ea:	2200      	movs	r2, #0
 80064ec:	4b1e      	ldr	r3, [pc, #120]	@ (8006568 <SendData+0x184>)
 80064ee:	f00b f807 	bl	8011500 <fmod>
								(double) 1)) * 10000)));
 80064f2:	2200      	movs	r2, #0
 80064f4:	4b1d      	ldr	r3, [pc, #116]	@ (800656c <SendData+0x188>)
 80064f6:	f7fc f883 	bl	8002600 <__aeabi_dmul>
 80064fa:	0002      	movs	r2, r0
 80064fc:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lon,
 80064fe:	0010      	movs	r0, r2
 8006500:	0019      	movs	r1, r3
 8006502:	f7fc ff03 	bl	800330c <__aeabi_d2iz>
 8006506:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006508:	17da      	asrs	r2, r3, #31
 800650a:	189b      	adds	r3, r3, r2
 800650c:	4053      	eors	r3, r2
 800650e:	4918      	ldr	r1, [pc, #96]	@ (8006570 <SendData+0x18c>)
 8006510:	4812      	ldr	r0, [pc, #72]	@ (800655c <SendData+0x178>)
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	9500      	str	r5, [sp, #0]
 8006516:	0023      	movs	r3, r4
 8006518:	0032      	movs	r2, r6
 800651a:	f008 fe7f 	bl	800f21c <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 800651e:	4b0f      	ldr	r3, [pc, #60]	@ (800655c <SendData+0x178>)
 8006520:	0018      	movs	r0, r3
 8006522:	f7f9 fdfb 	bl	800011c <strlen>
 8006526:	0003      	movs	r3, r0
 8006528:	b29a      	uxth	r2, r3
 800652a:	490c      	ldr	r1, [pc, #48]	@ (800655c <SendData+0x178>)
 800652c:	480d      	ldr	r0, [pc, #52]	@ (8006564 <SendData+0x180>)
 800652e:	23c8      	movs	r3, #200	@ 0xc8
 8006530:	f006 fe24 	bl	800d17c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3301      	adds	r3, #1
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <SendData+0x170>)
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d387      	bcc.n	8006454 <SendData+0x70>

	}
}
 8006544:	46c0      	nop			@ (mov r8, r8)
 8006546:	46c0      	nop			@ (mov r8, r8)
 8006548:	46bd      	mov	sp, r7
 800654a:	b002      	add	sp, #8
 800654c:	bc80      	pop	{r7}
 800654e:	46b8      	mov	r8, r7
 8006550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	200025b4 	.word	0x200025b4
 8006558:	08011ad4 	.word	0x08011ad4
 800655c:	200027dc 	.word	0x200027dc
 8006560:	200026e0 	.word	0x200026e0
 8006564:	2000375c 	.word	0x2000375c
 8006568:	3ff00000 	.word	0x3ff00000
 800656c:	40c38800 	.word	0x40c38800
 8006570:	08011b54 	.word	0x08011b54

08006574 <ReceiveData>:
void ReceiveData() {
 8006574:	b5b0      	push	{r4, r5, r7, lr}
 8006576:	4cda      	ldr	r4, [pc, #872]	@ (80068e0 <ReceiveData+0x36c>)
 8006578:	44a5      	add	sp, r4
 800657a:	af00      	add	r7, sp, #0
	int rI = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	4ad9      	ldr	r2, [pc, #868]	@ (80068e4 <ReceiveData+0x370>)
 8006580:	18ba      	adds	r2, r7, r2
 8006582:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 8006584:	e197      	b.n	80068b6 <ReceiveData+0x342>
		if (syncBuffer[rI] && syncBuffer[rI] == '\r') {
 8006586:	4ad8      	ldr	r2, [pc, #864]	@ (80068e8 <ReceiveData+0x374>)
 8006588:	49d6      	ldr	r1, [pc, #856]	@ (80068e4 <ReceiveData+0x370>)
 800658a:	187b      	adds	r3, r7, r1
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	18d3      	adds	r3, r2, r3
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d100      	bne.n	8006598 <ReceiveData+0x24>
 8006596:	e188      	b.n	80068aa <ReceiveData+0x336>
 8006598:	4ad3      	ldr	r2, [pc, #844]	@ (80068e8 <ReceiveData+0x374>)
 800659a:	187b      	adds	r3, r7, r1
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	18d3      	adds	r3, r2, r3
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b0d      	cmp	r3, #13
 80065a4:	d000      	beq.n	80065a8 <ReceiveData+0x34>
 80065a6:	e180      	b.n	80068aa <ReceiveData+0x336>
			enum {
				MAX_FIELDS = 255
			};
			json_t pool[MAX_FIELDS];
			json_t const *parent = json_create(syncBuffer, pool, MAX_FIELDS);
 80065a8:	0039      	movs	r1, r7
 80065aa:	4bcf      	ldr	r3, [pc, #828]	@ (80068e8 <ReceiveData+0x374>)
 80065ac:	22ff      	movs	r2, #255	@ 0xff
 80065ae:	0018      	movs	r0, r3
 80065b0:	f001 fcfc 	bl	8007fac <json_create>
 80065b4:	0003      	movs	r3, r0
 80065b6:	49cd      	ldr	r1, [pc, #820]	@ (80068ec <ReceiveData+0x378>)
 80065b8:	187a      	adds	r2, r7, r1
 80065ba:	6013      	str	r3, [r2, #0]
			if (parent) {
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d100      	bne.n	80065c6 <ReceiveData+0x52>
 80065c4:	e152      	b.n	800686c <ReceiveData+0x2f8>
				int locI = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	4ac9      	ldr	r2, [pc, #804]	@ (80068f0 <ReceiveData+0x37c>)
 80065ca:	18ba      	adds	r2, r7, r2
 80065cc:	6013      	str	r3, [r2, #0]
				struct latLon tempLoc;
				char const *uidRxStr = json_getPropertyValue(parent, "uid");
 80065ce:	4ac9      	ldr	r2, [pc, #804]	@ (80068f4 <ReceiveData+0x380>)
 80065d0:	187b      	adds	r3, r7, r1
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	0011      	movs	r1, r2
 80065d6:	0018      	movs	r0, r3
 80065d8:	f001 fc84 	bl	8007ee4 <json_getPropertyValue>
 80065dc:	0003      	movs	r3, r0
 80065de:	4ac6      	ldr	r2, [pc, #792]	@ (80068f8 <ReceiveData+0x384>)
 80065e0:	18ba      	adds	r2, r7, r2
 80065e2:	6013      	str	r3, [r2, #0]
				//HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 80065e4:	2300      	movs	r3, #0
 80065e6:	4ac5      	ldr	r2, [pc, #788]	@ (80068fc <ReceiveData+0x388>)
 80065e8:	18ba      	adds	r2, r7, r2
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	e015      	b.n	800661a <ReceiveData+0xa6>
					game.uid[strI] = uidRxStr[strI];
 80065ee:	4cc3      	ldr	r4, [pc, #780]	@ (80068fc <ReceiveData+0x388>)
 80065f0:	193b      	adds	r3, r7, r4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4ac0      	ldr	r2, [pc, #768]	@ (80068f8 <ReceiveData+0x384>)
 80065f6:	18ba      	adds	r2, r7, r2
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	18d3      	adds	r3, r2, r3
 80065fc:	7818      	ldrb	r0, [r3, #0]
 80065fe:	49c0      	ldr	r1, [pc, #768]	@ (8006900 <ReceiveData+0x38c>)
 8006600:	2396      	movs	r3, #150	@ 0x96
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	193a      	adds	r2, r7, r4
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	188a      	adds	r2, r1, r2
 800660a:	18d3      	adds	r3, r2, r3
 800660c:	1c02      	adds	r2, r0, #0
 800660e:	701a      	strb	r2, [r3, #0]
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8006610:	193b      	adds	r3, r7, r4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	193a      	adds	r2, r7, r4
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4bb7      	ldr	r3, [pc, #732]	@ (80068f8 <ReceiveData+0x384>)
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	0018      	movs	r0, r3
 8006622:	f7f9 fd7b 	bl	800011c <strlen>
 8006626:	0002      	movs	r2, r0
 8006628:	4bb4      	ldr	r3, [pc, #720]	@ (80068fc <ReceiveData+0x388>)
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d8dd      	bhi.n	80065ee <ReceiveData+0x7a>
				game.allSteps = (unsigned int) json_getInteger(
 8006632:	4ab4      	ldr	r2, [pc, #720]	@ (8006904 <ReceiveData+0x390>)
 8006634:	4cad      	ldr	r4, [pc, #692]	@ (80068ec <ReceiveData+0x378>)
 8006636:	193b      	adds	r3, r7, r4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	0011      	movs	r1, r2
 800663c:	0018      	movs	r0, r3
 800663e:	f001 fc2e 	bl	8007e9e <json_getProperty>
 8006642:	0003      	movs	r3, r0
 8006644:	0018      	movs	r0, r3
 8006646:	f7fe f809 	bl	800465c <json_getInteger>
 800664a:	0002      	movs	r2, r0
 800664c:	000b      	movs	r3, r1
 800664e:	0011      	movs	r1, r2
 8006650:	4aab      	ldr	r2, [pc, #684]	@ (8006900 <ReceiveData+0x38c>)
 8006652:	238c      	movs	r3, #140	@ 0x8c
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "lifeSteps"));
				game.dailyGoal = (unsigned int) json_getInteger(
 8006658:	4aab      	ldr	r2, [pc, #684]	@ (8006908 <ReceiveData+0x394>)
 800665a:	193b      	adds	r3, r7, r4
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	0011      	movs	r1, r2
 8006660:	0018      	movs	r0, r3
 8006662:	f001 fc1c 	bl	8007e9e <json_getProperty>
 8006666:	0003      	movs	r3, r0
 8006668:	0018      	movs	r0, r3
 800666a:	f7fd fff7 	bl	800465c <json_getInteger>
 800666e:	0002      	movs	r2, r0
 8006670:	000b      	movs	r3, r1
 8006672:	0011      	movs	r1, r2
 8006674:	4aa2      	ldr	r2, [pc, #648]	@ (8006900 <ReceiveData+0x38c>)
 8006676:	2392      	movs	r3, #146	@ 0x92
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "difficulty"));
				game.evo = (unsigned int) json_getInteger(
 800667c:	4aa3      	ldr	r2, [pc, #652]	@ (800690c <ReceiveData+0x398>)
 800667e:	193b      	adds	r3, r7, r4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	0011      	movs	r1, r2
 8006684:	0018      	movs	r0, r3
 8006686:	f001 fc0a 	bl	8007e9e <json_getProperty>
 800668a:	0003      	movs	r3, r0
 800668c:	0018      	movs	r0, r3
 800668e:	f7fd ffe5 	bl	800465c <json_getInteger>
 8006692:	0002      	movs	r2, r0
 8006694:	000b      	movs	r3, r1
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	4b99      	ldr	r3, [pc, #612]	@ (8006900 <ReceiveData+0x38c>)
 800669a:	741a      	strb	r2, [r3, #16]
						json_getProperty(parent, "evolution"));
				game.mood = (unsigned int) json_getInteger(
 800669c:	4a9c      	ldr	r2, [pc, #624]	@ (8006910 <ReceiveData+0x39c>)
 800669e:	193b      	adds	r3, r7, r4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	0011      	movs	r1, r2
 80066a4:	0018      	movs	r0, r3
 80066a6:	f001 fbfa 	bl	8007e9e <json_getProperty>
 80066aa:	0003      	movs	r3, r0
 80066ac:	0018      	movs	r0, r3
 80066ae:	f7fd ffd5 	bl	800465c <json_getInteger>
 80066b2:	0002      	movs	r2, r0
 80066b4:	000b      	movs	r3, r1
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	4b91      	ldr	r3, [pc, #580]	@ (8006900 <ReceiveData+0x38c>)
 80066ba:	745a      	strb	r2, [r3, #17]
						json_getProperty(parent, "friendship"));
				game.stepsToday = (unsigned int) json_getInteger(
 80066bc:	4a95      	ldr	r2, [pc, #596]	@ (8006914 <ReceiveData+0x3a0>)
 80066be:	193b      	adds	r3, r7, r4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f001 fbea 	bl	8007e9e <json_getProperty>
 80066ca:	0003      	movs	r3, r0
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7fd ffc5 	bl	800465c <json_getInteger>
 80066d2:	0002      	movs	r2, r0
 80066d4:	000b      	movs	r3, r1
 80066d6:	0011      	movs	r1, r2
 80066d8:	4a89      	ldr	r2, [pc, #548]	@ (8006900 <ReceiveData+0x38c>)
 80066da:	2390      	movs	r3, #144	@ 0x90
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "dailySteps"));
				game.weeklySteps = (unsigned int) json_getInteger(
 80066e0:	4a8d      	ldr	r2, [pc, #564]	@ (8006918 <ReceiveData+0x3a4>)
 80066e2:	193b      	adds	r3, r7, r4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	0011      	movs	r1, r2
 80066e8:	0018      	movs	r0, r3
 80066ea:	f001 fbd8 	bl	8007e9e <json_getProperty>
 80066ee:	0003      	movs	r3, r0
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7fd ffb3 	bl	800465c <json_getInteger>
 80066f6:	0002      	movs	r2, r0
 80066f8:	000b      	movs	r3, r1
 80066fa:	0011      	movs	r1, r2
 80066fc:	4a80      	ldr	r2, [pc, #512]	@ (8006900 <ReceiveData+0x38c>)
 80066fe:	238e      	movs	r3, #142	@ 0x8e
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "weeklySteps"));
				json_t const *location;
				json_t const *locations = json_getProperty(parent, "locations");
 8006704:	4a85      	ldr	r2, [pc, #532]	@ (800691c <ReceiveData+0x3a8>)
 8006706:	193b      	adds	r3, r7, r4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	0011      	movs	r1, r2
 800670c:	0018      	movs	r0, r3
 800670e:	f001 fbc6 	bl	8007e9e <json_getProperty>
 8006712:	0003      	movs	r3, r0
 8006714:	4a82      	ldr	r2, [pc, #520]	@ (8006920 <ReceiveData+0x3ac>)
 8006716:	18b9      	adds	r1, r7, r2
 8006718:	600b      	str	r3, [r1, #0]
				for (location = json_getChild(locations); location; location =
 800671a:	18bb      	adds	r3, r7, r2
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	0018      	movs	r0, r3
 8006720:	f7fd ff92 	bl	8004648 <json_getChild>
 8006724:	0003      	movs	r3, r0
 8006726:	22a0      	movs	r2, #160	@ 0xa0
 8006728:	0152      	lsls	r2, r2, #5
 800672a:	18ba      	adds	r2, r7, r2
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e07a      	b.n	8006826 <ReceiveData+0x2b2>
						json_getSibling(location)) {
					tempLoc.lat = (float) json_getReal(
 8006730:	4a7c      	ldr	r2, [pc, #496]	@ (8006924 <ReceiveData+0x3b0>)
 8006732:	25a0      	movs	r5, #160	@ 0xa0
 8006734:	016d      	lsls	r5, r5, #5
 8006736:	197b      	adds	r3, r7, r5
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	0011      	movs	r1, r2
 800673c:	0018      	movs	r0, r3
 800673e:	f001 fbae 	bl	8007e9e <json_getProperty>
 8006742:	0003      	movs	r3, r0
 8006744:	0018      	movs	r0, r3
 8006746:	f7fd ff9b 	bl	8004680 <json_getReal>
 800674a:	0002      	movs	r2, r0
 800674c:	000b      	movs	r3, r1
 800674e:	0010      	movs	r0, r2
 8006750:	0019      	movs	r1, r3
 8006752:	f7fc feb1 	bl	80034b8 <__aeabi_d2f>
 8006756:	1c02      	adds	r2, r0, #0
 8006758:	4c73      	ldr	r4, [pc, #460]	@ (8006928 <ReceiveData+0x3b4>)
 800675a:	193b      	adds	r3, r7, r4
 800675c:	601a      	str	r2, [r3, #0]
							json_getProperty(location, "lat"));
					tempLoc.lon = (float) json_getReal(
 800675e:	4a73      	ldr	r2, [pc, #460]	@ (800692c <ReceiveData+0x3b8>)
 8006760:	197b      	adds	r3, r7, r5
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	0011      	movs	r1, r2
 8006766:	0018      	movs	r0, r3
 8006768:	f001 fb99 	bl	8007e9e <json_getProperty>
 800676c:	0003      	movs	r3, r0
 800676e:	0018      	movs	r0, r3
 8006770:	f7fd ff86 	bl	8004680 <json_getReal>
 8006774:	0002      	movs	r2, r0
 8006776:	000b      	movs	r3, r1
 8006778:	0010      	movs	r0, r2
 800677a:	0019      	movs	r1, r3
 800677c:	f7fc fe9c 	bl	80034b8 <__aeabi_d2f>
 8006780:	1c02      	adds	r2, r0, #0
 8006782:	193b      	adds	r3, r7, r4
 8006784:	605a      	str	r2, [r3, #4]
							json_getProperty(location, "lng"));
					if (fabs(tempLoc.lat) < .00001) {
 8006786:	193b      	adds	r3, r7, r4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	1c18      	adds	r0, r3, #0
 8006790:	f7fc fe4a 	bl	8003428 <__aeabi_f2d>
 8006794:	4a66      	ldr	r2, [pc, #408]	@ (8006930 <ReceiveData+0x3bc>)
 8006796:	4b67      	ldr	r3, [pc, #412]	@ (8006934 <ReceiveData+0x3c0>)
 8006798:	f7f9 fe68 	bl	800046c <__aeabi_dcmplt>
 800679c:	1e03      	subs	r3, r0, #0
 800679e:	d027      	beq.n	80067f0 <ReceiveData+0x27c>

						tempLoc.lat = (float) json_getReal(
 80067a0:	4a65      	ldr	r2, [pc, #404]	@ (8006938 <ReceiveData+0x3c4>)
 80067a2:	197b      	adds	r3, r7, r5
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	0011      	movs	r1, r2
 80067a8:	0018      	movs	r0, r3
 80067aa:	f001 fb78 	bl	8007e9e <json_getProperty>
 80067ae:	0003      	movs	r3, r0
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fd ff65 	bl	8004680 <json_getReal>
 80067b6:	0002      	movs	r2, r0
 80067b8:	000b      	movs	r3, r1
 80067ba:	0010      	movs	r0, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	f7fc fe7b 	bl	80034b8 <__aeabi_d2f>
 80067c2:	1c02      	adds	r2, r0, #0
 80067c4:	193b      	adds	r3, r7, r4
 80067c6:	601a      	str	r2, [r3, #0]
								json_getProperty(location, "Lat"));
						tempLoc.lon = (float) json_getReal(
 80067c8:	4a5c      	ldr	r2, [pc, #368]	@ (800693c <ReceiveData+0x3c8>)
 80067ca:	197b      	adds	r3, r7, r5
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	0011      	movs	r1, r2
 80067d0:	0018      	movs	r0, r3
 80067d2:	f001 fb64 	bl	8007e9e <json_getProperty>
 80067d6:	0003      	movs	r3, r0
 80067d8:	0018      	movs	r0, r3
 80067da:	f7fd ff51 	bl	8004680 <json_getReal>
 80067de:	0002      	movs	r2, r0
 80067e0:	000b      	movs	r3, r1
 80067e2:	0010      	movs	r0, r2
 80067e4:	0019      	movs	r1, r3
 80067e6:	f7fc fe67 	bl	80034b8 <__aeabi_d2f>
 80067ea:	1c02      	adds	r2, r0, #0
 80067ec:	193b      	adds	r3, r7, r4
 80067ee:	605a      	str	r2, [r3, #4]
								json_getProperty(location, "Lng"));
					}
					game.positions[locI] = tempLoc;
 80067f0:	4a43      	ldr	r2, [pc, #268]	@ (8006900 <ReceiveData+0x38c>)
 80067f2:	4c3f      	ldr	r4, [pc, #252]	@ (80068f0 <ReceiveData+0x37c>)
 80067f4:	193b      	adds	r3, r7, r4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3303      	adds	r3, #3
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	494a      	ldr	r1, [pc, #296]	@ (8006928 <ReceiveData+0x3b4>)
 80067fe:	1879      	adds	r1, r7, r1
 8006800:	18d3      	adds	r3, r2, r3
 8006802:	000a      	movs	r2, r1
 8006804:	ca03      	ldmia	r2!, {r0, r1}
 8006806:	c303      	stmia	r3!, {r0, r1}
					locI++;
 8006808:	193b      	adds	r3, r7, r4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	193a      	adds	r2, r7, r4
 8006810:	6013      	str	r3, [r2, #0]
						json_getSibling(location)) {
 8006812:	24a0      	movs	r4, #160	@ 0xa0
 8006814:	0164      	lsls	r4, r4, #5
 8006816:	193b      	adds	r3, r7, r4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	0018      	movs	r0, r3
 800681c:	f7fd ff0a 	bl	8004634 <json_getSibling>
 8006820:	0003      	movs	r3, r0
 8006822:	193a      	adds	r2, r7, r4
 8006824:	6013      	str	r3, [r2, #0]
				for (location = json_getChild(locations); location; location =
 8006826:	23a0      	movs	r3, #160	@ 0xa0
 8006828:	015b      	lsls	r3, r3, #5
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d000      	beq.n	8006834 <ReceiveData+0x2c0>
 8006832:	e77d      	b.n	8006730 <ReceiveData+0x1bc>
				}
				game.numLocations = locI;
 8006834:	4b2e      	ldr	r3, [pc, #184]	@ (80068f0 <ReceiveData+0x37c>)
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b31      	ldr	r3, [pc, #196]	@ (8006900 <ReceiveData+0x38c>)
 800683c:	615a      	str	r2, [r3, #20]
				for (locI = locI; locI < 32; locI++) {
 800683e:	e010      	b.n	8006862 <ReceiveData+0x2ee>
					memset(&game.positions[locI], 0,
 8006840:	4c2b      	ldr	r4, [pc, #172]	@ (80068f0 <ReceiveData+0x37c>)
 8006842:	193b      	adds	r3, r7, r4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3303      	adds	r3, #3
 8006848:	00da      	lsls	r2, r3, #3
 800684a:	4b2d      	ldr	r3, [pc, #180]	@ (8006900 <ReceiveData+0x38c>)
 800684c:	18d3      	adds	r3, r2, r3
 800684e:	2208      	movs	r2, #8
 8006850:	2100      	movs	r1, #0
 8006852:	0018      	movs	r0, r3
 8006854:	f008 fd4e 	bl	800f2f4 <memset>
				for (locI = locI; locI < 32; locI++) {
 8006858:	193b      	adds	r3, r7, r4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	193a      	adds	r2, r7, r4
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	4b23      	ldr	r3, [pc, #140]	@ (80068f0 <ReceiveData+0x37c>)
 8006864:	18fb      	adds	r3, r7, r3
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b1f      	cmp	r3, #31
 800686a:	dde9      	ble.n	8006840 <ReceiveData+0x2cc>
							sizeof(game.positions[locI]));
				}
				//SendData();
			}
			for (ii = 0; ii <= rI; ii++)
 800686c:	4b34      	ldr	r3, [pc, #208]	@ (8006940 <ReceiveData+0x3cc>)
 800686e:	2200      	movs	r2, #0
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	e00d      	b.n	8006890 <ReceiveData+0x31c>
				syncBuffer[ii] = 0;
 8006874:	4b32      	ldr	r3, [pc, #200]	@ (8006940 <ReceiveData+0x3cc>)
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	001a      	movs	r2, r3
 800687c:	4b1a      	ldr	r3, [pc, #104]	@ (80068e8 <ReceiveData+0x374>)
 800687e:	2100      	movs	r1, #0
 8006880:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= rI; ii++)
 8006882:	4b2f      	ldr	r3, [pc, #188]	@ (8006940 <ReceiveData+0x3cc>)
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29b      	uxth	r3, r3
 8006888:	3301      	adds	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	4b2c      	ldr	r3, [pc, #176]	@ (8006940 <ReceiveData+0x3cc>)
 800688e:	801a      	strh	r2, [r3, #0]
 8006890:	4b2b      	ldr	r3, [pc, #172]	@ (8006940 <ReceiveData+0x3cc>)
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	001a      	movs	r2, r3
 8006898:	4912      	ldr	r1, [pc, #72]	@ (80068e4 <ReceiveData+0x370>)
 800689a:	187b      	adds	r3, r7, r1
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4293      	cmp	r3, r2
 80068a0:	dae8      	bge.n	8006874 <ReceiveData+0x300>
			rI = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	187a      	adds	r2, r7, r1
 80068a6:	6013      	str	r3, [r2, #0]
			break;
 80068a8:	e014      	b.n	80068d4 <ReceiveData+0x360>
		} else {
			rI++;
 80068aa:	4a0e      	ldr	r2, [pc, #56]	@ (80068e4 <ReceiveData+0x370>)
 80068ac:	18bb      	adds	r3, r7, r2
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3301      	adds	r3, #1
 80068b2:	18ba      	adds	r2, r7, r2
 80068b4:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <ReceiveData+0x370>)
 80068b8:	18fb      	adds	r3, r7, r3
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <ReceiveData+0x374>)
 80068be:	18d1      	adds	r1, r2, r3
 80068c0:	23fa      	movs	r3, #250	@ 0xfa
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	481f      	ldr	r0, [pc, #124]	@ (8006944 <ReceiveData+0x3d0>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	f006 fcfc 	bl	800d2c4 <HAL_UART_Receive>
 80068cc:	1e03      	subs	r3, r0, #0
 80068ce:	d100      	bne.n	80068d2 <ReceiveData+0x35e>
 80068d0:	e659      	b.n	8006586 <ReceiveData+0x12>
		}
	}

}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	46c0      	nop			@ (mov r8, r8)
 80068d6:	46bd      	mov	sp, r7
 80068d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <ReceiveData+0x3d4>)
 80068da:	449d      	add	sp, r3
 80068dc:	bdb0      	pop	{r4, r5, r7, pc}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	ffffebf0 	.word	0xffffebf0
 80068e4:	0000140c 	.word	0x0000140c
 80068e8:	2000296c 	.word	0x2000296c
 80068ec:	000013fc 	.word	0x000013fc
 80068f0:	00001408 	.word	0x00001408
 80068f4:	08011b70 	.word	0x08011b70
 80068f8:	000013f8 	.word	0x000013f8
 80068fc:	00001404 	.word	0x00001404
 8006900:	200025b4 	.word	0x200025b4
 8006904:	08011b74 	.word	0x08011b74
 8006908:	08011b80 	.word	0x08011b80
 800690c:	08011b8c 	.word	0x08011b8c
 8006910:	08011b98 	.word	0x08011b98
 8006914:	08011ba4 	.word	0x08011ba4
 8006918:	08011bb0 	.word	0x08011bb0
 800691c:	08011bbc 	.word	0x08011bbc
 8006920:	000013f4 	.word	0x000013f4
 8006924:	08011bc8 	.word	0x08011bc8
 8006928:	000013ec 	.word	0x000013ec
 800692c:	08011bcc 	.word	0x08011bcc
 8006930:	88e368f1 	.word	0x88e368f1
 8006934:	3ee4f8b5 	.word	0x3ee4f8b5
 8006938:	08011bd0 	.word	0x08011bd0
 800693c:	08011bd4 	.word	0x08011bd4
 8006940:	20002708 	.word	0x20002708
 8006944:	2000375c 	.word	0x2000375c
 8006948:	00001410 	.word	0x00001410

0800694c <CheckExp>:
int CheckExp(int threshold, int comparer) {
 800694c:	b590      	push	{r4, r7, lr}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	int value = (int) ((float) comparer
 8006956:	6838      	ldr	r0, [r7, #0]
 8006958:	f7fa fe1c 	bl	8001594 <__aeabi_i2f>
 800695c:	1c04      	adds	r4, r0, #0
			* (1.0f + ((float) game.numLocations) / expDivisor));
 800695e:	4b1c      	ldr	r3, [pc, #112]	@ (80069d0 <CheckExp+0x84>)
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	0018      	movs	r0, r3
 8006964:	f7fa fe62 	bl	800162c <__aeabi_ui2f>
 8006968:	1c03      	adds	r3, r0, #0
 800696a:	2281      	movs	r2, #129	@ 0x81
 800696c:	05d2      	lsls	r2, r2, #23
 800696e:	1c11      	adds	r1, r2, #0
 8006970:	1c18      	adds	r0, r3, #0
 8006972:	f7fa f927 	bl	8000bc4 <__aeabi_fdiv>
 8006976:	1c03      	adds	r3, r0, #0
 8006978:	21fe      	movs	r1, #254	@ 0xfe
 800697a:	0589      	lsls	r1, r1, #22
 800697c:	1c18      	adds	r0, r3, #0
 800697e:	f7f9 ff97 	bl	80008b0 <__aeabi_fadd>
 8006982:	1c03      	adds	r3, r0, #0
 8006984:	1c19      	adds	r1, r3, #0
 8006986:	1c20      	adds	r0, r4, #0
 8006988:	f7fa fb02 	bl	8000f90 <__aeabi_fmul>
 800698c:	1c03      	adds	r3, r0, #0
	int value = (int) ((float) comparer
 800698e:	1c18      	adds	r0, r3, #0
 8006990:	f7fa fde0 	bl	8001554 <__aeabi_f2iz>
 8006994:	0003      	movs	r3, r0
 8006996:	60fb      	str	r3, [r7, #12]
	if (value < (threshold / 4))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	da00      	bge.n	80069a0 <CheckExp+0x54>
 800699e:	3303      	adds	r3, #3
 80069a0:	109b      	asrs	r3, r3, #2
 80069a2:	001a      	movs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4293      	cmp	r3, r2
 80069a8:	da02      	bge.n	80069b0 <CheckExp+0x64>
		return -1;
 80069aa:	2301      	movs	r3, #1
 80069ac:	425b      	negs	r3, r3
 80069ae:	e00b      	b.n	80069c8 <CheckExp+0x7c>
	if (value < threshold)
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	da01      	bge.n	80069bc <CheckExp+0x70>
		return 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e005      	b.n	80069c8 <CheckExp+0x7c>
	if (value >= threshold)
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	db01      	blt.n	80069c8 <CheckExp+0x7c>
		return 1;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e7ff      	b.n	80069c8 <CheckExp+0x7c>
}
 80069c8:	0018      	movs	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b005      	add	sp, #20
 80069ce:	bd90      	pop	{r4, r7, pc}
 80069d0:	200025b4 	.word	0x200025b4

080069d4 <GetLatLon>:
void GetLatLon() {
 80069d4:	b5b0      	push	{r4, r5, r7, lr}
 80069d6:	b08a      	sub	sp, #40	@ 0x28
 80069d8:	af00      	add	r7, sp, #0
	int gpsI = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	623b      	str	r3, [r7, #32]
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 80069e2:	e120      	b.n	8006c26 <GetLatLon+0x252>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 80069e4:	4b9b      	ldr	r3, [pc, #620]	@ (8006c54 <GetLatLon+0x280>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e00d      	b.n	8006a08 <GetLatLon+0x34>
				buffer[ii] = 0;
 80069ec:	4b99      	ldr	r3, [pc, #612]	@ (8006c54 <GetLatLon+0x280>)
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	001a      	movs	r2, r3
 80069f4:	4b98      	ldr	r3, [pc, #608]	@ (8006c58 <GetLatLon+0x284>)
 80069f6:	2100      	movs	r1, #0
 80069f8:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 80069fa:	4b96      	ldr	r3, [pc, #600]	@ (8006c54 <GetLatLon+0x280>)
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3301      	adds	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	4b93      	ldr	r3, [pc, #588]	@ (8006c54 <GetLatLon+0x280>)
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	4b92      	ldr	r3, [pc, #584]	@ (8006c54 <GetLatLon+0x280>)
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a10:	d9ec      	bls.n	80069ec <GetLatLon+0x18>
			buffer[0] = '$';
 8006a12:	4b91      	ldr	r3, [pc, #580]	@ (8006c58 <GetLatLon+0x284>)
 8006a14:	2224      	movs	r2, #36	@ 0x24
 8006a16:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 8006a1c:	4a8e      	ldr	r2, [pc, #568]	@ (8006c58 <GetLatLon+0x284>)
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	18d3      	adds	r3, r2, r3
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b0a      	cmp	r3, #10
 8006a26:	d000      	beq.n	8006a2a <GetLatLon+0x56>
 8006a28:	e0fa      	b.n	8006c20 <GetLatLon+0x24c>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 8006a2a:	4a8b      	ldr	r2, [pc, #556]	@ (8006c58 <GetLatLon+0x284>)
 8006a2c:	4b8b      	ldr	r3, [pc, #556]	@ (8006c5c <GetLatLon+0x288>)
 8006a2e:	0011      	movs	r1, r2
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 fe3f 	bl	80076b4 <minmea_parse_gga>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d100      	bne.n	8006a3c <GetLatLon+0x68>
 8006a3a:	e0da      	b.n	8006bf2 <GetLatLon+0x21e>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006a3c:	4b88      	ldr	r3, [pc, #544]	@ (8006c60 <GetLatLon+0x28c>)
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fd fdb4 	bl	80045ac <minmea_tocoord>
 8006a44:	1c02      	adds	r2, r0, #0
 8006a46:	2408      	movs	r4, #8
 8006a48:	193b      	adds	r3, r7, r4
 8006a4a:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006a4c:	4b85      	ldr	r3, [pc, #532]	@ (8006c64 <GetLatLon+0x290>)
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f7fd fdac 	bl	80045ac <minmea_tocoord>
 8006a54:	1c02      	adds	r2, r0, #0
 8006a56:	193b      	adds	r3, r7, r4
 8006a58:	605a      	str	r2, [r3, #4]
				game.time = ggaStruct.time;
 8006a5a:	4b83      	ldr	r3, [pc, #524]	@ (8006c68 <GetLatLon+0x294>)
 8006a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8006c5c <GetLatLon+0x288>)
 8006a5e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006a60:	c313      	stmia	r3!, {r0, r1, r4}
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	601a      	str	r2, [r3, #0]
				frameGot = 1;
 8006a66:	4b81      	ldr	r3, [pc, #516]	@ (8006c6c <GetLatLon+0x298>)
 8006a68:	2201      	movs	r2, #1
 8006a6a:	701a      	strb	r2, [r3, #0]
				posCheckI = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	623b      	str	r3, [r7, #32]
				for (posCheckI = 0; posCheckI < game.numLocations;
 8006a70:	2300      	movs	r3, #0
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	e09f      	b.n	8006bb6 <GetLatLon+0x1e2>
						posCheckI++) {

					tempPos = game.positions[posCheckI];
 8006a76:	003a      	movs	r2, r7
 8006a78:	497b      	ldr	r1, [pc, #492]	@ (8006c68 <GetLatLon+0x294>)
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	3303      	adds	r3, #3
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	18cb      	adds	r3, r1, r3
 8006a82:	cb03      	ldmia	r3!, {r0, r1}
 8006a84:	c203      	stmia	r2!, {r0, r1}
					if ((tempPos.lat > .000001f || tempPos.lat < -.000001f)
 8006a86:	003b      	movs	r3, r7
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4979      	ldr	r1, [pc, #484]	@ (8006c70 <GetLatLon+0x29c>)
 8006a8c:	1c18      	adds	r0, r3, #0
 8006a8e:	f7f9 fd3b 	bl	8000508 <__aeabi_fcmpgt>
 8006a92:	1e03      	subs	r3, r0, #0
 8006a94:	d108      	bne.n	8006aa8 <GetLatLon+0xd4>
 8006a96:	003b      	movs	r3, r7
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4976      	ldr	r1, [pc, #472]	@ (8006c74 <GetLatLon+0x2a0>)
 8006a9c:	1c18      	adds	r0, r3, #0
 8006a9e:	f7f9 fd1f 	bl	80004e0 <__aeabi_fcmplt>
 8006aa2:	1e03      	subs	r3, r0, #0
 8006aa4:	d100      	bne.n	8006aa8 <GetLatLon+0xd4>
						if (sqrt((checkW * checkW) + (checkH * checkH))
								< gpsThreshold)
							return;

					} else
						return;
 8006aa6:	e0d2      	b.n	8006c4e <GetLatLon+0x27a>
							&& (tempPos.lon > .000001f
 8006aa8:	003b      	movs	r3, r7
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	4970      	ldr	r1, [pc, #448]	@ (8006c70 <GetLatLon+0x29c>)
 8006aae:	1c18      	adds	r0, r3, #0
 8006ab0:	f7f9 fd2a 	bl	8000508 <__aeabi_fcmpgt>
 8006ab4:	1e03      	subs	r3, r0, #0
 8006ab6:	d108      	bne.n	8006aca <GetLatLon+0xf6>
									|| tempPos.lon < -.000001f)
 8006ab8:	003b      	movs	r3, r7
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	496d      	ldr	r1, [pc, #436]	@ (8006c74 <GetLatLon+0x2a0>)
 8006abe:	1c18      	adds	r0, r3, #0
 8006ac0:	f7f9 fd0e 	bl	80004e0 <__aeabi_fcmplt>
 8006ac4:	1e03      	subs	r3, r0, #0
 8006ac6:	d100      	bne.n	8006aca <GetLatLon+0xf6>
						return;
 8006ac8:	e0c1      	b.n	8006c4e <GetLatLon+0x27a>
							&& (pos.lat > .000001f || pos.lat < -.000001f)
 8006aca:	2408      	movs	r4, #8
 8006acc:	193b      	adds	r3, r7, r4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4967      	ldr	r1, [pc, #412]	@ (8006c70 <GetLatLon+0x29c>)
 8006ad2:	1c18      	adds	r0, r3, #0
 8006ad4:	f7f9 fd18 	bl	8000508 <__aeabi_fcmpgt>
 8006ad8:	1e03      	subs	r3, r0, #0
 8006ada:	d108      	bne.n	8006aee <GetLatLon+0x11a>
 8006adc:	193b      	adds	r3, r7, r4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4964      	ldr	r1, [pc, #400]	@ (8006c74 <GetLatLon+0x2a0>)
 8006ae2:	1c18      	adds	r0, r3, #0
 8006ae4:	f7f9 fcfc 	bl	80004e0 <__aeabi_fcmplt>
 8006ae8:	1e03      	subs	r3, r0, #0
 8006aea:	d100      	bne.n	8006aee <GetLatLon+0x11a>
						return;
 8006aec:	e0af      	b.n	8006c4e <GetLatLon+0x27a>
							&& (pos.lat > .000001f || pos.lat < -.000001f)) {
 8006aee:	2408      	movs	r4, #8
 8006af0:	193b      	adds	r3, r7, r4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	495e      	ldr	r1, [pc, #376]	@ (8006c70 <GetLatLon+0x29c>)
 8006af6:	1c18      	adds	r0, r3, #0
 8006af8:	f7f9 fd06 	bl	8000508 <__aeabi_fcmpgt>
 8006afc:	1e03      	subs	r3, r0, #0
 8006afe:	d108      	bne.n	8006b12 <GetLatLon+0x13e>
 8006b00:	193b      	adds	r3, r7, r4
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	495b      	ldr	r1, [pc, #364]	@ (8006c74 <GetLatLon+0x2a0>)
 8006b06:	1c18      	adds	r0, r3, #0
 8006b08:	f7f9 fcea 	bl	80004e0 <__aeabi_fcmplt>
 8006b0c:	1e03      	subs	r3, r0, #0
 8006b0e:	d100      	bne.n	8006b12 <GetLatLon+0x13e>
						return;
 8006b10:	e09d      	b.n	8006c4e <GetLatLon+0x27a>
						checkW = fabs(tempPos.lat - pos.lat);
 8006b12:	003b      	movs	r3, r7
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	2408      	movs	r4, #8
 8006b18:	193b      	adds	r3, r7, r4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	1c19      	adds	r1, r3, #0
 8006b1e:	1c10      	adds	r0, r2, #0
 8006b20:	f7fa fb74 	bl	800120c <__aeabi_fsub>
 8006b24:	1c03      	adds	r3, r0, #0
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	1c18      	adds	r0, r3, #0
 8006b2c:	f7fc fc7c 	bl	8003428 <__aeabi_f2d>
 8006b30:	0002      	movs	r2, r0
 8006b32:	000b      	movs	r3, r1
 8006b34:	61ba      	str	r2, [r7, #24]
 8006b36:	61fb      	str	r3, [r7, #28]
						checkH = fabs(tempPos.lon - pos.lon);
 8006b38:	003b      	movs	r3, r7
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	193b      	adds	r3, r7, r4
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	1c19      	adds	r1, r3, #0
 8006b42:	1c10      	adds	r0, r2, #0
 8006b44:	f7fa fb62 	bl	800120c <__aeabi_fsub>
 8006b48:	1c03      	adds	r3, r0, #0
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	1c18      	adds	r0, r3, #0
 8006b50:	f7fc fc6a 	bl	8003428 <__aeabi_f2d>
 8006b54:	0002      	movs	r2, r0
 8006b56:	000b      	movs	r3, r1
 8006b58:	613a      	str	r2, [r7, #16]
 8006b5a:	617b      	str	r3, [r7, #20]
						if (sqrt((checkW * checkW) + (checkH * checkH))
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	69b8      	ldr	r0, [r7, #24]
 8006b62:	69f9      	ldr	r1, [r7, #28]
 8006b64:	f7fb fd4c 	bl	8002600 <__aeabi_dmul>
 8006b68:	0002      	movs	r2, r0
 8006b6a:	000b      	movs	r3, r1
 8006b6c:	0014      	movs	r4, r2
 8006b6e:	001d      	movs	r5, r3
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6938      	ldr	r0, [r7, #16]
 8006b76:	6979      	ldr	r1, [r7, #20]
 8006b78:	f7fb fd42 	bl	8002600 <__aeabi_dmul>
 8006b7c:	0002      	movs	r2, r0
 8006b7e:	000b      	movs	r3, r1
 8006b80:	0020      	movs	r0, r4
 8006b82:	0029      	movs	r1, r5
 8006b84:	f7fa fd94 	bl	80016b0 <__aeabi_dadd>
 8006b88:	0002      	movs	r2, r0
 8006b8a:	000b      	movs	r3, r1
 8006b8c:	0010      	movs	r0, r2
 8006b8e:	0019      	movs	r1, r3
 8006b90:	f00a fcdf 	bl	8011552 <sqrt>
 8006b94:	0004      	movs	r4, r0
 8006b96:	000d      	movs	r5, r1
								< gpsThreshold)
 8006b98:	4b37      	ldr	r3, [pc, #220]	@ (8006c78 <GetLatLon+0x2a4>)
 8006b9a:	1c18      	adds	r0, r3, #0
 8006b9c:	f7fc fc44 	bl	8003428 <__aeabi_f2d>
 8006ba0:	0002      	movs	r2, r0
 8006ba2:	000b      	movs	r3, r1
						if (sqrt((checkW * checkW) + (checkH * checkH))
 8006ba4:	0020      	movs	r0, r4
 8006ba6:	0029      	movs	r1, r5
 8006ba8:	f7f9 fc60 	bl	800046c <__aeabi_dcmplt>
 8006bac:	1e03      	subs	r3, r0, #0
 8006bae:	d14b      	bne.n	8006c48 <GetLatLon+0x274>
						posCheckI++) {
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	623b      	str	r3, [r7, #32]
				for (posCheckI = 0; posCheckI < game.numLocations;
 8006bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8006c68 <GetLatLon+0x294>)
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d900      	bls.n	8006bc2 <GetLatLon+0x1ee>
 8006bc0:	e759      	b.n	8006a76 <GetLatLon+0xa2>

				}
				game.positions[game.numLocations] = pos;
 8006bc2:	4b29      	ldr	r3, [pc, #164]	@ (8006c68 <GetLatLon+0x294>)
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4a28      	ldr	r2, [pc, #160]	@ (8006c68 <GetLatLon+0x294>)
 8006bc8:	3303      	adds	r3, #3
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	2108      	movs	r1, #8
 8006bce:	1879      	adds	r1, r7, r1
 8006bd0:	18d3      	adds	r3, r2, r3
 8006bd2:	000a      	movs	r2, r1
 8006bd4:	ca03      	ldmia	r2!, {r0, r1}
 8006bd6:	c303      	stmia	r3!, {r0, r1}
				game.numLocations++;
 8006bd8:	4b23      	ldr	r3, [pc, #140]	@ (8006c68 <GetLatLon+0x294>)
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	4b22      	ldr	r3, [pc, #136]	@ (8006c68 <GetLatLon+0x294>)
 8006be0:	615a      	str	r2, [r3, #20]
				if (game.numLocations > 31)
 8006be2:	4b21      	ldr	r3, [pc, #132]	@ (8006c68 <GetLatLon+0x294>)
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b1f      	cmp	r3, #31
 8006be8:	d930      	bls.n	8006c4c <GetLatLon+0x278>
					game.numLocations = 0;
 8006bea:	4b1f      	ldr	r3, [pc, #124]	@ (8006c68 <GetLatLon+0x294>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	615a      	str	r2, [r3, #20]
				break;
 8006bf0:	e02c      	b.n	8006c4c <GetLatLon+0x278>
			}

			for (ii = 0; ii <= 127; ii++)
 8006bf2:	4b18      	ldr	r3, [pc, #96]	@ (8006c54 <GetLatLon+0x280>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e00d      	b.n	8006c16 <GetLatLon+0x242>
				buffer[ii] = 0;
 8006bfa:	4b16      	ldr	r3, [pc, #88]	@ (8006c54 <GetLatLon+0x280>)
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	001a      	movs	r2, r3
 8006c02:	4b15      	ldr	r3, [pc, #84]	@ (8006c58 <GetLatLon+0x284>)
 8006c04:	2100      	movs	r1, #0
 8006c06:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8006c08:	4b12      	ldr	r3, [pc, #72]	@ (8006c54 <GetLatLon+0x280>)
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3301      	adds	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	4b10      	ldr	r3, [pc, #64]	@ (8006c54 <GetLatLon+0x280>)
 8006c14:	801a      	strh	r2, [r3, #0]
 8006c16:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <GetLatLon+0x280>)
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1e:	d9ec      	bls.n	8006bfa <GetLatLon+0x226>
		}
		gpsI++;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	3301      	adds	r3, #1
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8006c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c28:	4b0b      	ldr	r3, [pc, #44]	@ (8006c58 <GetLatLon+0x284>)
 8006c2a:	18d1      	adds	r1, r2, r3
 8006c2c:	23fa      	movs	r3, #250	@ 0xfa
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4812      	ldr	r0, [pc, #72]	@ (8006c7c <GetLatLon+0x2a8>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	f006 fb46 	bl	800d2c4 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 8006c38:	4a07      	ldr	r2, [pc, #28]	@ (8006c58 <GetLatLon+0x284>)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	18d3      	adds	r3, r2, r3
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b24      	cmp	r3, #36	@ 0x24
 8006c42:	d000      	beq.n	8006c46 <GetLatLon+0x272>
 8006c44:	e6ea      	b.n	8006a1c <GetLatLon+0x48>
 8006c46:	e6cd      	b.n	80069e4 <GetLatLon+0x10>
							return;
 8006c48:	46c0      	nop			@ (mov r8, r8)
 8006c4a:	e000      	b.n	8006c4e <GetLatLon+0x27a>
				break;
 8006c4c:	46c0      	nop			@ (mov r8, r8)

	}

}
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b00a      	add	sp, #40	@ 0x28
 8006c52:	bdb0      	pop	{r4, r5, r7, pc}
 8006c54:	20002708 	.word	0x20002708
 8006c58:	2000275c 	.word	0x2000275c
 8006c5c:	2000270c 	.word	0x2000270c
 8006c60:	2000271c 	.word	0x2000271c
 8006c64:	20002724 	.word	0x20002724
 8006c68:	200025b4 	.word	0x200025b4
 8006c6c:	2000275a 	.word	0x2000275a
 8006c70:	358637bd 	.word	0x358637bd
 8006c74:	b58637bd 	.word	0xb58637bd
 8006c78:	38d1b717 	.word	0x38d1b717
 8006c7c:	200036c8 	.word	0x200036c8

08006c80 <Emote>:
void Emote() {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af04      	add	r7, sp, #16
	switch (game.evo) {
 8006c86:	4b57      	ldr	r3, [pc, #348]	@ (8006de4 <Emote+0x164>)
 8006c88:	7c1b      	ldrb	r3, [r3, #16]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d041      	beq.n	8006d12 <Emote+0x92>
 8006c8e:	dd00      	ble.n	8006c92 <Emote+0x12>
 8006c90:	e069      	b.n	8006d66 <Emote+0xe6>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <Emote+0x1c>
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d016      	beq.n	8006cc8 <Emote+0x48>
 8006c9a:	e064      	b.n	8006d66 <Emote+0xe6>
	case 0:
		if (game.time.seconds % 3 == 0) {
 8006c9c:	4b51      	ldr	r3, [pc, #324]	@ (8006de4 <Emote+0x164>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2103      	movs	r1, #3
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f7f9 fbc6 	bl	8000434 <__aeabi_idivmod>
 8006ca8:	1e0b      	subs	r3, r1, #0
 8006caa:	d157      	bne.n	8006d5c <Emote+0xdc>
			game.time.seconds++;
 8006cac:	4b4d      	ldr	r3, [pc, #308]	@ (8006de4 <Emote+0x164>)
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8006de4 <Emote+0x164>)
 8006cb4:	609a      	str	r2, [r3, #8]
			effect = EggNoise;
 8006cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8006de8 <Emote+0x168>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	701a      	strb	r2, [r3, #0]
			PlayEffect(effect);
 8006cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8006de8 <Emote+0x168>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fe fd19 	bl	80056f8 <PlayEffect>
		}
		break;
 8006cc6:	e049      	b.n	8006d5c <Emote+0xdc>
	case 1:
		if (game.time.seconds % 3 == 0) {
 8006cc8:	4b46      	ldr	r3, [pc, #280]	@ (8006de4 <Emote+0x164>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2103      	movs	r1, #3
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f7f9 fbb0 	bl	8000434 <__aeabi_idivmod>
 8006cd4:	1e0b      	subs	r3, r1, #0
 8006cd6:	d143      	bne.n	8006d60 <Emote+0xe0>
			game.time.seconds++;
 8006cd8:	4b42      	ldr	r3, [pc, #264]	@ (8006de4 <Emote+0x164>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <Emote+0x164>)
 8006ce0:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 8006ce2:	4b40      	ldr	r3, [pc, #256]	@ (8006de4 <Emote+0x164>)
 8006ce4:	7c5b      	ldrb	r3, [r3, #17]
 8006ce6:	001a      	movs	r2, r3
 8006ce8:	2300      	movs	r3, #0
 8006cea:	429a      	cmp	r2, r3
 8006cec:	dd08      	ble.n	8006d00 <Emote+0x80>
				effect = YoungNoiseHappy;
 8006cee:	4b3e      	ldr	r3, [pc, #248]	@ (8006de8 <Emote+0x168>)
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8006de8 <Emote+0x168>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f7fe fcfd 	bl	80056f8 <PlayEffect>
				effect = YoungNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 8006cfe:	e02f      	b.n	8006d60 <Emote+0xe0>
				effect = YoungNoiseSad;
 8006d00:	4b39      	ldr	r3, [pc, #228]	@ (8006de8 <Emote+0x168>)
 8006d02:	2203      	movs	r2, #3
 8006d04:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006d06:	4b38      	ldr	r3, [pc, #224]	@ (8006de8 <Emote+0x168>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f7fe fcf4 	bl	80056f8 <PlayEffect>
		break;
 8006d10:	e026      	b.n	8006d60 <Emote+0xe0>
	case 2:
		if (game.time.seconds % 3 == 0) {
 8006d12:	4b34      	ldr	r3, [pc, #208]	@ (8006de4 <Emote+0x164>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2103      	movs	r1, #3
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7f9 fb8b 	bl	8000434 <__aeabi_idivmod>
 8006d1e:	1e0b      	subs	r3, r1, #0
 8006d20:	d120      	bne.n	8006d64 <Emote+0xe4>
			game.time.seconds++;
 8006d22:	4b30      	ldr	r3, [pc, #192]	@ (8006de4 <Emote+0x164>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	4b2e      	ldr	r3, [pc, #184]	@ (8006de4 <Emote+0x164>)
 8006d2a:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 8006d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8006de4 <Emote+0x164>)
 8006d2e:	7c5b      	ldrb	r3, [r3, #17]
 8006d30:	001a      	movs	r2, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	429a      	cmp	r2, r3
 8006d36:	dd08      	ble.n	8006d4a <Emote+0xca>
				effect = AdultNoiseHappy;
 8006d38:	4b2b      	ldr	r3, [pc, #172]	@ (8006de8 <Emote+0x168>)
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006de8 <Emote+0x168>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	0018      	movs	r0, r3
 8006d44:	f7fe fcd8 	bl	80056f8 <PlayEffect>
				effect = AdultNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 8006d48:	e00c      	b.n	8006d64 <Emote+0xe4>
				effect = AdultNoiseSad;
 8006d4a:	4b27      	ldr	r3, [pc, #156]	@ (8006de8 <Emote+0x168>)
 8006d4c:	2205      	movs	r2, #5
 8006d4e:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006d50:	4b25      	ldr	r3, [pc, #148]	@ (8006de8 <Emote+0x168>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	0018      	movs	r0, r3
 8006d56:	f7fe fccf 	bl	80056f8 <PlayEffect>
		break;
 8006d5a:	e003      	b.n	8006d64 <Emote+0xe4>
		break;
 8006d5c:	46c0      	nop			@ (mov r8, r8)
 8006d5e:	e002      	b.n	8006d66 <Emote+0xe6>
		break;
 8006d60:	46c0      	nop			@ (mov r8, r8)
 8006d62:	e000      	b.n	8006d66 <Emote+0xe6>
		break;
 8006d64:	46c0      	nop			@ (mov r8, r8)
	}
	if (game.mood <= sadMood) {
 8006d66:	4b1f      	ldr	r3, [pc, #124]	@ (8006de4 <Emote+0x164>)
 8006d68:	7c5b      	ldrb	r3, [r3, #17]
 8006d6a:	001a      	movs	r2, r3
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	dc0d      	bgt.n	8006d8e <Emote+0x10e>
		drawString(0, 140, "Emotional State :(", WHITE, BLACK, 1, 1);
 8006d72:	2301      	movs	r3, #1
 8006d74:	425b      	negs	r3, r3
 8006d76:	4a1d      	ldr	r2, [pc, #116]	@ (8006dec <Emote+0x16c>)
 8006d78:	2101      	movs	r1, #1
 8006d7a:	9102      	str	r1, [sp, #8]
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	9101      	str	r1, [sp, #4]
 8006d80:	2100      	movs	r1, #0
 8006d82:	9100      	str	r1, [sp, #0]
 8006d84:	218c      	movs	r1, #140	@ 0x8c
 8006d86:	2000      	movs	r0, #0
 8006d88:	f7fc fee9 	bl	8003b5e <drawString>
	} else if (game.mood <= mehMood) {
		drawString(0, 140, "Emotional State :/", WHITE, BLACK, 1, 1);
	} else if (game.mood >= happyMood) {
		drawString(0, 140, "Emotional State :)", WHITE, BLACK, 1, 1);
	}
}
 8006d8c:	e026      	b.n	8006ddc <Emote+0x15c>
	} else if (game.mood <= mehMood) {
 8006d8e:	4b15      	ldr	r3, [pc, #84]	@ (8006de4 <Emote+0x164>)
 8006d90:	7c5b      	ldrb	r3, [r3, #17]
 8006d92:	001a      	movs	r2, r3
 8006d94:	2301      	movs	r3, #1
 8006d96:	429a      	cmp	r2, r3
 8006d98:	dc0d      	bgt.n	8006db6 <Emote+0x136>
		drawString(0, 140, "Emotional State :/", WHITE, BLACK, 1, 1);
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	425b      	negs	r3, r3
 8006d9e:	4a14      	ldr	r2, [pc, #80]	@ (8006df0 <Emote+0x170>)
 8006da0:	2101      	movs	r1, #1
 8006da2:	9102      	str	r1, [sp, #8]
 8006da4:	2101      	movs	r1, #1
 8006da6:	9101      	str	r1, [sp, #4]
 8006da8:	2100      	movs	r1, #0
 8006daa:	9100      	str	r1, [sp, #0]
 8006dac:	218c      	movs	r1, #140	@ 0x8c
 8006dae:	2000      	movs	r0, #0
 8006db0:	f7fc fed5 	bl	8003b5e <drawString>
}
 8006db4:	e012      	b.n	8006ddc <Emote+0x15c>
	} else if (game.mood >= happyMood) {
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <Emote+0x164>)
 8006db8:	7c5b      	ldrb	r3, [r3, #17]
 8006dba:	001a      	movs	r2, r3
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	db0c      	blt.n	8006ddc <Emote+0x15c>
		drawString(0, 140, "Emotional State :)", WHITE, BLACK, 1, 1);
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8006df4 <Emote+0x174>)
 8006dc8:	2101      	movs	r1, #1
 8006dca:	9102      	str	r1, [sp, #8]
 8006dcc:	2101      	movs	r1, #1
 8006dce:	9101      	str	r1, [sp, #4]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	9100      	str	r1, [sp, #0]
 8006dd4:	218c      	movs	r1, #140	@ 0x8c
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f7fc fec1 	bl	8003b5e <drawString>
}
 8006ddc:	46c0      	nop			@ (mov r8, r8)
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	46c0      	nop			@ (mov r8, r8)
 8006de4:	200025b4 	.word	0x200025b4
 8006de8:	20002520 	.word	0x20002520
 8006dec:	08011bd8 	.word	0x08011bd8
 8006df0:	08011bec 	.word	0x08011bec
 8006df4:	08011c00 	.word	0x08011c00

08006df8 <GetJustLatLon>:
struct latLon GetJustLatLon() {
 8006df8:	b590      	push	{r4, r7, lr}
 8006dfa:	b089      	sub	sp, #36	@ 0x24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	int gpsI = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8006e08:	e057      	b.n	8006eba <GetJustLatLon+0xc2>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 8006e0a:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	e00d      	b.n	8006e2e <GetJustLatLon+0x36>
				buffer[ii] = 0;
 8006e12:	4b34      	ldr	r3, [pc, #208]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	001a      	movs	r2, r3
 8006e1a:	4b33      	ldr	r3, [pc, #204]	@ (8006ee8 <GetJustLatLon+0xf0>)
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8006e20:	4b30      	ldr	r3, [pc, #192]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3301      	adds	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e36:	d9ec      	bls.n	8006e12 <GetJustLatLon+0x1a>
			buffer[0] = '$';
 8006e38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee8 <GetJustLatLon+0xf0>)
 8006e3a:	2224      	movs	r2, #36	@ 0x24
 8006e3c:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 8006e42:	4a29      	ldr	r2, [pc, #164]	@ (8006ee8 <GetJustLatLon+0xf0>)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	18d3      	adds	r3, r2, r3
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b0a      	cmp	r3, #10
 8006e4c:	d132      	bne.n	8006eb4 <GetJustLatLon+0xbc>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 8006e4e:	4a26      	ldr	r2, [pc, #152]	@ (8006ee8 <GetJustLatLon+0xf0>)
 8006e50:	4b26      	ldr	r3, [pc, #152]	@ (8006eec <GetJustLatLon+0xf4>)
 8006e52:	0011      	movs	r1, r2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f000 fc2d 	bl	80076b4 <minmea_parse_gga>
 8006e5a:	1e03      	subs	r3, r0, #0
 8006e5c:	d013      	beq.n	8006e86 <GetJustLatLon+0x8e>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006e5e:	4b24      	ldr	r3, [pc, #144]	@ (8006ef0 <GetJustLatLon+0xf8>)
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7fd fba3 	bl	80045ac <minmea_tocoord>
 8006e66:	1c02      	adds	r2, r0, #0
 8006e68:	2410      	movs	r4, #16
 8006e6a:	193b      	adds	r3, r7, r4
 8006e6c:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006e6e:	4b21      	ldr	r3, [pc, #132]	@ (8006ef4 <GetJustLatLon+0xfc>)
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7fd fb9b 	bl	80045ac <minmea_tocoord>
 8006e76:	1c02      	adds	r2, r0, #0
 8006e78:	193b      	adds	r3, r7, r4
 8006e7a:	605a      	str	r2, [r3, #4]
				return pos;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	193a      	adds	r2, r7, r4
 8006e80:	ca03      	ldmia	r2!, {r0, r1}
 8006e82:	c303      	stmia	r3!, {r0, r1}
 8006e84:	e029      	b.n	8006eda <GetJustLatLon+0xe2>
				break;
			}

			for (ii = 0; ii <= 127; ii++)
 8006e86:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	e00d      	b.n	8006eaa <GetJustLatLon+0xb2>
				buffer[ii] = 0;
 8006e8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	001a      	movs	r2, r3
 8006e96:	4b14      	ldr	r3, [pc, #80]	@ (8006ee8 <GetJustLatLon+0xf0>)
 8006e98:	2100      	movs	r1, #0
 8006e9a:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8006e9c:	4b11      	ldr	r3, [pc, #68]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <GetJustLatLon+0xec>)
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eb2:	d9ec      	bls.n	8006e8e <GetJustLatLon+0x96>
		}
		gpsI++;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	61fb      	str	r3, [r7, #28]
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <GetJustLatLon+0xf0>)
 8006ebe:	18d1      	adds	r1, r2, r3
 8006ec0:	23fa      	movs	r3, #250	@ 0xfa
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	480c      	ldr	r0, [pc, #48]	@ (8006ef8 <GetJustLatLon+0x100>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f006 f9fc 	bl	800d2c4 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 8006ecc:	4a06      	ldr	r2, [pc, #24]	@ (8006ee8 <GetJustLatLon+0xf0>)
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	18d3      	adds	r3, r2, r3
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b24      	cmp	r3, #36	@ 0x24
 8006ed6:	d1b4      	bne.n	8006e42 <GetJustLatLon+0x4a>
 8006ed8:	e797      	b.n	8006e0a <GetJustLatLon+0x12>

	}

}
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b009      	add	sp, #36	@ 0x24
 8006ee0:	bd90      	pop	{r4, r7, pc}
 8006ee2:	46c0      	nop			@ (mov r8, r8)
 8006ee4:	20002708 	.word	0x20002708
 8006ee8:	2000275c 	.word	0x2000275c
 8006eec:	2000270c 	.word	0x2000270c
 8006ef0:	2000271c 	.word	0x2000271c
 8006ef4:	20002724 	.word	0x20002724
 8006ef8:	200036c8 	.word	0x200036c8

08006efc <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b08d      	sub	sp, #52	@ 0x34
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef sAlarm;
	HAL_RTC_GetAlarm(hrtc, &sAlarm, RTC_ALARM_A, FORMAT_BIN);
 8006f04:	2380      	movs	r3, #128	@ 0x80
 8006f06:	005a      	lsls	r2, r3, #1
 8006f08:	2408      	movs	r4, #8
 8006f0a:	1939      	adds	r1, r7, r4
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f004 fb42 	bl	800b598 <HAL_RTC_GetAlarm>
	if (sAlarm.AlarmTime.Seconds > 58) {
 8006f14:	0022      	movs	r2, r4
 8006f16:	18bb      	adds	r3, r7, r2
 8006f18:	789b      	ldrb	r3, [r3, #2]
 8006f1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f1c:	d903      	bls.n	8006f26 <HAL_RTC_AlarmAEventCallback+0x2a>
		sAlarm.AlarmTime.Seconds = 0;
 8006f1e:	18bb      	adds	r3, r7, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	709a      	strb	r2, [r3, #2]
	} else {
		sAlarm.AlarmTime.Seconds = sAlarm.AlarmTime.Seconds + 1;
	}
	//while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
	// drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
}
 8006f24:	e006      	b.n	8006f34 <HAL_RTC_AlarmAEventCallback+0x38>
		sAlarm.AlarmTime.Seconds = sAlarm.AlarmTime.Seconds + 1;
 8006f26:	2108      	movs	r1, #8
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	789b      	ldrb	r3, [r3, #2]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	187b      	adds	r3, r7, r1
 8006f32:	709a      	strb	r2, [r3, #2]
}
 8006f34:	46c0      	nop			@ (mov r8, r8)
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b00d      	add	sp, #52	@ 0x34
 8006f3a:	bd90      	pop	{r4, r7, pc}

08006f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006f40:	b672      	cpsid	i
}
 8006f42:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006f44:	46c0      	nop			@ (mov r8, r8)
 8006f46:	e7fd      	b.n	8006f44 <Error_Handler+0x8>

08006f48 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	0002      	movs	r2, r0
 8006f50:	1dfb      	adds	r3, r7, #7
 8006f52:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8006f54:	1dfb      	adds	r3, r7, #7
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <minmea_isfield+0x48>)
 8006f5c:	18d3      	adds	r3, r2, r3
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	001a      	movs	r2, r3
 8006f62:	2397      	movs	r3, #151	@ 0x97
 8006f64:	4013      	ands	r3, r2
 8006f66:	d009      	beq.n	8006f7c <minmea_isfield+0x34>
 8006f68:	1dfb      	adds	r3, r7, #7
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b2c      	cmp	r3, #44	@ 0x2c
 8006f6e:	d005      	beq.n	8006f7c <minmea_isfield+0x34>
 8006f70:	1dfb      	adds	r3, r7, #7
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f76:	d001      	beq.n	8006f7c <minmea_isfield+0x34>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <minmea_isfield+0x36>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	1c1a      	adds	r2, r3, #0
 8006f80:	2301      	movs	r3, #1
 8006f82:	4013      	ands	r3, r2
 8006f84:	b2db      	uxtb	r3, r3
}
 8006f86:	0018      	movs	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b002      	add	sp, #8
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	46c0      	nop			@ (mov r8, r8)
 8006f90:	080125b8 	.word	0x080125b8

08006f94 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8006f94:	b40e      	push	{r1, r2, r3}
 8006f96:	b5b0      	push	{r4, r5, r7, lr}
 8006f98:	b0a7      	sub	sp, #156	@ 0x9c
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
    bool result = false;
 8006f9e:	2397      	movs	r3, #151	@ 0x97
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8006fa6:	2396      	movs	r3, #150	@ 0x96
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8006fae:	23a8      	movs	r3, #168	@ 0xa8
 8006fb0:	2208      	movs	r2, #8
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	19db      	adds	r3, r3, r7
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2290      	movs	r2, #144	@ 0x90
 8006fbc:	18ba      	adds	r2, r7, r2
 8006fbe:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8006fc0:	e345      	b.n	800764e <minmea_scan+0x6ba>
        char type = *format++;
 8006fc2:	21a4      	movs	r1, #164	@ 0xa4
 8006fc4:	2008      	movs	r0, #8
 8006fc6:	180b      	adds	r3, r1, r0
 8006fc8:	19db      	adds	r3, r3, r7
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	1809      	adds	r1, r1, r0
 8006fd0:	19c9      	adds	r1, r1, r7
 8006fd2:	600a      	str	r2, [r1, #0]
 8006fd4:	2143      	movs	r1, #67	@ 0x43
 8006fd6:	187a      	adds	r2, r7, r1
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8006fdc:	187b      	adds	r3, r7, r1
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b3b      	cmp	r3, #59	@ 0x3b
 8006fe2:	d104      	bne.n	8006fee <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8006fe4:	2396      	movs	r3, #150	@ 0x96
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]
            continue;
 8006fec:	e32f      	b.n	800764e <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8006fee:	2390      	movs	r3, #144	@ 0x90
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d108      	bne.n	800700a <minmea_scan+0x76>
 8006ff8:	2396      	movs	r3, #150	@ 0x96
 8006ffa:	18fb      	adds	r3, r7, r3
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2201      	movs	r2, #1
 8007000:	4053      	eors	r3, r2
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d000      	beq.n	800700a <minmea_scan+0x76>
 8007008:	e32f      	b.n	800766a <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 800700a:	2343      	movs	r3, #67	@ 0x43
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	3b44      	subs	r3, #68	@ 0x44
 8007012:	2b30      	cmp	r3, #48	@ 0x30
 8007014:	d900      	bls.n	8007018 <minmea_scan+0x84>
 8007016:	e32a      	b.n	800766e <minmea_scan+0x6da>
 8007018:	009a      	lsls	r2, r3, #2
 800701a:	4bbd      	ldr	r3, [pc, #756]	@ (8007310 <minmea_scan+0x37c>)
 800701c:	18d3      	adds	r3, r2, r3
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8007022:	258f      	movs	r5, #143	@ 0x8f
 8007024:	197b      	adds	r3, r7, r5
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 800702a:	2490      	movs	r4, #144	@ 0x90
 800702c:	193b      	adds	r3, r7, r4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <minmea_scan+0xba>
 8007034:	193b      	adds	r3, r7, r4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	0018      	movs	r0, r3
 800703c:	f7ff ff84 	bl	8006f48 <minmea_isfield>
 8007040:	1e03      	subs	r3, r0, #0
 8007042:	d004      	beq.n	800704e <minmea_scan+0xba>
                    value = *field;
 8007044:	197b      	adds	r3, r7, r5
 8007046:	193a      	adds	r2, r7, r4
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 800704e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007050:	1d1a      	adds	r2, r3, #4
 8007052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	228f      	movs	r2, #143	@ 0x8f
 8007058:	18ba      	adds	r2, r7, r2
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	701a      	strb	r2, [r3, #0]
            } break;
 800705e:	e2db      	b.n	8007618 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	2288      	movs	r2, #136	@ 0x88
 8007064:	18ba      	adds	r2, r7, r2
 8007066:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8007068:	2490      	movs	r4, #144	@ 0x90
 800706a:	193b      	adds	r3, r7, r4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d022      	beq.n	80070b8 <minmea_scan+0x124>
 8007072:	193b      	adds	r3, r7, r4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	0018      	movs	r0, r3
 800707a:	f7ff ff65 	bl	8006f48 <minmea_isfield>
 800707e:	1e03      	subs	r3, r0, #0
 8007080:	d01a      	beq.n	80070b8 <minmea_scan+0x124>
                    switch (*field) {
 8007082:	193b      	adds	r3, r7, r4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b57      	cmp	r3, #87	@ 0x57
 800708a:	d00f      	beq.n	80070ac <minmea_scan+0x118>
 800708c:	dd00      	ble.n	8007090 <minmea_scan+0xfc>
 800708e:	e2f0      	b.n	8007672 <minmea_scan+0x6de>
 8007090:	2b53      	cmp	r3, #83	@ 0x53
 8007092:	d00b      	beq.n	80070ac <minmea_scan+0x118>
 8007094:	dd00      	ble.n	8007098 <minmea_scan+0x104>
 8007096:	e2ec      	b.n	8007672 <minmea_scan+0x6de>
 8007098:	2b45      	cmp	r3, #69	@ 0x45
 800709a:	d002      	beq.n	80070a2 <minmea_scan+0x10e>
 800709c:	2b4e      	cmp	r3, #78	@ 0x4e
 800709e:	d000      	beq.n	80070a2 <minmea_scan+0x10e>
 80070a0:	e2e7      	b.n	8007672 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 80070a2:	2301      	movs	r3, #1
 80070a4:	2288      	movs	r2, #136	@ 0x88
 80070a6:	18ba      	adds	r2, r7, r2
 80070a8:	6013      	str	r3, [r2, #0]
                            break;
 80070aa:	e005      	b.n	80070b8 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	425b      	negs	r3, r3
 80070b0:	2288      	movs	r2, #136	@ 0x88
 80070b2:	18ba      	adds	r2, r7, r2
 80070b4:	6013      	str	r3, [r2, #0]
                            break;
 80070b6:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80070b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ba:	1d1a      	adds	r2, r3, #4
 80070bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2288      	movs	r2, #136	@ 0x88
 80070c2:	18ba      	adds	r2, r7, r2
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	601a      	str	r2, [r3, #0]
            } break;
 80070c8:	e2a6      	b.n	8007618 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	2284      	movs	r2, #132	@ 0x84
 80070ce:	18ba      	adds	r2, r7, r2
 80070d0:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80070d2:	2301      	movs	r3, #1
 80070d4:	425b      	negs	r3, r3
 80070d6:	2280      	movs	r2, #128	@ 0x80
 80070d8:	18ba      	adds	r2, r7, r2
 80070da:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80070e0:	2390      	movs	r3, #144	@ 0x90
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d100      	bne.n	80070ec <minmea_scan+0x158>
 80070ea:	e088      	b.n	80071fe <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 80070ec:	e07d      	b.n	80071ea <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 80070ee:	2390      	movs	r3, #144	@ 0x90
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80070f8:	d10d      	bne.n	8007116 <minmea_scan+0x182>
 80070fa:	2284      	movs	r2, #132	@ 0x84
 80070fc:	18bb      	adds	r3, r7, r2
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d108      	bne.n	8007116 <minmea_scan+0x182>
 8007104:	2380      	movs	r3, #128	@ 0x80
 8007106:	18fb      	adds	r3, r7, r3
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	d103      	bne.n	8007116 <minmea_scan+0x182>
                            sign = 1;
 800710e:	2301      	movs	r3, #1
 8007110:	18ba      	adds	r2, r7, r2
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	e063      	b.n	80071de <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 8007116:	2390      	movs	r3, #144	@ 0x90
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007120:	d10e      	bne.n	8007140 <minmea_scan+0x1ac>
 8007122:	2284      	movs	r2, #132	@ 0x84
 8007124:	18bb      	adds	r3, r7, r2
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <minmea_scan+0x1ac>
 800712c:	2380      	movs	r3, #128	@ 0x80
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	d104      	bne.n	8007140 <minmea_scan+0x1ac>
                            sign = -1;
 8007136:	2301      	movs	r3, #1
 8007138:	425b      	negs	r3, r3
 800713a:	18ba      	adds	r2, r7, r2
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	e04e      	b.n	80071de <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8007140:	2190      	movs	r1, #144	@ 0x90
 8007142:	187b      	adds	r3, r7, r1
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	4b72      	ldr	r3, [pc, #456]	@ (8007314 <minmea_scan+0x380>)
 800714c:	18d3      	adds	r3, r2, r3
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	001a      	movs	r2, r3
 8007152:	2304      	movs	r3, #4
 8007154:	4013      	ands	r3, r2
 8007156:	d035      	beq.n	80071c4 <minmea_scan+0x230>
                            int digit = *field - '0';
 8007158:	187b      	adds	r3, r7, r1
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	3b30      	subs	r3, #48	@ 0x30
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8007162:	2280      	movs	r2, #128	@ 0x80
 8007164:	18bb      	adds	r3, r7, r2
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	d102      	bne.n	8007172 <minmea_scan+0x1de>
                                value = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	18ba      	adds	r2, r7, r2
 8007170:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	4a68      	ldr	r2, [pc, #416]	@ (8007318 <minmea_scan+0x384>)
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	210a      	movs	r1, #10
 800717a:	0018      	movs	r0, r3
 800717c:	f7f9 f874 	bl	8000268 <__divsi3>
 8007180:	0003      	movs	r3, r0
 8007182:	001a      	movs	r2, r3
 8007184:	2380      	movs	r3, #128	@ 0x80
 8007186:	18fb      	adds	r3, r7, r3
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4293      	cmp	r3, r2
 800718c:	dd04      	ble.n	8007198 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800718e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d100      	bne.n	8007196 <minmea_scan+0x202>
 8007194:	e26f      	b.n	8007676 <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 8007196:	e032      	b.n	80071fe <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8007198:	2180      	movs	r1, #128	@ 0x80
 800719a:	187b      	adds	r3, r7, r1
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	0013      	movs	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	189b      	adds	r3, r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	001a      	movs	r2, r3
 80071a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071aa:	189b      	adds	r3, r3, r2
 80071ac:	187a      	adds	r2, r7, r1
 80071ae:	6013      	str	r3, [r2, #0]
                            if (scale)
 80071b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d013      	beq.n	80071de <minmea_scan+0x24a>
                                scale *= 10;
 80071b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071b8:	0013      	movs	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071c2:	e00c      	b.n	80071de <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 80071c4:	2390      	movs	r3, #144	@ 0x90
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80071ce:	d000      	beq.n	80071d2 <minmea_scan+0x23e>
 80071d0:	e253      	b.n	800767a <minmea_scan+0x6e6>
 80071d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d000      	beq.n	80071da <minmea_scan+0x246>
 80071d8:	e24f      	b.n	800767a <minmea_scan+0x6e6>
                            scale = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80071de:	2290      	movs	r2, #144	@ 0x90
 80071e0:	18bb      	adds	r3, r7, r2
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	18ba      	adds	r2, r7, r2
 80071e8:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 80071ea:	2390      	movs	r3, #144	@ 0x90
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	0018      	movs	r0, r3
 80071f4:	f7ff fea8 	bl	8006f48 <minmea_isfield>
 80071f8:	1e03      	subs	r3, r0, #0
 80071fa:	d000      	beq.n	80071fe <minmea_scan+0x26a>
 80071fc:	e777      	b.n	80070ee <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80071fe:	2384      	movs	r3, #132	@ 0x84
 8007200:	18fb      	adds	r3, r7, r3
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d102      	bne.n	800720e <minmea_scan+0x27a>
 8007208:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <minmea_scan+0x286>
 800720e:	2380      	movs	r3, #128	@ 0x80
 8007210:	18fb      	adds	r3, r7, r3
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3301      	adds	r3, #1
 8007216:	d100      	bne.n	800721a <minmea_scan+0x286>
 8007218:	e231      	b.n	800767e <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 800721a:	2280      	movs	r2, #128	@ 0x80
 800721c:	18bb      	adds	r3, r7, r2
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	d105      	bne.n	8007230 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	18ba      	adds	r2, r7, r2
 8007228:	6013      	str	r3, [r2, #0]
                    scale = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800722e:	e004      	b.n	800723a <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8007230:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 800723a:	2284      	movs	r2, #132	@ 0x84
 800723c:	18bb      	adds	r3, r7, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <minmea_scan+0x2c0>
                    value *= sign;
 8007244:	2180      	movs	r1, #128	@ 0x80
 8007246:	187b      	adds	r3, r7, r1
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	18ba      	adds	r2, r7, r2
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	4353      	muls	r3, r2
 8007250:	187a      	adds	r2, r7, r1
 8007252:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8007254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2280      	movs	r2, #128	@ 0x80
 800725e:	18ba      	adds	r2, r7, r2
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007266:	605a      	str	r2, [r3, #4]
            } break;
 8007268:	e1d6      	b.n	8007618 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 800726e:	2290      	movs	r2, #144	@ 0x90
 8007270:	18bb      	adds	r3, r7, r2
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d011      	beq.n	800729c <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8007278:	2320      	movs	r3, #32
 800727a:	18f9      	adds	r1, r7, r3
 800727c:	18bb      	adds	r3, r7, r2
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	220a      	movs	r2, #10
 8007282:	0018      	movs	r0, r3
 8007284:	f007 fe4a 	bl	800ef1c <strtol>
 8007288:	0003      	movs	r3, r0
 800728a:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	0018      	movs	r0, r3
 8007292:	f7ff fe59 	bl	8006f48 <minmea_isfield>
 8007296:	1e03      	subs	r3, r0, #0
 8007298:	d000      	beq.n	800729c <minmea_scan+0x308>
 800729a:	e1f2      	b.n	8007682 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80072a6:	601a      	str	r2, [r3, #0]
            } break;
 80072a8:	e1b6      	b.n	8007618 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80072aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ac:	1d1a      	adds	r2, r3, #4
 80072ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 80072b4:	2390      	movs	r3, #144	@ 0x90
 80072b6:	18fb      	adds	r3, r7, r3
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 80072be:	e00a      	b.n	80072d6 <minmea_scan+0x342>
                        *buf++ = *field++;
 80072c0:	2190      	movs	r1, #144	@ 0x90
 80072c2:	187b      	adds	r3, r7, r1
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	1c53      	adds	r3, r2, #1
 80072c8:	1879      	adds	r1, r7, r1
 80072ca:	600b      	str	r3, [r1, #0]
 80072cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072ce:	1c59      	adds	r1, r3, #1
 80072d0:	6779      	str	r1, [r7, #116]	@ 0x74
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80072d6:	2390      	movs	r3, #144	@ 0x90
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	0018      	movs	r0, r3
 80072e0:	f7ff fe32 	bl	8006f48 <minmea_isfield>
 80072e4:	1e03      	subs	r3, r0, #0
 80072e6:	d1eb      	bne.n	80072c0 <minmea_scan+0x32c>
                }

                *buf = '\0';
 80072e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
            } break;
 80072ee:	e193      	b.n	8007618 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80072f0:	2290      	movs	r2, #144	@ 0x90
 80072f2:	18bb      	adds	r3, r7, r2
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d100      	bne.n	80072fc <minmea_scan+0x368>
 80072fa:	e1c4      	b.n	8007686 <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80072fc:	18bb      	adds	r3, r7, r2
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b24      	cmp	r3, #36	@ 0x24
 8007304:	d000      	beq.n	8007308 <minmea_scan+0x374>
 8007306:	e1c0      	b.n	800768a <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 8007308:	2300      	movs	r3, #0
 800730a:	673b      	str	r3, [r7, #112]	@ 0x70
 800730c:	e01c      	b.n	8007348 <minmea_scan+0x3b4>
 800730e:	46c0      	nop			@ (mov r8, r8)
 8007310:	080122f8 	.word	0x080122f8
 8007314:	080125b8 	.word	0x080125b8
 8007318:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 800731c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800731e:	3301      	adds	r3, #1
 8007320:	001a      	movs	r2, r3
 8007322:	2390      	movs	r3, #144	@ 0x90
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	189b      	adds	r3, r3, r2
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	0018      	movs	r0, r3
 800732e:	f7ff fe0b 	bl	8006f48 <minmea_isfield>
 8007332:	0003      	movs	r3, r0
 8007334:	001a      	movs	r2, r3
 8007336:	2301      	movs	r3, #1
 8007338:	4053      	eors	r3, r2
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d000      	beq.n	8007342 <minmea_scan+0x3ae>
 8007340:	e1a5      	b.n	800768e <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 8007342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007344:	3301      	adds	r3, #1
 8007346:	673b      	str	r3, [r7, #112]	@ 0x70
 8007348:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800734a:	2b04      	cmp	r3, #4
 800734c:	dde6      	ble.n	800731c <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 800734e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007350:	1d1a      	adds	r2, r3, #4
 8007352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8007358:	2390      	movs	r3, #144	@ 0x90
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	1c59      	adds	r1, r3, #1
 8007360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007362:	2205      	movs	r2, #5
 8007364:	0018      	movs	r0, r3
 8007366:	f008 f85a 	bl	800f41e <memcpy>
                buf[5] = '\0';
 800736a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736c:	3305      	adds	r3, #5
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
            } break;
 8007372:	e151      	b.n	8007618 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8007374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 800737e:	2301      	movs	r3, #1
 8007380:	425b      	negs	r3, r3
 8007382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007384:	2301      	movs	r3, #1
 8007386:	425b      	negs	r3, r3
 8007388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800738a:	2301      	movs	r3, #1
 800738c:	425b      	negs	r3, r3
 800738e:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8007390:	2290      	movs	r2, #144	@ 0x90
 8007392:	18bb      	adds	r3, r7, r2
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d067      	beq.n	800746a <minmea_scan+0x4d6>
 800739a:	18bb      	adds	r3, r7, r2
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7ff fdd1 	bl	8006f48 <minmea_isfield>
 80073a6:	1e03      	subs	r3, r0, #0
 80073a8:	d05f      	beq.n	800746a <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 80073aa:	2300      	movs	r3, #0
 80073ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80073ae:	e011      	b.n	80073d4 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 80073b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073b2:	2290      	movs	r2, #144	@ 0x90
 80073b4:	18ba      	adds	r2, r7, r2
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	18d3      	adds	r3, r2, r3
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	4bbb      	ldr	r3, [pc, #748]	@ (80076ac <minmea_scan+0x718>)
 80073c0:	18d3      	adds	r3, r2, r3
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	001a      	movs	r2, r3
 80073c6:	2304      	movs	r3, #4
 80073c8:	4013      	ands	r3, r2
 80073ca:	d100      	bne.n	80073ce <minmea_scan+0x43a>
 80073cc:	e161      	b.n	8007692 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80073ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073d0:	3301      	adds	r3, #1
 80073d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80073d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073d6:	2b05      	cmp	r3, #5
 80073d8:	ddea      	ble.n	80073b0 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80073da:	2490      	movs	r4, #144	@ 0x90
 80073dc:	193b      	adds	r3, r7, r4
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	211c      	movs	r1, #28
 80073e4:	187b      	adds	r3, r7, r1
 80073e6:	701a      	strb	r2, [r3, #0]
 80073e8:	193b      	adds	r3, r7, r4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3301      	adds	r3, #1
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	187b      	adds	r3, r7, r1
 80073f2:	705a      	strb	r2, [r3, #1]
 80073f4:	187b      	adds	r3, r7, r1
 80073f6:	2200      	movs	r2, #0
 80073f8:	709a      	strb	r2, [r3, #2]
 80073fa:	187b      	adds	r3, r7, r1
 80073fc:	220a      	movs	r2, #10
 80073fe:	2100      	movs	r1, #0
 8007400:	0018      	movs	r0, r3
 8007402:	f007 fd8b 	bl	800ef1c <strtol>
 8007406:	0003      	movs	r3, r0
 8007408:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800740a:	193b      	adds	r3, r7, r4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3302      	adds	r3, #2
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	2118      	movs	r1, #24
 8007414:	187b      	adds	r3, r7, r1
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	193b      	adds	r3, r7, r4
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3303      	adds	r3, #3
 800741e:	781a      	ldrb	r2, [r3, #0]
 8007420:	187b      	adds	r3, r7, r1
 8007422:	705a      	strb	r2, [r3, #1]
 8007424:	187b      	adds	r3, r7, r1
 8007426:	2200      	movs	r2, #0
 8007428:	709a      	strb	r2, [r3, #2]
 800742a:	187b      	adds	r3, r7, r1
 800742c:	220a      	movs	r2, #10
 800742e:	2100      	movs	r1, #0
 8007430:	0018      	movs	r0, r3
 8007432:	f007 fd73 	bl	800ef1c <strtol>
 8007436:	0003      	movs	r3, r0
 8007438:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800743a:	193b      	adds	r3, r7, r4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3304      	adds	r3, #4
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	2114      	movs	r1, #20
 8007444:	187b      	adds	r3, r7, r1
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	193b      	adds	r3, r7, r4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3305      	adds	r3, #5
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	187b      	adds	r3, r7, r1
 8007452:	705a      	strb	r2, [r3, #1]
 8007454:	187b      	adds	r3, r7, r1
 8007456:	2200      	movs	r2, #0
 8007458:	709a      	strb	r2, [r3, #2]
 800745a:	187b      	adds	r3, r7, r1
 800745c:	220a      	movs	r2, #10
 800745e:	2100      	movs	r1, #0
 8007460:	0018      	movs	r0, r3
 8007462:	f007 fd5b 	bl	800ef1c <strtol>
 8007466:	0003      	movs	r3, r0
 8007468:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 800746a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800746e:	601a      	str	r2, [r3, #0]
                date->month = m;
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007474:	605a      	str	r2, [r3, #4]
                date->year = y;
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800747a:	609a      	str	r2, [r3, #8]
            } break;
 800747c:	e0cc      	b.n	8007618 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 800747e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8007488:	2301      	movs	r3, #1
 800748a:	425b      	negs	r3, r3
 800748c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800748e:	2301      	movs	r3, #1
 8007490:	425b      	negs	r3, r3
 8007492:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007494:	2301      	movs	r3, #1
 8007496:	425b      	negs	r3, r3
 8007498:	657b      	str	r3, [r7, #84]	@ 0x54
 800749a:	2301      	movs	r3, #1
 800749c:	425b      	negs	r3, r3
 800749e:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 80074a0:	2290      	movs	r2, #144	@ 0x90
 80074a2:	18bb      	adds	r3, r7, r2
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d100      	bne.n	80074ac <minmea_scan+0x518>
 80074aa:	e0a7      	b.n	80075fc <minmea_scan+0x668>
 80074ac:	18bb      	adds	r3, r7, r2
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f7ff fd48 	bl	8006f48 <minmea_isfield>
 80074b8:	1e03      	subs	r3, r0, #0
 80074ba:	d100      	bne.n	80074be <minmea_scan+0x52a>
 80074bc:	e09e      	b.n	80075fc <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 80074be:	2300      	movs	r3, #0
 80074c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074c2:	e011      	b.n	80074e8 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 80074c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074c6:	2290      	movs	r2, #144	@ 0x90
 80074c8:	18ba      	adds	r2, r7, r2
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	18d3      	adds	r3, r2, r3
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	4b76      	ldr	r3, [pc, #472]	@ (80076ac <minmea_scan+0x718>)
 80074d4:	18d3      	adds	r3, r2, r3
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	001a      	movs	r2, r3
 80074da:	2304      	movs	r3, #4
 80074dc:	4013      	ands	r3, r2
 80074de:	d100      	bne.n	80074e2 <minmea_scan+0x54e>
 80074e0:	e0d9      	b.n	8007696 <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 80074e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074e4:	3301      	adds	r3, #1
 80074e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	ddea      	ble.n	80074c4 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80074ee:	2490      	movs	r4, #144	@ 0x90
 80074f0:	193b      	adds	r3, r7, r4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781a      	ldrb	r2, [r3, #0]
 80074f6:	2110      	movs	r1, #16
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	193b      	adds	r3, r7, r4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	187b      	adds	r3, r7, r1
 8007506:	705a      	strb	r2, [r3, #1]
 8007508:	187b      	adds	r3, r7, r1
 800750a:	2200      	movs	r2, #0
 800750c:	709a      	strb	r2, [r3, #2]
 800750e:	187b      	adds	r3, r7, r1
 8007510:	220a      	movs	r2, #10
 8007512:	2100      	movs	r1, #0
 8007514:	0018      	movs	r0, r3
 8007516:	f007 fd01 	bl	800ef1c <strtol>
 800751a:	0003      	movs	r3, r0
 800751c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800751e:	193b      	adds	r3, r7, r4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3302      	adds	r3, #2
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	210c      	movs	r1, #12
 8007528:	187b      	adds	r3, r7, r1
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	193b      	adds	r3, r7, r4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3303      	adds	r3, #3
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	187b      	adds	r3, r7, r1
 8007536:	705a      	strb	r2, [r3, #1]
 8007538:	187b      	adds	r3, r7, r1
 800753a:	2200      	movs	r2, #0
 800753c:	709a      	strb	r2, [r3, #2]
 800753e:	187b      	adds	r3, r7, r1
 8007540:	220a      	movs	r2, #10
 8007542:	2100      	movs	r1, #0
 8007544:	0018      	movs	r0, r3
 8007546:	f007 fce9 	bl	800ef1c <strtol>
 800754a:	0003      	movs	r3, r0
 800754c:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800754e:	193b      	adds	r3, r7, r4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3304      	adds	r3, #4
 8007554:	781a      	ldrb	r2, [r3, #0]
 8007556:	2108      	movs	r1, #8
 8007558:	187b      	adds	r3, r7, r1
 800755a:	701a      	strb	r2, [r3, #0]
 800755c:	193b      	adds	r3, r7, r4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3305      	adds	r3, #5
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	187b      	adds	r3, r7, r1
 8007566:	705a      	strb	r2, [r3, #1]
 8007568:	187b      	adds	r3, r7, r1
 800756a:	2200      	movs	r2, #0
 800756c:	709a      	strb	r2, [r3, #2]
 800756e:	187b      	adds	r3, r7, r1
 8007570:	220a      	movs	r2, #10
 8007572:	2100      	movs	r1, #0
 8007574:	0018      	movs	r0, r3
 8007576:	f007 fcd1 	bl	800ef1c <strtol>
 800757a:	0003      	movs	r3, r0
 800757c:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 800757e:	193b      	adds	r3, r7, r4
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3306      	adds	r3, #6
 8007584:	193a      	adds	r2, r7, r4
 8007586:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8007588:	193b      	adds	r3, r7, r4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	1939      	adds	r1, r7, r4
 8007590:	600a      	str	r2, [r1, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b2e      	cmp	r3, #46	@ 0x2e
 8007596:	d12f      	bne.n	80075f8 <minmea_scan+0x664>
                        int value = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 800759c:	4b44      	ldr	r3, [pc, #272]	@ (80076b0 <minmea_scan+0x71c>)
 800759e:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80075a0:	e016      	b.n	80075d0 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 80075a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a4:	0013      	movs	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	189b      	adds	r3, r3, r2
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	0019      	movs	r1, r3
 80075ae:	2090      	movs	r0, #144	@ 0x90
 80075b0:	183b      	adds	r3, r7, r0
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	1838      	adds	r0, r7, r0
 80075b8:	6002      	str	r2, [r0, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	3b30      	subs	r3, #48	@ 0x30
 80075be:	18cb      	adds	r3, r1, r3
 80075c0:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 80075c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075c4:	210a      	movs	r1, #10
 80075c6:	0018      	movs	r0, r3
 80075c8:	f7f8 fe4e 	bl	8000268 <__divsi3>
 80075cc:	0003      	movs	r3, r0
 80075ce:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80075d0:	2390      	movs	r3, #144	@ 0x90
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	4b34      	ldr	r3, [pc, #208]	@ (80076ac <minmea_scan+0x718>)
 80075dc:	18d3      	adds	r3, r2, r3
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	001a      	movs	r2, r3
 80075e2:	2304      	movs	r3, #4
 80075e4:	4013      	ands	r3, r2
 80075e6:	d002      	beq.n	80075ee <minmea_scan+0x65a>
 80075e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	dcd9      	bgt.n	80075a2 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 80075ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075f2:	4353      	muls	r3, r2
 80075f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80075f6:	e001      	b.n	80075fc <minmea_scan+0x668>
                    } else {
                        u = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007600:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8007602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007606:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8007608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800760c:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 800760e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007610:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007612:	60da      	str	r2, [r3, #12]
            } break;
 8007614:	e000      	b.n	8007618 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 8007616:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8007618:	e002      	b.n	8007620 <minmea_scan+0x68c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3301      	adds	r3, #1
 800761e:	607b      	str	r3, [r7, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	0018      	movs	r0, r3
 8007626:	f7ff fc8f 	bl	8006f48 <minmea_isfield>
 800762a:	1e03      	subs	r3, r0, #0
 800762c:	d1f5      	bne.n	800761a <minmea_scan+0x686>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b2c      	cmp	r3, #44	@ 0x2c
 8007634:	d107      	bne.n	8007646 <minmea_scan+0x6b2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3301      	adds	r3, #1
 800763a:	607b      	str	r3, [r7, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2290      	movs	r2, #144	@ 0x90
 8007640:	18ba      	adds	r2, r7, r2
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e003      	b.n	800764e <minmea_scan+0x6ba>
 8007646:	2300      	movs	r3, #0
 8007648:	2290      	movs	r2, #144	@ 0x90
 800764a:	18ba      	adds	r2, r7, r2
 800764c:	6013      	str	r3, [r2, #0]
    while (*format) {
 800764e:	23a4      	movs	r3, #164	@ 0xa4
 8007650:	2208      	movs	r2, #8
 8007652:	189b      	adds	r3, r3, r2
 8007654:	19db      	adds	r3, r3, r7
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d000      	beq.n	8007660 <minmea_scan+0x6cc>
 800765e:	e4b0      	b.n	8006fc2 <minmea_scan+0x2e>
    }

    result = true;
 8007660:	2397      	movs	r3, #151	@ 0x97
 8007662:	18fb      	adds	r3, r7, r3
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	e016      	b.n	8007698 <minmea_scan+0x704>
            goto parse_error;
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	e014      	b.n	8007698 <minmea_scan+0x704>
                goto parse_error;
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	e012      	b.n	8007698 <minmea_scan+0x704>
                            goto parse_error;
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	e010      	b.n	8007698 <minmea_scan+0x704>
                                    goto parse_error;
 8007676:	46c0      	nop			@ (mov r8, r8)
 8007678:	e00e      	b.n	8007698 <minmea_scan+0x704>
                            goto parse_error;
 800767a:	46c0      	nop			@ (mov r8, r8)
 800767c:	e00c      	b.n	8007698 <minmea_scan+0x704>
                    goto parse_error;
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	e00a      	b.n	8007698 <minmea_scan+0x704>
                        goto parse_error;
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	e008      	b.n	8007698 <minmea_scan+0x704>
                    goto parse_error;
 8007686:	46c0      	nop			@ (mov r8, r8)
 8007688:	e006      	b.n	8007698 <minmea_scan+0x704>
                    goto parse_error;
 800768a:	46c0      	nop			@ (mov r8, r8)
 800768c:	e004      	b.n	8007698 <minmea_scan+0x704>
                        goto parse_error;
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	e002      	b.n	8007698 <minmea_scan+0x704>
                            goto parse_error;
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	e000      	b.n	8007698 <minmea_scan+0x704>
                            goto parse_error;
 8007696:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8007698:	2397      	movs	r3, #151	@ 0x97
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	781b      	ldrb	r3, [r3, #0]
}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b027      	add	sp, #156	@ 0x9c
 80076a4:	bcb0      	pop	{r4, r5, r7}
 80076a6:	bc08      	pop	{r3}
 80076a8:	b003      	add	sp, #12
 80076aa:	4718      	bx	r3
 80076ac:	080125b8 	.word	0x080125b8
 80076b0:	000f4240 	.word	0x000f4240

080076b4 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 80076b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076b6:	46de      	mov	lr, fp
 80076b8:	4657      	mov	r7, sl
 80076ba:	464e      	mov	r6, r9
 80076bc:	4645      	mov	r5, r8
 80076be:	b5e0      	push	{r5, r6, r7, lr}
 80076c0:	b097      	sub	sp, #92	@ 0x5c
 80076c2:	af0c      	add	r7, sp, #48	@ 0x30
 80076c4:	6178      	str	r0, [r7, #20]
 80076c6:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	001a      	movs	r2, r3
 80076d0:	3210      	adds	r2, #16
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	0019      	movs	r1, r3
 80076d6:	3118      	adds	r1, #24
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	001c      	movs	r4, r3
 80076dc:	3420      	adds	r4, #32
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	001d      	movs	r5, r3
 80076e2:	3524      	adds	r5, #36	@ 0x24
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	001e      	movs	r6, r3
 80076e8:	3628      	adds	r6, #40	@ 0x28
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2030      	movs	r0, #48	@ 0x30
 80076ee:	4684      	mov	ip, r0
 80076f0:	449c      	add	ip, r3
 80076f2:	4663      	mov	r3, ip
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2038      	movs	r0, #56	@ 0x38
 80076fa:	4680      	mov	r8, r0
 80076fc:	4498      	add	r8, r3
 80076fe:	4643      	mov	r3, r8
 8007700:	603b      	str	r3, [r7, #0]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	203c      	movs	r0, #60	@ 0x3c
 8007706:	4681      	mov	r9, r0
 8007708:	4499      	add	r9, r3
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2044      	movs	r0, #68	@ 0x44
 800770e:	4682      	mov	sl, r0
 8007710:	449a      	add	sl, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	3348      	adds	r3, #72	@ 0x48
 8007716:	2010      	movs	r0, #16
 8007718:	4683      	mov	fp, r0
 800771a:	2008      	movs	r0, #8
 800771c:	4684      	mov	ip, r0
 800771e:	2008      	movs	r0, #8
 8007720:	4680      	mov	r8, r0
 8007722:	44b8      	add	r8, r7
 8007724:	44c4      	add	ip, r8
 8007726:	44e3      	add	fp, ip
 8007728:	4658      	mov	r0, fp
 800772a:	60b8      	str	r0, [r7, #8]
 800772c:	482a      	ldr	r0, [pc, #168]	@ (80077d8 <minmea_parse_gga+0x124>)
 800772e:	4683      	mov	fp, r0
 8007730:	6938      	ldr	r0, [r7, #16]
 8007732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007734:	4653      	mov	r3, sl
 8007736:	930a      	str	r3, [sp, #40]	@ 0x28
 8007738:	464b      	mov	r3, r9
 800773a:	9309      	str	r3, [sp, #36]	@ 0x24
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	9308      	str	r3, [sp, #32]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	9606      	str	r6, [sp, #24]
 8007746:	9505      	str	r5, [sp, #20]
 8007748:	9404      	str	r4, [sp, #16]
 800774a:	2408      	movs	r4, #8
 800774c:	2508      	movs	r5, #8
 800774e:	1963      	adds	r3, r4, r5
 8007750:	2408      	movs	r4, #8
 8007752:	46a4      	mov	ip, r4
 8007754:	44bc      	add	ip, r7
 8007756:	4463      	add	r3, ip
 8007758:	9303      	str	r3, [sp, #12]
 800775a:	9102      	str	r1, [sp, #8]
 800775c:	210c      	movs	r1, #12
 800775e:	194b      	adds	r3, r1, r5
 8007760:	2108      	movs	r1, #8
 8007762:	468c      	mov	ip, r1
 8007764:	44bc      	add	ip, r7
 8007766:	4463      	add	r3, ip
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	9200      	str	r2, [sp, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4659      	mov	r1, fp
 8007772:	f7ff fc0f 	bl	8006f94 <minmea_scan>
 8007776:	0003      	movs	r3, r0
 8007778:	001a      	movs	r2, r3
 800777a:	2301      	movs	r3, #1
 800777c:	4053      	eors	r3, r2
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8007784:	2300      	movs	r3, #0
 8007786:	e01d      	b.n	80077c4 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8007788:	2310      	movs	r3, #16
 800778a:	2208      	movs	r2, #8
 800778c:	189b      	adds	r3, r3, r2
 800778e:	2208      	movs	r2, #8
 8007790:	4694      	mov	ip, r2
 8007792:	44bc      	add	ip, r7
 8007794:	4463      	add	r3, ip
 8007796:	3302      	adds	r3, #2
 8007798:	4a10      	ldr	r2, [pc, #64]	@ (80077dc <minmea_parse_gga+0x128>)
 800779a:	0011      	movs	r1, r2
 800779c:	0018      	movs	r0, r3
 800779e:	f7f8 fcb3 	bl	8000108 <strcmp>
 80077a2:	1e03      	subs	r3, r0, #0
 80077a4:	d001      	beq.n	80077aa <minmea_parse_gga+0xf6>
        return false;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e00c      	b.n	80077c4 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	435a      	muls	r2, r3
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	435a      	muls	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	619a      	str	r2, [r3, #24]

    return true;
 80077c2:	2301      	movs	r3, #1
}
 80077c4:	0018      	movs	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	b00b      	add	sp, #44	@ 0x2c
 80077ca:	bcf0      	pop	{r4, r5, r6, r7}
 80077cc:	46bb      	mov	fp, r7
 80077ce:	46b2      	mov	sl, r6
 80077d0:	46a9      	mov	r9, r5
 80077d2:	46a0      	mov	r8, r4
 80077d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d6:	46c0      	nop			@ (mov r8, r8)
 80077d8:	08011c44 	.word	0x08011c44
 80077dc:	08011c24 	.word	0x08011c24

080077e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077e6:	4b11      	ldr	r3, [pc, #68]	@ (800782c <HAL_MspInit+0x4c>)
 80077e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077ea:	4b10      	ldr	r3, [pc, #64]	@ (800782c <HAL_MspInit+0x4c>)
 80077ec:	2101      	movs	r1, #1
 80077ee:	430a      	orrs	r2, r1
 80077f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80077f2:	4b0e      	ldr	r3, [pc, #56]	@ (800782c <HAL_MspInit+0x4c>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f6:	2201      	movs	r2, #1
 80077f8:	4013      	ands	r3, r2
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077fe:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <HAL_MspInit+0x4c>)
 8007800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007802:	4b0a      	ldr	r3, [pc, #40]	@ (800782c <HAL_MspInit+0x4c>)
 8007804:	2180      	movs	r1, #128	@ 0x80
 8007806:	0549      	lsls	r1, r1, #21
 8007808:	430a      	orrs	r2, r1
 800780a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800780c:	4b07      	ldr	r3, [pc, #28]	@ (800782c <HAL_MspInit+0x4c>)
 800780e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007810:	2380      	movs	r3, #128	@ 0x80
 8007812:	055b      	lsls	r3, r3, #21
 8007814:	4013      	ands	r3, r2
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800781a:	23c0      	movs	r3, #192	@ 0xc0
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	0018      	movs	r0, r3
 8007820:	f001 f948 	bl	8008ab4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007824:	46c0      	nop			@ (mov r8, r8)
 8007826:	46bd      	mov	sp, r7
 8007828:	b002      	add	sp, #8
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40021000 	.word	0x40021000

08007830 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007830:	b590      	push	{r4, r7, lr}
 8007832:	b09d      	sub	sp, #116	@ 0x74
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007838:	235c      	movs	r3, #92	@ 0x5c
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	0018      	movs	r0, r3
 800783e:	2314      	movs	r3, #20
 8007840:	001a      	movs	r2, r3
 8007842:	2100      	movs	r1, #0
 8007844:	f007 fd56 	bl	800f2f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007848:	2410      	movs	r4, #16
 800784a:	193b      	adds	r3, r7, r4
 800784c:	0018      	movs	r0, r3
 800784e:	234c      	movs	r3, #76	@ 0x4c
 8007850:	001a      	movs	r2, r3
 8007852:	2100      	movs	r1, #0
 8007854:	f007 fd4e 	bl	800f2f4 <memset>
  if(hi2c->Instance==I2C1)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a23      	ldr	r2, [pc, #140]	@ (80078ec <HAL_I2C_MspInit+0xbc>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d13f      	bne.n	80078e2 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007862:	193b      	adds	r3, r7, r4
 8007864:	2220      	movs	r2, #32
 8007866:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007868:	193b      	adds	r3, r7, r4
 800786a:	2200      	movs	r2, #0
 800786c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800786e:	193b      	adds	r3, r7, r4
 8007870:	0018      	movs	r0, r3
 8007872:	f003 f939 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8007876:	1e03      	subs	r3, r0, #0
 8007878:	d001      	beq.n	800787e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800787a:	f7ff fb5f 	bl	8006f3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800787e:	4b1c      	ldr	r3, [pc, #112]	@ (80078f0 <HAL_I2C_MspInit+0xc0>)
 8007880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007882:	4b1b      	ldr	r3, [pc, #108]	@ (80078f0 <HAL_I2C_MspInit+0xc0>)
 8007884:	2101      	movs	r1, #1
 8007886:	430a      	orrs	r2, r1
 8007888:	635a      	str	r2, [r3, #52]	@ 0x34
 800788a:	4b19      	ldr	r3, [pc, #100]	@ (80078f0 <HAL_I2C_MspInit+0xc0>)
 800788c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800788e:	2201      	movs	r2, #1
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007896:	215c      	movs	r1, #92	@ 0x5c
 8007898:	187b      	adds	r3, r7, r1
 800789a:	22c0      	movs	r2, #192	@ 0xc0
 800789c:	00d2      	lsls	r2, r2, #3
 800789e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80078a0:	187b      	adds	r3, r7, r1
 80078a2:	2212      	movs	r2, #18
 80078a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a6:	187b      	adds	r3, r7, r1
 80078a8:	2200      	movs	r2, #0
 80078aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ac:	187b      	adds	r3, r7, r1
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	2206      	movs	r2, #6
 80078b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078b8:	187a      	adds	r2, r7, r1
 80078ba:	23a0      	movs	r3, #160	@ 0xa0
 80078bc:	05db      	lsls	r3, r3, #23
 80078be:	0011      	movs	r1, r2
 80078c0:	0018      	movs	r0, r3
 80078c2:	f001 fb9d 	bl	8009000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078c6:	4b0a      	ldr	r3, [pc, #40]	@ (80078f0 <HAL_I2C_MspInit+0xc0>)
 80078c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078ca:	4b09      	ldr	r3, [pc, #36]	@ (80078f0 <HAL_I2C_MspInit+0xc0>)
 80078cc:	2180      	movs	r1, #128	@ 0x80
 80078ce:	0389      	lsls	r1, r1, #14
 80078d0:	430a      	orrs	r2, r1
 80078d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80078d4:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <HAL_I2C_MspInit+0xc0>)
 80078d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078d8:	2380      	movs	r3, #128	@ 0x80
 80078da:	039b      	lsls	r3, r3, #14
 80078dc:	4013      	ands	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]
 80078e0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b01d      	add	sp, #116	@ 0x74
 80078e8:	bd90      	pop	{r4, r7, pc}
 80078ea:	46c0      	nop			@ (mov r8, r8)
 80078ec:	40005400 	.word	0x40005400
 80078f0:	40021000 	.word	0x40021000

080078f4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b097      	sub	sp, #92	@ 0x5c
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078fc:	240c      	movs	r4, #12
 80078fe:	193b      	adds	r3, r7, r4
 8007900:	0018      	movs	r0, r3
 8007902:	234c      	movs	r3, #76	@ 0x4c
 8007904:	001a      	movs	r2, r3
 8007906:	2100      	movs	r1, #0
 8007908:	f007 fcf4 	bl	800f2f4 <memset>
  if(hrtc->Instance==RTC)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a19      	ldr	r2, [pc, #100]	@ (8007978 <HAL_RTC_MspInit+0x84>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d12c      	bne.n	8007970 <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007916:	193b      	adds	r3, r7, r4
 8007918:	2280      	movs	r2, #128	@ 0x80
 800791a:	0292      	lsls	r2, r2, #10
 800791c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800791e:	193b      	adds	r3, r7, r4
 8007920:	2280      	movs	r2, #128	@ 0x80
 8007922:	0092      	lsls	r2, r2, #2
 8007924:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007926:	193b      	adds	r3, r7, r4
 8007928:	0018      	movs	r0, r3
 800792a:	f003 f8dd 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 800792e:	1e03      	subs	r3, r0, #0
 8007930:	d001      	beq.n	8007936 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007932:	f7ff fb03 	bl	8006f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007936:	4b11      	ldr	r3, [pc, #68]	@ (800797c <HAL_RTC_MspInit+0x88>)
 8007938:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800793a:	4b10      	ldr	r3, [pc, #64]	@ (800797c <HAL_RTC_MspInit+0x88>)
 800793c:	2180      	movs	r1, #128	@ 0x80
 800793e:	0209      	lsls	r1, r1, #8
 8007940:	430a      	orrs	r2, r1
 8007942:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007944:	4b0d      	ldr	r3, [pc, #52]	@ (800797c <HAL_RTC_MspInit+0x88>)
 8007946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <HAL_RTC_MspInit+0x88>)
 800794a:	2180      	movs	r1, #128	@ 0x80
 800794c:	00c9      	lsls	r1, r1, #3
 800794e:	430a      	orrs	r2, r1
 8007950:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <HAL_RTC_MspInit+0x88>)
 8007954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007956:	2380      	movs	r3, #128	@ 0x80
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	4013      	ands	r3, r2
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8007960:	2200      	movs	r2, #0
 8007962:	2100      	movs	r1, #0
 8007964:	2002      	movs	r0, #2
 8007966:	f001 f967 	bl	8008c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800796a:	2002      	movs	r0, #2
 800796c:	f001 f979 	bl	8008c62 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007970:	46c0      	nop			@ (mov r8, r8)
 8007972:	46bd      	mov	sp, r7
 8007974:	b017      	add	sp, #92	@ 0x5c
 8007976:	bd90      	pop	{r4, r7, pc}
 8007978:	40002800 	.word	0x40002800
 800797c:	40021000 	.word	0x40021000

08007980 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b08b      	sub	sp, #44	@ 0x2c
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007988:	2414      	movs	r4, #20
 800798a:	193b      	adds	r3, r7, r4
 800798c:	0018      	movs	r0, r3
 800798e:	2314      	movs	r3, #20
 8007990:	001a      	movs	r2, r3
 8007992:	2100      	movs	r1, #0
 8007994:	f007 fcae 	bl	800f2f4 <memset>
  if(hspi->Instance==SPI1)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a2c      	ldr	r2, [pc, #176]	@ (8007a50 <HAL_SPI_MspInit+0xd0>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d151      	bne.n	8007a46 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80079a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079a8:	2180      	movs	r1, #128	@ 0x80
 80079aa:	0149      	lsls	r1, r1, #5
 80079ac:	430a      	orrs	r2, r1
 80079ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80079b0:	4b28      	ldr	r3, [pc, #160]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079b4:	2380      	movs	r3, #128	@ 0x80
 80079b6:	015b      	lsls	r3, r3, #5
 80079b8:	4013      	ands	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
 80079bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079be:	4b25      	ldr	r3, [pc, #148]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c2:	4b24      	ldr	r3, [pc, #144]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079c4:	2101      	movs	r1, #1
 80079c6:	430a      	orrs	r2, r1
 80079c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80079ca:	4b22      	ldr	r3, [pc, #136]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ce:	2201      	movs	r2, #1
 80079d0:	4013      	ands	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80079d6:	4b1f      	ldr	r3, [pc, #124]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079da:	4b1e      	ldr	r3, [pc, #120]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079dc:	2108      	movs	r1, #8
 80079de:	430a      	orrs	r2, r1
 80079e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80079e2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a54 <HAL_SPI_MspInit+0xd4>)
 80079e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e6:	2208      	movs	r2, #8
 80079e8:	4013      	ands	r3, r2
 80079ea:	60bb      	str	r3, [r7, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80079ee:	193b      	adds	r3, r7, r4
 80079f0:	2202      	movs	r2, #2
 80079f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f4:	193b      	adds	r3, r7, r4
 80079f6:	2202      	movs	r2, #2
 80079f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079fa:	193b      	adds	r3, r7, r4
 80079fc:	2200      	movs	r2, #0
 80079fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a00:	193b      	adds	r3, r7, r4
 8007a02:	2200      	movs	r2, #0
 8007a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007a06:	193b      	adds	r3, r7, r4
 8007a08:	2200      	movs	r2, #0
 8007a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a0c:	193a      	adds	r2, r7, r4
 8007a0e:	23a0      	movs	r3, #160	@ 0xa0
 8007a10:	05db      	lsls	r3, r3, #23
 8007a12:	0011      	movs	r1, r2
 8007a14:	0018      	movs	r0, r3
 8007a16:	f001 faf3 	bl	8009000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007a1a:	0021      	movs	r1, r4
 8007a1c:	187b      	adds	r3, r7, r1
 8007a1e:	2260      	movs	r2, #96	@ 0x60
 8007a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a22:	187b      	adds	r3, r7, r1
 8007a24:	2202      	movs	r2, #2
 8007a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a28:	187b      	adds	r3, r7, r1
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a2e:	187b      	adds	r3, r7, r1
 8007a30:	2200      	movs	r2, #0
 8007a32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007a34:	187b      	adds	r3, r7, r1
 8007a36:	2201      	movs	r2, #1
 8007a38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a3a:	187b      	adds	r3, r7, r1
 8007a3c:	4a06      	ldr	r2, [pc, #24]	@ (8007a58 <HAL_SPI_MspInit+0xd8>)
 8007a3e:	0019      	movs	r1, r3
 8007a40:	0010      	movs	r0, r2
 8007a42:	f001 fadd 	bl	8009000 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b00b      	add	sp, #44	@ 0x2c
 8007a4c:	bd90      	pop	{r4, r7, pc}
 8007a4e:	46c0      	nop			@ (mov r8, r8)
 8007a50:	40013000 	.word	0x40013000
 8007a54:	40021000 	.word	0x40021000
 8007a58:	50000c00 	.word	0x50000c00

08007a5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a0a      	ldr	r2, [pc, #40]	@ (8007a94 <HAL_TIM_Base_MspInit+0x38>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d10d      	bne.n	8007a8a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <HAL_TIM_Base_MspInit+0x3c>)
 8007a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a72:	4b09      	ldr	r3, [pc, #36]	@ (8007a98 <HAL_TIM_Base_MspInit+0x3c>)
 8007a74:	2180      	movs	r1, #128	@ 0x80
 8007a76:	02c9      	lsls	r1, r1, #11
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a7c:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <HAL_TIM_Base_MspInit+0x3c>)
 8007a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a80:	2380      	movs	r3, #128	@ 0x80
 8007a82:	02db      	lsls	r3, r3, #11
 8007a84:	4013      	ands	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	40014800 	.word	0x40014800
 8007a98:	40021000 	.word	0x40021000

08007a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007a9c:	b590      	push	{r4, r7, lr}
 8007a9e:	b089      	sub	sp, #36	@ 0x24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aa4:	240c      	movs	r4, #12
 8007aa6:	193b      	adds	r3, r7, r4
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	2314      	movs	r3, #20
 8007aac:	001a      	movs	r2, r3
 8007aae:	2100      	movs	r1, #0
 8007ab0:	f007 fc20 	bl	800f2f4 <memset>
  if(htim->Instance==TIM17)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a14      	ldr	r2, [pc, #80]	@ (8007b0c <HAL_TIM_MspPostInit+0x70>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d122      	bne.n	8007b04 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007abe:	4b14      	ldr	r3, [pc, #80]	@ (8007b10 <HAL_TIM_MspPostInit+0x74>)
 8007ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ac2:	4b13      	ldr	r3, [pc, #76]	@ (8007b10 <HAL_TIM_MspPostInit+0x74>)
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8007aca:	4b11      	ldr	r3, [pc, #68]	@ (8007b10 <HAL_TIM_MspPostInit+0x74>)
 8007acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60bb      	str	r3, [r7, #8]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007ad6:	0021      	movs	r1, r4
 8007ad8:	187b      	adds	r3, r7, r1
 8007ada:	2280      	movs	r2, #128	@ 0x80
 8007adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ade:	187b      	adds	r3, r7, r1
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae4:	187b      	adds	r3, r7, r1
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aea:	187b      	adds	r3, r7, r1
 8007aec:	2200      	movs	r2, #0
 8007aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8007af0:	187b      	adds	r3, r7, r1
 8007af2:	2205      	movs	r2, #5
 8007af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007af6:	187a      	adds	r2, r7, r1
 8007af8:	23a0      	movs	r3, #160	@ 0xa0
 8007afa:	05db      	lsls	r3, r3, #23
 8007afc:	0011      	movs	r1, r2
 8007afe:	0018      	movs	r0, r3
 8007b00:	f001 fa7e 	bl	8009000 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8007b04:	46c0      	nop			@ (mov r8, r8)
 8007b06:	46bd      	mov	sp, r7
 8007b08:	b009      	add	sp, #36	@ 0x24
 8007b0a:	bd90      	pop	{r4, r7, pc}
 8007b0c:	40014800 	.word	0x40014800
 8007b10:	40021000 	.word	0x40021000

08007b14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b14:	b590      	push	{r4, r7, lr}
 8007b16:	b09f      	sub	sp, #124	@ 0x7c
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b1c:	2364      	movs	r3, #100	@ 0x64
 8007b1e:	18fb      	adds	r3, r7, r3
 8007b20:	0018      	movs	r0, r3
 8007b22:	2314      	movs	r3, #20
 8007b24:	001a      	movs	r2, r3
 8007b26:	2100      	movs	r1, #0
 8007b28:	f007 fbe4 	bl	800f2f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b2c:	2418      	movs	r4, #24
 8007b2e:	193b      	adds	r3, r7, r4
 8007b30:	0018      	movs	r0, r3
 8007b32:	234c      	movs	r3, #76	@ 0x4c
 8007b34:	001a      	movs	r2, r3
 8007b36:	2100      	movs	r1, #0
 8007b38:	f007 fbdc 	bl	800f2f4 <memset>
  if(huart->Instance==USART1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a45      	ldr	r2, [pc, #276]	@ (8007c58 <HAL_UART_MspInit+0x144>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d13e      	bne.n	8007bc4 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007b46:	193b      	adds	r3, r7, r4
 8007b48:	2201      	movs	r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007b4c:	193b      	adds	r3, r7, r4
 8007b4e:	2200      	movs	r2, #0
 8007b50:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b52:	193b      	adds	r3, r7, r4
 8007b54:	0018      	movs	r0, r3
 8007b56:	f002 ffc7 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8007b5a:	1e03      	subs	r3, r0, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007b5e:	f7ff f9ed 	bl	8006f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007b62:	4b3e      	ldr	r3, [pc, #248]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b66:	4b3d      	ldr	r3, [pc, #244]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007b68:	2180      	movs	r1, #128	@ 0x80
 8007b6a:	01c9      	lsls	r1, r1, #7
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007b70:	4b3a      	ldr	r3, [pc, #232]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b74:	2380      	movs	r3, #128	@ 0x80
 8007b76:	01db      	lsls	r3, r3, #7
 8007b78:	4013      	ands	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b7e:	4b37      	ldr	r3, [pc, #220]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b82:	4b36      	ldr	r3, [pc, #216]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007b84:	2104      	movs	r1, #4
 8007b86:	430a      	orrs	r2, r1
 8007b88:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b8a:	4b34      	ldr	r3, [pc, #208]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b8e:	2204      	movs	r2, #4
 8007b90:	4013      	ands	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007b96:	2164      	movs	r1, #100	@ 0x64
 8007b98:	187b      	adds	r3, r7, r1
 8007b9a:	2230      	movs	r2, #48	@ 0x30
 8007b9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b9e:	187b      	adds	r3, r7, r1
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	187b      	adds	r3, r7, r1
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007baa:	187b      	adds	r3, r7, r1
 8007bac:	2200      	movs	r2, #0
 8007bae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007bb0:	187b      	adds	r3, r7, r1
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bb6:	187b      	adds	r3, r7, r1
 8007bb8:	4a29      	ldr	r2, [pc, #164]	@ (8007c60 <HAL_UART_MspInit+0x14c>)
 8007bba:	0019      	movs	r1, r3
 8007bbc:	0010      	movs	r0, r2
 8007bbe:	f001 fa1f 	bl	8009000 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8007bc2:	e044      	b.n	8007c4e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a26      	ldr	r2, [pc, #152]	@ (8007c64 <HAL_UART_MspInit+0x150>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d13f      	bne.n	8007c4e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007bce:	2118      	movs	r1, #24
 8007bd0:	187b      	adds	r3, r7, r1
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007bd6:	187b      	adds	r3, r7, r1
 8007bd8:	2200      	movs	r2, #0
 8007bda:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007bdc:	187b      	adds	r3, r7, r1
 8007bde:	0018      	movs	r0, r3
 8007be0:	f002 ff82 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8007be4:	1e03      	subs	r3, r0, #0
 8007be6:	d001      	beq.n	8007bec <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8007be8:	f7ff f9a8 	bl	8006f3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007bec:	4b1b      	ldr	r3, [pc, #108]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007bf2:	2180      	movs	r1, #128	@ 0x80
 8007bf4:	0289      	lsls	r1, r1, #10
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007bfa:	4b18      	ldr	r3, [pc, #96]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bfe:	2380      	movs	r3, #128	@ 0x80
 8007c00:	029b      	lsls	r3, r3, #10
 8007c02:	4013      	ands	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c08:	4b14      	ldr	r3, [pc, #80]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007c0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c0c:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007c0e:	2101      	movs	r1, #1
 8007c10:	430a      	orrs	r2, r1
 8007c12:	635a      	str	r2, [r3, #52]	@ 0x34
 8007c14:	4b11      	ldr	r3, [pc, #68]	@ (8007c5c <HAL_UART_MspInit+0x148>)
 8007c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c18:	2201      	movs	r2, #1
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007c20:	2164      	movs	r1, #100	@ 0x64
 8007c22:	187b      	adds	r3, r7, r1
 8007c24:	220c      	movs	r2, #12
 8007c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c28:	187b      	adds	r3, r7, r1
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	2200      	movs	r2, #0
 8007c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c34:	187b      	adds	r3, r7, r1
 8007c36:	2200      	movs	r2, #0
 8007c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007c3a:	187b      	adds	r3, r7, r1
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c40:	187a      	adds	r2, r7, r1
 8007c42:	23a0      	movs	r3, #160	@ 0xa0
 8007c44:	05db      	lsls	r3, r3, #23
 8007c46:	0011      	movs	r1, r2
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f001 f9d9 	bl	8009000 <HAL_GPIO_Init>
}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b01f      	add	sp, #124	@ 0x7c
 8007c54:	bd90      	pop	{r4, r7, pc}
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	40013800 	.word	0x40013800
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	50000800 	.word	0x50000800
 8007c64:	40004400 	.word	0x40004400

08007c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007c6c:	46c0      	nop			@ (mov r8, r8)
 8007c6e:	e7fd      	b.n	8007c6c <NMI_Handler+0x4>

08007c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c74:	46c0      	nop			@ (mov r8, r8)
 8007c76:	e7fd      	b.n	8007c74 <HardFault_Handler+0x4>

08007c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007c7c:	46c0      	nop			@ (mov r8, r8)
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c86:	46c0      	nop			@ (mov r8, r8)
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c90:	f000 fed0 	bl	8008a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c94:	46c0      	nop			@ (mov r8, r8)
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8007ca0:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <RTC_TAMP_IRQHandler+0x1c>)
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f003 fd3e 	bl	800b724 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007ca8:	4b03      	ldr	r3, [pc, #12]	@ (8007cb8 <RTC_TAMP_IRQHandler+0x1c>)
 8007caa:	0018      	movs	r0, r3
 8007cac:	f003 ff04 	bl	800bab8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8007cb0:	46c0      	nop			@ (mov r8, r8)
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	46c0      	nop			@ (mov r8, r8)
 8007cb8:	200035ec 	.word	0x200035ec

08007cbc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007cc0:	2002      	movs	r0, #2
 8007cc2:	f001 fb43 	bl	800934c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8007cc6:	46c0      	nop			@ (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007cd0:	2004      	movs	r0, #4
 8007cd2:	f001 fb3b 	bl	800934c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007ce0:	2380      	movs	r3, #128	@ 0x80
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f001 fb31 	bl	800934c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  return 1;
 8007cf4:	2301      	movs	r3, #1
}
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <_kill>:

int _kill(int pid, int sig)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007d06:	f007 fb5d 	bl	800f3c4 <__errno>
 8007d0a:	0003      	movs	r3, r0
 8007d0c:	2216      	movs	r2, #22
 8007d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8007d10:	2301      	movs	r3, #1
 8007d12:	425b      	negs	r3, r3
}
 8007d14:	0018      	movs	r0, r3
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b002      	add	sp, #8
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <_exit>:

void _exit (int status)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007d24:	2301      	movs	r3, #1
 8007d26:	425a      	negs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	0011      	movs	r1, r2
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	f7ff ffe5 	bl	8007cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8007d32:	46c0      	nop			@ (mov r8, r8)
 8007d34:	e7fd      	b.n	8007d32 <_exit+0x16>

08007d36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b086      	sub	sp, #24
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d42:	2300      	movs	r3, #0
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	e00a      	b.n	8007d5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007d48:	e000      	b.n	8007d4c <_read+0x16>
 8007d4a:	bf00      	nop
 8007d4c:	0001      	movs	r1, r0
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	1c5a      	adds	r2, r3, #1
 8007d52:	60ba      	str	r2, [r7, #8]
 8007d54:	b2ca      	uxtb	r2, r1
 8007d56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	dbf0      	blt.n	8007d48 <_read+0x12>
  }

  return len;
 8007d66:	687b      	ldr	r3, [r7, #4]
}
 8007d68:	0018      	movs	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b006      	add	sp, #24
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e009      	b.n	8007d96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	60ba      	str	r2, [r7, #8]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	e000      	b.n	8007d90 <_write+0x20>
 8007d8e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	3301      	adds	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	dbf1      	blt.n	8007d82 <_write+0x12>
  }
  return len;
 8007d9e:	687b      	ldr	r3, [r7, #4]
}
 8007da0:	0018      	movs	r0, r3
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b006      	add	sp, #24
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <_close>:

int _close(int file)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007db0:	2301      	movs	r3, #1
 8007db2:	425b      	negs	r3, r3
}
 8007db4:	0018      	movs	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b002      	add	sp, #8
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2280      	movs	r2, #128	@ 0x80
 8007dca:	0192      	lsls	r2, r2, #6
 8007dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b002      	add	sp, #8
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <_isatty>:

int _isatty(int file)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007de0:	2301      	movs	r3, #1
}
 8007de2:	0018      	movs	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b002      	add	sp, #8
 8007de8:	bd80      	pop	{r7, pc}

08007dea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b004      	add	sp, #16
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007e08:	4a14      	ldr	r2, [pc, #80]	@ (8007e5c <_sbrk+0x5c>)
 8007e0a:	4b15      	ldr	r3, [pc, #84]	@ (8007e60 <_sbrk+0x60>)
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <_sbrk+0x64>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007e1c:	4b11      	ldr	r3, [pc, #68]	@ (8007e64 <_sbrk+0x64>)
 8007e1e:	4a12      	ldr	r2, [pc, #72]	@ (8007e68 <_sbrk+0x68>)
 8007e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007e22:	4b10      	ldr	r3, [pc, #64]	@ (8007e64 <_sbrk+0x64>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	18d3      	adds	r3, r2, r3
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d207      	bcs.n	8007e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007e30:	f007 fac8 	bl	800f3c4 <__errno>
 8007e34:	0003      	movs	r3, r0
 8007e36:	220c      	movs	r2, #12
 8007e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	e009      	b.n	8007e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007e40:	4b08      	ldr	r3, [pc, #32]	@ (8007e64 <_sbrk+0x64>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007e46:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <_sbrk+0x64>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	18d2      	adds	r2, r2, r3
 8007e4e:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <_sbrk+0x64>)
 8007e50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	0018      	movs	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	b006      	add	sp, #24
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20024000 	.word	0x20024000
 8007e60:	00000400 	.word	0x00000400
 8007e64:	200037f0 	.word	0x200037f0
 8007e68:	20003960 	.word	0x20003960

08007e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007e70:	46c0      	nop			@ (mov r8, r8)
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
    return property->u.value;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b002      	add	sp, #8
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
    return json->type;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7c1b      	ldrb	r3, [r3, #16]
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b002      	add	sp, #8
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	e011      	b.n	8007ed4 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <json_getProperty+0x30>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	0011      	movs	r1, r2
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	f7f8 f921 	bl	8000108 <strcmp>
 8007ec6:	1e03      	subs	r3, r0, #0
 8007ec8:	d101      	bne.n	8007ece <json_getProperty+0x30>
            return sibling;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	e006      	b.n	8007edc <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1ea      	bne.n	8007eb0 <json_getProperty+0x12>
    return 0;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	0018      	movs	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b004      	add	sp, #16
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 8007ee4:	b5b0      	push	{r4, r5, r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	0011      	movs	r1, r2
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	f7ff ffd2 	bl	8007e9e <json_getProperty>
 8007efa:	0003      	movs	r3, r0
 8007efc:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <json_getPropertyValue+0x24>
 8007f04:	2300      	movs	r3, #0
 8007f06:	e012      	b.n	8007f2e <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 8007f08:	250b      	movs	r5, #11
 8007f0a:	197c      	adds	r4, r7, r5
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f7ff ffbb 	bl	8007e8a <json_getType>
 8007f14:	0003      	movs	r3, r0
 8007f16:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 8007f18:	197b      	adds	r3, r7, r5
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d801      	bhi.n	8007f24 <json_getPropertyValue+0x40>
 8007f20:	2300      	movs	r3, #0
 8007f22:	e004      	b.n	8007f2e <json_getPropertyValue+0x4a>
	return json_getValue( field );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	0018      	movs	r0, r3
 8007f28:	f7ff ffa5 	bl	8007e76 <json_getValue>
 8007f2c:	0003      	movs	r3, r0
}
 8007f2e:	0018      	movs	r0, r3
 8007f30:	46bd      	mov	sp, r7
 8007f32:	b004      	add	sp, #16
 8007f34:	bdb0      	pop	{r4, r5, r7, pc}

08007f36 <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	0018      	movs	r0, r3
 8007f44:	f000 fc66 	bl	8008814 <goBlank>
 8007f48:	0003      	movs	r3, r0
 8007f4a:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <json_createWithPool+0x2c>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b7b      	cmp	r3, #123	@ 0x7b
 8007f58:	d005      	beq.n	8007f66 <json_createWithPool+0x30>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007f60:	d001      	beq.n	8007f66 <json_createWithPool+0x30>
 8007f62:	2300      	movs	r3, #0
 8007f64:	e01d      	b.n	8007fa2 <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	0010      	movs	r0, r2
 8007f6e:	4798      	blx	r3
 8007f70:	0003      	movs	r3, r0
 8007f72:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2200      	movs	r2, #0
 8007f78:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f000 faeb 	bl	8008568 <objValue>
 8007f92:	0003      	movs	r3, r0
 8007f94:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <json_createWithPool+0x6a>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e000      	b.n	8007fa2 <json_createWithPool+0x6c>
    return obj;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
}
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	b004      	add	sp, #16
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	@ 0x28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 8007fb8:	2114      	movs	r1, #20
 8007fba:	187b      	adds	r3, r7, r1
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 8007fc0:	187b      	adds	r3, r7, r1
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 8007fc6:	187b      	adds	r3, r7, r1
 8007fc8:	4a08      	ldr	r2, [pc, #32]	@ (8007fec <json_create+0x40>)
 8007fca:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 8007fcc:	187b      	adds	r3, r7, r1
 8007fce:	4a08      	ldr	r2, [pc, #32]	@ (8007ff0 <json_create+0x44>)
 8007fd0:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 8007fd2:	187b      	adds	r3, r7, r1
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	0011      	movs	r1, r2
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f7ff ffaa 	bl	8007f36 <json_createWithPool>
 8007fe2:	0003      	movs	r3, r0
}
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b00a      	add	sp, #40	@ 0x28
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	0800873d 	.word	0x0800873d
 8007ff0:	0800875d 	.word	0x0800875d

08007ff4 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	0002      	movs	r2, r0
 8007ffc:	1dfb      	adds	r3, r7, #7
 8007ffe:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]
 8008004:	e011      	b.n	800802a <getEscape+0x36>
        if ( pair[i].ch == ch )
 8008006:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <getEscape+0x48>)
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	0052      	lsls	r2, r2, #1
 800800c:	5cd3      	ldrb	r3, [r2, r3]
 800800e:	1dfa      	adds	r2, r7, #7
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d106      	bne.n	8008024 <getEscape+0x30>
            return pair[i].code;
 8008016:	4a09      	ldr	r2, [pc, #36]	@ (800803c <getEscape+0x48>)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	18d3      	adds	r3, r2, r3
 800801e:	3301      	adds	r3, #1
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	e006      	b.n	8008032 <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3301      	adds	r3, #1
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b07      	cmp	r3, #7
 800802e:	d9ea      	bls.n	8008006 <getEscape+0x12>
    return '\0';
 8008030:	2300      	movs	r3, #0
}
 8008032:	0018      	movs	r0, r3
 8008034:	46bd      	mov	sp, r7
 8008036:	b004      	add	sp, #16
 8008038:	bd80      	pop	{r7, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	080124a0 	.word	0x080124a0

08008040 <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e010      	b.n	8008070 <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	18d3      	adds	r3, r2, r3
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	4b09      	ldr	r3, [pc, #36]	@ (8008080 <getCharFromUnicode+0x40>)
 800805a:	18d3      	adds	r3, r2, r3
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	001a      	movs	r2, r3
 8008060:	2344      	movs	r3, #68	@ 0x44
 8008062:	4013      	ands	r3, r2
 8008064:	d101      	bne.n	800806a <getCharFromUnicode+0x2a>
            return '\0';
 8008066:	2300      	movs	r3, #0
 8008068:	e006      	b.n	8008078 <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b03      	cmp	r3, #3
 8008074:	d9eb      	bls.n	800804e <getCharFromUnicode+0xe>
    return '?';
 8008076:	233f      	movs	r3, #63	@ 0x3f
}
 8008078:	0018      	movs	r0, r3
 800807a:	46bd      	mov	sp, r7
 800807c:	b004      	add	sp, #16
 800807e:	bd80      	pop	{r7, pc}
 8008080:	080125b8 	.word	0x080125b8

08008084 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 8008084:	b5b0      	push	{r4, r5, r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 8008094:	e04f      	b.n	8008136 <parseString+0xb2>
        if ( *head == '\"' ) {
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b22      	cmp	r3, #34	@ 0x22
 800809c:	d107      	bne.n	80080ae <parseString+0x2a>
            *tail = '\0';
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	3301      	adds	r3, #1
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	e048      	b.n	8008140 <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b5c      	cmp	r3, #92	@ 0x5c
 80080b4:	d135      	bne.n	8008122 <parseString+0x9e>
            if ( *++head == 'u' ) {
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	3301      	adds	r3, #1
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b75      	cmp	r3, #117	@ 0x75
 80080c2:	d119      	bne.n	80080f8 <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	3301      	adds	r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	250e      	movs	r5, #14
 80080cc:	197c      	adds	r4, r7, r5
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7ff ffb5 	bl	8008040 <getCharFromUnicode>
 80080d6:	0003      	movs	r3, r0
 80080d8:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 80080da:	197b      	adds	r3, r7, r5
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <parseString+0x62>
 80080e2:	2300      	movs	r3, #0
 80080e4:	e02c      	b.n	8008140 <parseString+0xbc>
                *tail = ch;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	220e      	movs	r2, #14
 80080ea:	18ba      	adds	r2, r7, r2
 80080ec:	7812      	ldrb	r2, [r2, #0]
 80080ee:	701a      	strb	r2, [r3, #0]
                head += 3;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	3303      	adds	r3, #3
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	e018      	b.n	800812a <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	250f      	movs	r5, #15
 80080fe:	197c      	adds	r4, r7, r5
 8008100:	0018      	movs	r0, r3
 8008102:	f7ff ff77 	bl	8007ff4 <getEscape>
 8008106:	0003      	movs	r3, r0
 8008108:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 800810a:	197b      	adds	r3, r7, r5
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <parseString+0x92>
 8008112:	2300      	movs	r3, #0
 8008114:	e014      	b.n	8008140 <parseString+0xbc>
                *tail = esc;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	220f      	movs	r2, #15
 800811a:	18ba      	adds	r2, r7, r2
 800811c:	7812      	ldrb	r2, [r2, #0]
 800811e:	701a      	strb	r2, [r3, #0]
 8008120:	e003      	b.n	800812a <parseString+0xa6>
            }
        }
        else *tail = *head;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	781a      	ldrb	r2, [r3, #0]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	3301      	adds	r3, #1
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	3301      	adds	r3, #1
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1ab      	bne.n	8008096 <parseString+0x12>
    }
    return 0;
 800813e:	2300      	movs	r3, #0
}
 8008140:	0018      	movs	r0, r3
 8008142:	46bd      	mov	sp, r7
 8008144:	b006      	add	sp, #24
 8008146:	bdb0      	pop	{r4, r5, r7, pc}

08008148 <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3301      	adds	r3, #1
 8008156:	607b      	str	r3, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	0018      	movs	r0, r3
 8008162:	f7ff ff8f 	bl	8008084 <parseString>
 8008166:	0003      	movs	r3, r0
 8008168:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <propertyName+0x2c>
 8008170:	2300      	movs	r3, #0
 8008172:	e017      	b.n	80081a4 <propertyName+0x5c>
    ptr = goBlank( ptr );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	0018      	movs	r0, r3
 8008178:	f000 fb4c 	bl	8008814 <goBlank>
 800817c:	0003      	movs	r3, r0
 800817e:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <propertyName+0x42>
 8008186:	2300      	movs	r3, #0
 8008188:	e00c      	b.n	80081a4 <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b3a      	cmp	r3, #58	@ 0x3a
 8008194:	d001      	beq.n	800819a <propertyName+0x52>
 8008196:	2300      	movs	r3, #0
 8008198:	e004      	b.n	80081a4 <propertyName+0x5c>
    return goBlank( ptr );
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	0018      	movs	r0, r3
 800819e:	f000 fb39 	bl	8008814 <goBlank>
 80081a2:	0003      	movs	r3, r0
}
 80081a4:	0018      	movs	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b002      	add	sp, #8
 80081aa:	bd80      	pop	{r7, pc}

080081ac <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3301      	adds	r3, #1
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	0018      	movs	r0, r3
 80081ca:	f7ff ff5b 	bl	8008084 <parseString>
 80081ce:	0003      	movs	r3, r0
 80081d0:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <textValue+0x30>
 80081d8:	2300      	movs	r3, #0
 80081da:	e003      	b.n	80081e4 <textValue+0x38>
    property->type = JSON_TEXT;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2202      	movs	r2, #2
 80081e0:	741a      	strb	r2, [r3, #16]
    return ptr;
 80081e2:	687b      	ldr	r3, [r7, #4]
}
 80081e4:	0018      	movs	r0, r3
 80081e6:	46bd      	mov	sp, r7
 80081e8:	b002      	add	sp, #8
 80081ea:	bd80      	pop	{r7, pc}

080081ec <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
    while( *str )
 80081f6:	e00b      	b.n	8008210 <checkStr+0x24>
        if ( *ptr++ != *str++ )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	781a      	ldrb	r2, [r3, #0]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1c59      	adds	r1, r3, #1
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	429a      	cmp	r2, r3
 800820a:	d001      	beq.n	8008210 <checkStr+0x24>
            return 0;
 800820c:	2300      	movs	r3, #0
 800820e:	e004      	b.n	800821a <checkStr+0x2e>
    while( *str )
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1ef      	bne.n	80081f8 <checkStr+0xc>
    return ptr;
 8008218:	687b      	ldr	r3, [r7, #4]
}
 800821a:	0018      	movs	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	b002      	add	sp, #8
 8008220:	bd80      	pop	{r7, pc}

08008222 <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	001a      	movs	r2, r3
 8008230:	1cfb      	adds	r3, r7, #3
 8008232:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	0011      	movs	r1, r2
 800823a:	0018      	movs	r0, r3
 800823c:	f7ff ffd6 	bl	80081ec <checkStr>
 8008240:	0003      	movs	r3, r0
 8008242:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <primitiveValue+0x40>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	0018      	movs	r0, r3
 8008250:	f000 fb30 	bl	80088b4 <isEndOfPrimitive>
 8008254:	0003      	movs	r3, r0
 8008256:	001a      	movs	r2, r3
 8008258:	2301      	movs	r3, #1
 800825a:	4053      	eors	r3, r2
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <primitiveValue+0x44>
 8008262:	2300      	movs	r3, #0
 8008264:	e00a      	b.n	800827c <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	0018      	movs	r0, r3
 800826a:	f000 fb05 	bl	8008878 <setToNull>
 800826e:	0003      	movs	r3, r0
 8008270:	60fb      	str	r3, [r7, #12]
    property->type = type;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1cfa      	adds	r2, r7, #3
 8008276:	7812      	ldrb	r2, [r2, #0]
 8008278:	741a      	strb	r2, [r3, #16]
    return ptr;
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	0018      	movs	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	b004      	add	sp, #16
 8008282:	bd80      	pop	{r7, pc}

08008284 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 800828e:	4a05      	ldr	r2, [pc, #20]	@ (80082a4 <trueValue+0x20>)
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	2303      	movs	r3, #3
 8008296:	f7ff ffc4 	bl	8008222 <primitiveValue>
 800829a:	0003      	movs	r3, r0
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	b002      	add	sp, #8
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	08011c8c 	.word	0x08011c8c

080082a8 <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 80082b2:	4a05      	ldr	r2, [pc, #20]	@ (80082c8 <falseValue+0x20>)
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	2303      	movs	r3, #3
 80082ba:	f7ff ffb2 	bl	8008222 <primitiveValue>
 80082be:	0003      	movs	r3, r0
}
 80082c0:	0018      	movs	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b002      	add	sp, #8
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	08011c94 	.word	0x08011c94

080082cc <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 80082d6:	4a05      	ldr	r2, [pc, #20]	@ (80082ec <nullValue+0x20>)
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	2306      	movs	r3, #6
 80082de:	f7ff ffa0 	bl	8008222 <primitiveValue>
 80082e2:	0003      	movs	r3, r0
}
 80082e4:	0018      	movs	r0, r3
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b002      	add	sp, #8
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	08011c9c 	.word	0x08011c9c

080082f0 <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b2d      	cmp	r3, #45	@ 0x2d
 80082fe:	d003      	beq.n	8008308 <expValue+0x18>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b2b      	cmp	r3, #43	@ 0x2b
 8008306:	d102      	bne.n	800830e <expValue+0x1e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3301      	adds	r3, #1
 800830c:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <expValue+0x54>)
 8008316:	18d3      	adds	r3, r2, r3
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	001a      	movs	r2, r3
 800831c:	2304      	movs	r3, #4
 800831e:	4013      	ands	r3, r2
 8008320:	d101      	bne.n	8008326 <expValue+0x36>
 8008322:	2300      	movs	r3, #0
 8008324:	e009      	b.n	800833a <expValue+0x4a>
    ptr = goNum( ++ptr );
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3301      	adds	r3, #1
 800832a:	607b      	str	r3, [r7, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	0018      	movs	r0, r3
 8008330:	f000 fa82 	bl	8008838 <goNum>
 8008334:	0003      	movs	r3, r0
 8008336:	607b      	str	r3, [r7, #4]
    return ptr;
 8008338:	687b      	ldr	r3, [r7, #4]
}
 800833a:	0018      	movs	r0, r3
 800833c:	46bd      	mov	sp, r7
 800833e:	b002      	add	sp, #8
 8008340:	bd80      	pop	{r7, pc}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	080125b8 	.word	0x080125b8

08008348 <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	4b0e      	ldr	r3, [pc, #56]	@ (8008390 <fraqValue+0x48>)
 8008358:	18d3      	adds	r3, r2, r3
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	001a      	movs	r2, r3
 800835e:	2304      	movs	r3, #4
 8008360:	4013      	ands	r3, r2
 8008362:	d101      	bne.n	8008368 <fraqValue+0x20>
 8008364:	2300      	movs	r3, #0
 8008366:	e00e      	b.n	8008386 <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3301      	adds	r3, #1
 800836c:	607b      	str	r3, [r7, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	0018      	movs	r0, r3
 8008372:	f000 fa61 	bl	8008838 <goNum>
 8008376:	0003      	movs	r3, r0
 8008378:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <fraqValue+0x3c>
 8008380:	2300      	movs	r3, #0
 8008382:	e000      	b.n	8008386 <fraqValue+0x3e>
    return ptr;
 8008384:	687b      	ldr	r3, [r7, #4]
}
 8008386:	0018      	movs	r0, r3
 8008388:	46bd      	mov	sp, r7
 800838a:	b002      	add	sp, #8
 800838c:	bd80      	pop	{r7, pc}
 800838e:	46c0      	nop			@ (mov r8, r8)
 8008390:	080125b8 	.word	0x080125b8

08008394 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80083a4:	d102      	bne.n	80083ac <numValue+0x18>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3301      	adds	r3, #1
 80083aa:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	4b5b      	ldr	r3, [pc, #364]	@ (8008520 <numValue+0x18c>)
 80083b4:	18d3      	adds	r3, r2, r3
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	001a      	movs	r2, r3
 80083ba:	2304      	movs	r3, #4
 80083bc:	4013      	ands	r3, r2
 80083be:	d101      	bne.n	80083c4 <numValue+0x30>
 80083c0:	2300      	movs	r3, #0
 80083c2:	e0a8      	b.n	8008516 <numValue+0x182>
    if ( *ptr != '0' ) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b30      	cmp	r3, #48	@ 0x30
 80083ca:	d00a      	beq.n	80083e2 <numValue+0x4e>
        ptr = goNum( ptr );
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	0018      	movs	r0, r3
 80083d0:	f000 fa32 	bl	8008838 <goNum>
 80083d4:	0003      	movs	r3, r0
 80083d6:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d110      	bne.n	8008400 <numValue+0x6c>
 80083de:	2300      	movs	r3, #0
 80083e0:	e099      	b.n	8008516 <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	3301      	adds	r3, #1
 80083e6:	607b      	str	r3, [r7, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	4b4c      	ldr	r3, [pc, #304]	@ (8008520 <numValue+0x18c>)
 80083f0:	18d3      	adds	r3, r2, r3
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	001a      	movs	r2, r3
 80083f6:	2304      	movs	r3, #4
 80083f8:	4013      	ands	r3, r2
 80083fa:	d001      	beq.n	8008400 <numValue+0x6c>
 80083fc:	2300      	movs	r3, #0
 80083fe:	e08a      	b.n	8008516 <numValue+0x182>
    property->type = JSON_INTEGER;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	2204      	movs	r2, #4
 8008404:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b2e      	cmp	r3, #46	@ 0x2e
 800840c:	d110      	bne.n	8008430 <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3301      	adds	r3, #1
 8008412:	607b      	str	r3, [r7, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	0018      	movs	r0, r3
 8008418:	f7ff ff96 	bl	8008348 <fraqValue>
 800841c:	0003      	movs	r3, r0
 800841e:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <numValue+0x96>
 8008426:	2300      	movs	r3, #0
 8008428:	e075      	b.n	8008516 <numValue+0x182>
        property->type = JSON_REAL;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2205      	movs	r2, #5
 800842e:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b65      	cmp	r3, #101	@ 0x65
 8008436:	d003      	beq.n	8008440 <numValue+0xac>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b45      	cmp	r3, #69	@ 0x45
 800843e:	d110      	bne.n	8008462 <numValue+0xce>
        ptr = expValue( ++ptr );
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3301      	adds	r3, #1
 8008444:	607b      	str	r3, [r7, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	0018      	movs	r0, r3
 800844a:	f7ff ff51 	bl	80082f0 <expValue>
 800844e:	0003      	movs	r3, r0
 8008450:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <numValue+0xc8>
 8008458:	2300      	movs	r3, #0
 800845a:	e05c      	b.n	8008516 <numValue+0x182>
        property->type = JSON_REAL;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2205      	movs	r2, #5
 8008460:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	0018      	movs	r0, r3
 8008468:	f000 fa24 	bl	80088b4 <isEndOfPrimitive>
 800846c:	0003      	movs	r3, r0
 800846e:	001a      	movs	r2, r3
 8008470:	2301      	movs	r3, #1
 8008472:	4053      	eors	r3, r2
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <numValue+0xea>
 800847a:	2300      	movs	r3, #0
 800847c:	e04b      	b.n	8008516 <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	7c1b      	ldrb	r3, [r3, #16]
 8008482:	2b04      	cmp	r3, #4
 8008484:	d140      	bne.n	8008508 <numValue+0x174>
        char const* value = property->u.value;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	781a      	ldrb	r2, [r3, #0]
 8008490:	201b      	movs	r0, #27
 8008492:	183b      	adds	r3, r7, r0
 8008494:	3a2d      	subs	r2, #45	@ 0x2d
 8008496:	4251      	negs	r1, r2
 8008498:	414a      	adcs	r2, r1
 800849a:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 800849c:	183b      	adds	r3, r7, r0
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <numValue+0x114>
 80084a4:	2314      	movs	r3, #20
 80084a6:	e000      	b.n	80084aa <numValue+0x116>
 80084a8:	2313      	movs	r3, #19
 80084aa:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d901      	bls.n	80084c0 <numValue+0x12c>
 80084bc:	2300      	movs	r3, #0
 80084be:	e02a      	b.n	8008516 <numValue+0x182>
        if ( len == maxdigits ) {
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d11f      	bne.n	8008508 <numValue+0x174>
            char const tmp = *ptr;
 80084c8:	230f      	movs	r3, #15
 80084ca:	18fb      	adds	r3, r7, r3
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 80084d8:	231b      	movs	r3, #27
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <numValue+0x152>
 80084e2:	4b10      	ldr	r3, [pc, #64]	@ (8008524 <numValue+0x190>)
 80084e4:	e000      	b.n	80084e8 <numValue+0x154>
 80084e6:	4b10      	ldr	r3, [pc, #64]	@ (8008528 <numValue+0x194>)
 80084e8:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	0011      	movs	r1, r2
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7f7 fe09 	bl	8000108 <strcmp>
 80084f6:	1e03      	subs	r3, r0, #0
 80084f8:	da01      	bge.n	80084fe <numValue+0x16a>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e00b      	b.n	8008516 <numValue+0x182>
            *ptr = tmp;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	220f      	movs	r2, #15
 8008502:	18ba      	adds	r2, r7, r2
 8008504:	7812      	ldrb	r2, [r2, #0]
 8008506:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	0018      	movs	r0, r3
 800850c:	f000 f9b4 	bl	8008878 <setToNull>
 8008510:	0003      	movs	r3, r0
 8008512:	607b      	str	r3, [r7, #4]
    return ptr;
 8008514:	687b      	ldr	r3, [r7, #4]
}
 8008516:	0018      	movs	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	b008      	add	sp, #32
 800851c:	bd80      	pop	{r7, pc}
 800851e:	46c0      	nop			@ (mov r8, r8)
 8008520:	080125b8 	.word	0x080125b8
 8008524:	080124b0 	.word	0x080124b0
 8008528:	080124c8 	.word	0x080124c8

0800852c <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <add+0x26>
	    obj->u.c.child = property;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 8008550:	e006      	b.n	8008560 <add+0x34>
	    obj->u.c.last_child->sibling = property;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	60da      	str	r2, [r3, #12]
}
 8008560:	46c0      	nop			@ (mov r8, r8)
 8008562:	46bd      	mov	sp, r7
 8008564:	b002      	add	sp, #8
 8008566:	bd80      	pop	{r7, pc}

08008568 <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	3b7b      	subs	r3, #123	@ 0x7b
 800857a:	1e5a      	subs	r2, r3, #1
 800857c:	4193      	sbcs	r3, r2
 800857e:	b2db      	uxtb	r3, r3
 8008580:	001a      	movs	r2, r3
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2200      	movs	r2, #0
 800858a:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
    ptr++;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3301      	adds	r3, #1
 8008596:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	0018      	movs	r0, r3
 800859c:	f000 f93a 	bl	8008814 <goBlank>
 80085a0:	0003      	movs	r3, r0
 80085a2:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <objValue+0x46>
 80085aa:	2300      	movs	r3, #0
 80085ac:	e0c0      	b.n	8008730 <objValue+0x1c8>
        if ( *ptr == ',' ) {
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80085b4:	d103      	bne.n	80085be <objValue+0x56>
            ++ptr;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]
            continue;
 80085bc:	e0b7      	b.n	800872e <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	7c1b      	ldrb	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <objValue+0x62>
 80085c6:	227d      	movs	r2, #125	@ 0x7d
 80085c8:	e000      	b.n	80085cc <objValue+0x64>
 80085ca:	225d      	movs	r2, #93	@ 0x5d
 80085cc:	211f      	movs	r1, #31
 80085ce:	187b      	adds	r3, r7, r1
 80085d0:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	187a      	adds	r2, r7, r1
 80085d8:	7812      	ldrb	r2, [r2, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d116      	bne.n	800860c <objValue+0xa4>
            *ptr = '\0';
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d104      	bne.n	80085fa <objValue+0x92>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	e09a      	b.n	8008730 <objValue+0x1c8>
            obj->sibling = 0;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2200      	movs	r2, #0
 80085fe:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3301      	adds	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
            continue;
 800860a:	e090      	b.n	800872e <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	0010      	movs	r0, r2
 8008614:	4798      	blx	r3
 8008616:	0003      	movs	r3, r0
 8008618:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <objValue+0xbc>
 8008620:	2300      	movs	r3, #0
 8008622:	e085      	b.n	8008730 <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	7c1b      	ldrb	r3, [r3, #16]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d012      	beq.n	8008652 <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b22      	cmp	r3, #34	@ 0x22
 8008632:	d001      	beq.n	8008638 <objValue+0xd0>
 8008634:	2300      	movs	r3, #0
 8008636:	e07b      	b.n	8008730 <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	0011      	movs	r1, r2
 800863e:	0018      	movs	r0, r3
 8008640:	f7ff fd82 	bl	8008148 <propertyName>
 8008644:	0003      	movs	r3, r0
 8008646:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d104      	bne.n	8008658 <objValue+0xf0>
 800864e:	2300      	movs	r3, #0
 8008650:	e06e      	b.n	8008730 <objValue+0x1c8>
        }
        else property->name = 0;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	2200      	movs	r2, #0
 8008656:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	0011      	movs	r1, r2
 800865e:	0018      	movs	r0, r3
 8008660:	f7ff ff64 	bl	800852c <add>
        property->u.value = ptr;
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b22      	cmp	r3, #34	@ 0x22
 8008670:	d02a      	beq.n	80086c8 <objValue+0x160>
 8008672:	db4d      	blt.n	8008710 <objValue+0x1a8>
 8008674:	2b7b      	cmp	r3, #123	@ 0x7b
 8008676:	dc4b      	bgt.n	8008710 <objValue+0x1a8>
 8008678:	2b5b      	cmp	r3, #91	@ 0x5b
 800867a:	db49      	blt.n	8008710 <objValue+0x1a8>
 800867c:	3b5b      	subs	r3, #91	@ 0x5b
 800867e:	2b20      	cmp	r3, #32
 8008680:	d846      	bhi.n	8008710 <objValue+0x1a8>
 8008682:	009a      	lsls	r2, r3, #2
 8008684:	4b2c      	ldr	r3, [pc, #176]	@ (8008738 <objValue+0x1d0>)
 8008686:	18d3      	adds	r3, r2, r3
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2200      	movs	r2, #0
 8008690:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2200      	movs	r2, #0
 8008696:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	601a      	str	r2, [r3, #0]
                obj = property;
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]
                break;
 80086a8:	e03b      	b.n	8008722 <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	2201      	movs	r2, #1
 80086ae:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	2200      	movs	r2, #0
 80086b4:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	601a      	str	r2, [r3, #0]
                obj = property;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
                break;
 80086c6:	e02c      	b.n	8008722 <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	0011      	movs	r1, r2
 80086ce:	0018      	movs	r0, r3
 80086d0:	f7ff fd6c 	bl	80081ac <textValue>
 80086d4:	0003      	movs	r3, r0
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e023      	b.n	8008722 <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	0011      	movs	r1, r2
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7ff fdcf 	bl	8008284 <trueValue>
 80086e6:	0003      	movs	r3, r0
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	e01a      	b.n	8008722 <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	0011      	movs	r1, r2
 80086f2:	0018      	movs	r0, r3
 80086f4:	f7ff fdd8 	bl	80082a8 <falseValue>
 80086f8:	0003      	movs	r3, r0
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e011      	b.n	8008722 <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f7ff fde1 	bl	80082cc <nullValue>
 800870a:	0003      	movs	r3, r0
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	e008      	b.n	8008722 <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	0011      	movs	r1, r2
 8008716:	0018      	movs	r0, r3
 8008718:	f7ff fe3c 	bl	8008394 <numValue>
 800871c:	0003      	movs	r3, r0
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d000      	beq.n	800872a <objValue+0x1c2>
 8008728:	e736      	b.n	8008598 <objValue+0x30>
 800872a:	2300      	movs	r3, #0
 800872c:	e000      	b.n	8008730 <objValue+0x1c8>
    for(;;) {
 800872e:	e733      	b.n	8008598 <objValue+0x30>
    }
}
 8008730:	0018      	movs	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	b008      	add	sp, #32
 8008736:	bd80      	pop	{r7, pc}
 8008738:	0801241c 	.word	0x0801241c

0800873c <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3b0c      	subs	r3, #12
 8008748:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2201      	movs	r2, #1
 800874e:	609a      	str	r2, [r3, #8]
    return spool->mem;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
}
 8008754:	0018      	movs	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	b004      	add	sp, #16
 800875a:	bd80      	pop	{r7, pc}

0800875c <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	3b0c      	subs	r3, #12
 8008768:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d301      	bcc.n	800877a <poolAlloc+0x1e>
 8008776:	2300      	movs	r3, #0
 8008778:	e00b      	b.n	8008792 <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6819      	ldr	r1, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689a      	ldr	r2, [r3, #8]
 8008782:	1c50      	adds	r0, r2, #1
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6098      	str	r0, [r3, #8]
 8008788:	0013      	movs	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	189b      	adds	r3, r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	18cb      	adds	r3, r1, r3
}
 8008792:	0018      	movs	r0, r3
 8008794:	46bd      	mov	sp, r7
 8008796:	b004      	add	sp, #16
 8008798:	bd80      	pop	{r7, pc}

0800879a <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	0002      	movs	r2, r0
 80087a2:	6039      	str	r1, [r7, #0]
 80087a4:	1dfb      	adds	r3, r7, #7
 80087a6:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 80087a8:	e009      	b.n	80087be <isOneOfThem+0x24>
        if ( ch == *set++ )
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	1c5a      	adds	r2, r3, #1
 80087ae:	603a      	str	r2, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	1dfa      	adds	r2, r7, #7
 80087b4:	7812      	ldrb	r2, [r2, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d101      	bne.n	80087be <isOneOfThem+0x24>
            return true;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e004      	b.n	80087c8 <isOneOfThem+0x2e>
    while( *set != '\0' )
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f1      	bne.n	80087aa <isOneOfThem+0x10>
    return false;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	0018      	movs	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	b002      	add	sp, #8
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 80087da:	e012      	b.n	8008802 <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	0011      	movs	r1, r2
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7ff ffd8 	bl	800879a <isOneOfThem>
 80087ea:	0003      	movs	r3, r0
 80087ec:	001a      	movs	r2, r3
 80087ee:	2301      	movs	r3, #1
 80087f0:	4053      	eors	r3, r2
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <goWhile+0x2c>
            return str;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	e007      	b.n	800880c <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3301      	adds	r3, #1
 8008800:	607b      	str	r3, [r7, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e8      	bne.n	80087dc <goWhile+0xc>
    }
    return 0;
 800880a:	2300      	movs	r3, #0
}
 800880c:	0018      	movs	r0, r3
 800880e:	46bd      	mov	sp, r7
 8008810:	b002      	add	sp, #8
 8008812:	bd80      	pop	{r7, pc}

08008814 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 800881c:	4a05      	ldr	r2, [pc, #20]	@ (8008834 <goBlank+0x20>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	0011      	movs	r1, r2
 8008822:	0018      	movs	r0, r3
 8008824:	f7ff ffd4 	bl	80087d0 <goWhile>
 8008828:	0003      	movs	r3, r0
}
 800882a:	0018      	movs	r0, r3
 800882c:	46bd      	mov	sp, r7
 800882e:	b002      	add	sp, #8
 8008830:	bd80      	pop	{r7, pc}
 8008832:	46c0      	nop			@ (mov r8, r8)
 8008834:	08011ca4 	.word	0x08011ca4

08008838 <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8008840:	e00e      	b.n	8008860 <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	4b0a      	ldr	r3, [pc, #40]	@ (8008874 <goNum+0x3c>)
 800884a:	18d3      	adds	r3, r2, r3
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	001a      	movs	r2, r3
 8008850:	2304      	movs	r3, #4
 8008852:	4013      	ands	r3, r2
 8008854:	d101      	bne.n	800885a <goNum+0x22>
            return str;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	e007      	b.n	800886a <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3301      	adds	r3, #1
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1ec      	bne.n	8008842 <goNum+0xa>
    }
    return 0;
 8008868:	2300      	movs	r3, #0
}
 800886a:	0018      	movs	r0, r3
 800886c:	46bd      	mov	sp, r7
 800886e:	b002      	add	sp, #8
 8008870:	bd80      	pop	{r7, pc}
 8008872:	46c0      	nop			@ (mov r8, r8)
 8008874:	080125b8 	.word	0x080125b8

08008878 <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	4a0a      	ldr	r2, [pc, #40]	@ (80088b0 <setToNull+0x38>)
 8008886:	0011      	movs	r1, r2
 8008888:	0018      	movs	r0, r3
 800888a:	f7ff ff86 	bl	800879a <isOneOfThem>
 800888e:	0003      	movs	r3, r0
 8008890:	001a      	movs	r2, r3
 8008892:	2301      	movs	r3, #1
 8008894:	4053      	eors	r3, r2
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <setToNull+0x2e>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	607a      	str	r2, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
    return ch;
 80088a6:	687b      	ldr	r3, [r7, #4]
}
 80088a8:	0018      	movs	r0, r3
 80088aa:	46bd      	mov	sp, r7
 80088ac:	b002      	add	sp, #8
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	08011cac 	.word	0x08011cac

080088b4 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	0002      	movs	r2, r0
 80088bc:	1dfb      	adds	r3, r7, #7
 80088be:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 80088c0:	1dfb      	adds	r3, r7, #7
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b2c      	cmp	r3, #44	@ 0x2c
 80088c6:	d011      	beq.n	80088ec <isEndOfPrimitive+0x38>
 80088c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008904 <isEndOfPrimitive+0x50>)
 80088ca:	1dfb      	adds	r3, r7, #7
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	0011      	movs	r1, r2
 80088d0:	0018      	movs	r0, r3
 80088d2:	f7ff ff62 	bl	800879a <isOneOfThem>
 80088d6:	1e03      	subs	r3, r0, #0
 80088d8:	d108      	bne.n	80088ec <isEndOfPrimitive+0x38>
 80088da:	4a0b      	ldr	r2, [pc, #44]	@ (8008908 <isEndOfPrimitive+0x54>)
 80088dc:	1dfb      	adds	r3, r7, #7
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	0011      	movs	r1, r2
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7ff ff59 	bl	800879a <isOneOfThem>
 80088e8:	1e03      	subs	r3, r0, #0
 80088ea:	d001      	beq.n	80088f0 <isEndOfPrimitive+0x3c>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e000      	b.n	80088f2 <isEndOfPrimitive+0x3e>
 80088f0:	2300      	movs	r3, #0
 80088f2:	1c1a      	adds	r2, r3, #0
 80088f4:	2301      	movs	r3, #1
 80088f6:	4013      	ands	r3, r2
 80088f8:	b2db      	uxtb	r3, r3
}
 80088fa:	0018      	movs	r0, r3
 80088fc:	46bd      	mov	sp, r7
 80088fe:	b002      	add	sp, #8
 8008900:	bd80      	pop	{r7, pc}
 8008902:	46c0      	nop			@ (mov r8, r8)
 8008904:	08011ca4 	.word	0x08011ca4
 8008908:	08011cac 	.word	0x08011cac

0800890c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800890c:	480d      	ldr	r0, [pc, #52]	@ (8008944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800890e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008910:	f7ff faac 	bl	8007e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008914:	480c      	ldr	r0, [pc, #48]	@ (8008948 <LoopForever+0x6>)
  ldr r1, =_edata
 8008916:	490d      	ldr	r1, [pc, #52]	@ (800894c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008918:	4a0d      	ldr	r2, [pc, #52]	@ (8008950 <LoopForever+0xe>)
  movs r3, #0
 800891a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800891c:	e002      	b.n	8008924 <LoopCopyDataInit>

0800891e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800891e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008922:	3304      	adds	r3, #4

08008924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008928:	d3f9      	bcc.n	800891e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800892a:	4a0a      	ldr	r2, [pc, #40]	@ (8008954 <LoopForever+0x12>)
  ldr r4, =_ebss
 800892c:	4c0a      	ldr	r4, [pc, #40]	@ (8008958 <LoopForever+0x16>)
  movs r3, #0
 800892e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008930:	e001      	b.n	8008936 <LoopFillZerobss>

08008932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008934:	3204      	adds	r2, #4

08008936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008938:	d3fb      	bcc.n	8008932 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800893a:	f006 fd49 	bl	800f3d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800893e:	f7fb feb1 	bl	80046a4 <main>

08008942 <LoopForever>:

LoopForever:
  b LoopForever
 8008942:	e7fe      	b.n	8008942 <LoopForever>
  ldr   r0, =_estack
 8008944:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800894c:	200024f8 	.word	0x200024f8
  ldr r2, =_sidata
 8008950:	08012930 	.word	0x08012930
  ldr r2, =_sbss
 8008954:	200024f8 	.word	0x200024f8
  ldr r4, =_ebss
 8008958:	20003960 	.word	0x20003960

0800895c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800895c:	e7fe      	b.n	800895c <ADC1_COMP_IRQHandler>
	...

08008960 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008966:	1dfb      	adds	r3, r7, #7
 8008968:	2200      	movs	r2, #0
 800896a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800896c:	4b0b      	ldr	r3, [pc, #44]	@ (800899c <HAL_Init+0x3c>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <HAL_Init+0x3c>)
 8008972:	2180      	movs	r1, #128	@ 0x80
 8008974:	0049      	lsls	r1, r1, #1
 8008976:	430a      	orrs	r2, r1
 8008978:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800897a:	2003      	movs	r0, #3
 800897c:	f000 f810 	bl	80089a0 <HAL_InitTick>
 8008980:	1e03      	subs	r3, r0, #0
 8008982:	d003      	beq.n	800898c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008984:	1dfb      	adds	r3, r7, #7
 8008986:	2201      	movs	r2, #1
 8008988:	701a      	strb	r2, [r3, #0]
 800898a:	e001      	b.n	8008990 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800898c:	f7fe ff28 	bl	80077e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008990:	1dfb      	adds	r3, r7, #7
 8008992:	781b      	ldrb	r3, [r3, #0]
}
 8008994:	0018      	movs	r0, r3
 8008996:	46bd      	mov	sp, r7
 8008998:	b002      	add	sp, #8
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40022000 	.word	0x40022000

080089a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089a0:	b590      	push	{r4, r7, lr}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80089a8:	230f      	movs	r3, #15
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80089b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a28 <HAL_InitTick+0x88>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d02b      	beq.n	8008a10 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80089b8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a2c <HAL_InitTick+0x8c>)
 80089ba:	681c      	ldr	r4, [r3, #0]
 80089bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a28 <HAL_InitTick+0x88>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	0019      	movs	r1, r3
 80089c2:	23fa      	movs	r3, #250	@ 0xfa
 80089c4:	0098      	lsls	r0, r3, #2
 80089c6:	f7f7 fbc5 	bl	8000154 <__udivsi3>
 80089ca:	0003      	movs	r3, r0
 80089cc:	0019      	movs	r1, r3
 80089ce:	0020      	movs	r0, r4
 80089d0:	f7f7 fbc0 	bl	8000154 <__udivsi3>
 80089d4:	0003      	movs	r3, r0
 80089d6:	0018      	movs	r0, r3
 80089d8:	f000 f953 	bl	8008c82 <HAL_SYSTICK_Config>
 80089dc:	1e03      	subs	r3, r0, #0
 80089de:	d112      	bne.n	8008a06 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d80a      	bhi.n	80089fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	2301      	movs	r3, #1
 80089ea:	425b      	negs	r3, r3
 80089ec:	2200      	movs	r2, #0
 80089ee:	0018      	movs	r0, r3
 80089f0:	f000 f922 	bl	8008c38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80089f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008a30 <HAL_InitTick+0x90>)
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	e00d      	b.n	8008a18 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80089fc:	230f      	movs	r3, #15
 80089fe:	18fb      	adds	r3, r7, r3
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e008      	b.n	8008a18 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008a06:	230f      	movs	r3, #15
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e003      	b.n	8008a18 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008a10:	230f      	movs	r3, #15
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	2201      	movs	r2, #1
 8008a16:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008a18:	230f      	movs	r3, #15
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	781b      	ldrb	r3, [r3, #0]
}
 8008a1e:	0018      	movs	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	b005      	add	sp, #20
 8008a24:	bd90      	pop	{r4, r7, pc}
 8008a26:	46c0      	nop			@ (mov r8, r8)
 8008a28:	20002294 	.word	0x20002294
 8008a2c:	2000228c 	.word	0x2000228c
 8008a30:	20002290 	.word	0x20002290

08008a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008a38:	4b05      	ldr	r3, [pc, #20]	@ (8008a50 <HAL_IncTick+0x1c>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	001a      	movs	r2, r3
 8008a3e:	4b05      	ldr	r3, [pc, #20]	@ (8008a54 <HAL_IncTick+0x20>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	18d2      	adds	r2, r2, r3
 8008a44:	4b03      	ldr	r3, [pc, #12]	@ (8008a54 <HAL_IncTick+0x20>)
 8008a46:	601a      	str	r2, [r3, #0]
}
 8008a48:	46c0      	nop			@ (mov r8, r8)
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	46c0      	nop			@ (mov r8, r8)
 8008a50:	20002294 	.word	0x20002294
 8008a54:	200037f4 	.word	0x200037f4

08008a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8008a5c:	4b02      	ldr	r3, [pc, #8]	@ (8008a68 <HAL_GetTick+0x10>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
}
 8008a60:	0018      	movs	r0, r3
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	200037f4 	.word	0x200037f4

08008a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a74:	f7ff fff0 	bl	8008a58 <HAL_GetTick>
 8008a78:	0003      	movs	r3, r0
 8008a7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3301      	adds	r3, #1
 8008a84:	d005      	beq.n	8008a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a86:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab0 <HAL_Delay+0x44>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	001a      	movs	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	189b      	adds	r3, r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008a92:	46c0      	nop			@ (mov r8, r8)
 8008a94:	f7ff ffe0 	bl	8008a58 <HAL_GetTick>
 8008a98:	0002      	movs	r2, r0
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d8f7      	bhi.n	8008a94 <HAL_Delay+0x28>
  {
  }
}
 8008aa4:	46c0      	nop			@ (mov r8, r8)
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b004      	add	sp, #16
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	46c0      	nop			@ (mov r8, r8)
 8008ab0:	20002294 	.word	0x20002294

08008ab4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a06      	ldr	r2, [pc, #24]	@ (8008adc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	0019      	movs	r1, r3
 8008ac6:	4b04      	ldr	r3, [pc, #16]	@ (8008ad8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	601a      	str	r2, [r3, #0]
}
 8008ace:	46c0      	nop			@ (mov r8, r8)
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	b002      	add	sp, #8
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	46c0      	nop			@ (mov r8, r8)
 8008ad8:	40010000 	.word	0x40010000
 8008adc:	fffff9ff 	.word	0xfffff9ff

08008ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	0002      	movs	r2, r0
 8008ae8:	1dfb      	adds	r3, r7, #7
 8008aea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008aec:	1dfb      	adds	r3, r7, #7
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b7f      	cmp	r3, #127	@ 0x7f
 8008af2:	d809      	bhi.n	8008b08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008af4:	1dfb      	adds	r3, r7, #7
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	001a      	movs	r2, r3
 8008afa:	231f      	movs	r3, #31
 8008afc:	401a      	ands	r2, r3
 8008afe:	4b04      	ldr	r3, [pc, #16]	@ (8008b10 <__NVIC_EnableIRQ+0x30>)
 8008b00:	2101      	movs	r1, #1
 8008b02:	4091      	lsls	r1, r2
 8008b04:	000a      	movs	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8008b08:	46c0      	nop			@ (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	e000e100 	.word	0xe000e100

08008b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	0002      	movs	r2, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	1dfb      	adds	r3, r7, #7
 8008b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b28:	d828      	bhi.n	8008b7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8008be8 <__NVIC_SetPriority+0xd4>)
 8008b2c:	1dfb      	adds	r3, r7, #7
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	b25b      	sxtb	r3, r3
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	33c0      	adds	r3, #192	@ 0xc0
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	589b      	ldr	r3, [r3, r2]
 8008b3a:	1dfa      	adds	r2, r7, #7
 8008b3c:	7812      	ldrb	r2, [r2, #0]
 8008b3e:	0011      	movs	r1, r2
 8008b40:	2203      	movs	r2, #3
 8008b42:	400a      	ands	r2, r1
 8008b44:	00d2      	lsls	r2, r2, #3
 8008b46:	21ff      	movs	r1, #255	@ 0xff
 8008b48:	4091      	lsls	r1, r2
 8008b4a:	000a      	movs	r2, r1
 8008b4c:	43d2      	mvns	r2, r2
 8008b4e:	401a      	ands	r2, r3
 8008b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	019b      	lsls	r3, r3, #6
 8008b56:	22ff      	movs	r2, #255	@ 0xff
 8008b58:	401a      	ands	r2, r3
 8008b5a:	1dfb      	adds	r3, r7, #7
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	0018      	movs	r0, r3
 8008b60:	2303      	movs	r3, #3
 8008b62:	4003      	ands	r3, r0
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008b68:	481f      	ldr	r0, [pc, #124]	@ (8008be8 <__NVIC_SetPriority+0xd4>)
 8008b6a:	1dfb      	adds	r3, r7, #7
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	b25b      	sxtb	r3, r3
 8008b70:	089b      	lsrs	r3, r3, #2
 8008b72:	430a      	orrs	r2, r1
 8008b74:	33c0      	adds	r3, #192	@ 0xc0
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008b7a:	e031      	b.n	8008be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bec <__NVIC_SetPriority+0xd8>)
 8008b7e:	1dfb      	adds	r3, r7, #7
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	0019      	movs	r1, r3
 8008b84:	230f      	movs	r3, #15
 8008b86:	400b      	ands	r3, r1
 8008b88:	3b08      	subs	r3, #8
 8008b8a:	089b      	lsrs	r3, r3, #2
 8008b8c:	3306      	adds	r3, #6
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	18d3      	adds	r3, r2, r3
 8008b92:	3304      	adds	r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	1dfa      	adds	r2, r7, #7
 8008b98:	7812      	ldrb	r2, [r2, #0]
 8008b9a:	0011      	movs	r1, r2
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	400a      	ands	r2, r1
 8008ba0:	00d2      	lsls	r2, r2, #3
 8008ba2:	21ff      	movs	r1, #255	@ 0xff
 8008ba4:	4091      	lsls	r1, r2
 8008ba6:	000a      	movs	r2, r1
 8008ba8:	43d2      	mvns	r2, r2
 8008baa:	401a      	ands	r2, r3
 8008bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	019b      	lsls	r3, r3, #6
 8008bb2:	22ff      	movs	r2, #255	@ 0xff
 8008bb4:	401a      	ands	r2, r3
 8008bb6:	1dfb      	adds	r3, r7, #7
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	0018      	movs	r0, r3
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	4003      	ands	r3, r0
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008bc4:	4809      	ldr	r0, [pc, #36]	@ (8008bec <__NVIC_SetPriority+0xd8>)
 8008bc6:	1dfb      	adds	r3, r7, #7
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	001c      	movs	r4, r3
 8008bcc:	230f      	movs	r3, #15
 8008bce:	4023      	ands	r3, r4
 8008bd0:	3b08      	subs	r3, #8
 8008bd2:	089b      	lsrs	r3, r3, #2
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	3306      	adds	r3, #6
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	18c3      	adds	r3, r0, r3
 8008bdc:	3304      	adds	r3, #4
 8008bde:	601a      	str	r2, [r3, #0]
}
 8008be0:	46c0      	nop			@ (mov r8, r8)
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b003      	add	sp, #12
 8008be6:	bd90      	pop	{r4, r7, pc}
 8008be8:	e000e100 	.word	0xe000e100
 8008bec:	e000ed00 	.word	0xe000ed00

08008bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	1e5a      	subs	r2, r3, #1
 8008bfc:	2380      	movs	r3, #128	@ 0x80
 8008bfe:	045b      	lsls	r3, r3, #17
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d301      	bcc.n	8008c08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c04:	2301      	movs	r3, #1
 8008c06:	e010      	b.n	8008c2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c08:	4b0a      	ldr	r3, [pc, #40]	@ (8008c34 <SysTick_Config+0x44>)
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	3a01      	subs	r2, #1
 8008c0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c10:	2301      	movs	r3, #1
 8008c12:	425b      	negs	r3, r3
 8008c14:	2103      	movs	r1, #3
 8008c16:	0018      	movs	r0, r3
 8008c18:	f7ff ff7c 	bl	8008b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c1c:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <SysTick_Config+0x44>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c22:	4b04      	ldr	r3, [pc, #16]	@ (8008c34 <SysTick_Config+0x44>)
 8008c24:	2207      	movs	r2, #7
 8008c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	b002      	add	sp, #8
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	e000e010 	.word	0xe000e010

08008c38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
 8008c42:	210f      	movs	r1, #15
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	1c02      	adds	r2, r0, #0
 8008c48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	187b      	adds	r3, r7, r1
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b25b      	sxtb	r3, r3
 8008c52:	0011      	movs	r1, r2
 8008c54:	0018      	movs	r0, r3
 8008c56:	f7ff ff5d 	bl	8008b14 <__NVIC_SetPriority>
}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b004      	add	sp, #16
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b082      	sub	sp, #8
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	0002      	movs	r2, r0
 8008c6a:	1dfb      	adds	r3, r7, #7
 8008c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c6e:	1dfb      	adds	r3, r7, #7
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b25b      	sxtb	r3, r3
 8008c74:	0018      	movs	r0, r3
 8008c76:	f7ff ff33 	bl	8008ae0 <__NVIC_EnableIRQ>
}
 8008c7a:	46c0      	nop			@ (mov r8, r8)
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	b002      	add	sp, #8
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f7ff ffaf 	bl	8008bf0 <SysTick_Config>
 8008c92:	0003      	movs	r3, r0
}
 8008c94:	0018      	movs	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b002      	add	sp, #8
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008c9c:	b5b0      	push	{r4, r5, r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	603a      	str	r2, [r7, #0]
 8008ca8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008caa:	4b21      	ldr	r3, [pc, #132]	@ (8008d30 <HAL_FLASH_Program+0x94>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d101      	bne.n	8008cb6 <HAL_FLASH_Program+0x1a>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e038      	b.n	8008d28 <HAL_FLASH_Program+0x8c>
 8008cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d30 <HAL_FLASH_Program+0x94>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008d30 <HAL_FLASH_Program+0x94>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008cc2:	2517      	movs	r5, #23
 8008cc4:	197c      	adds	r4, r7, r5
 8008cc6:	23fa      	movs	r3, #250	@ 0xfa
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f000 f87a 	bl	8008dc4 <FLASH_WaitForLastOperation>
 8008cd0:	0003      	movs	r3, r0
 8008cd2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008cd4:	197b      	adds	r3, r7, r5
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d11f      	bne.n	8008d1c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d106      	bne.n	8008cf0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	0008      	movs	r0, r1
 8008cea:	f000 f8b9 	bl	8008e60 <FLASH_Program_DoubleWord>
 8008cee:	e005      	b.n	8008cfc <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	0011      	movs	r1, r2
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f008 fe5e 	bl	80119b8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008cfc:	2317      	movs	r3, #23
 8008cfe:	18fc      	adds	r4, r7, r3
 8008d00:	23fa      	movs	r3, #250	@ 0xfa
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	0018      	movs	r0, r3
 8008d06:	f000 f85d 	bl	8008dc4 <FLASH_WaitForLastOperation>
 8008d0a:	0003      	movs	r3, r0
 8008d0c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008d0e:	4b09      	ldr	r3, [pc, #36]	@ (8008d34 <HAL_FLASH_Program+0x98>)
 8008d10:	695a      	ldr	r2, [r3, #20]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	43d9      	mvns	r1, r3
 8008d16:	4b07      	ldr	r3, [pc, #28]	@ (8008d34 <HAL_FLASH_Program+0x98>)
 8008d18:	400a      	ands	r2, r1
 8008d1a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008d1c:	4b04      	ldr	r3, [pc, #16]	@ (8008d30 <HAL_FLASH_Program+0x94>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008d22:	2317      	movs	r3, #23
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	781b      	ldrb	r3, [r3, #0]
}
 8008d28:	0018      	movs	r0, r3
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	b006      	add	sp, #24
 8008d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8008d30:	200037f8 	.word	0x200037f8
 8008d34:	40022000 	.word	0x40022000

08008d38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d3e:	1dfb      	adds	r3, r7, #7
 8008d40:	2200      	movs	r2, #0
 8008d42:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008d44:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <HAL_FLASH_Unlock+0x3c>)
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da0c      	bge.n	8008d66 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008d4c:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <HAL_FLASH_Unlock+0x3c>)
 8008d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8008d78 <HAL_FLASH_Unlock+0x40>)
 8008d50:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008d52:	4b08      	ldr	r3, [pc, #32]	@ (8008d74 <HAL_FLASH_Unlock+0x3c>)
 8008d54:	4a09      	ldr	r2, [pc, #36]	@ (8008d7c <HAL_FLASH_Unlock+0x44>)
 8008d56:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008d58:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <HAL_FLASH_Unlock+0x3c>)
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	da02      	bge.n	8008d66 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8008d60:	1dfb      	adds	r3, r7, #7
 8008d62:	2201      	movs	r2, #1
 8008d64:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008d66:	1dfb      	adds	r3, r7, #7
 8008d68:	781b      	ldrb	r3, [r3, #0]
}
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	b002      	add	sp, #8
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	46c0      	nop			@ (mov r8, r8)
 8008d74:	40022000 	.word	0x40022000
 8008d78:	45670123 	.word	0x45670123
 8008d7c:	cdef89ab 	.word	0xcdef89ab

08008d80 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d86:	1dfb      	adds	r3, r7, #7
 8008d88:	2201      	movs	r2, #1
 8008d8a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008d8c:	23fa      	movs	r3, #250	@ 0xfa
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	0018      	movs	r0, r3
 8008d92:	f000 f817 	bl	8008dc4 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008d96:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc0 <HAL_FLASH_Lock+0x40>)
 8008d98:	695a      	ldr	r2, [r3, #20]
 8008d9a:	4b09      	ldr	r3, [pc, #36]	@ (8008dc0 <HAL_FLASH_Lock+0x40>)
 8008d9c:	2180      	movs	r1, #128	@ 0x80
 8008d9e:	0609      	lsls	r1, r1, #24
 8008da0:	430a      	orrs	r2, r1
 8008da2:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008da4:	4b06      	ldr	r3, [pc, #24]	@ (8008dc0 <HAL_FLASH_Lock+0x40>)
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	da02      	bge.n	8008db2 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008dac:	1dfb      	adds	r3, r7, #7
 8008dae:	2200      	movs	r2, #0
 8008db0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008db2:	1dfb      	adds	r3, r7, #7
 8008db4:	781b      	ldrb	r3, [r3, #0]
}
 8008db6:	0018      	movs	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b002      	add	sp, #8
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	46c0      	nop			@ (mov r8, r8)
 8008dc0:	40022000 	.word	0x40022000

08008dc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008dcc:	f7ff fe44 	bl	8008a58 <HAL_GetTick>
 8008dd0:	0003      	movs	r3, r0
 8008dd2:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8008dd4:	23c0      	movs	r3, #192	@ 0xc0
 8008dd6:	029b      	lsls	r3, r3, #10
 8008dd8:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8008dda:	e00c      	b.n	8008df6 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3301      	adds	r3, #1
 8008de0:	d009      	beq.n	8008df6 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008de2:	f7ff fe39 	bl	8008a58 <HAL_GetTick>
 8008de6:	0002      	movs	r2, r0
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d801      	bhi.n	8008df6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e028      	b.n	8008e48 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8008df6:	4b16      	ldr	r3, [pc, #88]	@ (8008e50 <FLASH_WaitForLastOperation+0x8c>)
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	d1ed      	bne.n	8008ddc <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8008e00:	4b13      	ldr	r3, [pc, #76]	@ (8008e50 <FLASH_WaitForLastOperation+0x8c>)
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	4a13      	ldr	r2, [pc, #76]	@ (8008e54 <FLASH_WaitForLastOperation+0x90>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8008e0a:	4b11      	ldr	r3, [pc, #68]	@ (8008e50 <FLASH_WaitForLastOperation+0x8c>)
 8008e0c:	4a12      	ldr	r2, [pc, #72]	@ (8008e58 <FLASH_WaitForLastOperation+0x94>)
 8008e0e:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d011      	beq.n	8008e3a <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008e16:	4b11      	ldr	r3, [pc, #68]	@ (8008e5c <FLASH_WaitForLastOperation+0x98>)
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e013      	b.n	8008e48 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3301      	adds	r3, #1
 8008e24:	d009      	beq.n	8008e3a <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008e26:	f7ff fe17 	bl	8008a58 <HAL_GetTick>
 8008e2a:	0002      	movs	r2, r0
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d801      	bhi.n	8008e3a <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e006      	b.n	8008e48 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8008e3a:	4b05      	ldr	r3, [pc, #20]	@ (8008e50 <FLASH_WaitForLastOperation+0x8c>)
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	2380      	movs	r3, #128	@ 0x80
 8008e40:	02db      	lsls	r3, r3, #11
 8008e42:	4013      	ands	r3, r2
 8008e44:	d1ec      	bne.n	8008e20 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	0018      	movs	r0, r3
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	b004      	add	sp, #16
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	40022000 	.word	0x40022000
 8008e54:	0000c3fa 	.word	0x0000c3fa
 8008e58:	0008c3fb 	.word	0x0008c3fb
 8008e5c:	200037f8 	.word	0x200037f8

08008e60 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008e60:	b5b0      	push	{r4, r5, r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	603a      	str	r2, [r7, #0]
 8008e6a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e9c <FLASH_Program_DoubleWord+0x3c>)
 8008e6e:	695a      	ldr	r2, [r3, #20]
 8008e70:	4b0a      	ldr	r3, [pc, #40]	@ (8008e9c <FLASH_Program_DoubleWord+0x3c>)
 8008e72:	2101      	movs	r1, #1
 8008e74:	430a      	orrs	r2, r1
 8008e76:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8008e7e:	f3bf 8f6f 	isb	sy
}
 8008e82:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	001c      	movs	r4, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	001d      	movs	r5, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	0022      	movs	r2, r4
 8008e92:	601a      	str	r2, [r3, #0]
}
 8008e94:	46c0      	nop			@ (mov r8, r8)
 8008e96:	46bd      	mov	sp, r7
 8008e98:	b004      	add	sp, #16
 8008e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e9c:	40022000 	.word	0x40022000

08008ea0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008ea0:	b5b0      	push	{r4, r5, r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008eaa:	4b33      	ldr	r3, [pc, #204]	@ (8008f78 <HAL_FLASHEx_Erase+0xd8>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d101      	bne.n	8008eb6 <HAL_FLASHEx_Erase+0x16>
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	e05c      	b.n	8008f70 <HAL_FLASHEx_Erase+0xd0>
 8008eb6:	4b30      	ldr	r3, [pc, #192]	@ (8008f78 <HAL_FLASHEx_Erase+0xd8>)
 8008eb8:	2201      	movs	r2, #1
 8008eba:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8008f78 <HAL_FLASHEx_Erase+0xd8>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008ec2:	250f      	movs	r5, #15
 8008ec4:	197c      	adds	r4, r7, r5
 8008ec6:	23fa      	movs	r3, #250	@ 0xfa
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	0018      	movs	r0, r3
 8008ecc:	f7ff ff7a 	bl	8008dc4 <FLASH_WaitForLastOperation>
 8008ed0:	0003      	movs	r3, r0
 8008ed2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008ed4:	002c      	movs	r4, r5
 8008ed6:	193b      	adds	r3, r7, r4
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d142      	bne.n	8008f64 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d10d      	bne.n	8008f02 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	0018      	movs	r0, r3
 8008eec:	f000 f848 	bl	8008f80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008ef0:	193c      	adds	r4, r7, r4
 8008ef2:	23fa      	movs	r3, #250	@ 0xfa
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	f7ff ff64 	bl	8008dc4 <FLASH_WaitForLastOperation>
 8008efc:	0003      	movs	r3, r0
 8008efe:	7023      	strb	r3, [r4, #0]
 8008f00:	e030      	b.n	8008f64 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2201      	movs	r2, #1
 8008f06:	4252      	negs	r2, r2
 8008f08:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	60bb      	str	r3, [r7, #8]
 8008f10:	e01a      	b.n	8008f48 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	0011      	movs	r1, r2
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f000 f844 	bl	8008fa8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008f20:	250f      	movs	r5, #15
 8008f22:	197c      	adds	r4, r7, r5
 8008f24:	23fa      	movs	r3, #250	@ 0xfa
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f7ff ff4b 	bl	8008dc4 <FLASH_WaitForLastOperation>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8008f32:	197b      	adds	r3, r7, r5
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	601a      	str	r2, [r3, #0]
          break;
 8008f40:	e00a      	b.n	8008f58 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60bb      	str	r3, [r7, #8]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	18d3      	adds	r3, r2, r3
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d3dc      	bcc.n	8008f12 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008f58:	4b08      	ldr	r3, [pc, #32]	@ (8008f7c <HAL_FLASHEx_Erase+0xdc>)
 8008f5a:	695a      	ldr	r2, [r3, #20]
 8008f5c:	4b07      	ldr	r3, [pc, #28]	@ (8008f7c <HAL_FLASHEx_Erase+0xdc>)
 8008f5e:	2102      	movs	r1, #2
 8008f60:	438a      	bics	r2, r1
 8008f62:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008f64:	4b04      	ldr	r3, [pc, #16]	@ (8008f78 <HAL_FLASHEx_Erase+0xd8>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008f6a:	230f      	movs	r3, #15
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	781b      	ldrb	r3, [r3, #0]
}
 8008f70:	0018      	movs	r0, r3
 8008f72:	46bd      	mov	sp, r7
 8008f74:	b004      	add	sp, #16
 8008f76:	bdb0      	pop	{r4, r5, r7, pc}
 8008f78:	200037f8 	.word	0x200037f8
 8008f7c:	40022000 	.word	0x40022000

08008f80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008f88:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <FLASH_MassErase+0x24>)
 8008f8a:	695a      	ldr	r2, [r3, #20]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	4b04      	ldr	r3, [pc, #16]	@ (8008fa4 <FLASH_MassErase+0x24>)
 8008f92:	2180      	movs	r1, #128	@ 0x80
 8008f94:	0249      	lsls	r1, r1, #9
 8008f96:	430a      	orrs	r2, r1
 8008f98:	615a      	str	r2, [r3, #20]
}
 8008f9a:	46c0      	nop			@ (mov r8, r8)
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	b002      	add	sp, #8
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	46c0      	nop			@ (mov r8, r8)
 8008fa4:	40022000 	.word	0x40022000

08008fa8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff0 <FLASH_PageErase+0x48>)
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008ff4 <FLASH_PageErase+0x4c>)
 8008fb8:	4013      	ands	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d005      	beq.n	8008fce <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2280      	movs	r2, #128	@ 0x80
 8008fc6:	0192      	lsls	r2, r2, #6
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e003      	b.n	8008fd6 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4a09      	ldr	r2, [pc, #36]	@ (8008ff8 <FLASH_PageErase+0x50>)
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	00da      	lsls	r2, r3, #3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	4b04      	ldr	r3, [pc, #16]	@ (8008ff0 <FLASH_PageErase+0x48>)
 8008fe0:	4906      	ldr	r1, [pc, #24]	@ (8008ffc <FLASH_PageErase+0x54>)
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	615a      	str	r2, [r3, #20]
}
 8008fe6:	46c0      	nop			@ (mov r8, r8)
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	b004      	add	sp, #16
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	46c0      	nop			@ (mov r8, r8)
 8008ff0:	40022000 	.word	0x40022000
 8008ff4:	ffffe007 	.word	0xffffe007
 8008ff8:	ffffdfff 	.word	0xffffdfff
 8008ffc:	00010002 	.word	0x00010002

08009000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800900a:	2300      	movs	r3, #0
 800900c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800900e:	e14d      	b.n	80092ac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2101      	movs	r1, #1
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	4091      	lsls	r1, r2
 800901a:	000a      	movs	r2, r1
 800901c:	4013      	ands	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d100      	bne.n	8009028 <HAL_GPIO_Init+0x28>
 8009026:	e13e      	b.n	80092a6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2203      	movs	r2, #3
 800902e:	4013      	ands	r3, r2
 8009030:	2b01      	cmp	r3, #1
 8009032:	d005      	beq.n	8009040 <HAL_GPIO_Init+0x40>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	2203      	movs	r2, #3
 800903a:	4013      	ands	r3, r2
 800903c:	2b02      	cmp	r3, #2
 800903e:	d130      	bne.n	80090a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	2203      	movs	r2, #3
 800904c:	409a      	lsls	r2, r3
 800904e:	0013      	movs	r3, r2
 8009050:	43da      	mvns	r2, r3
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	4013      	ands	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	409a      	lsls	r2, r3
 8009062:	0013      	movs	r3, r2
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	4313      	orrs	r3, r2
 8009068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009076:	2201      	movs	r2, #1
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	409a      	lsls	r2, r3
 800907c:	0013      	movs	r3, r2
 800907e:	43da      	mvns	r2, r3
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4013      	ands	r3, r2
 8009084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	091b      	lsrs	r3, r3, #4
 800908c:	2201      	movs	r2, #1
 800908e:	401a      	ands	r2, r3
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	409a      	lsls	r2, r3
 8009094:	0013      	movs	r3, r2
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2203      	movs	r2, #3
 80090a8:	4013      	ands	r3, r2
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d017      	beq.n	80090de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	2203      	movs	r2, #3
 80090ba:	409a      	lsls	r2, r3
 80090bc:	0013      	movs	r3, r2
 80090be:	43da      	mvns	r2, r3
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	4013      	ands	r3, r2
 80090c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	409a      	lsls	r2, r3
 80090d0:	0013      	movs	r3, r2
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2203      	movs	r2, #3
 80090e4:	4013      	ands	r3, r2
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d123      	bne.n	8009132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	08da      	lsrs	r2, r3, #3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3208      	adds	r2, #8
 80090f2:	0092      	lsls	r2, r2, #2
 80090f4:	58d3      	ldr	r3, [r2, r3]
 80090f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2207      	movs	r2, #7
 80090fc:	4013      	ands	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	220f      	movs	r2, #15
 8009102:	409a      	lsls	r2, r3
 8009104:	0013      	movs	r3, r2
 8009106:	43da      	mvns	r2, r3
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	4013      	ands	r3, r2
 800910c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691a      	ldr	r2, [r3, #16]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2107      	movs	r1, #7
 8009116:	400b      	ands	r3, r1
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	409a      	lsls	r2, r3
 800911c:	0013      	movs	r3, r2
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	08da      	lsrs	r2, r3, #3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3208      	adds	r2, #8
 800912c:	0092      	lsls	r2, r2, #2
 800912e:	6939      	ldr	r1, [r7, #16]
 8009130:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	2203      	movs	r2, #3
 800913e:	409a      	lsls	r2, r3
 8009140:	0013      	movs	r3, r2
 8009142:	43da      	mvns	r2, r3
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	4013      	ands	r3, r2
 8009148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2203      	movs	r2, #3
 8009150:	401a      	ands	r2, r3
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	409a      	lsls	r2, r3
 8009158:	0013      	movs	r3, r2
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	23c0      	movs	r3, #192	@ 0xc0
 800916c:	029b      	lsls	r3, r3, #10
 800916e:	4013      	ands	r3, r2
 8009170:	d100      	bne.n	8009174 <HAL_GPIO_Init+0x174>
 8009172:	e098      	b.n	80092a6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009174:	4a53      	ldr	r2, [pc, #332]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	089b      	lsrs	r3, r3, #2
 800917a:	3318      	adds	r3, #24
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	589b      	ldr	r3, [r3, r2]
 8009180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2203      	movs	r2, #3
 8009186:	4013      	ands	r3, r2
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	220f      	movs	r2, #15
 800918c:	409a      	lsls	r2, r3
 800918e:	0013      	movs	r3, r2
 8009190:	43da      	mvns	r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4013      	ands	r3, r2
 8009196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	23a0      	movs	r3, #160	@ 0xa0
 800919c:	05db      	lsls	r3, r3, #23
 800919e:	429a      	cmp	r2, r3
 80091a0:	d019      	beq.n	80091d6 <HAL_GPIO_Init+0x1d6>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a48      	ldr	r2, [pc, #288]	@ (80092c8 <HAL_GPIO_Init+0x2c8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d013      	beq.n	80091d2 <HAL_GPIO_Init+0x1d2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a47      	ldr	r2, [pc, #284]	@ (80092cc <HAL_GPIO_Init+0x2cc>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d00d      	beq.n	80091ce <HAL_GPIO_Init+0x1ce>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a46      	ldr	r2, [pc, #280]	@ (80092d0 <HAL_GPIO_Init+0x2d0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d007      	beq.n	80091ca <HAL_GPIO_Init+0x1ca>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a45      	ldr	r2, [pc, #276]	@ (80092d4 <HAL_GPIO_Init+0x2d4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d101      	bne.n	80091c6 <HAL_GPIO_Init+0x1c6>
 80091c2:	2304      	movs	r3, #4
 80091c4:	e008      	b.n	80091d8 <HAL_GPIO_Init+0x1d8>
 80091c6:	2305      	movs	r3, #5
 80091c8:	e006      	b.n	80091d8 <HAL_GPIO_Init+0x1d8>
 80091ca:	2303      	movs	r3, #3
 80091cc:	e004      	b.n	80091d8 <HAL_GPIO_Init+0x1d8>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e002      	b.n	80091d8 <HAL_GPIO_Init+0x1d8>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e000      	b.n	80091d8 <HAL_GPIO_Init+0x1d8>
 80091d6:	2300      	movs	r3, #0
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	2103      	movs	r1, #3
 80091dc:	400a      	ands	r2, r1
 80091de:	00d2      	lsls	r2, r2, #3
 80091e0:	4093      	lsls	r3, r2
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80091e8:	4936      	ldr	r1, [pc, #216]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	089b      	lsrs	r3, r3, #2
 80091ee:	3318      	adds	r3, #24
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80091f6:	4b33      	ldr	r3, [pc, #204]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	43da      	mvns	r2, r3
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	4013      	ands	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	2380      	movs	r3, #128	@ 0x80
 800920c:	035b      	lsls	r3, r3, #13
 800920e:	4013      	ands	r3, r2
 8009210:	d003      	beq.n	800921a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800921a:	4b2a      	ldr	r3, [pc, #168]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009220:	4b28      	ldr	r3, [pc, #160]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	43da      	mvns	r2, r3
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	4013      	ands	r3, r2
 800922e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	2380      	movs	r3, #128	@ 0x80
 8009236:	039b      	lsls	r3, r3, #14
 8009238:	4013      	ands	r3, r2
 800923a:	d003      	beq.n	8009244 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009244:	4b1f      	ldr	r3, [pc, #124]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800924a:	4a1e      	ldr	r2, [pc, #120]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 800924c:	2384      	movs	r3, #132	@ 0x84
 800924e:	58d3      	ldr	r3, [r2, r3]
 8009250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	43da      	mvns	r2, r3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	4013      	ands	r3, r2
 800925a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	2380      	movs	r3, #128	@ 0x80
 8009262:	029b      	lsls	r3, r3, #10
 8009264:	4013      	ands	r3, r2
 8009266:	d003      	beq.n	8009270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009270:	4914      	ldr	r1, [pc, #80]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 8009272:	2284      	movs	r2, #132	@ 0x84
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009278:	4a12      	ldr	r2, [pc, #72]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 800927a:	2380      	movs	r3, #128	@ 0x80
 800927c:	58d3      	ldr	r3, [r2, r3]
 800927e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	43da      	mvns	r2, r3
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	4013      	ands	r3, r2
 8009288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	2380      	movs	r3, #128	@ 0x80
 8009290:	025b      	lsls	r3, r3, #9
 8009292:	4013      	ands	r3, r2
 8009294:	d003      	beq.n	800929e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800929e:	4909      	ldr	r1, [pc, #36]	@ (80092c4 <HAL_GPIO_Init+0x2c4>)
 80092a0:	2280      	movs	r2, #128	@ 0x80
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	3301      	adds	r3, #1
 80092aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	40da      	lsrs	r2, r3
 80092b4:	1e13      	subs	r3, r2, #0
 80092b6:	d000      	beq.n	80092ba <HAL_GPIO_Init+0x2ba>
 80092b8:	e6aa      	b.n	8009010 <HAL_GPIO_Init+0x10>
  }
}
 80092ba:	46c0      	nop			@ (mov r8, r8)
 80092bc:	46c0      	nop			@ (mov r8, r8)
 80092be:	46bd      	mov	sp, r7
 80092c0:	b006      	add	sp, #24
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	40021800 	.word	0x40021800
 80092c8:	50000400 	.word	0x50000400
 80092cc:	50000800 	.word	0x50000800
 80092d0:	50000c00 	.word	0x50000c00
 80092d4:	50001000 	.word	0x50001000

080092d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	000a      	movs	r2, r1
 80092e2:	1cbb      	adds	r3, r7, #2
 80092e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	1cba      	adds	r2, r7, #2
 80092ec:	8812      	ldrh	r2, [r2, #0]
 80092ee:	4013      	ands	r3, r2
 80092f0:	d004      	beq.n	80092fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80092f2:	230f      	movs	r3, #15
 80092f4:	18fb      	adds	r3, r7, r3
 80092f6:	2201      	movs	r2, #1
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	e003      	b.n	8009304 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092fc:	230f      	movs	r3, #15
 80092fe:	18fb      	adds	r3, r7, r3
 8009300:	2200      	movs	r2, #0
 8009302:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8009304:	230f      	movs	r3, #15
 8009306:	18fb      	adds	r3, r7, r3
 8009308:	781b      	ldrb	r3, [r3, #0]
}
 800930a:	0018      	movs	r0, r3
 800930c:	46bd      	mov	sp, r7
 800930e:	b004      	add	sp, #16
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	0008      	movs	r0, r1
 800931c:	0011      	movs	r1, r2
 800931e:	1cbb      	adds	r3, r7, #2
 8009320:	1c02      	adds	r2, r0, #0
 8009322:	801a      	strh	r2, [r3, #0]
 8009324:	1c7b      	adds	r3, r7, #1
 8009326:	1c0a      	adds	r2, r1, #0
 8009328:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800932a:	1c7b      	adds	r3, r7, #1
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d004      	beq.n	800933c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009332:	1cbb      	adds	r3, r7, #2
 8009334:	881a      	ldrh	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800933a:	e003      	b.n	8009344 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800933c:	1cbb      	adds	r3, r7, #2
 800933e:	881a      	ldrh	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009344:	46c0      	nop			@ (mov r8, r8)
 8009346:	46bd      	mov	sp, r7
 8009348:	b002      	add	sp, #8
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	0002      	movs	r2, r0
 8009354:	1dbb      	adds	r3, r7, #6
 8009356:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8009358:	4b10      	ldr	r3, [pc, #64]	@ (800939c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	1dba      	adds	r2, r7, #6
 800935e:	8812      	ldrh	r2, [r2, #0]
 8009360:	4013      	ands	r3, r2
 8009362:	d008      	beq.n	8009376 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009364:	4b0d      	ldr	r3, [pc, #52]	@ (800939c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009366:	1dba      	adds	r2, r7, #6
 8009368:	8812      	ldrh	r2, [r2, #0]
 800936a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800936c:	1dbb      	adds	r3, r7, #6
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	0018      	movs	r0, r3
 8009372:	f7fc fb1b 	bl	80059ac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8009376:	4b09      	ldr	r3, [pc, #36]	@ (800939c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	1dba      	adds	r2, r7, #6
 800937c:	8812      	ldrh	r2, [r2, #0]
 800937e:	4013      	ands	r3, r2
 8009380:	d008      	beq.n	8009394 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009382:	4b06      	ldr	r3, [pc, #24]	@ (800939c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009384:	1dba      	adds	r2, r7, #6
 8009386:	8812      	ldrh	r2, [r2, #0]
 8009388:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800938a:	1dbb      	adds	r3, r7, #6
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	0018      	movs	r0, r3
 8009390:	f000 f806 	bl	80093a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8009394:	46c0      	nop			@ (mov r8, r8)
 8009396:	46bd      	mov	sp, r7
 8009398:	b002      	add	sp, #8
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40021800 	.word	0x40021800

080093a0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	0002      	movs	r2, r0
 80093a8:	1dbb      	adds	r3, r7, #6
 80093aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80093ac:	46c0      	nop			@ (mov r8, r8)
 80093ae:	46bd      	mov	sp, r7
 80093b0:	b002      	add	sp, #8
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e08f      	b.n	80094e6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2241      	movs	r2, #65	@ 0x41
 80093ca:	5c9b      	ldrb	r3, [r3, r2]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d107      	bne.n	80093e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2240      	movs	r2, #64	@ 0x40
 80093d6:	2100      	movs	r1, #0
 80093d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	0018      	movs	r0, r3
 80093de:	f7fe fa27 	bl	8007830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2241      	movs	r2, #65	@ 0x41
 80093e6:	2124      	movs	r1, #36	@ 0x24
 80093e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2101      	movs	r1, #1
 80093f6:	438a      	bics	r2, r1
 80093f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	493b      	ldr	r1, [pc, #236]	@ (80094f0 <HAL_I2C_Init+0x13c>)
 8009404:	400a      	ands	r2, r1
 8009406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689a      	ldr	r2, [r3, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4938      	ldr	r1, [pc, #224]	@ (80094f4 <HAL_I2C_Init+0x140>)
 8009414:	400a      	ands	r2, r1
 8009416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d108      	bne.n	8009432 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2180      	movs	r1, #128	@ 0x80
 800942a:	0209      	lsls	r1, r1, #8
 800942c:	430a      	orrs	r2, r1
 800942e:	609a      	str	r2, [r3, #8]
 8009430:	e007      	b.n	8009442 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689a      	ldr	r2, [r3, #8]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2184      	movs	r1, #132	@ 0x84
 800943c:	0209      	lsls	r1, r1, #8
 800943e:	430a      	orrs	r2, r1
 8009440:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d109      	bne.n	800945e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2180      	movs	r1, #128	@ 0x80
 8009456:	0109      	lsls	r1, r1, #4
 8009458:	430a      	orrs	r2, r1
 800945a:	605a      	str	r2, [r3, #4]
 800945c:	e007      	b.n	800946e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4923      	ldr	r1, [pc, #140]	@ (80094f8 <HAL_I2C_Init+0x144>)
 800946a:	400a      	ands	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4920      	ldr	r1, [pc, #128]	@ (80094fc <HAL_I2C_Init+0x148>)
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	491a      	ldr	r1, [pc, #104]	@ (80094f4 <HAL_I2C_Init+0x140>)
 800948a:	400a      	ands	r2, r1
 800948c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691a      	ldr	r2, [r3, #16]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	431a      	orrs	r2, r3
 8009498:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	69d9      	ldr	r1, [r3, #28]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2101      	movs	r1, #1
 80094c4:	430a      	orrs	r2, r1
 80094c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2241      	movs	r2, #65	@ 0x41
 80094d2:	2120      	movs	r1, #32
 80094d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2242      	movs	r2, #66	@ 0x42
 80094e0:	2100      	movs	r1, #0
 80094e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	0018      	movs	r0, r3
 80094e8:	46bd      	mov	sp, r7
 80094ea:	b002      	add	sp, #8
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	46c0      	nop			@ (mov r8, r8)
 80094f0:	f0ffffff 	.word	0xf0ffffff
 80094f4:	ffff7fff 	.word	0xffff7fff
 80094f8:	fffff7ff 	.word	0xfffff7ff
 80094fc:	02008000 	.word	0x02008000

08009500 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009500:	b590      	push	{r4, r7, lr}
 8009502:	b089      	sub	sp, #36	@ 0x24
 8009504:	af02      	add	r7, sp, #8
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	0008      	movs	r0, r1
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	0019      	movs	r1, r3
 800950e:	230a      	movs	r3, #10
 8009510:	18fb      	adds	r3, r7, r3
 8009512:	1c02      	adds	r2, r0, #0
 8009514:	801a      	strh	r2, [r3, #0]
 8009516:	2308      	movs	r3, #8
 8009518:	18fb      	adds	r3, r7, r3
 800951a:	1c0a      	adds	r2, r1, #0
 800951c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2241      	movs	r2, #65	@ 0x41
 8009522:	5c9b      	ldrb	r3, [r3, r2]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b20      	cmp	r3, #32
 8009528:	d000      	beq.n	800952c <HAL_I2C_Master_Transmit+0x2c>
 800952a:	e10a      	b.n	8009742 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2240      	movs	r2, #64	@ 0x40
 8009530:	5c9b      	ldrb	r3, [r3, r2]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d101      	bne.n	800953a <HAL_I2C_Master_Transmit+0x3a>
 8009536:	2302      	movs	r3, #2
 8009538:	e104      	b.n	8009744 <HAL_I2C_Master_Transmit+0x244>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2240      	movs	r2, #64	@ 0x40
 800953e:	2101      	movs	r1, #1
 8009540:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009542:	f7ff fa89 	bl	8008a58 <HAL_GetTick>
 8009546:	0003      	movs	r3, r0
 8009548:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800954a:	2380      	movs	r3, #128	@ 0x80
 800954c:	0219      	lsls	r1, r3, #8
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	2319      	movs	r3, #25
 8009556:	2201      	movs	r2, #1
 8009558:	f000 fa26 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 800955c:	1e03      	subs	r3, r0, #0
 800955e:	d001      	beq.n	8009564 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e0ef      	b.n	8009744 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2241      	movs	r2, #65	@ 0x41
 8009568:	2121      	movs	r1, #33	@ 0x21
 800956a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2242      	movs	r2, #66	@ 0x42
 8009570:	2110      	movs	r1, #16
 8009572:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2208      	movs	r2, #8
 8009584:	18ba      	adds	r2, r7, r2
 8009586:	8812      	ldrh	r2, [r2, #0]
 8009588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2bff      	cmp	r3, #255	@ 0xff
 8009598:	d906      	bls.n	80095a8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	22ff      	movs	r2, #255	@ 0xff
 800959e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80095a0:	2380      	movs	r3, #128	@ 0x80
 80095a2:	045b      	lsls	r3, r3, #17
 80095a4:	617b      	str	r3, [r7, #20]
 80095a6:	e007      	b.n	80095b8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80095b2:	2380      	movs	r3, #128	@ 0x80
 80095b4:	049b      	lsls	r3, r3, #18
 80095b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d027      	beq.n	8009610 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c4:	781a      	ldrb	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095da:	b29b      	uxth	r3, r3
 80095dc:	3b01      	subs	r3, #1
 80095de:	b29a      	uxth	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	3301      	adds	r3, #1
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	697c      	ldr	r4, [r7, #20]
 80095fc:	230a      	movs	r3, #10
 80095fe:	18fb      	adds	r3, r7, r3
 8009600:	8819      	ldrh	r1, [r3, #0]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	4b51      	ldr	r3, [pc, #324]	@ (800974c <HAL_I2C_Master_Transmit+0x24c>)
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	0023      	movs	r3, r4
 800960a:	f000 fc45 	bl	8009e98 <I2C_TransferConfig>
 800960e:	e06f      	b.n	80096f0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009614:	b2da      	uxtb	r2, r3
 8009616:	697c      	ldr	r4, [r7, #20]
 8009618:	230a      	movs	r3, #10
 800961a:	18fb      	adds	r3, r7, r3
 800961c:	8819      	ldrh	r1, [r3, #0]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	4b4a      	ldr	r3, [pc, #296]	@ (800974c <HAL_I2C_Master_Transmit+0x24c>)
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	0023      	movs	r3, r4
 8009626:	f000 fc37 	bl	8009e98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800962a:	e061      	b.n	80096f0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	0018      	movs	r0, r3
 8009634:	f000 fa10 	bl	8009a58 <I2C_WaitOnTXISFlagUntilTimeout>
 8009638:	1e03      	subs	r3, r0, #0
 800963a:	d001      	beq.n	8009640 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e081      	b.n	8009744 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009644:	781a      	ldrb	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009668:	3b01      	subs	r3, #1
 800966a:	b29a      	uxth	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d03a      	beq.n	80096f0 <HAL_I2C_Master_Transmit+0x1f0>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800967e:	2b00      	cmp	r3, #0
 8009680:	d136      	bne.n	80096f0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	0013      	movs	r3, r2
 800968c:	2200      	movs	r2, #0
 800968e:	2180      	movs	r1, #128	@ 0x80
 8009690:	f000 f98a 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 8009694:	1e03      	subs	r3, r0, #0
 8009696:	d001      	beq.n	800969c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e053      	b.n	8009744 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	2bff      	cmp	r3, #255	@ 0xff
 80096a4:	d911      	bls.n	80096ca <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	22ff      	movs	r2, #255	@ 0xff
 80096aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	2380      	movs	r3, #128	@ 0x80
 80096b4:	045c      	lsls	r4, r3, #17
 80096b6:	230a      	movs	r3, #10
 80096b8:	18fb      	adds	r3, r7, r3
 80096ba:	8819      	ldrh	r1, [r3, #0]
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	2300      	movs	r3, #0
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	0023      	movs	r3, r4
 80096c4:	f000 fbe8 	bl	8009e98 <I2C_TransferConfig>
 80096c8:	e012      	b.n	80096f0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	2380      	movs	r3, #128	@ 0x80
 80096dc:	049c      	lsls	r4, r3, #18
 80096de:	230a      	movs	r3, #10
 80096e0:	18fb      	adds	r3, r7, r3
 80096e2:	8819      	ldrh	r1, [r3, #0]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	2300      	movs	r3, #0
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	0023      	movs	r3, r4
 80096ec:	f000 fbd4 	bl	8009e98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d198      	bne.n	800962c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	0018      	movs	r0, r3
 8009702:	f000 f9ef 	bl	8009ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009706:	1e03      	subs	r3, r0, #0
 8009708:	d001      	beq.n	800970e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e01a      	b.n	8009744 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2220      	movs	r2, #32
 8009714:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	490b      	ldr	r1, [pc, #44]	@ (8009750 <HAL_I2C_Master_Transmit+0x250>)
 8009722:	400a      	ands	r2, r1
 8009724:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2241      	movs	r2, #65	@ 0x41
 800972a:	2120      	movs	r1, #32
 800972c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2242      	movs	r2, #66	@ 0x42
 8009732:	2100      	movs	r1, #0
 8009734:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2240      	movs	r2, #64	@ 0x40
 800973a:	2100      	movs	r1, #0
 800973c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	e000      	b.n	8009744 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8009742:	2302      	movs	r3, #2
  }
}
 8009744:	0018      	movs	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	b007      	add	sp, #28
 800974a:	bd90      	pop	{r4, r7, pc}
 800974c:	80002000 	.word	0x80002000
 8009750:	fe00e800 	.word	0xfe00e800

08009754 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009754:	b590      	push	{r4, r7, lr}
 8009756:	b089      	sub	sp, #36	@ 0x24
 8009758:	af02      	add	r7, sp, #8
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	0008      	movs	r0, r1
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	0019      	movs	r1, r3
 8009762:	230a      	movs	r3, #10
 8009764:	18fb      	adds	r3, r7, r3
 8009766:	1c02      	adds	r2, r0, #0
 8009768:	801a      	strh	r2, [r3, #0]
 800976a:	2308      	movs	r3, #8
 800976c:	18fb      	adds	r3, r7, r3
 800976e:	1c0a      	adds	r2, r1, #0
 8009770:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2241      	movs	r2, #65	@ 0x41
 8009776:	5c9b      	ldrb	r3, [r3, r2]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b20      	cmp	r3, #32
 800977c:	d000      	beq.n	8009780 <HAL_I2C_Master_Receive+0x2c>
 800977e:	e0e8      	b.n	8009952 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2240      	movs	r2, #64	@ 0x40
 8009784:	5c9b      	ldrb	r3, [r3, r2]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_I2C_Master_Receive+0x3a>
 800978a:	2302      	movs	r3, #2
 800978c:	e0e2      	b.n	8009954 <HAL_I2C_Master_Receive+0x200>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2240      	movs	r2, #64	@ 0x40
 8009792:	2101      	movs	r1, #1
 8009794:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009796:	f7ff f95f 	bl	8008a58 <HAL_GetTick>
 800979a:	0003      	movs	r3, r0
 800979c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800979e:	2380      	movs	r3, #128	@ 0x80
 80097a0:	0219      	lsls	r1, r3, #8
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	2319      	movs	r3, #25
 80097aa:	2201      	movs	r2, #1
 80097ac:	f000 f8fc 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 80097b0:	1e03      	subs	r3, r0, #0
 80097b2:	d001      	beq.n	80097b8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0cd      	b.n	8009954 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2241      	movs	r2, #65	@ 0x41
 80097bc:	2122      	movs	r1, #34	@ 0x22
 80097be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2242      	movs	r2, #66	@ 0x42
 80097c4:	2110      	movs	r1, #16
 80097c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2208      	movs	r2, #8
 80097d8:	18ba      	adds	r2, r7, r2
 80097da:	8812      	ldrh	r2, [r2, #0]
 80097dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2bff      	cmp	r3, #255	@ 0xff
 80097ec:	d911      	bls.n	8009812 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	22ff      	movs	r2, #255	@ 0xff
 80097f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	2380      	movs	r3, #128	@ 0x80
 80097fc:	045c      	lsls	r4, r3, #17
 80097fe:	230a      	movs	r3, #10
 8009800:	18fb      	adds	r3, r7, r3
 8009802:	8819      	ldrh	r1, [r3, #0]
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	4b55      	ldr	r3, [pc, #340]	@ (800995c <HAL_I2C_Master_Receive+0x208>)
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	0023      	movs	r3, r4
 800980c:	f000 fb44 	bl	8009e98 <I2C_TransferConfig>
 8009810:	e076      	b.n	8009900 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009820:	b2da      	uxtb	r2, r3
 8009822:	2380      	movs	r3, #128	@ 0x80
 8009824:	049c      	lsls	r4, r3, #18
 8009826:	230a      	movs	r3, #10
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	8819      	ldrh	r1, [r3, #0]
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	4b4b      	ldr	r3, [pc, #300]	@ (800995c <HAL_I2C_Master_Receive+0x208>)
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	0023      	movs	r3, r4
 8009834:	f000 fb30 	bl	8009e98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009838:	e062      	b.n	8009900 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	0018      	movs	r0, r3
 8009842:	f000 f993 	bl	8009b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009846:	1e03      	subs	r3, r0, #0
 8009848:	d001      	beq.n	800984e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e082      	b.n	8009954 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800986a:	3b01      	subs	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009884:	b29b      	uxth	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d03a      	beq.n	8009900 <HAL_I2C_Master_Receive+0x1ac>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d136      	bne.n	8009900 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	0013      	movs	r3, r2
 800989c:	2200      	movs	r2, #0
 800989e:	2180      	movs	r1, #128	@ 0x80
 80098a0:	f000 f882 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 80098a4:	1e03      	subs	r3, r0, #0
 80098a6:	d001      	beq.n	80098ac <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	e053      	b.n	8009954 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2bff      	cmp	r3, #255	@ 0xff
 80098b4:	d911      	bls.n	80098da <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	22ff      	movs	r2, #255	@ 0xff
 80098ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	2380      	movs	r3, #128	@ 0x80
 80098c4:	045c      	lsls	r4, r3, #17
 80098c6:	230a      	movs	r3, #10
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	8819      	ldrh	r1, [r3, #0]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	2300      	movs	r3, #0
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	0023      	movs	r3, r4
 80098d4:	f000 fae0 	bl	8009e98 <I2C_TransferConfig>
 80098d8:	e012      	b.n	8009900 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	2380      	movs	r3, #128	@ 0x80
 80098ec:	049c      	lsls	r4, r3, #18
 80098ee:	230a      	movs	r3, #10
 80098f0:	18fb      	adds	r3, r7, r3
 80098f2:	8819      	ldrh	r1, [r3, #0]
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	0023      	movs	r3, r4
 80098fc:	f000 facc 	bl	8009e98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d197      	bne.n	800983a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	0018      	movs	r0, r3
 8009912:	f000 f8e7 	bl	8009ae4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009916:	1e03      	subs	r3, r0, #0
 8009918:	d001      	beq.n	800991e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e01a      	b.n	8009954 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2220      	movs	r2, #32
 8009924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	490b      	ldr	r1, [pc, #44]	@ (8009960 <HAL_I2C_Master_Receive+0x20c>)
 8009932:	400a      	ands	r2, r1
 8009934:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2241      	movs	r2, #65	@ 0x41
 800993a:	2120      	movs	r1, #32
 800993c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2242      	movs	r2, #66	@ 0x42
 8009942:	2100      	movs	r1, #0
 8009944:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2240      	movs	r2, #64	@ 0x40
 800994a:	2100      	movs	r1, #0
 800994c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	e000      	b.n	8009954 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8009952:	2302      	movs	r3, #2
  }
}
 8009954:	0018      	movs	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	b007      	add	sp, #28
 800995a:	bd90      	pop	{r4, r7, pc}
 800995c:	80002400 	.word	0x80002400
 8009960:	fe00e800 	.word	0xfe00e800

08009964 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	2202      	movs	r2, #2
 8009974:	4013      	ands	r3, r2
 8009976:	2b02      	cmp	r3, #2
 8009978:	d103      	bne.n	8009982 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2200      	movs	r2, #0
 8009980:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	2201      	movs	r2, #1
 800998a:	4013      	ands	r3, r2
 800998c:	2b01      	cmp	r3, #1
 800998e:	d007      	beq.n	80099a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2101      	movs	r1, #1
 800999c:	430a      	orrs	r2, r1
 800999e:	619a      	str	r2, [r3, #24]
  }
}
 80099a0:	46c0      	nop			@ (mov r8, r8)
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b002      	add	sp, #8
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	1dfb      	adds	r3, r7, #7
 80099b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099b8:	e03a      	b.n	8009a30 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	0018      	movs	r0, r3
 80099c2:	f000 f971 	bl	8009ca8 <I2C_IsErrorOccurred>
 80099c6:	1e03      	subs	r3, r0, #0
 80099c8:	d001      	beq.n	80099ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e040      	b.n	8009a50 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	3301      	adds	r3, #1
 80099d2:	d02d      	beq.n	8009a30 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099d4:	f7ff f840 	bl	8008a58 <HAL_GetTick>
 80099d8:	0002      	movs	r2, r0
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d302      	bcc.n	80099ea <I2C_WaitOnFlagUntilTimeout+0x42>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d122      	bne.n	8009a30 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	4013      	ands	r3, r2
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	425a      	negs	r2, r3
 80099fa:	4153      	adcs	r3, r2
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	001a      	movs	r2, r3
 8009a00:	1dfb      	adds	r3, r7, #7
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d113      	bne.n	8009a30 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2241      	movs	r2, #65	@ 0x41
 8009a18:	2120      	movs	r1, #32
 8009a1a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2242      	movs	r2, #66	@ 0x42
 8009a20:	2100      	movs	r1, #0
 8009a22:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2240      	movs	r2, #64	@ 0x40
 8009a28:	2100      	movs	r1, #0
 8009a2a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e00f      	b.n	8009a50 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	4013      	ands	r3, r2
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	425a      	negs	r2, r3
 8009a40:	4153      	adcs	r3, r2
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	001a      	movs	r2, r3
 8009a46:	1dfb      	adds	r3, r7, #7
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d0b5      	beq.n	80099ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	0018      	movs	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b004      	add	sp, #16
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a64:	e032      	b.n	8009acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	68b9      	ldr	r1, [r7, #8]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f000 f91b 	bl	8009ca8 <I2C_IsErrorOccurred>
 8009a72:	1e03      	subs	r3, r0, #0
 8009a74:	d001      	beq.n	8009a7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e030      	b.n	8009adc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	d025      	beq.n	8009acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a80:	f7fe ffea 	bl	8008a58 <HAL_GetTick>
 8009a84:	0002      	movs	r2, r0
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	68ba      	ldr	r2, [r7, #8]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d302      	bcc.n	8009a96 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d11a      	bne.n	8009acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d013      	beq.n	8009acc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2241      	movs	r2, #65	@ 0x41
 8009ab4:	2120      	movs	r1, #32
 8009ab6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2242      	movs	r2, #66	@ 0x42
 8009abc:	2100      	movs	r1, #0
 8009abe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2240      	movs	r2, #64	@ 0x40
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e007      	b.n	8009adc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d1c5      	bne.n	8009a66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	0018      	movs	r0, r3
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	b004      	add	sp, #16
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009af0:	e02f      	b.n	8009b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	0018      	movs	r0, r3
 8009afa:	f000 f8d5 	bl	8009ca8 <I2C_IsErrorOccurred>
 8009afe:	1e03      	subs	r3, r0, #0
 8009b00:	d001      	beq.n	8009b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e02d      	b.n	8009b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b06:	f7fe ffa7 	bl	8008a58 <HAL_GetTick>
 8009b0a:	0002      	movs	r2, r0
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d302      	bcc.n	8009b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d11a      	bne.n	8009b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	2220      	movs	r2, #32
 8009b24:	4013      	ands	r3, r2
 8009b26:	2b20      	cmp	r3, #32
 8009b28:	d013      	beq.n	8009b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b2e:	2220      	movs	r2, #32
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2241      	movs	r2, #65	@ 0x41
 8009b3a:	2120      	movs	r1, #32
 8009b3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2242      	movs	r2, #66	@ 0x42
 8009b42:	2100      	movs	r1, #0
 8009b44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2240      	movs	r2, #64	@ 0x40
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e007      	b.n	8009b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b20      	cmp	r3, #32
 8009b5e:	d1c8      	bne.n	8009af2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	0018      	movs	r0, r3
 8009b64:	46bd      	mov	sp, r7
 8009b66:	b004      	add	sp, #16
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b78:	2317      	movs	r3, #23
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009b80:	e07b      	b.n	8009c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f000 f88d 	bl	8009ca8 <I2C_IsErrorOccurred>
 8009b8e:	1e03      	subs	r3, r0, #0
 8009b90:	d003      	beq.n	8009b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8009b92:	2317      	movs	r3, #23
 8009b94:	18fb      	adds	r3, r7, r3
 8009b96:	2201      	movs	r2, #1
 8009b98:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	d140      	bne.n	8009c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8009ba8:	2117      	movs	r1, #23
 8009baa:	187b      	adds	r3, r7, r1
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d13b      	bne.n	8009c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	2204      	movs	r2, #4
 8009bba:	4013      	ands	r3, r2
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d106      	bne.n	8009bce <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009bc8:	187b      	adds	r3, r7, r1
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	2210      	movs	r2, #16
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d123      	bne.n	8009c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2210      	movs	r2, #16
 8009be2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2204      	movs	r2, #4
 8009be8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4929      	ldr	r1, [pc, #164]	@ (8009ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8009bfe:	400a      	ands	r2, r1
 8009c00:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2241      	movs	r2, #65	@ 0x41
 8009c06:	2120      	movs	r1, #32
 8009c08:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2242      	movs	r2, #66	@ 0x42
 8009c0e:	2100      	movs	r1, #0
 8009c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2240      	movs	r2, #64	@ 0x40
 8009c16:	2100      	movs	r1, #0
 8009c18:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009c1a:	2317      	movs	r3, #23
 8009c1c:	18fb      	adds	r3, r7, r3
 8009c1e:	2201      	movs	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	e002      	b.n	8009c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009c2a:	f7fe ff15 	bl	8008a58 <HAL_GetTick>
 8009c2e:	0002      	movs	r2, r0
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d302      	bcc.n	8009c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d11c      	bne.n	8009c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8009c40:	2017      	movs	r0, #23
 8009c42:	183b      	adds	r3, r7, r0
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d117      	bne.n	8009c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	2204      	movs	r2, #4
 8009c52:	4013      	ands	r3, r2
 8009c54:	2b04      	cmp	r3, #4
 8009c56:	d010      	beq.n	8009c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2241      	movs	r2, #65	@ 0x41
 8009c68:	2120      	movs	r1, #32
 8009c6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2240      	movs	r2, #64	@ 0x40
 8009c70:	2100      	movs	r1, #0
 8009c72:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009c74:	183b      	adds	r3, r7, r0
 8009c76:	2201      	movs	r2, #1
 8009c78:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	2204      	movs	r2, #4
 8009c82:	4013      	ands	r3, r2
 8009c84:	2b04      	cmp	r3, #4
 8009c86:	d005      	beq.n	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009c88:	2317      	movs	r3, #23
 8009c8a:	18fb      	adds	r3, r7, r3
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d100      	bne.n	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009c92:	e776      	b.n	8009b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8009c94:	2317      	movs	r3, #23
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	781b      	ldrb	r3, [r3, #0]
}
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	b006      	add	sp, #24
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	46c0      	nop			@ (mov r8, r8)
 8009ca4:	fe00e800 	.word	0xfe00e800

08009ca8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	@ 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cb4:	2327      	movs	r3, #39	@ 0x27
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	2200      	movs	r2, #0
 8009cba:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2210      	movs	r2, #16
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	d100      	bne.n	8009cd6 <I2C_IsErrorOccurred+0x2e>
 8009cd4:	e079      	b.n	8009dca <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2210      	movs	r2, #16
 8009cdc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009cde:	e057      	b.n	8009d90 <I2C_IsErrorOccurred+0xe8>
 8009ce0:	2227      	movs	r2, #39	@ 0x27
 8009ce2:	18bb      	adds	r3, r7, r2
 8009ce4:	18ba      	adds	r2, r7, r2
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	3301      	adds	r3, #1
 8009cee:	d04f      	beq.n	8009d90 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009cf0:	f7fe feb2 	bl	8008a58 <HAL_GetTick>
 8009cf4:	0002      	movs	r2, r0
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d302      	bcc.n	8009d06 <I2C_IsErrorOccurred+0x5e>
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d144      	bne.n	8009d90 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	2380      	movs	r3, #128	@ 0x80
 8009d0e:	01db      	lsls	r3, r3, #7
 8009d10:	4013      	ands	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009d14:	2013      	movs	r0, #19
 8009d16:	183b      	adds	r3, r7, r0
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	2142      	movs	r1, #66	@ 0x42
 8009d1c:	5c52      	ldrb	r2, [r2, r1]
 8009d1e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699a      	ldr	r2, [r3, #24]
 8009d26:	2380      	movs	r3, #128	@ 0x80
 8009d28:	021b      	lsls	r3, r3, #8
 8009d2a:	401a      	ands	r2, r3
 8009d2c:	2380      	movs	r3, #128	@ 0x80
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d126      	bne.n	8009d82 <I2C_IsErrorOccurred+0xda>
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	2380      	movs	r3, #128	@ 0x80
 8009d38:	01db      	lsls	r3, r3, #7
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d021      	beq.n	8009d82 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8009d3e:	183b      	adds	r3, r7, r0
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	d01d      	beq.n	8009d82 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2180      	movs	r1, #128	@ 0x80
 8009d52:	01c9      	lsls	r1, r1, #7
 8009d54:	430a      	orrs	r2, r1
 8009d56:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009d58:	f7fe fe7e 	bl	8008a58 <HAL_GetTick>
 8009d5c:	0003      	movs	r3, r0
 8009d5e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d60:	e00f      	b.n	8009d82 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009d62:	f7fe fe79 	bl	8008a58 <HAL_GetTick>
 8009d66:	0002      	movs	r2, r0
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	2b19      	cmp	r3, #25
 8009d6e:	d908      	bls.n	8009d82 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	2220      	movs	r2, #32
 8009d74:	4313      	orrs	r3, r2
 8009d76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009d78:	2327      	movs	r3, #39	@ 0x27
 8009d7a:	18fb      	adds	r3, r7, r3
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]

              break;
 8009d80:	e006      	b.n	8009d90 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d1e8      	bne.n	8009d62 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2220      	movs	r2, #32
 8009d98:	4013      	ands	r3, r2
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	d004      	beq.n	8009da8 <I2C_IsErrorOccurred+0x100>
 8009d9e:	2327      	movs	r3, #39	@ 0x27
 8009da0:	18fb      	adds	r3, r7, r3
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d09b      	beq.n	8009ce0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009da8:	2327      	movs	r3, #39	@ 0x27
 8009daa:	18fb      	adds	r3, r7, r3
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d103      	bne.n	8009dba <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2220      	movs	r2, #32
 8009db8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009dc2:	2327      	movs	r3, #39	@ 0x27
 8009dc4:	18fb      	adds	r3, r7, r3
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	2380      	movs	r3, #128	@ 0x80
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4013      	ands	r3, r2
 8009dda:	d00c      	beq.n	8009df6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	2201      	movs	r2, #1
 8009de0:	4313      	orrs	r3, r2
 8009de2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2280      	movs	r2, #128	@ 0x80
 8009dea:	0052      	lsls	r2, r2, #1
 8009dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009dee:	2327      	movs	r3, #39	@ 0x27
 8009df0:	18fb      	adds	r3, r7, r3
 8009df2:	2201      	movs	r2, #1
 8009df4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	2380      	movs	r3, #128	@ 0x80
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	d00c      	beq.n	8009e1a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	2208      	movs	r2, #8
 8009e04:	4313      	orrs	r3, r2
 8009e06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2280      	movs	r2, #128	@ 0x80
 8009e0e:	00d2      	lsls	r2, r2, #3
 8009e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e12:	2327      	movs	r3, #39	@ 0x27
 8009e14:	18fb      	adds	r3, r7, r3
 8009e16:	2201      	movs	r2, #1
 8009e18:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	2380      	movs	r3, #128	@ 0x80
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4013      	ands	r3, r2
 8009e22:	d00c      	beq.n	8009e3e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009e24:	6a3b      	ldr	r3, [r7, #32]
 8009e26:	2202      	movs	r2, #2
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2280      	movs	r2, #128	@ 0x80
 8009e32:	0092      	lsls	r2, r2, #2
 8009e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009e36:	2327      	movs	r3, #39	@ 0x27
 8009e38:	18fb      	adds	r3, r7, r3
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009e3e:	2327      	movs	r3, #39	@ 0x27
 8009e40:	18fb      	adds	r3, r7, r3
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d01d      	beq.n	8009e84 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f7ff fd8a 	bl	8009964 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	490e      	ldr	r1, [pc, #56]	@ (8009e94 <I2C_IsErrorOccurred+0x1ec>)
 8009e5c:	400a      	ands	r2, r1
 8009e5e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2241      	movs	r2, #65	@ 0x41
 8009e70:	2120      	movs	r1, #32
 8009e72:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2242      	movs	r2, #66	@ 0x42
 8009e78:	2100      	movs	r1, #0
 8009e7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2240      	movs	r2, #64	@ 0x40
 8009e80:	2100      	movs	r1, #0
 8009e82:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009e84:	2327      	movs	r3, #39	@ 0x27
 8009e86:	18fb      	adds	r3, r7, r3
 8009e88:	781b      	ldrb	r3, [r3, #0]
}
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b00a      	add	sp, #40	@ 0x28
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	46c0      	nop			@ (mov r8, r8)
 8009e94:	fe00e800 	.word	0xfe00e800

08009e98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b087      	sub	sp, #28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	0008      	movs	r0, r1
 8009ea2:	0011      	movs	r1, r2
 8009ea4:	607b      	str	r3, [r7, #4]
 8009ea6:	240a      	movs	r4, #10
 8009ea8:	193b      	adds	r3, r7, r4
 8009eaa:	1c02      	adds	r2, r0, #0
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	2009      	movs	r0, #9
 8009eb0:	183b      	adds	r3, r7, r0
 8009eb2:	1c0a      	adds	r2, r1, #0
 8009eb4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009eb6:	193b      	adds	r3, r7, r4
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	059b      	lsls	r3, r3, #22
 8009ebc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ebe:	183b      	adds	r3, r7, r0
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	0419      	lsls	r1, r3, #16
 8009ec4:	23ff      	movs	r3, #255	@ 0xff
 8009ec6:	041b      	lsls	r3, r3, #16
 8009ec8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009eca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	085b      	lsrs	r3, r3, #1
 8009ed8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ee2:	0d51      	lsrs	r1, r2, #21
 8009ee4:	2280      	movs	r2, #128	@ 0x80
 8009ee6:	00d2      	lsls	r2, r2, #3
 8009ee8:	400a      	ands	r2, r1
 8009eea:	4907      	ldr	r1, [pc, #28]	@ (8009f08 <I2C_TransferConfig+0x70>)
 8009eec:	430a      	orrs	r2, r1
 8009eee:	43d2      	mvns	r2, r2
 8009ef0:	401a      	ands	r2, r3
 8009ef2:	0011      	movs	r1, r2
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009efe:	46c0      	nop			@ (mov r8, r8)
 8009f00:	46bd      	mov	sp, r7
 8009f02:	b007      	add	sp, #28
 8009f04:	bd90      	pop	{r4, r7, pc}
 8009f06:	46c0      	nop			@ (mov r8, r8)
 8009f08:	03ff63ff 	.word	0x03ff63ff

08009f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2241      	movs	r2, #65	@ 0x41
 8009f1a:	5c9b      	ldrb	r3, [r3, r2]
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d138      	bne.n	8009f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2240      	movs	r2, #64	@ 0x40
 8009f26:	5c9b      	ldrb	r3, [r3, r2]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d101      	bne.n	8009f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e032      	b.n	8009f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2240      	movs	r2, #64	@ 0x40
 8009f34:	2101      	movs	r1, #1
 8009f36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2241      	movs	r2, #65	@ 0x41
 8009f3c:	2124      	movs	r1, #36	@ 0x24
 8009f3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	438a      	bics	r2, r1
 8009f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4911      	ldr	r1, [pc, #68]	@ (8009fa0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009f5c:	400a      	ands	r2, r1
 8009f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6819      	ldr	r1, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2241      	movs	r2, #65	@ 0x41
 8009f84:	2120      	movs	r1, #32
 8009f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2240      	movs	r2, #64	@ 0x40
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	e000      	b.n	8009f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f94:	2302      	movs	r3, #2
  }
}
 8009f96:	0018      	movs	r0, r3
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b002      	add	sp, #8
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	46c0      	nop			@ (mov r8, r8)
 8009fa0:	ffffefff 	.word	0xffffefff

08009fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2241      	movs	r2, #65	@ 0x41
 8009fb2:	5c9b      	ldrb	r3, [r3, r2]
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d139      	bne.n	800a02e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2240      	movs	r2, #64	@ 0x40
 8009fbe:	5c9b      	ldrb	r3, [r3, r2]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d101      	bne.n	8009fc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	e033      	b.n	800a030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2240      	movs	r2, #64	@ 0x40
 8009fcc:	2101      	movs	r1, #1
 8009fce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2241      	movs	r2, #65	@ 0x41
 8009fd4:	2124      	movs	r1, #36	@ 0x24
 8009fd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	438a      	bics	r2, r1
 8009fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a11      	ldr	r2, [pc, #68]	@ (800a038 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2101      	movs	r1, #1
 800a016:	430a      	orrs	r2, r1
 800a018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2241      	movs	r2, #65	@ 0x41
 800a01e:	2120      	movs	r1, #32
 800a020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2240      	movs	r2, #64	@ 0x40
 800a026:	2100      	movs	r1, #0
 800a028:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	e000      	b.n	800a030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a02e:	2302      	movs	r3, #2
  }
}
 800a030:	0018      	movs	r0, r3
 800a032:	46bd      	mov	sp, r7
 800a034:	b004      	add	sp, #16
 800a036:	bd80      	pop	{r7, pc}
 800a038:	fffff0ff 	.word	0xfffff0ff

0800a03c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a044:	4b19      	ldr	r3, [pc, #100]	@ (800a0ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a19      	ldr	r2, [pc, #100]	@ (800a0b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	0019      	movs	r1, r3
 800a04e:	4b17      	ldr	r3, [pc, #92]	@ (800a0ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	430a      	orrs	r2, r1
 800a054:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	2380      	movs	r3, #128	@ 0x80
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d11f      	bne.n	800a0a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a060:	4b14      	ldr	r3, [pc, #80]	@ (800a0b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	0013      	movs	r3, r2
 800a066:	005b      	lsls	r3, r3, #1
 800a068:	189b      	adds	r3, r3, r2
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	4912      	ldr	r1, [pc, #72]	@ (800a0b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a06e:	0018      	movs	r0, r3
 800a070:	f7f6 f870 	bl	8000154 <__udivsi3>
 800a074:	0003      	movs	r3, r0
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a07a:	e008      	b.n	800a08e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3b01      	subs	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e001      	b.n	800a08e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e009      	b.n	800a0a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a08e:	4b07      	ldr	r3, [pc, #28]	@ (800a0ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	2380      	movs	r3, #128	@ 0x80
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	401a      	ands	r2, r3
 800a098:	2380      	movs	r3, #128	@ 0x80
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d0ed      	beq.n	800a07c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	b004      	add	sp, #16
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	46c0      	nop			@ (mov r8, r8)
 800a0ac:	40007000 	.word	0x40007000
 800a0b0:	fffff9ff 	.word	0xfffff9ff
 800a0b4:	2000228c 	.word	0x2000228c
 800a0b8:	000f4240 	.word	0x000f4240

0800a0bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a0c0:	4b03      	ldr	r3, [pc, #12]	@ (800a0d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	23e0      	movs	r3, #224	@ 0xe0
 800a0c6:	01db      	lsls	r3, r3, #7
 800a0c8:	4013      	ands	r3, r2
}
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	40021000 	.word	0x40021000

0800a0d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d102      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f000 fb50 	bl	800a788 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	d100      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x20>
 800a0f2:	e07c      	b.n	800a1ee <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0f4:	4bc3      	ldr	r3, [pc, #780]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	2238      	movs	r2, #56	@ 0x38
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a0fe:	4bc1      	ldr	r3, [pc, #772]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	2203      	movs	r2, #3
 800a104:	4013      	ands	r3, r2
 800a106:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	2b10      	cmp	r3, #16
 800a10c:	d102      	bne.n	800a114 <HAL_RCC_OscConfig+0x40>
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d002      	beq.n	800a11a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	2b08      	cmp	r3, #8
 800a118:	d10b      	bne.n	800a132 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a11a:	4bba      	ldr	r3, [pc, #744]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	2380      	movs	r3, #128	@ 0x80
 800a120:	029b      	lsls	r3, r3, #10
 800a122:	4013      	ands	r3, r2
 800a124:	d062      	beq.n	800a1ec <HAL_RCC_OscConfig+0x118>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d15e      	bne.n	800a1ec <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e32a      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	2380      	movs	r3, #128	@ 0x80
 800a138:	025b      	lsls	r3, r3, #9
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d107      	bne.n	800a14e <HAL_RCC_OscConfig+0x7a>
 800a13e:	4bb1      	ldr	r3, [pc, #708]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	4bb0      	ldr	r3, [pc, #704]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a144:	2180      	movs	r1, #128	@ 0x80
 800a146:	0249      	lsls	r1, r1, #9
 800a148:	430a      	orrs	r2, r1
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	e020      	b.n	800a190 <HAL_RCC_OscConfig+0xbc>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	23a0      	movs	r3, #160	@ 0xa0
 800a154:	02db      	lsls	r3, r3, #11
 800a156:	429a      	cmp	r2, r3
 800a158:	d10e      	bne.n	800a178 <HAL_RCC_OscConfig+0xa4>
 800a15a:	4baa      	ldr	r3, [pc, #680]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	4ba9      	ldr	r3, [pc, #676]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a160:	2180      	movs	r1, #128	@ 0x80
 800a162:	02c9      	lsls	r1, r1, #11
 800a164:	430a      	orrs	r2, r1
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	4ba6      	ldr	r3, [pc, #664]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	4ba5      	ldr	r3, [pc, #660]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a16e:	2180      	movs	r1, #128	@ 0x80
 800a170:	0249      	lsls	r1, r1, #9
 800a172:	430a      	orrs	r2, r1
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	e00b      	b.n	800a190 <HAL_RCC_OscConfig+0xbc>
 800a178:	4ba2      	ldr	r3, [pc, #648]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	4ba1      	ldr	r3, [pc, #644]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a17e:	49a2      	ldr	r1, [pc, #648]	@ (800a408 <HAL_RCC_OscConfig+0x334>)
 800a180:	400a      	ands	r2, r1
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	4b9f      	ldr	r3, [pc, #636]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	4b9e      	ldr	r3, [pc, #632]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a18a:	49a0      	ldr	r1, [pc, #640]	@ (800a40c <HAL_RCC_OscConfig+0x338>)
 800a18c:	400a      	ands	r2, r1
 800a18e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d014      	beq.n	800a1c2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a198:	f7fe fc5e 	bl	8008a58 <HAL_GetTick>
 800a19c:	0003      	movs	r3, r0
 800a19e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1a0:	e008      	b.n	800a1b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1a2:	f7fe fc59 	bl	8008a58 <HAL_GetTick>
 800a1a6:	0002      	movs	r2, r0
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	2b64      	cmp	r3, #100	@ 0x64
 800a1ae:	d901      	bls.n	800a1b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e2e9      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1b4:	4b93      	ldr	r3, [pc, #588]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	2380      	movs	r3, #128	@ 0x80
 800a1ba:	029b      	lsls	r3, r3, #10
 800a1bc:	4013      	ands	r3, r2
 800a1be:	d0f0      	beq.n	800a1a2 <HAL_RCC_OscConfig+0xce>
 800a1c0:	e015      	b.n	800a1ee <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c2:	f7fe fc49 	bl	8008a58 <HAL_GetTick>
 800a1c6:	0003      	movs	r3, r0
 800a1c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1ca:	e008      	b.n	800a1de <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1cc:	f7fe fc44 	bl	8008a58 <HAL_GetTick>
 800a1d0:	0002      	movs	r2, r0
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	2b64      	cmp	r3, #100	@ 0x64
 800a1d8:	d901      	bls.n	800a1de <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e2d4      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a1de:	4b89      	ldr	r3, [pc, #548]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	2380      	movs	r3, #128	@ 0x80
 800a1e4:	029b      	lsls	r3, r3, #10
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	d1f0      	bne.n	800a1cc <HAL_RCC_OscConfig+0xf8>
 800a1ea:	e000      	b.n	800a1ee <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1ec:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	d100      	bne.n	800a1fa <HAL_RCC_OscConfig+0x126>
 800a1f8:	e099      	b.n	800a32e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1fa:	4b82      	ldr	r3, [pc, #520]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	2238      	movs	r2, #56	@ 0x38
 800a200:	4013      	ands	r3, r2
 800a202:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a204:	4b7f      	ldr	r3, [pc, #508]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	2203      	movs	r2, #3
 800a20a:	4013      	ands	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b10      	cmp	r3, #16
 800a212:	d102      	bne.n	800a21a <HAL_RCC_OscConfig+0x146>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d002      	beq.n	800a220 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d135      	bne.n	800a28c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a220:	4b78      	ldr	r3, [pc, #480]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	2380      	movs	r3, #128	@ 0x80
 800a226:	00db      	lsls	r3, r3, #3
 800a228:	4013      	ands	r3, r2
 800a22a:	d005      	beq.n	800a238 <HAL_RCC_OscConfig+0x164>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e2a7      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a238:	4b72      	ldr	r3, [pc, #456]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	4a74      	ldr	r2, [pc, #464]	@ (800a410 <HAL_RCC_OscConfig+0x33c>)
 800a23e:	4013      	ands	r3, r2
 800a240:	0019      	movs	r1, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	021a      	lsls	r2, r3, #8
 800a248:	4b6e      	ldr	r3, [pc, #440]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a24a:	430a      	orrs	r2, r1
 800a24c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d112      	bne.n	800a27a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a254:	4b6b      	ldr	r3, [pc, #428]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a6e      	ldr	r2, [pc, #440]	@ (800a414 <HAL_RCC_OscConfig+0x340>)
 800a25a:	4013      	ands	r3, r2
 800a25c:	0019      	movs	r1, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	691a      	ldr	r2, [r3, #16]
 800a262:	4b68      	ldr	r3, [pc, #416]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a264:	430a      	orrs	r2, r1
 800a266:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a268:	4b66      	ldr	r3, [pc, #408]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	0adb      	lsrs	r3, r3, #11
 800a26e:	2207      	movs	r2, #7
 800a270:	4013      	ands	r3, r2
 800a272:	4a69      	ldr	r2, [pc, #420]	@ (800a418 <HAL_RCC_OscConfig+0x344>)
 800a274:	40da      	lsrs	r2, r3
 800a276:	4b69      	ldr	r3, [pc, #420]	@ (800a41c <HAL_RCC_OscConfig+0x348>)
 800a278:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a27a:	4b69      	ldr	r3, [pc, #420]	@ (800a420 <HAL_RCC_OscConfig+0x34c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	0018      	movs	r0, r3
 800a280:	f7fe fb8e 	bl	80089a0 <HAL_InitTick>
 800a284:	1e03      	subs	r3, r0, #0
 800a286:	d051      	beq.n	800a32c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e27d      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d030      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a294:	4b5b      	ldr	r3, [pc, #364]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a5e      	ldr	r2, [pc, #376]	@ (800a414 <HAL_RCC_OscConfig+0x340>)
 800a29a:	4013      	ands	r3, r2
 800a29c:	0019      	movs	r1, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691a      	ldr	r2, [r3, #16]
 800a2a2:	4b58      	ldr	r3, [pc, #352]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a2a8:	4b56      	ldr	r3, [pc, #344]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	4b55      	ldr	r3, [pc, #340]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2ae:	2180      	movs	r1, #128	@ 0x80
 800a2b0:	0049      	lsls	r1, r1, #1
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b6:	f7fe fbcf 	bl	8008a58 <HAL_GetTick>
 800a2ba:	0003      	movs	r3, r0
 800a2bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2be:	e008      	b.n	800a2d2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2c0:	f7fe fbca 	bl	8008a58 <HAL_GetTick>
 800a2c4:	0002      	movs	r2, r0
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d901      	bls.n	800a2d2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e25a      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a2d2:	4b4c      	ldr	r3, [pc, #304]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	2380      	movs	r3, #128	@ 0x80
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	4013      	ands	r3, r2
 800a2dc:	d0f0      	beq.n	800a2c0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2de:	4b49      	ldr	r3, [pc, #292]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	4a4b      	ldr	r2, [pc, #300]	@ (800a410 <HAL_RCC_OscConfig+0x33c>)
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	0019      	movs	r1, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	021a      	lsls	r2, r3, #8
 800a2ee:	4b45      	ldr	r3, [pc, #276]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	605a      	str	r2, [r3, #4]
 800a2f4:	e01b      	b.n	800a32e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a2f6:	4b43      	ldr	r3, [pc, #268]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4b42      	ldr	r3, [pc, #264]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a2fc:	4949      	ldr	r1, [pc, #292]	@ (800a424 <HAL_RCC_OscConfig+0x350>)
 800a2fe:	400a      	ands	r2, r1
 800a300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a302:	f7fe fba9 	bl	8008a58 <HAL_GetTick>
 800a306:	0003      	movs	r3, r0
 800a308:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a30a:	e008      	b.n	800a31e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a30c:	f7fe fba4 	bl	8008a58 <HAL_GetTick>
 800a310:	0002      	movs	r2, r0
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	2b02      	cmp	r3, #2
 800a318:	d901      	bls.n	800a31e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e234      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a31e:	4b39      	ldr	r3, [pc, #228]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	2380      	movs	r3, #128	@ 0x80
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	4013      	ands	r3, r2
 800a328:	d1f0      	bne.n	800a30c <HAL_RCC_OscConfig+0x238>
 800a32a:	e000      	b.n	800a32e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a32c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2208      	movs	r2, #8
 800a334:	4013      	ands	r3, r2
 800a336:	d047      	beq.n	800a3c8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a338:	4b32      	ldr	r3, [pc, #200]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	2238      	movs	r2, #56	@ 0x38
 800a33e:	4013      	ands	r3, r2
 800a340:	2b18      	cmp	r3, #24
 800a342:	d10a      	bne.n	800a35a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a344:	4b2f      	ldr	r3, [pc, #188]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a348:	2202      	movs	r2, #2
 800a34a:	4013      	ands	r3, r2
 800a34c:	d03c      	beq.n	800a3c8 <HAL_RCC_OscConfig+0x2f4>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d138      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e216      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d019      	beq.n	800a396 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a362:	4b28      	ldr	r3, [pc, #160]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a364:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a366:	4b27      	ldr	r3, [pc, #156]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a368:	2101      	movs	r1, #1
 800a36a:	430a      	orrs	r2, r1
 800a36c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a36e:	f7fe fb73 	bl	8008a58 <HAL_GetTick>
 800a372:	0003      	movs	r3, r0
 800a374:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a376:	e008      	b.n	800a38a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a378:	f7fe fb6e 	bl	8008a58 <HAL_GetTick>
 800a37c:	0002      	movs	r2, r0
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b02      	cmp	r3, #2
 800a384:	d901      	bls.n	800a38a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e1fe      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a38a:	4b1e      	ldr	r3, [pc, #120]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a38c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a38e:	2202      	movs	r2, #2
 800a390:	4013      	ands	r3, r2
 800a392:	d0f1      	beq.n	800a378 <HAL_RCC_OscConfig+0x2a4>
 800a394:	e018      	b.n	800a3c8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a396:	4b1b      	ldr	r3, [pc, #108]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a398:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a39a:	4b1a      	ldr	r3, [pc, #104]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a39c:	2101      	movs	r1, #1
 800a39e:	438a      	bics	r2, r1
 800a3a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3a2:	f7fe fb59 	bl	8008a58 <HAL_GetTick>
 800a3a6:	0003      	movs	r3, r0
 800a3a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a3aa:	e008      	b.n	800a3be <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3ac:	f7fe fb54 	bl	8008a58 <HAL_GetTick>
 800a3b0:	0002      	movs	r2, r0
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d901      	bls.n	800a3be <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e1e4      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a3be:	4b11      	ldr	r3, [pc, #68]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a3c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	d1f1      	bne.n	800a3ac <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2204      	movs	r2, #4
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d100      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x300>
 800a3d2:	e0c7      	b.n	800a564 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3d4:	231f      	movs	r3, #31
 800a3d6:	18fb      	adds	r3, r7, r3
 800a3d8:	2200      	movs	r2, #0
 800a3da:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a3dc:	4b09      	ldr	r3, [pc, #36]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	2238      	movs	r2, #56	@ 0x38
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	2b20      	cmp	r3, #32
 800a3e6:	d11f      	bne.n	800a428 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a3e8:	4b06      	ldr	r3, [pc, #24]	@ (800a404 <HAL_RCC_OscConfig+0x330>)
 800a3ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	d100      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x320>
 800a3f2:	e0b7      	b.n	800a564 <HAL_RCC_OscConfig+0x490>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d000      	beq.n	800a3fe <HAL_RCC_OscConfig+0x32a>
 800a3fc:	e0b2      	b.n	800a564 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e1c2      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
 800a402:	46c0      	nop			@ (mov r8, r8)
 800a404:	40021000 	.word	0x40021000
 800a408:	fffeffff 	.word	0xfffeffff
 800a40c:	fffbffff 	.word	0xfffbffff
 800a410:	ffff80ff 	.word	0xffff80ff
 800a414:	ffffc7ff 	.word	0xffffc7ff
 800a418:	00f42400 	.word	0x00f42400
 800a41c:	2000228c 	.word	0x2000228c
 800a420:	20002290 	.word	0x20002290
 800a424:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a428:	4bb5      	ldr	r3, [pc, #724]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a42a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a42c:	2380      	movs	r3, #128	@ 0x80
 800a42e:	055b      	lsls	r3, r3, #21
 800a430:	4013      	ands	r3, r2
 800a432:	d101      	bne.n	800a438 <HAL_RCC_OscConfig+0x364>
 800a434:	2301      	movs	r3, #1
 800a436:	e000      	b.n	800a43a <HAL_RCC_OscConfig+0x366>
 800a438:	2300      	movs	r3, #0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d011      	beq.n	800a462 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a43e:	4bb0      	ldr	r3, [pc, #704]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a442:	4baf      	ldr	r3, [pc, #700]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a444:	2180      	movs	r1, #128	@ 0x80
 800a446:	0549      	lsls	r1, r1, #21
 800a448:	430a      	orrs	r2, r1
 800a44a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a44c:	4bac      	ldr	r3, [pc, #688]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a44e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a450:	2380      	movs	r3, #128	@ 0x80
 800a452:	055b      	lsls	r3, r3, #21
 800a454:	4013      	ands	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a45a:	231f      	movs	r3, #31
 800a45c:	18fb      	adds	r3, r7, r3
 800a45e:	2201      	movs	r2, #1
 800a460:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a462:	4ba8      	ldr	r3, [pc, #672]	@ (800a704 <HAL_RCC_OscConfig+0x630>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	2380      	movs	r3, #128	@ 0x80
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	4013      	ands	r3, r2
 800a46c:	d11a      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a46e:	4ba5      	ldr	r3, [pc, #660]	@ (800a704 <HAL_RCC_OscConfig+0x630>)
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4ba4      	ldr	r3, [pc, #656]	@ (800a704 <HAL_RCC_OscConfig+0x630>)
 800a474:	2180      	movs	r1, #128	@ 0x80
 800a476:	0049      	lsls	r1, r1, #1
 800a478:	430a      	orrs	r2, r1
 800a47a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a47c:	f7fe faec 	bl	8008a58 <HAL_GetTick>
 800a480:	0003      	movs	r3, r0
 800a482:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a484:	e008      	b.n	800a498 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a486:	f7fe fae7 	bl	8008a58 <HAL_GetTick>
 800a48a:	0002      	movs	r2, r0
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	2b02      	cmp	r3, #2
 800a492:	d901      	bls.n	800a498 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e177      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a498:	4b9a      	ldr	r3, [pc, #616]	@ (800a704 <HAL_RCC_OscConfig+0x630>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	2380      	movs	r3, #128	@ 0x80
 800a49e:	005b      	lsls	r3, r3, #1
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	d0f0      	beq.n	800a486 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d106      	bne.n	800a4ba <HAL_RCC_OscConfig+0x3e6>
 800a4ac:	4b94      	ldr	r3, [pc, #592]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4b0:	4b93      	ldr	r3, [pc, #588]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4b8:	e01c      	b.n	800a4f4 <HAL_RCC_OscConfig+0x420>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	2b05      	cmp	r3, #5
 800a4c0:	d10c      	bne.n	800a4dc <HAL_RCC_OscConfig+0x408>
 800a4c2:	4b8f      	ldr	r3, [pc, #572]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4c6:	4b8e      	ldr	r3, [pc, #568]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4c8:	2104      	movs	r1, #4
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4ce:	4b8c      	ldr	r3, [pc, #560]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4d2:	4b8b      	ldr	r3, [pc, #556]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4da:	e00b      	b.n	800a4f4 <HAL_RCC_OscConfig+0x420>
 800a4dc:	4b88      	ldr	r3, [pc, #544]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4e0:	4b87      	ldr	r3, [pc, #540]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	438a      	bics	r2, r1
 800a4e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4e8:	4b85      	ldr	r3, [pc, #532]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4ec:	4b84      	ldr	r3, [pc, #528]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a4ee:	2104      	movs	r1, #4
 800a4f0:	438a      	bics	r2, r1
 800a4f2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d014      	beq.n	800a526 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4fc:	f7fe faac 	bl	8008a58 <HAL_GetTick>
 800a500:	0003      	movs	r3, r0
 800a502:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a504:	e009      	b.n	800a51a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a506:	f7fe faa7 	bl	8008a58 <HAL_GetTick>
 800a50a:	0002      	movs	r2, r0
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	4a7d      	ldr	r2, [pc, #500]	@ (800a708 <HAL_RCC_OscConfig+0x634>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e136      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a51a:	4b79      	ldr	r3, [pc, #484]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a51c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a51e:	2202      	movs	r2, #2
 800a520:	4013      	ands	r3, r2
 800a522:	d0f0      	beq.n	800a506 <HAL_RCC_OscConfig+0x432>
 800a524:	e013      	b.n	800a54e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a526:	f7fe fa97 	bl	8008a58 <HAL_GetTick>
 800a52a:	0003      	movs	r3, r0
 800a52c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a52e:	e009      	b.n	800a544 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a530:	f7fe fa92 	bl	8008a58 <HAL_GetTick>
 800a534:	0002      	movs	r2, r0
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	4a73      	ldr	r2, [pc, #460]	@ (800a708 <HAL_RCC_OscConfig+0x634>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d901      	bls.n	800a544 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800a540:	2303      	movs	r3, #3
 800a542:	e121      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a544:	4b6e      	ldr	r3, [pc, #440]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a548:	2202      	movs	r2, #2
 800a54a:	4013      	ands	r3, r2
 800a54c:	d1f0      	bne.n	800a530 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a54e:	231f      	movs	r3, #31
 800a550:	18fb      	adds	r3, r7, r3
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d105      	bne.n	800a564 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a558:	4b69      	ldr	r3, [pc, #420]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a55a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a55c:	4b68      	ldr	r3, [pc, #416]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a55e:	496b      	ldr	r1, [pc, #428]	@ (800a70c <HAL_RCC_OscConfig+0x638>)
 800a560:	400a      	ands	r2, r1
 800a562:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2220      	movs	r2, #32
 800a56a:	4013      	ands	r3, r2
 800a56c:	d039      	beq.n	800a5e2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01b      	beq.n	800a5ae <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a576:	4b62      	ldr	r3, [pc, #392]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	4b61      	ldr	r3, [pc, #388]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a57c:	2180      	movs	r1, #128	@ 0x80
 800a57e:	03c9      	lsls	r1, r1, #15
 800a580:	430a      	orrs	r2, r1
 800a582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a584:	f7fe fa68 	bl	8008a58 <HAL_GetTick>
 800a588:	0003      	movs	r3, r0
 800a58a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a58c:	e008      	b.n	800a5a0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a58e:	f7fe fa63 	bl	8008a58 <HAL_GetTick>
 800a592:	0002      	movs	r2, r0
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d901      	bls.n	800a5a0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e0f3      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a5a0:	4b57      	ldr	r3, [pc, #348]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	2380      	movs	r3, #128	@ 0x80
 800a5a6:	041b      	lsls	r3, r3, #16
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	d0f0      	beq.n	800a58e <HAL_RCC_OscConfig+0x4ba>
 800a5ac:	e019      	b.n	800a5e2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a5ae:	4b54      	ldr	r3, [pc, #336]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	4b53      	ldr	r3, [pc, #332]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a5b4:	4956      	ldr	r1, [pc, #344]	@ (800a710 <HAL_RCC_OscConfig+0x63c>)
 800a5b6:	400a      	ands	r2, r1
 800a5b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ba:	f7fe fa4d 	bl	8008a58 <HAL_GetTick>
 800a5be:	0003      	movs	r3, r0
 800a5c0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a5c2:	e008      	b.n	800a5d6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5c4:	f7fe fa48 	bl	8008a58 <HAL_GetTick>
 800a5c8:	0002      	movs	r2, r0
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d901      	bls.n	800a5d6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	e0d8      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a5d6:	4b4a      	ldr	r3, [pc, #296]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	2380      	movs	r3, #128	@ 0x80
 800a5dc:	041b      	lsls	r3, r3, #16
 800a5de:	4013      	ands	r3, r2
 800a5e0:	d1f0      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d100      	bne.n	800a5ec <HAL_RCC_OscConfig+0x518>
 800a5ea:	e0cc      	b.n	800a786 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a5ec:	4b44      	ldr	r3, [pc, #272]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	2238      	movs	r2, #56	@ 0x38
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	2b10      	cmp	r3, #16
 800a5f6:	d100      	bne.n	800a5fa <HAL_RCC_OscConfig+0x526>
 800a5f8:	e07b      	b.n	800a6f2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	d156      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a602:	4b3f      	ldr	r3, [pc, #252]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	4b3e      	ldr	r3, [pc, #248]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a608:	4942      	ldr	r1, [pc, #264]	@ (800a714 <HAL_RCC_OscConfig+0x640>)
 800a60a:	400a      	ands	r2, r1
 800a60c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a60e:	f7fe fa23 	bl	8008a58 <HAL_GetTick>
 800a612:	0003      	movs	r3, r0
 800a614:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a616:	e008      	b.n	800a62a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a618:	f7fe fa1e 	bl	8008a58 <HAL_GetTick>
 800a61c:	0002      	movs	r2, r0
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	2b02      	cmp	r3, #2
 800a624:	d901      	bls.n	800a62a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	e0ae      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a62a:	4b35      	ldr	r3, [pc, #212]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	2380      	movs	r3, #128	@ 0x80
 800a630:	049b      	lsls	r3, r3, #18
 800a632:	4013      	ands	r3, r2
 800a634:	d1f0      	bne.n	800a618 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a636:	4b32      	ldr	r3, [pc, #200]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	4a37      	ldr	r2, [pc, #220]	@ (800a718 <HAL_RCC_OscConfig+0x644>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	0019      	movs	r1, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	431a      	orrs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a656:	431a      	orrs	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a662:	431a      	orrs	r2, r3
 800a664:	4b26      	ldr	r3, [pc, #152]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a666:	430a      	orrs	r2, r1
 800a668:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a66a:	4b25      	ldr	r3, [pc, #148]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	4b24      	ldr	r3, [pc, #144]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a670:	2180      	movs	r1, #128	@ 0x80
 800a672:	0449      	lsls	r1, r1, #17
 800a674:	430a      	orrs	r2, r1
 800a676:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a678:	4b21      	ldr	r3, [pc, #132]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a67a:	68da      	ldr	r2, [r3, #12]
 800a67c:	4b20      	ldr	r3, [pc, #128]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a67e:	2180      	movs	r1, #128	@ 0x80
 800a680:	0549      	lsls	r1, r1, #21
 800a682:	430a      	orrs	r2, r1
 800a684:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a686:	f7fe f9e7 	bl	8008a58 <HAL_GetTick>
 800a68a:	0003      	movs	r3, r0
 800a68c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a68e:	e008      	b.n	800a6a2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a690:	f7fe f9e2 	bl	8008a58 <HAL_GetTick>
 800a694:	0002      	movs	r2, r0
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e072      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6a2:	4b17      	ldr	r3, [pc, #92]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	2380      	movs	r3, #128	@ 0x80
 800a6a8:	049b      	lsls	r3, r3, #18
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	d0f0      	beq.n	800a690 <HAL_RCC_OscConfig+0x5bc>
 800a6ae:	e06a      	b.n	800a786 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6b0:	4b13      	ldr	r3, [pc, #76]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	4b12      	ldr	r3, [pc, #72]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a6b6:	4917      	ldr	r1, [pc, #92]	@ (800a714 <HAL_RCC_OscConfig+0x640>)
 800a6b8:	400a      	ands	r2, r1
 800a6ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6bc:	f7fe f9cc 	bl	8008a58 <HAL_GetTick>
 800a6c0:	0003      	movs	r3, r0
 800a6c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6c4:	e008      	b.n	800a6d8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6c6:	f7fe f9c7 	bl	8008a58 <HAL_GetTick>
 800a6ca:	0002      	movs	r2, r0
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d901      	bls.n	800a6d8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e057      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a6d8:	4b09      	ldr	r3, [pc, #36]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	2380      	movs	r3, #128	@ 0x80
 800a6de:	049b      	lsls	r3, r3, #18
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	d1f0      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a6e4:	4b06      	ldr	r3, [pc, #24]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	4b05      	ldr	r3, [pc, #20]	@ (800a700 <HAL_RCC_OscConfig+0x62c>)
 800a6ea:	490c      	ldr	r1, [pc, #48]	@ (800a71c <HAL_RCC_OscConfig+0x648>)
 800a6ec:	400a      	ands	r2, r1
 800a6ee:	60da      	str	r2, [r3, #12]
 800a6f0:	e049      	b.n	800a786 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d112      	bne.n	800a720 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e044      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
 800a6fe:	46c0      	nop			@ (mov r8, r8)
 800a700:	40021000 	.word	0x40021000
 800a704:	40007000 	.word	0x40007000
 800a708:	00001388 	.word	0x00001388
 800a70c:	efffffff 	.word	0xefffffff
 800a710:	ffbfffff 	.word	0xffbfffff
 800a714:	feffffff 	.word	0xfeffffff
 800a718:	11c1808c 	.word	0x11c1808c
 800a71c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a720:	4b1b      	ldr	r3, [pc, #108]	@ (800a790 <HAL_RCC_OscConfig+0x6bc>)
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2203      	movs	r2, #3
 800a72a:	401a      	ands	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a730:	429a      	cmp	r2, r3
 800a732:	d126      	bne.n	800a782 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2270      	movs	r2, #112	@ 0x70
 800a738:	401a      	ands	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a73e:	429a      	cmp	r2, r3
 800a740:	d11f      	bne.n	800a782 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	23fe      	movs	r3, #254	@ 0xfe
 800a746:	01db      	lsls	r3, r3, #7
 800a748:	401a      	ands	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a74e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a750:	429a      	cmp	r2, r3
 800a752:	d116      	bne.n	800a782 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	23f8      	movs	r3, #248	@ 0xf8
 800a758:	039b      	lsls	r3, r3, #14
 800a75a:	401a      	ands	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a760:	429a      	cmp	r2, r3
 800a762:	d10e      	bne.n	800a782 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	23e0      	movs	r3, #224	@ 0xe0
 800a768:	051b      	lsls	r3, r3, #20
 800a76a:	401a      	ands	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a770:	429a      	cmp	r2, r3
 800a772:	d106      	bne.n	800a782 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	0f5b      	lsrs	r3, r3, #29
 800a778:	075a      	lsls	r2, r3, #29
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a77e:	429a      	cmp	r2, r3
 800a780:	d001      	beq.n	800a786 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e000      	b.n	800a788 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	0018      	movs	r0, r3
 800a78a:	46bd      	mov	sp, r7
 800a78c:	b008      	add	sp, #32
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	40021000 	.word	0x40021000

0800a794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e0e9      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a7a8:	4b76      	ldr	r3, [pc, #472]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2207      	movs	r2, #7
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d91e      	bls.n	800a7f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7b6:	4b73      	ldr	r3, [pc, #460]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2207      	movs	r2, #7
 800a7bc:	4393      	bics	r3, r2
 800a7be:	0019      	movs	r1, r3
 800a7c0:	4b70      	ldr	r3, [pc, #448]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a7c8:	f7fe f946 	bl	8008a58 <HAL_GetTick>
 800a7cc:	0003      	movs	r3, r0
 800a7ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a7d0:	e009      	b.n	800a7e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7d2:	f7fe f941 	bl	8008a58 <HAL_GetTick>
 800a7d6:	0002      	movs	r2, r0
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	4a6a      	ldr	r2, [pc, #424]	@ (800a988 <HAL_RCC_ClockConfig+0x1f4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d901      	bls.n	800a7e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e0ca      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a7e6:	4b67      	ldr	r3, [pc, #412]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2207      	movs	r2, #7
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d1ee      	bne.n	800a7d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	d015      	beq.n	800a82a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2204      	movs	r2, #4
 800a804:	4013      	ands	r3, r2
 800a806:	d006      	beq.n	800a816 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a808:	4b60      	ldr	r3, [pc, #384]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	4b5f      	ldr	r3, [pc, #380]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a80e:	21e0      	movs	r1, #224	@ 0xe0
 800a810:	01c9      	lsls	r1, r1, #7
 800a812:	430a      	orrs	r2, r1
 800a814:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a816:	4b5d      	ldr	r3, [pc, #372]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	4a5d      	ldr	r2, [pc, #372]	@ (800a990 <HAL_RCC_ClockConfig+0x1fc>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	0019      	movs	r1, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	4b59      	ldr	r3, [pc, #356]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a826:	430a      	orrs	r2, r1
 800a828:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2201      	movs	r2, #1
 800a830:	4013      	ands	r3, r2
 800a832:	d057      	beq.n	800a8e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d107      	bne.n	800a84c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a83c:	4b53      	ldr	r3, [pc, #332]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	2380      	movs	r3, #128	@ 0x80
 800a842:	029b      	lsls	r3, r3, #10
 800a844:	4013      	ands	r3, r2
 800a846:	d12b      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e097      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	2b02      	cmp	r3, #2
 800a852:	d107      	bne.n	800a864 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a854:	4b4d      	ldr	r3, [pc, #308]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	2380      	movs	r3, #128	@ 0x80
 800a85a:	049b      	lsls	r3, r3, #18
 800a85c:	4013      	ands	r3, r2
 800a85e:	d11f      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e08b      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d107      	bne.n	800a87c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a86c:	4b47      	ldr	r3, [pc, #284]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	2380      	movs	r3, #128	@ 0x80
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	4013      	ands	r3, r2
 800a876:	d113      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e07f      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2b03      	cmp	r3, #3
 800a882:	d106      	bne.n	800a892 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a884:	4b41      	ldr	r3, [pc, #260]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a888:	2202      	movs	r2, #2
 800a88a:	4013      	ands	r3, r2
 800a88c:	d108      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e074      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a892:	4b3e      	ldr	r3, [pc, #248]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a896:	2202      	movs	r2, #2
 800a898:	4013      	ands	r3, r2
 800a89a:	d101      	bne.n	800a8a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e06d      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8a0:	4b3a      	ldr	r3, [pc, #232]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	2207      	movs	r2, #7
 800a8a6:	4393      	bics	r3, r2
 800a8a8:	0019      	movs	r1, r3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	4b37      	ldr	r3, [pc, #220]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8b4:	f7fe f8d0 	bl	8008a58 <HAL_GetTick>
 800a8b8:	0003      	movs	r3, r0
 800a8ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8bc:	e009      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8be:	f7fe f8cb 	bl	8008a58 <HAL_GetTick>
 800a8c2:	0002      	movs	r2, r0
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	4a2f      	ldr	r2, [pc, #188]	@ (800a988 <HAL_RCC_ClockConfig+0x1f4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e054      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8d2:	4b2e      	ldr	r3, [pc, #184]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	2238      	movs	r2, #56	@ 0x38
 800a8d8:	401a      	ands	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d1ec      	bne.n	800a8be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8e4:	4b27      	ldr	r3, [pc, #156]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2207      	movs	r2, #7
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d21e      	bcs.n	800a930 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8f2:	4b24      	ldr	r3, [pc, #144]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2207      	movs	r2, #7
 800a8f8:	4393      	bics	r3, r2
 800a8fa:	0019      	movs	r1, r3
 800a8fc:	4b21      	ldr	r3, [pc, #132]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	430a      	orrs	r2, r1
 800a902:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a904:	f7fe f8a8 	bl	8008a58 <HAL_GetTick>
 800a908:	0003      	movs	r3, r0
 800a90a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a90c:	e009      	b.n	800a922 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a90e:	f7fe f8a3 	bl	8008a58 <HAL_GetTick>
 800a912:	0002      	movs	r2, r0
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	4a1b      	ldr	r2, [pc, #108]	@ (800a988 <HAL_RCC_ClockConfig+0x1f4>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d901      	bls.n	800a922 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e02c      	b.n	800a97c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a922:	4b18      	ldr	r3, [pc, #96]	@ (800a984 <HAL_RCC_ClockConfig+0x1f0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2207      	movs	r2, #7
 800a928:	4013      	ands	r3, r2
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d1ee      	bne.n	800a90e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2204      	movs	r2, #4
 800a936:	4013      	ands	r3, r2
 800a938:	d009      	beq.n	800a94e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a93a:	4b14      	ldr	r3, [pc, #80]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	4a15      	ldr	r2, [pc, #84]	@ (800a994 <HAL_RCC_ClockConfig+0x200>)
 800a940:	4013      	ands	r3, r2
 800a942:	0019      	movs	r1, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68da      	ldr	r2, [r3, #12]
 800a948:	4b10      	ldr	r3, [pc, #64]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a94a:	430a      	orrs	r2, r1
 800a94c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a94e:	f000 f829 	bl	800a9a4 <HAL_RCC_GetSysClockFreq>
 800a952:	0001      	movs	r1, r0
 800a954:	4b0d      	ldr	r3, [pc, #52]	@ (800a98c <HAL_RCC_ClockConfig+0x1f8>)
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	220f      	movs	r2, #15
 800a95c:	401a      	ands	r2, r3
 800a95e:	4b0e      	ldr	r3, [pc, #56]	@ (800a998 <HAL_RCC_ClockConfig+0x204>)
 800a960:	0092      	lsls	r2, r2, #2
 800a962:	58d3      	ldr	r3, [r2, r3]
 800a964:	221f      	movs	r2, #31
 800a966:	4013      	ands	r3, r2
 800a968:	000a      	movs	r2, r1
 800a96a:	40da      	lsrs	r2, r3
 800a96c:	4b0b      	ldr	r3, [pc, #44]	@ (800a99c <HAL_RCC_ClockConfig+0x208>)
 800a96e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a970:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a0 <HAL_RCC_ClockConfig+0x20c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	0018      	movs	r0, r3
 800a976:	f7fe f813 	bl	80089a0 <HAL_InitTick>
 800a97a:	0003      	movs	r3, r0
}
 800a97c:	0018      	movs	r0, r3
 800a97e:	46bd      	mov	sp, r7
 800a980:	b004      	add	sp, #16
 800a982:	bd80      	pop	{r7, pc}
 800a984:	40022000 	.word	0x40022000
 800a988:	00001388 	.word	0x00001388
 800a98c:	40021000 	.word	0x40021000
 800a990:	fffff0ff 	.word	0xfffff0ff
 800a994:	ffff8fff 	.word	0xffff8fff
 800a998:	080123bc 	.word	0x080123bc
 800a99c:	2000228c 	.word	0x2000228c
 800a9a0:	20002290 	.word	0x20002290

0800a9a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b086      	sub	sp, #24
 800a9a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9aa:	4b3c      	ldr	r3, [pc, #240]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2238      	movs	r2, #56	@ 0x38
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	d10f      	bne.n	800a9d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a9b4:	4b39      	ldr	r3, [pc, #228]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	0adb      	lsrs	r3, r3, #11
 800a9ba:	2207      	movs	r2, #7
 800a9bc:	4013      	ands	r3, r2
 800a9be:	2201      	movs	r2, #1
 800a9c0:	409a      	lsls	r2, r3
 800a9c2:	0013      	movs	r3, r2
 800a9c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	4835      	ldr	r0, [pc, #212]	@ (800aaa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a9ca:	f7f5 fbc3 	bl	8000154 <__udivsi3>
 800a9ce:	0003      	movs	r3, r0
 800a9d0:	613b      	str	r3, [r7, #16]
 800a9d2:	e05d      	b.n	800aa90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9d4:	4b31      	ldr	r3, [pc, #196]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	2238      	movs	r2, #56	@ 0x38
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d102      	bne.n	800a9e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a9e0:	4b30      	ldr	r3, [pc, #192]	@ (800aaa4 <HAL_RCC_GetSysClockFreq+0x100>)
 800a9e2:	613b      	str	r3, [r7, #16]
 800a9e4:	e054      	b.n	800aa90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a9e6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	2238      	movs	r2, #56	@ 0x38
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	2b10      	cmp	r3, #16
 800a9f0:	d138      	bne.n	800aa64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a9f2:	4b2a      	ldr	r3, [pc, #168]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	2203      	movs	r2, #3
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a9fc:	4b27      	ldr	r3, [pc, #156]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	091b      	lsrs	r3, r3, #4
 800aa02:	2207      	movs	r2, #7
 800aa04:	4013      	ands	r3, r2
 800aa06:	3301      	adds	r3, #1
 800aa08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d10d      	bne.n	800aa2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	4824      	ldr	r0, [pc, #144]	@ (800aaa4 <HAL_RCC_GetSysClockFreq+0x100>)
 800aa14:	f7f5 fb9e 	bl	8000154 <__udivsi3>
 800aa18:	0003      	movs	r3, r0
 800aa1a:	0019      	movs	r1, r3
 800aa1c:	4b1f      	ldr	r3, [pc, #124]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	0a1b      	lsrs	r3, r3, #8
 800aa22:	227f      	movs	r2, #127	@ 0x7f
 800aa24:	4013      	ands	r3, r2
 800aa26:	434b      	muls	r3, r1
 800aa28:	617b      	str	r3, [r7, #20]
        break;
 800aa2a:	e00d      	b.n	800aa48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800aa2c:	68b9      	ldr	r1, [r7, #8]
 800aa2e:	481c      	ldr	r0, [pc, #112]	@ (800aaa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800aa30:	f7f5 fb90 	bl	8000154 <__udivsi3>
 800aa34:	0003      	movs	r3, r0
 800aa36:	0019      	movs	r1, r3
 800aa38:	4b18      	ldr	r3, [pc, #96]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	0a1b      	lsrs	r3, r3, #8
 800aa3e:	227f      	movs	r2, #127	@ 0x7f
 800aa40:	4013      	ands	r3, r2
 800aa42:	434b      	muls	r3, r1
 800aa44:	617b      	str	r3, [r7, #20]
        break;
 800aa46:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800aa48:	4b14      	ldr	r3, [pc, #80]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	0f5b      	lsrs	r3, r3, #29
 800aa4e:	2207      	movs	r2, #7
 800aa50:	4013      	ands	r3, r2
 800aa52:	3301      	adds	r3, #1
 800aa54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	6978      	ldr	r0, [r7, #20]
 800aa5a:	f7f5 fb7b 	bl	8000154 <__udivsi3>
 800aa5e:	0003      	movs	r3, r0
 800aa60:	613b      	str	r3, [r7, #16]
 800aa62:	e015      	b.n	800aa90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800aa64:	4b0d      	ldr	r3, [pc, #52]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	2238      	movs	r2, #56	@ 0x38
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d103      	bne.n	800aa78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800aa70:	2380      	movs	r3, #128	@ 0x80
 800aa72:	021b      	lsls	r3, r3, #8
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	e00b      	b.n	800aa90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800aa78:	4b08      	ldr	r3, [pc, #32]	@ (800aa9c <HAL_RCC_GetSysClockFreq+0xf8>)
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	2238      	movs	r2, #56	@ 0x38
 800aa7e:	4013      	ands	r3, r2
 800aa80:	2b18      	cmp	r3, #24
 800aa82:	d103      	bne.n	800aa8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800aa84:	23fa      	movs	r3, #250	@ 0xfa
 800aa86:	01db      	lsls	r3, r3, #7
 800aa88:	613b      	str	r3, [r7, #16]
 800aa8a:	e001      	b.n	800aa90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800aa90:	693b      	ldr	r3, [r7, #16]
}
 800aa92:	0018      	movs	r0, r3
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b006      	add	sp, #24
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	46c0      	nop			@ (mov r8, r8)
 800aa9c:	40021000 	.word	0x40021000
 800aaa0:	00f42400 	.word	0x00f42400
 800aaa4:	007a1200 	.word	0x007a1200

0800aaa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aaac:	4b02      	ldr	r3, [pc, #8]	@ (800aab8 <HAL_RCC_GetHCLKFreq+0x10>)
 800aaae:	681b      	ldr	r3, [r3, #0]
}
 800aab0:	0018      	movs	r0, r3
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	46c0      	nop			@ (mov r8, r8)
 800aab8:	2000228c 	.word	0x2000228c

0800aabc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aabc:	b5b0      	push	{r4, r5, r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800aac0:	f7ff fff2 	bl	800aaa8 <HAL_RCC_GetHCLKFreq>
 800aac4:	0004      	movs	r4, r0
 800aac6:	f7ff faf9 	bl	800a0bc <LL_RCC_GetAPB1Prescaler>
 800aaca:	0003      	movs	r3, r0
 800aacc:	0b1a      	lsrs	r2, r3, #12
 800aace:	4b05      	ldr	r3, [pc, #20]	@ (800aae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aad0:	0092      	lsls	r2, r2, #2
 800aad2:	58d3      	ldr	r3, [r2, r3]
 800aad4:	221f      	movs	r2, #31
 800aad6:	4013      	ands	r3, r2
 800aad8:	40dc      	lsrs	r4, r3
 800aada:	0023      	movs	r3, r4
}
 800aadc:	0018      	movs	r0, r3
 800aade:	46bd      	mov	sp, r7
 800aae0:	bdb0      	pop	{r4, r5, r7, pc}
 800aae2:	46c0      	nop			@ (mov r8, r8)
 800aae4:	080123fc 	.word	0x080123fc

0800aae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800aaf0:	2313      	movs	r3, #19
 800aaf2:	18fb      	adds	r3, r7, r3
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aaf8:	2312      	movs	r3, #18
 800aafa:	18fb      	adds	r3, r7, r3
 800aafc:	2200      	movs	r2, #0
 800aafe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	2380      	movs	r3, #128	@ 0x80
 800ab06:	029b      	lsls	r3, r3, #10
 800ab08:	4013      	ands	r3, r2
 800ab0a:	d100      	bne.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800ab0c:	e0ad      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab0e:	2011      	movs	r0, #17
 800ab10:	183b      	adds	r3, r7, r0
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab16:	4b47      	ldr	r3, [pc, #284]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ab18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab1a:	2380      	movs	r3, #128	@ 0x80
 800ab1c:	055b      	lsls	r3, r3, #21
 800ab1e:	4013      	ands	r3, r2
 800ab20:	d110      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab22:	4b44      	ldr	r3, [pc, #272]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ab24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab26:	4b43      	ldr	r3, [pc, #268]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ab28:	2180      	movs	r1, #128	@ 0x80
 800ab2a:	0549      	lsls	r1, r1, #21
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ab30:	4b40      	ldr	r3, [pc, #256]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ab32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab34:	2380      	movs	r3, #128	@ 0x80
 800ab36:	055b      	lsls	r3, r3, #21
 800ab38:	4013      	ands	r3, r2
 800ab3a:	60bb      	str	r3, [r7, #8]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab3e:	183b      	adds	r3, r7, r0
 800ab40:	2201      	movs	r2, #1
 800ab42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab44:	4b3c      	ldr	r3, [pc, #240]	@ (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	4b3b      	ldr	r3, [pc, #236]	@ (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800ab4a:	2180      	movs	r1, #128	@ 0x80
 800ab4c:	0049      	lsls	r1, r1, #1
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab52:	f7fd ff81 	bl	8008a58 <HAL_GetTick>
 800ab56:	0003      	movs	r3, r0
 800ab58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab5a:	e00b      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab5c:	f7fd ff7c 	bl	8008a58 <HAL_GetTick>
 800ab60:	0002      	movs	r2, r0
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d904      	bls.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800ab6a:	2313      	movs	r3, #19
 800ab6c:	18fb      	adds	r3, r7, r3
 800ab6e:	2203      	movs	r2, #3
 800ab70:	701a      	strb	r2, [r3, #0]
        break;
 800ab72:	e005      	b.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab74:	4b30      	ldr	r3, [pc, #192]	@ (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	2380      	movs	r3, #128	@ 0x80
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	d0ed      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800ab80:	2313      	movs	r3, #19
 800ab82:	18fb      	adds	r3, r7, r3
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d15e      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ab8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ab8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ab8e:	23c0      	movs	r3, #192	@ 0xc0
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4013      	ands	r3, r2
 800ab94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d019      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d014      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aba6:	4b23      	ldr	r3, [pc, #140]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800aba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abaa:	4a24      	ldr	r2, [pc, #144]	@ (800ac3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800abac:	4013      	ands	r3, r2
 800abae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800abb0:	4b20      	ldr	r3, [pc, #128]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800abb2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800abb4:	4b1f      	ldr	r3, [pc, #124]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800abb6:	2180      	movs	r1, #128	@ 0x80
 800abb8:	0249      	lsls	r1, r1, #9
 800abba:	430a      	orrs	r2, r1
 800abbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800abbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800abc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800abc2:	4b1c      	ldr	r3, [pc, #112]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800abc4:	491e      	ldr	r1, [pc, #120]	@ (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800abc6:	400a      	ands	r2, r1
 800abc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800abca:	4b1a      	ldr	r3, [pc, #104]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2201      	movs	r2, #1
 800abd4:	4013      	ands	r3, r2
 800abd6:	d016      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abd8:	f7fd ff3e 	bl	8008a58 <HAL_GetTick>
 800abdc:	0003      	movs	r3, r0
 800abde:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abe0:	e00c      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abe2:	f7fd ff39 	bl	8008a58 <HAL_GetTick>
 800abe6:	0002      	movs	r2, r0
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	4a15      	ldr	r2, [pc, #84]	@ (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d904      	bls.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800abf2:	2313      	movs	r3, #19
 800abf4:	18fb      	adds	r3, r7, r3
 800abf6:	2203      	movs	r2, #3
 800abf8:	701a      	strb	r2, [r3, #0]
            break;
 800abfa:	e004      	b.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abfc:	4b0d      	ldr	r3, [pc, #52]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800abfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac00:	2202      	movs	r2, #2
 800ac02:	4013      	ands	r3, r2
 800ac04:	d0ed      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800ac06:	2313      	movs	r3, #19
 800ac08:	18fb      	adds	r3, r7, r3
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac10:	4b08      	ldr	r3, [pc, #32]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ac12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac14:	4a09      	ldr	r2, [pc, #36]	@ (800ac3c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	0019      	movs	r1, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac1e:	4b05      	ldr	r3, [pc, #20]	@ (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ac20:	430a      	orrs	r2, r1
 800ac22:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ac24:	e016      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ac26:	2312      	movs	r3, #18
 800ac28:	18fb      	adds	r3, r7, r3
 800ac2a:	2213      	movs	r2, #19
 800ac2c:	18ba      	adds	r2, r7, r2
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	701a      	strb	r2, [r3, #0]
 800ac32:	e00f      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800ac34:	40021000 	.word	0x40021000
 800ac38:	40007000 	.word	0x40007000
 800ac3c:	fffffcff 	.word	0xfffffcff
 800ac40:	fffeffff 	.word	0xfffeffff
 800ac44:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac48:	2312      	movs	r3, #18
 800ac4a:	18fb      	adds	r3, r7, r3
 800ac4c:	2213      	movs	r2, #19
 800ac4e:	18ba      	adds	r2, r7, r2
 800ac50:	7812      	ldrb	r2, [r2, #0]
 800ac52:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac54:	2311      	movs	r3, #17
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d105      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac5e:	4bb6      	ldr	r3, [pc, #728]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ac60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac62:	4bb5      	ldr	r3, [pc, #724]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ac64:	49b5      	ldr	r1, [pc, #724]	@ (800af3c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800ac66:	400a      	ands	r2, r1
 800ac68:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	4013      	ands	r3, r2
 800ac72:	d009      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac74:	4bb0      	ldr	r3, [pc, #704]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ac76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac78:	2203      	movs	r2, #3
 800ac7a:	4393      	bics	r3, r2
 800ac7c:	0019      	movs	r1, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	4bad      	ldr	r3, [pc, #692]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ac84:	430a      	orrs	r2, r1
 800ac86:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	4013      	ands	r3, r2
 800ac90:	d009      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac92:	4ba9      	ldr	r3, [pc, #676]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ac94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac96:	220c      	movs	r2, #12
 800ac98:	4393      	bics	r3, r2
 800ac9a:	0019      	movs	r1, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	689a      	ldr	r2, [r3, #8]
 800aca0:	4ba5      	ldr	r3, [pc, #660]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aca2:	430a      	orrs	r2, r1
 800aca4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2204      	movs	r2, #4
 800acac:	4013      	ands	r3, r2
 800acae:	d009      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800acb0:	4ba1      	ldr	r3, [pc, #644]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800acb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb4:	2230      	movs	r2, #48	@ 0x30
 800acb6:	4393      	bics	r3, r2
 800acb8:	0019      	movs	r1, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	4b9e      	ldr	r3, [pc, #632]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800acc0:	430a      	orrs	r2, r1
 800acc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2210      	movs	r2, #16
 800acca:	4013      	ands	r3, r2
 800accc:	d009      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800acce:	4b9a      	ldr	r3, [pc, #616]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800acd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd2:	4a9b      	ldr	r2, [pc, #620]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800acd4:	4013      	ands	r3, r2
 800acd6:	0019      	movs	r1, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	4b96      	ldr	r3, [pc, #600]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800acde:	430a      	orrs	r2, r1
 800ace0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	2380      	movs	r3, #128	@ 0x80
 800ace8:	015b      	lsls	r3, r3, #5
 800acea:	4013      	ands	r3, r2
 800acec:	d009      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800acee:	4b92      	ldr	r3, [pc, #584]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800acf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acf2:	4a94      	ldr	r2, [pc, #592]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800acf4:	4013      	ands	r3, r2
 800acf6:	0019      	movs	r1, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	695a      	ldr	r2, [r3, #20]
 800acfc:	4b8e      	ldr	r3, [pc, #568]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800acfe:	430a      	orrs	r2, r1
 800ad00:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	2380      	movs	r3, #128	@ 0x80
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	d009      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad0e:	4b8a      	ldr	r3, [pc, #552]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad12:	4a8d      	ldr	r2, [pc, #564]	@ (800af48 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800ad14:	4013      	ands	r3, r2
 800ad16:	0019      	movs	r1, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad1c:	4b86      	ldr	r3, [pc, #536]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	2380      	movs	r3, #128	@ 0x80
 800ad28:	00db      	lsls	r3, r3, #3
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	d009      	beq.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad2e:	4b82      	ldr	r3, [pc, #520]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad32:	4a86      	ldr	r2, [pc, #536]	@ (800af4c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	0019      	movs	r1, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad3c:	4b7e      	ldr	r3, [pc, #504]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2220      	movs	r2, #32
 800ad48:	4013      	ands	r3, r2
 800ad4a:	d009      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad4c:	4b7a      	ldr	r3, [pc, #488]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad50:	4a7f      	ldr	r2, [pc, #508]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	0019      	movs	r1, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699a      	ldr	r2, [r3, #24]
 800ad5a:	4b77      	ldr	r3, [pc, #476]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2240      	movs	r2, #64	@ 0x40
 800ad66:	4013      	ands	r3, r2
 800ad68:	d009      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad6a:	4b73      	ldr	r3, [pc, #460]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad6e:	4a79      	ldr	r2, [pc, #484]	@ (800af54 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ad70:	4013      	ands	r3, r2
 800ad72:	0019      	movs	r1, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	69da      	ldr	r2, [r3, #28]
 800ad78:	4b6f      	ldr	r3, [pc, #444]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	2380      	movs	r3, #128	@ 0x80
 800ad84:	01db      	lsls	r3, r3, #7
 800ad86:	4013      	ands	r3, r2
 800ad88:	d015      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad8a:	4b6b      	ldr	r3, [pc, #428]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	0899      	lsrs	r1, r3, #2
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad96:	4b68      	ldr	r3, [pc, #416]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ada0:	2380      	movs	r3, #128	@ 0x80
 800ada2:	05db      	lsls	r3, r3, #23
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d106      	bne.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ada8:	4b63      	ldr	r3, [pc, #396]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800adaa:	68da      	ldr	r2, [r3, #12]
 800adac:	4b62      	ldr	r3, [pc, #392]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800adae:	2180      	movs	r1, #128	@ 0x80
 800adb0:	0249      	lsls	r1, r1, #9
 800adb2:	430a      	orrs	r2, r1
 800adb4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	2380      	movs	r3, #128	@ 0x80
 800adbc:	031b      	lsls	r3, r3, #12
 800adbe:	4013      	ands	r3, r2
 800adc0:	d009      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800adc2:	4b5d      	ldr	r3, [pc, #372]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800adc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adc6:	2240      	movs	r2, #64	@ 0x40
 800adc8:	4393      	bics	r3, r2
 800adca:	0019      	movs	r1, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800add0:	4b59      	ldr	r3, [pc, #356]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800add2:	430a      	orrs	r2, r1
 800add4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	2380      	movs	r3, #128	@ 0x80
 800addc:	039b      	lsls	r3, r3, #14
 800adde:	4013      	ands	r3, r2
 800ade0:	d016      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800ade2:	4b55      	ldr	r3, [pc, #340]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ade4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade6:	4a5c      	ldr	r2, [pc, #368]	@ (800af58 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ade8:	4013      	ands	r3, r2
 800adea:	0019      	movs	r1, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adf0:	4b51      	ldr	r3, [pc, #324]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800adf2:	430a      	orrs	r2, r1
 800adf4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adfa:	2380      	movs	r3, #128	@ 0x80
 800adfc:	03db      	lsls	r3, r3, #15
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d106      	bne.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ae02:	4b4d      	ldr	r3, [pc, #308]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae04:	68da      	ldr	r2, [r3, #12]
 800ae06:	4b4c      	ldr	r3, [pc, #304]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae08:	2180      	movs	r1, #128	@ 0x80
 800ae0a:	0449      	lsls	r1, r1, #17
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	2380      	movs	r3, #128	@ 0x80
 800ae16:	03db      	lsls	r3, r3, #15
 800ae18:	4013      	ands	r3, r2
 800ae1a:	d016      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800ae1c:	4b46      	ldr	r3, [pc, #280]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae20:	4a4e      	ldr	r2, [pc, #312]	@ (800af5c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ae22:	4013      	ands	r3, r2
 800ae24:	0019      	movs	r1, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae2a:	4b43      	ldr	r3, [pc, #268]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae34:	2380      	movs	r3, #128	@ 0x80
 800ae36:	045b      	lsls	r3, r3, #17
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d106      	bne.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ae3c:	4b3e      	ldr	r3, [pc, #248]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	4b3d      	ldr	r3, [pc, #244]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae42:	2180      	movs	r1, #128	@ 0x80
 800ae44:	0449      	lsls	r1, r1, #17
 800ae46:	430a      	orrs	r2, r1
 800ae48:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	2380      	movs	r3, #128	@ 0x80
 800ae50:	011b      	lsls	r3, r3, #4
 800ae52:	4013      	ands	r3, r2
 800ae54:	d014      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800ae56:	4b38      	ldr	r3, [pc, #224]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	4393      	bics	r3, r2
 800ae5e:	0019      	movs	r1, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1a      	ldr	r2, [r3, #32]
 800ae64:	4b34      	ldr	r3, [pc, #208]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae66:	430a      	orrs	r2, r1
 800ae68:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d106      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ae72:	4b31      	ldr	r3, [pc, #196]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	4b30      	ldr	r3, [pc, #192]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae78:	2180      	movs	r1, #128	@ 0x80
 800ae7a:	0249      	lsls	r1, r1, #9
 800ae7c:	430a      	orrs	r2, r1
 800ae7e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	2380      	movs	r3, #128	@ 0x80
 800ae86:	019b      	lsls	r3, r3, #6
 800ae88:	4013      	ands	r3, r2
 800ae8a:	d014      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800ae8c:	4b2a      	ldr	r3, [pc, #168]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae90:	220c      	movs	r2, #12
 800ae92:	4393      	bics	r3, r2
 800ae94:	0019      	movs	r1, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae9a:	4b27      	ldr	r3, [pc, #156]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae9c:	430a      	orrs	r2, r1
 800ae9e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d106      	bne.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800aea8:	4b23      	ldr	r3, [pc, #140]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	4b22      	ldr	r3, [pc, #136]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aeae:	2180      	movs	r1, #128	@ 0x80
 800aeb0:	0249      	lsls	r1, r1, #9
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	2380      	movs	r3, #128	@ 0x80
 800aebc:	045b      	lsls	r3, r3, #17
 800aebe:	4013      	ands	r3, r2
 800aec0:	d016      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aec2:	4b1d      	ldr	r3, [pc, #116]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aec6:	4a22      	ldr	r2, [pc, #136]	@ (800af50 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aec8:	4013      	ands	r3, r2
 800aeca:	0019      	movs	r1, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aed0:	4b19      	ldr	r3, [pc, #100]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aed2:	430a      	orrs	r2, r1
 800aed4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aeda:	2380      	movs	r3, #128	@ 0x80
 800aedc:	019b      	lsls	r3, r3, #6
 800aede:	429a      	cmp	r2, r3
 800aee0:	d106      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800aee2:	4b15      	ldr	r3, [pc, #84]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	4b14      	ldr	r3, [pc, #80]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aee8:	2180      	movs	r1, #128	@ 0x80
 800aeea:	0449      	lsls	r1, r1, #17
 800aeec:	430a      	orrs	r2, r1
 800aeee:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	2380      	movs	r3, #128	@ 0x80
 800aef6:	049b      	lsls	r3, r3, #18
 800aef8:	4013      	ands	r3, r2
 800aefa:	d016      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aefc:	4b0e      	ldr	r3, [pc, #56]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aefe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af00:	4a10      	ldr	r2, [pc, #64]	@ (800af44 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800af02:	4013      	ands	r3, r2
 800af04:	0019      	movs	r1, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af0a:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af0c:	430a      	orrs	r2, r1
 800af0e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af14:	2380      	movs	r3, #128	@ 0x80
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	429a      	cmp	r2, r3
 800af1a:	d106      	bne.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	4b05      	ldr	r3, [pc, #20]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af22:	2180      	movs	r1, #128	@ 0x80
 800af24:	0449      	lsls	r1, r1, #17
 800af26:	430a      	orrs	r2, r1
 800af28:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800af2a:	2312      	movs	r3, #18
 800af2c:	18fb      	adds	r3, r7, r3
 800af2e:	781b      	ldrb	r3, [r3, #0]
}
 800af30:	0018      	movs	r0, r3
 800af32:	46bd      	mov	sp, r7
 800af34:	b006      	add	sp, #24
 800af36:	bd80      	pop	{r7, pc}
 800af38:	40021000 	.word	0x40021000
 800af3c:	efffffff 	.word	0xefffffff
 800af40:	fffff3ff 	.word	0xfffff3ff
 800af44:	fffffcff 	.word	0xfffffcff
 800af48:	fff3ffff 	.word	0xfff3ffff
 800af4c:	ffcfffff 	.word	0xffcfffff
 800af50:	ffffcfff 	.word	0xffffcfff
 800af54:	ffff3fff 	.word	0xffff3fff
 800af58:	ffbfffff 	.word	0xffbfffff
 800af5c:	feffffff 	.word	0xfeffffff

0800af60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800af60:	b5b0      	push	{r4, r5, r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800af68:	230f      	movs	r3, #15
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	2201      	movs	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d100      	bne.n	800af78 <HAL_RTC_Init+0x18>
 800af76:	e08c      	b.n	800b092 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2229      	movs	r2, #41	@ 0x29
 800af7c:	5c9b      	ldrb	r3, [r3, r2]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10b      	bne.n	800af9c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2228      	movs	r2, #40	@ 0x28
 800af88:	2100      	movs	r1, #0
 800af8a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2288      	movs	r2, #136	@ 0x88
 800af90:	0212      	lsls	r2, r2, #8
 800af92:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	0018      	movs	r0, r3
 800af98:	f7fc fcac 	bl	80078f4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2229      	movs	r2, #41	@ 0x29
 800afa0:	2102      	movs	r1, #2
 800afa2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	2210      	movs	r2, #16
 800afac:	4013      	ands	r3, r2
 800afae:	2b10      	cmp	r3, #16
 800afb0:	d062      	beq.n	800b078 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	22ca      	movs	r2, #202	@ 0xca
 800afb8:	625a      	str	r2, [r3, #36]	@ 0x24
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2253      	movs	r2, #83	@ 0x53
 800afc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800afc2:	250f      	movs	r5, #15
 800afc4:	197c      	adds	r4, r7, r5
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	0018      	movs	r0, r3
 800afca:	f000 fc0f 	bl	800b7ec <RTC_EnterInitMode>
 800afce:	0003      	movs	r3, r0
 800afd0:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800afd2:	0028      	movs	r0, r5
 800afd4:	183b      	adds	r3, r7, r0
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d12c      	bne.n	800b036 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	699a      	ldr	r2, [r3, #24]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	492e      	ldr	r1, [pc, #184]	@ (800b0a0 <HAL_RTC_Init+0x140>)
 800afe8:	400a      	ands	r2, r1
 800afea:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6999      	ldr	r1, [r3, #24]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689a      	ldr	r2, [r3, #8]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	431a      	orrs	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	69db      	ldr	r3, [r3, #28]
 800b000:	431a      	orrs	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	6912      	ldr	r2, [r2, #16]
 800b012:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6919      	ldr	r1, [r3, #16]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	041a      	lsls	r2, r3, #16
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b028:	183c      	adds	r4, r7, r0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	0018      	movs	r0, r3
 800b02e:	f000 fc1f 	bl	800b870 <RTC_ExitInitMode>
 800b032:	0003      	movs	r3, r0
 800b034:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800b036:	230f      	movs	r3, #15
 800b038:	18fb      	adds	r3, r7, r3
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d116      	bne.n	800b06e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699a      	ldr	r2, [r3, #24]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	00d2      	lsls	r2, r2, #3
 800b04c:	08d2      	lsrs	r2, r2, #3
 800b04e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6999      	ldr	r1, [r3, #24]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	431a      	orrs	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	431a      	orrs	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	430a      	orrs	r2, r1
 800b06c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	22ff      	movs	r2, #255	@ 0xff
 800b074:	625a      	str	r2, [r3, #36]	@ 0x24
 800b076:	e003      	b.n	800b080 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b078:	230f      	movs	r3, #15
 800b07a:	18fb      	adds	r3, r7, r3
 800b07c:	2200      	movs	r2, #0
 800b07e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b080:	230f      	movs	r3, #15
 800b082:	18fb      	adds	r3, r7, r3
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2229      	movs	r2, #41	@ 0x29
 800b08e:	2101      	movs	r1, #1
 800b090:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800b092:	230f      	movs	r3, #15
 800b094:	18fb      	adds	r3, r7, r3
 800b096:	781b      	ldrb	r3, [r3, #0]
}
 800b098:	0018      	movs	r0, r3
 800b09a:	46bd      	mov	sp, r7
 800b09c:	b004      	add	sp, #16
 800b09e:	bdb0      	pop	{r4, r5, r7, pc}
 800b0a0:	fb8fffbf 	.word	0xfb8fffbf

0800b0a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b0a4:	b5b0      	push	{r4, r5, r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2228      	movs	r2, #40	@ 0x28
 800b0b4:	5c9b      	ldrb	r3, [r3, r2]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d101      	bne.n	800b0be <HAL_RTC_SetTime+0x1a>
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e092      	b.n	800b1e4 <HAL_RTC_SetTime+0x140>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2228      	movs	r2, #40	@ 0x28
 800b0c2:	2101      	movs	r1, #1
 800b0c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2229      	movs	r2, #41	@ 0x29
 800b0ca:	2102      	movs	r1, #2
 800b0cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	22ca      	movs	r2, #202	@ 0xca
 800b0d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2253      	movs	r2, #83	@ 0x53
 800b0dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b0de:	2513      	movs	r5, #19
 800b0e0:	197c      	adds	r4, r7, r5
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f000 fb81 	bl	800b7ec <RTC_EnterInitMode>
 800b0ea:	0003      	movs	r3, r0
 800b0ec:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800b0ee:	197b      	adds	r3, r7, r5
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d162      	bne.n	800b1bc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d125      	bne.n	800b148 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	2240      	movs	r2, #64	@ 0x40
 800b104:	4013      	ands	r3, r2
 800b106:	d102      	bne.n	800b10e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2200      	movs	r2, #0
 800b10c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	0018      	movs	r0, r3
 800b114:	f000 fbf0 	bl	800b8f8 <RTC_ByteToBcd2>
 800b118:	0003      	movs	r3, r0
 800b11a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	0018      	movs	r0, r3
 800b122:	f000 fbe9 	bl	800b8f8 <RTC_ByteToBcd2>
 800b126:	0003      	movs	r3, r0
 800b128:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b12a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	789b      	ldrb	r3, [r3, #2]
 800b130:	0018      	movs	r0, r3
 800b132:	f000 fbe1 	bl	800b8f8 <RTC_ByteToBcd2>
 800b136:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b138:	0022      	movs	r2, r4
 800b13a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	78db      	ldrb	r3, [r3, #3]
 800b140:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b142:	4313      	orrs	r3, r2
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	e017      	b.n	800b178 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	2240      	movs	r2, #64	@ 0x40
 800b150:	4013      	ands	r3, r2
 800b152:	d102      	bne.n	800b15a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2200      	movs	r2, #0
 800b158:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	785b      	ldrb	r3, [r3, #1]
 800b164:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b166:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b16c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	78db      	ldrb	r3, [r3, #3]
 800b172:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b174:	4313      	orrs	r3, r2
 800b176:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	491b      	ldr	r1, [pc, #108]	@ (800b1ec <HAL_RTC_SetTime+0x148>)
 800b180:	400a      	ands	r2, r1
 800b182:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	699a      	ldr	r2, [r3, #24]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4918      	ldr	r1, [pc, #96]	@ (800b1f0 <HAL_RTC_SetTime+0x14c>)
 800b190:	400a      	ands	r2, r1
 800b192:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6999      	ldr	r1, [r3, #24]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	68da      	ldr	r2, [r3, #12]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	430a      	orrs	r2, r1
 800b1aa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b1ac:	2313      	movs	r3, #19
 800b1ae:	18fc      	adds	r4, r7, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	0018      	movs	r0, r3
 800b1b4:	f000 fb5c 	bl	800b870 <RTC_ExitInitMode>
 800b1b8:	0003      	movs	r3, r0
 800b1ba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	22ff      	movs	r2, #255	@ 0xff
 800b1c2:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800b1c4:	2313      	movs	r3, #19
 800b1c6:	18fb      	adds	r3, r7, r3
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d103      	bne.n	800b1d6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2229      	movs	r2, #41	@ 0x29
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2228      	movs	r2, #40	@ 0x28
 800b1da:	2100      	movs	r1, #0
 800b1dc:	5499      	strb	r1, [r3, r2]

  return status;
 800b1de:	2313      	movs	r3, #19
 800b1e0:	18fb      	adds	r3, r7, r3
 800b1e2:	781b      	ldrb	r3, [r3, #0]
}
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	b006      	add	sp, #24
 800b1ea:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ec:	007f7f7f 	.word	0x007f7f7f
 800b1f0:	fffbffff 	.word	0xfffbffff

0800b1f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b1f4:	b5b0      	push	{r4, r5, r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2228      	movs	r2, #40	@ 0x28
 800b204:	5c9b      	ldrb	r3, [r3, r2]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d101      	bne.n	800b20e <HAL_RTC_SetDate+0x1a>
 800b20a:	2302      	movs	r3, #2
 800b20c:	e07e      	b.n	800b30c <HAL_RTC_SetDate+0x118>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2228      	movs	r2, #40	@ 0x28
 800b212:	2101      	movs	r1, #1
 800b214:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2229      	movs	r2, #41	@ 0x29
 800b21a:	2102      	movs	r1, #2
 800b21c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10e      	bne.n	800b242 <HAL_RTC_SetDate+0x4e>
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	785b      	ldrb	r3, [r3, #1]
 800b228:	001a      	movs	r2, r3
 800b22a:	2310      	movs	r3, #16
 800b22c:	4013      	ands	r3, r2
 800b22e:	d008      	beq.n	800b242 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	785b      	ldrb	r3, [r3, #1]
 800b234:	2210      	movs	r2, #16
 800b236:	4393      	bics	r3, r2
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	330a      	adds	r3, #10
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d11c      	bne.n	800b282 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	78db      	ldrb	r3, [r3, #3]
 800b24c:	0018      	movs	r0, r3
 800b24e:	f000 fb53 	bl	800b8f8 <RTC_ByteToBcd2>
 800b252:	0003      	movs	r3, r0
 800b254:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	0018      	movs	r0, r3
 800b25c:	f000 fb4c 	bl	800b8f8 <RTC_ByteToBcd2>
 800b260:	0003      	movs	r3, r0
 800b262:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b264:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	789b      	ldrb	r3, [r3, #2]
 800b26a:	0018      	movs	r0, r3
 800b26c:	f000 fb44 	bl	800b8f8 <RTC_ByteToBcd2>
 800b270:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b272:	0022      	movs	r2, r4
 800b274:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b27c:	4313      	orrs	r3, r2
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	e00e      	b.n	800b2a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	78db      	ldrb	r3, [r3, #3]
 800b286:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	785b      	ldrb	r3, [r3, #1]
 800b28c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b28e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b294:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b29c:	4313      	orrs	r3, r2
 800b29e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	22ca      	movs	r2, #202	@ 0xca
 800b2a6:	625a      	str	r2, [r3, #36]	@ 0x24
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2253      	movs	r2, #83	@ 0x53
 800b2ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b2b0:	2513      	movs	r5, #19
 800b2b2:	197c      	adds	r4, r7, r5
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	0018      	movs	r0, r3
 800b2b8:	f000 fa98 	bl	800b7ec <RTC_EnterInitMode>
 800b2bc:	0003      	movs	r3, r0
 800b2be:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800b2c0:	0028      	movs	r0, r5
 800b2c2:	183b      	adds	r3, r7, r0
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10c      	bne.n	800b2e4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	4910      	ldr	r1, [pc, #64]	@ (800b314 <HAL_RTC_SetDate+0x120>)
 800b2d2:	400a      	ands	r2, r1
 800b2d4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b2d6:	183c      	adds	r4, r7, r0
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	0018      	movs	r0, r3
 800b2dc:	f000 fac8 	bl	800b870 <RTC_ExitInitMode>
 800b2e0:	0003      	movs	r3, r0
 800b2e2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	22ff      	movs	r2, #255	@ 0xff
 800b2ea:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b2ec:	2313      	movs	r3, #19
 800b2ee:	18fb      	adds	r3, r7, r3
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d103      	bne.n	800b2fe <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2229      	movs	r2, #41	@ 0x29
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2228      	movs	r2, #40	@ 0x28
 800b302:	2100      	movs	r1, #0
 800b304:	5499      	strb	r1, [r3, r2]

  return status;
 800b306:	2313      	movs	r3, #19
 800b308:	18fb      	adds	r3, r7, r3
 800b30a:	781b      	ldrb	r3, [r3, #0]
}
 800b30c:	0018      	movs	r0, r3
 800b30e:	46bd      	mov	sp, r7
 800b310:	b006      	add	sp, #24
 800b312:	bdb0      	pop	{r4, r5, r7, pc}
 800b314:	00ffff3f 	.word	0x00ffff3f

0800b318 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b318:	b590      	push	{r4, r7, lr}
 800b31a:	b089      	sub	sp, #36	@ 0x24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2228      	movs	r2, #40	@ 0x28
 800b328:	5c9b      	ldrb	r3, [r3, r2]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d101      	bne.n	800b332 <HAL_RTC_SetAlarm_IT+0x1a>
 800b32e:	2302      	movs	r3, #2
 800b330:	e127      	b.n	800b582 <HAL_RTC_SetAlarm_IT+0x26a>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2228      	movs	r2, #40	@ 0x28
 800b336:	2101      	movs	r1, #1
 800b338:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2229      	movs	r2, #41	@ 0x29
 800b33e:	2102      	movs	r1, #2
 800b340:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d136      	bne.n	800b3b6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	2240      	movs	r2, #64	@ 0x40
 800b350:	4013      	ands	r3, r2
 800b352:	d102      	bne.n	800b35a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	2200      	movs	r2, #0
 800b358:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	0018      	movs	r0, r3
 800b360:	f000 faca 	bl	800b8f8 <RTC_ByteToBcd2>
 800b364:	0003      	movs	r3, r0
 800b366:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	785b      	ldrb	r3, [r3, #1]
 800b36c:	0018      	movs	r0, r3
 800b36e:	f000 fac3 	bl	800b8f8 <RTC_ByteToBcd2>
 800b372:	0003      	movs	r3, r0
 800b374:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b376:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	789b      	ldrb	r3, [r3, #2]
 800b37c:	0018      	movs	r0, r3
 800b37e:	f000 fabb 	bl	800b8f8 <RTC_ByteToBcd2>
 800b382:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b384:	0022      	movs	r2, r4
 800b386:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	78db      	ldrb	r3, [r3, #3]
 800b38c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b38e:	431a      	orrs	r2, r3
 800b390:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2220      	movs	r2, #32
 800b396:	5c9b      	ldrb	r3, [r3, r2]
 800b398:	0018      	movs	r0, r3
 800b39a:	f000 faad 	bl	800b8f8 <RTC_ByteToBcd2>
 800b39e:	0003      	movs	r3, r0
 800b3a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b3a2:	0022      	movs	r2, r4
 800b3a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b3aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	61fb      	str	r3, [r7, #28]
 800b3b4:	e022      	b.n	800b3fc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	2240      	movs	r2, #64	@ 0x40
 800b3be:	4013      	ands	r3, r2
 800b3c0:	d102      	bne.n	800b3c8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b3d4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b3da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	78db      	ldrb	r3, [r3, #3]
 800b3e0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b3e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	2120      	movs	r1, #32
 800b3e8:	5c5b      	ldrb	r3, [r3, r1]
 800b3ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b3ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b3f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	4313      	orrs	r3, r2
 800b406:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	22ca      	movs	r2, #202	@ 0xca
 800b40e:	625a      	str	r2, [r3, #36]	@ 0x24
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2253      	movs	r2, #83	@ 0x53
 800b416:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b41c:	2380      	movs	r3, #128	@ 0x80
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	429a      	cmp	r2, r3
 800b422:	d14c      	bne.n	800b4be <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	699a      	ldr	r2, [r3, #24]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4957      	ldr	r1, [pc, #348]	@ (800b58c <HAL_RTC_SetAlarm_IT+0x274>)
 800b430:	400a      	ands	r2, r1
 800b432:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2101      	movs	r1, #1
 800b440:	430a      	orrs	r2, r1
 800b442:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800b444:	f7fd fb08 	bl	8008a58 <HAL_GetTick>
 800b448:	0003      	movs	r3, r0
 800b44a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b44c:	e016      	b.n	800b47c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b44e:	f7fd fb03 	bl	8008a58 <HAL_GetTick>
 800b452:	0002      	movs	r2, r0
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	23fa      	movs	r3, #250	@ 0xfa
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d90d      	bls.n	800b47c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	22ff      	movs	r2, #255	@ 0xff
 800b466:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2229      	movs	r2, #41	@ 0x29
 800b46c:	2103      	movs	r1, #3
 800b46e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2228      	movs	r2, #40	@ 0x28
 800b474:	2100      	movs	r1, #0
 800b476:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e082      	b.n	800b582 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	2201      	movs	r2, #1
 800b484:	4013      	ands	r3, r2
 800b486:	d0e2      	beq.n	800b44e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	69fa      	ldr	r2, [r7, #28]
 800b48e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	699a      	ldr	r2, [r3, #24]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2180      	movs	r1, #128	@ 0x80
 800b4a4:	0049      	lsls	r1, r1, #1
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	699a      	ldr	r2, [r3, #24]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2180      	movs	r1, #128	@ 0x80
 800b4b6:	0149      	lsls	r1, r1, #5
 800b4b8:	430a      	orrs	r2, r1
 800b4ba:	619a      	str	r2, [r3, #24]
 800b4bc:	e04b      	b.n	800b556 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	699a      	ldr	r2, [r3, #24]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4931      	ldr	r1, [pc, #196]	@ (800b590 <HAL_RTC_SetAlarm_IT+0x278>)
 800b4ca:	400a      	ands	r2, r1
 800b4cc:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2102      	movs	r1, #2
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800b4de:	f7fd fabb 	bl	8008a58 <HAL_GetTick>
 800b4e2:	0003      	movs	r3, r0
 800b4e4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b4e6:	e016      	b.n	800b516 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b4e8:	f7fd fab6 	bl	8008a58 <HAL_GetTick>
 800b4ec:	0002      	movs	r2, r0
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	1ad2      	subs	r2, r2, r3
 800b4f2:	23fa      	movs	r3, #250	@ 0xfa
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d90d      	bls.n	800b516 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	22ff      	movs	r2, #255	@ 0xff
 800b500:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2229      	movs	r2, #41	@ 0x29
 800b506:	2103      	movs	r1, #3
 800b508:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2228      	movs	r2, #40	@ 0x28
 800b50e:	2100      	movs	r1, #0
 800b510:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b512:	2303      	movs	r3, #3
 800b514:	e035      	b.n	800b582 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	2202      	movs	r2, #2
 800b51e:	4013      	ands	r3, r2
 800b520:	d0e2      	beq.n	800b4e8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	69fa      	ldr	r2, [r7, #28]
 800b528:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	699a      	ldr	r2, [r3, #24]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2180      	movs	r1, #128	@ 0x80
 800b53e:	0089      	lsls	r1, r1, #2
 800b540:	430a      	orrs	r2, r1
 800b542:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	699a      	ldr	r2, [r3, #24]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2180      	movs	r1, #128	@ 0x80
 800b550:	0189      	lsls	r1, r1, #6
 800b552:	430a      	orrs	r2, r1
 800b554:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b556:	4a0f      	ldr	r2, [pc, #60]	@ (800b594 <HAL_RTC_SetAlarm_IT+0x27c>)
 800b558:	2380      	movs	r3, #128	@ 0x80
 800b55a:	58d3      	ldr	r3, [r2, r3]
 800b55c:	490d      	ldr	r1, [pc, #52]	@ (800b594 <HAL_RTC_SetAlarm_IT+0x27c>)
 800b55e:	2280      	movs	r2, #128	@ 0x80
 800b560:	0312      	lsls	r2, r2, #12
 800b562:	4313      	orrs	r3, r2
 800b564:	2280      	movs	r2, #128	@ 0x80
 800b566:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	22ff      	movs	r2, #255	@ 0xff
 800b56e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2229      	movs	r2, #41	@ 0x29
 800b574:	2101      	movs	r1, #1
 800b576:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2228      	movs	r2, #40	@ 0x28
 800b57c:	2100      	movs	r1, #0
 800b57e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	0018      	movs	r0, r3
 800b584:	46bd      	mov	sp, r7
 800b586:	b009      	add	sp, #36	@ 0x24
 800b588:	bd90      	pop	{r4, r7, pc}
 800b58a:	46c0      	nop			@ (mov r8, r8)
 800b58c:	fffffeff 	.word	0xfffffeff
 800b590:	fffffdff 	.word	0xfffffdff
 800b594:	40021800 	.word	0x40021800

0800b598 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	2380      	movs	r3, #128	@ 0x80
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d144      	bne.n	800b63a <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2280      	movs	r2, #128	@ 0x80
 800b5b4:	0052      	lsls	r2, r2, #1
 800b5b6:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5be:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c6:	045b      	lsls	r3, r3, #17
 800b5c8:	0c5b      	lsrs	r3, r3, #17
 800b5ca:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	0c1b      	lsrs	r3, r3, #16
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	223f      	movs	r2, #63	@ 0x3f
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	b2da      	uxtb	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	0a1b      	lsrs	r3, r3, #8
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	227f      	movs	r2, #127	@ 0x7f
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	227f      	movs	r2, #127	@ 0x7f
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	b2da      	uxtb	r2, r3
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	0d9b      	lsrs	r3, r3, #22
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2201      	movs	r2, #1
 800b602:	4013      	ands	r3, r2
 800b604:	b2da      	uxtb	r2, r3
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	0e1b      	lsrs	r3, r3, #24
 800b614:	b2db      	uxtb	r3, r3
 800b616:	223f      	movs	r2, #63	@ 0x3f
 800b618:	4013      	ands	r3, r2
 800b61a:	b2d9      	uxtb	r1, r3
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2220      	movs	r2, #32
 800b620:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	2380      	movs	r3, #128	@ 0x80
 800b626:	05db      	lsls	r3, r3, #23
 800b628:	401a      	ands	r2, r3
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	4a3b      	ldr	r2, [pc, #236]	@ (800b720 <HAL_RTC_GetAlarm+0x188>)
 800b632:	401a      	ands	r2, r3
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	615a      	str	r2, [r3, #20]
 800b638:	e043      	b.n	800b6c2 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2280      	movs	r2, #128	@ 0x80
 800b63e:	0092      	lsls	r2, r2, #2
 800b640:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b648:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b650:	045b      	lsls	r3, r3, #17
 800b652:	0c5b      	lsrs	r3, r3, #17
 800b654:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	0c1b      	lsrs	r3, r3, #16
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	223f      	movs	r2, #63	@ 0x3f
 800b65e:	4013      	ands	r3, r2
 800b660:	b2da      	uxtb	r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	0a1b      	lsrs	r3, r3, #8
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	227f      	movs	r2, #127	@ 0x7f
 800b66e:	4013      	ands	r3, r2
 800b670:	b2da      	uxtb	r2, r3
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	227f      	movs	r2, #127	@ 0x7f
 800b67c:	4013      	ands	r3, r2
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	0d9b      	lsrs	r3, r3, #22
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2201      	movs	r2, #1
 800b68c:	4013      	ands	r3, r2
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	0e1b      	lsrs	r3, r3, #24
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	223f      	movs	r2, #63	@ 0x3f
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	b2d9      	uxtb	r1, r3
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	2380      	movs	r3, #128	@ 0x80
 800b6b0:	05db      	lsls	r3, r3, #23
 800b6b2:	401a      	ands	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	4a19      	ldr	r2, [pc, #100]	@ (800b720 <HAL_RTC_GetAlarm+0x188>)
 800b6bc:	401a      	ands	r2, r3
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d125      	bne.n	800b714 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	0018      	movs	r0, r3
 800b6ce:	f000 f93b 	bl	800b948 <RTC_Bcd2ToByte>
 800b6d2:	0003      	movs	r3, r0
 800b6d4:	001a      	movs	r2, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f000 f932 	bl	800b948 <RTC_Bcd2ToByte>
 800b6e4:	0003      	movs	r3, r0
 800b6e6:	001a      	movs	r2, r3
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	789b      	ldrb	r3, [r3, #2]
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	f000 f929 	bl	800b948 <RTC_Bcd2ToByte>
 800b6f6:	0003      	movs	r3, r0
 800b6f8:	001a      	movs	r2, r3
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2220      	movs	r2, #32
 800b702:	5c9b      	ldrb	r3, [r3, r2]
 800b704:	0018      	movs	r0, r3
 800b706:	f000 f91f 	bl	800b948 <RTC_Bcd2ToByte>
 800b70a:	0003      	movs	r3, r0
 800b70c:	0019      	movs	r1, r3
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2220      	movs	r2, #32
 800b712:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	0018      	movs	r0, r3
 800b718:	46bd      	mov	sp, r7
 800b71a:	b006      	add	sp, #24
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	46c0      	nop			@ (mov r8, r8)
 800b720:	80808080 	.word	0x80808080

0800b724 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	699a      	ldr	r2, [r3, #24]
 800b732:	2380      	movs	r3, #128	@ 0x80
 800b734:	015b      	lsls	r3, r3, #5
 800b736:	4013      	ands	r3, r2
 800b738:	d011      	beq.n	800b75e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b740:	2201      	movs	r2, #1
 800b742:	4013      	ands	r3, r2
 800b744:	d00b      	beq.n	800b75e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2101      	movs	r1, #1
 800b752:	430a      	orrs	r2, r1
 800b754:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	0018      	movs	r0, r3
 800b75a:	f7fb fbcf 	bl	8006efc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	699a      	ldr	r2, [r3, #24]
 800b764:	2380      	movs	r3, #128	@ 0x80
 800b766:	019b      	lsls	r3, r3, #6
 800b768:	4013      	ands	r3, r2
 800b76a:	d011      	beq.n	800b790 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b772:	2202      	movs	r2, #2
 800b774:	4013      	ands	r3, r2
 800b776:	d00b      	beq.n	800b790 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2102      	movs	r1, #2
 800b784:	430a      	orrs	r2, r1
 800b786:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	0018      	movs	r0, r3
 800b78c:	f000 f9ba 	bl	800bb04 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2229      	movs	r2, #41	@ 0x29
 800b794:	2101      	movs	r1, #1
 800b796:	5499      	strb	r1, [r3, r2]
}
 800b798:	46c0      	nop			@ (mov r8, r8)
 800b79a:	46bd      	mov	sp, r7
 800b79c:	b002      	add	sp, #8
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a0e      	ldr	r2, [pc, #56]	@ (800b7e8 <HAL_RTC_WaitForSynchro+0x48>)
 800b7ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b7b0:	f7fd f952 	bl	8008a58 <HAL_GetTick>
 800b7b4:	0003      	movs	r3, r0
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b7b8:	e00a      	b.n	800b7d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b7ba:	f7fd f94d 	bl	8008a58 <HAL_GetTick>
 800b7be:	0002      	movs	r2, r0
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	1ad2      	subs	r2, r2, r3
 800b7c4:	23fa      	movs	r3, #250	@ 0xfa
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d901      	bls.n	800b7d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e006      	b.n	800b7de <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	4013      	ands	r3, r2
 800b7da:	d0ee      	beq.n	800b7ba <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	0018      	movs	r0, r3
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	b004      	add	sp, #16
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	46c0      	nop			@ (mov r8, r8)
 800b7e8:	0001005f 	.word	0x0001005f

0800b7ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800b7f4:	230f      	movs	r3, #15
 800b7f6:	18fb      	adds	r3, r7, r3
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	2240      	movs	r2, #64	@ 0x40
 800b804:	4013      	ands	r3, r2
 800b806:	d12c      	bne.n	800b862 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68da      	ldr	r2, [r3, #12]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2180      	movs	r1, #128	@ 0x80
 800b814:	430a      	orrs	r2, r1
 800b816:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b818:	f7fd f91e 	bl	8008a58 <HAL_GetTick>
 800b81c:	0003      	movs	r3, r0
 800b81e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b820:	e014      	b.n	800b84c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b822:	f7fd f919 	bl	8008a58 <HAL_GetTick>
 800b826:	0002      	movs	r2, r0
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	1ad2      	subs	r2, r2, r3
 800b82c:	200f      	movs	r0, #15
 800b82e:	183b      	adds	r3, r7, r0
 800b830:	1839      	adds	r1, r7, r0
 800b832:	7809      	ldrb	r1, [r1, #0]
 800b834:	7019      	strb	r1, [r3, #0]
 800b836:	23fa      	movs	r3, #250	@ 0xfa
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d906      	bls.n	800b84c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800b83e:	183b      	adds	r3, r7, r0
 800b840:	2203      	movs	r2, #3
 800b842:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2229      	movs	r2, #41	@ 0x29
 800b848:	2103      	movs	r1, #3
 800b84a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	2240      	movs	r2, #64	@ 0x40
 800b854:	4013      	ands	r3, r2
 800b856:	d104      	bne.n	800b862 <RTC_EnterInitMode+0x76>
 800b858:	230f      	movs	r3, #15
 800b85a:	18fb      	adds	r3, r7, r3
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d1df      	bne.n	800b822 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b862:	230f      	movs	r3, #15
 800b864:	18fb      	adds	r3, r7, r3
 800b866:	781b      	ldrb	r3, [r3, #0]
}
 800b868:	0018      	movs	r0, r3
 800b86a:	46bd      	mov	sp, r7
 800b86c:	b004      	add	sp, #16
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b870:	b590      	push	{r4, r7, lr}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b878:	240f      	movs	r4, #15
 800b87a:	193b      	adds	r3, r7, r4
 800b87c:	2200      	movs	r2, #0
 800b87e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b880:	4b1c      	ldr	r3, [pc, #112]	@ (800b8f4 <RTC_ExitInitMode+0x84>)
 800b882:	68da      	ldr	r2, [r3, #12]
 800b884:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f4 <RTC_ExitInitMode+0x84>)
 800b886:	2180      	movs	r1, #128	@ 0x80
 800b888:	438a      	bics	r2, r1
 800b88a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b88c:	4b19      	ldr	r3, [pc, #100]	@ (800b8f4 <RTC_ExitInitMode+0x84>)
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	2220      	movs	r2, #32
 800b892:	4013      	ands	r3, r2
 800b894:	d10d      	bne.n	800b8b2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	0018      	movs	r0, r3
 800b89a:	f7ff ff81 	bl	800b7a0 <HAL_RTC_WaitForSynchro>
 800b89e:	1e03      	subs	r3, r0, #0
 800b8a0:	d021      	beq.n	800b8e6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2229      	movs	r2, #41	@ 0x29
 800b8a6:	2103      	movs	r1, #3
 800b8a8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b8aa:	193b      	adds	r3, r7, r4
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	e019      	b.n	800b8e6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b8b2:	4b10      	ldr	r3, [pc, #64]	@ (800b8f4 <RTC_ExitInitMode+0x84>)
 800b8b4:	699a      	ldr	r2, [r3, #24]
 800b8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f4 <RTC_ExitInitMode+0x84>)
 800b8b8:	2120      	movs	r1, #32
 800b8ba:	438a      	bics	r2, r1
 800b8bc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f7ff ff6d 	bl	800b7a0 <HAL_RTC_WaitForSynchro>
 800b8c6:	1e03      	subs	r3, r0, #0
 800b8c8:	d007      	beq.n	800b8da <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2229      	movs	r2, #41	@ 0x29
 800b8ce:	2103      	movs	r1, #3
 800b8d0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b8d2:	230f      	movs	r3, #15
 800b8d4:	18fb      	adds	r3, r7, r3
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b8da:	4b06      	ldr	r3, [pc, #24]	@ (800b8f4 <RTC_ExitInitMode+0x84>)
 800b8dc:	699a      	ldr	r2, [r3, #24]
 800b8de:	4b05      	ldr	r3, [pc, #20]	@ (800b8f4 <RTC_ExitInitMode+0x84>)
 800b8e0:	2120      	movs	r1, #32
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	619a      	str	r2, [r3, #24]
  }

  return status;
 800b8e6:	230f      	movs	r3, #15
 800b8e8:	18fb      	adds	r3, r7, r3
 800b8ea:	781b      	ldrb	r3, [r3, #0]
}
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	b005      	add	sp, #20
 800b8f2:	bd90      	pop	{r4, r7, pc}
 800b8f4:	40002800 	.word	0x40002800

0800b8f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	0002      	movs	r2, r0
 800b900:	1dfb      	adds	r3, r7, #7
 800b902:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800b908:	230b      	movs	r3, #11
 800b90a:	18fb      	adds	r3, r7, r3
 800b90c:	1dfa      	adds	r2, r7, #7
 800b90e:	7812      	ldrb	r2, [r2, #0]
 800b910:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800b912:	e008      	b.n	800b926 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3301      	adds	r3, #1
 800b918:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800b91a:	220b      	movs	r2, #11
 800b91c:	18bb      	adds	r3, r7, r2
 800b91e:	18ba      	adds	r2, r7, r2
 800b920:	7812      	ldrb	r2, [r2, #0]
 800b922:	3a0a      	subs	r2, #10
 800b924:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800b926:	210b      	movs	r1, #11
 800b928:	187b      	adds	r3, r7, r1
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b09      	cmp	r3, #9
 800b92e:	d8f1      	bhi.n	800b914 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	b2db      	uxtb	r3, r3
 800b934:	011b      	lsls	r3, r3, #4
 800b936:	b2da      	uxtb	r2, r3
 800b938:	187b      	adds	r3, r7, r1
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	b2db      	uxtb	r3, r3
}
 800b940:	0018      	movs	r0, r3
 800b942:	46bd      	mov	sp, r7
 800b944:	b004      	add	sp, #16
 800b946:	bd80      	pop	{r7, pc}

0800b948 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	0002      	movs	r2, r0
 800b950:	1dfb      	adds	r3, r7, #7
 800b952:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b954:	1dfb      	adds	r3, r7, #7
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	091b      	lsrs	r3, r3, #4
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	001a      	movs	r2, r3
 800b95e:	0013      	movs	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	189b      	adds	r3, r3, r2
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	1dfb      	adds	r3, r7, #7
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	210f      	movs	r1, #15
 800b972:	400b      	ands	r3, r1
 800b974:	b2db      	uxtb	r3, r3
 800b976:	18d3      	adds	r3, r2, r3
 800b978:	b2db      	uxtb	r3, r3
}
 800b97a:	0018      	movs	r0, r3
 800b97c:	46bd      	mov	sp, r7
 800b97e:	b004      	add	sp, #16
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2228      	movs	r2, #40	@ 0x28
 800b994:	5c9b      	ldrb	r3, [r3, r2]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d101      	bne.n	800b99e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800b99a:	2302      	movs	r3, #2
 800b99c:	e082      	b.n	800baa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2228      	movs	r2, #40	@ 0x28
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2229      	movs	r2, #41	@ 0x29
 800b9aa:	2102      	movs	r1, #2
 800b9ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	22ca      	movs	r2, #202	@ 0xca
 800b9b4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2253      	movs	r2, #83	@ 0x53
 800b9bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	699a      	ldr	r2, [r3, #24]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4938      	ldr	r1, [pc, #224]	@ (800baac <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800b9ca:	400a      	ands	r2, r1
 800b9cc:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2104      	movs	r1, #4
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b9de:	4b34      	ldr	r3, [pc, #208]	@ (800bab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	2240      	movs	r2, #64	@ 0x40
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	d121      	bne.n	800ba2c <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800b9e8:	f7fd f836 	bl	8008a58 <HAL_GetTick>
 800b9ec:	0003      	movs	r3, r0
 800b9ee:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b9f0:	e016      	b.n	800ba20 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b9f2:	f7fd f831 	bl	8008a58 <HAL_GetTick>
 800b9f6:	0002      	movs	r2, r0
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	1ad2      	subs	r2, r2, r3
 800b9fc:	23fa      	movs	r3, #250	@ 0xfa
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d90d      	bls.n	800ba20 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	22ff      	movs	r2, #255	@ 0xff
 800ba0a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2229      	movs	r2, #41	@ 0x29
 800ba10:	2103      	movs	r1, #3
 800ba12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2228      	movs	r2, #40	@ 0x28
 800ba18:	2100      	movs	r1, #0
 800ba1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e041      	b.n	800baa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	2204      	movs	r2, #4
 800ba28:	4013      	ands	r3, r2
 800ba2a:	d0e2      	beq.n	800b9f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	699a      	ldr	r2, [r3, #24]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2107      	movs	r1, #7
 800ba40:	438a      	bics	r2, r1
 800ba42:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	6999      	ldr	r1, [r3, #24]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ba54:	4a17      	ldr	r2, [pc, #92]	@ (800bab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800ba56:	2380      	movs	r3, #128	@ 0x80
 800ba58:	58d3      	ldr	r3, [r2, r3]
 800ba5a:	4916      	ldr	r1, [pc, #88]	@ (800bab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800ba5c:	2280      	movs	r2, #128	@ 0x80
 800ba5e:	0312      	lsls	r2, r2, #12
 800ba60:	4313      	orrs	r3, r2
 800ba62:	2280      	movs	r2, #128	@ 0x80
 800ba64:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	699a      	ldr	r2, [r3, #24]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2180      	movs	r1, #128	@ 0x80
 800ba72:	01c9      	lsls	r1, r1, #7
 800ba74:	430a      	orrs	r2, r1
 800ba76:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	699a      	ldr	r2, [r3, #24]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2180      	movs	r1, #128	@ 0x80
 800ba84:	00c9      	lsls	r1, r1, #3
 800ba86:	430a      	orrs	r2, r1
 800ba88:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	22ff      	movs	r2, #255	@ 0xff
 800ba90:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2229      	movs	r2, #41	@ 0x29
 800ba96:	2101      	movs	r1, #1
 800ba98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2228      	movs	r2, #40	@ 0x28
 800ba9e:	2100      	movs	r1, #0
 800baa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	0018      	movs	r0, r3
 800baa6:	46bd      	mov	sp, r7
 800baa8:	b006      	add	sp, #24
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	fffffbff 	.word	0xfffffbff
 800bab0:	40002800 	.word	0x40002800
 800bab4:	40021800 	.word	0x40021800

0800bab8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac6:	2204      	movs	r2, #4
 800bac8:	4013      	ands	r3, r2
 800baca:	d00b      	beq.n	800bae4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2104      	movs	r1, #4
 800bad8:	430a      	orrs	r2, r1
 800bada:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	0018      	movs	r0, r3
 800bae0:	f000 f808 	bl	800baf4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2229      	movs	r2, #41	@ 0x29
 800bae8:	2101      	movs	r1, #1
 800baea:	5499      	strb	r1, [r3, r2]
}
 800baec:	46c0      	nop			@ (mov r8, r8)
 800baee:	46bd      	mov	sp, r7
 800baf0:	b002      	add	sp, #8
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800bafc:	46c0      	nop			@ (mov r8, r8)
 800bafe:	46bd      	mov	sp, r7
 800bb00:	b002      	add	sp, #8
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800bb0c:	46c0      	nop			@ (mov r8, r8)
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	b002      	add	sp, #8
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e0a8      	b.n	800bc78 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d109      	bne.n	800bb42 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	2382      	movs	r3, #130	@ 0x82
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d009      	beq.n	800bb4e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	61da      	str	r2, [r3, #28]
 800bb40:	e005      	b.n	800bb4e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	225d      	movs	r2, #93	@ 0x5d
 800bb58:	5c9b      	ldrb	r3, [r3, r2]
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d107      	bne.n	800bb70 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	225c      	movs	r2, #92	@ 0x5c
 800bb64:	2100      	movs	r1, #0
 800bb66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f7fb ff08 	bl	8007980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	225d      	movs	r2, #93	@ 0x5d
 800bb74:	2102      	movs	r1, #2
 800bb76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2140      	movs	r1, #64	@ 0x40
 800bb84:	438a      	bics	r2, r1
 800bb86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	68da      	ldr	r2, [r3, #12]
 800bb8c:	23e0      	movs	r3, #224	@ 0xe0
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d902      	bls.n	800bb9a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb94:	2300      	movs	r3, #0
 800bb96:	60fb      	str	r3, [r7, #12]
 800bb98:	e002      	b.n	800bba0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb9a:	2380      	movs	r3, #128	@ 0x80
 800bb9c:	015b      	lsls	r3, r3, #5
 800bb9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	23f0      	movs	r3, #240	@ 0xf0
 800bba6:	011b      	lsls	r3, r3, #4
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d008      	beq.n	800bbbe <HAL_SPI_Init+0xaa>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	68da      	ldr	r2, [r3, #12]
 800bbb0:	23e0      	movs	r3, #224	@ 0xe0
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d002      	beq.n	800bbbe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	2382      	movs	r3, #130	@ 0x82
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	401a      	ands	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6899      	ldr	r1, [r3, #8]
 800bbcc:	2384      	movs	r3, #132	@ 0x84
 800bbce:	021b      	lsls	r3, r3, #8
 800bbd0:	400b      	ands	r3, r1
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	2102      	movs	r1, #2
 800bbda:	400b      	ands	r3, r1
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	400b      	ands	r3, r1
 800bbe6:	431a      	orrs	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6999      	ldr	r1, [r3, #24]
 800bbec:	2380      	movs	r3, #128	@ 0x80
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	400b      	ands	r3, r1
 800bbf2:	431a      	orrs	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	2138      	movs	r1, #56	@ 0x38
 800bbfa:	400b      	ands	r3, r1
 800bbfc:	431a      	orrs	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	2180      	movs	r1, #128	@ 0x80
 800bc04:	400b      	ands	r3, r1
 800bc06:	431a      	orrs	r2, r3
 800bc08:	0011      	movs	r1, r2
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc0e:	2380      	movs	r3, #128	@ 0x80
 800bc10:	019b      	lsls	r3, r3, #6
 800bc12:	401a      	ands	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	0c1b      	lsrs	r3, r3, #16
 800bc22:	2204      	movs	r2, #4
 800bc24:	401a      	ands	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2a:	2110      	movs	r1, #16
 800bc2c:	400b      	ands	r3, r1
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc34:	2108      	movs	r1, #8
 800bc36:	400b      	ands	r3, r1
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68d9      	ldr	r1, [r3, #12]
 800bc3e:	23f0      	movs	r3, #240	@ 0xf0
 800bc40:	011b      	lsls	r3, r3, #4
 800bc42:	400b      	ands	r3, r1
 800bc44:	431a      	orrs	r2, r3
 800bc46:	0011      	movs	r1, r2
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	2380      	movs	r3, #128	@ 0x80
 800bc4c:	015b      	lsls	r3, r3, #5
 800bc4e:	401a      	ands	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	430a      	orrs	r2, r1
 800bc56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	69da      	ldr	r2, [r3, #28]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4907      	ldr	r1, [pc, #28]	@ (800bc80 <HAL_SPI_Init+0x16c>)
 800bc64:	400a      	ands	r2, r1
 800bc66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	225d      	movs	r2, #93	@ 0x5d
 800bc72:	2101      	movs	r1, #1
 800bc74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	0018      	movs	r0, r3
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	b004      	add	sp, #16
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	fffff7ff 	.word	0xfffff7ff

0800bc84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	603b      	str	r3, [r7, #0]
 800bc90:	1dbb      	adds	r3, r7, #6
 800bc92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc94:	231f      	movs	r3, #31
 800bc96:	18fb      	adds	r3, r7, r3
 800bc98:	2200      	movs	r2, #0
 800bc9a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	225c      	movs	r2, #92	@ 0x5c
 800bca0:	5c9b      	ldrb	r3, [r3, r2]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d101      	bne.n	800bcaa <HAL_SPI_Transmit+0x26>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e147      	b.n	800bf3a <HAL_SPI_Transmit+0x2b6>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	225c      	movs	r2, #92	@ 0x5c
 800bcae:	2101      	movs	r1, #1
 800bcb0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcb2:	f7fc fed1 	bl	8008a58 <HAL_GetTick>
 800bcb6:	0003      	movs	r3, r0
 800bcb8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800bcba:	2316      	movs	r3, #22
 800bcbc:	18fb      	adds	r3, r7, r3
 800bcbe:	1dba      	adds	r2, r7, #6
 800bcc0:	8812      	ldrh	r2, [r2, #0]
 800bcc2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	225d      	movs	r2, #93	@ 0x5d
 800bcc8:	5c9b      	ldrb	r3, [r3, r2]
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d004      	beq.n	800bcda <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800bcd0:	231f      	movs	r3, #31
 800bcd2:	18fb      	adds	r3, r7, r3
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	701a      	strb	r2, [r3, #0]
    goto error;
 800bcd8:	e128      	b.n	800bf2c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <HAL_SPI_Transmit+0x64>
 800bce0:	1dbb      	adds	r3, r7, #6
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d104      	bne.n	800bcf2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800bce8:	231f      	movs	r3, #31
 800bcea:	18fb      	adds	r3, r7, r3
 800bcec:	2201      	movs	r2, #1
 800bcee:	701a      	strb	r2, [r3, #0]
    goto error;
 800bcf0:	e11c      	b.n	800bf2c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	225d      	movs	r2, #93	@ 0x5d
 800bcf6:	2103      	movs	r1, #3
 800bcf8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	1dba      	adds	r2, r7, #6
 800bd0a:	8812      	ldrh	r2, [r2, #0]
 800bd0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	1dba      	adds	r2, r7, #6
 800bd12:	8812      	ldrh	r2, [r2, #0]
 800bd14:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2244      	movs	r2, #68	@ 0x44
 800bd20:	2100      	movs	r1, #0
 800bd22:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2246      	movs	r2, #70	@ 0x46
 800bd28:	2100      	movs	r1, #0
 800bd2a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	689a      	ldr	r2, [r3, #8]
 800bd3c:	2380      	movs	r3, #128	@ 0x80
 800bd3e:	021b      	lsls	r3, r3, #8
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d110      	bne.n	800bd66 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2140      	movs	r1, #64	@ 0x40
 800bd50:	438a      	bics	r2, r1
 800bd52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2180      	movs	r1, #128	@ 0x80
 800bd60:	01c9      	lsls	r1, r1, #7
 800bd62:	430a      	orrs	r2, r1
 800bd64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2240      	movs	r2, #64	@ 0x40
 800bd6e:	4013      	ands	r3, r2
 800bd70:	2b40      	cmp	r3, #64	@ 0x40
 800bd72:	d007      	beq.n	800bd84 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2140      	movs	r1, #64	@ 0x40
 800bd80:	430a      	orrs	r2, r1
 800bd82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	23e0      	movs	r3, #224	@ 0xe0
 800bd8a:	00db      	lsls	r3, r3, #3
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d952      	bls.n	800be36 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d004      	beq.n	800bda2 <HAL_SPI_Transmit+0x11e>
 800bd98:	2316      	movs	r3, #22
 800bd9a:	18fb      	adds	r3, r7, r3
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d143      	bne.n	800be2a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bda6:	881a      	ldrh	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdb2:	1c9a      	adds	r2, r3, #2
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bdc6:	e030      	b.n	800be2a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	2202      	movs	r2, #2
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d112      	bne.n	800bdfc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdda:	881a      	ldrh	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde6:	1c9a      	adds	r2, r3, #2
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bdfa:	e016      	b.n	800be2a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdfc:	f7fc fe2c 	bl	8008a58 <HAL_GetTick>
 800be00:	0002      	movs	r2, r0
 800be02:	69bb      	ldr	r3, [r7, #24]
 800be04:	1ad3      	subs	r3, r2, r3
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d802      	bhi.n	800be12 <HAL_SPI_Transmit+0x18e>
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	3301      	adds	r3, #1
 800be10:	d102      	bne.n	800be18 <HAL_SPI_Transmit+0x194>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d108      	bne.n	800be2a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800be18:	231f      	movs	r3, #31
 800be1a:	18fb      	adds	r3, r7, r3
 800be1c:	2203      	movs	r2, #3
 800be1e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	225d      	movs	r2, #93	@ 0x5d
 800be24:	2101      	movs	r1, #1
 800be26:	5499      	strb	r1, [r3, r2]
          goto error;
 800be28:	e080      	b.n	800bf2c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be2e:	b29b      	uxth	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1c9      	bne.n	800bdc8 <HAL_SPI_Transmit+0x144>
 800be34:	e053      	b.n	800bede <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <HAL_SPI_Transmit+0x1c4>
 800be3e:	2316      	movs	r3, #22
 800be40:	18fb      	adds	r3, r7, r3
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d145      	bne.n	800bed4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	330c      	adds	r3, #12
 800be52:	7812      	ldrb	r2, [r2, #0]
 800be54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be64:	b29b      	uxth	r3, r3
 800be66:	3b01      	subs	r3, #1
 800be68:	b29a      	uxth	r2, r3
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800be6e:	e031      	b.n	800bed4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	2202      	movs	r2, #2
 800be78:	4013      	ands	r3, r2
 800be7a:	2b02      	cmp	r3, #2
 800be7c:	d113      	bne.n	800bea6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	330c      	adds	r3, #12
 800be88:	7812      	ldrb	r2, [r2, #0]
 800be8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	3b01      	subs	r3, #1
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bea4:	e016      	b.n	800bed4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bea6:	f7fc fdd7 	bl	8008a58 <HAL_GetTick>
 800beaa:	0002      	movs	r2, r0
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d802      	bhi.n	800bebc <HAL_SPI_Transmit+0x238>
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	3301      	adds	r3, #1
 800beba:	d102      	bne.n	800bec2 <HAL_SPI_Transmit+0x23e>
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d108      	bne.n	800bed4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800bec2:	231f      	movs	r3, #31
 800bec4:	18fb      	adds	r3, r7, r3
 800bec6:	2203      	movs	r2, #3
 800bec8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	225d      	movs	r2, #93	@ 0x5d
 800bece:	2101      	movs	r1, #1
 800bed0:	5499      	strb	r1, [r3, r2]
          goto error;
 800bed2:	e02b      	b.n	800bf2c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bed8:	b29b      	uxth	r3, r3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1c8      	bne.n	800be70 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bede:	69ba      	ldr	r2, [r7, #24]
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	0018      	movs	r0, r3
 800bee6:	f000 f95d 	bl	800c1a4 <SPI_EndRxTxTransaction>
 800beea:	1e03      	subs	r3, r0, #0
 800beec:	d002      	beq.n	800bef4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2220      	movs	r2, #32
 800bef2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800befc:	2300      	movs	r3, #0
 800befe:	613b      	str	r3, [r7, #16]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	613b      	str	r3, [r7, #16]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d004      	beq.n	800bf24 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800bf1a:	231f      	movs	r3, #31
 800bf1c:	18fb      	adds	r3, r7, r3
 800bf1e:	2201      	movs	r2, #1
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	e003      	b.n	800bf2c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	225d      	movs	r2, #93	@ 0x5d
 800bf28:	2101      	movs	r1, #1
 800bf2a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	225c      	movs	r2, #92	@ 0x5c
 800bf30:	2100      	movs	r1, #0
 800bf32:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800bf34:	231f      	movs	r3, #31
 800bf36:	18fb      	adds	r3, r7, r3
 800bf38:	781b      	ldrb	r3, [r3, #0]
}
 800bf3a:	0018      	movs	r0, r3
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	b008      	add	sp, #32
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	603b      	str	r3, [r7, #0]
 800bf50:	1dfb      	adds	r3, r7, #7
 800bf52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bf54:	f7fc fd80 	bl	8008a58 <HAL_GetTick>
 800bf58:	0002      	movs	r2, r0
 800bf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5c:	1a9b      	subs	r3, r3, r2
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	18d3      	adds	r3, r2, r3
 800bf62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bf64:	f7fc fd78 	bl	8008a58 <HAL_GetTick>
 800bf68:	0003      	movs	r3, r0
 800bf6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bf6c:	4b3a      	ldr	r3, [pc, #232]	@ (800c058 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	015b      	lsls	r3, r3, #5
 800bf72:	0d1b      	lsrs	r3, r3, #20
 800bf74:	69fa      	ldr	r2, [r7, #28]
 800bf76:	4353      	muls	r3, r2
 800bf78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf7a:	e058      	b.n	800c02e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	d055      	beq.n	800c02e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bf82:	f7fc fd69 	bl	8008a58 <HAL_GetTick>
 800bf86:	0002      	movs	r2, r0
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	69fa      	ldr	r2, [r7, #28]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d902      	bls.n	800bf98 <SPI_WaitFlagStateUntilTimeout+0x54>
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d142      	bne.n	800c01e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	21e0      	movs	r1, #224	@ 0xe0
 800bfa4:	438a      	bics	r2, r1
 800bfa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685a      	ldr	r2, [r3, #4]
 800bfac:	2382      	movs	r3, #130	@ 0x82
 800bfae:	005b      	lsls	r3, r3, #1
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d113      	bne.n	800bfdc <SPI_WaitFlagStateUntilTimeout+0x98>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	689a      	ldr	r2, [r3, #8]
 800bfb8:	2380      	movs	r3, #128	@ 0x80
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d005      	beq.n	800bfcc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	689a      	ldr	r2, [r3, #8]
 800bfc4:	2380      	movs	r3, #128	@ 0x80
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d107      	bne.n	800bfdc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2140      	movs	r1, #64	@ 0x40
 800bfd8:	438a      	bics	r2, r1
 800bfda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfe0:	2380      	movs	r3, #128	@ 0x80
 800bfe2:	019b      	lsls	r3, r3, #6
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d110      	bne.n	800c00a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	491a      	ldr	r1, [pc, #104]	@ (800c05c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800bff4:	400a      	ands	r2, r1
 800bff6:	601a      	str	r2, [r3, #0]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2180      	movs	r1, #128	@ 0x80
 800c004:	0189      	lsls	r1, r1, #6
 800c006:	430a      	orrs	r2, r1
 800c008:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	225d      	movs	r2, #93	@ 0x5d
 800c00e:	2101      	movs	r1, #1
 800c010:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	225c      	movs	r2, #92	@ 0x5c
 800c016:	2100      	movs	r1, #0
 800c018:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e017      	b.n	800c04e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	3b01      	subs	r3, #1
 800c02c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	4013      	ands	r3, r2
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	1ad3      	subs	r3, r2, r3
 800c03c:	425a      	negs	r2, r3
 800c03e:	4153      	adcs	r3, r2
 800c040:	b2db      	uxtb	r3, r3
 800c042:	001a      	movs	r2, r3
 800c044:	1dfb      	adds	r3, r7, #7
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d197      	bne.n	800bf7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	0018      	movs	r0, r3
 800c050:	46bd      	mov	sp, r7
 800c052:	b008      	add	sp, #32
 800c054:	bd80      	pop	{r7, pc}
 800c056:	46c0      	nop			@ (mov r8, r8)
 800c058:	2000228c 	.word	0x2000228c
 800c05c:	ffffdfff 	.word	0xffffdfff

0800c060 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08a      	sub	sp, #40	@ 0x28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c06e:	2317      	movs	r3, #23
 800c070:	18fb      	adds	r3, r7, r3
 800c072:	2200      	movs	r2, #0
 800c074:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c076:	f7fc fcef 	bl	8008a58 <HAL_GetTick>
 800c07a:	0002      	movs	r2, r0
 800c07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07e:	1a9b      	subs	r3, r3, r2
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	18d3      	adds	r3, r2, r3
 800c084:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800c086:	f7fc fce7 	bl	8008a58 <HAL_GetTick>
 800c08a:	0003      	movs	r3, r0
 800c08c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	330c      	adds	r3, #12
 800c094:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c096:	4b41      	ldr	r3, [pc, #260]	@ (800c19c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	0013      	movs	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	189b      	adds	r3, r3, r2
 800c0a0:	00da      	lsls	r2, r3, #3
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	0d1b      	lsrs	r3, r3, #20
 800c0a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0a8:	4353      	muls	r3, r2
 800c0aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c0ac:	e068      	b.n	800c180 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	23c0      	movs	r3, #192	@ 0xc0
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d10a      	bne.n	800c0ce <SPI_WaitFifoStateUntilTimeout+0x6e>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d107      	bne.n	800c0ce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	2117      	movs	r1, #23
 800c0c6:	187b      	adds	r3, r7, r1
 800c0c8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c0ca:	187b      	adds	r3, r7, r1
 800c0cc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	d055      	beq.n	800c180 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c0d4:	f7fc fcc0 	bl	8008a58 <HAL_GetTick>
 800c0d8:	0002      	movs	r2, r0
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	1ad3      	subs	r3, r2, r3
 800c0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d902      	bls.n	800c0ea <SPI_WaitFifoStateUntilTimeout+0x8a>
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d142      	bne.n	800c170 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	21e0      	movs	r1, #224	@ 0xe0
 800c0f6:	438a      	bics	r2, r1
 800c0f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	2382      	movs	r3, #130	@ 0x82
 800c100:	005b      	lsls	r3, r3, #1
 800c102:	429a      	cmp	r2, r3
 800c104:	d113      	bne.n	800c12e <SPI_WaitFifoStateUntilTimeout+0xce>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	689a      	ldr	r2, [r3, #8]
 800c10a:	2380      	movs	r3, #128	@ 0x80
 800c10c:	021b      	lsls	r3, r3, #8
 800c10e:	429a      	cmp	r2, r3
 800c110:	d005      	beq.n	800c11e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	689a      	ldr	r2, [r3, #8]
 800c116:	2380      	movs	r3, #128	@ 0x80
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d107      	bne.n	800c12e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2140      	movs	r1, #64	@ 0x40
 800c12a:	438a      	bics	r2, r1
 800c12c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c132:	2380      	movs	r3, #128	@ 0x80
 800c134:	019b      	lsls	r3, r3, #6
 800c136:	429a      	cmp	r2, r3
 800c138:	d110      	bne.n	800c15c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4916      	ldr	r1, [pc, #88]	@ (800c1a0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800c146:	400a      	ands	r2, r1
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	2180      	movs	r1, #128	@ 0x80
 800c156:	0189      	lsls	r1, r1, #6
 800c158:	430a      	orrs	r2, r1
 800c15a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	225d      	movs	r2, #93	@ 0x5d
 800c160:	2101      	movs	r1, #1
 800c162:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	225c      	movs	r2, #92	@ 0x5c
 800c168:	2100      	movs	r1, #0
 800c16a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c16c:	2303      	movs	r3, #3
 800c16e:	e010      	b.n	800c192 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	3b01      	subs	r3, #1
 800c17e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	4013      	ands	r3, r2
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d18e      	bne.n	800c0ae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	0018      	movs	r0, r3
 800c194:	46bd      	mov	sp, r7
 800c196:	b00a      	add	sp, #40	@ 0x28
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	46c0      	nop			@ (mov r8, r8)
 800c19c:	2000228c 	.word	0x2000228c
 800c1a0:	ffffdfff 	.word	0xffffdfff

0800c1a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af02      	add	r7, sp, #8
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	23c0      	movs	r3, #192	@ 0xc0
 800c1b4:	0159      	lsls	r1, r3, #5
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	0013      	movs	r3, r2
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f7ff ff4e 	bl	800c060 <SPI_WaitFifoStateUntilTimeout>
 800c1c4:	1e03      	subs	r3, r0, #0
 800c1c6:	d007      	beq.n	800c1d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e027      	b.n	800c228 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	0013      	movs	r3, r2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	2180      	movs	r1, #128	@ 0x80
 800c1e6:	f7ff fead 	bl	800bf44 <SPI_WaitFlagStateUntilTimeout>
 800c1ea:	1e03      	subs	r3, r0, #0
 800c1ec:	d007      	beq.n	800c1fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	431a      	orrs	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e014      	b.n	800c228 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	23c0      	movs	r3, #192	@ 0xc0
 800c202:	00d9      	lsls	r1, r3, #3
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	0013      	movs	r3, r2
 800c20c:	2200      	movs	r2, #0
 800c20e:	f7ff ff27 	bl	800c060 <SPI_WaitFifoStateUntilTimeout>
 800c212:	1e03      	subs	r3, r0, #0
 800c214:	d007      	beq.n	800c226 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c21a:	2220      	movs	r2, #32
 800c21c:	431a      	orrs	r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c222:	2303      	movs	r3, #3
 800c224:	e000      	b.n	800c228 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	0018      	movs	r0, r3
 800c22a:	46bd      	mov	sp, r7
 800c22c:	b004      	add	sp, #16
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e04a      	b.n	800c2d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	223d      	movs	r2, #61	@ 0x3d
 800c246:	5c9b      	ldrb	r3, [r3, r2]
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d107      	bne.n	800c25e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	223c      	movs	r2, #60	@ 0x3c
 800c252:	2100      	movs	r1, #0
 800c254:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	0018      	movs	r0, r3
 800c25a:	f7fb fbff 	bl	8007a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	223d      	movs	r2, #61	@ 0x3d
 800c262:	2102      	movs	r1, #2
 800c264:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3304      	adds	r3, #4
 800c26e:	0019      	movs	r1, r3
 800c270:	0010      	movs	r0, r2
 800c272:	f000 fb11 	bl	800c898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2248      	movs	r2, #72	@ 0x48
 800c27a:	2101      	movs	r1, #1
 800c27c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	223e      	movs	r2, #62	@ 0x3e
 800c282:	2101      	movs	r1, #1
 800c284:	5499      	strb	r1, [r3, r2]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	223f      	movs	r2, #63	@ 0x3f
 800c28a:	2101      	movs	r1, #1
 800c28c:	5499      	strb	r1, [r3, r2]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2240      	movs	r2, #64	@ 0x40
 800c292:	2101      	movs	r1, #1
 800c294:	5499      	strb	r1, [r3, r2]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2241      	movs	r2, #65	@ 0x41
 800c29a:	2101      	movs	r1, #1
 800c29c:	5499      	strb	r1, [r3, r2]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2242      	movs	r2, #66	@ 0x42
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	5499      	strb	r1, [r3, r2]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2243      	movs	r2, #67	@ 0x43
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2244      	movs	r2, #68	@ 0x44
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	5499      	strb	r1, [r3, r2]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2245      	movs	r2, #69	@ 0x45
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	5499      	strb	r1, [r3, r2]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2246      	movs	r2, #70	@ 0x46
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	5499      	strb	r1, [r3, r2]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2247      	movs	r2, #71	@ 0x47
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	223d      	movs	r2, #61	@ 0x3d
 800c2d2:	2101      	movs	r1, #1
 800c2d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	0018      	movs	r0, r3
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	b002      	add	sp, #8
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e04a      	b.n	800c388 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	223d      	movs	r2, #61	@ 0x3d
 800c2f6:	5c9b      	ldrb	r3, [r3, r2]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d107      	bne.n	800c30e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	223c      	movs	r2, #60	@ 0x3c
 800c302:	2100      	movs	r1, #0
 800c304:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	0018      	movs	r0, r3
 800c30a:	f000 f841 	bl	800c390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	223d      	movs	r2, #61	@ 0x3d
 800c312:	2102      	movs	r1, #2
 800c314:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	3304      	adds	r3, #4
 800c31e:	0019      	movs	r1, r3
 800c320:	0010      	movs	r0, r2
 800c322:	f000 fab9 	bl	800c898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2248      	movs	r2, #72	@ 0x48
 800c32a:	2101      	movs	r1, #1
 800c32c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	223e      	movs	r2, #62	@ 0x3e
 800c332:	2101      	movs	r1, #1
 800c334:	5499      	strb	r1, [r3, r2]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	223f      	movs	r2, #63	@ 0x3f
 800c33a:	2101      	movs	r1, #1
 800c33c:	5499      	strb	r1, [r3, r2]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2240      	movs	r2, #64	@ 0x40
 800c342:	2101      	movs	r1, #1
 800c344:	5499      	strb	r1, [r3, r2]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2241      	movs	r2, #65	@ 0x41
 800c34a:	2101      	movs	r1, #1
 800c34c:	5499      	strb	r1, [r3, r2]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2242      	movs	r2, #66	@ 0x42
 800c352:	2101      	movs	r1, #1
 800c354:	5499      	strb	r1, [r3, r2]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2243      	movs	r2, #67	@ 0x43
 800c35a:	2101      	movs	r1, #1
 800c35c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2244      	movs	r2, #68	@ 0x44
 800c362:	2101      	movs	r1, #1
 800c364:	5499      	strb	r1, [r3, r2]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2245      	movs	r2, #69	@ 0x45
 800c36a:	2101      	movs	r1, #1
 800c36c:	5499      	strb	r1, [r3, r2]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2246      	movs	r2, #70	@ 0x46
 800c372:	2101      	movs	r1, #1
 800c374:	5499      	strb	r1, [r3, r2]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2247      	movs	r2, #71	@ 0x47
 800c37a:	2101      	movs	r1, #1
 800c37c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	223d      	movs	r2, #61	@ 0x3d
 800c382:	2101      	movs	r1, #1
 800c384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	0018      	movs	r0, r3
 800c38a:	46bd      	mov	sp, r7
 800c38c:	b002      	add	sp, #8
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c398:	46c0      	nop			@ (mov r8, r8)
 800c39a:	46bd      	mov	sp, r7
 800c39c:	b002      	add	sp, #8
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d108      	bne.n	800c3c2 <HAL_TIM_PWM_Start+0x22>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	223e      	movs	r2, #62	@ 0x3e
 800c3b4:	5c9b      	ldrb	r3, [r3, r2]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	1e5a      	subs	r2, r3, #1
 800c3bc:	4193      	sbcs	r3, r2
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	e037      	b.n	800c432 <HAL_TIM_PWM_Start+0x92>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	d108      	bne.n	800c3da <HAL_TIM_PWM_Start+0x3a>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	223f      	movs	r2, #63	@ 0x3f
 800c3cc:	5c9b      	ldrb	r3, [r3, r2]
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	1e5a      	subs	r2, r3, #1
 800c3d4:	4193      	sbcs	r3, r2
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	e02b      	b.n	800c432 <HAL_TIM_PWM_Start+0x92>
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b08      	cmp	r3, #8
 800c3de:	d108      	bne.n	800c3f2 <HAL_TIM_PWM_Start+0x52>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2240      	movs	r2, #64	@ 0x40
 800c3e4:	5c9b      	ldrb	r3, [r3, r2]
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	1e5a      	subs	r2, r3, #1
 800c3ec:	4193      	sbcs	r3, r2
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	e01f      	b.n	800c432 <HAL_TIM_PWM_Start+0x92>
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b0c      	cmp	r3, #12
 800c3f6:	d108      	bne.n	800c40a <HAL_TIM_PWM_Start+0x6a>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2241      	movs	r2, #65	@ 0x41
 800c3fc:	5c9b      	ldrb	r3, [r3, r2]
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	3b01      	subs	r3, #1
 800c402:	1e5a      	subs	r2, r3, #1
 800c404:	4193      	sbcs	r3, r2
 800c406:	b2db      	uxtb	r3, r3
 800c408:	e013      	b.n	800c432 <HAL_TIM_PWM_Start+0x92>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b10      	cmp	r3, #16
 800c40e:	d108      	bne.n	800c422 <HAL_TIM_PWM_Start+0x82>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2242      	movs	r2, #66	@ 0x42
 800c414:	5c9b      	ldrb	r3, [r3, r2]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	3b01      	subs	r3, #1
 800c41a:	1e5a      	subs	r2, r3, #1
 800c41c:	4193      	sbcs	r3, r2
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	e007      	b.n	800c432 <HAL_TIM_PWM_Start+0x92>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2243      	movs	r2, #67	@ 0x43
 800c426:	5c9b      	ldrb	r3, [r3, r2]
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	3b01      	subs	r3, #1
 800c42c:	1e5a      	subs	r2, r3, #1
 800c42e:	4193      	sbcs	r3, r2
 800c430:	b2db      	uxtb	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	d001      	beq.n	800c43a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e090      	b.n	800c55c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d104      	bne.n	800c44a <HAL_TIM_PWM_Start+0xaa>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	223e      	movs	r2, #62	@ 0x3e
 800c444:	2102      	movs	r1, #2
 800c446:	5499      	strb	r1, [r3, r2]
 800c448:	e023      	b.n	800c492 <HAL_TIM_PWM_Start+0xf2>
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2b04      	cmp	r3, #4
 800c44e:	d104      	bne.n	800c45a <HAL_TIM_PWM_Start+0xba>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	223f      	movs	r2, #63	@ 0x3f
 800c454:	2102      	movs	r1, #2
 800c456:	5499      	strb	r1, [r3, r2]
 800c458:	e01b      	b.n	800c492 <HAL_TIM_PWM_Start+0xf2>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	d104      	bne.n	800c46a <HAL_TIM_PWM_Start+0xca>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2240      	movs	r2, #64	@ 0x40
 800c464:	2102      	movs	r1, #2
 800c466:	5499      	strb	r1, [r3, r2]
 800c468:	e013      	b.n	800c492 <HAL_TIM_PWM_Start+0xf2>
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	2b0c      	cmp	r3, #12
 800c46e:	d104      	bne.n	800c47a <HAL_TIM_PWM_Start+0xda>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2241      	movs	r2, #65	@ 0x41
 800c474:	2102      	movs	r1, #2
 800c476:	5499      	strb	r1, [r3, r2]
 800c478:	e00b      	b.n	800c492 <HAL_TIM_PWM_Start+0xf2>
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	2b10      	cmp	r3, #16
 800c47e:	d104      	bne.n	800c48a <HAL_TIM_PWM_Start+0xea>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2242      	movs	r2, #66	@ 0x42
 800c484:	2102      	movs	r1, #2
 800c486:	5499      	strb	r1, [r3, r2]
 800c488:	e003      	b.n	800c492 <HAL_TIM_PWM_Start+0xf2>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2243      	movs	r2, #67	@ 0x43
 800c48e:	2102      	movs	r1, #2
 800c490:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	2201      	movs	r2, #1
 800c49a:	0018      	movs	r0, r3
 800c49c:	f000 fd58 	bl	800cf50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a2f      	ldr	r2, [pc, #188]	@ (800c564 <HAL_TIM_PWM_Start+0x1c4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d00e      	beq.n	800c4c8 <HAL_TIM_PWM_Start+0x128>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a2e      	ldr	r2, [pc, #184]	@ (800c568 <HAL_TIM_PWM_Start+0x1c8>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d009      	beq.n	800c4c8 <HAL_TIM_PWM_Start+0x128>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a2c      	ldr	r2, [pc, #176]	@ (800c56c <HAL_TIM_PWM_Start+0x1cc>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d004      	beq.n	800c4c8 <HAL_TIM_PWM_Start+0x128>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a2b      	ldr	r2, [pc, #172]	@ (800c570 <HAL_TIM_PWM_Start+0x1d0>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d101      	bne.n	800c4cc <HAL_TIM_PWM_Start+0x12c>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e000      	b.n	800c4ce <HAL_TIM_PWM_Start+0x12e>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d008      	beq.n	800c4e4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2180      	movs	r1, #128	@ 0x80
 800c4de:	0209      	lsls	r1, r1, #8
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a1e      	ldr	r2, [pc, #120]	@ (800c564 <HAL_TIM_PWM_Start+0x1c4>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d014      	beq.n	800c518 <HAL_TIM_PWM_Start+0x178>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	2380      	movs	r3, #128	@ 0x80
 800c4f4:	05db      	lsls	r3, r3, #23
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d00e      	beq.n	800c518 <HAL_TIM_PWM_Start+0x178>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a1d      	ldr	r2, [pc, #116]	@ (800c574 <HAL_TIM_PWM_Start+0x1d4>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d009      	beq.n	800c518 <HAL_TIM_PWM_Start+0x178>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a1b      	ldr	r2, [pc, #108]	@ (800c578 <HAL_TIM_PWM_Start+0x1d8>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d004      	beq.n	800c518 <HAL_TIM_PWM_Start+0x178>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a15      	ldr	r2, [pc, #84]	@ (800c568 <HAL_TIM_PWM_Start+0x1c8>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d116      	bne.n	800c546 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	4a17      	ldr	r2, [pc, #92]	@ (800c57c <HAL_TIM_PWM_Start+0x1dc>)
 800c520:	4013      	ands	r3, r2
 800c522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b06      	cmp	r3, #6
 800c528:	d016      	beq.n	800c558 <HAL_TIM_PWM_Start+0x1b8>
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	2380      	movs	r3, #128	@ 0x80
 800c52e:	025b      	lsls	r3, r3, #9
 800c530:	429a      	cmp	r2, r3
 800c532:	d011      	beq.n	800c558 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2101      	movs	r1, #1
 800c540:	430a      	orrs	r2, r1
 800c542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c544:	e008      	b.n	800c558 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2101      	movs	r1, #1
 800c552:	430a      	orrs	r2, r1
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	e000      	b.n	800c55a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c558:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	0018      	movs	r0, r3
 800c55e:	46bd      	mov	sp, r7
 800c560:	b004      	add	sp, #16
 800c562:	bd80      	pop	{r7, pc}
 800c564:	40012c00 	.word	0x40012c00
 800c568:	40014000 	.word	0x40014000
 800c56c:	40014400 	.word	0x40014400
 800c570:	40014800 	.word	0x40014800
 800c574:	40000400 	.word	0x40000400
 800c578:	40000800 	.word	0x40000800
 800c57c:	00010007 	.word	0x00010007

0800c580 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	2200      	movs	r2, #0
 800c592:	0018      	movs	r0, r3
 800c594:	f000 fcdc 	bl	800cf50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a37      	ldr	r2, [pc, #220]	@ (800c67c <HAL_TIM_PWM_Stop+0xfc>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d00e      	beq.n	800c5c0 <HAL_TIM_PWM_Stop+0x40>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a36      	ldr	r2, [pc, #216]	@ (800c680 <HAL_TIM_PWM_Stop+0x100>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d009      	beq.n	800c5c0 <HAL_TIM_PWM_Stop+0x40>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a34      	ldr	r2, [pc, #208]	@ (800c684 <HAL_TIM_PWM_Stop+0x104>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d004      	beq.n	800c5c0 <HAL_TIM_PWM_Stop+0x40>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a33      	ldr	r2, [pc, #204]	@ (800c688 <HAL_TIM_PWM_Stop+0x108>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d101      	bne.n	800c5c4 <HAL_TIM_PWM_Stop+0x44>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e000      	b.n	800c5c6 <HAL_TIM_PWM_Stop+0x46>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d013      	beq.n	800c5f2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	6a1b      	ldr	r3, [r3, #32]
 800c5d0:	4a2e      	ldr	r2, [pc, #184]	@ (800c68c <HAL_TIM_PWM_Stop+0x10c>)
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	d10d      	bne.n	800c5f2 <HAL_TIM_PWM_Stop+0x72>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	6a1b      	ldr	r3, [r3, #32]
 800c5dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c690 <HAL_TIM_PWM_Stop+0x110>)
 800c5de:	4013      	ands	r3, r2
 800c5e0:	d107      	bne.n	800c5f2 <HAL_TIM_PWM_Stop+0x72>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	4929      	ldr	r1, [pc, #164]	@ (800c694 <HAL_TIM_PWM_Stop+0x114>)
 800c5ee:	400a      	ands	r2, r1
 800c5f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6a1b      	ldr	r3, [r3, #32]
 800c5f8:	4a24      	ldr	r2, [pc, #144]	@ (800c68c <HAL_TIM_PWM_Stop+0x10c>)
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	d10d      	bne.n	800c61a <HAL_TIM_PWM_Stop+0x9a>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	4a22      	ldr	r2, [pc, #136]	@ (800c690 <HAL_TIM_PWM_Stop+0x110>)
 800c606:	4013      	ands	r3, r2
 800c608:	d107      	bne.n	800c61a <HAL_TIM_PWM_Stop+0x9a>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2101      	movs	r1, #1
 800c616:	438a      	bics	r2, r1
 800c618:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d104      	bne.n	800c62a <HAL_TIM_PWM_Stop+0xaa>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	223e      	movs	r2, #62	@ 0x3e
 800c624:	2101      	movs	r1, #1
 800c626:	5499      	strb	r1, [r3, r2]
 800c628:	e023      	b.n	800c672 <HAL_TIM_PWM_Stop+0xf2>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	d104      	bne.n	800c63a <HAL_TIM_PWM_Stop+0xba>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	223f      	movs	r2, #63	@ 0x3f
 800c634:	2101      	movs	r1, #1
 800c636:	5499      	strb	r1, [r3, r2]
 800c638:	e01b      	b.n	800c672 <HAL_TIM_PWM_Stop+0xf2>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	d104      	bne.n	800c64a <HAL_TIM_PWM_Stop+0xca>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2240      	movs	r2, #64	@ 0x40
 800c644:	2101      	movs	r1, #1
 800c646:	5499      	strb	r1, [r3, r2]
 800c648:	e013      	b.n	800c672 <HAL_TIM_PWM_Stop+0xf2>
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b0c      	cmp	r3, #12
 800c64e:	d104      	bne.n	800c65a <HAL_TIM_PWM_Stop+0xda>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2241      	movs	r2, #65	@ 0x41
 800c654:	2101      	movs	r1, #1
 800c656:	5499      	strb	r1, [r3, r2]
 800c658:	e00b      	b.n	800c672 <HAL_TIM_PWM_Stop+0xf2>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b10      	cmp	r3, #16
 800c65e:	d104      	bne.n	800c66a <HAL_TIM_PWM_Stop+0xea>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2242      	movs	r2, #66	@ 0x42
 800c664:	2101      	movs	r1, #1
 800c666:	5499      	strb	r1, [r3, r2]
 800c668:	e003      	b.n	800c672 <HAL_TIM_PWM_Stop+0xf2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2243      	movs	r2, #67	@ 0x43
 800c66e:	2101      	movs	r1, #1
 800c670:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	0018      	movs	r0, r3
 800c676:	46bd      	mov	sp, r7
 800c678:	b002      	add	sp, #8
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	40012c00 	.word	0x40012c00
 800c680:	40014000 	.word	0x40014000
 800c684:	40014400 	.word	0x40014400
 800c688:	40014800 	.word	0x40014800
 800c68c:	00001111 	.word	0x00001111
 800c690:	00000444 	.word	0x00000444
 800c694:	ffff7fff 	.word	0xffff7fff

0800c698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6a4:	2317      	movs	r3, #23
 800c6a6:	18fb      	adds	r3, r7, r3
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	223c      	movs	r2, #60	@ 0x3c
 800c6b0:	5c9b      	ldrb	r3, [r3, r2]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d101      	bne.n	800c6ba <HAL_TIM_PWM_ConfigChannel+0x22>
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e0e5      	b.n	800c886 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	223c      	movs	r2, #60	@ 0x3c
 800c6be:	2101      	movs	r1, #1
 800c6c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b14      	cmp	r3, #20
 800c6c6:	d900      	bls.n	800c6ca <HAL_TIM_PWM_ConfigChannel+0x32>
 800c6c8:	e0d1      	b.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	009a      	lsls	r2, r3, #2
 800c6ce:	4b70      	ldr	r3, [pc, #448]	@ (800c890 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800c6d0:	18d3      	adds	r3, r2, r3
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	0011      	movs	r1, r2
 800c6de:	0018      	movs	r0, r3
 800c6e0:	f000 f972 	bl	800c9c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2108      	movs	r1, #8
 800c6f0:	430a      	orrs	r2, r1
 800c6f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	699a      	ldr	r2, [r3, #24]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2104      	movs	r1, #4
 800c700:	438a      	bics	r2, r1
 800c702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6999      	ldr	r1, [r3, #24]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	691a      	ldr	r2, [r3, #16]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	619a      	str	r2, [r3, #24]
      break;
 800c716:	e0af      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	0011      	movs	r1, r2
 800c720:	0018      	movs	r0, r3
 800c722:	f000 f9db 	bl	800cadc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	699a      	ldr	r2, [r3, #24]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2180      	movs	r1, #128	@ 0x80
 800c732:	0109      	lsls	r1, r1, #4
 800c734:	430a      	orrs	r2, r1
 800c736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4954      	ldr	r1, [pc, #336]	@ (800c894 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c744:	400a      	ands	r2, r1
 800c746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6999      	ldr	r1, [r3, #24]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	021a      	lsls	r2, r3, #8
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	430a      	orrs	r2, r1
 800c75a:	619a      	str	r2, [r3, #24]
      break;
 800c75c:	e08c      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	0011      	movs	r1, r2
 800c766:	0018      	movs	r0, r3
 800c768:	f000 fa3c 	bl	800cbe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	69da      	ldr	r2, [r3, #28]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2108      	movs	r1, #8
 800c778:	430a      	orrs	r2, r1
 800c77a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	69da      	ldr	r2, [r3, #28]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	2104      	movs	r1, #4
 800c788:	438a      	bics	r2, r1
 800c78a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	69d9      	ldr	r1, [r3, #28]
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	691a      	ldr	r2, [r3, #16]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	430a      	orrs	r2, r1
 800c79c:	61da      	str	r2, [r3, #28]
      break;
 800c79e:	e06b      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	0011      	movs	r1, r2
 800c7a8:	0018      	movs	r0, r3
 800c7aa:	f000 faa3 	bl	800ccf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	69da      	ldr	r2, [r3, #28]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2180      	movs	r1, #128	@ 0x80
 800c7ba:	0109      	lsls	r1, r1, #4
 800c7bc:	430a      	orrs	r2, r1
 800c7be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	69da      	ldr	r2, [r3, #28]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4932      	ldr	r1, [pc, #200]	@ (800c894 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c7cc:	400a      	ands	r2, r1
 800c7ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	69d9      	ldr	r1, [r3, #28]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	021a      	lsls	r2, r3, #8
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	430a      	orrs	r2, r1
 800c7e2:	61da      	str	r2, [r3, #28]
      break;
 800c7e4:	e048      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	0011      	movs	r1, r2
 800c7ee:	0018      	movs	r0, r3
 800c7f0:	f000 faea 	bl	800cdc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2108      	movs	r1, #8
 800c800:	430a      	orrs	r2, r1
 800c802:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2104      	movs	r1, #4
 800c810:	438a      	bics	r2, r1
 800c812:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	691a      	ldr	r2, [r3, #16]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	430a      	orrs	r2, r1
 800c824:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c826:	e027      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	0011      	movs	r1, r2
 800c830:	0018      	movs	r0, r3
 800c832:	f000 fb29 	bl	800ce88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2180      	movs	r1, #128	@ 0x80
 800c842:	0109      	lsls	r1, r1, #4
 800c844:	430a      	orrs	r2, r1
 800c846:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4910      	ldr	r1, [pc, #64]	@ (800c894 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c854:	400a      	ands	r2, r1
 800c856:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	021a      	lsls	r2, r3, #8
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	430a      	orrs	r2, r1
 800c86a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c86c:	e004      	b.n	800c878 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c86e:	2317      	movs	r3, #23
 800c870:	18fb      	adds	r3, r7, r3
 800c872:	2201      	movs	r2, #1
 800c874:	701a      	strb	r2, [r3, #0]
      break;
 800c876:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	223c      	movs	r2, #60	@ 0x3c
 800c87c:	2100      	movs	r1, #0
 800c87e:	5499      	strb	r1, [r3, r2]

  return status;
 800c880:	2317      	movs	r3, #23
 800c882:	18fb      	adds	r3, r7, r3
 800c884:	781b      	ldrb	r3, [r3, #0]
}
 800c886:	0018      	movs	r0, r3
 800c888:	46bd      	mov	sp, r7
 800c88a:	b006      	add	sp, #24
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	46c0      	nop			@ (mov r8, r8)
 800c890:	080124dc 	.word	0x080124dc
 800c894:	fffffbff 	.word	0xfffffbff

0800c898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a3f      	ldr	r2, [pc, #252]	@ (800c9a8 <TIM_Base_SetConfig+0x110>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d00c      	beq.n	800c8ca <TIM_Base_SetConfig+0x32>
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	2380      	movs	r3, #128	@ 0x80
 800c8b4:	05db      	lsls	r3, r3, #23
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d007      	beq.n	800c8ca <TIM_Base_SetConfig+0x32>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a3b      	ldr	r2, [pc, #236]	@ (800c9ac <TIM_Base_SetConfig+0x114>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d003      	beq.n	800c8ca <TIM_Base_SetConfig+0x32>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a3a      	ldr	r2, [pc, #232]	@ (800c9b0 <TIM_Base_SetConfig+0x118>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d108      	bne.n	800c8dc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2270      	movs	r2, #112	@ 0x70
 800c8ce:	4393      	bics	r3, r2
 800c8d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a32      	ldr	r2, [pc, #200]	@ (800c9a8 <TIM_Base_SetConfig+0x110>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d01c      	beq.n	800c91e <TIM_Base_SetConfig+0x86>
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	2380      	movs	r3, #128	@ 0x80
 800c8e8:	05db      	lsls	r3, r3, #23
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d017      	beq.n	800c91e <TIM_Base_SetConfig+0x86>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a2e      	ldr	r2, [pc, #184]	@ (800c9ac <TIM_Base_SetConfig+0x114>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d013      	beq.n	800c91e <TIM_Base_SetConfig+0x86>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a2d      	ldr	r2, [pc, #180]	@ (800c9b0 <TIM_Base_SetConfig+0x118>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d00f      	beq.n	800c91e <TIM_Base_SetConfig+0x86>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a2c      	ldr	r2, [pc, #176]	@ (800c9b4 <TIM_Base_SetConfig+0x11c>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d00b      	beq.n	800c91e <TIM_Base_SetConfig+0x86>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a2b      	ldr	r2, [pc, #172]	@ (800c9b8 <TIM_Base_SetConfig+0x120>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d007      	beq.n	800c91e <TIM_Base_SetConfig+0x86>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a2a      	ldr	r2, [pc, #168]	@ (800c9bc <TIM_Base_SetConfig+0x124>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d003      	beq.n	800c91e <TIM_Base_SetConfig+0x86>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a29      	ldr	r2, [pc, #164]	@ (800c9c0 <TIM_Base_SetConfig+0x128>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d108      	bne.n	800c930 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	4a28      	ldr	r2, [pc, #160]	@ (800c9c4 <TIM_Base_SetConfig+0x12c>)
 800c922:	4013      	ands	r3, r2
 800c924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2280      	movs	r2, #128	@ 0x80
 800c934:	4393      	bics	r3, r2
 800c936:	001a      	movs	r2, r3
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	689a      	ldr	r2, [r3, #8]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a13      	ldr	r2, [pc, #76]	@ (800c9a8 <TIM_Base_SetConfig+0x110>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d00b      	beq.n	800c976 <TIM_Base_SetConfig+0xde>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a15      	ldr	r2, [pc, #84]	@ (800c9b8 <TIM_Base_SetConfig+0x120>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d007      	beq.n	800c976 <TIM_Base_SetConfig+0xde>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a14      	ldr	r2, [pc, #80]	@ (800c9bc <TIM_Base_SetConfig+0x124>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d003      	beq.n	800c976 <TIM_Base_SetConfig+0xde>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a13      	ldr	r2, [pc, #76]	@ (800c9c0 <TIM_Base_SetConfig+0x128>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d103      	bne.n	800c97e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	691a      	ldr	r2, [r3, #16]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	2201      	movs	r2, #1
 800c98a:	4013      	ands	r3, r2
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d106      	bne.n	800c99e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	2201      	movs	r2, #1
 800c996:	4393      	bics	r3, r2
 800c998:	001a      	movs	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	611a      	str	r2, [r3, #16]
  }
}
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	b004      	add	sp, #16
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	46c0      	nop			@ (mov r8, r8)
 800c9a8:	40012c00 	.word	0x40012c00
 800c9ac:	40000400 	.word	0x40000400
 800c9b0:	40000800 	.word	0x40000800
 800c9b4:	40002000 	.word	0x40002000
 800c9b8:	40014000 	.word	0x40014000
 800c9bc:	40014400 	.word	0x40014400
 800c9c0:	40014800 	.word	0x40014800
 800c9c4:	fffffcff 	.word	0xfffffcff

0800c9c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a1b      	ldr	r3, [r3, #32]
 800c9d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	4393      	bics	r3, r2
 800c9e0:	001a      	movs	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	4a32      	ldr	r2, [pc, #200]	@ (800cac0 <TIM_OC1_SetConfig+0xf8>)
 800c9f6:	4013      	ands	r3, r2
 800c9f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2203      	movs	r2, #3
 800c9fe:	4393      	bics	r3, r2
 800ca00:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2202      	movs	r2, #2
 800ca10:	4393      	bics	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a28      	ldr	r2, [pc, #160]	@ (800cac4 <TIM_OC1_SetConfig+0xfc>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d00b      	beq.n	800ca3e <TIM_OC1_SetConfig+0x76>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a27      	ldr	r2, [pc, #156]	@ (800cac8 <TIM_OC1_SetConfig+0x100>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d007      	beq.n	800ca3e <TIM_OC1_SetConfig+0x76>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a26      	ldr	r2, [pc, #152]	@ (800cacc <TIM_OC1_SetConfig+0x104>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d003      	beq.n	800ca3e <TIM_OC1_SetConfig+0x76>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a25      	ldr	r2, [pc, #148]	@ (800cad0 <TIM_OC1_SetConfig+0x108>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d10c      	bne.n	800ca58 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2208      	movs	r2, #8
 800ca42:	4393      	bics	r3, r2
 800ca44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	2204      	movs	r2, #4
 800ca54:	4393      	bics	r3, r2
 800ca56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a1a      	ldr	r2, [pc, #104]	@ (800cac4 <TIM_OC1_SetConfig+0xfc>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d00b      	beq.n	800ca78 <TIM_OC1_SetConfig+0xb0>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a19      	ldr	r2, [pc, #100]	@ (800cac8 <TIM_OC1_SetConfig+0x100>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d007      	beq.n	800ca78 <TIM_OC1_SetConfig+0xb0>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a18      	ldr	r2, [pc, #96]	@ (800cacc <TIM_OC1_SetConfig+0x104>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d003      	beq.n	800ca78 <TIM_OC1_SetConfig+0xb0>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a17      	ldr	r2, [pc, #92]	@ (800cad0 <TIM_OC1_SetConfig+0x108>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d111      	bne.n	800ca9c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	4a16      	ldr	r2, [pc, #88]	@ (800cad4 <TIM_OC1_SetConfig+0x10c>)
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	4a15      	ldr	r2, [pc, #84]	@ (800cad8 <TIM_OC1_SetConfig+0x110>)
 800ca84:	4013      	ands	r3, r2
 800ca86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	685a      	ldr	r2, [r3, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	621a      	str	r2, [r3, #32]
}
 800cab6:	46c0      	nop			@ (mov r8, r8)
 800cab8:	46bd      	mov	sp, r7
 800caba:	b006      	add	sp, #24
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	46c0      	nop			@ (mov r8, r8)
 800cac0:	fffeff8f 	.word	0xfffeff8f
 800cac4:	40012c00 	.word	0x40012c00
 800cac8:	40014000 	.word	0x40014000
 800cacc:	40014400 	.word	0x40014400
 800cad0:	40014800 	.word	0x40014800
 800cad4:	fffffeff 	.word	0xfffffeff
 800cad8:	fffffdff 	.word	0xfffffdff

0800cadc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a1b      	ldr	r3, [r3, #32]
 800caea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a1b      	ldr	r3, [r3, #32]
 800caf0:	2210      	movs	r2, #16
 800caf2:	4393      	bics	r3, r2
 800caf4:	001a      	movs	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	4a2e      	ldr	r2, [pc, #184]	@ (800cbc4 <TIM_OC2_SetConfig+0xe8>)
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	4a2d      	ldr	r2, [pc, #180]	@ (800cbc8 <TIM_OC2_SetConfig+0xec>)
 800cb12:	4013      	ands	r3, r2
 800cb14:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	021b      	lsls	r3, r3, #8
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2220      	movs	r2, #32
 800cb26:	4393      	bics	r3, r2
 800cb28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	011b      	lsls	r3, r3, #4
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a24      	ldr	r2, [pc, #144]	@ (800cbcc <TIM_OC2_SetConfig+0xf0>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d10d      	bne.n	800cb5a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2280      	movs	r2, #128	@ 0x80
 800cb42:	4393      	bics	r3, r2
 800cb44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	011b      	lsls	r3, r3, #4
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2240      	movs	r2, #64	@ 0x40
 800cb56:	4393      	bics	r3, r2
 800cb58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a1b      	ldr	r2, [pc, #108]	@ (800cbcc <TIM_OC2_SetConfig+0xf0>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d00b      	beq.n	800cb7a <TIM_OC2_SetConfig+0x9e>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a1a      	ldr	r2, [pc, #104]	@ (800cbd0 <TIM_OC2_SetConfig+0xf4>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d007      	beq.n	800cb7a <TIM_OC2_SetConfig+0x9e>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a19      	ldr	r2, [pc, #100]	@ (800cbd4 <TIM_OC2_SetConfig+0xf8>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d003      	beq.n	800cb7a <TIM_OC2_SetConfig+0x9e>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a18      	ldr	r2, [pc, #96]	@ (800cbd8 <TIM_OC2_SetConfig+0xfc>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d113      	bne.n	800cba2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	4a17      	ldr	r2, [pc, #92]	@ (800cbdc <TIM_OC2_SetConfig+0x100>)
 800cb7e:	4013      	ands	r3, r2
 800cb80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	4a16      	ldr	r2, [pc, #88]	@ (800cbe0 <TIM_OC2_SetConfig+0x104>)
 800cb86:	4013      	ands	r3, r2
 800cb88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	695b      	ldr	r3, [r3, #20]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	693a      	ldr	r2, [r7, #16]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	621a      	str	r2, [r3, #32]
}
 800cbbc:	46c0      	nop			@ (mov r8, r8)
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	b006      	add	sp, #24
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	feff8fff 	.word	0xfeff8fff
 800cbc8:	fffffcff 	.word	0xfffffcff
 800cbcc:	40012c00 	.word	0x40012c00
 800cbd0:	40014000 	.word	0x40014000
 800cbd4:	40014400 	.word	0x40014400
 800cbd8:	40014800 	.word	0x40014800
 800cbdc:	fffffbff 	.word	0xfffffbff
 800cbe0:	fffff7ff 	.word	0xfffff7ff

0800cbe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a1b      	ldr	r3, [r3, #32]
 800cbf8:	4a33      	ldr	r2, [pc, #204]	@ (800ccc8 <TIM_OC3_SetConfig+0xe4>)
 800cbfa:	401a      	ands	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	69db      	ldr	r3, [r3, #28]
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	4a2f      	ldr	r2, [pc, #188]	@ (800cccc <TIM_OC3_SetConfig+0xe8>)
 800cc10:	4013      	ands	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2203      	movs	r2, #3
 800cc18:	4393      	bics	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	4a29      	ldr	r2, [pc, #164]	@ (800ccd0 <TIM_OC3_SetConfig+0xec>)
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	021b      	lsls	r3, r3, #8
 800cc34:	697a      	ldr	r2, [r7, #20]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a25      	ldr	r2, [pc, #148]	@ (800ccd4 <TIM_OC3_SetConfig+0xf0>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d10d      	bne.n	800cc5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	4a24      	ldr	r2, [pc, #144]	@ (800ccd8 <TIM_OC3_SetConfig+0xf4>)
 800cc46:	4013      	ands	r3, r2
 800cc48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	021b      	lsls	r3, r3, #8
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	4a20      	ldr	r2, [pc, #128]	@ (800ccdc <TIM_OC3_SetConfig+0xf8>)
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a1c      	ldr	r2, [pc, #112]	@ (800ccd4 <TIM_OC3_SetConfig+0xf0>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d00b      	beq.n	800cc7e <TIM_OC3_SetConfig+0x9a>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a1d      	ldr	r2, [pc, #116]	@ (800cce0 <TIM_OC3_SetConfig+0xfc>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d007      	beq.n	800cc7e <TIM_OC3_SetConfig+0x9a>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a1c      	ldr	r2, [pc, #112]	@ (800cce4 <TIM_OC3_SetConfig+0x100>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d003      	beq.n	800cc7e <TIM_OC3_SetConfig+0x9a>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a1b      	ldr	r2, [pc, #108]	@ (800cce8 <TIM_OC3_SetConfig+0x104>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d113      	bne.n	800cca6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	4a1a      	ldr	r2, [pc, #104]	@ (800ccec <TIM_OC3_SetConfig+0x108>)
 800cc82:	4013      	ands	r3, r2
 800cc84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	4a19      	ldr	r2, [pc, #100]	@ (800ccf0 <TIM_OC3_SetConfig+0x10c>)
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	011b      	lsls	r3, r3, #4
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	693a      	ldr	r2, [r7, #16]
 800ccaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	697a      	ldr	r2, [r7, #20]
 800ccbe:	621a      	str	r2, [r3, #32]
}
 800ccc0:	46c0      	nop			@ (mov r8, r8)
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	b006      	add	sp, #24
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	fffffeff 	.word	0xfffffeff
 800cccc:	fffeff8f 	.word	0xfffeff8f
 800ccd0:	fffffdff 	.word	0xfffffdff
 800ccd4:	40012c00 	.word	0x40012c00
 800ccd8:	fffff7ff 	.word	0xfffff7ff
 800ccdc:	fffffbff 	.word	0xfffffbff
 800cce0:	40014000 	.word	0x40014000
 800cce4:	40014400 	.word	0x40014400
 800cce8:	40014800 	.word	0x40014800
 800ccec:	ffffefff 	.word	0xffffefff
 800ccf0:	ffffdfff 	.word	0xffffdfff

0800ccf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	4a26      	ldr	r2, [pc, #152]	@ (800cda4 <TIM_OC4_SetConfig+0xb0>)
 800cd0a:	401a      	ands	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4a22      	ldr	r2, [pc, #136]	@ (800cda8 <TIM_OC4_SetConfig+0xb4>)
 800cd20:	4013      	ands	r3, r2
 800cd22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a21      	ldr	r2, [pc, #132]	@ (800cdac <TIM_OC4_SetConfig+0xb8>)
 800cd28:	4013      	ands	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	021b      	lsls	r3, r3, #8
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	4a1d      	ldr	r2, [pc, #116]	@ (800cdb0 <TIM_OC4_SetConfig+0xbc>)
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	031b      	lsls	r3, r3, #12
 800cd46:	693a      	ldr	r2, [r7, #16]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a19      	ldr	r2, [pc, #100]	@ (800cdb4 <TIM_OC4_SetConfig+0xc0>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d00b      	beq.n	800cd6c <TIM_OC4_SetConfig+0x78>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a18      	ldr	r2, [pc, #96]	@ (800cdb8 <TIM_OC4_SetConfig+0xc4>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d007      	beq.n	800cd6c <TIM_OC4_SetConfig+0x78>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a17      	ldr	r2, [pc, #92]	@ (800cdbc <TIM_OC4_SetConfig+0xc8>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d003      	beq.n	800cd6c <TIM_OC4_SetConfig+0x78>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a16      	ldr	r2, [pc, #88]	@ (800cdc0 <TIM_OC4_SetConfig+0xcc>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d109      	bne.n	800cd80 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	4a15      	ldr	r2, [pc, #84]	@ (800cdc4 <TIM_OC4_SetConfig+0xd0>)
 800cd70:	4013      	ands	r3, r2
 800cd72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	019b      	lsls	r3, r3, #6
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	685a      	ldr	r2, [r3, #4]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	693a      	ldr	r2, [r7, #16]
 800cd98:	621a      	str	r2, [r3, #32]
}
 800cd9a:	46c0      	nop			@ (mov r8, r8)
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	b006      	add	sp, #24
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	46c0      	nop			@ (mov r8, r8)
 800cda4:	ffffefff 	.word	0xffffefff
 800cda8:	feff8fff 	.word	0xfeff8fff
 800cdac:	fffffcff 	.word	0xfffffcff
 800cdb0:	ffffdfff 	.word	0xffffdfff
 800cdb4:	40012c00 	.word	0x40012c00
 800cdb8:	40014000 	.word	0x40014000
 800cdbc:	40014400 	.word	0x40014400
 800cdc0:	40014800 	.word	0x40014800
 800cdc4:	ffffbfff 	.word	0xffffbfff

0800cdc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a1b      	ldr	r3, [r3, #32]
 800cddc:	4a23      	ldr	r2, [pc, #140]	@ (800ce6c <TIM_OC5_SetConfig+0xa4>)
 800cdde:	401a      	ands	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	4a1f      	ldr	r2, [pc, #124]	@ (800ce70 <TIM_OC5_SetConfig+0xa8>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	4a1b      	ldr	r2, [pc, #108]	@ (800ce74 <TIM_OC5_SetConfig+0xac>)
 800ce06:	4013      	ands	r3, r2
 800ce08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	041b      	lsls	r3, r3, #16
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a17      	ldr	r2, [pc, #92]	@ (800ce78 <TIM_OC5_SetConfig+0xb0>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d00b      	beq.n	800ce36 <TIM_OC5_SetConfig+0x6e>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4a16      	ldr	r2, [pc, #88]	@ (800ce7c <TIM_OC5_SetConfig+0xb4>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d007      	beq.n	800ce36 <TIM_OC5_SetConfig+0x6e>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a15      	ldr	r2, [pc, #84]	@ (800ce80 <TIM_OC5_SetConfig+0xb8>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d003      	beq.n	800ce36 <TIM_OC5_SetConfig+0x6e>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4a14      	ldr	r2, [pc, #80]	@ (800ce84 <TIM_OC5_SetConfig+0xbc>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d109      	bne.n	800ce4a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	4a0c      	ldr	r2, [pc, #48]	@ (800ce6c <TIM_OC5_SetConfig+0xa4>)
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	021b      	lsls	r3, r3, #8
 800ce44:	697a      	ldr	r2, [r7, #20]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	685a      	ldr	r2, [r3, #4]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	621a      	str	r2, [r3, #32]
}
 800ce64:	46c0      	nop			@ (mov r8, r8)
 800ce66:	46bd      	mov	sp, r7
 800ce68:	b006      	add	sp, #24
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	fffeffff 	.word	0xfffeffff
 800ce70:	fffeff8f 	.word	0xfffeff8f
 800ce74:	fffdffff 	.word	0xfffdffff
 800ce78:	40012c00 	.word	0x40012c00
 800ce7c:	40014000 	.word	0x40014000
 800ce80:	40014400 	.word	0x40014400
 800ce84:	40014800 	.word	0x40014800

0800ce88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a1b      	ldr	r3, [r3, #32]
 800ce96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	4a24      	ldr	r2, [pc, #144]	@ (800cf30 <TIM_OC6_SetConfig+0xa8>)
 800ce9e:	401a      	ands	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ceae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	4a20      	ldr	r2, [pc, #128]	@ (800cf34 <TIM_OC6_SetConfig+0xac>)
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	021b      	lsls	r3, r3, #8
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	4a1c      	ldr	r2, [pc, #112]	@ (800cf38 <TIM_OC6_SetConfig+0xb0>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	051b      	lsls	r3, r3, #20
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a18      	ldr	r2, [pc, #96]	@ (800cf3c <TIM_OC6_SetConfig+0xb4>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d00b      	beq.n	800cef8 <TIM_OC6_SetConfig+0x70>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	4a17      	ldr	r2, [pc, #92]	@ (800cf40 <TIM_OC6_SetConfig+0xb8>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d007      	beq.n	800cef8 <TIM_OC6_SetConfig+0x70>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4a16      	ldr	r2, [pc, #88]	@ (800cf44 <TIM_OC6_SetConfig+0xbc>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d003      	beq.n	800cef8 <TIM_OC6_SetConfig+0x70>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a15      	ldr	r2, [pc, #84]	@ (800cf48 <TIM_OC6_SetConfig+0xc0>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d109      	bne.n	800cf0c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	4a14      	ldr	r2, [pc, #80]	@ (800cf4c <TIM_OC6_SetConfig+0xc4>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	029b      	lsls	r3, r3, #10
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	621a      	str	r2, [r3, #32]
}
 800cf26:	46c0      	nop			@ (mov r8, r8)
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	b006      	add	sp, #24
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	46c0      	nop			@ (mov r8, r8)
 800cf30:	ffefffff 	.word	0xffefffff
 800cf34:	feff8fff 	.word	0xfeff8fff
 800cf38:	ffdfffff 	.word	0xffdfffff
 800cf3c:	40012c00 	.word	0x40012c00
 800cf40:	40014000 	.word	0x40014000
 800cf44:	40014400 	.word	0x40014400
 800cf48:	40014800 	.word	0x40014800
 800cf4c:	fffbffff 	.word	0xfffbffff

0800cf50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	221f      	movs	r2, #31
 800cf60:	4013      	ands	r3, r2
 800cf62:	2201      	movs	r2, #1
 800cf64:	409a      	lsls	r2, r3
 800cf66:	0013      	movs	r3, r2
 800cf68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	43d2      	mvns	r2, r2
 800cf72:	401a      	ands	r2, r3
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	6a1a      	ldr	r2, [r3, #32]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	211f      	movs	r1, #31
 800cf80:	400b      	ands	r3, r1
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	4099      	lsls	r1, r3
 800cf86:	000b      	movs	r3, r1
 800cf88:	431a      	orrs	r2, r3
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	621a      	str	r2, [r3, #32]
}
 800cf8e:	46c0      	nop			@ (mov r8, r8)
 800cf90:	46bd      	mov	sp, r7
 800cf92:	b006      	add	sp, #24
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	223c      	movs	r2, #60	@ 0x3c
 800cfaa:	5c9b      	ldrb	r3, [r3, r2]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	e06f      	b.n	800d094 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	223c      	movs	r2, #60	@ 0x3c
 800cfb8:	2101      	movs	r1, #1
 800cfba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	22ff      	movs	r2, #255	@ 0xff
 800cfc0:	4393      	bics	r3, r2
 800cfc2:	001a      	movs	r2, r3
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	4a33      	ldr	r2, [pc, #204]	@ (800d09c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800cfd0:	401a      	ands	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	4a30      	ldr	r2, [pc, #192]	@ (800d0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800cfde:	401a      	ands	r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4a2e      	ldr	r2, [pc, #184]	@ (800d0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800cfec:	401a      	ands	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	4a2b      	ldr	r2, [pc, #172]	@ (800d0a8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800cffa:	401a      	ands	r2, r3
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	4313      	orrs	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4a29      	ldr	r2, [pc, #164]	@ (800d0ac <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d008:	401a      	ands	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	4313      	orrs	r3, r2
 800d010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	4a26      	ldr	r2, [pc, #152]	@ (800d0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800d016:	401a      	ands	r2, r3
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d01c:	4313      	orrs	r3, r2
 800d01e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	4a24      	ldr	r2, [pc, #144]	@ (800d0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d024:	401a      	ands	r2, r3
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	041b      	lsls	r3, r3, #16
 800d02c:	4313      	orrs	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	4a21      	ldr	r2, [pc, #132]	@ (800d0b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d034:	401a      	ands	r2, r3
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	69db      	ldr	r3, [r3, #28]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a1e      	ldr	r2, [pc, #120]	@ (800d0bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d11c      	bne.n	800d082 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4a1d      	ldr	r2, [pc, #116]	@ (800d0c0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800d04c:	401a      	ands	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d052:	051b      	lsls	r3, r3, #20
 800d054:	4313      	orrs	r3, r2
 800d056:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	4a1a      	ldr	r2, [pc, #104]	@ (800d0c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800d05c:	401a      	ands	r2, r3
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	4313      	orrs	r3, r2
 800d064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	4a17      	ldr	r2, [pc, #92]	@ (800d0c8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800d06a:	401a      	ands	r2, r3
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d070:	4313      	orrs	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	4a15      	ldr	r2, [pc, #84]	@ (800d0cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d078:	401a      	ands	r2, r3
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07e:	4313      	orrs	r3, r2
 800d080:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	223c      	movs	r2, #60	@ 0x3c
 800d08e:	2100      	movs	r1, #0
 800d090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	0018      	movs	r0, r3
 800d096:	46bd      	mov	sp, r7
 800d098:	b004      	add	sp, #16
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	fffffcff 	.word	0xfffffcff
 800d0a0:	fffffbff 	.word	0xfffffbff
 800d0a4:	fffff7ff 	.word	0xfffff7ff
 800d0a8:	ffffefff 	.word	0xffffefff
 800d0ac:	ffffdfff 	.word	0xffffdfff
 800d0b0:	ffffbfff 	.word	0xffffbfff
 800d0b4:	fff0ffff 	.word	0xfff0ffff
 800d0b8:	efffffff 	.word	0xefffffff
 800d0bc:	40012c00 	.word	0x40012c00
 800d0c0:	ff0fffff 	.word	0xff0fffff
 800d0c4:	feffffff 	.word	0xfeffffff
 800d0c8:	fdffffff 	.word	0xfdffffff
 800d0cc:	dfffffff 	.word	0xdfffffff

0800d0d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e046      	b.n	800d170 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2288      	movs	r2, #136	@ 0x88
 800d0e6:	589b      	ldr	r3, [r3, r2]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d107      	bne.n	800d0fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2284      	movs	r2, #132	@ 0x84
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f7fa fd0c 	bl	8007b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2288      	movs	r2, #136	@ 0x88
 800d100:	2124      	movs	r1, #36	@ 0x24
 800d102:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2101      	movs	r1, #1
 800d110:	438a      	bics	r2, r1
 800d112:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d003      	beq.n	800d124 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	0018      	movs	r0, r3
 800d120:	f000 fd0c 	bl	800db3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	0018      	movs	r0, r3
 800d128:	f000 f9b2 	bl	800d490 <UART_SetConfig>
 800d12c:	0003      	movs	r3, r0
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d101      	bne.n	800d136 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e01c      	b.n	800d170 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	490d      	ldr	r1, [pc, #52]	@ (800d178 <HAL_UART_Init+0xa8>)
 800d142:	400a      	ands	r2, r1
 800d144:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	689a      	ldr	r2, [r3, #8]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	212a      	movs	r1, #42	@ 0x2a
 800d152:	438a      	bics	r2, r1
 800d154:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2101      	movs	r1, #1
 800d162:	430a      	orrs	r2, r1
 800d164:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	0018      	movs	r0, r3
 800d16a:	f000 fd9b 	bl	800dca4 <UART_CheckIdleState>
 800d16e:	0003      	movs	r3, r0
}
 800d170:	0018      	movs	r0, r3
 800d172:	46bd      	mov	sp, r7
 800d174:	b002      	add	sp, #8
 800d176:	bd80      	pop	{r7, pc}
 800d178:	ffffb7ff 	.word	0xffffb7ff

0800d17c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b08a      	sub	sp, #40	@ 0x28
 800d180:	af02      	add	r7, sp, #8
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	603b      	str	r3, [r7, #0]
 800d188:	1dbb      	adds	r3, r7, #6
 800d18a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2288      	movs	r2, #136	@ 0x88
 800d190:	589b      	ldr	r3, [r3, r2]
 800d192:	2b20      	cmp	r3, #32
 800d194:	d000      	beq.n	800d198 <HAL_UART_Transmit+0x1c>
 800d196:	e090      	b.n	800d2ba <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <HAL_UART_Transmit+0x2a>
 800d19e:	1dbb      	adds	r3, r7, #6
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e088      	b.n	800d2bc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	689a      	ldr	r2, [r3, #8]
 800d1ae:	2380      	movs	r3, #128	@ 0x80
 800d1b0:	015b      	lsls	r3, r3, #5
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d109      	bne.n	800d1ca <HAL_UART_Transmit+0x4e>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	691b      	ldr	r3, [r3, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d105      	bne.n	800d1ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	d001      	beq.n	800d1ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e078      	b.n	800d2bc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2290      	movs	r2, #144	@ 0x90
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2288      	movs	r2, #136	@ 0x88
 800d1d6:	2121      	movs	r1, #33	@ 0x21
 800d1d8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1da:	f7fb fc3d 	bl	8008a58 <HAL_GetTick>
 800d1de:	0003      	movs	r3, r0
 800d1e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	1dba      	adds	r2, r7, #6
 800d1e6:	2154      	movs	r1, #84	@ 0x54
 800d1e8:	8812      	ldrh	r2, [r2, #0]
 800d1ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	1dba      	adds	r2, r7, #6
 800d1f0:	2156      	movs	r1, #86	@ 0x56
 800d1f2:	8812      	ldrh	r2, [r2, #0]
 800d1f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	689a      	ldr	r2, [r3, #8]
 800d1fa:	2380      	movs	r3, #128	@ 0x80
 800d1fc:	015b      	lsls	r3, r3, #5
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d108      	bne.n	800d214 <HAL_UART_Transmit+0x98>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d104      	bne.n	800d214 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	e003      	b.n	800d21c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d218:	2300      	movs	r3, #0
 800d21a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d21c:	e030      	b.n	800d280 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d21e:	697a      	ldr	r2, [r7, #20]
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	0013      	movs	r3, r2
 800d228:	2200      	movs	r2, #0
 800d22a:	2180      	movs	r1, #128	@ 0x80
 800d22c:	f000 fde4 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800d230:	1e03      	subs	r3, r0, #0
 800d232:	d005      	beq.n	800d240 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2288      	movs	r2, #136	@ 0x88
 800d238:	2120      	movs	r1, #32
 800d23a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e03d      	b.n	800d2bc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10b      	bne.n	800d25e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	881b      	ldrh	r3, [r3, #0]
 800d24a:	001a      	movs	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	05d2      	lsls	r2, r2, #23
 800d252:	0dd2      	lsrs	r2, r2, #23
 800d254:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	3302      	adds	r3, #2
 800d25a:	61bb      	str	r3, [r7, #24]
 800d25c:	e007      	b.n	800d26e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	781a      	ldrb	r2, [r3, #0]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	3301      	adds	r3, #1
 800d26c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2256      	movs	r2, #86	@ 0x56
 800d272:	5a9b      	ldrh	r3, [r3, r2]
 800d274:	b29b      	uxth	r3, r3
 800d276:	3b01      	subs	r3, #1
 800d278:	b299      	uxth	r1, r3
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2256      	movs	r2, #86	@ 0x56
 800d27e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2256      	movs	r2, #86	@ 0x56
 800d284:	5a9b      	ldrh	r3, [r3, r2]
 800d286:	b29b      	uxth	r3, r3
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1c8      	bne.n	800d21e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	0013      	movs	r3, r2
 800d296:	2200      	movs	r2, #0
 800d298:	2140      	movs	r1, #64	@ 0x40
 800d29a:	f000 fdad 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800d29e:	1e03      	subs	r3, r0, #0
 800d2a0:	d005      	beq.n	800d2ae <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2288      	movs	r2, #136	@ 0x88
 800d2a6:	2120      	movs	r1, #32
 800d2a8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	e006      	b.n	800d2bc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2288      	movs	r2, #136	@ 0x88
 800d2b2:	2120      	movs	r1, #32
 800d2b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	e000      	b.n	800d2bc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800d2ba:	2302      	movs	r3, #2
  }
}
 800d2bc:	0018      	movs	r0, r3
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	b008      	add	sp, #32
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08a      	sub	sp, #40	@ 0x28
 800d2c8:	af02      	add	r7, sp, #8
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	1dbb      	adds	r3, r7, #6
 800d2d2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	228c      	movs	r2, #140	@ 0x8c
 800d2d8:	589b      	ldr	r3, [r3, r2]
 800d2da:	2b20      	cmp	r3, #32
 800d2dc:	d000      	beq.n	800d2e0 <HAL_UART_Receive+0x1c>
 800d2de:	e0d0      	b.n	800d482 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <HAL_UART_Receive+0x2a>
 800d2e6:	1dbb      	adds	r3, r7, #6
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d101      	bne.n	800d2f2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e0c8      	b.n	800d484 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	689a      	ldr	r2, [r3, #8]
 800d2f6:	2380      	movs	r3, #128	@ 0x80
 800d2f8:	015b      	lsls	r3, r3, #5
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d109      	bne.n	800d312 <HAL_UART_Receive+0x4e>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d105      	bne.n	800d312 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2201      	movs	r2, #1
 800d30a:	4013      	ands	r3, r2
 800d30c:	d001      	beq.n	800d312 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	e0b8      	b.n	800d484 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2290      	movs	r2, #144	@ 0x90
 800d316:	2100      	movs	r1, #0
 800d318:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	228c      	movs	r2, #140	@ 0x8c
 800d31e:	2122      	movs	r1, #34	@ 0x22
 800d320:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d328:	f7fb fb96 	bl	8008a58 <HAL_GetTick>
 800d32c:	0003      	movs	r3, r0
 800d32e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	1dba      	adds	r2, r7, #6
 800d334:	215c      	movs	r1, #92	@ 0x5c
 800d336:	8812      	ldrh	r2, [r2, #0]
 800d338:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	1dba      	adds	r2, r7, #6
 800d33e:	215e      	movs	r1, #94	@ 0x5e
 800d340:	8812      	ldrh	r2, [r2, #0]
 800d342:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	2380      	movs	r3, #128	@ 0x80
 800d34a:	015b      	lsls	r3, r3, #5
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d10d      	bne.n	800d36c <HAL_UART_Receive+0xa8>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d104      	bne.n	800d362 <HAL_UART_Receive+0x9e>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2260      	movs	r2, #96	@ 0x60
 800d35c:	494b      	ldr	r1, [pc, #300]	@ (800d48c <HAL_UART_Receive+0x1c8>)
 800d35e:	5299      	strh	r1, [r3, r2]
 800d360:	e02e      	b.n	800d3c0 <HAL_UART_Receive+0xfc>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2260      	movs	r2, #96	@ 0x60
 800d366:	21ff      	movs	r1, #255	@ 0xff
 800d368:	5299      	strh	r1, [r3, r2]
 800d36a:	e029      	b.n	800d3c0 <HAL_UART_Receive+0xfc>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10d      	bne.n	800d390 <HAL_UART_Receive+0xcc>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d104      	bne.n	800d386 <HAL_UART_Receive+0xc2>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2260      	movs	r2, #96	@ 0x60
 800d380:	21ff      	movs	r1, #255	@ 0xff
 800d382:	5299      	strh	r1, [r3, r2]
 800d384:	e01c      	b.n	800d3c0 <HAL_UART_Receive+0xfc>
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2260      	movs	r2, #96	@ 0x60
 800d38a:	217f      	movs	r1, #127	@ 0x7f
 800d38c:	5299      	strh	r1, [r3, r2]
 800d38e:	e017      	b.n	800d3c0 <HAL_UART_Receive+0xfc>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	689a      	ldr	r2, [r3, #8]
 800d394:	2380      	movs	r3, #128	@ 0x80
 800d396:	055b      	lsls	r3, r3, #21
 800d398:	429a      	cmp	r2, r3
 800d39a:	d10d      	bne.n	800d3b8 <HAL_UART_Receive+0xf4>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d104      	bne.n	800d3ae <HAL_UART_Receive+0xea>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2260      	movs	r2, #96	@ 0x60
 800d3a8:	217f      	movs	r1, #127	@ 0x7f
 800d3aa:	5299      	strh	r1, [r3, r2]
 800d3ac:	e008      	b.n	800d3c0 <HAL_UART_Receive+0xfc>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2260      	movs	r2, #96	@ 0x60
 800d3b2:	213f      	movs	r1, #63	@ 0x3f
 800d3b4:	5299      	strh	r1, [r3, r2]
 800d3b6:	e003      	b.n	800d3c0 <HAL_UART_Receive+0xfc>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2260      	movs	r2, #96	@ 0x60
 800d3bc:	2100      	movs	r1, #0
 800d3be:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800d3c0:	2312      	movs	r3, #18
 800d3c2:	18fb      	adds	r3, r7, r3
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	2160      	movs	r1, #96	@ 0x60
 800d3c8:	5a52      	ldrh	r2, [r2, r1]
 800d3ca:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	689a      	ldr	r2, [r3, #8]
 800d3d0:	2380      	movs	r3, #128	@ 0x80
 800d3d2:	015b      	lsls	r3, r3, #5
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d108      	bne.n	800d3ea <HAL_UART_Receive+0x126>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d104      	bne.n	800d3ea <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	61bb      	str	r3, [r7, #24]
 800d3e8:	e003      	b.n	800d3f2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d3f2:	e03a      	b.n	800d46a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	0013      	movs	r3, r2
 800d3fe:	2200      	movs	r2, #0
 800d400:	2120      	movs	r1, #32
 800d402:	f000 fcf9 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800d406:	1e03      	subs	r3, r0, #0
 800d408:	d005      	beq.n	800d416 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	228c      	movs	r2, #140	@ 0x8c
 800d40e:	2120      	movs	r1, #32
 800d410:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	e036      	b.n	800d484 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10e      	bne.n	800d43a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d422:	b29b      	uxth	r3, r3
 800d424:	2212      	movs	r2, #18
 800d426:	18ba      	adds	r2, r7, r2
 800d428:	8812      	ldrh	r2, [r2, #0]
 800d42a:	4013      	ands	r3, r2
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	3302      	adds	r3, #2
 800d436:	61bb      	str	r3, [r7, #24]
 800d438:	e00e      	b.n	800d458 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2212      	movs	r2, #18
 800d444:	18ba      	adds	r2, r7, r2
 800d446:	8812      	ldrh	r2, [r2, #0]
 800d448:	b2d2      	uxtb	r2, r2
 800d44a:	4013      	ands	r3, r2
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	3301      	adds	r3, #1
 800d456:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	225e      	movs	r2, #94	@ 0x5e
 800d45c:	5a9b      	ldrh	r3, [r3, r2]
 800d45e:	b29b      	uxth	r3, r3
 800d460:	3b01      	subs	r3, #1
 800d462:	b299      	uxth	r1, r3
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	225e      	movs	r2, #94	@ 0x5e
 800d468:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	225e      	movs	r2, #94	@ 0x5e
 800d46e:	5a9b      	ldrh	r3, [r3, r2]
 800d470:	b29b      	uxth	r3, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1be      	bne.n	800d3f4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	228c      	movs	r2, #140	@ 0x8c
 800d47a:	2120      	movs	r1, #32
 800d47c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d47e:	2300      	movs	r3, #0
 800d480:	e000      	b.n	800d484 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800d482:	2302      	movs	r3, #2
  }
}
 800d484:	0018      	movs	r0, r3
 800d486:	46bd      	mov	sp, r7
 800d488:	b008      	add	sp, #32
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	000001ff 	.word	0x000001ff

0800d490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d490:	b5b0      	push	{r4, r5, r7, lr}
 800d492:	b090      	sub	sp, #64	@ 0x40
 800d494:	af00      	add	r7, sp, #0
 800d496:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d498:	231a      	movs	r3, #26
 800d49a:	2220      	movs	r2, #32
 800d49c:	189b      	adds	r3, r3, r2
 800d49e:	19db      	adds	r3, r3, r7
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a6:	689a      	ldr	r2, [r3, #8]
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	431a      	orrs	r2, r3
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b0:	695b      	ldr	r3, [r3, #20]
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b6:	69db      	ldr	r3, [r3, #28]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4ac1      	ldr	r2, [pc, #772]	@ (800d7c8 <UART_SetConfig+0x338>)
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	0019      	movs	r1, r3
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ce:	430b      	orrs	r3, r1
 800d4d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	4abc      	ldr	r2, [pc, #752]	@ (800d7cc <UART_SetConfig+0x33c>)
 800d4da:	4013      	ands	r3, r2
 800d4dc:	0018      	movs	r0, r3
 800d4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e0:	68d9      	ldr	r1, [r3, #12]
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	0003      	movs	r3, r0
 800d4e8:	430b      	orrs	r3, r1
 800d4ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4ab6      	ldr	r2, [pc, #728]	@ (800d7d0 <UART_SetConfig+0x340>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d009      	beq.n	800d510 <UART_SetConfig+0x80>
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4ab4      	ldr	r2, [pc, #720]	@ (800d7d4 <UART_SetConfig+0x344>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d004      	beq.n	800d510 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d50c:	4313      	orrs	r3, r2
 800d50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	4ab0      	ldr	r2, [pc, #704]	@ (800d7d8 <UART_SetConfig+0x348>)
 800d518:	4013      	ands	r3, r2
 800d51a:	0019      	movs	r1, r3
 800d51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d522:	430b      	orrs	r3, r1
 800d524:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d52c:	220f      	movs	r2, #15
 800d52e:	4393      	bics	r3, r2
 800d530:	0018      	movs	r0, r3
 800d532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d534:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	0003      	movs	r3, r0
 800d53c:	430b      	orrs	r3, r1
 800d53e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4aa5      	ldr	r2, [pc, #660]	@ (800d7dc <UART_SetConfig+0x34c>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d131      	bne.n	800d5ae <UART_SetConfig+0x11e>
 800d54a:	4ba5      	ldr	r3, [pc, #660]	@ (800d7e0 <UART_SetConfig+0x350>)
 800d54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d54e:	2203      	movs	r2, #3
 800d550:	4013      	ands	r3, r2
 800d552:	2b03      	cmp	r3, #3
 800d554:	d01d      	beq.n	800d592 <UART_SetConfig+0x102>
 800d556:	d823      	bhi.n	800d5a0 <UART_SetConfig+0x110>
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d00c      	beq.n	800d576 <UART_SetConfig+0xe6>
 800d55c:	d820      	bhi.n	800d5a0 <UART_SetConfig+0x110>
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <UART_SetConfig+0xd8>
 800d562:	2b01      	cmp	r3, #1
 800d564:	d00e      	beq.n	800d584 <UART_SetConfig+0xf4>
 800d566:	e01b      	b.n	800d5a0 <UART_SetConfig+0x110>
 800d568:	231b      	movs	r3, #27
 800d56a:	2220      	movs	r2, #32
 800d56c:	189b      	adds	r3, r3, r2
 800d56e:	19db      	adds	r3, r3, r7
 800d570:	2200      	movs	r2, #0
 800d572:	701a      	strb	r2, [r3, #0]
 800d574:	e154      	b.n	800d820 <UART_SetConfig+0x390>
 800d576:	231b      	movs	r3, #27
 800d578:	2220      	movs	r2, #32
 800d57a:	189b      	adds	r3, r3, r2
 800d57c:	19db      	adds	r3, r3, r7
 800d57e:	2202      	movs	r2, #2
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	e14d      	b.n	800d820 <UART_SetConfig+0x390>
 800d584:	231b      	movs	r3, #27
 800d586:	2220      	movs	r2, #32
 800d588:	189b      	adds	r3, r3, r2
 800d58a:	19db      	adds	r3, r3, r7
 800d58c:	2204      	movs	r2, #4
 800d58e:	701a      	strb	r2, [r3, #0]
 800d590:	e146      	b.n	800d820 <UART_SetConfig+0x390>
 800d592:	231b      	movs	r3, #27
 800d594:	2220      	movs	r2, #32
 800d596:	189b      	adds	r3, r3, r2
 800d598:	19db      	adds	r3, r3, r7
 800d59a:	2208      	movs	r2, #8
 800d59c:	701a      	strb	r2, [r3, #0]
 800d59e:	e13f      	b.n	800d820 <UART_SetConfig+0x390>
 800d5a0:	231b      	movs	r3, #27
 800d5a2:	2220      	movs	r2, #32
 800d5a4:	189b      	adds	r3, r3, r2
 800d5a6:	19db      	adds	r3, r3, r7
 800d5a8:	2210      	movs	r2, #16
 800d5aa:	701a      	strb	r2, [r3, #0]
 800d5ac:	e138      	b.n	800d820 <UART_SetConfig+0x390>
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4a8c      	ldr	r2, [pc, #560]	@ (800d7e4 <UART_SetConfig+0x354>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d131      	bne.n	800d61c <UART_SetConfig+0x18c>
 800d5b8:	4b89      	ldr	r3, [pc, #548]	@ (800d7e0 <UART_SetConfig+0x350>)
 800d5ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5bc:	220c      	movs	r2, #12
 800d5be:	4013      	ands	r3, r2
 800d5c0:	2b0c      	cmp	r3, #12
 800d5c2:	d01d      	beq.n	800d600 <UART_SetConfig+0x170>
 800d5c4:	d823      	bhi.n	800d60e <UART_SetConfig+0x17e>
 800d5c6:	2b08      	cmp	r3, #8
 800d5c8:	d00c      	beq.n	800d5e4 <UART_SetConfig+0x154>
 800d5ca:	d820      	bhi.n	800d60e <UART_SetConfig+0x17e>
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <UART_SetConfig+0x146>
 800d5d0:	2b04      	cmp	r3, #4
 800d5d2:	d00e      	beq.n	800d5f2 <UART_SetConfig+0x162>
 800d5d4:	e01b      	b.n	800d60e <UART_SetConfig+0x17e>
 800d5d6:	231b      	movs	r3, #27
 800d5d8:	2220      	movs	r2, #32
 800d5da:	189b      	adds	r3, r3, r2
 800d5dc:	19db      	adds	r3, r3, r7
 800d5de:	2200      	movs	r2, #0
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	e11d      	b.n	800d820 <UART_SetConfig+0x390>
 800d5e4:	231b      	movs	r3, #27
 800d5e6:	2220      	movs	r2, #32
 800d5e8:	189b      	adds	r3, r3, r2
 800d5ea:	19db      	adds	r3, r3, r7
 800d5ec:	2202      	movs	r2, #2
 800d5ee:	701a      	strb	r2, [r3, #0]
 800d5f0:	e116      	b.n	800d820 <UART_SetConfig+0x390>
 800d5f2:	231b      	movs	r3, #27
 800d5f4:	2220      	movs	r2, #32
 800d5f6:	189b      	adds	r3, r3, r2
 800d5f8:	19db      	adds	r3, r3, r7
 800d5fa:	2204      	movs	r2, #4
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	e10f      	b.n	800d820 <UART_SetConfig+0x390>
 800d600:	231b      	movs	r3, #27
 800d602:	2220      	movs	r2, #32
 800d604:	189b      	adds	r3, r3, r2
 800d606:	19db      	adds	r3, r3, r7
 800d608:	2208      	movs	r2, #8
 800d60a:	701a      	strb	r2, [r3, #0]
 800d60c:	e108      	b.n	800d820 <UART_SetConfig+0x390>
 800d60e:	231b      	movs	r3, #27
 800d610:	2220      	movs	r2, #32
 800d612:	189b      	adds	r3, r3, r2
 800d614:	19db      	adds	r3, r3, r7
 800d616:	2210      	movs	r2, #16
 800d618:	701a      	strb	r2, [r3, #0]
 800d61a:	e101      	b.n	800d820 <UART_SetConfig+0x390>
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a71      	ldr	r2, [pc, #452]	@ (800d7e8 <UART_SetConfig+0x358>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d131      	bne.n	800d68a <UART_SetConfig+0x1fa>
 800d626:	4b6e      	ldr	r3, [pc, #440]	@ (800d7e0 <UART_SetConfig+0x350>)
 800d628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d62a:	2230      	movs	r2, #48	@ 0x30
 800d62c:	4013      	ands	r3, r2
 800d62e:	2b30      	cmp	r3, #48	@ 0x30
 800d630:	d01d      	beq.n	800d66e <UART_SetConfig+0x1de>
 800d632:	d823      	bhi.n	800d67c <UART_SetConfig+0x1ec>
 800d634:	2b20      	cmp	r3, #32
 800d636:	d00c      	beq.n	800d652 <UART_SetConfig+0x1c2>
 800d638:	d820      	bhi.n	800d67c <UART_SetConfig+0x1ec>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <UART_SetConfig+0x1b4>
 800d63e:	2b10      	cmp	r3, #16
 800d640:	d00e      	beq.n	800d660 <UART_SetConfig+0x1d0>
 800d642:	e01b      	b.n	800d67c <UART_SetConfig+0x1ec>
 800d644:	231b      	movs	r3, #27
 800d646:	2220      	movs	r2, #32
 800d648:	189b      	adds	r3, r3, r2
 800d64a:	19db      	adds	r3, r3, r7
 800d64c:	2200      	movs	r2, #0
 800d64e:	701a      	strb	r2, [r3, #0]
 800d650:	e0e6      	b.n	800d820 <UART_SetConfig+0x390>
 800d652:	231b      	movs	r3, #27
 800d654:	2220      	movs	r2, #32
 800d656:	189b      	adds	r3, r3, r2
 800d658:	19db      	adds	r3, r3, r7
 800d65a:	2202      	movs	r2, #2
 800d65c:	701a      	strb	r2, [r3, #0]
 800d65e:	e0df      	b.n	800d820 <UART_SetConfig+0x390>
 800d660:	231b      	movs	r3, #27
 800d662:	2220      	movs	r2, #32
 800d664:	189b      	adds	r3, r3, r2
 800d666:	19db      	adds	r3, r3, r7
 800d668:	2204      	movs	r2, #4
 800d66a:	701a      	strb	r2, [r3, #0]
 800d66c:	e0d8      	b.n	800d820 <UART_SetConfig+0x390>
 800d66e:	231b      	movs	r3, #27
 800d670:	2220      	movs	r2, #32
 800d672:	189b      	adds	r3, r3, r2
 800d674:	19db      	adds	r3, r3, r7
 800d676:	2208      	movs	r2, #8
 800d678:	701a      	strb	r2, [r3, #0]
 800d67a:	e0d1      	b.n	800d820 <UART_SetConfig+0x390>
 800d67c:	231b      	movs	r3, #27
 800d67e:	2220      	movs	r2, #32
 800d680:	189b      	adds	r3, r3, r2
 800d682:	19db      	adds	r3, r3, r7
 800d684:	2210      	movs	r2, #16
 800d686:	701a      	strb	r2, [r3, #0]
 800d688:	e0ca      	b.n	800d820 <UART_SetConfig+0x390>
 800d68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a57      	ldr	r2, [pc, #348]	@ (800d7ec <UART_SetConfig+0x35c>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d106      	bne.n	800d6a2 <UART_SetConfig+0x212>
 800d694:	231b      	movs	r3, #27
 800d696:	2220      	movs	r2, #32
 800d698:	189b      	adds	r3, r3, r2
 800d69a:	19db      	adds	r3, r3, r7
 800d69c:	2200      	movs	r2, #0
 800d69e:	701a      	strb	r2, [r3, #0]
 800d6a0:	e0be      	b.n	800d820 <UART_SetConfig+0x390>
 800d6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a52      	ldr	r2, [pc, #328]	@ (800d7f0 <UART_SetConfig+0x360>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d106      	bne.n	800d6ba <UART_SetConfig+0x22a>
 800d6ac:	231b      	movs	r3, #27
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	189b      	adds	r3, r3, r2
 800d6b2:	19db      	adds	r3, r3, r7
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	701a      	strb	r2, [r3, #0]
 800d6b8:	e0b2      	b.n	800d820 <UART_SetConfig+0x390>
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4a4d      	ldr	r2, [pc, #308]	@ (800d7f4 <UART_SetConfig+0x364>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d106      	bne.n	800d6d2 <UART_SetConfig+0x242>
 800d6c4:	231b      	movs	r3, #27
 800d6c6:	2220      	movs	r2, #32
 800d6c8:	189b      	adds	r3, r3, r2
 800d6ca:	19db      	adds	r3, r3, r7
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	701a      	strb	r2, [r3, #0]
 800d6d0:	e0a6      	b.n	800d820 <UART_SetConfig+0x390>
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a3e      	ldr	r2, [pc, #248]	@ (800d7d0 <UART_SetConfig+0x340>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d13e      	bne.n	800d75a <UART_SetConfig+0x2ca>
 800d6dc:	4b40      	ldr	r3, [pc, #256]	@ (800d7e0 <UART_SetConfig+0x350>)
 800d6de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6e0:	23c0      	movs	r3, #192	@ 0xc0
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	22c0      	movs	r2, #192	@ 0xc0
 800d6e8:	0112      	lsls	r2, r2, #4
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d027      	beq.n	800d73e <UART_SetConfig+0x2ae>
 800d6ee:	22c0      	movs	r2, #192	@ 0xc0
 800d6f0:	0112      	lsls	r2, r2, #4
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d82a      	bhi.n	800d74c <UART_SetConfig+0x2bc>
 800d6f6:	2280      	movs	r2, #128	@ 0x80
 800d6f8:	0112      	lsls	r2, r2, #4
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d011      	beq.n	800d722 <UART_SetConfig+0x292>
 800d6fe:	2280      	movs	r2, #128	@ 0x80
 800d700:	0112      	lsls	r2, r2, #4
 800d702:	4293      	cmp	r3, r2
 800d704:	d822      	bhi.n	800d74c <UART_SetConfig+0x2bc>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d004      	beq.n	800d714 <UART_SetConfig+0x284>
 800d70a:	2280      	movs	r2, #128	@ 0x80
 800d70c:	00d2      	lsls	r2, r2, #3
 800d70e:	4293      	cmp	r3, r2
 800d710:	d00e      	beq.n	800d730 <UART_SetConfig+0x2a0>
 800d712:	e01b      	b.n	800d74c <UART_SetConfig+0x2bc>
 800d714:	231b      	movs	r3, #27
 800d716:	2220      	movs	r2, #32
 800d718:	189b      	adds	r3, r3, r2
 800d71a:	19db      	adds	r3, r3, r7
 800d71c:	2200      	movs	r2, #0
 800d71e:	701a      	strb	r2, [r3, #0]
 800d720:	e07e      	b.n	800d820 <UART_SetConfig+0x390>
 800d722:	231b      	movs	r3, #27
 800d724:	2220      	movs	r2, #32
 800d726:	189b      	adds	r3, r3, r2
 800d728:	19db      	adds	r3, r3, r7
 800d72a:	2202      	movs	r2, #2
 800d72c:	701a      	strb	r2, [r3, #0]
 800d72e:	e077      	b.n	800d820 <UART_SetConfig+0x390>
 800d730:	231b      	movs	r3, #27
 800d732:	2220      	movs	r2, #32
 800d734:	189b      	adds	r3, r3, r2
 800d736:	19db      	adds	r3, r3, r7
 800d738:	2204      	movs	r2, #4
 800d73a:	701a      	strb	r2, [r3, #0]
 800d73c:	e070      	b.n	800d820 <UART_SetConfig+0x390>
 800d73e:	231b      	movs	r3, #27
 800d740:	2220      	movs	r2, #32
 800d742:	189b      	adds	r3, r3, r2
 800d744:	19db      	adds	r3, r3, r7
 800d746:	2208      	movs	r2, #8
 800d748:	701a      	strb	r2, [r3, #0]
 800d74a:	e069      	b.n	800d820 <UART_SetConfig+0x390>
 800d74c:	231b      	movs	r3, #27
 800d74e:	2220      	movs	r2, #32
 800d750:	189b      	adds	r3, r3, r2
 800d752:	19db      	adds	r3, r3, r7
 800d754:	2210      	movs	r2, #16
 800d756:	701a      	strb	r2, [r3, #0]
 800d758:	e062      	b.n	800d820 <UART_SetConfig+0x390>
 800d75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4a1d      	ldr	r2, [pc, #116]	@ (800d7d4 <UART_SetConfig+0x344>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d157      	bne.n	800d814 <UART_SetConfig+0x384>
 800d764:	4b1e      	ldr	r3, [pc, #120]	@ (800d7e0 <UART_SetConfig+0x350>)
 800d766:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d768:	23c0      	movs	r3, #192	@ 0xc0
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	4013      	ands	r3, r2
 800d76e:	22c0      	movs	r2, #192	@ 0xc0
 800d770:	0092      	lsls	r2, r2, #2
 800d772:	4293      	cmp	r3, r2
 800d774:	d040      	beq.n	800d7f8 <UART_SetConfig+0x368>
 800d776:	22c0      	movs	r2, #192	@ 0xc0
 800d778:	0092      	lsls	r2, r2, #2
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d843      	bhi.n	800d806 <UART_SetConfig+0x376>
 800d77e:	2280      	movs	r2, #128	@ 0x80
 800d780:	0092      	lsls	r2, r2, #2
 800d782:	4293      	cmp	r3, r2
 800d784:	d011      	beq.n	800d7aa <UART_SetConfig+0x31a>
 800d786:	2280      	movs	r2, #128	@ 0x80
 800d788:	0092      	lsls	r2, r2, #2
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d83b      	bhi.n	800d806 <UART_SetConfig+0x376>
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d004      	beq.n	800d79c <UART_SetConfig+0x30c>
 800d792:	2280      	movs	r2, #128	@ 0x80
 800d794:	0052      	lsls	r2, r2, #1
 800d796:	4293      	cmp	r3, r2
 800d798:	d00e      	beq.n	800d7b8 <UART_SetConfig+0x328>
 800d79a:	e034      	b.n	800d806 <UART_SetConfig+0x376>
 800d79c:	231b      	movs	r3, #27
 800d79e:	2220      	movs	r2, #32
 800d7a0:	189b      	adds	r3, r3, r2
 800d7a2:	19db      	adds	r3, r3, r7
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	701a      	strb	r2, [r3, #0]
 800d7a8:	e03a      	b.n	800d820 <UART_SetConfig+0x390>
 800d7aa:	231b      	movs	r3, #27
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	189b      	adds	r3, r3, r2
 800d7b0:	19db      	adds	r3, r3, r7
 800d7b2:	2202      	movs	r2, #2
 800d7b4:	701a      	strb	r2, [r3, #0]
 800d7b6:	e033      	b.n	800d820 <UART_SetConfig+0x390>
 800d7b8:	231b      	movs	r3, #27
 800d7ba:	2220      	movs	r2, #32
 800d7bc:	189b      	adds	r3, r3, r2
 800d7be:	19db      	adds	r3, r3, r7
 800d7c0:	2204      	movs	r2, #4
 800d7c2:	701a      	strb	r2, [r3, #0]
 800d7c4:	e02c      	b.n	800d820 <UART_SetConfig+0x390>
 800d7c6:	46c0      	nop			@ (mov r8, r8)
 800d7c8:	cfff69f3 	.word	0xcfff69f3
 800d7cc:	ffffcfff 	.word	0xffffcfff
 800d7d0:	40008000 	.word	0x40008000
 800d7d4:	40008400 	.word	0x40008400
 800d7d8:	11fff4ff 	.word	0x11fff4ff
 800d7dc:	40013800 	.word	0x40013800
 800d7e0:	40021000 	.word	0x40021000
 800d7e4:	40004400 	.word	0x40004400
 800d7e8:	40004800 	.word	0x40004800
 800d7ec:	40004c00 	.word	0x40004c00
 800d7f0:	40005000 	.word	0x40005000
 800d7f4:	40013c00 	.word	0x40013c00
 800d7f8:	231b      	movs	r3, #27
 800d7fa:	2220      	movs	r2, #32
 800d7fc:	189b      	adds	r3, r3, r2
 800d7fe:	19db      	adds	r3, r3, r7
 800d800:	2208      	movs	r2, #8
 800d802:	701a      	strb	r2, [r3, #0]
 800d804:	e00c      	b.n	800d820 <UART_SetConfig+0x390>
 800d806:	231b      	movs	r3, #27
 800d808:	2220      	movs	r2, #32
 800d80a:	189b      	adds	r3, r3, r2
 800d80c:	19db      	adds	r3, r3, r7
 800d80e:	2210      	movs	r2, #16
 800d810:	701a      	strb	r2, [r3, #0]
 800d812:	e005      	b.n	800d820 <UART_SetConfig+0x390>
 800d814:	231b      	movs	r3, #27
 800d816:	2220      	movs	r2, #32
 800d818:	189b      	adds	r3, r3, r2
 800d81a:	19db      	adds	r3, r3, r7
 800d81c:	2210      	movs	r2, #16
 800d81e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4ac1      	ldr	r2, [pc, #772]	@ (800db2c <UART_SetConfig+0x69c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d005      	beq.n	800d836 <UART_SetConfig+0x3a6>
 800d82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4ac0      	ldr	r2, [pc, #768]	@ (800db30 <UART_SetConfig+0x6a0>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d000      	beq.n	800d836 <UART_SetConfig+0x3a6>
 800d834:	e093      	b.n	800d95e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d836:	231b      	movs	r3, #27
 800d838:	2220      	movs	r2, #32
 800d83a:	189b      	adds	r3, r3, r2
 800d83c:	19db      	adds	r3, r3, r7
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	2b08      	cmp	r3, #8
 800d842:	d015      	beq.n	800d870 <UART_SetConfig+0x3e0>
 800d844:	dc18      	bgt.n	800d878 <UART_SetConfig+0x3e8>
 800d846:	2b04      	cmp	r3, #4
 800d848:	d00d      	beq.n	800d866 <UART_SetConfig+0x3d6>
 800d84a:	dc15      	bgt.n	800d878 <UART_SetConfig+0x3e8>
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <UART_SetConfig+0x3c6>
 800d850:	2b02      	cmp	r3, #2
 800d852:	d005      	beq.n	800d860 <UART_SetConfig+0x3d0>
 800d854:	e010      	b.n	800d878 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d856:	f7fd f931 	bl	800aabc <HAL_RCC_GetPCLK1Freq>
 800d85a:	0003      	movs	r3, r0
 800d85c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d85e:	e014      	b.n	800d88a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d860:	4bb4      	ldr	r3, [pc, #720]	@ (800db34 <UART_SetConfig+0x6a4>)
 800d862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d864:	e011      	b.n	800d88a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d866:	f7fd f89d 	bl	800a9a4 <HAL_RCC_GetSysClockFreq>
 800d86a:	0003      	movs	r3, r0
 800d86c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d86e:	e00c      	b.n	800d88a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d870:	2380      	movs	r3, #128	@ 0x80
 800d872:	021b      	lsls	r3, r3, #8
 800d874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d876:	e008      	b.n	800d88a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800d878:	2300      	movs	r3, #0
 800d87a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d87c:	231a      	movs	r3, #26
 800d87e:	2220      	movs	r2, #32
 800d880:	189b      	adds	r3, r3, r2
 800d882:	19db      	adds	r3, r3, r7
 800d884:	2201      	movs	r2, #1
 800d886:	701a      	strb	r2, [r3, #0]
        break;
 800d888:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d100      	bne.n	800d892 <UART_SetConfig+0x402>
 800d890:	e135      	b.n	800dafe <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d896:	4ba8      	ldr	r3, [pc, #672]	@ (800db38 <UART_SetConfig+0x6a8>)
 800d898:	0052      	lsls	r2, r2, #1
 800d89a:	5ad3      	ldrh	r3, [r2, r3]
 800d89c:	0019      	movs	r1, r3
 800d89e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d8a0:	f7f2 fc58 	bl	8000154 <__udivsi3>
 800d8a4:	0003      	movs	r3, r0
 800d8a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	0013      	movs	r3, r2
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	189b      	adds	r3, r3, r2
 800d8b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d305      	bcc.n	800d8c4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d906      	bls.n	800d8d2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800d8c4:	231a      	movs	r3, #26
 800d8c6:	2220      	movs	r2, #32
 800d8c8:	189b      	adds	r3, r3, r2
 800d8ca:	19db      	adds	r3, r3, r7
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	701a      	strb	r2, [r3, #0]
 800d8d0:	e044      	b.n	800d95c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8d4:	61bb      	str	r3, [r7, #24]
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	61fb      	str	r3, [r7, #28]
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8de:	4b96      	ldr	r3, [pc, #600]	@ (800db38 <UART_SetConfig+0x6a8>)
 800d8e0:	0052      	lsls	r2, r2, #1
 800d8e2:	5ad3      	ldrh	r3, [r2, r3]
 800d8e4:	613b      	str	r3, [r7, #16]
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	617b      	str	r3, [r7, #20]
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	69b8      	ldr	r0, [r7, #24]
 800d8f0:	69f9      	ldr	r1, [r7, #28]
 800d8f2:	f7f2 fe1d 	bl	8000530 <__aeabi_uldivmod>
 800d8f6:	0002      	movs	r2, r0
 800d8f8:	000b      	movs	r3, r1
 800d8fa:	0e11      	lsrs	r1, r2, #24
 800d8fc:	021d      	lsls	r5, r3, #8
 800d8fe:	430d      	orrs	r5, r1
 800d900:	0214      	lsls	r4, r2, #8
 800d902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	085b      	lsrs	r3, r3, #1
 800d908:	60bb      	str	r3, [r7, #8]
 800d90a:	2300      	movs	r3, #0
 800d90c:	60fb      	str	r3, [r7, #12]
 800d90e:	68b8      	ldr	r0, [r7, #8]
 800d910:	68f9      	ldr	r1, [r7, #12]
 800d912:	1900      	adds	r0, r0, r4
 800d914:	4169      	adcs	r1, r5
 800d916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	603b      	str	r3, [r7, #0]
 800d91c:	2300      	movs	r3, #0
 800d91e:	607b      	str	r3, [r7, #4]
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f7f2 fe04 	bl	8000530 <__aeabi_uldivmod>
 800d928:	0002      	movs	r2, r0
 800d92a:	000b      	movs	r3, r1
 800d92c:	0013      	movs	r3, r2
 800d92e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d932:	23c0      	movs	r3, #192	@ 0xc0
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	429a      	cmp	r2, r3
 800d938:	d309      	bcc.n	800d94e <UART_SetConfig+0x4be>
 800d93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d93c:	2380      	movs	r3, #128	@ 0x80
 800d93e:	035b      	lsls	r3, r3, #13
 800d940:	429a      	cmp	r2, r3
 800d942:	d204      	bcs.n	800d94e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800d944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d94a:	60da      	str	r2, [r3, #12]
 800d94c:	e006      	b.n	800d95c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800d94e:	231a      	movs	r3, #26
 800d950:	2220      	movs	r2, #32
 800d952:	189b      	adds	r3, r3, r2
 800d954:	19db      	adds	r3, r3, r7
 800d956:	2201      	movs	r2, #1
 800d958:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800d95a:	e0d0      	b.n	800dafe <UART_SetConfig+0x66e>
 800d95c:	e0cf      	b.n	800dafe <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	69da      	ldr	r2, [r3, #28]
 800d962:	2380      	movs	r3, #128	@ 0x80
 800d964:	021b      	lsls	r3, r3, #8
 800d966:	429a      	cmp	r2, r3
 800d968:	d000      	beq.n	800d96c <UART_SetConfig+0x4dc>
 800d96a:	e070      	b.n	800da4e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800d96c:	231b      	movs	r3, #27
 800d96e:	2220      	movs	r2, #32
 800d970:	189b      	adds	r3, r3, r2
 800d972:	19db      	adds	r3, r3, r7
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b08      	cmp	r3, #8
 800d978:	d015      	beq.n	800d9a6 <UART_SetConfig+0x516>
 800d97a:	dc18      	bgt.n	800d9ae <UART_SetConfig+0x51e>
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	d00d      	beq.n	800d99c <UART_SetConfig+0x50c>
 800d980:	dc15      	bgt.n	800d9ae <UART_SetConfig+0x51e>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d002      	beq.n	800d98c <UART_SetConfig+0x4fc>
 800d986:	2b02      	cmp	r3, #2
 800d988:	d005      	beq.n	800d996 <UART_SetConfig+0x506>
 800d98a:	e010      	b.n	800d9ae <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d98c:	f7fd f896 	bl	800aabc <HAL_RCC_GetPCLK1Freq>
 800d990:	0003      	movs	r3, r0
 800d992:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d994:	e014      	b.n	800d9c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d996:	4b67      	ldr	r3, [pc, #412]	@ (800db34 <UART_SetConfig+0x6a4>)
 800d998:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d99a:	e011      	b.n	800d9c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d99c:	f7fd f802 	bl	800a9a4 <HAL_RCC_GetSysClockFreq>
 800d9a0:	0003      	movs	r3, r0
 800d9a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9a4:	e00c      	b.n	800d9c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9a6:	2380      	movs	r3, #128	@ 0x80
 800d9a8:	021b      	lsls	r3, r3, #8
 800d9aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9ac:	e008      	b.n	800d9c0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d9b2:	231a      	movs	r3, #26
 800d9b4:	2220      	movs	r2, #32
 800d9b6:	189b      	adds	r3, r3, r2
 800d9b8:	19db      	adds	r3, r3, r7
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	701a      	strb	r2, [r3, #0]
        break;
 800d9be:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d100      	bne.n	800d9c8 <UART_SetConfig+0x538>
 800d9c6:	e09a      	b.n	800dafe <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9cc:	4b5a      	ldr	r3, [pc, #360]	@ (800db38 <UART_SetConfig+0x6a8>)
 800d9ce:	0052      	lsls	r2, r2, #1
 800d9d0:	5ad3      	ldrh	r3, [r2, r3]
 800d9d2:	0019      	movs	r1, r3
 800d9d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d9d6:	f7f2 fbbd 	bl	8000154 <__udivsi3>
 800d9da:	0003      	movs	r3, r0
 800d9dc:	005a      	lsls	r2, r3, #1
 800d9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	085b      	lsrs	r3, r3, #1
 800d9e4:	18d2      	adds	r2, r2, r3
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	0019      	movs	r1, r3
 800d9ec:	0010      	movs	r0, r2
 800d9ee:	f7f2 fbb1 	bl	8000154 <__udivsi3>
 800d9f2:	0003      	movs	r3, r0
 800d9f4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	2b0f      	cmp	r3, #15
 800d9fa:	d921      	bls.n	800da40 <UART_SetConfig+0x5b0>
 800d9fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9fe:	2380      	movs	r3, #128	@ 0x80
 800da00:	025b      	lsls	r3, r3, #9
 800da02:	429a      	cmp	r2, r3
 800da04:	d21c      	bcs.n	800da40 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da08:	b29a      	uxth	r2, r3
 800da0a:	200e      	movs	r0, #14
 800da0c:	2420      	movs	r4, #32
 800da0e:	1903      	adds	r3, r0, r4
 800da10:	19db      	adds	r3, r3, r7
 800da12:	210f      	movs	r1, #15
 800da14:	438a      	bics	r2, r1
 800da16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1a:	085b      	lsrs	r3, r3, #1
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	2207      	movs	r2, #7
 800da20:	4013      	ands	r3, r2
 800da22:	b299      	uxth	r1, r3
 800da24:	1903      	adds	r3, r0, r4
 800da26:	19db      	adds	r3, r3, r7
 800da28:	1902      	adds	r2, r0, r4
 800da2a:	19d2      	adds	r2, r2, r7
 800da2c:	8812      	ldrh	r2, [r2, #0]
 800da2e:	430a      	orrs	r2, r1
 800da30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800da32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	1902      	adds	r2, r0, r4
 800da38:	19d2      	adds	r2, r2, r7
 800da3a:	8812      	ldrh	r2, [r2, #0]
 800da3c:	60da      	str	r2, [r3, #12]
 800da3e:	e05e      	b.n	800dafe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800da40:	231a      	movs	r3, #26
 800da42:	2220      	movs	r2, #32
 800da44:	189b      	adds	r3, r3, r2
 800da46:	19db      	adds	r3, r3, r7
 800da48:	2201      	movs	r2, #1
 800da4a:	701a      	strb	r2, [r3, #0]
 800da4c:	e057      	b.n	800dafe <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da4e:	231b      	movs	r3, #27
 800da50:	2220      	movs	r2, #32
 800da52:	189b      	adds	r3, r3, r2
 800da54:	19db      	adds	r3, r3, r7
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b08      	cmp	r3, #8
 800da5a:	d015      	beq.n	800da88 <UART_SetConfig+0x5f8>
 800da5c:	dc18      	bgt.n	800da90 <UART_SetConfig+0x600>
 800da5e:	2b04      	cmp	r3, #4
 800da60:	d00d      	beq.n	800da7e <UART_SetConfig+0x5ee>
 800da62:	dc15      	bgt.n	800da90 <UART_SetConfig+0x600>
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <UART_SetConfig+0x5de>
 800da68:	2b02      	cmp	r3, #2
 800da6a:	d005      	beq.n	800da78 <UART_SetConfig+0x5e8>
 800da6c:	e010      	b.n	800da90 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da6e:	f7fd f825 	bl	800aabc <HAL_RCC_GetPCLK1Freq>
 800da72:	0003      	movs	r3, r0
 800da74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da76:	e014      	b.n	800daa2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da78:	4b2e      	ldr	r3, [pc, #184]	@ (800db34 <UART_SetConfig+0x6a4>)
 800da7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da7c:	e011      	b.n	800daa2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da7e:	f7fc ff91 	bl	800a9a4 <HAL_RCC_GetSysClockFreq>
 800da82:	0003      	movs	r3, r0
 800da84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da86:	e00c      	b.n	800daa2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da88:	2380      	movs	r3, #128	@ 0x80
 800da8a:	021b      	lsls	r3, r3, #8
 800da8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da8e:	e008      	b.n	800daa2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800da90:	2300      	movs	r3, #0
 800da92:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800da94:	231a      	movs	r3, #26
 800da96:	2220      	movs	r2, #32
 800da98:	189b      	adds	r3, r3, r2
 800da9a:	19db      	adds	r3, r3, r7
 800da9c:	2201      	movs	r2, #1
 800da9e:	701a      	strb	r2, [r3, #0]
        break;
 800daa0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800daa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d02a      	beq.n	800dafe <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800daac:	4b22      	ldr	r3, [pc, #136]	@ (800db38 <UART_SetConfig+0x6a8>)
 800daae:	0052      	lsls	r2, r2, #1
 800dab0:	5ad3      	ldrh	r3, [r2, r3]
 800dab2:	0019      	movs	r1, r3
 800dab4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800dab6:	f7f2 fb4d 	bl	8000154 <__udivsi3>
 800daba:	0003      	movs	r3, r0
 800dabc:	001a      	movs	r2, r3
 800dabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	085b      	lsrs	r3, r3, #1
 800dac4:	18d2      	adds	r2, r2, r3
 800dac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	0019      	movs	r1, r3
 800dacc:	0010      	movs	r0, r2
 800dace:	f7f2 fb41 	bl	8000154 <__udivsi3>
 800dad2:	0003      	movs	r3, r0
 800dad4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad8:	2b0f      	cmp	r3, #15
 800dada:	d90a      	bls.n	800daf2 <UART_SetConfig+0x662>
 800dadc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dade:	2380      	movs	r3, #128	@ 0x80
 800dae0:	025b      	lsls	r3, r3, #9
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d205      	bcs.n	800daf2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae8:	b29a      	uxth	r2, r3
 800daea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	60da      	str	r2, [r3, #12]
 800daf0:	e005      	b.n	800dafe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800daf2:	231a      	movs	r3, #26
 800daf4:	2220      	movs	r2, #32
 800daf6:	189b      	adds	r3, r3, r2
 800daf8:	19db      	adds	r3, r3, r7
 800dafa:	2201      	movs	r2, #1
 800dafc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db00:	226a      	movs	r2, #106	@ 0x6a
 800db02:	2101      	movs	r1, #1
 800db04:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800db06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db08:	2268      	movs	r2, #104	@ 0x68
 800db0a:	2101      	movs	r1, #1
 800db0c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db10:	2200      	movs	r2, #0
 800db12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800db14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db16:	2200      	movs	r2, #0
 800db18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800db1a:	231a      	movs	r3, #26
 800db1c:	2220      	movs	r2, #32
 800db1e:	189b      	adds	r3, r3, r2
 800db20:	19db      	adds	r3, r3, r7
 800db22:	781b      	ldrb	r3, [r3, #0]
}
 800db24:	0018      	movs	r0, r3
 800db26:	46bd      	mov	sp, r7
 800db28:	b010      	add	sp, #64	@ 0x40
 800db2a:	bdb0      	pop	{r4, r5, r7, pc}
 800db2c:	40008000 	.word	0x40008000
 800db30:	40008400 	.word	0x40008400
 800db34:	00f42400 	.word	0x00f42400
 800db38:	08012530 	.word	0x08012530

0800db3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db48:	2208      	movs	r2, #8
 800db4a:	4013      	ands	r3, r2
 800db4c:	d00b      	beq.n	800db66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	4a4a      	ldr	r2, [pc, #296]	@ (800dc80 <UART_AdvFeatureConfig+0x144>)
 800db56:	4013      	ands	r3, r2
 800db58:	0019      	movs	r1, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	430a      	orrs	r2, r1
 800db64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db6a:	2201      	movs	r2, #1
 800db6c:	4013      	ands	r3, r2
 800db6e:	d00b      	beq.n	800db88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	4a43      	ldr	r2, [pc, #268]	@ (800dc84 <UART_AdvFeatureConfig+0x148>)
 800db78:	4013      	ands	r3, r2
 800db7a:	0019      	movs	r1, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	430a      	orrs	r2, r1
 800db86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db8c:	2202      	movs	r2, #2
 800db8e:	4013      	ands	r3, r2
 800db90:	d00b      	beq.n	800dbaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	4a3b      	ldr	r2, [pc, #236]	@ (800dc88 <UART_AdvFeatureConfig+0x14c>)
 800db9a:	4013      	ands	r3, r2
 800db9c:	0019      	movs	r1, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	430a      	orrs	r2, r1
 800dba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbae:	2204      	movs	r2, #4
 800dbb0:	4013      	ands	r3, r2
 800dbb2:	d00b      	beq.n	800dbcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	4a34      	ldr	r2, [pc, #208]	@ (800dc8c <UART_AdvFeatureConfig+0x150>)
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	0019      	movs	r1, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	430a      	orrs	r2, r1
 800dbca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd0:	2210      	movs	r2, #16
 800dbd2:	4013      	ands	r3, r2
 800dbd4:	d00b      	beq.n	800dbee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	4a2c      	ldr	r2, [pc, #176]	@ (800dc90 <UART_AdvFeatureConfig+0x154>)
 800dbde:	4013      	ands	r3, r2
 800dbe0:	0019      	movs	r1, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	430a      	orrs	r2, r1
 800dbec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbf2:	2220      	movs	r2, #32
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	d00b      	beq.n	800dc10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	4a25      	ldr	r2, [pc, #148]	@ (800dc94 <UART_AdvFeatureConfig+0x158>)
 800dc00:	4013      	ands	r3, r2
 800dc02:	0019      	movs	r1, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	430a      	orrs	r2, r1
 800dc0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc14:	2240      	movs	r2, #64	@ 0x40
 800dc16:	4013      	ands	r3, r2
 800dc18:	d01d      	beq.n	800dc56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	4a1d      	ldr	r2, [pc, #116]	@ (800dc98 <UART_AdvFeatureConfig+0x15c>)
 800dc22:	4013      	ands	r3, r2
 800dc24:	0019      	movs	r1, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc36:	2380      	movs	r3, #128	@ 0x80
 800dc38:	035b      	lsls	r3, r3, #13
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d10b      	bne.n	800dc56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	4a15      	ldr	r2, [pc, #84]	@ (800dc9c <UART_AdvFeatureConfig+0x160>)
 800dc46:	4013      	ands	r3, r2
 800dc48:	0019      	movs	r1, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc5a:	2280      	movs	r2, #128	@ 0x80
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	d00b      	beq.n	800dc78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	4a0e      	ldr	r2, [pc, #56]	@ (800dca0 <UART_AdvFeatureConfig+0x164>)
 800dc68:	4013      	ands	r3, r2
 800dc6a:	0019      	movs	r1, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	605a      	str	r2, [r3, #4]
  }
}
 800dc78:	46c0      	nop			@ (mov r8, r8)
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	b002      	add	sp, #8
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	ffff7fff 	.word	0xffff7fff
 800dc84:	fffdffff 	.word	0xfffdffff
 800dc88:	fffeffff 	.word	0xfffeffff
 800dc8c:	fffbffff 	.word	0xfffbffff
 800dc90:	ffffefff 	.word	0xffffefff
 800dc94:	ffffdfff 	.word	0xffffdfff
 800dc98:	ffefffff 	.word	0xffefffff
 800dc9c:	ff9fffff 	.word	0xff9fffff
 800dca0:	fff7ffff 	.word	0xfff7ffff

0800dca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b092      	sub	sp, #72	@ 0x48
 800dca8:	af02      	add	r7, sp, #8
 800dcaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2290      	movs	r2, #144	@ 0x90
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dcb4:	f7fa fed0 	bl	8008a58 <HAL_GetTick>
 800dcb8:	0003      	movs	r3, r0
 800dcba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2208      	movs	r2, #8
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	2b08      	cmp	r3, #8
 800dcc8:	d12d      	bne.n	800dd26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dccc:	2280      	movs	r2, #128	@ 0x80
 800dcce:	0391      	lsls	r1, r2, #14
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	4a47      	ldr	r2, [pc, #284]	@ (800ddf0 <UART_CheckIdleState+0x14c>)
 800dcd4:	9200      	str	r2, [sp, #0]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	f000 f88e 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800dcdc:	1e03      	subs	r3, r0, #0
 800dcde:	d022      	beq.n	800dd26 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dce0:	f3ef 8310 	mrs	r3, PRIMASK
 800dce4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800dce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dce8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dcea:	2301      	movs	r3, #1
 800dcec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf0:	f383 8810 	msr	PRIMASK, r3
}
 800dcf4:	46c0      	nop			@ (mov r8, r8)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2180      	movs	r1, #128	@ 0x80
 800dd02:	438a      	bics	r2, r1
 800dd04:	601a      	str	r2, [r3, #0]
 800dd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0c:	f383 8810 	msr	PRIMASK, r3
}
 800dd10:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2288      	movs	r2, #136	@ 0x88
 800dd16:	2120      	movs	r1, #32
 800dd18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2284      	movs	r2, #132	@ 0x84
 800dd1e:	2100      	movs	r1, #0
 800dd20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd22:	2303      	movs	r3, #3
 800dd24:	e060      	b.n	800dde8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2204      	movs	r2, #4
 800dd2e:	4013      	ands	r3, r2
 800dd30:	2b04      	cmp	r3, #4
 800dd32:	d146      	bne.n	800ddc2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd36:	2280      	movs	r2, #128	@ 0x80
 800dd38:	03d1      	lsls	r1, r2, #15
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	4a2c      	ldr	r2, [pc, #176]	@ (800ddf0 <UART_CheckIdleState+0x14c>)
 800dd3e:	9200      	str	r2, [sp, #0]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f000 f859 	bl	800ddf8 <UART_WaitOnFlagUntilTimeout>
 800dd46:	1e03      	subs	r3, r0, #0
 800dd48:	d03b      	beq.n	800ddc2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd4a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd4e:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd50:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd52:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd54:	2301      	movs	r3, #1
 800dd56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	f383 8810 	msr	PRIMASK, r3
}
 800dd5e:	46c0      	nop			@ (mov r8, r8)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4922      	ldr	r1, [pc, #136]	@ (800ddf4 <UART_CheckIdleState+0x150>)
 800dd6c:	400a      	ands	r2, r1
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f383 8810 	msr	PRIMASK, r3
}
 800dd7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd7c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd80:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd82:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd84:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd86:	2301      	movs	r3, #1
 800dd88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	f383 8810 	msr	PRIMASK, r3
}
 800dd90:	46c0      	nop			@ (mov r8, r8)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	689a      	ldr	r2, [r3, #8]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	438a      	bics	r2, r1
 800dda0:	609a      	str	r2, [r3, #8]
 800dda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dda6:	6a3b      	ldr	r3, [r7, #32]
 800dda8:	f383 8810 	msr	PRIMASK, r3
}
 800ddac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	228c      	movs	r2, #140	@ 0x8c
 800ddb2:	2120      	movs	r1, #32
 800ddb4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2284      	movs	r2, #132	@ 0x84
 800ddba:	2100      	movs	r1, #0
 800ddbc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	e012      	b.n	800dde8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2288      	movs	r2, #136	@ 0x88
 800ddc6:	2120      	movs	r1, #32
 800ddc8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	228c      	movs	r2, #140	@ 0x8c
 800ddce:	2120      	movs	r1, #32
 800ddd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2284      	movs	r2, #132	@ 0x84
 800dde2:	2100      	movs	r1, #0
 800dde4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	0018      	movs	r0, r3
 800ddea:	46bd      	mov	sp, r7
 800ddec:	b010      	add	sp, #64	@ 0x40
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	01ffffff 	.word	0x01ffffff
 800ddf4:	fffffedf 	.word	0xfffffedf

0800ddf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	603b      	str	r3, [r7, #0]
 800de04:	1dfb      	adds	r3, r7, #7
 800de06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de08:	e051      	b.n	800deae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	3301      	adds	r3, #1
 800de0e:	d04e      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de10:	f7fa fe22 	bl	8008a58 <HAL_GetTick>
 800de14:	0002      	movs	r2, r0
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	69ba      	ldr	r2, [r7, #24]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d302      	bcc.n	800de26 <UART_WaitOnFlagUntilTimeout+0x2e>
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d101      	bne.n	800de2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e051      	b.n	800dece <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2204      	movs	r2, #4
 800de32:	4013      	ands	r3, r2
 800de34:	d03b      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb6>
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	2b80      	cmp	r3, #128	@ 0x80
 800de3a:	d038      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb6>
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	2b40      	cmp	r3, #64	@ 0x40
 800de40:	d035      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	69db      	ldr	r3, [r3, #28]
 800de48:	2208      	movs	r2, #8
 800de4a:	4013      	ands	r3, r2
 800de4c:	2b08      	cmp	r3, #8
 800de4e:	d111      	bne.n	800de74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2208      	movs	r2, #8
 800de56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	0018      	movs	r0, r3
 800de5c:	f000 f83c 	bl	800ded8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2290      	movs	r2, #144	@ 0x90
 800de64:	2108      	movs	r1, #8
 800de66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2284      	movs	r2, #132	@ 0x84
 800de6c:	2100      	movs	r1, #0
 800de6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	e02c      	b.n	800dece <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	69da      	ldr	r2, [r3, #28]
 800de7a:	2380      	movs	r3, #128	@ 0x80
 800de7c:	011b      	lsls	r3, r3, #4
 800de7e:	401a      	ands	r2, r3
 800de80:	2380      	movs	r3, #128	@ 0x80
 800de82:	011b      	lsls	r3, r3, #4
 800de84:	429a      	cmp	r2, r3
 800de86:	d112      	bne.n	800deae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2280      	movs	r2, #128	@ 0x80
 800de8e:	0112      	lsls	r2, r2, #4
 800de90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	0018      	movs	r0, r3
 800de96:	f000 f81f 	bl	800ded8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2290      	movs	r2, #144	@ 0x90
 800de9e:	2120      	movs	r1, #32
 800dea0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2284      	movs	r2, #132	@ 0x84
 800dea6:	2100      	movs	r1, #0
 800dea8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800deaa:	2303      	movs	r3, #3
 800deac:	e00f      	b.n	800dece <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	69db      	ldr	r3, [r3, #28]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	4013      	ands	r3, r2
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	425a      	negs	r2, r3
 800debe:	4153      	adcs	r3, r2
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	001a      	movs	r2, r3
 800dec4:	1dfb      	adds	r3, r7, #7
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d09e      	beq.n	800de0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	0018      	movs	r0, r3
 800ded0:	46bd      	mov	sp, r7
 800ded2:	b004      	add	sp, #16
 800ded4:	bd80      	pop	{r7, pc}
	...

0800ded8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08e      	sub	sp, #56	@ 0x38
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dee0:	f3ef 8310 	mrs	r3, PRIMASK
 800dee4:	617b      	str	r3, [r7, #20]
  return(result);
 800dee6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dee8:	637b      	str	r3, [r7, #52]	@ 0x34
 800deea:	2301      	movs	r3, #1
 800deec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	f383 8810 	msr	PRIMASK, r3
}
 800def4:	46c0      	nop			@ (mov r8, r8)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4926      	ldr	r1, [pc, #152]	@ (800df9c <UART_EndRxTransfer+0xc4>)
 800df02:	400a      	ands	r2, r1
 800df04:	601a      	str	r2, [r3, #0]
 800df06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	f383 8810 	msr	PRIMASK, r3
}
 800df10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df12:	f3ef 8310 	mrs	r3, PRIMASK
 800df16:	623b      	str	r3, [r7, #32]
  return(result);
 800df18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800df1c:	2301      	movs	r3, #1
 800df1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df22:	f383 8810 	msr	PRIMASK, r3
}
 800df26:	46c0      	nop			@ (mov r8, r8)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	689a      	ldr	r2, [r3, #8]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	491b      	ldr	r1, [pc, #108]	@ (800dfa0 <UART_EndRxTransfer+0xc8>)
 800df34:	400a      	ands	r2, r1
 800df36:	609a      	str	r2, [r3, #8]
 800df38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df3e:	f383 8810 	msr	PRIMASK, r3
}
 800df42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d118      	bne.n	800df7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df4c:	f3ef 8310 	mrs	r3, PRIMASK
 800df50:	60bb      	str	r3, [r7, #8]
  return(result);
 800df52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df56:	2301      	movs	r3, #1
 800df58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f383 8810 	msr	PRIMASK, r3
}
 800df60:	46c0      	nop			@ (mov r8, r8)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2110      	movs	r1, #16
 800df6e:	438a      	bics	r2, r1
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	f383 8810 	msr	PRIMASK, r3
}
 800df7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	228c      	movs	r2, #140	@ 0x8c
 800df82:	2120      	movs	r1, #32
 800df84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800df92:	46c0      	nop			@ (mov r8, r8)
 800df94:	46bd      	mov	sp, r7
 800df96:	b00e      	add	sp, #56	@ 0x38
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	46c0      	nop			@ (mov r8, r8)
 800df9c:	fffffedf 	.word	0xfffffedf
 800dfa0:	effffffe 	.word	0xeffffffe

0800dfa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2284      	movs	r2, #132	@ 0x84
 800dfb0:	5c9b      	ldrb	r3, [r3, r2]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d101      	bne.n	800dfba <HAL_UARTEx_DisableFifoMode+0x16>
 800dfb6:	2302      	movs	r3, #2
 800dfb8:	e027      	b.n	800e00a <HAL_UARTEx_DisableFifoMode+0x66>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2284      	movs	r2, #132	@ 0x84
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2288      	movs	r2, #136	@ 0x88
 800dfc6:	2124      	movs	r1, #36	@ 0x24
 800dfc8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2101      	movs	r1, #1
 800dfde:	438a      	bics	r2, r1
 800dfe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	4a0b      	ldr	r2, [pc, #44]	@ (800e014 <HAL_UARTEx_DisableFifoMode+0x70>)
 800dfe6:	4013      	ands	r3, r2
 800dfe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2288      	movs	r2, #136	@ 0x88
 800dffc:	2120      	movs	r1, #32
 800dffe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2284      	movs	r2, #132	@ 0x84
 800e004:	2100      	movs	r1, #0
 800e006:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	0018      	movs	r0, r3
 800e00c:	46bd      	mov	sp, r7
 800e00e:	b004      	add	sp, #16
 800e010:	bd80      	pop	{r7, pc}
 800e012:	46c0      	nop			@ (mov r8, r8)
 800e014:	dfffffff 	.word	0xdfffffff

0800e018 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2284      	movs	r2, #132	@ 0x84
 800e026:	5c9b      	ldrb	r3, [r3, r2]
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d101      	bne.n	800e030 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e02c:	2302      	movs	r3, #2
 800e02e:	e02e      	b.n	800e08e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2284      	movs	r2, #132	@ 0x84
 800e034:	2101      	movs	r1, #1
 800e036:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2288      	movs	r2, #136	@ 0x88
 800e03c:	2124      	movs	r1, #36	@ 0x24
 800e03e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2101      	movs	r1, #1
 800e054:	438a      	bics	r2, r1
 800e056:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	00db      	lsls	r3, r3, #3
 800e060:	08d9      	lsrs	r1, r3, #3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	430a      	orrs	r2, r1
 800e06a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	0018      	movs	r0, r3
 800e070:	f000 f854 	bl	800e11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2288      	movs	r2, #136	@ 0x88
 800e080:	2120      	movs	r1, #32
 800e082:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2284      	movs	r2, #132	@ 0x84
 800e088:	2100      	movs	r1, #0
 800e08a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e08c:	2300      	movs	r3, #0
}
 800e08e:	0018      	movs	r0, r3
 800e090:	46bd      	mov	sp, r7
 800e092:	b004      	add	sp, #16
 800e094:	bd80      	pop	{r7, pc}
	...

0800e098 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2284      	movs	r2, #132	@ 0x84
 800e0a6:	5c9b      	ldrb	r3, [r3, r2]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d101      	bne.n	800e0b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e0ac:	2302      	movs	r3, #2
 800e0ae:	e02f      	b.n	800e110 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2284      	movs	r2, #132	@ 0x84
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2288      	movs	r2, #136	@ 0x88
 800e0bc:	2124      	movs	r1, #36	@ 0x24
 800e0be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2101      	movs	r1, #1
 800e0d4:	438a      	bics	r2, r1
 800e0d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	4a0e      	ldr	r2, [pc, #56]	@ (800e118 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	0019      	movs	r1, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	683a      	ldr	r2, [r7, #0]
 800e0ea:	430a      	orrs	r2, r1
 800e0ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	0018      	movs	r0, r3
 800e0f2:	f000 f813 	bl	800e11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2288      	movs	r2, #136	@ 0x88
 800e102:	2120      	movs	r1, #32
 800e104:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2284      	movs	r2, #132	@ 0x84
 800e10a:	2100      	movs	r1, #0
 800e10c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	0018      	movs	r0, r3
 800e112:	46bd      	mov	sp, r7
 800e114:	b004      	add	sp, #16
 800e116:	bd80      	pop	{r7, pc}
 800e118:	f1ffffff 	.word	0xf1ffffff

0800e11c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d108      	bne.n	800e13e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	226a      	movs	r2, #106	@ 0x6a
 800e130:	2101      	movs	r1, #1
 800e132:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2268      	movs	r2, #104	@ 0x68
 800e138:	2101      	movs	r1, #1
 800e13a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e13c:	e043      	b.n	800e1c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e13e:	260f      	movs	r6, #15
 800e140:	19bb      	adds	r3, r7, r6
 800e142:	2208      	movs	r2, #8
 800e144:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e146:	200e      	movs	r0, #14
 800e148:	183b      	adds	r3, r7, r0
 800e14a:	2208      	movs	r2, #8
 800e14c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	0e5b      	lsrs	r3, r3, #25
 800e156:	b2da      	uxtb	r2, r3
 800e158:	240d      	movs	r4, #13
 800e15a:	193b      	adds	r3, r7, r4
 800e15c:	2107      	movs	r1, #7
 800e15e:	400a      	ands	r2, r1
 800e160:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	0f5b      	lsrs	r3, r3, #29
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	250c      	movs	r5, #12
 800e16e:	197b      	adds	r3, r7, r5
 800e170:	2107      	movs	r1, #7
 800e172:	400a      	ands	r2, r1
 800e174:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e176:	183b      	adds	r3, r7, r0
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	197a      	adds	r2, r7, r5
 800e17c:	7812      	ldrb	r2, [r2, #0]
 800e17e:	4914      	ldr	r1, [pc, #80]	@ (800e1d0 <UARTEx_SetNbDataToProcess+0xb4>)
 800e180:	5c8a      	ldrb	r2, [r1, r2]
 800e182:	435a      	muls	r2, r3
 800e184:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800e186:	197b      	adds	r3, r7, r5
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	4a12      	ldr	r2, [pc, #72]	@ (800e1d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800e18c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e18e:	0019      	movs	r1, r3
 800e190:	f7f2 f86a 	bl	8000268 <__divsi3>
 800e194:	0003      	movs	r3, r0
 800e196:	b299      	uxth	r1, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	226a      	movs	r2, #106	@ 0x6a
 800e19c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e19e:	19bb      	adds	r3, r7, r6
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	193a      	adds	r2, r7, r4
 800e1a4:	7812      	ldrb	r2, [r2, #0]
 800e1a6:	490a      	ldr	r1, [pc, #40]	@ (800e1d0 <UARTEx_SetNbDataToProcess+0xb4>)
 800e1a8:	5c8a      	ldrb	r2, [r1, r2]
 800e1aa:	435a      	muls	r2, r3
 800e1ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1ae:	193b      	adds	r3, r7, r4
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	4a08      	ldr	r2, [pc, #32]	@ (800e1d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800e1b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1b6:	0019      	movs	r1, r3
 800e1b8:	f7f2 f856 	bl	8000268 <__divsi3>
 800e1bc:	0003      	movs	r3, r0
 800e1be:	b299      	uxth	r1, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2268      	movs	r2, #104	@ 0x68
 800e1c4:	5299      	strh	r1, [r3, r2]
}
 800e1c6:	46c0      	nop			@ (mov r8, r8)
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	b005      	add	sp, #20
 800e1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ce:	46c0      	nop			@ (mov r8, r8)
 800e1d0:	08012548 	.word	0x08012548
 800e1d4:	08012550 	.word	0x08012550

0800e1d8 <sulp>:
 800e1d8:	b570      	push	{r4, r5, r6, lr}
 800e1da:	0016      	movs	r6, r2
 800e1dc:	000d      	movs	r5, r1
 800e1de:	f002 f925 	bl	801042c <__ulp>
 800e1e2:	2e00      	cmp	r6, #0
 800e1e4:	d00d      	beq.n	800e202 <sulp+0x2a>
 800e1e6:	236b      	movs	r3, #107	@ 0x6b
 800e1e8:	006a      	lsls	r2, r5, #1
 800e1ea:	0d52      	lsrs	r2, r2, #21
 800e1ec:	1a9b      	subs	r3, r3, r2
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dd07      	ble.n	800e202 <sulp+0x2a>
 800e1f2:	2400      	movs	r4, #0
 800e1f4:	4a03      	ldr	r2, [pc, #12]	@ (800e204 <sulp+0x2c>)
 800e1f6:	051b      	lsls	r3, r3, #20
 800e1f8:	189d      	adds	r5, r3, r2
 800e1fa:	002b      	movs	r3, r5
 800e1fc:	0022      	movs	r2, r4
 800e1fe:	f7f4 f9ff 	bl	8002600 <__aeabi_dmul>
 800e202:	bd70      	pop	{r4, r5, r6, pc}
 800e204:	3ff00000 	.word	0x3ff00000

0800e208 <_strtod_l>:
 800e208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20a:	b0a3      	sub	sp, #140	@ 0x8c
 800e20c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800e20e:	2200      	movs	r2, #0
 800e210:	2600      	movs	r6, #0
 800e212:	2700      	movs	r7, #0
 800e214:	9005      	str	r0, [sp, #20]
 800e216:	9109      	str	r1, [sp, #36]	@ 0x24
 800e218:	921e      	str	r2, [sp, #120]	@ 0x78
 800e21a:	911d      	str	r1, [sp, #116]	@ 0x74
 800e21c:	780a      	ldrb	r2, [r1, #0]
 800e21e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e220:	d053      	beq.n	800e2ca <_strtod_l+0xc2>
 800e222:	d83f      	bhi.n	800e2a4 <_strtod_l+0x9c>
 800e224:	2a0d      	cmp	r2, #13
 800e226:	d839      	bhi.n	800e29c <_strtod_l+0x94>
 800e228:	2a08      	cmp	r2, #8
 800e22a:	d839      	bhi.n	800e2a0 <_strtod_l+0x98>
 800e22c:	2a00      	cmp	r2, #0
 800e22e:	d042      	beq.n	800e2b6 <_strtod_l+0xae>
 800e230:	2200      	movs	r2, #0
 800e232:	9212      	str	r2, [sp, #72]	@ 0x48
 800e234:	2100      	movs	r1, #0
 800e236:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800e238:	910c      	str	r1, [sp, #48]	@ 0x30
 800e23a:	782a      	ldrb	r2, [r5, #0]
 800e23c:	2a30      	cmp	r2, #48	@ 0x30
 800e23e:	d000      	beq.n	800e242 <_strtod_l+0x3a>
 800e240:	e083      	b.n	800e34a <_strtod_l+0x142>
 800e242:	786a      	ldrb	r2, [r5, #1]
 800e244:	3120      	adds	r1, #32
 800e246:	438a      	bics	r2, r1
 800e248:	2a58      	cmp	r2, #88	@ 0x58
 800e24a:	d000      	beq.n	800e24e <_strtod_l+0x46>
 800e24c:	e073      	b.n	800e336 <_strtod_l+0x12e>
 800e24e:	9302      	str	r3, [sp, #8]
 800e250:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e252:	4a95      	ldr	r2, [pc, #596]	@ (800e4a8 <_strtod_l+0x2a0>)
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	ab1e      	add	r3, sp, #120	@ 0x78
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	9805      	ldr	r0, [sp, #20]
 800e25c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e25e:	a91d      	add	r1, sp, #116	@ 0x74
 800e260:	f001 f99e 	bl	800f5a0 <__gethex>
 800e264:	230f      	movs	r3, #15
 800e266:	0002      	movs	r2, r0
 800e268:	401a      	ands	r2, r3
 800e26a:	0004      	movs	r4, r0
 800e26c:	9206      	str	r2, [sp, #24]
 800e26e:	4218      	tst	r0, r3
 800e270:	d005      	beq.n	800e27e <_strtod_l+0x76>
 800e272:	2a06      	cmp	r2, #6
 800e274:	d12b      	bne.n	800e2ce <_strtod_l+0xc6>
 800e276:	2300      	movs	r3, #0
 800e278:	3501      	adds	r5, #1
 800e27a:	951d      	str	r5, [sp, #116]	@ 0x74
 800e27c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e27e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <_strtod_l+0x82>
 800e284:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e286:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e288:	6013      	str	r3, [r2, #0]
 800e28a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d019      	beq.n	800e2c4 <_strtod_l+0xbc>
 800e290:	2380      	movs	r3, #128	@ 0x80
 800e292:	0030      	movs	r0, r6
 800e294:	061b      	lsls	r3, r3, #24
 800e296:	18f9      	adds	r1, r7, r3
 800e298:	b023      	add	sp, #140	@ 0x8c
 800e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e29c:	2a20      	cmp	r2, #32
 800e29e:	d1c7      	bne.n	800e230 <_strtod_l+0x28>
 800e2a0:	3101      	adds	r1, #1
 800e2a2:	e7ba      	b.n	800e21a <_strtod_l+0x12>
 800e2a4:	2a2d      	cmp	r2, #45	@ 0x2d
 800e2a6:	d1c3      	bne.n	800e230 <_strtod_l+0x28>
 800e2a8:	3a2c      	subs	r2, #44	@ 0x2c
 800e2aa:	9212      	str	r2, [sp, #72]	@ 0x48
 800e2ac:	1c4a      	adds	r2, r1, #1
 800e2ae:	921d      	str	r2, [sp, #116]	@ 0x74
 800e2b0:	784a      	ldrb	r2, [r1, #1]
 800e2b2:	2a00      	cmp	r2, #0
 800e2b4:	d1be      	bne.n	800e234 <_strtod_l+0x2c>
 800e2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2b8:	931d      	str	r3, [sp, #116]	@ 0x74
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	9312      	str	r3, [sp, #72]	@ 0x48
 800e2be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1df      	bne.n	800e284 <_strtod_l+0x7c>
 800e2c4:	0030      	movs	r0, r6
 800e2c6:	0039      	movs	r1, r7
 800e2c8:	e7e6      	b.n	800e298 <_strtod_l+0x90>
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	e7ed      	b.n	800e2aa <_strtod_l+0xa2>
 800e2ce:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e2d0:	2a00      	cmp	r2, #0
 800e2d2:	d007      	beq.n	800e2e4 <_strtod_l+0xdc>
 800e2d4:	2135      	movs	r1, #53	@ 0x35
 800e2d6:	a820      	add	r0, sp, #128	@ 0x80
 800e2d8:	f002 f99e 	bl	8010618 <__copybits>
 800e2dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e2de:	9805      	ldr	r0, [sp, #20]
 800e2e0:	f001 fd58 	bl	800fd94 <_Bfree>
 800e2e4:	9806      	ldr	r0, [sp, #24]
 800e2e6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e2e8:	3801      	subs	r0, #1
 800e2ea:	2804      	cmp	r0, #4
 800e2ec:	d806      	bhi.n	800e2fc <_strtod_l+0xf4>
 800e2ee:	f7f1 ff1d 	bl	800012c <__gnu_thumb1_case_uqi>
 800e2f2:	0312      	.short	0x0312
 800e2f4:	1e1c      	.short	0x1e1c
 800e2f6:	12          	.byte	0x12
 800e2f7:	00          	.byte	0x00
 800e2f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e2fa:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800e2fc:	05e4      	lsls	r4, r4, #23
 800e2fe:	d502      	bpl.n	800e306 <_strtod_l+0xfe>
 800e300:	2380      	movs	r3, #128	@ 0x80
 800e302:	061b      	lsls	r3, r3, #24
 800e304:	431f      	orrs	r7, r3
 800e306:	4b69      	ldr	r3, [pc, #420]	@ (800e4ac <_strtod_l+0x2a4>)
 800e308:	423b      	tst	r3, r7
 800e30a:	d1b8      	bne.n	800e27e <_strtod_l+0x76>
 800e30c:	f001 f85a 	bl	800f3c4 <__errno>
 800e310:	2322      	movs	r3, #34	@ 0x22
 800e312:	6003      	str	r3, [r0, #0]
 800e314:	e7b3      	b.n	800e27e <_strtod_l+0x76>
 800e316:	4966      	ldr	r1, [pc, #408]	@ (800e4b0 <_strtod_l+0x2a8>)
 800e318:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e31a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e31c:	400a      	ands	r2, r1
 800e31e:	4965      	ldr	r1, [pc, #404]	@ (800e4b4 <_strtod_l+0x2ac>)
 800e320:	185b      	adds	r3, r3, r1
 800e322:	051b      	lsls	r3, r3, #20
 800e324:	431a      	orrs	r2, r3
 800e326:	0017      	movs	r7, r2
 800e328:	e7e8      	b.n	800e2fc <_strtod_l+0xf4>
 800e32a:	4f60      	ldr	r7, [pc, #384]	@ (800e4ac <_strtod_l+0x2a4>)
 800e32c:	e7e6      	b.n	800e2fc <_strtod_l+0xf4>
 800e32e:	2601      	movs	r6, #1
 800e330:	4f61      	ldr	r7, [pc, #388]	@ (800e4b8 <_strtod_l+0x2b0>)
 800e332:	4276      	negs	r6, r6
 800e334:	e7e2      	b.n	800e2fc <_strtod_l+0xf4>
 800e336:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e338:	1c5a      	adds	r2, r3, #1
 800e33a:	921d      	str	r2, [sp, #116]	@ 0x74
 800e33c:	785b      	ldrb	r3, [r3, #1]
 800e33e:	2b30      	cmp	r3, #48	@ 0x30
 800e340:	d0f9      	beq.n	800e336 <_strtod_l+0x12e>
 800e342:	2b00      	cmp	r3, #0
 800e344:	d09b      	beq.n	800e27e <_strtod_l+0x76>
 800e346:	2301      	movs	r3, #1
 800e348:	930c      	str	r3, [sp, #48]	@ 0x30
 800e34a:	2500      	movs	r5, #0
 800e34c:	220a      	movs	r2, #10
 800e34e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e350:	950d      	str	r5, [sp, #52]	@ 0x34
 800e352:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e354:	9508      	str	r5, [sp, #32]
 800e356:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e358:	7804      	ldrb	r4, [r0, #0]
 800e35a:	0023      	movs	r3, r4
 800e35c:	3b30      	subs	r3, #48	@ 0x30
 800e35e:	b2d9      	uxtb	r1, r3
 800e360:	2909      	cmp	r1, #9
 800e362:	d927      	bls.n	800e3b4 <_strtod_l+0x1ac>
 800e364:	2201      	movs	r2, #1
 800e366:	4955      	ldr	r1, [pc, #340]	@ (800e4bc <_strtod_l+0x2b4>)
 800e368:	f000 ffcc 	bl	800f304 <strncmp>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	d031      	beq.n	800e3d4 <_strtod_l+0x1cc>
 800e370:	2000      	movs	r0, #0
 800e372:	0023      	movs	r3, r4
 800e374:	4684      	mov	ip, r0
 800e376:	9a08      	ldr	r2, [sp, #32]
 800e378:	900e      	str	r0, [sp, #56]	@ 0x38
 800e37a:	9206      	str	r2, [sp, #24]
 800e37c:	2220      	movs	r2, #32
 800e37e:	0019      	movs	r1, r3
 800e380:	4391      	bics	r1, r2
 800e382:	000a      	movs	r2, r1
 800e384:	2100      	movs	r1, #0
 800e386:	9107      	str	r1, [sp, #28]
 800e388:	2a45      	cmp	r2, #69	@ 0x45
 800e38a:	d000      	beq.n	800e38e <_strtod_l+0x186>
 800e38c:	e0c0      	b.n	800e510 <_strtod_l+0x308>
 800e38e:	9b06      	ldr	r3, [sp, #24]
 800e390:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e392:	4303      	orrs	r3, r0
 800e394:	4313      	orrs	r3, r2
 800e396:	428b      	cmp	r3, r1
 800e398:	d08d      	beq.n	800e2b6 <_strtod_l+0xae>
 800e39a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e39c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e39e:	3301      	adds	r3, #1
 800e3a0:	931d      	str	r3, [sp, #116]	@ 0x74
 800e3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a4:	785b      	ldrb	r3, [r3, #1]
 800e3a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e3a8:	d070      	beq.n	800e48c <_strtod_l+0x284>
 800e3aa:	000c      	movs	r4, r1
 800e3ac:	2b2d      	cmp	r3, #45	@ 0x2d
 800e3ae:	d173      	bne.n	800e498 <_strtod_l+0x290>
 800e3b0:	2401      	movs	r4, #1
 800e3b2:	e06c      	b.n	800e48e <_strtod_l+0x286>
 800e3b4:	9908      	ldr	r1, [sp, #32]
 800e3b6:	2908      	cmp	r1, #8
 800e3b8:	dc09      	bgt.n	800e3ce <_strtod_l+0x1c6>
 800e3ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e3bc:	4351      	muls	r1, r2
 800e3be:	185b      	adds	r3, r3, r1
 800e3c0:	930d      	str	r3, [sp, #52]	@ 0x34
 800e3c2:	9b08      	ldr	r3, [sp, #32]
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	9308      	str	r3, [sp, #32]
 800e3ca:	901d      	str	r0, [sp, #116]	@ 0x74
 800e3cc:	e7c3      	b.n	800e356 <_strtod_l+0x14e>
 800e3ce:	4355      	muls	r5, r2
 800e3d0:	195d      	adds	r5, r3, r5
 800e3d2:	e7f6      	b.n	800e3c2 <_strtod_l+0x1ba>
 800e3d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	921d      	str	r2, [sp, #116]	@ 0x74
 800e3da:	9a08      	ldr	r2, [sp, #32]
 800e3dc:	785b      	ldrb	r3, [r3, #1]
 800e3de:	2a00      	cmp	r2, #0
 800e3e0:	d03a      	beq.n	800e458 <_strtod_l+0x250>
 800e3e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800e3e4:	9206      	str	r2, [sp, #24]
 800e3e6:	001a      	movs	r2, r3
 800e3e8:	3a30      	subs	r2, #48	@ 0x30
 800e3ea:	2a09      	cmp	r2, #9
 800e3ec:	d912      	bls.n	800e414 <_strtod_l+0x20c>
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	4694      	mov	ip, r2
 800e3f2:	e7c3      	b.n	800e37c <_strtod_l+0x174>
 800e3f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	1c5a      	adds	r2, r3, #1
 800e3fa:	921d      	str	r2, [sp, #116]	@ 0x74
 800e3fc:	785b      	ldrb	r3, [r3, #1]
 800e3fe:	2b30      	cmp	r3, #48	@ 0x30
 800e400:	d0f8      	beq.n	800e3f4 <_strtod_l+0x1ec>
 800e402:	001a      	movs	r2, r3
 800e404:	3a31      	subs	r2, #49	@ 0x31
 800e406:	2a08      	cmp	r2, #8
 800e408:	d83b      	bhi.n	800e482 <_strtod_l+0x27a>
 800e40a:	900e      	str	r0, [sp, #56]	@ 0x38
 800e40c:	2000      	movs	r0, #0
 800e40e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e410:	9006      	str	r0, [sp, #24]
 800e412:	9213      	str	r2, [sp, #76]	@ 0x4c
 800e414:	001a      	movs	r2, r3
 800e416:	1c41      	adds	r1, r0, #1
 800e418:	3a30      	subs	r2, #48	@ 0x30
 800e41a:	2b30      	cmp	r3, #48	@ 0x30
 800e41c:	d016      	beq.n	800e44c <_strtod_l+0x244>
 800e41e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e420:	185b      	adds	r3, r3, r1
 800e422:	930e      	str	r3, [sp, #56]	@ 0x38
 800e424:	9b06      	ldr	r3, [sp, #24]
 800e426:	210a      	movs	r1, #10
 800e428:	469c      	mov	ip, r3
 800e42a:	4484      	add	ip, r0
 800e42c:	459c      	cmp	ip, r3
 800e42e:	d115      	bne.n	800e45c <_strtod_l+0x254>
 800e430:	9906      	ldr	r1, [sp, #24]
 800e432:	9b06      	ldr	r3, [sp, #24]
 800e434:	3101      	adds	r1, #1
 800e436:	1809      	adds	r1, r1, r0
 800e438:	181b      	adds	r3, r3, r0
 800e43a:	9106      	str	r1, [sp, #24]
 800e43c:	2b08      	cmp	r3, #8
 800e43e:	dc19      	bgt.n	800e474 <_strtod_l+0x26c>
 800e440:	230a      	movs	r3, #10
 800e442:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e444:	434b      	muls	r3, r1
 800e446:	2100      	movs	r1, #0
 800e448:	18d3      	adds	r3, r2, r3
 800e44a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e44c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e44e:	0008      	movs	r0, r1
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	921d      	str	r2, [sp, #116]	@ 0x74
 800e454:	785b      	ldrb	r3, [r3, #1]
 800e456:	e7c6      	b.n	800e3e6 <_strtod_l+0x1de>
 800e458:	9808      	ldr	r0, [sp, #32]
 800e45a:	e7d0      	b.n	800e3fe <_strtod_l+0x1f6>
 800e45c:	1c5c      	adds	r4, r3, #1
 800e45e:	2b08      	cmp	r3, #8
 800e460:	dc04      	bgt.n	800e46c <_strtod_l+0x264>
 800e462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e464:	434b      	muls	r3, r1
 800e466:	930d      	str	r3, [sp, #52]	@ 0x34
 800e468:	0023      	movs	r3, r4
 800e46a:	e7df      	b.n	800e42c <_strtod_l+0x224>
 800e46c:	2c10      	cmp	r4, #16
 800e46e:	dcfb      	bgt.n	800e468 <_strtod_l+0x260>
 800e470:	434d      	muls	r5, r1
 800e472:	e7f9      	b.n	800e468 <_strtod_l+0x260>
 800e474:	2100      	movs	r1, #0
 800e476:	2b0f      	cmp	r3, #15
 800e478:	dce8      	bgt.n	800e44c <_strtod_l+0x244>
 800e47a:	230a      	movs	r3, #10
 800e47c:	435d      	muls	r5, r3
 800e47e:	1955      	adds	r5, r2, r5
 800e480:	e7e4      	b.n	800e44c <_strtod_l+0x244>
 800e482:	2200      	movs	r2, #0
 800e484:	920e      	str	r2, [sp, #56]	@ 0x38
 800e486:	9206      	str	r2, [sp, #24]
 800e488:	3201      	adds	r2, #1
 800e48a:	e7b1      	b.n	800e3f0 <_strtod_l+0x1e8>
 800e48c:	2400      	movs	r4, #0
 800e48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e490:	3302      	adds	r3, #2
 800e492:	931d      	str	r3, [sp, #116]	@ 0x74
 800e494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e496:	789b      	ldrb	r3, [r3, #2]
 800e498:	001a      	movs	r2, r3
 800e49a:	3a30      	subs	r2, #48	@ 0x30
 800e49c:	2a09      	cmp	r2, #9
 800e49e:	d913      	bls.n	800e4c8 <_strtod_l+0x2c0>
 800e4a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4a2:	921d      	str	r2, [sp, #116]	@ 0x74
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	e032      	b.n	800e50e <_strtod_l+0x306>
 800e4a8:	0801257c 	.word	0x0801257c
 800e4ac:	7ff00000 	.word	0x7ff00000
 800e4b0:	ffefffff 	.word	0xffefffff
 800e4b4:	00000433 	.word	0x00000433
 800e4b8:	7fffffff 	.word	0x7fffffff
 800e4bc:	08012558 	.word	0x08012558
 800e4c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4c2:	1c5a      	adds	r2, r3, #1
 800e4c4:	921d      	str	r2, [sp, #116]	@ 0x74
 800e4c6:	785b      	ldrb	r3, [r3, #1]
 800e4c8:	2b30      	cmp	r3, #48	@ 0x30
 800e4ca:	d0f9      	beq.n	800e4c0 <_strtod_l+0x2b8>
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	9207      	str	r2, [sp, #28]
 800e4d0:	001a      	movs	r2, r3
 800e4d2:	3a31      	subs	r2, #49	@ 0x31
 800e4d4:	2a08      	cmp	r2, #8
 800e4d6:	d81b      	bhi.n	800e510 <_strtod_l+0x308>
 800e4d8:	3b30      	subs	r3, #48	@ 0x30
 800e4da:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4de:	9307      	str	r3, [sp, #28]
 800e4e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4e2:	1c59      	adds	r1, r3, #1
 800e4e4:	911d      	str	r1, [sp, #116]	@ 0x74
 800e4e6:	785b      	ldrb	r3, [r3, #1]
 800e4e8:	001a      	movs	r2, r3
 800e4ea:	3a30      	subs	r2, #48	@ 0x30
 800e4ec:	2a09      	cmp	r2, #9
 800e4ee:	d93a      	bls.n	800e566 <_strtod_l+0x35e>
 800e4f0:	9a07      	ldr	r2, [sp, #28]
 800e4f2:	1a8a      	subs	r2, r1, r2
 800e4f4:	49b4      	ldr	r1, [pc, #720]	@ (800e7c8 <_strtod_l+0x5c0>)
 800e4f6:	9107      	str	r1, [sp, #28]
 800e4f8:	2a08      	cmp	r2, #8
 800e4fa:	dc04      	bgt.n	800e506 <_strtod_l+0x2fe>
 800e4fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e4fe:	9207      	str	r2, [sp, #28]
 800e500:	428a      	cmp	r2, r1
 800e502:	dd00      	ble.n	800e506 <_strtod_l+0x2fe>
 800e504:	9107      	str	r1, [sp, #28]
 800e506:	2c00      	cmp	r4, #0
 800e508:	d002      	beq.n	800e510 <_strtod_l+0x308>
 800e50a:	9a07      	ldr	r2, [sp, #28]
 800e50c:	4252      	negs	r2, r2
 800e50e:	9207      	str	r2, [sp, #28]
 800e510:	9a06      	ldr	r2, [sp, #24]
 800e512:	2a00      	cmp	r2, #0
 800e514:	d14d      	bne.n	800e5b2 <_strtod_l+0x3aa>
 800e516:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e518:	4310      	orrs	r0, r2
 800e51a:	d000      	beq.n	800e51e <_strtod_l+0x316>
 800e51c:	e6af      	b.n	800e27e <_strtod_l+0x76>
 800e51e:	4662      	mov	r2, ip
 800e520:	2a00      	cmp	r2, #0
 800e522:	d000      	beq.n	800e526 <_strtod_l+0x31e>
 800e524:	e6c7      	b.n	800e2b6 <_strtod_l+0xae>
 800e526:	2b69      	cmp	r3, #105	@ 0x69
 800e528:	d027      	beq.n	800e57a <_strtod_l+0x372>
 800e52a:	dc23      	bgt.n	800e574 <_strtod_l+0x36c>
 800e52c:	2b49      	cmp	r3, #73	@ 0x49
 800e52e:	d024      	beq.n	800e57a <_strtod_l+0x372>
 800e530:	2b4e      	cmp	r3, #78	@ 0x4e
 800e532:	d000      	beq.n	800e536 <_strtod_l+0x32e>
 800e534:	e6bf      	b.n	800e2b6 <_strtod_l+0xae>
 800e536:	49a5      	ldr	r1, [pc, #660]	@ (800e7cc <_strtod_l+0x5c4>)
 800e538:	a81d      	add	r0, sp, #116	@ 0x74
 800e53a:	f001 fa67 	bl	800fa0c <__match>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d100      	bne.n	800e544 <_strtod_l+0x33c>
 800e542:	e6b8      	b.n	800e2b6 <_strtod_l+0xae>
 800e544:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	2b28      	cmp	r3, #40	@ 0x28
 800e54a:	d12c      	bne.n	800e5a6 <_strtod_l+0x39e>
 800e54c:	49a0      	ldr	r1, [pc, #640]	@ (800e7d0 <_strtod_l+0x5c8>)
 800e54e:	aa20      	add	r2, sp, #128	@ 0x80
 800e550:	a81d      	add	r0, sp, #116	@ 0x74
 800e552:	f001 fa6f 	bl	800fa34 <__hexnan>
 800e556:	2805      	cmp	r0, #5
 800e558:	d125      	bne.n	800e5a6 <_strtod_l+0x39e>
 800e55a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e55c:	4a9d      	ldr	r2, [pc, #628]	@ (800e7d4 <_strtod_l+0x5cc>)
 800e55e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e560:	431a      	orrs	r2, r3
 800e562:	0017      	movs	r7, r2
 800e564:	e68b      	b.n	800e27e <_strtod_l+0x76>
 800e566:	220a      	movs	r2, #10
 800e568:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e56a:	434a      	muls	r2, r1
 800e56c:	18d2      	adds	r2, r2, r3
 800e56e:	3a30      	subs	r2, #48	@ 0x30
 800e570:	9210      	str	r2, [sp, #64]	@ 0x40
 800e572:	e7b5      	b.n	800e4e0 <_strtod_l+0x2d8>
 800e574:	2b6e      	cmp	r3, #110	@ 0x6e
 800e576:	d0de      	beq.n	800e536 <_strtod_l+0x32e>
 800e578:	e69d      	b.n	800e2b6 <_strtod_l+0xae>
 800e57a:	4997      	ldr	r1, [pc, #604]	@ (800e7d8 <_strtod_l+0x5d0>)
 800e57c:	a81d      	add	r0, sp, #116	@ 0x74
 800e57e:	f001 fa45 	bl	800fa0c <__match>
 800e582:	2800      	cmp	r0, #0
 800e584:	d100      	bne.n	800e588 <_strtod_l+0x380>
 800e586:	e696      	b.n	800e2b6 <_strtod_l+0xae>
 800e588:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e58a:	4994      	ldr	r1, [pc, #592]	@ (800e7dc <_strtod_l+0x5d4>)
 800e58c:	3b01      	subs	r3, #1
 800e58e:	a81d      	add	r0, sp, #116	@ 0x74
 800e590:	931d      	str	r3, [sp, #116]	@ 0x74
 800e592:	f001 fa3b 	bl	800fa0c <__match>
 800e596:	2800      	cmp	r0, #0
 800e598:	d102      	bne.n	800e5a0 <_strtod_l+0x398>
 800e59a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e59c:	3301      	adds	r3, #1
 800e59e:	931d      	str	r3, [sp, #116]	@ 0x74
 800e5a0:	2600      	movs	r6, #0
 800e5a2:	4f8c      	ldr	r7, [pc, #560]	@ (800e7d4 <_strtod_l+0x5cc>)
 800e5a4:	e66b      	b.n	800e27e <_strtod_l+0x76>
 800e5a6:	488e      	ldr	r0, [pc, #568]	@ (800e7e0 <_strtod_l+0x5d8>)
 800e5a8:	f000 ff42 	bl	800f430 <nan>
 800e5ac:	0006      	movs	r6, r0
 800e5ae:	000f      	movs	r7, r1
 800e5b0:	e665      	b.n	800e27e <_strtod_l+0x76>
 800e5b2:	9b07      	ldr	r3, [sp, #28]
 800e5b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5b6:	1a9b      	subs	r3, r3, r2
 800e5b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e5ba:	9b08      	ldr	r3, [sp, #32]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d101      	bne.n	800e5c4 <_strtod_l+0x3bc>
 800e5c0:	9b06      	ldr	r3, [sp, #24]
 800e5c2:	9308      	str	r3, [sp, #32]
 800e5c4:	9c06      	ldr	r4, [sp, #24]
 800e5c6:	2c10      	cmp	r4, #16
 800e5c8:	dd00      	ble.n	800e5cc <_strtod_l+0x3c4>
 800e5ca:	2410      	movs	r4, #16
 800e5cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e5ce:	f7f4 ff07 	bl	80033e0 <__aeabi_ui2d>
 800e5d2:	9b06      	ldr	r3, [sp, #24]
 800e5d4:	0006      	movs	r6, r0
 800e5d6:	000f      	movs	r7, r1
 800e5d8:	2b09      	cmp	r3, #9
 800e5da:	dc13      	bgt.n	800e604 <_strtod_l+0x3fc>
 800e5dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d100      	bne.n	800e5e4 <_strtod_l+0x3dc>
 800e5e2:	e64c      	b.n	800e27e <_strtod_l+0x76>
 800e5e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	dc00      	bgt.n	800e5ec <_strtod_l+0x3e4>
 800e5ea:	e07e      	b.n	800e6ea <_strtod_l+0x4e2>
 800e5ec:	2b16      	cmp	r3, #22
 800e5ee:	dc63      	bgt.n	800e6b8 <_strtod_l+0x4b0>
 800e5f0:	497c      	ldr	r1, [pc, #496]	@ (800e7e4 <_strtod_l+0x5dc>)
 800e5f2:	00db      	lsls	r3, r3, #3
 800e5f4:	18c9      	adds	r1, r1, r3
 800e5f6:	0032      	movs	r2, r6
 800e5f8:	6808      	ldr	r0, [r1, #0]
 800e5fa:	6849      	ldr	r1, [r1, #4]
 800e5fc:	003b      	movs	r3, r7
 800e5fe:	f7f3 ffff 	bl	8002600 <__aeabi_dmul>
 800e602:	e7d3      	b.n	800e5ac <_strtod_l+0x3a4>
 800e604:	0022      	movs	r2, r4
 800e606:	4b77      	ldr	r3, [pc, #476]	@ (800e7e4 <_strtod_l+0x5dc>)
 800e608:	3a09      	subs	r2, #9
 800e60a:	00d2      	lsls	r2, r2, #3
 800e60c:	189b      	adds	r3, r3, r2
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	f7f3 fff5 	bl	8002600 <__aeabi_dmul>
 800e616:	0006      	movs	r6, r0
 800e618:	0028      	movs	r0, r5
 800e61a:	000f      	movs	r7, r1
 800e61c:	f7f4 fee0 	bl	80033e0 <__aeabi_ui2d>
 800e620:	000b      	movs	r3, r1
 800e622:	0002      	movs	r2, r0
 800e624:	0039      	movs	r1, r7
 800e626:	0030      	movs	r0, r6
 800e628:	f7f3 f842 	bl	80016b0 <__aeabi_dadd>
 800e62c:	9b06      	ldr	r3, [sp, #24]
 800e62e:	0006      	movs	r6, r0
 800e630:	000f      	movs	r7, r1
 800e632:	2b0f      	cmp	r3, #15
 800e634:	ddd2      	ble.n	800e5dc <_strtod_l+0x3d4>
 800e636:	9b06      	ldr	r3, [sp, #24]
 800e638:	1b1c      	subs	r4, r3, r4
 800e63a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e63c:	18e4      	adds	r4, r4, r3
 800e63e:	2c00      	cmp	r4, #0
 800e640:	dc00      	bgt.n	800e644 <_strtod_l+0x43c>
 800e642:	e09b      	b.n	800e77c <_strtod_l+0x574>
 800e644:	220f      	movs	r2, #15
 800e646:	0023      	movs	r3, r4
 800e648:	4013      	ands	r3, r2
 800e64a:	4214      	tst	r4, r2
 800e64c:	d00a      	beq.n	800e664 <_strtod_l+0x45c>
 800e64e:	4965      	ldr	r1, [pc, #404]	@ (800e7e4 <_strtod_l+0x5dc>)
 800e650:	00db      	lsls	r3, r3, #3
 800e652:	18c9      	adds	r1, r1, r3
 800e654:	0032      	movs	r2, r6
 800e656:	6808      	ldr	r0, [r1, #0]
 800e658:	6849      	ldr	r1, [r1, #4]
 800e65a:	003b      	movs	r3, r7
 800e65c:	f7f3 ffd0 	bl	8002600 <__aeabi_dmul>
 800e660:	0006      	movs	r6, r0
 800e662:	000f      	movs	r7, r1
 800e664:	230f      	movs	r3, #15
 800e666:	439c      	bics	r4, r3
 800e668:	d073      	beq.n	800e752 <_strtod_l+0x54a>
 800e66a:	3326      	adds	r3, #38	@ 0x26
 800e66c:	33ff      	adds	r3, #255	@ 0xff
 800e66e:	429c      	cmp	r4, r3
 800e670:	dd4b      	ble.n	800e70a <_strtod_l+0x502>
 800e672:	2300      	movs	r3, #0
 800e674:	9306      	str	r3, [sp, #24]
 800e676:	9307      	str	r3, [sp, #28]
 800e678:	930d      	str	r3, [sp, #52]	@ 0x34
 800e67a:	9308      	str	r3, [sp, #32]
 800e67c:	2322      	movs	r3, #34	@ 0x22
 800e67e:	2600      	movs	r6, #0
 800e680:	9a05      	ldr	r2, [sp, #20]
 800e682:	4f54      	ldr	r7, [pc, #336]	@ (800e7d4 <_strtod_l+0x5cc>)
 800e684:	6013      	str	r3, [r2, #0]
 800e686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e688:	42b3      	cmp	r3, r6
 800e68a:	d100      	bne.n	800e68e <_strtod_l+0x486>
 800e68c:	e5f7      	b.n	800e27e <_strtod_l+0x76>
 800e68e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e690:	9805      	ldr	r0, [sp, #20]
 800e692:	f001 fb7f 	bl	800fd94 <_Bfree>
 800e696:	9908      	ldr	r1, [sp, #32]
 800e698:	9805      	ldr	r0, [sp, #20]
 800e69a:	f001 fb7b 	bl	800fd94 <_Bfree>
 800e69e:	9907      	ldr	r1, [sp, #28]
 800e6a0:	9805      	ldr	r0, [sp, #20]
 800e6a2:	f001 fb77 	bl	800fd94 <_Bfree>
 800e6a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e6a8:	9805      	ldr	r0, [sp, #20]
 800e6aa:	f001 fb73 	bl	800fd94 <_Bfree>
 800e6ae:	9906      	ldr	r1, [sp, #24]
 800e6b0:	9805      	ldr	r0, [sp, #20]
 800e6b2:	f001 fb6f 	bl	800fd94 <_Bfree>
 800e6b6:	e5e2      	b.n	800e27e <_strtod_l+0x76>
 800e6b8:	2325      	movs	r3, #37	@ 0x25
 800e6ba:	9a06      	ldr	r2, [sp, #24]
 800e6bc:	1a9b      	subs	r3, r3, r2
 800e6be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	dbb8      	blt.n	800e636 <_strtod_l+0x42e>
 800e6c4:	240f      	movs	r4, #15
 800e6c6:	9b06      	ldr	r3, [sp, #24]
 800e6c8:	4d46      	ldr	r5, [pc, #280]	@ (800e7e4 <_strtod_l+0x5dc>)
 800e6ca:	1ae4      	subs	r4, r4, r3
 800e6cc:	00e1      	lsls	r1, r4, #3
 800e6ce:	1869      	adds	r1, r5, r1
 800e6d0:	0032      	movs	r2, r6
 800e6d2:	6808      	ldr	r0, [r1, #0]
 800e6d4:	6849      	ldr	r1, [r1, #4]
 800e6d6:	003b      	movs	r3, r7
 800e6d8:	f7f3 ff92 	bl	8002600 <__aeabi_dmul>
 800e6dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6de:	1b1c      	subs	r4, r3, r4
 800e6e0:	00e4      	lsls	r4, r4, #3
 800e6e2:	192d      	adds	r5, r5, r4
 800e6e4:	682a      	ldr	r2, [r5, #0]
 800e6e6:	686b      	ldr	r3, [r5, #4]
 800e6e8:	e789      	b.n	800e5fe <_strtod_l+0x3f6>
 800e6ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6ec:	3316      	adds	r3, #22
 800e6ee:	dba2      	blt.n	800e636 <_strtod_l+0x42e>
 800e6f0:	9907      	ldr	r1, [sp, #28]
 800e6f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6f4:	4b3b      	ldr	r3, [pc, #236]	@ (800e7e4 <_strtod_l+0x5dc>)
 800e6f6:	1a52      	subs	r2, r2, r1
 800e6f8:	00d2      	lsls	r2, r2, #3
 800e6fa:	189b      	adds	r3, r3, r2
 800e6fc:	0030      	movs	r0, r6
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	0039      	movs	r1, r7
 800e704:	f7f3 fb38 	bl	8001d78 <__aeabi_ddiv>
 800e708:	e750      	b.n	800e5ac <_strtod_l+0x3a4>
 800e70a:	2300      	movs	r3, #0
 800e70c:	0030      	movs	r0, r6
 800e70e:	0039      	movs	r1, r7
 800e710:	4d35      	ldr	r5, [pc, #212]	@ (800e7e8 <_strtod_l+0x5e0>)
 800e712:	1124      	asrs	r4, r4, #4
 800e714:	9309      	str	r3, [sp, #36]	@ 0x24
 800e716:	2c01      	cmp	r4, #1
 800e718:	dc1e      	bgt.n	800e758 <_strtod_l+0x550>
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d001      	beq.n	800e722 <_strtod_l+0x51a>
 800e71e:	0006      	movs	r6, r0
 800e720:	000f      	movs	r7, r1
 800e722:	4b32      	ldr	r3, [pc, #200]	@ (800e7ec <_strtod_l+0x5e4>)
 800e724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e726:	18ff      	adds	r7, r7, r3
 800e728:	4b2f      	ldr	r3, [pc, #188]	@ (800e7e8 <_strtod_l+0x5e0>)
 800e72a:	00d5      	lsls	r5, r2, #3
 800e72c:	195d      	adds	r5, r3, r5
 800e72e:	0032      	movs	r2, r6
 800e730:	6828      	ldr	r0, [r5, #0]
 800e732:	6869      	ldr	r1, [r5, #4]
 800e734:	003b      	movs	r3, r7
 800e736:	f7f3 ff63 	bl	8002600 <__aeabi_dmul>
 800e73a:	4b26      	ldr	r3, [pc, #152]	@ (800e7d4 <_strtod_l+0x5cc>)
 800e73c:	4a2c      	ldr	r2, [pc, #176]	@ (800e7f0 <_strtod_l+0x5e8>)
 800e73e:	0006      	movs	r6, r0
 800e740:	400b      	ands	r3, r1
 800e742:	4293      	cmp	r3, r2
 800e744:	d895      	bhi.n	800e672 <_strtod_l+0x46a>
 800e746:	4a2b      	ldr	r2, [pc, #172]	@ (800e7f4 <_strtod_l+0x5ec>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d913      	bls.n	800e774 <_strtod_l+0x56c>
 800e74c:	2601      	movs	r6, #1
 800e74e:	4f2a      	ldr	r7, [pc, #168]	@ (800e7f8 <_strtod_l+0x5f0>)
 800e750:	4276      	negs	r6, r6
 800e752:	2300      	movs	r3, #0
 800e754:	9309      	str	r3, [sp, #36]	@ 0x24
 800e756:	e086      	b.n	800e866 <_strtod_l+0x65e>
 800e758:	2201      	movs	r2, #1
 800e75a:	4214      	tst	r4, r2
 800e75c:	d004      	beq.n	800e768 <_strtod_l+0x560>
 800e75e:	682a      	ldr	r2, [r5, #0]
 800e760:	686b      	ldr	r3, [r5, #4]
 800e762:	f7f3 ff4d 	bl	8002600 <__aeabi_dmul>
 800e766:	2301      	movs	r3, #1
 800e768:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e76a:	1064      	asrs	r4, r4, #1
 800e76c:	3201      	adds	r2, #1
 800e76e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e770:	3508      	adds	r5, #8
 800e772:	e7d0      	b.n	800e716 <_strtod_l+0x50e>
 800e774:	23d4      	movs	r3, #212	@ 0xd4
 800e776:	049b      	lsls	r3, r3, #18
 800e778:	18cf      	adds	r7, r1, r3
 800e77a:	e7ea      	b.n	800e752 <_strtod_l+0x54a>
 800e77c:	2c00      	cmp	r4, #0
 800e77e:	d0e8      	beq.n	800e752 <_strtod_l+0x54a>
 800e780:	4264      	negs	r4, r4
 800e782:	230f      	movs	r3, #15
 800e784:	0022      	movs	r2, r4
 800e786:	401a      	ands	r2, r3
 800e788:	421c      	tst	r4, r3
 800e78a:	d00a      	beq.n	800e7a2 <_strtod_l+0x59a>
 800e78c:	4b15      	ldr	r3, [pc, #84]	@ (800e7e4 <_strtod_l+0x5dc>)
 800e78e:	00d2      	lsls	r2, r2, #3
 800e790:	189b      	adds	r3, r3, r2
 800e792:	0030      	movs	r0, r6
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	0039      	movs	r1, r7
 800e79a:	f7f3 faed 	bl	8001d78 <__aeabi_ddiv>
 800e79e:	0006      	movs	r6, r0
 800e7a0:	000f      	movs	r7, r1
 800e7a2:	1124      	asrs	r4, r4, #4
 800e7a4:	d0d5      	beq.n	800e752 <_strtod_l+0x54a>
 800e7a6:	2c1f      	cmp	r4, #31
 800e7a8:	dd28      	ble.n	800e7fc <_strtod_l+0x5f4>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	9306      	str	r3, [sp, #24]
 800e7ae:	9307      	str	r3, [sp, #28]
 800e7b0:	930d      	str	r3, [sp, #52]	@ 0x34
 800e7b2:	9308      	str	r3, [sp, #32]
 800e7b4:	2322      	movs	r3, #34	@ 0x22
 800e7b6:	9a05      	ldr	r2, [sp, #20]
 800e7b8:	2600      	movs	r6, #0
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7be:	2700      	movs	r7, #0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d000      	beq.n	800e7c6 <_strtod_l+0x5be>
 800e7c4:	e763      	b.n	800e68e <_strtod_l+0x486>
 800e7c6:	e55a      	b.n	800e27e <_strtod_l+0x76>
 800e7c8:	00004e1f 	.word	0x00004e1f
 800e7cc:	08012563 	.word	0x08012563
 800e7d0:	08012568 	.word	0x08012568
 800e7d4:	7ff00000 	.word	0x7ff00000
 800e7d8:	0801255a 	.word	0x0801255a
 800e7dc:	0801255d 	.word	0x0801255d
 800e7e0:	0801290e 	.word	0x0801290e
 800e7e4:	080127d8 	.word	0x080127d8
 800e7e8:	080127b0 	.word	0x080127b0
 800e7ec:	fcb00000 	.word	0xfcb00000
 800e7f0:	7ca00000 	.word	0x7ca00000
 800e7f4:	7c900000 	.word	0x7c900000
 800e7f8:	7fefffff 	.word	0x7fefffff
 800e7fc:	2310      	movs	r3, #16
 800e7fe:	0022      	movs	r2, r4
 800e800:	401a      	ands	r2, r3
 800e802:	9209      	str	r2, [sp, #36]	@ 0x24
 800e804:	421c      	tst	r4, r3
 800e806:	d001      	beq.n	800e80c <_strtod_l+0x604>
 800e808:	335a      	adds	r3, #90	@ 0x5a
 800e80a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80c:	0030      	movs	r0, r6
 800e80e:	0039      	movs	r1, r7
 800e810:	2300      	movs	r3, #0
 800e812:	4dbf      	ldr	r5, [pc, #764]	@ (800eb10 <_strtod_l+0x908>)
 800e814:	2201      	movs	r2, #1
 800e816:	4214      	tst	r4, r2
 800e818:	d004      	beq.n	800e824 <_strtod_l+0x61c>
 800e81a:	682a      	ldr	r2, [r5, #0]
 800e81c:	686b      	ldr	r3, [r5, #4]
 800e81e:	f7f3 feef 	bl	8002600 <__aeabi_dmul>
 800e822:	2301      	movs	r3, #1
 800e824:	1064      	asrs	r4, r4, #1
 800e826:	3508      	adds	r5, #8
 800e828:	2c00      	cmp	r4, #0
 800e82a:	d1f3      	bne.n	800e814 <_strtod_l+0x60c>
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d001      	beq.n	800e834 <_strtod_l+0x62c>
 800e830:	0006      	movs	r6, r0
 800e832:	000f      	movs	r7, r1
 800e834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e836:	2b00      	cmp	r3, #0
 800e838:	d00d      	beq.n	800e856 <_strtod_l+0x64e>
 800e83a:	236b      	movs	r3, #107	@ 0x6b
 800e83c:	007a      	lsls	r2, r7, #1
 800e83e:	0d52      	lsrs	r2, r2, #21
 800e840:	0039      	movs	r1, r7
 800e842:	1a9b      	subs	r3, r3, r2
 800e844:	2b00      	cmp	r3, #0
 800e846:	dd06      	ble.n	800e856 <_strtod_l+0x64e>
 800e848:	2b1f      	cmp	r3, #31
 800e84a:	dd5a      	ble.n	800e902 <_strtod_l+0x6fa>
 800e84c:	2600      	movs	r6, #0
 800e84e:	2b34      	cmp	r3, #52	@ 0x34
 800e850:	dd50      	ble.n	800e8f4 <_strtod_l+0x6ec>
 800e852:	27dc      	movs	r7, #220	@ 0xdc
 800e854:	04bf      	lsls	r7, r7, #18
 800e856:	2200      	movs	r2, #0
 800e858:	2300      	movs	r3, #0
 800e85a:	0030      	movs	r0, r6
 800e85c:	0039      	movs	r1, r7
 800e85e:	f7f1 fdff 	bl	8000460 <__aeabi_dcmpeq>
 800e862:	2800      	cmp	r0, #0
 800e864:	d1a1      	bne.n	800e7aa <_strtod_l+0x5a2>
 800e866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e868:	9a08      	ldr	r2, [sp, #32]
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e86e:	9b06      	ldr	r3, [sp, #24]
 800e870:	9805      	ldr	r0, [sp, #20]
 800e872:	f001 faf7 	bl	800fe64 <__s2b>
 800e876:	900d      	str	r0, [sp, #52]	@ 0x34
 800e878:	2800      	cmp	r0, #0
 800e87a:	d100      	bne.n	800e87e <_strtod_l+0x676>
 800e87c:	e6f9      	b.n	800e672 <_strtod_l+0x46a>
 800e87e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e880:	9907      	ldr	r1, [sp, #28]
 800e882:	17da      	asrs	r2, r3, #31
 800e884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e886:	1a5b      	subs	r3, r3, r1
 800e888:	401a      	ands	r2, r3
 800e88a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e88c:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e88e:	43db      	mvns	r3, r3
 800e890:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e892:	17db      	asrs	r3, r3, #31
 800e894:	401a      	ands	r2, r3
 800e896:	2300      	movs	r3, #0
 800e898:	921a      	str	r2, [sp, #104]	@ 0x68
 800e89a:	9306      	str	r3, [sp, #24]
 800e89c:	9307      	str	r3, [sp, #28]
 800e89e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8a0:	9805      	ldr	r0, [sp, #20]
 800e8a2:	6859      	ldr	r1, [r3, #4]
 800e8a4:	f001 fa32 	bl	800fd0c <_Balloc>
 800e8a8:	9008      	str	r0, [sp, #32]
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d100      	bne.n	800e8b0 <_strtod_l+0x6a8>
 800e8ae:	e6e5      	b.n	800e67c <_strtod_l+0x474>
 800e8b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8b2:	300c      	adds	r0, #12
 800e8b4:	0019      	movs	r1, r3
 800e8b6:	691a      	ldr	r2, [r3, #16]
 800e8b8:	310c      	adds	r1, #12
 800e8ba:	3202      	adds	r2, #2
 800e8bc:	0092      	lsls	r2, r2, #2
 800e8be:	f000 fdae 	bl	800f41e <memcpy>
 800e8c2:	ab20      	add	r3, sp, #128	@ 0x80
 800e8c4:	9301      	str	r3, [sp, #4]
 800e8c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	0032      	movs	r2, r6
 800e8cc:	003b      	movs	r3, r7
 800e8ce:	9805      	ldr	r0, [sp, #20]
 800e8d0:	9610      	str	r6, [sp, #64]	@ 0x40
 800e8d2:	9711      	str	r7, [sp, #68]	@ 0x44
 800e8d4:	f001 fe16 	bl	8010504 <__d2b>
 800e8d8:	901e      	str	r0, [sp, #120]	@ 0x78
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d100      	bne.n	800e8e0 <_strtod_l+0x6d8>
 800e8de:	e6cd      	b.n	800e67c <_strtod_l+0x474>
 800e8e0:	2101      	movs	r1, #1
 800e8e2:	9805      	ldr	r0, [sp, #20]
 800e8e4:	f001 fb5a 	bl	800ff9c <__i2b>
 800e8e8:	9007      	str	r0, [sp, #28]
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d10e      	bne.n	800e90c <_strtod_l+0x704>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	9307      	str	r3, [sp, #28]
 800e8f2:	e6c3      	b.n	800e67c <_strtod_l+0x474>
 800e8f4:	234b      	movs	r3, #75	@ 0x4b
 800e8f6:	1a9a      	subs	r2, r3, r2
 800e8f8:	3b4c      	subs	r3, #76	@ 0x4c
 800e8fa:	4093      	lsls	r3, r2
 800e8fc:	4019      	ands	r1, r3
 800e8fe:	000f      	movs	r7, r1
 800e900:	e7a9      	b.n	800e856 <_strtod_l+0x64e>
 800e902:	2201      	movs	r2, #1
 800e904:	4252      	negs	r2, r2
 800e906:	409a      	lsls	r2, r3
 800e908:	4016      	ands	r6, r2
 800e90a:	e7a4      	b.n	800e856 <_strtod_l+0x64e>
 800e90c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e90e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e910:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800e912:	1ad4      	subs	r4, r2, r3
 800e914:	2b00      	cmp	r3, #0
 800e916:	db01      	blt.n	800e91c <_strtod_l+0x714>
 800e918:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800e91a:	195d      	adds	r5, r3, r5
 800e91c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e91e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e920:	1a5b      	subs	r3, r3, r1
 800e922:	2136      	movs	r1, #54	@ 0x36
 800e924:	189b      	adds	r3, r3, r2
 800e926:	1a8a      	subs	r2, r1, r2
 800e928:	497a      	ldr	r1, [pc, #488]	@ (800eb14 <_strtod_l+0x90c>)
 800e92a:	2001      	movs	r0, #1
 800e92c:	468c      	mov	ip, r1
 800e92e:	2100      	movs	r1, #0
 800e930:	3b01      	subs	r3, #1
 800e932:	9116      	str	r1, [sp, #88]	@ 0x58
 800e934:	9014      	str	r0, [sp, #80]	@ 0x50
 800e936:	4563      	cmp	r3, ip
 800e938:	da06      	bge.n	800e948 <_strtod_l+0x740>
 800e93a:	4661      	mov	r1, ip
 800e93c:	1ac9      	subs	r1, r1, r3
 800e93e:	1a52      	subs	r2, r2, r1
 800e940:	291f      	cmp	r1, #31
 800e942:	dc3f      	bgt.n	800e9c4 <_strtod_l+0x7bc>
 800e944:	4088      	lsls	r0, r1
 800e946:	9014      	str	r0, [sp, #80]	@ 0x50
 800e948:	18ab      	adds	r3, r5, r2
 800e94a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e94c:	18a4      	adds	r4, r4, r2
 800e94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e950:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e952:	191c      	adds	r4, r3, r4
 800e954:	002b      	movs	r3, r5
 800e956:	4295      	cmp	r5, r2
 800e958:	dd00      	ble.n	800e95c <_strtod_l+0x754>
 800e95a:	0013      	movs	r3, r2
 800e95c:	42a3      	cmp	r3, r4
 800e95e:	dd00      	ble.n	800e962 <_strtod_l+0x75a>
 800e960:	0023      	movs	r3, r4
 800e962:	2b00      	cmp	r3, #0
 800e964:	dd04      	ble.n	800e970 <_strtod_l+0x768>
 800e966:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e968:	1ae4      	subs	r4, r4, r3
 800e96a:	1ad2      	subs	r2, r2, r3
 800e96c:	920e      	str	r2, [sp, #56]	@ 0x38
 800e96e:	1aed      	subs	r5, r5, r3
 800e970:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e972:	2b00      	cmp	r3, #0
 800e974:	dd16      	ble.n	800e9a4 <_strtod_l+0x79c>
 800e976:	001a      	movs	r2, r3
 800e978:	9907      	ldr	r1, [sp, #28]
 800e97a:	9805      	ldr	r0, [sp, #20]
 800e97c:	f001 fbd8 	bl	8010130 <__pow5mult>
 800e980:	9007      	str	r0, [sp, #28]
 800e982:	2800      	cmp	r0, #0
 800e984:	d0b3      	beq.n	800e8ee <_strtod_l+0x6e6>
 800e986:	0001      	movs	r1, r0
 800e988:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e98a:	9805      	ldr	r0, [sp, #20]
 800e98c:	f001 fb1e 	bl	800ffcc <__multiply>
 800e990:	9013      	str	r0, [sp, #76]	@ 0x4c
 800e992:	2800      	cmp	r0, #0
 800e994:	d100      	bne.n	800e998 <_strtod_l+0x790>
 800e996:	e671      	b.n	800e67c <_strtod_l+0x474>
 800e998:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e99a:	9805      	ldr	r0, [sp, #20]
 800e99c:	f001 f9fa 	bl	800fd94 <_Bfree>
 800e9a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e9a2:	931e      	str	r3, [sp, #120]	@ 0x78
 800e9a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	dc12      	bgt.n	800e9d0 <_strtod_l+0x7c8>
 800e9aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	dd18      	ble.n	800e9e2 <_strtod_l+0x7da>
 800e9b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e9b2:	9908      	ldr	r1, [sp, #32]
 800e9b4:	9805      	ldr	r0, [sp, #20]
 800e9b6:	f001 fbbb 	bl	8010130 <__pow5mult>
 800e9ba:	9008      	str	r0, [sp, #32]
 800e9bc:	2800      	cmp	r0, #0
 800e9be:	d110      	bne.n	800e9e2 <_strtod_l+0x7da>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	e65a      	b.n	800e67a <_strtod_l+0x472>
 800e9c4:	4954      	ldr	r1, [pc, #336]	@ (800eb18 <_strtod_l+0x910>)
 800e9c6:	1acb      	subs	r3, r1, r3
 800e9c8:	0001      	movs	r1, r0
 800e9ca:	4099      	lsls	r1, r3
 800e9cc:	9116      	str	r1, [sp, #88]	@ 0x58
 800e9ce:	e7ba      	b.n	800e946 <_strtod_l+0x73e>
 800e9d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9d2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e9d4:	9805      	ldr	r0, [sp, #20]
 800e9d6:	f001 fc07 	bl	80101e8 <__lshift>
 800e9da:	901e      	str	r0, [sp, #120]	@ 0x78
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d1e4      	bne.n	800e9aa <_strtod_l+0x7a2>
 800e9e0:	e64c      	b.n	800e67c <_strtod_l+0x474>
 800e9e2:	2c00      	cmp	r4, #0
 800e9e4:	dd07      	ble.n	800e9f6 <_strtod_l+0x7ee>
 800e9e6:	0022      	movs	r2, r4
 800e9e8:	9908      	ldr	r1, [sp, #32]
 800e9ea:	9805      	ldr	r0, [sp, #20]
 800e9ec:	f001 fbfc 	bl	80101e8 <__lshift>
 800e9f0:	9008      	str	r0, [sp, #32]
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d0e4      	beq.n	800e9c0 <_strtod_l+0x7b8>
 800e9f6:	2d00      	cmp	r5, #0
 800e9f8:	dd08      	ble.n	800ea0c <_strtod_l+0x804>
 800e9fa:	002a      	movs	r2, r5
 800e9fc:	9907      	ldr	r1, [sp, #28]
 800e9fe:	9805      	ldr	r0, [sp, #20]
 800ea00:	f001 fbf2 	bl	80101e8 <__lshift>
 800ea04:	9007      	str	r0, [sp, #28]
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d100      	bne.n	800ea0c <_strtod_l+0x804>
 800ea0a:	e637      	b.n	800e67c <_strtod_l+0x474>
 800ea0c:	9a08      	ldr	r2, [sp, #32]
 800ea0e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ea10:	9805      	ldr	r0, [sp, #20]
 800ea12:	f001 fc71 	bl	80102f8 <__mdiff>
 800ea16:	9006      	str	r0, [sp, #24]
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d100      	bne.n	800ea1e <_strtod_l+0x816>
 800ea1c:	e62e      	b.n	800e67c <_strtod_l+0x474>
 800ea1e:	68c3      	ldr	r3, [r0, #12]
 800ea20:	9907      	ldr	r1, [sp, #28]
 800ea22:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea24:	2300      	movs	r3, #0
 800ea26:	60c3      	str	r3, [r0, #12]
 800ea28:	f001 fc4a 	bl	80102c0 <__mcmp>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	da3b      	bge.n	800eaa8 <_strtod_l+0x8a0>
 800ea30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ea32:	4333      	orrs	r3, r6
 800ea34:	d167      	bne.n	800eb06 <_strtod_l+0x8fe>
 800ea36:	033b      	lsls	r3, r7, #12
 800ea38:	d165      	bne.n	800eb06 <_strtod_l+0x8fe>
 800ea3a:	22d6      	movs	r2, #214	@ 0xd6
 800ea3c:	4b37      	ldr	r3, [pc, #220]	@ (800eb1c <_strtod_l+0x914>)
 800ea3e:	04d2      	lsls	r2, r2, #19
 800ea40:	403b      	ands	r3, r7
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d95f      	bls.n	800eb06 <_strtod_l+0x8fe>
 800ea46:	9b06      	ldr	r3, [sp, #24]
 800ea48:	695b      	ldr	r3, [r3, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d103      	bne.n	800ea56 <_strtod_l+0x84e>
 800ea4e:	9b06      	ldr	r3, [sp, #24]
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	dd57      	ble.n	800eb06 <_strtod_l+0x8fe>
 800ea56:	9906      	ldr	r1, [sp, #24]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	9805      	ldr	r0, [sp, #20]
 800ea5c:	f001 fbc4 	bl	80101e8 <__lshift>
 800ea60:	9907      	ldr	r1, [sp, #28]
 800ea62:	9006      	str	r0, [sp, #24]
 800ea64:	f001 fc2c 	bl	80102c0 <__mcmp>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	dd4c      	ble.n	800eb06 <_strtod_l+0x8fe>
 800ea6c:	4b2b      	ldr	r3, [pc, #172]	@ (800eb1c <_strtod_l+0x914>)
 800ea6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea70:	403b      	ands	r3, r7
 800ea72:	2a00      	cmp	r2, #0
 800ea74:	d074      	beq.n	800eb60 <_strtod_l+0x958>
 800ea76:	22d6      	movs	r2, #214	@ 0xd6
 800ea78:	04d2      	lsls	r2, r2, #19
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d870      	bhi.n	800eb60 <_strtod_l+0x958>
 800ea7e:	22dc      	movs	r2, #220	@ 0xdc
 800ea80:	0492      	lsls	r2, r2, #18
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d800      	bhi.n	800ea88 <_strtod_l+0x880>
 800ea86:	e695      	b.n	800e7b4 <_strtod_l+0x5ac>
 800ea88:	0030      	movs	r0, r6
 800ea8a:	0039      	movs	r1, r7
 800ea8c:	4b24      	ldr	r3, [pc, #144]	@ (800eb20 <_strtod_l+0x918>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f7f3 fdb6 	bl	8002600 <__aeabi_dmul>
 800ea94:	4b21      	ldr	r3, [pc, #132]	@ (800eb1c <_strtod_l+0x914>)
 800ea96:	0006      	movs	r6, r0
 800ea98:	000f      	movs	r7, r1
 800ea9a:	420b      	tst	r3, r1
 800ea9c:	d000      	beq.n	800eaa0 <_strtod_l+0x898>
 800ea9e:	e5f6      	b.n	800e68e <_strtod_l+0x486>
 800eaa0:	2322      	movs	r3, #34	@ 0x22
 800eaa2:	9a05      	ldr	r2, [sp, #20]
 800eaa4:	6013      	str	r3, [r2, #0]
 800eaa6:	e5f2      	b.n	800e68e <_strtod_l+0x486>
 800eaa8:	970e      	str	r7, [sp, #56]	@ 0x38
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	d175      	bne.n	800eb9a <_strtod_l+0x992>
 800eaae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eab0:	033b      	lsls	r3, r7, #12
 800eab2:	0b1b      	lsrs	r3, r3, #12
 800eab4:	2a00      	cmp	r2, #0
 800eab6:	d039      	beq.n	800eb2c <_strtod_l+0x924>
 800eab8:	4a1a      	ldr	r2, [pc, #104]	@ (800eb24 <_strtod_l+0x91c>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d138      	bne.n	800eb30 <_strtod_l+0x928>
 800eabe:	2101      	movs	r1, #1
 800eac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac2:	4249      	negs	r1, r1
 800eac4:	0032      	movs	r2, r6
 800eac6:	0008      	movs	r0, r1
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00b      	beq.n	800eae4 <_strtod_l+0x8dc>
 800eacc:	24d4      	movs	r4, #212	@ 0xd4
 800eace:	4b13      	ldr	r3, [pc, #76]	@ (800eb1c <_strtod_l+0x914>)
 800ead0:	0008      	movs	r0, r1
 800ead2:	403b      	ands	r3, r7
 800ead4:	04e4      	lsls	r4, r4, #19
 800ead6:	42a3      	cmp	r3, r4
 800ead8:	d804      	bhi.n	800eae4 <_strtod_l+0x8dc>
 800eada:	306c      	adds	r0, #108	@ 0x6c
 800eadc:	0d1b      	lsrs	r3, r3, #20
 800eade:	1ac3      	subs	r3, r0, r3
 800eae0:	4099      	lsls	r1, r3
 800eae2:	0008      	movs	r0, r1
 800eae4:	4282      	cmp	r2, r0
 800eae6:	d123      	bne.n	800eb30 <_strtod_l+0x928>
 800eae8:	4b0f      	ldr	r3, [pc, #60]	@ (800eb28 <_strtod_l+0x920>)
 800eaea:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eaec:	4299      	cmp	r1, r3
 800eaee:	d102      	bne.n	800eaf6 <_strtod_l+0x8ee>
 800eaf0:	3201      	adds	r2, #1
 800eaf2:	d100      	bne.n	800eaf6 <_strtod_l+0x8ee>
 800eaf4:	e5c2      	b.n	800e67c <_strtod_l+0x474>
 800eaf6:	4b09      	ldr	r3, [pc, #36]	@ (800eb1c <_strtod_l+0x914>)
 800eaf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eafa:	2600      	movs	r6, #0
 800eafc:	401a      	ands	r2, r3
 800eafe:	0013      	movs	r3, r2
 800eb00:	2280      	movs	r2, #128	@ 0x80
 800eb02:	0352      	lsls	r2, r2, #13
 800eb04:	189f      	adds	r7, r3, r2
 800eb06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1bd      	bne.n	800ea88 <_strtod_l+0x880>
 800eb0c:	e5bf      	b.n	800e68e <_strtod_l+0x486>
 800eb0e:	46c0      	nop			@ (mov r8, r8)
 800eb10:	08012590 	.word	0x08012590
 800eb14:	fffffc02 	.word	0xfffffc02
 800eb18:	fffffbe2 	.word	0xfffffbe2
 800eb1c:	7ff00000 	.word	0x7ff00000
 800eb20:	39500000 	.word	0x39500000
 800eb24:	000fffff 	.word	0x000fffff
 800eb28:	7fefffff 	.word	0x7fefffff
 800eb2c:	4333      	orrs	r3, r6
 800eb2e:	d09d      	beq.n	800ea6c <_strtod_l+0x864>
 800eb30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d01c      	beq.n	800eb70 <_strtod_l+0x968>
 800eb36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb38:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eb3a:	4213      	tst	r3, r2
 800eb3c:	d0e3      	beq.n	800eb06 <_strtod_l+0x8fe>
 800eb3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb40:	0030      	movs	r0, r6
 800eb42:	0039      	movs	r1, r7
 800eb44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d016      	beq.n	800eb78 <_strtod_l+0x970>
 800eb4a:	f7ff fb45 	bl	800e1d8 <sulp>
 800eb4e:	0002      	movs	r2, r0
 800eb50:	000b      	movs	r3, r1
 800eb52:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eb54:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eb56:	f7f2 fdab 	bl	80016b0 <__aeabi_dadd>
 800eb5a:	0006      	movs	r6, r0
 800eb5c:	000f      	movs	r7, r1
 800eb5e:	e7d2      	b.n	800eb06 <_strtod_l+0x8fe>
 800eb60:	2601      	movs	r6, #1
 800eb62:	4a92      	ldr	r2, [pc, #584]	@ (800edac <_strtod_l+0xba4>)
 800eb64:	4276      	negs	r6, r6
 800eb66:	189b      	adds	r3, r3, r2
 800eb68:	4a91      	ldr	r2, [pc, #580]	@ (800edb0 <_strtod_l+0xba8>)
 800eb6a:	431a      	orrs	r2, r3
 800eb6c:	0017      	movs	r7, r2
 800eb6e:	e7ca      	b.n	800eb06 <_strtod_l+0x8fe>
 800eb70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb72:	4233      	tst	r3, r6
 800eb74:	d0c7      	beq.n	800eb06 <_strtod_l+0x8fe>
 800eb76:	e7e2      	b.n	800eb3e <_strtod_l+0x936>
 800eb78:	f7ff fb2e 	bl	800e1d8 <sulp>
 800eb7c:	0002      	movs	r2, r0
 800eb7e:	000b      	movs	r3, r1
 800eb80:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800eb82:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800eb84:	f7f4 f804 	bl	8002b90 <__aeabi_dsub>
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	0006      	movs	r6, r0
 800eb8e:	000f      	movs	r7, r1
 800eb90:	f7f1 fc66 	bl	8000460 <__aeabi_dcmpeq>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d0b6      	beq.n	800eb06 <_strtod_l+0x8fe>
 800eb98:	e60c      	b.n	800e7b4 <_strtod_l+0x5ac>
 800eb9a:	9907      	ldr	r1, [sp, #28]
 800eb9c:	9806      	ldr	r0, [sp, #24]
 800eb9e:	f001 fd11 	bl	80105c4 <__ratio>
 800eba2:	2380      	movs	r3, #128	@ 0x80
 800eba4:	2200      	movs	r2, #0
 800eba6:	05db      	lsls	r3, r3, #23
 800eba8:	0004      	movs	r4, r0
 800ebaa:	000d      	movs	r5, r1
 800ebac:	f7f1 fc68 	bl	8000480 <__aeabi_dcmple>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d06c      	beq.n	800ec8e <_strtod_l+0xa86>
 800ebb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d177      	bne.n	800ecaa <_strtod_l+0xaa2>
 800ebba:	2e00      	cmp	r6, #0
 800ebbc:	d157      	bne.n	800ec6e <_strtod_l+0xa66>
 800ebbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebc0:	031b      	lsls	r3, r3, #12
 800ebc2:	d15a      	bne.n	800ec7a <_strtod_l+0xa72>
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	0020      	movs	r0, r4
 800ebc8:	0029      	movs	r1, r5
 800ebca:	4b7a      	ldr	r3, [pc, #488]	@ (800edb4 <_strtod_l+0xbac>)
 800ebcc:	f7f1 fc4e 	bl	800046c <__aeabi_dcmplt>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d159      	bne.n	800ec88 <_strtod_l+0xa80>
 800ebd4:	0020      	movs	r0, r4
 800ebd6:	0029      	movs	r1, r5
 800ebd8:	2200      	movs	r2, #0
 800ebda:	4b77      	ldr	r3, [pc, #476]	@ (800edb8 <_strtod_l+0xbb0>)
 800ebdc:	f7f3 fd10 	bl	8002600 <__aeabi_dmul>
 800ebe0:	0004      	movs	r4, r0
 800ebe2:	000d      	movs	r5, r1
 800ebe4:	2380      	movs	r3, #128	@ 0x80
 800ebe6:	061b      	lsls	r3, r3, #24
 800ebe8:	18eb      	adds	r3, r5, r3
 800ebea:	940a      	str	r4, [sp, #40]	@ 0x28
 800ebec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ebf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebf2:	9214      	str	r2, [sp, #80]	@ 0x50
 800ebf4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ebf6:	4a71      	ldr	r2, [pc, #452]	@ (800edbc <_strtod_l+0xbb4>)
 800ebf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebfa:	4013      	ands	r3, r2
 800ebfc:	9316      	str	r3, [sp, #88]	@ 0x58
 800ebfe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ec00:	4b6f      	ldr	r3, [pc, #444]	@ (800edc0 <_strtod_l+0xbb8>)
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d000      	beq.n	800ec08 <_strtod_l+0xa00>
 800ec06:	e087      	b.n	800ed18 <_strtod_l+0xb10>
 800ec08:	4a6e      	ldr	r2, [pc, #440]	@ (800edc4 <_strtod_l+0xbbc>)
 800ec0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec0c:	4694      	mov	ip, r2
 800ec0e:	4463      	add	r3, ip
 800ec10:	001f      	movs	r7, r3
 800ec12:	0030      	movs	r0, r6
 800ec14:	0019      	movs	r1, r3
 800ec16:	f001 fc09 	bl	801042c <__ulp>
 800ec1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ec1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec1e:	f7f3 fcef 	bl	8002600 <__aeabi_dmul>
 800ec22:	0032      	movs	r2, r6
 800ec24:	003b      	movs	r3, r7
 800ec26:	f7f2 fd43 	bl	80016b0 <__aeabi_dadd>
 800ec2a:	4a64      	ldr	r2, [pc, #400]	@ (800edbc <_strtod_l+0xbb4>)
 800ec2c:	4b66      	ldr	r3, [pc, #408]	@ (800edc8 <_strtod_l+0xbc0>)
 800ec2e:	0006      	movs	r6, r0
 800ec30:	400a      	ands	r2, r1
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d940      	bls.n	800ecb8 <_strtod_l+0xab0>
 800ec36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec38:	4a64      	ldr	r2, [pc, #400]	@ (800edcc <_strtod_l+0xbc4>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d103      	bne.n	800ec46 <_strtod_l+0xa3e>
 800ec3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ec40:	3301      	adds	r3, #1
 800ec42:	d100      	bne.n	800ec46 <_strtod_l+0xa3e>
 800ec44:	e51a      	b.n	800e67c <_strtod_l+0x474>
 800ec46:	2601      	movs	r6, #1
 800ec48:	4f60      	ldr	r7, [pc, #384]	@ (800edcc <_strtod_l+0xbc4>)
 800ec4a:	4276      	negs	r6, r6
 800ec4c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ec4e:	9805      	ldr	r0, [sp, #20]
 800ec50:	f001 f8a0 	bl	800fd94 <_Bfree>
 800ec54:	9908      	ldr	r1, [sp, #32]
 800ec56:	9805      	ldr	r0, [sp, #20]
 800ec58:	f001 f89c 	bl	800fd94 <_Bfree>
 800ec5c:	9907      	ldr	r1, [sp, #28]
 800ec5e:	9805      	ldr	r0, [sp, #20]
 800ec60:	f001 f898 	bl	800fd94 <_Bfree>
 800ec64:	9906      	ldr	r1, [sp, #24]
 800ec66:	9805      	ldr	r0, [sp, #20]
 800ec68:	f001 f894 	bl	800fd94 <_Bfree>
 800ec6c:	e617      	b.n	800e89e <_strtod_l+0x696>
 800ec6e:	2e01      	cmp	r6, #1
 800ec70:	d103      	bne.n	800ec7a <_strtod_l+0xa72>
 800ec72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d100      	bne.n	800ec7a <_strtod_l+0xa72>
 800ec78:	e59c      	b.n	800e7b4 <_strtod_l+0x5ac>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	4c54      	ldr	r4, [pc, #336]	@ (800edd0 <_strtod_l+0xbc8>)
 800ec7e:	4d4d      	ldr	r5, [pc, #308]	@ (800edb4 <_strtod_l+0xbac>)
 800ec80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec82:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ec84:	2400      	movs	r4, #0
 800ec86:	e7b2      	b.n	800ebee <_strtod_l+0x9e6>
 800ec88:	2400      	movs	r4, #0
 800ec8a:	4d4b      	ldr	r5, [pc, #300]	@ (800edb8 <_strtod_l+0xbb0>)
 800ec8c:	e7aa      	b.n	800ebe4 <_strtod_l+0x9dc>
 800ec8e:	0020      	movs	r0, r4
 800ec90:	0029      	movs	r1, r5
 800ec92:	4b49      	ldr	r3, [pc, #292]	@ (800edb8 <_strtod_l+0xbb0>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	f7f3 fcb3 	bl	8002600 <__aeabi_dmul>
 800ec9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec9c:	0004      	movs	r4, r0
 800ec9e:	000d      	movs	r5, r1
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d09f      	beq.n	800ebe4 <_strtod_l+0x9dc>
 800eca4:	940a      	str	r4, [sp, #40]	@ 0x28
 800eca6:	950b      	str	r5, [sp, #44]	@ 0x2c
 800eca8:	e7a1      	b.n	800ebee <_strtod_l+0x9e6>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	4c41      	ldr	r4, [pc, #260]	@ (800edb4 <_strtod_l+0xbac>)
 800ecae:	0025      	movs	r5, r4
 800ecb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ecb2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ecb4:	001c      	movs	r4, r3
 800ecb6:	e79a      	b.n	800ebee <_strtod_l+0x9e6>
 800ecb8:	23d4      	movs	r3, #212	@ 0xd4
 800ecba:	049b      	lsls	r3, r3, #18
 800ecbc:	18cf      	adds	r7, r1, r3
 800ecbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecc0:	9710      	str	r7, [sp, #64]	@ 0x40
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1c2      	bne.n	800ec4c <_strtod_l+0xa44>
 800ecc6:	4b3d      	ldr	r3, [pc, #244]	@ (800edbc <_strtod_l+0xbb4>)
 800ecc8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ecca:	403b      	ands	r3, r7
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d1bd      	bne.n	800ec4c <_strtod_l+0xa44>
 800ecd0:	0020      	movs	r0, r4
 800ecd2:	0029      	movs	r1, r5
 800ecd4:	f7f1 fcb0 	bl	8000638 <__aeabi_d2lz>
 800ecd8:	f7f1 fd08 	bl	80006ec <__aeabi_l2d>
 800ecdc:	0002      	movs	r2, r0
 800ecde:	000b      	movs	r3, r1
 800ece0:	0020      	movs	r0, r4
 800ece2:	0029      	movs	r1, r5
 800ece4:	f7f3 ff54 	bl	8002b90 <__aeabi_dsub>
 800ece8:	033c      	lsls	r4, r7, #12
 800ecea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ecec:	0b24      	lsrs	r4, r4, #12
 800ecee:	4334      	orrs	r4, r6
 800ecf0:	900e      	str	r0, [sp, #56]	@ 0x38
 800ecf2:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ecf4:	4a37      	ldr	r2, [pc, #220]	@ (800edd4 <_strtod_l+0xbcc>)
 800ecf6:	431c      	orrs	r4, r3
 800ecf8:	d052      	beq.n	800eda0 <_strtod_l+0xb98>
 800ecfa:	4b37      	ldr	r3, [pc, #220]	@ (800edd8 <_strtod_l+0xbd0>)
 800ecfc:	f7f1 fbb6 	bl	800046c <__aeabi_dcmplt>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d000      	beq.n	800ed06 <_strtod_l+0xafe>
 800ed04:	e4c3      	b.n	800e68e <_strtod_l+0x486>
 800ed06:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ed08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ed0a:	4a34      	ldr	r2, [pc, #208]	@ (800eddc <_strtod_l+0xbd4>)
 800ed0c:	4b2a      	ldr	r3, [pc, #168]	@ (800edb8 <_strtod_l+0xbb0>)
 800ed0e:	f7f1 fbc1 	bl	8000494 <__aeabi_dcmpgt>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d09a      	beq.n	800ec4c <_strtod_l+0xa44>
 800ed16:	e4ba      	b.n	800e68e <_strtod_l+0x486>
 800ed18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d02a      	beq.n	800ed74 <_strtod_l+0xb6c>
 800ed1e:	23d4      	movs	r3, #212	@ 0xd4
 800ed20:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ed22:	04db      	lsls	r3, r3, #19
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d825      	bhi.n	800ed74 <_strtod_l+0xb6c>
 800ed28:	0020      	movs	r0, r4
 800ed2a:	0029      	movs	r1, r5
 800ed2c:	4a2c      	ldr	r2, [pc, #176]	@ (800ede0 <_strtod_l+0xbd8>)
 800ed2e:	4b2d      	ldr	r3, [pc, #180]	@ (800ede4 <_strtod_l+0xbdc>)
 800ed30:	f7f1 fba6 	bl	8000480 <__aeabi_dcmple>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d016      	beq.n	800ed66 <_strtod_l+0xb5e>
 800ed38:	0020      	movs	r0, r4
 800ed3a:	0029      	movs	r1, r5
 800ed3c:	f7f1 fc5e 	bl	80005fc <__aeabi_d2uiz>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d100      	bne.n	800ed46 <_strtod_l+0xb3e>
 800ed44:	3001      	adds	r0, #1
 800ed46:	f7f4 fb4b 	bl	80033e0 <__aeabi_ui2d>
 800ed4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ed4c:	0004      	movs	r4, r0
 800ed4e:	000d      	movs	r5, r1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d122      	bne.n	800ed9a <_strtod_l+0xb92>
 800ed54:	2380      	movs	r3, #128	@ 0x80
 800ed56:	061b      	lsls	r3, r3, #24
 800ed58:	18cb      	adds	r3, r1, r3
 800ed5a:	9018      	str	r0, [sp, #96]	@ 0x60
 800ed5c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ed5e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ed60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed62:	9214      	str	r2, [sp, #80]	@ 0x50
 800ed64:	9315      	str	r3, [sp, #84]	@ 0x54
 800ed66:	22d6      	movs	r2, #214	@ 0xd6
 800ed68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ed6a:	04d2      	lsls	r2, r2, #19
 800ed6c:	189b      	adds	r3, r3, r2
 800ed6e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ed70:	1a9b      	subs	r3, r3, r2
 800ed72:	9315      	str	r3, [sp, #84]	@ 0x54
 800ed74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ed76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ed78:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ed7a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ed7c:	f001 fb56 	bl	801042c <__ulp>
 800ed80:	0002      	movs	r2, r0
 800ed82:	000b      	movs	r3, r1
 800ed84:	0030      	movs	r0, r6
 800ed86:	0039      	movs	r1, r7
 800ed88:	f7f3 fc3a 	bl	8002600 <__aeabi_dmul>
 800ed8c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ed8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ed90:	f7f2 fc8e 	bl	80016b0 <__aeabi_dadd>
 800ed94:	0006      	movs	r6, r0
 800ed96:	000f      	movs	r7, r1
 800ed98:	e791      	b.n	800ecbe <_strtod_l+0xab6>
 800ed9a:	9418      	str	r4, [sp, #96]	@ 0x60
 800ed9c:	9519      	str	r5, [sp, #100]	@ 0x64
 800ed9e:	e7de      	b.n	800ed5e <_strtod_l+0xb56>
 800eda0:	4b11      	ldr	r3, [pc, #68]	@ (800ede8 <_strtod_l+0xbe0>)
 800eda2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800eda4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eda6:	f7f1 fb61 	bl	800046c <__aeabi_dcmplt>
 800edaa:	e7b2      	b.n	800ed12 <_strtod_l+0xb0a>
 800edac:	fff00000 	.word	0xfff00000
 800edb0:	000fffff 	.word	0x000fffff
 800edb4:	3ff00000 	.word	0x3ff00000
 800edb8:	3fe00000 	.word	0x3fe00000
 800edbc:	7ff00000 	.word	0x7ff00000
 800edc0:	7fe00000 	.word	0x7fe00000
 800edc4:	fcb00000 	.word	0xfcb00000
 800edc8:	7c9fffff 	.word	0x7c9fffff
 800edcc:	7fefffff 	.word	0x7fefffff
 800edd0:	bff00000 	.word	0xbff00000
 800edd4:	94a03595 	.word	0x94a03595
 800edd8:	3fdfffff 	.word	0x3fdfffff
 800eddc:	35afe535 	.word	0x35afe535
 800ede0:	ffc00000 	.word	0xffc00000
 800ede4:	41dfffff 	.word	0x41dfffff
 800ede8:	3fcfffff 	.word	0x3fcfffff

0800edec <strtod>:
 800edec:	b510      	push	{r4, lr}
 800edee:	4c04      	ldr	r4, [pc, #16]	@ (800ee00 <strtod+0x14>)
 800edf0:	000a      	movs	r2, r1
 800edf2:	0001      	movs	r1, r0
 800edf4:	4b03      	ldr	r3, [pc, #12]	@ (800ee04 <strtod+0x18>)
 800edf6:	6820      	ldr	r0, [r4, #0]
 800edf8:	f7ff fa06 	bl	800e208 <_strtod_l>
 800edfc:	bd10      	pop	{r4, pc}
 800edfe:	46c0      	nop			@ (mov r8, r8)
 800ee00:	20002410 	.word	0x20002410
 800ee04:	200022a4 	.word	0x200022a4

0800ee08 <_strtol_l.constprop.0>:
 800ee08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	0017      	movs	r7, r2
 800ee0e:	001e      	movs	r6, r3
 800ee10:	9003      	str	r0, [sp, #12]
 800ee12:	9101      	str	r1, [sp, #4]
 800ee14:	2b24      	cmp	r3, #36	@ 0x24
 800ee16:	d844      	bhi.n	800eea2 <_strtol_l.constprop.0+0x9a>
 800ee18:	000c      	movs	r4, r1
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d041      	beq.n	800eea2 <_strtol_l.constprop.0+0x9a>
 800ee1e:	4b3d      	ldr	r3, [pc, #244]	@ (800ef14 <_strtol_l.constprop.0+0x10c>)
 800ee20:	2208      	movs	r2, #8
 800ee22:	469c      	mov	ip, r3
 800ee24:	0023      	movs	r3, r4
 800ee26:	4661      	mov	r1, ip
 800ee28:	781d      	ldrb	r5, [r3, #0]
 800ee2a:	3401      	adds	r4, #1
 800ee2c:	5d48      	ldrb	r0, [r1, r5]
 800ee2e:	0001      	movs	r1, r0
 800ee30:	4011      	ands	r1, r2
 800ee32:	4210      	tst	r0, r2
 800ee34:	d1f6      	bne.n	800ee24 <_strtol_l.constprop.0+0x1c>
 800ee36:	2d2d      	cmp	r5, #45	@ 0x2d
 800ee38:	d13a      	bne.n	800eeb0 <_strtol_l.constprop.0+0xa8>
 800ee3a:	7825      	ldrb	r5, [r4, #0]
 800ee3c:	1c9c      	adds	r4, r3, #2
 800ee3e:	2301      	movs	r3, #1
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	2210      	movs	r2, #16
 800ee44:	0033      	movs	r3, r6
 800ee46:	4393      	bics	r3, r2
 800ee48:	d109      	bne.n	800ee5e <_strtol_l.constprop.0+0x56>
 800ee4a:	2d30      	cmp	r5, #48	@ 0x30
 800ee4c:	d136      	bne.n	800eebc <_strtol_l.constprop.0+0xb4>
 800ee4e:	2120      	movs	r1, #32
 800ee50:	7823      	ldrb	r3, [r4, #0]
 800ee52:	438b      	bics	r3, r1
 800ee54:	2b58      	cmp	r3, #88	@ 0x58
 800ee56:	d131      	bne.n	800eebc <_strtol_l.constprop.0+0xb4>
 800ee58:	0016      	movs	r6, r2
 800ee5a:	7865      	ldrb	r5, [r4, #1]
 800ee5c:	3402      	adds	r4, #2
 800ee5e:	4a2e      	ldr	r2, [pc, #184]	@ (800ef18 <_strtol_l.constprop.0+0x110>)
 800ee60:	9b00      	ldr	r3, [sp, #0]
 800ee62:	4694      	mov	ip, r2
 800ee64:	4463      	add	r3, ip
 800ee66:	0031      	movs	r1, r6
 800ee68:	0018      	movs	r0, r3
 800ee6a:	9302      	str	r3, [sp, #8]
 800ee6c:	f7f1 f9f8 	bl	8000260 <__aeabi_uidivmod>
 800ee70:	2200      	movs	r2, #0
 800ee72:	4684      	mov	ip, r0
 800ee74:	0010      	movs	r0, r2
 800ee76:	002b      	movs	r3, r5
 800ee78:	3b30      	subs	r3, #48	@ 0x30
 800ee7a:	2b09      	cmp	r3, #9
 800ee7c:	d825      	bhi.n	800eeca <_strtol_l.constprop.0+0xc2>
 800ee7e:	001d      	movs	r5, r3
 800ee80:	42ae      	cmp	r6, r5
 800ee82:	dd31      	ble.n	800eee8 <_strtol_l.constprop.0+0xe0>
 800ee84:	1c53      	adds	r3, r2, #1
 800ee86:	d009      	beq.n	800ee9c <_strtol_l.constprop.0+0x94>
 800ee88:	2201      	movs	r2, #1
 800ee8a:	4252      	negs	r2, r2
 800ee8c:	4584      	cmp	ip, r0
 800ee8e:	d305      	bcc.n	800ee9c <_strtol_l.constprop.0+0x94>
 800ee90:	d101      	bne.n	800ee96 <_strtol_l.constprop.0+0x8e>
 800ee92:	42a9      	cmp	r1, r5
 800ee94:	db25      	blt.n	800eee2 <_strtol_l.constprop.0+0xda>
 800ee96:	2201      	movs	r2, #1
 800ee98:	4370      	muls	r0, r6
 800ee9a:	1828      	adds	r0, r5, r0
 800ee9c:	7825      	ldrb	r5, [r4, #0]
 800ee9e:	3401      	adds	r4, #1
 800eea0:	e7e9      	b.n	800ee76 <_strtol_l.constprop.0+0x6e>
 800eea2:	f000 fa8f 	bl	800f3c4 <__errno>
 800eea6:	2316      	movs	r3, #22
 800eea8:	6003      	str	r3, [r0, #0]
 800eeaa:	2000      	movs	r0, #0
 800eeac:	b005      	add	sp, #20
 800eeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb0:	9100      	str	r1, [sp, #0]
 800eeb2:	2d2b      	cmp	r5, #43	@ 0x2b
 800eeb4:	d1c5      	bne.n	800ee42 <_strtol_l.constprop.0+0x3a>
 800eeb6:	7825      	ldrb	r5, [r4, #0]
 800eeb8:	1c9c      	adds	r4, r3, #2
 800eeba:	e7c2      	b.n	800ee42 <_strtol_l.constprop.0+0x3a>
 800eebc:	2e00      	cmp	r6, #0
 800eebe:	d1ce      	bne.n	800ee5e <_strtol_l.constprop.0+0x56>
 800eec0:	3608      	adds	r6, #8
 800eec2:	2d30      	cmp	r5, #48	@ 0x30
 800eec4:	d0cb      	beq.n	800ee5e <_strtol_l.constprop.0+0x56>
 800eec6:	3602      	adds	r6, #2
 800eec8:	e7c9      	b.n	800ee5e <_strtol_l.constprop.0+0x56>
 800eeca:	002b      	movs	r3, r5
 800eecc:	3b41      	subs	r3, #65	@ 0x41
 800eece:	2b19      	cmp	r3, #25
 800eed0:	d801      	bhi.n	800eed6 <_strtol_l.constprop.0+0xce>
 800eed2:	3d37      	subs	r5, #55	@ 0x37
 800eed4:	e7d4      	b.n	800ee80 <_strtol_l.constprop.0+0x78>
 800eed6:	002b      	movs	r3, r5
 800eed8:	3b61      	subs	r3, #97	@ 0x61
 800eeda:	2b19      	cmp	r3, #25
 800eedc:	d804      	bhi.n	800eee8 <_strtol_l.constprop.0+0xe0>
 800eede:	3d57      	subs	r5, #87	@ 0x57
 800eee0:	e7ce      	b.n	800ee80 <_strtol_l.constprop.0+0x78>
 800eee2:	2201      	movs	r2, #1
 800eee4:	4252      	negs	r2, r2
 800eee6:	e7d9      	b.n	800ee9c <_strtol_l.constprop.0+0x94>
 800eee8:	1c53      	adds	r3, r2, #1
 800eeea:	d108      	bne.n	800eefe <_strtol_l.constprop.0+0xf6>
 800eeec:	2322      	movs	r3, #34	@ 0x22
 800eeee:	9a03      	ldr	r2, [sp, #12]
 800eef0:	9802      	ldr	r0, [sp, #8]
 800eef2:	6013      	str	r3, [r2, #0]
 800eef4:	2f00      	cmp	r7, #0
 800eef6:	d0d9      	beq.n	800eeac <_strtol_l.constprop.0+0xa4>
 800eef8:	1e63      	subs	r3, r4, #1
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	e007      	b.n	800ef0e <_strtol_l.constprop.0+0x106>
 800eefe:	9b00      	ldr	r3, [sp, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d000      	beq.n	800ef06 <_strtol_l.constprop.0+0xfe>
 800ef04:	4240      	negs	r0, r0
 800ef06:	2f00      	cmp	r7, #0
 800ef08:	d0d0      	beq.n	800eeac <_strtol_l.constprop.0+0xa4>
 800ef0a:	2a00      	cmp	r2, #0
 800ef0c:	d1f4      	bne.n	800eef8 <_strtol_l.constprop.0+0xf0>
 800ef0e:	9b01      	ldr	r3, [sp, #4]
 800ef10:	603b      	str	r3, [r7, #0]
 800ef12:	e7cb      	b.n	800eeac <_strtol_l.constprop.0+0xa4>
 800ef14:	080125b9 	.word	0x080125b9
 800ef18:	7fffffff 	.word	0x7fffffff

0800ef1c <strtol>:
 800ef1c:	b510      	push	{r4, lr}
 800ef1e:	4c04      	ldr	r4, [pc, #16]	@ (800ef30 <strtol+0x14>)
 800ef20:	0013      	movs	r3, r2
 800ef22:	000a      	movs	r2, r1
 800ef24:	0001      	movs	r1, r0
 800ef26:	6820      	ldr	r0, [r4, #0]
 800ef28:	f7ff ff6e 	bl	800ee08 <_strtol_l.constprop.0>
 800ef2c:	bd10      	pop	{r4, pc}
 800ef2e:	46c0      	nop			@ (mov r8, r8)
 800ef30:	20002410 	.word	0x20002410

0800ef34 <_strtoll_l.constprop.0>:
 800ef34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef36:	b08d      	sub	sp, #52	@ 0x34
 800ef38:	000c      	movs	r4, r1
 800ef3a:	9102      	str	r1, [sp, #8]
 800ef3c:	001e      	movs	r6, r3
 800ef3e:	2108      	movs	r1, #8
 800ef40:	4f4c      	ldr	r7, [pc, #304]	@ (800f074 <_strtoll_l.constprop.0+0x140>)
 800ef42:	900a      	str	r0, [sp, #40]	@ 0x28
 800ef44:	9203      	str	r2, [sp, #12]
 800ef46:	0023      	movs	r3, r4
 800ef48:	781a      	ldrb	r2, [r3, #0]
 800ef4a:	3401      	adds	r4, #1
 800ef4c:	5cbd      	ldrb	r5, [r7, r2]
 800ef4e:	0028      	movs	r0, r5
 800ef50:	4008      	ands	r0, r1
 800ef52:	420d      	tst	r5, r1
 800ef54:	d1f7      	bne.n	800ef46 <_strtoll_l.constprop.0+0x12>
 800ef56:	0015      	movs	r5, r2
 800ef58:	2a2d      	cmp	r2, #45	@ 0x2d
 800ef5a:	d14f      	bne.n	800effc <_strtoll_l.constprop.0+0xc8>
 800ef5c:	7825      	ldrb	r5, [r4, #0]
 800ef5e:	1c9c      	adds	r4, r3, #2
 800ef60:	2301      	movs	r3, #1
 800ef62:	9301      	str	r3, [sp, #4]
 800ef64:	2210      	movs	r2, #16
 800ef66:	0033      	movs	r3, r6
 800ef68:	4393      	bics	r3, r2
 800ef6a:	d109      	bne.n	800ef80 <_strtoll_l.constprop.0+0x4c>
 800ef6c:	2d30      	cmp	r5, #48	@ 0x30
 800ef6e:	d14b      	bne.n	800f008 <_strtoll_l.constprop.0+0xd4>
 800ef70:	2120      	movs	r1, #32
 800ef72:	7823      	ldrb	r3, [r4, #0]
 800ef74:	438b      	bics	r3, r1
 800ef76:	2b58      	cmp	r3, #88	@ 0x58
 800ef78:	d146      	bne.n	800f008 <_strtoll_l.constprop.0+0xd4>
 800ef7a:	0016      	movs	r6, r2
 800ef7c:	7865      	ldrb	r5, [r4, #1]
 800ef7e:	3402      	adds	r4, #2
 800ef80:	2001      	movs	r0, #1
 800ef82:	2300      	movs	r3, #0
 800ef84:	493c      	ldr	r1, [pc, #240]	@ (800f078 <_strtoll_l.constprop.0+0x144>)
 800ef86:	9a01      	ldr	r2, [sp, #4]
 800ef88:	4240      	negs	r0, r0
 800ef8a:	1812      	adds	r2, r2, r0
 800ef8c:	414b      	adcs	r3, r1
 800ef8e:	9204      	str	r2, [sp, #16]
 800ef90:	9305      	str	r3, [sp, #20]
 800ef92:	9804      	ldr	r0, [sp, #16]
 800ef94:	9905      	ldr	r1, [sp, #20]
 800ef96:	17f3      	asrs	r3, r6, #31
 800ef98:	0032      	movs	r2, r6
 800ef9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef9c:	f7f1 fac8 	bl	8000530 <__aeabi_uldivmod>
 800efa0:	2300      	movs	r3, #0
 800efa2:	000f      	movs	r7, r1
 800efa4:	9008      	str	r0, [sp, #32]
 800efa6:	2100      	movs	r1, #0
 800efa8:	2000      	movs	r0, #0
 800efaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800efac:	002a      	movs	r2, r5
 800efae:	3a30      	subs	r2, #48	@ 0x30
 800efb0:	2a09      	cmp	r2, #9
 800efb2:	d830      	bhi.n	800f016 <_strtoll_l.constprop.0+0xe2>
 800efb4:	0015      	movs	r5, r2
 800efb6:	42ae      	cmp	r6, r5
 800efb8:	dd3c      	ble.n	800f034 <_strtoll_l.constprop.0+0x100>
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	d01b      	beq.n	800eff6 <_strtoll_l.constprop.0+0xc2>
 800efbe:	42b9      	cmp	r1, r7
 800efc0:	d835      	bhi.n	800f02e <_strtoll_l.constprop.0+0xfa>
 800efc2:	d102      	bne.n	800efca <_strtoll_l.constprop.0+0x96>
 800efc4:	9b08      	ldr	r3, [sp, #32]
 800efc6:	4298      	cmp	r0, r3
 800efc8:	d831      	bhi.n	800f02e <_strtoll_l.constprop.0+0xfa>
 800efca:	9b08      	ldr	r3, [sp, #32]
 800efcc:	4283      	cmp	r3, r0
 800efce:	d104      	bne.n	800efda <_strtoll_l.constprop.0+0xa6>
 800efd0:	428f      	cmp	r7, r1
 800efd2:	d102      	bne.n	800efda <_strtoll_l.constprop.0+0xa6>
 800efd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efd6:	42ab      	cmp	r3, r5
 800efd8:	db29      	blt.n	800f02e <_strtoll_l.constprop.0+0xfa>
 800efda:	0002      	movs	r2, r0
 800efdc:	000b      	movs	r3, r1
 800efde:	0030      	movs	r0, r6
 800efe0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800efe2:	f7f1 fac5 	bl	8000570 <__aeabi_lmul>
 800efe6:	17eb      	asrs	r3, r5, #31
 800efe8:	9506      	str	r5, [sp, #24]
 800efea:	9307      	str	r3, [sp, #28]
 800efec:	9a06      	ldr	r2, [sp, #24]
 800efee:	9b07      	ldr	r3, [sp, #28]
 800eff0:	1880      	adds	r0, r0, r2
 800eff2:	4159      	adcs	r1, r3
 800eff4:	2301      	movs	r3, #1
 800eff6:	7825      	ldrb	r5, [r4, #0]
 800eff8:	3401      	adds	r4, #1
 800effa:	e7d7      	b.n	800efac <_strtoll_l.constprop.0+0x78>
 800effc:	9001      	str	r0, [sp, #4]
 800effe:	2a2b      	cmp	r2, #43	@ 0x2b
 800f000:	d1b0      	bne.n	800ef64 <_strtoll_l.constprop.0+0x30>
 800f002:	7825      	ldrb	r5, [r4, #0]
 800f004:	1c9c      	adds	r4, r3, #2
 800f006:	e7ad      	b.n	800ef64 <_strtoll_l.constprop.0+0x30>
 800f008:	2e00      	cmp	r6, #0
 800f00a:	d1b9      	bne.n	800ef80 <_strtoll_l.constprop.0+0x4c>
 800f00c:	3608      	adds	r6, #8
 800f00e:	2d30      	cmp	r5, #48	@ 0x30
 800f010:	d0b6      	beq.n	800ef80 <_strtoll_l.constprop.0+0x4c>
 800f012:	3602      	adds	r6, #2
 800f014:	e7b4      	b.n	800ef80 <_strtoll_l.constprop.0+0x4c>
 800f016:	002a      	movs	r2, r5
 800f018:	3a41      	subs	r2, #65	@ 0x41
 800f01a:	2a19      	cmp	r2, #25
 800f01c:	d801      	bhi.n	800f022 <_strtoll_l.constprop.0+0xee>
 800f01e:	3d37      	subs	r5, #55	@ 0x37
 800f020:	e7c9      	b.n	800efb6 <_strtoll_l.constprop.0+0x82>
 800f022:	002a      	movs	r2, r5
 800f024:	3a61      	subs	r2, #97	@ 0x61
 800f026:	2a19      	cmp	r2, #25
 800f028:	d804      	bhi.n	800f034 <_strtoll_l.constprop.0+0x100>
 800f02a:	3d57      	subs	r5, #87	@ 0x57
 800f02c:	e7c3      	b.n	800efb6 <_strtoll_l.constprop.0+0x82>
 800f02e:	2301      	movs	r3, #1
 800f030:	425b      	negs	r3, r3
 800f032:	e7e0      	b.n	800eff6 <_strtoll_l.constprop.0+0xc2>
 800f034:	1c5a      	adds	r2, r3, #1
 800f036:	d109      	bne.n	800f04c <_strtoll_l.constprop.0+0x118>
 800f038:	9804      	ldr	r0, [sp, #16]
 800f03a:	9905      	ldr	r1, [sp, #20]
 800f03c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f03e:	3323      	adds	r3, #35	@ 0x23
 800f040:	6013      	str	r3, [r2, #0]
 800f042:	9b03      	ldr	r3, [sp, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10e      	bne.n	800f066 <_strtoll_l.constprop.0+0x132>
 800f048:	b00d      	add	sp, #52	@ 0x34
 800f04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f04c:	9a01      	ldr	r2, [sp, #4]
 800f04e:	2a00      	cmp	r2, #0
 800f050:	d004      	beq.n	800f05c <_strtoll_l.constprop.0+0x128>
 800f052:	0005      	movs	r5, r0
 800f054:	000e      	movs	r6, r1
 800f056:	2100      	movs	r1, #0
 800f058:	4268      	negs	r0, r5
 800f05a:	41b1      	sbcs	r1, r6
 800f05c:	9a03      	ldr	r2, [sp, #12]
 800f05e:	2a00      	cmp	r2, #0
 800f060:	d0f2      	beq.n	800f048 <_strtoll_l.constprop.0+0x114>
 800f062:	2b00      	cmp	r3, #0
 800f064:	d001      	beq.n	800f06a <_strtoll_l.constprop.0+0x136>
 800f066:	1e63      	subs	r3, r4, #1
 800f068:	9302      	str	r3, [sp, #8]
 800f06a:	9b03      	ldr	r3, [sp, #12]
 800f06c:	9a02      	ldr	r2, [sp, #8]
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	e7ea      	b.n	800f048 <_strtoll_l.constprop.0+0x114>
 800f072:	46c0      	nop			@ (mov r8, r8)
 800f074:	080125b9 	.word	0x080125b9
 800f078:	7fffffff 	.word	0x7fffffff

0800f07c <strtoll>:
 800f07c:	b510      	push	{r4, lr}
 800f07e:	4c04      	ldr	r4, [pc, #16]	@ (800f090 <strtoll+0x14>)
 800f080:	0013      	movs	r3, r2
 800f082:	000a      	movs	r2, r1
 800f084:	0001      	movs	r1, r0
 800f086:	6820      	ldr	r0, [r4, #0]
 800f088:	f7ff ff54 	bl	800ef34 <_strtoll_l.constprop.0>
 800f08c:	bd10      	pop	{r4, pc}
 800f08e:	46c0      	nop			@ (mov r8, r8)
 800f090:	20002410 	.word	0x20002410

0800f094 <std>:
 800f094:	2300      	movs	r3, #0
 800f096:	b510      	push	{r4, lr}
 800f098:	0004      	movs	r4, r0
 800f09a:	6003      	str	r3, [r0, #0]
 800f09c:	6043      	str	r3, [r0, #4]
 800f09e:	6083      	str	r3, [r0, #8]
 800f0a0:	8181      	strh	r1, [r0, #12]
 800f0a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f0a4:	81c2      	strh	r2, [r0, #14]
 800f0a6:	6103      	str	r3, [r0, #16]
 800f0a8:	6143      	str	r3, [r0, #20]
 800f0aa:	6183      	str	r3, [r0, #24]
 800f0ac:	0019      	movs	r1, r3
 800f0ae:	2208      	movs	r2, #8
 800f0b0:	305c      	adds	r0, #92	@ 0x5c
 800f0b2:	f000 f91f 	bl	800f2f4 <memset>
 800f0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e4 <std+0x50>)
 800f0b8:	6224      	str	r4, [r4, #32]
 800f0ba:	6263      	str	r3, [r4, #36]	@ 0x24
 800f0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e8 <std+0x54>)
 800f0be:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ec <std+0x58>)
 800f0c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f0f0 <std+0x5c>)
 800f0c6:	6323      	str	r3, [r4, #48]	@ 0x30
 800f0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f0f4 <std+0x60>)
 800f0ca:	429c      	cmp	r4, r3
 800f0cc:	d005      	beq.n	800f0da <std+0x46>
 800f0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f0f8 <std+0x64>)
 800f0d0:	429c      	cmp	r4, r3
 800f0d2:	d002      	beq.n	800f0da <std+0x46>
 800f0d4:	4b09      	ldr	r3, [pc, #36]	@ (800f0fc <std+0x68>)
 800f0d6:	429c      	cmp	r4, r3
 800f0d8:	d103      	bne.n	800f0e2 <std+0x4e>
 800f0da:	0020      	movs	r0, r4
 800f0dc:	3058      	adds	r0, #88	@ 0x58
 800f0de:	f000 f99b 	bl	800f418 <__retarget_lock_init_recursive>
 800f0e2:	bd10      	pop	{r4, pc}
 800f0e4:	0800f25d 	.word	0x0800f25d
 800f0e8:	0800f285 	.word	0x0800f285
 800f0ec:	0800f2bd 	.word	0x0800f2bd
 800f0f0:	0800f2e9 	.word	0x0800f2e9
 800f0f4:	20003814 	.word	0x20003814
 800f0f8:	2000387c 	.word	0x2000387c
 800f0fc:	200038e4 	.word	0x200038e4

0800f100 <stdio_exit_handler>:
 800f100:	b510      	push	{r4, lr}
 800f102:	4a03      	ldr	r2, [pc, #12]	@ (800f110 <stdio_exit_handler+0x10>)
 800f104:	4903      	ldr	r1, [pc, #12]	@ (800f114 <stdio_exit_handler+0x14>)
 800f106:	4804      	ldr	r0, [pc, #16]	@ (800f118 <stdio_exit_handler+0x18>)
 800f108:	f000 f86c 	bl	800f1e4 <_fwalk_sglue>
 800f10c:	bd10      	pop	{r4, pc}
 800f10e:	46c0      	nop			@ (mov r8, r8)
 800f110:	20002298 	.word	0x20002298
 800f114:	08011009 	.word	0x08011009
 800f118:	20002414 	.word	0x20002414

0800f11c <cleanup_stdio>:
 800f11c:	6841      	ldr	r1, [r0, #4]
 800f11e:	4b0b      	ldr	r3, [pc, #44]	@ (800f14c <cleanup_stdio+0x30>)
 800f120:	b510      	push	{r4, lr}
 800f122:	0004      	movs	r4, r0
 800f124:	4299      	cmp	r1, r3
 800f126:	d001      	beq.n	800f12c <cleanup_stdio+0x10>
 800f128:	f001 ff6e 	bl	8011008 <_fflush_r>
 800f12c:	68a1      	ldr	r1, [r4, #8]
 800f12e:	4b08      	ldr	r3, [pc, #32]	@ (800f150 <cleanup_stdio+0x34>)
 800f130:	4299      	cmp	r1, r3
 800f132:	d002      	beq.n	800f13a <cleanup_stdio+0x1e>
 800f134:	0020      	movs	r0, r4
 800f136:	f001 ff67 	bl	8011008 <_fflush_r>
 800f13a:	68e1      	ldr	r1, [r4, #12]
 800f13c:	4b05      	ldr	r3, [pc, #20]	@ (800f154 <cleanup_stdio+0x38>)
 800f13e:	4299      	cmp	r1, r3
 800f140:	d002      	beq.n	800f148 <cleanup_stdio+0x2c>
 800f142:	0020      	movs	r0, r4
 800f144:	f001 ff60 	bl	8011008 <_fflush_r>
 800f148:	bd10      	pop	{r4, pc}
 800f14a:	46c0      	nop			@ (mov r8, r8)
 800f14c:	20003814 	.word	0x20003814
 800f150:	2000387c 	.word	0x2000387c
 800f154:	200038e4 	.word	0x200038e4

0800f158 <global_stdio_init.part.0>:
 800f158:	b510      	push	{r4, lr}
 800f15a:	4b09      	ldr	r3, [pc, #36]	@ (800f180 <global_stdio_init.part.0+0x28>)
 800f15c:	4a09      	ldr	r2, [pc, #36]	@ (800f184 <global_stdio_init.part.0+0x2c>)
 800f15e:	2104      	movs	r1, #4
 800f160:	601a      	str	r2, [r3, #0]
 800f162:	4809      	ldr	r0, [pc, #36]	@ (800f188 <global_stdio_init.part.0+0x30>)
 800f164:	2200      	movs	r2, #0
 800f166:	f7ff ff95 	bl	800f094 <std>
 800f16a:	2201      	movs	r2, #1
 800f16c:	2109      	movs	r1, #9
 800f16e:	4807      	ldr	r0, [pc, #28]	@ (800f18c <global_stdio_init.part.0+0x34>)
 800f170:	f7ff ff90 	bl	800f094 <std>
 800f174:	2202      	movs	r2, #2
 800f176:	2112      	movs	r1, #18
 800f178:	4805      	ldr	r0, [pc, #20]	@ (800f190 <global_stdio_init.part.0+0x38>)
 800f17a:	f7ff ff8b 	bl	800f094 <std>
 800f17e:	bd10      	pop	{r4, pc}
 800f180:	2000394c 	.word	0x2000394c
 800f184:	0800f101 	.word	0x0800f101
 800f188:	20003814 	.word	0x20003814
 800f18c:	2000387c 	.word	0x2000387c
 800f190:	200038e4 	.word	0x200038e4

0800f194 <__sfp_lock_acquire>:
 800f194:	b510      	push	{r4, lr}
 800f196:	4802      	ldr	r0, [pc, #8]	@ (800f1a0 <__sfp_lock_acquire+0xc>)
 800f198:	f000 f93f 	bl	800f41a <__retarget_lock_acquire_recursive>
 800f19c:	bd10      	pop	{r4, pc}
 800f19e:	46c0      	nop			@ (mov r8, r8)
 800f1a0:	20003955 	.word	0x20003955

0800f1a4 <__sfp_lock_release>:
 800f1a4:	b510      	push	{r4, lr}
 800f1a6:	4802      	ldr	r0, [pc, #8]	@ (800f1b0 <__sfp_lock_release+0xc>)
 800f1a8:	f000 f938 	bl	800f41c <__retarget_lock_release_recursive>
 800f1ac:	bd10      	pop	{r4, pc}
 800f1ae:	46c0      	nop			@ (mov r8, r8)
 800f1b0:	20003955 	.word	0x20003955

0800f1b4 <__sinit>:
 800f1b4:	b510      	push	{r4, lr}
 800f1b6:	0004      	movs	r4, r0
 800f1b8:	f7ff ffec 	bl	800f194 <__sfp_lock_acquire>
 800f1bc:	6a23      	ldr	r3, [r4, #32]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d002      	beq.n	800f1c8 <__sinit+0x14>
 800f1c2:	f7ff ffef 	bl	800f1a4 <__sfp_lock_release>
 800f1c6:	bd10      	pop	{r4, pc}
 800f1c8:	4b04      	ldr	r3, [pc, #16]	@ (800f1dc <__sinit+0x28>)
 800f1ca:	6223      	str	r3, [r4, #32]
 800f1cc:	4b04      	ldr	r3, [pc, #16]	@ (800f1e0 <__sinit+0x2c>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d1f6      	bne.n	800f1c2 <__sinit+0xe>
 800f1d4:	f7ff ffc0 	bl	800f158 <global_stdio_init.part.0>
 800f1d8:	e7f3      	b.n	800f1c2 <__sinit+0xe>
 800f1da:	46c0      	nop			@ (mov r8, r8)
 800f1dc:	0800f11d 	.word	0x0800f11d
 800f1e0:	2000394c 	.word	0x2000394c

0800f1e4 <_fwalk_sglue>:
 800f1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1e6:	0014      	movs	r4, r2
 800f1e8:	2600      	movs	r6, #0
 800f1ea:	9000      	str	r0, [sp, #0]
 800f1ec:	9101      	str	r1, [sp, #4]
 800f1ee:	68a5      	ldr	r5, [r4, #8]
 800f1f0:	6867      	ldr	r7, [r4, #4]
 800f1f2:	3f01      	subs	r7, #1
 800f1f4:	d504      	bpl.n	800f200 <_fwalk_sglue+0x1c>
 800f1f6:	6824      	ldr	r4, [r4, #0]
 800f1f8:	2c00      	cmp	r4, #0
 800f1fa:	d1f8      	bne.n	800f1ee <_fwalk_sglue+0xa>
 800f1fc:	0030      	movs	r0, r6
 800f1fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f200:	89ab      	ldrh	r3, [r5, #12]
 800f202:	2b01      	cmp	r3, #1
 800f204:	d908      	bls.n	800f218 <_fwalk_sglue+0x34>
 800f206:	220e      	movs	r2, #14
 800f208:	5eab      	ldrsh	r3, [r5, r2]
 800f20a:	3301      	adds	r3, #1
 800f20c:	d004      	beq.n	800f218 <_fwalk_sglue+0x34>
 800f20e:	0029      	movs	r1, r5
 800f210:	9800      	ldr	r0, [sp, #0]
 800f212:	9b01      	ldr	r3, [sp, #4]
 800f214:	4798      	blx	r3
 800f216:	4306      	orrs	r6, r0
 800f218:	3568      	adds	r5, #104	@ 0x68
 800f21a:	e7ea      	b.n	800f1f2 <_fwalk_sglue+0xe>

0800f21c <siprintf>:
 800f21c:	b40e      	push	{r1, r2, r3}
 800f21e:	b500      	push	{lr}
 800f220:	490b      	ldr	r1, [pc, #44]	@ (800f250 <siprintf+0x34>)
 800f222:	b09c      	sub	sp, #112	@ 0x70
 800f224:	ab1d      	add	r3, sp, #116	@ 0x74
 800f226:	9002      	str	r0, [sp, #8]
 800f228:	9006      	str	r0, [sp, #24]
 800f22a:	9107      	str	r1, [sp, #28]
 800f22c:	9104      	str	r1, [sp, #16]
 800f22e:	4809      	ldr	r0, [pc, #36]	@ (800f254 <siprintf+0x38>)
 800f230:	4909      	ldr	r1, [pc, #36]	@ (800f258 <siprintf+0x3c>)
 800f232:	cb04      	ldmia	r3!, {r2}
 800f234:	9105      	str	r1, [sp, #20]
 800f236:	6800      	ldr	r0, [r0, #0]
 800f238:	a902      	add	r1, sp, #8
 800f23a:	9301      	str	r3, [sp, #4]
 800f23c:	f001 fa9e 	bl	801077c <_svfiprintf_r>
 800f240:	2200      	movs	r2, #0
 800f242:	9b02      	ldr	r3, [sp, #8]
 800f244:	701a      	strb	r2, [r3, #0]
 800f246:	b01c      	add	sp, #112	@ 0x70
 800f248:	bc08      	pop	{r3}
 800f24a:	b003      	add	sp, #12
 800f24c:	4718      	bx	r3
 800f24e:	46c0      	nop			@ (mov r8, r8)
 800f250:	7fffffff 	.word	0x7fffffff
 800f254:	20002410 	.word	0x20002410
 800f258:	ffff0208 	.word	0xffff0208

0800f25c <__sread>:
 800f25c:	b570      	push	{r4, r5, r6, lr}
 800f25e:	000c      	movs	r4, r1
 800f260:	250e      	movs	r5, #14
 800f262:	5f49      	ldrsh	r1, [r1, r5]
 800f264:	f000 f886 	bl	800f374 <_read_r>
 800f268:	2800      	cmp	r0, #0
 800f26a:	db03      	blt.n	800f274 <__sread+0x18>
 800f26c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f26e:	181b      	adds	r3, r3, r0
 800f270:	6563      	str	r3, [r4, #84]	@ 0x54
 800f272:	bd70      	pop	{r4, r5, r6, pc}
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	4a02      	ldr	r2, [pc, #8]	@ (800f280 <__sread+0x24>)
 800f278:	4013      	ands	r3, r2
 800f27a:	81a3      	strh	r3, [r4, #12]
 800f27c:	e7f9      	b.n	800f272 <__sread+0x16>
 800f27e:	46c0      	nop			@ (mov r8, r8)
 800f280:	ffffefff 	.word	0xffffefff

0800f284 <__swrite>:
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f286:	001f      	movs	r7, r3
 800f288:	898b      	ldrh	r3, [r1, #12]
 800f28a:	0005      	movs	r5, r0
 800f28c:	000c      	movs	r4, r1
 800f28e:	0016      	movs	r6, r2
 800f290:	05db      	lsls	r3, r3, #23
 800f292:	d505      	bpl.n	800f2a0 <__swrite+0x1c>
 800f294:	230e      	movs	r3, #14
 800f296:	5ec9      	ldrsh	r1, [r1, r3]
 800f298:	2200      	movs	r2, #0
 800f29a:	2302      	movs	r3, #2
 800f29c:	f000 f856 	bl	800f34c <_lseek_r>
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	4a05      	ldr	r2, [pc, #20]	@ (800f2b8 <__swrite+0x34>)
 800f2a4:	0028      	movs	r0, r5
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	81a3      	strh	r3, [r4, #12]
 800f2aa:	0032      	movs	r2, r6
 800f2ac:	230e      	movs	r3, #14
 800f2ae:	5ee1      	ldrsh	r1, [r4, r3]
 800f2b0:	003b      	movs	r3, r7
 800f2b2:	f000 f873 	bl	800f39c <_write_r>
 800f2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2b8:	ffffefff 	.word	0xffffefff

0800f2bc <__sseek>:
 800f2bc:	b570      	push	{r4, r5, r6, lr}
 800f2be:	000c      	movs	r4, r1
 800f2c0:	250e      	movs	r5, #14
 800f2c2:	5f49      	ldrsh	r1, [r1, r5]
 800f2c4:	f000 f842 	bl	800f34c <_lseek_r>
 800f2c8:	89a3      	ldrh	r3, [r4, #12]
 800f2ca:	1c42      	adds	r2, r0, #1
 800f2cc:	d103      	bne.n	800f2d6 <__sseek+0x1a>
 800f2ce:	4a05      	ldr	r2, [pc, #20]	@ (800f2e4 <__sseek+0x28>)
 800f2d0:	4013      	ands	r3, r2
 800f2d2:	81a3      	strh	r3, [r4, #12]
 800f2d4:	bd70      	pop	{r4, r5, r6, pc}
 800f2d6:	2280      	movs	r2, #128	@ 0x80
 800f2d8:	0152      	lsls	r2, r2, #5
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	81a3      	strh	r3, [r4, #12]
 800f2de:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2e0:	e7f8      	b.n	800f2d4 <__sseek+0x18>
 800f2e2:	46c0      	nop			@ (mov r8, r8)
 800f2e4:	ffffefff 	.word	0xffffefff

0800f2e8 <__sclose>:
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	230e      	movs	r3, #14
 800f2ec:	5ec9      	ldrsh	r1, [r1, r3]
 800f2ee:	f000 f81b 	bl	800f328 <_close_r>
 800f2f2:	bd10      	pop	{r4, pc}

0800f2f4 <memset>:
 800f2f4:	0003      	movs	r3, r0
 800f2f6:	1882      	adds	r2, r0, r2
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d100      	bne.n	800f2fe <memset+0xa>
 800f2fc:	4770      	bx	lr
 800f2fe:	7019      	strb	r1, [r3, #0]
 800f300:	3301      	adds	r3, #1
 800f302:	e7f9      	b.n	800f2f8 <memset+0x4>

0800f304 <strncmp>:
 800f304:	b530      	push	{r4, r5, lr}
 800f306:	0005      	movs	r5, r0
 800f308:	1e10      	subs	r0, r2, #0
 800f30a:	d00b      	beq.n	800f324 <strncmp+0x20>
 800f30c:	2400      	movs	r4, #0
 800f30e:	3a01      	subs	r2, #1
 800f310:	5d2b      	ldrb	r3, [r5, r4]
 800f312:	5d08      	ldrb	r0, [r1, r4]
 800f314:	4283      	cmp	r3, r0
 800f316:	d104      	bne.n	800f322 <strncmp+0x1e>
 800f318:	42a2      	cmp	r2, r4
 800f31a:	d002      	beq.n	800f322 <strncmp+0x1e>
 800f31c:	3401      	adds	r4, #1
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1f6      	bne.n	800f310 <strncmp+0xc>
 800f322:	1a18      	subs	r0, r3, r0
 800f324:	bd30      	pop	{r4, r5, pc}
	...

0800f328 <_close_r>:
 800f328:	2300      	movs	r3, #0
 800f32a:	b570      	push	{r4, r5, r6, lr}
 800f32c:	4d06      	ldr	r5, [pc, #24]	@ (800f348 <_close_r+0x20>)
 800f32e:	0004      	movs	r4, r0
 800f330:	0008      	movs	r0, r1
 800f332:	602b      	str	r3, [r5, #0]
 800f334:	f7f8 fd38 	bl	8007da8 <_close>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d103      	bne.n	800f344 <_close_r+0x1c>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d000      	beq.n	800f344 <_close_r+0x1c>
 800f342:	6023      	str	r3, [r4, #0]
 800f344:	bd70      	pop	{r4, r5, r6, pc}
 800f346:	46c0      	nop			@ (mov r8, r8)
 800f348:	20003950 	.word	0x20003950

0800f34c <_lseek_r>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	0004      	movs	r4, r0
 800f350:	0008      	movs	r0, r1
 800f352:	0011      	movs	r1, r2
 800f354:	001a      	movs	r2, r3
 800f356:	2300      	movs	r3, #0
 800f358:	4d05      	ldr	r5, [pc, #20]	@ (800f370 <_lseek_r+0x24>)
 800f35a:	602b      	str	r3, [r5, #0]
 800f35c:	f7f8 fd45 	bl	8007dea <_lseek>
 800f360:	1c43      	adds	r3, r0, #1
 800f362:	d103      	bne.n	800f36c <_lseek_r+0x20>
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d000      	beq.n	800f36c <_lseek_r+0x20>
 800f36a:	6023      	str	r3, [r4, #0]
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
 800f36e:	46c0      	nop			@ (mov r8, r8)
 800f370:	20003950 	.word	0x20003950

0800f374 <_read_r>:
 800f374:	b570      	push	{r4, r5, r6, lr}
 800f376:	0004      	movs	r4, r0
 800f378:	0008      	movs	r0, r1
 800f37a:	0011      	movs	r1, r2
 800f37c:	001a      	movs	r2, r3
 800f37e:	2300      	movs	r3, #0
 800f380:	4d05      	ldr	r5, [pc, #20]	@ (800f398 <_read_r+0x24>)
 800f382:	602b      	str	r3, [r5, #0]
 800f384:	f7f8 fcd7 	bl	8007d36 <_read>
 800f388:	1c43      	adds	r3, r0, #1
 800f38a:	d103      	bne.n	800f394 <_read_r+0x20>
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d000      	beq.n	800f394 <_read_r+0x20>
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	bd70      	pop	{r4, r5, r6, pc}
 800f396:	46c0      	nop			@ (mov r8, r8)
 800f398:	20003950 	.word	0x20003950

0800f39c <_write_r>:
 800f39c:	b570      	push	{r4, r5, r6, lr}
 800f39e:	0004      	movs	r4, r0
 800f3a0:	0008      	movs	r0, r1
 800f3a2:	0011      	movs	r1, r2
 800f3a4:	001a      	movs	r2, r3
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	4d05      	ldr	r5, [pc, #20]	@ (800f3c0 <_write_r+0x24>)
 800f3aa:	602b      	str	r3, [r5, #0]
 800f3ac:	f7f8 fce0 	bl	8007d70 <_write>
 800f3b0:	1c43      	adds	r3, r0, #1
 800f3b2:	d103      	bne.n	800f3bc <_write_r+0x20>
 800f3b4:	682b      	ldr	r3, [r5, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d000      	beq.n	800f3bc <_write_r+0x20>
 800f3ba:	6023      	str	r3, [r4, #0]
 800f3bc:	bd70      	pop	{r4, r5, r6, pc}
 800f3be:	46c0      	nop			@ (mov r8, r8)
 800f3c0:	20003950 	.word	0x20003950

0800f3c4 <__errno>:
 800f3c4:	4b01      	ldr	r3, [pc, #4]	@ (800f3cc <__errno+0x8>)
 800f3c6:	6818      	ldr	r0, [r3, #0]
 800f3c8:	4770      	bx	lr
 800f3ca:	46c0      	nop			@ (mov r8, r8)
 800f3cc:	20002410 	.word	0x20002410

0800f3d0 <__libc_init_array>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	2600      	movs	r6, #0
 800f3d4:	4c0c      	ldr	r4, [pc, #48]	@ (800f408 <__libc_init_array+0x38>)
 800f3d6:	4d0d      	ldr	r5, [pc, #52]	@ (800f40c <__libc_init_array+0x3c>)
 800f3d8:	1b64      	subs	r4, r4, r5
 800f3da:	10a4      	asrs	r4, r4, #2
 800f3dc:	42a6      	cmp	r6, r4
 800f3de:	d109      	bne.n	800f3f4 <__libc_init_array+0x24>
 800f3e0:	2600      	movs	r6, #0
 800f3e2:	f002 fadb 	bl	801199c <_init>
 800f3e6:	4c0a      	ldr	r4, [pc, #40]	@ (800f410 <__libc_init_array+0x40>)
 800f3e8:	4d0a      	ldr	r5, [pc, #40]	@ (800f414 <__libc_init_array+0x44>)
 800f3ea:	1b64      	subs	r4, r4, r5
 800f3ec:	10a4      	asrs	r4, r4, #2
 800f3ee:	42a6      	cmp	r6, r4
 800f3f0:	d105      	bne.n	800f3fe <__libc_init_array+0x2e>
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
 800f3f4:	00b3      	lsls	r3, r6, #2
 800f3f6:	58eb      	ldr	r3, [r5, r3]
 800f3f8:	4798      	blx	r3
 800f3fa:	3601      	adds	r6, #1
 800f3fc:	e7ee      	b.n	800f3dc <__libc_init_array+0xc>
 800f3fe:	00b3      	lsls	r3, r6, #2
 800f400:	58eb      	ldr	r3, [r5, r3]
 800f402:	4798      	blx	r3
 800f404:	3601      	adds	r6, #1
 800f406:	e7f2      	b.n	800f3ee <__libc_init_array+0x1e>
 800f408:	08012928 	.word	0x08012928
 800f40c:	08012928 	.word	0x08012928
 800f410:	0801292c 	.word	0x0801292c
 800f414:	08012928 	.word	0x08012928

0800f418 <__retarget_lock_init_recursive>:
 800f418:	4770      	bx	lr

0800f41a <__retarget_lock_acquire_recursive>:
 800f41a:	4770      	bx	lr

0800f41c <__retarget_lock_release_recursive>:
 800f41c:	4770      	bx	lr

0800f41e <memcpy>:
 800f41e:	2300      	movs	r3, #0
 800f420:	b510      	push	{r4, lr}
 800f422:	429a      	cmp	r2, r3
 800f424:	d100      	bne.n	800f428 <memcpy+0xa>
 800f426:	bd10      	pop	{r4, pc}
 800f428:	5ccc      	ldrb	r4, [r1, r3]
 800f42a:	54c4      	strb	r4, [r0, r3]
 800f42c:	3301      	adds	r3, #1
 800f42e:	e7f8      	b.n	800f422 <memcpy+0x4>

0800f430 <nan>:
 800f430:	2000      	movs	r0, #0
 800f432:	4901      	ldr	r1, [pc, #4]	@ (800f438 <nan+0x8>)
 800f434:	4770      	bx	lr
 800f436:	46c0      	nop			@ (mov r8, r8)
 800f438:	7ff80000 	.word	0x7ff80000

0800f43c <_free_r>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	0005      	movs	r5, r0
 800f440:	1e0c      	subs	r4, r1, #0
 800f442:	d010      	beq.n	800f466 <_free_r+0x2a>
 800f444:	3c04      	subs	r4, #4
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	da00      	bge.n	800f44e <_free_r+0x12>
 800f44c:	18e4      	adds	r4, r4, r3
 800f44e:	0028      	movs	r0, r5
 800f450:	f000 fc4c 	bl	800fcec <__malloc_lock>
 800f454:	4a1d      	ldr	r2, [pc, #116]	@ (800f4cc <_free_r+0x90>)
 800f456:	6813      	ldr	r3, [r2, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d105      	bne.n	800f468 <_free_r+0x2c>
 800f45c:	6063      	str	r3, [r4, #4]
 800f45e:	6014      	str	r4, [r2, #0]
 800f460:	0028      	movs	r0, r5
 800f462:	f000 fc4b 	bl	800fcfc <__malloc_unlock>
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	42a3      	cmp	r3, r4
 800f46a:	d908      	bls.n	800f47e <_free_r+0x42>
 800f46c:	6820      	ldr	r0, [r4, #0]
 800f46e:	1821      	adds	r1, r4, r0
 800f470:	428b      	cmp	r3, r1
 800f472:	d1f3      	bne.n	800f45c <_free_r+0x20>
 800f474:	6819      	ldr	r1, [r3, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	1809      	adds	r1, r1, r0
 800f47a:	6021      	str	r1, [r4, #0]
 800f47c:	e7ee      	b.n	800f45c <_free_r+0x20>
 800f47e:	001a      	movs	r2, r3
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d001      	beq.n	800f48a <_free_r+0x4e>
 800f486:	42a3      	cmp	r3, r4
 800f488:	d9f9      	bls.n	800f47e <_free_r+0x42>
 800f48a:	6811      	ldr	r1, [r2, #0]
 800f48c:	1850      	adds	r0, r2, r1
 800f48e:	42a0      	cmp	r0, r4
 800f490:	d10b      	bne.n	800f4aa <_free_r+0x6e>
 800f492:	6820      	ldr	r0, [r4, #0]
 800f494:	1809      	adds	r1, r1, r0
 800f496:	1850      	adds	r0, r2, r1
 800f498:	6011      	str	r1, [r2, #0]
 800f49a:	4283      	cmp	r3, r0
 800f49c:	d1e0      	bne.n	800f460 <_free_r+0x24>
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	1841      	adds	r1, r0, r1
 800f4a4:	6011      	str	r1, [r2, #0]
 800f4a6:	6053      	str	r3, [r2, #4]
 800f4a8:	e7da      	b.n	800f460 <_free_r+0x24>
 800f4aa:	42a0      	cmp	r0, r4
 800f4ac:	d902      	bls.n	800f4b4 <_free_r+0x78>
 800f4ae:	230c      	movs	r3, #12
 800f4b0:	602b      	str	r3, [r5, #0]
 800f4b2:	e7d5      	b.n	800f460 <_free_r+0x24>
 800f4b4:	6820      	ldr	r0, [r4, #0]
 800f4b6:	1821      	adds	r1, r4, r0
 800f4b8:	428b      	cmp	r3, r1
 800f4ba:	d103      	bne.n	800f4c4 <_free_r+0x88>
 800f4bc:	6819      	ldr	r1, [r3, #0]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	1809      	adds	r1, r1, r0
 800f4c2:	6021      	str	r1, [r4, #0]
 800f4c4:	6063      	str	r3, [r4, #4]
 800f4c6:	6054      	str	r4, [r2, #4]
 800f4c8:	e7ca      	b.n	800f460 <_free_r+0x24>
 800f4ca:	46c0      	nop			@ (mov r8, r8)
 800f4cc:	2000395c 	.word	0x2000395c

0800f4d0 <rshift>:
 800f4d0:	0002      	movs	r2, r0
 800f4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4d4:	6904      	ldr	r4, [r0, #16]
 800f4d6:	b085      	sub	sp, #20
 800f4d8:	3214      	adds	r2, #20
 800f4da:	114b      	asrs	r3, r1, #5
 800f4dc:	0016      	movs	r6, r2
 800f4de:	9302      	str	r3, [sp, #8]
 800f4e0:	429c      	cmp	r4, r3
 800f4e2:	dd31      	ble.n	800f548 <rshift+0x78>
 800f4e4:	261f      	movs	r6, #31
 800f4e6:	000f      	movs	r7, r1
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	00a5      	lsls	r5, r4, #2
 800f4ec:	18d3      	adds	r3, r2, r3
 800f4ee:	4037      	ands	r7, r6
 800f4f0:	1955      	adds	r5, r2, r5
 800f4f2:	9300      	str	r3, [sp, #0]
 800f4f4:	9701      	str	r7, [sp, #4]
 800f4f6:	4231      	tst	r1, r6
 800f4f8:	d10d      	bne.n	800f516 <rshift+0x46>
 800f4fa:	0016      	movs	r6, r2
 800f4fc:	0019      	movs	r1, r3
 800f4fe:	428d      	cmp	r5, r1
 800f500:	d836      	bhi.n	800f570 <rshift+0xa0>
 800f502:	9b00      	ldr	r3, [sp, #0]
 800f504:	2600      	movs	r6, #0
 800f506:	3b03      	subs	r3, #3
 800f508:	429d      	cmp	r5, r3
 800f50a:	d302      	bcc.n	800f512 <rshift+0x42>
 800f50c:	9b02      	ldr	r3, [sp, #8]
 800f50e:	1ae4      	subs	r4, r4, r3
 800f510:	00a6      	lsls	r6, r4, #2
 800f512:	1996      	adds	r6, r2, r6
 800f514:	e018      	b.n	800f548 <rshift+0x78>
 800f516:	2120      	movs	r1, #32
 800f518:	9e01      	ldr	r6, [sp, #4]
 800f51a:	9f01      	ldr	r7, [sp, #4]
 800f51c:	1b89      	subs	r1, r1, r6
 800f51e:	9e00      	ldr	r6, [sp, #0]
 800f520:	9103      	str	r1, [sp, #12]
 800f522:	ce02      	ldmia	r6!, {r1}
 800f524:	4694      	mov	ip, r2
 800f526:	40f9      	lsrs	r1, r7
 800f528:	42b5      	cmp	r5, r6
 800f52a:	d816      	bhi.n	800f55a <rshift+0x8a>
 800f52c:	9b00      	ldr	r3, [sp, #0]
 800f52e:	2600      	movs	r6, #0
 800f530:	3301      	adds	r3, #1
 800f532:	429d      	cmp	r5, r3
 800f534:	d303      	bcc.n	800f53e <rshift+0x6e>
 800f536:	9b02      	ldr	r3, [sp, #8]
 800f538:	1ae4      	subs	r4, r4, r3
 800f53a:	00a6      	lsls	r6, r4, #2
 800f53c:	3e04      	subs	r6, #4
 800f53e:	1996      	adds	r6, r2, r6
 800f540:	6031      	str	r1, [r6, #0]
 800f542:	2900      	cmp	r1, #0
 800f544:	d000      	beq.n	800f548 <rshift+0x78>
 800f546:	3604      	adds	r6, #4
 800f548:	1ab1      	subs	r1, r6, r2
 800f54a:	1089      	asrs	r1, r1, #2
 800f54c:	6101      	str	r1, [r0, #16]
 800f54e:	4296      	cmp	r6, r2
 800f550:	d101      	bne.n	800f556 <rshift+0x86>
 800f552:	2300      	movs	r3, #0
 800f554:	6143      	str	r3, [r0, #20]
 800f556:	b005      	add	sp, #20
 800f558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f55a:	6837      	ldr	r7, [r6, #0]
 800f55c:	9b03      	ldr	r3, [sp, #12]
 800f55e:	409f      	lsls	r7, r3
 800f560:	430f      	orrs	r7, r1
 800f562:	4661      	mov	r1, ip
 800f564:	c180      	stmia	r1!, {r7}
 800f566:	468c      	mov	ip, r1
 800f568:	9b01      	ldr	r3, [sp, #4]
 800f56a:	ce02      	ldmia	r6!, {r1}
 800f56c:	40d9      	lsrs	r1, r3
 800f56e:	e7db      	b.n	800f528 <rshift+0x58>
 800f570:	c980      	ldmia	r1!, {r7}
 800f572:	c680      	stmia	r6!, {r7}
 800f574:	e7c3      	b.n	800f4fe <rshift+0x2e>

0800f576 <__hexdig_fun>:
 800f576:	0002      	movs	r2, r0
 800f578:	3a30      	subs	r2, #48	@ 0x30
 800f57a:	0003      	movs	r3, r0
 800f57c:	2a09      	cmp	r2, #9
 800f57e:	d802      	bhi.n	800f586 <__hexdig_fun+0x10>
 800f580:	3b20      	subs	r3, #32
 800f582:	b2d8      	uxtb	r0, r3
 800f584:	4770      	bx	lr
 800f586:	0002      	movs	r2, r0
 800f588:	3a61      	subs	r2, #97	@ 0x61
 800f58a:	2a05      	cmp	r2, #5
 800f58c:	d801      	bhi.n	800f592 <__hexdig_fun+0x1c>
 800f58e:	3b47      	subs	r3, #71	@ 0x47
 800f590:	e7f7      	b.n	800f582 <__hexdig_fun+0xc>
 800f592:	001a      	movs	r2, r3
 800f594:	3a41      	subs	r2, #65	@ 0x41
 800f596:	2000      	movs	r0, #0
 800f598:	2a05      	cmp	r2, #5
 800f59a:	d8f3      	bhi.n	800f584 <__hexdig_fun+0xe>
 800f59c:	3b27      	subs	r3, #39	@ 0x27
 800f59e:	e7f0      	b.n	800f582 <__hexdig_fun+0xc>

0800f5a0 <__gethex>:
 800f5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5a2:	b089      	sub	sp, #36	@ 0x24
 800f5a4:	9307      	str	r3, [sp, #28]
 800f5a6:	680b      	ldr	r3, [r1, #0]
 800f5a8:	9201      	str	r2, [sp, #4]
 800f5aa:	9003      	str	r0, [sp, #12]
 800f5ac:	9106      	str	r1, [sp, #24]
 800f5ae:	1c9a      	adds	r2, r3, #2
 800f5b0:	0011      	movs	r1, r2
 800f5b2:	3201      	adds	r2, #1
 800f5b4:	1e50      	subs	r0, r2, #1
 800f5b6:	7800      	ldrb	r0, [r0, #0]
 800f5b8:	2830      	cmp	r0, #48	@ 0x30
 800f5ba:	d0f9      	beq.n	800f5b0 <__gethex+0x10>
 800f5bc:	1acb      	subs	r3, r1, r3
 800f5be:	3b02      	subs	r3, #2
 800f5c0:	9305      	str	r3, [sp, #20]
 800f5c2:	9100      	str	r1, [sp, #0]
 800f5c4:	f7ff ffd7 	bl	800f576 <__hexdig_fun>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	001d      	movs	r5, r3
 800f5cc:	9302      	str	r3, [sp, #8]
 800f5ce:	4298      	cmp	r0, r3
 800f5d0:	d11e      	bne.n	800f610 <__gethex+0x70>
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	49a6      	ldr	r1, [pc, #664]	@ (800f870 <__gethex+0x2d0>)
 800f5d6:	9800      	ldr	r0, [sp, #0]
 800f5d8:	f7ff fe94 	bl	800f304 <strncmp>
 800f5dc:	0007      	movs	r7, r0
 800f5de:	42a8      	cmp	r0, r5
 800f5e0:	d000      	beq.n	800f5e4 <__gethex+0x44>
 800f5e2:	e06a      	b.n	800f6ba <__gethex+0x11a>
 800f5e4:	9b00      	ldr	r3, [sp, #0]
 800f5e6:	7858      	ldrb	r0, [r3, #1]
 800f5e8:	1c5c      	adds	r4, r3, #1
 800f5ea:	f7ff ffc4 	bl	800f576 <__hexdig_fun>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	9302      	str	r3, [sp, #8]
 800f5f2:	42a8      	cmp	r0, r5
 800f5f4:	d02f      	beq.n	800f656 <__gethex+0xb6>
 800f5f6:	9400      	str	r4, [sp, #0]
 800f5f8:	9b00      	ldr	r3, [sp, #0]
 800f5fa:	7818      	ldrb	r0, [r3, #0]
 800f5fc:	2830      	cmp	r0, #48	@ 0x30
 800f5fe:	d009      	beq.n	800f614 <__gethex+0x74>
 800f600:	f7ff ffb9 	bl	800f576 <__hexdig_fun>
 800f604:	4242      	negs	r2, r0
 800f606:	4142      	adcs	r2, r0
 800f608:	2301      	movs	r3, #1
 800f60a:	0025      	movs	r5, r4
 800f60c:	9202      	str	r2, [sp, #8]
 800f60e:	9305      	str	r3, [sp, #20]
 800f610:	9c00      	ldr	r4, [sp, #0]
 800f612:	e004      	b.n	800f61e <__gethex+0x7e>
 800f614:	9b00      	ldr	r3, [sp, #0]
 800f616:	3301      	adds	r3, #1
 800f618:	9300      	str	r3, [sp, #0]
 800f61a:	e7ed      	b.n	800f5f8 <__gethex+0x58>
 800f61c:	3401      	adds	r4, #1
 800f61e:	7820      	ldrb	r0, [r4, #0]
 800f620:	f7ff ffa9 	bl	800f576 <__hexdig_fun>
 800f624:	1e07      	subs	r7, r0, #0
 800f626:	d1f9      	bne.n	800f61c <__gethex+0x7c>
 800f628:	2201      	movs	r2, #1
 800f62a:	0020      	movs	r0, r4
 800f62c:	4990      	ldr	r1, [pc, #576]	@ (800f870 <__gethex+0x2d0>)
 800f62e:	f7ff fe69 	bl	800f304 <strncmp>
 800f632:	2800      	cmp	r0, #0
 800f634:	d10d      	bne.n	800f652 <__gethex+0xb2>
 800f636:	2d00      	cmp	r5, #0
 800f638:	d106      	bne.n	800f648 <__gethex+0xa8>
 800f63a:	3401      	adds	r4, #1
 800f63c:	0025      	movs	r5, r4
 800f63e:	7820      	ldrb	r0, [r4, #0]
 800f640:	f7ff ff99 	bl	800f576 <__hexdig_fun>
 800f644:	2800      	cmp	r0, #0
 800f646:	d102      	bne.n	800f64e <__gethex+0xae>
 800f648:	1b2d      	subs	r5, r5, r4
 800f64a:	00af      	lsls	r7, r5, #2
 800f64c:	e003      	b.n	800f656 <__gethex+0xb6>
 800f64e:	3401      	adds	r4, #1
 800f650:	e7f5      	b.n	800f63e <__gethex+0x9e>
 800f652:	2d00      	cmp	r5, #0
 800f654:	d1f8      	bne.n	800f648 <__gethex+0xa8>
 800f656:	2220      	movs	r2, #32
 800f658:	7823      	ldrb	r3, [r4, #0]
 800f65a:	0026      	movs	r6, r4
 800f65c:	4393      	bics	r3, r2
 800f65e:	2b50      	cmp	r3, #80	@ 0x50
 800f660:	d11d      	bne.n	800f69e <__gethex+0xfe>
 800f662:	7863      	ldrb	r3, [r4, #1]
 800f664:	2b2b      	cmp	r3, #43	@ 0x2b
 800f666:	d02d      	beq.n	800f6c4 <__gethex+0x124>
 800f668:	2b2d      	cmp	r3, #45	@ 0x2d
 800f66a:	d02f      	beq.n	800f6cc <__gethex+0x12c>
 800f66c:	2300      	movs	r3, #0
 800f66e:	1c66      	adds	r6, r4, #1
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	7830      	ldrb	r0, [r6, #0]
 800f674:	f7ff ff7f 	bl	800f576 <__hexdig_fun>
 800f678:	1e43      	subs	r3, r0, #1
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	0005      	movs	r5, r0
 800f67e:	2b18      	cmp	r3, #24
 800f680:	d82a      	bhi.n	800f6d8 <__gethex+0x138>
 800f682:	7870      	ldrb	r0, [r6, #1]
 800f684:	f7ff ff77 	bl	800f576 <__hexdig_fun>
 800f688:	1e43      	subs	r3, r0, #1
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	3601      	adds	r6, #1
 800f68e:	3d10      	subs	r5, #16
 800f690:	2b18      	cmp	r3, #24
 800f692:	d91d      	bls.n	800f6d0 <__gethex+0x130>
 800f694:	9b04      	ldr	r3, [sp, #16]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d000      	beq.n	800f69c <__gethex+0xfc>
 800f69a:	426d      	negs	r5, r5
 800f69c:	197f      	adds	r7, r7, r5
 800f69e:	9b06      	ldr	r3, [sp, #24]
 800f6a0:	601e      	str	r6, [r3, #0]
 800f6a2:	9b02      	ldr	r3, [sp, #8]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d019      	beq.n	800f6dc <__gethex+0x13c>
 800f6a8:	9b05      	ldr	r3, [sp, #20]
 800f6aa:	2606      	movs	r6, #6
 800f6ac:	425a      	negs	r2, r3
 800f6ae:	4153      	adcs	r3, r2
 800f6b0:	425b      	negs	r3, r3
 800f6b2:	401e      	ands	r6, r3
 800f6b4:	0030      	movs	r0, r6
 800f6b6:	b009      	add	sp, #36	@ 0x24
 800f6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	2700      	movs	r7, #0
 800f6be:	9c00      	ldr	r4, [sp, #0]
 800f6c0:	9302      	str	r3, [sp, #8]
 800f6c2:	e7c8      	b.n	800f656 <__gethex+0xb6>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	9304      	str	r3, [sp, #16]
 800f6c8:	1ca6      	adds	r6, r4, #2
 800f6ca:	e7d2      	b.n	800f672 <__gethex+0xd2>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e7fa      	b.n	800f6c6 <__gethex+0x126>
 800f6d0:	230a      	movs	r3, #10
 800f6d2:	435d      	muls	r5, r3
 800f6d4:	182d      	adds	r5, r5, r0
 800f6d6:	e7d4      	b.n	800f682 <__gethex+0xe2>
 800f6d8:	0026      	movs	r6, r4
 800f6da:	e7e0      	b.n	800f69e <__gethex+0xfe>
 800f6dc:	9b00      	ldr	r3, [sp, #0]
 800f6de:	9902      	ldr	r1, [sp, #8]
 800f6e0:	1ae3      	subs	r3, r4, r3
 800f6e2:	3b01      	subs	r3, #1
 800f6e4:	2b07      	cmp	r3, #7
 800f6e6:	dc0a      	bgt.n	800f6fe <__gethex+0x15e>
 800f6e8:	9803      	ldr	r0, [sp, #12]
 800f6ea:	f000 fb0f 	bl	800fd0c <_Balloc>
 800f6ee:	1e05      	subs	r5, r0, #0
 800f6f0:	d108      	bne.n	800f704 <__gethex+0x164>
 800f6f2:	002a      	movs	r2, r5
 800f6f4:	21e4      	movs	r1, #228	@ 0xe4
 800f6f6:	4b5f      	ldr	r3, [pc, #380]	@ (800f874 <__gethex+0x2d4>)
 800f6f8:	485f      	ldr	r0, [pc, #380]	@ (800f878 <__gethex+0x2d8>)
 800f6fa:	f001 fd83 	bl	8011204 <__assert_func>
 800f6fe:	3101      	adds	r1, #1
 800f700:	105b      	asrs	r3, r3, #1
 800f702:	e7ef      	b.n	800f6e4 <__gethex+0x144>
 800f704:	0003      	movs	r3, r0
 800f706:	3314      	adds	r3, #20
 800f708:	9302      	str	r3, [sp, #8]
 800f70a:	9305      	str	r3, [sp, #20]
 800f70c:	2300      	movs	r3, #0
 800f70e:	001e      	movs	r6, r3
 800f710:	9304      	str	r3, [sp, #16]
 800f712:	9b00      	ldr	r3, [sp, #0]
 800f714:	42a3      	cmp	r3, r4
 800f716:	d338      	bcc.n	800f78a <__gethex+0x1ea>
 800f718:	9c05      	ldr	r4, [sp, #20]
 800f71a:	9b02      	ldr	r3, [sp, #8]
 800f71c:	c440      	stmia	r4!, {r6}
 800f71e:	1ae4      	subs	r4, r4, r3
 800f720:	10a4      	asrs	r4, r4, #2
 800f722:	0030      	movs	r0, r6
 800f724:	612c      	str	r4, [r5, #16]
 800f726:	f000 fbe9 	bl	800fefc <__hi0bits>
 800f72a:	9b01      	ldr	r3, [sp, #4]
 800f72c:	0164      	lsls	r4, r4, #5
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	1a26      	subs	r6, r4, r0
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	429e      	cmp	r6, r3
 800f736:	dd52      	ble.n	800f7de <__gethex+0x23e>
 800f738:	1af6      	subs	r6, r6, r3
 800f73a:	0031      	movs	r1, r6
 800f73c:	0028      	movs	r0, r5
 800f73e:	f000 ff8c 	bl	801065a <__any_on>
 800f742:	1e04      	subs	r4, r0, #0
 800f744:	d00f      	beq.n	800f766 <__gethex+0x1c6>
 800f746:	2401      	movs	r4, #1
 800f748:	231f      	movs	r3, #31
 800f74a:	0020      	movs	r0, r4
 800f74c:	1e72      	subs	r2, r6, #1
 800f74e:	4013      	ands	r3, r2
 800f750:	4098      	lsls	r0, r3
 800f752:	0003      	movs	r3, r0
 800f754:	1151      	asrs	r1, r2, #5
 800f756:	9802      	ldr	r0, [sp, #8]
 800f758:	0089      	lsls	r1, r1, #2
 800f75a:	5809      	ldr	r1, [r1, r0]
 800f75c:	4219      	tst	r1, r3
 800f75e:	d002      	beq.n	800f766 <__gethex+0x1c6>
 800f760:	42a2      	cmp	r2, r4
 800f762:	dc34      	bgt.n	800f7ce <__gethex+0x22e>
 800f764:	2402      	movs	r4, #2
 800f766:	0031      	movs	r1, r6
 800f768:	0028      	movs	r0, r5
 800f76a:	f7ff feb1 	bl	800f4d0 <rshift>
 800f76e:	19bf      	adds	r7, r7, r6
 800f770:	9b01      	ldr	r3, [sp, #4]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	42bb      	cmp	r3, r7
 800f776:	da42      	bge.n	800f7fe <__gethex+0x25e>
 800f778:	0029      	movs	r1, r5
 800f77a:	9803      	ldr	r0, [sp, #12]
 800f77c:	f000 fb0a 	bl	800fd94 <_Bfree>
 800f780:	2300      	movs	r3, #0
 800f782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f784:	26a3      	movs	r6, #163	@ 0xa3
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	e794      	b.n	800f6b4 <__gethex+0x114>
 800f78a:	3c01      	subs	r4, #1
 800f78c:	7823      	ldrb	r3, [r4, #0]
 800f78e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f790:	d012      	beq.n	800f7b8 <__gethex+0x218>
 800f792:	9b04      	ldr	r3, [sp, #16]
 800f794:	2b20      	cmp	r3, #32
 800f796:	d104      	bne.n	800f7a2 <__gethex+0x202>
 800f798:	9b05      	ldr	r3, [sp, #20]
 800f79a:	c340      	stmia	r3!, {r6}
 800f79c:	2600      	movs	r6, #0
 800f79e:	9305      	str	r3, [sp, #20]
 800f7a0:	9604      	str	r6, [sp, #16]
 800f7a2:	7820      	ldrb	r0, [r4, #0]
 800f7a4:	f7ff fee7 	bl	800f576 <__hexdig_fun>
 800f7a8:	230f      	movs	r3, #15
 800f7aa:	4018      	ands	r0, r3
 800f7ac:	9b04      	ldr	r3, [sp, #16]
 800f7ae:	4098      	lsls	r0, r3
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	4306      	orrs	r6, r0
 800f7b4:	9304      	str	r3, [sp, #16]
 800f7b6:	e7ac      	b.n	800f712 <__gethex+0x172>
 800f7b8:	9b00      	ldr	r3, [sp, #0]
 800f7ba:	42a3      	cmp	r3, r4
 800f7bc:	d8e9      	bhi.n	800f792 <__gethex+0x1f2>
 800f7be:	2201      	movs	r2, #1
 800f7c0:	0020      	movs	r0, r4
 800f7c2:	492b      	ldr	r1, [pc, #172]	@ (800f870 <__gethex+0x2d0>)
 800f7c4:	f7ff fd9e 	bl	800f304 <strncmp>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d1e2      	bne.n	800f792 <__gethex+0x1f2>
 800f7cc:	e7a1      	b.n	800f712 <__gethex+0x172>
 800f7ce:	0028      	movs	r0, r5
 800f7d0:	1eb1      	subs	r1, r6, #2
 800f7d2:	f000 ff42 	bl	801065a <__any_on>
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d0c4      	beq.n	800f764 <__gethex+0x1c4>
 800f7da:	2403      	movs	r4, #3
 800f7dc:	e7c3      	b.n	800f766 <__gethex+0x1c6>
 800f7de:	9b00      	ldr	r3, [sp, #0]
 800f7e0:	2400      	movs	r4, #0
 800f7e2:	429e      	cmp	r6, r3
 800f7e4:	dac4      	bge.n	800f770 <__gethex+0x1d0>
 800f7e6:	1b9e      	subs	r6, r3, r6
 800f7e8:	0029      	movs	r1, r5
 800f7ea:	0032      	movs	r2, r6
 800f7ec:	9803      	ldr	r0, [sp, #12]
 800f7ee:	f000 fcfb 	bl	80101e8 <__lshift>
 800f7f2:	0003      	movs	r3, r0
 800f7f4:	3314      	adds	r3, #20
 800f7f6:	0005      	movs	r5, r0
 800f7f8:	1bbf      	subs	r7, r7, r6
 800f7fa:	9302      	str	r3, [sp, #8]
 800f7fc:	e7b8      	b.n	800f770 <__gethex+0x1d0>
 800f7fe:	9b01      	ldr	r3, [sp, #4]
 800f800:	685e      	ldr	r6, [r3, #4]
 800f802:	42be      	cmp	r6, r7
 800f804:	dd6f      	ble.n	800f8e6 <__gethex+0x346>
 800f806:	9b00      	ldr	r3, [sp, #0]
 800f808:	1bf6      	subs	r6, r6, r7
 800f80a:	42b3      	cmp	r3, r6
 800f80c:	dc36      	bgt.n	800f87c <__gethex+0x2dc>
 800f80e:	9b01      	ldr	r3, [sp, #4]
 800f810:	68db      	ldr	r3, [r3, #12]
 800f812:	2b02      	cmp	r3, #2
 800f814:	d024      	beq.n	800f860 <__gethex+0x2c0>
 800f816:	2b03      	cmp	r3, #3
 800f818:	d026      	beq.n	800f868 <__gethex+0x2c8>
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d117      	bne.n	800f84e <__gethex+0x2ae>
 800f81e:	9b00      	ldr	r3, [sp, #0]
 800f820:	42b3      	cmp	r3, r6
 800f822:	d114      	bne.n	800f84e <__gethex+0x2ae>
 800f824:	2b01      	cmp	r3, #1
 800f826:	d10b      	bne.n	800f840 <__gethex+0x2a0>
 800f828:	9b01      	ldr	r3, [sp, #4]
 800f82a:	9a07      	ldr	r2, [sp, #28]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	2662      	movs	r6, #98	@ 0x62
 800f830:	6013      	str	r3, [r2, #0]
 800f832:	2301      	movs	r3, #1
 800f834:	9a02      	ldr	r2, [sp, #8]
 800f836:	612b      	str	r3, [r5, #16]
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f83c:	601d      	str	r5, [r3, #0]
 800f83e:	e739      	b.n	800f6b4 <__gethex+0x114>
 800f840:	9900      	ldr	r1, [sp, #0]
 800f842:	0028      	movs	r0, r5
 800f844:	3901      	subs	r1, #1
 800f846:	f000 ff08 	bl	801065a <__any_on>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d1ec      	bne.n	800f828 <__gethex+0x288>
 800f84e:	0029      	movs	r1, r5
 800f850:	9803      	ldr	r0, [sp, #12]
 800f852:	f000 fa9f 	bl	800fd94 <_Bfree>
 800f856:	2300      	movs	r3, #0
 800f858:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f85a:	2650      	movs	r6, #80	@ 0x50
 800f85c:	6013      	str	r3, [r2, #0]
 800f85e:	e729      	b.n	800f6b4 <__gethex+0x114>
 800f860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1f3      	bne.n	800f84e <__gethex+0x2ae>
 800f866:	e7df      	b.n	800f828 <__gethex+0x288>
 800f868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1dc      	bne.n	800f828 <__gethex+0x288>
 800f86e:	e7ee      	b.n	800f84e <__gethex+0x2ae>
 800f870:	08012558 	.word	0x08012558
 800f874:	080126c1 	.word	0x080126c1
 800f878:	080126d2 	.word	0x080126d2
 800f87c:	1e77      	subs	r7, r6, #1
 800f87e:	2c00      	cmp	r4, #0
 800f880:	d12f      	bne.n	800f8e2 <__gethex+0x342>
 800f882:	2f00      	cmp	r7, #0
 800f884:	d004      	beq.n	800f890 <__gethex+0x2f0>
 800f886:	0039      	movs	r1, r7
 800f888:	0028      	movs	r0, r5
 800f88a:	f000 fee6 	bl	801065a <__any_on>
 800f88e:	0004      	movs	r4, r0
 800f890:	231f      	movs	r3, #31
 800f892:	117a      	asrs	r2, r7, #5
 800f894:	401f      	ands	r7, r3
 800f896:	3b1e      	subs	r3, #30
 800f898:	40bb      	lsls	r3, r7
 800f89a:	9902      	ldr	r1, [sp, #8]
 800f89c:	0092      	lsls	r2, r2, #2
 800f89e:	5852      	ldr	r2, [r2, r1]
 800f8a0:	421a      	tst	r2, r3
 800f8a2:	d001      	beq.n	800f8a8 <__gethex+0x308>
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	431c      	orrs	r4, r3
 800f8a8:	9b00      	ldr	r3, [sp, #0]
 800f8aa:	0031      	movs	r1, r6
 800f8ac:	1b9b      	subs	r3, r3, r6
 800f8ae:	2602      	movs	r6, #2
 800f8b0:	0028      	movs	r0, r5
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	f7ff fe0c 	bl	800f4d0 <rshift>
 800f8b8:	9b01      	ldr	r3, [sp, #4]
 800f8ba:	685f      	ldr	r7, [r3, #4]
 800f8bc:	2c00      	cmp	r4, #0
 800f8be:	d03f      	beq.n	800f940 <__gethex+0x3a0>
 800f8c0:	9b01      	ldr	r3, [sp, #4]
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	d010      	beq.n	800f8ea <__gethex+0x34a>
 800f8c8:	2b03      	cmp	r3, #3
 800f8ca:	d012      	beq.n	800f8f2 <__gethex+0x352>
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d106      	bne.n	800f8de <__gethex+0x33e>
 800f8d0:	07a2      	lsls	r2, r4, #30
 800f8d2:	d504      	bpl.n	800f8de <__gethex+0x33e>
 800f8d4:	9a02      	ldr	r2, [sp, #8]
 800f8d6:	6812      	ldr	r2, [r2, #0]
 800f8d8:	4314      	orrs	r4, r2
 800f8da:	421c      	tst	r4, r3
 800f8dc:	d10c      	bne.n	800f8f8 <__gethex+0x358>
 800f8de:	2310      	movs	r3, #16
 800f8e0:	e02d      	b.n	800f93e <__gethex+0x39e>
 800f8e2:	2401      	movs	r4, #1
 800f8e4:	e7d4      	b.n	800f890 <__gethex+0x2f0>
 800f8e6:	2601      	movs	r6, #1
 800f8e8:	e7e8      	b.n	800f8bc <__gethex+0x31c>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f8ee:	1a9b      	subs	r3, r3, r2
 800f8f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f8f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d0f2      	beq.n	800f8de <__gethex+0x33e>
 800f8f8:	692b      	ldr	r3, [r5, #16]
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	9302      	str	r3, [sp, #8]
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	9304      	str	r3, [sp, #16]
 800f902:	002b      	movs	r3, r5
 800f904:	9a04      	ldr	r2, [sp, #16]
 800f906:	3314      	adds	r3, #20
 800f908:	1899      	adds	r1, r3, r2
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	1c54      	adds	r4, r2, #1
 800f90e:	d01c      	beq.n	800f94a <__gethex+0x3aa>
 800f910:	3201      	adds	r2, #1
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	002b      	movs	r3, r5
 800f916:	3314      	adds	r3, #20
 800f918:	2e02      	cmp	r6, #2
 800f91a:	d13f      	bne.n	800f99c <__gethex+0x3fc>
 800f91c:	9a01      	ldr	r2, [sp, #4]
 800f91e:	9900      	ldr	r1, [sp, #0]
 800f920:	6812      	ldr	r2, [r2, #0]
 800f922:	3a01      	subs	r2, #1
 800f924:	428a      	cmp	r2, r1
 800f926:	d109      	bne.n	800f93c <__gethex+0x39c>
 800f928:	000a      	movs	r2, r1
 800f92a:	201f      	movs	r0, #31
 800f92c:	4010      	ands	r0, r2
 800f92e:	2201      	movs	r2, #1
 800f930:	4082      	lsls	r2, r0
 800f932:	1149      	asrs	r1, r1, #5
 800f934:	0089      	lsls	r1, r1, #2
 800f936:	58cb      	ldr	r3, [r1, r3]
 800f938:	4213      	tst	r3, r2
 800f93a:	d13d      	bne.n	800f9b8 <__gethex+0x418>
 800f93c:	2320      	movs	r3, #32
 800f93e:	431e      	orrs	r6, r3
 800f940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f942:	601d      	str	r5, [r3, #0]
 800f944:	9b07      	ldr	r3, [sp, #28]
 800f946:	601f      	str	r7, [r3, #0]
 800f948:	e6b4      	b.n	800f6b4 <__gethex+0x114>
 800f94a:	c301      	stmia	r3!, {r0}
 800f94c:	4299      	cmp	r1, r3
 800f94e:	d8dc      	bhi.n	800f90a <__gethex+0x36a>
 800f950:	68ab      	ldr	r3, [r5, #8]
 800f952:	9a02      	ldr	r2, [sp, #8]
 800f954:	429a      	cmp	r2, r3
 800f956:	db18      	blt.n	800f98a <__gethex+0x3ea>
 800f958:	6869      	ldr	r1, [r5, #4]
 800f95a:	9803      	ldr	r0, [sp, #12]
 800f95c:	3101      	adds	r1, #1
 800f95e:	f000 f9d5 	bl	800fd0c <_Balloc>
 800f962:	1e04      	subs	r4, r0, #0
 800f964:	d104      	bne.n	800f970 <__gethex+0x3d0>
 800f966:	0022      	movs	r2, r4
 800f968:	2184      	movs	r1, #132	@ 0x84
 800f96a:	4b1d      	ldr	r3, [pc, #116]	@ (800f9e0 <__gethex+0x440>)
 800f96c:	481d      	ldr	r0, [pc, #116]	@ (800f9e4 <__gethex+0x444>)
 800f96e:	e6c4      	b.n	800f6fa <__gethex+0x15a>
 800f970:	0029      	movs	r1, r5
 800f972:	692a      	ldr	r2, [r5, #16]
 800f974:	310c      	adds	r1, #12
 800f976:	3202      	adds	r2, #2
 800f978:	0092      	lsls	r2, r2, #2
 800f97a:	300c      	adds	r0, #12
 800f97c:	f7ff fd4f 	bl	800f41e <memcpy>
 800f980:	0029      	movs	r1, r5
 800f982:	9803      	ldr	r0, [sp, #12]
 800f984:	f000 fa06 	bl	800fd94 <_Bfree>
 800f988:	0025      	movs	r5, r4
 800f98a:	692b      	ldr	r3, [r5, #16]
 800f98c:	1c5a      	adds	r2, r3, #1
 800f98e:	612a      	str	r2, [r5, #16]
 800f990:	2201      	movs	r2, #1
 800f992:	3304      	adds	r3, #4
 800f994:	009b      	lsls	r3, r3, #2
 800f996:	18eb      	adds	r3, r5, r3
 800f998:	605a      	str	r2, [r3, #4]
 800f99a:	e7bb      	b.n	800f914 <__gethex+0x374>
 800f99c:	692a      	ldr	r2, [r5, #16]
 800f99e:	9902      	ldr	r1, [sp, #8]
 800f9a0:	428a      	cmp	r2, r1
 800f9a2:	dd0b      	ble.n	800f9bc <__gethex+0x41c>
 800f9a4:	2101      	movs	r1, #1
 800f9a6:	0028      	movs	r0, r5
 800f9a8:	f7ff fd92 	bl	800f4d0 <rshift>
 800f9ac:	9b01      	ldr	r3, [sp, #4]
 800f9ae:	3701      	adds	r7, #1
 800f9b0:	689b      	ldr	r3, [r3, #8]
 800f9b2:	42bb      	cmp	r3, r7
 800f9b4:	da00      	bge.n	800f9b8 <__gethex+0x418>
 800f9b6:	e6df      	b.n	800f778 <__gethex+0x1d8>
 800f9b8:	2601      	movs	r6, #1
 800f9ba:	e7bf      	b.n	800f93c <__gethex+0x39c>
 800f9bc:	221f      	movs	r2, #31
 800f9be:	9c00      	ldr	r4, [sp, #0]
 800f9c0:	9900      	ldr	r1, [sp, #0]
 800f9c2:	4014      	ands	r4, r2
 800f9c4:	4211      	tst	r1, r2
 800f9c6:	d0f7      	beq.n	800f9b8 <__gethex+0x418>
 800f9c8:	9a04      	ldr	r2, [sp, #16]
 800f9ca:	189b      	adds	r3, r3, r2
 800f9cc:	3b04      	subs	r3, #4
 800f9ce:	6818      	ldr	r0, [r3, #0]
 800f9d0:	f000 fa94 	bl	800fefc <__hi0bits>
 800f9d4:	2320      	movs	r3, #32
 800f9d6:	1b1b      	subs	r3, r3, r4
 800f9d8:	4298      	cmp	r0, r3
 800f9da:	dbe3      	blt.n	800f9a4 <__gethex+0x404>
 800f9dc:	e7ec      	b.n	800f9b8 <__gethex+0x418>
 800f9de:	46c0      	nop			@ (mov r8, r8)
 800f9e0:	080126c1 	.word	0x080126c1
 800f9e4:	080126d2 	.word	0x080126d2

0800f9e8 <L_shift>:
 800f9e8:	2308      	movs	r3, #8
 800f9ea:	b570      	push	{r4, r5, r6, lr}
 800f9ec:	2520      	movs	r5, #32
 800f9ee:	1a9a      	subs	r2, r3, r2
 800f9f0:	0092      	lsls	r2, r2, #2
 800f9f2:	1aad      	subs	r5, r5, r2
 800f9f4:	6843      	ldr	r3, [r0, #4]
 800f9f6:	6804      	ldr	r4, [r0, #0]
 800f9f8:	001e      	movs	r6, r3
 800f9fa:	40ae      	lsls	r6, r5
 800f9fc:	40d3      	lsrs	r3, r2
 800f9fe:	4334      	orrs	r4, r6
 800fa00:	6004      	str	r4, [r0, #0]
 800fa02:	6043      	str	r3, [r0, #4]
 800fa04:	3004      	adds	r0, #4
 800fa06:	4288      	cmp	r0, r1
 800fa08:	d3f4      	bcc.n	800f9f4 <L_shift+0xc>
 800fa0a:	bd70      	pop	{r4, r5, r6, pc}

0800fa0c <__match>:
 800fa0c:	b530      	push	{r4, r5, lr}
 800fa0e:	6803      	ldr	r3, [r0, #0]
 800fa10:	780c      	ldrb	r4, [r1, #0]
 800fa12:	3301      	adds	r3, #1
 800fa14:	2c00      	cmp	r4, #0
 800fa16:	d102      	bne.n	800fa1e <__match+0x12>
 800fa18:	6003      	str	r3, [r0, #0]
 800fa1a:	2001      	movs	r0, #1
 800fa1c:	bd30      	pop	{r4, r5, pc}
 800fa1e:	781a      	ldrb	r2, [r3, #0]
 800fa20:	0015      	movs	r5, r2
 800fa22:	3d41      	subs	r5, #65	@ 0x41
 800fa24:	2d19      	cmp	r5, #25
 800fa26:	d800      	bhi.n	800fa2a <__match+0x1e>
 800fa28:	3220      	adds	r2, #32
 800fa2a:	3101      	adds	r1, #1
 800fa2c:	42a2      	cmp	r2, r4
 800fa2e:	d0ef      	beq.n	800fa10 <__match+0x4>
 800fa30:	2000      	movs	r0, #0
 800fa32:	e7f3      	b.n	800fa1c <__match+0x10>

0800fa34 <__hexnan>:
 800fa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa36:	680b      	ldr	r3, [r1, #0]
 800fa38:	b08b      	sub	sp, #44	@ 0x2c
 800fa3a:	9201      	str	r2, [sp, #4]
 800fa3c:	9901      	ldr	r1, [sp, #4]
 800fa3e:	115a      	asrs	r2, r3, #5
 800fa40:	0092      	lsls	r2, r2, #2
 800fa42:	188a      	adds	r2, r1, r2
 800fa44:	9202      	str	r2, [sp, #8]
 800fa46:	0019      	movs	r1, r3
 800fa48:	221f      	movs	r2, #31
 800fa4a:	4011      	ands	r1, r2
 800fa4c:	9008      	str	r0, [sp, #32]
 800fa4e:	9106      	str	r1, [sp, #24]
 800fa50:	4213      	tst	r3, r2
 800fa52:	d002      	beq.n	800fa5a <__hexnan+0x26>
 800fa54:	9b02      	ldr	r3, [sp, #8]
 800fa56:	3304      	adds	r3, #4
 800fa58:	9302      	str	r3, [sp, #8]
 800fa5a:	9b02      	ldr	r3, [sp, #8]
 800fa5c:	2500      	movs	r5, #0
 800fa5e:	1f1f      	subs	r7, r3, #4
 800fa60:	003e      	movs	r6, r7
 800fa62:	003c      	movs	r4, r7
 800fa64:	9b08      	ldr	r3, [sp, #32]
 800fa66:	603d      	str	r5, [r7, #0]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	9507      	str	r5, [sp, #28]
 800fa6c:	9305      	str	r3, [sp, #20]
 800fa6e:	9503      	str	r5, [sp, #12]
 800fa70:	9b05      	ldr	r3, [sp, #20]
 800fa72:	3301      	adds	r3, #1
 800fa74:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa76:	9b05      	ldr	r3, [sp, #20]
 800fa78:	785b      	ldrb	r3, [r3, #1]
 800fa7a:	9304      	str	r3, [sp, #16]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d028      	beq.n	800fad2 <__hexnan+0x9e>
 800fa80:	9804      	ldr	r0, [sp, #16]
 800fa82:	f7ff fd78 	bl	800f576 <__hexdig_fun>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d155      	bne.n	800fb36 <__hexnan+0x102>
 800fa8a:	9b04      	ldr	r3, [sp, #16]
 800fa8c:	2b20      	cmp	r3, #32
 800fa8e:	d819      	bhi.n	800fac4 <__hexnan+0x90>
 800fa90:	9b03      	ldr	r3, [sp, #12]
 800fa92:	9a07      	ldr	r2, [sp, #28]
 800fa94:	4293      	cmp	r3, r2
 800fa96:	dd12      	ble.n	800fabe <__hexnan+0x8a>
 800fa98:	42b4      	cmp	r4, r6
 800fa9a:	d206      	bcs.n	800faaa <__hexnan+0x76>
 800fa9c:	2d07      	cmp	r5, #7
 800fa9e:	dc04      	bgt.n	800faaa <__hexnan+0x76>
 800faa0:	002a      	movs	r2, r5
 800faa2:	0031      	movs	r1, r6
 800faa4:	0020      	movs	r0, r4
 800faa6:	f7ff ff9f 	bl	800f9e8 <L_shift>
 800faaa:	9b01      	ldr	r3, [sp, #4]
 800faac:	2508      	movs	r5, #8
 800faae:	429c      	cmp	r4, r3
 800fab0:	d905      	bls.n	800fabe <__hexnan+0x8a>
 800fab2:	1f26      	subs	r6, r4, #4
 800fab4:	2500      	movs	r5, #0
 800fab6:	0034      	movs	r4, r6
 800fab8:	9b03      	ldr	r3, [sp, #12]
 800faba:	6035      	str	r5, [r6, #0]
 800fabc:	9307      	str	r3, [sp, #28]
 800fabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fac0:	9305      	str	r3, [sp, #20]
 800fac2:	e7d5      	b.n	800fa70 <__hexnan+0x3c>
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	2b29      	cmp	r3, #41	@ 0x29
 800fac8:	d15a      	bne.n	800fb80 <__hexnan+0x14c>
 800faca:	9b05      	ldr	r3, [sp, #20]
 800facc:	9a08      	ldr	r2, [sp, #32]
 800face:	3302      	adds	r3, #2
 800fad0:	6013      	str	r3, [r2, #0]
 800fad2:	9b03      	ldr	r3, [sp, #12]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d053      	beq.n	800fb80 <__hexnan+0x14c>
 800fad8:	42b4      	cmp	r4, r6
 800fada:	d206      	bcs.n	800faea <__hexnan+0xb6>
 800fadc:	2d07      	cmp	r5, #7
 800fade:	dc04      	bgt.n	800faea <__hexnan+0xb6>
 800fae0:	002a      	movs	r2, r5
 800fae2:	0031      	movs	r1, r6
 800fae4:	0020      	movs	r0, r4
 800fae6:	f7ff ff7f 	bl	800f9e8 <L_shift>
 800faea:	9b01      	ldr	r3, [sp, #4]
 800faec:	429c      	cmp	r4, r3
 800faee:	d936      	bls.n	800fb5e <__hexnan+0x12a>
 800faf0:	001a      	movs	r2, r3
 800faf2:	0023      	movs	r3, r4
 800faf4:	cb02      	ldmia	r3!, {r1}
 800faf6:	c202      	stmia	r2!, {r1}
 800faf8:	429f      	cmp	r7, r3
 800fafa:	d2fb      	bcs.n	800faf4 <__hexnan+0xc0>
 800fafc:	9b02      	ldr	r3, [sp, #8]
 800fafe:	1c61      	adds	r1, r4, #1
 800fb00:	1eda      	subs	r2, r3, #3
 800fb02:	2304      	movs	r3, #4
 800fb04:	4291      	cmp	r1, r2
 800fb06:	d805      	bhi.n	800fb14 <__hexnan+0xe0>
 800fb08:	9b02      	ldr	r3, [sp, #8]
 800fb0a:	3b04      	subs	r3, #4
 800fb0c:	1b1b      	subs	r3, r3, r4
 800fb0e:	089b      	lsrs	r3, r3, #2
 800fb10:	3301      	adds	r3, #1
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	9a01      	ldr	r2, [sp, #4]
 800fb16:	18d3      	adds	r3, r2, r3
 800fb18:	2200      	movs	r2, #0
 800fb1a:	c304      	stmia	r3!, {r2}
 800fb1c:	429f      	cmp	r7, r3
 800fb1e:	d2fc      	bcs.n	800fb1a <__hexnan+0xe6>
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d104      	bne.n	800fb30 <__hexnan+0xfc>
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	429f      	cmp	r7, r3
 800fb2a:	d127      	bne.n	800fb7c <__hexnan+0x148>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	603b      	str	r3, [r7, #0]
 800fb30:	2005      	movs	r0, #5
 800fb32:	b00b      	add	sp, #44	@ 0x2c
 800fb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb36:	9b03      	ldr	r3, [sp, #12]
 800fb38:	3501      	adds	r5, #1
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	9303      	str	r3, [sp, #12]
 800fb3e:	2d08      	cmp	r5, #8
 800fb40:	dd06      	ble.n	800fb50 <__hexnan+0x11c>
 800fb42:	9b01      	ldr	r3, [sp, #4]
 800fb44:	429c      	cmp	r4, r3
 800fb46:	d9ba      	bls.n	800fabe <__hexnan+0x8a>
 800fb48:	2300      	movs	r3, #0
 800fb4a:	2501      	movs	r5, #1
 800fb4c:	3c04      	subs	r4, #4
 800fb4e:	6023      	str	r3, [r4, #0]
 800fb50:	220f      	movs	r2, #15
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	4010      	ands	r0, r2
 800fb56:	011b      	lsls	r3, r3, #4
 800fb58:	4303      	orrs	r3, r0
 800fb5a:	6023      	str	r3, [r4, #0]
 800fb5c:	e7af      	b.n	800fabe <__hexnan+0x8a>
 800fb5e:	9b06      	ldr	r3, [sp, #24]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d0dd      	beq.n	800fb20 <__hexnan+0xec>
 800fb64:	2320      	movs	r3, #32
 800fb66:	9a06      	ldr	r2, [sp, #24]
 800fb68:	9902      	ldr	r1, [sp, #8]
 800fb6a:	1a9b      	subs	r3, r3, r2
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	4252      	negs	r2, r2
 800fb70:	40da      	lsrs	r2, r3
 800fb72:	3904      	subs	r1, #4
 800fb74:	680b      	ldr	r3, [r1, #0]
 800fb76:	4013      	ands	r3, r2
 800fb78:	600b      	str	r3, [r1, #0]
 800fb7a:	e7d1      	b.n	800fb20 <__hexnan+0xec>
 800fb7c:	3f04      	subs	r7, #4
 800fb7e:	e7cf      	b.n	800fb20 <__hexnan+0xec>
 800fb80:	2004      	movs	r0, #4
 800fb82:	e7d6      	b.n	800fb32 <__hexnan+0xfe>

0800fb84 <sbrk_aligned>:
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	4e0f      	ldr	r6, [pc, #60]	@ (800fbc4 <sbrk_aligned+0x40>)
 800fb88:	000d      	movs	r5, r1
 800fb8a:	6831      	ldr	r1, [r6, #0]
 800fb8c:	0004      	movs	r4, r0
 800fb8e:	2900      	cmp	r1, #0
 800fb90:	d102      	bne.n	800fb98 <sbrk_aligned+0x14>
 800fb92:	f001 fb19 	bl	80111c8 <_sbrk_r>
 800fb96:	6030      	str	r0, [r6, #0]
 800fb98:	0029      	movs	r1, r5
 800fb9a:	0020      	movs	r0, r4
 800fb9c:	f001 fb14 	bl	80111c8 <_sbrk_r>
 800fba0:	1c43      	adds	r3, r0, #1
 800fba2:	d103      	bne.n	800fbac <sbrk_aligned+0x28>
 800fba4:	2501      	movs	r5, #1
 800fba6:	426d      	negs	r5, r5
 800fba8:	0028      	movs	r0, r5
 800fbaa:	bd70      	pop	{r4, r5, r6, pc}
 800fbac:	2303      	movs	r3, #3
 800fbae:	1cc5      	adds	r5, r0, #3
 800fbb0:	439d      	bics	r5, r3
 800fbb2:	42a8      	cmp	r0, r5
 800fbb4:	d0f8      	beq.n	800fba8 <sbrk_aligned+0x24>
 800fbb6:	1a29      	subs	r1, r5, r0
 800fbb8:	0020      	movs	r0, r4
 800fbba:	f001 fb05 	bl	80111c8 <_sbrk_r>
 800fbbe:	3001      	adds	r0, #1
 800fbc0:	d1f2      	bne.n	800fba8 <sbrk_aligned+0x24>
 800fbc2:	e7ef      	b.n	800fba4 <sbrk_aligned+0x20>
 800fbc4:	20003958 	.word	0x20003958

0800fbc8 <_malloc_r>:
 800fbc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbca:	2203      	movs	r2, #3
 800fbcc:	1ccb      	adds	r3, r1, #3
 800fbce:	4393      	bics	r3, r2
 800fbd0:	3308      	adds	r3, #8
 800fbd2:	0005      	movs	r5, r0
 800fbd4:	001f      	movs	r7, r3
 800fbd6:	2b0c      	cmp	r3, #12
 800fbd8:	d234      	bcs.n	800fc44 <_malloc_r+0x7c>
 800fbda:	270c      	movs	r7, #12
 800fbdc:	42b9      	cmp	r1, r7
 800fbde:	d833      	bhi.n	800fc48 <_malloc_r+0x80>
 800fbe0:	0028      	movs	r0, r5
 800fbe2:	f000 f883 	bl	800fcec <__malloc_lock>
 800fbe6:	4e37      	ldr	r6, [pc, #220]	@ (800fcc4 <_malloc_r+0xfc>)
 800fbe8:	6833      	ldr	r3, [r6, #0]
 800fbea:	001c      	movs	r4, r3
 800fbec:	2c00      	cmp	r4, #0
 800fbee:	d12f      	bne.n	800fc50 <_malloc_r+0x88>
 800fbf0:	0039      	movs	r1, r7
 800fbf2:	0028      	movs	r0, r5
 800fbf4:	f7ff ffc6 	bl	800fb84 <sbrk_aligned>
 800fbf8:	0004      	movs	r4, r0
 800fbfa:	1c43      	adds	r3, r0, #1
 800fbfc:	d15f      	bne.n	800fcbe <_malloc_r+0xf6>
 800fbfe:	6834      	ldr	r4, [r6, #0]
 800fc00:	9400      	str	r4, [sp, #0]
 800fc02:	9b00      	ldr	r3, [sp, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d14a      	bne.n	800fc9e <_malloc_r+0xd6>
 800fc08:	2c00      	cmp	r4, #0
 800fc0a:	d052      	beq.n	800fcb2 <_malloc_r+0xea>
 800fc0c:	6823      	ldr	r3, [r4, #0]
 800fc0e:	0028      	movs	r0, r5
 800fc10:	18e3      	adds	r3, r4, r3
 800fc12:	9900      	ldr	r1, [sp, #0]
 800fc14:	9301      	str	r3, [sp, #4]
 800fc16:	f001 fad7 	bl	80111c8 <_sbrk_r>
 800fc1a:	9b01      	ldr	r3, [sp, #4]
 800fc1c:	4283      	cmp	r3, r0
 800fc1e:	d148      	bne.n	800fcb2 <_malloc_r+0xea>
 800fc20:	6823      	ldr	r3, [r4, #0]
 800fc22:	0028      	movs	r0, r5
 800fc24:	1aff      	subs	r7, r7, r3
 800fc26:	0039      	movs	r1, r7
 800fc28:	f7ff ffac 	bl	800fb84 <sbrk_aligned>
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d040      	beq.n	800fcb2 <_malloc_r+0xea>
 800fc30:	6823      	ldr	r3, [r4, #0]
 800fc32:	19db      	adds	r3, r3, r7
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	6833      	ldr	r3, [r6, #0]
 800fc38:	685a      	ldr	r2, [r3, #4]
 800fc3a:	2a00      	cmp	r2, #0
 800fc3c:	d133      	bne.n	800fca6 <_malloc_r+0xde>
 800fc3e:	9b00      	ldr	r3, [sp, #0]
 800fc40:	6033      	str	r3, [r6, #0]
 800fc42:	e019      	b.n	800fc78 <_malloc_r+0xb0>
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	dac9      	bge.n	800fbdc <_malloc_r+0x14>
 800fc48:	230c      	movs	r3, #12
 800fc4a:	602b      	str	r3, [r5, #0]
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fc50:	6821      	ldr	r1, [r4, #0]
 800fc52:	1bc9      	subs	r1, r1, r7
 800fc54:	d420      	bmi.n	800fc98 <_malloc_r+0xd0>
 800fc56:	290b      	cmp	r1, #11
 800fc58:	d90a      	bls.n	800fc70 <_malloc_r+0xa8>
 800fc5a:	19e2      	adds	r2, r4, r7
 800fc5c:	6027      	str	r7, [r4, #0]
 800fc5e:	42a3      	cmp	r3, r4
 800fc60:	d104      	bne.n	800fc6c <_malloc_r+0xa4>
 800fc62:	6032      	str	r2, [r6, #0]
 800fc64:	6863      	ldr	r3, [r4, #4]
 800fc66:	6011      	str	r1, [r2, #0]
 800fc68:	6053      	str	r3, [r2, #4]
 800fc6a:	e005      	b.n	800fc78 <_malloc_r+0xb0>
 800fc6c:	605a      	str	r2, [r3, #4]
 800fc6e:	e7f9      	b.n	800fc64 <_malloc_r+0x9c>
 800fc70:	6862      	ldr	r2, [r4, #4]
 800fc72:	42a3      	cmp	r3, r4
 800fc74:	d10e      	bne.n	800fc94 <_malloc_r+0xcc>
 800fc76:	6032      	str	r2, [r6, #0]
 800fc78:	0028      	movs	r0, r5
 800fc7a:	f000 f83f 	bl	800fcfc <__malloc_unlock>
 800fc7e:	0020      	movs	r0, r4
 800fc80:	2207      	movs	r2, #7
 800fc82:	300b      	adds	r0, #11
 800fc84:	1d23      	adds	r3, r4, #4
 800fc86:	4390      	bics	r0, r2
 800fc88:	1ac2      	subs	r2, r0, r3
 800fc8a:	4298      	cmp	r0, r3
 800fc8c:	d0df      	beq.n	800fc4e <_malloc_r+0x86>
 800fc8e:	1a1b      	subs	r3, r3, r0
 800fc90:	50a3      	str	r3, [r4, r2]
 800fc92:	e7dc      	b.n	800fc4e <_malloc_r+0x86>
 800fc94:	605a      	str	r2, [r3, #4]
 800fc96:	e7ef      	b.n	800fc78 <_malloc_r+0xb0>
 800fc98:	0023      	movs	r3, r4
 800fc9a:	6864      	ldr	r4, [r4, #4]
 800fc9c:	e7a6      	b.n	800fbec <_malloc_r+0x24>
 800fc9e:	9c00      	ldr	r4, [sp, #0]
 800fca0:	6863      	ldr	r3, [r4, #4]
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	e7ad      	b.n	800fc02 <_malloc_r+0x3a>
 800fca6:	001a      	movs	r2, r3
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	42a3      	cmp	r3, r4
 800fcac:	d1fb      	bne.n	800fca6 <_malloc_r+0xde>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e7da      	b.n	800fc68 <_malloc_r+0xa0>
 800fcb2:	230c      	movs	r3, #12
 800fcb4:	0028      	movs	r0, r5
 800fcb6:	602b      	str	r3, [r5, #0]
 800fcb8:	f000 f820 	bl	800fcfc <__malloc_unlock>
 800fcbc:	e7c6      	b.n	800fc4c <_malloc_r+0x84>
 800fcbe:	6007      	str	r7, [r0, #0]
 800fcc0:	e7da      	b.n	800fc78 <_malloc_r+0xb0>
 800fcc2:	46c0      	nop			@ (mov r8, r8)
 800fcc4:	2000395c 	.word	0x2000395c

0800fcc8 <__ascii_mbtowc>:
 800fcc8:	b082      	sub	sp, #8
 800fcca:	2900      	cmp	r1, #0
 800fccc:	d100      	bne.n	800fcd0 <__ascii_mbtowc+0x8>
 800fcce:	a901      	add	r1, sp, #4
 800fcd0:	1e10      	subs	r0, r2, #0
 800fcd2:	d006      	beq.n	800fce2 <__ascii_mbtowc+0x1a>
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d006      	beq.n	800fce6 <__ascii_mbtowc+0x1e>
 800fcd8:	7813      	ldrb	r3, [r2, #0]
 800fcda:	600b      	str	r3, [r1, #0]
 800fcdc:	7810      	ldrb	r0, [r2, #0]
 800fcde:	1e43      	subs	r3, r0, #1
 800fce0:	4198      	sbcs	r0, r3
 800fce2:	b002      	add	sp, #8
 800fce4:	4770      	bx	lr
 800fce6:	2002      	movs	r0, #2
 800fce8:	4240      	negs	r0, r0
 800fcea:	e7fa      	b.n	800fce2 <__ascii_mbtowc+0x1a>

0800fcec <__malloc_lock>:
 800fcec:	b510      	push	{r4, lr}
 800fcee:	4802      	ldr	r0, [pc, #8]	@ (800fcf8 <__malloc_lock+0xc>)
 800fcf0:	f7ff fb93 	bl	800f41a <__retarget_lock_acquire_recursive>
 800fcf4:	bd10      	pop	{r4, pc}
 800fcf6:	46c0      	nop			@ (mov r8, r8)
 800fcf8:	20003954 	.word	0x20003954

0800fcfc <__malloc_unlock>:
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	4802      	ldr	r0, [pc, #8]	@ (800fd08 <__malloc_unlock+0xc>)
 800fd00:	f7ff fb8c 	bl	800f41c <__retarget_lock_release_recursive>
 800fd04:	bd10      	pop	{r4, pc}
 800fd06:	46c0      	nop			@ (mov r8, r8)
 800fd08:	20003954 	.word	0x20003954

0800fd0c <_Balloc>:
 800fd0c:	b570      	push	{r4, r5, r6, lr}
 800fd0e:	69c5      	ldr	r5, [r0, #28]
 800fd10:	0006      	movs	r6, r0
 800fd12:	000c      	movs	r4, r1
 800fd14:	2d00      	cmp	r5, #0
 800fd16:	d10e      	bne.n	800fd36 <_Balloc+0x2a>
 800fd18:	2010      	movs	r0, #16
 800fd1a:	f001 fabf 	bl	801129c <malloc>
 800fd1e:	1e02      	subs	r2, r0, #0
 800fd20:	61f0      	str	r0, [r6, #28]
 800fd22:	d104      	bne.n	800fd2e <_Balloc+0x22>
 800fd24:	216b      	movs	r1, #107	@ 0x6b
 800fd26:	4b19      	ldr	r3, [pc, #100]	@ (800fd8c <_Balloc+0x80>)
 800fd28:	4819      	ldr	r0, [pc, #100]	@ (800fd90 <_Balloc+0x84>)
 800fd2a:	f001 fa6b 	bl	8011204 <__assert_func>
 800fd2e:	6045      	str	r5, [r0, #4]
 800fd30:	6085      	str	r5, [r0, #8]
 800fd32:	6005      	str	r5, [r0, #0]
 800fd34:	60c5      	str	r5, [r0, #12]
 800fd36:	69f5      	ldr	r5, [r6, #28]
 800fd38:	68eb      	ldr	r3, [r5, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d013      	beq.n	800fd66 <_Balloc+0x5a>
 800fd3e:	69f3      	ldr	r3, [r6, #28]
 800fd40:	00a2      	lsls	r2, r4, #2
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	189b      	adds	r3, r3, r2
 800fd46:	6818      	ldr	r0, [r3, #0]
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	d118      	bne.n	800fd7e <_Balloc+0x72>
 800fd4c:	2101      	movs	r1, #1
 800fd4e:	000d      	movs	r5, r1
 800fd50:	40a5      	lsls	r5, r4
 800fd52:	1d6a      	adds	r2, r5, #5
 800fd54:	0030      	movs	r0, r6
 800fd56:	0092      	lsls	r2, r2, #2
 800fd58:	f001 fa72 	bl	8011240 <_calloc_r>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	d00c      	beq.n	800fd7a <_Balloc+0x6e>
 800fd60:	6044      	str	r4, [r0, #4]
 800fd62:	6085      	str	r5, [r0, #8]
 800fd64:	e00d      	b.n	800fd82 <_Balloc+0x76>
 800fd66:	2221      	movs	r2, #33	@ 0x21
 800fd68:	2104      	movs	r1, #4
 800fd6a:	0030      	movs	r0, r6
 800fd6c:	f001 fa68 	bl	8011240 <_calloc_r>
 800fd70:	69f3      	ldr	r3, [r6, #28]
 800fd72:	60e8      	str	r0, [r5, #12]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d1e1      	bne.n	800fd3e <_Balloc+0x32>
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
 800fd7e:	6802      	ldr	r2, [r0, #0]
 800fd80:	601a      	str	r2, [r3, #0]
 800fd82:	2300      	movs	r3, #0
 800fd84:	6103      	str	r3, [r0, #16]
 800fd86:	60c3      	str	r3, [r0, #12]
 800fd88:	e7f8      	b.n	800fd7c <_Balloc+0x70>
 800fd8a:	46c0      	nop			@ (mov r8, r8)
 800fd8c:	08012732 	.word	0x08012732
 800fd90:	08012749 	.word	0x08012749

0800fd94 <_Bfree>:
 800fd94:	b570      	push	{r4, r5, r6, lr}
 800fd96:	69c6      	ldr	r6, [r0, #28]
 800fd98:	0005      	movs	r5, r0
 800fd9a:	000c      	movs	r4, r1
 800fd9c:	2e00      	cmp	r6, #0
 800fd9e:	d10e      	bne.n	800fdbe <_Bfree+0x2a>
 800fda0:	2010      	movs	r0, #16
 800fda2:	f001 fa7b 	bl	801129c <malloc>
 800fda6:	1e02      	subs	r2, r0, #0
 800fda8:	61e8      	str	r0, [r5, #28]
 800fdaa:	d104      	bne.n	800fdb6 <_Bfree+0x22>
 800fdac:	218f      	movs	r1, #143	@ 0x8f
 800fdae:	4b09      	ldr	r3, [pc, #36]	@ (800fdd4 <_Bfree+0x40>)
 800fdb0:	4809      	ldr	r0, [pc, #36]	@ (800fdd8 <_Bfree+0x44>)
 800fdb2:	f001 fa27 	bl	8011204 <__assert_func>
 800fdb6:	6046      	str	r6, [r0, #4]
 800fdb8:	6086      	str	r6, [r0, #8]
 800fdba:	6006      	str	r6, [r0, #0]
 800fdbc:	60c6      	str	r6, [r0, #12]
 800fdbe:	2c00      	cmp	r4, #0
 800fdc0:	d007      	beq.n	800fdd2 <_Bfree+0x3e>
 800fdc2:	69eb      	ldr	r3, [r5, #28]
 800fdc4:	6862      	ldr	r2, [r4, #4]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	0092      	lsls	r2, r2, #2
 800fdca:	189b      	adds	r3, r3, r2
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	6022      	str	r2, [r4, #0]
 800fdd0:	601c      	str	r4, [r3, #0]
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	08012732 	.word	0x08012732
 800fdd8:	08012749 	.word	0x08012749

0800fddc <__multadd>:
 800fddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdde:	000f      	movs	r7, r1
 800fde0:	9001      	str	r0, [sp, #4]
 800fde2:	000c      	movs	r4, r1
 800fde4:	001e      	movs	r6, r3
 800fde6:	2000      	movs	r0, #0
 800fde8:	690d      	ldr	r5, [r1, #16]
 800fdea:	3714      	adds	r7, #20
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	3001      	adds	r0, #1
 800fdf0:	b299      	uxth	r1, r3
 800fdf2:	4351      	muls	r1, r2
 800fdf4:	0c1b      	lsrs	r3, r3, #16
 800fdf6:	4353      	muls	r3, r2
 800fdf8:	1989      	adds	r1, r1, r6
 800fdfa:	0c0e      	lsrs	r6, r1, #16
 800fdfc:	199b      	adds	r3, r3, r6
 800fdfe:	0c1e      	lsrs	r6, r3, #16
 800fe00:	b289      	uxth	r1, r1
 800fe02:	041b      	lsls	r3, r3, #16
 800fe04:	185b      	adds	r3, r3, r1
 800fe06:	c708      	stmia	r7!, {r3}
 800fe08:	4285      	cmp	r5, r0
 800fe0a:	dcef      	bgt.n	800fdec <__multadd+0x10>
 800fe0c:	2e00      	cmp	r6, #0
 800fe0e:	d022      	beq.n	800fe56 <__multadd+0x7a>
 800fe10:	68a3      	ldr	r3, [r4, #8]
 800fe12:	42ab      	cmp	r3, r5
 800fe14:	dc19      	bgt.n	800fe4a <__multadd+0x6e>
 800fe16:	6861      	ldr	r1, [r4, #4]
 800fe18:	9801      	ldr	r0, [sp, #4]
 800fe1a:	3101      	adds	r1, #1
 800fe1c:	f7ff ff76 	bl	800fd0c <_Balloc>
 800fe20:	1e07      	subs	r7, r0, #0
 800fe22:	d105      	bne.n	800fe30 <__multadd+0x54>
 800fe24:	003a      	movs	r2, r7
 800fe26:	21ba      	movs	r1, #186	@ 0xba
 800fe28:	4b0c      	ldr	r3, [pc, #48]	@ (800fe5c <__multadd+0x80>)
 800fe2a:	480d      	ldr	r0, [pc, #52]	@ (800fe60 <__multadd+0x84>)
 800fe2c:	f001 f9ea 	bl	8011204 <__assert_func>
 800fe30:	0021      	movs	r1, r4
 800fe32:	6922      	ldr	r2, [r4, #16]
 800fe34:	310c      	adds	r1, #12
 800fe36:	3202      	adds	r2, #2
 800fe38:	0092      	lsls	r2, r2, #2
 800fe3a:	300c      	adds	r0, #12
 800fe3c:	f7ff faef 	bl	800f41e <memcpy>
 800fe40:	0021      	movs	r1, r4
 800fe42:	9801      	ldr	r0, [sp, #4]
 800fe44:	f7ff ffa6 	bl	800fd94 <_Bfree>
 800fe48:	003c      	movs	r4, r7
 800fe4a:	1d2b      	adds	r3, r5, #4
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	18e3      	adds	r3, r4, r3
 800fe50:	3501      	adds	r5, #1
 800fe52:	605e      	str	r6, [r3, #4]
 800fe54:	6125      	str	r5, [r4, #16]
 800fe56:	0020      	movs	r0, r4
 800fe58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fe5a:	46c0      	nop			@ (mov r8, r8)
 800fe5c:	080126c1 	.word	0x080126c1
 800fe60:	08012749 	.word	0x08012749

0800fe64 <__s2b>:
 800fe64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe66:	0007      	movs	r7, r0
 800fe68:	0018      	movs	r0, r3
 800fe6a:	000c      	movs	r4, r1
 800fe6c:	3008      	adds	r0, #8
 800fe6e:	2109      	movs	r1, #9
 800fe70:	9301      	str	r3, [sp, #4]
 800fe72:	0015      	movs	r5, r2
 800fe74:	f7f0 f9f8 	bl	8000268 <__divsi3>
 800fe78:	2301      	movs	r3, #1
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	4283      	cmp	r3, r0
 800fe7e:	db0a      	blt.n	800fe96 <__s2b+0x32>
 800fe80:	0038      	movs	r0, r7
 800fe82:	f7ff ff43 	bl	800fd0c <_Balloc>
 800fe86:	1e01      	subs	r1, r0, #0
 800fe88:	d108      	bne.n	800fe9c <__s2b+0x38>
 800fe8a:	000a      	movs	r2, r1
 800fe8c:	4b19      	ldr	r3, [pc, #100]	@ (800fef4 <__s2b+0x90>)
 800fe8e:	481a      	ldr	r0, [pc, #104]	@ (800fef8 <__s2b+0x94>)
 800fe90:	31d3      	adds	r1, #211	@ 0xd3
 800fe92:	f001 f9b7 	bl	8011204 <__assert_func>
 800fe96:	005b      	lsls	r3, r3, #1
 800fe98:	3101      	adds	r1, #1
 800fe9a:	e7ef      	b.n	800fe7c <__s2b+0x18>
 800fe9c:	9b08      	ldr	r3, [sp, #32]
 800fe9e:	6143      	str	r3, [r0, #20]
 800fea0:	2301      	movs	r3, #1
 800fea2:	6103      	str	r3, [r0, #16]
 800fea4:	2d09      	cmp	r5, #9
 800fea6:	dd18      	ble.n	800feda <__s2b+0x76>
 800fea8:	0023      	movs	r3, r4
 800feaa:	3309      	adds	r3, #9
 800feac:	001e      	movs	r6, r3
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	1964      	adds	r4, r4, r5
 800feb2:	7833      	ldrb	r3, [r6, #0]
 800feb4:	220a      	movs	r2, #10
 800feb6:	0038      	movs	r0, r7
 800feb8:	3b30      	subs	r3, #48	@ 0x30
 800feba:	f7ff ff8f 	bl	800fddc <__multadd>
 800febe:	3601      	adds	r6, #1
 800fec0:	0001      	movs	r1, r0
 800fec2:	42a6      	cmp	r6, r4
 800fec4:	d1f5      	bne.n	800feb2 <__s2b+0x4e>
 800fec6:	002c      	movs	r4, r5
 800fec8:	9b00      	ldr	r3, [sp, #0]
 800feca:	3c08      	subs	r4, #8
 800fecc:	191c      	adds	r4, r3, r4
 800fece:	002e      	movs	r6, r5
 800fed0:	9b01      	ldr	r3, [sp, #4]
 800fed2:	429e      	cmp	r6, r3
 800fed4:	db04      	blt.n	800fee0 <__s2b+0x7c>
 800fed6:	0008      	movs	r0, r1
 800fed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800feda:	2509      	movs	r5, #9
 800fedc:	340a      	adds	r4, #10
 800fede:	e7f6      	b.n	800fece <__s2b+0x6a>
 800fee0:	1b63      	subs	r3, r4, r5
 800fee2:	5d9b      	ldrb	r3, [r3, r6]
 800fee4:	220a      	movs	r2, #10
 800fee6:	0038      	movs	r0, r7
 800fee8:	3b30      	subs	r3, #48	@ 0x30
 800feea:	f7ff ff77 	bl	800fddc <__multadd>
 800feee:	3601      	adds	r6, #1
 800fef0:	0001      	movs	r1, r0
 800fef2:	e7ed      	b.n	800fed0 <__s2b+0x6c>
 800fef4:	080126c1 	.word	0x080126c1
 800fef8:	08012749 	.word	0x08012749

0800fefc <__hi0bits>:
 800fefc:	2280      	movs	r2, #128	@ 0x80
 800fefe:	0003      	movs	r3, r0
 800ff00:	0252      	lsls	r2, r2, #9
 800ff02:	2000      	movs	r0, #0
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d201      	bcs.n	800ff0c <__hi0bits+0x10>
 800ff08:	041b      	lsls	r3, r3, #16
 800ff0a:	3010      	adds	r0, #16
 800ff0c:	2280      	movs	r2, #128	@ 0x80
 800ff0e:	0452      	lsls	r2, r2, #17
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d201      	bcs.n	800ff18 <__hi0bits+0x1c>
 800ff14:	3008      	adds	r0, #8
 800ff16:	021b      	lsls	r3, r3, #8
 800ff18:	2280      	movs	r2, #128	@ 0x80
 800ff1a:	0552      	lsls	r2, r2, #21
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d201      	bcs.n	800ff24 <__hi0bits+0x28>
 800ff20:	3004      	adds	r0, #4
 800ff22:	011b      	lsls	r3, r3, #4
 800ff24:	2280      	movs	r2, #128	@ 0x80
 800ff26:	05d2      	lsls	r2, r2, #23
 800ff28:	4293      	cmp	r3, r2
 800ff2a:	d201      	bcs.n	800ff30 <__hi0bits+0x34>
 800ff2c:	3002      	adds	r0, #2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	db03      	blt.n	800ff3c <__hi0bits+0x40>
 800ff34:	3001      	adds	r0, #1
 800ff36:	4213      	tst	r3, r2
 800ff38:	d100      	bne.n	800ff3c <__hi0bits+0x40>
 800ff3a:	2020      	movs	r0, #32
 800ff3c:	4770      	bx	lr

0800ff3e <__lo0bits>:
 800ff3e:	6803      	ldr	r3, [r0, #0]
 800ff40:	0001      	movs	r1, r0
 800ff42:	2207      	movs	r2, #7
 800ff44:	0018      	movs	r0, r3
 800ff46:	4010      	ands	r0, r2
 800ff48:	4213      	tst	r3, r2
 800ff4a:	d00d      	beq.n	800ff68 <__lo0bits+0x2a>
 800ff4c:	3a06      	subs	r2, #6
 800ff4e:	2000      	movs	r0, #0
 800ff50:	4213      	tst	r3, r2
 800ff52:	d105      	bne.n	800ff60 <__lo0bits+0x22>
 800ff54:	3002      	adds	r0, #2
 800ff56:	4203      	tst	r3, r0
 800ff58:	d003      	beq.n	800ff62 <__lo0bits+0x24>
 800ff5a:	40d3      	lsrs	r3, r2
 800ff5c:	0010      	movs	r0, r2
 800ff5e:	600b      	str	r3, [r1, #0]
 800ff60:	4770      	bx	lr
 800ff62:	089b      	lsrs	r3, r3, #2
 800ff64:	600b      	str	r3, [r1, #0]
 800ff66:	e7fb      	b.n	800ff60 <__lo0bits+0x22>
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	d101      	bne.n	800ff72 <__lo0bits+0x34>
 800ff6e:	2010      	movs	r0, #16
 800ff70:	0c1b      	lsrs	r3, r3, #16
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	2a00      	cmp	r2, #0
 800ff76:	d101      	bne.n	800ff7c <__lo0bits+0x3e>
 800ff78:	3008      	adds	r0, #8
 800ff7a:	0a1b      	lsrs	r3, r3, #8
 800ff7c:	071a      	lsls	r2, r3, #28
 800ff7e:	d101      	bne.n	800ff84 <__lo0bits+0x46>
 800ff80:	3004      	adds	r0, #4
 800ff82:	091b      	lsrs	r3, r3, #4
 800ff84:	079a      	lsls	r2, r3, #30
 800ff86:	d101      	bne.n	800ff8c <__lo0bits+0x4e>
 800ff88:	3002      	adds	r0, #2
 800ff8a:	089b      	lsrs	r3, r3, #2
 800ff8c:	07da      	lsls	r2, r3, #31
 800ff8e:	d4e9      	bmi.n	800ff64 <__lo0bits+0x26>
 800ff90:	3001      	adds	r0, #1
 800ff92:	085b      	lsrs	r3, r3, #1
 800ff94:	d1e6      	bne.n	800ff64 <__lo0bits+0x26>
 800ff96:	2020      	movs	r0, #32
 800ff98:	e7e2      	b.n	800ff60 <__lo0bits+0x22>
	...

0800ff9c <__i2b>:
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	000c      	movs	r4, r1
 800ffa0:	2101      	movs	r1, #1
 800ffa2:	f7ff feb3 	bl	800fd0c <_Balloc>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d107      	bne.n	800ffba <__i2b+0x1e>
 800ffaa:	2146      	movs	r1, #70	@ 0x46
 800ffac:	4c05      	ldr	r4, [pc, #20]	@ (800ffc4 <__i2b+0x28>)
 800ffae:	0002      	movs	r2, r0
 800ffb0:	4b05      	ldr	r3, [pc, #20]	@ (800ffc8 <__i2b+0x2c>)
 800ffb2:	0020      	movs	r0, r4
 800ffb4:	31ff      	adds	r1, #255	@ 0xff
 800ffb6:	f001 f925 	bl	8011204 <__assert_func>
 800ffba:	2301      	movs	r3, #1
 800ffbc:	6144      	str	r4, [r0, #20]
 800ffbe:	6103      	str	r3, [r0, #16]
 800ffc0:	bd10      	pop	{r4, pc}
 800ffc2:	46c0      	nop			@ (mov r8, r8)
 800ffc4:	08012749 	.word	0x08012749
 800ffc8:	080126c1 	.word	0x080126c1

0800ffcc <__multiply>:
 800ffcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffce:	0014      	movs	r4, r2
 800ffd0:	690a      	ldr	r2, [r1, #16]
 800ffd2:	6923      	ldr	r3, [r4, #16]
 800ffd4:	000d      	movs	r5, r1
 800ffd6:	b08b      	sub	sp, #44	@ 0x2c
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	db02      	blt.n	800ffe2 <__multiply+0x16>
 800ffdc:	0023      	movs	r3, r4
 800ffde:	000c      	movs	r4, r1
 800ffe0:	001d      	movs	r5, r3
 800ffe2:	6927      	ldr	r7, [r4, #16]
 800ffe4:	692e      	ldr	r6, [r5, #16]
 800ffe6:	6861      	ldr	r1, [r4, #4]
 800ffe8:	19bb      	adds	r3, r7, r6
 800ffea:	9303      	str	r3, [sp, #12]
 800ffec:	68a3      	ldr	r3, [r4, #8]
 800ffee:	19ba      	adds	r2, r7, r6
 800fff0:	4293      	cmp	r3, r2
 800fff2:	da00      	bge.n	800fff6 <__multiply+0x2a>
 800fff4:	3101      	adds	r1, #1
 800fff6:	f7ff fe89 	bl	800fd0c <_Balloc>
 800fffa:	9002      	str	r0, [sp, #8]
 800fffc:	2800      	cmp	r0, #0
 800fffe:	d106      	bne.n	801000e <__multiply+0x42>
 8010000:	21b1      	movs	r1, #177	@ 0xb1
 8010002:	4b49      	ldr	r3, [pc, #292]	@ (8010128 <__multiply+0x15c>)
 8010004:	4849      	ldr	r0, [pc, #292]	@ (801012c <__multiply+0x160>)
 8010006:	9a02      	ldr	r2, [sp, #8]
 8010008:	0049      	lsls	r1, r1, #1
 801000a:	f001 f8fb 	bl	8011204 <__assert_func>
 801000e:	9b02      	ldr	r3, [sp, #8]
 8010010:	2200      	movs	r2, #0
 8010012:	3314      	adds	r3, #20
 8010014:	469c      	mov	ip, r3
 8010016:	19bb      	adds	r3, r7, r6
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	4463      	add	r3, ip
 801001c:	9304      	str	r3, [sp, #16]
 801001e:	4663      	mov	r3, ip
 8010020:	9904      	ldr	r1, [sp, #16]
 8010022:	428b      	cmp	r3, r1
 8010024:	d32a      	bcc.n	801007c <__multiply+0xb0>
 8010026:	0023      	movs	r3, r4
 8010028:	00bf      	lsls	r7, r7, #2
 801002a:	3314      	adds	r3, #20
 801002c:	3514      	adds	r5, #20
 801002e:	9308      	str	r3, [sp, #32]
 8010030:	00b6      	lsls	r6, r6, #2
 8010032:	19db      	adds	r3, r3, r7
 8010034:	9305      	str	r3, [sp, #20]
 8010036:	19ab      	adds	r3, r5, r6
 8010038:	9309      	str	r3, [sp, #36]	@ 0x24
 801003a:	2304      	movs	r3, #4
 801003c:	9306      	str	r3, [sp, #24]
 801003e:	0023      	movs	r3, r4
 8010040:	9a05      	ldr	r2, [sp, #20]
 8010042:	3315      	adds	r3, #21
 8010044:	9501      	str	r5, [sp, #4]
 8010046:	429a      	cmp	r2, r3
 8010048:	d305      	bcc.n	8010056 <__multiply+0x8a>
 801004a:	1b13      	subs	r3, r2, r4
 801004c:	3b15      	subs	r3, #21
 801004e:	089b      	lsrs	r3, r3, #2
 8010050:	3301      	adds	r3, #1
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	9306      	str	r3, [sp, #24]
 8010056:	9b01      	ldr	r3, [sp, #4]
 8010058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801005a:	4293      	cmp	r3, r2
 801005c:	d310      	bcc.n	8010080 <__multiply+0xb4>
 801005e:	9b03      	ldr	r3, [sp, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	dd05      	ble.n	8010070 <__multiply+0xa4>
 8010064:	9b04      	ldr	r3, [sp, #16]
 8010066:	3b04      	subs	r3, #4
 8010068:	9304      	str	r3, [sp, #16]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d056      	beq.n	801011e <__multiply+0x152>
 8010070:	9b02      	ldr	r3, [sp, #8]
 8010072:	9a03      	ldr	r2, [sp, #12]
 8010074:	0018      	movs	r0, r3
 8010076:	611a      	str	r2, [r3, #16]
 8010078:	b00b      	add	sp, #44	@ 0x2c
 801007a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801007c:	c304      	stmia	r3!, {r2}
 801007e:	e7cf      	b.n	8010020 <__multiply+0x54>
 8010080:	9b01      	ldr	r3, [sp, #4]
 8010082:	6818      	ldr	r0, [r3, #0]
 8010084:	b280      	uxth	r0, r0
 8010086:	2800      	cmp	r0, #0
 8010088:	d01e      	beq.n	80100c8 <__multiply+0xfc>
 801008a:	4667      	mov	r7, ip
 801008c:	2500      	movs	r5, #0
 801008e:	9e08      	ldr	r6, [sp, #32]
 8010090:	ce02      	ldmia	r6!, {r1}
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	9307      	str	r3, [sp, #28]
 8010096:	b28b      	uxth	r3, r1
 8010098:	4343      	muls	r3, r0
 801009a:	001a      	movs	r2, r3
 801009c:	466b      	mov	r3, sp
 801009e:	0c09      	lsrs	r1, r1, #16
 80100a0:	8b9b      	ldrh	r3, [r3, #28]
 80100a2:	4341      	muls	r1, r0
 80100a4:	18d3      	adds	r3, r2, r3
 80100a6:	9a07      	ldr	r2, [sp, #28]
 80100a8:	195b      	adds	r3, r3, r5
 80100aa:	0c12      	lsrs	r2, r2, #16
 80100ac:	1889      	adds	r1, r1, r2
 80100ae:	0c1a      	lsrs	r2, r3, #16
 80100b0:	188a      	adds	r2, r1, r2
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	0c15      	lsrs	r5, r2, #16
 80100b6:	0412      	lsls	r2, r2, #16
 80100b8:	431a      	orrs	r2, r3
 80100ba:	9b05      	ldr	r3, [sp, #20]
 80100bc:	c704      	stmia	r7!, {r2}
 80100be:	42b3      	cmp	r3, r6
 80100c0:	d8e6      	bhi.n	8010090 <__multiply+0xc4>
 80100c2:	4663      	mov	r3, ip
 80100c4:	9a06      	ldr	r2, [sp, #24]
 80100c6:	509d      	str	r5, [r3, r2]
 80100c8:	9b01      	ldr	r3, [sp, #4]
 80100ca:	6818      	ldr	r0, [r3, #0]
 80100cc:	0c00      	lsrs	r0, r0, #16
 80100ce:	d020      	beq.n	8010112 <__multiply+0x146>
 80100d0:	4663      	mov	r3, ip
 80100d2:	0025      	movs	r5, r4
 80100d4:	4661      	mov	r1, ip
 80100d6:	2700      	movs	r7, #0
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3514      	adds	r5, #20
 80100dc:	682a      	ldr	r2, [r5, #0]
 80100de:	680e      	ldr	r6, [r1, #0]
 80100e0:	b292      	uxth	r2, r2
 80100e2:	4342      	muls	r2, r0
 80100e4:	0c36      	lsrs	r6, r6, #16
 80100e6:	1992      	adds	r2, r2, r6
 80100e8:	19d2      	adds	r2, r2, r7
 80100ea:	0416      	lsls	r6, r2, #16
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	431e      	orrs	r6, r3
 80100f0:	600e      	str	r6, [r1, #0]
 80100f2:	cd40      	ldmia	r5!, {r6}
 80100f4:	684b      	ldr	r3, [r1, #4]
 80100f6:	0c36      	lsrs	r6, r6, #16
 80100f8:	4346      	muls	r6, r0
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	0c12      	lsrs	r2, r2, #16
 80100fe:	18f3      	adds	r3, r6, r3
 8010100:	189b      	adds	r3, r3, r2
 8010102:	9a05      	ldr	r2, [sp, #20]
 8010104:	0c1f      	lsrs	r7, r3, #16
 8010106:	3104      	adds	r1, #4
 8010108:	42aa      	cmp	r2, r5
 801010a:	d8e7      	bhi.n	80100dc <__multiply+0x110>
 801010c:	4662      	mov	r2, ip
 801010e:	9906      	ldr	r1, [sp, #24]
 8010110:	5053      	str	r3, [r2, r1]
 8010112:	9b01      	ldr	r3, [sp, #4]
 8010114:	3304      	adds	r3, #4
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	2304      	movs	r3, #4
 801011a:	449c      	add	ip, r3
 801011c:	e79b      	b.n	8010056 <__multiply+0x8a>
 801011e:	9b03      	ldr	r3, [sp, #12]
 8010120:	3b01      	subs	r3, #1
 8010122:	9303      	str	r3, [sp, #12]
 8010124:	e79b      	b.n	801005e <__multiply+0x92>
 8010126:	46c0      	nop			@ (mov r8, r8)
 8010128:	080126c1 	.word	0x080126c1
 801012c:	08012749 	.word	0x08012749

08010130 <__pow5mult>:
 8010130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010132:	2303      	movs	r3, #3
 8010134:	0015      	movs	r5, r2
 8010136:	0007      	movs	r7, r0
 8010138:	000e      	movs	r6, r1
 801013a:	401a      	ands	r2, r3
 801013c:	421d      	tst	r5, r3
 801013e:	d008      	beq.n	8010152 <__pow5mult+0x22>
 8010140:	4925      	ldr	r1, [pc, #148]	@ (80101d8 <__pow5mult+0xa8>)
 8010142:	3a01      	subs	r2, #1
 8010144:	0092      	lsls	r2, r2, #2
 8010146:	5852      	ldr	r2, [r2, r1]
 8010148:	2300      	movs	r3, #0
 801014a:	0031      	movs	r1, r6
 801014c:	f7ff fe46 	bl	800fddc <__multadd>
 8010150:	0006      	movs	r6, r0
 8010152:	10ad      	asrs	r5, r5, #2
 8010154:	d03d      	beq.n	80101d2 <__pow5mult+0xa2>
 8010156:	69fc      	ldr	r4, [r7, #28]
 8010158:	2c00      	cmp	r4, #0
 801015a:	d10f      	bne.n	801017c <__pow5mult+0x4c>
 801015c:	2010      	movs	r0, #16
 801015e:	f001 f89d 	bl	801129c <malloc>
 8010162:	1e02      	subs	r2, r0, #0
 8010164:	61f8      	str	r0, [r7, #28]
 8010166:	d105      	bne.n	8010174 <__pow5mult+0x44>
 8010168:	21b4      	movs	r1, #180	@ 0xb4
 801016a:	4b1c      	ldr	r3, [pc, #112]	@ (80101dc <__pow5mult+0xac>)
 801016c:	481c      	ldr	r0, [pc, #112]	@ (80101e0 <__pow5mult+0xb0>)
 801016e:	31ff      	adds	r1, #255	@ 0xff
 8010170:	f001 f848 	bl	8011204 <__assert_func>
 8010174:	6044      	str	r4, [r0, #4]
 8010176:	6084      	str	r4, [r0, #8]
 8010178:	6004      	str	r4, [r0, #0]
 801017a:	60c4      	str	r4, [r0, #12]
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	689c      	ldr	r4, [r3, #8]
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	2c00      	cmp	r4, #0
 8010184:	d108      	bne.n	8010198 <__pow5mult+0x68>
 8010186:	0038      	movs	r0, r7
 8010188:	4916      	ldr	r1, [pc, #88]	@ (80101e4 <__pow5mult+0xb4>)
 801018a:	f7ff ff07 	bl	800ff9c <__i2b>
 801018e:	9b01      	ldr	r3, [sp, #4]
 8010190:	0004      	movs	r4, r0
 8010192:	6098      	str	r0, [r3, #8]
 8010194:	2300      	movs	r3, #0
 8010196:	6003      	str	r3, [r0, #0]
 8010198:	2301      	movs	r3, #1
 801019a:	421d      	tst	r5, r3
 801019c:	d00a      	beq.n	80101b4 <__pow5mult+0x84>
 801019e:	0031      	movs	r1, r6
 80101a0:	0022      	movs	r2, r4
 80101a2:	0038      	movs	r0, r7
 80101a4:	f7ff ff12 	bl	800ffcc <__multiply>
 80101a8:	0031      	movs	r1, r6
 80101aa:	9001      	str	r0, [sp, #4]
 80101ac:	0038      	movs	r0, r7
 80101ae:	f7ff fdf1 	bl	800fd94 <_Bfree>
 80101b2:	9e01      	ldr	r6, [sp, #4]
 80101b4:	106d      	asrs	r5, r5, #1
 80101b6:	d00c      	beq.n	80101d2 <__pow5mult+0xa2>
 80101b8:	6820      	ldr	r0, [r4, #0]
 80101ba:	2800      	cmp	r0, #0
 80101bc:	d107      	bne.n	80101ce <__pow5mult+0x9e>
 80101be:	0022      	movs	r2, r4
 80101c0:	0021      	movs	r1, r4
 80101c2:	0038      	movs	r0, r7
 80101c4:	f7ff ff02 	bl	800ffcc <__multiply>
 80101c8:	2300      	movs	r3, #0
 80101ca:	6020      	str	r0, [r4, #0]
 80101cc:	6003      	str	r3, [r0, #0]
 80101ce:	0004      	movs	r4, r0
 80101d0:	e7e2      	b.n	8010198 <__pow5mult+0x68>
 80101d2:	0030      	movs	r0, r6
 80101d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80101d6:	46c0      	nop			@ (mov r8, r8)
 80101d8:	080127a4 	.word	0x080127a4
 80101dc:	08012732 	.word	0x08012732
 80101e0:	08012749 	.word	0x08012749
 80101e4:	00000271 	.word	0x00000271

080101e8 <__lshift>:
 80101e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ea:	000c      	movs	r4, r1
 80101ec:	0016      	movs	r6, r2
 80101ee:	6923      	ldr	r3, [r4, #16]
 80101f0:	1157      	asrs	r7, r2, #5
 80101f2:	b085      	sub	sp, #20
 80101f4:	18fb      	adds	r3, r7, r3
 80101f6:	9301      	str	r3, [sp, #4]
 80101f8:	3301      	adds	r3, #1
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	6849      	ldr	r1, [r1, #4]
 80101fe:	68a3      	ldr	r3, [r4, #8]
 8010200:	9002      	str	r0, [sp, #8]
 8010202:	9a00      	ldr	r2, [sp, #0]
 8010204:	4293      	cmp	r3, r2
 8010206:	db10      	blt.n	801022a <__lshift+0x42>
 8010208:	9802      	ldr	r0, [sp, #8]
 801020a:	f7ff fd7f 	bl	800fd0c <_Balloc>
 801020e:	2300      	movs	r3, #0
 8010210:	0001      	movs	r1, r0
 8010212:	0005      	movs	r5, r0
 8010214:	001a      	movs	r2, r3
 8010216:	3114      	adds	r1, #20
 8010218:	4298      	cmp	r0, r3
 801021a:	d10c      	bne.n	8010236 <__lshift+0x4e>
 801021c:	21ef      	movs	r1, #239	@ 0xef
 801021e:	002a      	movs	r2, r5
 8010220:	4b25      	ldr	r3, [pc, #148]	@ (80102b8 <__lshift+0xd0>)
 8010222:	4826      	ldr	r0, [pc, #152]	@ (80102bc <__lshift+0xd4>)
 8010224:	0049      	lsls	r1, r1, #1
 8010226:	f000 ffed 	bl	8011204 <__assert_func>
 801022a:	3101      	adds	r1, #1
 801022c:	005b      	lsls	r3, r3, #1
 801022e:	e7e8      	b.n	8010202 <__lshift+0x1a>
 8010230:	0098      	lsls	r0, r3, #2
 8010232:	500a      	str	r2, [r1, r0]
 8010234:	3301      	adds	r3, #1
 8010236:	42bb      	cmp	r3, r7
 8010238:	dbfa      	blt.n	8010230 <__lshift+0x48>
 801023a:	43fb      	mvns	r3, r7
 801023c:	17db      	asrs	r3, r3, #31
 801023e:	401f      	ands	r7, r3
 8010240:	00bf      	lsls	r7, r7, #2
 8010242:	0023      	movs	r3, r4
 8010244:	201f      	movs	r0, #31
 8010246:	19c9      	adds	r1, r1, r7
 8010248:	0037      	movs	r7, r6
 801024a:	6922      	ldr	r2, [r4, #16]
 801024c:	3314      	adds	r3, #20
 801024e:	0092      	lsls	r2, r2, #2
 8010250:	189a      	adds	r2, r3, r2
 8010252:	4007      	ands	r7, r0
 8010254:	4206      	tst	r6, r0
 8010256:	d029      	beq.n	80102ac <__lshift+0xc4>
 8010258:	3001      	adds	r0, #1
 801025a:	1bc0      	subs	r0, r0, r7
 801025c:	9003      	str	r0, [sp, #12]
 801025e:	468c      	mov	ip, r1
 8010260:	2000      	movs	r0, #0
 8010262:	681e      	ldr	r6, [r3, #0]
 8010264:	40be      	lsls	r6, r7
 8010266:	4306      	orrs	r6, r0
 8010268:	4660      	mov	r0, ip
 801026a:	c040      	stmia	r0!, {r6}
 801026c:	4684      	mov	ip, r0
 801026e:	9e03      	ldr	r6, [sp, #12]
 8010270:	cb01      	ldmia	r3!, {r0}
 8010272:	40f0      	lsrs	r0, r6
 8010274:	429a      	cmp	r2, r3
 8010276:	d8f4      	bhi.n	8010262 <__lshift+0x7a>
 8010278:	0026      	movs	r6, r4
 801027a:	3615      	adds	r6, #21
 801027c:	2304      	movs	r3, #4
 801027e:	42b2      	cmp	r2, r6
 8010280:	d304      	bcc.n	801028c <__lshift+0xa4>
 8010282:	1b13      	subs	r3, r2, r4
 8010284:	3b15      	subs	r3, #21
 8010286:	089b      	lsrs	r3, r3, #2
 8010288:	3301      	adds	r3, #1
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	50c8      	str	r0, [r1, r3]
 801028e:	2800      	cmp	r0, #0
 8010290:	d002      	beq.n	8010298 <__lshift+0xb0>
 8010292:	9b01      	ldr	r3, [sp, #4]
 8010294:	3302      	adds	r3, #2
 8010296:	9300      	str	r3, [sp, #0]
 8010298:	9b00      	ldr	r3, [sp, #0]
 801029a:	9802      	ldr	r0, [sp, #8]
 801029c:	3b01      	subs	r3, #1
 801029e:	0021      	movs	r1, r4
 80102a0:	612b      	str	r3, [r5, #16]
 80102a2:	f7ff fd77 	bl	800fd94 <_Bfree>
 80102a6:	0028      	movs	r0, r5
 80102a8:	b005      	add	sp, #20
 80102aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ac:	cb01      	ldmia	r3!, {r0}
 80102ae:	c101      	stmia	r1!, {r0}
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d8fb      	bhi.n	80102ac <__lshift+0xc4>
 80102b4:	e7f0      	b.n	8010298 <__lshift+0xb0>
 80102b6:	46c0      	nop			@ (mov r8, r8)
 80102b8:	080126c1 	.word	0x080126c1
 80102bc:	08012749 	.word	0x08012749

080102c0 <__mcmp>:
 80102c0:	b530      	push	{r4, r5, lr}
 80102c2:	690b      	ldr	r3, [r1, #16]
 80102c4:	6904      	ldr	r4, [r0, #16]
 80102c6:	0002      	movs	r2, r0
 80102c8:	1ae0      	subs	r0, r4, r3
 80102ca:	429c      	cmp	r4, r3
 80102cc:	d10f      	bne.n	80102ee <__mcmp+0x2e>
 80102ce:	3214      	adds	r2, #20
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	3114      	adds	r1, #20
 80102d4:	0014      	movs	r4, r2
 80102d6:	18c9      	adds	r1, r1, r3
 80102d8:	18d2      	adds	r2, r2, r3
 80102da:	3a04      	subs	r2, #4
 80102dc:	3904      	subs	r1, #4
 80102de:	6815      	ldr	r5, [r2, #0]
 80102e0:	680b      	ldr	r3, [r1, #0]
 80102e2:	429d      	cmp	r5, r3
 80102e4:	d004      	beq.n	80102f0 <__mcmp+0x30>
 80102e6:	2001      	movs	r0, #1
 80102e8:	429d      	cmp	r5, r3
 80102ea:	d200      	bcs.n	80102ee <__mcmp+0x2e>
 80102ec:	3802      	subs	r0, #2
 80102ee:	bd30      	pop	{r4, r5, pc}
 80102f0:	4294      	cmp	r4, r2
 80102f2:	d3f2      	bcc.n	80102da <__mcmp+0x1a>
 80102f4:	e7fb      	b.n	80102ee <__mcmp+0x2e>
	...

080102f8 <__mdiff>:
 80102f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102fa:	000c      	movs	r4, r1
 80102fc:	b087      	sub	sp, #28
 80102fe:	9000      	str	r0, [sp, #0]
 8010300:	0011      	movs	r1, r2
 8010302:	0020      	movs	r0, r4
 8010304:	0017      	movs	r7, r2
 8010306:	f7ff ffdb 	bl	80102c0 <__mcmp>
 801030a:	1e05      	subs	r5, r0, #0
 801030c:	d110      	bne.n	8010330 <__mdiff+0x38>
 801030e:	0001      	movs	r1, r0
 8010310:	9800      	ldr	r0, [sp, #0]
 8010312:	f7ff fcfb 	bl	800fd0c <_Balloc>
 8010316:	1e02      	subs	r2, r0, #0
 8010318:	d104      	bne.n	8010324 <__mdiff+0x2c>
 801031a:	4b40      	ldr	r3, [pc, #256]	@ (801041c <__mdiff+0x124>)
 801031c:	4840      	ldr	r0, [pc, #256]	@ (8010420 <__mdiff+0x128>)
 801031e:	4941      	ldr	r1, [pc, #260]	@ (8010424 <__mdiff+0x12c>)
 8010320:	f000 ff70 	bl	8011204 <__assert_func>
 8010324:	2301      	movs	r3, #1
 8010326:	6145      	str	r5, [r0, #20]
 8010328:	6103      	str	r3, [r0, #16]
 801032a:	0010      	movs	r0, r2
 801032c:	b007      	add	sp, #28
 801032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010330:	2600      	movs	r6, #0
 8010332:	42b0      	cmp	r0, r6
 8010334:	da03      	bge.n	801033e <__mdiff+0x46>
 8010336:	0023      	movs	r3, r4
 8010338:	003c      	movs	r4, r7
 801033a:	001f      	movs	r7, r3
 801033c:	3601      	adds	r6, #1
 801033e:	6861      	ldr	r1, [r4, #4]
 8010340:	9800      	ldr	r0, [sp, #0]
 8010342:	f7ff fce3 	bl	800fd0c <_Balloc>
 8010346:	1e02      	subs	r2, r0, #0
 8010348:	d103      	bne.n	8010352 <__mdiff+0x5a>
 801034a:	4b34      	ldr	r3, [pc, #208]	@ (801041c <__mdiff+0x124>)
 801034c:	4834      	ldr	r0, [pc, #208]	@ (8010420 <__mdiff+0x128>)
 801034e:	4936      	ldr	r1, [pc, #216]	@ (8010428 <__mdiff+0x130>)
 8010350:	e7e6      	b.n	8010320 <__mdiff+0x28>
 8010352:	6923      	ldr	r3, [r4, #16]
 8010354:	3414      	adds	r4, #20
 8010356:	9300      	str	r3, [sp, #0]
 8010358:	009b      	lsls	r3, r3, #2
 801035a:	18e3      	adds	r3, r4, r3
 801035c:	0021      	movs	r1, r4
 801035e:	9401      	str	r4, [sp, #4]
 8010360:	003c      	movs	r4, r7
 8010362:	9302      	str	r3, [sp, #8]
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	3414      	adds	r4, #20
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	18e3      	adds	r3, r4, r3
 801036c:	9303      	str	r3, [sp, #12]
 801036e:	0003      	movs	r3, r0
 8010370:	60c6      	str	r6, [r0, #12]
 8010372:	468c      	mov	ip, r1
 8010374:	2000      	movs	r0, #0
 8010376:	3314      	adds	r3, #20
 8010378:	9304      	str	r3, [sp, #16]
 801037a:	9305      	str	r3, [sp, #20]
 801037c:	4663      	mov	r3, ip
 801037e:	cb20      	ldmia	r3!, {r5}
 8010380:	b2a9      	uxth	r1, r5
 8010382:	000e      	movs	r6, r1
 8010384:	469c      	mov	ip, r3
 8010386:	cc08      	ldmia	r4!, {r3}
 8010388:	0c2d      	lsrs	r5, r5, #16
 801038a:	b299      	uxth	r1, r3
 801038c:	1a71      	subs	r1, r6, r1
 801038e:	1809      	adds	r1, r1, r0
 8010390:	0c1b      	lsrs	r3, r3, #16
 8010392:	1408      	asrs	r0, r1, #16
 8010394:	1aeb      	subs	r3, r5, r3
 8010396:	181b      	adds	r3, r3, r0
 8010398:	1418      	asrs	r0, r3, #16
 801039a:	b289      	uxth	r1, r1
 801039c:	041b      	lsls	r3, r3, #16
 801039e:	4319      	orrs	r1, r3
 80103a0:	9b05      	ldr	r3, [sp, #20]
 80103a2:	c302      	stmia	r3!, {r1}
 80103a4:	9305      	str	r3, [sp, #20]
 80103a6:	9b03      	ldr	r3, [sp, #12]
 80103a8:	42a3      	cmp	r3, r4
 80103aa:	d8e7      	bhi.n	801037c <__mdiff+0x84>
 80103ac:	0039      	movs	r1, r7
 80103ae:	9c03      	ldr	r4, [sp, #12]
 80103b0:	3115      	adds	r1, #21
 80103b2:	2304      	movs	r3, #4
 80103b4:	428c      	cmp	r4, r1
 80103b6:	d304      	bcc.n	80103c2 <__mdiff+0xca>
 80103b8:	1be3      	subs	r3, r4, r7
 80103ba:	3b15      	subs	r3, #21
 80103bc:	089b      	lsrs	r3, r3, #2
 80103be:	3301      	adds	r3, #1
 80103c0:	009b      	lsls	r3, r3, #2
 80103c2:	9901      	ldr	r1, [sp, #4]
 80103c4:	18cd      	adds	r5, r1, r3
 80103c6:	9904      	ldr	r1, [sp, #16]
 80103c8:	002e      	movs	r6, r5
 80103ca:	18cb      	adds	r3, r1, r3
 80103cc:	001f      	movs	r7, r3
 80103ce:	9902      	ldr	r1, [sp, #8]
 80103d0:	428e      	cmp	r6, r1
 80103d2:	d311      	bcc.n	80103f8 <__mdiff+0x100>
 80103d4:	9c02      	ldr	r4, [sp, #8]
 80103d6:	1ee9      	subs	r1, r5, #3
 80103d8:	2000      	movs	r0, #0
 80103da:	428c      	cmp	r4, r1
 80103dc:	d304      	bcc.n	80103e8 <__mdiff+0xf0>
 80103de:	0021      	movs	r1, r4
 80103e0:	3103      	adds	r1, #3
 80103e2:	1b49      	subs	r1, r1, r5
 80103e4:	0889      	lsrs	r1, r1, #2
 80103e6:	0088      	lsls	r0, r1, #2
 80103e8:	181b      	adds	r3, r3, r0
 80103ea:	3b04      	subs	r3, #4
 80103ec:	6819      	ldr	r1, [r3, #0]
 80103ee:	2900      	cmp	r1, #0
 80103f0:	d010      	beq.n	8010414 <__mdiff+0x11c>
 80103f2:	9b00      	ldr	r3, [sp, #0]
 80103f4:	6113      	str	r3, [r2, #16]
 80103f6:	e798      	b.n	801032a <__mdiff+0x32>
 80103f8:	4684      	mov	ip, r0
 80103fa:	ce02      	ldmia	r6!, {r1}
 80103fc:	b288      	uxth	r0, r1
 80103fe:	4460      	add	r0, ip
 8010400:	1400      	asrs	r0, r0, #16
 8010402:	0c0c      	lsrs	r4, r1, #16
 8010404:	1904      	adds	r4, r0, r4
 8010406:	4461      	add	r1, ip
 8010408:	1420      	asrs	r0, r4, #16
 801040a:	b289      	uxth	r1, r1
 801040c:	0424      	lsls	r4, r4, #16
 801040e:	4321      	orrs	r1, r4
 8010410:	c702      	stmia	r7!, {r1}
 8010412:	e7dc      	b.n	80103ce <__mdiff+0xd6>
 8010414:	9900      	ldr	r1, [sp, #0]
 8010416:	3901      	subs	r1, #1
 8010418:	9100      	str	r1, [sp, #0]
 801041a:	e7e6      	b.n	80103ea <__mdiff+0xf2>
 801041c:	080126c1 	.word	0x080126c1
 8010420:	08012749 	.word	0x08012749
 8010424:	00000237 	.word	0x00000237
 8010428:	00000245 	.word	0x00000245

0801042c <__ulp>:
 801042c:	b510      	push	{r4, lr}
 801042e:	2400      	movs	r4, #0
 8010430:	4b0c      	ldr	r3, [pc, #48]	@ (8010464 <__ulp+0x38>)
 8010432:	4a0d      	ldr	r2, [pc, #52]	@ (8010468 <__ulp+0x3c>)
 8010434:	400b      	ands	r3, r1
 8010436:	189b      	adds	r3, r3, r2
 8010438:	42a3      	cmp	r3, r4
 801043a:	dc06      	bgt.n	801044a <__ulp+0x1e>
 801043c:	425b      	negs	r3, r3
 801043e:	151a      	asrs	r2, r3, #20
 8010440:	2a13      	cmp	r2, #19
 8010442:	dc05      	bgt.n	8010450 <__ulp+0x24>
 8010444:	2380      	movs	r3, #128	@ 0x80
 8010446:	031b      	lsls	r3, r3, #12
 8010448:	4113      	asrs	r3, r2
 801044a:	0019      	movs	r1, r3
 801044c:	0020      	movs	r0, r4
 801044e:	bd10      	pop	{r4, pc}
 8010450:	3a14      	subs	r2, #20
 8010452:	2401      	movs	r4, #1
 8010454:	2a1e      	cmp	r2, #30
 8010456:	dc02      	bgt.n	801045e <__ulp+0x32>
 8010458:	2480      	movs	r4, #128	@ 0x80
 801045a:	0624      	lsls	r4, r4, #24
 801045c:	40d4      	lsrs	r4, r2
 801045e:	2300      	movs	r3, #0
 8010460:	e7f3      	b.n	801044a <__ulp+0x1e>
 8010462:	46c0      	nop			@ (mov r8, r8)
 8010464:	7ff00000 	.word	0x7ff00000
 8010468:	fcc00000 	.word	0xfcc00000

0801046c <__b2d>:
 801046c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801046e:	0006      	movs	r6, r0
 8010470:	6903      	ldr	r3, [r0, #16]
 8010472:	3614      	adds	r6, #20
 8010474:	009b      	lsls	r3, r3, #2
 8010476:	18f3      	adds	r3, r6, r3
 8010478:	1f1d      	subs	r5, r3, #4
 801047a:	682c      	ldr	r4, [r5, #0]
 801047c:	000f      	movs	r7, r1
 801047e:	0020      	movs	r0, r4
 8010480:	9301      	str	r3, [sp, #4]
 8010482:	f7ff fd3b 	bl	800fefc <__hi0bits>
 8010486:	2220      	movs	r2, #32
 8010488:	1a12      	subs	r2, r2, r0
 801048a:	603a      	str	r2, [r7, #0]
 801048c:	0003      	movs	r3, r0
 801048e:	4a1c      	ldr	r2, [pc, #112]	@ (8010500 <__b2d+0x94>)
 8010490:	280a      	cmp	r0, #10
 8010492:	dc15      	bgt.n	80104c0 <__b2d+0x54>
 8010494:	210b      	movs	r1, #11
 8010496:	0027      	movs	r7, r4
 8010498:	1a09      	subs	r1, r1, r0
 801049a:	40cf      	lsrs	r7, r1
 801049c:	433a      	orrs	r2, r7
 801049e:	468c      	mov	ip, r1
 80104a0:	0011      	movs	r1, r2
 80104a2:	2200      	movs	r2, #0
 80104a4:	42ae      	cmp	r6, r5
 80104a6:	d202      	bcs.n	80104ae <__b2d+0x42>
 80104a8:	9a01      	ldr	r2, [sp, #4]
 80104aa:	3a08      	subs	r2, #8
 80104ac:	6812      	ldr	r2, [r2, #0]
 80104ae:	3315      	adds	r3, #21
 80104b0:	409c      	lsls	r4, r3
 80104b2:	4663      	mov	r3, ip
 80104b4:	0027      	movs	r7, r4
 80104b6:	40da      	lsrs	r2, r3
 80104b8:	4317      	orrs	r7, r2
 80104ba:	0038      	movs	r0, r7
 80104bc:	b003      	add	sp, #12
 80104be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104c0:	2700      	movs	r7, #0
 80104c2:	42ae      	cmp	r6, r5
 80104c4:	d202      	bcs.n	80104cc <__b2d+0x60>
 80104c6:	9d01      	ldr	r5, [sp, #4]
 80104c8:	3d08      	subs	r5, #8
 80104ca:	682f      	ldr	r7, [r5, #0]
 80104cc:	210b      	movs	r1, #11
 80104ce:	4249      	negs	r1, r1
 80104d0:	468c      	mov	ip, r1
 80104d2:	449c      	add	ip, r3
 80104d4:	2b0b      	cmp	r3, #11
 80104d6:	d010      	beq.n	80104fa <__b2d+0x8e>
 80104d8:	4661      	mov	r1, ip
 80104da:	2320      	movs	r3, #32
 80104dc:	408c      	lsls	r4, r1
 80104de:	1a5b      	subs	r3, r3, r1
 80104e0:	0039      	movs	r1, r7
 80104e2:	40d9      	lsrs	r1, r3
 80104e4:	430c      	orrs	r4, r1
 80104e6:	4322      	orrs	r2, r4
 80104e8:	0011      	movs	r1, r2
 80104ea:	2200      	movs	r2, #0
 80104ec:	42b5      	cmp	r5, r6
 80104ee:	d901      	bls.n	80104f4 <__b2d+0x88>
 80104f0:	3d04      	subs	r5, #4
 80104f2:	682a      	ldr	r2, [r5, #0]
 80104f4:	4664      	mov	r4, ip
 80104f6:	40a7      	lsls	r7, r4
 80104f8:	e7dd      	b.n	80104b6 <__b2d+0x4a>
 80104fa:	4322      	orrs	r2, r4
 80104fc:	0011      	movs	r1, r2
 80104fe:	e7dc      	b.n	80104ba <__b2d+0x4e>
 8010500:	3ff00000 	.word	0x3ff00000

08010504 <__d2b>:
 8010504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010506:	2101      	movs	r1, #1
 8010508:	0016      	movs	r6, r2
 801050a:	001f      	movs	r7, r3
 801050c:	f7ff fbfe 	bl	800fd0c <_Balloc>
 8010510:	1e04      	subs	r4, r0, #0
 8010512:	d105      	bne.n	8010520 <__d2b+0x1c>
 8010514:	0022      	movs	r2, r4
 8010516:	4b25      	ldr	r3, [pc, #148]	@ (80105ac <__d2b+0xa8>)
 8010518:	4825      	ldr	r0, [pc, #148]	@ (80105b0 <__d2b+0xac>)
 801051a:	4926      	ldr	r1, [pc, #152]	@ (80105b4 <__d2b+0xb0>)
 801051c:	f000 fe72 	bl	8011204 <__assert_func>
 8010520:	033b      	lsls	r3, r7, #12
 8010522:	007d      	lsls	r5, r7, #1
 8010524:	0b1b      	lsrs	r3, r3, #12
 8010526:	0d6d      	lsrs	r5, r5, #21
 8010528:	d002      	beq.n	8010530 <__d2b+0x2c>
 801052a:	2280      	movs	r2, #128	@ 0x80
 801052c:	0352      	lsls	r2, r2, #13
 801052e:	4313      	orrs	r3, r2
 8010530:	9301      	str	r3, [sp, #4]
 8010532:	2e00      	cmp	r6, #0
 8010534:	d025      	beq.n	8010582 <__d2b+0x7e>
 8010536:	4668      	mov	r0, sp
 8010538:	9600      	str	r6, [sp, #0]
 801053a:	f7ff fd00 	bl	800ff3e <__lo0bits>
 801053e:	9b01      	ldr	r3, [sp, #4]
 8010540:	9900      	ldr	r1, [sp, #0]
 8010542:	2800      	cmp	r0, #0
 8010544:	d01b      	beq.n	801057e <__d2b+0x7a>
 8010546:	2220      	movs	r2, #32
 8010548:	001e      	movs	r6, r3
 801054a:	1a12      	subs	r2, r2, r0
 801054c:	4096      	lsls	r6, r2
 801054e:	0032      	movs	r2, r6
 8010550:	40c3      	lsrs	r3, r0
 8010552:	430a      	orrs	r2, r1
 8010554:	6162      	str	r2, [r4, #20]
 8010556:	9301      	str	r3, [sp, #4]
 8010558:	9e01      	ldr	r6, [sp, #4]
 801055a:	61a6      	str	r6, [r4, #24]
 801055c:	1e73      	subs	r3, r6, #1
 801055e:	419e      	sbcs	r6, r3
 8010560:	3601      	adds	r6, #1
 8010562:	6126      	str	r6, [r4, #16]
 8010564:	2d00      	cmp	r5, #0
 8010566:	d014      	beq.n	8010592 <__d2b+0x8e>
 8010568:	2635      	movs	r6, #53	@ 0x35
 801056a:	4b13      	ldr	r3, [pc, #76]	@ (80105b8 <__d2b+0xb4>)
 801056c:	18ed      	adds	r5, r5, r3
 801056e:	9b08      	ldr	r3, [sp, #32]
 8010570:	182d      	adds	r5, r5, r0
 8010572:	601d      	str	r5, [r3, #0]
 8010574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010576:	1a36      	subs	r6, r6, r0
 8010578:	601e      	str	r6, [r3, #0]
 801057a:	0020      	movs	r0, r4
 801057c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801057e:	6161      	str	r1, [r4, #20]
 8010580:	e7ea      	b.n	8010558 <__d2b+0x54>
 8010582:	a801      	add	r0, sp, #4
 8010584:	f7ff fcdb 	bl	800ff3e <__lo0bits>
 8010588:	9b01      	ldr	r3, [sp, #4]
 801058a:	2601      	movs	r6, #1
 801058c:	6163      	str	r3, [r4, #20]
 801058e:	3020      	adds	r0, #32
 8010590:	e7e7      	b.n	8010562 <__d2b+0x5e>
 8010592:	4b0a      	ldr	r3, [pc, #40]	@ (80105bc <__d2b+0xb8>)
 8010594:	18c0      	adds	r0, r0, r3
 8010596:	9b08      	ldr	r3, [sp, #32]
 8010598:	6018      	str	r0, [r3, #0]
 801059a:	4b09      	ldr	r3, [pc, #36]	@ (80105c0 <__d2b+0xbc>)
 801059c:	18f3      	adds	r3, r6, r3
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	18e3      	adds	r3, r4, r3
 80105a2:	6958      	ldr	r0, [r3, #20]
 80105a4:	f7ff fcaa 	bl	800fefc <__hi0bits>
 80105a8:	0176      	lsls	r6, r6, #5
 80105aa:	e7e3      	b.n	8010574 <__d2b+0x70>
 80105ac:	080126c1 	.word	0x080126c1
 80105b0:	08012749 	.word	0x08012749
 80105b4:	0000030f 	.word	0x0000030f
 80105b8:	fffffbcd 	.word	0xfffffbcd
 80105bc:	fffffbce 	.word	0xfffffbce
 80105c0:	3fffffff 	.word	0x3fffffff

080105c4 <__ratio>:
 80105c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c6:	b087      	sub	sp, #28
 80105c8:	000f      	movs	r7, r1
 80105ca:	a904      	add	r1, sp, #16
 80105cc:	0006      	movs	r6, r0
 80105ce:	f7ff ff4d 	bl	801046c <__b2d>
 80105d2:	9000      	str	r0, [sp, #0]
 80105d4:	9101      	str	r1, [sp, #4]
 80105d6:	9b00      	ldr	r3, [sp, #0]
 80105d8:	9c01      	ldr	r4, [sp, #4]
 80105da:	0038      	movs	r0, r7
 80105dc:	a905      	add	r1, sp, #20
 80105de:	9302      	str	r3, [sp, #8]
 80105e0:	9403      	str	r4, [sp, #12]
 80105e2:	f7ff ff43 	bl	801046c <__b2d>
 80105e6:	000d      	movs	r5, r1
 80105e8:	0002      	movs	r2, r0
 80105ea:	000b      	movs	r3, r1
 80105ec:	6930      	ldr	r0, [r6, #16]
 80105ee:	6939      	ldr	r1, [r7, #16]
 80105f0:	9e04      	ldr	r6, [sp, #16]
 80105f2:	1a40      	subs	r0, r0, r1
 80105f4:	9905      	ldr	r1, [sp, #20]
 80105f6:	0140      	lsls	r0, r0, #5
 80105f8:	1a71      	subs	r1, r6, r1
 80105fa:	1841      	adds	r1, r0, r1
 80105fc:	0508      	lsls	r0, r1, #20
 80105fe:	2900      	cmp	r1, #0
 8010600:	dd08      	ble.n	8010614 <__ratio+0x50>
 8010602:	9901      	ldr	r1, [sp, #4]
 8010604:	1841      	adds	r1, r0, r1
 8010606:	9103      	str	r1, [sp, #12]
 8010608:	9802      	ldr	r0, [sp, #8]
 801060a:	9903      	ldr	r1, [sp, #12]
 801060c:	f7f1 fbb4 	bl	8001d78 <__aeabi_ddiv>
 8010610:	b007      	add	sp, #28
 8010612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010614:	1a2b      	subs	r3, r5, r0
 8010616:	e7f7      	b.n	8010608 <__ratio+0x44>

08010618 <__copybits>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	0014      	movs	r4, r2
 801061c:	0005      	movs	r5, r0
 801061e:	3901      	subs	r1, #1
 8010620:	6913      	ldr	r3, [r2, #16]
 8010622:	1149      	asrs	r1, r1, #5
 8010624:	3101      	adds	r1, #1
 8010626:	0089      	lsls	r1, r1, #2
 8010628:	3414      	adds	r4, #20
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	1841      	adds	r1, r0, r1
 801062e:	18e3      	adds	r3, r4, r3
 8010630:	42a3      	cmp	r3, r4
 8010632:	d80d      	bhi.n	8010650 <__copybits+0x38>
 8010634:	0014      	movs	r4, r2
 8010636:	3411      	adds	r4, #17
 8010638:	2500      	movs	r5, #0
 801063a:	429c      	cmp	r4, r3
 801063c:	d803      	bhi.n	8010646 <__copybits+0x2e>
 801063e:	1a9b      	subs	r3, r3, r2
 8010640:	3b11      	subs	r3, #17
 8010642:	089b      	lsrs	r3, r3, #2
 8010644:	009d      	lsls	r5, r3, #2
 8010646:	2300      	movs	r3, #0
 8010648:	1940      	adds	r0, r0, r5
 801064a:	4281      	cmp	r1, r0
 801064c:	d803      	bhi.n	8010656 <__copybits+0x3e>
 801064e:	bd70      	pop	{r4, r5, r6, pc}
 8010650:	cc40      	ldmia	r4!, {r6}
 8010652:	c540      	stmia	r5!, {r6}
 8010654:	e7ec      	b.n	8010630 <__copybits+0x18>
 8010656:	c008      	stmia	r0!, {r3}
 8010658:	e7f7      	b.n	801064a <__copybits+0x32>

0801065a <__any_on>:
 801065a:	0002      	movs	r2, r0
 801065c:	6900      	ldr	r0, [r0, #16]
 801065e:	b510      	push	{r4, lr}
 8010660:	3214      	adds	r2, #20
 8010662:	114b      	asrs	r3, r1, #5
 8010664:	4298      	cmp	r0, r3
 8010666:	db13      	blt.n	8010690 <__any_on+0x36>
 8010668:	dd0c      	ble.n	8010684 <__any_on+0x2a>
 801066a:	241f      	movs	r4, #31
 801066c:	0008      	movs	r0, r1
 801066e:	4020      	ands	r0, r4
 8010670:	4221      	tst	r1, r4
 8010672:	d007      	beq.n	8010684 <__any_on+0x2a>
 8010674:	0099      	lsls	r1, r3, #2
 8010676:	588c      	ldr	r4, [r1, r2]
 8010678:	0021      	movs	r1, r4
 801067a:	40c1      	lsrs	r1, r0
 801067c:	4081      	lsls	r1, r0
 801067e:	2001      	movs	r0, #1
 8010680:	428c      	cmp	r4, r1
 8010682:	d104      	bne.n	801068e <__any_on+0x34>
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	18d3      	adds	r3, r2, r3
 8010688:	4293      	cmp	r3, r2
 801068a:	d803      	bhi.n	8010694 <__any_on+0x3a>
 801068c:	2000      	movs	r0, #0
 801068e:	bd10      	pop	{r4, pc}
 8010690:	0003      	movs	r3, r0
 8010692:	e7f7      	b.n	8010684 <__any_on+0x2a>
 8010694:	3b04      	subs	r3, #4
 8010696:	6819      	ldr	r1, [r3, #0]
 8010698:	2900      	cmp	r1, #0
 801069a:	d0f5      	beq.n	8010688 <__any_on+0x2e>
 801069c:	2001      	movs	r0, #1
 801069e:	e7f6      	b.n	801068e <__any_on+0x34>

080106a0 <__ascii_wctomb>:
 80106a0:	0003      	movs	r3, r0
 80106a2:	1e08      	subs	r0, r1, #0
 80106a4:	d005      	beq.n	80106b2 <__ascii_wctomb+0x12>
 80106a6:	2aff      	cmp	r2, #255	@ 0xff
 80106a8:	d904      	bls.n	80106b4 <__ascii_wctomb+0x14>
 80106aa:	228a      	movs	r2, #138	@ 0x8a
 80106ac:	2001      	movs	r0, #1
 80106ae:	601a      	str	r2, [r3, #0]
 80106b0:	4240      	negs	r0, r0
 80106b2:	4770      	bx	lr
 80106b4:	2001      	movs	r0, #1
 80106b6:	700a      	strb	r2, [r1, #0]
 80106b8:	e7fb      	b.n	80106b2 <__ascii_wctomb+0x12>
	...

080106bc <__ssputs_r>:
 80106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106be:	688e      	ldr	r6, [r1, #8]
 80106c0:	b085      	sub	sp, #20
 80106c2:	001f      	movs	r7, r3
 80106c4:	000c      	movs	r4, r1
 80106c6:	680b      	ldr	r3, [r1, #0]
 80106c8:	9002      	str	r0, [sp, #8]
 80106ca:	9203      	str	r2, [sp, #12]
 80106cc:	42be      	cmp	r6, r7
 80106ce:	d830      	bhi.n	8010732 <__ssputs_r+0x76>
 80106d0:	210c      	movs	r1, #12
 80106d2:	5e62      	ldrsh	r2, [r4, r1]
 80106d4:	2190      	movs	r1, #144	@ 0x90
 80106d6:	00c9      	lsls	r1, r1, #3
 80106d8:	420a      	tst	r2, r1
 80106da:	d028      	beq.n	801072e <__ssputs_r+0x72>
 80106dc:	2003      	movs	r0, #3
 80106de:	6921      	ldr	r1, [r4, #16]
 80106e0:	1a5b      	subs	r3, r3, r1
 80106e2:	9301      	str	r3, [sp, #4]
 80106e4:	6963      	ldr	r3, [r4, #20]
 80106e6:	4343      	muls	r3, r0
 80106e8:	9801      	ldr	r0, [sp, #4]
 80106ea:	0fdd      	lsrs	r5, r3, #31
 80106ec:	18ed      	adds	r5, r5, r3
 80106ee:	1c7b      	adds	r3, r7, #1
 80106f0:	181b      	adds	r3, r3, r0
 80106f2:	106d      	asrs	r5, r5, #1
 80106f4:	42ab      	cmp	r3, r5
 80106f6:	d900      	bls.n	80106fa <__ssputs_r+0x3e>
 80106f8:	001d      	movs	r5, r3
 80106fa:	0552      	lsls	r2, r2, #21
 80106fc:	d528      	bpl.n	8010750 <__ssputs_r+0x94>
 80106fe:	0029      	movs	r1, r5
 8010700:	9802      	ldr	r0, [sp, #8]
 8010702:	f7ff fa61 	bl	800fbc8 <_malloc_r>
 8010706:	1e06      	subs	r6, r0, #0
 8010708:	d02c      	beq.n	8010764 <__ssputs_r+0xa8>
 801070a:	9a01      	ldr	r2, [sp, #4]
 801070c:	6921      	ldr	r1, [r4, #16]
 801070e:	f7fe fe86 	bl	800f41e <memcpy>
 8010712:	89a2      	ldrh	r2, [r4, #12]
 8010714:	4b18      	ldr	r3, [pc, #96]	@ (8010778 <__ssputs_r+0xbc>)
 8010716:	401a      	ands	r2, r3
 8010718:	2380      	movs	r3, #128	@ 0x80
 801071a:	4313      	orrs	r3, r2
 801071c:	81a3      	strh	r3, [r4, #12]
 801071e:	9b01      	ldr	r3, [sp, #4]
 8010720:	6126      	str	r6, [r4, #16]
 8010722:	18f6      	adds	r6, r6, r3
 8010724:	6026      	str	r6, [r4, #0]
 8010726:	003e      	movs	r6, r7
 8010728:	6165      	str	r5, [r4, #20]
 801072a:	1aed      	subs	r5, r5, r3
 801072c:	60a5      	str	r5, [r4, #8]
 801072e:	42be      	cmp	r6, r7
 8010730:	d900      	bls.n	8010734 <__ssputs_r+0x78>
 8010732:	003e      	movs	r6, r7
 8010734:	0032      	movs	r2, r6
 8010736:	9903      	ldr	r1, [sp, #12]
 8010738:	6820      	ldr	r0, [r4, #0]
 801073a:	f000 fd31 	bl	80111a0 <memmove>
 801073e:	2000      	movs	r0, #0
 8010740:	68a3      	ldr	r3, [r4, #8]
 8010742:	1b9b      	subs	r3, r3, r6
 8010744:	60a3      	str	r3, [r4, #8]
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	199b      	adds	r3, r3, r6
 801074a:	6023      	str	r3, [r4, #0]
 801074c:	b005      	add	sp, #20
 801074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010750:	002a      	movs	r2, r5
 8010752:	9802      	ldr	r0, [sp, #8]
 8010754:	f000 fdac 	bl	80112b0 <_realloc_r>
 8010758:	1e06      	subs	r6, r0, #0
 801075a:	d1e0      	bne.n	801071e <__ssputs_r+0x62>
 801075c:	6921      	ldr	r1, [r4, #16]
 801075e:	9802      	ldr	r0, [sp, #8]
 8010760:	f7fe fe6c 	bl	800f43c <_free_r>
 8010764:	230c      	movs	r3, #12
 8010766:	2001      	movs	r0, #1
 8010768:	9a02      	ldr	r2, [sp, #8]
 801076a:	4240      	negs	r0, r0
 801076c:	6013      	str	r3, [r2, #0]
 801076e:	89a2      	ldrh	r2, [r4, #12]
 8010770:	3334      	adds	r3, #52	@ 0x34
 8010772:	4313      	orrs	r3, r2
 8010774:	81a3      	strh	r3, [r4, #12]
 8010776:	e7e9      	b.n	801074c <__ssputs_r+0x90>
 8010778:	fffffb7f 	.word	0xfffffb7f

0801077c <_svfiprintf_r>:
 801077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801077e:	b0a1      	sub	sp, #132	@ 0x84
 8010780:	9003      	str	r0, [sp, #12]
 8010782:	001d      	movs	r5, r3
 8010784:	898b      	ldrh	r3, [r1, #12]
 8010786:	000f      	movs	r7, r1
 8010788:	0016      	movs	r6, r2
 801078a:	061b      	lsls	r3, r3, #24
 801078c:	d511      	bpl.n	80107b2 <_svfiprintf_r+0x36>
 801078e:	690b      	ldr	r3, [r1, #16]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d10e      	bne.n	80107b2 <_svfiprintf_r+0x36>
 8010794:	2140      	movs	r1, #64	@ 0x40
 8010796:	f7ff fa17 	bl	800fbc8 <_malloc_r>
 801079a:	6038      	str	r0, [r7, #0]
 801079c:	6138      	str	r0, [r7, #16]
 801079e:	2800      	cmp	r0, #0
 80107a0:	d105      	bne.n	80107ae <_svfiprintf_r+0x32>
 80107a2:	230c      	movs	r3, #12
 80107a4:	9a03      	ldr	r2, [sp, #12]
 80107a6:	6013      	str	r3, [r2, #0]
 80107a8:	2001      	movs	r0, #1
 80107aa:	4240      	negs	r0, r0
 80107ac:	e0cf      	b.n	801094e <_svfiprintf_r+0x1d2>
 80107ae:	2340      	movs	r3, #64	@ 0x40
 80107b0:	617b      	str	r3, [r7, #20]
 80107b2:	2300      	movs	r3, #0
 80107b4:	ac08      	add	r4, sp, #32
 80107b6:	6163      	str	r3, [r4, #20]
 80107b8:	3320      	adds	r3, #32
 80107ba:	7663      	strb	r3, [r4, #25]
 80107bc:	3310      	adds	r3, #16
 80107be:	76a3      	strb	r3, [r4, #26]
 80107c0:	9507      	str	r5, [sp, #28]
 80107c2:	0035      	movs	r5, r6
 80107c4:	782b      	ldrb	r3, [r5, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <_svfiprintf_r+0x52>
 80107ca:	2b25      	cmp	r3, #37	@ 0x25
 80107cc:	d148      	bne.n	8010860 <_svfiprintf_r+0xe4>
 80107ce:	1bab      	subs	r3, r5, r6
 80107d0:	9305      	str	r3, [sp, #20]
 80107d2:	42b5      	cmp	r5, r6
 80107d4:	d00b      	beq.n	80107ee <_svfiprintf_r+0x72>
 80107d6:	0032      	movs	r2, r6
 80107d8:	0039      	movs	r1, r7
 80107da:	9803      	ldr	r0, [sp, #12]
 80107dc:	f7ff ff6e 	bl	80106bc <__ssputs_r>
 80107e0:	3001      	adds	r0, #1
 80107e2:	d100      	bne.n	80107e6 <_svfiprintf_r+0x6a>
 80107e4:	e0ae      	b.n	8010944 <_svfiprintf_r+0x1c8>
 80107e6:	6963      	ldr	r3, [r4, #20]
 80107e8:	9a05      	ldr	r2, [sp, #20]
 80107ea:	189b      	adds	r3, r3, r2
 80107ec:	6163      	str	r3, [r4, #20]
 80107ee:	782b      	ldrb	r3, [r5, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d100      	bne.n	80107f6 <_svfiprintf_r+0x7a>
 80107f4:	e0a6      	b.n	8010944 <_svfiprintf_r+0x1c8>
 80107f6:	2201      	movs	r2, #1
 80107f8:	2300      	movs	r3, #0
 80107fa:	4252      	negs	r2, r2
 80107fc:	6062      	str	r2, [r4, #4]
 80107fe:	a904      	add	r1, sp, #16
 8010800:	3254      	adds	r2, #84	@ 0x54
 8010802:	1852      	adds	r2, r2, r1
 8010804:	1c6e      	adds	r6, r5, #1
 8010806:	6023      	str	r3, [r4, #0]
 8010808:	60e3      	str	r3, [r4, #12]
 801080a:	60a3      	str	r3, [r4, #8]
 801080c:	7013      	strb	r3, [r2, #0]
 801080e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010810:	4b54      	ldr	r3, [pc, #336]	@ (8010964 <_svfiprintf_r+0x1e8>)
 8010812:	2205      	movs	r2, #5
 8010814:	0018      	movs	r0, r3
 8010816:	7831      	ldrb	r1, [r6, #0]
 8010818:	9305      	str	r3, [sp, #20]
 801081a:	f000 fce7 	bl	80111ec <memchr>
 801081e:	1c75      	adds	r5, r6, #1
 8010820:	2800      	cmp	r0, #0
 8010822:	d11f      	bne.n	8010864 <_svfiprintf_r+0xe8>
 8010824:	6822      	ldr	r2, [r4, #0]
 8010826:	06d3      	lsls	r3, r2, #27
 8010828:	d504      	bpl.n	8010834 <_svfiprintf_r+0xb8>
 801082a:	2353      	movs	r3, #83	@ 0x53
 801082c:	a904      	add	r1, sp, #16
 801082e:	185b      	adds	r3, r3, r1
 8010830:	2120      	movs	r1, #32
 8010832:	7019      	strb	r1, [r3, #0]
 8010834:	0713      	lsls	r3, r2, #28
 8010836:	d504      	bpl.n	8010842 <_svfiprintf_r+0xc6>
 8010838:	2353      	movs	r3, #83	@ 0x53
 801083a:	a904      	add	r1, sp, #16
 801083c:	185b      	adds	r3, r3, r1
 801083e:	212b      	movs	r1, #43	@ 0x2b
 8010840:	7019      	strb	r1, [r3, #0]
 8010842:	7833      	ldrb	r3, [r6, #0]
 8010844:	2b2a      	cmp	r3, #42	@ 0x2a
 8010846:	d016      	beq.n	8010876 <_svfiprintf_r+0xfa>
 8010848:	0035      	movs	r5, r6
 801084a:	2100      	movs	r1, #0
 801084c:	200a      	movs	r0, #10
 801084e:	68e3      	ldr	r3, [r4, #12]
 8010850:	782a      	ldrb	r2, [r5, #0]
 8010852:	1c6e      	adds	r6, r5, #1
 8010854:	3a30      	subs	r2, #48	@ 0x30
 8010856:	2a09      	cmp	r2, #9
 8010858:	d950      	bls.n	80108fc <_svfiprintf_r+0x180>
 801085a:	2900      	cmp	r1, #0
 801085c:	d111      	bne.n	8010882 <_svfiprintf_r+0x106>
 801085e:	e017      	b.n	8010890 <_svfiprintf_r+0x114>
 8010860:	3501      	adds	r5, #1
 8010862:	e7af      	b.n	80107c4 <_svfiprintf_r+0x48>
 8010864:	9b05      	ldr	r3, [sp, #20]
 8010866:	6822      	ldr	r2, [r4, #0]
 8010868:	1ac0      	subs	r0, r0, r3
 801086a:	2301      	movs	r3, #1
 801086c:	4083      	lsls	r3, r0
 801086e:	4313      	orrs	r3, r2
 8010870:	002e      	movs	r6, r5
 8010872:	6023      	str	r3, [r4, #0]
 8010874:	e7cc      	b.n	8010810 <_svfiprintf_r+0x94>
 8010876:	9b07      	ldr	r3, [sp, #28]
 8010878:	1d19      	adds	r1, r3, #4
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	9107      	str	r1, [sp, #28]
 801087e:	2b00      	cmp	r3, #0
 8010880:	db01      	blt.n	8010886 <_svfiprintf_r+0x10a>
 8010882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010884:	e004      	b.n	8010890 <_svfiprintf_r+0x114>
 8010886:	425b      	negs	r3, r3
 8010888:	60e3      	str	r3, [r4, #12]
 801088a:	2302      	movs	r3, #2
 801088c:	4313      	orrs	r3, r2
 801088e:	6023      	str	r3, [r4, #0]
 8010890:	782b      	ldrb	r3, [r5, #0]
 8010892:	2b2e      	cmp	r3, #46	@ 0x2e
 8010894:	d10c      	bne.n	80108b0 <_svfiprintf_r+0x134>
 8010896:	786b      	ldrb	r3, [r5, #1]
 8010898:	2b2a      	cmp	r3, #42	@ 0x2a
 801089a:	d134      	bne.n	8010906 <_svfiprintf_r+0x18a>
 801089c:	9b07      	ldr	r3, [sp, #28]
 801089e:	3502      	adds	r5, #2
 80108a0:	1d1a      	adds	r2, r3, #4
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	9207      	str	r2, [sp, #28]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	da01      	bge.n	80108ae <_svfiprintf_r+0x132>
 80108aa:	2301      	movs	r3, #1
 80108ac:	425b      	negs	r3, r3
 80108ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80108b0:	4e2d      	ldr	r6, [pc, #180]	@ (8010968 <_svfiprintf_r+0x1ec>)
 80108b2:	2203      	movs	r2, #3
 80108b4:	0030      	movs	r0, r6
 80108b6:	7829      	ldrb	r1, [r5, #0]
 80108b8:	f000 fc98 	bl	80111ec <memchr>
 80108bc:	2800      	cmp	r0, #0
 80108be:	d006      	beq.n	80108ce <_svfiprintf_r+0x152>
 80108c0:	2340      	movs	r3, #64	@ 0x40
 80108c2:	1b80      	subs	r0, r0, r6
 80108c4:	4083      	lsls	r3, r0
 80108c6:	6822      	ldr	r2, [r4, #0]
 80108c8:	3501      	adds	r5, #1
 80108ca:	4313      	orrs	r3, r2
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	7829      	ldrb	r1, [r5, #0]
 80108d0:	2206      	movs	r2, #6
 80108d2:	4826      	ldr	r0, [pc, #152]	@ (801096c <_svfiprintf_r+0x1f0>)
 80108d4:	1c6e      	adds	r6, r5, #1
 80108d6:	7621      	strb	r1, [r4, #24]
 80108d8:	f000 fc88 	bl	80111ec <memchr>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d038      	beq.n	8010952 <_svfiprintf_r+0x1d6>
 80108e0:	4b23      	ldr	r3, [pc, #140]	@ (8010970 <_svfiprintf_r+0x1f4>)
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d122      	bne.n	801092c <_svfiprintf_r+0x1b0>
 80108e6:	2207      	movs	r2, #7
 80108e8:	9b07      	ldr	r3, [sp, #28]
 80108ea:	3307      	adds	r3, #7
 80108ec:	4393      	bics	r3, r2
 80108ee:	3308      	adds	r3, #8
 80108f0:	9307      	str	r3, [sp, #28]
 80108f2:	6963      	ldr	r3, [r4, #20]
 80108f4:	9a04      	ldr	r2, [sp, #16]
 80108f6:	189b      	adds	r3, r3, r2
 80108f8:	6163      	str	r3, [r4, #20]
 80108fa:	e762      	b.n	80107c2 <_svfiprintf_r+0x46>
 80108fc:	4343      	muls	r3, r0
 80108fe:	0035      	movs	r5, r6
 8010900:	2101      	movs	r1, #1
 8010902:	189b      	adds	r3, r3, r2
 8010904:	e7a4      	b.n	8010850 <_svfiprintf_r+0xd4>
 8010906:	2300      	movs	r3, #0
 8010908:	200a      	movs	r0, #10
 801090a:	0019      	movs	r1, r3
 801090c:	3501      	adds	r5, #1
 801090e:	6063      	str	r3, [r4, #4]
 8010910:	782a      	ldrb	r2, [r5, #0]
 8010912:	1c6e      	adds	r6, r5, #1
 8010914:	3a30      	subs	r2, #48	@ 0x30
 8010916:	2a09      	cmp	r2, #9
 8010918:	d903      	bls.n	8010922 <_svfiprintf_r+0x1a6>
 801091a:	2b00      	cmp	r3, #0
 801091c:	d0c8      	beq.n	80108b0 <_svfiprintf_r+0x134>
 801091e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010920:	e7c6      	b.n	80108b0 <_svfiprintf_r+0x134>
 8010922:	4341      	muls	r1, r0
 8010924:	0035      	movs	r5, r6
 8010926:	2301      	movs	r3, #1
 8010928:	1889      	adds	r1, r1, r2
 801092a:	e7f1      	b.n	8010910 <_svfiprintf_r+0x194>
 801092c:	aa07      	add	r2, sp, #28
 801092e:	9200      	str	r2, [sp, #0]
 8010930:	0021      	movs	r1, r4
 8010932:	003a      	movs	r2, r7
 8010934:	4b0f      	ldr	r3, [pc, #60]	@ (8010974 <_svfiprintf_r+0x1f8>)
 8010936:	9803      	ldr	r0, [sp, #12]
 8010938:	e000      	b.n	801093c <_svfiprintf_r+0x1c0>
 801093a:	bf00      	nop
 801093c:	9004      	str	r0, [sp, #16]
 801093e:	9b04      	ldr	r3, [sp, #16]
 8010940:	3301      	adds	r3, #1
 8010942:	d1d6      	bne.n	80108f2 <_svfiprintf_r+0x176>
 8010944:	89bb      	ldrh	r3, [r7, #12]
 8010946:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010948:	065b      	lsls	r3, r3, #25
 801094a:	d500      	bpl.n	801094e <_svfiprintf_r+0x1d2>
 801094c:	e72c      	b.n	80107a8 <_svfiprintf_r+0x2c>
 801094e:	b021      	add	sp, #132	@ 0x84
 8010950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010952:	aa07      	add	r2, sp, #28
 8010954:	9200      	str	r2, [sp, #0]
 8010956:	0021      	movs	r1, r4
 8010958:	003a      	movs	r2, r7
 801095a:	4b06      	ldr	r3, [pc, #24]	@ (8010974 <_svfiprintf_r+0x1f8>)
 801095c:	9803      	ldr	r0, [sp, #12]
 801095e:	f000 f9bf 	bl	8010ce0 <_printf_i>
 8010962:	e7eb      	b.n	801093c <_svfiprintf_r+0x1c0>
 8010964:	080128a0 	.word	0x080128a0
 8010968:	080128a6 	.word	0x080128a6
 801096c:	080128aa 	.word	0x080128aa
 8010970:	00000000 	.word	0x00000000
 8010974:	080106bd 	.word	0x080106bd

08010978 <__sfputc_r>:
 8010978:	6893      	ldr	r3, [r2, #8]
 801097a:	b510      	push	{r4, lr}
 801097c:	3b01      	subs	r3, #1
 801097e:	6093      	str	r3, [r2, #8]
 8010980:	2b00      	cmp	r3, #0
 8010982:	da04      	bge.n	801098e <__sfputc_r+0x16>
 8010984:	6994      	ldr	r4, [r2, #24]
 8010986:	42a3      	cmp	r3, r4
 8010988:	db07      	blt.n	801099a <__sfputc_r+0x22>
 801098a:	290a      	cmp	r1, #10
 801098c:	d005      	beq.n	801099a <__sfputc_r+0x22>
 801098e:	6813      	ldr	r3, [r2, #0]
 8010990:	1c58      	adds	r0, r3, #1
 8010992:	6010      	str	r0, [r2, #0]
 8010994:	7019      	strb	r1, [r3, #0]
 8010996:	0008      	movs	r0, r1
 8010998:	bd10      	pop	{r4, pc}
 801099a:	f000 fb60 	bl	801105e <__swbuf_r>
 801099e:	0001      	movs	r1, r0
 80109a0:	e7f9      	b.n	8010996 <__sfputc_r+0x1e>

080109a2 <__sfputs_r>:
 80109a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a4:	0006      	movs	r6, r0
 80109a6:	000f      	movs	r7, r1
 80109a8:	0014      	movs	r4, r2
 80109aa:	18d5      	adds	r5, r2, r3
 80109ac:	42ac      	cmp	r4, r5
 80109ae:	d101      	bne.n	80109b4 <__sfputs_r+0x12>
 80109b0:	2000      	movs	r0, #0
 80109b2:	e007      	b.n	80109c4 <__sfputs_r+0x22>
 80109b4:	7821      	ldrb	r1, [r4, #0]
 80109b6:	003a      	movs	r2, r7
 80109b8:	0030      	movs	r0, r6
 80109ba:	f7ff ffdd 	bl	8010978 <__sfputc_r>
 80109be:	3401      	adds	r4, #1
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d1f3      	bne.n	80109ac <__sfputs_r+0xa>
 80109c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080109c8 <_vfiprintf_r>:
 80109c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ca:	b0a1      	sub	sp, #132	@ 0x84
 80109cc:	000f      	movs	r7, r1
 80109ce:	0015      	movs	r5, r2
 80109d0:	001e      	movs	r6, r3
 80109d2:	9003      	str	r0, [sp, #12]
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d004      	beq.n	80109e2 <_vfiprintf_r+0x1a>
 80109d8:	6a03      	ldr	r3, [r0, #32]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d101      	bne.n	80109e2 <_vfiprintf_r+0x1a>
 80109de:	f7fe fbe9 	bl	800f1b4 <__sinit>
 80109e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80109e4:	07db      	lsls	r3, r3, #31
 80109e6:	d405      	bmi.n	80109f4 <_vfiprintf_r+0x2c>
 80109e8:	89bb      	ldrh	r3, [r7, #12]
 80109ea:	059b      	lsls	r3, r3, #22
 80109ec:	d402      	bmi.n	80109f4 <_vfiprintf_r+0x2c>
 80109ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80109f0:	f7fe fd13 	bl	800f41a <__retarget_lock_acquire_recursive>
 80109f4:	89bb      	ldrh	r3, [r7, #12]
 80109f6:	071b      	lsls	r3, r3, #28
 80109f8:	d502      	bpl.n	8010a00 <_vfiprintf_r+0x38>
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d113      	bne.n	8010a28 <_vfiprintf_r+0x60>
 8010a00:	0039      	movs	r1, r7
 8010a02:	9803      	ldr	r0, [sp, #12]
 8010a04:	f000 fb6e 	bl	80110e4 <__swsetup_r>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d00d      	beq.n	8010a28 <_vfiprintf_r+0x60>
 8010a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a0e:	07db      	lsls	r3, r3, #31
 8010a10:	d503      	bpl.n	8010a1a <_vfiprintf_r+0x52>
 8010a12:	2001      	movs	r0, #1
 8010a14:	4240      	negs	r0, r0
 8010a16:	b021      	add	sp, #132	@ 0x84
 8010a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a1a:	89bb      	ldrh	r3, [r7, #12]
 8010a1c:	059b      	lsls	r3, r3, #22
 8010a1e:	d4f8      	bmi.n	8010a12 <_vfiprintf_r+0x4a>
 8010a20:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010a22:	f7fe fcfb 	bl	800f41c <__retarget_lock_release_recursive>
 8010a26:	e7f4      	b.n	8010a12 <_vfiprintf_r+0x4a>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	ac08      	add	r4, sp, #32
 8010a2c:	6163      	str	r3, [r4, #20]
 8010a2e:	3320      	adds	r3, #32
 8010a30:	7663      	strb	r3, [r4, #25]
 8010a32:	3310      	adds	r3, #16
 8010a34:	76a3      	strb	r3, [r4, #26]
 8010a36:	9607      	str	r6, [sp, #28]
 8010a38:	002e      	movs	r6, r5
 8010a3a:	7833      	ldrb	r3, [r6, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d001      	beq.n	8010a44 <_vfiprintf_r+0x7c>
 8010a40:	2b25      	cmp	r3, #37	@ 0x25
 8010a42:	d148      	bne.n	8010ad6 <_vfiprintf_r+0x10e>
 8010a44:	1b73      	subs	r3, r6, r5
 8010a46:	9305      	str	r3, [sp, #20]
 8010a48:	42ae      	cmp	r6, r5
 8010a4a:	d00b      	beq.n	8010a64 <_vfiprintf_r+0x9c>
 8010a4c:	002a      	movs	r2, r5
 8010a4e:	0039      	movs	r1, r7
 8010a50:	9803      	ldr	r0, [sp, #12]
 8010a52:	f7ff ffa6 	bl	80109a2 <__sfputs_r>
 8010a56:	3001      	adds	r0, #1
 8010a58:	d100      	bne.n	8010a5c <_vfiprintf_r+0x94>
 8010a5a:	e0ae      	b.n	8010bba <_vfiprintf_r+0x1f2>
 8010a5c:	6963      	ldr	r3, [r4, #20]
 8010a5e:	9a05      	ldr	r2, [sp, #20]
 8010a60:	189b      	adds	r3, r3, r2
 8010a62:	6163      	str	r3, [r4, #20]
 8010a64:	7833      	ldrb	r3, [r6, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d100      	bne.n	8010a6c <_vfiprintf_r+0xa4>
 8010a6a:	e0a6      	b.n	8010bba <_vfiprintf_r+0x1f2>
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	2300      	movs	r3, #0
 8010a70:	4252      	negs	r2, r2
 8010a72:	6062      	str	r2, [r4, #4]
 8010a74:	a904      	add	r1, sp, #16
 8010a76:	3254      	adds	r2, #84	@ 0x54
 8010a78:	1852      	adds	r2, r2, r1
 8010a7a:	1c75      	adds	r5, r6, #1
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	60e3      	str	r3, [r4, #12]
 8010a80:	60a3      	str	r3, [r4, #8]
 8010a82:	7013      	strb	r3, [r2, #0]
 8010a84:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010a86:	4b59      	ldr	r3, [pc, #356]	@ (8010bec <_vfiprintf_r+0x224>)
 8010a88:	2205      	movs	r2, #5
 8010a8a:	0018      	movs	r0, r3
 8010a8c:	7829      	ldrb	r1, [r5, #0]
 8010a8e:	9305      	str	r3, [sp, #20]
 8010a90:	f000 fbac 	bl	80111ec <memchr>
 8010a94:	1c6e      	adds	r6, r5, #1
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d11f      	bne.n	8010ada <_vfiprintf_r+0x112>
 8010a9a:	6822      	ldr	r2, [r4, #0]
 8010a9c:	06d3      	lsls	r3, r2, #27
 8010a9e:	d504      	bpl.n	8010aaa <_vfiprintf_r+0xe2>
 8010aa0:	2353      	movs	r3, #83	@ 0x53
 8010aa2:	a904      	add	r1, sp, #16
 8010aa4:	185b      	adds	r3, r3, r1
 8010aa6:	2120      	movs	r1, #32
 8010aa8:	7019      	strb	r1, [r3, #0]
 8010aaa:	0713      	lsls	r3, r2, #28
 8010aac:	d504      	bpl.n	8010ab8 <_vfiprintf_r+0xf0>
 8010aae:	2353      	movs	r3, #83	@ 0x53
 8010ab0:	a904      	add	r1, sp, #16
 8010ab2:	185b      	adds	r3, r3, r1
 8010ab4:	212b      	movs	r1, #43	@ 0x2b
 8010ab6:	7019      	strb	r1, [r3, #0]
 8010ab8:	782b      	ldrb	r3, [r5, #0]
 8010aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8010abc:	d016      	beq.n	8010aec <_vfiprintf_r+0x124>
 8010abe:	002e      	movs	r6, r5
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	200a      	movs	r0, #10
 8010ac4:	68e3      	ldr	r3, [r4, #12]
 8010ac6:	7832      	ldrb	r2, [r6, #0]
 8010ac8:	1c75      	adds	r5, r6, #1
 8010aca:	3a30      	subs	r2, #48	@ 0x30
 8010acc:	2a09      	cmp	r2, #9
 8010ace:	d950      	bls.n	8010b72 <_vfiprintf_r+0x1aa>
 8010ad0:	2900      	cmp	r1, #0
 8010ad2:	d111      	bne.n	8010af8 <_vfiprintf_r+0x130>
 8010ad4:	e017      	b.n	8010b06 <_vfiprintf_r+0x13e>
 8010ad6:	3601      	adds	r6, #1
 8010ad8:	e7af      	b.n	8010a3a <_vfiprintf_r+0x72>
 8010ada:	9b05      	ldr	r3, [sp, #20]
 8010adc:	6822      	ldr	r2, [r4, #0]
 8010ade:	1ac0      	subs	r0, r0, r3
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	4083      	lsls	r3, r0
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	0035      	movs	r5, r6
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	e7cc      	b.n	8010a86 <_vfiprintf_r+0xbe>
 8010aec:	9b07      	ldr	r3, [sp, #28]
 8010aee:	1d19      	adds	r1, r3, #4
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	9107      	str	r1, [sp, #28]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	db01      	blt.n	8010afc <_vfiprintf_r+0x134>
 8010af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010afa:	e004      	b.n	8010b06 <_vfiprintf_r+0x13e>
 8010afc:	425b      	negs	r3, r3
 8010afe:	60e3      	str	r3, [r4, #12]
 8010b00:	2302      	movs	r3, #2
 8010b02:	4313      	orrs	r3, r2
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	7833      	ldrb	r3, [r6, #0]
 8010b08:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b0a:	d10c      	bne.n	8010b26 <_vfiprintf_r+0x15e>
 8010b0c:	7873      	ldrb	r3, [r6, #1]
 8010b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b10:	d134      	bne.n	8010b7c <_vfiprintf_r+0x1b4>
 8010b12:	9b07      	ldr	r3, [sp, #28]
 8010b14:	3602      	adds	r6, #2
 8010b16:	1d1a      	adds	r2, r3, #4
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	9207      	str	r2, [sp, #28]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	da01      	bge.n	8010b24 <_vfiprintf_r+0x15c>
 8010b20:	2301      	movs	r3, #1
 8010b22:	425b      	negs	r3, r3
 8010b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b26:	4d32      	ldr	r5, [pc, #200]	@ (8010bf0 <_vfiprintf_r+0x228>)
 8010b28:	2203      	movs	r2, #3
 8010b2a:	0028      	movs	r0, r5
 8010b2c:	7831      	ldrb	r1, [r6, #0]
 8010b2e:	f000 fb5d 	bl	80111ec <memchr>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d006      	beq.n	8010b44 <_vfiprintf_r+0x17c>
 8010b36:	2340      	movs	r3, #64	@ 0x40
 8010b38:	1b40      	subs	r0, r0, r5
 8010b3a:	4083      	lsls	r3, r0
 8010b3c:	6822      	ldr	r2, [r4, #0]
 8010b3e:	3601      	adds	r6, #1
 8010b40:	4313      	orrs	r3, r2
 8010b42:	6023      	str	r3, [r4, #0]
 8010b44:	7831      	ldrb	r1, [r6, #0]
 8010b46:	2206      	movs	r2, #6
 8010b48:	482a      	ldr	r0, [pc, #168]	@ (8010bf4 <_vfiprintf_r+0x22c>)
 8010b4a:	1c75      	adds	r5, r6, #1
 8010b4c:	7621      	strb	r1, [r4, #24]
 8010b4e:	f000 fb4d 	bl	80111ec <memchr>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d040      	beq.n	8010bd8 <_vfiprintf_r+0x210>
 8010b56:	4b28      	ldr	r3, [pc, #160]	@ (8010bf8 <_vfiprintf_r+0x230>)
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d122      	bne.n	8010ba2 <_vfiprintf_r+0x1da>
 8010b5c:	2207      	movs	r2, #7
 8010b5e:	9b07      	ldr	r3, [sp, #28]
 8010b60:	3307      	adds	r3, #7
 8010b62:	4393      	bics	r3, r2
 8010b64:	3308      	adds	r3, #8
 8010b66:	9307      	str	r3, [sp, #28]
 8010b68:	6963      	ldr	r3, [r4, #20]
 8010b6a:	9a04      	ldr	r2, [sp, #16]
 8010b6c:	189b      	adds	r3, r3, r2
 8010b6e:	6163      	str	r3, [r4, #20]
 8010b70:	e762      	b.n	8010a38 <_vfiprintf_r+0x70>
 8010b72:	4343      	muls	r3, r0
 8010b74:	002e      	movs	r6, r5
 8010b76:	2101      	movs	r1, #1
 8010b78:	189b      	adds	r3, r3, r2
 8010b7a:	e7a4      	b.n	8010ac6 <_vfiprintf_r+0xfe>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	200a      	movs	r0, #10
 8010b80:	0019      	movs	r1, r3
 8010b82:	3601      	adds	r6, #1
 8010b84:	6063      	str	r3, [r4, #4]
 8010b86:	7832      	ldrb	r2, [r6, #0]
 8010b88:	1c75      	adds	r5, r6, #1
 8010b8a:	3a30      	subs	r2, #48	@ 0x30
 8010b8c:	2a09      	cmp	r2, #9
 8010b8e:	d903      	bls.n	8010b98 <_vfiprintf_r+0x1d0>
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d0c8      	beq.n	8010b26 <_vfiprintf_r+0x15e>
 8010b94:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b96:	e7c6      	b.n	8010b26 <_vfiprintf_r+0x15e>
 8010b98:	4341      	muls	r1, r0
 8010b9a:	002e      	movs	r6, r5
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	1889      	adds	r1, r1, r2
 8010ba0:	e7f1      	b.n	8010b86 <_vfiprintf_r+0x1be>
 8010ba2:	aa07      	add	r2, sp, #28
 8010ba4:	9200      	str	r2, [sp, #0]
 8010ba6:	0021      	movs	r1, r4
 8010ba8:	003a      	movs	r2, r7
 8010baa:	4b14      	ldr	r3, [pc, #80]	@ (8010bfc <_vfiprintf_r+0x234>)
 8010bac:	9803      	ldr	r0, [sp, #12]
 8010bae:	e000      	b.n	8010bb2 <_vfiprintf_r+0x1ea>
 8010bb0:	bf00      	nop
 8010bb2:	9004      	str	r0, [sp, #16]
 8010bb4:	9b04      	ldr	r3, [sp, #16]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	d1d6      	bne.n	8010b68 <_vfiprintf_r+0x1a0>
 8010bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010bbc:	07db      	lsls	r3, r3, #31
 8010bbe:	d405      	bmi.n	8010bcc <_vfiprintf_r+0x204>
 8010bc0:	89bb      	ldrh	r3, [r7, #12]
 8010bc2:	059b      	lsls	r3, r3, #22
 8010bc4:	d402      	bmi.n	8010bcc <_vfiprintf_r+0x204>
 8010bc6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010bc8:	f7fe fc28 	bl	800f41c <__retarget_lock_release_recursive>
 8010bcc:	89bb      	ldrh	r3, [r7, #12]
 8010bce:	065b      	lsls	r3, r3, #25
 8010bd0:	d500      	bpl.n	8010bd4 <_vfiprintf_r+0x20c>
 8010bd2:	e71e      	b.n	8010a12 <_vfiprintf_r+0x4a>
 8010bd4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010bd6:	e71e      	b.n	8010a16 <_vfiprintf_r+0x4e>
 8010bd8:	aa07      	add	r2, sp, #28
 8010bda:	9200      	str	r2, [sp, #0]
 8010bdc:	0021      	movs	r1, r4
 8010bde:	003a      	movs	r2, r7
 8010be0:	4b06      	ldr	r3, [pc, #24]	@ (8010bfc <_vfiprintf_r+0x234>)
 8010be2:	9803      	ldr	r0, [sp, #12]
 8010be4:	f000 f87c 	bl	8010ce0 <_printf_i>
 8010be8:	e7e3      	b.n	8010bb2 <_vfiprintf_r+0x1ea>
 8010bea:	46c0      	nop			@ (mov r8, r8)
 8010bec:	080128a0 	.word	0x080128a0
 8010bf0:	080128a6 	.word	0x080128a6
 8010bf4:	080128aa 	.word	0x080128aa
 8010bf8:	00000000 	.word	0x00000000
 8010bfc:	080109a3 	.word	0x080109a3

08010c00 <_printf_common>:
 8010c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c02:	0016      	movs	r6, r2
 8010c04:	9301      	str	r3, [sp, #4]
 8010c06:	688a      	ldr	r2, [r1, #8]
 8010c08:	690b      	ldr	r3, [r1, #16]
 8010c0a:	000c      	movs	r4, r1
 8010c0c:	9000      	str	r0, [sp, #0]
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	da00      	bge.n	8010c14 <_printf_common+0x14>
 8010c12:	0013      	movs	r3, r2
 8010c14:	0022      	movs	r2, r4
 8010c16:	6033      	str	r3, [r6, #0]
 8010c18:	3243      	adds	r2, #67	@ 0x43
 8010c1a:	7812      	ldrb	r2, [r2, #0]
 8010c1c:	2a00      	cmp	r2, #0
 8010c1e:	d001      	beq.n	8010c24 <_printf_common+0x24>
 8010c20:	3301      	adds	r3, #1
 8010c22:	6033      	str	r3, [r6, #0]
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	069b      	lsls	r3, r3, #26
 8010c28:	d502      	bpl.n	8010c30 <_printf_common+0x30>
 8010c2a:	6833      	ldr	r3, [r6, #0]
 8010c2c:	3302      	adds	r3, #2
 8010c2e:	6033      	str	r3, [r6, #0]
 8010c30:	6822      	ldr	r2, [r4, #0]
 8010c32:	2306      	movs	r3, #6
 8010c34:	0015      	movs	r5, r2
 8010c36:	401d      	ands	r5, r3
 8010c38:	421a      	tst	r2, r3
 8010c3a:	d027      	beq.n	8010c8c <_printf_common+0x8c>
 8010c3c:	0023      	movs	r3, r4
 8010c3e:	3343      	adds	r3, #67	@ 0x43
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	1e5a      	subs	r2, r3, #1
 8010c44:	4193      	sbcs	r3, r2
 8010c46:	6822      	ldr	r2, [r4, #0]
 8010c48:	0692      	lsls	r2, r2, #26
 8010c4a:	d430      	bmi.n	8010cae <_printf_common+0xae>
 8010c4c:	0022      	movs	r2, r4
 8010c4e:	9901      	ldr	r1, [sp, #4]
 8010c50:	9800      	ldr	r0, [sp, #0]
 8010c52:	9d08      	ldr	r5, [sp, #32]
 8010c54:	3243      	adds	r2, #67	@ 0x43
 8010c56:	47a8      	blx	r5
 8010c58:	3001      	adds	r0, #1
 8010c5a:	d025      	beq.n	8010ca8 <_printf_common+0xa8>
 8010c5c:	2206      	movs	r2, #6
 8010c5e:	6823      	ldr	r3, [r4, #0]
 8010c60:	2500      	movs	r5, #0
 8010c62:	4013      	ands	r3, r2
 8010c64:	2b04      	cmp	r3, #4
 8010c66:	d105      	bne.n	8010c74 <_printf_common+0x74>
 8010c68:	6833      	ldr	r3, [r6, #0]
 8010c6a:	68e5      	ldr	r5, [r4, #12]
 8010c6c:	1aed      	subs	r5, r5, r3
 8010c6e:	43eb      	mvns	r3, r5
 8010c70:	17db      	asrs	r3, r3, #31
 8010c72:	401d      	ands	r5, r3
 8010c74:	68a3      	ldr	r3, [r4, #8]
 8010c76:	6922      	ldr	r2, [r4, #16]
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	dd01      	ble.n	8010c80 <_printf_common+0x80>
 8010c7c:	1a9b      	subs	r3, r3, r2
 8010c7e:	18ed      	adds	r5, r5, r3
 8010c80:	2600      	movs	r6, #0
 8010c82:	42b5      	cmp	r5, r6
 8010c84:	d120      	bne.n	8010cc8 <_printf_common+0xc8>
 8010c86:	2000      	movs	r0, #0
 8010c88:	e010      	b.n	8010cac <_printf_common+0xac>
 8010c8a:	3501      	adds	r5, #1
 8010c8c:	68e3      	ldr	r3, [r4, #12]
 8010c8e:	6832      	ldr	r2, [r6, #0]
 8010c90:	1a9b      	subs	r3, r3, r2
 8010c92:	42ab      	cmp	r3, r5
 8010c94:	ddd2      	ble.n	8010c3c <_printf_common+0x3c>
 8010c96:	0022      	movs	r2, r4
 8010c98:	2301      	movs	r3, #1
 8010c9a:	9901      	ldr	r1, [sp, #4]
 8010c9c:	9800      	ldr	r0, [sp, #0]
 8010c9e:	9f08      	ldr	r7, [sp, #32]
 8010ca0:	3219      	adds	r2, #25
 8010ca2:	47b8      	blx	r7
 8010ca4:	3001      	adds	r0, #1
 8010ca6:	d1f0      	bne.n	8010c8a <_printf_common+0x8a>
 8010ca8:	2001      	movs	r0, #1
 8010caa:	4240      	negs	r0, r0
 8010cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010cae:	2030      	movs	r0, #48	@ 0x30
 8010cb0:	18e1      	adds	r1, r4, r3
 8010cb2:	3143      	adds	r1, #67	@ 0x43
 8010cb4:	7008      	strb	r0, [r1, #0]
 8010cb6:	0021      	movs	r1, r4
 8010cb8:	1c5a      	adds	r2, r3, #1
 8010cba:	3145      	adds	r1, #69	@ 0x45
 8010cbc:	7809      	ldrb	r1, [r1, #0]
 8010cbe:	18a2      	adds	r2, r4, r2
 8010cc0:	3243      	adds	r2, #67	@ 0x43
 8010cc2:	3302      	adds	r3, #2
 8010cc4:	7011      	strb	r1, [r2, #0]
 8010cc6:	e7c1      	b.n	8010c4c <_printf_common+0x4c>
 8010cc8:	0022      	movs	r2, r4
 8010cca:	2301      	movs	r3, #1
 8010ccc:	9901      	ldr	r1, [sp, #4]
 8010cce:	9800      	ldr	r0, [sp, #0]
 8010cd0:	9f08      	ldr	r7, [sp, #32]
 8010cd2:	321a      	adds	r2, #26
 8010cd4:	47b8      	blx	r7
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	d0e6      	beq.n	8010ca8 <_printf_common+0xa8>
 8010cda:	3601      	adds	r6, #1
 8010cdc:	e7d1      	b.n	8010c82 <_printf_common+0x82>
	...

08010ce0 <_printf_i>:
 8010ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ce2:	b08b      	sub	sp, #44	@ 0x2c
 8010ce4:	9206      	str	r2, [sp, #24]
 8010ce6:	000a      	movs	r2, r1
 8010ce8:	3243      	adds	r2, #67	@ 0x43
 8010cea:	9307      	str	r3, [sp, #28]
 8010cec:	9005      	str	r0, [sp, #20]
 8010cee:	9203      	str	r2, [sp, #12]
 8010cf0:	7e0a      	ldrb	r2, [r1, #24]
 8010cf2:	000c      	movs	r4, r1
 8010cf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cf6:	2a78      	cmp	r2, #120	@ 0x78
 8010cf8:	d809      	bhi.n	8010d0e <_printf_i+0x2e>
 8010cfa:	2a62      	cmp	r2, #98	@ 0x62
 8010cfc:	d80b      	bhi.n	8010d16 <_printf_i+0x36>
 8010cfe:	2a00      	cmp	r2, #0
 8010d00:	d100      	bne.n	8010d04 <_printf_i+0x24>
 8010d02:	e0bc      	b.n	8010e7e <_printf_i+0x19e>
 8010d04:	497b      	ldr	r1, [pc, #492]	@ (8010ef4 <_printf_i+0x214>)
 8010d06:	9104      	str	r1, [sp, #16]
 8010d08:	2a58      	cmp	r2, #88	@ 0x58
 8010d0a:	d100      	bne.n	8010d0e <_printf_i+0x2e>
 8010d0c:	e090      	b.n	8010e30 <_printf_i+0x150>
 8010d0e:	0025      	movs	r5, r4
 8010d10:	3542      	adds	r5, #66	@ 0x42
 8010d12:	702a      	strb	r2, [r5, #0]
 8010d14:	e022      	b.n	8010d5c <_printf_i+0x7c>
 8010d16:	0010      	movs	r0, r2
 8010d18:	3863      	subs	r0, #99	@ 0x63
 8010d1a:	2815      	cmp	r0, #21
 8010d1c:	d8f7      	bhi.n	8010d0e <_printf_i+0x2e>
 8010d1e:	f7ef fa0f 	bl	8000140 <__gnu_thumb1_case_shi>
 8010d22:	0016      	.short	0x0016
 8010d24:	fff6001f 	.word	0xfff6001f
 8010d28:	fff6fff6 	.word	0xfff6fff6
 8010d2c:	001ffff6 	.word	0x001ffff6
 8010d30:	fff6fff6 	.word	0xfff6fff6
 8010d34:	fff6fff6 	.word	0xfff6fff6
 8010d38:	003600a1 	.word	0x003600a1
 8010d3c:	fff60080 	.word	0xfff60080
 8010d40:	00b2fff6 	.word	0x00b2fff6
 8010d44:	0036fff6 	.word	0x0036fff6
 8010d48:	fff6fff6 	.word	0xfff6fff6
 8010d4c:	0084      	.short	0x0084
 8010d4e:	0025      	movs	r5, r4
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	3542      	adds	r5, #66	@ 0x42
 8010d54:	1d11      	adds	r1, r2, #4
 8010d56:	6019      	str	r1, [r3, #0]
 8010d58:	6813      	ldr	r3, [r2, #0]
 8010d5a:	702b      	strb	r3, [r5, #0]
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e0a0      	b.n	8010ea2 <_printf_i+0x1c2>
 8010d60:	6818      	ldr	r0, [r3, #0]
 8010d62:	6809      	ldr	r1, [r1, #0]
 8010d64:	1d02      	adds	r2, r0, #4
 8010d66:	060d      	lsls	r5, r1, #24
 8010d68:	d50b      	bpl.n	8010d82 <_printf_i+0xa2>
 8010d6a:	6806      	ldr	r6, [r0, #0]
 8010d6c:	601a      	str	r2, [r3, #0]
 8010d6e:	2e00      	cmp	r6, #0
 8010d70:	da03      	bge.n	8010d7a <_printf_i+0x9a>
 8010d72:	232d      	movs	r3, #45	@ 0x2d
 8010d74:	9a03      	ldr	r2, [sp, #12]
 8010d76:	4276      	negs	r6, r6
 8010d78:	7013      	strb	r3, [r2, #0]
 8010d7a:	4b5e      	ldr	r3, [pc, #376]	@ (8010ef4 <_printf_i+0x214>)
 8010d7c:	270a      	movs	r7, #10
 8010d7e:	9304      	str	r3, [sp, #16]
 8010d80:	e018      	b.n	8010db4 <_printf_i+0xd4>
 8010d82:	6806      	ldr	r6, [r0, #0]
 8010d84:	601a      	str	r2, [r3, #0]
 8010d86:	0649      	lsls	r1, r1, #25
 8010d88:	d5f1      	bpl.n	8010d6e <_printf_i+0x8e>
 8010d8a:	b236      	sxth	r6, r6
 8010d8c:	e7ef      	b.n	8010d6e <_printf_i+0x8e>
 8010d8e:	6808      	ldr	r0, [r1, #0]
 8010d90:	6819      	ldr	r1, [r3, #0]
 8010d92:	c940      	ldmia	r1!, {r6}
 8010d94:	0605      	lsls	r5, r0, #24
 8010d96:	d402      	bmi.n	8010d9e <_printf_i+0xbe>
 8010d98:	0640      	lsls	r0, r0, #25
 8010d9a:	d500      	bpl.n	8010d9e <_printf_i+0xbe>
 8010d9c:	b2b6      	uxth	r6, r6
 8010d9e:	6019      	str	r1, [r3, #0]
 8010da0:	4b54      	ldr	r3, [pc, #336]	@ (8010ef4 <_printf_i+0x214>)
 8010da2:	270a      	movs	r7, #10
 8010da4:	9304      	str	r3, [sp, #16]
 8010da6:	2a6f      	cmp	r2, #111	@ 0x6f
 8010da8:	d100      	bne.n	8010dac <_printf_i+0xcc>
 8010daa:	3f02      	subs	r7, #2
 8010dac:	0023      	movs	r3, r4
 8010dae:	2200      	movs	r2, #0
 8010db0:	3343      	adds	r3, #67	@ 0x43
 8010db2:	701a      	strb	r2, [r3, #0]
 8010db4:	6863      	ldr	r3, [r4, #4]
 8010db6:	60a3      	str	r3, [r4, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	db03      	blt.n	8010dc4 <_printf_i+0xe4>
 8010dbc:	2104      	movs	r1, #4
 8010dbe:	6822      	ldr	r2, [r4, #0]
 8010dc0:	438a      	bics	r2, r1
 8010dc2:	6022      	str	r2, [r4, #0]
 8010dc4:	2e00      	cmp	r6, #0
 8010dc6:	d102      	bne.n	8010dce <_printf_i+0xee>
 8010dc8:	9d03      	ldr	r5, [sp, #12]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00c      	beq.n	8010de8 <_printf_i+0x108>
 8010dce:	9d03      	ldr	r5, [sp, #12]
 8010dd0:	0030      	movs	r0, r6
 8010dd2:	0039      	movs	r1, r7
 8010dd4:	f7ef fa44 	bl	8000260 <__aeabi_uidivmod>
 8010dd8:	9b04      	ldr	r3, [sp, #16]
 8010dda:	3d01      	subs	r5, #1
 8010ddc:	5c5b      	ldrb	r3, [r3, r1]
 8010dde:	702b      	strb	r3, [r5, #0]
 8010de0:	0033      	movs	r3, r6
 8010de2:	0006      	movs	r6, r0
 8010de4:	429f      	cmp	r7, r3
 8010de6:	d9f3      	bls.n	8010dd0 <_printf_i+0xf0>
 8010de8:	2f08      	cmp	r7, #8
 8010dea:	d109      	bne.n	8010e00 <_printf_i+0x120>
 8010dec:	6823      	ldr	r3, [r4, #0]
 8010dee:	07db      	lsls	r3, r3, #31
 8010df0:	d506      	bpl.n	8010e00 <_printf_i+0x120>
 8010df2:	6862      	ldr	r2, [r4, #4]
 8010df4:	6923      	ldr	r3, [r4, #16]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	dc02      	bgt.n	8010e00 <_printf_i+0x120>
 8010dfa:	2330      	movs	r3, #48	@ 0x30
 8010dfc:	3d01      	subs	r5, #1
 8010dfe:	702b      	strb	r3, [r5, #0]
 8010e00:	9b03      	ldr	r3, [sp, #12]
 8010e02:	1b5b      	subs	r3, r3, r5
 8010e04:	6123      	str	r3, [r4, #16]
 8010e06:	9b07      	ldr	r3, [sp, #28]
 8010e08:	0021      	movs	r1, r4
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	9805      	ldr	r0, [sp, #20]
 8010e0e:	9b06      	ldr	r3, [sp, #24]
 8010e10:	aa09      	add	r2, sp, #36	@ 0x24
 8010e12:	f7ff fef5 	bl	8010c00 <_printf_common>
 8010e16:	3001      	adds	r0, #1
 8010e18:	d148      	bne.n	8010eac <_printf_i+0x1cc>
 8010e1a:	2001      	movs	r0, #1
 8010e1c:	4240      	negs	r0, r0
 8010e1e:	b00b      	add	sp, #44	@ 0x2c
 8010e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e22:	2220      	movs	r2, #32
 8010e24:	6809      	ldr	r1, [r1, #0]
 8010e26:	430a      	orrs	r2, r1
 8010e28:	6022      	str	r2, [r4, #0]
 8010e2a:	2278      	movs	r2, #120	@ 0x78
 8010e2c:	4932      	ldr	r1, [pc, #200]	@ (8010ef8 <_printf_i+0x218>)
 8010e2e:	9104      	str	r1, [sp, #16]
 8010e30:	0021      	movs	r1, r4
 8010e32:	3145      	adds	r1, #69	@ 0x45
 8010e34:	700a      	strb	r2, [r1, #0]
 8010e36:	6819      	ldr	r1, [r3, #0]
 8010e38:	6822      	ldr	r2, [r4, #0]
 8010e3a:	c940      	ldmia	r1!, {r6}
 8010e3c:	0610      	lsls	r0, r2, #24
 8010e3e:	d402      	bmi.n	8010e46 <_printf_i+0x166>
 8010e40:	0650      	lsls	r0, r2, #25
 8010e42:	d500      	bpl.n	8010e46 <_printf_i+0x166>
 8010e44:	b2b6      	uxth	r6, r6
 8010e46:	6019      	str	r1, [r3, #0]
 8010e48:	07d3      	lsls	r3, r2, #31
 8010e4a:	d502      	bpl.n	8010e52 <_printf_i+0x172>
 8010e4c:	2320      	movs	r3, #32
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	2e00      	cmp	r6, #0
 8010e54:	d001      	beq.n	8010e5a <_printf_i+0x17a>
 8010e56:	2710      	movs	r7, #16
 8010e58:	e7a8      	b.n	8010dac <_printf_i+0xcc>
 8010e5a:	2220      	movs	r2, #32
 8010e5c:	6823      	ldr	r3, [r4, #0]
 8010e5e:	4393      	bics	r3, r2
 8010e60:	6023      	str	r3, [r4, #0]
 8010e62:	e7f8      	b.n	8010e56 <_printf_i+0x176>
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	680d      	ldr	r5, [r1, #0]
 8010e68:	1d10      	adds	r0, r2, #4
 8010e6a:	6949      	ldr	r1, [r1, #20]
 8010e6c:	6018      	str	r0, [r3, #0]
 8010e6e:	6813      	ldr	r3, [r2, #0]
 8010e70:	062e      	lsls	r6, r5, #24
 8010e72:	d501      	bpl.n	8010e78 <_printf_i+0x198>
 8010e74:	6019      	str	r1, [r3, #0]
 8010e76:	e002      	b.n	8010e7e <_printf_i+0x19e>
 8010e78:	066d      	lsls	r5, r5, #25
 8010e7a:	d5fb      	bpl.n	8010e74 <_printf_i+0x194>
 8010e7c:	8019      	strh	r1, [r3, #0]
 8010e7e:	2300      	movs	r3, #0
 8010e80:	9d03      	ldr	r5, [sp, #12]
 8010e82:	6123      	str	r3, [r4, #16]
 8010e84:	e7bf      	b.n	8010e06 <_printf_i+0x126>
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	1d11      	adds	r1, r2, #4
 8010e8a:	6019      	str	r1, [r3, #0]
 8010e8c:	6815      	ldr	r5, [r2, #0]
 8010e8e:	2100      	movs	r1, #0
 8010e90:	0028      	movs	r0, r5
 8010e92:	6862      	ldr	r2, [r4, #4]
 8010e94:	f000 f9aa 	bl	80111ec <memchr>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d001      	beq.n	8010ea0 <_printf_i+0x1c0>
 8010e9c:	1b40      	subs	r0, r0, r5
 8010e9e:	6060      	str	r0, [r4, #4]
 8010ea0:	6863      	ldr	r3, [r4, #4]
 8010ea2:	6123      	str	r3, [r4, #16]
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	9a03      	ldr	r2, [sp, #12]
 8010ea8:	7013      	strb	r3, [r2, #0]
 8010eaa:	e7ac      	b.n	8010e06 <_printf_i+0x126>
 8010eac:	002a      	movs	r2, r5
 8010eae:	6923      	ldr	r3, [r4, #16]
 8010eb0:	9906      	ldr	r1, [sp, #24]
 8010eb2:	9805      	ldr	r0, [sp, #20]
 8010eb4:	9d07      	ldr	r5, [sp, #28]
 8010eb6:	47a8      	blx	r5
 8010eb8:	3001      	adds	r0, #1
 8010eba:	d0ae      	beq.n	8010e1a <_printf_i+0x13a>
 8010ebc:	6823      	ldr	r3, [r4, #0]
 8010ebe:	079b      	lsls	r3, r3, #30
 8010ec0:	d415      	bmi.n	8010eee <_printf_i+0x20e>
 8010ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ec4:	68e0      	ldr	r0, [r4, #12]
 8010ec6:	4298      	cmp	r0, r3
 8010ec8:	daa9      	bge.n	8010e1e <_printf_i+0x13e>
 8010eca:	0018      	movs	r0, r3
 8010ecc:	e7a7      	b.n	8010e1e <_printf_i+0x13e>
 8010ece:	0022      	movs	r2, r4
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	9906      	ldr	r1, [sp, #24]
 8010ed4:	9805      	ldr	r0, [sp, #20]
 8010ed6:	9e07      	ldr	r6, [sp, #28]
 8010ed8:	3219      	adds	r2, #25
 8010eda:	47b0      	blx	r6
 8010edc:	3001      	adds	r0, #1
 8010ede:	d09c      	beq.n	8010e1a <_printf_i+0x13a>
 8010ee0:	3501      	adds	r5, #1
 8010ee2:	68e3      	ldr	r3, [r4, #12]
 8010ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ee6:	1a9b      	subs	r3, r3, r2
 8010ee8:	42ab      	cmp	r3, r5
 8010eea:	dcf0      	bgt.n	8010ece <_printf_i+0x1ee>
 8010eec:	e7e9      	b.n	8010ec2 <_printf_i+0x1e2>
 8010eee:	2500      	movs	r5, #0
 8010ef0:	e7f7      	b.n	8010ee2 <_printf_i+0x202>
 8010ef2:	46c0      	nop			@ (mov r8, r8)
 8010ef4:	080128b1 	.word	0x080128b1
 8010ef8:	080128c2 	.word	0x080128c2

08010efc <__sflush_r>:
 8010efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010efe:	220c      	movs	r2, #12
 8010f00:	5e8b      	ldrsh	r3, [r1, r2]
 8010f02:	0005      	movs	r5, r0
 8010f04:	000c      	movs	r4, r1
 8010f06:	071a      	lsls	r2, r3, #28
 8010f08:	d456      	bmi.n	8010fb8 <__sflush_r+0xbc>
 8010f0a:	684a      	ldr	r2, [r1, #4]
 8010f0c:	2a00      	cmp	r2, #0
 8010f0e:	dc02      	bgt.n	8010f16 <__sflush_r+0x1a>
 8010f10:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8010f12:	2a00      	cmp	r2, #0
 8010f14:	dd4e      	ble.n	8010fb4 <__sflush_r+0xb8>
 8010f16:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010f18:	2f00      	cmp	r7, #0
 8010f1a:	d04b      	beq.n	8010fb4 <__sflush_r+0xb8>
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	2080      	movs	r0, #128	@ 0x80
 8010f20:	682e      	ldr	r6, [r5, #0]
 8010f22:	602a      	str	r2, [r5, #0]
 8010f24:	001a      	movs	r2, r3
 8010f26:	0140      	lsls	r0, r0, #5
 8010f28:	6a21      	ldr	r1, [r4, #32]
 8010f2a:	4002      	ands	r2, r0
 8010f2c:	4203      	tst	r3, r0
 8010f2e:	d033      	beq.n	8010f98 <__sflush_r+0x9c>
 8010f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010f32:	89a3      	ldrh	r3, [r4, #12]
 8010f34:	075b      	lsls	r3, r3, #29
 8010f36:	d506      	bpl.n	8010f46 <__sflush_r+0x4a>
 8010f38:	6863      	ldr	r3, [r4, #4]
 8010f3a:	1ad2      	subs	r2, r2, r3
 8010f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <__sflush_r+0x4a>
 8010f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010f44:	1ad2      	subs	r2, r2, r3
 8010f46:	2300      	movs	r3, #0
 8010f48:	0028      	movs	r0, r5
 8010f4a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010f4c:	6a21      	ldr	r1, [r4, #32]
 8010f4e:	47b8      	blx	r7
 8010f50:	89a2      	ldrh	r2, [r4, #12]
 8010f52:	1c43      	adds	r3, r0, #1
 8010f54:	d106      	bne.n	8010f64 <__sflush_r+0x68>
 8010f56:	6829      	ldr	r1, [r5, #0]
 8010f58:	291d      	cmp	r1, #29
 8010f5a:	d846      	bhi.n	8010fea <__sflush_r+0xee>
 8010f5c:	4b29      	ldr	r3, [pc, #164]	@ (8011004 <__sflush_r+0x108>)
 8010f5e:	410b      	asrs	r3, r1
 8010f60:	07db      	lsls	r3, r3, #31
 8010f62:	d442      	bmi.n	8010fea <__sflush_r+0xee>
 8010f64:	2300      	movs	r3, #0
 8010f66:	6063      	str	r3, [r4, #4]
 8010f68:	6923      	ldr	r3, [r4, #16]
 8010f6a:	6023      	str	r3, [r4, #0]
 8010f6c:	04d2      	lsls	r2, r2, #19
 8010f6e:	d505      	bpl.n	8010f7c <__sflush_r+0x80>
 8010f70:	1c43      	adds	r3, r0, #1
 8010f72:	d102      	bne.n	8010f7a <__sflush_r+0x7e>
 8010f74:	682b      	ldr	r3, [r5, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d100      	bne.n	8010f7c <__sflush_r+0x80>
 8010f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f7e:	602e      	str	r6, [r5, #0]
 8010f80:	2900      	cmp	r1, #0
 8010f82:	d017      	beq.n	8010fb4 <__sflush_r+0xb8>
 8010f84:	0023      	movs	r3, r4
 8010f86:	3344      	adds	r3, #68	@ 0x44
 8010f88:	4299      	cmp	r1, r3
 8010f8a:	d002      	beq.n	8010f92 <__sflush_r+0x96>
 8010f8c:	0028      	movs	r0, r5
 8010f8e:	f7fe fa55 	bl	800f43c <_free_r>
 8010f92:	2300      	movs	r3, #0
 8010f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f96:	e00d      	b.n	8010fb4 <__sflush_r+0xb8>
 8010f98:	2301      	movs	r3, #1
 8010f9a:	0028      	movs	r0, r5
 8010f9c:	47b8      	blx	r7
 8010f9e:	0002      	movs	r2, r0
 8010fa0:	1c43      	adds	r3, r0, #1
 8010fa2:	d1c6      	bne.n	8010f32 <__sflush_r+0x36>
 8010fa4:	682b      	ldr	r3, [r5, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d0c3      	beq.n	8010f32 <__sflush_r+0x36>
 8010faa:	2b1d      	cmp	r3, #29
 8010fac:	d001      	beq.n	8010fb2 <__sflush_r+0xb6>
 8010fae:	2b16      	cmp	r3, #22
 8010fb0:	d11a      	bne.n	8010fe8 <__sflush_r+0xec>
 8010fb2:	602e      	str	r6, [r5, #0]
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	e01e      	b.n	8010ff6 <__sflush_r+0xfa>
 8010fb8:	690e      	ldr	r6, [r1, #16]
 8010fba:	2e00      	cmp	r6, #0
 8010fbc:	d0fa      	beq.n	8010fb4 <__sflush_r+0xb8>
 8010fbe:	680f      	ldr	r7, [r1, #0]
 8010fc0:	600e      	str	r6, [r1, #0]
 8010fc2:	1bba      	subs	r2, r7, r6
 8010fc4:	9201      	str	r2, [sp, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	079b      	lsls	r3, r3, #30
 8010fca:	d100      	bne.n	8010fce <__sflush_r+0xd2>
 8010fcc:	694a      	ldr	r2, [r1, #20]
 8010fce:	60a2      	str	r2, [r4, #8]
 8010fd0:	9b01      	ldr	r3, [sp, #4]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	ddee      	ble.n	8010fb4 <__sflush_r+0xb8>
 8010fd6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010fd8:	0032      	movs	r2, r6
 8010fda:	001f      	movs	r7, r3
 8010fdc:	0028      	movs	r0, r5
 8010fde:	9b01      	ldr	r3, [sp, #4]
 8010fe0:	6a21      	ldr	r1, [r4, #32]
 8010fe2:	47b8      	blx	r7
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	dc07      	bgt.n	8010ff8 <__sflush_r+0xfc>
 8010fe8:	89a2      	ldrh	r2, [r4, #12]
 8010fea:	2340      	movs	r3, #64	@ 0x40
 8010fec:	2001      	movs	r0, #1
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	b21b      	sxth	r3, r3
 8010ff2:	81a3      	strh	r3, [r4, #12]
 8010ff4:	4240      	negs	r0, r0
 8010ff6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ff8:	9b01      	ldr	r3, [sp, #4]
 8010ffa:	1836      	adds	r6, r6, r0
 8010ffc:	1a1b      	subs	r3, r3, r0
 8010ffe:	9301      	str	r3, [sp, #4]
 8011000:	e7e6      	b.n	8010fd0 <__sflush_r+0xd4>
 8011002:	46c0      	nop			@ (mov r8, r8)
 8011004:	dfbffffe 	.word	0xdfbffffe

08011008 <_fflush_r>:
 8011008:	690b      	ldr	r3, [r1, #16]
 801100a:	b570      	push	{r4, r5, r6, lr}
 801100c:	0005      	movs	r5, r0
 801100e:	000c      	movs	r4, r1
 8011010:	2b00      	cmp	r3, #0
 8011012:	d102      	bne.n	801101a <_fflush_r+0x12>
 8011014:	2500      	movs	r5, #0
 8011016:	0028      	movs	r0, r5
 8011018:	bd70      	pop	{r4, r5, r6, pc}
 801101a:	2800      	cmp	r0, #0
 801101c:	d004      	beq.n	8011028 <_fflush_r+0x20>
 801101e:	6a03      	ldr	r3, [r0, #32]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d101      	bne.n	8011028 <_fflush_r+0x20>
 8011024:	f7fe f8c6 	bl	800f1b4 <__sinit>
 8011028:	220c      	movs	r2, #12
 801102a:	5ea3      	ldrsh	r3, [r4, r2]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d0f1      	beq.n	8011014 <_fflush_r+0xc>
 8011030:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011032:	07d2      	lsls	r2, r2, #31
 8011034:	d404      	bmi.n	8011040 <_fflush_r+0x38>
 8011036:	059b      	lsls	r3, r3, #22
 8011038:	d402      	bmi.n	8011040 <_fflush_r+0x38>
 801103a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801103c:	f7fe f9ed 	bl	800f41a <__retarget_lock_acquire_recursive>
 8011040:	0028      	movs	r0, r5
 8011042:	0021      	movs	r1, r4
 8011044:	f7ff ff5a 	bl	8010efc <__sflush_r>
 8011048:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801104a:	0005      	movs	r5, r0
 801104c:	07db      	lsls	r3, r3, #31
 801104e:	d4e2      	bmi.n	8011016 <_fflush_r+0xe>
 8011050:	89a3      	ldrh	r3, [r4, #12]
 8011052:	059b      	lsls	r3, r3, #22
 8011054:	d4df      	bmi.n	8011016 <_fflush_r+0xe>
 8011056:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011058:	f7fe f9e0 	bl	800f41c <__retarget_lock_release_recursive>
 801105c:	e7db      	b.n	8011016 <_fflush_r+0xe>

0801105e <__swbuf_r>:
 801105e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011060:	0006      	movs	r6, r0
 8011062:	000d      	movs	r5, r1
 8011064:	0014      	movs	r4, r2
 8011066:	2800      	cmp	r0, #0
 8011068:	d004      	beq.n	8011074 <__swbuf_r+0x16>
 801106a:	6a03      	ldr	r3, [r0, #32]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d101      	bne.n	8011074 <__swbuf_r+0x16>
 8011070:	f7fe f8a0 	bl	800f1b4 <__sinit>
 8011074:	69a3      	ldr	r3, [r4, #24]
 8011076:	60a3      	str	r3, [r4, #8]
 8011078:	89a3      	ldrh	r3, [r4, #12]
 801107a:	071b      	lsls	r3, r3, #28
 801107c:	d502      	bpl.n	8011084 <__swbuf_r+0x26>
 801107e:	6923      	ldr	r3, [r4, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d109      	bne.n	8011098 <__swbuf_r+0x3a>
 8011084:	0021      	movs	r1, r4
 8011086:	0030      	movs	r0, r6
 8011088:	f000 f82c 	bl	80110e4 <__swsetup_r>
 801108c:	2800      	cmp	r0, #0
 801108e:	d003      	beq.n	8011098 <__swbuf_r+0x3a>
 8011090:	2501      	movs	r5, #1
 8011092:	426d      	negs	r5, r5
 8011094:	0028      	movs	r0, r5
 8011096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011098:	6923      	ldr	r3, [r4, #16]
 801109a:	6820      	ldr	r0, [r4, #0]
 801109c:	b2ef      	uxtb	r7, r5
 801109e:	1ac0      	subs	r0, r0, r3
 80110a0:	6963      	ldr	r3, [r4, #20]
 80110a2:	b2ed      	uxtb	r5, r5
 80110a4:	4283      	cmp	r3, r0
 80110a6:	dc05      	bgt.n	80110b4 <__swbuf_r+0x56>
 80110a8:	0021      	movs	r1, r4
 80110aa:	0030      	movs	r0, r6
 80110ac:	f7ff ffac 	bl	8011008 <_fflush_r>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d1ed      	bne.n	8011090 <__swbuf_r+0x32>
 80110b4:	68a3      	ldr	r3, [r4, #8]
 80110b6:	3001      	adds	r0, #1
 80110b8:	3b01      	subs	r3, #1
 80110ba:	60a3      	str	r3, [r4, #8]
 80110bc:	6823      	ldr	r3, [r4, #0]
 80110be:	1c5a      	adds	r2, r3, #1
 80110c0:	6022      	str	r2, [r4, #0]
 80110c2:	701f      	strb	r7, [r3, #0]
 80110c4:	6963      	ldr	r3, [r4, #20]
 80110c6:	4283      	cmp	r3, r0
 80110c8:	d004      	beq.n	80110d4 <__swbuf_r+0x76>
 80110ca:	89a3      	ldrh	r3, [r4, #12]
 80110cc:	07db      	lsls	r3, r3, #31
 80110ce:	d5e1      	bpl.n	8011094 <__swbuf_r+0x36>
 80110d0:	2d0a      	cmp	r5, #10
 80110d2:	d1df      	bne.n	8011094 <__swbuf_r+0x36>
 80110d4:	0021      	movs	r1, r4
 80110d6:	0030      	movs	r0, r6
 80110d8:	f7ff ff96 	bl	8011008 <_fflush_r>
 80110dc:	2800      	cmp	r0, #0
 80110de:	d0d9      	beq.n	8011094 <__swbuf_r+0x36>
 80110e0:	e7d6      	b.n	8011090 <__swbuf_r+0x32>
	...

080110e4 <__swsetup_r>:
 80110e4:	4b2d      	ldr	r3, [pc, #180]	@ (801119c <__swsetup_r+0xb8>)
 80110e6:	b570      	push	{r4, r5, r6, lr}
 80110e8:	0005      	movs	r5, r0
 80110ea:	6818      	ldr	r0, [r3, #0]
 80110ec:	000c      	movs	r4, r1
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d004      	beq.n	80110fc <__swsetup_r+0x18>
 80110f2:	6a03      	ldr	r3, [r0, #32]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d101      	bne.n	80110fc <__swsetup_r+0x18>
 80110f8:	f7fe f85c 	bl	800f1b4 <__sinit>
 80110fc:	230c      	movs	r3, #12
 80110fe:	5ee2      	ldrsh	r2, [r4, r3]
 8011100:	0713      	lsls	r3, r2, #28
 8011102:	d423      	bmi.n	801114c <__swsetup_r+0x68>
 8011104:	06d3      	lsls	r3, r2, #27
 8011106:	d407      	bmi.n	8011118 <__swsetup_r+0x34>
 8011108:	2309      	movs	r3, #9
 801110a:	602b      	str	r3, [r5, #0]
 801110c:	2340      	movs	r3, #64	@ 0x40
 801110e:	2001      	movs	r0, #1
 8011110:	4313      	orrs	r3, r2
 8011112:	81a3      	strh	r3, [r4, #12]
 8011114:	4240      	negs	r0, r0
 8011116:	e03a      	b.n	801118e <__swsetup_r+0xaa>
 8011118:	0752      	lsls	r2, r2, #29
 801111a:	d513      	bpl.n	8011144 <__swsetup_r+0x60>
 801111c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801111e:	2900      	cmp	r1, #0
 8011120:	d008      	beq.n	8011134 <__swsetup_r+0x50>
 8011122:	0023      	movs	r3, r4
 8011124:	3344      	adds	r3, #68	@ 0x44
 8011126:	4299      	cmp	r1, r3
 8011128:	d002      	beq.n	8011130 <__swsetup_r+0x4c>
 801112a:	0028      	movs	r0, r5
 801112c:	f7fe f986 	bl	800f43c <_free_r>
 8011130:	2300      	movs	r3, #0
 8011132:	6363      	str	r3, [r4, #52]	@ 0x34
 8011134:	2224      	movs	r2, #36	@ 0x24
 8011136:	89a3      	ldrh	r3, [r4, #12]
 8011138:	4393      	bics	r3, r2
 801113a:	81a3      	strh	r3, [r4, #12]
 801113c:	2300      	movs	r3, #0
 801113e:	6063      	str	r3, [r4, #4]
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	6023      	str	r3, [r4, #0]
 8011144:	2308      	movs	r3, #8
 8011146:	89a2      	ldrh	r2, [r4, #12]
 8011148:	4313      	orrs	r3, r2
 801114a:	81a3      	strh	r3, [r4, #12]
 801114c:	6923      	ldr	r3, [r4, #16]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d10b      	bne.n	801116a <__swsetup_r+0x86>
 8011152:	21a0      	movs	r1, #160	@ 0xa0
 8011154:	2280      	movs	r2, #128	@ 0x80
 8011156:	89a3      	ldrh	r3, [r4, #12]
 8011158:	0089      	lsls	r1, r1, #2
 801115a:	0092      	lsls	r2, r2, #2
 801115c:	400b      	ands	r3, r1
 801115e:	4293      	cmp	r3, r2
 8011160:	d003      	beq.n	801116a <__swsetup_r+0x86>
 8011162:	0021      	movs	r1, r4
 8011164:	0028      	movs	r0, r5
 8011166:	f000 f90d 	bl	8011384 <__smakebuf_r>
 801116a:	230c      	movs	r3, #12
 801116c:	5ee2      	ldrsh	r2, [r4, r3]
 801116e:	2101      	movs	r1, #1
 8011170:	0013      	movs	r3, r2
 8011172:	400b      	ands	r3, r1
 8011174:	420a      	tst	r2, r1
 8011176:	d00b      	beq.n	8011190 <__swsetup_r+0xac>
 8011178:	2300      	movs	r3, #0
 801117a:	60a3      	str	r3, [r4, #8]
 801117c:	6963      	ldr	r3, [r4, #20]
 801117e:	425b      	negs	r3, r3
 8011180:	61a3      	str	r3, [r4, #24]
 8011182:	2000      	movs	r0, #0
 8011184:	6923      	ldr	r3, [r4, #16]
 8011186:	4283      	cmp	r3, r0
 8011188:	d101      	bne.n	801118e <__swsetup_r+0xaa>
 801118a:	0613      	lsls	r3, r2, #24
 801118c:	d4be      	bmi.n	801110c <__swsetup_r+0x28>
 801118e:	bd70      	pop	{r4, r5, r6, pc}
 8011190:	0791      	lsls	r1, r2, #30
 8011192:	d400      	bmi.n	8011196 <__swsetup_r+0xb2>
 8011194:	6963      	ldr	r3, [r4, #20]
 8011196:	60a3      	str	r3, [r4, #8]
 8011198:	e7f3      	b.n	8011182 <__swsetup_r+0x9e>
 801119a:	46c0      	nop			@ (mov r8, r8)
 801119c:	20002410 	.word	0x20002410

080111a0 <memmove>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	4288      	cmp	r0, r1
 80111a4:	d806      	bhi.n	80111b4 <memmove+0x14>
 80111a6:	2300      	movs	r3, #0
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d008      	beq.n	80111be <memmove+0x1e>
 80111ac:	5ccc      	ldrb	r4, [r1, r3]
 80111ae:	54c4      	strb	r4, [r0, r3]
 80111b0:	3301      	adds	r3, #1
 80111b2:	e7f9      	b.n	80111a8 <memmove+0x8>
 80111b4:	188b      	adds	r3, r1, r2
 80111b6:	4298      	cmp	r0, r3
 80111b8:	d2f5      	bcs.n	80111a6 <memmove+0x6>
 80111ba:	3a01      	subs	r2, #1
 80111bc:	d200      	bcs.n	80111c0 <memmove+0x20>
 80111be:	bd10      	pop	{r4, pc}
 80111c0:	5c8b      	ldrb	r3, [r1, r2]
 80111c2:	5483      	strb	r3, [r0, r2]
 80111c4:	e7f9      	b.n	80111ba <memmove+0x1a>
	...

080111c8 <_sbrk_r>:
 80111c8:	2300      	movs	r3, #0
 80111ca:	b570      	push	{r4, r5, r6, lr}
 80111cc:	4d06      	ldr	r5, [pc, #24]	@ (80111e8 <_sbrk_r+0x20>)
 80111ce:	0004      	movs	r4, r0
 80111d0:	0008      	movs	r0, r1
 80111d2:	602b      	str	r3, [r5, #0]
 80111d4:	f7f6 fe14 	bl	8007e00 <_sbrk>
 80111d8:	1c43      	adds	r3, r0, #1
 80111da:	d103      	bne.n	80111e4 <_sbrk_r+0x1c>
 80111dc:	682b      	ldr	r3, [r5, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d000      	beq.n	80111e4 <_sbrk_r+0x1c>
 80111e2:	6023      	str	r3, [r4, #0]
 80111e4:	bd70      	pop	{r4, r5, r6, pc}
 80111e6:	46c0      	nop			@ (mov r8, r8)
 80111e8:	20003950 	.word	0x20003950

080111ec <memchr>:
 80111ec:	b2c9      	uxtb	r1, r1
 80111ee:	1882      	adds	r2, r0, r2
 80111f0:	4290      	cmp	r0, r2
 80111f2:	d101      	bne.n	80111f8 <memchr+0xc>
 80111f4:	2000      	movs	r0, #0
 80111f6:	4770      	bx	lr
 80111f8:	7803      	ldrb	r3, [r0, #0]
 80111fa:	428b      	cmp	r3, r1
 80111fc:	d0fb      	beq.n	80111f6 <memchr+0xa>
 80111fe:	3001      	adds	r0, #1
 8011200:	e7f6      	b.n	80111f0 <memchr+0x4>
	...

08011204 <__assert_func>:
 8011204:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011206:	0014      	movs	r4, r2
 8011208:	001a      	movs	r2, r3
 801120a:	4b09      	ldr	r3, [pc, #36]	@ (8011230 <__assert_func+0x2c>)
 801120c:	0005      	movs	r5, r0
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	000e      	movs	r6, r1
 8011212:	68d8      	ldr	r0, [r3, #12]
 8011214:	4b07      	ldr	r3, [pc, #28]	@ (8011234 <__assert_func+0x30>)
 8011216:	2c00      	cmp	r4, #0
 8011218:	d101      	bne.n	801121e <__assert_func+0x1a>
 801121a:	4b07      	ldr	r3, [pc, #28]	@ (8011238 <__assert_func+0x34>)
 801121c:	001c      	movs	r4, r3
 801121e:	4907      	ldr	r1, [pc, #28]	@ (801123c <__assert_func+0x38>)
 8011220:	9301      	str	r3, [sp, #4]
 8011222:	9402      	str	r4, [sp, #8]
 8011224:	002b      	movs	r3, r5
 8011226:	9600      	str	r6, [sp, #0]
 8011228:	f000 f872 	bl	8011310 <fiprintf>
 801122c:	f000 f910 	bl	8011450 <abort>
 8011230:	20002410 	.word	0x20002410
 8011234:	080128d3 	.word	0x080128d3
 8011238:	0801290e 	.word	0x0801290e
 801123c:	080128e0 	.word	0x080128e0

08011240 <_calloc_r>:
 8011240:	b570      	push	{r4, r5, r6, lr}
 8011242:	0c0b      	lsrs	r3, r1, #16
 8011244:	0c15      	lsrs	r5, r2, #16
 8011246:	2b00      	cmp	r3, #0
 8011248:	d11e      	bne.n	8011288 <_calloc_r+0x48>
 801124a:	2d00      	cmp	r5, #0
 801124c:	d10c      	bne.n	8011268 <_calloc_r+0x28>
 801124e:	b289      	uxth	r1, r1
 8011250:	b294      	uxth	r4, r2
 8011252:	434c      	muls	r4, r1
 8011254:	0021      	movs	r1, r4
 8011256:	f7fe fcb7 	bl	800fbc8 <_malloc_r>
 801125a:	1e05      	subs	r5, r0, #0
 801125c:	d01a      	beq.n	8011294 <_calloc_r+0x54>
 801125e:	0022      	movs	r2, r4
 8011260:	2100      	movs	r1, #0
 8011262:	f7fe f847 	bl	800f2f4 <memset>
 8011266:	e016      	b.n	8011296 <_calloc_r+0x56>
 8011268:	1c2b      	adds	r3, r5, #0
 801126a:	1c0c      	adds	r4, r1, #0
 801126c:	b289      	uxth	r1, r1
 801126e:	b292      	uxth	r2, r2
 8011270:	434a      	muls	r2, r1
 8011272:	b29b      	uxth	r3, r3
 8011274:	b2a1      	uxth	r1, r4
 8011276:	4359      	muls	r1, r3
 8011278:	0c14      	lsrs	r4, r2, #16
 801127a:	190c      	adds	r4, r1, r4
 801127c:	0c23      	lsrs	r3, r4, #16
 801127e:	d107      	bne.n	8011290 <_calloc_r+0x50>
 8011280:	0424      	lsls	r4, r4, #16
 8011282:	b292      	uxth	r2, r2
 8011284:	4314      	orrs	r4, r2
 8011286:	e7e5      	b.n	8011254 <_calloc_r+0x14>
 8011288:	2d00      	cmp	r5, #0
 801128a:	d101      	bne.n	8011290 <_calloc_r+0x50>
 801128c:	1c14      	adds	r4, r2, #0
 801128e:	e7ed      	b.n	801126c <_calloc_r+0x2c>
 8011290:	230c      	movs	r3, #12
 8011292:	6003      	str	r3, [r0, #0]
 8011294:	2500      	movs	r5, #0
 8011296:	0028      	movs	r0, r5
 8011298:	bd70      	pop	{r4, r5, r6, pc}
	...

0801129c <malloc>:
 801129c:	b510      	push	{r4, lr}
 801129e:	4b03      	ldr	r3, [pc, #12]	@ (80112ac <malloc+0x10>)
 80112a0:	0001      	movs	r1, r0
 80112a2:	6818      	ldr	r0, [r3, #0]
 80112a4:	f7fe fc90 	bl	800fbc8 <_malloc_r>
 80112a8:	bd10      	pop	{r4, pc}
 80112aa:	46c0      	nop			@ (mov r8, r8)
 80112ac:	20002410 	.word	0x20002410

080112b0 <_realloc_r>:
 80112b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112b2:	0006      	movs	r6, r0
 80112b4:	000c      	movs	r4, r1
 80112b6:	0015      	movs	r5, r2
 80112b8:	2900      	cmp	r1, #0
 80112ba:	d105      	bne.n	80112c8 <_realloc_r+0x18>
 80112bc:	0011      	movs	r1, r2
 80112be:	f7fe fc83 	bl	800fbc8 <_malloc_r>
 80112c2:	0004      	movs	r4, r0
 80112c4:	0020      	movs	r0, r4
 80112c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80112c8:	2a00      	cmp	r2, #0
 80112ca:	d103      	bne.n	80112d4 <_realloc_r+0x24>
 80112cc:	f7fe f8b6 	bl	800f43c <_free_r>
 80112d0:	2400      	movs	r4, #0
 80112d2:	e7f7      	b.n	80112c4 <_realloc_r+0x14>
 80112d4:	f000 f8c3 	bl	801145e <_malloc_usable_size_r>
 80112d8:	0007      	movs	r7, r0
 80112da:	4285      	cmp	r5, r0
 80112dc:	d802      	bhi.n	80112e4 <_realloc_r+0x34>
 80112de:	0843      	lsrs	r3, r0, #1
 80112e0:	42ab      	cmp	r3, r5
 80112e2:	d3ef      	bcc.n	80112c4 <_realloc_r+0x14>
 80112e4:	0029      	movs	r1, r5
 80112e6:	0030      	movs	r0, r6
 80112e8:	f7fe fc6e 	bl	800fbc8 <_malloc_r>
 80112ec:	9001      	str	r0, [sp, #4]
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d0ee      	beq.n	80112d0 <_realloc_r+0x20>
 80112f2:	002a      	movs	r2, r5
 80112f4:	42bd      	cmp	r5, r7
 80112f6:	d900      	bls.n	80112fa <_realloc_r+0x4a>
 80112f8:	003a      	movs	r2, r7
 80112fa:	0021      	movs	r1, r4
 80112fc:	9801      	ldr	r0, [sp, #4]
 80112fe:	f7fe f88e 	bl	800f41e <memcpy>
 8011302:	0021      	movs	r1, r4
 8011304:	0030      	movs	r0, r6
 8011306:	f7fe f899 	bl	800f43c <_free_r>
 801130a:	9c01      	ldr	r4, [sp, #4]
 801130c:	e7da      	b.n	80112c4 <_realloc_r+0x14>
	...

08011310 <fiprintf>:
 8011310:	b40e      	push	{r1, r2, r3}
 8011312:	b517      	push	{r0, r1, r2, r4, lr}
 8011314:	4c05      	ldr	r4, [pc, #20]	@ (801132c <fiprintf+0x1c>)
 8011316:	ab05      	add	r3, sp, #20
 8011318:	cb04      	ldmia	r3!, {r2}
 801131a:	0001      	movs	r1, r0
 801131c:	6820      	ldr	r0, [r4, #0]
 801131e:	9301      	str	r3, [sp, #4]
 8011320:	f7ff fb52 	bl	80109c8 <_vfiprintf_r>
 8011324:	bc1e      	pop	{r1, r2, r3, r4}
 8011326:	bc08      	pop	{r3}
 8011328:	b003      	add	sp, #12
 801132a:	4718      	bx	r3
 801132c:	20002410 	.word	0x20002410

08011330 <__swhatbuf_r>:
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	000e      	movs	r6, r1
 8011334:	001d      	movs	r5, r3
 8011336:	230e      	movs	r3, #14
 8011338:	5ec9      	ldrsh	r1, [r1, r3]
 801133a:	0014      	movs	r4, r2
 801133c:	b096      	sub	sp, #88	@ 0x58
 801133e:	2900      	cmp	r1, #0
 8011340:	da0c      	bge.n	801135c <__swhatbuf_r+0x2c>
 8011342:	89b2      	ldrh	r2, [r6, #12]
 8011344:	2380      	movs	r3, #128	@ 0x80
 8011346:	0011      	movs	r1, r2
 8011348:	4019      	ands	r1, r3
 801134a:	421a      	tst	r2, r3
 801134c:	d114      	bne.n	8011378 <__swhatbuf_r+0x48>
 801134e:	2380      	movs	r3, #128	@ 0x80
 8011350:	00db      	lsls	r3, r3, #3
 8011352:	2000      	movs	r0, #0
 8011354:	6029      	str	r1, [r5, #0]
 8011356:	6023      	str	r3, [r4, #0]
 8011358:	b016      	add	sp, #88	@ 0x58
 801135a:	bd70      	pop	{r4, r5, r6, pc}
 801135c:	466a      	mov	r2, sp
 801135e:	f000 f853 	bl	8011408 <_fstat_r>
 8011362:	2800      	cmp	r0, #0
 8011364:	dbed      	blt.n	8011342 <__swhatbuf_r+0x12>
 8011366:	23f0      	movs	r3, #240	@ 0xf0
 8011368:	9901      	ldr	r1, [sp, #4]
 801136a:	021b      	lsls	r3, r3, #8
 801136c:	4019      	ands	r1, r3
 801136e:	4b04      	ldr	r3, [pc, #16]	@ (8011380 <__swhatbuf_r+0x50>)
 8011370:	18c9      	adds	r1, r1, r3
 8011372:	424b      	negs	r3, r1
 8011374:	4159      	adcs	r1, r3
 8011376:	e7ea      	b.n	801134e <__swhatbuf_r+0x1e>
 8011378:	2100      	movs	r1, #0
 801137a:	2340      	movs	r3, #64	@ 0x40
 801137c:	e7e9      	b.n	8011352 <__swhatbuf_r+0x22>
 801137e:	46c0      	nop			@ (mov r8, r8)
 8011380:	ffffe000 	.word	0xffffe000

08011384 <__smakebuf_r>:
 8011384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011386:	2602      	movs	r6, #2
 8011388:	898b      	ldrh	r3, [r1, #12]
 801138a:	0005      	movs	r5, r0
 801138c:	000c      	movs	r4, r1
 801138e:	b085      	sub	sp, #20
 8011390:	4233      	tst	r3, r6
 8011392:	d007      	beq.n	80113a4 <__smakebuf_r+0x20>
 8011394:	0023      	movs	r3, r4
 8011396:	3347      	adds	r3, #71	@ 0x47
 8011398:	6023      	str	r3, [r4, #0]
 801139a:	6123      	str	r3, [r4, #16]
 801139c:	2301      	movs	r3, #1
 801139e:	6163      	str	r3, [r4, #20]
 80113a0:	b005      	add	sp, #20
 80113a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a4:	ab03      	add	r3, sp, #12
 80113a6:	aa02      	add	r2, sp, #8
 80113a8:	f7ff ffc2 	bl	8011330 <__swhatbuf_r>
 80113ac:	9f02      	ldr	r7, [sp, #8]
 80113ae:	9001      	str	r0, [sp, #4]
 80113b0:	0039      	movs	r1, r7
 80113b2:	0028      	movs	r0, r5
 80113b4:	f7fe fc08 	bl	800fbc8 <_malloc_r>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d108      	bne.n	80113ce <__smakebuf_r+0x4a>
 80113bc:	220c      	movs	r2, #12
 80113be:	5ea3      	ldrsh	r3, [r4, r2]
 80113c0:	059a      	lsls	r2, r3, #22
 80113c2:	d4ed      	bmi.n	80113a0 <__smakebuf_r+0x1c>
 80113c4:	2203      	movs	r2, #3
 80113c6:	4393      	bics	r3, r2
 80113c8:	431e      	orrs	r6, r3
 80113ca:	81a6      	strh	r6, [r4, #12]
 80113cc:	e7e2      	b.n	8011394 <__smakebuf_r+0x10>
 80113ce:	2380      	movs	r3, #128	@ 0x80
 80113d0:	89a2      	ldrh	r2, [r4, #12]
 80113d2:	6020      	str	r0, [r4, #0]
 80113d4:	4313      	orrs	r3, r2
 80113d6:	81a3      	strh	r3, [r4, #12]
 80113d8:	9b03      	ldr	r3, [sp, #12]
 80113da:	6120      	str	r0, [r4, #16]
 80113dc:	6167      	str	r7, [r4, #20]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00c      	beq.n	80113fc <__smakebuf_r+0x78>
 80113e2:	0028      	movs	r0, r5
 80113e4:	230e      	movs	r3, #14
 80113e6:	5ee1      	ldrsh	r1, [r4, r3]
 80113e8:	f000 f820 	bl	801142c <_isatty_r>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d005      	beq.n	80113fc <__smakebuf_r+0x78>
 80113f0:	2303      	movs	r3, #3
 80113f2:	89a2      	ldrh	r2, [r4, #12]
 80113f4:	439a      	bics	r2, r3
 80113f6:	3b02      	subs	r3, #2
 80113f8:	4313      	orrs	r3, r2
 80113fa:	81a3      	strh	r3, [r4, #12]
 80113fc:	89a3      	ldrh	r3, [r4, #12]
 80113fe:	9a01      	ldr	r2, [sp, #4]
 8011400:	4313      	orrs	r3, r2
 8011402:	81a3      	strh	r3, [r4, #12]
 8011404:	e7cc      	b.n	80113a0 <__smakebuf_r+0x1c>
	...

08011408 <_fstat_r>:
 8011408:	2300      	movs	r3, #0
 801140a:	b570      	push	{r4, r5, r6, lr}
 801140c:	4d06      	ldr	r5, [pc, #24]	@ (8011428 <_fstat_r+0x20>)
 801140e:	0004      	movs	r4, r0
 8011410:	0008      	movs	r0, r1
 8011412:	0011      	movs	r1, r2
 8011414:	602b      	str	r3, [r5, #0]
 8011416:	f7f6 fcd1 	bl	8007dbc <_fstat>
 801141a:	1c43      	adds	r3, r0, #1
 801141c:	d103      	bne.n	8011426 <_fstat_r+0x1e>
 801141e:	682b      	ldr	r3, [r5, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d000      	beq.n	8011426 <_fstat_r+0x1e>
 8011424:	6023      	str	r3, [r4, #0]
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	20003950 	.word	0x20003950

0801142c <_isatty_r>:
 801142c:	2300      	movs	r3, #0
 801142e:	b570      	push	{r4, r5, r6, lr}
 8011430:	4d06      	ldr	r5, [pc, #24]	@ (801144c <_isatty_r+0x20>)
 8011432:	0004      	movs	r4, r0
 8011434:	0008      	movs	r0, r1
 8011436:	602b      	str	r3, [r5, #0]
 8011438:	f7f6 fcce 	bl	8007dd8 <_isatty>
 801143c:	1c43      	adds	r3, r0, #1
 801143e:	d103      	bne.n	8011448 <_isatty_r+0x1c>
 8011440:	682b      	ldr	r3, [r5, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d000      	beq.n	8011448 <_isatty_r+0x1c>
 8011446:	6023      	str	r3, [r4, #0]
 8011448:	bd70      	pop	{r4, r5, r6, pc}
 801144a:	46c0      	nop			@ (mov r8, r8)
 801144c:	20003950 	.word	0x20003950

08011450 <abort>:
 8011450:	2006      	movs	r0, #6
 8011452:	b510      	push	{r4, lr}
 8011454:	f000 f834 	bl	80114c0 <raise>
 8011458:	2001      	movs	r0, #1
 801145a:	f7f6 fc5f 	bl	8007d1c <_exit>

0801145e <_malloc_usable_size_r>:
 801145e:	1f0b      	subs	r3, r1, #4
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	1f18      	subs	r0, r3, #4
 8011464:	2b00      	cmp	r3, #0
 8011466:	da01      	bge.n	801146c <_malloc_usable_size_r+0xe>
 8011468:	580b      	ldr	r3, [r1, r0]
 801146a:	18c0      	adds	r0, r0, r3
 801146c:	4770      	bx	lr

0801146e <_raise_r>:
 801146e:	b570      	push	{r4, r5, r6, lr}
 8011470:	0004      	movs	r4, r0
 8011472:	000d      	movs	r5, r1
 8011474:	291f      	cmp	r1, #31
 8011476:	d904      	bls.n	8011482 <_raise_r+0x14>
 8011478:	2316      	movs	r3, #22
 801147a:	6003      	str	r3, [r0, #0]
 801147c:	2001      	movs	r0, #1
 801147e:	4240      	negs	r0, r0
 8011480:	bd70      	pop	{r4, r5, r6, pc}
 8011482:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011484:	2b00      	cmp	r3, #0
 8011486:	d004      	beq.n	8011492 <_raise_r+0x24>
 8011488:	008a      	lsls	r2, r1, #2
 801148a:	189b      	adds	r3, r3, r2
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	2a00      	cmp	r2, #0
 8011490:	d108      	bne.n	80114a4 <_raise_r+0x36>
 8011492:	0020      	movs	r0, r4
 8011494:	f000 f830 	bl	80114f8 <_getpid_r>
 8011498:	002a      	movs	r2, r5
 801149a:	0001      	movs	r1, r0
 801149c:	0020      	movs	r0, r4
 801149e:	f000 f819 	bl	80114d4 <_kill_r>
 80114a2:	e7ed      	b.n	8011480 <_raise_r+0x12>
 80114a4:	2a01      	cmp	r2, #1
 80114a6:	d009      	beq.n	80114bc <_raise_r+0x4e>
 80114a8:	1c51      	adds	r1, r2, #1
 80114aa:	d103      	bne.n	80114b4 <_raise_r+0x46>
 80114ac:	2316      	movs	r3, #22
 80114ae:	6003      	str	r3, [r0, #0]
 80114b0:	2001      	movs	r0, #1
 80114b2:	e7e5      	b.n	8011480 <_raise_r+0x12>
 80114b4:	2100      	movs	r1, #0
 80114b6:	0028      	movs	r0, r5
 80114b8:	6019      	str	r1, [r3, #0]
 80114ba:	4790      	blx	r2
 80114bc:	2000      	movs	r0, #0
 80114be:	e7df      	b.n	8011480 <_raise_r+0x12>

080114c0 <raise>:
 80114c0:	b510      	push	{r4, lr}
 80114c2:	4b03      	ldr	r3, [pc, #12]	@ (80114d0 <raise+0x10>)
 80114c4:	0001      	movs	r1, r0
 80114c6:	6818      	ldr	r0, [r3, #0]
 80114c8:	f7ff ffd1 	bl	801146e <_raise_r>
 80114cc:	bd10      	pop	{r4, pc}
 80114ce:	46c0      	nop			@ (mov r8, r8)
 80114d0:	20002410 	.word	0x20002410

080114d4 <_kill_r>:
 80114d4:	2300      	movs	r3, #0
 80114d6:	b570      	push	{r4, r5, r6, lr}
 80114d8:	4d06      	ldr	r5, [pc, #24]	@ (80114f4 <_kill_r+0x20>)
 80114da:	0004      	movs	r4, r0
 80114dc:	0008      	movs	r0, r1
 80114de:	0011      	movs	r1, r2
 80114e0:	602b      	str	r3, [r5, #0]
 80114e2:	f7f6 fc0b 	bl	8007cfc <_kill>
 80114e6:	1c43      	adds	r3, r0, #1
 80114e8:	d103      	bne.n	80114f2 <_kill_r+0x1e>
 80114ea:	682b      	ldr	r3, [r5, #0]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d000      	beq.n	80114f2 <_kill_r+0x1e>
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	bd70      	pop	{r4, r5, r6, pc}
 80114f4:	20003950 	.word	0x20003950

080114f8 <_getpid_r>:
 80114f8:	b510      	push	{r4, lr}
 80114fa:	f7f6 fbf9 	bl	8007cf0 <_getpid>
 80114fe:	bd10      	pop	{r4, pc}

08011500 <fmod>:
 8011500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011502:	0014      	movs	r4, r2
 8011504:	001d      	movs	r5, r3
 8011506:	9000      	str	r0, [sp, #0]
 8011508:	9101      	str	r1, [sp, #4]
 801150a:	f000 f931 	bl	8011770 <__ieee754_fmod>
 801150e:	0022      	movs	r2, r4
 8011510:	0006      	movs	r6, r0
 8011512:	000f      	movs	r7, r1
 8011514:	9800      	ldr	r0, [sp, #0]
 8011516:	9901      	ldr	r1, [sp, #4]
 8011518:	002b      	movs	r3, r5
 801151a:	f7f1 fed5 	bl	80032c8 <__aeabi_dcmpun>
 801151e:	2800      	cmp	r0, #0
 8011520:	d113      	bne.n	801154a <fmod+0x4a>
 8011522:	2200      	movs	r2, #0
 8011524:	2300      	movs	r3, #0
 8011526:	0020      	movs	r0, r4
 8011528:	0029      	movs	r1, r5
 801152a:	f7ee ff99 	bl	8000460 <__aeabi_dcmpeq>
 801152e:	2800      	cmp	r0, #0
 8011530:	d00b      	beq.n	801154a <fmod+0x4a>
 8011532:	f7fd ff47 	bl	800f3c4 <__errno>
 8011536:	2321      	movs	r3, #33	@ 0x21
 8011538:	2200      	movs	r2, #0
 801153a:	6003      	str	r3, [r0, #0]
 801153c:	2300      	movs	r3, #0
 801153e:	0010      	movs	r0, r2
 8011540:	0019      	movs	r1, r3
 8011542:	f7f0 fc19 	bl	8001d78 <__aeabi_ddiv>
 8011546:	0006      	movs	r6, r0
 8011548:	000f      	movs	r7, r1
 801154a:	0030      	movs	r0, r6
 801154c:	0039      	movs	r1, r7
 801154e:	b003      	add	sp, #12
 8011550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011552 <sqrt>:
 8011552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011554:	0004      	movs	r4, r0
 8011556:	000d      	movs	r5, r1
 8011558:	f000 f822 	bl	80115a0 <__ieee754_sqrt>
 801155c:	0022      	movs	r2, r4
 801155e:	0006      	movs	r6, r0
 8011560:	000f      	movs	r7, r1
 8011562:	002b      	movs	r3, r5
 8011564:	0020      	movs	r0, r4
 8011566:	0029      	movs	r1, r5
 8011568:	f7f1 feae 	bl	80032c8 <__aeabi_dcmpun>
 801156c:	2800      	cmp	r0, #0
 801156e:	d113      	bne.n	8011598 <sqrt+0x46>
 8011570:	2200      	movs	r2, #0
 8011572:	2300      	movs	r3, #0
 8011574:	0020      	movs	r0, r4
 8011576:	0029      	movs	r1, r5
 8011578:	f7ee ff78 	bl	800046c <__aeabi_dcmplt>
 801157c:	2800      	cmp	r0, #0
 801157e:	d00b      	beq.n	8011598 <sqrt+0x46>
 8011580:	f7fd ff20 	bl	800f3c4 <__errno>
 8011584:	2321      	movs	r3, #33	@ 0x21
 8011586:	2200      	movs	r2, #0
 8011588:	6003      	str	r3, [r0, #0]
 801158a:	2300      	movs	r3, #0
 801158c:	0010      	movs	r0, r2
 801158e:	0019      	movs	r1, r3
 8011590:	f7f0 fbf2 	bl	8001d78 <__aeabi_ddiv>
 8011594:	0006      	movs	r6, r0
 8011596:	000f      	movs	r7, r1
 8011598:	0030      	movs	r0, r6
 801159a:	0039      	movs	r1, r7
 801159c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115a0 <__ieee754_sqrt>:
 80115a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a2:	000a      	movs	r2, r1
 80115a4:	000d      	movs	r5, r1
 80115a6:	496d      	ldr	r1, [pc, #436]	@ (801175c <__ieee754_sqrt+0x1bc>)
 80115a8:	0004      	movs	r4, r0
 80115aa:	0003      	movs	r3, r0
 80115ac:	0008      	movs	r0, r1
 80115ae:	b087      	sub	sp, #28
 80115b0:	4028      	ands	r0, r5
 80115b2:	4288      	cmp	r0, r1
 80115b4:	d111      	bne.n	80115da <__ieee754_sqrt+0x3a>
 80115b6:	0022      	movs	r2, r4
 80115b8:	002b      	movs	r3, r5
 80115ba:	0020      	movs	r0, r4
 80115bc:	0029      	movs	r1, r5
 80115be:	f7f1 f81f 	bl	8002600 <__aeabi_dmul>
 80115c2:	0002      	movs	r2, r0
 80115c4:	000b      	movs	r3, r1
 80115c6:	0020      	movs	r0, r4
 80115c8:	0029      	movs	r1, r5
 80115ca:	f7f0 f871 	bl	80016b0 <__aeabi_dadd>
 80115ce:	0004      	movs	r4, r0
 80115d0:	000d      	movs	r5, r1
 80115d2:	0020      	movs	r0, r4
 80115d4:	0029      	movs	r1, r5
 80115d6:	b007      	add	sp, #28
 80115d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115da:	2d00      	cmp	r5, #0
 80115dc:	dc11      	bgt.n	8011602 <__ieee754_sqrt+0x62>
 80115de:	0069      	lsls	r1, r5, #1
 80115e0:	0849      	lsrs	r1, r1, #1
 80115e2:	4321      	orrs	r1, r4
 80115e4:	d0f5      	beq.n	80115d2 <__ieee754_sqrt+0x32>
 80115e6:	2000      	movs	r0, #0
 80115e8:	4285      	cmp	r5, r0
 80115ea:	d010      	beq.n	801160e <__ieee754_sqrt+0x6e>
 80115ec:	0022      	movs	r2, r4
 80115ee:	002b      	movs	r3, r5
 80115f0:	0020      	movs	r0, r4
 80115f2:	0029      	movs	r1, r5
 80115f4:	f7f1 facc 	bl	8002b90 <__aeabi_dsub>
 80115f8:	0002      	movs	r2, r0
 80115fa:	000b      	movs	r3, r1
 80115fc:	f7f0 fbbc 	bl	8001d78 <__aeabi_ddiv>
 8011600:	e7e5      	b.n	80115ce <__ieee754_sqrt+0x2e>
 8011602:	1528      	asrs	r0, r5, #20
 8011604:	d115      	bne.n	8011632 <__ieee754_sqrt+0x92>
 8011606:	2480      	movs	r4, #128	@ 0x80
 8011608:	2100      	movs	r1, #0
 801160a:	0364      	lsls	r4, r4, #13
 801160c:	e007      	b.n	801161e <__ieee754_sqrt+0x7e>
 801160e:	0ada      	lsrs	r2, r3, #11
 8011610:	3815      	subs	r0, #21
 8011612:	055b      	lsls	r3, r3, #21
 8011614:	2a00      	cmp	r2, #0
 8011616:	d0fa      	beq.n	801160e <__ieee754_sqrt+0x6e>
 8011618:	e7f5      	b.n	8011606 <__ieee754_sqrt+0x66>
 801161a:	0052      	lsls	r2, r2, #1
 801161c:	3101      	adds	r1, #1
 801161e:	4222      	tst	r2, r4
 8011620:	d0fb      	beq.n	801161a <__ieee754_sqrt+0x7a>
 8011622:	1e4c      	subs	r4, r1, #1
 8011624:	1b00      	subs	r0, r0, r4
 8011626:	2420      	movs	r4, #32
 8011628:	001d      	movs	r5, r3
 801162a:	1a64      	subs	r4, r4, r1
 801162c:	40e5      	lsrs	r5, r4
 801162e:	408b      	lsls	r3, r1
 8011630:	432a      	orrs	r2, r5
 8011632:	494b      	ldr	r1, [pc, #300]	@ (8011760 <__ieee754_sqrt+0x1c0>)
 8011634:	0312      	lsls	r2, r2, #12
 8011636:	1844      	adds	r4, r0, r1
 8011638:	2180      	movs	r1, #128	@ 0x80
 801163a:	0b12      	lsrs	r2, r2, #12
 801163c:	0349      	lsls	r1, r1, #13
 801163e:	4311      	orrs	r1, r2
 8011640:	07c0      	lsls	r0, r0, #31
 8011642:	d403      	bmi.n	801164c <__ieee754_sqrt+0xac>
 8011644:	0fda      	lsrs	r2, r3, #31
 8011646:	0049      	lsls	r1, r1, #1
 8011648:	1851      	adds	r1, r2, r1
 801164a:	005b      	lsls	r3, r3, #1
 801164c:	2500      	movs	r5, #0
 801164e:	1062      	asrs	r2, r4, #1
 8011650:	0049      	lsls	r1, r1, #1
 8011652:	2480      	movs	r4, #128	@ 0x80
 8011654:	9205      	str	r2, [sp, #20]
 8011656:	0fda      	lsrs	r2, r3, #31
 8011658:	1852      	adds	r2, r2, r1
 801165a:	2016      	movs	r0, #22
 801165c:	0029      	movs	r1, r5
 801165e:	005b      	lsls	r3, r3, #1
 8011660:	03a4      	lsls	r4, r4, #14
 8011662:	190e      	adds	r6, r1, r4
 8011664:	4296      	cmp	r6, r2
 8011666:	dc02      	bgt.n	801166e <__ieee754_sqrt+0xce>
 8011668:	1931      	adds	r1, r6, r4
 801166a:	1b92      	subs	r2, r2, r6
 801166c:	192d      	adds	r5, r5, r4
 801166e:	0fde      	lsrs	r6, r3, #31
 8011670:	0052      	lsls	r2, r2, #1
 8011672:	3801      	subs	r0, #1
 8011674:	1992      	adds	r2, r2, r6
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	0864      	lsrs	r4, r4, #1
 801167a:	2800      	cmp	r0, #0
 801167c:	d1f1      	bne.n	8011662 <__ieee754_sqrt+0xc2>
 801167e:	2620      	movs	r6, #32
 8011680:	2780      	movs	r7, #128	@ 0x80
 8011682:	0004      	movs	r4, r0
 8011684:	9604      	str	r6, [sp, #16]
 8011686:	063f      	lsls	r7, r7, #24
 8011688:	19c6      	adds	r6, r0, r7
 801168a:	46b4      	mov	ip, r6
 801168c:	4291      	cmp	r1, r2
 801168e:	db02      	blt.n	8011696 <__ieee754_sqrt+0xf6>
 8011690:	d114      	bne.n	80116bc <__ieee754_sqrt+0x11c>
 8011692:	429e      	cmp	r6, r3
 8011694:	d812      	bhi.n	80116bc <__ieee754_sqrt+0x11c>
 8011696:	4660      	mov	r0, ip
 8011698:	4666      	mov	r6, ip
 801169a:	19c0      	adds	r0, r0, r7
 801169c:	9100      	str	r1, [sp, #0]
 801169e:	2e00      	cmp	r6, #0
 80116a0:	da03      	bge.n	80116aa <__ieee754_sqrt+0x10a>
 80116a2:	43c6      	mvns	r6, r0
 80116a4:	0ff6      	lsrs	r6, r6, #31
 80116a6:	198e      	adds	r6, r1, r6
 80116a8:	9600      	str	r6, [sp, #0]
 80116aa:	1a52      	subs	r2, r2, r1
 80116ac:	4563      	cmp	r3, ip
 80116ae:	4189      	sbcs	r1, r1
 80116b0:	4249      	negs	r1, r1
 80116b2:	1a52      	subs	r2, r2, r1
 80116b4:	4661      	mov	r1, ip
 80116b6:	1a5b      	subs	r3, r3, r1
 80116b8:	9900      	ldr	r1, [sp, #0]
 80116ba:	19e4      	adds	r4, r4, r7
 80116bc:	0fde      	lsrs	r6, r3, #31
 80116be:	0052      	lsls	r2, r2, #1
 80116c0:	1992      	adds	r2, r2, r6
 80116c2:	9e04      	ldr	r6, [sp, #16]
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	3e01      	subs	r6, #1
 80116c8:	087f      	lsrs	r7, r7, #1
 80116ca:	9604      	str	r6, [sp, #16]
 80116cc:	2e00      	cmp	r6, #0
 80116ce:	d1db      	bne.n	8011688 <__ieee754_sqrt+0xe8>
 80116d0:	431a      	orrs	r2, r3
 80116d2:	d01f      	beq.n	8011714 <__ieee754_sqrt+0x174>
 80116d4:	4e23      	ldr	r6, [pc, #140]	@ (8011764 <__ieee754_sqrt+0x1c4>)
 80116d6:	4f24      	ldr	r7, [pc, #144]	@ (8011768 <__ieee754_sqrt+0x1c8>)
 80116d8:	6830      	ldr	r0, [r6, #0]
 80116da:	6871      	ldr	r1, [r6, #4]
 80116dc:	683a      	ldr	r2, [r7, #0]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	9200      	str	r2, [sp, #0]
 80116e2:	9301      	str	r3, [sp, #4]
 80116e4:	6832      	ldr	r2, [r6, #0]
 80116e6:	6873      	ldr	r3, [r6, #4]
 80116e8:	9202      	str	r2, [sp, #8]
 80116ea:	9303      	str	r3, [sp, #12]
 80116ec:	9a00      	ldr	r2, [sp, #0]
 80116ee:	9b01      	ldr	r3, [sp, #4]
 80116f0:	f7f1 fa4e 	bl	8002b90 <__aeabi_dsub>
 80116f4:	0002      	movs	r2, r0
 80116f6:	000b      	movs	r3, r1
 80116f8:	9802      	ldr	r0, [sp, #8]
 80116fa:	9903      	ldr	r1, [sp, #12]
 80116fc:	f7ee fec0 	bl	8000480 <__aeabi_dcmple>
 8011700:	2800      	cmp	r0, #0
 8011702:	d007      	beq.n	8011714 <__ieee754_sqrt+0x174>
 8011704:	6830      	ldr	r0, [r6, #0]
 8011706:	6871      	ldr	r1, [r6, #4]
 8011708:	683a      	ldr	r2, [r7, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	1c67      	adds	r7, r4, #1
 801170e:	d10f      	bne.n	8011730 <__ieee754_sqrt+0x190>
 8011710:	9c04      	ldr	r4, [sp, #16]
 8011712:	3501      	adds	r5, #1
 8011714:	4b15      	ldr	r3, [pc, #84]	@ (801176c <__ieee754_sqrt+0x1cc>)
 8011716:	106a      	asrs	r2, r5, #1
 8011718:	18d2      	adds	r2, r2, r3
 801171a:	0863      	lsrs	r3, r4, #1
 801171c:	07ed      	lsls	r5, r5, #31
 801171e:	d502      	bpl.n	8011726 <__ieee754_sqrt+0x186>
 8011720:	2180      	movs	r1, #128	@ 0x80
 8011722:	0609      	lsls	r1, r1, #24
 8011724:	430b      	orrs	r3, r1
 8011726:	9905      	ldr	r1, [sp, #20]
 8011728:	001c      	movs	r4, r3
 801172a:	0509      	lsls	r1, r1, #20
 801172c:	188d      	adds	r5, r1, r2
 801172e:	e750      	b.n	80115d2 <__ieee754_sqrt+0x32>
 8011730:	f7ef ffbe 	bl	80016b0 <__aeabi_dadd>
 8011734:	6877      	ldr	r7, [r6, #4]
 8011736:	6836      	ldr	r6, [r6, #0]
 8011738:	0002      	movs	r2, r0
 801173a:	000b      	movs	r3, r1
 801173c:	0030      	movs	r0, r6
 801173e:	0039      	movs	r1, r7
 8011740:	f7ee fe94 	bl	800046c <__aeabi_dcmplt>
 8011744:	2800      	cmp	r0, #0
 8011746:	d004      	beq.n	8011752 <__ieee754_sqrt+0x1b2>
 8011748:	3402      	adds	r4, #2
 801174a:	4263      	negs	r3, r4
 801174c:	4163      	adcs	r3, r4
 801174e:	18ed      	adds	r5, r5, r3
 8011750:	e7e0      	b.n	8011714 <__ieee754_sqrt+0x174>
 8011752:	2301      	movs	r3, #1
 8011754:	3401      	adds	r4, #1
 8011756:	439c      	bics	r4, r3
 8011758:	e7dc      	b.n	8011714 <__ieee754_sqrt+0x174>
 801175a:	46c0      	nop			@ (mov r8, r8)
 801175c:	7ff00000 	.word	0x7ff00000
 8011760:	fffffc01 	.word	0xfffffc01
 8011764:	20002468 	.word	0x20002468
 8011768:	20002460 	.word	0x20002460
 801176c:	3fe00000 	.word	0x3fe00000

08011770 <__ieee754_fmod>:
 8011770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011772:	b085      	sub	sp, #20
 8011774:	9200      	str	r2, [sp, #0]
 8011776:	9301      	str	r3, [sp, #4]
 8011778:	9b01      	ldr	r3, [sp, #4]
 801177a:	9e00      	ldr	r6, [sp, #0]
 801177c:	005b      	lsls	r3, r3, #1
 801177e:	085b      	lsrs	r3, r3, #1
 8011780:	469c      	mov	ip, r3
 8011782:	9603      	str	r6, [sp, #12]
 8011784:	4333      	orrs	r3, r6
 8011786:	d00d      	beq.n	80117a4 <__ieee754_fmod+0x34>
 8011788:	4b7a      	ldr	r3, [pc, #488]	@ (8011974 <__ieee754_fmod+0x204>)
 801178a:	004a      	lsls	r2, r1, #1
 801178c:	000d      	movs	r5, r1
 801178e:	0852      	lsrs	r2, r2, #1
 8011790:	429a      	cmp	r2, r3
 8011792:	d807      	bhi.n	80117a4 <__ieee754_fmod+0x34>
 8011794:	4664      	mov	r4, ip
 8011796:	4273      	negs	r3, r6
 8011798:	4333      	orrs	r3, r6
 801179a:	0fdb      	lsrs	r3, r3, #31
 801179c:	4323      	orrs	r3, r4
 801179e:	4c76      	ldr	r4, [pc, #472]	@ (8011978 <__ieee754_fmod+0x208>)
 80117a0:	42a3      	cmp	r3, r4
 80117a2:	d909      	bls.n	80117b8 <__ieee754_fmod+0x48>
 80117a4:	9a00      	ldr	r2, [sp, #0]
 80117a6:	9b01      	ldr	r3, [sp, #4]
 80117a8:	f7f0 ff2a 	bl	8002600 <__aeabi_dmul>
 80117ac:	0002      	movs	r2, r0
 80117ae:	000b      	movs	r3, r1
 80117b0:	f7f0 fae2 	bl	8001d78 <__aeabi_ddiv>
 80117b4:	b005      	add	sp, #20
 80117b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b8:	0fcc      	lsrs	r4, r1, #31
 80117ba:	07e4      	lsls	r4, r4, #31
 80117bc:	0007      	movs	r7, r0
 80117be:	0003      	movs	r3, r0
 80117c0:	9402      	str	r4, [sp, #8]
 80117c2:	4562      	cmp	r2, ip
 80117c4:	dc0a      	bgt.n	80117dc <__ieee754_fmod+0x6c>
 80117c6:	dbf5      	blt.n	80117b4 <__ieee754_fmod+0x44>
 80117c8:	4286      	cmp	r6, r0
 80117ca:	d8f3      	bhi.n	80117b4 <__ieee754_fmod+0x44>
 80117cc:	d106      	bne.n	80117dc <__ieee754_fmod+0x6c>
 80117ce:	0022      	movs	r2, r4
 80117d0:	4b6a      	ldr	r3, [pc, #424]	@ (801197c <__ieee754_fmod+0x20c>)
 80117d2:	0f12      	lsrs	r2, r2, #28
 80117d4:	189b      	adds	r3, r3, r2
 80117d6:	6818      	ldr	r0, [r3, #0]
 80117d8:	6859      	ldr	r1, [r3, #4]
 80117da:	e7eb      	b.n	80117b4 <__ieee754_fmod+0x44>
 80117dc:	4866      	ldr	r0, [pc, #408]	@ (8011978 <__ieee754_fmod+0x208>)
 80117de:	4205      	tst	r5, r0
 80117e0:	d14c      	bne.n	801187c <__ieee754_fmod+0x10c>
 80117e2:	2a00      	cmp	r2, #0
 80117e4:	d143      	bne.n	801186e <__ieee754_fmod+0xfe>
 80117e6:	0038      	movs	r0, r7
 80117e8:	4965      	ldr	r1, [pc, #404]	@ (8011980 <__ieee754_fmod+0x210>)
 80117ea:	2800      	cmp	r0, #0
 80117ec:	dc3c      	bgt.n	8011868 <__ieee754_fmod+0xf8>
 80117ee:	4862      	ldr	r0, [pc, #392]	@ (8011978 <__ieee754_fmod+0x208>)
 80117f0:	9c01      	ldr	r4, [sp, #4]
 80117f2:	4220      	tst	r0, r4
 80117f4:	d150      	bne.n	8011898 <__ieee754_fmod+0x128>
 80117f6:	4660      	mov	r0, ip
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d146      	bne.n	801188a <__ieee754_fmod+0x11a>
 80117fc:	4860      	ldr	r0, [pc, #384]	@ (8011980 <__ieee754_fmod+0x210>)
 80117fe:	2e00      	cmp	r6, #0
 8011800:	dc40      	bgt.n	8011884 <__ieee754_fmod+0x114>
 8011802:	4c60      	ldr	r4, [pc, #384]	@ (8011984 <__ieee754_fmod+0x214>)
 8011804:	42a1      	cmp	r1, r4
 8011806:	db4c      	blt.n	80118a2 <__ieee754_fmod+0x132>
 8011808:	2280      	movs	r2, #128	@ 0x80
 801180a:	032f      	lsls	r7, r5, #12
 801180c:	0b3f      	lsrs	r7, r7, #12
 801180e:	0352      	lsls	r2, r2, #13
 8011810:	433a      	orrs	r2, r7
 8011812:	4c5c      	ldr	r4, [pc, #368]	@ (8011984 <__ieee754_fmod+0x214>)
 8011814:	42a0      	cmp	r0, r4
 8011816:	db59      	blt.n	80118cc <__ieee754_fmod+0x15c>
 8011818:	2580      	movs	r5, #128	@ 0x80
 801181a:	9c01      	ldr	r4, [sp, #4]
 801181c:	036d      	lsls	r5, r5, #13
 801181e:	0324      	lsls	r4, r4, #12
 8011820:	0b24      	lsrs	r4, r4, #12
 8011822:	4325      	orrs	r5, r4
 8011824:	1a09      	subs	r1, r1, r0
 8011826:	9e03      	ldr	r6, [sp, #12]
 8011828:	1b54      	subs	r4, r2, r5
 801182a:	1b9f      	subs	r7, r3, r6
 801182c:	2900      	cmp	r1, #0
 801182e:	d165      	bne.n	80118fc <__ieee754_fmod+0x18c>
 8011830:	42b3      	cmp	r3, r6
 8011832:	4189      	sbcs	r1, r1
 8011834:	4249      	negs	r1, r1
 8011836:	1a64      	subs	r4, r4, r1
 8011838:	d401      	bmi.n	801183e <__ieee754_fmod+0xce>
 801183a:	003b      	movs	r3, r7
 801183c:	0022      	movs	r2, r4
 801183e:	0011      	movs	r1, r2
 8011840:	4319      	orrs	r1, r3
 8011842:	d06a      	beq.n	801191a <__ieee754_fmod+0x1aa>
 8011844:	2180      	movs	r1, #128	@ 0x80
 8011846:	0349      	lsls	r1, r1, #13
 8011848:	428a      	cmp	r2, r1
 801184a:	db6e      	blt.n	801192a <__ieee754_fmod+0x1ba>
 801184c:	494d      	ldr	r1, [pc, #308]	@ (8011984 <__ieee754_fmod+0x214>)
 801184e:	4288      	cmp	r0, r1
 8011850:	db71      	blt.n	8011936 <__ieee754_fmod+0x1c6>
 8011852:	494d      	ldr	r1, [pc, #308]	@ (8011988 <__ieee754_fmod+0x218>)
 8011854:	1852      	adds	r2, r2, r1
 8011856:	9902      	ldr	r1, [sp, #8]
 8011858:	430a      	orrs	r2, r1
 801185a:	494c      	ldr	r1, [pc, #304]	@ (801198c <__ieee754_fmod+0x21c>)
 801185c:	1840      	adds	r0, r0, r1
 801185e:	0504      	lsls	r4, r0, #20
 8011860:	4322      	orrs	r2, r4
 8011862:	0011      	movs	r1, r2
 8011864:	0018      	movs	r0, r3
 8011866:	e7a5      	b.n	80117b4 <__ieee754_fmod+0x44>
 8011868:	3901      	subs	r1, #1
 801186a:	0040      	lsls	r0, r0, #1
 801186c:	e7bd      	b.n	80117ea <__ieee754_fmod+0x7a>
 801186e:	4945      	ldr	r1, [pc, #276]	@ (8011984 <__ieee754_fmod+0x214>)
 8011870:	02d0      	lsls	r0, r2, #11
 8011872:	2800      	cmp	r0, #0
 8011874:	ddbb      	ble.n	80117ee <__ieee754_fmod+0x7e>
 8011876:	3901      	subs	r1, #1
 8011878:	0040      	lsls	r0, r0, #1
 801187a:	e7fa      	b.n	8011872 <__ieee754_fmod+0x102>
 801187c:	4844      	ldr	r0, [pc, #272]	@ (8011990 <__ieee754_fmod+0x220>)
 801187e:	1511      	asrs	r1, r2, #20
 8011880:	1809      	adds	r1, r1, r0
 8011882:	e7b4      	b.n	80117ee <__ieee754_fmod+0x7e>
 8011884:	3801      	subs	r0, #1
 8011886:	0076      	lsls	r6, r6, #1
 8011888:	e7b9      	b.n	80117fe <__ieee754_fmod+0x8e>
 801188a:	02c6      	lsls	r6, r0, #11
 801188c:	483d      	ldr	r0, [pc, #244]	@ (8011984 <__ieee754_fmod+0x214>)
 801188e:	2e00      	cmp	r6, #0
 8011890:	ddb7      	ble.n	8011802 <__ieee754_fmod+0x92>
 8011892:	3801      	subs	r0, #1
 8011894:	0076      	lsls	r6, r6, #1
 8011896:	e7fa      	b.n	801188e <__ieee754_fmod+0x11e>
 8011898:	4660      	mov	r0, ip
 801189a:	4c3d      	ldr	r4, [pc, #244]	@ (8011990 <__ieee754_fmod+0x220>)
 801189c:	1500      	asrs	r0, r0, #20
 801189e:	1900      	adds	r0, r0, r4
 80118a0:	e7af      	b.n	8011802 <__ieee754_fmod+0x92>
 80118a2:	4b38      	ldr	r3, [pc, #224]	@ (8011984 <__ieee754_fmod+0x214>)
 80118a4:	1a5b      	subs	r3, r3, r1
 80118a6:	2b1f      	cmp	r3, #31
 80118a8:	dc0a      	bgt.n	80118c0 <__ieee754_fmod+0x150>
 80118aa:	409a      	lsls	r2, r3
 80118ac:	003c      	movs	r4, r7
 80118ae:	0015      	movs	r5, r2
 80118b0:	4a38      	ldr	r2, [pc, #224]	@ (8011994 <__ieee754_fmod+0x224>)
 80118b2:	409f      	lsls	r7, r3
 80118b4:	188a      	adds	r2, r1, r2
 80118b6:	40d4      	lsrs	r4, r2
 80118b8:	0022      	movs	r2, r4
 80118ba:	003b      	movs	r3, r7
 80118bc:	432a      	orrs	r2, r5
 80118be:	e7a8      	b.n	8011812 <__ieee754_fmod+0xa2>
 80118c0:	003a      	movs	r2, r7
 80118c2:	4b35      	ldr	r3, [pc, #212]	@ (8011998 <__ieee754_fmod+0x228>)
 80118c4:	1a5b      	subs	r3, r3, r1
 80118c6:	409a      	lsls	r2, r3
 80118c8:	2300      	movs	r3, #0
 80118ca:	e7a2      	b.n	8011812 <__ieee754_fmod+0xa2>
 80118cc:	4c2d      	ldr	r4, [pc, #180]	@ (8011984 <__ieee754_fmod+0x214>)
 80118ce:	1a27      	subs	r7, r4, r0
 80118d0:	2f1f      	cmp	r7, #31
 80118d2:	dc0c      	bgt.n	80118ee <__ieee754_fmod+0x17e>
 80118d4:	4c2f      	ldr	r4, [pc, #188]	@ (8011994 <__ieee754_fmod+0x224>)
 80118d6:	4665      	mov	r5, ip
 80118d8:	46a4      	mov	ip, r4
 80118da:	4484      	add	ip, r0
 80118dc:	4666      	mov	r6, ip
 80118de:	9c00      	ldr	r4, [sp, #0]
 80118e0:	40bd      	lsls	r5, r7
 80118e2:	40f4      	lsrs	r4, r6
 80118e4:	4325      	orrs	r5, r4
 80118e6:	9c00      	ldr	r4, [sp, #0]
 80118e8:	40bc      	lsls	r4, r7
 80118ea:	9403      	str	r4, [sp, #12]
 80118ec:	e79a      	b.n	8011824 <__ieee754_fmod+0xb4>
 80118ee:	4d2a      	ldr	r5, [pc, #168]	@ (8011998 <__ieee754_fmod+0x228>)
 80118f0:	9c00      	ldr	r4, [sp, #0]
 80118f2:	1a2d      	subs	r5, r5, r0
 80118f4:	40ac      	lsls	r4, r5
 80118f6:	0025      	movs	r5, r4
 80118f8:	2400      	movs	r4, #0
 80118fa:	e7f6      	b.n	80118ea <__ieee754_fmod+0x17a>
 80118fc:	9e03      	ldr	r6, [sp, #12]
 80118fe:	42b3      	cmp	r3, r6
 8011900:	41b6      	sbcs	r6, r6
 8011902:	4276      	negs	r6, r6
 8011904:	1ba4      	subs	r4, r4, r6
 8011906:	d505      	bpl.n	8011914 <__ieee754_fmod+0x1a4>
 8011908:	0fdc      	lsrs	r4, r3, #31
 801190a:	0052      	lsls	r2, r2, #1
 801190c:	1912      	adds	r2, r2, r4
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	3901      	subs	r1, #1
 8011912:	e788      	b.n	8011826 <__ieee754_fmod+0xb6>
 8011914:	0023      	movs	r3, r4
 8011916:	433b      	orrs	r3, r7
 8011918:	d102      	bne.n	8011920 <__ieee754_fmod+0x1b0>
 801191a:	4b18      	ldr	r3, [pc, #96]	@ (801197c <__ieee754_fmod+0x20c>)
 801191c:	9a02      	ldr	r2, [sp, #8]
 801191e:	e758      	b.n	80117d2 <__ieee754_fmod+0x62>
 8011920:	0064      	lsls	r4, r4, #1
 8011922:	0ffa      	lsrs	r2, r7, #31
 8011924:	18a2      	adds	r2, r4, r2
 8011926:	007b      	lsls	r3, r7, #1
 8011928:	e7f2      	b.n	8011910 <__ieee754_fmod+0x1a0>
 801192a:	0fdc      	lsrs	r4, r3, #31
 801192c:	0052      	lsls	r2, r2, #1
 801192e:	1912      	adds	r2, r2, r4
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	3801      	subs	r0, #1
 8011934:	e788      	b.n	8011848 <__ieee754_fmod+0xd8>
 8011936:	4913      	ldr	r1, [pc, #76]	@ (8011984 <__ieee754_fmod+0x214>)
 8011938:	1a0e      	subs	r6, r1, r0
 801193a:	2e14      	cmp	r6, #20
 801193c:	dc0b      	bgt.n	8011956 <__ieee754_fmod+0x1e6>
 801193e:	40f3      	lsrs	r3, r6
 8011940:	0019      	movs	r1, r3
 8011942:	4b14      	ldr	r3, [pc, #80]	@ (8011994 <__ieee754_fmod+0x224>)
 8011944:	18c0      	adds	r0, r0, r3
 8011946:	0013      	movs	r3, r2
 8011948:	4083      	lsls	r3, r0
 801194a:	4132      	asrs	r2, r6
 801194c:	430b      	orrs	r3, r1
 801194e:	9c02      	ldr	r4, [sp, #8]
 8011950:	4314      	orrs	r4, r2
 8011952:	0021      	movs	r1, r4
 8011954:	e786      	b.n	8011864 <__ieee754_fmod+0xf4>
 8011956:	2e1f      	cmp	r6, #31
 8011958:	dc06      	bgt.n	8011968 <__ieee754_fmod+0x1f8>
 801195a:	490e      	ldr	r1, [pc, #56]	@ (8011994 <__ieee754_fmod+0x224>)
 801195c:	40f3      	lsrs	r3, r6
 801195e:	1840      	adds	r0, r0, r1
 8011960:	4082      	lsls	r2, r0
 8011962:	4313      	orrs	r3, r2
 8011964:	9a02      	ldr	r2, [sp, #8]
 8011966:	e7f2      	b.n	801194e <__ieee754_fmod+0x1de>
 8011968:	4b0b      	ldr	r3, [pc, #44]	@ (8011998 <__ieee754_fmod+0x228>)
 801196a:	1a1b      	subs	r3, r3, r0
 801196c:	411a      	asrs	r2, r3
 801196e:	0013      	movs	r3, r2
 8011970:	e7f8      	b.n	8011964 <__ieee754_fmod+0x1f4>
 8011972:	46c0      	nop			@ (mov r8, r8)
 8011974:	7fefffff 	.word	0x7fefffff
 8011978:	7ff00000 	.word	0x7ff00000
 801197c:	08012910 	.word	0x08012910
 8011980:	fffffbed 	.word	0xfffffbed
 8011984:	fffffc02 	.word	0xfffffc02
 8011988:	fff00000 	.word	0xfff00000
 801198c:	000003ff 	.word	0x000003ff
 8011990:	fffffc01 	.word	0xfffffc01
 8011994:	0000041e 	.word	0x0000041e
 8011998:	fffffbe2 	.word	0xfffffbe2

0801199c <_init>:
 801199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801199e:	46c0      	nop			@ (mov r8, r8)
 80119a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119a2:	bc08      	pop	{r3}
 80119a4:	469e      	mov	lr, r3
 80119a6:	4770      	bx	lr

080119a8 <_fini>:
 80119a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119aa:	46c0      	nop			@ (mov r8, r8)
 80119ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119ae:	bc08      	pop	{r3}
 80119b0:	469e      	mov	lr, r3
 80119b2:	4770      	bx	lr
 80119b4:	0000      	movs	r0, r0
	...

080119b8 <__FLASH_Program_Fast_veneer>:
 80119b8:	b401      	push	{r0}
 80119ba:	4802      	ldr	r0, [pc, #8]	@ (80119c4 <__FLASH_Program_Fast_veneer+0xc>)
 80119bc:	4684      	mov	ip, r0
 80119be:	bc01      	pop	{r0}
 80119c0:	4760      	bx	ip
 80119c2:	bf00      	nop
 80119c4:	20002471 	.word	0x20002471

Disassembly of section .data:

20000000 <imgPalette>:
20000000:	96cdd6e9 1ac9248c ffff53ec 7b919d56     .....$...S..V..{
20000010:	000041a9                                .A..

20000014 <imgEggSitting0>:
20000014:	03900009 00010004 00080007 00330009     ..............3.
20000024:	00020003 00020004 00010001 00080005     ................
20000034:	00040007 002d0009 00020003 00010004     ......-.........
20000044:	00050001 000b0005 00020007 00290009     ..............).
20000054:	00020003 00030004 00060001 000c0005     ................
20000064:	00020007 00260009 00010003 00040004     ......&.........
20000074:	00070001 000e0005 00010007 00240009     ..............$.
20000084:	00010003 00050004 00080001 000e0005     ................
20000094:	00010007 00220009 00010003 00060004     ......".........
200000a4:	00080001 000f0005 00010007 00200009     .............. .
200000b4:	00010008 00070004 00070001 00110005     ................
200000c4:	00010007 001e0009 00010008 00010006     ................
200000d4:	00060004 00080001 00120005 00010007     ................
200000e4:	001c0009 00010008 00020006 00060004     ................
200000f4:	00070001 00140005 00010007 001b0009     ................
20000104:	00010008 00020006 00060004 00060001     ................
20000114:	00150005 00010007 001a0009 00010008     ................
20000124:	00030006 00060004 00050001 00170005     ................
20000134:	00010007 00190009 00010008 00040006     ................
20000144:	00050004 00040001 00180005 00010007     ................
20000154:	00190009 00010008 00060006 00020004     ................
20000164:	00030001 001a0005 00010007 00180009     ................
20000174:	00010008 00090006 001e0005 00010007     ................
20000184:	00170009 00010008 00090006 001e0005     ................
20000194:	00010007 00170009 00010008 00090006     ................
200001a4:	001e0005 00010007 00170009 00010008     ................
200001b4:	00090006 001e0005 00010007 00170009     ................
200001c4:	00010008 00090006 001e0005 00010007     ................
200001d4:	00170009 00010008 00090006 000f0005     ................
200001e4:	00080001 00070005 00010007 00170009     ................
200001f4:	00010008 00090006 000c0005 000d0001     ................
20000204:	00050005 00010007 00170009 00010008     ................
20000214:	00090006 000b0005 000f0001 00040005     ................
20000224:	00010007 00180009 00010008 00080006     ................
20000234:	000a0005 00110001 00020005 00010007     ................
20000244:	00190009 00010008 00080006 00090005     ................
20000254:	00130001 00010005 00010007 00190009     ................
20000264:	00010008 00080006 00080005 00150001     ................
20000274:	00010004 001a0009 00010008 00080006     ................
20000284:	00060005 000e0001 00030005 00040001     ................
20000294:	00010004 001b0009 00010008 00080006     ................
200002a4:	00050005 000e0001 00050005 00030001     ................
200002b4:	00010004 001c0009 00010008 00070006     ................
200002c4:	00050005 000e0001 00050005 00020001     ................
200002d4:	00010004 001e0009 00010008 00060006     ................
200002e4:	00050005 000f0001 00030005 00020001     ................
200002f4:	00010004 00200009 00010008 00060006     ...... .........
20000304:	00040005 000c0001 00020005 00050001     ................
20000314:	00010004 00220009 00010008 00050006     ......".........
20000324:	00040005 000c0001 00020005 00040001     ................
20000334:	00010004 00240009 00010008 00050006     ......$.........
20000344:	00030005 00110001 00010004 00260009     ..............&.
20000354:	00020008 00040006 00020005 000f0001     ................
20000364:	00020004 00290009 00020008 00020006     ......).........
20000374:	00020005 000d0001 00030004 002c0009     ..............,.
20000384:	00040008 00090001 00040004 00330009     ..............3.
20000394:	00090004 03a70009                       ........

2000039c <imgEggSitting1>:
2000039c:	02900009 000a0007 00330009 00040007     ..........3.....
200003ac:	00090005 00030007 002e0009 00020004     ................
200003bc:	00010001 000f0005 00020007 002a0009     ..............*.
200003cc:	00020003 00040001 00100005 00020007     ................
200003dc:	00260009 00020003 00010004 00060001     ..&.............
200003ec:	00110005 00010007 00240009 00020003     ..........$.....
200003fc:	00020004 00070001 00110005 00010007     ................
2000040c:	00220009 00010003 00040004 00070001     ..".............
2000041c:	00120005 00010007 00200009 00010003     .......... .....
2000042c:	00050004 00070001 00130005 00010007     ................
2000043c:	001e0009 00010003 00060004 00070001     ................
2000044c:	00130005 00020007 001c0009 00010003     ................
2000045c:	00070004 00060001 00150005 00010007     ................
2000046c:	001b0009 00010008 00010006 00070004     ................
2000047c:	00060001 00150005 00010007 001b0009     ................
2000048c:	00010008 00010006 00070004 00050001     ................
2000049c:	00170005 00010007 00190009 00010008     ................
200004ac:	00020006 00070004 00040001 00180005     ................
200004bc:	00010007 00190009 00010008 00020006     ................
200004cc:	00070004 00040001 00190005 00010007     ................
200004dc:	00180009 00010008 00030006 00050004     ................
200004ec:	00030001 001b0005 00010007 00180009     ................
200004fc:	00010008 00050006 00030004 00020001     ................
2000050c:	001c0005 00010007 00180009 00010008     ................
2000051c:	00080006 001e0005 00010007 00180009     ................
2000052c:	00010008 00080006 00130005 00050001     ................
2000053c:	00060005 00010007 00180009 00010008     ................
2000054c:	00080006 00100005 000a0001 00040005     ................
2000055c:	00010007 00180009 00010008 00090006     ................
2000056c:	000c0005 000f0001 00020005 00010007     ................
2000057c:	00180009 00010008 00090006 000b0005     ................
2000058c:	00110001 00010005 00010007 00180009     ................
2000059c:	00010008 00090006 000a0005 00130001     ................
200005ac:	00010004 00180009 00010008 00090006     ................
200005bc:	00090005 00130001 00010004 00190009     ................
200005cc:	00010008 00090006 00080005 000d0001     ................
200005dc:	00030005 00040001 00010004 00190009     ................
200005ec:	00010008 00090006 00070005 000d0001     ................
200005fc:	00050005 00020001 00010004 001b0009     ................
2000060c:	00010008 00090006 00060005 000d0001     ................
2000061c:	00050005 00020001 00010004 001c0009     ................
2000062c:	00010008 00080006 00060005 000e0001     ................
2000063c:	00030005 00020001 00010004 001d0009     ................
2000064c:	00010008 00090006 00050005 000c0001     ................
2000065c:	00020005 00040001 00010004 001f0009     ................
2000066c:	00010008 00080006 00050005 000c0001     ................
2000067c:	00020005 00040001 00010004 00200009     .............. .
2000068c:	00010008 00070006 00050005 00100001     ................
2000069c:	00020004 00220009 00010008 00070006     ......".........
200006ac:	00040005 000f0001 00020004 00240009     ..............$.
200006bc:	00010008 00070006 00030005 000e0001     ................
200006cc:	00020004 00260009 00020008 00060006     ......&.........
200006dc:	00020005 000b0001 00030004 002a0009     ..............*.
200006ec:	00020008 00050006 00020005 00090001     ................
200006fc:	00020004 002e0009 00030008 00020006     ................
2000070c:	00030005 00040001 00040004 00330009     ..............3.
2000071c:	00050008 00040004 04a90009              ............

20000728 <imgEggSitting2>:
20000728:	03110009 00060007 00370009 00020004     ..........7.....
20000738:	00010007 00060005 00050007 002e0009     ................
20000748:	00020003 00020004 00020001 000c0005     ................
20000758:	00030007 002a0009 00020003 00060001     ......*.........
20000768:	000e0005 00010007 00270009 00020003     ..........'.....
20000778:	00020004 00060001 000f0005 00020007     ................
20000788:	00240009 00020003 00030004 00070001     ..$.............
20000798:	00100005 00010007 00220009 00010003     ..........".....
200007a8:	00050004 00070001 00110005 00010007     ................
200007b8:	00200009 00010003 00060004 00070001     .. .............
200007c8:	00120005 00010007 001e0009 00010003     ................
200007d8:	00070004 00070001 00130005 00010007     ................
200007e8:	001c0009 00010008 00010006 00060004     ................
200007f8:	00070001 00140005 00010007 001c0009     ................
20000808:	00010008 00010006 00060004 00060001     ................
20000818:	00160005 00010007 001a0009 00010008     ................
20000828:	00020006 00060004 00050001 00170005     ................
20000838:	00010007 001a0009 00010008 00020006     ................
20000848:	00060004 00050001 00170005 00020007     ................
20000858:	00190009 00010008 00030006 00050004     ................
20000868:	00040001 00190005 00010007 00180009     ................
20000878:	00010008 00060006 00030004 00020001     ................
20000888:	001b0005 00010007 00180009 00010008     ................
20000898:	00080006 001e0005 00010007 00180009     ................
200008a8:	00010008 00080006 001e0005 00010007     ................
200008b8:	00180009 00010008 00090006 001d0005     ................
200008c8:	00010007 00180009 00010008 00090006     ................
200008d8:	000f0005 00080001 00060005 00010007     ................
200008e8:	00180009 00010008 00090006 000e0005     ................
200008f8:	000b0001 00040005 00010007 00180009     ................
20000908:	00010008 00090006 000c0005 000e0001     ................
20000918:	00030005 00010007 00180009 00010008     ................
20000928:	00090006 000b0005 00100001 00020005     ................
20000938:	00010007 00180009 00010008 00090006     ................
20000948:	000a0005 00120001 00010004 00190009     ................
20000958:	00020008 00080006 00090005 000c0001     ................
20000968:	00030005 00040001 00010004 001a0009     ................
20000978:	00010008 00080006 00080005 000c0001     ................
20000988:	00050005 00030001 00010004 001a0009     ................
20000998:	00010008 00090006 00060005 000d0001     ................
200009a8:	00050005 00020001 00010004 001c0009     ................
200009b8:	00010008 00080006 00060005 000e0001     ................
200009c8:	00030005 00020001 00010004 001d0009     ................
200009d8:	00010008 00080006 00050005 000c0001     ................
200009e8:	00020005 00050001 00010004 001f0009     ................
200009f8:	00010008 00080006 00040005 000c0001     ................
20000a08:	00020005 00050001 00010004 00200009     .............. .
20000a18:	00010008 00070006 00040005 00120001     ................
20000a28:	00010004 00220009 00010008 00070006     ......".........
20000a38:	00030005 00100001 00020004 00240009     ..............$.
20000a48:	00020008 00050006 00030005 000f0001     ................
20000a58:	00020004 00270009 00010008 00050006     ......'.........
20000a68:	00030005 000c0001 00030004 00290009     ..............).
20000a78:	00030008 00030006 00020005 00090001     ................
20000a88:	00040004 002e0009 000a0008 00040004     ................
20000a98:	04660009                                ..f.

20000a9c <imgEggSitting3>:
20000a9c:	048c0009 00030003 00050004 00060007     ................
20000aac:	00300009 00020003 00030004 00050001     ..0.............
20000abc:	00060005 00020007 002c0009 00020003     ..........,.....
20000acc:	00040004 00060001 00080005 00030007     ................
20000adc:	00270009 00010008 00010003 00060004     ..'.............
20000aec:	00070001 00090005 00020007 00250009     ..............%.
20000afc:	00010008 00080004 00070001 000b0005     ................
20000b0c:	00010007 00230009 00010008 00010006     ......#.........
20000b1c:	00070004 00080001 000c0005 00020007     ................
20000b2c:	00200009 00010008 00020006 00070004     .. .............
20000b3c:	00080001 000d0005 00010007 001f0009     ................
20000b4c:	00010008 00030006 00060004 00080001     ................
20000b5c:	000f0005 00010007 001d0009 00010008     ................
20000b6c:	00040006 00060004 00070001 00110005     ................
20000b7c:	00010007 001c0009 00010008 00050006     ................
20000b8c:	00050004 00050001 00130005 00010007     ................
20000b9c:	001b0009 00010008 00070006 00030004     ................
20000bac:	00050001 00150005 00010007 001a0009     ................
20000bbc:	00010008 000a0006 00020001 00190005     ................
20000bcc:	00010007 00190009 00010008 00090006     ................
20000bdc:	001c0005 00010007 00190009 00010008     ................
20000bec:	00090006 001d0005 00010007 00180009     ................
20000bfc:	00010008 00090006 001d0005 00010007     ................
20000c0c:	00180009 00010008 00090006 001d0005     ................
20000c1c:	00010007 00180009 00010008 00090006     ................
20000c2c:	001d0005 00010007 00180009 00010008     ................
20000c3c:	00090006 001d0005 00010007 00180009     ................
20000c4c:	00010008 00080006 001e0005 00010007     ................
20000c5c:	00180009 00010008 00080006 000c0005     ................
20000c6c:	00080001 000a0005 00010007 00180009     ................
20000c7c:	00010008 00080006 000b0005 000c0001     ................
20000c8c:	00070005 00010007 00190009 00010008     ................
20000c9c:	00070006 00090005 000f0001 00050005     ................
20000cac:	00010007 001a0009 00010008 00070006     ................
20000cbc:	00080005 00110001 00040005 00010007     ................
20000ccc:	001b0009 00010008 00060006 00070005     ................
20000cdc:	00130001 00030005 00010007 001c0009     ................
20000cec:	00010008 00050006 00050005 00150001     ................
20000cfc:	00020005 00010007 001d0009 00010008     ................
20000d0c:	00050006 00050005 00160001 00010005     ................
20000d1c:	00010007 001e0009 00010008 00050006     ................
20000d2c:	00040005 000e0001 00030005 00050001     ................
20000d3c:	00010004 00200009 00010008 00040006     ...... .........
20000d4c:	00040005 000e0001 00040005 00030001     ................
20000d5c:	00020004 00210009 00010008 00030006     ......!.........
20000d6c:	00040005 000e0001 00040005 00030001     ................
20000d7c:	00010004 00230009 00010008 00030006     ......#.........
20000d8c:	00020005 000c0001 00020005 00070001     ................
20000d9c:	00010004 00250009 00010008 00020006     ......%.........
20000dac:	00020005 000c0001 00020005 00060001     ................
20000dbc:	00010004 00270009 00010008 00010004     ......'.........
20000dcc:	00150001 00010004 00290009 00020004     ..........).....
20000ddc:	00120001 00020004 002c0009 00020004     ..........,.....
20000dec:	000b0001 00050004 00300009 000b0004     ..........0.....
20000dfc:	02e70009                                ....

20000e00 <imgEggSitting4>:
20000e00:	040d0009 00020003 00030004 00080007     ................
20000e10:	00310009 00020003 00010004 00040001     ..1.............
20000e20:	00080005 00030007 002c0009 00020003     ..........,.....
20000e30:	00030004 00050001 000a0005 00020007     ................
20000e40:	00280009 00020003 00040004 00070001     ..(.............
20000e50:	000a0005 00020007 00260009 00010003     ..........&.....
20000e60:	00060004 00070001 000c0005 00020007     ................
20000e70:	00230009 00010003 00070004 00070001     ..#.............
20000e80:	000e0005 00010007 00210009 00010008     ..........!.....
20000e90:	00070004 00080001 000f0005 00010007     ................
20000ea0:	001f0009 00010008 00010006 00070004     ................
20000eb0:	00070001 00110005 00010007 001d0009     ................
20000ec0:	00010008 00020006 00060004 00080001     ................
20000ed0:	00110005 00010007 001d0009 00010008     ................
20000ee0:	00020006 00060004 00070001 00130005     ................
20000ef0:	00010007 001b0009 00010008 00040006     ................
20000f00:	00050004 00060001 00150005 00010007     ................
20000f10:	001a0009 00010008 00050006 00040004     ................
20000f20:	00040001 00170005 00010007 00190009     ................
20000f30:	00020008 00070006 00010004 00030001     ................
20000f40:	00190005 00010007 00190009 00010008     ................
20000f50:	00090006 001d0005 00010007 00180009     ................
20000f60:	00010008 00090006 001d0005 00010007     ................
20000f70:	00180009 00010008 00090006 001d0005     ................
20000f80:	00010007 00180009 00010008 00090006     ................
20000f90:	001d0005 00010007 00180009 00010008     ................
20000fa0:	00090006 001d0005 00010007 00180009     ................
20000fb0:	00010008 00090006 001d0005 00010007     ................
20000fc0:	00180009 00010008 00080006 000f0005     ................
20000fd0:	00080001 00070005 00010007 00180009     ................
20000fe0:	00010008 00080006 000c0005 000c0001     ................
20000ff0:	00060005 00010007 00180009 00010008     ................
20001000:	00080006 000b0005 000e0001 00050005     ................
20001010:	00010007 00190009 00010008 00070006     ................
20001020:	000a0005 00100001 00030005 00020007     ................
20001030:	00190009 00010008 00080006 00070005     ................
20001040:	00130001 00020005 00010007 001a0009     ................
20001050:	00010008 00080006 00060005 00150001     ................
20001060:	00010005 00010007 001b0009 00010008     ................
20001070:	00070006 00050005 000f0001 00020005     ................
20001080:	00050001 00010004 001d0009 00010008     ................
20001090:	00060006 00050005 000e0001 00040005     ................
200010a0:	00040001 00010004 001d0009 00010008     ................
200010b0:	00060006 00050005 000e0001 00040005     ................
200010c0:	00030001 00010004 001f0009 00010008     ................
200010d0:	00060006 00040005 000f0001 00020005     ................
200010e0:	00030001 00010004 00210009 00010008     ..........!.....
200010f0:	00050006 00040005 000b0001 00020005     ................
20001100:	00060001 00010004 00230009 00020008     ..........#.....
20001110:	00040006 00020005 000c0001 00020005     ................
20001120:	00050001 00010004 00260009 00020008     ..........&.....
20001130:	00020006 00020005 00110001 00020004     ................
20001140:	00280009 00020008 00010006 00020005     ..(.............
20001150:	000f0001 00020004 002c0009 00030008     ..........,.....
20001160:	000d0001 00030004 00300009 000d0004     ..........0.....
20001170:	03650009                                ..e.

20001174 <imgSitting0>:
20001174:	04800009 00020003 003e0009 00010003     ..........>.....
20001184:	00010001 00010003 00020009 00070008     ................
20001194:	00340009 00010003 00020001 00030008     ..4.............
200011a4:	00060000 00010008 00110009 00070008     ................
200011b4:	001b0009 00010003 00050001 00010003     ................
200011c4:	00060000 00010008 00070009 00090008     ................
200011d4:	00070000 00020008 00190009 00010003     ................
200011e4:	00060001 00010003 00060000 00010008     ................
200011f4:	00050009 00010008 00090001 00010003     ................
20001204:	00080000 00010008 00180009 00010003     ................
20001214:	00070001 00030003 00030000 00010008     ................
20001224:	00040009 00010008 00030001 00010003     ................
20001234:	00020008 00010002 00040001 00010003     ................
20001244:	00060000 00010008 00190009 00030003     ................
20001254:	00080001 00030003 00010008 00030009     ................
20001264:	00010008 00030001 00010003 00010005     ................
20001274:	00030008 00010002 00040001 00010003     ................
20001284:	00040000 00010008 001a0009 00010003     ................
20001294:	00010001 00010003 000b0001 00010003     ................
200012a4:	00020009 00010008 00040001 00020008     ................
200012b4:	00020005 00010008 00010002 00050001     ................
200012c4:	00010003 00010000 00020008 001b0009     ................
200012d4:	00010003 00010001 00030003 000a0001     ................
200012e4:	00020003 00050001 00020008 00020005     ................
200012f4:	00010008 00010002 00060001 00010008     ................
20001304:	001d0009 00010003 00040001 00030003     ................
20001314:	00080001 00010003 00060001 00030008     ................
20001324:	00080001 00010008 001d0009 00010003     ................
20001334:	000d0001 00010002 00010003 00020001     ................
20001344:	00010003 00010001 00010002 000d0001     ................
20001354:	00010008 001d0009 00010003 000c0001     ................
20001364:	00020002 00010003 00040001 00020002     ................
20001374:	000c0001 00010008 001d0009 00060003     ................
20001384:	00070001 00020002 00010003 00040001     ................
20001394:	00020002 000c0001 00010008 001d0009     ................
200013a4:	00010003 000c0001 00020002 00010003     ................
200013b4:	00040001 00020002 000c0001 00010008     ................
200013c4:	001d0009 00010003 000d0001 00010002     ................
200013d4:	00010003 00020001 00010003 00010001     ................
200013e4:	00010002 000d0001 00010008 001d0009     ................
200013f4:	00010003 00040001 00020003 00090001     ................
20001404:	00010003 00060001 00030008 00080001     ................
20001414:	00010008 001d0009 00010003 00010001     ................
20001424:	00030003 000a0001 00020003 00050001     ................
20001434:	00020008 00020005 00010008 00010002     ................
20001444:	00060001 00010008 001d0009 00010003     ................
20001454:	00010001 00010003 000b0001 00010003     ................
20001464:	00020009 00010008 00040001 00020008     ................
20001474:	00020005 00010008 00010002 00050001     ................
20001484:	00010003 00010000 00020008 001b0009     ................
20001494:	00030003 00080001 00030003 00010008     ................
200014a4:	00030009 00010008 00030001 00010003     ................
200014b4:	00010005 00030008 00010002 00040001     ................
200014c4:	00010003 00040000 00010008 001a0009     ................
200014d4:	00010003 00070001 00030003 00030000     ................
200014e4:	00010008 00040009 00010008 00030001     ................
200014f4:	00010003 00020008 00010002 00040001     ................
20001504:	00010003 00060000 00010008 00190009     ................
20001514:	00010003 00060001 00010003 00060000     ................
20001524:	00010008 00050009 00010008 00090001     ................
20001534:	00010003 00080000 00010008 00180009     ................
20001544:	00010003 00050001 00010003 00060000     ................
20001554:	00010008 00070009 00090008 00070000     ................
20001564:	00020008 00190009 00010003 00020001     ................
20001574:	00030008 00060000 00010008 00110009     ................
20001584:	00070008 001b0009 00010003 00010001     ................
20001594:	00010003 00010008 00010009 00070008     ................
200015a4:	00340009 00020003 00010001 00010008     ..4.............
200015b4:	003c0009 00010008 00030001 00010008     ..<.............
200015c4:	003b0009 00010008 00030001 00010008     ..;.............
200015d4:	003b0009 00010008 00030001 00010008     ..;.............
200015e4:	003b0009 00010008 00020001 00010008     ..;.............
200015f4:	003c0009 00010008 00020001 00010008     ..<.............
20001604:	003c0009 00010008 00020001 00010008     ..<.............
20001614:	003c0009 00010008 00020001 00010008     ..<.............
20001624:	003c0009 00010008 00010001 00010008     ..<.............
20001634:	003d0009 00020008 033e0009              ..=.......>.

20001640 <imgSitting1>:
20001640:	04800009 00020003 003e0009 00010003     ..........>.....
20001650:	00010001 00010003 00040009 00070008     ................
20001660:	00320009 00010003 00020001 00040008     ..2.............
20001670:	00070000 00010008 00100009 00070008     ................
20001680:	001a0009 00010003 00060001 00010003     ................
20001690:	00070000 00010008 00060009 00090008     ................
200016a0:	00070000 00020008 00180009 00010003     ................
200016b0:	00070001 00010003 00070000 00010008     ................
200016c0:	00040009 00010008 00090001 00010003     ................
200016d0:	00080000 00010008 00170009 00010003     ................
200016e0:	00080001 00030003 00040000 00010008     ................
200016f0:	00030009 00010008 00030001 00010003     ................
20001700:	00020008 00010002 00040001 00010003     ................
20001710:	00060000 00010008 00180009 00030003     ................
20001720:	00090001 00030003 00010000 00010008     ................
20001730:	00020009 00010008 00030001 00010003     ................
20001740:	00010005 00030008 00010002 00040001     ................
20001750:	00010003 00040000 00010008 00190009     ................
20001760:	00010003 00010001 00010003 000c0001     ................
20001770:	00010003 00020009 00010008 00040001     ................
20001780:	00020008 00020005 00010008 00010002     ................
20001790:	00050001 00010003 00010000 00020008     ................
200017a0:	001a0009 00010003 00010001 00030003     ................
200017b0:	000b0001 00020003 00050001 00020008     ................
200017c0:	00020005 00010008 00010002 00060001     ................
200017d0:	00010008 001c0009 00010003 00040001     ................
200017e0:	00030003 00090001 00010003 00060001     ................
200017f0:	00030008 00080001 00010008 001c0009     ................
20001800:	00010003 000e0001 00010002 00010003     ................
20001810:	00020001 00010003 00010001 00010002     ................
20001820:	000d0001 00010008 001c0009 00010003     ................
20001830:	000d0001 00020002 00010003 00040001     ................
20001840:	00020002 000c0001 00010008 001c0009     ................
20001850:	00060003 00080001 00020002 00010003     ................
20001860:	00040001 00020002 000c0001 00010008     ................
20001870:	001c0009 00010003 000d0001 00020002     ................
20001880:	00010003 00040001 00020002 000c0001     ................
20001890:	00010008 001c0009 00010003 000e0001     ................
200018a0:	00010002 00010003 00020001 00010003     ................
200018b0:	00010001 00010002 000d0001 00010008     ................
200018c0:	001c0009 00010003 00040001 00030003     ................
200018d0:	00090001 00010003 00060001 00030008     ................
200018e0:	00080001 00010008 001c0009 00010003     ................
200018f0:	00010001 00030003 000b0001 00020003     ................
20001900:	00050001 00020008 00020005 00010008     ................
20001910:	00010002 00060001 00010008 001c0009     ................
20001920:	00010003 00010001 00010003 000c0001     ................
20001930:	00010003 00020009 00010008 00040001     ................
20001940:	00020008 00020005 00010008 00010002     ................
20001950:	00050001 00010003 00010000 00020008     ................
20001960:	001a0009 00030003 00090001 00030003     ................
20001970:	00010000 00010008 00020009 00010008     ................
20001980:	00030001 00010003 00010005 00030008     ................
20001990:	00010002 00040001 00010003 00040000     ................
200019a0:	00010008 00190009 00010003 00080001     ................
200019b0:	00030003 00040000 00010008 00030009     ................
200019c0:	00010008 00030001 00010003 00020008     ................
200019d0:	00010002 00040001 00010003 00060000     ................
200019e0:	00010008 00180009 00010003 00070001     ................
200019f0:	00010003 00070000 00010008 00040009     ................
20001a00:	00010008 00090001 00010003 00080000     ................
20001a10:	00010008 00170009 00010003 00060001     ................
20001a20:	00010003 00070000 00010008 00060009     ................
20001a30:	00090008 00070000 00020008 00180009     ................
20001a40:	00010003 00020001 00040008 00070000     ................
20001a50:	00010008 00100009 00070008 001a0009     ................
20001a60:	00010003 00010001 00010003 00010008     ................
20001a70:	00030009 00070008 00320009 00020003     ..........2.....
20001a80:	00010001 00010008 003c0009 00010008     ..........<.....
20001a90:	00020001 00010008 003c0009 00010008     ..........<.....
20001aa0:	00020001 00010008 003c0009 00010008     ..........<.....
20001ab0:	00020001 00010008 003c0009 00010008     ..........<.....
20001ac0:	00030001 00010008 003b0009 00010008     ..........;.....
20001ad0:	00030001 00020008 003a0009 00010008     ..........:.....
20001ae0:	00040001 00020008 003a0009 00010008     ..........:.....
20001af0:	00040001 00010008 003b0009 00050008     ..........;.....
20001b00:	03790009                                ..y.

20001b04 <imgAdultSitting0>:
20001b04:	04b00009 00040008 004c0009 00010008     ..........L.....
20001b14:	00030001 00010008 004b0009 00010008     ..........K.....
20001b24:	00030001 00010008 004b0009 00010008     ..........K.....
20001b34:	00030001 00010008 004b0009 00010008     ..........K.....
20001b44:	00030001 00050008 00050009 000a0008     ................
20001b54:	00380009 00010008 00020003 00060001     ..8.............
20001b64:	00040008 00010003 000a0000 00020008     ................
20001b74:	00360009 00010008 000c0001 00020003     ..6.............
20001b84:	000b0000 00030008 00330009 00010008     ..........3.....
20001b94:	000e0001 00010003 000d0000 00030008     ................
20001ba4:	00300009 00010008 000f0001 00010003     ..0.............
20001bb4:	000f0000 00010008 00150009 00080008     ................
20001bc4:	00120009 00010008 00030003 000c0001     ................
20001bd4:	00010003 00100000 00010008 00090009     ................
20001be4:	000b0008 00080000 00030008 000f0009     ................
20001bf4:	00010008 00030001 00010003 000c0001     ................
20001c04:	00060003 000b0000 00010008 00060009     ................
20001c14:	00020008 000b0001 00010003 000a0000     ................
20001c24:	00010008 000e0009 00010008 00030001     ................
20001c34:	00010003 00120001 00060003 00050000     ................
20001c44:	00010008 00050009 00010008 000e0001     ................
20001c54:	00020003 00090000 00010008 000d0009     ................
20001c64:	00010008 00030001 00010003 00180001     ................
20001c74:	00010003 00020000 00020008 00050009     ................
20001c84:	00010008 00030001 00030005 00020008     ................
20001c94:	00020002 00070001 00010003 00080000     ................
20001ca4:	00010008 000d0009 00010008 00020003     ................
20001cb4:	00010001 00070003 00130001 00010003     ................
20001cc4:	00010008 00060009 00010008 00030001     ................
20001cd4:	00060005 00010008 00020002 00070001     ................
20001ce4:	00010003 00030000 00050008 000d0009     ................
20001cf4:	00010008 001e0001 00060008 00010003     ................
20001d04:	00040001 00020005 00050008 00020002     ................
20001d14:	00080001 00010003 00010000 00010008     ................
20001d24:	00120009 00010008 00230001 00010003     ..........#.....
20001d34:	00050001 00010005 00060008 00020002     ................
20001d44:	00090001 00010008 00130009 00010008     ................
20001d54:	00220001 00010003 00060001 00010005     ..".............
20001d64:	00030008 00010005 00020008 00020002     ................
20001d74:	00090001 00010008 00130009 00010008     ................
20001d84:	00200001 00010002 00010003 00080001     .. .............
20001d94:	00050008 00020002 000a0001 00010008     ................
20001da4:	00130009 00010008 001e0001 00030002     ................
20001db4:	00010003 00040001 00010002 00140001     ................
20001dc4:	00010008 00130009 00010008 001d0001     ................
20001dd4:	00030002 00010003 00020001 00010003     ................
20001de4:	00020001 00020002 00130001 00010008     ................
20001df4:	00130009 00010008 001d0001 00030002     ................
20001e04:	00010003 00050001 00020002 00130001     ................
20001e14:	00010008 00130009 00010008 000a0003     ................
20001e24:	00130001 00030002 00010003 00050001     ................
20001e34:	00020002 00130001 00010008 00130009     ................
20001e44:	00010008 001d0001 00030002 00010003     ................
20001e54:	00050001 00020002 00130001 00010008     ................
20001e64:	00130009 00010008 001d0001 00030002     ................
20001e74:	00010003 00020001 00010003 00020001     ................
20001e84:	00020002 00130001 00010008 00130009     ................
20001e94:	00010008 001e0001 00030002 00010003     ................
20001ea4:	00040001 00010002 00140001 00010008     ................
20001eb4:	00130009 00010008 00200001 00010002     .......... .....
20001ec4:	00010003 00080001 00050008 00020002     ................
20001ed4:	000a0001 00010008 00130009 00010008     ................
20001ee4:	00220001 00010003 00060001 00010005     ..".............
20001ef4:	00030008 00010005 00020008 00020002     ................
20001f04:	00090001 00010008 00130009 00010008     ................
20001f14:	00230001 00010003 00050001 00010005     ..#.............
20001f24:	00060008 00020002 00090001 00010008     ................
20001f34:	00130009 00010008 001e0001 00060008     ................
20001f44:	00010003 00040001 00020005 00050008     ................
20001f54:	00020002 00080001 00010003 00010000     ................
20001f64:	00010008 00120009 00010008 00020003     ................
20001f74:	00010001 00070003 00130001 00010003     ................
20001f84:	00010008 00060009 00010008 00030001     ................
20001f94:	00060005 00010008 00020002 00070001     ................
20001fa4:	00010003 00030000 00050008 000d0009     ................
20001fb4:	00010008 00030001 00010003 00180001     ................
20001fc4:	00010003 00020000 00020008 00050009     ................
20001fd4:	00010008 00030001 00030005 00020008     ................
20001fe4:	00020002 00070001 00010003 00080000     ................
20001ff4:	00010008 000d0009 00010008 00030001     ................
20002004:	00010003 00120001 00060003 00050000     ................
20002014:	00010008 00050009 00010008 000e0001     ................
20002024:	00020003 00090000 00010008 000d0009     ................
20002034:	00010008 00030001 00010003 000c0001     ................
20002044:	00060003 000b0000 00010008 00060009     ................
20002054:	00020008 000b0001 00010003 000a0000     ................
20002064:	00010008 000e0009 00010008 00030003     ................
20002074:	000c0001 00010003 00100000 00010008     ................
20002084:	00090009 000b0008 00080000 00030008     ................
20002094:	000f0009 00010008 000f0001 00010003     ................
200020a4:	000f0000 00010008 00150009 00080008     ................
200020b4:	00120009 00010008 000e0001 00010003     ................
200020c4:	000d0000 00030008 00300009 00010008     ..........0.....
200020d4:	000c0001 00020003 000b0000 00030008     ................
200020e4:	00330009 00010008 00020003 00060001     ..3.............
200020f4:	00040008 00010003 000a0000 00020008     ................
20002104:	00360009 00010008 00030001 00050008     ..6.............
20002114:	00050009 000a0008 00380009 00010008     ..........8.....
20002124:	00030001 00010008 004b0009 00010008     ..........K.....
20002134:	00030001 00010008 004b0009 00010008     ..........K.....
20002144:	00030001 00010008 004b0009 00010008     ..........K.....
20002154:	00030003 00010008 004b0009 00010008     ..........K.....
20002164:	00030001 00010008 004b0009 00010008     ..........K.....
20002174:	00030001 00010008 004b0009 00010008     ..........K.....
20002184:	00030001 00010008 004b0009 00010008     ..........K.....
20002194:	00030001 00010008 004b0009 00010008     ..........K.....
200021a4:	00030001 00010008 004b0009 00010008     ..........K.....
200021b4:	00030001 00010008 004b0009 00010008     ..........K.....
200021c4:	00030001 00010008 004b0009 00010008     ..........K.....
200021d4:	00020001 00010008 00010000 00010008     ................
200021e4:	004a0009 00010008 00010001 00010008     ..J.............
200021f4:	00020000 00010008 004a0009 00020008     ..........J.....
20002204:	00040000 00010008 00490009 00010008     ..........I.....
20002214:	00050000 00010008 00490009 00010008     ..........I.....
20002224:	00050000 00010008 00490009 00010008     ..........I.....
20002234:	00050000 00010008 00490009 00010008     ..........I.....
20002244:	00050000 00010008 00490009 00010008     ..........I.....
20002254:	00040000 00010008 004a0009 00010008     ..........J.....
20002264:	00030000 00010008 004b0009 00010008     ..........K.....
20002274:	00020000 00010008 004c0009 00030008     ..........L.....
20002284:	018d0009                                ....

20002288 <checkTime>:
20002288:	                                         ..

2000228a <currentMenu>:
2000228a:	                                         .

2000228b <canChange>:
2000228b:	                                         .

2000228c <SystemCoreClock>:
2000228c:	00f42400                                .$..

20002290 <uwTickPrio>:
20002290:	00000004                                ....

20002294 <uwTickFreq>:
20002294:	00000001                                ....

20002298 <__sglue>:
20002298:	00000000 00000003 20003814              .........8. 

200022a4 <__global_locale>:
200022a4:	00000043 00000000 00000000 00000000     C...............
	...
200022c4:	00000043 00000000 00000000 00000000     C...............
	...
200022e4:	00000043 00000000 00000000 00000000     C...............
	...
20002304:	00000043 00000000 00000000 00000000     C...............
	...
20002324:	00000043 00000000 00000000 00000000     C...............
	...
20002344:	00000043 00000000 00000000 00000000     C...............
	...
20002364:	00000043 00000000 00000000 00000000     C...............
	...
20002384:	080106a1 0800fcc9 00000000 080125b8     .............%..
20002394:	08012558 0801290e 0801290e 0801290e     X%...)...)...)..
200023a4:	0801290e 0801290e 0801290e 0801290e     .)...)...)...)..
200023b4:	0801290e 0801290e ffffffff ffffffff     .)...)..........
200023c4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200023ec:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20002410 <_impure_ptr>:
20002410:	20002414                                .$. 

20002414 <_impure_data>:
20002414:	00000000 20003814 2000387c 200038e4     .....8. |8. .8. 
	...

20002460 <tiny>:
20002460:	c2f8f359 01a56e1f                       Y....n..

20002468 <one>:
20002468:	00000000 3ff00000                       .......?

20002470 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20002470:	b580      	push	{r7, lr}
20002472:	b088      	sub	sp, #32
20002474:	af00      	add	r7, sp, #0
20002476:	6078      	str	r0, [r7, #4]
20002478:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000247a:	231f      	movs	r3, #31
2000247c:	18fb      	adds	r3, r7, r3
2000247e:	2200      	movs	r2, #0
20002480:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20002482:	687b      	ldr	r3, [r7, #4]
20002484:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20002486:	683b      	ldr	r3, [r7, #0]
20002488:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000248a:	4b1a      	ldr	r3, [pc, #104]	@ (200024f4 <FLASH_Program_Fast+0x84>)
2000248c:	695a      	ldr	r2, [r3, #20]
2000248e:	4b19      	ldr	r3, [pc, #100]	@ (200024f4 <FLASH_Program_Fast+0x84>)
20002490:	2180      	movs	r1, #128	@ 0x80
20002492:	02c9      	lsls	r1, r1, #11
20002494:	430a      	orrs	r2, r1
20002496:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20002498:	f3ef 8310 	mrs	r3, PRIMASK
2000249c:	60fb      	str	r3, [r7, #12]
  return(result);
2000249e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200024a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200024a2:	b672      	cpsid	i
}
200024a4:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200024a6:	e00f      	b.n	200024c8 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200024a8:	697a      	ldr	r2, [r7, #20]
200024aa:	69bb      	ldr	r3, [r7, #24]
200024ac:	6812      	ldr	r2, [r2, #0]
200024ae:	601a      	str	r2, [r3, #0]
    src += 4U;
200024b0:	697b      	ldr	r3, [r7, #20]
200024b2:	3304      	adds	r3, #4
200024b4:	617b      	str	r3, [r7, #20]
    dest += 4U;
200024b6:	69bb      	ldr	r3, [r7, #24]
200024b8:	3304      	adds	r3, #4
200024ba:	61bb      	str	r3, [r7, #24]
    index++;
200024bc:	211f      	movs	r1, #31
200024be:	187b      	adds	r3, r7, r1
200024c0:	781a      	ldrb	r2, [r3, #0]
200024c2:	187b      	adds	r3, r7, r1
200024c4:	3201      	adds	r2, #1
200024c6:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200024c8:	231f      	movs	r3, #31
200024ca:	18fb      	adds	r3, r7, r3
200024cc:	781b      	ldrb	r3, [r3, #0]
200024ce:	2b3f      	cmp	r3, #63	@ 0x3f
200024d0:	d9ea      	bls.n	200024a8 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200024d2:	46c0      	nop			@ (mov r8, r8)
200024d4:	4b07      	ldr	r3, [pc, #28]	@ (200024f4 <FLASH_Program_Fast+0x84>)
200024d6:	691a      	ldr	r2, [r3, #16]
200024d8:	23c0      	movs	r3, #192	@ 0xc0
200024da:	029b      	lsls	r3, r3, #10
200024dc:	4013      	ands	r3, r2
200024de:	d1f9      	bne.n	200024d4 <FLASH_Program_Fast+0x64>
200024e0:	693b      	ldr	r3, [r7, #16]
200024e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200024e4:	68bb      	ldr	r3, [r7, #8]
200024e6:	f383 8810 	msr	PRIMASK, r3
}
200024ea:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200024ec:	46c0      	nop			@ (mov r8, r8)
200024ee:	46bd      	mov	sp, r7
200024f0:	b008      	add	sp, #32
200024f2:	bd80      	pop	{r7, pc}
200024f4:	40022000 	.word	0x40022000
