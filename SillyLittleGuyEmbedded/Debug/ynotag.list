
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011598  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b030  08011658  08011658  00012658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c688  0801c688  0001e260  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c688  0801c688  0001d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c690  0801c690  0001e260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c690  0801c690  0001d690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c694  0801c694  0001d694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  0801c698  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000013e4  20000260  0801c8f8  0001e260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  0801c8f8  0001e644  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb9c  00000000  00000000  0001e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c80  00000000  00000000  0003ae24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0003eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000156a  00000000  00000000  00040518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205a3  00000000  00000000  00041a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020bb5  00000000  00000000  00062025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf3b  00000000  00000000  00082bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014eb15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000798c  00000000  00000000  0014eb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001564e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000260 	.word	0x20000260
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801162c 	.word	0x0801162c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000264 	.word	0x20000264
 8000104:	0801162c 	.word	0x0801162c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f002 fa09 	bl	8002868 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f002 f94d 	bl	8002700 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f9fb 	bl	8002868 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f9f1 	bl	8002868 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f002 f977 	bl	8002788 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f96d 	bl	8002788 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fd6b 	bl	8000fa0 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fcf3 	bl	8000ec0 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fd5d 	bl	8000fa0 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fd53 	bl	8000fa0 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fd01 	bl	8000f10 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fcf7 	bl	8000f10 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	0008      	movs	r0, r1
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	@ (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	@ (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f8da 	bl	8000718 <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)

08000570 <__aeabi_lmul>:
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46ce      	mov	lr, r9
 8000574:	4699      	mov	r9, r3
 8000576:	0c03      	lsrs	r3, r0, #16
 8000578:	469c      	mov	ip, r3
 800057a:	0413      	lsls	r3, r2, #16
 800057c:	4647      	mov	r7, r8
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	001d      	movs	r5, r3
 8000582:	000e      	movs	r6, r1
 8000584:	4661      	mov	r1, ip
 8000586:	0404      	lsls	r4, r0, #16
 8000588:	0c24      	lsrs	r4, r4, #16
 800058a:	b580      	push	{r7, lr}
 800058c:	0007      	movs	r7, r0
 800058e:	0c10      	lsrs	r0, r2, #16
 8000590:	434b      	muls	r3, r1
 8000592:	4365      	muls	r5, r4
 8000594:	4341      	muls	r1, r0
 8000596:	4360      	muls	r0, r4
 8000598:	0c2c      	lsrs	r4, r5, #16
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	1824      	adds	r4, r4, r0
 800059e:	468c      	mov	ip, r1
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d903      	bls.n	80005ac <__aeabi_lmul+0x3c>
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	025b      	lsls	r3, r3, #9
 80005a8:	4698      	mov	r8, r3
 80005aa:	44c4      	add	ip, r8
 80005ac:	4649      	mov	r1, r9
 80005ae:	4379      	muls	r1, r7
 80005b0:	4356      	muls	r6, r2
 80005b2:	0c23      	lsrs	r3, r4, #16
 80005b4:	042d      	lsls	r5, r5, #16
 80005b6:	0c2d      	lsrs	r5, r5, #16
 80005b8:	1989      	adds	r1, r1, r6
 80005ba:	4463      	add	r3, ip
 80005bc:	0424      	lsls	r4, r4, #16
 80005be:	1960      	adds	r0, r4, r5
 80005c0:	18c9      	adds	r1, r1, r3
 80005c2:	bcc0      	pop	{r6, r7}
 80005c4:	46b9      	mov	r9, r7
 80005c6:	46b0      	mov	r8, r6
 80005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)

080005cc <__aeabi_f2uiz>:
 80005cc:	219e      	movs	r1, #158	@ 0x9e
 80005ce:	b510      	push	{r4, lr}
 80005d0:	05c9      	lsls	r1, r1, #23
 80005d2:	1c04      	adds	r4, r0, #0
 80005d4:	f7ff ffa2 	bl	800051c <__aeabi_fcmpge>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d103      	bne.n	80005e4 <__aeabi_f2uiz+0x18>
 80005dc:	1c20      	adds	r0, r4, #0
 80005de:	f001 f8fb 	bl	80017d8 <__aeabi_f2iz>
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	219e      	movs	r1, #158	@ 0x9e
 80005e6:	1c20      	adds	r0, r4, #0
 80005e8:	05c9      	lsls	r1, r1, #23
 80005ea:	f000 fe7b 	bl	80012e4 <__aeabi_fsub>
 80005ee:	f001 f8f3 	bl	80017d8 <__aeabi_f2iz>
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	469c      	mov	ip, r3
 80005f8:	4460      	add	r0, ip
 80005fa:	e7f2      	b.n	80005e2 <__aeabi_f2uiz+0x16>

080005fc <__aeabi_d2uiz>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2200      	movs	r2, #0
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__aeabi_d2uiz+0x38>)
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	f7ff ff4f 	bl	80004a8 <__aeabi_dcmpge>
 800060a:	2800      	cmp	r0, #0
 800060c:	d104      	bne.n	8000618 <__aeabi_d2uiz+0x1c>
 800060e:	0020      	movs	r0, r4
 8000610:	0029      	movs	r1, r5
 8000612:	f003 f8a9 	bl	8003768 <__aeabi_d2iz>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <__aeabi_d2uiz+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	0020      	movs	r0, r4
 800061e:	0029      	movs	r1, r5
 8000620:	f002 fc76 	bl	8002f10 <__aeabi_dsub>
 8000624:	f003 f8a0 	bl	8003768 <__aeabi_d2iz>
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	061b      	lsls	r3, r3, #24
 800062c:	469c      	mov	ip, r3
 800062e:	4460      	add	r0, ip
 8000630:	e7f1      	b.n	8000616 <__aeabi_d2uiz+0x1a>
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	41e00000 	.word	0x41e00000

08000638 <__aeabi_d2lz>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	0004      	movs	r4, r0
 8000640:	000d      	movs	r5, r1
 8000642:	f7ff ff13 	bl	800046c <__aeabi_dcmplt>
 8000646:	2800      	cmp	r0, #0
 8000648:	d108      	bne.n	800065c <__aeabi_d2lz+0x24>
 800064a:	0020      	movs	r0, r4
 800064c:	0029      	movs	r1, r5
 800064e:	f000 f82f 	bl	80006b0 <__aeabi_d2ulz>
 8000652:	0002      	movs	r2, r0
 8000654:	000b      	movs	r3, r1
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	061b      	lsls	r3, r3, #24
 8000660:	18e9      	adds	r1, r5, r3
 8000662:	0020      	movs	r0, r4
 8000664:	f000 f824 	bl	80006b0 <__aeabi_d2ulz>
 8000668:	2300      	movs	r3, #0
 800066a:	4242      	negs	r2, r0
 800066c:	418b      	sbcs	r3, r1
 800066e:	e7f2      	b.n	8000656 <__aeabi_d2lz+0x1e>

08000670 <__aeabi_f2ulz>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f003 f907 	bl	8003884 <__aeabi_f2d>
 8000676:	2200      	movs	r2, #0
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <__aeabi_f2ulz+0x38>)
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	f002 f961 	bl	8002944 <__aeabi_dmul>
 8000682:	f7ff ffbb 	bl	80005fc <__aeabi_d2uiz>
 8000686:	0006      	movs	r6, r0
 8000688:	f003 f8d8 	bl	800383c <__aeabi_ui2d>
 800068c:	2200      	movs	r2, #0
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <__aeabi_f2ulz+0x3c>)
 8000690:	f002 f958 	bl	8002944 <__aeabi_dmul>
 8000694:	0002      	movs	r2, r0
 8000696:	000b      	movs	r3, r1
 8000698:	0020      	movs	r0, r4
 800069a:	0029      	movs	r1, r5
 800069c:	f002 fc38 	bl	8002f10 <__aeabi_dsub>
 80006a0:	f7ff ffac 	bl	80005fc <__aeabi_d2uiz>
 80006a4:	0031      	movs	r1, r6
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	3df00000 	.word	0x3df00000
 80006ac:	41f00000 	.word	0x41f00000

080006b0 <__aeabi_d2ulz>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <__aeabi_d2ulz+0x34>)
 80006b6:	000d      	movs	r5, r1
 80006b8:	0004      	movs	r4, r0
 80006ba:	f002 f943 	bl	8002944 <__aeabi_dmul>
 80006be:	f7ff ff9d 	bl	80005fc <__aeabi_d2uiz>
 80006c2:	0006      	movs	r6, r0
 80006c4:	f003 f8ba 	bl	800383c <__aeabi_ui2d>
 80006c8:	2200      	movs	r2, #0
 80006ca:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <__aeabi_d2ulz+0x38>)
 80006cc:	f002 f93a 	bl	8002944 <__aeabi_dmul>
 80006d0:	0002      	movs	r2, r0
 80006d2:	000b      	movs	r3, r1
 80006d4:	0020      	movs	r0, r4
 80006d6:	0029      	movs	r1, r5
 80006d8:	f002 fc1a 	bl	8002f10 <__aeabi_dsub>
 80006dc:	f7ff ff8e 	bl	80005fc <__aeabi_d2uiz>
 80006e0:	0031      	movs	r1, r6
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	3df00000 	.word	0x3df00000
 80006e8:	41f00000 	.word	0x41f00000

080006ec <__aeabi_l2d>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	0006      	movs	r6, r0
 80006f0:	0008      	movs	r0, r1
 80006f2:	f003 f875 	bl	80037e0 <__aeabi_i2d>
 80006f6:	2200      	movs	r2, #0
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <__aeabi_l2d+0x28>)
 80006fa:	f002 f923 	bl	8002944 <__aeabi_dmul>
 80006fe:	000d      	movs	r5, r1
 8000700:	0004      	movs	r4, r0
 8000702:	0030      	movs	r0, r6
 8000704:	f003 f89a 	bl	800383c <__aeabi_ui2d>
 8000708:	002b      	movs	r3, r5
 800070a:	0022      	movs	r2, r4
 800070c:	f001 f91a 	bl	8001944 <__aeabi_dadd>
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	41f00000 	.word	0x41f00000

08000718 <__udivmoddi4>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	4657      	mov	r7, sl
 800071c:	464e      	mov	r6, r9
 800071e:	4645      	mov	r5, r8
 8000720:	46de      	mov	lr, fp
 8000722:	b5e0      	push	{r5, r6, r7, lr}
 8000724:	0004      	movs	r4, r0
 8000726:	000d      	movs	r5, r1
 8000728:	4692      	mov	sl, r2
 800072a:	4699      	mov	r9, r3
 800072c:	b083      	sub	sp, #12
 800072e:	428b      	cmp	r3, r1
 8000730:	d830      	bhi.n	8000794 <__udivmoddi4+0x7c>
 8000732:	d02d      	beq.n	8000790 <__udivmoddi4+0x78>
 8000734:	4649      	mov	r1, r9
 8000736:	4650      	mov	r0, sl
 8000738:	f003 f98c 	bl	8003a54 <__clzdi2>
 800073c:	0029      	movs	r1, r5
 800073e:	0006      	movs	r6, r0
 8000740:	0020      	movs	r0, r4
 8000742:	f003 f987 	bl	8003a54 <__clzdi2>
 8000746:	1a33      	subs	r3, r6, r0
 8000748:	4698      	mov	r8, r3
 800074a:	3b20      	subs	r3, #32
 800074c:	d434      	bmi.n	80007b8 <__udivmoddi4+0xa0>
 800074e:	469b      	mov	fp, r3
 8000750:	4653      	mov	r3, sl
 8000752:	465a      	mov	r2, fp
 8000754:	4093      	lsls	r3, r2
 8000756:	4642      	mov	r2, r8
 8000758:	001f      	movs	r7, r3
 800075a:	4653      	mov	r3, sl
 800075c:	4093      	lsls	r3, r2
 800075e:	001e      	movs	r6, r3
 8000760:	42af      	cmp	r7, r5
 8000762:	d83b      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000764:	42af      	cmp	r7, r5
 8000766:	d100      	bne.n	800076a <__udivmoddi4+0x52>
 8000768:	e079      	b.n	800085e <__udivmoddi4+0x146>
 800076a:	465b      	mov	r3, fp
 800076c:	1ba4      	subs	r4, r4, r6
 800076e:	41bd      	sbcs	r5, r7
 8000770:	2b00      	cmp	r3, #0
 8000772:	da00      	bge.n	8000776 <__udivmoddi4+0x5e>
 8000774:	e076      	b.n	8000864 <__udivmoddi4+0x14c>
 8000776:	2200      	movs	r2, #0
 8000778:	2300      	movs	r3, #0
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2301      	movs	r3, #1
 8000780:	465a      	mov	r2, fp
 8000782:	4093      	lsls	r3, r2
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2301      	movs	r3, #1
 8000788:	4642      	mov	r2, r8
 800078a:	4093      	lsls	r3, r2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	e029      	b.n	80007e4 <__udivmoddi4+0xcc>
 8000790:	4282      	cmp	r2, r0
 8000792:	d9cf      	bls.n	8000734 <__udivmoddi4+0x1c>
 8000794:	2200      	movs	r2, #0
 8000796:	2300      	movs	r3, #0
 8000798:	9200      	str	r2, [sp, #0]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <__udivmoddi4+0x8e>
 80007a2:	601c      	str	r4, [r3, #0]
 80007a4:	605d      	str	r5, [r3, #4]
 80007a6:	9800      	ldr	r0, [sp, #0]
 80007a8:	9901      	ldr	r1, [sp, #4]
 80007aa:	b003      	add	sp, #12
 80007ac:	bcf0      	pop	{r4, r5, r6, r7}
 80007ae:	46bb      	mov	fp, r7
 80007b0:	46b2      	mov	sl, r6
 80007b2:	46a9      	mov	r9, r5
 80007b4:	46a0      	mov	r8, r4
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	4642      	mov	r2, r8
 80007ba:	469b      	mov	fp, r3
 80007bc:	2320      	movs	r3, #32
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	4652      	mov	r2, sl
 80007c2:	40da      	lsrs	r2, r3
 80007c4:	4641      	mov	r1, r8
 80007c6:	0013      	movs	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	408a      	lsls	r2, r1
 80007cc:	0017      	movs	r7, r2
 80007ce:	4642      	mov	r2, r8
 80007d0:	431f      	orrs	r7, r3
 80007d2:	4653      	mov	r3, sl
 80007d4:	4093      	lsls	r3, r2
 80007d6:	001e      	movs	r6, r3
 80007d8:	42af      	cmp	r7, r5
 80007da:	d9c3      	bls.n	8000764 <__udivmoddi4+0x4c>
 80007dc:	2200      	movs	r2, #0
 80007de:	2300      	movs	r3, #0
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	4643      	mov	r3, r8
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0d8      	beq.n	800079c <__udivmoddi4+0x84>
 80007ea:	07fb      	lsls	r3, r7, #31
 80007ec:	0872      	lsrs	r2, r6, #1
 80007ee:	431a      	orrs	r2, r3
 80007f0:	4646      	mov	r6, r8
 80007f2:	087b      	lsrs	r3, r7, #1
 80007f4:	e00e      	b.n	8000814 <__udivmoddi4+0xfc>
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d101      	bne.n	80007fe <__udivmoddi4+0xe6>
 80007fa:	42a2      	cmp	r2, r4
 80007fc:	d80c      	bhi.n	8000818 <__udivmoddi4+0x100>
 80007fe:	1aa4      	subs	r4, r4, r2
 8000800:	419d      	sbcs	r5, r3
 8000802:	2001      	movs	r0, #1
 8000804:	1924      	adds	r4, r4, r4
 8000806:	416d      	adcs	r5, r5
 8000808:	2100      	movs	r1, #0
 800080a:	3e01      	subs	r6, #1
 800080c:	1824      	adds	r4, r4, r0
 800080e:	414d      	adcs	r5, r1
 8000810:	2e00      	cmp	r6, #0
 8000812:	d006      	beq.n	8000822 <__udivmoddi4+0x10a>
 8000814:	42ab      	cmp	r3, r5
 8000816:	d9ee      	bls.n	80007f6 <__udivmoddi4+0xde>
 8000818:	3e01      	subs	r6, #1
 800081a:	1924      	adds	r4, r4, r4
 800081c:	416d      	adcs	r5, r5
 800081e:	2e00      	cmp	r6, #0
 8000820:	d1f8      	bne.n	8000814 <__udivmoddi4+0xfc>
 8000822:	9800      	ldr	r0, [sp, #0]
 8000824:	9901      	ldr	r1, [sp, #4]
 8000826:	465b      	mov	r3, fp
 8000828:	1900      	adds	r0, r0, r4
 800082a:	4169      	adcs	r1, r5
 800082c:	2b00      	cmp	r3, #0
 800082e:	db24      	blt.n	800087a <__udivmoddi4+0x162>
 8000830:	002b      	movs	r3, r5
 8000832:	465a      	mov	r2, fp
 8000834:	4644      	mov	r4, r8
 8000836:	40d3      	lsrs	r3, r2
 8000838:	002a      	movs	r2, r5
 800083a:	40e2      	lsrs	r2, r4
 800083c:	001c      	movs	r4, r3
 800083e:	465b      	mov	r3, fp
 8000840:	0015      	movs	r5, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	db2a      	blt.n	800089c <__udivmoddi4+0x184>
 8000846:	0026      	movs	r6, r4
 8000848:	409e      	lsls	r6, r3
 800084a:	0033      	movs	r3, r6
 800084c:	0026      	movs	r6, r4
 800084e:	4647      	mov	r7, r8
 8000850:	40be      	lsls	r6, r7
 8000852:	0032      	movs	r2, r6
 8000854:	1a80      	subs	r0, r0, r2
 8000856:	4199      	sbcs	r1, r3
 8000858:	9000      	str	r0, [sp, #0]
 800085a:	9101      	str	r1, [sp, #4]
 800085c:	e79e      	b.n	800079c <__udivmoddi4+0x84>
 800085e:	42a3      	cmp	r3, r4
 8000860:	d8bc      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000862:	e782      	b.n	800076a <__udivmoddi4+0x52>
 8000864:	4642      	mov	r2, r8
 8000866:	2320      	movs	r3, #32
 8000868:	2100      	movs	r1, #0
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	2200      	movs	r2, #0
 800086e:	9100      	str	r1, [sp, #0]
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	40da      	lsrs	r2, r3
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	e785      	b.n	8000786 <__udivmoddi4+0x6e>
 800087a:	4642      	mov	r2, r8
 800087c:	2320      	movs	r3, #32
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	002a      	movs	r2, r5
 8000882:	4646      	mov	r6, r8
 8000884:	409a      	lsls	r2, r3
 8000886:	0023      	movs	r3, r4
 8000888:	40f3      	lsrs	r3, r6
 800088a:	4644      	mov	r4, r8
 800088c:	4313      	orrs	r3, r2
 800088e:	002a      	movs	r2, r5
 8000890:	40e2      	lsrs	r2, r4
 8000892:	001c      	movs	r4, r3
 8000894:	465b      	mov	r3, fp
 8000896:	0015      	movs	r5, r2
 8000898:	2b00      	cmp	r3, #0
 800089a:	dad4      	bge.n	8000846 <__udivmoddi4+0x12e>
 800089c:	4642      	mov	r2, r8
 800089e:	002f      	movs	r7, r5
 80008a0:	2320      	movs	r3, #32
 80008a2:	0026      	movs	r6, r4
 80008a4:	4097      	lsls	r7, r2
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	40de      	lsrs	r6, r3
 80008aa:	003b      	movs	r3, r7
 80008ac:	4333      	orrs	r3, r6
 80008ae:	e7cd      	b.n	800084c <__udivmoddi4+0x134>

080008b0 <__aeabi_fadd>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	024b      	lsls	r3, r1, #9
 80008b4:	0a5a      	lsrs	r2, r3, #9
 80008b6:	4694      	mov	ip, r2
 80008b8:	004a      	lsls	r2, r1, #1
 80008ba:	0fc9      	lsrs	r1, r1, #31
 80008bc:	46ce      	mov	lr, r9
 80008be:	4647      	mov	r7, r8
 80008c0:	4689      	mov	r9, r1
 80008c2:	0045      	lsls	r5, r0, #1
 80008c4:	0246      	lsls	r6, r0, #9
 80008c6:	0e2d      	lsrs	r5, r5, #24
 80008c8:	0e12      	lsrs	r2, r2, #24
 80008ca:	b580      	push	{r7, lr}
 80008cc:	0999      	lsrs	r1, r3, #6
 80008ce:	0a77      	lsrs	r7, r6, #9
 80008d0:	0fc4      	lsrs	r4, r0, #31
 80008d2:	09b6      	lsrs	r6, r6, #6
 80008d4:	1aab      	subs	r3, r5, r2
 80008d6:	454c      	cmp	r4, r9
 80008d8:	d020      	beq.n	800091c <__aeabi_fadd+0x6c>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	dd0c      	ble.n	80008f8 <__aeabi_fadd+0x48>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d134      	bne.n	800094c <__aeabi_fadd+0x9c>
 80008e2:	2900      	cmp	r1, #0
 80008e4:	d02a      	beq.n	800093c <__aeabi_fadd+0x8c>
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d100      	bne.n	80008ee <__aeabi_fadd+0x3e>
 80008ec:	e08f      	b.n	8000a0e <__aeabi_fadd+0x15e>
 80008ee:	2bff      	cmp	r3, #255	@ 0xff
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x44>
 80008f2:	e0cd      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 80008f4:	0013      	movs	r3, r2
 80008f6:	e02f      	b.n	8000958 <__aeabi_fadd+0xa8>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d060      	beq.n	80009be <__aeabi_fadd+0x10e>
 80008fc:	1b53      	subs	r3, r2, r5
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x54>
 8000902:	e0ee      	b.n	8000ae2 <__aeabi_fadd+0x232>
 8000904:	2e00      	cmp	r6, #0
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x5a>
 8000908:	e13e      	b.n	8000b88 <__aeabi_fadd+0x2d8>
 800090a:	1e5c      	subs	r4, r3, #1
 800090c:	2b01      	cmp	r3, #1
 800090e:	d100      	bne.n	8000912 <__aeabi_fadd+0x62>
 8000910:	e16b      	b.n	8000bea <__aeabi_fadd+0x33a>
 8000912:	2bff      	cmp	r3, #255	@ 0xff
 8000914:	d100      	bne.n	8000918 <__aeabi_fadd+0x68>
 8000916:	e0b9      	b.n	8000a8c <__aeabi_fadd+0x1dc>
 8000918:	0023      	movs	r3, r4
 800091a:	e0e7      	b.n	8000aec <__aeabi_fadd+0x23c>
 800091c:	2b00      	cmp	r3, #0
 800091e:	dc00      	bgt.n	8000922 <__aeabi_fadd+0x72>
 8000920:	e0a4      	b.n	8000a6c <__aeabi_fadd+0x1bc>
 8000922:	2a00      	cmp	r2, #0
 8000924:	d069      	beq.n	80009fa <__aeabi_fadd+0x14a>
 8000926:	2dff      	cmp	r5, #255	@ 0xff
 8000928:	d100      	bne.n	800092c <__aeabi_fadd+0x7c>
 800092a:	e0b1      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 800092c:	2280      	movs	r2, #128	@ 0x80
 800092e:	04d2      	lsls	r2, r2, #19
 8000930:	4311      	orrs	r1, r2
 8000932:	2b1b      	cmp	r3, #27
 8000934:	dc00      	bgt.n	8000938 <__aeabi_fadd+0x88>
 8000936:	e0e9      	b.n	8000b0c <__aeabi_fadd+0x25c>
 8000938:	002b      	movs	r3, r5
 800093a:	3605      	adds	r6, #5
 800093c:	08f7      	lsrs	r7, r6, #3
 800093e:	2bff      	cmp	r3, #255	@ 0xff
 8000940:	d100      	bne.n	8000944 <__aeabi_fadd+0x94>
 8000942:	e0a5      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 8000944:	027a      	lsls	r2, r7, #9
 8000946:	0a52      	lsrs	r2, r2, #9
 8000948:	b2d8      	uxtb	r0, r3
 800094a:	e030      	b.n	80009ae <__aeabi_fadd+0xfe>
 800094c:	2dff      	cmp	r5, #255	@ 0xff
 800094e:	d100      	bne.n	8000952 <__aeabi_fadd+0xa2>
 8000950:	e09e      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 8000952:	2280      	movs	r2, #128	@ 0x80
 8000954:	04d2      	lsls	r2, r2, #19
 8000956:	4311      	orrs	r1, r2
 8000958:	2001      	movs	r0, #1
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dc08      	bgt.n	8000970 <__aeabi_fadd+0xc0>
 800095e:	0008      	movs	r0, r1
 8000960:	2220      	movs	r2, #32
 8000962:	40d8      	lsrs	r0, r3
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	4099      	lsls	r1, r3
 8000968:	000b      	movs	r3, r1
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	4193      	sbcs	r3, r2
 800096e:	4318      	orrs	r0, r3
 8000970:	1a36      	subs	r6, r6, r0
 8000972:	0173      	lsls	r3, r6, #5
 8000974:	d400      	bmi.n	8000978 <__aeabi_fadd+0xc8>
 8000976:	e071      	b.n	8000a5c <__aeabi_fadd+0x1ac>
 8000978:	01b6      	lsls	r6, r6, #6
 800097a:	09b7      	lsrs	r7, r6, #6
 800097c:	0038      	movs	r0, r7
 800097e:	f003 f84b 	bl	8003a18 <__clzsi2>
 8000982:	003b      	movs	r3, r7
 8000984:	3805      	subs	r0, #5
 8000986:	4083      	lsls	r3, r0
 8000988:	4285      	cmp	r5, r0
 800098a:	dd4d      	ble.n	8000a28 <__aeabi_fadd+0x178>
 800098c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c60 <__aeabi_fadd+0x3b0>)
 800098e:	1a2d      	subs	r5, r5, r0
 8000990:	401e      	ands	r6, r3
 8000992:	075a      	lsls	r2, r3, #29
 8000994:	d068      	beq.n	8000a68 <__aeabi_fadd+0x1b8>
 8000996:	220f      	movs	r2, #15
 8000998:	4013      	ands	r3, r2
 800099a:	2b04      	cmp	r3, #4
 800099c:	d064      	beq.n	8000a68 <__aeabi_fadd+0x1b8>
 800099e:	3604      	adds	r6, #4
 80009a0:	0173      	lsls	r3, r6, #5
 80009a2:	d561      	bpl.n	8000a68 <__aeabi_fadd+0x1b8>
 80009a4:	1c68      	adds	r0, r5, #1
 80009a6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009a8:	d154      	bne.n	8000a54 <__aeabi_fadd+0x1a4>
 80009aa:	20ff      	movs	r0, #255	@ 0xff
 80009ac:	2200      	movs	r2, #0
 80009ae:	05c0      	lsls	r0, r0, #23
 80009b0:	4310      	orrs	r0, r2
 80009b2:	07e4      	lsls	r4, r4, #31
 80009b4:	4320      	orrs	r0, r4
 80009b6:	bcc0      	pop	{r6, r7}
 80009b8:	46b9      	mov	r9, r7
 80009ba:	46b0      	mov	r8, r6
 80009bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009be:	22fe      	movs	r2, #254	@ 0xfe
 80009c0:	4690      	mov	r8, r2
 80009c2:	1c68      	adds	r0, r5, #1
 80009c4:	0002      	movs	r2, r0
 80009c6:	4640      	mov	r0, r8
 80009c8:	4210      	tst	r0, r2
 80009ca:	d16b      	bne.n	8000aa4 <__aeabi_fadd+0x1f4>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fadd+0x122>
 80009d0:	e0dd      	b.n	8000b8e <__aeabi_fadd+0x2de>
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fadd+0x128>
 80009d6:	e102      	b.n	8000bde <__aeabi_fadd+0x32e>
 80009d8:	2900      	cmp	r1, #0
 80009da:	d0b3      	beq.n	8000944 <__aeabi_fadd+0x94>
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	1a77      	subs	r7, r6, r1
 80009e0:	04d2      	lsls	r2, r2, #19
 80009e2:	4217      	tst	r7, r2
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x138>
 80009e6:	e136      	b.n	8000c56 <__aeabi_fadd+0x3a6>
 80009e8:	464c      	mov	r4, r9
 80009ea:	1b8e      	subs	r6, r1, r6
 80009ec:	d061      	beq.n	8000ab2 <__aeabi_fadd+0x202>
 80009ee:	2001      	movs	r0, #1
 80009f0:	4216      	tst	r6, r2
 80009f2:	d130      	bne.n	8000a56 <__aeabi_fadd+0x1a6>
 80009f4:	2300      	movs	r3, #0
 80009f6:	08f7      	lsrs	r7, r6, #3
 80009f8:	e7a4      	b.n	8000944 <__aeabi_fadd+0x94>
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d09e      	beq.n	800093c <__aeabi_fadd+0x8c>
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fadd+0x156>
 8000a04:	e0ca      	b.n	8000b9c <__aeabi_fadd+0x2ec>
 8000a06:	2bff      	cmp	r3, #255	@ 0xff
 8000a08:	d042      	beq.n	8000a90 <__aeabi_fadd+0x1e0>
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	e791      	b.n	8000932 <__aeabi_fadd+0x82>
 8000a0e:	1a71      	subs	r1, r6, r1
 8000a10:	014b      	lsls	r3, r1, #5
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_fadd+0x166>
 8000a14:	e0d1      	b.n	8000bba <__aeabi_fadd+0x30a>
 8000a16:	018f      	lsls	r7, r1, #6
 8000a18:	09bf      	lsrs	r7, r7, #6
 8000a1a:	0038      	movs	r0, r7
 8000a1c:	f002 fffc 	bl	8003a18 <__clzsi2>
 8000a20:	003b      	movs	r3, r7
 8000a22:	3805      	subs	r0, #5
 8000a24:	4083      	lsls	r3, r0
 8000a26:	2501      	movs	r5, #1
 8000a28:	2220      	movs	r2, #32
 8000a2a:	1b40      	subs	r0, r0, r5
 8000a2c:	3001      	adds	r0, #1
 8000a2e:	1a12      	subs	r2, r2, r0
 8000a30:	001e      	movs	r6, r3
 8000a32:	4093      	lsls	r3, r2
 8000a34:	40c6      	lsrs	r6, r0
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431e      	orrs	r6, r3
 8000a3c:	d039      	beq.n	8000ab2 <__aeabi_fadd+0x202>
 8000a3e:	0773      	lsls	r3, r6, #29
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fadd+0x194>
 8000a42:	e11b      	b.n	8000c7c <__aeabi_fadd+0x3cc>
 8000a44:	230f      	movs	r3, #15
 8000a46:	2500      	movs	r5, #0
 8000a48:	4033      	ands	r3, r6
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d1a7      	bne.n	800099e <__aeabi_fadd+0xee>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	0172      	lsls	r2, r6, #5
 8000a52:	d57c      	bpl.n	8000b4e <__aeabi_fadd+0x29e>
 8000a54:	b2c0      	uxtb	r0, r0
 8000a56:	01b2      	lsls	r2, r6, #6
 8000a58:	0a52      	lsrs	r2, r2, #9
 8000a5a:	e7a8      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000a5c:	0773      	lsls	r3, r6, #29
 8000a5e:	d003      	beq.n	8000a68 <__aeabi_fadd+0x1b8>
 8000a60:	230f      	movs	r3, #15
 8000a62:	4033      	ands	r3, r6
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d19a      	bne.n	800099e <__aeabi_fadd+0xee>
 8000a68:	002b      	movs	r3, r5
 8000a6a:	e767      	b.n	800093c <__aeabi_fadd+0x8c>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d023      	beq.n	8000ab8 <__aeabi_fadd+0x208>
 8000a70:	1b53      	subs	r3, r2, r5
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d17b      	bne.n	8000b6e <__aeabi_fadd+0x2be>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x1cc>
 8000a7a:	e086      	b.n	8000b8a <__aeabi_fadd+0x2da>
 8000a7c:	1e5d      	subs	r5, r3, #1
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fadd+0x1d4>
 8000a82:	e08b      	b.n	8000b9c <__aeabi_fadd+0x2ec>
 8000a84:	2bff      	cmp	r3, #255	@ 0xff
 8000a86:	d002      	beq.n	8000a8e <__aeabi_fadd+0x1de>
 8000a88:	002b      	movs	r3, r5
 8000a8a:	e075      	b.n	8000b78 <__aeabi_fadd+0x2c8>
 8000a8c:	464c      	mov	r4, r9
 8000a8e:	4667      	mov	r7, ip
 8000a90:	2f00      	cmp	r7, #0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fadd+0x1e6>
 8000a94:	e789      	b.n	80009aa <__aeabi_fadd+0xfa>
 8000a96:	2280      	movs	r2, #128	@ 0x80
 8000a98:	03d2      	lsls	r2, r2, #15
 8000a9a:	433a      	orrs	r2, r7
 8000a9c:	0252      	lsls	r2, r2, #9
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	0a52      	lsrs	r2, r2, #9
 8000aa2:	e784      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000aa4:	1a77      	subs	r7, r6, r1
 8000aa6:	017b      	lsls	r3, r7, #5
 8000aa8:	d46b      	bmi.n	8000b82 <__aeabi_fadd+0x2d2>
 8000aaa:	2f00      	cmp	r7, #0
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_fadd+0x200>
 8000aae:	e765      	b.n	800097c <__aeabi_fadd+0xcc>
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e77a      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000ab8:	22fe      	movs	r2, #254	@ 0xfe
 8000aba:	1c6b      	adds	r3, r5, #1
 8000abc:	421a      	tst	r2, r3
 8000abe:	d149      	bne.n	8000b54 <__aeabi_fadd+0x2a4>
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fadd+0x216>
 8000ac4:	e09f      	b.n	8000c06 <__aeabi_fadd+0x356>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fadd+0x21c>
 8000aca:	e0ba      	b.n	8000c42 <__aeabi_fadd+0x392>
 8000acc:	2900      	cmp	r1, #0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_fadd+0x222>
 8000ad0:	e0cf      	b.n	8000c72 <__aeabi_fadd+0x3c2>
 8000ad2:	1872      	adds	r2, r6, r1
 8000ad4:	0153      	lsls	r3, r2, #5
 8000ad6:	d400      	bmi.n	8000ada <__aeabi_fadd+0x22a>
 8000ad8:	e0cd      	b.n	8000c76 <__aeabi_fadd+0x3c6>
 8000ada:	0192      	lsls	r2, r2, #6
 8000adc:	2001      	movs	r0, #1
 8000ade:	0a52      	lsrs	r2, r2, #9
 8000ae0:	e765      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000ae2:	2aff      	cmp	r2, #255	@ 0xff
 8000ae4:	d0d2      	beq.n	8000a8c <__aeabi_fadd+0x1dc>
 8000ae6:	2080      	movs	r0, #128	@ 0x80
 8000ae8:	04c0      	lsls	r0, r0, #19
 8000aea:	4306      	orrs	r6, r0
 8000aec:	2001      	movs	r0, #1
 8000aee:	2b1b      	cmp	r3, #27
 8000af0:	dc08      	bgt.n	8000b04 <__aeabi_fadd+0x254>
 8000af2:	0030      	movs	r0, r6
 8000af4:	2420      	movs	r4, #32
 8000af6:	40d8      	lsrs	r0, r3
 8000af8:	1ae3      	subs	r3, r4, r3
 8000afa:	409e      	lsls	r6, r3
 8000afc:	0033      	movs	r3, r6
 8000afe:	1e5c      	subs	r4, r3, #1
 8000b00:	41a3      	sbcs	r3, r4
 8000b02:	4318      	orrs	r0, r3
 8000b04:	464c      	mov	r4, r9
 8000b06:	0015      	movs	r5, r2
 8000b08:	1a0e      	subs	r6, r1, r0
 8000b0a:	e732      	b.n	8000972 <__aeabi_fadd+0xc2>
 8000b0c:	0008      	movs	r0, r1
 8000b0e:	2220      	movs	r2, #32
 8000b10:	40d8      	lsrs	r0, r3
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4099      	lsls	r1, r3
 8000b16:	000b      	movs	r3, r1
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	4193      	sbcs	r3, r2
 8000b1c:	4303      	orrs	r3, r0
 8000b1e:	18f6      	adds	r6, r6, r3
 8000b20:	0173      	lsls	r3, r6, #5
 8000b22:	d59b      	bpl.n	8000a5c <__aeabi_fadd+0x1ac>
 8000b24:	3501      	adds	r5, #1
 8000b26:	2dff      	cmp	r5, #255	@ 0xff
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fadd+0x27c>
 8000b2a:	e73e      	b.n	80009aa <__aeabi_fadd+0xfa>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	494d      	ldr	r1, [pc, #308]	@ (8000c64 <__aeabi_fadd+0x3b4>)
 8000b30:	0872      	lsrs	r2, r6, #1
 8000b32:	4033      	ands	r3, r6
 8000b34:	400a      	ands	r2, r1
 8000b36:	431a      	orrs	r2, r3
 8000b38:	0016      	movs	r6, r2
 8000b3a:	0753      	lsls	r3, r2, #29
 8000b3c:	d004      	beq.n	8000b48 <__aeabi_fadd+0x298>
 8000b3e:	230f      	movs	r3, #15
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d000      	beq.n	8000b48 <__aeabi_fadd+0x298>
 8000b46:	e72a      	b.n	800099e <__aeabi_fadd+0xee>
 8000b48:	0173      	lsls	r3, r6, #5
 8000b4a:	d500      	bpl.n	8000b4e <__aeabi_fadd+0x29e>
 8000b4c:	e72a      	b.n	80009a4 <__aeabi_fadd+0xf4>
 8000b4e:	002b      	movs	r3, r5
 8000b50:	08f7      	lsrs	r7, r6, #3
 8000b52:	e6f7      	b.n	8000944 <__aeabi_fadd+0x94>
 8000b54:	2bff      	cmp	r3, #255	@ 0xff
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fadd+0x2aa>
 8000b58:	e727      	b.n	80009aa <__aeabi_fadd+0xfa>
 8000b5a:	1871      	adds	r1, r6, r1
 8000b5c:	0849      	lsrs	r1, r1, #1
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	d02f      	beq.n	8000bc2 <__aeabi_fadd+0x312>
 8000b62:	220f      	movs	r2, #15
 8000b64:	400a      	ands	r2, r1
 8000b66:	2a04      	cmp	r2, #4
 8000b68:	d02b      	beq.n	8000bc2 <__aeabi_fadd+0x312>
 8000b6a:	1d0e      	adds	r6, r1, #4
 8000b6c:	e6e6      	b.n	800093c <__aeabi_fadd+0x8c>
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d08d      	beq.n	8000a8e <__aeabi_fadd+0x1de>
 8000b72:	2080      	movs	r0, #128	@ 0x80
 8000b74:	04c0      	lsls	r0, r0, #19
 8000b76:	4306      	orrs	r6, r0
 8000b78:	2b1b      	cmp	r3, #27
 8000b7a:	dd24      	ble.n	8000bc6 <__aeabi_fadd+0x316>
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	1d4e      	adds	r6, r1, #5
 8000b80:	e6dc      	b.n	800093c <__aeabi_fadd+0x8c>
 8000b82:	464c      	mov	r4, r9
 8000b84:	1b8f      	subs	r7, r1, r6
 8000b86:	e6f9      	b.n	800097c <__aeabi_fadd+0xcc>
 8000b88:	464c      	mov	r4, r9
 8000b8a:	000e      	movs	r6, r1
 8000b8c:	e6d6      	b.n	800093c <__aeabi_fadd+0x8c>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d149      	bne.n	8000c26 <__aeabi_fadd+0x376>
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d068      	beq.n	8000c68 <__aeabi_fadd+0x3b8>
 8000b96:	4667      	mov	r7, ip
 8000b98:	464c      	mov	r4, r9
 8000b9a:	e77c      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000b9c:	1870      	adds	r0, r6, r1
 8000b9e:	0143      	lsls	r3, r0, #5
 8000ba0:	d574      	bpl.n	8000c8c <__aeabi_fadd+0x3dc>
 8000ba2:	4930      	ldr	r1, [pc, #192]	@ (8000c64 <__aeabi_fadd+0x3b4>)
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	4001      	ands	r1, r0
 8000ba8:	0743      	lsls	r3, r0, #29
 8000baa:	d009      	beq.n	8000bc0 <__aeabi_fadd+0x310>
 8000bac:	230f      	movs	r3, #15
 8000bae:	4003      	ands	r3, r0
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d005      	beq.n	8000bc0 <__aeabi_fadd+0x310>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	1d0e      	adds	r6, r1, #4
 8000bb8:	e6c0      	b.n	800093c <__aeabi_fadd+0x8c>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	08cf      	lsrs	r7, r1, #3
 8000bbe:	e6c1      	b.n	8000944 <__aeabi_fadd+0x94>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	08cf      	lsrs	r7, r1, #3
 8000bc4:	e6be      	b.n	8000944 <__aeabi_fadd+0x94>
 8000bc6:	2520      	movs	r5, #32
 8000bc8:	0030      	movs	r0, r6
 8000bca:	40d8      	lsrs	r0, r3
 8000bcc:	1aeb      	subs	r3, r5, r3
 8000bce:	409e      	lsls	r6, r3
 8000bd0:	0033      	movs	r3, r6
 8000bd2:	1e5d      	subs	r5, r3, #1
 8000bd4:	41ab      	sbcs	r3, r5
 8000bd6:	4303      	orrs	r3, r0
 8000bd8:	0015      	movs	r5, r2
 8000bda:	185e      	adds	r6, r3, r1
 8000bdc:	e7a0      	b.n	8000b20 <__aeabi_fadd+0x270>
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fadd+0x334>
 8000be2:	e765      	b.n	8000ab0 <__aeabi_fadd+0x200>
 8000be4:	464c      	mov	r4, r9
 8000be6:	4667      	mov	r7, ip
 8000be8:	e6ac      	b.n	8000944 <__aeabi_fadd+0x94>
 8000bea:	1b8f      	subs	r7, r1, r6
 8000bec:	017b      	lsls	r3, r7, #5
 8000bee:	d52e      	bpl.n	8000c4e <__aeabi_fadd+0x39e>
 8000bf0:	01bf      	lsls	r7, r7, #6
 8000bf2:	09bf      	lsrs	r7, r7, #6
 8000bf4:	0038      	movs	r0, r7
 8000bf6:	f002 ff0f 	bl	8003a18 <__clzsi2>
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	3805      	subs	r0, #5
 8000bfe:	4083      	lsls	r3, r0
 8000c00:	464c      	mov	r4, r9
 8000c02:	3501      	adds	r5, #1
 8000c04:	e710      	b.n	8000a28 <__aeabi_fadd+0x178>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fadd+0x35c>
 8000c0a:	e740      	b.n	8000a8e <__aeabi_fadd+0x1de>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fadd+0x362>
 8000c10:	e741      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	03db      	lsls	r3, r3, #15
 8000c16:	429f      	cmp	r7, r3
 8000c18:	d200      	bcs.n	8000c1c <__aeabi_fadd+0x36c>
 8000c1a:	e73c      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c1c:	459c      	cmp	ip, r3
 8000c1e:	d300      	bcc.n	8000c22 <__aeabi_fadd+0x372>
 8000c20:	e739      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c22:	4667      	mov	r7, ip
 8000c24:	e737      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fadd+0x37c>
 8000c2a:	e734      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	03db      	lsls	r3, r3, #15
 8000c30:	429f      	cmp	r7, r3
 8000c32:	d200      	bcs.n	8000c36 <__aeabi_fadd+0x386>
 8000c34:	e72f      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c36:	459c      	cmp	ip, r3
 8000c38:	d300      	bcc.n	8000c3c <__aeabi_fadd+0x38c>
 8000c3a:	e72c      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c3c:	464c      	mov	r4, r9
 8000c3e:	4667      	mov	r7, ip
 8000c40:	e729      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fadd+0x398>
 8000c46:	e734      	b.n	8000ab2 <__aeabi_fadd+0x202>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	08cf      	lsrs	r7, r1, #3
 8000c4c:	e67a      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c4e:	464c      	mov	r4, r9
 8000c50:	2301      	movs	r3, #1
 8000c52:	08ff      	lsrs	r7, r7, #3
 8000c54:	e676      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fadd+0x3ac>
 8000c5a:	e729      	b.n	8000ab0 <__aeabi_fadd+0x200>
 8000c5c:	08ff      	lsrs	r7, r7, #3
 8000c5e:	e671      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c60:	fbffffff 	.word	0xfbffffff
 8000c64:	7dffffff 	.word	0x7dffffff
 8000c68:	2280      	movs	r2, #128	@ 0x80
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	20ff      	movs	r0, #255	@ 0xff
 8000c6e:	03d2      	lsls	r2, r2, #15
 8000c70:	e69d      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000c72:	2300      	movs	r3, #0
 8000c74:	e666      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c76:	2300      	movs	r3, #0
 8000c78:	08d7      	lsrs	r7, r2, #3
 8000c7a:	e663      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	0172      	lsls	r2, r6, #5
 8000c80:	d500      	bpl.n	8000c84 <__aeabi_fadd+0x3d4>
 8000c82:	e6e7      	b.n	8000a54 <__aeabi_fadd+0x1a4>
 8000c84:	0031      	movs	r1, r6
 8000c86:	2300      	movs	r3, #0
 8000c88:	08cf      	lsrs	r7, r1, #3
 8000c8a:	e65b      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	08c7      	lsrs	r7, r0, #3
 8000c90:	e658      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c92:	46c0      	nop			@ (mov r8, r8)

08000c94 <__aeabi_fdiv>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	4646      	mov	r6, r8
 8000c98:	464f      	mov	r7, r9
 8000c9a:	46d6      	mov	lr, sl
 8000c9c:	0245      	lsls	r5, r0, #9
 8000c9e:	b5c0      	push	{r6, r7, lr}
 8000ca0:	0fc3      	lsrs	r3, r0, #31
 8000ca2:	0047      	lsls	r7, r0, #1
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	1c0e      	adds	r6, r1, #0
 8000ca8:	0a6d      	lsrs	r5, r5, #9
 8000caa:	0e3f      	lsrs	r7, r7, #24
 8000cac:	d05b      	beq.n	8000d66 <__aeabi_fdiv+0xd2>
 8000cae:	2fff      	cmp	r7, #255	@ 0xff
 8000cb0:	d021      	beq.n	8000cf6 <__aeabi_fdiv+0x62>
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	00ed      	lsls	r5, r5, #3
 8000cb6:	04db      	lsls	r3, r3, #19
 8000cb8:	431d      	orrs	r5, r3
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4699      	mov	r9, r3
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cc2:	0274      	lsls	r4, r6, #9
 8000cc4:	0073      	lsls	r3, r6, #1
 8000cc6:	0a64      	lsrs	r4, r4, #9
 8000cc8:	0e1b      	lsrs	r3, r3, #24
 8000cca:	0ff6      	lsrs	r6, r6, #31
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d020      	beq.n	8000d12 <__aeabi_fdiv+0x7e>
 8000cd0:	2bff      	cmp	r3, #255	@ 0xff
 8000cd2:	d043      	beq.n	8000d5c <__aeabi_fdiv+0xc8>
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	00e4      	lsls	r4, r4, #3
 8000cda:	04d2      	lsls	r2, r2, #19
 8000cdc:	4314      	orrs	r4, r2
 8000cde:	3b7f      	subs	r3, #127	@ 0x7f
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	1aff      	subs	r7, r7, r3
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	4072      	eors	r2, r6
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d900      	bls.n	8000cee <__aeabi_fdiv+0x5a>
 8000cec:	e09d      	b.n	8000e2a <__aeabi_fdiv+0x196>
 8000cee:	4971      	ldr	r1, [pc, #452]	@ (8000eb4 <__aeabi_fdiv+0x220>)
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	58cb      	ldr	r3, [r1, r3]
 8000cf4:	469f      	mov	pc, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d15a      	bne.n	8000db0 <__aeabi_fdiv+0x11c>
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	3b06      	subs	r3, #6
 8000d00:	0274      	lsls	r4, r6, #9
 8000d02:	469a      	mov	sl, r3
 8000d04:	0073      	lsls	r3, r6, #1
 8000d06:	27ff      	movs	r7, #255	@ 0xff
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	0e1b      	lsrs	r3, r3, #24
 8000d0c:	0ff6      	lsrs	r6, r6, #31
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1de      	bne.n	8000cd0 <__aeabi_fdiv+0x3c>
 8000d12:	2c00      	cmp	r4, #0
 8000d14:	d13b      	bne.n	8000d8e <__aeabi_fdiv+0xfa>
 8000d16:	2301      	movs	r3, #1
 8000d18:	4642      	mov	r2, r8
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	4072      	eors	r2, r6
 8000d1e:	4319      	orrs	r1, r3
 8000d20:	290e      	cmp	r1, #14
 8000d22:	d818      	bhi.n	8000d56 <__aeabi_fdiv+0xc2>
 8000d24:	4864      	ldr	r0, [pc, #400]	@ (8000eb8 <__aeabi_fdiv+0x224>)
 8000d26:	0089      	lsls	r1, r1, #2
 8000d28:	5841      	ldr	r1, [r0, r1]
 8000d2a:	468f      	mov	pc, r1
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fdiv+0xa0>
 8000d32:	e0b8      	b.n	8000ea6 <__aeabi_fdiv+0x212>
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d06e      	beq.n	8000e16 <__aeabi_fdiv+0x182>
 8000d38:	4642      	mov	r2, r8
 8000d3a:	002c      	movs	r4, r5
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d140      	bne.n	8000dc2 <__aeabi_fdiv+0x12e>
 8000d40:	2000      	movs	r0, #0
 8000d42:	2400      	movs	r4, #0
 8000d44:	05c0      	lsls	r0, r0, #23
 8000d46:	4320      	orrs	r0, r4
 8000d48:	07d2      	lsls	r2, r2, #31
 8000d4a:	4310      	orrs	r0, r2
 8000d4c:	bce0      	pop	{r5, r6, r7}
 8000d4e:	46ba      	mov	sl, r7
 8000d50:	46b1      	mov	r9, r6
 8000d52:	46a8      	mov	r8, r5
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d56:	20ff      	movs	r0, #255	@ 0xff
 8000d58:	2400      	movs	r4, #0
 8000d5a:	e7f3      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000d5c:	2c00      	cmp	r4, #0
 8000d5e:	d120      	bne.n	8000da2 <__aeabi_fdiv+0x10e>
 8000d60:	2302      	movs	r3, #2
 8000d62:	3fff      	subs	r7, #255	@ 0xff
 8000d64:	e7d8      	b.n	8000d18 <__aeabi_fdiv+0x84>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d105      	bne.n	8000d76 <__aeabi_fdiv+0xe2>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	4699      	mov	r9, r3
 8000d6e:	3b03      	subs	r3, #3
 8000d70:	2700      	movs	r7, #0
 8000d72:	469a      	mov	sl, r3
 8000d74:	e7a5      	b.n	8000cc2 <__aeabi_fdiv+0x2e>
 8000d76:	0028      	movs	r0, r5
 8000d78:	f002 fe4e 	bl	8003a18 <__clzsi2>
 8000d7c:	2776      	movs	r7, #118	@ 0x76
 8000d7e:	1f43      	subs	r3, r0, #5
 8000d80:	409d      	lsls	r5, r3
 8000d82:	2300      	movs	r3, #0
 8000d84:	427f      	negs	r7, r7
 8000d86:	4699      	mov	r9, r3
 8000d88:	469a      	mov	sl, r3
 8000d8a:	1a3f      	subs	r7, r7, r0
 8000d8c:	e799      	b.n	8000cc2 <__aeabi_fdiv+0x2e>
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f002 fe42 	bl	8003a18 <__clzsi2>
 8000d94:	1f43      	subs	r3, r0, #5
 8000d96:	409c      	lsls	r4, r3
 8000d98:	2376      	movs	r3, #118	@ 0x76
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	1a1b      	subs	r3, r3, r0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	e79e      	b.n	8000ce0 <__aeabi_fdiv+0x4c>
 8000da2:	2303      	movs	r3, #3
 8000da4:	464a      	mov	r2, r9
 8000da6:	431a      	orrs	r2, r3
 8000da8:	4691      	mov	r9, r2
 8000daa:	2003      	movs	r0, #3
 8000dac:	33fc      	adds	r3, #252	@ 0xfc
 8000dae:	e797      	b.n	8000ce0 <__aeabi_fdiv+0x4c>
 8000db0:	230c      	movs	r3, #12
 8000db2:	4699      	mov	r9, r3
 8000db4:	3b09      	subs	r3, #9
 8000db6:	27ff      	movs	r7, #255	@ 0xff
 8000db8:	469a      	mov	sl, r3
 8000dba:	e782      	b.n	8000cc2 <__aeabi_fdiv+0x2e>
 8000dbc:	2803      	cmp	r0, #3
 8000dbe:	d02c      	beq.n	8000e1a <__aeabi_fdiv+0x186>
 8000dc0:	0032      	movs	r2, r6
 8000dc2:	0038      	movs	r0, r7
 8000dc4:	307f      	adds	r0, #127	@ 0x7f
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	dd47      	ble.n	8000e5a <__aeabi_fdiv+0x1c6>
 8000dca:	0763      	lsls	r3, r4, #29
 8000dcc:	d004      	beq.n	8000dd8 <__aeabi_fdiv+0x144>
 8000dce:	230f      	movs	r3, #15
 8000dd0:	4023      	ands	r3, r4
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_fdiv+0x144>
 8000dd6:	3404      	adds	r4, #4
 8000dd8:	0123      	lsls	r3, r4, #4
 8000dda:	d503      	bpl.n	8000de4 <__aeabi_fdiv+0x150>
 8000ddc:	0038      	movs	r0, r7
 8000dde:	4b37      	ldr	r3, [pc, #220]	@ (8000ebc <__aeabi_fdiv+0x228>)
 8000de0:	3080      	adds	r0, #128	@ 0x80
 8000de2:	401c      	ands	r4, r3
 8000de4:	28fe      	cmp	r0, #254	@ 0xfe
 8000de6:	dcb6      	bgt.n	8000d56 <__aeabi_fdiv+0xc2>
 8000de8:	01a4      	lsls	r4, r4, #6
 8000dea:	0a64      	lsrs	r4, r4, #9
 8000dec:	b2c0      	uxtb	r0, r0
 8000dee:	e7a9      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000df0:	2480      	movs	r4, #128	@ 0x80
 8000df2:	2200      	movs	r2, #0
 8000df4:	20ff      	movs	r0, #255	@ 0xff
 8000df6:	03e4      	lsls	r4, r4, #15
 8000df8:	e7a4      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000dfa:	2380      	movs	r3, #128	@ 0x80
 8000dfc:	03db      	lsls	r3, r3, #15
 8000dfe:	421d      	tst	r5, r3
 8000e00:	d001      	beq.n	8000e06 <__aeabi_fdiv+0x172>
 8000e02:	421c      	tst	r4, r3
 8000e04:	d00b      	beq.n	8000e1e <__aeabi_fdiv+0x18a>
 8000e06:	2480      	movs	r4, #128	@ 0x80
 8000e08:	03e4      	lsls	r4, r4, #15
 8000e0a:	432c      	orrs	r4, r5
 8000e0c:	0264      	lsls	r4, r4, #9
 8000e0e:	4642      	mov	r2, r8
 8000e10:	20ff      	movs	r0, #255	@ 0xff
 8000e12:	0a64      	lsrs	r4, r4, #9
 8000e14:	e796      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000e16:	4646      	mov	r6, r8
 8000e18:	002c      	movs	r4, r5
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	03db      	lsls	r3, r3, #15
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	0264      	lsls	r4, r4, #9
 8000e22:	0032      	movs	r2, r6
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	0a64      	lsrs	r4, r4, #9
 8000e28:	e78c      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000e2a:	016d      	lsls	r5, r5, #5
 8000e2c:	0160      	lsls	r0, r4, #5
 8000e2e:	4285      	cmp	r5, r0
 8000e30:	d22d      	bcs.n	8000e8e <__aeabi_fdiv+0x1fa>
 8000e32:	231b      	movs	r3, #27
 8000e34:	2400      	movs	r4, #0
 8000e36:	3f01      	subs	r7, #1
 8000e38:	2601      	movs	r6, #1
 8000e3a:	0029      	movs	r1, r5
 8000e3c:	0064      	lsls	r4, r4, #1
 8000e3e:	006d      	lsls	r5, r5, #1
 8000e40:	2900      	cmp	r1, #0
 8000e42:	db01      	blt.n	8000e48 <__aeabi_fdiv+0x1b4>
 8000e44:	4285      	cmp	r5, r0
 8000e46:	d301      	bcc.n	8000e4c <__aeabi_fdiv+0x1b8>
 8000e48:	1a2d      	subs	r5, r5, r0
 8000e4a:	4334      	orrs	r4, r6
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f3      	bne.n	8000e3a <__aeabi_fdiv+0x1a6>
 8000e52:	1e6b      	subs	r3, r5, #1
 8000e54:	419d      	sbcs	r5, r3
 8000e56:	432c      	orrs	r4, r5
 8000e58:	e7b3      	b.n	8000dc2 <__aeabi_fdiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	1a1b      	subs	r3, r3, r0
 8000e5e:	2b1b      	cmp	r3, #27
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_fdiv+0x1d0>
 8000e62:	e76d      	b.n	8000d40 <__aeabi_fdiv+0xac>
 8000e64:	0021      	movs	r1, r4
 8000e66:	379e      	adds	r7, #158	@ 0x9e
 8000e68:	40d9      	lsrs	r1, r3
 8000e6a:	40bc      	lsls	r4, r7
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	1e61      	subs	r1, r4, #1
 8000e70:	418c      	sbcs	r4, r1
 8000e72:	4323      	orrs	r3, r4
 8000e74:	0759      	lsls	r1, r3, #29
 8000e76:	d004      	beq.n	8000e82 <__aeabi_fdiv+0x1ee>
 8000e78:	210f      	movs	r1, #15
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	2904      	cmp	r1, #4
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fdiv+0x1ee>
 8000e80:	3304      	adds	r3, #4
 8000e82:	0159      	lsls	r1, r3, #5
 8000e84:	d413      	bmi.n	8000eae <__aeabi_fdiv+0x21a>
 8000e86:	019b      	lsls	r3, r3, #6
 8000e88:	2000      	movs	r0, #0
 8000e8a:	0a5c      	lsrs	r4, r3, #9
 8000e8c:	e75a      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000e8e:	231a      	movs	r3, #26
 8000e90:	2401      	movs	r4, #1
 8000e92:	1a2d      	subs	r5, r5, r0
 8000e94:	e7d0      	b.n	8000e38 <__aeabi_fdiv+0x1a4>
 8000e96:	1e98      	subs	r0, r3, #2
 8000e98:	4243      	negs	r3, r0
 8000e9a:	4158      	adcs	r0, r3
 8000e9c:	4240      	negs	r0, r0
 8000e9e:	0032      	movs	r2, r6
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	b2c0      	uxtb	r0, r0
 8000ea4:	e74e      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	20ff      	movs	r0, #255	@ 0xff
 8000eaa:	2400      	movs	r4, #0
 8000eac:	e74a      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000eae:	2001      	movs	r0, #1
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	e747      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000eb4:	08011928 	.word	0x08011928
 8000eb8:	08011968 	.word	0x08011968
 8000ebc:	f7ffffff 	.word	0xf7ffffff

08000ec0 <__eqsf2>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	0042      	lsls	r2, r0, #1
 8000ec4:	024e      	lsls	r6, r1, #9
 8000ec6:	004c      	lsls	r4, r1, #1
 8000ec8:	0245      	lsls	r5, r0, #9
 8000eca:	0a6d      	lsrs	r5, r5, #9
 8000ecc:	0e12      	lsrs	r2, r2, #24
 8000ece:	0fc3      	lsrs	r3, r0, #31
 8000ed0:	0a76      	lsrs	r6, r6, #9
 8000ed2:	0e24      	lsrs	r4, r4, #24
 8000ed4:	0fc9      	lsrs	r1, r1, #31
 8000ed6:	2aff      	cmp	r2, #255	@ 0xff
 8000ed8:	d010      	beq.n	8000efc <__eqsf2+0x3c>
 8000eda:	2cff      	cmp	r4, #255	@ 0xff
 8000edc:	d00c      	beq.n	8000ef8 <__eqsf2+0x38>
 8000ede:	2001      	movs	r0, #1
 8000ee0:	42a2      	cmp	r2, r4
 8000ee2:	d10a      	bne.n	8000efa <__eqsf2+0x3a>
 8000ee4:	42b5      	cmp	r5, r6
 8000ee6:	d108      	bne.n	8000efa <__eqsf2+0x3a>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d00f      	beq.n	8000f0c <__eqsf2+0x4c>
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d104      	bne.n	8000efa <__eqsf2+0x3a>
 8000ef0:	0028      	movs	r0, r5
 8000ef2:	1e43      	subs	r3, r0, #1
 8000ef4:	4198      	sbcs	r0, r3
 8000ef6:	e000      	b.n	8000efa <__eqsf2+0x3a>
 8000ef8:	2001      	movs	r0, #1
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	2001      	movs	r0, #1
 8000efe:	2cff      	cmp	r4, #255	@ 0xff
 8000f00:	d1fb      	bne.n	8000efa <__eqsf2+0x3a>
 8000f02:	4335      	orrs	r5, r6
 8000f04:	d1f9      	bne.n	8000efa <__eqsf2+0x3a>
 8000f06:	404b      	eors	r3, r1
 8000f08:	0018      	movs	r0, r3
 8000f0a:	e7f6      	b.n	8000efa <__eqsf2+0x3a>
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	e7f4      	b.n	8000efa <__eqsf2+0x3a>

08000f10 <__gesf2>:
 8000f10:	b530      	push	{r4, r5, lr}
 8000f12:	0042      	lsls	r2, r0, #1
 8000f14:	0244      	lsls	r4, r0, #9
 8000f16:	024d      	lsls	r5, r1, #9
 8000f18:	0fc3      	lsrs	r3, r0, #31
 8000f1a:	0048      	lsls	r0, r1, #1
 8000f1c:	0a64      	lsrs	r4, r4, #9
 8000f1e:	0e12      	lsrs	r2, r2, #24
 8000f20:	0a6d      	lsrs	r5, r5, #9
 8000f22:	0e00      	lsrs	r0, r0, #24
 8000f24:	0fc9      	lsrs	r1, r1, #31
 8000f26:	2aff      	cmp	r2, #255	@ 0xff
 8000f28:	d018      	beq.n	8000f5c <__gesf2+0x4c>
 8000f2a:	28ff      	cmp	r0, #255	@ 0xff
 8000f2c:	d00a      	beq.n	8000f44 <__gesf2+0x34>
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d11e      	bne.n	8000f70 <__gesf2+0x60>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d10a      	bne.n	8000f4c <__gesf2+0x3c>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d029      	beq.n	8000f8e <__gesf2+0x7e>
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d12d      	bne.n	8000f9a <__gesf2+0x8a>
 8000f3e:	0048      	lsls	r0, r1, #1
 8000f40:	3801      	subs	r0, #1
 8000f42:	bd30      	pop	{r4, r5, pc}
 8000f44:	2d00      	cmp	r5, #0
 8000f46:	d125      	bne.n	8000f94 <__gesf2+0x84>
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d101      	bne.n	8000f50 <__gesf2+0x40>
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d0f6      	beq.n	8000f3e <__gesf2+0x2e>
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d019      	beq.n	8000f88 <__gesf2+0x78>
 8000f54:	2001      	movs	r0, #1
 8000f56:	425b      	negs	r3, r3
 8000f58:	4318      	orrs	r0, r3
 8000f5a:	e7f2      	b.n	8000f42 <__gesf2+0x32>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d119      	bne.n	8000f94 <__gesf2+0x84>
 8000f60:	28ff      	cmp	r0, #255	@ 0xff
 8000f62:	d1f7      	bne.n	8000f54 <__gesf2+0x44>
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d115      	bne.n	8000f94 <__gesf2+0x84>
 8000f68:	2000      	movs	r0, #0
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d1f2      	bne.n	8000f54 <__gesf2+0x44>
 8000f6e:	e7e8      	b.n	8000f42 <__gesf2+0x32>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d0ef      	beq.n	8000f54 <__gesf2+0x44>
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d1ed      	bne.n	8000f54 <__gesf2+0x44>
 8000f78:	4282      	cmp	r2, r0
 8000f7a:	dceb      	bgt.n	8000f54 <__gesf2+0x44>
 8000f7c:	db04      	blt.n	8000f88 <__gesf2+0x78>
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	d8e8      	bhi.n	8000f54 <__gesf2+0x44>
 8000f82:	2000      	movs	r0, #0
 8000f84:	42ac      	cmp	r4, r5
 8000f86:	d2dc      	bcs.n	8000f42 <__gesf2+0x32>
 8000f88:	0058      	lsls	r0, r3, #1
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7d9      	b.n	8000f42 <__gesf2+0x32>
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	d0d7      	beq.n	8000f42 <__gesf2+0x32>
 8000f92:	e7df      	b.n	8000f54 <__gesf2+0x44>
 8000f94:	2002      	movs	r0, #2
 8000f96:	4240      	negs	r0, r0
 8000f98:	e7d3      	b.n	8000f42 <__gesf2+0x32>
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d1da      	bne.n	8000f54 <__gesf2+0x44>
 8000f9e:	e7ee      	b.n	8000f7e <__gesf2+0x6e>

08000fa0 <__lesf2>:
 8000fa0:	b530      	push	{r4, r5, lr}
 8000fa2:	0042      	lsls	r2, r0, #1
 8000fa4:	0244      	lsls	r4, r0, #9
 8000fa6:	024d      	lsls	r5, r1, #9
 8000fa8:	0fc3      	lsrs	r3, r0, #31
 8000faa:	0048      	lsls	r0, r1, #1
 8000fac:	0a64      	lsrs	r4, r4, #9
 8000fae:	0e12      	lsrs	r2, r2, #24
 8000fb0:	0a6d      	lsrs	r5, r5, #9
 8000fb2:	0e00      	lsrs	r0, r0, #24
 8000fb4:	0fc9      	lsrs	r1, r1, #31
 8000fb6:	2aff      	cmp	r2, #255	@ 0xff
 8000fb8:	d017      	beq.n	8000fea <__lesf2+0x4a>
 8000fba:	28ff      	cmp	r0, #255	@ 0xff
 8000fbc:	d00a      	beq.n	8000fd4 <__lesf2+0x34>
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d11b      	bne.n	8000ffa <__lesf2+0x5a>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d10a      	bne.n	8000fdc <__lesf2+0x3c>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d01d      	beq.n	8001006 <__lesf2+0x66>
 8000fca:	2c00      	cmp	r4, #0
 8000fcc:	d12d      	bne.n	800102a <__lesf2+0x8a>
 8000fce:	0048      	lsls	r0, r1, #1
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e011      	b.n	8000ff8 <__lesf2+0x58>
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d10e      	bne.n	8000ff6 <__lesf2+0x56>
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d101      	bne.n	8000fe0 <__lesf2+0x40>
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	d0f6      	beq.n	8000fce <__lesf2+0x2e>
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d10c      	bne.n	8000ffe <__lesf2+0x5e>
 8000fe4:	0058      	lsls	r0, r3, #1
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e006      	b.n	8000ff8 <__lesf2+0x58>
 8000fea:	2c00      	cmp	r4, #0
 8000fec:	d103      	bne.n	8000ff6 <__lesf2+0x56>
 8000fee:	28ff      	cmp	r0, #255	@ 0xff
 8000ff0:	d105      	bne.n	8000ffe <__lesf2+0x5e>
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d015      	beq.n	8001022 <__lesf2+0x82>
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	bd30      	pop	{r4, r5, pc}
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d106      	bne.n	800100c <__lesf2+0x6c>
 8000ffe:	2001      	movs	r0, #1
 8001000:	425b      	negs	r3, r3
 8001002:	4318      	orrs	r0, r3
 8001004:	e7f8      	b.n	8000ff8 <__lesf2+0x58>
 8001006:	2c00      	cmp	r4, #0
 8001008:	d0f6      	beq.n	8000ff8 <__lesf2+0x58>
 800100a:	e7f8      	b.n	8000ffe <__lesf2+0x5e>
 800100c:	428b      	cmp	r3, r1
 800100e:	d1f6      	bne.n	8000ffe <__lesf2+0x5e>
 8001010:	4282      	cmp	r2, r0
 8001012:	dcf4      	bgt.n	8000ffe <__lesf2+0x5e>
 8001014:	dbe6      	blt.n	8000fe4 <__lesf2+0x44>
 8001016:	42ac      	cmp	r4, r5
 8001018:	d8f1      	bhi.n	8000ffe <__lesf2+0x5e>
 800101a:	2000      	movs	r0, #0
 800101c:	42ac      	cmp	r4, r5
 800101e:	d2eb      	bcs.n	8000ff8 <__lesf2+0x58>
 8001020:	e7e0      	b.n	8000fe4 <__lesf2+0x44>
 8001022:	2000      	movs	r0, #0
 8001024:	428b      	cmp	r3, r1
 8001026:	d1ea      	bne.n	8000ffe <__lesf2+0x5e>
 8001028:	e7e6      	b.n	8000ff8 <__lesf2+0x58>
 800102a:	428b      	cmp	r3, r1
 800102c:	d1e7      	bne.n	8000ffe <__lesf2+0x5e>
 800102e:	e7f2      	b.n	8001016 <__lesf2+0x76>

08001030 <__aeabi_fmul>:
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	464f      	mov	r7, r9
 8001034:	4646      	mov	r6, r8
 8001036:	46d6      	mov	lr, sl
 8001038:	0044      	lsls	r4, r0, #1
 800103a:	b5c0      	push	{r6, r7, lr}
 800103c:	0246      	lsls	r6, r0, #9
 800103e:	1c0f      	adds	r7, r1, #0
 8001040:	0a76      	lsrs	r6, r6, #9
 8001042:	0e24      	lsrs	r4, r4, #24
 8001044:	0fc5      	lsrs	r5, r0, #31
 8001046:	2c00      	cmp	r4, #0
 8001048:	d100      	bne.n	800104c <__aeabi_fmul+0x1c>
 800104a:	e0da      	b.n	8001202 <__aeabi_fmul+0x1d2>
 800104c:	2cff      	cmp	r4, #255	@ 0xff
 800104e:	d074      	beq.n	800113a <__aeabi_fmul+0x10a>
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	00f6      	lsls	r6, r6, #3
 8001054:	04db      	lsls	r3, r3, #19
 8001056:	431e      	orrs	r6, r3
 8001058:	2300      	movs	r3, #0
 800105a:	4699      	mov	r9, r3
 800105c:	469a      	mov	sl, r3
 800105e:	3c7f      	subs	r4, #127	@ 0x7f
 8001060:	027b      	lsls	r3, r7, #9
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	4698      	mov	r8, r3
 8001066:	007b      	lsls	r3, r7, #1
 8001068:	0e1b      	lsrs	r3, r3, #24
 800106a:	0fff      	lsrs	r7, r7, #31
 800106c:	2b00      	cmp	r3, #0
 800106e:	d074      	beq.n	800115a <__aeabi_fmul+0x12a>
 8001070:	2bff      	cmp	r3, #255	@ 0xff
 8001072:	d100      	bne.n	8001076 <__aeabi_fmul+0x46>
 8001074:	e08e      	b.n	8001194 <__aeabi_fmul+0x164>
 8001076:	4642      	mov	r2, r8
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	00d2      	lsls	r2, r2, #3
 800107c:	04c9      	lsls	r1, r1, #19
 800107e:	4311      	orrs	r1, r2
 8001080:	3b7f      	subs	r3, #127	@ 0x7f
 8001082:	002a      	movs	r2, r5
 8001084:	18e4      	adds	r4, r4, r3
 8001086:	464b      	mov	r3, r9
 8001088:	407a      	eors	r2, r7
 800108a:	4688      	mov	r8, r1
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	2b0a      	cmp	r3, #10
 8001090:	dc75      	bgt.n	800117e <__aeabi_fmul+0x14e>
 8001092:	464b      	mov	r3, r9
 8001094:	2000      	movs	r0, #0
 8001096:	2b02      	cmp	r3, #2
 8001098:	dd0f      	ble.n	80010ba <__aeabi_fmul+0x8a>
 800109a:	4649      	mov	r1, r9
 800109c:	2301      	movs	r3, #1
 800109e:	408b      	lsls	r3, r1
 80010a0:	21a6      	movs	r1, #166	@ 0xa6
 80010a2:	00c9      	lsls	r1, r1, #3
 80010a4:	420b      	tst	r3, r1
 80010a6:	d169      	bne.n	800117c <__aeabi_fmul+0x14c>
 80010a8:	2190      	movs	r1, #144	@ 0x90
 80010aa:	0089      	lsls	r1, r1, #2
 80010ac:	420b      	tst	r3, r1
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fmul+0x82>
 80010b0:	e100      	b.n	80012b4 <__aeabi_fmul+0x284>
 80010b2:	2188      	movs	r1, #136	@ 0x88
 80010b4:	4219      	tst	r1, r3
 80010b6:	d000      	beq.n	80010ba <__aeabi_fmul+0x8a>
 80010b8:	e0f5      	b.n	80012a6 <__aeabi_fmul+0x276>
 80010ba:	4641      	mov	r1, r8
 80010bc:	0409      	lsls	r1, r1, #16
 80010be:	0c09      	lsrs	r1, r1, #16
 80010c0:	4643      	mov	r3, r8
 80010c2:	0008      	movs	r0, r1
 80010c4:	0c35      	lsrs	r5, r6, #16
 80010c6:	0436      	lsls	r6, r6, #16
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	0c36      	lsrs	r6, r6, #16
 80010cc:	4370      	muls	r0, r6
 80010ce:	4369      	muls	r1, r5
 80010d0:	435e      	muls	r6, r3
 80010d2:	435d      	muls	r5, r3
 80010d4:	1876      	adds	r6, r6, r1
 80010d6:	0c03      	lsrs	r3, r0, #16
 80010d8:	199b      	adds	r3, r3, r6
 80010da:	4299      	cmp	r1, r3
 80010dc:	d903      	bls.n	80010e6 <__aeabi_fmul+0xb6>
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	0249      	lsls	r1, r1, #9
 80010e2:	468c      	mov	ip, r1
 80010e4:	4465      	add	r5, ip
 80010e6:	0400      	lsls	r0, r0, #16
 80010e8:	0419      	lsls	r1, r3, #16
 80010ea:	0c00      	lsrs	r0, r0, #16
 80010ec:	1809      	adds	r1, r1, r0
 80010ee:	018e      	lsls	r6, r1, #6
 80010f0:	1e70      	subs	r0, r6, #1
 80010f2:	4186      	sbcs	r6, r0
 80010f4:	0c1b      	lsrs	r3, r3, #16
 80010f6:	0e89      	lsrs	r1, r1, #26
 80010f8:	195b      	adds	r3, r3, r5
 80010fa:	430e      	orrs	r6, r1
 80010fc:	019b      	lsls	r3, r3, #6
 80010fe:	431e      	orrs	r6, r3
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	d46c      	bmi.n	80011de <__aeabi_fmul+0x1ae>
 8001104:	0023      	movs	r3, r4
 8001106:	337f      	adds	r3, #127	@ 0x7f
 8001108:	2b00      	cmp	r3, #0
 800110a:	dc00      	bgt.n	800110e <__aeabi_fmul+0xde>
 800110c:	e0b1      	b.n	8001272 <__aeabi_fmul+0x242>
 800110e:	0015      	movs	r5, r2
 8001110:	0771      	lsls	r1, r6, #29
 8001112:	d00b      	beq.n	800112c <__aeabi_fmul+0xfc>
 8001114:	200f      	movs	r0, #15
 8001116:	0021      	movs	r1, r4
 8001118:	4030      	ands	r0, r6
 800111a:	2804      	cmp	r0, #4
 800111c:	d006      	beq.n	800112c <__aeabi_fmul+0xfc>
 800111e:	3604      	adds	r6, #4
 8001120:	0132      	lsls	r2, r6, #4
 8001122:	d503      	bpl.n	800112c <__aeabi_fmul+0xfc>
 8001124:	4b6e      	ldr	r3, [pc, #440]	@ (80012e0 <__aeabi_fmul+0x2b0>)
 8001126:	401e      	ands	r6, r3
 8001128:	000b      	movs	r3, r1
 800112a:	3380      	adds	r3, #128	@ 0x80
 800112c:	2bfe      	cmp	r3, #254	@ 0xfe
 800112e:	dd00      	ble.n	8001132 <__aeabi_fmul+0x102>
 8001130:	e0bd      	b.n	80012ae <__aeabi_fmul+0x27e>
 8001132:	01b2      	lsls	r2, r6, #6
 8001134:	0a52      	lsrs	r2, r2, #9
 8001136:	b2db      	uxtb	r3, r3
 8001138:	e048      	b.n	80011cc <__aeabi_fmul+0x19c>
 800113a:	2e00      	cmp	r6, #0
 800113c:	d000      	beq.n	8001140 <__aeabi_fmul+0x110>
 800113e:	e092      	b.n	8001266 <__aeabi_fmul+0x236>
 8001140:	2308      	movs	r3, #8
 8001142:	4699      	mov	r9, r3
 8001144:	3b06      	subs	r3, #6
 8001146:	469a      	mov	sl, r3
 8001148:	027b      	lsls	r3, r7, #9
 800114a:	0a5b      	lsrs	r3, r3, #9
 800114c:	4698      	mov	r8, r3
 800114e:	007b      	lsls	r3, r7, #1
 8001150:	24ff      	movs	r4, #255	@ 0xff
 8001152:	0e1b      	lsrs	r3, r3, #24
 8001154:	0fff      	lsrs	r7, r7, #31
 8001156:	2b00      	cmp	r3, #0
 8001158:	d18a      	bne.n	8001070 <__aeabi_fmul+0x40>
 800115a:	4642      	mov	r2, r8
 800115c:	2a00      	cmp	r2, #0
 800115e:	d164      	bne.n	800122a <__aeabi_fmul+0x1fa>
 8001160:	4649      	mov	r1, r9
 8001162:	3201      	adds	r2, #1
 8001164:	4311      	orrs	r1, r2
 8001166:	4689      	mov	r9, r1
 8001168:	290a      	cmp	r1, #10
 800116a:	dc08      	bgt.n	800117e <__aeabi_fmul+0x14e>
 800116c:	407d      	eors	r5, r7
 800116e:	2001      	movs	r0, #1
 8001170:	b2ea      	uxtb	r2, r5
 8001172:	2902      	cmp	r1, #2
 8001174:	dc91      	bgt.n	800109a <__aeabi_fmul+0x6a>
 8001176:	0015      	movs	r5, r2
 8001178:	2200      	movs	r2, #0
 800117a:	e027      	b.n	80011cc <__aeabi_fmul+0x19c>
 800117c:	0015      	movs	r5, r2
 800117e:	4653      	mov	r3, sl
 8001180:	2b02      	cmp	r3, #2
 8001182:	d100      	bne.n	8001186 <__aeabi_fmul+0x156>
 8001184:	e093      	b.n	80012ae <__aeabi_fmul+0x27e>
 8001186:	2b03      	cmp	r3, #3
 8001188:	d01a      	beq.n	80011c0 <__aeabi_fmul+0x190>
 800118a:	2b01      	cmp	r3, #1
 800118c:	d12c      	bne.n	80011e8 <__aeabi_fmul+0x1b8>
 800118e:	2300      	movs	r3, #0
 8001190:	2200      	movs	r2, #0
 8001192:	e01b      	b.n	80011cc <__aeabi_fmul+0x19c>
 8001194:	4643      	mov	r3, r8
 8001196:	34ff      	adds	r4, #255	@ 0xff
 8001198:	2b00      	cmp	r3, #0
 800119a:	d055      	beq.n	8001248 <__aeabi_fmul+0x218>
 800119c:	2103      	movs	r1, #3
 800119e:	464b      	mov	r3, r9
 80011a0:	430b      	orrs	r3, r1
 80011a2:	0019      	movs	r1, r3
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_fmul+0x17a>
 80011a8:	e092      	b.n	80012d0 <__aeabi_fmul+0x2a0>
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fmul+0x180>
 80011ae:	e08c      	b.n	80012ca <__aeabi_fmul+0x29a>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4216      	tst	r6, r2
 80011b6:	d003      	beq.n	80011c0 <__aeabi_fmul+0x190>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4213      	tst	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_fmul+0x190>
 80011be:	e07d      	b.n	80012bc <__aeabi_fmul+0x28c>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4332      	orrs	r2, r6
 80011c6:	0252      	lsls	r2, r2, #9
 80011c8:	0a52      	lsrs	r2, r2, #9
 80011ca:	23ff      	movs	r3, #255	@ 0xff
 80011cc:	05d8      	lsls	r0, r3, #23
 80011ce:	07ed      	lsls	r5, r5, #31
 80011d0:	4310      	orrs	r0, r2
 80011d2:	4328      	orrs	r0, r5
 80011d4:	bce0      	pop	{r5, r6, r7}
 80011d6:	46ba      	mov	sl, r7
 80011d8:	46b1      	mov	r9, r6
 80011da:	46a8      	mov	r8, r5
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	2301      	movs	r3, #1
 80011e0:	0015      	movs	r5, r2
 80011e2:	0871      	lsrs	r1, r6, #1
 80011e4:	401e      	ands	r6, r3
 80011e6:	430e      	orrs	r6, r1
 80011e8:	0023      	movs	r3, r4
 80011ea:	3380      	adds	r3, #128	@ 0x80
 80011ec:	1c61      	adds	r1, r4, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dd41      	ble.n	8001276 <__aeabi_fmul+0x246>
 80011f2:	0772      	lsls	r2, r6, #29
 80011f4:	d094      	beq.n	8001120 <__aeabi_fmul+0xf0>
 80011f6:	220f      	movs	r2, #15
 80011f8:	4032      	ands	r2, r6
 80011fa:	2a04      	cmp	r2, #4
 80011fc:	d000      	beq.n	8001200 <__aeabi_fmul+0x1d0>
 80011fe:	e78e      	b.n	800111e <__aeabi_fmul+0xee>
 8001200:	e78e      	b.n	8001120 <__aeabi_fmul+0xf0>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d105      	bne.n	8001212 <__aeabi_fmul+0x1e2>
 8001206:	2304      	movs	r3, #4
 8001208:	4699      	mov	r9, r3
 800120a:	3b03      	subs	r3, #3
 800120c:	2400      	movs	r4, #0
 800120e:	469a      	mov	sl, r3
 8001210:	e726      	b.n	8001060 <__aeabi_fmul+0x30>
 8001212:	0030      	movs	r0, r6
 8001214:	f002 fc00 	bl	8003a18 <__clzsi2>
 8001218:	2476      	movs	r4, #118	@ 0x76
 800121a:	1f43      	subs	r3, r0, #5
 800121c:	409e      	lsls	r6, r3
 800121e:	2300      	movs	r3, #0
 8001220:	4264      	negs	r4, r4
 8001222:	4699      	mov	r9, r3
 8001224:	469a      	mov	sl, r3
 8001226:	1a24      	subs	r4, r4, r0
 8001228:	e71a      	b.n	8001060 <__aeabi_fmul+0x30>
 800122a:	4640      	mov	r0, r8
 800122c:	f002 fbf4 	bl	8003a18 <__clzsi2>
 8001230:	464b      	mov	r3, r9
 8001232:	1a24      	subs	r4, r4, r0
 8001234:	3c76      	subs	r4, #118	@ 0x76
 8001236:	2b0a      	cmp	r3, #10
 8001238:	dca1      	bgt.n	800117e <__aeabi_fmul+0x14e>
 800123a:	4643      	mov	r3, r8
 800123c:	3805      	subs	r0, #5
 800123e:	4083      	lsls	r3, r0
 8001240:	407d      	eors	r5, r7
 8001242:	4698      	mov	r8, r3
 8001244:	b2ea      	uxtb	r2, r5
 8001246:	e724      	b.n	8001092 <__aeabi_fmul+0x62>
 8001248:	464a      	mov	r2, r9
 800124a:	3302      	adds	r3, #2
 800124c:	4313      	orrs	r3, r2
 800124e:	002a      	movs	r2, r5
 8001250:	407a      	eors	r2, r7
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	2b0a      	cmp	r3, #10
 8001256:	dc92      	bgt.n	800117e <__aeabi_fmul+0x14e>
 8001258:	4649      	mov	r1, r9
 800125a:	0015      	movs	r5, r2
 800125c:	2900      	cmp	r1, #0
 800125e:	d026      	beq.n	80012ae <__aeabi_fmul+0x27e>
 8001260:	4699      	mov	r9, r3
 8001262:	2002      	movs	r0, #2
 8001264:	e719      	b.n	800109a <__aeabi_fmul+0x6a>
 8001266:	230c      	movs	r3, #12
 8001268:	4699      	mov	r9, r3
 800126a:	3b09      	subs	r3, #9
 800126c:	24ff      	movs	r4, #255	@ 0xff
 800126e:	469a      	mov	sl, r3
 8001270:	e6f6      	b.n	8001060 <__aeabi_fmul+0x30>
 8001272:	0015      	movs	r5, r2
 8001274:	0021      	movs	r1, r4
 8001276:	2201      	movs	r2, #1
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b1b      	cmp	r3, #27
 800127c:	dd00      	ble.n	8001280 <__aeabi_fmul+0x250>
 800127e:	e786      	b.n	800118e <__aeabi_fmul+0x15e>
 8001280:	319e      	adds	r1, #158	@ 0x9e
 8001282:	0032      	movs	r2, r6
 8001284:	408e      	lsls	r6, r1
 8001286:	40da      	lsrs	r2, r3
 8001288:	1e73      	subs	r3, r6, #1
 800128a:	419e      	sbcs	r6, r3
 800128c:	4332      	orrs	r2, r6
 800128e:	0753      	lsls	r3, r2, #29
 8001290:	d004      	beq.n	800129c <__aeabi_fmul+0x26c>
 8001292:	230f      	movs	r3, #15
 8001294:	4013      	ands	r3, r2
 8001296:	2b04      	cmp	r3, #4
 8001298:	d000      	beq.n	800129c <__aeabi_fmul+0x26c>
 800129a:	3204      	adds	r2, #4
 800129c:	0153      	lsls	r3, r2, #5
 800129e:	d510      	bpl.n	80012c2 <__aeabi_fmul+0x292>
 80012a0:	2301      	movs	r3, #1
 80012a2:	2200      	movs	r2, #0
 80012a4:	e792      	b.n	80011cc <__aeabi_fmul+0x19c>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4646      	mov	r6, r8
 80012aa:	4682      	mov	sl, r0
 80012ac:	e767      	b.n	800117e <__aeabi_fmul+0x14e>
 80012ae:	23ff      	movs	r3, #255	@ 0xff
 80012b0:	2200      	movs	r2, #0
 80012b2:	e78b      	b.n	80011cc <__aeabi_fmul+0x19c>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	2500      	movs	r5, #0
 80012b8:	03d2      	lsls	r2, r2, #15
 80012ba:	e786      	b.n	80011ca <__aeabi_fmul+0x19a>
 80012bc:	003d      	movs	r5, r7
 80012be:	431a      	orrs	r2, r3
 80012c0:	e783      	b.n	80011ca <__aeabi_fmul+0x19a>
 80012c2:	0192      	lsls	r2, r2, #6
 80012c4:	2300      	movs	r3, #0
 80012c6:	0a52      	lsrs	r2, r2, #9
 80012c8:	e780      	b.n	80011cc <__aeabi_fmul+0x19c>
 80012ca:	003d      	movs	r5, r7
 80012cc:	4646      	mov	r6, r8
 80012ce:	e777      	b.n	80011c0 <__aeabi_fmul+0x190>
 80012d0:	002a      	movs	r2, r5
 80012d2:	2301      	movs	r3, #1
 80012d4:	407a      	eors	r2, r7
 80012d6:	408b      	lsls	r3, r1
 80012d8:	2003      	movs	r0, #3
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	e6e9      	b.n	80010b2 <__aeabi_fmul+0x82>
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	f7ffffff 	.word	0xf7ffffff

080012e4 <__aeabi_fsub>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	4647      	mov	r7, r8
 80012e8:	46ce      	mov	lr, r9
 80012ea:	0243      	lsls	r3, r0, #9
 80012ec:	b580      	push	{r7, lr}
 80012ee:	0a5f      	lsrs	r7, r3, #9
 80012f0:	099b      	lsrs	r3, r3, #6
 80012f2:	0045      	lsls	r5, r0, #1
 80012f4:	004a      	lsls	r2, r1, #1
 80012f6:	469c      	mov	ip, r3
 80012f8:	024b      	lsls	r3, r1, #9
 80012fa:	0fc4      	lsrs	r4, r0, #31
 80012fc:	0fce      	lsrs	r6, r1, #31
 80012fe:	0e2d      	lsrs	r5, r5, #24
 8001300:	0a58      	lsrs	r0, r3, #9
 8001302:	0e12      	lsrs	r2, r2, #24
 8001304:	0999      	lsrs	r1, r3, #6
 8001306:	2aff      	cmp	r2, #255	@ 0xff
 8001308:	d06b      	beq.n	80013e2 <__aeabi_fsub+0xfe>
 800130a:	2301      	movs	r3, #1
 800130c:	405e      	eors	r6, r3
 800130e:	1aab      	subs	r3, r5, r2
 8001310:	42b4      	cmp	r4, r6
 8001312:	d04b      	beq.n	80013ac <__aeabi_fsub+0xc8>
 8001314:	2b00      	cmp	r3, #0
 8001316:	dc00      	bgt.n	800131a <__aeabi_fsub+0x36>
 8001318:	e0ff      	b.n	800151a <__aeabi_fsub+0x236>
 800131a:	2a00      	cmp	r2, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x3c>
 800131e:	e088      	b.n	8001432 <__aeabi_fsub+0x14e>
 8001320:	2dff      	cmp	r5, #255	@ 0xff
 8001322:	d100      	bne.n	8001326 <__aeabi_fsub+0x42>
 8001324:	e0ef      	b.n	8001506 <__aeabi_fsub+0x222>
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	04d2      	lsls	r2, r2, #19
 800132a:	4311      	orrs	r1, r2
 800132c:	2001      	movs	r0, #1
 800132e:	2b1b      	cmp	r3, #27
 8001330:	dc08      	bgt.n	8001344 <__aeabi_fsub+0x60>
 8001332:	0008      	movs	r0, r1
 8001334:	2220      	movs	r2, #32
 8001336:	40d8      	lsrs	r0, r3
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4099      	lsls	r1, r3
 800133c:	000b      	movs	r3, r1
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	4193      	sbcs	r3, r2
 8001342:	4318      	orrs	r0, r3
 8001344:	4663      	mov	r3, ip
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	469c      	mov	ip, r3
 800134a:	4663      	mov	r3, ip
 800134c:	015b      	lsls	r3, r3, #5
 800134e:	d400      	bmi.n	8001352 <__aeabi_fsub+0x6e>
 8001350:	e0cd      	b.n	80014ee <__aeabi_fsub+0x20a>
 8001352:	4663      	mov	r3, ip
 8001354:	019f      	lsls	r7, r3, #6
 8001356:	09bf      	lsrs	r7, r7, #6
 8001358:	0038      	movs	r0, r7
 800135a:	f002 fb5d 	bl	8003a18 <__clzsi2>
 800135e:	003b      	movs	r3, r7
 8001360:	3805      	subs	r0, #5
 8001362:	4083      	lsls	r3, r0
 8001364:	4285      	cmp	r5, r0
 8001366:	dc00      	bgt.n	800136a <__aeabi_fsub+0x86>
 8001368:	e0a2      	b.n	80014b0 <__aeabi_fsub+0x1cc>
 800136a:	4ab7      	ldr	r2, [pc, #732]	@ (8001648 <__aeabi_fsub+0x364>)
 800136c:	1a2d      	subs	r5, r5, r0
 800136e:	401a      	ands	r2, r3
 8001370:	4694      	mov	ip, r2
 8001372:	075a      	lsls	r2, r3, #29
 8001374:	d100      	bne.n	8001378 <__aeabi_fsub+0x94>
 8001376:	e0c3      	b.n	8001500 <__aeabi_fsub+0x21c>
 8001378:	220f      	movs	r2, #15
 800137a:	4013      	ands	r3, r2
 800137c:	2b04      	cmp	r3, #4
 800137e:	d100      	bne.n	8001382 <__aeabi_fsub+0x9e>
 8001380:	e0be      	b.n	8001500 <__aeabi_fsub+0x21c>
 8001382:	2304      	movs	r3, #4
 8001384:	4698      	mov	r8, r3
 8001386:	44c4      	add	ip, r8
 8001388:	4663      	mov	r3, ip
 800138a:	015b      	lsls	r3, r3, #5
 800138c:	d400      	bmi.n	8001390 <__aeabi_fsub+0xac>
 800138e:	e0b7      	b.n	8001500 <__aeabi_fsub+0x21c>
 8001390:	1c68      	adds	r0, r5, #1
 8001392:	2dfe      	cmp	r5, #254	@ 0xfe
 8001394:	d000      	beq.n	8001398 <__aeabi_fsub+0xb4>
 8001396:	e0a5      	b.n	80014e4 <__aeabi_fsub+0x200>
 8001398:	20ff      	movs	r0, #255	@ 0xff
 800139a:	2200      	movs	r2, #0
 800139c:	05c0      	lsls	r0, r0, #23
 800139e:	4310      	orrs	r0, r2
 80013a0:	07e4      	lsls	r4, r4, #31
 80013a2:	4320      	orrs	r0, r4
 80013a4:	bcc0      	pop	{r6, r7}
 80013a6:	46b9      	mov	r9, r7
 80013a8:	46b0      	mov	r8, r6
 80013aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_fsub+0xce>
 80013b0:	e1eb      	b.n	800178a <__aeabi_fsub+0x4a6>
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d046      	beq.n	8001444 <__aeabi_fsub+0x160>
 80013b6:	2dff      	cmp	r5, #255	@ 0xff
 80013b8:	d100      	bne.n	80013bc <__aeabi_fsub+0xd8>
 80013ba:	e0a4      	b.n	8001506 <__aeabi_fsub+0x222>
 80013bc:	2280      	movs	r2, #128	@ 0x80
 80013be:	04d2      	lsls	r2, r2, #19
 80013c0:	4311      	orrs	r1, r2
 80013c2:	2b1b      	cmp	r3, #27
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_fsub+0xe4>
 80013c6:	e0fb      	b.n	80015c0 <__aeabi_fsub+0x2dc>
 80013c8:	2305      	movs	r3, #5
 80013ca:	4698      	mov	r8, r3
 80013cc:	002b      	movs	r3, r5
 80013ce:	44c4      	add	ip, r8
 80013d0:	4662      	mov	r2, ip
 80013d2:	08d7      	lsrs	r7, r2, #3
 80013d4:	2bff      	cmp	r3, #255	@ 0xff
 80013d6:	d100      	bne.n	80013da <__aeabi_fsub+0xf6>
 80013d8:	e095      	b.n	8001506 <__aeabi_fsub+0x222>
 80013da:	027a      	lsls	r2, r7, #9
 80013dc:	0a52      	lsrs	r2, r2, #9
 80013de:	b2d8      	uxtb	r0, r3
 80013e0:	e7dc      	b.n	800139c <__aeabi_fsub+0xb8>
 80013e2:	002b      	movs	r3, r5
 80013e4:	3bff      	subs	r3, #255	@ 0xff
 80013e6:	4699      	mov	r9, r3
 80013e8:	2900      	cmp	r1, #0
 80013ea:	d118      	bne.n	800141e <__aeabi_fsub+0x13a>
 80013ec:	2301      	movs	r3, #1
 80013ee:	405e      	eors	r6, r3
 80013f0:	42b4      	cmp	r4, r6
 80013f2:	d100      	bne.n	80013f6 <__aeabi_fsub+0x112>
 80013f4:	e0ca      	b.n	800158c <__aeabi_fsub+0x2a8>
 80013f6:	464b      	mov	r3, r9
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d02d      	beq.n	8001458 <__aeabi_fsub+0x174>
 80013fc:	2d00      	cmp	r5, #0
 80013fe:	d000      	beq.n	8001402 <__aeabi_fsub+0x11e>
 8001400:	e13c      	b.n	800167c <__aeabi_fsub+0x398>
 8001402:	23ff      	movs	r3, #255	@ 0xff
 8001404:	4664      	mov	r4, ip
 8001406:	2c00      	cmp	r4, #0
 8001408:	d100      	bne.n	800140c <__aeabi_fsub+0x128>
 800140a:	e15f      	b.n	80016cc <__aeabi_fsub+0x3e8>
 800140c:	1e5d      	subs	r5, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d100      	bne.n	8001414 <__aeabi_fsub+0x130>
 8001412:	e174      	b.n	80016fe <__aeabi_fsub+0x41a>
 8001414:	0034      	movs	r4, r6
 8001416:	2bff      	cmp	r3, #255	@ 0xff
 8001418:	d074      	beq.n	8001504 <__aeabi_fsub+0x220>
 800141a:	002b      	movs	r3, r5
 800141c:	e103      	b.n	8001626 <__aeabi_fsub+0x342>
 800141e:	42b4      	cmp	r4, r6
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x140>
 8001422:	e09c      	b.n	800155e <__aeabi_fsub+0x27a>
 8001424:	2b00      	cmp	r3, #0
 8001426:	d017      	beq.n	8001458 <__aeabi_fsub+0x174>
 8001428:	2d00      	cmp	r5, #0
 800142a:	d0ea      	beq.n	8001402 <__aeabi_fsub+0x11e>
 800142c:	0007      	movs	r7, r0
 800142e:	0034      	movs	r4, r6
 8001430:	e06c      	b.n	800150c <__aeabi_fsub+0x228>
 8001432:	2900      	cmp	r1, #0
 8001434:	d0cc      	beq.n	80013d0 <__aeabi_fsub+0xec>
 8001436:	1e5a      	subs	r2, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d02b      	beq.n	8001494 <__aeabi_fsub+0x1b0>
 800143c:	2bff      	cmp	r3, #255	@ 0xff
 800143e:	d062      	beq.n	8001506 <__aeabi_fsub+0x222>
 8001440:	0013      	movs	r3, r2
 8001442:	e773      	b.n	800132c <__aeabi_fsub+0x48>
 8001444:	2900      	cmp	r1, #0
 8001446:	d0c3      	beq.n	80013d0 <__aeabi_fsub+0xec>
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d100      	bne.n	8001450 <__aeabi_fsub+0x16c>
 800144e:	e11e      	b.n	800168e <__aeabi_fsub+0x3aa>
 8001450:	2bff      	cmp	r3, #255	@ 0xff
 8001452:	d058      	beq.n	8001506 <__aeabi_fsub+0x222>
 8001454:	0013      	movs	r3, r2
 8001456:	e7b4      	b.n	80013c2 <__aeabi_fsub+0xde>
 8001458:	22fe      	movs	r2, #254	@ 0xfe
 800145a:	1c6b      	adds	r3, r5, #1
 800145c:	421a      	tst	r2, r3
 800145e:	d10d      	bne.n	800147c <__aeabi_fsub+0x198>
 8001460:	2d00      	cmp	r5, #0
 8001462:	d060      	beq.n	8001526 <__aeabi_fsub+0x242>
 8001464:	4663      	mov	r3, ip
 8001466:	2b00      	cmp	r3, #0
 8001468:	d000      	beq.n	800146c <__aeabi_fsub+0x188>
 800146a:	e120      	b.n	80016ae <__aeabi_fsub+0x3ca>
 800146c:	2900      	cmp	r1, #0
 800146e:	d000      	beq.n	8001472 <__aeabi_fsub+0x18e>
 8001470:	e128      	b.n	80016c4 <__aeabi_fsub+0x3e0>
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	2400      	movs	r4, #0
 8001476:	20ff      	movs	r0, #255	@ 0xff
 8001478:	03d2      	lsls	r2, r2, #15
 800147a:	e78f      	b.n	800139c <__aeabi_fsub+0xb8>
 800147c:	4663      	mov	r3, ip
 800147e:	1a5f      	subs	r7, r3, r1
 8001480:	017b      	lsls	r3, r7, #5
 8001482:	d500      	bpl.n	8001486 <__aeabi_fsub+0x1a2>
 8001484:	e0fe      	b.n	8001684 <__aeabi_fsub+0x3a0>
 8001486:	2f00      	cmp	r7, #0
 8001488:	d000      	beq.n	800148c <__aeabi_fsub+0x1a8>
 800148a:	e765      	b.n	8001358 <__aeabi_fsub+0x74>
 800148c:	2400      	movs	r4, #0
 800148e:	2000      	movs	r0, #0
 8001490:	2200      	movs	r2, #0
 8001492:	e783      	b.n	800139c <__aeabi_fsub+0xb8>
 8001494:	4663      	mov	r3, ip
 8001496:	1a59      	subs	r1, r3, r1
 8001498:	014b      	lsls	r3, r1, #5
 800149a:	d400      	bmi.n	800149e <__aeabi_fsub+0x1ba>
 800149c:	e119      	b.n	80016d2 <__aeabi_fsub+0x3ee>
 800149e:	018f      	lsls	r7, r1, #6
 80014a0:	09bf      	lsrs	r7, r7, #6
 80014a2:	0038      	movs	r0, r7
 80014a4:	f002 fab8 	bl	8003a18 <__clzsi2>
 80014a8:	003b      	movs	r3, r7
 80014aa:	3805      	subs	r0, #5
 80014ac:	4083      	lsls	r3, r0
 80014ae:	2501      	movs	r5, #1
 80014b0:	2220      	movs	r2, #32
 80014b2:	1b40      	subs	r0, r0, r5
 80014b4:	3001      	adds	r0, #1
 80014b6:	1a12      	subs	r2, r2, r0
 80014b8:	0019      	movs	r1, r3
 80014ba:	4093      	lsls	r3, r2
 80014bc:	40c1      	lsrs	r1, r0
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	4193      	sbcs	r3, r2
 80014c2:	4319      	orrs	r1, r3
 80014c4:	468c      	mov	ip, r1
 80014c6:	1e0b      	subs	r3, r1, #0
 80014c8:	d0e1      	beq.n	800148e <__aeabi_fsub+0x1aa>
 80014ca:	075b      	lsls	r3, r3, #29
 80014cc:	d100      	bne.n	80014d0 <__aeabi_fsub+0x1ec>
 80014ce:	e152      	b.n	8001776 <__aeabi_fsub+0x492>
 80014d0:	230f      	movs	r3, #15
 80014d2:	2500      	movs	r5, #0
 80014d4:	400b      	ands	r3, r1
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d000      	beq.n	80014dc <__aeabi_fsub+0x1f8>
 80014da:	e752      	b.n	8001382 <__aeabi_fsub+0x9e>
 80014dc:	2001      	movs	r0, #1
 80014de:	014a      	lsls	r2, r1, #5
 80014e0:	d400      	bmi.n	80014e4 <__aeabi_fsub+0x200>
 80014e2:	e092      	b.n	800160a <__aeabi_fsub+0x326>
 80014e4:	b2c0      	uxtb	r0, r0
 80014e6:	4663      	mov	r3, ip
 80014e8:	019a      	lsls	r2, r3, #6
 80014ea:	0a52      	lsrs	r2, r2, #9
 80014ec:	e756      	b.n	800139c <__aeabi_fsub+0xb8>
 80014ee:	4663      	mov	r3, ip
 80014f0:	075b      	lsls	r3, r3, #29
 80014f2:	d005      	beq.n	8001500 <__aeabi_fsub+0x21c>
 80014f4:	230f      	movs	r3, #15
 80014f6:	4662      	mov	r2, ip
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d000      	beq.n	8001500 <__aeabi_fsub+0x21c>
 80014fe:	e740      	b.n	8001382 <__aeabi_fsub+0x9e>
 8001500:	002b      	movs	r3, r5
 8001502:	e765      	b.n	80013d0 <__aeabi_fsub+0xec>
 8001504:	0007      	movs	r7, r0
 8001506:	2f00      	cmp	r7, #0
 8001508:	d100      	bne.n	800150c <__aeabi_fsub+0x228>
 800150a:	e745      	b.n	8001398 <__aeabi_fsub+0xb4>
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	03d2      	lsls	r2, r2, #15
 8001510:	433a      	orrs	r2, r7
 8001512:	0252      	lsls	r2, r2, #9
 8001514:	20ff      	movs	r0, #255	@ 0xff
 8001516:	0a52      	lsrs	r2, r2, #9
 8001518:	e740      	b.n	800139c <__aeabi_fsub+0xb8>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d179      	bne.n	8001612 <__aeabi_fsub+0x32e>
 800151e:	22fe      	movs	r2, #254	@ 0xfe
 8001520:	1c6b      	adds	r3, r5, #1
 8001522:	421a      	tst	r2, r3
 8001524:	d1aa      	bne.n	800147c <__aeabi_fsub+0x198>
 8001526:	4663      	mov	r3, ip
 8001528:	2b00      	cmp	r3, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x24a>
 800152c:	e0f5      	b.n	800171a <__aeabi_fsub+0x436>
 800152e:	2900      	cmp	r1, #0
 8001530:	d100      	bne.n	8001534 <__aeabi_fsub+0x250>
 8001532:	e0d1      	b.n	80016d8 <__aeabi_fsub+0x3f4>
 8001534:	1a5f      	subs	r7, r3, r1
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	04db      	lsls	r3, r3, #19
 800153a:	421f      	tst	r7, r3
 800153c:	d100      	bne.n	8001540 <__aeabi_fsub+0x25c>
 800153e:	e10e      	b.n	800175e <__aeabi_fsub+0x47a>
 8001540:	4662      	mov	r2, ip
 8001542:	2401      	movs	r4, #1
 8001544:	1a8a      	subs	r2, r1, r2
 8001546:	4694      	mov	ip, r2
 8001548:	2000      	movs	r0, #0
 800154a:	4034      	ands	r4, r6
 800154c:	2a00      	cmp	r2, #0
 800154e:	d100      	bne.n	8001552 <__aeabi_fsub+0x26e>
 8001550:	e724      	b.n	800139c <__aeabi_fsub+0xb8>
 8001552:	2001      	movs	r0, #1
 8001554:	421a      	tst	r2, r3
 8001556:	d1c6      	bne.n	80014e6 <__aeabi_fsub+0x202>
 8001558:	2300      	movs	r3, #0
 800155a:	08d7      	lsrs	r7, r2, #3
 800155c:	e73d      	b.n	80013da <__aeabi_fsub+0xf6>
 800155e:	2b00      	cmp	r3, #0
 8001560:	d017      	beq.n	8001592 <__aeabi_fsub+0x2ae>
 8001562:	2d00      	cmp	r5, #0
 8001564:	d000      	beq.n	8001568 <__aeabi_fsub+0x284>
 8001566:	e0af      	b.n	80016c8 <__aeabi_fsub+0x3e4>
 8001568:	23ff      	movs	r3, #255	@ 0xff
 800156a:	4665      	mov	r5, ip
 800156c:	2d00      	cmp	r5, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_fsub+0x28e>
 8001570:	e0ad      	b.n	80016ce <__aeabi_fsub+0x3ea>
 8001572:	1e5e      	subs	r6, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d100      	bne.n	800157a <__aeabi_fsub+0x296>
 8001578:	e089      	b.n	800168e <__aeabi_fsub+0x3aa>
 800157a:	2bff      	cmp	r3, #255	@ 0xff
 800157c:	d0c2      	beq.n	8001504 <__aeabi_fsub+0x220>
 800157e:	2e1b      	cmp	r6, #27
 8001580:	dc00      	bgt.n	8001584 <__aeabi_fsub+0x2a0>
 8001582:	e0ab      	b.n	80016dc <__aeabi_fsub+0x3f8>
 8001584:	1d4b      	adds	r3, r1, #5
 8001586:	469c      	mov	ip, r3
 8001588:	0013      	movs	r3, r2
 800158a:	e721      	b.n	80013d0 <__aeabi_fsub+0xec>
 800158c:	464b      	mov	r3, r9
 800158e:	2b00      	cmp	r3, #0
 8001590:	d170      	bne.n	8001674 <__aeabi_fsub+0x390>
 8001592:	22fe      	movs	r2, #254	@ 0xfe
 8001594:	1c6b      	adds	r3, r5, #1
 8001596:	421a      	tst	r2, r3
 8001598:	d15e      	bne.n	8001658 <__aeabi_fsub+0x374>
 800159a:	2d00      	cmp	r5, #0
 800159c:	d000      	beq.n	80015a0 <__aeabi_fsub+0x2bc>
 800159e:	e0c3      	b.n	8001728 <__aeabi_fsub+0x444>
 80015a0:	4663      	mov	r3, ip
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_fsub+0x2c4>
 80015a6:	e0d0      	b.n	800174a <__aeabi_fsub+0x466>
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_fsub+0x2ca>
 80015ac:	e094      	b.n	80016d8 <__aeabi_fsub+0x3f4>
 80015ae:	000a      	movs	r2, r1
 80015b0:	4462      	add	r2, ip
 80015b2:	0153      	lsls	r3, r2, #5
 80015b4:	d400      	bmi.n	80015b8 <__aeabi_fsub+0x2d4>
 80015b6:	e0d8      	b.n	800176a <__aeabi_fsub+0x486>
 80015b8:	0192      	lsls	r2, r2, #6
 80015ba:	2001      	movs	r0, #1
 80015bc:	0a52      	lsrs	r2, r2, #9
 80015be:	e6ed      	b.n	800139c <__aeabi_fsub+0xb8>
 80015c0:	0008      	movs	r0, r1
 80015c2:	2220      	movs	r2, #32
 80015c4:	40d8      	lsrs	r0, r3
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	4099      	lsls	r1, r3
 80015ca:	000b      	movs	r3, r1
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	4193      	sbcs	r3, r2
 80015d0:	4303      	orrs	r3, r0
 80015d2:	449c      	add	ip, r3
 80015d4:	4663      	mov	r3, ip
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	d589      	bpl.n	80014ee <__aeabi_fsub+0x20a>
 80015da:	3501      	adds	r5, #1
 80015dc:	2dff      	cmp	r5, #255	@ 0xff
 80015de:	d100      	bne.n	80015e2 <__aeabi_fsub+0x2fe>
 80015e0:	e6da      	b.n	8001398 <__aeabi_fsub+0xb4>
 80015e2:	4662      	mov	r2, ip
 80015e4:	2301      	movs	r3, #1
 80015e6:	4919      	ldr	r1, [pc, #100]	@ (800164c <__aeabi_fsub+0x368>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0852      	lsrs	r2, r2, #1
 80015ec:	400a      	ands	r2, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	4694      	mov	ip, r2
 80015f4:	075b      	lsls	r3, r3, #29
 80015f6:	d004      	beq.n	8001602 <__aeabi_fsub+0x31e>
 80015f8:	230f      	movs	r3, #15
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d000      	beq.n	8001602 <__aeabi_fsub+0x31e>
 8001600:	e6bf      	b.n	8001382 <__aeabi_fsub+0x9e>
 8001602:	4663      	mov	r3, ip
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	d500      	bpl.n	800160a <__aeabi_fsub+0x326>
 8001608:	e6c2      	b.n	8001390 <__aeabi_fsub+0xac>
 800160a:	4663      	mov	r3, ip
 800160c:	08df      	lsrs	r7, r3, #3
 800160e:	002b      	movs	r3, r5
 8001610:	e6e3      	b.n	80013da <__aeabi_fsub+0xf6>
 8001612:	1b53      	subs	r3, r2, r5
 8001614:	2d00      	cmp	r5, #0
 8001616:	d100      	bne.n	800161a <__aeabi_fsub+0x336>
 8001618:	e6f4      	b.n	8001404 <__aeabi_fsub+0x120>
 800161a:	2080      	movs	r0, #128	@ 0x80
 800161c:	4664      	mov	r4, ip
 800161e:	04c0      	lsls	r0, r0, #19
 8001620:	4304      	orrs	r4, r0
 8001622:	46a4      	mov	ip, r4
 8001624:	0034      	movs	r4, r6
 8001626:	2001      	movs	r0, #1
 8001628:	2b1b      	cmp	r3, #27
 800162a:	dc09      	bgt.n	8001640 <__aeabi_fsub+0x35c>
 800162c:	2520      	movs	r5, #32
 800162e:	4660      	mov	r0, ip
 8001630:	40d8      	lsrs	r0, r3
 8001632:	1aeb      	subs	r3, r5, r3
 8001634:	4665      	mov	r5, ip
 8001636:	409d      	lsls	r5, r3
 8001638:	002b      	movs	r3, r5
 800163a:	1e5d      	subs	r5, r3, #1
 800163c:	41ab      	sbcs	r3, r5
 800163e:	4318      	orrs	r0, r3
 8001640:	1a0b      	subs	r3, r1, r0
 8001642:	469c      	mov	ip, r3
 8001644:	0015      	movs	r5, r2
 8001646:	e680      	b.n	800134a <__aeabi_fsub+0x66>
 8001648:	fbffffff 	.word	0xfbffffff
 800164c:	7dffffff 	.word	0x7dffffff
 8001650:	22fe      	movs	r2, #254	@ 0xfe
 8001652:	1c6b      	adds	r3, r5, #1
 8001654:	4213      	tst	r3, r2
 8001656:	d0a3      	beq.n	80015a0 <__aeabi_fsub+0x2bc>
 8001658:	2bff      	cmp	r3, #255	@ 0xff
 800165a:	d100      	bne.n	800165e <__aeabi_fsub+0x37a>
 800165c:	e69c      	b.n	8001398 <__aeabi_fsub+0xb4>
 800165e:	4461      	add	r1, ip
 8001660:	0849      	lsrs	r1, r1, #1
 8001662:	074a      	lsls	r2, r1, #29
 8001664:	d049      	beq.n	80016fa <__aeabi_fsub+0x416>
 8001666:	220f      	movs	r2, #15
 8001668:	400a      	ands	r2, r1
 800166a:	2a04      	cmp	r2, #4
 800166c:	d045      	beq.n	80016fa <__aeabi_fsub+0x416>
 800166e:	1d0a      	adds	r2, r1, #4
 8001670:	4694      	mov	ip, r2
 8001672:	e6ad      	b.n	80013d0 <__aeabi_fsub+0xec>
 8001674:	2d00      	cmp	r5, #0
 8001676:	d100      	bne.n	800167a <__aeabi_fsub+0x396>
 8001678:	e776      	b.n	8001568 <__aeabi_fsub+0x284>
 800167a:	e68d      	b.n	8001398 <__aeabi_fsub+0xb4>
 800167c:	0034      	movs	r4, r6
 800167e:	20ff      	movs	r0, #255	@ 0xff
 8001680:	2200      	movs	r2, #0
 8001682:	e68b      	b.n	800139c <__aeabi_fsub+0xb8>
 8001684:	4663      	mov	r3, ip
 8001686:	2401      	movs	r4, #1
 8001688:	1acf      	subs	r7, r1, r3
 800168a:	4034      	ands	r4, r6
 800168c:	e664      	b.n	8001358 <__aeabi_fsub+0x74>
 800168e:	4461      	add	r1, ip
 8001690:	014b      	lsls	r3, r1, #5
 8001692:	d56d      	bpl.n	8001770 <__aeabi_fsub+0x48c>
 8001694:	0848      	lsrs	r0, r1, #1
 8001696:	4944      	ldr	r1, [pc, #272]	@ (80017a8 <__aeabi_fsub+0x4c4>)
 8001698:	4001      	ands	r1, r0
 800169a:	0743      	lsls	r3, r0, #29
 800169c:	d02c      	beq.n	80016f8 <__aeabi_fsub+0x414>
 800169e:	230f      	movs	r3, #15
 80016a0:	4003      	ands	r3, r0
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d028      	beq.n	80016f8 <__aeabi_fsub+0x414>
 80016a6:	1d0b      	adds	r3, r1, #4
 80016a8:	469c      	mov	ip, r3
 80016aa:	2302      	movs	r3, #2
 80016ac:	e690      	b.n	80013d0 <__aeabi_fsub+0xec>
 80016ae:	2900      	cmp	r1, #0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_fsub+0x3d0>
 80016b2:	e72b      	b.n	800150c <__aeabi_fsub+0x228>
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	03db      	lsls	r3, r3, #15
 80016b8:	429f      	cmp	r7, r3
 80016ba:	d200      	bcs.n	80016be <__aeabi_fsub+0x3da>
 80016bc:	e726      	b.n	800150c <__aeabi_fsub+0x228>
 80016be:	4298      	cmp	r0, r3
 80016c0:	d300      	bcc.n	80016c4 <__aeabi_fsub+0x3e0>
 80016c2:	e723      	b.n	800150c <__aeabi_fsub+0x228>
 80016c4:	2401      	movs	r4, #1
 80016c6:	4034      	ands	r4, r6
 80016c8:	0007      	movs	r7, r0
 80016ca:	e71f      	b.n	800150c <__aeabi_fsub+0x228>
 80016cc:	0034      	movs	r4, r6
 80016ce:	468c      	mov	ip, r1
 80016d0:	e67e      	b.n	80013d0 <__aeabi_fsub+0xec>
 80016d2:	2301      	movs	r3, #1
 80016d4:	08cf      	lsrs	r7, r1, #3
 80016d6:	e680      	b.n	80013da <__aeabi_fsub+0xf6>
 80016d8:	2300      	movs	r3, #0
 80016da:	e67e      	b.n	80013da <__aeabi_fsub+0xf6>
 80016dc:	2020      	movs	r0, #32
 80016de:	4665      	mov	r5, ip
 80016e0:	1b80      	subs	r0, r0, r6
 80016e2:	4085      	lsls	r5, r0
 80016e4:	4663      	mov	r3, ip
 80016e6:	0028      	movs	r0, r5
 80016e8:	40f3      	lsrs	r3, r6
 80016ea:	1e45      	subs	r5, r0, #1
 80016ec:	41a8      	sbcs	r0, r5
 80016ee:	4303      	orrs	r3, r0
 80016f0:	469c      	mov	ip, r3
 80016f2:	0015      	movs	r5, r2
 80016f4:	448c      	add	ip, r1
 80016f6:	e76d      	b.n	80015d4 <__aeabi_fsub+0x2f0>
 80016f8:	2302      	movs	r3, #2
 80016fa:	08cf      	lsrs	r7, r1, #3
 80016fc:	e66d      	b.n	80013da <__aeabi_fsub+0xf6>
 80016fe:	1b0f      	subs	r7, r1, r4
 8001700:	017b      	lsls	r3, r7, #5
 8001702:	d528      	bpl.n	8001756 <__aeabi_fsub+0x472>
 8001704:	01bf      	lsls	r7, r7, #6
 8001706:	09bf      	lsrs	r7, r7, #6
 8001708:	0038      	movs	r0, r7
 800170a:	f002 f985 	bl	8003a18 <__clzsi2>
 800170e:	003b      	movs	r3, r7
 8001710:	3805      	subs	r0, #5
 8001712:	4083      	lsls	r3, r0
 8001714:	0034      	movs	r4, r6
 8001716:	2501      	movs	r5, #1
 8001718:	e6ca      	b.n	80014b0 <__aeabi_fsub+0x1cc>
 800171a:	2900      	cmp	r1, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_fsub+0x43c>
 800171e:	e6b5      	b.n	800148c <__aeabi_fsub+0x1a8>
 8001720:	2401      	movs	r4, #1
 8001722:	0007      	movs	r7, r0
 8001724:	4034      	ands	r4, r6
 8001726:	e658      	b.n	80013da <__aeabi_fsub+0xf6>
 8001728:	4663      	mov	r3, ip
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x44c>
 800172e:	e6e9      	b.n	8001504 <__aeabi_fsub+0x220>
 8001730:	2900      	cmp	r1, #0
 8001732:	d100      	bne.n	8001736 <__aeabi_fsub+0x452>
 8001734:	e6ea      	b.n	800150c <__aeabi_fsub+0x228>
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	03db      	lsls	r3, r3, #15
 800173a:	429f      	cmp	r7, r3
 800173c:	d200      	bcs.n	8001740 <__aeabi_fsub+0x45c>
 800173e:	e6e5      	b.n	800150c <__aeabi_fsub+0x228>
 8001740:	4298      	cmp	r0, r3
 8001742:	d300      	bcc.n	8001746 <__aeabi_fsub+0x462>
 8001744:	e6e2      	b.n	800150c <__aeabi_fsub+0x228>
 8001746:	0007      	movs	r7, r0
 8001748:	e6e0      	b.n	800150c <__aeabi_fsub+0x228>
 800174a:	2900      	cmp	r1, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_fsub+0x46c>
 800174e:	e69e      	b.n	800148e <__aeabi_fsub+0x1aa>
 8001750:	2300      	movs	r3, #0
 8001752:	08cf      	lsrs	r7, r1, #3
 8001754:	e641      	b.n	80013da <__aeabi_fsub+0xf6>
 8001756:	0034      	movs	r4, r6
 8001758:	2301      	movs	r3, #1
 800175a:	08ff      	lsrs	r7, r7, #3
 800175c:	e63d      	b.n	80013da <__aeabi_fsub+0xf6>
 800175e:	2f00      	cmp	r7, #0
 8001760:	d100      	bne.n	8001764 <__aeabi_fsub+0x480>
 8001762:	e693      	b.n	800148c <__aeabi_fsub+0x1a8>
 8001764:	2300      	movs	r3, #0
 8001766:	08ff      	lsrs	r7, r7, #3
 8001768:	e637      	b.n	80013da <__aeabi_fsub+0xf6>
 800176a:	2300      	movs	r3, #0
 800176c:	08d7      	lsrs	r7, r2, #3
 800176e:	e634      	b.n	80013da <__aeabi_fsub+0xf6>
 8001770:	2301      	movs	r3, #1
 8001772:	08cf      	lsrs	r7, r1, #3
 8001774:	e631      	b.n	80013da <__aeabi_fsub+0xf6>
 8001776:	2280      	movs	r2, #128	@ 0x80
 8001778:	000b      	movs	r3, r1
 800177a:	04d2      	lsls	r2, r2, #19
 800177c:	2001      	movs	r0, #1
 800177e:	4013      	ands	r3, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d000      	beq.n	8001786 <__aeabi_fsub+0x4a2>
 8001784:	e6ae      	b.n	80014e4 <__aeabi_fsub+0x200>
 8001786:	08cf      	lsrs	r7, r1, #3
 8001788:	e627      	b.n	80013da <__aeabi_fsub+0xf6>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_fsub+0x4ac>
 800178e:	e75f      	b.n	8001650 <__aeabi_fsub+0x36c>
 8001790:	1b56      	subs	r6, r2, r5
 8001792:	2d00      	cmp	r5, #0
 8001794:	d101      	bne.n	800179a <__aeabi_fsub+0x4b6>
 8001796:	0033      	movs	r3, r6
 8001798:	e6e7      	b.n	800156a <__aeabi_fsub+0x286>
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4660      	mov	r0, ip
 800179e:	04db      	lsls	r3, r3, #19
 80017a0:	4318      	orrs	r0, r3
 80017a2:	4684      	mov	ip, r0
 80017a4:	e6eb      	b.n	800157e <__aeabi_fsub+0x29a>
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	7dffffff 	.word	0x7dffffff

080017ac <__aeabi_fcmpun>:
 80017ac:	0243      	lsls	r3, r0, #9
 80017ae:	024a      	lsls	r2, r1, #9
 80017b0:	0040      	lsls	r0, r0, #1
 80017b2:	0049      	lsls	r1, r1, #1
 80017b4:	0a5b      	lsrs	r3, r3, #9
 80017b6:	0a52      	lsrs	r2, r2, #9
 80017b8:	0e09      	lsrs	r1, r1, #24
 80017ba:	0e00      	lsrs	r0, r0, #24
 80017bc:	28ff      	cmp	r0, #255	@ 0xff
 80017be:	d006      	beq.n	80017ce <__aeabi_fcmpun+0x22>
 80017c0:	2000      	movs	r0, #0
 80017c2:	29ff      	cmp	r1, #255	@ 0xff
 80017c4:	d102      	bne.n	80017cc <__aeabi_fcmpun+0x20>
 80017c6:	1e53      	subs	r3, r2, #1
 80017c8:	419a      	sbcs	r2, r3
 80017ca:	0010      	movs	r0, r2
 80017cc:	4770      	bx	lr
 80017ce:	38fe      	subs	r0, #254	@ 0xfe
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1fb      	bne.n	80017cc <__aeabi_fcmpun+0x20>
 80017d4:	e7f4      	b.n	80017c0 <__aeabi_fcmpun+0x14>
 80017d6:	46c0      	nop			@ (mov r8, r8)

080017d8 <__aeabi_f2iz>:
 80017d8:	0241      	lsls	r1, r0, #9
 80017da:	0042      	lsls	r2, r0, #1
 80017dc:	0fc3      	lsrs	r3, r0, #31
 80017de:	0a49      	lsrs	r1, r1, #9
 80017e0:	2000      	movs	r0, #0
 80017e2:	0e12      	lsrs	r2, r2, #24
 80017e4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017e6:	dd03      	ble.n	80017f0 <__aeabi_f2iz+0x18>
 80017e8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017ea:	dd02      	ble.n	80017f2 <__aeabi_f2iz+0x1a>
 80017ec:	4a09      	ldr	r2, [pc, #36]	@ (8001814 <__aeabi_f2iz+0x3c>)
 80017ee:	1898      	adds	r0, r3, r2
 80017f0:	4770      	bx	lr
 80017f2:	2080      	movs	r0, #128	@ 0x80
 80017f4:	0400      	lsls	r0, r0, #16
 80017f6:	4301      	orrs	r1, r0
 80017f8:	2a95      	cmp	r2, #149	@ 0x95
 80017fa:	dc07      	bgt.n	800180c <__aeabi_f2iz+0x34>
 80017fc:	2096      	movs	r0, #150	@ 0x96
 80017fe:	1a82      	subs	r2, r0, r2
 8001800:	40d1      	lsrs	r1, r2
 8001802:	4248      	negs	r0, r1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f3      	bne.n	80017f0 <__aeabi_f2iz+0x18>
 8001808:	0008      	movs	r0, r1
 800180a:	e7f1      	b.n	80017f0 <__aeabi_f2iz+0x18>
 800180c:	3a96      	subs	r2, #150	@ 0x96
 800180e:	4091      	lsls	r1, r2
 8001810:	e7f7      	b.n	8001802 <__aeabi_f2iz+0x2a>
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	7fffffff 	.word	0x7fffffff

08001818 <__aeabi_i2f>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	2800      	cmp	r0, #0
 800181c:	d012      	beq.n	8001844 <__aeabi_i2f+0x2c>
 800181e:	17c3      	asrs	r3, r0, #31
 8001820:	18c5      	adds	r5, r0, r3
 8001822:	405d      	eors	r5, r3
 8001824:	0fc4      	lsrs	r4, r0, #31
 8001826:	0028      	movs	r0, r5
 8001828:	f002 f8f6 	bl	8003a18 <__clzsi2>
 800182c:	239e      	movs	r3, #158	@ 0x9e
 800182e:	1a1b      	subs	r3, r3, r0
 8001830:	2b96      	cmp	r3, #150	@ 0x96
 8001832:	dc0f      	bgt.n	8001854 <__aeabi_i2f+0x3c>
 8001834:	2808      	cmp	r0, #8
 8001836:	d038      	beq.n	80018aa <__aeabi_i2f+0x92>
 8001838:	3808      	subs	r0, #8
 800183a:	4085      	lsls	r5, r0
 800183c:	026d      	lsls	r5, r5, #9
 800183e:	0a6d      	lsrs	r5, r5, #9
 8001840:	b2d8      	uxtb	r0, r3
 8001842:	e002      	b.n	800184a <__aeabi_i2f+0x32>
 8001844:	2400      	movs	r4, #0
 8001846:	2000      	movs	r0, #0
 8001848:	2500      	movs	r5, #0
 800184a:	05c0      	lsls	r0, r0, #23
 800184c:	4328      	orrs	r0, r5
 800184e:	07e4      	lsls	r4, r4, #31
 8001850:	4320      	orrs	r0, r4
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	2b99      	cmp	r3, #153	@ 0x99
 8001856:	dc14      	bgt.n	8001882 <__aeabi_i2f+0x6a>
 8001858:	1f42      	subs	r2, r0, #5
 800185a:	4095      	lsls	r5, r2
 800185c:	002a      	movs	r2, r5
 800185e:	4915      	ldr	r1, [pc, #84]	@ (80018b4 <__aeabi_i2f+0x9c>)
 8001860:	4011      	ands	r1, r2
 8001862:	0755      	lsls	r5, r2, #29
 8001864:	d01c      	beq.n	80018a0 <__aeabi_i2f+0x88>
 8001866:	250f      	movs	r5, #15
 8001868:	402a      	ands	r2, r5
 800186a:	2a04      	cmp	r2, #4
 800186c:	d018      	beq.n	80018a0 <__aeabi_i2f+0x88>
 800186e:	3104      	adds	r1, #4
 8001870:	08ca      	lsrs	r2, r1, #3
 8001872:	0149      	lsls	r1, r1, #5
 8001874:	d515      	bpl.n	80018a2 <__aeabi_i2f+0x8a>
 8001876:	239f      	movs	r3, #159	@ 0x9f
 8001878:	0252      	lsls	r2, r2, #9
 800187a:	1a18      	subs	r0, r3, r0
 800187c:	0a55      	lsrs	r5, r2, #9
 800187e:	b2c0      	uxtb	r0, r0
 8001880:	e7e3      	b.n	800184a <__aeabi_i2f+0x32>
 8001882:	2205      	movs	r2, #5
 8001884:	0029      	movs	r1, r5
 8001886:	1a12      	subs	r2, r2, r0
 8001888:	40d1      	lsrs	r1, r2
 800188a:	0002      	movs	r2, r0
 800188c:	321b      	adds	r2, #27
 800188e:	4095      	lsls	r5, r2
 8001890:	002a      	movs	r2, r5
 8001892:	1e55      	subs	r5, r2, #1
 8001894:	41aa      	sbcs	r2, r5
 8001896:	430a      	orrs	r2, r1
 8001898:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <__aeabi_i2f+0x9c>)
 800189a:	4011      	ands	r1, r2
 800189c:	0755      	lsls	r5, r2, #29
 800189e:	d1e2      	bne.n	8001866 <__aeabi_i2f+0x4e>
 80018a0:	08ca      	lsrs	r2, r1, #3
 80018a2:	0252      	lsls	r2, r2, #9
 80018a4:	0a55      	lsrs	r5, r2, #9
 80018a6:	b2d8      	uxtb	r0, r3
 80018a8:	e7cf      	b.n	800184a <__aeabi_i2f+0x32>
 80018aa:	026d      	lsls	r5, r5, #9
 80018ac:	0a6d      	lsrs	r5, r5, #9
 80018ae:	308e      	adds	r0, #142	@ 0x8e
 80018b0:	e7cb      	b.n	800184a <__aeabi_i2f+0x32>
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	fbffffff 	.word	0xfbffffff

080018b8 <__aeabi_ui2f>:
 80018b8:	b510      	push	{r4, lr}
 80018ba:	1e04      	subs	r4, r0, #0
 80018bc:	d00d      	beq.n	80018da <__aeabi_ui2f+0x22>
 80018be:	f002 f8ab 	bl	8003a18 <__clzsi2>
 80018c2:	239e      	movs	r3, #158	@ 0x9e
 80018c4:	1a1b      	subs	r3, r3, r0
 80018c6:	2b96      	cmp	r3, #150	@ 0x96
 80018c8:	dc0c      	bgt.n	80018e4 <__aeabi_ui2f+0x2c>
 80018ca:	2808      	cmp	r0, #8
 80018cc:	d034      	beq.n	8001938 <__aeabi_ui2f+0x80>
 80018ce:	3808      	subs	r0, #8
 80018d0:	4084      	lsls	r4, r0
 80018d2:	0264      	lsls	r4, r4, #9
 80018d4:	0a64      	lsrs	r4, r4, #9
 80018d6:	b2d8      	uxtb	r0, r3
 80018d8:	e001      	b.n	80018de <__aeabi_ui2f+0x26>
 80018da:	2000      	movs	r0, #0
 80018dc:	2400      	movs	r4, #0
 80018de:	05c0      	lsls	r0, r0, #23
 80018e0:	4320      	orrs	r0, r4
 80018e2:	bd10      	pop	{r4, pc}
 80018e4:	2b99      	cmp	r3, #153	@ 0x99
 80018e6:	dc13      	bgt.n	8001910 <__aeabi_ui2f+0x58>
 80018e8:	1f42      	subs	r2, r0, #5
 80018ea:	4094      	lsls	r4, r2
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <__aeabi_ui2f+0x88>)
 80018ee:	4022      	ands	r2, r4
 80018f0:	0761      	lsls	r1, r4, #29
 80018f2:	d01c      	beq.n	800192e <__aeabi_ui2f+0x76>
 80018f4:	210f      	movs	r1, #15
 80018f6:	4021      	ands	r1, r4
 80018f8:	2904      	cmp	r1, #4
 80018fa:	d018      	beq.n	800192e <__aeabi_ui2f+0x76>
 80018fc:	3204      	adds	r2, #4
 80018fe:	08d4      	lsrs	r4, r2, #3
 8001900:	0152      	lsls	r2, r2, #5
 8001902:	d515      	bpl.n	8001930 <__aeabi_ui2f+0x78>
 8001904:	239f      	movs	r3, #159	@ 0x9f
 8001906:	0264      	lsls	r4, r4, #9
 8001908:	1a18      	subs	r0, r3, r0
 800190a:	0a64      	lsrs	r4, r4, #9
 800190c:	b2c0      	uxtb	r0, r0
 800190e:	e7e6      	b.n	80018de <__aeabi_ui2f+0x26>
 8001910:	0002      	movs	r2, r0
 8001912:	0021      	movs	r1, r4
 8001914:	321b      	adds	r2, #27
 8001916:	4091      	lsls	r1, r2
 8001918:	000a      	movs	r2, r1
 800191a:	1e51      	subs	r1, r2, #1
 800191c:	418a      	sbcs	r2, r1
 800191e:	2105      	movs	r1, #5
 8001920:	1a09      	subs	r1, r1, r0
 8001922:	40cc      	lsrs	r4, r1
 8001924:	4314      	orrs	r4, r2
 8001926:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <__aeabi_ui2f+0x88>)
 8001928:	4022      	ands	r2, r4
 800192a:	0761      	lsls	r1, r4, #29
 800192c:	d1e2      	bne.n	80018f4 <__aeabi_ui2f+0x3c>
 800192e:	08d4      	lsrs	r4, r2, #3
 8001930:	0264      	lsls	r4, r4, #9
 8001932:	0a64      	lsrs	r4, r4, #9
 8001934:	b2d8      	uxtb	r0, r3
 8001936:	e7d2      	b.n	80018de <__aeabi_ui2f+0x26>
 8001938:	0264      	lsls	r4, r4, #9
 800193a:	0a64      	lsrs	r4, r4, #9
 800193c:	308e      	adds	r0, #142	@ 0x8e
 800193e:	e7ce      	b.n	80018de <__aeabi_ui2f+0x26>
 8001940:	fbffffff 	.word	0xfbffffff

08001944 <__aeabi_dadd>:
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	464f      	mov	r7, r9
 8001948:	4646      	mov	r6, r8
 800194a:	46d6      	mov	lr, sl
 800194c:	b5c0      	push	{r6, r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	9000      	str	r0, [sp, #0]
 8001952:	9101      	str	r1, [sp, #4]
 8001954:	030e      	lsls	r6, r1, #12
 8001956:	004c      	lsls	r4, r1, #1
 8001958:	0fcd      	lsrs	r5, r1, #31
 800195a:	0a71      	lsrs	r1, r6, #9
 800195c:	9e00      	ldr	r6, [sp, #0]
 800195e:	005f      	lsls	r7, r3, #1
 8001960:	0f76      	lsrs	r6, r6, #29
 8001962:	430e      	orrs	r6, r1
 8001964:	9900      	ldr	r1, [sp, #0]
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	00c9      	lsls	r1, r1, #3
 800196c:	4689      	mov	r9, r1
 800196e:	0319      	lsls	r1, r3, #12
 8001970:	0d7b      	lsrs	r3, r7, #21
 8001972:	4698      	mov	r8, r3
 8001974:	9b01      	ldr	r3, [sp, #4]
 8001976:	0a49      	lsrs	r1, r1, #9
 8001978:	0fdb      	lsrs	r3, r3, #31
 800197a:	469c      	mov	ip, r3
 800197c:	9b00      	ldr	r3, [sp, #0]
 800197e:	9a00      	ldr	r2, [sp, #0]
 8001980:	0f5b      	lsrs	r3, r3, #29
 8001982:	430b      	orrs	r3, r1
 8001984:	4641      	mov	r1, r8
 8001986:	0d64      	lsrs	r4, r4, #21
 8001988:	00d2      	lsls	r2, r2, #3
 800198a:	1a61      	subs	r1, r4, r1
 800198c:	4565      	cmp	r5, ip
 800198e:	d100      	bne.n	8001992 <__aeabi_dadd+0x4e>
 8001990:	e0a6      	b.n	8001ae0 <__aeabi_dadd+0x19c>
 8001992:	2900      	cmp	r1, #0
 8001994:	dd72      	ble.n	8001a7c <__aeabi_dadd+0x138>
 8001996:	4647      	mov	r7, r8
 8001998:	2f00      	cmp	r7, #0
 800199a:	d100      	bne.n	800199e <__aeabi_dadd+0x5a>
 800199c:	e0dd      	b.n	8001b5a <__aeabi_dadd+0x216>
 800199e:	4fcc      	ldr	r7, [pc, #816]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 80019a0:	42bc      	cmp	r4, r7
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dadd+0x62>
 80019a4:	e19a      	b.n	8001cdc <__aeabi_dadd+0x398>
 80019a6:	2701      	movs	r7, #1
 80019a8:	2938      	cmp	r1, #56	@ 0x38
 80019aa:	dc17      	bgt.n	80019dc <__aeabi_dadd+0x98>
 80019ac:	2780      	movs	r7, #128	@ 0x80
 80019ae:	043f      	lsls	r7, r7, #16
 80019b0:	433b      	orrs	r3, r7
 80019b2:	291f      	cmp	r1, #31
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dadd+0x74>
 80019b6:	e1dd      	b.n	8001d74 <__aeabi_dadd+0x430>
 80019b8:	2720      	movs	r7, #32
 80019ba:	1a78      	subs	r0, r7, r1
 80019bc:	001f      	movs	r7, r3
 80019be:	4087      	lsls	r7, r0
 80019c0:	46ba      	mov	sl, r7
 80019c2:	0017      	movs	r7, r2
 80019c4:	40cf      	lsrs	r7, r1
 80019c6:	4684      	mov	ip, r0
 80019c8:	0038      	movs	r0, r7
 80019ca:	4657      	mov	r7, sl
 80019cc:	4307      	orrs	r7, r0
 80019ce:	4660      	mov	r0, ip
 80019d0:	4082      	lsls	r2, r0
 80019d2:	40cb      	lsrs	r3, r1
 80019d4:	1e50      	subs	r0, r2, #1
 80019d6:	4182      	sbcs	r2, r0
 80019d8:	1af6      	subs	r6, r6, r3
 80019da:	4317      	orrs	r7, r2
 80019dc:	464b      	mov	r3, r9
 80019de:	1bdf      	subs	r7, r3, r7
 80019e0:	45b9      	cmp	r9, r7
 80019e2:	4180      	sbcs	r0, r0
 80019e4:	4240      	negs	r0, r0
 80019e6:	1a36      	subs	r6, r6, r0
 80019e8:	0233      	lsls	r3, r6, #8
 80019ea:	d400      	bmi.n	80019ee <__aeabi_dadd+0xaa>
 80019ec:	e0ff      	b.n	8001bee <__aeabi_dadd+0x2aa>
 80019ee:	0276      	lsls	r6, r6, #9
 80019f0:	0a76      	lsrs	r6, r6, #9
 80019f2:	2e00      	cmp	r6, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dadd+0xb4>
 80019f6:	e13c      	b.n	8001c72 <__aeabi_dadd+0x32e>
 80019f8:	0030      	movs	r0, r6
 80019fa:	f002 f80d 	bl	8003a18 <__clzsi2>
 80019fe:	0003      	movs	r3, r0
 8001a00:	3b08      	subs	r3, #8
 8001a02:	2120      	movs	r1, #32
 8001a04:	0038      	movs	r0, r7
 8001a06:	1aca      	subs	r2, r1, r3
 8001a08:	40d0      	lsrs	r0, r2
 8001a0a:	409e      	lsls	r6, r3
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	409f      	lsls	r7, r3
 8001a10:	4332      	orrs	r2, r6
 8001a12:	429c      	cmp	r4, r3
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_dadd+0xd4>
 8001a16:	e1a6      	b.n	8001d66 <__aeabi_dadd+0x422>
 8001a18:	1b18      	subs	r0, r3, r4
 8001a1a:	3001      	adds	r0, #1
 8001a1c:	1a09      	subs	r1, r1, r0
 8001a1e:	003e      	movs	r6, r7
 8001a20:	408f      	lsls	r7, r1
 8001a22:	40c6      	lsrs	r6, r0
 8001a24:	1e7b      	subs	r3, r7, #1
 8001a26:	419f      	sbcs	r7, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	408b      	lsls	r3, r1
 8001a2c:	4337      	orrs	r7, r6
 8001a2e:	431f      	orrs	r7, r3
 8001a30:	40c2      	lsrs	r2, r0
 8001a32:	003b      	movs	r3, r7
 8001a34:	0016      	movs	r6, r2
 8001a36:	2400      	movs	r4, #0
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_dadd+0xfa>
 8001a3c:	e1df      	b.n	8001dfe <__aeabi_dadd+0x4ba>
 8001a3e:	077b      	lsls	r3, r7, #29
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dadd+0x100>
 8001a42:	e332      	b.n	80020aa <__aeabi_dadd+0x766>
 8001a44:	230f      	movs	r3, #15
 8001a46:	003a      	movs	r2, r7
 8001a48:	403b      	ands	r3, r7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d004      	beq.n	8001a58 <__aeabi_dadd+0x114>
 8001a4e:	1d3a      	adds	r2, r7, #4
 8001a50:	42ba      	cmp	r2, r7
 8001a52:	41bf      	sbcs	r7, r7
 8001a54:	427f      	negs	r7, r7
 8001a56:	19f6      	adds	r6, r6, r7
 8001a58:	0233      	lsls	r3, r6, #8
 8001a5a:	d400      	bmi.n	8001a5e <__aeabi_dadd+0x11a>
 8001a5c:	e323      	b.n	80020a6 <__aeabi_dadd+0x762>
 8001a5e:	4b9c      	ldr	r3, [pc, #624]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001a60:	3401      	adds	r4, #1
 8001a62:	429c      	cmp	r4, r3
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dadd+0x124>
 8001a66:	e0b4      	b.n	8001bd2 <__aeabi_dadd+0x28e>
 8001a68:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd4 <__aeabi_dadd+0x390>)
 8001a6a:	0564      	lsls	r4, r4, #21
 8001a6c:	401e      	ands	r6, r3
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	0777      	lsls	r7, r6, #29
 8001a72:	08d2      	lsrs	r2, r2, #3
 8001a74:	0276      	lsls	r6, r6, #9
 8001a76:	4317      	orrs	r7, r2
 8001a78:	0b36      	lsrs	r6, r6, #12
 8001a7a:	e0ac      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001a7c:	2900      	cmp	r1, #0
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_dadd+0x13e>
 8001a80:	e07e      	b.n	8001b80 <__aeabi_dadd+0x23c>
 8001a82:	4641      	mov	r1, r8
 8001a84:	1b09      	subs	r1, r1, r4
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d000      	beq.n	8001a8c <__aeabi_dadd+0x148>
 8001a8a:	e160      	b.n	8001d4e <__aeabi_dadd+0x40a>
 8001a8c:	0034      	movs	r4, r6
 8001a8e:	4648      	mov	r0, r9
 8001a90:	4304      	orrs	r4, r0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x152>
 8001a94:	e1c9      	b.n	8001e2a <__aeabi_dadd+0x4e6>
 8001a96:	1e4c      	subs	r4, r1, #1
 8001a98:	2901      	cmp	r1, #1
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x15a>
 8001a9c:	e22e      	b.n	8001efc <__aeabi_dadd+0x5b8>
 8001a9e:	4d8c      	ldr	r5, [pc, #560]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001aa0:	42a9      	cmp	r1, r5
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x162>
 8001aa4:	e224      	b.n	8001ef0 <__aeabi_dadd+0x5ac>
 8001aa6:	2701      	movs	r7, #1
 8001aa8:	2c38      	cmp	r4, #56	@ 0x38
 8001aaa:	dc11      	bgt.n	8001ad0 <__aeabi_dadd+0x18c>
 8001aac:	0021      	movs	r1, r4
 8001aae:	291f      	cmp	r1, #31
 8001ab0:	dd00      	ble.n	8001ab4 <__aeabi_dadd+0x170>
 8001ab2:	e20b      	b.n	8001ecc <__aeabi_dadd+0x588>
 8001ab4:	2420      	movs	r4, #32
 8001ab6:	0037      	movs	r7, r6
 8001ab8:	4648      	mov	r0, r9
 8001aba:	1a64      	subs	r4, r4, r1
 8001abc:	40a7      	lsls	r7, r4
 8001abe:	40c8      	lsrs	r0, r1
 8001ac0:	4307      	orrs	r7, r0
 8001ac2:	4648      	mov	r0, r9
 8001ac4:	40a0      	lsls	r0, r4
 8001ac6:	40ce      	lsrs	r6, r1
 8001ac8:	1e44      	subs	r4, r0, #1
 8001aca:	41a0      	sbcs	r0, r4
 8001acc:	1b9b      	subs	r3, r3, r6
 8001ace:	4307      	orrs	r7, r0
 8001ad0:	1bd7      	subs	r7, r2, r7
 8001ad2:	42ba      	cmp	r2, r7
 8001ad4:	4192      	sbcs	r2, r2
 8001ad6:	4252      	negs	r2, r2
 8001ad8:	4665      	mov	r5, ip
 8001ada:	4644      	mov	r4, r8
 8001adc:	1a9e      	subs	r6, r3, r2
 8001ade:	e783      	b.n	80019e8 <__aeabi_dadd+0xa4>
 8001ae0:	2900      	cmp	r1, #0
 8001ae2:	dc00      	bgt.n	8001ae6 <__aeabi_dadd+0x1a2>
 8001ae4:	e09c      	b.n	8001c20 <__aeabi_dadd+0x2dc>
 8001ae6:	4647      	mov	r7, r8
 8001ae8:	2f00      	cmp	r7, #0
 8001aea:	d167      	bne.n	8001bbc <__aeabi_dadd+0x278>
 8001aec:	001f      	movs	r7, r3
 8001aee:	4317      	orrs	r7, r2
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dadd+0x1b0>
 8001af2:	e0e4      	b.n	8001cbe <__aeabi_dadd+0x37a>
 8001af4:	1e48      	subs	r0, r1, #1
 8001af6:	2901      	cmp	r1, #1
 8001af8:	d100      	bne.n	8001afc <__aeabi_dadd+0x1b8>
 8001afa:	e19b      	b.n	8001e34 <__aeabi_dadd+0x4f0>
 8001afc:	4f74      	ldr	r7, [pc, #464]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001afe:	42b9      	cmp	r1, r7
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1c0>
 8001b02:	e0eb      	b.n	8001cdc <__aeabi_dadd+0x398>
 8001b04:	2701      	movs	r7, #1
 8001b06:	0001      	movs	r1, r0
 8001b08:	2838      	cmp	r0, #56	@ 0x38
 8001b0a:	dc11      	bgt.n	8001b30 <__aeabi_dadd+0x1ec>
 8001b0c:	291f      	cmp	r1, #31
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dadd+0x1ce>
 8001b10:	e1c7      	b.n	8001ea2 <__aeabi_dadd+0x55e>
 8001b12:	2720      	movs	r7, #32
 8001b14:	1a78      	subs	r0, r7, r1
 8001b16:	001f      	movs	r7, r3
 8001b18:	4684      	mov	ip, r0
 8001b1a:	4087      	lsls	r7, r0
 8001b1c:	0010      	movs	r0, r2
 8001b1e:	40c8      	lsrs	r0, r1
 8001b20:	4307      	orrs	r7, r0
 8001b22:	4660      	mov	r0, ip
 8001b24:	4082      	lsls	r2, r0
 8001b26:	40cb      	lsrs	r3, r1
 8001b28:	1e50      	subs	r0, r2, #1
 8001b2a:	4182      	sbcs	r2, r0
 8001b2c:	18f6      	adds	r6, r6, r3
 8001b2e:	4317      	orrs	r7, r2
 8001b30:	444f      	add	r7, r9
 8001b32:	454f      	cmp	r7, r9
 8001b34:	4180      	sbcs	r0, r0
 8001b36:	4240      	negs	r0, r0
 8001b38:	1836      	adds	r6, r6, r0
 8001b3a:	0233      	lsls	r3, r6, #8
 8001b3c:	d557      	bpl.n	8001bee <__aeabi_dadd+0x2aa>
 8001b3e:	4b64      	ldr	r3, [pc, #400]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001b40:	3401      	adds	r4, #1
 8001b42:	429c      	cmp	r4, r3
 8001b44:	d045      	beq.n	8001bd2 <__aeabi_dadd+0x28e>
 8001b46:	2101      	movs	r1, #1
 8001b48:	4b62      	ldr	r3, [pc, #392]	@ (8001cd4 <__aeabi_dadd+0x390>)
 8001b4a:	087a      	lsrs	r2, r7, #1
 8001b4c:	401e      	ands	r6, r3
 8001b4e:	4039      	ands	r1, r7
 8001b50:	430a      	orrs	r2, r1
 8001b52:	07f7      	lsls	r7, r6, #31
 8001b54:	4317      	orrs	r7, r2
 8001b56:	0876      	lsrs	r6, r6, #1
 8001b58:	e771      	b.n	8001a3e <__aeabi_dadd+0xfa>
 8001b5a:	001f      	movs	r7, r3
 8001b5c:	4317      	orrs	r7, r2
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dadd+0x21e>
 8001b60:	e0ad      	b.n	8001cbe <__aeabi_dadd+0x37a>
 8001b62:	1e4f      	subs	r7, r1, #1
 8001b64:	46bc      	mov	ip, r7
 8001b66:	2901      	cmp	r1, #1
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dadd+0x228>
 8001b6a:	e182      	b.n	8001e72 <__aeabi_dadd+0x52e>
 8001b6c:	4f58      	ldr	r7, [pc, #352]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001b6e:	42b9      	cmp	r1, r7
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dadd+0x230>
 8001b72:	e190      	b.n	8001e96 <__aeabi_dadd+0x552>
 8001b74:	4661      	mov	r1, ip
 8001b76:	2701      	movs	r7, #1
 8001b78:	2938      	cmp	r1, #56	@ 0x38
 8001b7a:	dd00      	ble.n	8001b7e <__aeabi_dadd+0x23a>
 8001b7c:	e72e      	b.n	80019dc <__aeabi_dadd+0x98>
 8001b7e:	e718      	b.n	80019b2 <__aeabi_dadd+0x6e>
 8001b80:	4f55      	ldr	r7, [pc, #340]	@ (8001cd8 <__aeabi_dadd+0x394>)
 8001b82:	1c61      	adds	r1, r4, #1
 8001b84:	4239      	tst	r1, r7
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dadd+0x246>
 8001b88:	e0d0      	b.n	8001d2c <__aeabi_dadd+0x3e8>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	4648      	mov	r0, r9
 8001b8e:	001f      	movs	r7, r3
 8001b90:	4301      	orrs	r1, r0
 8001b92:	4317      	orrs	r7, r2
 8001b94:	2c00      	cmp	r4, #0
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x256>
 8001b98:	e13d      	b.n	8001e16 <__aeabi_dadd+0x4d2>
 8001b9a:	2900      	cmp	r1, #0
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dadd+0x25c>
 8001b9e:	e1bc      	b.n	8001f1a <__aeabi_dadd+0x5d6>
 8001ba0:	2f00      	cmp	r7, #0
 8001ba2:	d000      	beq.n	8001ba6 <__aeabi_dadd+0x262>
 8001ba4:	e1bf      	b.n	8001f26 <__aeabi_dadd+0x5e2>
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	2100      	movs	r1, #0
 8001baa:	08d8      	lsrs	r0, r3, #3
 8001bac:	0777      	lsls	r7, r6, #29
 8001bae:	4307      	orrs	r7, r0
 8001bb0:	08f0      	lsrs	r0, r6, #3
 8001bb2:	0306      	lsls	r6, r0, #12
 8001bb4:	054c      	lsls	r4, r1, #21
 8001bb6:	0b36      	lsrs	r6, r6, #12
 8001bb8:	0d64      	lsrs	r4, r4, #21
 8001bba:	e00c      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001bbc:	4f44      	ldr	r7, [pc, #272]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001bbe:	42bc      	cmp	r4, r7
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dadd+0x280>
 8001bc2:	e08b      	b.n	8001cdc <__aeabi_dadd+0x398>
 8001bc4:	2701      	movs	r7, #1
 8001bc6:	2938      	cmp	r1, #56	@ 0x38
 8001bc8:	dcb2      	bgt.n	8001b30 <__aeabi_dadd+0x1ec>
 8001bca:	2780      	movs	r7, #128	@ 0x80
 8001bcc:	043f      	lsls	r7, r7, #16
 8001bce:	433b      	orrs	r3, r7
 8001bd0:	e79c      	b.n	8001b0c <__aeabi_dadd+0x1c8>
 8001bd2:	2600      	movs	r6, #0
 8001bd4:	2700      	movs	r7, #0
 8001bd6:	0524      	lsls	r4, r4, #20
 8001bd8:	4334      	orrs	r4, r6
 8001bda:	07ed      	lsls	r5, r5, #31
 8001bdc:	432c      	orrs	r4, r5
 8001bde:	0038      	movs	r0, r7
 8001be0:	0021      	movs	r1, r4
 8001be2:	b002      	add	sp, #8
 8001be4:	bce0      	pop	{r5, r6, r7}
 8001be6:	46ba      	mov	sl, r7
 8001be8:	46b1      	mov	r9, r6
 8001bea:	46a8      	mov	r8, r5
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bee:	077b      	lsls	r3, r7, #29
 8001bf0:	d004      	beq.n	8001bfc <__aeabi_dadd+0x2b8>
 8001bf2:	230f      	movs	r3, #15
 8001bf4:	403b      	ands	r3, r7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dadd+0x2b8>
 8001bfa:	e728      	b.n	8001a4e <__aeabi_dadd+0x10a>
 8001bfc:	08f8      	lsrs	r0, r7, #3
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001c00:	0777      	lsls	r7, r6, #29
 8001c02:	4307      	orrs	r7, r0
 8001c04:	08f0      	lsrs	r0, r6, #3
 8001c06:	429c      	cmp	r4, r3
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2c8>
 8001c0a:	e24a      	b.n	80020a2 <__aeabi_dadd+0x75e>
 8001c0c:	003b      	movs	r3, r7
 8001c0e:	4303      	orrs	r3, r0
 8001c10:	d059      	beq.n	8001cc6 <__aeabi_dadd+0x382>
 8001c12:	2680      	movs	r6, #128	@ 0x80
 8001c14:	0336      	lsls	r6, r6, #12
 8001c16:	4306      	orrs	r6, r0
 8001c18:	0336      	lsls	r6, r6, #12
 8001c1a:	4c2d      	ldr	r4, [pc, #180]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001c1c:	0b36      	lsrs	r6, r6, #12
 8001c1e:	e7da      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001c20:	2900      	cmp	r1, #0
 8001c22:	d061      	beq.n	8001ce8 <__aeabi_dadd+0x3a4>
 8001c24:	4641      	mov	r1, r8
 8001c26:	1b09      	subs	r1, r1, r4
 8001c28:	2c00      	cmp	r4, #0
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dadd+0x2ea>
 8001c2c:	e0b9      	b.n	8001da2 <__aeabi_dadd+0x45e>
 8001c2e:	4c28      	ldr	r4, [pc, #160]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001c30:	45a0      	cmp	r8, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dadd+0x2f2>
 8001c34:	e1a5      	b.n	8001f82 <__aeabi_dadd+0x63e>
 8001c36:	2701      	movs	r7, #1
 8001c38:	2938      	cmp	r1, #56	@ 0x38
 8001c3a:	dc13      	bgt.n	8001c64 <__aeabi_dadd+0x320>
 8001c3c:	2480      	movs	r4, #128	@ 0x80
 8001c3e:	0424      	lsls	r4, r4, #16
 8001c40:	4326      	orrs	r6, r4
 8001c42:	291f      	cmp	r1, #31
 8001c44:	dd00      	ble.n	8001c48 <__aeabi_dadd+0x304>
 8001c46:	e1c8      	b.n	8001fda <__aeabi_dadd+0x696>
 8001c48:	2420      	movs	r4, #32
 8001c4a:	0037      	movs	r7, r6
 8001c4c:	4648      	mov	r0, r9
 8001c4e:	1a64      	subs	r4, r4, r1
 8001c50:	40a7      	lsls	r7, r4
 8001c52:	40c8      	lsrs	r0, r1
 8001c54:	4307      	orrs	r7, r0
 8001c56:	4648      	mov	r0, r9
 8001c58:	40a0      	lsls	r0, r4
 8001c5a:	40ce      	lsrs	r6, r1
 8001c5c:	1e44      	subs	r4, r0, #1
 8001c5e:	41a0      	sbcs	r0, r4
 8001c60:	199b      	adds	r3, r3, r6
 8001c62:	4307      	orrs	r7, r0
 8001c64:	18bf      	adds	r7, r7, r2
 8001c66:	4297      	cmp	r7, r2
 8001c68:	4192      	sbcs	r2, r2
 8001c6a:	4252      	negs	r2, r2
 8001c6c:	4644      	mov	r4, r8
 8001c6e:	18d6      	adds	r6, r2, r3
 8001c70:	e763      	b.n	8001b3a <__aeabi_dadd+0x1f6>
 8001c72:	0038      	movs	r0, r7
 8001c74:	f001 fed0 	bl	8003a18 <__clzsi2>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	3318      	adds	r3, #24
 8001c7c:	2b1f      	cmp	r3, #31
 8001c7e:	dc00      	bgt.n	8001c82 <__aeabi_dadd+0x33e>
 8001c80:	e6bf      	b.n	8001a02 <__aeabi_dadd+0xbe>
 8001c82:	003a      	movs	r2, r7
 8001c84:	3808      	subs	r0, #8
 8001c86:	4082      	lsls	r2, r0
 8001c88:	429c      	cmp	r4, r3
 8001c8a:	dd00      	ble.n	8001c8e <__aeabi_dadd+0x34a>
 8001c8c:	e083      	b.n	8001d96 <__aeabi_dadd+0x452>
 8001c8e:	1b1b      	subs	r3, r3, r4
 8001c90:	1c58      	adds	r0, r3, #1
 8001c92:	281f      	cmp	r0, #31
 8001c94:	dc00      	bgt.n	8001c98 <__aeabi_dadd+0x354>
 8001c96:	e1b4      	b.n	8002002 <__aeabi_dadd+0x6be>
 8001c98:	0017      	movs	r7, r2
 8001c9a:	3b1f      	subs	r3, #31
 8001c9c:	40df      	lsrs	r7, r3
 8001c9e:	2820      	cmp	r0, #32
 8001ca0:	d005      	beq.n	8001cae <__aeabi_dadd+0x36a>
 8001ca2:	2340      	movs	r3, #64	@ 0x40
 8001ca4:	1a1b      	subs	r3, r3, r0
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	1e53      	subs	r3, r2, #1
 8001caa:	419a      	sbcs	r2, r3
 8001cac:	4317      	orrs	r7, r2
 8001cae:	2400      	movs	r4, #0
 8001cb0:	2f00      	cmp	r7, #0
 8001cb2:	d00a      	beq.n	8001cca <__aeabi_dadd+0x386>
 8001cb4:	077b      	lsls	r3, r7, #29
 8001cb6:	d000      	beq.n	8001cba <__aeabi_dadd+0x376>
 8001cb8:	e6c4      	b.n	8001a44 <__aeabi_dadd+0x100>
 8001cba:	0026      	movs	r6, r4
 8001cbc:	e79e      	b.n	8001bfc <__aeabi_dadd+0x2b8>
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	000c      	movs	r4, r1
 8001cc2:	08d8      	lsrs	r0, r3, #3
 8001cc4:	e79b      	b.n	8001bfe <__aeabi_dadd+0x2ba>
 8001cc6:	2700      	movs	r7, #0
 8001cc8:	4c01      	ldr	r4, [pc, #4]	@ (8001cd0 <__aeabi_dadd+0x38c>)
 8001cca:	2600      	movs	r6, #0
 8001ccc:	e783      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	000007ff 	.word	0x000007ff
 8001cd4:	ff7fffff 	.word	0xff7fffff
 8001cd8:	000007fe 	.word	0x000007fe
 8001cdc:	464b      	mov	r3, r9
 8001cde:	0777      	lsls	r7, r6, #29
 8001ce0:	08d8      	lsrs	r0, r3, #3
 8001ce2:	4307      	orrs	r7, r0
 8001ce4:	08f0      	lsrs	r0, r6, #3
 8001ce6:	e791      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8001ce8:	4fcd      	ldr	r7, [pc, #820]	@ (8002020 <__aeabi_dadd+0x6dc>)
 8001cea:	1c61      	adds	r1, r4, #1
 8001cec:	4239      	tst	r1, r7
 8001cee:	d16b      	bne.n	8001dc8 <__aeabi_dadd+0x484>
 8001cf0:	0031      	movs	r1, r6
 8001cf2:	4648      	mov	r0, r9
 8001cf4:	4301      	orrs	r1, r0
 8001cf6:	2c00      	cmp	r4, #0
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_dadd+0x3b8>
 8001cfa:	e14b      	b.n	8001f94 <__aeabi_dadd+0x650>
 8001cfc:	001f      	movs	r7, r3
 8001cfe:	4317      	orrs	r7, r2
 8001d00:	2900      	cmp	r1, #0
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dadd+0x3c2>
 8001d04:	e181      	b.n	800200a <__aeabi_dadd+0x6c6>
 8001d06:	2f00      	cmp	r7, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dadd+0x3c8>
 8001d0a:	e74c      	b.n	8001ba6 <__aeabi_dadd+0x262>
 8001d0c:	444a      	add	r2, r9
 8001d0e:	454a      	cmp	r2, r9
 8001d10:	4180      	sbcs	r0, r0
 8001d12:	18f6      	adds	r6, r6, r3
 8001d14:	4240      	negs	r0, r0
 8001d16:	1836      	adds	r6, r6, r0
 8001d18:	0233      	lsls	r3, r6, #8
 8001d1a:	d500      	bpl.n	8001d1e <__aeabi_dadd+0x3da>
 8001d1c:	e1b0      	b.n	8002080 <__aeabi_dadd+0x73c>
 8001d1e:	0017      	movs	r7, r2
 8001d20:	4691      	mov	r9, r2
 8001d22:	4337      	orrs	r7, r6
 8001d24:	d000      	beq.n	8001d28 <__aeabi_dadd+0x3e4>
 8001d26:	e73e      	b.n	8001ba6 <__aeabi_dadd+0x262>
 8001d28:	2600      	movs	r6, #0
 8001d2a:	e754      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	1a89      	subs	r1, r1, r2
 8001d30:	4688      	mov	r8, r1
 8001d32:	45c1      	cmp	r9, r8
 8001d34:	41bf      	sbcs	r7, r7
 8001d36:	1af1      	subs	r1, r6, r3
 8001d38:	427f      	negs	r7, r7
 8001d3a:	1bc9      	subs	r1, r1, r7
 8001d3c:	020f      	lsls	r7, r1, #8
 8001d3e:	d461      	bmi.n	8001e04 <__aeabi_dadd+0x4c0>
 8001d40:	4647      	mov	r7, r8
 8001d42:	430f      	orrs	r7, r1
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dadd+0x404>
 8001d46:	e0bd      	b.n	8001ec4 <__aeabi_dadd+0x580>
 8001d48:	000e      	movs	r6, r1
 8001d4a:	4647      	mov	r7, r8
 8001d4c:	e651      	b.n	80019f2 <__aeabi_dadd+0xae>
 8001d4e:	4cb5      	ldr	r4, [pc, #724]	@ (8002024 <__aeabi_dadd+0x6e0>)
 8001d50:	45a0      	cmp	r8, r4
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dadd+0x412>
 8001d54:	e100      	b.n	8001f58 <__aeabi_dadd+0x614>
 8001d56:	2701      	movs	r7, #1
 8001d58:	2938      	cmp	r1, #56	@ 0x38
 8001d5a:	dd00      	ble.n	8001d5e <__aeabi_dadd+0x41a>
 8001d5c:	e6b8      	b.n	8001ad0 <__aeabi_dadd+0x18c>
 8001d5e:	2480      	movs	r4, #128	@ 0x80
 8001d60:	0424      	lsls	r4, r4, #16
 8001d62:	4326      	orrs	r6, r4
 8001d64:	e6a3      	b.n	8001aae <__aeabi_dadd+0x16a>
 8001d66:	4eb0      	ldr	r6, [pc, #704]	@ (8002028 <__aeabi_dadd+0x6e4>)
 8001d68:	1ae4      	subs	r4, r4, r3
 8001d6a:	4016      	ands	r6, r2
 8001d6c:	077b      	lsls	r3, r7, #29
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dadd+0x42e>
 8001d70:	e73f      	b.n	8001bf2 <__aeabi_dadd+0x2ae>
 8001d72:	e743      	b.n	8001bfc <__aeabi_dadd+0x2b8>
 8001d74:	000f      	movs	r7, r1
 8001d76:	0018      	movs	r0, r3
 8001d78:	3f20      	subs	r7, #32
 8001d7a:	40f8      	lsrs	r0, r7
 8001d7c:	4684      	mov	ip, r0
 8001d7e:	2920      	cmp	r1, #32
 8001d80:	d003      	beq.n	8001d8a <__aeabi_dadd+0x446>
 8001d82:	2740      	movs	r7, #64	@ 0x40
 8001d84:	1a79      	subs	r1, r7, r1
 8001d86:	408b      	lsls	r3, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	1e53      	subs	r3, r2, #1
 8001d8c:	419a      	sbcs	r2, r3
 8001d8e:	4663      	mov	r3, ip
 8001d90:	0017      	movs	r7, r2
 8001d92:	431f      	orrs	r7, r3
 8001d94:	e622      	b.n	80019dc <__aeabi_dadd+0x98>
 8001d96:	48a4      	ldr	r0, [pc, #656]	@ (8002028 <__aeabi_dadd+0x6e4>)
 8001d98:	1ae1      	subs	r1, r4, r3
 8001d9a:	4010      	ands	r0, r2
 8001d9c:	0747      	lsls	r7, r0, #29
 8001d9e:	08c0      	lsrs	r0, r0, #3
 8001da0:	e707      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 8001da2:	0034      	movs	r4, r6
 8001da4:	4648      	mov	r0, r9
 8001da6:	4304      	orrs	r4, r0
 8001da8:	d100      	bne.n	8001dac <__aeabi_dadd+0x468>
 8001daa:	e0fa      	b.n	8001fa2 <__aeabi_dadd+0x65e>
 8001dac:	1e4c      	subs	r4, r1, #1
 8001dae:	2901      	cmp	r1, #1
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dadd+0x470>
 8001db2:	e0d7      	b.n	8001f64 <__aeabi_dadd+0x620>
 8001db4:	4f9b      	ldr	r7, [pc, #620]	@ (8002024 <__aeabi_dadd+0x6e0>)
 8001db6:	42b9      	cmp	r1, r7
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x478>
 8001dba:	e0e2      	b.n	8001f82 <__aeabi_dadd+0x63e>
 8001dbc:	2701      	movs	r7, #1
 8001dbe:	2c38      	cmp	r4, #56	@ 0x38
 8001dc0:	dd00      	ble.n	8001dc4 <__aeabi_dadd+0x480>
 8001dc2:	e74f      	b.n	8001c64 <__aeabi_dadd+0x320>
 8001dc4:	0021      	movs	r1, r4
 8001dc6:	e73c      	b.n	8001c42 <__aeabi_dadd+0x2fe>
 8001dc8:	4c96      	ldr	r4, [pc, #600]	@ (8002024 <__aeabi_dadd+0x6e0>)
 8001dca:	42a1      	cmp	r1, r4
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dadd+0x48c>
 8001dce:	e0dd      	b.n	8001f8c <__aeabi_dadd+0x648>
 8001dd0:	444a      	add	r2, r9
 8001dd2:	454a      	cmp	r2, r9
 8001dd4:	4180      	sbcs	r0, r0
 8001dd6:	18f3      	adds	r3, r6, r3
 8001dd8:	4240      	negs	r0, r0
 8001dda:	1818      	adds	r0, r3, r0
 8001ddc:	07c7      	lsls	r7, r0, #31
 8001dde:	0852      	lsrs	r2, r2, #1
 8001de0:	4317      	orrs	r7, r2
 8001de2:	0846      	lsrs	r6, r0, #1
 8001de4:	0752      	lsls	r2, r2, #29
 8001de6:	d005      	beq.n	8001df4 <__aeabi_dadd+0x4b0>
 8001de8:	220f      	movs	r2, #15
 8001dea:	000c      	movs	r4, r1
 8001dec:	403a      	ands	r2, r7
 8001dee:	2a04      	cmp	r2, #4
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dadd+0x4b0>
 8001df2:	e62c      	b.n	8001a4e <__aeabi_dadd+0x10a>
 8001df4:	0776      	lsls	r6, r6, #29
 8001df6:	08ff      	lsrs	r7, r7, #3
 8001df8:	4337      	orrs	r7, r6
 8001dfa:	0900      	lsrs	r0, r0, #4
 8001dfc:	e6d9      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 8001dfe:	2700      	movs	r7, #0
 8001e00:	2600      	movs	r6, #0
 8001e02:	e6e8      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001e04:	4649      	mov	r1, r9
 8001e06:	1a57      	subs	r7, r2, r1
 8001e08:	42ba      	cmp	r2, r7
 8001e0a:	4192      	sbcs	r2, r2
 8001e0c:	1b9e      	subs	r6, r3, r6
 8001e0e:	4252      	negs	r2, r2
 8001e10:	4665      	mov	r5, ip
 8001e12:	1ab6      	subs	r6, r6, r2
 8001e14:	e5ed      	b.n	80019f2 <__aeabi_dadd+0xae>
 8001e16:	2900      	cmp	r1, #0
 8001e18:	d000      	beq.n	8001e1c <__aeabi_dadd+0x4d8>
 8001e1a:	e0c6      	b.n	8001faa <__aeabi_dadd+0x666>
 8001e1c:	2f00      	cmp	r7, #0
 8001e1e:	d167      	bne.n	8001ef0 <__aeabi_dadd+0x5ac>
 8001e20:	2680      	movs	r6, #128	@ 0x80
 8001e22:	2500      	movs	r5, #0
 8001e24:	4c7f      	ldr	r4, [pc, #508]	@ (8002024 <__aeabi_dadd+0x6e0>)
 8001e26:	0336      	lsls	r6, r6, #12
 8001e28:	e6d5      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001e2a:	4665      	mov	r5, ip
 8001e2c:	000c      	movs	r4, r1
 8001e2e:	001e      	movs	r6, r3
 8001e30:	08d0      	lsrs	r0, r2, #3
 8001e32:	e6e4      	b.n	8001bfe <__aeabi_dadd+0x2ba>
 8001e34:	444a      	add	r2, r9
 8001e36:	454a      	cmp	r2, r9
 8001e38:	4180      	sbcs	r0, r0
 8001e3a:	18f3      	adds	r3, r6, r3
 8001e3c:	4240      	negs	r0, r0
 8001e3e:	1818      	adds	r0, r3, r0
 8001e40:	0011      	movs	r1, r2
 8001e42:	0203      	lsls	r3, r0, #8
 8001e44:	d400      	bmi.n	8001e48 <__aeabi_dadd+0x504>
 8001e46:	e096      	b.n	8001f76 <__aeabi_dadd+0x632>
 8001e48:	4b77      	ldr	r3, [pc, #476]	@ (8002028 <__aeabi_dadd+0x6e4>)
 8001e4a:	0849      	lsrs	r1, r1, #1
 8001e4c:	4018      	ands	r0, r3
 8001e4e:	07c3      	lsls	r3, r0, #31
 8001e50:	430b      	orrs	r3, r1
 8001e52:	0844      	lsrs	r4, r0, #1
 8001e54:	0749      	lsls	r1, r1, #29
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dadd+0x516>
 8001e58:	e129      	b.n	80020ae <__aeabi_dadd+0x76a>
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	2a04      	cmp	r2, #4
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dadd+0x520>
 8001e62:	e0ea      	b.n	800203a <__aeabi_dadd+0x6f6>
 8001e64:	1d1f      	adds	r7, r3, #4
 8001e66:	429f      	cmp	r7, r3
 8001e68:	41b6      	sbcs	r6, r6
 8001e6a:	4276      	negs	r6, r6
 8001e6c:	1936      	adds	r6, r6, r4
 8001e6e:	2402      	movs	r4, #2
 8001e70:	e6c4      	b.n	8001bfc <__aeabi_dadd+0x2b8>
 8001e72:	4649      	mov	r1, r9
 8001e74:	1a8f      	subs	r7, r1, r2
 8001e76:	45b9      	cmp	r9, r7
 8001e78:	4180      	sbcs	r0, r0
 8001e7a:	1af6      	subs	r6, r6, r3
 8001e7c:	4240      	negs	r0, r0
 8001e7e:	1a36      	subs	r6, r6, r0
 8001e80:	0233      	lsls	r3, r6, #8
 8001e82:	d406      	bmi.n	8001e92 <__aeabi_dadd+0x54e>
 8001e84:	0773      	lsls	r3, r6, #29
 8001e86:	08ff      	lsrs	r7, r7, #3
 8001e88:	2101      	movs	r1, #1
 8001e8a:	431f      	orrs	r7, r3
 8001e8c:	08f0      	lsrs	r0, r6, #3
 8001e8e:	e690      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 8001e90:	4665      	mov	r5, ip
 8001e92:	2401      	movs	r4, #1
 8001e94:	e5ab      	b.n	80019ee <__aeabi_dadd+0xaa>
 8001e96:	464b      	mov	r3, r9
 8001e98:	0777      	lsls	r7, r6, #29
 8001e9a:	08d8      	lsrs	r0, r3, #3
 8001e9c:	4307      	orrs	r7, r0
 8001e9e:	08f0      	lsrs	r0, r6, #3
 8001ea0:	e6b4      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8001ea2:	000f      	movs	r7, r1
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	3f20      	subs	r7, #32
 8001ea8:	40f8      	lsrs	r0, r7
 8001eaa:	4684      	mov	ip, r0
 8001eac:	2920      	cmp	r1, #32
 8001eae:	d003      	beq.n	8001eb8 <__aeabi_dadd+0x574>
 8001eb0:	2740      	movs	r7, #64	@ 0x40
 8001eb2:	1a79      	subs	r1, r7, r1
 8001eb4:	408b      	lsls	r3, r1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	1e53      	subs	r3, r2, #1
 8001eba:	419a      	sbcs	r2, r3
 8001ebc:	4663      	mov	r3, ip
 8001ebe:	0017      	movs	r7, r2
 8001ec0:	431f      	orrs	r7, r3
 8001ec2:	e635      	b.n	8001b30 <__aeabi_dadd+0x1ec>
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	2400      	movs	r4, #0
 8001ec8:	2600      	movs	r6, #0
 8001eca:	e684      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001ecc:	000c      	movs	r4, r1
 8001ece:	0035      	movs	r5, r6
 8001ed0:	3c20      	subs	r4, #32
 8001ed2:	40e5      	lsrs	r5, r4
 8001ed4:	2920      	cmp	r1, #32
 8001ed6:	d005      	beq.n	8001ee4 <__aeabi_dadd+0x5a0>
 8001ed8:	2440      	movs	r4, #64	@ 0x40
 8001eda:	1a61      	subs	r1, r4, r1
 8001edc:	408e      	lsls	r6, r1
 8001ede:	4649      	mov	r1, r9
 8001ee0:	4331      	orrs	r1, r6
 8001ee2:	4689      	mov	r9, r1
 8001ee4:	4648      	mov	r0, r9
 8001ee6:	1e41      	subs	r1, r0, #1
 8001ee8:	4188      	sbcs	r0, r1
 8001eea:	0007      	movs	r7, r0
 8001eec:	432f      	orrs	r7, r5
 8001eee:	e5ef      	b.n	8001ad0 <__aeabi_dadd+0x18c>
 8001ef0:	08d2      	lsrs	r2, r2, #3
 8001ef2:	075f      	lsls	r7, r3, #29
 8001ef4:	4665      	mov	r5, ip
 8001ef6:	4317      	orrs	r7, r2
 8001ef8:	08d8      	lsrs	r0, r3, #3
 8001efa:	e687      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8001efc:	1a17      	subs	r7, r2, r0
 8001efe:	42ba      	cmp	r2, r7
 8001f00:	4192      	sbcs	r2, r2
 8001f02:	1b9e      	subs	r6, r3, r6
 8001f04:	4252      	negs	r2, r2
 8001f06:	1ab6      	subs	r6, r6, r2
 8001f08:	0233      	lsls	r3, r6, #8
 8001f0a:	d4c1      	bmi.n	8001e90 <__aeabi_dadd+0x54c>
 8001f0c:	0773      	lsls	r3, r6, #29
 8001f0e:	08ff      	lsrs	r7, r7, #3
 8001f10:	4665      	mov	r5, ip
 8001f12:	2101      	movs	r1, #1
 8001f14:	431f      	orrs	r7, r3
 8001f16:	08f0      	lsrs	r0, r6, #3
 8001f18:	e64b      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 8001f1a:	2f00      	cmp	r7, #0
 8001f1c:	d07b      	beq.n	8002016 <__aeabi_dadd+0x6d2>
 8001f1e:	4665      	mov	r5, ip
 8001f20:	001e      	movs	r6, r3
 8001f22:	4691      	mov	r9, r2
 8001f24:	e63f      	b.n	8001ba6 <__aeabi_dadd+0x262>
 8001f26:	1a81      	subs	r1, r0, r2
 8001f28:	4688      	mov	r8, r1
 8001f2a:	45c1      	cmp	r9, r8
 8001f2c:	41a4      	sbcs	r4, r4
 8001f2e:	1af1      	subs	r1, r6, r3
 8001f30:	4264      	negs	r4, r4
 8001f32:	1b09      	subs	r1, r1, r4
 8001f34:	2480      	movs	r4, #128	@ 0x80
 8001f36:	0424      	lsls	r4, r4, #16
 8001f38:	4221      	tst	r1, r4
 8001f3a:	d077      	beq.n	800202c <__aeabi_dadd+0x6e8>
 8001f3c:	1a10      	subs	r0, r2, r0
 8001f3e:	4282      	cmp	r2, r0
 8001f40:	4192      	sbcs	r2, r2
 8001f42:	0007      	movs	r7, r0
 8001f44:	1b9e      	subs	r6, r3, r6
 8001f46:	4252      	negs	r2, r2
 8001f48:	1ab6      	subs	r6, r6, r2
 8001f4a:	4337      	orrs	r7, r6
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dadd+0x60c>
 8001f4e:	e0a0      	b.n	8002092 <__aeabi_dadd+0x74e>
 8001f50:	4665      	mov	r5, ip
 8001f52:	2400      	movs	r4, #0
 8001f54:	2600      	movs	r6, #0
 8001f56:	e63e      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001f58:	075f      	lsls	r7, r3, #29
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	4665      	mov	r5, ip
 8001f5e:	4317      	orrs	r7, r2
 8001f60:	08d8      	lsrs	r0, r3, #3
 8001f62:	e653      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8001f64:	1881      	adds	r1, r0, r2
 8001f66:	4291      	cmp	r1, r2
 8001f68:	4192      	sbcs	r2, r2
 8001f6a:	18f0      	adds	r0, r6, r3
 8001f6c:	4252      	negs	r2, r2
 8001f6e:	1880      	adds	r0, r0, r2
 8001f70:	0203      	lsls	r3, r0, #8
 8001f72:	d500      	bpl.n	8001f76 <__aeabi_dadd+0x632>
 8001f74:	e768      	b.n	8001e48 <__aeabi_dadd+0x504>
 8001f76:	0747      	lsls	r7, r0, #29
 8001f78:	08c9      	lsrs	r1, r1, #3
 8001f7a:	430f      	orrs	r7, r1
 8001f7c:	08c0      	lsrs	r0, r0, #3
 8001f7e:	2101      	movs	r1, #1
 8001f80:	e617      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 8001f82:	08d2      	lsrs	r2, r2, #3
 8001f84:	075f      	lsls	r7, r3, #29
 8001f86:	4317      	orrs	r7, r2
 8001f88:	08d8      	lsrs	r0, r3, #3
 8001f8a:	e63f      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	2600      	movs	r6, #0
 8001f90:	2700      	movs	r7, #0
 8001f92:	e620      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8001f94:	2900      	cmp	r1, #0
 8001f96:	d156      	bne.n	8002046 <__aeabi_dadd+0x702>
 8001f98:	075f      	lsls	r7, r3, #29
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	4317      	orrs	r7, r2
 8001f9e:	08d8      	lsrs	r0, r3, #3
 8001fa0:	e634      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8001fa2:	000c      	movs	r4, r1
 8001fa4:	001e      	movs	r6, r3
 8001fa6:	08d0      	lsrs	r0, r2, #3
 8001fa8:	e629      	b.n	8001bfe <__aeabi_dadd+0x2ba>
 8001faa:	08c1      	lsrs	r1, r0, #3
 8001fac:	0770      	lsls	r0, r6, #29
 8001fae:	4301      	orrs	r1, r0
 8001fb0:	08f0      	lsrs	r0, r6, #3
 8001fb2:	2f00      	cmp	r7, #0
 8001fb4:	d062      	beq.n	800207c <__aeabi_dadd+0x738>
 8001fb6:	2480      	movs	r4, #128	@ 0x80
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	4220      	tst	r0, r4
 8001fbc:	d007      	beq.n	8001fce <__aeabi_dadd+0x68a>
 8001fbe:	08de      	lsrs	r6, r3, #3
 8001fc0:	4226      	tst	r6, r4
 8001fc2:	d104      	bne.n	8001fce <__aeabi_dadd+0x68a>
 8001fc4:	4665      	mov	r5, ip
 8001fc6:	0030      	movs	r0, r6
 8001fc8:	08d1      	lsrs	r1, r2, #3
 8001fca:	075b      	lsls	r3, r3, #29
 8001fcc:	4319      	orrs	r1, r3
 8001fce:	0f4f      	lsrs	r7, r1, #29
 8001fd0:	00c9      	lsls	r1, r1, #3
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	077f      	lsls	r7, r7, #29
 8001fd6:	430f      	orrs	r7, r1
 8001fd8:	e618      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8001fda:	000c      	movs	r4, r1
 8001fdc:	0030      	movs	r0, r6
 8001fde:	3c20      	subs	r4, #32
 8001fe0:	40e0      	lsrs	r0, r4
 8001fe2:	4684      	mov	ip, r0
 8001fe4:	2920      	cmp	r1, #32
 8001fe6:	d005      	beq.n	8001ff4 <__aeabi_dadd+0x6b0>
 8001fe8:	2440      	movs	r4, #64	@ 0x40
 8001fea:	1a61      	subs	r1, r4, r1
 8001fec:	408e      	lsls	r6, r1
 8001fee:	4649      	mov	r1, r9
 8001ff0:	4331      	orrs	r1, r6
 8001ff2:	4689      	mov	r9, r1
 8001ff4:	4648      	mov	r0, r9
 8001ff6:	1e41      	subs	r1, r0, #1
 8001ff8:	4188      	sbcs	r0, r1
 8001ffa:	4661      	mov	r1, ip
 8001ffc:	0007      	movs	r7, r0
 8001ffe:	430f      	orrs	r7, r1
 8002000:	e630      	b.n	8001c64 <__aeabi_dadd+0x320>
 8002002:	2120      	movs	r1, #32
 8002004:	2700      	movs	r7, #0
 8002006:	1a09      	subs	r1, r1, r0
 8002008:	e50e      	b.n	8001a28 <__aeabi_dadd+0xe4>
 800200a:	001e      	movs	r6, r3
 800200c:	2f00      	cmp	r7, #0
 800200e:	d000      	beq.n	8002012 <__aeabi_dadd+0x6ce>
 8002010:	e522      	b.n	8001a58 <__aeabi_dadd+0x114>
 8002012:	2400      	movs	r4, #0
 8002014:	e758      	b.n	8001ec8 <__aeabi_dadd+0x584>
 8002016:	2500      	movs	r5, #0
 8002018:	2400      	movs	r4, #0
 800201a:	2600      	movs	r6, #0
 800201c:	e5db      	b.n	8001bd6 <__aeabi_dadd+0x292>
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	000007fe 	.word	0x000007fe
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	4647      	mov	r7, r8
 800202e:	430f      	orrs	r7, r1
 8002030:	d100      	bne.n	8002034 <__aeabi_dadd+0x6f0>
 8002032:	e747      	b.n	8001ec4 <__aeabi_dadd+0x580>
 8002034:	000e      	movs	r6, r1
 8002036:	46c1      	mov	r9, r8
 8002038:	e5b5      	b.n	8001ba6 <__aeabi_dadd+0x262>
 800203a:	08df      	lsrs	r7, r3, #3
 800203c:	0764      	lsls	r4, r4, #29
 800203e:	2102      	movs	r1, #2
 8002040:	4327      	orrs	r7, r4
 8002042:	0900      	lsrs	r0, r0, #4
 8002044:	e5b5      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 8002046:	0019      	movs	r1, r3
 8002048:	08c0      	lsrs	r0, r0, #3
 800204a:	0777      	lsls	r7, r6, #29
 800204c:	4307      	orrs	r7, r0
 800204e:	4311      	orrs	r1, r2
 8002050:	08f0      	lsrs	r0, r6, #3
 8002052:	2900      	cmp	r1, #0
 8002054:	d100      	bne.n	8002058 <__aeabi_dadd+0x714>
 8002056:	e5d9      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8002058:	2180      	movs	r1, #128	@ 0x80
 800205a:	0309      	lsls	r1, r1, #12
 800205c:	4208      	tst	r0, r1
 800205e:	d007      	beq.n	8002070 <__aeabi_dadd+0x72c>
 8002060:	08dc      	lsrs	r4, r3, #3
 8002062:	420c      	tst	r4, r1
 8002064:	d104      	bne.n	8002070 <__aeabi_dadd+0x72c>
 8002066:	08d2      	lsrs	r2, r2, #3
 8002068:	075b      	lsls	r3, r3, #29
 800206a:	431a      	orrs	r2, r3
 800206c:	0017      	movs	r7, r2
 800206e:	0020      	movs	r0, r4
 8002070:	0f7b      	lsrs	r3, r7, #29
 8002072:	00ff      	lsls	r7, r7, #3
 8002074:	08ff      	lsrs	r7, r7, #3
 8002076:	075b      	lsls	r3, r3, #29
 8002078:	431f      	orrs	r7, r3
 800207a:	e5c7      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 800207c:	000f      	movs	r7, r1
 800207e:	e5c5      	b.n	8001c0c <__aeabi_dadd+0x2c8>
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <__aeabi_dadd+0x788>)
 8002082:	08d2      	lsrs	r2, r2, #3
 8002084:	4033      	ands	r3, r6
 8002086:	075f      	lsls	r7, r3, #29
 8002088:	025b      	lsls	r3, r3, #9
 800208a:	2401      	movs	r4, #1
 800208c:	4317      	orrs	r7, r2
 800208e:	0b1e      	lsrs	r6, r3, #12
 8002090:	e5a1      	b.n	8001bd6 <__aeabi_dadd+0x292>
 8002092:	4226      	tst	r6, r4
 8002094:	d012      	beq.n	80020bc <__aeabi_dadd+0x778>
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <__aeabi_dadd+0x788>)
 8002098:	4665      	mov	r5, ip
 800209a:	0002      	movs	r2, r0
 800209c:	2401      	movs	r4, #1
 800209e:	401e      	ands	r6, r3
 80020a0:	e4e6      	b.n	8001a70 <__aeabi_dadd+0x12c>
 80020a2:	0021      	movs	r1, r4
 80020a4:	e585      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 80020a6:	0017      	movs	r7, r2
 80020a8:	e5a8      	b.n	8001bfc <__aeabi_dadd+0x2b8>
 80020aa:	003a      	movs	r2, r7
 80020ac:	e4d4      	b.n	8001a58 <__aeabi_dadd+0x114>
 80020ae:	08db      	lsrs	r3, r3, #3
 80020b0:	0764      	lsls	r4, r4, #29
 80020b2:	431c      	orrs	r4, r3
 80020b4:	0027      	movs	r7, r4
 80020b6:	2102      	movs	r1, #2
 80020b8:	0900      	lsrs	r0, r0, #4
 80020ba:	e57a      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 80020bc:	08c0      	lsrs	r0, r0, #3
 80020be:	0777      	lsls	r7, r6, #29
 80020c0:	4307      	orrs	r7, r0
 80020c2:	4665      	mov	r5, ip
 80020c4:	2100      	movs	r1, #0
 80020c6:	08f0      	lsrs	r0, r6, #3
 80020c8:	e573      	b.n	8001bb2 <__aeabi_dadd+0x26e>
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	ff7fffff 	.word	0xff7fffff

080020d0 <__aeabi_ddiv>:
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	46de      	mov	lr, fp
 80020d4:	4645      	mov	r5, r8
 80020d6:	4657      	mov	r7, sl
 80020d8:	464e      	mov	r6, r9
 80020da:	b5e0      	push	{r5, r6, r7, lr}
 80020dc:	b087      	sub	sp, #28
 80020de:	9200      	str	r2, [sp, #0]
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	030b      	lsls	r3, r1, #12
 80020e4:	0b1b      	lsrs	r3, r3, #12
 80020e6:	469b      	mov	fp, r3
 80020e8:	0fca      	lsrs	r2, r1, #31
 80020ea:	004b      	lsls	r3, r1, #1
 80020ec:	0004      	movs	r4, r0
 80020ee:	4680      	mov	r8, r0
 80020f0:	0d5b      	lsrs	r3, r3, #21
 80020f2:	9202      	str	r2, [sp, #8]
 80020f4:	d100      	bne.n	80020f8 <__aeabi_ddiv+0x28>
 80020f6:	e098      	b.n	800222a <__aeabi_ddiv+0x15a>
 80020f8:	4a7c      	ldr	r2, [pc, #496]	@ (80022ec <__aeabi_ddiv+0x21c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d037      	beq.n	800216e <__aeabi_ddiv+0x9e>
 80020fe:	4659      	mov	r1, fp
 8002100:	0f42      	lsrs	r2, r0, #29
 8002102:	00c9      	lsls	r1, r1, #3
 8002104:	430a      	orrs	r2, r1
 8002106:	2180      	movs	r1, #128	@ 0x80
 8002108:	0409      	lsls	r1, r1, #16
 800210a:	4311      	orrs	r1, r2
 800210c:	00c2      	lsls	r2, r0, #3
 800210e:	4690      	mov	r8, r2
 8002110:	4a77      	ldr	r2, [pc, #476]	@ (80022f0 <__aeabi_ddiv+0x220>)
 8002112:	4689      	mov	r9, r1
 8002114:	4692      	mov	sl, r2
 8002116:	449a      	add	sl, r3
 8002118:	2300      	movs	r3, #0
 800211a:	2400      	movs	r4, #0
 800211c:	9303      	str	r3, [sp, #12]
 800211e:	9e00      	ldr	r6, [sp, #0]
 8002120:	9f01      	ldr	r7, [sp, #4]
 8002122:	033b      	lsls	r3, r7, #12
 8002124:	0b1b      	lsrs	r3, r3, #12
 8002126:	469b      	mov	fp, r3
 8002128:	007b      	lsls	r3, r7, #1
 800212a:	0030      	movs	r0, r6
 800212c:	0d5b      	lsrs	r3, r3, #21
 800212e:	0ffd      	lsrs	r5, r7, #31
 8002130:	2b00      	cmp	r3, #0
 8002132:	d059      	beq.n	80021e8 <__aeabi_ddiv+0x118>
 8002134:	4a6d      	ldr	r2, [pc, #436]	@ (80022ec <__aeabi_ddiv+0x21c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d048      	beq.n	80021cc <__aeabi_ddiv+0xfc>
 800213a:	4659      	mov	r1, fp
 800213c:	0f72      	lsrs	r2, r6, #29
 800213e:	00c9      	lsls	r1, r1, #3
 8002140:	430a      	orrs	r2, r1
 8002142:	2180      	movs	r1, #128	@ 0x80
 8002144:	0409      	lsls	r1, r1, #16
 8002146:	4311      	orrs	r1, r2
 8002148:	468b      	mov	fp, r1
 800214a:	4969      	ldr	r1, [pc, #420]	@ (80022f0 <__aeabi_ddiv+0x220>)
 800214c:	00f2      	lsls	r2, r6, #3
 800214e:	468c      	mov	ip, r1
 8002150:	4651      	mov	r1, sl
 8002152:	4463      	add	r3, ip
 8002154:	1acb      	subs	r3, r1, r3
 8002156:	469a      	mov	sl, r3
 8002158:	2100      	movs	r1, #0
 800215a:	9e02      	ldr	r6, [sp, #8]
 800215c:	406e      	eors	r6, r5
 800215e:	b2f6      	uxtb	r6, r6
 8002160:	2c0f      	cmp	r4, #15
 8002162:	d900      	bls.n	8002166 <__aeabi_ddiv+0x96>
 8002164:	e0ce      	b.n	8002304 <__aeabi_ddiv+0x234>
 8002166:	4b63      	ldr	r3, [pc, #396]	@ (80022f4 <__aeabi_ddiv+0x224>)
 8002168:	00a4      	lsls	r4, r4, #2
 800216a:	591b      	ldr	r3, [r3, r4]
 800216c:	469f      	mov	pc, r3
 800216e:	465a      	mov	r2, fp
 8002170:	4302      	orrs	r2, r0
 8002172:	4691      	mov	r9, r2
 8002174:	d000      	beq.n	8002178 <__aeabi_ddiv+0xa8>
 8002176:	e090      	b.n	800229a <__aeabi_ddiv+0x1ca>
 8002178:	469a      	mov	sl, r3
 800217a:	2302      	movs	r3, #2
 800217c:	4690      	mov	r8, r2
 800217e:	2408      	movs	r4, #8
 8002180:	9303      	str	r3, [sp, #12]
 8002182:	e7cc      	b.n	800211e <__aeabi_ddiv+0x4e>
 8002184:	46cb      	mov	fp, r9
 8002186:	4642      	mov	r2, r8
 8002188:	9d02      	ldr	r5, [sp, #8]
 800218a:	9903      	ldr	r1, [sp, #12]
 800218c:	2902      	cmp	r1, #2
 800218e:	d100      	bne.n	8002192 <__aeabi_ddiv+0xc2>
 8002190:	e1de      	b.n	8002550 <__aeabi_ddiv+0x480>
 8002192:	2903      	cmp	r1, #3
 8002194:	d100      	bne.n	8002198 <__aeabi_ddiv+0xc8>
 8002196:	e08d      	b.n	80022b4 <__aeabi_ddiv+0x1e4>
 8002198:	2901      	cmp	r1, #1
 800219a:	d000      	beq.n	800219e <__aeabi_ddiv+0xce>
 800219c:	e179      	b.n	8002492 <__aeabi_ddiv+0x3c2>
 800219e:	002e      	movs	r6, r5
 80021a0:	2200      	movs	r2, #0
 80021a2:	2300      	movs	r3, #0
 80021a4:	2400      	movs	r4, #0
 80021a6:	4690      	mov	r8, r2
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	4323      	orrs	r3, r4
 80021ac:	07f6      	lsls	r6, r6, #31
 80021ae:	4333      	orrs	r3, r6
 80021b0:	4640      	mov	r0, r8
 80021b2:	0019      	movs	r1, r3
 80021b4:	b007      	add	sp, #28
 80021b6:	bcf0      	pop	{r4, r5, r6, r7}
 80021b8:	46bb      	mov	fp, r7
 80021ba:	46b2      	mov	sl, r6
 80021bc:	46a9      	mov	r9, r5
 80021be:	46a0      	mov	r8, r4
 80021c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c2:	2200      	movs	r2, #0
 80021c4:	2400      	movs	r4, #0
 80021c6:	4690      	mov	r8, r2
 80021c8:	4b48      	ldr	r3, [pc, #288]	@ (80022ec <__aeabi_ddiv+0x21c>)
 80021ca:	e7ed      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 80021cc:	465a      	mov	r2, fp
 80021ce:	9b00      	ldr	r3, [sp, #0]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	4b49      	ldr	r3, [pc, #292]	@ (80022f8 <__aeabi_ddiv+0x228>)
 80021d4:	469c      	mov	ip, r3
 80021d6:	44e2      	add	sl, ip
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d159      	bne.n	8002290 <__aeabi_ddiv+0x1c0>
 80021dc:	2302      	movs	r3, #2
 80021de:	431c      	orrs	r4, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	469b      	mov	fp, r3
 80021e6:	e7b8      	b.n	800215a <__aeabi_ddiv+0x8a>
 80021e8:	465a      	mov	r2, fp
 80021ea:	9b00      	ldr	r3, [sp, #0]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	d049      	beq.n	8002284 <__aeabi_ddiv+0x1b4>
 80021f0:	465b      	mov	r3, fp
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_ddiv+0x128>
 80021f6:	e19c      	b.n	8002532 <__aeabi_ddiv+0x462>
 80021f8:	4658      	mov	r0, fp
 80021fa:	f001 fc0d 	bl	8003a18 <__clzsi2>
 80021fe:	0002      	movs	r2, r0
 8002200:	0003      	movs	r3, r0
 8002202:	3a0b      	subs	r2, #11
 8002204:	271d      	movs	r7, #29
 8002206:	9e00      	ldr	r6, [sp, #0]
 8002208:	1aba      	subs	r2, r7, r2
 800220a:	0019      	movs	r1, r3
 800220c:	4658      	mov	r0, fp
 800220e:	40d6      	lsrs	r6, r2
 8002210:	3908      	subs	r1, #8
 8002212:	4088      	lsls	r0, r1
 8002214:	0032      	movs	r2, r6
 8002216:	4302      	orrs	r2, r0
 8002218:	4693      	mov	fp, r2
 800221a:	9a00      	ldr	r2, [sp, #0]
 800221c:	408a      	lsls	r2, r1
 800221e:	4937      	ldr	r1, [pc, #220]	@ (80022fc <__aeabi_ddiv+0x22c>)
 8002220:	4453      	add	r3, sl
 8002222:	468a      	mov	sl, r1
 8002224:	2100      	movs	r1, #0
 8002226:	449a      	add	sl, r3
 8002228:	e797      	b.n	800215a <__aeabi_ddiv+0x8a>
 800222a:	465b      	mov	r3, fp
 800222c:	4303      	orrs	r3, r0
 800222e:	4699      	mov	r9, r3
 8002230:	d021      	beq.n	8002276 <__aeabi_ddiv+0x1a6>
 8002232:	465b      	mov	r3, fp
 8002234:	2b00      	cmp	r3, #0
 8002236:	d100      	bne.n	800223a <__aeabi_ddiv+0x16a>
 8002238:	e169      	b.n	800250e <__aeabi_ddiv+0x43e>
 800223a:	4658      	mov	r0, fp
 800223c:	f001 fbec 	bl	8003a18 <__clzsi2>
 8002240:	230b      	movs	r3, #11
 8002242:	425b      	negs	r3, r3
 8002244:	469c      	mov	ip, r3
 8002246:	0002      	movs	r2, r0
 8002248:	4484      	add	ip, r0
 800224a:	4666      	mov	r6, ip
 800224c:	231d      	movs	r3, #29
 800224e:	1b9b      	subs	r3, r3, r6
 8002250:	0026      	movs	r6, r4
 8002252:	0011      	movs	r1, r2
 8002254:	4658      	mov	r0, fp
 8002256:	40de      	lsrs	r6, r3
 8002258:	3908      	subs	r1, #8
 800225a:	4088      	lsls	r0, r1
 800225c:	0033      	movs	r3, r6
 800225e:	4303      	orrs	r3, r0
 8002260:	4699      	mov	r9, r3
 8002262:	0023      	movs	r3, r4
 8002264:	408b      	lsls	r3, r1
 8002266:	4698      	mov	r8, r3
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <__aeabi_ddiv+0x230>)
 800226a:	2400      	movs	r4, #0
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	469a      	mov	sl, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9303      	str	r3, [sp, #12]
 8002274:	e753      	b.n	800211e <__aeabi_ddiv+0x4e>
 8002276:	2300      	movs	r3, #0
 8002278:	4698      	mov	r8, r3
 800227a:	469a      	mov	sl, r3
 800227c:	3301      	adds	r3, #1
 800227e:	2404      	movs	r4, #4
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	e74c      	b.n	800211e <__aeabi_ddiv+0x4e>
 8002284:	2301      	movs	r3, #1
 8002286:	431c      	orrs	r4, r3
 8002288:	2300      	movs	r3, #0
 800228a:	2101      	movs	r1, #1
 800228c:	469b      	mov	fp, r3
 800228e:	e764      	b.n	800215a <__aeabi_ddiv+0x8a>
 8002290:	2303      	movs	r3, #3
 8002292:	0032      	movs	r2, r6
 8002294:	2103      	movs	r1, #3
 8002296:	431c      	orrs	r4, r3
 8002298:	e75f      	b.n	800215a <__aeabi_ddiv+0x8a>
 800229a:	469a      	mov	sl, r3
 800229c:	2303      	movs	r3, #3
 800229e:	46d9      	mov	r9, fp
 80022a0:	240c      	movs	r4, #12
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	e73b      	b.n	800211e <__aeabi_ddiv+0x4e>
 80022a6:	2300      	movs	r3, #0
 80022a8:	2480      	movs	r4, #128	@ 0x80
 80022aa:	4698      	mov	r8, r3
 80022ac:	2600      	movs	r6, #0
 80022ae:	4b0f      	ldr	r3, [pc, #60]	@ (80022ec <__aeabi_ddiv+0x21c>)
 80022b0:	0324      	lsls	r4, r4, #12
 80022b2:	e779      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 80022b4:	2480      	movs	r4, #128	@ 0x80
 80022b6:	465b      	mov	r3, fp
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	431c      	orrs	r4, r3
 80022bc:	0324      	lsls	r4, r4, #12
 80022be:	002e      	movs	r6, r5
 80022c0:	4690      	mov	r8, r2
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <__aeabi_ddiv+0x21c>)
 80022c4:	0b24      	lsrs	r4, r4, #12
 80022c6:	e76f      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 80022c8:	2480      	movs	r4, #128	@ 0x80
 80022ca:	464b      	mov	r3, r9
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	4223      	tst	r3, r4
 80022d0:	d002      	beq.n	80022d8 <__aeabi_ddiv+0x208>
 80022d2:	465b      	mov	r3, fp
 80022d4:	4223      	tst	r3, r4
 80022d6:	d0f0      	beq.n	80022ba <__aeabi_ddiv+0x1ea>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	431c      	orrs	r4, r3
 80022e0:	0324      	lsls	r4, r4, #12
 80022e2:	9e02      	ldr	r6, [sp, #8]
 80022e4:	4b01      	ldr	r3, [pc, #4]	@ (80022ec <__aeabi_ddiv+0x21c>)
 80022e6:	0b24      	lsrs	r4, r4, #12
 80022e8:	e75e      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	000007ff 	.word	0x000007ff
 80022f0:	fffffc01 	.word	0xfffffc01
 80022f4:	080119a4 	.word	0x080119a4
 80022f8:	fffff801 	.word	0xfffff801
 80022fc:	000003f3 	.word	0x000003f3
 8002300:	fffffc0d 	.word	0xfffffc0d
 8002304:	45cb      	cmp	fp, r9
 8002306:	d200      	bcs.n	800230a <__aeabi_ddiv+0x23a>
 8002308:	e0f8      	b.n	80024fc <__aeabi_ddiv+0x42c>
 800230a:	d100      	bne.n	800230e <__aeabi_ddiv+0x23e>
 800230c:	e0f3      	b.n	80024f6 <__aeabi_ddiv+0x426>
 800230e:	2301      	movs	r3, #1
 8002310:	425b      	negs	r3, r3
 8002312:	469c      	mov	ip, r3
 8002314:	4644      	mov	r4, r8
 8002316:	4648      	mov	r0, r9
 8002318:	2500      	movs	r5, #0
 800231a:	44e2      	add	sl, ip
 800231c:	465b      	mov	r3, fp
 800231e:	0e17      	lsrs	r7, r2, #24
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	431f      	orrs	r7, r3
 8002324:	0c19      	lsrs	r1, r3, #16
 8002326:	043b      	lsls	r3, r7, #16
 8002328:	0212      	lsls	r2, r2, #8
 800232a:	9700      	str	r7, [sp, #0]
 800232c:	0c1f      	lsrs	r7, r3, #16
 800232e:	4691      	mov	r9, r2
 8002330:	9102      	str	r1, [sp, #8]
 8002332:	9703      	str	r7, [sp, #12]
 8002334:	f7fd ff94 	bl	8000260 <__aeabi_uidivmod>
 8002338:	0002      	movs	r2, r0
 800233a:	437a      	muls	r2, r7
 800233c:	040b      	lsls	r3, r1, #16
 800233e:	0c21      	lsrs	r1, r4, #16
 8002340:	4680      	mov	r8, r0
 8002342:	4319      	orrs	r1, r3
 8002344:	428a      	cmp	r2, r1
 8002346:	d909      	bls.n	800235c <__aeabi_ddiv+0x28c>
 8002348:	9f00      	ldr	r7, [sp, #0]
 800234a:	2301      	movs	r3, #1
 800234c:	46bc      	mov	ip, r7
 800234e:	425b      	negs	r3, r3
 8002350:	4461      	add	r1, ip
 8002352:	469c      	mov	ip, r3
 8002354:	44e0      	add	r8, ip
 8002356:	428f      	cmp	r7, r1
 8002358:	d800      	bhi.n	800235c <__aeabi_ddiv+0x28c>
 800235a:	e15c      	b.n	8002616 <__aeabi_ddiv+0x546>
 800235c:	1a88      	subs	r0, r1, r2
 800235e:	9902      	ldr	r1, [sp, #8]
 8002360:	f7fd ff7e 	bl	8000260 <__aeabi_uidivmod>
 8002364:	9a03      	ldr	r2, [sp, #12]
 8002366:	0424      	lsls	r4, r4, #16
 8002368:	4342      	muls	r2, r0
 800236a:	0409      	lsls	r1, r1, #16
 800236c:	0c24      	lsrs	r4, r4, #16
 800236e:	0003      	movs	r3, r0
 8002370:	430c      	orrs	r4, r1
 8002372:	42a2      	cmp	r2, r4
 8002374:	d906      	bls.n	8002384 <__aeabi_ddiv+0x2b4>
 8002376:	9900      	ldr	r1, [sp, #0]
 8002378:	3b01      	subs	r3, #1
 800237a:	468c      	mov	ip, r1
 800237c:	4464      	add	r4, ip
 800237e:	42a1      	cmp	r1, r4
 8002380:	d800      	bhi.n	8002384 <__aeabi_ddiv+0x2b4>
 8002382:	e142      	b.n	800260a <__aeabi_ddiv+0x53a>
 8002384:	1aa0      	subs	r0, r4, r2
 8002386:	4642      	mov	r2, r8
 8002388:	0412      	lsls	r2, r2, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	4693      	mov	fp, r2
 800238e:	464b      	mov	r3, r9
 8002390:	4659      	mov	r1, fp
 8002392:	0c1b      	lsrs	r3, r3, #16
 8002394:	001f      	movs	r7, r3
 8002396:	9304      	str	r3, [sp, #16]
 8002398:	040b      	lsls	r3, r1, #16
 800239a:	4649      	mov	r1, r9
 800239c:	0409      	lsls	r1, r1, #16
 800239e:	0c09      	lsrs	r1, r1, #16
 80023a0:	000c      	movs	r4, r1
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	435c      	muls	r4, r3
 80023a6:	0c12      	lsrs	r2, r2, #16
 80023a8:	437b      	muls	r3, r7
 80023aa:	4688      	mov	r8, r1
 80023ac:	4351      	muls	r1, r2
 80023ae:	437a      	muls	r2, r7
 80023b0:	0c27      	lsrs	r7, r4, #16
 80023b2:	46bc      	mov	ip, r7
 80023b4:	185b      	adds	r3, r3, r1
 80023b6:	4463      	add	r3, ip
 80023b8:	4299      	cmp	r1, r3
 80023ba:	d903      	bls.n	80023c4 <__aeabi_ddiv+0x2f4>
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	0249      	lsls	r1, r1, #9
 80023c0:	468c      	mov	ip, r1
 80023c2:	4462      	add	r2, ip
 80023c4:	0c19      	lsrs	r1, r3, #16
 80023c6:	0424      	lsls	r4, r4, #16
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	0c24      	lsrs	r4, r4, #16
 80023cc:	188a      	adds	r2, r1, r2
 80023ce:	191c      	adds	r4, r3, r4
 80023d0:	4290      	cmp	r0, r2
 80023d2:	d302      	bcc.n	80023da <__aeabi_ddiv+0x30a>
 80023d4:	d116      	bne.n	8002404 <__aeabi_ddiv+0x334>
 80023d6:	42a5      	cmp	r5, r4
 80023d8:	d214      	bcs.n	8002404 <__aeabi_ddiv+0x334>
 80023da:	465b      	mov	r3, fp
 80023dc:	9f00      	ldr	r7, [sp, #0]
 80023de:	3b01      	subs	r3, #1
 80023e0:	444d      	add	r5, r9
 80023e2:	9305      	str	r3, [sp, #20]
 80023e4:	454d      	cmp	r5, r9
 80023e6:	419b      	sbcs	r3, r3
 80023e8:	46bc      	mov	ip, r7
 80023ea:	425b      	negs	r3, r3
 80023ec:	4463      	add	r3, ip
 80023ee:	18c0      	adds	r0, r0, r3
 80023f0:	4287      	cmp	r7, r0
 80023f2:	d300      	bcc.n	80023f6 <__aeabi_ddiv+0x326>
 80023f4:	e102      	b.n	80025fc <__aeabi_ddiv+0x52c>
 80023f6:	4282      	cmp	r2, r0
 80023f8:	d900      	bls.n	80023fc <__aeabi_ddiv+0x32c>
 80023fa:	e129      	b.n	8002650 <__aeabi_ddiv+0x580>
 80023fc:	d100      	bne.n	8002400 <__aeabi_ddiv+0x330>
 80023fe:	e124      	b.n	800264a <__aeabi_ddiv+0x57a>
 8002400:	9b05      	ldr	r3, [sp, #20]
 8002402:	469b      	mov	fp, r3
 8002404:	1b2c      	subs	r4, r5, r4
 8002406:	42a5      	cmp	r5, r4
 8002408:	41ad      	sbcs	r5, r5
 800240a:	9b00      	ldr	r3, [sp, #0]
 800240c:	1a80      	subs	r0, r0, r2
 800240e:	426d      	negs	r5, r5
 8002410:	1b40      	subs	r0, r0, r5
 8002412:	4283      	cmp	r3, r0
 8002414:	d100      	bne.n	8002418 <__aeabi_ddiv+0x348>
 8002416:	e10f      	b.n	8002638 <__aeabi_ddiv+0x568>
 8002418:	9902      	ldr	r1, [sp, #8]
 800241a:	f7fd ff21 	bl	8000260 <__aeabi_uidivmod>
 800241e:	9a03      	ldr	r2, [sp, #12]
 8002420:	040b      	lsls	r3, r1, #16
 8002422:	4342      	muls	r2, r0
 8002424:	0c21      	lsrs	r1, r4, #16
 8002426:	0005      	movs	r5, r0
 8002428:	4319      	orrs	r1, r3
 800242a:	428a      	cmp	r2, r1
 800242c:	d900      	bls.n	8002430 <__aeabi_ddiv+0x360>
 800242e:	e0cb      	b.n	80025c8 <__aeabi_ddiv+0x4f8>
 8002430:	1a88      	subs	r0, r1, r2
 8002432:	9902      	ldr	r1, [sp, #8]
 8002434:	f7fd ff14 	bl	8000260 <__aeabi_uidivmod>
 8002438:	9a03      	ldr	r2, [sp, #12]
 800243a:	0424      	lsls	r4, r4, #16
 800243c:	4342      	muls	r2, r0
 800243e:	0409      	lsls	r1, r1, #16
 8002440:	0c24      	lsrs	r4, r4, #16
 8002442:	0003      	movs	r3, r0
 8002444:	430c      	orrs	r4, r1
 8002446:	42a2      	cmp	r2, r4
 8002448:	d900      	bls.n	800244c <__aeabi_ddiv+0x37c>
 800244a:	e0ca      	b.n	80025e2 <__aeabi_ddiv+0x512>
 800244c:	4641      	mov	r1, r8
 800244e:	1aa4      	subs	r4, r4, r2
 8002450:	042a      	lsls	r2, r5, #16
 8002452:	431a      	orrs	r2, r3
 8002454:	9f04      	ldr	r7, [sp, #16]
 8002456:	0413      	lsls	r3, r2, #16
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	4359      	muls	r1, r3
 800245c:	4640      	mov	r0, r8
 800245e:	437b      	muls	r3, r7
 8002460:	469c      	mov	ip, r3
 8002462:	0c15      	lsrs	r5, r2, #16
 8002464:	4368      	muls	r0, r5
 8002466:	0c0b      	lsrs	r3, r1, #16
 8002468:	4484      	add	ip, r0
 800246a:	4463      	add	r3, ip
 800246c:	437d      	muls	r5, r7
 800246e:	4298      	cmp	r0, r3
 8002470:	d903      	bls.n	800247a <__aeabi_ddiv+0x3aa>
 8002472:	2080      	movs	r0, #128	@ 0x80
 8002474:	0240      	lsls	r0, r0, #9
 8002476:	4684      	mov	ip, r0
 8002478:	4465      	add	r5, ip
 800247a:	0c18      	lsrs	r0, r3, #16
 800247c:	0409      	lsls	r1, r1, #16
 800247e:	041b      	lsls	r3, r3, #16
 8002480:	0c09      	lsrs	r1, r1, #16
 8002482:	1940      	adds	r0, r0, r5
 8002484:	185b      	adds	r3, r3, r1
 8002486:	4284      	cmp	r4, r0
 8002488:	d327      	bcc.n	80024da <__aeabi_ddiv+0x40a>
 800248a:	d023      	beq.n	80024d4 <__aeabi_ddiv+0x404>
 800248c:	2301      	movs	r3, #1
 800248e:	0035      	movs	r5, r6
 8002490:	431a      	orrs	r2, r3
 8002492:	4b94      	ldr	r3, [pc, #592]	@ (80026e4 <__aeabi_ddiv+0x614>)
 8002494:	4453      	add	r3, sl
 8002496:	2b00      	cmp	r3, #0
 8002498:	dd60      	ble.n	800255c <__aeabi_ddiv+0x48c>
 800249a:	0751      	lsls	r1, r2, #29
 800249c:	d000      	beq.n	80024a0 <__aeabi_ddiv+0x3d0>
 800249e:	e086      	b.n	80025ae <__aeabi_ddiv+0x4de>
 80024a0:	002e      	movs	r6, r5
 80024a2:	08d1      	lsrs	r1, r2, #3
 80024a4:	465a      	mov	r2, fp
 80024a6:	01d2      	lsls	r2, r2, #7
 80024a8:	d506      	bpl.n	80024b8 <__aeabi_ddiv+0x3e8>
 80024aa:	465a      	mov	r2, fp
 80024ac:	4b8e      	ldr	r3, [pc, #568]	@ (80026e8 <__aeabi_ddiv+0x618>)
 80024ae:	401a      	ands	r2, r3
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	4693      	mov	fp, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4453      	add	r3, sl
 80024b8:	4a8c      	ldr	r2, [pc, #560]	@ (80026ec <__aeabi_ddiv+0x61c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	dd00      	ble.n	80024c0 <__aeabi_ddiv+0x3f0>
 80024be:	e680      	b.n	80021c2 <__aeabi_ddiv+0xf2>
 80024c0:	465a      	mov	r2, fp
 80024c2:	0752      	lsls	r2, r2, #29
 80024c4:	430a      	orrs	r2, r1
 80024c6:	4690      	mov	r8, r2
 80024c8:	465a      	mov	r2, fp
 80024ca:	055b      	lsls	r3, r3, #21
 80024cc:	0254      	lsls	r4, r2, #9
 80024ce:	0b24      	lsrs	r4, r4, #12
 80024d0:	0d5b      	lsrs	r3, r3, #21
 80024d2:	e669      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 80024d4:	0035      	movs	r5, r6
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0db      	beq.n	8002492 <__aeabi_ddiv+0x3c2>
 80024da:	9d00      	ldr	r5, [sp, #0]
 80024dc:	1e51      	subs	r1, r2, #1
 80024de:	46ac      	mov	ip, r5
 80024e0:	4464      	add	r4, ip
 80024e2:	42ac      	cmp	r4, r5
 80024e4:	d200      	bcs.n	80024e8 <__aeabi_ddiv+0x418>
 80024e6:	e09e      	b.n	8002626 <__aeabi_ddiv+0x556>
 80024e8:	4284      	cmp	r4, r0
 80024ea:	d200      	bcs.n	80024ee <__aeabi_ddiv+0x41e>
 80024ec:	e0e1      	b.n	80026b2 <__aeabi_ddiv+0x5e2>
 80024ee:	d100      	bne.n	80024f2 <__aeabi_ddiv+0x422>
 80024f0:	e0ee      	b.n	80026d0 <__aeabi_ddiv+0x600>
 80024f2:	000a      	movs	r2, r1
 80024f4:	e7ca      	b.n	800248c <__aeabi_ddiv+0x3bc>
 80024f6:	4542      	cmp	r2, r8
 80024f8:	d900      	bls.n	80024fc <__aeabi_ddiv+0x42c>
 80024fa:	e708      	b.n	800230e <__aeabi_ddiv+0x23e>
 80024fc:	464b      	mov	r3, r9
 80024fe:	07dc      	lsls	r4, r3, #31
 8002500:	0858      	lsrs	r0, r3, #1
 8002502:	4643      	mov	r3, r8
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	431c      	orrs	r4, r3
 8002508:	4643      	mov	r3, r8
 800250a:	07dd      	lsls	r5, r3, #31
 800250c:	e706      	b.n	800231c <__aeabi_ddiv+0x24c>
 800250e:	f001 fa83 	bl	8003a18 <__clzsi2>
 8002512:	2315      	movs	r3, #21
 8002514:	469c      	mov	ip, r3
 8002516:	4484      	add	ip, r0
 8002518:	0002      	movs	r2, r0
 800251a:	4663      	mov	r3, ip
 800251c:	3220      	adds	r2, #32
 800251e:	2b1c      	cmp	r3, #28
 8002520:	dc00      	bgt.n	8002524 <__aeabi_ddiv+0x454>
 8002522:	e692      	b.n	800224a <__aeabi_ddiv+0x17a>
 8002524:	0023      	movs	r3, r4
 8002526:	3808      	subs	r0, #8
 8002528:	4083      	lsls	r3, r0
 800252a:	4699      	mov	r9, r3
 800252c:	2300      	movs	r3, #0
 800252e:	4698      	mov	r8, r3
 8002530:	e69a      	b.n	8002268 <__aeabi_ddiv+0x198>
 8002532:	f001 fa71 	bl	8003a18 <__clzsi2>
 8002536:	0002      	movs	r2, r0
 8002538:	0003      	movs	r3, r0
 800253a:	3215      	adds	r2, #21
 800253c:	3320      	adds	r3, #32
 800253e:	2a1c      	cmp	r2, #28
 8002540:	dc00      	bgt.n	8002544 <__aeabi_ddiv+0x474>
 8002542:	e65f      	b.n	8002204 <__aeabi_ddiv+0x134>
 8002544:	9900      	ldr	r1, [sp, #0]
 8002546:	3808      	subs	r0, #8
 8002548:	4081      	lsls	r1, r0
 800254a:	2200      	movs	r2, #0
 800254c:	468b      	mov	fp, r1
 800254e:	e666      	b.n	800221e <__aeabi_ddiv+0x14e>
 8002550:	2200      	movs	r2, #0
 8002552:	002e      	movs	r6, r5
 8002554:	2400      	movs	r4, #0
 8002556:	4690      	mov	r8, r2
 8002558:	4b65      	ldr	r3, [pc, #404]	@ (80026f0 <__aeabi_ddiv+0x620>)
 800255a:	e625      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 800255c:	002e      	movs	r6, r5
 800255e:	2101      	movs	r1, #1
 8002560:	1ac9      	subs	r1, r1, r3
 8002562:	2938      	cmp	r1, #56	@ 0x38
 8002564:	dd00      	ble.n	8002568 <__aeabi_ddiv+0x498>
 8002566:	e61b      	b.n	80021a0 <__aeabi_ddiv+0xd0>
 8002568:	291f      	cmp	r1, #31
 800256a:	dc7e      	bgt.n	800266a <__aeabi_ddiv+0x59a>
 800256c:	4861      	ldr	r0, [pc, #388]	@ (80026f4 <__aeabi_ddiv+0x624>)
 800256e:	0014      	movs	r4, r2
 8002570:	4450      	add	r0, sl
 8002572:	465b      	mov	r3, fp
 8002574:	4082      	lsls	r2, r0
 8002576:	4083      	lsls	r3, r0
 8002578:	40cc      	lsrs	r4, r1
 800257a:	1e50      	subs	r0, r2, #1
 800257c:	4182      	sbcs	r2, r0
 800257e:	4323      	orrs	r3, r4
 8002580:	431a      	orrs	r2, r3
 8002582:	465b      	mov	r3, fp
 8002584:	40cb      	lsrs	r3, r1
 8002586:	0751      	lsls	r1, r2, #29
 8002588:	d009      	beq.n	800259e <__aeabi_ddiv+0x4ce>
 800258a:	210f      	movs	r1, #15
 800258c:	4011      	ands	r1, r2
 800258e:	2904      	cmp	r1, #4
 8002590:	d005      	beq.n	800259e <__aeabi_ddiv+0x4ce>
 8002592:	1d11      	adds	r1, r2, #4
 8002594:	4291      	cmp	r1, r2
 8002596:	4192      	sbcs	r2, r2
 8002598:	4252      	negs	r2, r2
 800259a:	189b      	adds	r3, r3, r2
 800259c:	000a      	movs	r2, r1
 800259e:	0219      	lsls	r1, r3, #8
 80025a0:	d400      	bmi.n	80025a4 <__aeabi_ddiv+0x4d4>
 80025a2:	e09b      	b.n	80026dc <__aeabi_ddiv+0x60c>
 80025a4:	2200      	movs	r2, #0
 80025a6:	2301      	movs	r3, #1
 80025a8:	2400      	movs	r4, #0
 80025aa:	4690      	mov	r8, r2
 80025ac:	e5fc      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 80025ae:	210f      	movs	r1, #15
 80025b0:	4011      	ands	r1, r2
 80025b2:	2904      	cmp	r1, #4
 80025b4:	d100      	bne.n	80025b8 <__aeabi_ddiv+0x4e8>
 80025b6:	e773      	b.n	80024a0 <__aeabi_ddiv+0x3d0>
 80025b8:	1d11      	adds	r1, r2, #4
 80025ba:	4291      	cmp	r1, r2
 80025bc:	4192      	sbcs	r2, r2
 80025be:	4252      	negs	r2, r2
 80025c0:	002e      	movs	r6, r5
 80025c2:	08c9      	lsrs	r1, r1, #3
 80025c4:	4493      	add	fp, r2
 80025c6:	e76d      	b.n	80024a4 <__aeabi_ddiv+0x3d4>
 80025c8:	9b00      	ldr	r3, [sp, #0]
 80025ca:	3d01      	subs	r5, #1
 80025cc:	469c      	mov	ip, r3
 80025ce:	4461      	add	r1, ip
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d900      	bls.n	80025d6 <__aeabi_ddiv+0x506>
 80025d4:	e72c      	b.n	8002430 <__aeabi_ddiv+0x360>
 80025d6:	428a      	cmp	r2, r1
 80025d8:	d800      	bhi.n	80025dc <__aeabi_ddiv+0x50c>
 80025da:	e729      	b.n	8002430 <__aeabi_ddiv+0x360>
 80025dc:	1e85      	subs	r5, r0, #2
 80025de:	4461      	add	r1, ip
 80025e0:	e726      	b.n	8002430 <__aeabi_ddiv+0x360>
 80025e2:	9900      	ldr	r1, [sp, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	468c      	mov	ip, r1
 80025e8:	4464      	add	r4, ip
 80025ea:	42a1      	cmp	r1, r4
 80025ec:	d900      	bls.n	80025f0 <__aeabi_ddiv+0x520>
 80025ee:	e72d      	b.n	800244c <__aeabi_ddiv+0x37c>
 80025f0:	42a2      	cmp	r2, r4
 80025f2:	d800      	bhi.n	80025f6 <__aeabi_ddiv+0x526>
 80025f4:	e72a      	b.n	800244c <__aeabi_ddiv+0x37c>
 80025f6:	1e83      	subs	r3, r0, #2
 80025f8:	4464      	add	r4, ip
 80025fa:	e727      	b.n	800244c <__aeabi_ddiv+0x37c>
 80025fc:	4287      	cmp	r7, r0
 80025fe:	d000      	beq.n	8002602 <__aeabi_ddiv+0x532>
 8002600:	e6fe      	b.n	8002400 <__aeabi_ddiv+0x330>
 8002602:	45a9      	cmp	r9, r5
 8002604:	d900      	bls.n	8002608 <__aeabi_ddiv+0x538>
 8002606:	e6fb      	b.n	8002400 <__aeabi_ddiv+0x330>
 8002608:	e6f5      	b.n	80023f6 <__aeabi_ddiv+0x326>
 800260a:	42a2      	cmp	r2, r4
 800260c:	d800      	bhi.n	8002610 <__aeabi_ddiv+0x540>
 800260e:	e6b9      	b.n	8002384 <__aeabi_ddiv+0x2b4>
 8002610:	1e83      	subs	r3, r0, #2
 8002612:	4464      	add	r4, ip
 8002614:	e6b6      	b.n	8002384 <__aeabi_ddiv+0x2b4>
 8002616:	428a      	cmp	r2, r1
 8002618:	d800      	bhi.n	800261c <__aeabi_ddiv+0x54c>
 800261a:	e69f      	b.n	800235c <__aeabi_ddiv+0x28c>
 800261c:	46bc      	mov	ip, r7
 800261e:	1e83      	subs	r3, r0, #2
 8002620:	4698      	mov	r8, r3
 8002622:	4461      	add	r1, ip
 8002624:	e69a      	b.n	800235c <__aeabi_ddiv+0x28c>
 8002626:	000a      	movs	r2, r1
 8002628:	4284      	cmp	r4, r0
 800262a:	d000      	beq.n	800262e <__aeabi_ddiv+0x55e>
 800262c:	e72e      	b.n	800248c <__aeabi_ddiv+0x3bc>
 800262e:	454b      	cmp	r3, r9
 8002630:	d000      	beq.n	8002634 <__aeabi_ddiv+0x564>
 8002632:	e72b      	b.n	800248c <__aeabi_ddiv+0x3bc>
 8002634:	0035      	movs	r5, r6
 8002636:	e72c      	b.n	8002492 <__aeabi_ddiv+0x3c2>
 8002638:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <__aeabi_ddiv+0x614>)
 800263a:	4a2f      	ldr	r2, [pc, #188]	@ (80026f8 <__aeabi_ddiv+0x628>)
 800263c:	4453      	add	r3, sl
 800263e:	4592      	cmp	sl, r2
 8002640:	db43      	blt.n	80026ca <__aeabi_ddiv+0x5fa>
 8002642:	2201      	movs	r2, #1
 8002644:	2100      	movs	r1, #0
 8002646:	4493      	add	fp, r2
 8002648:	e72c      	b.n	80024a4 <__aeabi_ddiv+0x3d4>
 800264a:	42ac      	cmp	r4, r5
 800264c:	d800      	bhi.n	8002650 <__aeabi_ddiv+0x580>
 800264e:	e6d7      	b.n	8002400 <__aeabi_ddiv+0x330>
 8002650:	2302      	movs	r3, #2
 8002652:	425b      	negs	r3, r3
 8002654:	469c      	mov	ip, r3
 8002656:	9900      	ldr	r1, [sp, #0]
 8002658:	444d      	add	r5, r9
 800265a:	454d      	cmp	r5, r9
 800265c:	419b      	sbcs	r3, r3
 800265e:	44e3      	add	fp, ip
 8002660:	468c      	mov	ip, r1
 8002662:	425b      	negs	r3, r3
 8002664:	4463      	add	r3, ip
 8002666:	18c0      	adds	r0, r0, r3
 8002668:	e6cc      	b.n	8002404 <__aeabi_ddiv+0x334>
 800266a:	201f      	movs	r0, #31
 800266c:	4240      	negs	r0, r0
 800266e:	1ac3      	subs	r3, r0, r3
 8002670:	4658      	mov	r0, fp
 8002672:	40d8      	lsrs	r0, r3
 8002674:	2920      	cmp	r1, #32
 8002676:	d004      	beq.n	8002682 <__aeabi_ddiv+0x5b2>
 8002678:	4659      	mov	r1, fp
 800267a:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <__aeabi_ddiv+0x62c>)
 800267c:	4453      	add	r3, sl
 800267e:	4099      	lsls	r1, r3
 8002680:	430a      	orrs	r2, r1
 8002682:	1e53      	subs	r3, r2, #1
 8002684:	419a      	sbcs	r2, r3
 8002686:	2307      	movs	r3, #7
 8002688:	0019      	movs	r1, r3
 800268a:	4302      	orrs	r2, r0
 800268c:	2400      	movs	r4, #0
 800268e:	4011      	ands	r1, r2
 8002690:	4213      	tst	r3, r2
 8002692:	d009      	beq.n	80026a8 <__aeabi_ddiv+0x5d8>
 8002694:	3308      	adds	r3, #8
 8002696:	4013      	ands	r3, r2
 8002698:	2b04      	cmp	r3, #4
 800269a:	d01d      	beq.n	80026d8 <__aeabi_ddiv+0x608>
 800269c:	1d13      	adds	r3, r2, #4
 800269e:	4293      	cmp	r3, r2
 80026a0:	4189      	sbcs	r1, r1
 80026a2:	001a      	movs	r2, r3
 80026a4:	4249      	negs	r1, r1
 80026a6:	0749      	lsls	r1, r1, #29
 80026a8:	08d2      	lsrs	r2, r2, #3
 80026aa:	430a      	orrs	r2, r1
 80026ac:	4690      	mov	r8, r2
 80026ae:	2300      	movs	r3, #0
 80026b0:	e57a      	b.n	80021a8 <__aeabi_ddiv+0xd8>
 80026b2:	4649      	mov	r1, r9
 80026b4:	9f00      	ldr	r7, [sp, #0]
 80026b6:	004d      	lsls	r5, r1, #1
 80026b8:	454d      	cmp	r5, r9
 80026ba:	4189      	sbcs	r1, r1
 80026bc:	46bc      	mov	ip, r7
 80026be:	4249      	negs	r1, r1
 80026c0:	4461      	add	r1, ip
 80026c2:	46a9      	mov	r9, r5
 80026c4:	3a02      	subs	r2, #2
 80026c6:	1864      	adds	r4, r4, r1
 80026c8:	e7ae      	b.n	8002628 <__aeabi_ddiv+0x558>
 80026ca:	2201      	movs	r2, #1
 80026cc:	4252      	negs	r2, r2
 80026ce:	e746      	b.n	800255e <__aeabi_ddiv+0x48e>
 80026d0:	4599      	cmp	r9, r3
 80026d2:	d3ee      	bcc.n	80026b2 <__aeabi_ddiv+0x5e2>
 80026d4:	000a      	movs	r2, r1
 80026d6:	e7aa      	b.n	800262e <__aeabi_ddiv+0x55e>
 80026d8:	2100      	movs	r1, #0
 80026da:	e7e5      	b.n	80026a8 <__aeabi_ddiv+0x5d8>
 80026dc:	0759      	lsls	r1, r3, #29
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	0b1c      	lsrs	r4, r3, #12
 80026e2:	e7e1      	b.n	80026a8 <__aeabi_ddiv+0x5d8>
 80026e4:	000003ff 	.word	0x000003ff
 80026e8:	feffffff 	.word	0xfeffffff
 80026ec:	000007fe 	.word	0x000007fe
 80026f0:	000007ff 	.word	0x000007ff
 80026f4:	0000041e 	.word	0x0000041e
 80026f8:	fffffc02 	.word	0xfffffc02
 80026fc:	0000043e 	.word	0x0000043e

08002700 <__eqdf2>:
 8002700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002702:	4657      	mov	r7, sl
 8002704:	46de      	mov	lr, fp
 8002706:	464e      	mov	r6, r9
 8002708:	4645      	mov	r5, r8
 800270a:	b5e0      	push	{r5, r6, r7, lr}
 800270c:	000d      	movs	r5, r1
 800270e:	0004      	movs	r4, r0
 8002710:	0fe8      	lsrs	r0, r5, #31
 8002712:	4683      	mov	fp, r0
 8002714:	0309      	lsls	r1, r1, #12
 8002716:	0fd8      	lsrs	r0, r3, #31
 8002718:	0b09      	lsrs	r1, r1, #12
 800271a:	4682      	mov	sl, r0
 800271c:	4819      	ldr	r0, [pc, #100]	@ (8002784 <__eqdf2+0x84>)
 800271e:	468c      	mov	ip, r1
 8002720:	031f      	lsls	r7, r3, #12
 8002722:	0069      	lsls	r1, r5, #1
 8002724:	005e      	lsls	r6, r3, #1
 8002726:	0d49      	lsrs	r1, r1, #21
 8002728:	0b3f      	lsrs	r7, r7, #12
 800272a:	0d76      	lsrs	r6, r6, #21
 800272c:	4281      	cmp	r1, r0
 800272e:	d018      	beq.n	8002762 <__eqdf2+0x62>
 8002730:	4286      	cmp	r6, r0
 8002732:	d00f      	beq.n	8002754 <__eqdf2+0x54>
 8002734:	2001      	movs	r0, #1
 8002736:	42b1      	cmp	r1, r6
 8002738:	d10d      	bne.n	8002756 <__eqdf2+0x56>
 800273a:	45bc      	cmp	ip, r7
 800273c:	d10b      	bne.n	8002756 <__eqdf2+0x56>
 800273e:	4294      	cmp	r4, r2
 8002740:	d109      	bne.n	8002756 <__eqdf2+0x56>
 8002742:	45d3      	cmp	fp, sl
 8002744:	d01c      	beq.n	8002780 <__eqdf2+0x80>
 8002746:	2900      	cmp	r1, #0
 8002748:	d105      	bne.n	8002756 <__eqdf2+0x56>
 800274a:	4660      	mov	r0, ip
 800274c:	4320      	orrs	r0, r4
 800274e:	1e43      	subs	r3, r0, #1
 8002750:	4198      	sbcs	r0, r3
 8002752:	e000      	b.n	8002756 <__eqdf2+0x56>
 8002754:	2001      	movs	r0, #1
 8002756:	bcf0      	pop	{r4, r5, r6, r7}
 8002758:	46bb      	mov	fp, r7
 800275a:	46b2      	mov	sl, r6
 800275c:	46a9      	mov	r9, r5
 800275e:	46a0      	mov	r8, r4
 8002760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002762:	2001      	movs	r0, #1
 8002764:	428e      	cmp	r6, r1
 8002766:	d1f6      	bne.n	8002756 <__eqdf2+0x56>
 8002768:	4661      	mov	r1, ip
 800276a:	4339      	orrs	r1, r7
 800276c:	000f      	movs	r7, r1
 800276e:	4317      	orrs	r7, r2
 8002770:	4327      	orrs	r7, r4
 8002772:	d1f0      	bne.n	8002756 <__eqdf2+0x56>
 8002774:	465b      	mov	r3, fp
 8002776:	4652      	mov	r2, sl
 8002778:	1a98      	subs	r0, r3, r2
 800277a:	1e43      	subs	r3, r0, #1
 800277c:	4198      	sbcs	r0, r3
 800277e:	e7ea      	b.n	8002756 <__eqdf2+0x56>
 8002780:	2000      	movs	r0, #0
 8002782:	e7e8      	b.n	8002756 <__eqdf2+0x56>
 8002784:	000007ff 	.word	0x000007ff

08002788 <__gedf2>:
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	4657      	mov	r7, sl
 800278c:	464e      	mov	r6, r9
 800278e:	4645      	mov	r5, r8
 8002790:	46de      	mov	lr, fp
 8002792:	b5e0      	push	{r5, r6, r7, lr}
 8002794:	000d      	movs	r5, r1
 8002796:	030e      	lsls	r6, r1, #12
 8002798:	0049      	lsls	r1, r1, #1
 800279a:	0d49      	lsrs	r1, r1, #21
 800279c:	468a      	mov	sl, r1
 800279e:	0fdf      	lsrs	r7, r3, #31
 80027a0:	0fe9      	lsrs	r1, r5, #31
 80027a2:	46bc      	mov	ip, r7
 80027a4:	b083      	sub	sp, #12
 80027a6:	4f2f      	ldr	r7, [pc, #188]	@ (8002864 <__gedf2+0xdc>)
 80027a8:	0004      	movs	r4, r0
 80027aa:	4680      	mov	r8, r0
 80027ac:	9101      	str	r1, [sp, #4]
 80027ae:	0058      	lsls	r0, r3, #1
 80027b0:	0319      	lsls	r1, r3, #12
 80027b2:	4691      	mov	r9, r2
 80027b4:	0b36      	lsrs	r6, r6, #12
 80027b6:	0b09      	lsrs	r1, r1, #12
 80027b8:	0d40      	lsrs	r0, r0, #21
 80027ba:	45ba      	cmp	sl, r7
 80027bc:	d01d      	beq.n	80027fa <__gedf2+0x72>
 80027be:	42b8      	cmp	r0, r7
 80027c0:	d00d      	beq.n	80027de <__gedf2+0x56>
 80027c2:	4657      	mov	r7, sl
 80027c4:	2f00      	cmp	r7, #0
 80027c6:	d12a      	bne.n	800281e <__gedf2+0x96>
 80027c8:	4334      	orrs	r4, r6
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d124      	bne.n	8002818 <__gedf2+0x90>
 80027ce:	430a      	orrs	r2, r1
 80027d0:	d036      	beq.n	8002840 <__gedf2+0xb8>
 80027d2:	2c00      	cmp	r4, #0
 80027d4:	d141      	bne.n	800285a <__gedf2+0xd2>
 80027d6:	4663      	mov	r3, ip
 80027d8:	0058      	lsls	r0, r3, #1
 80027da:	3801      	subs	r0, #1
 80027dc:	e015      	b.n	800280a <__gedf2+0x82>
 80027de:	4311      	orrs	r1, r2
 80027e0:	d138      	bne.n	8002854 <__gedf2+0xcc>
 80027e2:	4653      	mov	r3, sl
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <__gedf2+0x64>
 80027e8:	4326      	orrs	r6, r4
 80027ea:	d0f4      	beq.n	80027d6 <__gedf2+0x4e>
 80027ec:	9b01      	ldr	r3, [sp, #4]
 80027ee:	4563      	cmp	r3, ip
 80027f0:	d107      	bne.n	8002802 <__gedf2+0x7a>
 80027f2:	9b01      	ldr	r3, [sp, #4]
 80027f4:	0058      	lsls	r0, r3, #1
 80027f6:	3801      	subs	r0, #1
 80027f8:	e007      	b.n	800280a <__gedf2+0x82>
 80027fa:	4326      	orrs	r6, r4
 80027fc:	d12a      	bne.n	8002854 <__gedf2+0xcc>
 80027fe:	4550      	cmp	r0, sl
 8002800:	d021      	beq.n	8002846 <__gedf2+0xbe>
 8002802:	2001      	movs	r0, #1
 8002804:	9b01      	ldr	r3, [sp, #4]
 8002806:	425f      	negs	r7, r3
 8002808:	4338      	orrs	r0, r7
 800280a:	b003      	add	sp, #12
 800280c:	bcf0      	pop	{r4, r5, r6, r7}
 800280e:	46bb      	mov	fp, r7
 8002810:	46b2      	mov	sl, r6
 8002812:	46a9      	mov	r9, r5
 8002814:	46a0      	mov	r8, r4
 8002816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002818:	2c00      	cmp	r4, #0
 800281a:	d0dc      	beq.n	80027d6 <__gedf2+0x4e>
 800281c:	e7e6      	b.n	80027ec <__gedf2+0x64>
 800281e:	2800      	cmp	r0, #0
 8002820:	d0ef      	beq.n	8002802 <__gedf2+0x7a>
 8002822:	9b01      	ldr	r3, [sp, #4]
 8002824:	4563      	cmp	r3, ip
 8002826:	d1ec      	bne.n	8002802 <__gedf2+0x7a>
 8002828:	4582      	cmp	sl, r0
 800282a:	dcea      	bgt.n	8002802 <__gedf2+0x7a>
 800282c:	dbe1      	blt.n	80027f2 <__gedf2+0x6a>
 800282e:	428e      	cmp	r6, r1
 8002830:	d8e7      	bhi.n	8002802 <__gedf2+0x7a>
 8002832:	d1de      	bne.n	80027f2 <__gedf2+0x6a>
 8002834:	45c8      	cmp	r8, r9
 8002836:	d8e4      	bhi.n	8002802 <__gedf2+0x7a>
 8002838:	2000      	movs	r0, #0
 800283a:	45c8      	cmp	r8, r9
 800283c:	d2e5      	bcs.n	800280a <__gedf2+0x82>
 800283e:	e7d8      	b.n	80027f2 <__gedf2+0x6a>
 8002840:	2c00      	cmp	r4, #0
 8002842:	d0e2      	beq.n	800280a <__gedf2+0x82>
 8002844:	e7dd      	b.n	8002802 <__gedf2+0x7a>
 8002846:	4311      	orrs	r1, r2
 8002848:	d104      	bne.n	8002854 <__gedf2+0xcc>
 800284a:	9b01      	ldr	r3, [sp, #4]
 800284c:	4563      	cmp	r3, ip
 800284e:	d1d8      	bne.n	8002802 <__gedf2+0x7a>
 8002850:	2000      	movs	r0, #0
 8002852:	e7da      	b.n	800280a <__gedf2+0x82>
 8002854:	2002      	movs	r0, #2
 8002856:	4240      	negs	r0, r0
 8002858:	e7d7      	b.n	800280a <__gedf2+0x82>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d0e6      	beq.n	800282e <__gedf2+0xa6>
 8002860:	e7cf      	b.n	8002802 <__gedf2+0x7a>
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	000007ff 	.word	0x000007ff

08002868 <__ledf2>:
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	4657      	mov	r7, sl
 800286c:	464e      	mov	r6, r9
 800286e:	4645      	mov	r5, r8
 8002870:	46de      	mov	lr, fp
 8002872:	b5e0      	push	{r5, r6, r7, lr}
 8002874:	000d      	movs	r5, r1
 8002876:	030e      	lsls	r6, r1, #12
 8002878:	0049      	lsls	r1, r1, #1
 800287a:	0d49      	lsrs	r1, r1, #21
 800287c:	468a      	mov	sl, r1
 800287e:	0fdf      	lsrs	r7, r3, #31
 8002880:	0fe9      	lsrs	r1, r5, #31
 8002882:	46bc      	mov	ip, r7
 8002884:	b083      	sub	sp, #12
 8002886:	4f2e      	ldr	r7, [pc, #184]	@ (8002940 <__ledf2+0xd8>)
 8002888:	0004      	movs	r4, r0
 800288a:	4680      	mov	r8, r0
 800288c:	9101      	str	r1, [sp, #4]
 800288e:	0058      	lsls	r0, r3, #1
 8002890:	0319      	lsls	r1, r3, #12
 8002892:	4691      	mov	r9, r2
 8002894:	0b36      	lsrs	r6, r6, #12
 8002896:	0b09      	lsrs	r1, r1, #12
 8002898:	0d40      	lsrs	r0, r0, #21
 800289a:	45ba      	cmp	sl, r7
 800289c:	d01e      	beq.n	80028dc <__ledf2+0x74>
 800289e:	42b8      	cmp	r0, r7
 80028a0:	d00d      	beq.n	80028be <__ledf2+0x56>
 80028a2:	4657      	mov	r7, sl
 80028a4:	2f00      	cmp	r7, #0
 80028a6:	d127      	bne.n	80028f8 <__ledf2+0x90>
 80028a8:	4334      	orrs	r4, r6
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d133      	bne.n	8002916 <__ledf2+0xae>
 80028ae:	430a      	orrs	r2, r1
 80028b0:	d034      	beq.n	800291c <__ledf2+0xb4>
 80028b2:	2c00      	cmp	r4, #0
 80028b4:	d140      	bne.n	8002938 <__ledf2+0xd0>
 80028b6:	4663      	mov	r3, ip
 80028b8:	0058      	lsls	r0, r3, #1
 80028ba:	3801      	subs	r0, #1
 80028bc:	e015      	b.n	80028ea <__ledf2+0x82>
 80028be:	4311      	orrs	r1, r2
 80028c0:	d112      	bne.n	80028e8 <__ledf2+0x80>
 80028c2:	4653      	mov	r3, sl
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <__ledf2+0x64>
 80028c8:	4326      	orrs	r6, r4
 80028ca:	d0f4      	beq.n	80028b6 <__ledf2+0x4e>
 80028cc:	9b01      	ldr	r3, [sp, #4]
 80028ce:	4563      	cmp	r3, ip
 80028d0:	d01d      	beq.n	800290e <__ledf2+0xa6>
 80028d2:	2001      	movs	r0, #1
 80028d4:	9b01      	ldr	r3, [sp, #4]
 80028d6:	425f      	negs	r7, r3
 80028d8:	4338      	orrs	r0, r7
 80028da:	e006      	b.n	80028ea <__ledf2+0x82>
 80028dc:	4326      	orrs	r6, r4
 80028de:	d103      	bne.n	80028e8 <__ledf2+0x80>
 80028e0:	4550      	cmp	r0, sl
 80028e2:	d1f6      	bne.n	80028d2 <__ledf2+0x6a>
 80028e4:	4311      	orrs	r1, r2
 80028e6:	d01c      	beq.n	8002922 <__ledf2+0xba>
 80028e8:	2002      	movs	r0, #2
 80028ea:	b003      	add	sp, #12
 80028ec:	bcf0      	pop	{r4, r5, r6, r7}
 80028ee:	46bb      	mov	fp, r7
 80028f0:	46b2      	mov	sl, r6
 80028f2:	46a9      	mov	r9, r5
 80028f4:	46a0      	mov	r8, r4
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d0ea      	beq.n	80028d2 <__ledf2+0x6a>
 80028fc:	9b01      	ldr	r3, [sp, #4]
 80028fe:	4563      	cmp	r3, ip
 8002900:	d1e7      	bne.n	80028d2 <__ledf2+0x6a>
 8002902:	4582      	cmp	sl, r0
 8002904:	dce5      	bgt.n	80028d2 <__ledf2+0x6a>
 8002906:	db02      	blt.n	800290e <__ledf2+0xa6>
 8002908:	428e      	cmp	r6, r1
 800290a:	d8e2      	bhi.n	80028d2 <__ledf2+0x6a>
 800290c:	d00e      	beq.n	800292c <__ledf2+0xc4>
 800290e:	9b01      	ldr	r3, [sp, #4]
 8002910:	0058      	lsls	r0, r3, #1
 8002912:	3801      	subs	r0, #1
 8002914:	e7e9      	b.n	80028ea <__ledf2+0x82>
 8002916:	2c00      	cmp	r4, #0
 8002918:	d0cd      	beq.n	80028b6 <__ledf2+0x4e>
 800291a:	e7d7      	b.n	80028cc <__ledf2+0x64>
 800291c:	2c00      	cmp	r4, #0
 800291e:	d0e4      	beq.n	80028ea <__ledf2+0x82>
 8002920:	e7d7      	b.n	80028d2 <__ledf2+0x6a>
 8002922:	9b01      	ldr	r3, [sp, #4]
 8002924:	2000      	movs	r0, #0
 8002926:	4563      	cmp	r3, ip
 8002928:	d0df      	beq.n	80028ea <__ledf2+0x82>
 800292a:	e7d2      	b.n	80028d2 <__ledf2+0x6a>
 800292c:	45c8      	cmp	r8, r9
 800292e:	d8d0      	bhi.n	80028d2 <__ledf2+0x6a>
 8002930:	2000      	movs	r0, #0
 8002932:	45c8      	cmp	r8, r9
 8002934:	d2d9      	bcs.n	80028ea <__ledf2+0x82>
 8002936:	e7ea      	b.n	800290e <__ledf2+0xa6>
 8002938:	9b01      	ldr	r3, [sp, #4]
 800293a:	4563      	cmp	r3, ip
 800293c:	d0e4      	beq.n	8002908 <__ledf2+0xa0>
 800293e:	e7c8      	b.n	80028d2 <__ledf2+0x6a>
 8002940:	000007ff 	.word	0x000007ff

08002944 <__aeabi_dmul>:
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	4657      	mov	r7, sl
 8002948:	464e      	mov	r6, r9
 800294a:	46de      	mov	lr, fp
 800294c:	4645      	mov	r5, r8
 800294e:	b5e0      	push	{r5, r6, r7, lr}
 8002950:	001f      	movs	r7, r3
 8002952:	030b      	lsls	r3, r1, #12
 8002954:	0b1b      	lsrs	r3, r3, #12
 8002956:	0016      	movs	r6, r2
 8002958:	469a      	mov	sl, r3
 800295a:	0fca      	lsrs	r2, r1, #31
 800295c:	004b      	lsls	r3, r1, #1
 800295e:	0004      	movs	r4, r0
 8002960:	4691      	mov	r9, r2
 8002962:	b085      	sub	sp, #20
 8002964:	0d5b      	lsrs	r3, r3, #21
 8002966:	d100      	bne.n	800296a <__aeabi_dmul+0x26>
 8002968:	e1cf      	b.n	8002d0a <__aeabi_dmul+0x3c6>
 800296a:	4acd      	ldr	r2, [pc, #820]	@ (8002ca0 <__aeabi_dmul+0x35c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d055      	beq.n	8002a1c <__aeabi_dmul+0xd8>
 8002970:	4651      	mov	r1, sl
 8002972:	0f42      	lsrs	r2, r0, #29
 8002974:	00c9      	lsls	r1, r1, #3
 8002976:	430a      	orrs	r2, r1
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	0409      	lsls	r1, r1, #16
 800297c:	4311      	orrs	r1, r2
 800297e:	00c2      	lsls	r2, r0, #3
 8002980:	4690      	mov	r8, r2
 8002982:	4ac8      	ldr	r2, [pc, #800]	@ (8002ca4 <__aeabi_dmul+0x360>)
 8002984:	468a      	mov	sl, r1
 8002986:	4693      	mov	fp, r2
 8002988:	449b      	add	fp, r3
 800298a:	2300      	movs	r3, #0
 800298c:	2500      	movs	r5, #0
 800298e:	9302      	str	r3, [sp, #8]
 8002990:	033c      	lsls	r4, r7, #12
 8002992:	007b      	lsls	r3, r7, #1
 8002994:	0ffa      	lsrs	r2, r7, #31
 8002996:	9601      	str	r6, [sp, #4]
 8002998:	0b24      	lsrs	r4, r4, #12
 800299a:	0d5b      	lsrs	r3, r3, #21
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	d100      	bne.n	80029a2 <__aeabi_dmul+0x5e>
 80029a0:	e188      	b.n	8002cb4 <__aeabi_dmul+0x370>
 80029a2:	4abf      	ldr	r2, [pc, #764]	@ (8002ca0 <__aeabi_dmul+0x35c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d100      	bne.n	80029aa <__aeabi_dmul+0x66>
 80029a8:	e092      	b.n	8002ad0 <__aeabi_dmul+0x18c>
 80029aa:	4abe      	ldr	r2, [pc, #760]	@ (8002ca4 <__aeabi_dmul+0x360>)
 80029ac:	4694      	mov	ip, r2
 80029ae:	4463      	add	r3, ip
 80029b0:	449b      	add	fp, r3
 80029b2:	2d0a      	cmp	r5, #10
 80029b4:	dc42      	bgt.n	8002a3c <__aeabi_dmul+0xf8>
 80029b6:	00e4      	lsls	r4, r4, #3
 80029b8:	0f73      	lsrs	r3, r6, #29
 80029ba:	4323      	orrs	r3, r4
 80029bc:	2480      	movs	r4, #128	@ 0x80
 80029be:	4649      	mov	r1, r9
 80029c0:	0424      	lsls	r4, r4, #16
 80029c2:	431c      	orrs	r4, r3
 80029c4:	00f3      	lsls	r3, r6, #3
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	9b00      	ldr	r3, [sp, #0]
 80029ca:	2000      	movs	r0, #0
 80029cc:	4059      	eors	r1, r3
 80029ce:	b2cb      	uxtb	r3, r1
 80029d0:	9303      	str	r3, [sp, #12]
 80029d2:	2d02      	cmp	r5, #2
 80029d4:	dc00      	bgt.n	80029d8 <__aeabi_dmul+0x94>
 80029d6:	e094      	b.n	8002b02 <__aeabi_dmul+0x1be>
 80029d8:	2301      	movs	r3, #1
 80029da:	40ab      	lsls	r3, r5
 80029dc:	001d      	movs	r5, r3
 80029de:	23a6      	movs	r3, #166	@ 0xa6
 80029e0:	002a      	movs	r2, r5
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	401a      	ands	r2, r3
 80029e6:	421d      	tst	r5, r3
 80029e8:	d000      	beq.n	80029ec <__aeabi_dmul+0xa8>
 80029ea:	e229      	b.n	8002e40 <__aeabi_dmul+0x4fc>
 80029ec:	2390      	movs	r3, #144	@ 0x90
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	421d      	tst	r5, r3
 80029f2:	d100      	bne.n	80029f6 <__aeabi_dmul+0xb2>
 80029f4:	e24d      	b.n	8002e92 <__aeabi_dmul+0x54e>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4699      	mov	r9, r3
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	4ba8      	ldr	r3, [pc, #672]	@ (8002ca0 <__aeabi_dmul+0x35c>)
 8002a00:	0010      	movs	r0, r2
 8002a02:	464a      	mov	r2, r9
 8002a04:	051b      	lsls	r3, r3, #20
 8002a06:	4323      	orrs	r3, r4
 8002a08:	07d2      	lsls	r2, r2, #31
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	b005      	add	sp, #20
 8002a10:	bcf0      	pop	{r4, r5, r6, r7}
 8002a12:	46bb      	mov	fp, r7
 8002a14:	46b2      	mov	sl, r6
 8002a16:	46a9      	mov	r9, r5
 8002a18:	46a0      	mov	r8, r4
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1c:	4652      	mov	r2, sl
 8002a1e:	4302      	orrs	r2, r0
 8002a20:	4690      	mov	r8, r2
 8002a22:	d000      	beq.n	8002a26 <__aeabi_dmul+0xe2>
 8002a24:	e1ac      	b.n	8002d80 <__aeabi_dmul+0x43c>
 8002a26:	469b      	mov	fp, r3
 8002a28:	2302      	movs	r3, #2
 8002a2a:	4692      	mov	sl, r2
 8002a2c:	2508      	movs	r5, #8
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	e7ae      	b.n	8002990 <__aeabi_dmul+0x4c>
 8002a32:	9b00      	ldr	r3, [sp, #0]
 8002a34:	46a2      	mov	sl, r4
 8002a36:	4699      	mov	r9, r3
 8002a38:	9b01      	ldr	r3, [sp, #4]
 8002a3a:	4698      	mov	r8, r3
 8002a3c:	9b02      	ldr	r3, [sp, #8]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d100      	bne.n	8002a44 <__aeabi_dmul+0x100>
 8002a42:	e1ca      	b.n	8002dda <__aeabi_dmul+0x496>
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d100      	bne.n	8002a4a <__aeabi_dmul+0x106>
 8002a48:	e192      	b.n	8002d70 <__aeabi_dmul+0x42c>
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d110      	bne.n	8002a70 <__aeabi_dmul+0x12c>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2400      	movs	r4, #0
 8002a52:	2200      	movs	r2, #0
 8002a54:	e7d4      	b.n	8002a00 <__aeabi_dmul+0xbc>
 8002a56:	2201      	movs	r2, #1
 8002a58:	087b      	lsrs	r3, r7, #1
 8002a5a:	403a      	ands	r2, r7
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	4652      	mov	r2, sl
 8002a60:	07d2      	lsls	r2, r2, #31
 8002a62:	4313      	orrs	r3, r2
 8002a64:	4698      	mov	r8, r3
 8002a66:	4653      	mov	r3, sl
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	469a      	mov	sl, r3
 8002a6c:	9b03      	ldr	r3, [sp, #12]
 8002a6e:	4699      	mov	r9, r3
 8002a70:	465b      	mov	r3, fp
 8002a72:	1c58      	adds	r0, r3, #1
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	445b      	add	r3, fp
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dc00      	bgt.n	8002a80 <__aeabi_dmul+0x13c>
 8002a7e:	e1b1      	b.n	8002de4 <__aeabi_dmul+0x4a0>
 8002a80:	4642      	mov	r2, r8
 8002a82:	0752      	lsls	r2, r2, #29
 8002a84:	d00b      	beq.n	8002a9e <__aeabi_dmul+0x15a>
 8002a86:	220f      	movs	r2, #15
 8002a88:	4641      	mov	r1, r8
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	2a04      	cmp	r2, #4
 8002a8e:	d006      	beq.n	8002a9e <__aeabi_dmul+0x15a>
 8002a90:	4642      	mov	r2, r8
 8002a92:	1d11      	adds	r1, r2, #4
 8002a94:	4541      	cmp	r1, r8
 8002a96:	4192      	sbcs	r2, r2
 8002a98:	4688      	mov	r8, r1
 8002a9a:	4252      	negs	r2, r2
 8002a9c:	4492      	add	sl, r2
 8002a9e:	4652      	mov	r2, sl
 8002aa0:	01d2      	lsls	r2, r2, #7
 8002aa2:	d506      	bpl.n	8002ab2 <__aeabi_dmul+0x16e>
 8002aa4:	4652      	mov	r2, sl
 8002aa6:	4b80      	ldr	r3, [pc, #512]	@ (8002ca8 <__aeabi_dmul+0x364>)
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	2380      	movs	r3, #128	@ 0x80
 8002aac:	4692      	mov	sl, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	18c3      	adds	r3, r0, r3
 8002ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cac <__aeabi_dmul+0x368>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	dd00      	ble.n	8002aba <__aeabi_dmul+0x176>
 8002ab8:	e18f      	b.n	8002dda <__aeabi_dmul+0x496>
 8002aba:	4642      	mov	r2, r8
 8002abc:	08d1      	lsrs	r1, r2, #3
 8002abe:	4652      	mov	r2, sl
 8002ac0:	0752      	lsls	r2, r2, #29
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	055b      	lsls	r3, r3, #21
 8002ac8:	024c      	lsls	r4, r1, #9
 8002aca:	0b24      	lsrs	r4, r4, #12
 8002acc:	0d5b      	lsrs	r3, r3, #21
 8002ace:	e797      	b.n	8002a00 <__aeabi_dmul+0xbc>
 8002ad0:	4b73      	ldr	r3, [pc, #460]	@ (8002ca0 <__aeabi_dmul+0x35c>)
 8002ad2:	4326      	orrs	r6, r4
 8002ad4:	469c      	mov	ip, r3
 8002ad6:	44e3      	add	fp, ip
 8002ad8:	2e00      	cmp	r6, #0
 8002ada:	d100      	bne.n	8002ade <__aeabi_dmul+0x19a>
 8002adc:	e16f      	b.n	8002dbe <__aeabi_dmul+0x47a>
 8002ade:	2303      	movs	r3, #3
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	431d      	orrs	r5, r3
 8002ae4:	9b00      	ldr	r3, [sp, #0]
 8002ae6:	4059      	eors	r1, r3
 8002ae8:	b2cb      	uxtb	r3, r1
 8002aea:	9303      	str	r3, [sp, #12]
 8002aec:	2d0a      	cmp	r5, #10
 8002aee:	dd00      	ble.n	8002af2 <__aeabi_dmul+0x1ae>
 8002af0:	e133      	b.n	8002d5a <__aeabi_dmul+0x416>
 8002af2:	2301      	movs	r3, #1
 8002af4:	40ab      	lsls	r3, r5
 8002af6:	001d      	movs	r5, r3
 8002af8:	2303      	movs	r3, #3
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	2288      	movs	r2, #136	@ 0x88
 8002afe:	422a      	tst	r2, r5
 8002b00:	d197      	bne.n	8002a32 <__aeabi_dmul+0xee>
 8002b02:	4642      	mov	r2, r8
 8002b04:	4643      	mov	r3, r8
 8002b06:	0412      	lsls	r2, r2, #16
 8002b08:	0c12      	lsrs	r2, r2, #16
 8002b0a:	0016      	movs	r6, r2
 8002b0c:	9801      	ldr	r0, [sp, #4]
 8002b0e:	0c1d      	lsrs	r5, r3, #16
 8002b10:	0c03      	lsrs	r3, r0, #16
 8002b12:	0400      	lsls	r0, r0, #16
 8002b14:	0c00      	lsrs	r0, r0, #16
 8002b16:	4346      	muls	r6, r0
 8002b18:	46b4      	mov	ip, r6
 8002b1a:	001e      	movs	r6, r3
 8002b1c:	436e      	muls	r6, r5
 8002b1e:	9600      	str	r6, [sp, #0]
 8002b20:	0016      	movs	r6, r2
 8002b22:	0007      	movs	r7, r0
 8002b24:	435e      	muls	r6, r3
 8002b26:	4661      	mov	r1, ip
 8002b28:	46b0      	mov	r8, r6
 8002b2a:	436f      	muls	r7, r5
 8002b2c:	0c0e      	lsrs	r6, r1, #16
 8002b2e:	44b8      	add	r8, r7
 8002b30:	4446      	add	r6, r8
 8002b32:	42b7      	cmp	r7, r6
 8002b34:	d905      	bls.n	8002b42 <__aeabi_dmul+0x1fe>
 8002b36:	2180      	movs	r1, #128	@ 0x80
 8002b38:	0249      	lsls	r1, r1, #9
 8002b3a:	4688      	mov	r8, r1
 8002b3c:	9f00      	ldr	r7, [sp, #0]
 8002b3e:	4447      	add	r7, r8
 8002b40:	9700      	str	r7, [sp, #0]
 8002b42:	4661      	mov	r1, ip
 8002b44:	0409      	lsls	r1, r1, #16
 8002b46:	0c09      	lsrs	r1, r1, #16
 8002b48:	0c37      	lsrs	r7, r6, #16
 8002b4a:	0436      	lsls	r6, r6, #16
 8002b4c:	468c      	mov	ip, r1
 8002b4e:	0031      	movs	r1, r6
 8002b50:	4461      	add	r1, ip
 8002b52:	9101      	str	r1, [sp, #4]
 8002b54:	0011      	movs	r1, r2
 8002b56:	0c26      	lsrs	r6, r4, #16
 8002b58:	0424      	lsls	r4, r4, #16
 8002b5a:	0c24      	lsrs	r4, r4, #16
 8002b5c:	4361      	muls	r1, r4
 8002b5e:	468c      	mov	ip, r1
 8002b60:	0021      	movs	r1, r4
 8002b62:	4369      	muls	r1, r5
 8002b64:	4689      	mov	r9, r1
 8002b66:	4661      	mov	r1, ip
 8002b68:	0c09      	lsrs	r1, r1, #16
 8002b6a:	4688      	mov	r8, r1
 8002b6c:	4372      	muls	r2, r6
 8002b6e:	444a      	add	r2, r9
 8002b70:	4442      	add	r2, r8
 8002b72:	4375      	muls	r5, r6
 8002b74:	4591      	cmp	r9, r2
 8002b76:	d903      	bls.n	8002b80 <__aeabi_dmul+0x23c>
 8002b78:	2180      	movs	r1, #128	@ 0x80
 8002b7a:	0249      	lsls	r1, r1, #9
 8002b7c:	4688      	mov	r8, r1
 8002b7e:	4445      	add	r5, r8
 8002b80:	0c11      	lsrs	r1, r2, #16
 8002b82:	4688      	mov	r8, r1
 8002b84:	4661      	mov	r1, ip
 8002b86:	0409      	lsls	r1, r1, #16
 8002b88:	0c09      	lsrs	r1, r1, #16
 8002b8a:	468c      	mov	ip, r1
 8002b8c:	0412      	lsls	r2, r2, #16
 8002b8e:	4462      	add	r2, ip
 8002b90:	18b9      	adds	r1, r7, r2
 8002b92:	9102      	str	r1, [sp, #8]
 8002b94:	4651      	mov	r1, sl
 8002b96:	0c09      	lsrs	r1, r1, #16
 8002b98:	468c      	mov	ip, r1
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	040f      	lsls	r7, r1, #16
 8002b9e:	0c3f      	lsrs	r7, r7, #16
 8002ba0:	0039      	movs	r1, r7
 8002ba2:	4341      	muls	r1, r0
 8002ba4:	4445      	add	r5, r8
 8002ba6:	4688      	mov	r8, r1
 8002ba8:	4661      	mov	r1, ip
 8002baa:	4341      	muls	r1, r0
 8002bac:	468a      	mov	sl, r1
 8002bae:	4641      	mov	r1, r8
 8002bb0:	4660      	mov	r0, ip
 8002bb2:	0c09      	lsrs	r1, r1, #16
 8002bb4:	4689      	mov	r9, r1
 8002bb6:	4358      	muls	r0, r3
 8002bb8:	437b      	muls	r3, r7
 8002bba:	4453      	add	r3, sl
 8002bbc:	444b      	add	r3, r9
 8002bbe:	459a      	cmp	sl, r3
 8002bc0:	d903      	bls.n	8002bca <__aeabi_dmul+0x286>
 8002bc2:	2180      	movs	r1, #128	@ 0x80
 8002bc4:	0249      	lsls	r1, r1, #9
 8002bc6:	4689      	mov	r9, r1
 8002bc8:	4448      	add	r0, r9
 8002bca:	0c19      	lsrs	r1, r3, #16
 8002bcc:	4689      	mov	r9, r1
 8002bce:	4641      	mov	r1, r8
 8002bd0:	0409      	lsls	r1, r1, #16
 8002bd2:	0c09      	lsrs	r1, r1, #16
 8002bd4:	4688      	mov	r8, r1
 8002bd6:	0039      	movs	r1, r7
 8002bd8:	4361      	muls	r1, r4
 8002bda:	041b      	lsls	r3, r3, #16
 8002bdc:	4443      	add	r3, r8
 8002bde:	4688      	mov	r8, r1
 8002be0:	4661      	mov	r1, ip
 8002be2:	434c      	muls	r4, r1
 8002be4:	4371      	muls	r1, r6
 8002be6:	468c      	mov	ip, r1
 8002be8:	4641      	mov	r1, r8
 8002bea:	4377      	muls	r7, r6
 8002bec:	0c0e      	lsrs	r6, r1, #16
 8002bee:	193f      	adds	r7, r7, r4
 8002bf0:	19f6      	adds	r6, r6, r7
 8002bf2:	4448      	add	r0, r9
 8002bf4:	42b4      	cmp	r4, r6
 8002bf6:	d903      	bls.n	8002c00 <__aeabi_dmul+0x2bc>
 8002bf8:	2180      	movs	r1, #128	@ 0x80
 8002bfa:	0249      	lsls	r1, r1, #9
 8002bfc:	4689      	mov	r9, r1
 8002bfe:	44cc      	add	ip, r9
 8002c00:	9902      	ldr	r1, [sp, #8]
 8002c02:	9f00      	ldr	r7, [sp, #0]
 8002c04:	4689      	mov	r9, r1
 8002c06:	0431      	lsls	r1, r6, #16
 8002c08:	444f      	add	r7, r9
 8002c0a:	4689      	mov	r9, r1
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	4297      	cmp	r7, r2
 8002c10:	4192      	sbcs	r2, r2
 8002c12:	040c      	lsls	r4, r1, #16
 8002c14:	0c24      	lsrs	r4, r4, #16
 8002c16:	444c      	add	r4, r9
 8002c18:	18ff      	adds	r7, r7, r3
 8002c1a:	4252      	negs	r2, r2
 8002c1c:	1964      	adds	r4, r4, r5
 8002c1e:	18a1      	adds	r1, r4, r2
 8002c20:	429f      	cmp	r7, r3
 8002c22:	419b      	sbcs	r3, r3
 8002c24:	4688      	mov	r8, r1
 8002c26:	4682      	mov	sl, r0
 8002c28:	425b      	negs	r3, r3
 8002c2a:	4699      	mov	r9, r3
 8002c2c:	4590      	cmp	r8, r2
 8002c2e:	4192      	sbcs	r2, r2
 8002c30:	42ac      	cmp	r4, r5
 8002c32:	41a4      	sbcs	r4, r4
 8002c34:	44c2      	add	sl, r8
 8002c36:	44d1      	add	r9, sl
 8002c38:	4252      	negs	r2, r2
 8002c3a:	4264      	negs	r4, r4
 8002c3c:	4314      	orrs	r4, r2
 8002c3e:	4599      	cmp	r9, r3
 8002c40:	419b      	sbcs	r3, r3
 8002c42:	4582      	cmp	sl, r0
 8002c44:	4192      	sbcs	r2, r2
 8002c46:	425b      	negs	r3, r3
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	464a      	mov	r2, r9
 8002c4e:	0c36      	lsrs	r6, r6, #16
 8002c50:	19a4      	adds	r4, r4, r6
 8002c52:	18e3      	adds	r3, r4, r3
 8002c54:	4463      	add	r3, ip
 8002c56:	025b      	lsls	r3, r3, #9
 8002c58:	0dd2      	lsrs	r2, r2, #23
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	9901      	ldr	r1, [sp, #4]
 8002c5e:	4692      	mov	sl, r2
 8002c60:	027a      	lsls	r2, r7, #9
 8002c62:	430a      	orrs	r2, r1
 8002c64:	1e50      	subs	r0, r2, #1
 8002c66:	4182      	sbcs	r2, r0
 8002c68:	0dff      	lsrs	r7, r7, #23
 8002c6a:	4317      	orrs	r7, r2
 8002c6c:	464a      	mov	r2, r9
 8002c6e:	0252      	lsls	r2, r2, #9
 8002c70:	4317      	orrs	r7, r2
 8002c72:	46b8      	mov	r8, r7
 8002c74:	01db      	lsls	r3, r3, #7
 8002c76:	d500      	bpl.n	8002c7a <__aeabi_dmul+0x336>
 8002c78:	e6ed      	b.n	8002a56 <__aeabi_dmul+0x112>
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <__aeabi_dmul+0x36c>)
 8002c7c:	9a03      	ldr	r2, [sp, #12]
 8002c7e:	445b      	add	r3, fp
 8002c80:	4691      	mov	r9, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	dc00      	bgt.n	8002c88 <__aeabi_dmul+0x344>
 8002c86:	e0ac      	b.n	8002de2 <__aeabi_dmul+0x49e>
 8002c88:	003a      	movs	r2, r7
 8002c8a:	0752      	lsls	r2, r2, #29
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dmul+0x34c>
 8002c8e:	e710      	b.n	8002ab2 <__aeabi_dmul+0x16e>
 8002c90:	220f      	movs	r2, #15
 8002c92:	4658      	mov	r0, fp
 8002c94:	403a      	ands	r2, r7
 8002c96:	2a04      	cmp	r2, #4
 8002c98:	d000      	beq.n	8002c9c <__aeabi_dmul+0x358>
 8002c9a:	e6f9      	b.n	8002a90 <__aeabi_dmul+0x14c>
 8002c9c:	e709      	b.n	8002ab2 <__aeabi_dmul+0x16e>
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	000007ff 	.word	0x000007ff
 8002ca4:	fffffc01 	.word	0xfffffc01
 8002ca8:	feffffff 	.word	0xfeffffff
 8002cac:	000007fe 	.word	0x000007fe
 8002cb0:	000003ff 	.word	0x000003ff
 8002cb4:	0022      	movs	r2, r4
 8002cb6:	4332      	orrs	r2, r6
 8002cb8:	d06f      	beq.n	8002d9a <__aeabi_dmul+0x456>
 8002cba:	2c00      	cmp	r4, #0
 8002cbc:	d100      	bne.n	8002cc0 <__aeabi_dmul+0x37c>
 8002cbe:	e0c2      	b.n	8002e46 <__aeabi_dmul+0x502>
 8002cc0:	0020      	movs	r0, r4
 8002cc2:	f000 fea9 	bl	8003a18 <__clzsi2>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	0003      	movs	r3, r0
 8002cca:	3a0b      	subs	r2, #11
 8002ccc:	201d      	movs	r0, #29
 8002cce:	1a82      	subs	r2, r0, r2
 8002cd0:	0030      	movs	r0, r6
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	40d0      	lsrs	r0, r2
 8002cd6:	3908      	subs	r1, #8
 8002cd8:	408c      	lsls	r4, r1
 8002cda:	0002      	movs	r2, r0
 8002cdc:	4322      	orrs	r2, r4
 8002cde:	0034      	movs	r4, r6
 8002ce0:	408c      	lsls	r4, r1
 8002ce2:	4659      	mov	r1, fp
 8002ce4:	1acb      	subs	r3, r1, r3
 8002ce6:	4986      	ldr	r1, [pc, #536]	@ (8002f00 <__aeabi_dmul+0x5bc>)
 8002ce8:	468b      	mov	fp, r1
 8002cea:	449b      	add	fp, r3
 8002cec:	2d0a      	cmp	r5, #10
 8002cee:	dd00      	ble.n	8002cf2 <__aeabi_dmul+0x3ae>
 8002cf0:	e6a4      	b.n	8002a3c <__aeabi_dmul+0xf8>
 8002cf2:	4649      	mov	r1, r9
 8002cf4:	9b00      	ldr	r3, [sp, #0]
 8002cf6:	9401      	str	r4, [sp, #4]
 8002cf8:	4059      	eors	r1, r3
 8002cfa:	b2cb      	uxtb	r3, r1
 8002cfc:	0014      	movs	r4, r2
 8002cfe:	2000      	movs	r0, #0
 8002d00:	9303      	str	r3, [sp, #12]
 8002d02:	2d02      	cmp	r5, #2
 8002d04:	dd00      	ble.n	8002d08 <__aeabi_dmul+0x3c4>
 8002d06:	e667      	b.n	80029d8 <__aeabi_dmul+0x94>
 8002d08:	e6fb      	b.n	8002b02 <__aeabi_dmul+0x1be>
 8002d0a:	4653      	mov	r3, sl
 8002d0c:	4303      	orrs	r3, r0
 8002d0e:	4698      	mov	r8, r3
 8002d10:	d03c      	beq.n	8002d8c <__aeabi_dmul+0x448>
 8002d12:	4653      	mov	r3, sl
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dmul+0x3d6>
 8002d18:	e0a3      	b.n	8002e62 <__aeabi_dmul+0x51e>
 8002d1a:	4650      	mov	r0, sl
 8002d1c:	f000 fe7c 	bl	8003a18 <__clzsi2>
 8002d20:	230b      	movs	r3, #11
 8002d22:	425b      	negs	r3, r3
 8002d24:	469c      	mov	ip, r3
 8002d26:	0002      	movs	r2, r0
 8002d28:	4484      	add	ip, r0
 8002d2a:	0011      	movs	r1, r2
 8002d2c:	4650      	mov	r0, sl
 8002d2e:	3908      	subs	r1, #8
 8002d30:	4088      	lsls	r0, r1
 8002d32:	231d      	movs	r3, #29
 8002d34:	4680      	mov	r8, r0
 8002d36:	4660      	mov	r0, ip
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	40d8      	lsrs	r0, r3
 8002d3e:	0003      	movs	r3, r0
 8002d40:	4640      	mov	r0, r8
 8002d42:	4303      	orrs	r3, r0
 8002d44:	469a      	mov	sl, r3
 8002d46:	0023      	movs	r3, r4
 8002d48:	408b      	lsls	r3, r1
 8002d4a:	4698      	mov	r8, r3
 8002d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f00 <__aeabi_dmul+0x5bc>)
 8002d4e:	2500      	movs	r5, #0
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	469b      	mov	fp, r3
 8002d54:	2300      	movs	r3, #0
 8002d56:	9302      	str	r3, [sp, #8]
 8002d58:	e61a      	b.n	8002990 <__aeabi_dmul+0x4c>
 8002d5a:	2d0f      	cmp	r5, #15
 8002d5c:	d000      	beq.n	8002d60 <__aeabi_dmul+0x41c>
 8002d5e:	e0c9      	b.n	8002ef4 <__aeabi_dmul+0x5b0>
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	4652      	mov	r2, sl
 8002d64:	031b      	lsls	r3, r3, #12
 8002d66:	421a      	tst	r2, r3
 8002d68:	d002      	beq.n	8002d70 <__aeabi_dmul+0x42c>
 8002d6a:	421c      	tst	r4, r3
 8002d6c:	d100      	bne.n	8002d70 <__aeabi_dmul+0x42c>
 8002d6e:	e092      	b.n	8002e96 <__aeabi_dmul+0x552>
 8002d70:	2480      	movs	r4, #128	@ 0x80
 8002d72:	4653      	mov	r3, sl
 8002d74:	0324      	lsls	r4, r4, #12
 8002d76:	431c      	orrs	r4, r3
 8002d78:	0324      	lsls	r4, r4, #12
 8002d7a:	4642      	mov	r2, r8
 8002d7c:	0b24      	lsrs	r4, r4, #12
 8002d7e:	e63e      	b.n	80029fe <__aeabi_dmul+0xba>
 8002d80:	469b      	mov	fp, r3
 8002d82:	2303      	movs	r3, #3
 8002d84:	4680      	mov	r8, r0
 8002d86:	250c      	movs	r5, #12
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	e601      	b.n	8002990 <__aeabi_dmul+0x4c>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	469a      	mov	sl, r3
 8002d90:	469b      	mov	fp, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	2504      	movs	r5, #4
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	e5fa      	b.n	8002990 <__aeabi_dmul+0x4c>
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	430d      	orrs	r5, r1
 8002d9e:	2d0a      	cmp	r5, #10
 8002da0:	dd00      	ble.n	8002da4 <__aeabi_dmul+0x460>
 8002da2:	e64b      	b.n	8002a3c <__aeabi_dmul+0xf8>
 8002da4:	4649      	mov	r1, r9
 8002da6:	9800      	ldr	r0, [sp, #0]
 8002da8:	4041      	eors	r1, r0
 8002daa:	b2c9      	uxtb	r1, r1
 8002dac:	9103      	str	r1, [sp, #12]
 8002dae:	2d02      	cmp	r5, #2
 8002db0:	dc00      	bgt.n	8002db4 <__aeabi_dmul+0x470>
 8002db2:	e096      	b.n	8002ee2 <__aeabi_dmul+0x59e>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2400      	movs	r4, #0
 8002db8:	2001      	movs	r0, #1
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	e60c      	b.n	80029d8 <__aeabi_dmul+0x94>
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	9a00      	ldr	r2, [sp, #0]
 8002dc4:	432b      	orrs	r3, r5
 8002dc6:	4051      	eors	r1, r2
 8002dc8:	b2ca      	uxtb	r2, r1
 8002dca:	9203      	str	r2, [sp, #12]
 8002dcc:	2b0a      	cmp	r3, #10
 8002dce:	dd00      	ble.n	8002dd2 <__aeabi_dmul+0x48e>
 8002dd0:	e634      	b.n	8002a3c <__aeabi_dmul+0xf8>
 8002dd2:	2d00      	cmp	r5, #0
 8002dd4:	d157      	bne.n	8002e86 <__aeabi_dmul+0x542>
 8002dd6:	9b03      	ldr	r3, [sp, #12]
 8002dd8:	4699      	mov	r9, r3
 8002dda:	2400      	movs	r4, #0
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4b49      	ldr	r3, [pc, #292]	@ (8002f04 <__aeabi_dmul+0x5c0>)
 8002de0:	e60e      	b.n	8002a00 <__aeabi_dmul+0xbc>
 8002de2:	4658      	mov	r0, fp
 8002de4:	2101      	movs	r1, #1
 8002de6:	1ac9      	subs	r1, r1, r3
 8002de8:	2938      	cmp	r1, #56	@ 0x38
 8002dea:	dd00      	ble.n	8002dee <__aeabi_dmul+0x4aa>
 8002dec:	e62f      	b.n	8002a4e <__aeabi_dmul+0x10a>
 8002dee:	291f      	cmp	r1, #31
 8002df0:	dd56      	ble.n	8002ea0 <__aeabi_dmul+0x55c>
 8002df2:	221f      	movs	r2, #31
 8002df4:	4654      	mov	r4, sl
 8002df6:	4252      	negs	r2, r2
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	40dc      	lsrs	r4, r3
 8002dfc:	2920      	cmp	r1, #32
 8002dfe:	d007      	beq.n	8002e10 <__aeabi_dmul+0x4cc>
 8002e00:	4b41      	ldr	r3, [pc, #260]	@ (8002f08 <__aeabi_dmul+0x5c4>)
 8002e02:	4642      	mov	r2, r8
 8002e04:	469c      	mov	ip, r3
 8002e06:	4653      	mov	r3, sl
 8002e08:	4460      	add	r0, ip
 8002e0a:	4083      	lsls	r3, r0
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	4690      	mov	r8, r2
 8002e10:	4642      	mov	r2, r8
 8002e12:	2107      	movs	r1, #7
 8002e14:	1e53      	subs	r3, r2, #1
 8002e16:	419a      	sbcs	r2, r3
 8002e18:	000b      	movs	r3, r1
 8002e1a:	4322      	orrs	r2, r4
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2400      	movs	r4, #0
 8002e20:	4211      	tst	r1, r2
 8002e22:	d009      	beq.n	8002e38 <__aeabi_dmul+0x4f4>
 8002e24:	230f      	movs	r3, #15
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d05d      	beq.n	8002ee8 <__aeabi_dmul+0x5a4>
 8002e2c:	1d11      	adds	r1, r2, #4
 8002e2e:	4291      	cmp	r1, r2
 8002e30:	419b      	sbcs	r3, r3
 8002e32:	000a      	movs	r2, r1
 8002e34:	425b      	negs	r3, r3
 8002e36:	075b      	lsls	r3, r3, #29
 8002e38:	08d2      	lsrs	r2, r2, #3
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e5df      	b.n	8002a00 <__aeabi_dmul+0xbc>
 8002e40:	9b03      	ldr	r3, [sp, #12]
 8002e42:	4699      	mov	r9, r3
 8002e44:	e5fa      	b.n	8002a3c <__aeabi_dmul+0xf8>
 8002e46:	9801      	ldr	r0, [sp, #4]
 8002e48:	f000 fde6 	bl	8003a18 <__clzsi2>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	0003      	movs	r3, r0
 8002e50:	3215      	adds	r2, #21
 8002e52:	3320      	adds	r3, #32
 8002e54:	2a1c      	cmp	r2, #28
 8002e56:	dc00      	bgt.n	8002e5a <__aeabi_dmul+0x516>
 8002e58:	e738      	b.n	8002ccc <__aeabi_dmul+0x388>
 8002e5a:	9a01      	ldr	r2, [sp, #4]
 8002e5c:	3808      	subs	r0, #8
 8002e5e:	4082      	lsls	r2, r0
 8002e60:	e73f      	b.n	8002ce2 <__aeabi_dmul+0x39e>
 8002e62:	f000 fdd9 	bl	8003a18 <__clzsi2>
 8002e66:	2315      	movs	r3, #21
 8002e68:	469c      	mov	ip, r3
 8002e6a:	4484      	add	ip, r0
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	4663      	mov	r3, ip
 8002e70:	3220      	adds	r2, #32
 8002e72:	2b1c      	cmp	r3, #28
 8002e74:	dc00      	bgt.n	8002e78 <__aeabi_dmul+0x534>
 8002e76:	e758      	b.n	8002d2a <__aeabi_dmul+0x3e6>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4698      	mov	r8, r3
 8002e7c:	0023      	movs	r3, r4
 8002e7e:	3808      	subs	r0, #8
 8002e80:	4083      	lsls	r3, r0
 8002e82:	469a      	mov	sl, r3
 8002e84:	e762      	b.n	8002d4c <__aeabi_dmul+0x408>
 8002e86:	001d      	movs	r5, r3
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	2002      	movs	r0, #2
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	e5a2      	b.n	80029d8 <__aeabi_dmul+0x94>
 8002e92:	9002      	str	r0, [sp, #8]
 8002e94:	e632      	b.n	8002afc <__aeabi_dmul+0x1b8>
 8002e96:	431c      	orrs	r4, r3
 8002e98:	9b00      	ldr	r3, [sp, #0]
 8002e9a:	9a01      	ldr	r2, [sp, #4]
 8002e9c:	4699      	mov	r9, r3
 8002e9e:	e5ae      	b.n	80029fe <__aeabi_dmul+0xba>
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <__aeabi_dmul+0x5c8>)
 8002ea2:	4652      	mov	r2, sl
 8002ea4:	18c3      	adds	r3, r0, r3
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	40c8      	lsrs	r0, r1
 8002eac:	4302      	orrs	r2, r0
 8002eae:	4640      	mov	r0, r8
 8002eb0:	4098      	lsls	r0, r3
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	1e58      	subs	r0, r3, #1
 8002eb6:	4183      	sbcs	r3, r0
 8002eb8:	4654      	mov	r4, sl
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	40cc      	lsrs	r4, r1
 8002ebe:	0753      	lsls	r3, r2, #29
 8002ec0:	d009      	beq.n	8002ed6 <__aeabi_dmul+0x592>
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d005      	beq.n	8002ed6 <__aeabi_dmul+0x592>
 8002eca:	1d13      	adds	r3, r2, #4
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	4192      	sbcs	r2, r2
 8002ed0:	4252      	negs	r2, r2
 8002ed2:	18a4      	adds	r4, r4, r2
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	0223      	lsls	r3, r4, #8
 8002ed8:	d508      	bpl.n	8002eec <__aeabi_dmul+0x5a8>
 8002eda:	2301      	movs	r3, #1
 8002edc:	2400      	movs	r4, #0
 8002ede:	2200      	movs	r2, #0
 8002ee0:	e58e      	b.n	8002a00 <__aeabi_dmul+0xbc>
 8002ee2:	4689      	mov	r9, r1
 8002ee4:	2400      	movs	r4, #0
 8002ee6:	e58b      	b.n	8002a00 <__aeabi_dmul+0xbc>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e7a5      	b.n	8002e38 <__aeabi_dmul+0x4f4>
 8002eec:	0763      	lsls	r3, r4, #29
 8002eee:	0264      	lsls	r4, r4, #9
 8002ef0:	0b24      	lsrs	r4, r4, #12
 8002ef2:	e7a1      	b.n	8002e38 <__aeabi_dmul+0x4f4>
 8002ef4:	9b00      	ldr	r3, [sp, #0]
 8002ef6:	46a2      	mov	sl, r4
 8002ef8:	4699      	mov	r9, r3
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	4698      	mov	r8, r3
 8002efe:	e737      	b.n	8002d70 <__aeabi_dmul+0x42c>
 8002f00:	fffffc0d 	.word	0xfffffc0d
 8002f04:	000007ff 	.word	0x000007ff
 8002f08:	0000043e 	.word	0x0000043e
 8002f0c:	0000041e 	.word	0x0000041e

08002f10 <__aeabi_dsub>:
 8002f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f12:	4657      	mov	r7, sl
 8002f14:	464e      	mov	r6, r9
 8002f16:	4645      	mov	r5, r8
 8002f18:	46de      	mov	lr, fp
 8002f1a:	b5e0      	push	{r5, r6, r7, lr}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	9000      	str	r0, [sp, #0]
 8002f20:	9101      	str	r1, [sp, #4]
 8002f22:	030c      	lsls	r4, r1, #12
 8002f24:	004d      	lsls	r5, r1, #1
 8002f26:	0fce      	lsrs	r6, r1, #31
 8002f28:	0a61      	lsrs	r1, r4, #9
 8002f2a:	9c00      	ldr	r4, [sp, #0]
 8002f2c:	005f      	lsls	r7, r3, #1
 8002f2e:	0f64      	lsrs	r4, r4, #29
 8002f30:	430c      	orrs	r4, r1
 8002f32:	9900      	ldr	r1, [sp, #0]
 8002f34:	9200      	str	r2, [sp, #0]
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	00c8      	lsls	r0, r1, #3
 8002f3a:	0319      	lsls	r1, r3, #12
 8002f3c:	0d7b      	lsrs	r3, r7, #21
 8002f3e:	4699      	mov	r9, r3
 8002f40:	9b01      	ldr	r3, [sp, #4]
 8002f42:	4fcc      	ldr	r7, [pc, #816]	@ (8003274 <__aeabi_dsub+0x364>)
 8002f44:	0fdb      	lsrs	r3, r3, #31
 8002f46:	469c      	mov	ip, r3
 8002f48:	0a4b      	lsrs	r3, r1, #9
 8002f4a:	9900      	ldr	r1, [sp, #0]
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	0f49      	lsrs	r1, r1, #29
 8002f50:	4319      	orrs	r1, r3
 8002f52:	9b00      	ldr	r3, [sp, #0]
 8002f54:	468b      	mov	fp, r1
 8002f56:	00da      	lsls	r2, r3, #3
 8002f58:	4692      	mov	sl, r2
 8002f5a:	0d6d      	lsrs	r5, r5, #21
 8002f5c:	45b9      	cmp	r9, r7
 8002f5e:	d100      	bne.n	8002f62 <__aeabi_dsub+0x52>
 8002f60:	e0bf      	b.n	80030e2 <__aeabi_dsub+0x1d2>
 8002f62:	2301      	movs	r3, #1
 8002f64:	4661      	mov	r1, ip
 8002f66:	4059      	eors	r1, r3
 8002f68:	464b      	mov	r3, r9
 8002f6a:	468c      	mov	ip, r1
 8002f6c:	1aeb      	subs	r3, r5, r3
 8002f6e:	428e      	cmp	r6, r1
 8002f70:	d075      	beq.n	800305e <__aeabi_dsub+0x14e>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	dc00      	bgt.n	8002f78 <__aeabi_dsub+0x68>
 8002f76:	e2a3      	b.n	80034c0 <__aeabi_dsub+0x5b0>
 8002f78:	4649      	mov	r1, r9
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x70>
 8002f7e:	e0ce      	b.n	800311e <__aeabi_dsub+0x20e>
 8002f80:	42bd      	cmp	r5, r7
 8002f82:	d100      	bne.n	8002f86 <__aeabi_dsub+0x76>
 8002f84:	e200      	b.n	8003388 <__aeabi_dsub+0x478>
 8002f86:	2701      	movs	r7, #1
 8002f88:	2b38      	cmp	r3, #56	@ 0x38
 8002f8a:	dc19      	bgt.n	8002fc0 <__aeabi_dsub+0xb0>
 8002f8c:	2780      	movs	r7, #128	@ 0x80
 8002f8e:	4659      	mov	r1, fp
 8002f90:	043f      	lsls	r7, r7, #16
 8002f92:	4339      	orrs	r1, r7
 8002f94:	468b      	mov	fp, r1
 8002f96:	2b1f      	cmp	r3, #31
 8002f98:	dd00      	ble.n	8002f9c <__aeabi_dsub+0x8c>
 8002f9a:	e1fa      	b.n	8003392 <__aeabi_dsub+0x482>
 8002f9c:	2720      	movs	r7, #32
 8002f9e:	1af9      	subs	r1, r7, r3
 8002fa0:	468c      	mov	ip, r1
 8002fa2:	4659      	mov	r1, fp
 8002fa4:	4667      	mov	r7, ip
 8002fa6:	40b9      	lsls	r1, r7
 8002fa8:	000f      	movs	r7, r1
 8002faa:	0011      	movs	r1, r2
 8002fac:	40d9      	lsrs	r1, r3
 8002fae:	430f      	orrs	r7, r1
 8002fb0:	4661      	mov	r1, ip
 8002fb2:	408a      	lsls	r2, r1
 8002fb4:	1e51      	subs	r1, r2, #1
 8002fb6:	418a      	sbcs	r2, r1
 8002fb8:	4659      	mov	r1, fp
 8002fba:	40d9      	lsrs	r1, r3
 8002fbc:	4317      	orrs	r7, r2
 8002fbe:	1a64      	subs	r4, r4, r1
 8002fc0:	1bc7      	subs	r7, r0, r7
 8002fc2:	42b8      	cmp	r0, r7
 8002fc4:	4180      	sbcs	r0, r0
 8002fc6:	4240      	negs	r0, r0
 8002fc8:	1a24      	subs	r4, r4, r0
 8002fca:	0223      	lsls	r3, r4, #8
 8002fcc:	d400      	bmi.n	8002fd0 <__aeabi_dsub+0xc0>
 8002fce:	e140      	b.n	8003252 <__aeabi_dsub+0x342>
 8002fd0:	0264      	lsls	r4, r4, #9
 8002fd2:	0a64      	lsrs	r4, r4, #9
 8002fd4:	2c00      	cmp	r4, #0
 8002fd6:	d100      	bne.n	8002fda <__aeabi_dsub+0xca>
 8002fd8:	e154      	b.n	8003284 <__aeabi_dsub+0x374>
 8002fda:	0020      	movs	r0, r4
 8002fdc:	f000 fd1c 	bl	8003a18 <__clzsi2>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	3b08      	subs	r3, #8
 8002fe4:	2120      	movs	r1, #32
 8002fe6:	0038      	movs	r0, r7
 8002fe8:	1aca      	subs	r2, r1, r3
 8002fea:	40d0      	lsrs	r0, r2
 8002fec:	409c      	lsls	r4, r3
 8002fee:	0002      	movs	r2, r0
 8002ff0:	409f      	lsls	r7, r3
 8002ff2:	4322      	orrs	r2, r4
 8002ff4:	429d      	cmp	r5, r3
 8002ff6:	dd00      	ble.n	8002ffa <__aeabi_dsub+0xea>
 8002ff8:	e1a6      	b.n	8003348 <__aeabi_dsub+0x438>
 8002ffa:	1b58      	subs	r0, r3, r5
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	1a09      	subs	r1, r1, r0
 8003000:	003c      	movs	r4, r7
 8003002:	408f      	lsls	r7, r1
 8003004:	40c4      	lsrs	r4, r0
 8003006:	1e7b      	subs	r3, r7, #1
 8003008:	419f      	sbcs	r7, r3
 800300a:	0013      	movs	r3, r2
 800300c:	408b      	lsls	r3, r1
 800300e:	4327      	orrs	r7, r4
 8003010:	431f      	orrs	r7, r3
 8003012:	40c2      	lsrs	r2, r0
 8003014:	003b      	movs	r3, r7
 8003016:	0014      	movs	r4, r2
 8003018:	2500      	movs	r5, #0
 800301a:	4313      	orrs	r3, r2
 800301c:	d100      	bne.n	8003020 <__aeabi_dsub+0x110>
 800301e:	e1f7      	b.n	8003410 <__aeabi_dsub+0x500>
 8003020:	077b      	lsls	r3, r7, #29
 8003022:	d100      	bne.n	8003026 <__aeabi_dsub+0x116>
 8003024:	e377      	b.n	8003716 <__aeabi_dsub+0x806>
 8003026:	230f      	movs	r3, #15
 8003028:	0038      	movs	r0, r7
 800302a:	403b      	ands	r3, r7
 800302c:	2b04      	cmp	r3, #4
 800302e:	d004      	beq.n	800303a <__aeabi_dsub+0x12a>
 8003030:	1d38      	adds	r0, r7, #4
 8003032:	42b8      	cmp	r0, r7
 8003034:	41bf      	sbcs	r7, r7
 8003036:	427f      	negs	r7, r7
 8003038:	19e4      	adds	r4, r4, r7
 800303a:	0223      	lsls	r3, r4, #8
 800303c:	d400      	bmi.n	8003040 <__aeabi_dsub+0x130>
 800303e:	e368      	b.n	8003712 <__aeabi_dsub+0x802>
 8003040:	4b8c      	ldr	r3, [pc, #560]	@ (8003274 <__aeabi_dsub+0x364>)
 8003042:	3501      	adds	r5, #1
 8003044:	429d      	cmp	r5, r3
 8003046:	d100      	bne.n	800304a <__aeabi_dsub+0x13a>
 8003048:	e0f4      	b.n	8003234 <__aeabi_dsub+0x324>
 800304a:	4b8b      	ldr	r3, [pc, #556]	@ (8003278 <__aeabi_dsub+0x368>)
 800304c:	056d      	lsls	r5, r5, #21
 800304e:	401c      	ands	r4, r3
 8003050:	0d6d      	lsrs	r5, r5, #21
 8003052:	0767      	lsls	r7, r4, #29
 8003054:	08c0      	lsrs	r0, r0, #3
 8003056:	0264      	lsls	r4, r4, #9
 8003058:	4307      	orrs	r7, r0
 800305a:	0b24      	lsrs	r4, r4, #12
 800305c:	e0ec      	b.n	8003238 <__aeabi_dsub+0x328>
 800305e:	2b00      	cmp	r3, #0
 8003060:	dc00      	bgt.n	8003064 <__aeabi_dsub+0x154>
 8003062:	e329      	b.n	80036b8 <__aeabi_dsub+0x7a8>
 8003064:	4649      	mov	r1, r9
 8003066:	2900      	cmp	r1, #0
 8003068:	d000      	beq.n	800306c <__aeabi_dsub+0x15c>
 800306a:	e0d6      	b.n	800321a <__aeabi_dsub+0x30a>
 800306c:	4659      	mov	r1, fp
 800306e:	4311      	orrs	r1, r2
 8003070:	d100      	bne.n	8003074 <__aeabi_dsub+0x164>
 8003072:	e12e      	b.n	80032d2 <__aeabi_dsub+0x3c2>
 8003074:	1e59      	subs	r1, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d100      	bne.n	800307c <__aeabi_dsub+0x16c>
 800307a:	e1e6      	b.n	800344a <__aeabi_dsub+0x53a>
 800307c:	42bb      	cmp	r3, r7
 800307e:	d100      	bne.n	8003082 <__aeabi_dsub+0x172>
 8003080:	e182      	b.n	8003388 <__aeabi_dsub+0x478>
 8003082:	2701      	movs	r7, #1
 8003084:	000b      	movs	r3, r1
 8003086:	2938      	cmp	r1, #56	@ 0x38
 8003088:	dc14      	bgt.n	80030b4 <__aeabi_dsub+0x1a4>
 800308a:	2b1f      	cmp	r3, #31
 800308c:	dd00      	ble.n	8003090 <__aeabi_dsub+0x180>
 800308e:	e23c      	b.n	800350a <__aeabi_dsub+0x5fa>
 8003090:	2720      	movs	r7, #32
 8003092:	1af9      	subs	r1, r7, r3
 8003094:	468c      	mov	ip, r1
 8003096:	4659      	mov	r1, fp
 8003098:	4667      	mov	r7, ip
 800309a:	40b9      	lsls	r1, r7
 800309c:	000f      	movs	r7, r1
 800309e:	0011      	movs	r1, r2
 80030a0:	40d9      	lsrs	r1, r3
 80030a2:	430f      	orrs	r7, r1
 80030a4:	4661      	mov	r1, ip
 80030a6:	408a      	lsls	r2, r1
 80030a8:	1e51      	subs	r1, r2, #1
 80030aa:	418a      	sbcs	r2, r1
 80030ac:	4659      	mov	r1, fp
 80030ae:	40d9      	lsrs	r1, r3
 80030b0:	4317      	orrs	r7, r2
 80030b2:	1864      	adds	r4, r4, r1
 80030b4:	183f      	adds	r7, r7, r0
 80030b6:	4287      	cmp	r7, r0
 80030b8:	4180      	sbcs	r0, r0
 80030ba:	4240      	negs	r0, r0
 80030bc:	1824      	adds	r4, r4, r0
 80030be:	0223      	lsls	r3, r4, #8
 80030c0:	d400      	bmi.n	80030c4 <__aeabi_dsub+0x1b4>
 80030c2:	e0c6      	b.n	8003252 <__aeabi_dsub+0x342>
 80030c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003274 <__aeabi_dsub+0x364>)
 80030c6:	3501      	adds	r5, #1
 80030c8:	429d      	cmp	r5, r3
 80030ca:	d100      	bne.n	80030ce <__aeabi_dsub+0x1be>
 80030cc:	e0b2      	b.n	8003234 <__aeabi_dsub+0x324>
 80030ce:	2101      	movs	r1, #1
 80030d0:	4b69      	ldr	r3, [pc, #420]	@ (8003278 <__aeabi_dsub+0x368>)
 80030d2:	087a      	lsrs	r2, r7, #1
 80030d4:	401c      	ands	r4, r3
 80030d6:	4039      	ands	r1, r7
 80030d8:	430a      	orrs	r2, r1
 80030da:	07e7      	lsls	r7, r4, #31
 80030dc:	4317      	orrs	r7, r2
 80030de:	0864      	lsrs	r4, r4, #1
 80030e0:	e79e      	b.n	8003020 <__aeabi_dsub+0x110>
 80030e2:	4b66      	ldr	r3, [pc, #408]	@ (800327c <__aeabi_dsub+0x36c>)
 80030e4:	4311      	orrs	r1, r2
 80030e6:	468a      	mov	sl, r1
 80030e8:	18eb      	adds	r3, r5, r3
 80030ea:	2900      	cmp	r1, #0
 80030ec:	d028      	beq.n	8003140 <__aeabi_dsub+0x230>
 80030ee:	4566      	cmp	r6, ip
 80030f0:	d02c      	beq.n	800314c <__aeabi_dsub+0x23c>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d05b      	beq.n	80031ae <__aeabi_dsub+0x29e>
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	d100      	bne.n	80030fc <__aeabi_dsub+0x1ec>
 80030fa:	e12c      	b.n	8003356 <__aeabi_dsub+0x446>
 80030fc:	465b      	mov	r3, fp
 80030fe:	4666      	mov	r6, ip
 8003100:	075f      	lsls	r7, r3, #29
 8003102:	08d2      	lsrs	r2, r2, #3
 8003104:	4317      	orrs	r7, r2
 8003106:	08dd      	lsrs	r5, r3, #3
 8003108:	003b      	movs	r3, r7
 800310a:	432b      	orrs	r3, r5
 800310c:	d100      	bne.n	8003110 <__aeabi_dsub+0x200>
 800310e:	e0e2      	b.n	80032d6 <__aeabi_dsub+0x3c6>
 8003110:	2480      	movs	r4, #128	@ 0x80
 8003112:	0324      	lsls	r4, r4, #12
 8003114:	432c      	orrs	r4, r5
 8003116:	0324      	lsls	r4, r4, #12
 8003118:	4d56      	ldr	r5, [pc, #344]	@ (8003274 <__aeabi_dsub+0x364>)
 800311a:	0b24      	lsrs	r4, r4, #12
 800311c:	e08c      	b.n	8003238 <__aeabi_dsub+0x328>
 800311e:	4659      	mov	r1, fp
 8003120:	4311      	orrs	r1, r2
 8003122:	d100      	bne.n	8003126 <__aeabi_dsub+0x216>
 8003124:	e0d5      	b.n	80032d2 <__aeabi_dsub+0x3c2>
 8003126:	1e59      	subs	r1, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d100      	bne.n	800312e <__aeabi_dsub+0x21e>
 800312c:	e1b9      	b.n	80034a2 <__aeabi_dsub+0x592>
 800312e:	42bb      	cmp	r3, r7
 8003130:	d100      	bne.n	8003134 <__aeabi_dsub+0x224>
 8003132:	e1b1      	b.n	8003498 <__aeabi_dsub+0x588>
 8003134:	2701      	movs	r7, #1
 8003136:	000b      	movs	r3, r1
 8003138:	2938      	cmp	r1, #56	@ 0x38
 800313a:	dd00      	ble.n	800313e <__aeabi_dsub+0x22e>
 800313c:	e740      	b.n	8002fc0 <__aeabi_dsub+0xb0>
 800313e:	e72a      	b.n	8002f96 <__aeabi_dsub+0x86>
 8003140:	4661      	mov	r1, ip
 8003142:	2701      	movs	r7, #1
 8003144:	4079      	eors	r1, r7
 8003146:	468c      	mov	ip, r1
 8003148:	4566      	cmp	r6, ip
 800314a:	d1d2      	bne.n	80030f2 <__aeabi_dsub+0x1e2>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d100      	bne.n	8003152 <__aeabi_dsub+0x242>
 8003150:	e0c5      	b.n	80032de <__aeabi_dsub+0x3ce>
 8003152:	2d00      	cmp	r5, #0
 8003154:	d000      	beq.n	8003158 <__aeabi_dsub+0x248>
 8003156:	e155      	b.n	8003404 <__aeabi_dsub+0x4f4>
 8003158:	464b      	mov	r3, r9
 800315a:	0025      	movs	r5, r4
 800315c:	4305      	orrs	r5, r0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x252>
 8003160:	e212      	b.n	8003588 <__aeabi_dsub+0x678>
 8003162:	1e59      	subs	r1, r3, #1
 8003164:	468c      	mov	ip, r1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d100      	bne.n	800316c <__aeabi_dsub+0x25c>
 800316a:	e249      	b.n	8003600 <__aeabi_dsub+0x6f0>
 800316c:	4d41      	ldr	r5, [pc, #260]	@ (8003274 <__aeabi_dsub+0x364>)
 800316e:	42ab      	cmp	r3, r5
 8003170:	d100      	bne.n	8003174 <__aeabi_dsub+0x264>
 8003172:	e28f      	b.n	8003694 <__aeabi_dsub+0x784>
 8003174:	2701      	movs	r7, #1
 8003176:	2938      	cmp	r1, #56	@ 0x38
 8003178:	dc11      	bgt.n	800319e <__aeabi_dsub+0x28e>
 800317a:	4663      	mov	r3, ip
 800317c:	2b1f      	cmp	r3, #31
 800317e:	dd00      	ble.n	8003182 <__aeabi_dsub+0x272>
 8003180:	e25b      	b.n	800363a <__aeabi_dsub+0x72a>
 8003182:	4661      	mov	r1, ip
 8003184:	2320      	movs	r3, #32
 8003186:	0027      	movs	r7, r4
 8003188:	1a5b      	subs	r3, r3, r1
 800318a:	0005      	movs	r5, r0
 800318c:	4098      	lsls	r0, r3
 800318e:	409f      	lsls	r7, r3
 8003190:	40cd      	lsrs	r5, r1
 8003192:	1e43      	subs	r3, r0, #1
 8003194:	4198      	sbcs	r0, r3
 8003196:	40cc      	lsrs	r4, r1
 8003198:	432f      	orrs	r7, r5
 800319a:	4307      	orrs	r7, r0
 800319c:	44a3      	add	fp, r4
 800319e:	18bf      	adds	r7, r7, r2
 80031a0:	4297      	cmp	r7, r2
 80031a2:	4192      	sbcs	r2, r2
 80031a4:	4252      	negs	r2, r2
 80031a6:	445a      	add	r2, fp
 80031a8:	0014      	movs	r4, r2
 80031aa:	464d      	mov	r5, r9
 80031ac:	e787      	b.n	80030be <__aeabi_dsub+0x1ae>
 80031ae:	4f34      	ldr	r7, [pc, #208]	@ (8003280 <__aeabi_dsub+0x370>)
 80031b0:	1c6b      	adds	r3, r5, #1
 80031b2:	423b      	tst	r3, r7
 80031b4:	d000      	beq.n	80031b8 <__aeabi_dsub+0x2a8>
 80031b6:	e0b6      	b.n	8003326 <__aeabi_dsub+0x416>
 80031b8:	4659      	mov	r1, fp
 80031ba:	0023      	movs	r3, r4
 80031bc:	4311      	orrs	r1, r2
 80031be:	000f      	movs	r7, r1
 80031c0:	4303      	orrs	r3, r0
 80031c2:	2d00      	cmp	r5, #0
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2b8>
 80031c6:	e126      	b.n	8003416 <__aeabi_dsub+0x506>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d100      	bne.n	80031ce <__aeabi_dsub+0x2be>
 80031cc:	e1c0      	b.n	8003550 <__aeabi_dsub+0x640>
 80031ce:	2900      	cmp	r1, #0
 80031d0:	d100      	bne.n	80031d4 <__aeabi_dsub+0x2c4>
 80031d2:	e0a1      	b.n	8003318 <__aeabi_dsub+0x408>
 80031d4:	1a83      	subs	r3, r0, r2
 80031d6:	4698      	mov	r8, r3
 80031d8:	465b      	mov	r3, fp
 80031da:	4540      	cmp	r0, r8
 80031dc:	41ad      	sbcs	r5, r5
 80031de:	1ae3      	subs	r3, r4, r3
 80031e0:	426d      	negs	r5, r5
 80031e2:	1b5b      	subs	r3, r3, r5
 80031e4:	2580      	movs	r5, #128	@ 0x80
 80031e6:	042d      	lsls	r5, r5, #16
 80031e8:	422b      	tst	r3, r5
 80031ea:	d100      	bne.n	80031ee <__aeabi_dsub+0x2de>
 80031ec:	e14b      	b.n	8003486 <__aeabi_dsub+0x576>
 80031ee:	465b      	mov	r3, fp
 80031f0:	1a10      	subs	r0, r2, r0
 80031f2:	4282      	cmp	r2, r0
 80031f4:	4192      	sbcs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	0007      	movs	r7, r0
 80031fa:	2601      	movs	r6, #1
 80031fc:	4663      	mov	r3, ip
 80031fe:	4252      	negs	r2, r2
 8003200:	1aa4      	subs	r4, r4, r2
 8003202:	4327      	orrs	r7, r4
 8003204:	401e      	ands	r6, r3
 8003206:	2f00      	cmp	r7, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x2fc>
 800320a:	e142      	b.n	8003492 <__aeabi_dsub+0x582>
 800320c:	422c      	tst	r4, r5
 800320e:	d100      	bne.n	8003212 <__aeabi_dsub+0x302>
 8003210:	e26d      	b.n	80036ee <__aeabi_dsub+0x7de>
 8003212:	4b19      	ldr	r3, [pc, #100]	@ (8003278 <__aeabi_dsub+0x368>)
 8003214:	2501      	movs	r5, #1
 8003216:	401c      	ands	r4, r3
 8003218:	e71b      	b.n	8003052 <__aeabi_dsub+0x142>
 800321a:	42bd      	cmp	r5, r7
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x310>
 800321e:	e13b      	b.n	8003498 <__aeabi_dsub+0x588>
 8003220:	2701      	movs	r7, #1
 8003222:	2b38      	cmp	r3, #56	@ 0x38
 8003224:	dd00      	ble.n	8003228 <__aeabi_dsub+0x318>
 8003226:	e745      	b.n	80030b4 <__aeabi_dsub+0x1a4>
 8003228:	2780      	movs	r7, #128	@ 0x80
 800322a:	4659      	mov	r1, fp
 800322c:	043f      	lsls	r7, r7, #16
 800322e:	4339      	orrs	r1, r7
 8003230:	468b      	mov	fp, r1
 8003232:	e72a      	b.n	800308a <__aeabi_dsub+0x17a>
 8003234:	2400      	movs	r4, #0
 8003236:	2700      	movs	r7, #0
 8003238:	052d      	lsls	r5, r5, #20
 800323a:	4325      	orrs	r5, r4
 800323c:	07f6      	lsls	r6, r6, #31
 800323e:	4335      	orrs	r5, r6
 8003240:	0038      	movs	r0, r7
 8003242:	0029      	movs	r1, r5
 8003244:	b003      	add	sp, #12
 8003246:	bcf0      	pop	{r4, r5, r6, r7}
 8003248:	46bb      	mov	fp, r7
 800324a:	46b2      	mov	sl, r6
 800324c:	46a9      	mov	r9, r5
 800324e:	46a0      	mov	r8, r4
 8003250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003252:	077b      	lsls	r3, r7, #29
 8003254:	d004      	beq.n	8003260 <__aeabi_dsub+0x350>
 8003256:	230f      	movs	r3, #15
 8003258:	403b      	ands	r3, r7
 800325a:	2b04      	cmp	r3, #4
 800325c:	d000      	beq.n	8003260 <__aeabi_dsub+0x350>
 800325e:	e6e7      	b.n	8003030 <__aeabi_dsub+0x120>
 8003260:	002b      	movs	r3, r5
 8003262:	08f8      	lsrs	r0, r7, #3
 8003264:	4a03      	ldr	r2, [pc, #12]	@ (8003274 <__aeabi_dsub+0x364>)
 8003266:	0767      	lsls	r7, r4, #29
 8003268:	4307      	orrs	r7, r0
 800326a:	08e5      	lsrs	r5, r4, #3
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <__aeabi_dsub+0x362>
 8003270:	e74a      	b.n	8003108 <__aeabi_dsub+0x1f8>
 8003272:	e0a5      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 8003274:	000007ff 	.word	0x000007ff
 8003278:	ff7fffff 	.word	0xff7fffff
 800327c:	fffff801 	.word	0xfffff801
 8003280:	000007fe 	.word	0x000007fe
 8003284:	0038      	movs	r0, r7
 8003286:	f000 fbc7 	bl	8003a18 <__clzsi2>
 800328a:	0003      	movs	r3, r0
 800328c:	3318      	adds	r3, #24
 800328e:	2b1f      	cmp	r3, #31
 8003290:	dc00      	bgt.n	8003294 <__aeabi_dsub+0x384>
 8003292:	e6a7      	b.n	8002fe4 <__aeabi_dsub+0xd4>
 8003294:	003a      	movs	r2, r7
 8003296:	3808      	subs	r0, #8
 8003298:	4082      	lsls	r2, r0
 800329a:	429d      	cmp	r5, r3
 800329c:	dd00      	ble.n	80032a0 <__aeabi_dsub+0x390>
 800329e:	e08a      	b.n	80033b6 <__aeabi_dsub+0x4a6>
 80032a0:	1b5b      	subs	r3, r3, r5
 80032a2:	1c58      	adds	r0, r3, #1
 80032a4:	281f      	cmp	r0, #31
 80032a6:	dc00      	bgt.n	80032aa <__aeabi_dsub+0x39a>
 80032a8:	e1d8      	b.n	800365c <__aeabi_dsub+0x74c>
 80032aa:	0017      	movs	r7, r2
 80032ac:	3b1f      	subs	r3, #31
 80032ae:	40df      	lsrs	r7, r3
 80032b0:	2820      	cmp	r0, #32
 80032b2:	d005      	beq.n	80032c0 <__aeabi_dsub+0x3b0>
 80032b4:	2340      	movs	r3, #64	@ 0x40
 80032b6:	1a1b      	subs	r3, r3, r0
 80032b8:	409a      	lsls	r2, r3
 80032ba:	1e53      	subs	r3, r2, #1
 80032bc:	419a      	sbcs	r2, r3
 80032be:	4317      	orrs	r7, r2
 80032c0:	2500      	movs	r5, #0
 80032c2:	2f00      	cmp	r7, #0
 80032c4:	d100      	bne.n	80032c8 <__aeabi_dsub+0x3b8>
 80032c6:	e0e5      	b.n	8003494 <__aeabi_dsub+0x584>
 80032c8:	077b      	lsls	r3, r7, #29
 80032ca:	d000      	beq.n	80032ce <__aeabi_dsub+0x3be>
 80032cc:	e6ab      	b.n	8003026 <__aeabi_dsub+0x116>
 80032ce:	002c      	movs	r4, r5
 80032d0:	e7c6      	b.n	8003260 <__aeabi_dsub+0x350>
 80032d2:	08c0      	lsrs	r0, r0, #3
 80032d4:	e7c6      	b.n	8003264 <__aeabi_dsub+0x354>
 80032d6:	2700      	movs	r7, #0
 80032d8:	2400      	movs	r4, #0
 80032da:	4dd1      	ldr	r5, [pc, #836]	@ (8003620 <__aeabi_dsub+0x710>)
 80032dc:	e7ac      	b.n	8003238 <__aeabi_dsub+0x328>
 80032de:	4fd1      	ldr	r7, [pc, #836]	@ (8003624 <__aeabi_dsub+0x714>)
 80032e0:	1c6b      	adds	r3, r5, #1
 80032e2:	423b      	tst	r3, r7
 80032e4:	d171      	bne.n	80033ca <__aeabi_dsub+0x4ba>
 80032e6:	0023      	movs	r3, r4
 80032e8:	4303      	orrs	r3, r0
 80032ea:	2d00      	cmp	r5, #0
 80032ec:	d000      	beq.n	80032f0 <__aeabi_dsub+0x3e0>
 80032ee:	e14e      	b.n	800358e <__aeabi_dsub+0x67e>
 80032f0:	4657      	mov	r7, sl
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d100      	bne.n	80032f8 <__aeabi_dsub+0x3e8>
 80032f6:	e1b5      	b.n	8003664 <__aeabi_dsub+0x754>
 80032f8:	2f00      	cmp	r7, #0
 80032fa:	d00d      	beq.n	8003318 <__aeabi_dsub+0x408>
 80032fc:	1883      	adds	r3, r0, r2
 80032fe:	4283      	cmp	r3, r0
 8003300:	4180      	sbcs	r0, r0
 8003302:	445c      	add	r4, fp
 8003304:	4240      	negs	r0, r0
 8003306:	1824      	adds	r4, r4, r0
 8003308:	0222      	lsls	r2, r4, #8
 800330a:	d500      	bpl.n	800330e <__aeabi_dsub+0x3fe>
 800330c:	e1c8      	b.n	80036a0 <__aeabi_dsub+0x790>
 800330e:	001f      	movs	r7, r3
 8003310:	4698      	mov	r8, r3
 8003312:	4327      	orrs	r7, r4
 8003314:	d100      	bne.n	8003318 <__aeabi_dsub+0x408>
 8003316:	e0bc      	b.n	8003492 <__aeabi_dsub+0x582>
 8003318:	4643      	mov	r3, r8
 800331a:	0767      	lsls	r7, r4, #29
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	431f      	orrs	r7, r3
 8003320:	08e5      	lsrs	r5, r4, #3
 8003322:	2300      	movs	r3, #0
 8003324:	e04c      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 8003326:	1a83      	subs	r3, r0, r2
 8003328:	4698      	mov	r8, r3
 800332a:	465b      	mov	r3, fp
 800332c:	4540      	cmp	r0, r8
 800332e:	41bf      	sbcs	r7, r7
 8003330:	1ae3      	subs	r3, r4, r3
 8003332:	427f      	negs	r7, r7
 8003334:	1bdb      	subs	r3, r3, r7
 8003336:	021f      	lsls	r7, r3, #8
 8003338:	d47c      	bmi.n	8003434 <__aeabi_dsub+0x524>
 800333a:	4647      	mov	r7, r8
 800333c:	431f      	orrs	r7, r3
 800333e:	d100      	bne.n	8003342 <__aeabi_dsub+0x432>
 8003340:	e0a6      	b.n	8003490 <__aeabi_dsub+0x580>
 8003342:	001c      	movs	r4, r3
 8003344:	4647      	mov	r7, r8
 8003346:	e645      	b.n	8002fd4 <__aeabi_dsub+0xc4>
 8003348:	4cb7      	ldr	r4, [pc, #732]	@ (8003628 <__aeabi_dsub+0x718>)
 800334a:	1aed      	subs	r5, r5, r3
 800334c:	4014      	ands	r4, r2
 800334e:	077b      	lsls	r3, r7, #29
 8003350:	d000      	beq.n	8003354 <__aeabi_dsub+0x444>
 8003352:	e780      	b.n	8003256 <__aeabi_dsub+0x346>
 8003354:	e784      	b.n	8003260 <__aeabi_dsub+0x350>
 8003356:	464b      	mov	r3, r9
 8003358:	0025      	movs	r5, r4
 800335a:	4305      	orrs	r5, r0
 800335c:	d066      	beq.n	800342c <__aeabi_dsub+0x51c>
 800335e:	1e5f      	subs	r7, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d100      	bne.n	8003366 <__aeabi_dsub+0x456>
 8003364:	e0fc      	b.n	8003560 <__aeabi_dsub+0x650>
 8003366:	4dae      	ldr	r5, [pc, #696]	@ (8003620 <__aeabi_dsub+0x710>)
 8003368:	42ab      	cmp	r3, r5
 800336a:	d100      	bne.n	800336e <__aeabi_dsub+0x45e>
 800336c:	e15e      	b.n	800362c <__aeabi_dsub+0x71c>
 800336e:	4666      	mov	r6, ip
 8003370:	2f38      	cmp	r7, #56	@ 0x38
 8003372:	dc00      	bgt.n	8003376 <__aeabi_dsub+0x466>
 8003374:	e0b4      	b.n	80034e0 <__aeabi_dsub+0x5d0>
 8003376:	2001      	movs	r0, #1
 8003378:	1a17      	subs	r7, r2, r0
 800337a:	42ba      	cmp	r2, r7
 800337c:	4192      	sbcs	r2, r2
 800337e:	465b      	mov	r3, fp
 8003380:	4252      	negs	r2, r2
 8003382:	464d      	mov	r5, r9
 8003384:	1a9c      	subs	r4, r3, r2
 8003386:	e620      	b.n	8002fca <__aeabi_dsub+0xba>
 8003388:	0767      	lsls	r7, r4, #29
 800338a:	08c0      	lsrs	r0, r0, #3
 800338c:	4307      	orrs	r7, r0
 800338e:	08e5      	lsrs	r5, r4, #3
 8003390:	e6ba      	b.n	8003108 <__aeabi_dsub+0x1f8>
 8003392:	001f      	movs	r7, r3
 8003394:	4659      	mov	r1, fp
 8003396:	3f20      	subs	r7, #32
 8003398:	40f9      	lsrs	r1, r7
 800339a:	000f      	movs	r7, r1
 800339c:	2b20      	cmp	r3, #32
 800339e:	d005      	beq.n	80033ac <__aeabi_dsub+0x49c>
 80033a0:	2140      	movs	r1, #64	@ 0x40
 80033a2:	1acb      	subs	r3, r1, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	4099      	lsls	r1, r3
 80033a8:	430a      	orrs	r2, r1
 80033aa:	4692      	mov	sl, r2
 80033ac:	4653      	mov	r3, sl
 80033ae:	1e5a      	subs	r2, r3, #1
 80033b0:	4193      	sbcs	r3, r2
 80033b2:	431f      	orrs	r7, r3
 80033b4:	e604      	b.n	8002fc0 <__aeabi_dsub+0xb0>
 80033b6:	1aeb      	subs	r3, r5, r3
 80033b8:	4d9b      	ldr	r5, [pc, #620]	@ (8003628 <__aeabi_dsub+0x718>)
 80033ba:	4015      	ands	r5, r2
 80033bc:	076f      	lsls	r7, r5, #29
 80033be:	08ed      	lsrs	r5, r5, #3
 80033c0:	032c      	lsls	r4, r5, #12
 80033c2:	055d      	lsls	r5, r3, #21
 80033c4:	0b24      	lsrs	r4, r4, #12
 80033c6:	0d6d      	lsrs	r5, r5, #21
 80033c8:	e736      	b.n	8003238 <__aeabi_dsub+0x328>
 80033ca:	4d95      	ldr	r5, [pc, #596]	@ (8003620 <__aeabi_dsub+0x710>)
 80033cc:	42ab      	cmp	r3, r5
 80033ce:	d100      	bne.n	80033d2 <__aeabi_dsub+0x4c2>
 80033d0:	e0d6      	b.n	8003580 <__aeabi_dsub+0x670>
 80033d2:	1882      	adds	r2, r0, r2
 80033d4:	0021      	movs	r1, r4
 80033d6:	4282      	cmp	r2, r0
 80033d8:	4180      	sbcs	r0, r0
 80033da:	4459      	add	r1, fp
 80033dc:	4240      	negs	r0, r0
 80033de:	1808      	adds	r0, r1, r0
 80033e0:	07c7      	lsls	r7, r0, #31
 80033e2:	0852      	lsrs	r2, r2, #1
 80033e4:	4317      	orrs	r7, r2
 80033e6:	0844      	lsrs	r4, r0, #1
 80033e8:	0752      	lsls	r2, r2, #29
 80033ea:	d400      	bmi.n	80033ee <__aeabi_dsub+0x4de>
 80033ec:	e185      	b.n	80036fa <__aeabi_dsub+0x7ea>
 80033ee:	220f      	movs	r2, #15
 80033f0:	001d      	movs	r5, r3
 80033f2:	403a      	ands	r2, r7
 80033f4:	2a04      	cmp	r2, #4
 80033f6:	d000      	beq.n	80033fa <__aeabi_dsub+0x4ea>
 80033f8:	e61a      	b.n	8003030 <__aeabi_dsub+0x120>
 80033fa:	08ff      	lsrs	r7, r7, #3
 80033fc:	0764      	lsls	r4, r4, #29
 80033fe:	4327      	orrs	r7, r4
 8003400:	0905      	lsrs	r5, r0, #4
 8003402:	e7dd      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 8003404:	465b      	mov	r3, fp
 8003406:	08d2      	lsrs	r2, r2, #3
 8003408:	075f      	lsls	r7, r3, #29
 800340a:	4317      	orrs	r7, r2
 800340c:	08dd      	lsrs	r5, r3, #3
 800340e:	e67b      	b.n	8003108 <__aeabi_dsub+0x1f8>
 8003410:	2700      	movs	r7, #0
 8003412:	2400      	movs	r4, #0
 8003414:	e710      	b.n	8003238 <__aeabi_dsub+0x328>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d000      	beq.n	800341c <__aeabi_dsub+0x50c>
 800341a:	e0d6      	b.n	80035ca <__aeabi_dsub+0x6ba>
 800341c:	2900      	cmp	r1, #0
 800341e:	d000      	beq.n	8003422 <__aeabi_dsub+0x512>
 8003420:	e12f      	b.n	8003682 <__aeabi_dsub+0x772>
 8003422:	2480      	movs	r4, #128	@ 0x80
 8003424:	2600      	movs	r6, #0
 8003426:	4d7e      	ldr	r5, [pc, #504]	@ (8003620 <__aeabi_dsub+0x710>)
 8003428:	0324      	lsls	r4, r4, #12
 800342a:	e705      	b.n	8003238 <__aeabi_dsub+0x328>
 800342c:	4666      	mov	r6, ip
 800342e:	465c      	mov	r4, fp
 8003430:	08d0      	lsrs	r0, r2, #3
 8003432:	e717      	b.n	8003264 <__aeabi_dsub+0x354>
 8003434:	465b      	mov	r3, fp
 8003436:	1a17      	subs	r7, r2, r0
 8003438:	42ba      	cmp	r2, r7
 800343a:	4192      	sbcs	r2, r2
 800343c:	1b1c      	subs	r4, r3, r4
 800343e:	2601      	movs	r6, #1
 8003440:	4663      	mov	r3, ip
 8003442:	4252      	negs	r2, r2
 8003444:	1aa4      	subs	r4, r4, r2
 8003446:	401e      	ands	r6, r3
 8003448:	e5c4      	b.n	8002fd4 <__aeabi_dsub+0xc4>
 800344a:	1883      	adds	r3, r0, r2
 800344c:	4283      	cmp	r3, r0
 800344e:	4180      	sbcs	r0, r0
 8003450:	445c      	add	r4, fp
 8003452:	4240      	negs	r0, r0
 8003454:	1825      	adds	r5, r4, r0
 8003456:	022a      	lsls	r2, r5, #8
 8003458:	d400      	bmi.n	800345c <__aeabi_dsub+0x54c>
 800345a:	e0da      	b.n	8003612 <__aeabi_dsub+0x702>
 800345c:	4a72      	ldr	r2, [pc, #456]	@ (8003628 <__aeabi_dsub+0x718>)
 800345e:	085b      	lsrs	r3, r3, #1
 8003460:	4015      	ands	r5, r2
 8003462:	07ea      	lsls	r2, r5, #31
 8003464:	431a      	orrs	r2, r3
 8003466:	0869      	lsrs	r1, r5, #1
 8003468:	075b      	lsls	r3, r3, #29
 800346a:	d400      	bmi.n	800346e <__aeabi_dsub+0x55e>
 800346c:	e14a      	b.n	8003704 <__aeabi_dsub+0x7f4>
 800346e:	230f      	movs	r3, #15
 8003470:	4013      	ands	r3, r2
 8003472:	2b04      	cmp	r3, #4
 8003474:	d100      	bne.n	8003478 <__aeabi_dsub+0x568>
 8003476:	e0fc      	b.n	8003672 <__aeabi_dsub+0x762>
 8003478:	1d17      	adds	r7, r2, #4
 800347a:	4297      	cmp	r7, r2
 800347c:	41a4      	sbcs	r4, r4
 800347e:	4264      	negs	r4, r4
 8003480:	2502      	movs	r5, #2
 8003482:	1864      	adds	r4, r4, r1
 8003484:	e6ec      	b.n	8003260 <__aeabi_dsub+0x350>
 8003486:	4647      	mov	r7, r8
 8003488:	001c      	movs	r4, r3
 800348a:	431f      	orrs	r7, r3
 800348c:	d000      	beq.n	8003490 <__aeabi_dsub+0x580>
 800348e:	e743      	b.n	8003318 <__aeabi_dsub+0x408>
 8003490:	2600      	movs	r6, #0
 8003492:	2500      	movs	r5, #0
 8003494:	2400      	movs	r4, #0
 8003496:	e6cf      	b.n	8003238 <__aeabi_dsub+0x328>
 8003498:	08c0      	lsrs	r0, r0, #3
 800349a:	0767      	lsls	r7, r4, #29
 800349c:	4307      	orrs	r7, r0
 800349e:	08e5      	lsrs	r5, r4, #3
 80034a0:	e632      	b.n	8003108 <__aeabi_dsub+0x1f8>
 80034a2:	1a87      	subs	r7, r0, r2
 80034a4:	465b      	mov	r3, fp
 80034a6:	42b8      	cmp	r0, r7
 80034a8:	4180      	sbcs	r0, r0
 80034aa:	1ae4      	subs	r4, r4, r3
 80034ac:	4240      	negs	r0, r0
 80034ae:	1a24      	subs	r4, r4, r0
 80034b0:	0223      	lsls	r3, r4, #8
 80034b2:	d428      	bmi.n	8003506 <__aeabi_dsub+0x5f6>
 80034b4:	0763      	lsls	r3, r4, #29
 80034b6:	08ff      	lsrs	r7, r7, #3
 80034b8:	431f      	orrs	r7, r3
 80034ba:	08e5      	lsrs	r5, r4, #3
 80034bc:	2301      	movs	r3, #1
 80034be:	e77f      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d100      	bne.n	80034c6 <__aeabi_dsub+0x5b6>
 80034c4:	e673      	b.n	80031ae <__aeabi_dsub+0x29e>
 80034c6:	464b      	mov	r3, r9
 80034c8:	1b5f      	subs	r7, r3, r5
 80034ca:	003b      	movs	r3, r7
 80034cc:	2d00      	cmp	r5, #0
 80034ce:	d100      	bne.n	80034d2 <__aeabi_dsub+0x5c2>
 80034d0:	e742      	b.n	8003358 <__aeabi_dsub+0x448>
 80034d2:	2f38      	cmp	r7, #56	@ 0x38
 80034d4:	dd00      	ble.n	80034d8 <__aeabi_dsub+0x5c8>
 80034d6:	e0ec      	b.n	80036b2 <__aeabi_dsub+0x7a2>
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	000e      	movs	r6, r1
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	431c      	orrs	r4, r3
 80034e0:	2f1f      	cmp	r7, #31
 80034e2:	dc25      	bgt.n	8003530 <__aeabi_dsub+0x620>
 80034e4:	2520      	movs	r5, #32
 80034e6:	0023      	movs	r3, r4
 80034e8:	1bed      	subs	r5, r5, r7
 80034ea:	0001      	movs	r1, r0
 80034ec:	40a8      	lsls	r0, r5
 80034ee:	40ab      	lsls	r3, r5
 80034f0:	40f9      	lsrs	r1, r7
 80034f2:	1e45      	subs	r5, r0, #1
 80034f4:	41a8      	sbcs	r0, r5
 80034f6:	430b      	orrs	r3, r1
 80034f8:	40fc      	lsrs	r4, r7
 80034fa:	4318      	orrs	r0, r3
 80034fc:	465b      	mov	r3, fp
 80034fe:	1b1b      	subs	r3, r3, r4
 8003500:	469b      	mov	fp, r3
 8003502:	e739      	b.n	8003378 <__aeabi_dsub+0x468>
 8003504:	4666      	mov	r6, ip
 8003506:	2501      	movs	r5, #1
 8003508:	e562      	b.n	8002fd0 <__aeabi_dsub+0xc0>
 800350a:	001f      	movs	r7, r3
 800350c:	4659      	mov	r1, fp
 800350e:	3f20      	subs	r7, #32
 8003510:	40f9      	lsrs	r1, r7
 8003512:	468c      	mov	ip, r1
 8003514:	2b20      	cmp	r3, #32
 8003516:	d005      	beq.n	8003524 <__aeabi_dsub+0x614>
 8003518:	2740      	movs	r7, #64	@ 0x40
 800351a:	4659      	mov	r1, fp
 800351c:	1afb      	subs	r3, r7, r3
 800351e:	4099      	lsls	r1, r3
 8003520:	430a      	orrs	r2, r1
 8003522:	4692      	mov	sl, r2
 8003524:	4657      	mov	r7, sl
 8003526:	1e7b      	subs	r3, r7, #1
 8003528:	419f      	sbcs	r7, r3
 800352a:	4663      	mov	r3, ip
 800352c:	431f      	orrs	r7, r3
 800352e:	e5c1      	b.n	80030b4 <__aeabi_dsub+0x1a4>
 8003530:	003b      	movs	r3, r7
 8003532:	0025      	movs	r5, r4
 8003534:	3b20      	subs	r3, #32
 8003536:	40dd      	lsrs	r5, r3
 8003538:	2f20      	cmp	r7, #32
 800353a:	d004      	beq.n	8003546 <__aeabi_dsub+0x636>
 800353c:	2340      	movs	r3, #64	@ 0x40
 800353e:	1bdb      	subs	r3, r3, r7
 8003540:	409c      	lsls	r4, r3
 8003542:	4320      	orrs	r0, r4
 8003544:	4680      	mov	r8, r0
 8003546:	4640      	mov	r0, r8
 8003548:	1e43      	subs	r3, r0, #1
 800354a:	4198      	sbcs	r0, r3
 800354c:	4328      	orrs	r0, r5
 800354e:	e713      	b.n	8003378 <__aeabi_dsub+0x468>
 8003550:	2900      	cmp	r1, #0
 8003552:	d09d      	beq.n	8003490 <__aeabi_dsub+0x580>
 8003554:	2601      	movs	r6, #1
 8003556:	4663      	mov	r3, ip
 8003558:	465c      	mov	r4, fp
 800355a:	4690      	mov	r8, r2
 800355c:	401e      	ands	r6, r3
 800355e:	e6db      	b.n	8003318 <__aeabi_dsub+0x408>
 8003560:	1a17      	subs	r7, r2, r0
 8003562:	465b      	mov	r3, fp
 8003564:	42ba      	cmp	r2, r7
 8003566:	4192      	sbcs	r2, r2
 8003568:	1b1c      	subs	r4, r3, r4
 800356a:	4252      	negs	r2, r2
 800356c:	1aa4      	subs	r4, r4, r2
 800356e:	0223      	lsls	r3, r4, #8
 8003570:	d4c8      	bmi.n	8003504 <__aeabi_dsub+0x5f4>
 8003572:	0763      	lsls	r3, r4, #29
 8003574:	08ff      	lsrs	r7, r7, #3
 8003576:	431f      	orrs	r7, r3
 8003578:	4666      	mov	r6, ip
 800357a:	2301      	movs	r3, #1
 800357c:	08e5      	lsrs	r5, r4, #3
 800357e:	e71f      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 8003580:	001d      	movs	r5, r3
 8003582:	2400      	movs	r4, #0
 8003584:	2700      	movs	r7, #0
 8003586:	e657      	b.n	8003238 <__aeabi_dsub+0x328>
 8003588:	465c      	mov	r4, fp
 800358a:	08d0      	lsrs	r0, r2, #3
 800358c:	e66a      	b.n	8003264 <__aeabi_dsub+0x354>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d100      	bne.n	8003594 <__aeabi_dsub+0x684>
 8003592:	e737      	b.n	8003404 <__aeabi_dsub+0x4f4>
 8003594:	4653      	mov	r3, sl
 8003596:	08c0      	lsrs	r0, r0, #3
 8003598:	0767      	lsls	r7, r4, #29
 800359a:	4307      	orrs	r7, r0
 800359c:	08e5      	lsrs	r5, r4, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x694>
 80035a2:	e5b1      	b.n	8003108 <__aeabi_dsub+0x1f8>
 80035a4:	2380      	movs	r3, #128	@ 0x80
 80035a6:	031b      	lsls	r3, r3, #12
 80035a8:	421d      	tst	r5, r3
 80035aa:	d008      	beq.n	80035be <__aeabi_dsub+0x6ae>
 80035ac:	4659      	mov	r1, fp
 80035ae:	08c8      	lsrs	r0, r1, #3
 80035b0:	4218      	tst	r0, r3
 80035b2:	d104      	bne.n	80035be <__aeabi_dsub+0x6ae>
 80035b4:	08d2      	lsrs	r2, r2, #3
 80035b6:	0749      	lsls	r1, r1, #29
 80035b8:	430a      	orrs	r2, r1
 80035ba:	0017      	movs	r7, r2
 80035bc:	0005      	movs	r5, r0
 80035be:	0f7b      	lsrs	r3, r7, #29
 80035c0:	00ff      	lsls	r7, r7, #3
 80035c2:	08ff      	lsrs	r7, r7, #3
 80035c4:	075b      	lsls	r3, r3, #29
 80035c6:	431f      	orrs	r7, r3
 80035c8:	e59e      	b.n	8003108 <__aeabi_dsub+0x1f8>
 80035ca:	08c0      	lsrs	r0, r0, #3
 80035cc:	0763      	lsls	r3, r4, #29
 80035ce:	4318      	orrs	r0, r3
 80035d0:	08e5      	lsrs	r5, r4, #3
 80035d2:	2900      	cmp	r1, #0
 80035d4:	d053      	beq.n	800367e <__aeabi_dsub+0x76e>
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	031b      	lsls	r3, r3, #12
 80035da:	421d      	tst	r5, r3
 80035dc:	d00a      	beq.n	80035f4 <__aeabi_dsub+0x6e4>
 80035de:	4659      	mov	r1, fp
 80035e0:	08cc      	lsrs	r4, r1, #3
 80035e2:	421c      	tst	r4, r3
 80035e4:	d106      	bne.n	80035f4 <__aeabi_dsub+0x6e4>
 80035e6:	2601      	movs	r6, #1
 80035e8:	4663      	mov	r3, ip
 80035ea:	0025      	movs	r5, r4
 80035ec:	08d0      	lsrs	r0, r2, #3
 80035ee:	0749      	lsls	r1, r1, #29
 80035f0:	4308      	orrs	r0, r1
 80035f2:	401e      	ands	r6, r3
 80035f4:	0f47      	lsrs	r7, r0, #29
 80035f6:	00c0      	lsls	r0, r0, #3
 80035f8:	08c0      	lsrs	r0, r0, #3
 80035fa:	077f      	lsls	r7, r7, #29
 80035fc:	4307      	orrs	r7, r0
 80035fe:	e583      	b.n	8003108 <__aeabi_dsub+0x1f8>
 8003600:	1883      	adds	r3, r0, r2
 8003602:	4293      	cmp	r3, r2
 8003604:	4192      	sbcs	r2, r2
 8003606:	445c      	add	r4, fp
 8003608:	4252      	negs	r2, r2
 800360a:	18a5      	adds	r5, r4, r2
 800360c:	022a      	lsls	r2, r5, #8
 800360e:	d500      	bpl.n	8003612 <__aeabi_dsub+0x702>
 8003610:	e724      	b.n	800345c <__aeabi_dsub+0x54c>
 8003612:	076f      	lsls	r7, r5, #29
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	431f      	orrs	r7, r3
 8003618:	08ed      	lsrs	r5, r5, #3
 800361a:	2301      	movs	r3, #1
 800361c:	e6d0      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	000007ff 	.word	0x000007ff
 8003624:	000007fe 	.word	0x000007fe
 8003628:	ff7fffff 	.word	0xff7fffff
 800362c:	465b      	mov	r3, fp
 800362e:	08d2      	lsrs	r2, r2, #3
 8003630:	075f      	lsls	r7, r3, #29
 8003632:	4666      	mov	r6, ip
 8003634:	4317      	orrs	r7, r2
 8003636:	08dd      	lsrs	r5, r3, #3
 8003638:	e566      	b.n	8003108 <__aeabi_dsub+0x1f8>
 800363a:	0025      	movs	r5, r4
 800363c:	3b20      	subs	r3, #32
 800363e:	40dd      	lsrs	r5, r3
 8003640:	4663      	mov	r3, ip
 8003642:	2b20      	cmp	r3, #32
 8003644:	d005      	beq.n	8003652 <__aeabi_dsub+0x742>
 8003646:	2340      	movs	r3, #64	@ 0x40
 8003648:	4661      	mov	r1, ip
 800364a:	1a5b      	subs	r3, r3, r1
 800364c:	409c      	lsls	r4, r3
 800364e:	4320      	orrs	r0, r4
 8003650:	4680      	mov	r8, r0
 8003652:	4647      	mov	r7, r8
 8003654:	1e7b      	subs	r3, r7, #1
 8003656:	419f      	sbcs	r7, r3
 8003658:	432f      	orrs	r7, r5
 800365a:	e5a0      	b.n	800319e <__aeabi_dsub+0x28e>
 800365c:	2120      	movs	r1, #32
 800365e:	2700      	movs	r7, #0
 8003660:	1a09      	subs	r1, r1, r0
 8003662:	e4d2      	b.n	800300a <__aeabi_dsub+0xfa>
 8003664:	2f00      	cmp	r7, #0
 8003666:	d100      	bne.n	800366a <__aeabi_dsub+0x75a>
 8003668:	e713      	b.n	8003492 <__aeabi_dsub+0x582>
 800366a:	465c      	mov	r4, fp
 800366c:	0017      	movs	r7, r2
 800366e:	2500      	movs	r5, #0
 8003670:	e5f6      	b.n	8003260 <__aeabi_dsub+0x350>
 8003672:	08d7      	lsrs	r7, r2, #3
 8003674:	0749      	lsls	r1, r1, #29
 8003676:	2302      	movs	r3, #2
 8003678:	430f      	orrs	r7, r1
 800367a:	092d      	lsrs	r5, r5, #4
 800367c:	e6a0      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 800367e:	0007      	movs	r7, r0
 8003680:	e542      	b.n	8003108 <__aeabi_dsub+0x1f8>
 8003682:	465b      	mov	r3, fp
 8003684:	2601      	movs	r6, #1
 8003686:	075f      	lsls	r7, r3, #29
 8003688:	08dd      	lsrs	r5, r3, #3
 800368a:	4663      	mov	r3, ip
 800368c:	08d2      	lsrs	r2, r2, #3
 800368e:	4317      	orrs	r7, r2
 8003690:	401e      	ands	r6, r3
 8003692:	e539      	b.n	8003108 <__aeabi_dsub+0x1f8>
 8003694:	465b      	mov	r3, fp
 8003696:	08d2      	lsrs	r2, r2, #3
 8003698:	075f      	lsls	r7, r3, #29
 800369a:	4317      	orrs	r7, r2
 800369c:	08dd      	lsrs	r5, r3, #3
 800369e:	e533      	b.n	8003108 <__aeabi_dsub+0x1f8>
 80036a0:	4a1e      	ldr	r2, [pc, #120]	@ (800371c <__aeabi_dsub+0x80c>)
 80036a2:	08db      	lsrs	r3, r3, #3
 80036a4:	4022      	ands	r2, r4
 80036a6:	0757      	lsls	r7, r2, #29
 80036a8:	0252      	lsls	r2, r2, #9
 80036aa:	2501      	movs	r5, #1
 80036ac:	431f      	orrs	r7, r3
 80036ae:	0b14      	lsrs	r4, r2, #12
 80036b0:	e5c2      	b.n	8003238 <__aeabi_dsub+0x328>
 80036b2:	000e      	movs	r6, r1
 80036b4:	2001      	movs	r0, #1
 80036b6:	e65f      	b.n	8003378 <__aeabi_dsub+0x468>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <__aeabi_dsub+0x7c8>
 80036bc:	464b      	mov	r3, r9
 80036be:	1b5b      	subs	r3, r3, r5
 80036c0:	469c      	mov	ip, r3
 80036c2:	2d00      	cmp	r5, #0
 80036c4:	d100      	bne.n	80036c8 <__aeabi_dsub+0x7b8>
 80036c6:	e548      	b.n	800315a <__aeabi_dsub+0x24a>
 80036c8:	2701      	movs	r7, #1
 80036ca:	2b38      	cmp	r3, #56	@ 0x38
 80036cc:	dd00      	ble.n	80036d0 <__aeabi_dsub+0x7c0>
 80036ce:	e566      	b.n	800319e <__aeabi_dsub+0x28e>
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431c      	orrs	r4, r3
 80036d6:	e550      	b.n	800317a <__aeabi_dsub+0x26a>
 80036d8:	1c6b      	adds	r3, r5, #1
 80036da:	4d11      	ldr	r5, [pc, #68]	@ (8003720 <__aeabi_dsub+0x810>)
 80036dc:	422b      	tst	r3, r5
 80036de:	d000      	beq.n	80036e2 <__aeabi_dsub+0x7d2>
 80036e0:	e673      	b.n	80033ca <__aeabi_dsub+0x4ba>
 80036e2:	4659      	mov	r1, fp
 80036e4:	0023      	movs	r3, r4
 80036e6:	4311      	orrs	r1, r2
 80036e8:	468a      	mov	sl, r1
 80036ea:	4303      	orrs	r3, r0
 80036ec:	e600      	b.n	80032f0 <__aeabi_dsub+0x3e0>
 80036ee:	0767      	lsls	r7, r4, #29
 80036f0:	08c0      	lsrs	r0, r0, #3
 80036f2:	2300      	movs	r3, #0
 80036f4:	4307      	orrs	r7, r0
 80036f6:	08e5      	lsrs	r5, r4, #3
 80036f8:	e662      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 80036fa:	0764      	lsls	r4, r4, #29
 80036fc:	08ff      	lsrs	r7, r7, #3
 80036fe:	4327      	orrs	r7, r4
 8003700:	0905      	lsrs	r5, r0, #4
 8003702:	e65d      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 8003704:	08d2      	lsrs	r2, r2, #3
 8003706:	0749      	lsls	r1, r1, #29
 8003708:	4311      	orrs	r1, r2
 800370a:	000f      	movs	r7, r1
 800370c:	2302      	movs	r3, #2
 800370e:	092d      	lsrs	r5, r5, #4
 8003710:	e656      	b.n	80033c0 <__aeabi_dsub+0x4b0>
 8003712:	0007      	movs	r7, r0
 8003714:	e5a4      	b.n	8003260 <__aeabi_dsub+0x350>
 8003716:	0038      	movs	r0, r7
 8003718:	e48f      	b.n	800303a <__aeabi_dsub+0x12a>
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	ff7fffff 	.word	0xff7fffff
 8003720:	000007fe 	.word	0x000007fe

08003724 <__aeabi_dcmpun>:
 8003724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003726:	46c6      	mov	lr, r8
 8003728:	031e      	lsls	r6, r3, #12
 800372a:	0b36      	lsrs	r6, r6, #12
 800372c:	46b0      	mov	r8, r6
 800372e:	4e0d      	ldr	r6, [pc, #52]	@ (8003764 <__aeabi_dcmpun+0x40>)
 8003730:	030c      	lsls	r4, r1, #12
 8003732:	004d      	lsls	r5, r1, #1
 8003734:	005f      	lsls	r7, r3, #1
 8003736:	b500      	push	{lr}
 8003738:	0b24      	lsrs	r4, r4, #12
 800373a:	0d6d      	lsrs	r5, r5, #21
 800373c:	0d7f      	lsrs	r7, r7, #21
 800373e:	42b5      	cmp	r5, r6
 8003740:	d00b      	beq.n	800375a <__aeabi_dcmpun+0x36>
 8003742:	4908      	ldr	r1, [pc, #32]	@ (8003764 <__aeabi_dcmpun+0x40>)
 8003744:	2000      	movs	r0, #0
 8003746:	428f      	cmp	r7, r1
 8003748:	d104      	bne.n	8003754 <__aeabi_dcmpun+0x30>
 800374a:	4646      	mov	r6, r8
 800374c:	4316      	orrs	r6, r2
 800374e:	0030      	movs	r0, r6
 8003750:	1e43      	subs	r3, r0, #1
 8003752:	4198      	sbcs	r0, r3
 8003754:	bc80      	pop	{r7}
 8003756:	46b8      	mov	r8, r7
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375a:	4304      	orrs	r4, r0
 800375c:	2001      	movs	r0, #1
 800375e:	2c00      	cmp	r4, #0
 8003760:	d1f8      	bne.n	8003754 <__aeabi_dcmpun+0x30>
 8003762:	e7ee      	b.n	8003742 <__aeabi_dcmpun+0x1e>
 8003764:	000007ff 	.word	0x000007ff

08003768 <__aeabi_d2iz>:
 8003768:	000b      	movs	r3, r1
 800376a:	0002      	movs	r2, r0
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	4d16      	ldr	r5, [pc, #88]	@ (80037c8 <__aeabi_d2iz+0x60>)
 8003770:	030c      	lsls	r4, r1, #12
 8003772:	b082      	sub	sp, #8
 8003774:	0049      	lsls	r1, r1, #1
 8003776:	2000      	movs	r0, #0
 8003778:	9200      	str	r2, [sp, #0]
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	0b24      	lsrs	r4, r4, #12
 800377e:	0d49      	lsrs	r1, r1, #21
 8003780:	0fde      	lsrs	r6, r3, #31
 8003782:	42a9      	cmp	r1, r5
 8003784:	dd04      	ble.n	8003790 <__aeabi_d2iz+0x28>
 8003786:	4811      	ldr	r0, [pc, #68]	@ (80037cc <__aeabi_d2iz+0x64>)
 8003788:	4281      	cmp	r1, r0
 800378a:	dd03      	ble.n	8003794 <__aeabi_d2iz+0x2c>
 800378c:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <__aeabi_d2iz+0x68>)
 800378e:	18f0      	adds	r0, r6, r3
 8003790:	b002      	add	sp, #8
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	2080      	movs	r0, #128	@ 0x80
 8003796:	0340      	lsls	r0, r0, #13
 8003798:	4320      	orrs	r0, r4
 800379a:	4c0e      	ldr	r4, [pc, #56]	@ (80037d4 <__aeabi_d2iz+0x6c>)
 800379c:	1a64      	subs	r4, r4, r1
 800379e:	2c1f      	cmp	r4, #31
 80037a0:	dd08      	ble.n	80037b4 <__aeabi_d2iz+0x4c>
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <__aeabi_d2iz+0x70>)
 80037a4:	1a5b      	subs	r3, r3, r1
 80037a6:	40d8      	lsrs	r0, r3
 80037a8:	0003      	movs	r3, r0
 80037aa:	4258      	negs	r0, r3
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	d1ef      	bne.n	8003790 <__aeabi_d2iz+0x28>
 80037b0:	0018      	movs	r0, r3
 80037b2:	e7ed      	b.n	8003790 <__aeabi_d2iz+0x28>
 80037b4:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <__aeabi_d2iz+0x74>)
 80037b6:	9a00      	ldr	r2, [sp, #0]
 80037b8:	469c      	mov	ip, r3
 80037ba:	0003      	movs	r3, r0
 80037bc:	4461      	add	r1, ip
 80037be:	408b      	lsls	r3, r1
 80037c0:	40e2      	lsrs	r2, r4
 80037c2:	4313      	orrs	r3, r2
 80037c4:	e7f1      	b.n	80037aa <__aeabi_d2iz+0x42>
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	000003fe 	.word	0x000003fe
 80037cc:	0000041d 	.word	0x0000041d
 80037d0:	7fffffff 	.word	0x7fffffff
 80037d4:	00000433 	.word	0x00000433
 80037d8:	00000413 	.word	0x00000413
 80037dc:	fffffbed 	.word	0xfffffbed

080037e0 <__aeabi_i2d>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d016      	beq.n	8003814 <__aeabi_i2d+0x34>
 80037e6:	17c3      	asrs	r3, r0, #31
 80037e8:	18c5      	adds	r5, r0, r3
 80037ea:	405d      	eors	r5, r3
 80037ec:	0fc4      	lsrs	r4, r0, #31
 80037ee:	0028      	movs	r0, r5
 80037f0:	f000 f912 	bl	8003a18 <__clzsi2>
 80037f4:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <__aeabi_i2d+0x58>)
 80037f6:	1a1b      	subs	r3, r3, r0
 80037f8:	055b      	lsls	r3, r3, #21
 80037fa:	0d5b      	lsrs	r3, r3, #21
 80037fc:	280a      	cmp	r0, #10
 80037fe:	dc14      	bgt.n	800382a <__aeabi_i2d+0x4a>
 8003800:	0002      	movs	r2, r0
 8003802:	002e      	movs	r6, r5
 8003804:	3215      	adds	r2, #21
 8003806:	4096      	lsls	r6, r2
 8003808:	220b      	movs	r2, #11
 800380a:	1a12      	subs	r2, r2, r0
 800380c:	40d5      	lsrs	r5, r2
 800380e:	032d      	lsls	r5, r5, #12
 8003810:	0b2d      	lsrs	r5, r5, #12
 8003812:	e003      	b.n	800381c <__aeabi_i2d+0x3c>
 8003814:	2400      	movs	r4, #0
 8003816:	2300      	movs	r3, #0
 8003818:	2500      	movs	r5, #0
 800381a:	2600      	movs	r6, #0
 800381c:	051b      	lsls	r3, r3, #20
 800381e:	432b      	orrs	r3, r5
 8003820:	07e4      	lsls	r4, r4, #31
 8003822:	4323      	orrs	r3, r4
 8003824:	0030      	movs	r0, r6
 8003826:	0019      	movs	r1, r3
 8003828:	bd70      	pop	{r4, r5, r6, pc}
 800382a:	380b      	subs	r0, #11
 800382c:	4085      	lsls	r5, r0
 800382e:	032d      	lsls	r5, r5, #12
 8003830:	2600      	movs	r6, #0
 8003832:	0b2d      	lsrs	r5, r5, #12
 8003834:	e7f2      	b.n	800381c <__aeabi_i2d+0x3c>
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	0000041e 	.word	0x0000041e

0800383c <__aeabi_ui2d>:
 800383c:	b510      	push	{r4, lr}
 800383e:	1e04      	subs	r4, r0, #0
 8003840:	d010      	beq.n	8003864 <__aeabi_ui2d+0x28>
 8003842:	f000 f8e9 	bl	8003a18 <__clzsi2>
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <__aeabi_ui2d+0x44>)
 8003848:	1a1b      	subs	r3, r3, r0
 800384a:	055b      	lsls	r3, r3, #21
 800384c:	0d5b      	lsrs	r3, r3, #21
 800384e:	280a      	cmp	r0, #10
 8003850:	dc0f      	bgt.n	8003872 <__aeabi_ui2d+0x36>
 8003852:	220b      	movs	r2, #11
 8003854:	0021      	movs	r1, r4
 8003856:	1a12      	subs	r2, r2, r0
 8003858:	40d1      	lsrs	r1, r2
 800385a:	3015      	adds	r0, #21
 800385c:	030a      	lsls	r2, r1, #12
 800385e:	4084      	lsls	r4, r0
 8003860:	0b12      	lsrs	r2, r2, #12
 8003862:	e001      	b.n	8003868 <__aeabi_ui2d+0x2c>
 8003864:	2300      	movs	r3, #0
 8003866:	2200      	movs	r2, #0
 8003868:	051b      	lsls	r3, r3, #20
 800386a:	4313      	orrs	r3, r2
 800386c:	0020      	movs	r0, r4
 800386e:	0019      	movs	r1, r3
 8003870:	bd10      	pop	{r4, pc}
 8003872:	0022      	movs	r2, r4
 8003874:	380b      	subs	r0, #11
 8003876:	4082      	lsls	r2, r0
 8003878:	0312      	lsls	r2, r2, #12
 800387a:	2400      	movs	r4, #0
 800387c:	0b12      	lsrs	r2, r2, #12
 800387e:	e7f3      	b.n	8003868 <__aeabi_ui2d+0x2c>
 8003880:	0000041e 	.word	0x0000041e

08003884 <__aeabi_f2d>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	0242      	lsls	r2, r0, #9
 8003888:	0043      	lsls	r3, r0, #1
 800388a:	0fc4      	lsrs	r4, r0, #31
 800388c:	20fe      	movs	r0, #254	@ 0xfe
 800388e:	0e1b      	lsrs	r3, r3, #24
 8003890:	1c59      	adds	r1, r3, #1
 8003892:	0a55      	lsrs	r5, r2, #9
 8003894:	4208      	tst	r0, r1
 8003896:	d00c      	beq.n	80038b2 <__aeabi_f2d+0x2e>
 8003898:	21e0      	movs	r1, #224	@ 0xe0
 800389a:	0089      	lsls	r1, r1, #2
 800389c:	468c      	mov	ip, r1
 800389e:	076d      	lsls	r5, r5, #29
 80038a0:	0b12      	lsrs	r2, r2, #12
 80038a2:	4463      	add	r3, ip
 80038a4:	051b      	lsls	r3, r3, #20
 80038a6:	4313      	orrs	r3, r2
 80038a8:	07e4      	lsls	r4, r4, #31
 80038aa:	4323      	orrs	r3, r4
 80038ac:	0028      	movs	r0, r5
 80038ae:	0019      	movs	r1, r3
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d114      	bne.n	80038e0 <__aeabi_f2d+0x5c>
 80038b6:	2d00      	cmp	r5, #0
 80038b8:	d01b      	beq.n	80038f2 <__aeabi_f2d+0x6e>
 80038ba:	0028      	movs	r0, r5
 80038bc:	f000 f8ac 	bl	8003a18 <__clzsi2>
 80038c0:	280a      	cmp	r0, #10
 80038c2:	dc1c      	bgt.n	80038fe <__aeabi_f2d+0x7a>
 80038c4:	230b      	movs	r3, #11
 80038c6:	002a      	movs	r2, r5
 80038c8:	1a1b      	subs	r3, r3, r0
 80038ca:	40da      	lsrs	r2, r3
 80038cc:	0003      	movs	r3, r0
 80038ce:	3315      	adds	r3, #21
 80038d0:	409d      	lsls	r5, r3
 80038d2:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <__aeabi_f2d+0x88>)
 80038d4:	0312      	lsls	r2, r2, #12
 80038d6:	1a1b      	subs	r3, r3, r0
 80038d8:	055b      	lsls	r3, r3, #21
 80038da:	0b12      	lsrs	r2, r2, #12
 80038dc:	0d5b      	lsrs	r3, r3, #21
 80038de:	e7e1      	b.n	80038a4 <__aeabi_f2d+0x20>
 80038e0:	2d00      	cmp	r5, #0
 80038e2:	d009      	beq.n	80038f8 <__aeabi_f2d+0x74>
 80038e4:	0b13      	lsrs	r3, r2, #12
 80038e6:	2280      	movs	r2, #128	@ 0x80
 80038e8:	0312      	lsls	r2, r2, #12
 80038ea:	431a      	orrs	r2, r3
 80038ec:	076d      	lsls	r5, r5, #29
 80038ee:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <__aeabi_f2d+0x8c>)
 80038f0:	e7d8      	b.n	80038a4 <__aeabi_f2d+0x20>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2200      	movs	r2, #0
 80038f6:	e7d5      	b.n	80038a4 <__aeabi_f2d+0x20>
 80038f8:	2200      	movs	r2, #0
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <__aeabi_f2d+0x8c>)
 80038fc:	e7d2      	b.n	80038a4 <__aeabi_f2d+0x20>
 80038fe:	0003      	movs	r3, r0
 8003900:	002a      	movs	r2, r5
 8003902:	3b0b      	subs	r3, #11
 8003904:	409a      	lsls	r2, r3
 8003906:	2500      	movs	r5, #0
 8003908:	e7e3      	b.n	80038d2 <__aeabi_f2d+0x4e>
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	00000389 	.word	0x00000389
 8003910:	000007ff 	.word	0x000007ff

08003914 <__aeabi_d2f>:
 8003914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003916:	004b      	lsls	r3, r1, #1
 8003918:	030f      	lsls	r7, r1, #12
 800391a:	0d5b      	lsrs	r3, r3, #21
 800391c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a08 <__aeabi_d2f+0xf4>)
 800391e:	0f45      	lsrs	r5, r0, #29
 8003920:	b083      	sub	sp, #12
 8003922:	0a7f      	lsrs	r7, r7, #9
 8003924:	1c5e      	adds	r6, r3, #1
 8003926:	432f      	orrs	r7, r5
 8003928:	9000      	str	r0, [sp, #0]
 800392a:	9101      	str	r1, [sp, #4]
 800392c:	0fca      	lsrs	r2, r1, #31
 800392e:	00c5      	lsls	r5, r0, #3
 8003930:	4226      	tst	r6, r4
 8003932:	d00b      	beq.n	800394c <__aeabi_d2f+0x38>
 8003934:	4935      	ldr	r1, [pc, #212]	@ (8003a0c <__aeabi_d2f+0xf8>)
 8003936:	185c      	adds	r4, r3, r1
 8003938:	2cfe      	cmp	r4, #254	@ 0xfe
 800393a:	dd13      	ble.n	8003964 <__aeabi_d2f+0x50>
 800393c:	20ff      	movs	r0, #255	@ 0xff
 800393e:	2300      	movs	r3, #0
 8003940:	05c0      	lsls	r0, r0, #23
 8003942:	4318      	orrs	r0, r3
 8003944:	07d2      	lsls	r2, r2, #31
 8003946:	4310      	orrs	r0, r2
 8003948:	b003      	add	sp, #12
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800394c:	433d      	orrs	r5, r7
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <__aeabi_d2f+0x42>
 8003952:	2000      	movs	r0, #0
 8003954:	e7f4      	b.n	8003940 <__aeabi_d2f+0x2c>
 8003956:	2d00      	cmp	r5, #0
 8003958:	d0f0      	beq.n	800393c <__aeabi_d2f+0x28>
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	03db      	lsls	r3, r3, #15
 800395e:	20ff      	movs	r0, #255	@ 0xff
 8003960:	433b      	orrs	r3, r7
 8003962:	e7ed      	b.n	8003940 <__aeabi_d2f+0x2c>
 8003964:	2c00      	cmp	r4, #0
 8003966:	dd0c      	ble.n	8003982 <__aeabi_d2f+0x6e>
 8003968:	9b00      	ldr	r3, [sp, #0]
 800396a:	00ff      	lsls	r7, r7, #3
 800396c:	019b      	lsls	r3, r3, #6
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	4183      	sbcs	r3, r0
 8003972:	0f69      	lsrs	r1, r5, #29
 8003974:	433b      	orrs	r3, r7
 8003976:	430b      	orrs	r3, r1
 8003978:	0759      	lsls	r1, r3, #29
 800397a:	d127      	bne.n	80039cc <__aeabi_d2f+0xb8>
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	b2e0      	uxtb	r0, r4
 8003980:	e7de      	b.n	8003940 <__aeabi_d2f+0x2c>
 8003982:	0021      	movs	r1, r4
 8003984:	3117      	adds	r1, #23
 8003986:	db31      	blt.n	80039ec <__aeabi_d2f+0xd8>
 8003988:	2180      	movs	r1, #128	@ 0x80
 800398a:	201e      	movs	r0, #30
 800398c:	0409      	lsls	r1, r1, #16
 800398e:	4339      	orrs	r1, r7
 8003990:	1b00      	subs	r0, r0, r4
 8003992:	281f      	cmp	r0, #31
 8003994:	dd2d      	ble.n	80039f2 <__aeabi_d2f+0xde>
 8003996:	2602      	movs	r6, #2
 8003998:	4276      	negs	r6, r6
 800399a:	1b34      	subs	r4, r6, r4
 800399c:	000e      	movs	r6, r1
 800399e:	40e6      	lsrs	r6, r4
 80039a0:	0034      	movs	r4, r6
 80039a2:	2820      	cmp	r0, #32
 80039a4:	d004      	beq.n	80039b0 <__aeabi_d2f+0x9c>
 80039a6:	481a      	ldr	r0, [pc, #104]	@ (8003a10 <__aeabi_d2f+0xfc>)
 80039a8:	4684      	mov	ip, r0
 80039aa:	4463      	add	r3, ip
 80039ac:	4099      	lsls	r1, r3
 80039ae:	430d      	orrs	r5, r1
 80039b0:	002b      	movs	r3, r5
 80039b2:	1e59      	subs	r1, r3, #1
 80039b4:	418b      	sbcs	r3, r1
 80039b6:	4323      	orrs	r3, r4
 80039b8:	0759      	lsls	r1, r3, #29
 80039ba:	d003      	beq.n	80039c4 <__aeabi_d2f+0xb0>
 80039bc:	210f      	movs	r1, #15
 80039be:	4019      	ands	r1, r3
 80039c0:	2904      	cmp	r1, #4
 80039c2:	d10b      	bne.n	80039dc <__aeabi_d2f+0xc8>
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	2000      	movs	r0, #0
 80039c8:	0a5b      	lsrs	r3, r3, #9
 80039ca:	e7b9      	b.n	8003940 <__aeabi_d2f+0x2c>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d104      	bne.n	80039de <__aeabi_d2f+0xca>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	0a5b      	lsrs	r3, r3, #9
 80039d8:	b2e0      	uxtb	r0, r4
 80039da:	e7b1      	b.n	8003940 <__aeabi_d2f+0x2c>
 80039dc:	2400      	movs	r4, #0
 80039de:	3304      	adds	r3, #4
 80039e0:	0159      	lsls	r1, r3, #5
 80039e2:	d5f7      	bpl.n	80039d4 <__aeabi_d2f+0xc0>
 80039e4:	3401      	adds	r4, #1
 80039e6:	2300      	movs	r3, #0
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7a9      	b.n	8003940 <__aeabi_d2f+0x2c>
 80039ec:	2000      	movs	r0, #0
 80039ee:	2300      	movs	r3, #0
 80039f0:	e7a6      	b.n	8003940 <__aeabi_d2f+0x2c>
 80039f2:	4c08      	ldr	r4, [pc, #32]	@ (8003a14 <__aeabi_d2f+0x100>)
 80039f4:	191c      	adds	r4, r3, r4
 80039f6:	002b      	movs	r3, r5
 80039f8:	40a5      	lsls	r5, r4
 80039fa:	40c3      	lsrs	r3, r0
 80039fc:	40a1      	lsls	r1, r4
 80039fe:	1e68      	subs	r0, r5, #1
 8003a00:	4185      	sbcs	r5, r0
 8003a02:	4329      	orrs	r1, r5
 8003a04:	430b      	orrs	r3, r1
 8003a06:	e7d7      	b.n	80039b8 <__aeabi_d2f+0xa4>
 8003a08:	000007fe 	.word	0x000007fe
 8003a0c:	fffffc80 	.word	0xfffffc80
 8003a10:	fffffca2 	.word	0xfffffca2
 8003a14:	fffffc82 	.word	0xfffffc82

08003a18 <__clzsi2>:
 8003a18:	211c      	movs	r1, #28
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	4298      	cmp	r0, r3
 8003a20:	d301      	bcc.n	8003a26 <__clzsi2+0xe>
 8003a22:	0c00      	lsrs	r0, r0, #16
 8003a24:	3910      	subs	r1, #16
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	4298      	cmp	r0, r3
 8003a2a:	d301      	bcc.n	8003a30 <__clzsi2+0x18>
 8003a2c:	0a00      	lsrs	r0, r0, #8
 8003a2e:	3908      	subs	r1, #8
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	4298      	cmp	r0, r3
 8003a34:	d301      	bcc.n	8003a3a <__clzsi2+0x22>
 8003a36:	0900      	lsrs	r0, r0, #4
 8003a38:	3904      	subs	r1, #4
 8003a3a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a44 <__clzsi2+0x2c>)
 8003a3c:	5c10      	ldrb	r0, [r2, r0]
 8003a3e:	1840      	adds	r0, r0, r1
 8003a40:	4770      	bx	lr
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	02020304 	.word	0x02020304
 8003a48:	01010101 	.word	0x01010101
	...

08003a54 <__clzdi2>:
 8003a54:	b510      	push	{r4, lr}
 8003a56:	2900      	cmp	r1, #0
 8003a58:	d103      	bne.n	8003a62 <__clzdi2+0xe>
 8003a5a:	f7ff ffdd 	bl	8003a18 <__clzsi2>
 8003a5e:	3020      	adds	r0, #32
 8003a60:	e002      	b.n	8003a68 <__clzdi2+0x14>
 8003a62:	0008      	movs	r0, r1
 8003a64:	f7ff ffd8 	bl	8003a18 <__clzsi2>
 8003a68:	bd10      	pop	{r4, pc}
 8003a6a:	46c0      	nop			@ (mov r8, r8)

08003a6c <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003a6c:	b590      	push	{r4, r7, lr}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	0004      	movs	r4, r0
 8003a74:	0008      	movs	r0, r1
 8003a76:	0011      	movs	r1, r2
 8003a78:	1dbb      	adds	r3, r7, #6
 8003a7a:	1c22      	adds	r2, r4, #0
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	1c02      	adds	r2, r0, #0
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	1cbb      	adds	r3, r7, #2
 8003a86:	1c0a      	adds	r2, r1, #0
 8003a88:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	8818      	ldrh	r0, [r3, #0]
 8003a8e:	1dbb      	adds	r3, r7, #6
 8003a90:	8819      	ldrh	r1, [r3, #0]
 8003a92:	1cbb      	adds	r3, r7, #2
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	001a      	movs	r2, r3
 8003a98:	f000 fefe 	bl	8004898 <ST7735_DrawPixel>
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b003      	add	sp, #12
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	46c6      	mov	lr, r8
 8003aa8:	b500      	push	{lr}
 8003aaa:	b090      	sub	sp, #64	@ 0x40
 8003aac:	af04      	add	r7, sp, #16
 8003aae:	468c      	mov	ip, r1
 8003ab0:	0016      	movs	r6, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	221e      	movs	r2, #30
 8003ab6:	18ba      	adds	r2, r7, r2
 8003ab8:	1c03      	adds	r3, r0, #0
 8003aba:	8013      	strh	r3, [r2, #0]
 8003abc:	231c      	movs	r3, #28
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	4662      	mov	r2, ip
 8003ac2:	801a      	strh	r2, [r3, #0]
 8003ac4:	201a      	movs	r0, #26
 8003ac6:	183b      	adds	r3, r7, r0
 8003ac8:	1c32      	adds	r2, r6, #0
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	2018      	movs	r0, #24
 8003ace:	183b      	adds	r3, r7, r0
 8003ad0:	1c0a      	adds	r2, r1, #0
 8003ad2:	801a      	strh	r2, [r3, #0]
 8003ad4:	466b      	mov	r3, sp
 8003ad6:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8003ad8:	230c      	movs	r3, #12
 8003ada:	0001      	movs	r1, r0
 8003adc:	185e      	adds	r6, r3, r1
 8003ade:	19f2      	adds	r2, r6, r7
 8003ae0:	2030      	movs	r0, #48	@ 0x30
 8003ae2:	1846      	adds	r6, r0, r1
 8003ae4:	19f3      	adds	r3, r6, r7
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8003aea:	201a      	movs	r0, #26
 8003aec:	183b      	adds	r3, r7, r0
 8003aee:	2200      	movs	r2, #0
 8003af0:	5e9b      	ldrsh	r3, [r3, r2]
 8003af2:	187a      	adds	r2, r7, r1
 8003af4:	2000      	movs	r0, #0
 8003af6:	5e12      	ldrsh	r2, [r2, r0]
 8003af8:	4353      	muls	r3, r2
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003afe:	001a      	movs	r2, r3
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	60fa      	str	r2, [r7, #12]
 8003b06:	68b8      	ldr	r0, [r7, #8]
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	0ed2      	lsrs	r2, r2, #27
 8003b0e:	000e      	movs	r6, r1
 8003b10:	0176      	lsls	r6, r6, #5
 8003b12:	617e      	str	r6, [r7, #20]
 8003b14:	697e      	ldr	r6, [r7, #20]
 8003b16:	4316      	orrs	r6, r2
 8003b18:	617e      	str	r6, [r7, #20]
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	0152      	lsls	r2, r2, #5
 8003b1e:	613a      	str	r2, [r7, #16]
 8003b20:	001a      	movs	r2, r3
 8003b22:	603a      	str	r2, [r7, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	6838      	ldr	r0, [r7, #0]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	0ed2      	lsrs	r2, r2, #27
 8003b30:	000e      	movs	r6, r1
 8003b32:	0175      	lsls	r5, r6, #5
 8003b34:	4315      	orrs	r5, r2
 8003b36:	0002      	movs	r2, r0
 8003b38:	0154      	lsls	r4, r2, #5
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	3307      	adds	r3, #7
 8003b3e:	08db      	lsrs	r3, r3, #3
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	466a      	mov	r2, sp
 8003b44:	1ad2      	subs	r2, r2, r3
 8003b46:	4695      	mov	sp, r2
 8003b48:	ab04      	add	r3, sp, #16
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	2200      	movs	r2, #0
 8003b56:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8003b58:	201a      	movs	r0, #26
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	2118      	movs	r1, #24
 8003b60:	187a      	adds	r2, r7, r1
 8003b62:	8812      	ldrh	r2, [r2, #0]
 8003b64:	4353      	muls	r3, r2
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6a:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8003b6c:	221e      	movs	r2, #30
 8003b6e:	18bb      	adds	r3, r7, r2
 8003b70:	2200      	movs	r2, #0
 8003b72:	5e9c      	ldrsh	r4, [r3, r2]
 8003b74:	231c      	movs	r3, #28
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	5e9d      	ldrsh	r5, [r3, r2]
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	2200      	movs	r2, #0
 8003b80:	5e9b      	ldrsh	r3, [r3, r2]
 8003b82:	000e      	movs	r6, r1
 8003b84:	187a      	adds	r2, r7, r1
 8003b86:	2000      	movs	r0, #0
 8003b88:	5e12      	ldrsh	r2, [r2, r0]
 8003b8a:	210c      	movs	r1, #12
 8003b8c:	1989      	adds	r1, r1, r6
 8003b8e:	19c9      	adds	r1, r1, r7
 8003b90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b92:	2601      	movs	r6, #1
 8003b94:	46b4      	mov	ip, r6
 8003b96:	4666      	mov	r6, ip
 8003b98:	9602      	str	r6, [sp, #8]
 8003b9a:	9201      	str	r2, [sp, #4]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	002b      	movs	r3, r5
 8003ba0:	0022      	movs	r2, r4
 8003ba2:	f000 fbc5 	bl	8004330 <drawImage>
 8003ba6:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b00c      	add	sp, #48	@ 0x30
 8003bae:	bc80      	pop	{r7}
 8003bb0:	46b8      	mov	r8, r7
 8003bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb4 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	0004      	movs	r4, r0
 8003bbc:	0008      	movs	r0, r1
 8003bbe:	0011      	movs	r1, r2
 8003bc0:	1dbb      	adds	r3, r7, #6
 8003bc2:	1c22      	adds	r2, r4, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	1c02      	adds	r2, r0, #0
 8003bca:	801a      	strh	r2, [r3, #0]
 8003bcc:	1cbb      	adds	r3, r7, #2
 8003bce:	1c0a      	adds	r2, r1, #0
 8003bd0:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003bd2:	1cbb      	adds	r3, r7, #2
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5e59      	ldrsh	r1, [r3, r1]
 8003bdc:	1dbb      	adds	r3, r7, #6
 8003bde:	2000      	movs	r0, #0
 8003be0:	5e1b      	ldrsh	r3, [r3, r0]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7ff ff42 	bl	8003a6c <drawPixel>
}
 8003be8:	46c0      	nop			@ (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b003      	add	sp, #12
 8003bee:	bd90      	pop	{r4, r7, pc}

08003bf0 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003bf0:	b5b0      	push	{r4, r5, r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0005      	movs	r5, r0
 8003bf8:	000c      	movs	r4, r1
 8003bfa:	0010      	movs	r0, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	1dbb      	adds	r3, r7, #6
 8003c00:	1c2a      	adds	r2, r5, #0
 8003c02:	801a      	strh	r2, [r3, #0]
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	1c22      	adds	r2, r4, #0
 8003c08:	801a      	strh	r2, [r3, #0]
 8003c0a:	1cbb      	adds	r3, r7, #2
 8003c0c:	1c02      	adds	r2, r0, #0
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	003b      	movs	r3, r7
 8003c12:	1c0a      	adds	r2, r1, #0
 8003c14:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003c16:	003b      	movs	r3, r7
 8003c18:	2200      	movs	r2, #0
 8003c1a:	5e9a      	ldrsh	r2, [r3, r2]
 8003c1c:	1d3b      	adds	r3, r7, #4
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5e5b      	ldrsh	r3, [r3, r1]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	17d9      	asrs	r1, r3, #31
 8003c26:	185a      	adds	r2, r3, r1
 8003c28:	404a      	eors	r2, r1
 8003c2a:	1cbb      	adds	r3, r7, #2
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5e59      	ldrsh	r1, [r3, r1]
 8003c30:	1dbb      	adds	r3, r7, #6
 8003c32:	2000      	movs	r0, #0
 8003c34:	5e1b      	ldrsh	r3, [r3, r0]
 8003c36:	1acb      	subs	r3, r1, r3
 8003c38:	17d9      	asrs	r1, r3, #31
 8003c3a:	185b      	adds	r3, r3, r1
 8003c3c:	404b      	eors	r3, r1
 8003c3e:	2101      	movs	r1, #1
 8003c40:	429a      	cmp	r2, r3
 8003c42:	dc01      	bgt.n	8003c48 <writeLine+0x58>
 8003c44:	2300      	movs	r3, #0
 8003c46:	1c19      	adds	r1, r3, #0
 8003c48:	b2ca      	uxtb	r2, r1
 8003c4a:	211a      	movs	r1, #26
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003c50:	187b      	adds	r3, r7, r1
 8003c52:	2200      	movs	r2, #0
 8003c54:	5e9b      	ldrsh	r3, [r3, r2]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d019      	beq.n	8003c8e <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8003c5a:	2118      	movs	r1, #24
 8003c5c:	187b      	adds	r3, r7, r1
 8003c5e:	1dba      	adds	r2, r7, #6
 8003c60:	8812      	ldrh	r2, [r2, #0]
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	1dbb      	adds	r3, r7, #6
 8003c66:	1d3a      	adds	r2, r7, #4
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	1d3b      	adds	r3, r7, #4
 8003c6e:	187a      	adds	r2, r7, r1
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8003c74:	2116      	movs	r1, #22
 8003c76:	187b      	adds	r3, r7, r1
 8003c78:	1cba      	adds	r2, r7, #2
 8003c7a:	8812      	ldrh	r2, [r2, #0]
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	1cbb      	adds	r3, r7, #2
 8003c80:	003a      	movs	r2, r7
 8003c82:	8812      	ldrh	r2, [r2, #0]
 8003c84:	801a      	strh	r2, [r3, #0]
 8003c86:	003b      	movs	r3, r7
 8003c88:	187a      	adds	r2, r7, r1
 8003c8a:	8812      	ldrh	r2, [r2, #0]
 8003c8c:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003c8e:	1dba      	adds	r2, r7, #6
 8003c90:	1cbb      	adds	r3, r7, #2
 8003c92:	2100      	movs	r1, #0
 8003c94:	5e52      	ldrsh	r2, [r2, r1]
 8003c96:	2100      	movs	r1, #0
 8003c98:	5e5b      	ldrsh	r3, [r3, r1]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	dd19      	ble.n	8003cd2 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8003c9e:	2114      	movs	r1, #20
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	1dba      	adds	r2, r7, #6
 8003ca4:	8812      	ldrh	r2, [r2, #0]
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	1dbb      	adds	r3, r7, #6
 8003caa:	1cba      	adds	r2, r7, #2
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	1cbb      	adds	r3, r7, #2
 8003cb2:	187a      	adds	r2, r7, r1
 8003cb4:	8812      	ldrh	r2, [r2, #0]
 8003cb6:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8003cb8:	2112      	movs	r1, #18
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	1d3a      	adds	r2, r7, #4
 8003cbe:	8812      	ldrh	r2, [r2, #0]
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	003a      	movs	r2, r7
 8003cc6:	8812      	ldrh	r2, [r2, #0]
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	003b      	movs	r3, r7
 8003ccc:	187a      	adds	r2, r7, r1
 8003cce:	8812      	ldrh	r2, [r2, #0]
 8003cd0:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003cd2:	1cbb      	adds	r3, r7, #2
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	1dbb      	adds	r3, r7, #6
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	2010      	movs	r0, #16
 8003ce0:	183b      	adds	r3, r7, r0
 8003ce2:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8003ce4:	003b      	movs	r3, r7
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	5e9a      	ldrsh	r2, [r3, r2]
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	2100      	movs	r1, #0
 8003cee:	5e5b      	ldrsh	r3, [r3, r1]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	17d9      	asrs	r1, r3, #31
 8003cf4:	185a      	adds	r2, r3, r1
 8003cf6:	404a      	eors	r2, r1
 8003cf8:	230e      	movs	r3, #14
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8003cfe:	231e      	movs	r3, #30
 8003d00:	18fa      	adds	r2, r7, r3
 8003d02:	183b      	adds	r3, r7, r0
 8003d04:	2100      	movs	r1, #0
 8003d06:	5e5b      	ldrsh	r3, [r3, r1]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	da00      	bge.n	8003d0e <writeLine+0x11e>
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	105b      	asrs	r3, r3, #1
 8003d10:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8003d12:	1d3a      	adds	r2, r7, #4
 8003d14:	003b      	movs	r3, r7
 8003d16:	2100      	movs	r1, #0
 8003d18:	5e52      	ldrsh	r2, [r2, r1]
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	5e5b      	ldrsh	r3, [r3, r1]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	da04      	bge.n	8003d2c <writeLine+0x13c>
        ystep = 1;
 8003d22:	231c      	movs	r3, #28
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	2201      	movs	r2, #1
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	e04d      	b.n	8003dc8 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003d2c:	231c      	movs	r3, #28
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2201      	movs	r2, #1
 8003d32:	4252      	negs	r2, r2
 8003d34:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8003d36:	e047      	b.n	8003dc8 <writeLine+0x1d8>
        if (steep) {
 8003d38:	231a      	movs	r3, #26
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	5e9b      	ldrsh	r3, [r3, r2]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003d44:	2330      	movs	r3, #48	@ 0x30
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	1dbb      	adds	r3, r7, #6
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5e59      	ldrsh	r1, [r3, r1]
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	2000      	movs	r0, #0
 8003d54:	5e1b      	ldrsh	r3, [r3, r0]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7ff ff2c 	bl	8003bb4 <writePixel>
 8003d5c:	e00b      	b.n	8003d76 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8003d5e:	2330      	movs	r3, #48	@ 0x30
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	2100      	movs	r1, #0
 8003d68:	5e59      	ldrsh	r1, [r3, r1]
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	5e1b      	ldrsh	r3, [r3, r0]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff ff1f 	bl	8003bb4 <writePixel>
        }
        err -= dy;
 8003d76:	211e      	movs	r1, #30
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	881a      	ldrh	r2, [r3, #0]
 8003d7c:	230e      	movs	r3, #14
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	187b      	adds	r3, r7, r1
 8003d88:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	5e9b      	ldrsh	r3, [r3, r2]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	da11      	bge.n	8003db8 <writeLine+0x1c8>
            y0 += ystep;
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	881a      	ldrh	r2, [r3, #0]
 8003d98:	231c      	movs	r3, #28
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	18d3      	adds	r3, r2, r3
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	2310      	movs	r3, #16
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	18d3      	adds	r3, r2, r3
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003db8:	1dbb      	adds	r3, r7, #6
 8003dba:	2200      	movs	r2, #0
 8003dbc:	5e9b      	ldrsh	r3, [r3, r2]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	1dbb      	adds	r3, r7, #6
 8003dc6:	801a      	strh	r2, [r3, #0]
 8003dc8:	1dba      	adds	r2, r7, #6
 8003dca:	1cbb      	adds	r3, r7, #2
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5e52      	ldrsh	r2, [r2, r1]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5e5b      	ldrsh	r3, [r3, r1]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	ddaf      	ble.n	8003d38 <writeLine+0x148>
        }
    }
}
 8003dd8:	46c0      	nop			@ (mov r8, r8)
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b008      	add	sp, #32
 8003de0:	bdb0      	pop	{r4, r5, r7, pc}

08003de2 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003de2:	b5b0      	push	{r4, r5, r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af02      	add	r7, sp, #8
 8003de8:	0005      	movs	r5, r0
 8003dea:	000c      	movs	r4, r1
 8003dec:	0010      	movs	r0, r2
 8003dee:	0019      	movs	r1, r3
 8003df0:	1dbb      	adds	r3, r7, #6
 8003df2:	1c2a      	adds	r2, r5, #0
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	1d3b      	adds	r3, r7, #4
 8003df8:	1c22      	adds	r2, r4, #0
 8003dfa:	801a      	strh	r2, [r3, #0]
 8003dfc:	1cbb      	adds	r3, r7, #2
 8003dfe:	1c02      	adds	r2, r0, #0
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	003b      	movs	r3, r7
 8003e04:	1c0a      	adds	r2, r1, #0
 8003e06:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	1cbb      	adds	r3, r7, #2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	b21c      	sxth	r4, r3
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	5e9a      	ldrsh	r2, [r3, r2]
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	2100      	movs	r1, #0
 8003e24:	5e59      	ldrsh	r1, [r3, r1]
 8003e26:	1dbb      	adds	r3, r7, #6
 8003e28:	2000      	movs	r0, #0
 8003e2a:	5e18      	ldrsh	r0, [r3, r0]
 8003e2c:	003b      	movs	r3, r7
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	0023      	movs	r3, r4
 8003e34:	f7ff fedc 	bl	8003bf0 <writeLine>
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b002      	add	sp, #8
 8003e3e:	bdb0      	pop	{r4, r5, r7, pc}

08003e40 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	0005      	movs	r5, r0
 8003e48:	000c      	movs	r4, r1
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	1dbb      	adds	r3, r7, #6
 8003e50:	1c2a      	adds	r2, r5, #0
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	1c22      	adds	r2, r4, #0
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	1cbb      	adds	r3, r7, #2
 8003e5c:	1c02      	adds	r2, r0, #0
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	003b      	movs	r3, r7
 8003e62:	1c0a      	adds	r2, r1, #0
 8003e64:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003e66:	1dbb      	adds	r3, r7, #6
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	1cbb      	adds	r3, r7, #2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	18d3      	adds	r3, r2, r3
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	b21a      	sxth	r2, r3
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	2400      	movs	r4, #0
 8003e7c:	5f1c      	ldrsh	r4, [r3, r4]
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	2100      	movs	r1, #0
 8003e82:	5e59      	ldrsh	r1, [r3, r1]
 8003e84:	1dbb      	adds	r3, r7, #6
 8003e86:	2000      	movs	r0, #0
 8003e88:	5e18      	ldrsh	r0, [r3, r0]
 8003e8a:	003b      	movs	r3, r7
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	0023      	movs	r3, r4
 8003e92:	f7ff fead 	bl	8003bf0 <writeLine>
}
 8003e96:	46c0      	nop			@ (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b002      	add	sp, #8
 8003e9c:	bdb0      	pop	{r4, r5, r7, pc}

08003e9e <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003e9e:	b5b0      	push	{r4, r5, r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af02      	add	r7, sp, #8
 8003ea4:	0005      	movs	r5, r0
 8003ea6:	000c      	movs	r4, r1
 8003ea8:	0010      	movs	r0, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	1dbb      	adds	r3, r7, #6
 8003eae:	1c2a      	adds	r2, r5, #0
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	1c22      	adds	r2, r4, #0
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	1cbb      	adds	r3, r7, #2
 8003eba:	1c02      	adds	r2, r0, #0
 8003ebc:	801a      	strh	r2, [r3, #0]
 8003ebe:	003b      	movs	r3, r7
 8003ec0:	1c0a      	adds	r2, r1, #0
 8003ec2:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003ec4:	1dba      	adds	r2, r7, #6
 8003ec6:	1cbb      	adds	r3, r7, #2
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5e52      	ldrsh	r2, [r2, r1]
 8003ecc:	2100      	movs	r1, #0
 8003ece:	5e5b      	ldrsh	r3, [r3, r1]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d12a      	bne.n	8003f2a <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003ed4:	1d3a      	adds	r2, r7, #4
 8003ed6:	003b      	movs	r3, r7
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5e52      	ldrsh	r2, [r2, r1]
 8003edc:	2100      	movs	r1, #0
 8003ede:	5e5b      	ldrsh	r3, [r3, r1]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	dd0c      	ble.n	8003efe <drawLine+0x60>
 8003ee4:	210c      	movs	r1, #12
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	1d3a      	adds	r2, r7, #4
 8003eea:	8812      	ldrh	r2, [r2, #0]
 8003eec:	801a      	strh	r2, [r3, #0]
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	003a      	movs	r2, r7
 8003ef2:	8812      	ldrh	r2, [r2, #0]
 8003ef4:	801a      	strh	r2, [r3, #0]
 8003ef6:	003b      	movs	r3, r7
 8003ef8:	187a      	adds	r2, r7, r1
 8003efa:	8812      	ldrh	r2, [r2, #0]
 8003efc:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003efe:	003b      	movs	r3, r7
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	1d3b      	adds	r3, r7, #4
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b21a      	sxth	r2, r3
 8003f10:	2320      	movs	r3, #32
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	881c      	ldrh	r4, [r3, #0]
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5e59      	ldrsh	r1, [r3, r1]
 8003f1c:	1dbb      	adds	r3, r7, #6
 8003f1e:	2000      	movs	r0, #0
 8003f20:	5e18      	ldrsh	r0, [r3, r0]
 8003f22:	0023      	movs	r3, r4
 8003f24:	f7ff ff5d 	bl	8003de2 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003f28:	e045      	b.n	8003fb6 <drawLine+0x118>
    } else if(y0 == y1){
 8003f2a:	1d3a      	adds	r2, r7, #4
 8003f2c:	003b      	movs	r3, r7
 8003f2e:	2100      	movs	r1, #0
 8003f30:	5e52      	ldrsh	r2, [r2, r1]
 8003f32:	2100      	movs	r1, #0
 8003f34:	5e5b      	ldrsh	r3, [r3, r1]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d12a      	bne.n	8003f90 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003f3a:	1dba      	adds	r2, r7, #6
 8003f3c:	1cbb      	adds	r3, r7, #2
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5e52      	ldrsh	r2, [r2, r1]
 8003f42:	2100      	movs	r1, #0
 8003f44:	5e5b      	ldrsh	r3, [r3, r1]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	dd0c      	ble.n	8003f64 <drawLine+0xc6>
 8003f4a:	210e      	movs	r1, #14
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	1dba      	adds	r2, r7, #6
 8003f50:	8812      	ldrh	r2, [r2, #0]
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	1dbb      	adds	r3, r7, #6
 8003f56:	1cba      	adds	r2, r7, #2
 8003f58:	8812      	ldrh	r2, [r2, #0]
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	1cbb      	adds	r3, r7, #2
 8003f5e:	187a      	adds	r2, r7, r1
 8003f60:	8812      	ldrh	r2, [r2, #0]
 8003f62:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003f64:	1cbb      	adds	r3, r7, #2
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	1dbb      	adds	r3, r7, #6
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b21a      	sxth	r2, r3
 8003f76:	2320      	movs	r3, #32
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	881c      	ldrh	r4, [r3, #0]
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	2100      	movs	r1, #0
 8003f80:	5e59      	ldrsh	r1, [r3, r1]
 8003f82:	1dbb      	adds	r3, r7, #6
 8003f84:	2000      	movs	r0, #0
 8003f86:	5e18      	ldrsh	r0, [r3, r0]
 8003f88:	0023      	movs	r3, r4
 8003f8a:	f7ff ff59 	bl	8003e40 <drawFastHLine>
}
 8003f8e:	e012      	b.n	8003fb6 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003f90:	003b      	movs	r3, r7
 8003f92:	2400      	movs	r4, #0
 8003f94:	5f1c      	ldrsh	r4, [r3, r4]
 8003f96:	1cbb      	adds	r3, r7, #2
 8003f98:	2200      	movs	r2, #0
 8003f9a:	5e9a      	ldrsh	r2, [r3, r2]
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5e59      	ldrsh	r1, [r3, r1]
 8003fa2:	1dbb      	adds	r3, r7, #6
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	5e18      	ldrsh	r0, [r3, r0]
 8003fa8:	2320      	movs	r3, #32
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	0023      	movs	r3, r4
 8003fb2:	f7ff fe1d 	bl	8003bf0 <writeLine>
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b004      	add	sp, #16
 8003fbc:	bdb0      	pop	{r4, r5, r7, pc}

08003fbe <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc0:	b089      	sub	sp, #36	@ 0x24
 8003fc2:	af02      	add	r7, sp, #8
 8003fc4:	0004      	movs	r4, r0
 8003fc6:	0008      	movs	r0, r1
 8003fc8:	60ba      	str	r2, [r7, #8]
 8003fca:	0019      	movs	r1, r3
 8003fcc:	230e      	movs	r3, #14
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	1c22      	adds	r2, r4, #0
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	230c      	movs	r3, #12
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	1c02      	adds	r2, r0, #0
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	1dbb      	adds	r3, r7, #6
 8003fde:	1c0a      	adds	r2, r1, #0
 8003fe0:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003fe2:	2316      	movs	r3, #22
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003fea:	e03f      	b.n	800406c <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003fec:	2516      	movs	r5, #22
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	18d3      	adds	r3, r2, r3
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	469c      	mov	ip, r3
 8003ffa:	1dbb      	adds	r3, r7, #6
 8003ffc:	2400      	movs	r4, #0
 8003ffe:	5f1c      	ldrsh	r4, [r3, r4]
 8004000:	230c      	movs	r3, #12
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2100      	movs	r1, #0
 8004006:	5e59      	ldrsh	r1, [r3, r1]
 8004008:	260e      	movs	r6, #14
 800400a:	19bb      	adds	r3, r7, r6
 800400c:	2000      	movs	r0, #0
 800400e:	5e18      	ldrsh	r0, [r3, r0]
 8004010:	232c      	movs	r3, #44	@ 0x2c
 8004012:	2208      	movs	r2, #8
 8004014:	189b      	adds	r3, r3, r2
 8004016:	19db      	adds	r3, r3, r7
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	2328      	movs	r3, #40	@ 0x28
 800401e:	189b      	adds	r3, r3, r2
 8004020:	19db      	adds	r3, r3, r7
 8004022:	2200      	movs	r2, #0
 8004024:	5e9b      	ldrsh	r3, [r3, r2]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	0023      	movs	r3, r4
 800402a:	4662      	mov	r2, ip
 800402c:	f000 f82c 	bl	8004088 <drawChar>
		x+=(size*6)+spacing;
 8004030:	232c      	movs	r3, #44	@ 0x2c
 8004032:	2108      	movs	r1, #8
 8004034:	185b      	adds	r3, r3, r1
 8004036:	19db      	adds	r3, r3, r7
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	1c1a      	adds	r2, r3, #0
 800403e:	1c13      	adds	r3, r2, #0
 8004040:	18db      	adds	r3, r3, r3
 8004042:	189b      	adds	r3, r3, r2
 8004044:	18db      	adds	r3, r3, r3
 8004046:	b29a      	uxth	r2, r3
 8004048:	2330      	movs	r3, #48	@ 0x30
 800404a:	185b      	adds	r3, r3, r1
 800404c:	19db      	adds	r3, r3, r7
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	18d3      	adds	r3, r2, r3
 8004054:	b29a      	uxth	r2, r3
 8004056:	19bb      	adds	r3, r7, r6
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	18d3      	adds	r3, r2, r3
 800405c:	b29a      	uxth	r2, r3
 800405e:	19bb      	adds	r3, r7, r6
 8004060:	801a      	strh	r2, [r3, #0]
		i++;
 8004062:	197b      	adds	r3, r7, r5
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	197b      	adds	r3, r7, r5
 8004068:	3201      	adds	r2, #1
 800406a:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800406c:	2316      	movs	r3, #22
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	881b      	ldrh	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1b7      	bne.n	8003fec <drawString+0x2e>
	}
}
 800407c:	46c0      	nop			@ (mov r8, r8)
 800407e:	46c0      	nop			@ (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	b007      	add	sp, #28
 8004084:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004088 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af02      	add	r7, sp, #8
 800408e:	0005      	movs	r5, r0
 8004090:	000c      	movs	r4, r1
 8004092:	0010      	movs	r0, r2
 8004094:	0019      	movs	r1, r3
 8004096:	1dbb      	adds	r3, r7, #6
 8004098:	1c2a      	adds	r2, r5, #0
 800409a:	801a      	strh	r2, [r3, #0]
 800409c:	1d3b      	adds	r3, r7, #4
 800409e:	1c22      	adds	r2, r4, #0
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	1cfb      	adds	r3, r7, #3
 80040a4:	1c02      	adds	r2, r0, #0
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	003b      	movs	r3, r7
 80040aa:	1c0a      	adds	r2, r1, #0
 80040ac:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	e0bd      	b.n	8004230 <drawChar+0x1a8>
    if ((i) == 5)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d104      	bne.n	80040c4 <drawChar+0x3c>
      line = 0x0;
 80040ba:	2317      	movs	r3, #23
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e00b      	b.n	80040dc <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 80040c4:	1cfb      	adds	r3, r7, #3
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	0013      	movs	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	189a      	adds	r2, r3, r2
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	18d2      	adds	r2, r2, r3
 80040d2:	2317      	movs	r3, #23
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	495b      	ldr	r1, [pc, #364]	@ (8004244 <drawChar+0x1bc>)
 80040d8:	5c8a      	ldrb	r2, [r1, r2]
 80040da:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e09f      	b.n	8004222 <drawChar+0x19a>
      if (line & 0x1) {
 80040e2:	2317      	movs	r3, #23
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d043      	beq.n	8004176 <drawChar+0xee>
        if (size == 1)
 80040ee:	232c      	movs	r3, #44	@ 0x2c
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d115      	bne.n	8004124 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	1dbb      	adds	r3, r7, #6
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	b29b      	uxth	r3, r3
 8004104:	b218      	sxth	r0, r3
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	b29b      	uxth	r3, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	b29b      	uxth	r3, r3
 8004112:	3307      	adds	r3, #7
 8004114:	b29b      	uxth	r3, r3
 8004116:	b219      	sxth	r1, r3
 8004118:	003b      	movs	r3, r7
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	001a      	movs	r2, r3
 800411e:	f7ff fd49 	bl	8003bb4 <writePixel>
 8004122:	e075      	b.n	8004210 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8004124:	212c      	movs	r1, #44	@ 0x2c
 8004126:	187b      	adds	r3, r7, r1
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	b292      	uxth	r2, r2
 8004130:	4353      	muls	r3, r2
 8004132:	b29a      	uxth	r2, r3
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	b29b      	uxth	r3, r3
 800413c:	b218      	sxth	r0, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2207      	movs	r2, #7
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	b29b      	uxth	r3, r3
 8004146:	000c      	movs	r4, r1
 8004148:	187a      	adds	r2, r7, r1
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	b292      	uxth	r2, r2
 800414e:	4353      	muls	r3, r2
 8004150:	b29a      	uxth	r2, r3
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	18d3      	adds	r3, r2, r3
 8004158:	b29b      	uxth	r3, r3
 800415a:	b219      	sxth	r1, r3
 800415c:	193b      	adds	r3, r7, r4
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b21a      	sxth	r2, r3
 8004162:	193b      	adds	r3, r7, r4
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b21c      	sxth	r4, r3
 8004168:	003b      	movs	r3, r7
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	0023      	movs	r3, r4
 8004170:	f7ff fc98 	bl	8003aa4 <fillRect>
 8004174:	e04c      	b.n	8004210 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8004176:	2428      	movs	r4, #40	@ 0x28
 8004178:	193b      	adds	r3, r7, r4
 800417a:	0039      	movs	r1, r7
 800417c:	2200      	movs	r2, #0
 800417e:	5e9a      	ldrsh	r2, [r3, r2]
 8004180:	2300      	movs	r3, #0
 8004182:	5ecb      	ldrsh	r3, [r1, r3]
 8004184:	429a      	cmp	r2, r3
 8004186:	d043      	beq.n	8004210 <drawChar+0x188>
        if (size == 1) // default size
 8004188:	232c      	movs	r3, #44	@ 0x2c
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d115      	bne.n	80041be <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	b29a      	uxth	r2, r3
 8004196:	1dbb      	adds	r3, r7, #6
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	18d3      	adds	r3, r2, r3
 800419c:	b29b      	uxth	r3, r3
 800419e:	b218      	sxth	r0, r3
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	881a      	ldrh	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3307      	adds	r3, #7
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	b219      	sxth	r1, r3
 80041b2:	193b      	adds	r3, r7, r4
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	001a      	movs	r2, r3
 80041b8:	f7ff fcfc 	bl	8003bb4 <writePixel>
 80041bc:	e028      	b.n	8004210 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 80041be:	212c      	movs	r1, #44	@ 0x2c
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	b292      	uxth	r2, r2
 80041ca:	4353      	muls	r3, r2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	1dbb      	adds	r3, r7, #6
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	18d3      	adds	r3, r2, r3
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	b218      	sxth	r0, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2207      	movs	r2, #7
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	b29b      	uxth	r3, r3
 80041e0:	000c      	movs	r4, r1
 80041e2:	187a      	adds	r2, r7, r1
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	b292      	uxth	r2, r2
 80041e8:	4353      	muls	r3, r2
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	1d3b      	adds	r3, r7, #4
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	b219      	sxth	r1, r3
 80041f6:	193b      	adds	r3, r7, r4
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b21a      	sxth	r2, r3
 80041fc:	193b      	adds	r3, r7, r4
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b21c      	sxth	r4, r3
 8004202:	2328      	movs	r3, #40	@ 0x28
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	0023      	movs	r3, r4
 800420c:	f7ff fc4a 	bl	8003aa4 <fillRect>
        }
      }
      line >>= 1;
 8004210:	2217      	movs	r2, #23
 8004212:	18bb      	adds	r3, r7, r2
 8004214:	18ba      	adds	r2, r7, r2
 8004216:	7812      	ldrb	r2, [r2, #0]
 8004218:	0852      	lsrs	r2, r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b07      	cmp	r3, #7
 8004226:	dc00      	bgt.n	800422a <drawChar+0x1a2>
 8004228:	e75b      	b.n	80040e2 <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b05      	cmp	r3, #5
 8004234:	dc00      	bgt.n	8004238 <drawChar+0x1b0>
 8004236:	e73d      	b.n	80040b4 <drawChar+0x2c>
    }
  }
}
 8004238:	46c0      	nop			@ (mov r8, r8)
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	46bd      	mov	sp, r7
 800423e:	b006      	add	sp, #24
 8004240:	bdb0      	pop	{r4, r5, r7, pc}
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	080119e4 	.word	0x080119e4

08004248 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8004248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424a:	b091      	sub	sp, #68	@ 0x44
 800424c:	af04      	add	r7, sp, #16
 800424e:	231e      	movs	r3, #30
 8004250:	18f9      	adds	r1, r7, r3
 8004252:	8008      	strh	r0, [r1, #0]
 8004254:	4669      	mov	r1, sp
 8004256:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8004258:	210c      	movs	r1, #12
 800425a:	2318      	movs	r3, #24
 800425c:	18cb      	adds	r3, r1, r3
 800425e:	19d9      	adds	r1, r3, r7
 8004260:	231e      	movs	r3, #30
 8004262:	18f8      	adds	r0, r7, r3
 8004264:	8800      	ldrh	r0, [r0, #0]
 8004266:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8004268:	492f      	ldr	r1, [pc, #188]	@ (8004328 <fillScreen+0xe0>)
 800426a:	2300      	movs	r3, #0
 800426c:	5ec9      	ldrsh	r1, [r1, r3]
 800426e:	0008      	movs	r0, r1
 8004270:	492e      	ldr	r1, [pc, #184]	@ (800432c <fillScreen+0xe4>)
 8004272:	2300      	movs	r3, #0
 8004274:	5ec9      	ldrsh	r1, [r1, r3]
 8004276:	4341      	muls	r1, r0
 8004278:	1e48      	subs	r0, r1, #1
 800427a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800427c:	0008      	movs	r0, r1
 800427e:	6138      	str	r0, [r7, #16]
 8004280:	2000      	movs	r0, #0
 8004282:	6178      	str	r0, [r7, #20]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	0010      	movs	r0, r2
 800428a:	0ec0      	lsrs	r0, r0, #27
 800428c:	613a      	str	r2, [r7, #16]
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	015d      	lsls	r5, r3, #5
 8004292:	4305      	orrs	r5, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015c      	lsls	r4, r3, #5
 8004298:	0008      	movs	r0, r1
 800429a:	6038      	str	r0, [r7, #0]
 800429c:	2000      	movs	r0, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	683c      	ldr	r4, [r7, #0]
 80042a2:	687d      	ldr	r5, [r7, #4]
 80042a4:	0023      	movs	r3, r4
 80042a6:	0ed8      	lsrs	r0, r3, #27
 80042a8:	002b      	movs	r3, r5
 80042aa:	015b      	lsls	r3, r3, #5
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4303      	orrs	r3, r0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	0023      	movs	r3, r4
 80042b6:	015b      	lsls	r3, r3, #5
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	000b      	movs	r3, r1
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	3307      	adds	r3, #7
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	466a      	mov	r2, sp
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	469d      	mov	sp, r3
 80042ca:	ab04      	add	r3, sp, #16
 80042cc:	3301      	adds	r3, #1
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	2200      	movs	r2, #0
 80042d8:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 80042da:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <fillScreen+0xe0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	5e9b      	ldrsh	r3, [r3, r2]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4a12      	ldr	r2, [pc, #72]	@ (800432c <fillScreen+0xe4>)
 80042e4:	2000      	movs	r0, #0
 80042e6:	5e12      	ldrsh	r2, [r2, r0]
 80042e8:	b292      	uxth	r2, r2
 80042ea:	4353      	muls	r3, r2
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <fillScreen+0xe0>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	5e9b      	ldrsh	r3, [r3, r2]
 80042f8:	001a      	movs	r2, r3
 80042fa:	4b0c      	ldr	r3, [pc, #48]	@ (800432c <fillScreen+0xe4>)
 80042fc:	2000      	movs	r0, #0
 80042fe:	5e1b      	ldrsh	r3, [r3, r0]
 8004300:	001c      	movs	r4, r3
 8004302:	210c      	movs	r1, #12
 8004304:	2318      	movs	r3, #24
 8004306:	18cb      	adds	r3, r1, r3
 8004308:	19d9      	adds	r1, r3, r7
 800430a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800430c:	2301      	movs	r3, #1
 800430e:	9302      	str	r3, [sp, #8]
 8004310:	9401      	str	r4, [sp, #4]
 8004312:	9200      	str	r2, [sp, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	2200      	movs	r2, #0
 8004318:	f000 f80a 	bl	8004330 <drawImage>
 800431c:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b00d      	add	sp, #52	@ 0x34
 8004324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	2000027c 	.word	0x2000027c
 800432c:	2000027e 	.word	0x2000027e

08004330 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8004330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004332:	46c6      	mov	lr, r8
 8004334:	b500      	push	{lr}
 8004336:	b092      	sub	sp, #72	@ 0x48
 8004338:	af02      	add	r7, sp, #8
 800433a:	6278      	str	r0, [r7, #36]	@ 0x24
 800433c:	6239      	str	r1, [r7, #32]
 800433e:	0019      	movs	r1, r3
 8004340:	231e      	movs	r3, #30
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	231c      	movs	r3, #28
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	1c0a      	adds	r2, r1, #0
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	466b      	mov	r3, sp
 8004350:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8004352:	2322      	movs	r3, #34	@ 0x22
 8004354:	2118      	movs	r1, #24
 8004356:	185b      	adds	r3, r3, r1
 8004358:	19db      	adds	r3, r3, r7
 800435a:	2200      	movs	r2, #0
 800435c:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t pixelBuffer[w*h];
 800435e:	2340      	movs	r3, #64	@ 0x40
 8004360:	185b      	adds	r3, r3, r1
 8004362:	19db      	adds	r3, r3, r7
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	2244      	movs	r2, #68	@ 0x44
 8004368:	1852      	adds	r2, r2, r1
 800436a:	19d2      	adds	r2, r2, r7
 800436c:	8812      	ldrh	r2, [r2, #0]
 800436e:	4353      	muls	r3, r2
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	637a      	str	r2, [r7, #52]	@ 0x34
 8004374:	001a      	movs	r2, r3
 8004376:	60ba      	str	r2, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	60fa      	str	r2, [r7, #12]
 800437c:	68b8      	ldr	r0, [r7, #8]
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	0002      	movs	r2, r0
 8004382:	0f12      	lsrs	r2, r2, #28
 8004384:	000e      	movs	r6, r1
 8004386:	0136      	lsls	r6, r6, #4
 8004388:	617e      	str	r6, [r7, #20]
 800438a:	697e      	ldr	r6, [r7, #20]
 800438c:	4316      	orrs	r6, r2
 800438e:	617e      	str	r6, [r7, #20]
 8004390:	0002      	movs	r2, r0
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	613a      	str	r2, [r7, #16]
 8004396:	001a      	movs	r2, r3
 8004398:	603a      	str	r2, [r7, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	6838      	ldr	r0, [r7, #0]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	0002      	movs	r2, r0
 80043a4:	0f12      	lsrs	r2, r2, #28
 80043a6:	000e      	movs	r6, r1
 80043a8:	0135      	lsls	r5, r6, #4
 80043aa:	4315      	orrs	r5, r2
 80043ac:	0002      	movs	r2, r0
 80043ae:	0114      	lsls	r4, r2, #4
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	3307      	adds	r3, #7
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	466a      	mov	r2, sp
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	469d      	mov	sp, r3
 80043be:	ab02      	add	r3, sp, #8
 80043c0:	3301      	adds	r3, #1
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30

for(i=0; i<c; i++)
 80043c8:	2326      	movs	r3, #38	@ 0x26
 80043ca:	2118      	movs	r1, #24
 80043cc:	185b      	adds	r3, r3, r1
 80043ce:	19db      	adds	r3, r3, r7
 80043d0:	2200      	movs	r2, #0
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	e05e      	b.n	8004494 <drawImage+0x164>
{
	ind = image[i][0];
 80043d6:	2126      	movs	r1, #38	@ 0x26
 80043d8:	2018      	movs	r0, #24
 80043da:	180b      	adds	r3, r1, r0
 80043dc:	19db      	adds	r3, r3, r7
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e4:	18d2      	adds	r2, r2, r3
 80043e6:	2316      	movs	r3, #22
 80043e8:	181b      	adds	r3, r3, r0
 80043ea:	19db      	adds	r3, r3, r7
 80043ec:	8812      	ldrh	r2, [r2, #0]
 80043ee:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 80043f0:	180b      	adds	r3, r1, r0
 80043f2:	19db      	adds	r3, r3, r7
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043fa:	18d2      	adds	r2, r2, r3
 80043fc:	2314      	movs	r3, #20
 80043fe:	181b      	adds	r3, r3, r0
 8004400:	19db      	adds	r3, r3, r7
 8004402:	8852      	ldrh	r2, [r2, #2]
 8004404:	801a      	strh	r2, [r3, #0]

	for(j=0; j<count; j++)
 8004406:	2324      	movs	r3, #36	@ 0x24
 8004408:	181b      	adds	r3, r3, r0
 800440a:	19db      	adds	r3, r3, r7
 800440c:	2200      	movs	r2, #0
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e02d      	b.n	800446e <drawImage+0x13e>
	{
		pixelBuffer[totalInd++] = ((palette[ind] & 0xFF)<<8) | (palette[ind] >> 8);
 8004412:	2116      	movs	r1, #22
 8004414:	2018      	movs	r0, #24
 8004416:	180b      	adds	r3, r1, r0
 8004418:	19db      	adds	r3, r3, r7
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	18d3      	adds	r3, r2, r3
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b21b      	sxth	r3, r3
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	b21a      	sxth	r2, r3
 800442a:	180b      	adds	r3, r1, r0
 800442c:	19db      	adds	r3, r3, r7
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	6a39      	ldr	r1, [r7, #32]
 8004434:	18cb      	adds	r3, r1, r3
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	b29b      	uxth	r3, r3
 800443c:	b21b      	sxth	r3, r3
 800443e:	4313      	orrs	r3, r2
 8004440:	b219      	sxth	r1, r3
 8004442:	2222      	movs	r2, #34	@ 0x22
 8004444:	1813      	adds	r3, r2, r0
 8004446:	19db      	adds	r3, r3, r7
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	0004      	movs	r4, r0
 800444c:	1812      	adds	r2, r2, r0
 800444e:	19d2      	adds	r2, r2, r7
 8004450:	1c58      	adds	r0, r3, #1
 8004452:	8010      	strh	r0, [r2, #0]
 8004454:	001a      	movs	r2, r3
 8004456:	b289      	uxth	r1, r1
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 800445e:	2124      	movs	r1, #36	@ 0x24
 8004460:	190b      	adds	r3, r1, r4
 8004462:	19db      	adds	r3, r3, r7
 8004464:	881a      	ldrh	r2, [r3, #0]
 8004466:	190b      	adds	r3, r1, r4
 8004468:	19db      	adds	r3, r3, r7
 800446a:	3201      	adds	r2, #1
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	2324      	movs	r3, #36	@ 0x24
 8004470:	2018      	movs	r0, #24
 8004472:	181b      	adds	r3, r3, r0
 8004474:	19da      	adds	r2, r3, r7
 8004476:	2314      	movs	r3, #20
 8004478:	181b      	adds	r3, r3, r0
 800447a:	19db      	adds	r3, r3, r7
 800447c:	8812      	ldrh	r2, [r2, #0]
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d3c6      	bcc.n	8004412 <drawImage+0xe2>
for(i=0; i<c; i++)
 8004484:	2126      	movs	r1, #38	@ 0x26
 8004486:	180b      	adds	r3, r1, r0
 8004488:	19db      	adds	r3, r3, r7
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	180b      	adds	r3, r1, r0
 800448e:	19db      	adds	r3, r3, r7
 8004490:	3201      	adds	r2, #1
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	2326      	movs	r3, #38	@ 0x26
 8004496:	2118      	movs	r1, #24
 8004498:	185b      	adds	r3, r3, r1
 800449a:	19da      	adds	r2, r3, r7
 800449c:	2348      	movs	r3, #72	@ 0x48
 800449e:	185b      	adds	r3, r3, r1
 80044a0:	19db      	adds	r3, r3, r7
 80044a2:	8812      	ldrh	r2, [r2, #0]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d395      	bcc.n	80043d6 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, pixelBuffer);
 80044aa:	2344      	movs	r3, #68	@ 0x44
 80044ac:	185b      	adds	r3, r3, r1
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	881c      	ldrh	r4, [r3, #0]
 80044b2:	2340      	movs	r3, #64	@ 0x40
 80044b4:	185b      	adds	r3, r3, r1
 80044b6:	19db      	adds	r3, r3, r7
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	231e      	movs	r3, #30
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	8819      	ldrh	r1, [r3, #0]
 80044c0:	231c      	movs	r3, #28
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	8818      	ldrh	r0, [r3, #0]
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	0023      	movs	r3, r4
 80044cc:	f000 fa32 	bl	8004934 <ST7735_DrawImage>
 80044d0:	46c5      	mov	sp, r8
}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b010      	add	sp, #64	@ 0x40
 80044d8:	bc80      	pop	{r7}
 80044da:	46b8      	mov	r8, r7
 80044dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044de <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80044e2:	23a0      	movs	r3, #160	@ 0xa0
 80044e4:	05db      	lsls	r3, r3, #23
 80044e6:	2200      	movs	r2, #0
 80044e8:	2120      	movs	r1, #32
 80044ea:	0018      	movs	r0, r3
 80044ec:	f005 f9e5 	bl	80098ba <HAL_GPIO_WritePin>
}
 80044f0:	46c0      	nop			@ (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80044fa:	23a0      	movs	r3, #160	@ 0xa0
 80044fc:	05db      	lsls	r3, r3, #23
 80044fe:	2201      	movs	r2, #1
 8004500:	2120      	movs	r1, #32
 8004502:	0018      	movs	r0, r3
 8004504:	f005 f9d9 	bl	80098ba <HAL_GPIO_WritePin>
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <ST7735_Reset>:

void ST7735_Reset()
{
 800450e:	b580      	push	{r7, lr}
 8004510:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	0219      	lsls	r1, r3, #8
 8004516:	23a0      	movs	r3, #160	@ 0xa0
 8004518:	05db      	lsls	r3, r3, #23
 800451a:	2200      	movs	r2, #0
 800451c:	0018      	movs	r0, r3
 800451e:	f005 f9cc 	bl	80098ba <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004522:	2005      	movs	r0, #5
 8004524:	f004 fd76 	bl	8009014 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8004528:	2380      	movs	r3, #128	@ 0x80
 800452a:	0219      	lsls	r1, r3, #8
 800452c:	23a0      	movs	r3, #160	@ 0xa0
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	2201      	movs	r2, #1
 8004532:	0018      	movs	r0, r3
 8004534:	f005 f9c1 	bl	80098ba <HAL_GPIO_WritePin>
}
 8004538:	46c0      	nop			@ (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	0002      	movs	r2, r0
 8004548:	1dfb      	adds	r3, r7, #7
 800454a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800454c:	23a0      	movs	r3, #160	@ 0xa0
 800454e:	05db      	lsls	r3, r3, #23
 8004550:	2200      	movs	r2, #0
 8004552:	2110      	movs	r1, #16
 8004554:	0018      	movs	r0, r3
 8004556:	f005 f9b0 	bl	80098ba <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800455a:	2301      	movs	r3, #1
 800455c:	425b      	negs	r3, r3
 800455e:	1df9      	adds	r1, r7, #7
 8004560:	4803      	ldr	r0, [pc, #12]	@ (8004570 <ST7735_WriteCommand+0x30>)
 8004562:	2201      	movs	r2, #1
 8004564:	f007 f9d6 	bl	800b914 <HAL_SPI_Transmit>
}
 8004568:	46c0      	nop			@ (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200012fc 	.word	0x200012fc

08004574 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800457e:	23a0      	movs	r3, #160	@ 0xa0
 8004580:	05db      	lsls	r3, r3, #23
 8004582:	2201      	movs	r2, #1
 8004584:	2110      	movs	r1, #16
 8004586:	0018      	movs	r0, r3
 8004588:	f005 f997 	bl	80098ba <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b29a      	uxth	r2, r3
 8004590:	2301      	movs	r3, #1
 8004592:	425b      	negs	r3, r3
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4803      	ldr	r0, [pc, #12]	@ (80045a4 <ST7735_WriteData+0x30>)
 8004598:	f007 f9bc 	bl	800b914 <HAL_SPI_Transmit>
}
 800459c:	46c0      	nop			@ (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b002      	add	sp, #8
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	200012fc 	.word	0x200012fc

080045a8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	220f      	movs	r2, #15
 80045b8:	18ba      	adds	r2, r7, r2
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80045be:	e04a      	b.n	8004656 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	210b      	movs	r1, #11
 80045c8:	187a      	adds	r2, r7, r1
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 80045ce:	187b      	adds	r3, r7, r1
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f7ff ffb4 	bl	8004540 <ST7735_WriteCommand>

        numArgs = *addr++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	200a      	movs	r0, #10
 80045e0:	183a      	adds	r2, r7, r0
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80045e6:	183b      	adds	r3, r7, r0
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	230c      	movs	r3, #12
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2180      	movs	r1, #128	@ 0x80
 80045f2:	400a      	ands	r2, r1
 80045f4:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	183a      	adds	r2, r7, r0
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	217f      	movs	r1, #127	@ 0x7f
 80045fe:	400a      	ands	r2, r1
 8004600:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8004602:	183b      	adds	r3, r7, r0
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800460a:	0004      	movs	r4, r0
 800460c:	183b      	adds	r3, r7, r0
 800460e:	781a      	ldrb	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	0011      	movs	r1, r2
 8004614:	0018      	movs	r0, r3
 8004616:	f7ff ffad 	bl	8004574 <ST7735_WriteData>
            addr += numArgs;
 800461a:	193b      	adds	r3, r7, r4
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	18d3      	adds	r3, r2, r3
 8004622:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8004624:	210c      	movs	r1, #12
 8004626:	187b      	adds	r3, r7, r1
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d013      	beq.n	8004656 <DisplayInit+0xae>
            ms = *addr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	187b      	adds	r3, r7, r1
 8004638:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800463a:	187b      	adds	r3, r7, r1
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	2bff      	cmp	r3, #255	@ 0xff
 8004640:	d103      	bne.n	800464a <DisplayInit+0xa2>
 8004642:	187b      	adds	r3, r7, r1
 8004644:	22fa      	movs	r2, #250	@ 0xfa
 8004646:	0052      	lsls	r2, r2, #1
 8004648:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800464a:	230c      	movs	r3, #12
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	0018      	movs	r0, r3
 8004652:	f004 fcdf 	bl	8009014 <HAL_Delay>
    while(numCommands--) {
 8004656:	220f      	movs	r2, #15
 8004658:	18bb      	adds	r3, r7, r2
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	18ba      	adds	r2, r7, r2
 800465e:	1e59      	subs	r1, r3, #1
 8004660:	7011      	strb	r1, [r2, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1ac      	bne.n	80045c0 <DisplayInit+0x18>
        }
    }
}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b005      	add	sp, #20
 800466e:	bd90      	pop	{r4, r7, pc}

08004670 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8004670:	b5b0      	push	{r4, r5, r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	0005      	movs	r5, r0
 8004678:	000c      	movs	r4, r1
 800467a:	0010      	movs	r0, r2
 800467c:	0019      	movs	r1, r3
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	1c2a      	adds	r2, r5, #0
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	1dbb      	adds	r3, r7, #6
 8004686:	1c22      	adds	r2, r4, #0
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	1d7b      	adds	r3, r7, #5
 800468c:	1c02      	adds	r2, r0, #0
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	1c0a      	adds	r2, r1, #0
 8004694:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8004696:	202a      	movs	r0, #42	@ 0x2a
 8004698:	f7ff ff52 	bl	8004540 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800469c:	210c      	movs	r1, #12
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <ST7735_SetAddressWindow+0xa8>)
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	1dfb      	adds	r3, r7, #7
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	18d3      	adds	r3, r2, r3
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	705a      	strb	r2, [r3, #1]
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	2200      	movs	r2, #0
 80046b8:	709a      	strb	r2, [r3, #2]
 80046ba:	4b17      	ldr	r3, [pc, #92]	@ (8004718 <ST7735_SetAddressWindow+0xa8>)
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	1d7b      	adds	r3, r7, #5
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	18d3      	adds	r3, r2, r3
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80046ca:	000c      	movs	r4, r1
 80046cc:	187b      	adds	r3, r7, r1
 80046ce:	2104      	movs	r1, #4
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff ff4f 	bl	8004574 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80046d6:	202b      	movs	r0, #43	@ 0x2b
 80046d8:	f7ff ff32 	bl	8004540 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <ST7735_SetAddressWindow+0xac>)
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	1dbb      	adds	r3, r7, #6
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	18d3      	adds	r3, r2, r3
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	0021      	movs	r1, r4
 80046ea:	187b      	adds	r3, r7, r1
 80046ec:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80046ee:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <ST7735_SetAddressWindow+0xac>)
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	18d3      	adds	r3, r2, r3
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	2104      	movs	r1, #4
 8004702:	0018      	movs	r0, r3
 8004704:	f7ff ff36 	bl	8004574 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8004708:	202c      	movs	r0, #44	@ 0x2c
 800470a:	f7ff ff19 	bl	8004540 <ST7735_WriteCommand>
}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bdb0      	pop	{r4, r5, r7, pc}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	20000283 	.word	0x20000283
 800471c:	20000284 	.word	0x20000284

08004720 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	0002      	movs	r2, r0
 8004728:	1dfb      	adds	r3, r7, #7
 800472a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 800472c:	f7ff fed7 	bl	80044de <ST7735_Select>
    ST7735_Reset();
 8004730:	f7ff feed 	bl	800450e <ST7735_Reset>
    DisplayInit(init_cmds1);
 8004734:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <ST7735_Init+0x50>)
 8004736:	0018      	movs	r0, r3
 8004738:	f7ff ff36 	bl	80045a8 <DisplayInit>
    DisplayInit(init_cmds2);
 800473c:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <ST7735_Init+0x54>)
 800473e:	0018      	movs	r0, r3
 8004740:	f7ff ff32 	bl	80045a8 <DisplayInit>
    DisplayInit(init_cmds3);
 8004744:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <ST7735_Init+0x58>)
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff ff2e 	bl	80045a8 <DisplayInit>
    ST7735_Select();
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();
#else
    _colstart = 0;
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <ST7735_Init+0x5c>)
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <ST7735_Init+0x60>)
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8004758:	1dfb      	adds	r3, r7, #7
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f811 	bl	8004784 <ST7735_SetRotation>
    ST7735_Unselect();
 8004762:	f7ff fec8 	bl	80044f6 <ST7735_Unselect>

}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	08011ee0 	.word	0x08011ee0
 8004774:	08011f18 	.word	0x08011f18
 8004778:	08011f28 	.word	0x08011f28
 800477c:	20000281 	.word	0x20000281
 8004780:	20000282 	.word	0x20000282

08004784 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	0002      	movs	r2, r0
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8004790:	230f      	movs	r3, #15
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8004798:	1dfb      	adds	r3, r7, #7
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2203      	movs	r2, #3
 800479e:	4013      	ands	r3, r2
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4b36      	ldr	r3, [pc, #216]	@ (800487c <ST7735_SetRotation+0xf8>)
 80047a4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80047a6:	4b35      	ldr	r3, [pc, #212]	@ (800487c <ST7735_SetRotation+0xf8>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d041      	beq.n	8004832 <ST7735_SetRotation+0xae>
 80047ae:	dc53      	bgt.n	8004858 <ST7735_SetRotation+0xd4>
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d02b      	beq.n	800480c <ST7735_SetRotation+0x88>
 80047b4:	dc50      	bgt.n	8004858 <ST7735_SetRotation+0xd4>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <ST7735_SetRotation+0x3c>
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d013      	beq.n	80047e6 <ST7735_SetRotation+0x62>
 80047be:	e04b      	b.n	8004858 <ST7735_SetRotation+0xd4>
  {
  case 0:
#ifdef ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80047c0:	230f      	movs	r3, #15
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	22c0      	movs	r2, #192	@ 0xc0
 80047c6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80047c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004880 <ST7735_SetRotation+0xfc>)
 80047ca:	22a0      	movs	r2, #160	@ 0xa0
 80047cc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80047ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004884 <ST7735_SetRotation+0x100>)
 80047d0:	2280      	movs	r2, #128	@ 0x80
 80047d2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80047d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004888 <ST7735_SetRotation+0x104>)
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	4b2c      	ldr	r3, [pc, #176]	@ (800488c <ST7735_SetRotation+0x108>)
 80047da:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80047dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004890 <ST7735_SetRotation+0x10c>)
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004894 <ST7735_SetRotation+0x110>)
 80047e2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80047e4:	e038      	b.n	8004858 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80047e6:	230f      	movs	r3, #15
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	22a0      	movs	r2, #160	@ 0xa0
 80047ec:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80047ee:	4b25      	ldr	r3, [pc, #148]	@ (8004884 <ST7735_SetRotation+0x100>)
 80047f0:	22a0      	movs	r2, #160	@ 0xa0
 80047f2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80047f4:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <ST7735_SetRotation+0xfc>)
 80047f6:	2280      	movs	r2, #128	@ 0x80
 80047f8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80047fa:	4b23      	ldr	r3, [pc, #140]	@ (8004888 <ST7735_SetRotation+0x104>)
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	4b25      	ldr	r3, [pc, #148]	@ (8004894 <ST7735_SetRotation+0x110>)
 8004800:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004802:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <ST7735_SetRotation+0x10c>)
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	4b21      	ldr	r3, [pc, #132]	@ (800488c <ST7735_SetRotation+0x108>)
 8004808:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800480a:	e025      	b.n	8004858 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_RGB;
 800480c:	230f      	movs	r3, #15
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004814:	4b1a      	ldr	r3, [pc, #104]	@ (8004880 <ST7735_SetRotation+0xfc>)
 8004816:	22a0      	movs	r2, #160	@ 0xa0
 8004818:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800481a:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <ST7735_SetRotation+0x100>)
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8004820:	4b19      	ldr	r3, [pc, #100]	@ (8004888 <ST7735_SetRotation+0x104>)
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <ST7735_SetRotation+0x108>)
 8004826:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <ST7735_SetRotation+0x10c>)
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <ST7735_SetRotation+0x110>)
 800482e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004830:	e012      	b.n	8004858 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004832:	230f      	movs	r3, #15
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2260      	movs	r2, #96	@ 0x60
 8004838:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <ST7735_SetRotation+0x100>)
 800483c:	22a0      	movs	r2, #160	@ 0xa0
 800483e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004840:	4b0f      	ldr	r3, [pc, #60]	@ (8004880 <ST7735_SetRotation+0xfc>)
 8004842:	2280      	movs	r2, #128	@ 0x80
 8004844:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <ST7735_SetRotation+0x104>)
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <ST7735_SetRotation+0x110>)
 800484c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800484e:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <ST7735_SetRotation+0x10c>)
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	4b0e      	ldr	r3, [pc, #56]	@ (800488c <ST7735_SetRotation+0x108>)
 8004854:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004856:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8004858:	f7ff fe41 	bl	80044de <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800485c:	2036      	movs	r0, #54	@ 0x36
 800485e:	f7ff fe6f 	bl	8004540 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8004862:	230f      	movs	r3, #15
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2101      	movs	r1, #1
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fe83 	bl	8004574 <ST7735_WriteData>
  ST7735_Unselect();
 800486e:	f7ff fe42 	bl	80044f6 <ST7735_Unselect>
}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b004      	add	sp, #16
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	20000280 	.word	0x20000280
 8004880:	2000027e 	.word	0x2000027e
 8004884:	2000027c 	.word	0x2000027c
 8004888:	20000281 	.word	0x20000281
 800488c:	20000283 	.word	0x20000283
 8004890:	20000282 	.word	0x20000282
 8004894:	20000284 	.word	0x20000284

08004898 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	0004      	movs	r4, r0
 80048a0:	0008      	movs	r0, r1
 80048a2:	0011      	movs	r1, r2
 80048a4:	1dbb      	adds	r3, r7, #6
 80048a6:	1c22      	adds	r2, r4, #0
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	1c02      	adds	r2, r0, #0
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	1cbb      	adds	r3, r7, #2
 80048b2:	1c0a      	adds	r2, r1, #0
 80048b4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 80048b6:	1dbb      	adds	r3, r7, #6
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <ST7735_DrawPixel+0x94>)
 80048bc:	2100      	movs	r1, #0
 80048be:	5e52      	ldrsh	r2, [r2, r1]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	da2f      	bge.n	8004924 <ST7735_DrawPixel+0x8c>
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	@ (8004930 <ST7735_DrawPixel+0x98>)
 80048ca:	2100      	movs	r1, #0
 80048cc:	5e52      	ldrsh	r2, [r2, r1]
 80048ce:	4293      	cmp	r3, r2
 80048d0:	da28      	bge.n	8004924 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 80048d2:	f7ff fe04 	bl	80044de <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80048d6:	1dbb      	adds	r3, r7, #6
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b2d8      	uxtb	r0, r3
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b2d9      	uxtb	r1, r3
 80048e2:	1dbb      	adds	r3, r7, #6
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	1d3b      	adds	r3, r7, #4
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f7ff febb 	bl	8004670 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80048fa:	1cbb      	adds	r3, r7, #2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	b29b      	uxth	r3, r3
 8004902:	b2da      	uxtb	r2, r3
 8004904:	210c      	movs	r1, #12
 8004906:	187b      	adds	r3, r7, r1
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	1cbb      	adds	r3, r7, #2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	187b      	adds	r3, r7, r1
 8004912:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8004914:	187b      	adds	r3, r7, r1
 8004916:	2102      	movs	r1, #2
 8004918:	0018      	movs	r0, r3
 800491a:	f7ff fe2b 	bl	8004574 <ST7735_WriteData>

    ST7735_Unselect();
 800491e:	f7ff fdea 	bl	80044f6 <ST7735_Unselect>
 8004922:	e000      	b.n	8004926 <ST7735_DrawPixel+0x8e>
        return;
 8004924:	46c0      	nop			@ (mov r8, r8)
}
 8004926:	46bd      	mov	sp, r7
 8004928:	b005      	add	sp, #20
 800492a:	bd90      	pop	{r4, r7, pc}
 800492c:	2000027c 	.word	0x2000027c
 8004930:	2000027e 	.word	0x2000027e

08004934 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004934:	b5b0      	push	{r4, r5, r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	0005      	movs	r5, r0
 800493c:	000c      	movs	r4, r1
 800493e:	0010      	movs	r0, r2
 8004940:	0019      	movs	r1, r3
 8004942:	1dbb      	adds	r3, r7, #6
 8004944:	1c2a      	adds	r2, r5, #0
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	1d3b      	adds	r3, r7, #4
 800494a:	1c22      	adds	r2, r4, #0
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	1cbb      	adds	r3, r7, #2
 8004950:	1c02      	adds	r2, r0, #0
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	003b      	movs	r3, r7
 8004956:	1c0a      	adds	r2, r1, #0
 8004958:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 800495a:	1dbb      	adds	r3, r7, #6
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a08 <ST7735_DrawImage+0xd4>)
 8004960:	2100      	movs	r1, #0
 8004962:	5e52      	ldrsh	r2, [r2, r1]
 8004964:	4293      	cmp	r3, r2
 8004966:	da47      	bge.n	80049f8 <ST7735_DrawImage+0xc4>
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	4a27      	ldr	r2, [pc, #156]	@ (8004a0c <ST7735_DrawImage+0xd8>)
 800496e:	2100      	movs	r1, #0
 8004970:	5e52      	ldrsh	r2, [r2, r1]
 8004972:	4293      	cmp	r3, r2
 8004974:	da40      	bge.n	80049f8 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	1cbb      	adds	r3, r7, #2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	18d3      	adds	r3, r2, r3
 8004980:	4a21      	ldr	r2, [pc, #132]	@ (8004a08 <ST7735_DrawImage+0xd4>)
 8004982:	2100      	movs	r1, #0
 8004984:	5e52      	ldrsh	r2, [r2, r1]
 8004986:	4293      	cmp	r3, r2
 8004988:	dc38      	bgt.n	80049fc <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	881a      	ldrh	r2, [r3, #0]
 800498e:	003b      	movs	r3, r7
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	18d3      	adds	r3, r2, r3
 8004994:	4a1d      	ldr	r2, [pc, #116]	@ (8004a0c <ST7735_DrawImage+0xd8>)
 8004996:	2100      	movs	r1, #0
 8004998:	5e52      	ldrsh	r2, [r2, r1]
 800499a:	4293      	cmp	r3, r2
 800499c:	dc30      	bgt.n	8004a00 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 800499e:	f7ff fd9e 	bl	80044de <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80049a2:	1dbb      	adds	r3, r7, #6
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b2d8      	uxtb	r0, r3
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b2d9      	uxtb	r1, r3
 80049ae:	1dbb      	adds	r3, r7, #6
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	1cbb      	adds	r3, r7, #2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	18d3      	adds	r3, r2, r3
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b2dc      	uxtb	r4, r3
 80049c2:	1d3b      	adds	r3, r7, #4
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	003b      	movs	r3, r7
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	18d3      	adds	r3, r2, r3
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	0022      	movs	r2, r4
 80049d8:	f7ff fe4a 	bl	8004670 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80049dc:	1cbb      	adds	r3, r7, #2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	003a      	movs	r2, r7
 80049e2:	8812      	ldrh	r2, [r2, #0]
 80049e4:	4353      	muls	r3, r2
 80049e6:	005a      	lsls	r2, r3, #1
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	0011      	movs	r1, r2
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7ff fdc1 	bl	8004574 <ST7735_WriteData>
    ST7735_Unselect();
 80049f2:	f7ff fd80 	bl	80044f6 <ST7735_Unselect>
 80049f6:	e004      	b.n	8004a02 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	e002      	b.n	8004a02 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80049fc:	46c0      	nop			@ (mov r8, r8)
 80049fe:	e000      	b.n	8004a02 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8004a00:	46c0      	nop			@ (mov r8, r8)
}
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bdb0      	pop	{r4, r5, r7, pc}
 8004a08:	2000027c 	.word	0x2000027c
 8004a0c:	2000027e 	.word	0x2000027e

08004a10 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <minmea_tocoord+0x14>
        return NAN;
 8004a20:	4b1c      	ldr	r3, [pc, #112]	@ (8004a94 <minmea_tocoord+0x84>)
 8004a22:	e033      	b.n	8004a8c <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2164      	movs	r1, #100	@ 0x64
 8004a2e:	434b      	muls	r3, r1
 8004a30:	0019      	movs	r1, r3
 8004a32:	0010      	movs	r0, r2
 8004a34:	f7fb fc18 	bl	8000268 <__divsi3>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2164      	movs	r1, #100	@ 0x64
 8004a46:	434b      	muls	r3, r1
 8004a48:	0019      	movs	r1, r3
 8004a4a:	0010      	movs	r0, r2
 8004a4c:	f7fb fcf2 	bl	8000434 <__aeabi_idivmod>
 8004a50:	000b      	movs	r3, r1
 8004a52:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7fc fedf 	bl	8001818 <__aeabi_i2f>
 8004a5a:	1c04      	adds	r4, r0, #0
 8004a5c:	68b8      	ldr	r0, [r7, #8]
 8004a5e:	f7fc fedb 	bl	8001818 <__aeabi_i2f>
 8004a62:	1c05      	adds	r5, r0, #0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	0013      	movs	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7fc fed1 	bl	8001818 <__aeabi_i2f>
 8004a76:	1c03      	adds	r3, r0, #0
 8004a78:	1c19      	adds	r1, r3, #0
 8004a7a:	1c28      	adds	r0, r5, #0
 8004a7c:	f7fc f90a 	bl	8000c94 <__aeabi_fdiv>
 8004a80:	1c03      	adds	r3, r0, #0
 8004a82:	1c19      	adds	r1, r3, #0
 8004a84:	1c20      	adds	r0, r4, #0
 8004a86:	f7fb ff13 	bl	80008b0 <__aeabi_fadd>
 8004a8a:	1c03      	adds	r3, r0, #0
}
 8004a8c:	1c18      	adds	r0, r3, #0
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bdb0      	pop	{r4, r5, r7, pc}
 8004a94:	7fc00000 	.word	0x7fc00000

08004a98 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
    return json->sibling;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
}
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
}
 8004ab8:	0018      	movs	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b002      	add	sp, #8
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	220a      	movs	r2, #10
 8004ace:	2100      	movs	r1, #0
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f00a f927 	bl	800ed24 <strtoll>
 8004ad6:	0002      	movs	r2, r0
 8004ad8:	000b      	movs	r3, r1
}
 8004ada:	0010      	movs	r0, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2100      	movs	r1, #0
 8004af2:	0018      	movs	r0, r3
 8004af4:	f009 ffce 	bl	800ea94 <strtod>
 8004af8:	0002      	movs	r2, r0
 8004afa:	000b      	movs	r3, r1
}
 8004afc:	0010      	movs	r0, r2
 8004afe:	0019      	movs	r1, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	b002      	add	sp, #8
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b08e      	sub	sp, #56	@ 0x38
 8004b0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b0e:	f004 f9fb 	bl	8008f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b12:	f000 fca5 	bl	8005460 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	StructInit();
 8004b16:	f001 f947 	bl	8005da8 <StructInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b1a:	f000 fed5 	bl	80058c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004b1e:	f000 fd01 	bl	8005524 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004b22:	f000 fd6d 	bl	8005600 <MX_SPI1_Init>
  MX_TIM17_Init();
 8004b26:	f000 fdab 	bl	8005680 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8004b2a:	f000 fe31 	bl	8005790 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004b2e:	f000 fe7d 	bl	800582c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004b32:	f000 fd37 	bl	80055a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	PeripheralInit();
 8004b36:	f001 f8f9 	bl	8005d2c <PeripheralInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//Before entering the while, fill the screen to clear it once
	fillScreen(BLACK);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7ff fb84 	bl	8004248 <fillScreen>
	while (1) {
		if ((totalFrames) % 200 == 0){
 8004b40:	4bb1      	ldr	r3, [pc, #708]	@ (8004e08 <main+0x300>)
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	21c8      	movs	r1, #200	@ 0xc8
 8004b46:	0018      	movs	r0, r3
 8004b48:	f7fb fb8a 	bl	8000260 <__aeabi_uidivmod>
 8004b4c:	000b      	movs	r3, r1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d104      	bne.n	8004b5e <main+0x56>
						GetLatLon();
 8004b54:	f002 fa58 	bl	8007008 <GetLatLon>
						checkTime=1;
 8004b58:	4bac      	ldr	r3, [pc, #688]	@ (8004e0c <main+0x304>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	801a      	strh	r2, [r3, #0]
					}
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8004b5e:	4aac      	ldr	r2, [pc, #688]	@ (8004e10 <main+0x308>)
 8004b60:	2392      	movs	r3, #146	@ 0x92
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	58d3      	ldr	r3, [r2, r3]
 8004b66:	4aaa      	ldr	r2, [pc, #680]	@ (8004e10 <main+0x308>)
 8004b68:	7c12      	ldrb	r2, [r2, #16]
 8004b6a:	3201      	adds	r2, #1
 8004b6c:	435a      	muls	r2, r3
 8004b6e:	0011      	movs	r1, r2
 8004b70:	4aa7      	ldr	r2, [pc, #668]	@ (8004e10 <main+0x308>)
 8004b72:	2394      	movs	r3, #148	@ 0x94
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	50d1      	str	r1, [r2, r3]
		_ADXL343_ReadReg8(0x15, &steps, 2);
 8004b78:	4ba6      	ldr	r3, [pc, #664]	@ (8004e14 <main+0x30c>)
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	2015      	movs	r0, #21
 8004b80:	f001 fef0 	bl	8006964 <_ADXL343_ReadReg8>

		//SendData();
		//ReceiveData();
		//_ADXL343_ReadReg8(0x00, &steps, 1);
		if (CheckExp(game.dailyGoal, game.stepsToday) == 1) {
 8004b84:	4aa2      	ldr	r2, [pc, #648]	@ (8004e10 <main+0x308>)
 8004b86:	2392      	movs	r3, #146	@ 0x92
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	58d3      	ldr	r3, [r2, r3]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	4aa0      	ldr	r2, [pc, #640]	@ (8004e10 <main+0x308>)
 8004b90:	2390      	movs	r3, #144	@ 0x90
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	58d3      	ldr	r3, [r2, r3]
 8004b96:	0019      	movs	r1, r3
 8004b98:	f002 f9f2 	bl	8006f80 <CheckExp>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10c      	bne.n	8004bbc <main+0xb4>
			game.mood += moodIncrementUp;
 8004ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8004e10 <main+0x308>)
 8004ba4:	7c5a      	ldrb	r2, [r3, #17]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	18d3      	adds	r3, r2, r3
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b98      	ldr	r3, [pc, #608]	@ (8004e10 <main+0x308>)
 8004bb0:	745a      	strb	r2, [r3, #17]
			game.stepsToday = 0;
 8004bb2:	4a97      	ldr	r2, [pc, #604]	@ (8004e10 <main+0x308>)
 8004bb4:	2390      	movs	r3, #144	@ 0x90
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2100      	movs	r1, #0
 8004bba:	50d1      	str	r1, [r2, r3]
		}
		if(CheckExp(game.weeklyGoal, game.weeklySteps)==1) {
 8004bbc:	4a94      	ldr	r2, [pc, #592]	@ (8004e10 <main+0x308>)
 8004bbe:	2394      	movs	r3, #148	@ 0x94
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	58d3      	ldr	r3, [r2, r3]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	4a92      	ldr	r2, [pc, #584]	@ (8004e10 <main+0x308>)
 8004bc8:	238e      	movs	r3, #142	@ 0x8e
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	58d3      	ldr	r3, [r2, r3]
 8004bce:	0019      	movs	r1, r3
 8004bd0:	f002 f9d6 	bl	8006f80 <CheckExp>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d106      	bne.n	8004be8 <main+0xe0>
			Evolve();
 8004bda:	f001 f9ed 	bl	8005fb8 <Evolve>
			game.weeklySteps=0;
 8004bde:	4a8c      	ldr	r2, [pc, #560]	@ (8004e10 <main+0x308>)
 8004be0:	238e      	movs	r3, #142	@ 0x8e
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	2100      	movs	r1, #0
 8004be6:	50d1      	str	r1, [r2, r3]
		}

		if (checkTime) {
 8004be8:	4b88      	ldr	r3, [pc, #544]	@ (8004e0c <main+0x304>)
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d057      	beq.n	8004ca0 <main+0x198>
			checkTime=0;
 8004bf0:	4b86      	ldr	r3, [pc, #536]	@ (8004e0c <main+0x304>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	801a      	strh	r2, [r3, #0]
                  			FlashWrite();
 8004bf6:	f001 fa19 	bl	800602c <FlashWrite>
			if (((game.time.minutes % dayLength) == 0)
 8004bfa:	4b85      	ldr	r3, [pc, #532]	@ (8004e10 <main+0x308>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2218      	movs	r2, #24
 8004c00:	0011      	movs	r1, r2
 8004c02:	0018      	movs	r0, r3
 8004c04:	f7fb fc16 	bl	8000434 <__aeabi_idivmod>
 8004c08:	1e0b      	subs	r3, r1, #0
 8004c0a:	d134      	bne.n	8004c76 <main+0x16e>
					&& game.time.seconds > 0) {
 8004c0c:	4b80      	ldr	r3, [pc, #512]	@ (8004e10 <main+0x308>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	dd30      	ble.n	8004c76 <main+0x16e>
				if (CheckExp(game.dailyGoal, game.stepsToday) == -1)
 8004c14:	4a7e      	ldr	r2, [pc, #504]	@ (8004e10 <main+0x308>)
 8004c16:	2392      	movs	r3, #146	@ 0x92
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	58d3      	ldr	r3, [r2, r3]
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e10 <main+0x308>)
 8004c20:	2390      	movs	r3, #144	@ 0x90
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	58d3      	ldr	r3, [r2, r3]
 8004c26:	0019      	movs	r1, r3
 8004c28:	f002 f9aa 	bl	8006f80 <CheckExp>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	3301      	adds	r3, #1
 8004c30:	d10f      	bne.n	8004c52 <main+0x14a>
					game.mood -= (game.mood>moodIncrementDown)?moodIncrementDown:0;
 8004c32:	4b77      	ldr	r3, [pc, #476]	@ (8004e10 <main+0x308>)
 8004c34:	7c5a      	ldrb	r2, [r3, #17]
 8004c36:	4b76      	ldr	r3, [pc, #472]	@ (8004e10 <main+0x308>)
 8004c38:	7c5b      	ldrb	r3, [r3, #17]
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	dd02      	ble.n	8004c48 <main+0x140>
 8004c42:	2301      	movs	r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e000      	b.n	8004c4a <main+0x142>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	4b70      	ldr	r3, [pc, #448]	@ (8004e10 <main+0x308>)
 8004c50:	745a      	strb	r2, [r3, #17]
				game.stepsToday = 0;
 8004c52:	4a6f      	ldr	r2, [pc, #444]	@ (8004e10 <main+0x308>)
 8004c54:	2390      	movs	r3, #144	@ 0x90
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	2100      	movs	r1, #0
 8004c5a:	50d1      	str	r1, [r2, r3]
				memset(&game.positions, 0, sizeof(game.positions));
 8004c5c:	2380      	movs	r3, #128	@ 0x80
 8004c5e:	005a      	lsls	r2, r3, #1
 8004c60:	4b6d      	ldr	r3, [pc, #436]	@ (8004e18 <main+0x310>)
 8004c62:	2100      	movs	r1, #0
 8004c64:	0018      	movs	r0, r3
 8004c66:	f00a f99b 	bl	800efa0 <memset>
				game.numLocations = 0;
 8004c6a:	4b69      	ldr	r3, [pc, #420]	@ (8004e10 <main+0x308>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	615a      	str	r2, [r3, #20]
				checkTime = 0;
 8004c70:	4b66      	ldr	r3, [pc, #408]	@ (8004e0c <main+0x304>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	801a      	strh	r2, [r3, #0]
			}

			if (((game.time.minutes % weekLength) == 0)
 8004c76:	4b66      	ldr	r3, [pc, #408]	@ (8004e10 <main+0x308>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	22a8      	movs	r2, #168	@ 0xa8
 8004c7c:	0011      	movs	r1, r2
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f7fb fbd8 	bl	8000434 <__aeabi_idivmod>
 8004c84:	1e0b      	subs	r3, r1, #0
 8004c86:	d10b      	bne.n	8004ca0 <main+0x198>
					&& game.time.seconds > 0) {
 8004c88:	4b61      	ldr	r3, [pc, #388]	@ (8004e10 <main+0x308>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dd07      	ble.n	8004ca0 <main+0x198>
				game.weeklySteps = 0;
 8004c90:	4a5f      	ldr	r2, [pc, #380]	@ (8004e10 <main+0x308>)
 8004c92:	238e      	movs	r3, #142	@ 0x8e
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	2100      	movs	r1, #0
 8004c98:	50d1      	str	r1, [r2, r3]
				checkTime = 0;
 8004c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004e0c <main+0x304>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	801a      	strh	r2, [r3, #0]
			}
		}
		if (steps != 0) {
 8004ca0:	4b5c      	ldr	r3, [pc, #368]	@ (8004e14 <main+0x30c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d027      	beq.n	8004cf8 <main+0x1f0>
			game.stepsToday += steps;
 8004ca8:	4a59      	ldr	r2, [pc, #356]	@ (8004e10 <main+0x308>)
 8004caa:	2390      	movs	r3, #144	@ 0x90
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	58d2      	ldr	r2, [r2, r3]
 8004cb0:	4b58      	ldr	r3, [pc, #352]	@ (8004e14 <main+0x30c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	18d1      	adds	r1, r2, r3
 8004cb6:	4a56      	ldr	r2, [pc, #344]	@ (8004e10 <main+0x308>)
 8004cb8:	2390      	movs	r3, #144	@ 0x90
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	50d1      	str	r1, [r2, r3]
			game.weeklySteps += steps;
 8004cbe:	4a54      	ldr	r2, [pc, #336]	@ (8004e10 <main+0x308>)
 8004cc0:	238e      	movs	r3, #142	@ 0x8e
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	58d2      	ldr	r2, [r2, r3]
 8004cc6:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <main+0x30c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	18d1      	adds	r1, r2, r3
 8004ccc:	4a50      	ldr	r2, [pc, #320]	@ (8004e10 <main+0x308>)
 8004cce:	238e      	movs	r3, #142	@ 0x8e
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	50d1      	str	r1, [r2, r3]
			game.allSteps += steps;
 8004cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8004e10 <main+0x308>)
 8004cd6:	238c      	movs	r3, #140	@ 0x8c
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	58d2      	ldr	r2, [r2, r3]
 8004cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004e14 <main+0x30c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	18d1      	adds	r1, r2, r3
 8004ce2:	4a4b      	ldr	r2, [pc, #300]	@ (8004e10 <main+0x308>)
 8004ce4:	238c      	movs	r3, #140	@ 0x8c
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	50d1      	str	r1, [r2, r3]
			steps = 0;
 8004cea:	4b4a      	ldr	r3, [pc, #296]	@ (8004e14 <main+0x30c>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
			_ADXL343_WriteReg8(0x7E, 0xB1);
 8004cf0:	21b1      	movs	r1, #177	@ 0xb1
 8004cf2:	207e      	movs	r0, #126	@ 0x7e
 8004cf4:	f001 fe68 	bl	80069c8 <_ADXL343_WriteReg8>
		}
		++updateScreen;
 8004cf8:	4b48      	ldr	r3, [pc, #288]	@ (8004e1c <main+0x314>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	4b47      	ldr	r3, [pc, #284]	@ (8004e1c <main+0x314>)
 8004d00:	601a      	str	r2, [r3, #0]
		//SendData();
		//HAL_UART_Transmit(&huart2, "hello", 5, 100);
		switch (currentMenu) {
 8004d02:	4b47      	ldr	r3, [pc, #284]	@ (8004e20 <main+0x318>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d100      	bne.n	8004d0c <main+0x204>
 8004d0a:	e21d      	b.n	8005148 <main+0x640>
 8004d0c:	dd00      	ble.n	8004d10 <main+0x208>
 8004d0e:	e37e      	b.n	800540e <main+0x906>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d100      	bne.n	8004d16 <main+0x20e>
 8004d14:	e096      	b.n	8004e44 <main+0x33c>
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d000      	beq.n	8004d1c <main+0x214>
 8004d1a:	e378      	b.n	800540e <main+0x906>
		case Main:


			if (updateScreen >= 3) {
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e1c <main+0x314>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d92b      	bls.n	8004d7c <main+0x274>
				updateScreen = 0;
 8004d24:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <main+0x314>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

				AnimateCharacter(imgPalette);
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e24 <main+0x31c>)
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f001 fbab 	bl	8006488 <AnimateCharacter>
				//Update steps
				drawString(0, 150, "-SILLY LITTLE GUY-", WHITE, BLACK, 1, 1);
 8004d32:	2301      	movs	r3, #1
 8004d34:	425b      	negs	r3, r3
 8004d36:	4a3c      	ldr	r2, [pc, #240]	@ (8004e28 <main+0x320>)
 8004d38:	2101      	movs	r1, #1
 8004d3a:	9102      	str	r1, [sp, #8]
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	9101      	str	r1, [sp, #4]
 8004d40:	2100      	movs	r1, #0
 8004d42:	9100      	str	r1, [sp, #0]
 8004d44:	2196      	movs	r1, #150	@ 0x96
 8004d46:	2000      	movs	r0, #0
 8004d48:	f7ff f939 	bl	8003fbe <drawString>
				sprintf(buffer2, "Steps: %d ", game.stepsToday);
 8004d4c:	4a30      	ldr	r2, [pc, #192]	@ (8004e10 <main+0x308>)
 8004d4e:	2390      	movs	r3, #144	@ 0x90
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	58d2      	ldr	r2, [r2, r3]
 8004d54:	4935      	ldr	r1, [pc, #212]	@ (8004e2c <main+0x324>)
 8004d56:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <main+0x328>)
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f00a f8b3 	bl	800eec4 <siprintf>
				drawString(0, 0, buffer2, WHITE, BLACK, 1, 1);
 8004d5e:	2301      	movs	r3, #1
 8004d60:	425b      	negs	r3, r3
 8004d62:	4a33      	ldr	r2, [pc, #204]	@ (8004e30 <main+0x328>)
 8004d64:	2101      	movs	r1, #1
 8004d66:	9102      	str	r1, [sp, #8]
 8004d68:	2101      	movs	r1, #1
 8004d6a:	9101      	str	r1, [sp, #4]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	9100      	str	r1, [sp, #0]
 8004d70:	2100      	movs	r1, #0
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7ff f923 	bl	8003fbe <drawString>
				Emote();
 8004d78:	f002 fa8e 	bl	8007298 <Emote>
			}

			//Interact with the SLG
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e34 <main+0x32c>)
 8004d7e:	2102      	movs	r1, #2
 8004d80:	0018      	movs	r0, r3
 8004d82:	f004 fd7d 	bl	8009880 <HAL_GPIO_ReadPin>
 8004d86:	0003      	movs	r3, r0
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <main+0x288>
				//if(game.weeklySteps == game.weeklyGoal)
				//{
					//Evolve();
				//}
				//Evolve();
				FlashErase();
 8004d8c:	f001 f930 	bl	8005ff0 <FlashErase>
				//FlashWrite();
				//StructInit();
			}

			//Change current Menu
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004d90:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <main+0x330>)
 8004d92:	2104      	movs	r1, #4
 8004d94:	0018      	movs	r0, r3
 8004d96:	f004 fd73 	bl	8009880 <HAL_GPIO_ReadPin>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d111      	bne.n	8004dc4 <main+0x2bc>
				effect = MenuBeep;
 8004da0:	4b26      	ldr	r3, [pc, #152]	@ (8004e3c <main+0x334>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004da6:	4b25      	ldr	r3, [pc, #148]	@ (8004e3c <main+0x334>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	0018      	movs	r0, r3
 8004dac:	f000 fe5a 	bl	8005a64 <PlayEffect>

				currentMenu = Settings;
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <main+0x318>)
 8004db2:	2204      	movs	r2, #4
 8004db4:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004db6:	4b22      	ldr	r3, [pc, #136]	@ (8004e40 <main+0x338>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	f7ff fa43 	bl	8004248 <fillScreen>
				canChange = 0;
				fillScreen(BLACK);
			} else
				canChange = 1;

			break;
 8004dc2:	e324      	b.n	800540e <main+0x906>
			} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 8004dc4:	2380      	movs	r3, #128	@ 0x80
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	23a0      	movs	r3, #160	@ 0xa0
 8004dca:	05db      	lsls	r3, r3, #23
 8004dcc:	0011      	movs	r1, r2
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f004 fd56 	bl	8009880 <HAL_GPIO_ReadPin>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d111      	bne.n	8004dfe <main+0x2f6>
				effect = MenuBeep;
 8004dda:	4b18      	ldr	r3, [pc, #96]	@ (8004e3c <main+0x334>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004de0:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <main+0x334>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 fe3d 	bl	8005a64 <PlayEffect>
				currentMenu = StatsDisplay;
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <main+0x318>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004df0:	4b13      	ldr	r3, [pc, #76]	@ (8004e40 <main+0x338>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7ff fa26 	bl	8004248 <fillScreen>
			break;
 8004dfc:	e307      	b.n	800540e <main+0x906>
				canChange = 1;
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <main+0x338>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	701a      	strb	r2, [r3, #0]
			break;
 8004e04:	e303      	b.n	800540e <main+0x906>
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	2000043c 	.word	0x2000043c
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	20000298 	.word	0x20000298
 8004e14:	2000126c 	.word	0x2000126c
 8004e18:	200002b0 	.word	0x200002b0
 8004e1c:	2000028c 	.word	0x2000028c
 8004e20:	20000002 	.word	0x20000002
 8004e24:	08011f54 	.word	0x08011f54
 8004e28:	08011658 	.word	0x08011658
 8004e2c:	0801166c 	.word	0x0801166c
 8004e30:	20001208 	.word	0x20001208
 8004e34:	50000800 	.word	0x50000800
 8004e38:	50000400 	.word	0x50000400
 8004e3c:	20000288 	.word	0x20000288
 8004e40:	20000003 	.word	0x20000003
		case StatsDisplay:

			if (updateScreen >= 5) {
 8004e44:	4bec      	ldr	r3, [pc, #944]	@ (80051f8 <main+0x6f0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d800      	bhi.n	8004e4e <main+0x346>
 8004e4c:	e15e      	b.n	800510c <main+0x604>
				//fillScreen(BLACK);

				drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004e4e:	2301      	movs	r3, #1
 8004e50:	425b      	negs	r3, r3
 8004e52:	4aea      	ldr	r2, [pc, #936]	@ (80051fc <main+0x6f4>)
 8004e54:	2101      	movs	r1, #1
 8004e56:	9102      	str	r1, [sp, #8]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	9101      	str	r1, [sp, #4]
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	9100      	str	r1, [sp, #0]
 8004e60:	2196      	movs	r1, #150	@ 0x96
 8004e62:	2000      	movs	r0, #0
 8004e64:	f7ff f8ab 	bl	8003fbe <drawString>
				sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004e68:	4ae5      	ldr	r2, [pc, #916]	@ (8005200 <main+0x6f8>)
 8004e6a:	2390      	movs	r3, #144	@ 0x90
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	58d2      	ldr	r2, [r2, r3]
 8004e70:	49e4      	ldr	r1, [pc, #912]	@ (8005204 <main+0x6fc>)
 8004e72:	4be5      	ldr	r3, [pc, #916]	@ (8005208 <main+0x700>)
 8004e74:	0018      	movs	r0, r3
 8004e76:	f00a f825 	bl	800eec4 <siprintf>
				drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	4ae2      	ldr	r2, [pc, #904]	@ (8005208 <main+0x700>)
 8004e80:	2101      	movs	r1, #1
 8004e82:	9102      	str	r1, [sp, #8]
 8004e84:	2101      	movs	r1, #1
 8004e86:	9101      	str	r1, [sp, #4]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	9100      	str	r1, [sp, #0]
 8004e8c:	218c      	movs	r1, #140	@ 0x8c
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f7ff f895 	bl	8003fbe <drawString>
				sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004e94:	4ada      	ldr	r2, [pc, #872]	@ (8005200 <main+0x6f8>)
 8004e96:	238e      	movs	r3, #142	@ 0x8e
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	58d2      	ldr	r2, [r2, r3]
 8004e9c:	49db      	ldr	r1, [pc, #876]	@ (800520c <main+0x704>)
 8004e9e:	4bda      	ldr	r3, [pc, #872]	@ (8005208 <main+0x700>)
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f00a f80f 	bl	800eec4 <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	425b      	negs	r3, r3
 8004eaa:	4ad7      	ldr	r2, [pc, #860]	@ (8005208 <main+0x700>)
 8004eac:	2101      	movs	r1, #1
 8004eae:	9102      	str	r1, [sp, #8]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	9101      	str	r1, [sp, #4]
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	9100      	str	r1, [sp, #0]
 8004eb8:	2182      	movs	r1, #130	@ 0x82
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f7ff f87f 	bl	8003fbe <drawString>
				sprintf(buffer2, "All time: %d ", game.allSteps);
 8004ec0:	4acf      	ldr	r2, [pc, #828]	@ (8005200 <main+0x6f8>)
 8004ec2:	238c      	movs	r3, #140	@ 0x8c
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	58d2      	ldr	r2, [r2, r3]
 8004ec8:	49d1      	ldr	r1, [pc, #836]	@ (8005210 <main+0x708>)
 8004eca:	4bcf      	ldr	r3, [pc, #828]	@ (8005208 <main+0x700>)
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f009 fff9 	bl	800eec4 <siprintf>
				drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	425b      	negs	r3, r3
 8004ed6:	4acc      	ldr	r2, [pc, #816]	@ (8005208 <main+0x700>)
 8004ed8:	2101      	movs	r1, #1
 8004eda:	9102      	str	r1, [sp, #8]
 8004edc:	2101      	movs	r1, #1
 8004ede:	9101      	str	r1, [sp, #4]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	9100      	str	r1, [sp, #0]
 8004ee4:	2178      	movs	r1, #120	@ 0x78
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7ff f869 	bl	8003fbe <drawString>
				drawString(0, 110, "POSITIONS", WHITE, BLACK, 1, 1);
 8004eec:	2301      	movs	r3, #1
 8004eee:	425b      	negs	r3, r3
 8004ef0:	4ac8      	ldr	r2, [pc, #800]	@ (8005214 <main+0x70c>)
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	9102      	str	r1, [sp, #8]
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	9101      	str	r1, [sp, #4]
 8004efa:	2100      	movs	r1, #0
 8004efc:	9100      	str	r1, [sp, #0]
 8004efe:	216e      	movs	r1, #110	@ 0x6e
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7ff f85c 	bl	8003fbe <drawString>
				sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004f06:	4bbe      	ldr	r3, [pc, #760]	@ (8005200 <main+0x6f8>)
 8004f08:	695a      	ldr	r2, [r3, #20]
 8004f0a:	49c3      	ldr	r1, [pc, #780]	@ (8005218 <main+0x710>)
 8004f0c:	4bbe      	ldr	r3, [pc, #760]	@ (8005208 <main+0x700>)
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f009 ffd8 	bl	800eec4 <siprintf>
				drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004f14:	2301      	movs	r3, #1
 8004f16:	425b      	negs	r3, r3
 8004f18:	4abb      	ldr	r2, [pc, #748]	@ (8005208 <main+0x700>)
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	9102      	str	r1, [sp, #8]
 8004f1e:	2101      	movs	r1, #1
 8004f20:	9101      	str	r1, [sp, #4]
 8004f22:	2100      	movs	r1, #0
 8004f24:	9100      	str	r1, [sp, #0]
 8004f26:	2164      	movs	r1, #100	@ 0x64
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f7ff f848 	bl	8003fbe <drawString>
				sprintf(buffer2, "Old Lat: %d.%d",
						(int) (game.positions[game.numLocations - 1].lat),
 8004f2e:	4bb4      	ldr	r3, [pc, #720]	@ (8005200 <main+0x6f8>)
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	4bb2      	ldr	r3, [pc, #712]	@ (8005200 <main+0x6f8>)
 8004f36:	3203      	adds	r2, #3
 8004f38:	00d2      	lsls	r2, r2, #3
 8004f3a:	58d3      	ldr	r3, [r2, r3]
				sprintf(buffer2, "Old Lat: %d.%d",
 8004f3c:	1c18      	adds	r0, r3, #0
 8004f3e:	f7fc fc4b 	bl	80017d8 <__aeabi_f2iz>
 8004f42:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lat)
 8004f44:	4bae      	ldr	r3, [pc, #696]	@ (8005200 <main+0x6f8>)
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	1e5a      	subs	r2, r3, #1
 8004f4a:	4bad      	ldr	r3, [pc, #692]	@ (8005200 <main+0x6f8>)
 8004f4c:	3203      	adds	r2, #3
 8004f4e:	00d2      	lsls	r2, r2, #3
 8004f50:	58d3      	ldr	r3, [r2, r3]
										* 10000)) % 10000));
 8004f52:	49b2      	ldr	r1, [pc, #712]	@ (800521c <main+0x714>)
 8004f54:	1c18      	adds	r0, r3, #0
 8004f56:	f7fc f86b 	bl	8001030 <__aeabi_fmul>
 8004f5a:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lat)
 8004f5c:	1c18      	adds	r0, r3, #0
 8004f5e:	f7fc fc3b 	bl	80017d8 <__aeabi_f2iz>
 8004f62:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004f64:	49ae      	ldr	r1, [pc, #696]	@ (8005220 <main+0x718>)
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7fb fa64 	bl	8000434 <__aeabi_idivmod>
 8004f6c:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lat: %d.%d",
 8004f6e:	17da      	asrs	r2, r3, #31
 8004f70:	189b      	adds	r3, r3, r2
 8004f72:	4053      	eors	r3, r2
 8004f74:	49ab      	ldr	r1, [pc, #684]	@ (8005224 <main+0x71c>)
 8004f76:	48a4      	ldr	r0, [pc, #656]	@ (8005208 <main+0x700>)
 8004f78:	0022      	movs	r2, r4
 8004f7a:	f009 ffa3 	bl	800eec4 <siprintf>
				drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004f7e:	2301      	movs	r3, #1
 8004f80:	425b      	negs	r3, r3
 8004f82:	4aa1      	ldr	r2, [pc, #644]	@ (8005208 <main+0x700>)
 8004f84:	2101      	movs	r1, #1
 8004f86:	9102      	str	r1, [sp, #8]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	9101      	str	r1, [sp, #4]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	9100      	str	r1, [sp, #0]
 8004f90:	215a      	movs	r1, #90	@ 0x5a
 8004f92:	2000      	movs	r0, #0
 8004f94:	f7ff f813 	bl	8003fbe <drawString>
				sprintf(buffer2, "Old Lon: %d.%d",
						(int) (game.positions[game.numLocations - 1].lon),
 8004f98:	4b99      	ldr	r3, [pc, #612]	@ (8005200 <main+0x6f8>)
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	4a98      	ldr	r2, [pc, #608]	@ (8005200 <main+0x6f8>)
 8004fa0:	3303      	adds	r3, #3
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	18d3      	adds	r3, r2, r3
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
				sprintf(buffer2, "Old Lon: %d.%d",
 8004faa:	1c18      	adds	r0, r3, #0
 8004fac:	f7fc fc14 	bl	80017d8 <__aeabi_f2iz>
 8004fb0:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lon)
 8004fb2:	4b93      	ldr	r3, [pc, #588]	@ (8005200 <main+0x6f8>)
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	4a91      	ldr	r2, [pc, #580]	@ (8005200 <main+0x6f8>)
 8004fba:	3303      	adds	r3, #3
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	18d3      	adds	r3, r2, r3
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	681b      	ldr	r3, [r3, #0]
										* 10000)) % 10000));
 8004fc4:	4995      	ldr	r1, [pc, #596]	@ (800521c <main+0x714>)
 8004fc6:	1c18      	adds	r0, r3, #0
 8004fc8:	f7fc f832 	bl	8001030 <__aeabi_fmul>
 8004fcc:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lon)
 8004fce:	1c18      	adds	r0, r3, #0
 8004fd0:	f7fc fc02 	bl	80017d8 <__aeabi_f2iz>
 8004fd4:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004fd6:	4992      	ldr	r1, [pc, #584]	@ (8005220 <main+0x718>)
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7fb fa2b 	bl	8000434 <__aeabi_idivmod>
 8004fde:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lon: %d.%d",
 8004fe0:	17da      	asrs	r2, r3, #31
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	4053      	eors	r3, r2
 8004fe6:	4990      	ldr	r1, [pc, #576]	@ (8005228 <main+0x720>)
 8004fe8:	4887      	ldr	r0, [pc, #540]	@ (8005208 <main+0x700>)
 8004fea:	0022      	movs	r2, r4
 8004fec:	f009 ff6a 	bl	800eec4 <siprintf>
				drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	425b      	negs	r3, r3
 8004ff4:	4a84      	ldr	r2, [pc, #528]	@ (8005208 <main+0x700>)
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	9102      	str	r1, [sp, #8]
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	9101      	str	r1, [sp, #4]
 8004ffe:	2100      	movs	r1, #0
 8005000:	9100      	str	r1, [sp, #0]
 8005002:	2150      	movs	r1, #80	@ 0x50
 8005004:	2000      	movs	r0, #0
 8005006:	f7fe ffda 	bl	8003fbe <drawString>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 800500a:	4b88      	ldr	r3, [pc, #544]	@ (800522c <main+0x724>)
 800500c:	2102      	movs	r1, #2
 800500e:	0018      	movs	r0, r3
 8005010:	f004 fc36 	bl	8009880 <HAL_GPIO_ReadPin>
 8005014:	0003      	movs	r3, r0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d175      	bne.n	8005106 <main+0x5fe>
					if(GetJustLatLon().lat<2000.0f){
 800501a:	003b      	movs	r3, r7
 800501c:	0018      	movs	r0, r3
 800501e:	f002 f9f7 	bl	8007410 <GetJustLatLon>
 8005022:	003b      	movs	r3, r7
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4982      	ldr	r1, [pc, #520]	@ (8005230 <main+0x728>)
 8005028:	1c18      	adds	r0, r3, #0
 800502a:	f7fb fa59 	bl	80004e0 <__aeabi_fcmplt>
 800502e:	1e03      	subs	r3, r0, #0
 8005030:	d069      	beq.n	8005106 <main+0x5fe>
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8005032:	2408      	movs	r4, #8
 8005034:	193b      	adds	r3, r7, r4
 8005036:	0018      	movs	r0, r3
 8005038:	f002 f9ea 	bl	8007410 <GetJustLatLon>
 800503c:	193b      	adds	r3, r7, r4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1c18      	adds	r0, r3, #0
 8005042:	f7fc fbc9 	bl	80017d8 <__aeabi_f2iz>
 8005046:	0004      	movs	r4, r0
							abs(
									((int) ((GetJustLatLon().lat) * 10000))
 8005048:	2510      	movs	r5, #16
 800504a:	197b      	adds	r3, r7, r5
 800504c:	0018      	movs	r0, r3
 800504e:	f002 f9df 	bl	8007410 <GetJustLatLon>
 8005052:	197b      	adds	r3, r7, r5
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4971      	ldr	r1, [pc, #452]	@ (800521c <main+0x714>)
 8005058:	1c18      	adds	r0, r3, #0
 800505a:	f7fb ffe9 	bl	8001030 <__aeabi_fmul>
 800505e:	1c03      	adds	r3, r0, #0
 8005060:	1c18      	adds	r0, r3, #0
 8005062:	f7fc fbb9 	bl	80017d8 <__aeabi_f2iz>
 8005066:	0003      	movs	r3, r0
											% 10000));
 8005068:	496d      	ldr	r1, [pc, #436]	@ (8005220 <main+0x718>)
 800506a:	0018      	movs	r0, r3
 800506c:	f7fb f9e2 	bl	8000434 <__aeabi_idivmod>
 8005070:	000b      	movs	r3, r1
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8005072:	17da      	asrs	r2, r3, #31
 8005074:	189b      	adds	r3, r3, r2
 8005076:	4053      	eors	r3, r2
 8005078:	496e      	ldr	r1, [pc, #440]	@ (8005234 <main+0x72c>)
 800507a:	4863      	ldr	r0, [pc, #396]	@ (8005208 <main+0x700>)
 800507c:	0022      	movs	r2, r4
 800507e:	f009 ff21 	bl	800eec4 <siprintf>
					drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8005082:	2301      	movs	r3, #1
 8005084:	425b      	negs	r3, r3
 8005086:	4a60      	ldr	r2, [pc, #384]	@ (8005208 <main+0x700>)
 8005088:	2101      	movs	r1, #1
 800508a:	9102      	str	r1, [sp, #8]
 800508c:	2101      	movs	r1, #1
 800508e:	9101      	str	r1, [sp, #4]
 8005090:	2100      	movs	r1, #0
 8005092:	9100      	str	r1, [sp, #0]
 8005094:	2146      	movs	r1, #70	@ 0x46
 8005096:	2000      	movs	r0, #0
 8005098:	f7fe ff91 	bl	8003fbe <drawString>
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 800509c:	2418      	movs	r4, #24
 800509e:	193b      	adds	r3, r7, r4
 80050a0:	0018      	movs	r0, r3
 80050a2:	f002 f9b5 	bl	8007410 <GetJustLatLon>
 80050a6:	193b      	adds	r3, r7, r4
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	1c18      	adds	r0, r3, #0
 80050ac:	f7fc fb94 	bl	80017d8 <__aeabi_f2iz>
 80050b0:	0004      	movs	r4, r0
							abs(
									(int) (((GetJustLatLon().lon) * 10000))
 80050b2:	2520      	movs	r5, #32
 80050b4:	197b      	adds	r3, r7, r5
 80050b6:	0018      	movs	r0, r3
 80050b8:	f002 f9aa 	bl	8007410 <GetJustLatLon>
 80050bc:	197b      	adds	r3, r7, r5
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4956      	ldr	r1, [pc, #344]	@ (800521c <main+0x714>)
 80050c2:	1c18      	adds	r0, r3, #0
 80050c4:	f7fb ffb4 	bl	8001030 <__aeabi_fmul>
 80050c8:	1c03      	adds	r3, r0, #0
 80050ca:	1c18      	adds	r0, r3, #0
 80050cc:	f7fc fb84 	bl	80017d8 <__aeabi_f2iz>
 80050d0:	0003      	movs	r3, r0
											% 10000));
 80050d2:	4953      	ldr	r1, [pc, #332]	@ (8005220 <main+0x718>)
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7fb f9ad 	bl	8000434 <__aeabi_idivmod>
 80050da:	000b      	movs	r3, r1
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 80050dc:	17da      	asrs	r2, r3, #31
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	4053      	eors	r3, r2
 80050e2:	4955      	ldr	r1, [pc, #340]	@ (8005238 <main+0x730>)
 80050e4:	4848      	ldr	r0, [pc, #288]	@ (8005208 <main+0x700>)
 80050e6:	0022      	movs	r2, r4
 80050e8:	f009 feec 	bl	800eec4 <siprintf>
					drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 80050ec:	2301      	movs	r3, #1
 80050ee:	425b      	negs	r3, r3
 80050f0:	4a45      	ldr	r2, [pc, #276]	@ (8005208 <main+0x700>)
 80050f2:	2101      	movs	r1, #1
 80050f4:	9102      	str	r1, [sp, #8]
 80050f6:	2101      	movs	r1, #1
 80050f8:	9101      	str	r1, [sp, #4]
 80050fa:	2100      	movs	r1, #0
 80050fc:	9100      	str	r1, [sp, #0]
 80050fe:	213c      	movs	r1, #60	@ 0x3c
 8005100:	2000      	movs	r0, #0
 8005102:	f7fe ff5c 	bl	8003fbe <drawString>
				}
				}
				updateScreen = 0;
 8005106:	4b3c      	ldr	r3, [pc, #240]	@ (80051f8 <main+0x6f0>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 800510c:	4b4b      	ldr	r3, [pc, #300]	@ (800523c <main+0x734>)
 800510e:	2104      	movs	r1, #4
 8005110:	0018      	movs	r0, r3
 8005112:	f004 fbb5 	bl	8009880 <HAL_GPIO_ReadPin>
 8005116:	0003      	movs	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d111      	bne.n	8005140 <main+0x638>
				effect = MenuBeep;
 800511c:	4b48      	ldr	r3, [pc, #288]	@ (8005240 <main+0x738>)
 800511e:	2200      	movs	r2, #0
 8005120:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8005122:	4b47      	ldr	r3, [pc, #284]	@ (8005240 <main+0x738>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 fc9c 	bl	8005a64 <PlayEffect>

				currentMenu = Main;
 800512c:	4b45      	ldr	r3, [pc, #276]	@ (8005244 <main+0x73c>)
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8005132:	4b45      	ldr	r3, [pc, #276]	@ (8005248 <main+0x740>)
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8005138:	2000      	movs	r0, #0
 800513a:	f7ff f885 	bl	8004248 <fillScreen>
			} else
				canChange = 1;

			break;
 800513e:	e166      	b.n	800540e <main+0x906>
				canChange = 1;
 8005140:	4b41      	ldr	r3, [pc, #260]	@ (8005248 <main+0x740>)
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
			break;
 8005146:	e162      	b.n	800540e <main+0x906>
			//{
			//SendData();
			//ReceiveData();
			//}

			if (updateScreen >= 2) {
 8005148:	4b2b      	ldr	r3, [pc, #172]	@ (80051f8 <main+0x6f0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d800      	bhi.n	8005152 <main+0x64a>
 8005150:	e138      	b.n	80053c4 <main+0x8bc>
				updateScreen = 0;
 8005152:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <main+0x6f0>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
				drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 8005158:	2301      	movs	r3, #1
 800515a:	425b      	negs	r3, r3
 800515c:	4a3b      	ldr	r2, [pc, #236]	@ (800524c <main+0x744>)
 800515e:	2101      	movs	r1, #1
 8005160:	9102      	str	r1, [sp, #8]
 8005162:	2101      	movs	r1, #1
 8005164:	9101      	str	r1, [sp, #4]
 8005166:	2100      	movs	r1, #0
 8005168:	9100      	str	r1, [sp, #0]
 800516a:	2196      	movs	r1, #150	@ 0x96
 800516c:	2000      	movs	r0, #0
 800516e:	f7fe ff26 	bl	8003fbe <drawString>
				sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 8005172:	4a23      	ldr	r2, [pc, #140]	@ (8005200 <main+0x6f8>)
 8005174:	2392      	movs	r3, #146	@ 0x92
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	58d2      	ldr	r2, [r2, r3]
 800517a:	4935      	ldr	r1, [pc, #212]	@ (8005250 <main+0x748>)
 800517c:	4b22      	ldr	r3, [pc, #136]	@ (8005208 <main+0x700>)
 800517e:	0018      	movs	r0, r3
 8005180:	f009 fea0 	bl	800eec4 <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8005184:	2301      	movs	r3, #1
 8005186:	425b      	negs	r3, r3
 8005188:	4a1f      	ldr	r2, [pc, #124]	@ (8005208 <main+0x700>)
 800518a:	2101      	movs	r1, #1
 800518c:	9102      	str	r1, [sp, #8]
 800518e:	2101      	movs	r1, #1
 8005190:	9101      	str	r1, [sp, #4]
 8005192:	2100      	movs	r1, #0
 8005194:	9100      	str	r1, [sp, #0]
 8005196:	2182      	movs	r1, #130	@ 0x82
 8005198:	2000      	movs	r0, #0
 800519a:	f7fe ff10 	bl	8003fbe <drawString>
				drawString(0, 110, "UPLOAD DATA", WHITE, BLACK, 1, 1);
 800519e:	2301      	movs	r3, #1
 80051a0:	425b      	negs	r3, r3
 80051a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005254 <main+0x74c>)
 80051a4:	2101      	movs	r1, #1
 80051a6:	9102      	str	r1, [sp, #8]
 80051a8:	2101      	movs	r1, #1
 80051aa:	9101      	str	r1, [sp, #4]
 80051ac:	2100      	movs	r1, #0
 80051ae:	9100      	str	r1, [sp, #0]
 80051b0:	216e      	movs	r1, #110	@ 0x6e
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7fe ff03 	bl	8003fbe <drawString>
				if (editDifficulty) {
 80051b8:	4b27      	ldr	r3, [pc, #156]	@ (8005258 <main+0x750>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d100      	bne.n	80051c2 <main+0x6ba>
 80051c0:	e097      	b.n	80052f2 <main+0x7ea>
					//Editing difficulty
					drawLine(0, 125, 128, 125, WHITE);
 80051c2:	4b26      	ldr	r3, [pc, #152]	@ (800525c <main+0x754>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	237d      	movs	r3, #125	@ 0x7d
 80051c8:	2280      	movs	r2, #128	@ 0x80
 80051ca:	217d      	movs	r1, #125	@ 0x7d
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7fe fe66 	bl	8003e9e <drawLine>
					//GET OUT when the center button is pressed!
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 80051d2:	4b16      	ldr	r3, [pc, #88]	@ (800522c <main+0x724>)
 80051d4:	2102      	movs	r1, #2
 80051d6:	0018      	movs	r0, r3
 80051d8:	f004 fb52 	bl	8009880 <HAL_GPIO_ReadPin>
 80051dc:	1e03      	subs	r3, r0, #0
 80051de:	d03f      	beq.n	8005260 <main+0x758>
						editDifficulty = 0;
 80051e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <main+0x750>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
						drawLine(0, 125, 128, 125, BLACK);
 80051e6:	2300      	movs	r3, #0
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	237d      	movs	r3, #125	@ 0x7d
 80051ec:	2280      	movs	r2, #128	@ 0x80
 80051ee:	217d      	movs	r1, #125	@ 0x7d
 80051f0:	2000      	movs	r0, #0
 80051f2:	f7fe fe54 	bl	8003e9e <drawLine>
 80051f6:	e05a      	b.n	80052ae <main+0x7a6>
 80051f8:	2000028c 	.word	0x2000028c
 80051fc:	08011678 	.word	0x08011678
 8005200:	20000298 	.word	0x20000298
 8005204:	08011680 	.word	0x08011680
 8005208:	20001208 	.word	0x20001208
 800520c:	0801168c 	.word	0x0801168c
 8005210:	0801169c 	.word	0x0801169c
 8005214:	080116ac 	.word	0x080116ac
 8005218:	080116b8 	.word	0x080116b8
 800521c:	461c4000 	.word	0x461c4000
 8005220:	00002710 	.word	0x00002710
 8005224:	080116c8 	.word	0x080116c8
 8005228:	080116d8 	.word	0x080116d8
 800522c:	50000800 	.word	0x50000800
 8005230:	44fa0000 	.word	0x44fa0000
 8005234:	080116e8 	.word	0x080116e8
 8005238:	080116f4 	.word	0x080116f4
 800523c:	50000400 	.word	0x50000400
 8005240:	20000288 	.word	0x20000288
 8005244:	20000002 	.word	0x20000002
 8005248:	20000003 	.word	0x20000003
 800524c:	08011700 	.word	0x08011700
 8005250:	0801170c 	.word	0x0801170c
 8005254:	08011718 	.word	0x08011718
 8005258:	20001274 	.word	0x20001274
 800525c:	0000ffff 	.word	0x0000ffff
					}
					//Right increments the goal
					else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8005260:	4b6f      	ldr	r3, [pc, #444]	@ (8005420 <main+0x918>)
 8005262:	2104      	movs	r1, #4
 8005264:	0018      	movs	r0, r3
 8005266:	f004 fb0b 	bl	8009880 <HAL_GPIO_ReadPin>
 800526a:	1e03      	subs	r3, r0, #0
 800526c:	d00b      	beq.n	8005286 <main+0x77e>
						game.dailyGoal += 1000;
 800526e:	4a6d      	ldr	r2, [pc, #436]	@ (8005424 <main+0x91c>)
 8005270:	2392      	movs	r3, #146	@ 0x92
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	58d3      	ldr	r3, [r2, r3]
 8005276:	22fa      	movs	r2, #250	@ 0xfa
 8005278:	0092      	lsls	r2, r2, #2
 800527a:	1899      	adds	r1, r3, r2
 800527c:	4a69      	ldr	r2, [pc, #420]	@ (8005424 <main+0x91c>)
 800527e:	2392      	movs	r3, #146	@ 0x92
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	50d1      	str	r1, [r2, r3]
 8005284:	e013      	b.n	80052ae <main+0x7a6>
					}
					//Left decrements the goal
					else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8005286:	2380      	movs	r3, #128	@ 0x80
 8005288:	011a      	lsls	r2, r3, #4
 800528a:	23a0      	movs	r3, #160	@ 0xa0
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	0011      	movs	r1, r2
 8005290:	0018      	movs	r0, r3
 8005292:	f004 faf5 	bl	8009880 <HAL_GPIO_ReadPin>
 8005296:	1e03      	subs	r3, r0, #0
 8005298:	d009      	beq.n	80052ae <main+0x7a6>
						game.dailyGoal -= 1000;
 800529a:	4a62      	ldr	r2, [pc, #392]	@ (8005424 <main+0x91c>)
 800529c:	2392      	movs	r3, #146	@ 0x92
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	58d3      	ldr	r3, [r2, r3]
 80052a2:	4a61      	ldr	r2, [pc, #388]	@ (8005428 <main+0x920>)
 80052a4:	1899      	adds	r1, r3, r2
 80052a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005424 <main+0x91c>)
 80052a8:	2392      	movs	r3, #146	@ 0x92
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	50d1      	str	r1, [r2, r3]
					}

					if (game.dailyGoal >= 999000) {
 80052ae:	4a5d      	ldr	r2, [pc, #372]	@ (8005424 <main+0x91c>)
 80052b0:	2392      	movs	r3, #146	@ 0x92
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	58d3      	ldr	r3, [r2, r3]
 80052b6:	4a5d      	ldr	r2, [pc, #372]	@ (800542c <main+0x924>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d905      	bls.n	80052c8 <main+0x7c0>
						game.dailyGoal = 0;
 80052bc:	4a59      	ldr	r2, [pc, #356]	@ (8005424 <main+0x91c>)
 80052be:	2392      	movs	r3, #146	@ 0x92
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	2100      	movs	r1, #0
 80052c4:	50d1      	str	r1, [r2, r3]
 80052c6:	e00a      	b.n	80052de <main+0x7d6>
					} else if (game.dailyGoal <= 0) {
 80052c8:	4a56      	ldr	r2, [pc, #344]	@ (8005424 <main+0x91c>)
 80052ca:	2392      	movs	r3, #146	@ 0x92
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	58d3      	ldr	r3, [r2, r3]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <main+0x7d6>
						game.dailyGoal = 999000;
 80052d4:	4a53      	ldr	r2, [pc, #332]	@ (8005424 <main+0x91c>)
 80052d6:	2392      	movs	r3, #146	@ 0x92
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4955      	ldr	r1, [pc, #340]	@ (8005430 <main+0x928>)
 80052dc:	50d1      	str	r1, [r2, r3]
					}
					sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 80052de:	4a51      	ldr	r2, [pc, #324]	@ (8005424 <main+0x91c>)
 80052e0:	2392      	movs	r3, #146	@ 0x92
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	58d2      	ldr	r2, [r2, r3]
 80052e6:	4953      	ldr	r1, [pc, #332]	@ (8005434 <main+0x92c>)
 80052e8:	4b53      	ldr	r3, [pc, #332]	@ (8005438 <main+0x930>)
 80052ea:	0018      	movs	r0, r3
 80052ec:	f009 fdea 	bl	800eec4 <siprintf>
 80052f0:	e068      	b.n	80053c4 <main+0x8bc>

				} else if (userUpload) {
 80052f2:	4b52      	ldr	r3, [pc, #328]	@ (800543c <main+0x934>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <main+0x806>
					FlashWrite();
 80052fa:	f000 fe97 	bl	800602c <FlashWrite>

					userUpload = 0;
 80052fe:	4b4f      	ldr	r3, [pc, #316]	@ (800543c <main+0x934>)
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
					SendData();
 8005304:	f001 fb88 	bl	8006a18 <SendData>
					ReceiveData();
 8005308:	f001 fc4e 	bl	8006ba8 <ReceiveData>
 800530c:	e05a      	b.n	80053c4 <main+0x8bc>
				} else {
					//Difficulty
					if (currentSetting == 0) {
 800530e:	4b4c      	ldr	r3, [pc, #304]	@ (8005440 <main+0x938>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d110      	bne.n	8005338 <main+0x830>
						//Try to underline the option being selected
						drawLine(0, 125, 20, 125, WHITE);
 8005316:	4b4b      	ldr	r3, [pc, #300]	@ (8005444 <main+0x93c>)
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	237d      	movs	r3, #125	@ 0x7d
 800531c:	2214      	movs	r2, #20
 800531e:	217d      	movs	r1, #125	@ 0x7d
 8005320:	2000      	movs	r0, #0
 8005322:	f7fe fdbc 	bl	8003e9e <drawLine>
						//Then erase the highlight under the other option not being selected
						drawLine(0, 105, 20, 105, BLACK);
 8005326:	2300      	movs	r3, #0
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	2369      	movs	r3, #105	@ 0x69
 800532c:	2214      	movs	r2, #20
 800532e:	2169      	movs	r1, #105	@ 0x69
 8005330:	2000      	movs	r0, #0
 8005332:	f7fe fdb4 	bl	8003e9e <drawLine>
 8005336:	e013      	b.n	8005360 <main+0x858>
					}
					//Upload
					else if (currentSetting == 1) {
 8005338:	4b41      	ldr	r3, [pc, #260]	@ (8005440 <main+0x938>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10f      	bne.n	8005360 <main+0x858>
						drawLine(0, 105, 20, 105, WHITE);
 8005340:	4b40      	ldr	r3, [pc, #256]	@ (8005444 <main+0x93c>)
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	2369      	movs	r3, #105	@ 0x69
 8005346:	2214      	movs	r2, #20
 8005348:	2169      	movs	r1, #105	@ 0x69
 800534a:	2000      	movs	r0, #0
 800534c:	f7fe fda7 	bl	8003e9e <drawLine>
						drawLine(0, 125, 20, 125, BLACK);
 8005350:	2300      	movs	r3, #0
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	237d      	movs	r3, #125	@ 0x7d
 8005356:	2214      	movs	r2, #20
 8005358:	217d      	movs	r1, #125	@ 0x7d
 800535a:	2000      	movs	r0, #0
 800535c:	f7fe fd9f 	bl	8003e9e <drawLine>
					}
					//IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8005360:	4b2f      	ldr	r3, [pc, #188]	@ (8005420 <main+0x918>)
 8005362:	2104      	movs	r1, #4
 8005364:	0018      	movs	r0, r3
 8005366:	f004 fa8b 	bl	8009880 <HAL_GPIO_ReadPin>
 800536a:	0003      	movs	r3, r0
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10c      	bne.n	800538a <main+0x882>
						++currentSetting;
 8005370:	4b33      	ldr	r3, [pc, #204]	@ (8005440 <main+0x938>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	4b32      	ldr	r3, [pc, #200]	@ (8005440 <main+0x938>)
 8005378:	601a      	str	r2, [r3, #0]
						if (currentSetting > 1)
 800537a:	4b31      	ldr	r3, [pc, #196]	@ (8005440 <main+0x938>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d920      	bls.n	80053c4 <main+0x8bc>
							currentSetting = 0;
 8005382:	4b2f      	ldr	r3, [pc, #188]	@ (8005440 <main+0x938>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e01c      	b.n	80053c4 <main+0x8bc>
					}
					//PD6=Center button
					else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 800538a:	4b2f      	ldr	r3, [pc, #188]	@ (8005448 <main+0x940>)
 800538c:	2102      	movs	r1, #2
 800538e:	0018      	movs	r0, r3
 8005390:	f004 fa76 	bl	8009880 <HAL_GPIO_ReadPin>
 8005394:	1e03      	subs	r3, r0, #0
 8005396:	d007      	beq.n	80053a8 <main+0x8a0>
							&& currentSetting == 0) {
 8005398:	4b29      	ldr	r3, [pc, #164]	@ (8005440 <main+0x938>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <main+0x8a0>
						editDifficulty = 1;
 80053a0:	4b2a      	ldr	r3, [pc, #168]	@ (800544c <main+0x944>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	e00d      	b.n	80053c4 <main+0x8bc>
					} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 80053a8:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <main+0x940>)
 80053aa:	2102      	movs	r1, #2
 80053ac:	0018      	movs	r0, r3
 80053ae:	f004 fa67 	bl	8009880 <HAL_GPIO_ReadPin>
 80053b2:	1e03      	subs	r3, r0, #0
 80053b4:	d006      	beq.n	80053c4 <main+0x8bc>
							&& currentSetting == 1) {
 80053b6:	4b22      	ldr	r3, [pc, #136]	@ (8005440 <main+0x938>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <main+0x8bc>
						userUpload = 1;
 80053be:	4b1f      	ldr	r3, [pc, #124]	@ (800543c <main+0x934>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
					}
				}
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	011a      	lsls	r2, r3, #4
 80053c8:	23a0      	movs	r3, #160	@ 0xa0
 80053ca:	05db      	lsls	r3, r3, #23
 80053cc:	0011      	movs	r1, r2
 80053ce:	0018      	movs	r0, r3
 80053d0:	f004 fa56 	bl	8009880 <HAL_GPIO_ReadPin>
 80053d4:	0003      	movs	r3, r0
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d115      	bne.n	8005406 <main+0x8fe>
					&& !editDifficulty) {
 80053da:	4b1c      	ldr	r3, [pc, #112]	@ (800544c <main+0x944>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d111      	bne.n	8005406 <main+0x8fe>
				effect = MenuBeep;
 80053e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <main+0x948>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80053e8:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <main+0x948>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 fb39 	bl	8005a64 <PlayEffect>

				currentMenu = Main;
 80053f2:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <main+0x94c>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 80053f8:	4b17      	ldr	r3, [pc, #92]	@ (8005458 <main+0x950>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fe ff22 	bl	8004248 <fillScreen>
			} else
				canChange = 1;
			break;
 8005404:	e002      	b.n	800540c <main+0x904>
				canChange = 1;
 8005406:	4b14      	ldr	r3, [pc, #80]	@ (8005458 <main+0x950>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
			break;
 800540c:	46c0      	nop			@ (mov r8, r8)

		}
		totalFrames++;
 800540e:	4b13      	ldr	r3, [pc, #76]	@ (800545c <main+0x954>)
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	3301      	adds	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	4b11      	ldr	r3, [pc, #68]	@ (800545c <main+0x954>)
 8005418:	801a      	strh	r2, [r3, #0]
		if ((totalFrames) % 200 == 0){
 800541a:	f7ff fb91 	bl	8004b40 <main+0x38>
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	50000400 	.word	0x50000400
 8005424:	20000298 	.word	0x20000298
 8005428:	fffffc18 	.word	0xfffffc18
 800542c:	000f3e57 	.word	0x000f3e57
 8005430:	000f3e58 	.word	0x000f3e58
 8005434:	08011724 	.word	0x08011724
 8005438:	20001208 	.word	0x20001208
 800543c:	20001278 	.word	0x20001278
 8005440:	20001270 	.word	0x20001270
 8005444:	0000ffff 	.word	0x0000ffff
 8005448:	50000800 	.word	0x50000800
 800544c:	20001274 	.word	0x20001274
 8005450:	20000288 	.word	0x20000288
 8005454:	20000002 	.word	0x20000002
 8005458:	20000003 	.word	0x20000003
 800545c:	2000043c 	.word	0x2000043c

08005460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b095      	sub	sp, #84	@ 0x54
 8005464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005466:	2414      	movs	r4, #20
 8005468:	193b      	adds	r3, r7, r4
 800546a:	0018      	movs	r0, r3
 800546c:	233c      	movs	r3, #60	@ 0x3c
 800546e:	001a      	movs	r2, r3
 8005470:	2100      	movs	r1, #0
 8005472:	f009 fd95 	bl	800efa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005476:	1d3b      	adds	r3, r7, #4
 8005478:	0018      	movs	r0, r3
 800547a:	2310      	movs	r3, #16
 800547c:	001a      	movs	r2, r3
 800547e:	2100      	movs	r1, #0
 8005480:	f009 fd8e 	bl	800efa0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005484:	2380      	movs	r3, #128	@ 0x80
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	0018      	movs	r0, r3
 800548a:	f005 f8ab 	bl	800a5e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800548e:	193b      	adds	r3, r7, r4
 8005490:	220a      	movs	r2, #10
 8005492:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005494:	193b      	adds	r3, r7, r4
 8005496:	2280      	movs	r2, #128	@ 0x80
 8005498:	0052      	lsls	r2, r2, #1
 800549a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800549c:	0021      	movs	r1, r4
 800549e:	187b      	adds	r3, r7, r1
 80054a0:	2200      	movs	r2, #0
 80054a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	2240      	movs	r2, #64	@ 0x40
 80054a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	2201      	movs	r2, #1
 80054ae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	2202      	movs	r2, #2
 80054b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	2202      	movs	r2, #2
 80054ba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	2208      	movs	r2, #8
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	2280      	movs	r2, #128	@ 0x80
 80054cc:	0292      	lsls	r2, r2, #10
 80054ce:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	2280      	movs	r2, #128	@ 0x80
 80054d4:	0492      	lsls	r2, r2, #18
 80054d6:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	2280      	movs	r2, #128	@ 0x80
 80054dc:	0592      	lsls	r2, r2, #22
 80054de:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	0018      	movs	r0, r3
 80054e4:	f005 f8ca 	bl	800a67c <HAL_RCC_OscConfig>
 80054e8:	1e03      	subs	r3, r0, #0
 80054ea:	d001      	beq.n	80054f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80054ec:	f002 f812 	bl	8007514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	2207      	movs	r2, #7
 80054f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	2202      	movs	r2, #2
 80054fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	2200      	movs	r2, #0
 8005506:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005508:	1d3b      	adds	r3, r7, #4
 800550a:	2102      	movs	r1, #2
 800550c:	0018      	movs	r0, r3
 800550e:	f005 fc15 	bl	800ad3c <HAL_RCC_ClockConfig>
 8005512:	1e03      	subs	r3, r0, #0
 8005514:	d001      	beq.n	800551a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005516:	f001 fffd 	bl	8007514 <Error_Handler>
  }
}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b015      	add	sp, #84	@ 0x54
 8005520:	bd90      	pop	{r4, r7, pc}
	...

08005524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005528:	4b1b      	ldr	r3, [pc, #108]	@ (8005598 <MX_I2C1_Init+0x74>)
 800552a:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <MX_I2C1_Init+0x78>)
 800552c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800552e:	4b1a      	ldr	r3, [pc, #104]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005530:	4a1b      	ldr	r2, [pc, #108]	@ (80055a0 <MX_I2C1_Init+0x7c>)
 8005532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005534:	4b18      	ldr	r3, [pc, #96]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800553a:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <MX_I2C1_Init+0x74>)
 800553c:	2201      	movs	r2, #1
 800553e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005540:	4b15      	ldr	r3, [pc, #84]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005542:	2200      	movs	r2, #0
 8005544:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005546:	4b14      	ldr	r3, [pc, #80]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005548:	2200      	movs	r2, #0
 800554a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800554c:	4b12      	ldr	r3, [pc, #72]	@ (8005598 <MX_I2C1_Init+0x74>)
 800554e:	2200      	movs	r2, #0
 8005550:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005552:	4b11      	ldr	r3, [pc, #68]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005554:	2200      	movs	r2, #0
 8005556:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005558:	4b0f      	ldr	r3, [pc, #60]	@ (8005598 <MX_I2C1_Init+0x74>)
 800555a:	2200      	movs	r2, #0
 800555c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800555e:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005560:	0018      	movs	r0, r3
 8005562:	f004 f9fb 	bl	800995c <HAL_I2C_Init>
 8005566:	1e03      	subs	r3, r0, #0
 8005568:	d001      	beq.n	800556e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800556a:	f001 ffd3 	bl	8007514 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800556e:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005570:	2100      	movs	r1, #0
 8005572:	0018      	movs	r0, r3
 8005574:	f004 ff9e 	bl	800a4b4 <HAL_I2CEx_ConfigAnalogFilter>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d001      	beq.n	8005580 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800557c:	f001 ffca 	bl	8007514 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <MX_I2C1_Init+0x74>)
 8005582:	2100      	movs	r1, #0
 8005584:	0018      	movs	r0, r3
 8005586:	f004 ffe1 	bl	800a54c <HAL_I2CEx_ConfigDigitalFilter>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d001      	beq.n	8005592 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800558e:	f001 ffc1 	bl	8007514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	2000127c 	.word	0x2000127c
 800559c:	40005400 	.word	0x40005400
 80055a0:	10b17db5 	.word	0x10b17db5

080055a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80055a8:	4b13      	ldr	r3, [pc, #76]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055aa:	4a14      	ldr	r2, [pc, #80]	@ (80055fc <MX_RTC_Init+0x58>)
 80055ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80055ae:	4b12      	ldr	r3, [pc, #72]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80055b4:	4b10      	ldr	r3, [pc, #64]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055b6:	227f      	movs	r2, #127	@ 0x7f
 80055b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80055ba:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055bc:	22ff      	movs	r2, #255	@ 0xff
 80055be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80055c0:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80055c6:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80055d2:	4b09      	ldr	r3, [pc, #36]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055d4:	2280      	movs	r2, #128	@ 0x80
 80055d6:	05d2      	lsls	r2, r2, #23
 80055d8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80055da:	4b07      	ldr	r3, [pc, #28]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055dc:	2200      	movs	r2, #0
 80055de:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <MX_RTC_Init+0x54>)
 80055e2:	0018      	movs	r0, r3
 80055e4:	f005 ff90 	bl	800b508 <HAL_RTC_Init>
 80055e8:	1e03      	subs	r3, r0, #0
 80055ea:	d001      	beq.n	80055f0 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80055ec:	f001 ff92 	bl	8007514 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80055f0:	46c0      	nop			@ (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	200012d0 	.word	0x200012d0
 80055fc:	40002800 	.word	0x40002800

08005600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005604:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005606:	4a1d      	ldr	r2, [pc, #116]	@ (800567c <MX_SPI1_Init+0x7c>)
 8005608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800560a:	4b1b      	ldr	r3, [pc, #108]	@ (8005678 <MX_SPI1_Init+0x78>)
 800560c:	2282      	movs	r2, #130	@ 0x82
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8005612:	4b19      	ldr	r3, [pc, #100]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005614:	2280      	movs	r2, #128	@ 0x80
 8005616:	0212      	lsls	r2, r2, #8
 8005618:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800561a:	4b17      	ldr	r3, [pc, #92]	@ (8005678 <MX_SPI1_Init+0x78>)
 800561c:	22e0      	movs	r2, #224	@ 0xe0
 800561e:	00d2      	lsls	r2, r2, #3
 8005620:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005622:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005624:	2200      	movs	r2, #0
 8005626:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005628:	4b13      	ldr	r3, [pc, #76]	@ (8005678 <MX_SPI1_Init+0x78>)
 800562a:	2200      	movs	r2, #0
 800562c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800562e:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005630:	2280      	movs	r2, #128	@ 0x80
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005636:	4b10      	ldr	r3, [pc, #64]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005638:	2220      	movs	r2, #32
 800563a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800563c:	4b0e      	ldr	r3, [pc, #56]	@ (8005678 <MX_SPI1_Init+0x78>)
 800563e:	2200      	movs	r2, #0
 8005640:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005644:	2200      	movs	r2, #0
 8005646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005648:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <MX_SPI1_Init+0x78>)
 800564a:	2200      	movs	r2, #0
 800564c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800564e:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005650:	2207      	movs	r2, #7
 8005652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005654:	4b08      	ldr	r3, [pc, #32]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800565a:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <MX_SPI1_Init+0x78>)
 800565c:	2208      	movs	r2, #8
 800565e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <MX_SPI1_Init+0x78>)
 8005662:	0018      	movs	r0, r3
 8005664:	f006 f89e 	bl	800b7a4 <HAL_SPI_Init>
 8005668:	1e03      	subs	r3, r0, #0
 800566a:	d001      	beq.n	8005670 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800566c:	f001 ff52 	bl	8007514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	200012fc 	.word	0x200012fc
 800567c:	40013000 	.word	0x40013000

08005680 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b094      	sub	sp, #80	@ 0x50
 8005684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005686:	2334      	movs	r3, #52	@ 0x34
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	0018      	movs	r0, r3
 800568c:	231c      	movs	r3, #28
 800568e:	001a      	movs	r2, r3
 8005690:	2100      	movs	r1, #0
 8005692:	f009 fc85 	bl	800efa0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005696:	003b      	movs	r3, r7
 8005698:	0018      	movs	r0, r3
 800569a:	2334      	movs	r3, #52	@ 0x34
 800569c:	001a      	movs	r2, r3
 800569e:	2100      	movs	r1, #0
 80056a0:	f009 fc7e 	bl	800efa0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80056a4:	4b37      	ldr	r3, [pc, #220]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056a6:	4a38      	ldr	r2, [pc, #224]	@ (8005788 <MX_TIM17_Init+0x108>)
 80056a8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80056aa:	4b36      	ldr	r3, [pc, #216]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056b0:	4b34      	ldr	r3, [pc, #208]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80056b6:	4b33      	ldr	r3, [pc, #204]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056b8:	4a34      	ldr	r2, [pc, #208]	@ (800578c <MX_TIM17_Init+0x10c>)
 80056ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056bc:	4b31      	ldr	r3, [pc, #196]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056be:	2200      	movs	r2, #0
 80056c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80056c2:	4b30      	ldr	r3, [pc, #192]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80056ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056d0:	0018      	movs	r0, r3
 80056d2:	f006 fbf5 	bl	800bec0 <HAL_TIM_Base_Init>
 80056d6:	1e03      	subs	r3, r0, #0
 80056d8:	d001      	beq.n	80056de <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80056da:	f001 ff1b 	bl	8007514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80056de:	4b29      	ldr	r3, [pc, #164]	@ (8005784 <MX_TIM17_Init+0x104>)
 80056e0:	0018      	movs	r0, r3
 80056e2:	f006 fc45 	bl	800bf70 <HAL_TIM_PWM_Init>
 80056e6:	1e03      	subs	r3, r0, #0
 80056e8:	d001      	beq.n	80056ee <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80056ea:	f001 ff13 	bl	8007514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056ee:	2134      	movs	r1, #52	@ 0x34
 80056f0:	187b      	adds	r3, r7, r1
 80056f2:	2260      	movs	r2, #96	@ 0x60
 80056f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	2200      	movs	r2, #0
 80056fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056fc:	187b      	adds	r3, r7, r1
 80056fe:	2200      	movs	r2, #0
 8005700:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005702:	187b      	adds	r3, r7, r1
 8005704:	2200      	movs	r2, #0
 8005706:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005708:	187b      	adds	r3, r7, r1
 800570a:	2200      	movs	r2, #0
 800570c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800570e:	187b      	adds	r3, r7, r1
 8005710:	2200      	movs	r2, #0
 8005712:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005714:	187b      	adds	r3, r7, r1
 8005716:	2200      	movs	r2, #0
 8005718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800571a:	1879      	adds	r1, r7, r1
 800571c:	4b19      	ldr	r3, [pc, #100]	@ (8005784 <MX_TIM17_Init+0x104>)
 800571e:	2200      	movs	r2, #0
 8005720:	0018      	movs	r0, r3
 8005722:	f006 fe01 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 8005726:	1e03      	subs	r3, r0, #0
 8005728:	d001      	beq.n	800572e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800572a:	f001 fef3 	bl	8007514 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800572e:	003b      	movs	r3, r7
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005734:	003b      	movs	r3, r7
 8005736:	2200      	movs	r2, #0
 8005738:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800573a:	003b      	movs	r3, r7
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005740:	003b      	movs	r3, r7
 8005742:	2200      	movs	r2, #0
 8005744:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005746:	003b      	movs	r3, r7
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800574c:	003b      	movs	r3, r7
 800574e:	2280      	movs	r2, #128	@ 0x80
 8005750:	0192      	lsls	r2, r2, #6
 8005752:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005754:	003b      	movs	r3, r7
 8005756:	2200      	movs	r2, #0
 8005758:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800575a:	003b      	movs	r3, r7
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005760:	003a      	movs	r2, r7
 8005762:	4b08      	ldr	r3, [pc, #32]	@ (8005784 <MX_TIM17_Init+0x104>)
 8005764:	0011      	movs	r1, r2
 8005766:	0018      	movs	r0, r3
 8005768:	f007 fa5e 	bl	800cc28 <HAL_TIMEx_ConfigBreakDeadTime>
 800576c:	1e03      	subs	r3, r0, #0
 800576e:	d001      	beq.n	8005774 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8005770:	f001 fed0 	bl	8007514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005774:	4b03      	ldr	r3, [pc, #12]	@ (8005784 <MX_TIM17_Init+0x104>)
 8005776:	0018      	movs	r0, r3
 8005778:	f002 fc74 	bl	8008064 <HAL_TIM_MspPostInit>

}
 800577c:	46c0      	nop			@ (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b014      	add	sp, #80	@ 0x50
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20001360 	.word	0x20001360
 8005788:	40014800 	.word	0x40014800
 800578c:	0000ffff 	.word	0x0000ffff

08005790 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005794:	4b23      	ldr	r3, [pc, #140]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 8005796:	4a24      	ldr	r2, [pc, #144]	@ (8005828 <MX_USART1_UART_Init+0x98>)
 8005798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800579a:	4b22      	ldr	r3, [pc, #136]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 800579c:	2296      	movs	r2, #150	@ 0x96
 800579e:	0192      	lsls	r2, r2, #6
 80057a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057a2:	4b20      	ldr	r3, [pc, #128]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057b6:	220c      	movs	r2, #12
 80057b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80057c0:	4b18      	ldr	r3, [pc, #96]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057c6:	4b17      	ldr	r3, [pc, #92]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80057cc:	4b15      	ldr	r3, [pc, #84]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057d2:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057d8:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057da:	0018      	movs	r0, r3
 80057dc:	f007 fac0 	bl	800cd60 <HAL_UART_Init>
 80057e0:	1e03      	subs	r3, r0, #0
 80057e2:	d001      	beq.n	80057e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80057e4:	f001 fe96 	bl	8007514 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057ea:	2100      	movs	r1, #0
 80057ec:	0018      	movs	r0, r3
 80057ee:	f008 fa5b 	bl	800dca8 <HAL_UARTEx_SetTxFifoThreshold>
 80057f2:	1e03      	subs	r3, r0, #0
 80057f4:	d001      	beq.n	80057fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80057f6:	f001 fe8d 	bl	8007514 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 80057fc:	2100      	movs	r1, #0
 80057fe:	0018      	movs	r0, r3
 8005800:	f008 fa92 	bl	800dd28 <HAL_UARTEx_SetRxFifoThreshold>
 8005804:	1e03      	subs	r3, r0, #0
 8005806:	d001      	beq.n	800580c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005808:	f001 fe84 	bl	8007514 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <MX_USART1_UART_Init+0x94>)
 800580e:	0018      	movs	r0, r3
 8005810:	f008 fa10 	bl	800dc34 <HAL_UARTEx_DisableFifoMode>
 8005814:	1e03      	subs	r3, r0, #0
 8005816:	d001      	beq.n	800581c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005818:	f001 fe7c 	bl	8007514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	200013ac 	.word	0x200013ac
 8005828:	40013800 	.word	0x40013800

0800582c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005830:	4b23      	ldr	r3, [pc, #140]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005832:	4a24      	ldr	r2, [pc, #144]	@ (80058c4 <MX_USART2_UART_Init+0x98>)
 8005834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005836:	4b22      	ldr	r3, [pc, #136]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005838:	22e1      	movs	r2, #225	@ 0xe1
 800583a:	0252      	lsls	r2, r2, #9
 800583c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800583e:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005844:	4b1e      	ldr	r3, [pc, #120]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005846:	2200      	movs	r2, #0
 8005848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800584a:	4b1d      	ldr	r3, [pc, #116]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 800584c:	2200      	movs	r2, #0
 800584e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005850:	4b1b      	ldr	r3, [pc, #108]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005852:	220c      	movs	r2, #12
 8005854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005856:	4b1a      	ldr	r3, [pc, #104]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800585c:	4b18      	ldr	r3, [pc, #96]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 800585e:	2200      	movs	r2, #0
 8005860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005862:	4b17      	ldr	r3, [pc, #92]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005864:	2200      	movs	r2, #0
 8005866:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005868:	4b15      	ldr	r3, [pc, #84]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 800586a:	2200      	movs	r2, #0
 800586c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800586e:	4b14      	ldr	r3, [pc, #80]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005870:	2200      	movs	r2, #0
 8005872:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005874:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005876:	0018      	movs	r0, r3
 8005878:	f007 fa72 	bl	800cd60 <HAL_UART_Init>
 800587c:	1e03      	subs	r3, r0, #0
 800587e:	d001      	beq.n	8005884 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005880:	f001 fe48 	bl	8007514 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005884:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005886:	2100      	movs	r1, #0
 8005888:	0018      	movs	r0, r3
 800588a:	f008 fa0d 	bl	800dca8 <HAL_UARTEx_SetTxFifoThreshold>
 800588e:	1e03      	subs	r3, r0, #0
 8005890:	d001      	beq.n	8005896 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005892:	f001 fe3f 	bl	8007514 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005896:	4b0a      	ldr	r3, [pc, #40]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 8005898:	2100      	movs	r1, #0
 800589a:	0018      	movs	r0, r3
 800589c:	f008 fa44 	bl	800dd28 <HAL_UARTEx_SetRxFifoThreshold>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d001      	beq.n	80058a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80058a4:	f001 fe36 	bl	8007514 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <MX_USART2_UART_Init+0x94>)
 80058aa:	0018      	movs	r0, r3
 80058ac:	f008 f9c2 	bl	800dc34 <HAL_UARTEx_DisableFifoMode>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d001      	beq.n	80058b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80058b4:	f001 fe2e 	bl	8007514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058b8:	46c0      	nop			@ (mov r8, r8)
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	20001440 	.word	0x20001440
 80058c4:	40004400 	.word	0x40004400

080058c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058c8:	b590      	push	{r4, r7, lr}
 80058ca:	b08b      	sub	sp, #44	@ 0x2c
 80058cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ce:	2414      	movs	r4, #20
 80058d0:	193b      	adds	r3, r7, r4
 80058d2:	0018      	movs	r0, r3
 80058d4:	2314      	movs	r3, #20
 80058d6:	001a      	movs	r2, r3
 80058d8:	2100      	movs	r1, #0
 80058da:	f009 fb61 	bl	800efa0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058de:	4b4d      	ldr	r3, [pc, #308]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 80058e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 80058e4:	2104      	movs	r1, #4
 80058e6:	430a      	orrs	r2, r1
 80058e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80058ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 80058ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ee:	2204      	movs	r2, #4
 80058f0:	4013      	ands	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f6:	4b47      	ldr	r3, [pc, #284]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 80058f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058fa:	4b46      	ldr	r3, [pc, #280]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 80058fc:	2101      	movs	r1, #1
 80058fe:	430a      	orrs	r2, r1
 8005900:	635a      	str	r2, [r3, #52]	@ 0x34
 8005902:	4b44      	ldr	r3, [pc, #272]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 8005904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005906:	2201      	movs	r2, #1
 8005908:	4013      	ands	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800590e:	4b41      	ldr	r3, [pc, #260]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 8005910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005912:	4b40      	ldr	r3, [pc, #256]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 8005914:	2102      	movs	r1, #2
 8005916:	430a      	orrs	r2, r1
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34
 800591a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 800591c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591e:	2202      	movs	r2, #2
 8005920:	4013      	ands	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005926:	4b3b      	ldr	r3, [pc, #236]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 8005928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800592a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 800592c:	2108      	movs	r1, #8
 800592e:	430a      	orrs	r2, r1
 8005930:	635a      	str	r2, [r3, #52]	@ 0x34
 8005932:	4b38      	ldr	r3, [pc, #224]	@ (8005a14 <MX_GPIO_Init+0x14c>)
 8005934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005936:	2208      	movs	r2, #8
 8005938:	4013      	ands	r3, r2
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800593e:	4936      	ldr	r1, [pc, #216]	@ (8005a18 <MX_GPIO_Init+0x150>)
 8005940:	23a0      	movs	r3, #160	@ 0xa0
 8005942:	05db      	lsls	r3, r3, #23
 8005944:	2200      	movs	r2, #0
 8005946:	0018      	movs	r0, r3
 8005948:	f003 ffb7 	bl	80098ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800594c:	193b      	adds	r3, r7, r4
 800594e:	2202      	movs	r2, #2
 8005950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005952:	193b      	adds	r3, r7, r4
 8005954:	2288      	movs	r2, #136	@ 0x88
 8005956:	0352      	lsls	r2, r2, #13
 8005958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595a:	193b      	adds	r3, r7, r4
 800595c:	2200      	movs	r2, #0
 800595e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005960:	193b      	adds	r3, r7, r4
 8005962:	4a2e      	ldr	r2, [pc, #184]	@ (8005a1c <MX_GPIO_Init+0x154>)
 8005964:	0019      	movs	r1, r3
 8005966:	0010      	movs	r0, r2
 8005968:	f003 fe1e 	bl	80095a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 800596c:	193b      	adds	r3, r7, r4
 800596e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a18 <MX_GPIO_Init+0x150>)
 8005970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005972:	193b      	adds	r3, r7, r4
 8005974:	2201      	movs	r2, #1
 8005976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	193b      	adds	r3, r7, r4
 800597a:	2200      	movs	r2, #0
 800597c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800597e:	193b      	adds	r3, r7, r4
 8005980:	2200      	movs	r2, #0
 8005982:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005984:	193a      	adds	r2, r7, r4
 8005986:	23a0      	movs	r3, #160	@ 0xa0
 8005988:	05db      	lsls	r3, r3, #23
 800598a:	0011      	movs	r1, r2
 800598c:	0018      	movs	r0, r3
 800598e:	f003 fe0b 	bl	80095a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005992:	0021      	movs	r1, r4
 8005994:	187b      	adds	r3, r7, r1
 8005996:	2204      	movs	r2, #4
 8005998:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800599a:	187b      	adds	r3, r7, r1
 800599c:	2288      	movs	r2, #136	@ 0x88
 800599e:	0352      	lsls	r2, r2, #13
 80059a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	2200      	movs	r2, #0
 80059a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059a8:	000c      	movs	r4, r1
 80059aa:	187b      	adds	r3, r7, r1
 80059ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005a20 <MX_GPIO_Init+0x158>)
 80059ae:	0019      	movs	r1, r3
 80059b0:	0010      	movs	r0, r2
 80059b2:	f003 fdf9 	bl	80095a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059b6:	0021      	movs	r1, r4
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	2280      	movs	r2, #128	@ 0x80
 80059bc:	0112      	lsls	r2, r2, #4
 80059be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059c0:	187b      	adds	r3, r7, r1
 80059c2:	2288      	movs	r2, #136	@ 0x88
 80059c4:	0352      	lsls	r2, r2, #13
 80059c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c8:	187b      	adds	r3, r7, r1
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ce:	187a      	adds	r2, r7, r1
 80059d0:	23a0      	movs	r3, #160	@ 0xa0
 80059d2:	05db      	lsls	r3, r3, #23
 80059d4:	0011      	movs	r1, r2
 80059d6:	0018      	movs	r0, r3
 80059d8:	f003 fde6 	bl	80095a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80059dc:	2200      	movs	r2, #0
 80059de:	2100      	movs	r1, #0
 80059e0:	2005      	movs	r0, #5
 80059e2:	f003 fbfd 	bl	80091e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80059e6:	2005      	movs	r0, #5
 80059e8:	f003 fc0f 	bl	800920a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80059ec:	2200      	movs	r2, #0
 80059ee:	2100      	movs	r1, #0
 80059f0:	2006      	movs	r0, #6
 80059f2:	f003 fbf5 	bl	80091e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80059f6:	2006      	movs	r0, #6
 80059f8:	f003 fc07 	bl	800920a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80059fc:	2200      	movs	r2, #0
 80059fe:	2100      	movs	r1, #0
 8005a00:	2007      	movs	r0, #7
 8005a02:	f003 fbed 	bl	80091e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005a06:	2007      	movs	r0, #7
 8005a08:	f003 fbff 	bl	800920a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005a0c:	46c0      	nop			@ (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b00b      	add	sp, #44	@ 0x2c
 8005a12:	bd90      	pop	{r4, r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	00008031 	.word	0x00008031
 8005a1c:	50000800 	.word	0x50000800
 8005a20:	50000400 	.word	0x50000400

08005a24 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq) {
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	0002      	movs	r2, r0
 8005a2c:	1dbb      	adds	r3, r7, #6
 8005a2e:	801a      	strh	r2, [r3, #0]
	TIM17->ARR = (uint32_t) (987 * (float) 1000 / (float) freq);
 8005a30:	1dbb      	adds	r3, r7, #6
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7fb ff3f 	bl	80018b8 <__aeabi_ui2f>
 8005a3a:	1c03      	adds	r3, r0, #0
 8005a3c:	1c19      	adds	r1, r3, #0
 8005a3e:	4807      	ldr	r0, [pc, #28]	@ (8005a5c <ChangeNote+0x38>)
 8005a40:	f7fb f928 	bl	8000c94 <__aeabi_fdiv>
 8005a44:	1c03      	adds	r3, r0, #0
 8005a46:	4c06      	ldr	r4, [pc, #24]	@ (8005a60 <ChangeNote+0x3c>)
 8005a48:	1c18      	adds	r0, r3, #0
 8005a4a:	f7fa fdbf 	bl	80005cc <__aeabi_f2uiz>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b003      	add	sp, #12
 8005a58:	bd90      	pop	{r4, r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	4970f780 	.word	0x4970f780
 8005a60:	40014800 	.word	0x40014800

08005a64 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	0002      	movs	r2, r0
 8005a6c:	1dfb      	adds	r3, r7, #7
 8005a6e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005a70:	4ba0      	ldr	r3, [pc, #640]	@ (8005cf4 <PlayEffect+0x290>)
 8005a72:	2100      	movs	r1, #0
 8005a74:	0018      	movs	r0, r3
 8005a76:	f006 fadb 	bl	800c030 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 8005a7a:	2005      	movs	r0, #5
 8005a7c:	f003 faca 	bl	8009014 <HAL_Delay>
	switch (effect) {
 8005a80:	1dfb      	adds	r3, r7, #7
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b06      	cmp	r3, #6
 8005a86:	d900      	bls.n	8005a8a <PlayEffect+0x26>
 8005a88:	e12a      	b.n	8005ce0 <PlayEffect+0x27c>
 8005a8a:	009a      	lsls	r2, r3, #2
 8005a8c:	4b9a      	ldr	r3, [pc, #616]	@ (8005cf8 <PlayEffect+0x294>)
 8005a8e:	18d3      	adds	r3, r2, r3
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	469f      	mov	pc, r3
	case MenuBeep:

		curNote = G * 3;
 8005a94:	4b99      	ldr	r3, [pc, #612]	@ (8005cfc <PlayEffect+0x298>)
 8005a96:	2293      	movs	r2, #147	@ 0x93
 8005a98:	0112      	lsls	r2, r2, #4
 8005a9a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005a9c:	4b97      	ldr	r3, [pc, #604]	@ (8005cfc <PlayEffect+0x298>)
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff ffbf 	bl	8005a24 <ChangeNote>
		HAL_Delay(25);
 8005aa6:	2019      	movs	r0, #25
 8005aa8:	f003 fab4 	bl	8009014 <HAL_Delay>

		curNote = G * 2;
 8005aac:	4b93      	ldr	r3, [pc, #588]	@ (8005cfc <PlayEffect+0x298>)
 8005aae:	22c4      	movs	r2, #196	@ 0xc4
 8005ab0:	00d2      	lsls	r2, r2, #3
 8005ab2:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005ab4:	4b91      	ldr	r3, [pc, #580]	@ (8005cfc <PlayEffect+0x298>)
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7ff ffb3 	bl	8005a24 <ChangeNote>
		HAL_Delay(25);
 8005abe:	2019      	movs	r0, #25
 8005ac0:	f003 faa8 	bl	8009014 <HAL_Delay>

		break;
 8005ac4:	e10c      	b.n	8005ce0 <PlayEffect+0x27c>
	case EggNoise:

		curNote = A;
 8005ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8005cfc <PlayEffect+0x298>)
 8005ac8:	22dc      	movs	r2, #220	@ 0xdc
 8005aca:	0052      	lsls	r2, r2, #1
 8005acc:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005ace:	4b8b      	ldr	r3, [pc, #556]	@ (8005cfc <PlayEffect+0x298>)
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7ff ffa6 	bl	8005a24 <ChangeNote>
		HAL_Delay(20);
 8005ad8:	2014      	movs	r0, #20
 8005ada:	f003 fa9b 	bl	8009014 <HAL_Delay>

		curNote = C;
 8005ade:	4b87      	ldr	r3, [pc, #540]	@ (8005cfc <PlayEffect+0x298>)
 8005ae0:	4a87      	ldr	r2, [pc, #540]	@ (8005d00 <PlayEffect+0x29c>)
 8005ae2:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005ae4:	4b85      	ldr	r3, [pc, #532]	@ (8005cfc <PlayEffect+0x298>)
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff ff9b 	bl	8005a24 <ChangeNote>
		HAL_Delay(20);
 8005aee:	2014      	movs	r0, #20
 8005af0:	f003 fa90 	bl	8009014 <HAL_Delay>

		curNote = A;
 8005af4:	4b81      	ldr	r3, [pc, #516]	@ (8005cfc <PlayEffect+0x298>)
 8005af6:	22dc      	movs	r2, #220	@ 0xdc
 8005af8:	0052      	lsls	r2, r2, #1
 8005afa:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005afc:	4b7f      	ldr	r3, [pc, #508]	@ (8005cfc <PlayEffect+0x298>)
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7ff ff8f 	bl	8005a24 <ChangeNote>
		HAL_Delay(20);
 8005b06:	2014      	movs	r0, #20
 8005b08:	f003 fa84 	bl	8009014 <HAL_Delay>

		curNote = C;
 8005b0c:	4b7b      	ldr	r3, [pc, #492]	@ (8005cfc <PlayEffect+0x298>)
 8005b0e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d00 <PlayEffect+0x29c>)
 8005b10:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b12:	4b7a      	ldr	r3, [pc, #488]	@ (8005cfc <PlayEffect+0x298>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	0018      	movs	r0, r3
 8005b18:	f7ff ff84 	bl	8005a24 <ChangeNote>
		HAL_Delay(20);
 8005b1c:	2014      	movs	r0, #20
 8005b1e:	f003 fa79 	bl	8009014 <HAL_Delay>

		break;
 8005b22:	e0dd      	b.n	8005ce0 <PlayEffect+0x27c>
	case YoungNoiseHappy:

		curNote = F * 4;
 8005b24:	4b75      	ldr	r3, [pc, #468]	@ (8005cfc <PlayEffect+0x298>)
 8005b26:	4a77      	ldr	r2, [pc, #476]	@ (8005d04 <PlayEffect+0x2a0>)
 8005b28:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b2a:	4b74      	ldr	r3, [pc, #464]	@ (8005cfc <PlayEffect+0x298>)
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7ff ff78 	bl	8005a24 <ChangeNote>
		HAL_Delay(35);
 8005b34:	2023      	movs	r0, #35	@ 0x23
 8005b36:	f003 fa6d 	bl	8009014 <HAL_Delay>

		curNote = B * 4;
 8005b3a:	4b70      	ldr	r3, [pc, #448]	@ (8005cfc <PlayEffect+0x298>)
 8005b3c:	22f7      	movs	r2, #247	@ 0xf7
 8005b3e:	00d2      	lsls	r2, r2, #3
 8005b40:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b42:	4b6e      	ldr	r3, [pc, #440]	@ (8005cfc <PlayEffect+0x298>)
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7ff ff6c 	bl	8005a24 <ChangeNote>
		HAL_Delay(15);
 8005b4c:	200f      	movs	r0, #15
 8005b4e:	f003 fa61 	bl	8009014 <HAL_Delay>

		break;
 8005b52:	e0c5      	b.n	8005ce0 <PlayEffect+0x27c>
	case YoungNoiseSad:

		curNote = B * 4;
 8005b54:	4b69      	ldr	r3, [pc, #420]	@ (8005cfc <PlayEffect+0x298>)
 8005b56:	22f7      	movs	r2, #247	@ 0xf7
 8005b58:	00d2      	lsls	r2, r2, #3
 8005b5a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b5c:	4b67      	ldr	r3, [pc, #412]	@ (8005cfc <PlayEffect+0x298>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f7ff ff5f 	bl	8005a24 <ChangeNote>
		HAL_Delay(35);
 8005b66:	2023      	movs	r0, #35	@ 0x23
 8005b68:	f003 fa54 	bl	8009014 <HAL_Delay>

		curNote = B * 3;
 8005b6c:	4b63      	ldr	r3, [pc, #396]	@ (8005cfc <PlayEffect+0x298>)
 8005b6e:	4a66      	ldr	r2, [pc, #408]	@ (8005d08 <PlayEffect+0x2a4>)
 8005b70:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b72:	4b62      	ldr	r3, [pc, #392]	@ (8005cfc <PlayEffect+0x298>)
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7ff ff54 	bl	8005a24 <ChangeNote>
		HAL_Delay(15);
 8005b7c:	200f      	movs	r0, #15
 8005b7e:	f003 fa49 	bl	8009014 <HAL_Delay>

		break;
 8005b82:	e0ad      	b.n	8005ce0 <PlayEffect+0x27c>
	case AdultNoiseHappy:

		curNote = F / 4;
 8005b84:	4b5d      	ldr	r3, [pc, #372]	@ (8005cfc <PlayEffect+0x298>)
 8005b86:	22ae      	movs	r2, #174	@ 0xae
 8005b88:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cfc <PlayEffect+0x298>)
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f7ff ff48 	bl	8005a24 <ChangeNote>
		HAL_Delay(35);
 8005b94:	2023      	movs	r0, #35	@ 0x23
 8005b96:	f003 fa3d 	bl	8009014 <HAL_Delay>

		curNote = B / 4;
 8005b9a:	4b58      	ldr	r3, [pc, #352]	@ (8005cfc <PlayEffect+0x298>)
 8005b9c:	227b      	movs	r2, #123	@ 0x7b
 8005b9e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005ba0:	4b56      	ldr	r3, [pc, #344]	@ (8005cfc <PlayEffect+0x298>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f7ff ff3d 	bl	8005a24 <ChangeNote>
		HAL_Delay(15);
 8005baa:	200f      	movs	r0, #15
 8005bac:	f003 fa32 	bl	8009014 <HAL_Delay>

		break;
 8005bb0:	e096      	b.n	8005ce0 <PlayEffect+0x27c>
	case AdultNoiseSad:

		curNote = C / 4;
 8005bb2:	4b52      	ldr	r3, [pc, #328]	@ (8005cfc <PlayEffect+0x298>)
 8005bb4:	2282      	movs	r2, #130	@ 0x82
 8005bb6:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005bb8:	4b50      	ldr	r3, [pc, #320]	@ (8005cfc <PlayEffect+0x298>)
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f7ff ff31 	bl	8005a24 <ChangeNote>
		HAL_Delay(35);
 8005bc2:	2023      	movs	r0, #35	@ 0x23
 8005bc4:	f003 fa26 	bl	8009014 <HAL_Delay>

		curNote = A / 4;
 8005bc8:	4b4c      	ldr	r3, [pc, #304]	@ (8005cfc <PlayEffect+0x298>)
 8005bca:	226e      	movs	r2, #110	@ 0x6e
 8005bcc:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005bce:	4b4b      	ldr	r3, [pc, #300]	@ (8005cfc <PlayEffect+0x298>)
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f7ff ff26 	bl	8005a24 <ChangeNote>
		HAL_Delay(15);
 8005bd8:	200f      	movs	r0, #15
 8005bda:	f003 fa1b 	bl	8009014 <HAL_Delay>

		break;
 8005bde:	e07f      	b.n	8005ce0 <PlayEffect+0x27c>
	case Evolution:

		curNote = A * 2;
 8005be0:	4b46      	ldr	r3, [pc, #280]	@ (8005cfc <PlayEffect+0x298>)
 8005be2:	22dc      	movs	r2, #220	@ 0xdc
 8005be4:	0092      	lsls	r2, r2, #2
 8005be6:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005be8:	4b44      	ldr	r3, [pc, #272]	@ (8005cfc <PlayEffect+0x298>)
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	0018      	movs	r0, r3
 8005bee:	f7ff ff19 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005bf2:	2032      	movs	r0, #50	@ 0x32
 8005bf4:	f003 fa0e 	bl	8009014 <HAL_Delay>

		curNote = B * 2;
 8005bf8:	4b40      	ldr	r3, [pc, #256]	@ (8005cfc <PlayEffect+0x298>)
 8005bfa:	22f7      	movs	r2, #247	@ 0xf7
 8005bfc:	0092      	lsls	r2, r2, #2
 8005bfe:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c00:	4b3e      	ldr	r3, [pc, #248]	@ (8005cfc <PlayEffect+0x298>)
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7ff ff0d 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005c0a:	2032      	movs	r0, #50	@ 0x32
 8005c0c:	f003 fa02 	bl	8009014 <HAL_Delay>

		curNote = C * 2;
 8005c10:	4b3a      	ldr	r3, [pc, #232]	@ (8005cfc <PlayEffect+0x298>)
 8005c12:	4a3e      	ldr	r2, [pc, #248]	@ (8005d0c <PlayEffect+0x2a8>)
 8005c14:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c16:	4b39      	ldr	r3, [pc, #228]	@ (8005cfc <PlayEffect+0x298>)
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f7ff ff02 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005c20:	2032      	movs	r0, #50	@ 0x32
 8005c22:	f003 f9f7 	bl	8009014 <HAL_Delay>

		curNote = A * 2;
 8005c26:	4b35      	ldr	r3, [pc, #212]	@ (8005cfc <PlayEffect+0x298>)
 8005c28:	22dc      	movs	r2, #220	@ 0xdc
 8005c2a:	0092      	lsls	r2, r2, #2
 8005c2c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c2e:	4b33      	ldr	r3, [pc, #204]	@ (8005cfc <PlayEffect+0x298>)
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7ff fef6 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005c38:	2032      	movs	r0, #50	@ 0x32
 8005c3a:	f003 f9eb 	bl	8009014 <HAL_Delay>

		curNote = C * 2;
 8005c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005cfc <PlayEffect+0x298>)
 8005c40:	4a32      	ldr	r2, [pc, #200]	@ (8005d0c <PlayEffect+0x2a8>)
 8005c42:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c44:	4b2d      	ldr	r3, [pc, #180]	@ (8005cfc <PlayEffect+0x298>)
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff feeb 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005c4e:	2032      	movs	r0, #50	@ 0x32
 8005c50:	f003 f9e0 	bl	8009014 <HAL_Delay>

		curNote = D * 2;
 8005c54:	4b29      	ldr	r3, [pc, #164]	@ (8005cfc <PlayEffect+0x298>)
 8005c56:	4a2e      	ldr	r2, [pc, #184]	@ (8005d10 <PlayEffect+0x2ac>)
 8005c58:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c5a:	4b28      	ldr	r3, [pc, #160]	@ (8005cfc <PlayEffect+0x298>)
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f7ff fee0 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005c64:	2032      	movs	r0, #50	@ 0x32
 8005c66:	f003 f9d5 	bl	8009014 <HAL_Delay>

		curNote = B * 2;
 8005c6a:	4b24      	ldr	r3, [pc, #144]	@ (8005cfc <PlayEffect+0x298>)
 8005c6c:	22f7      	movs	r2, #247	@ 0xf7
 8005c6e:	0092      	lsls	r2, r2, #2
 8005c70:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c72:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <PlayEffect+0x298>)
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	0018      	movs	r0, r3
 8005c78:	f7ff fed4 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005c7c:	2032      	movs	r0, #50	@ 0x32
 8005c7e:	f003 f9c9 	bl	8009014 <HAL_Delay>

		curNote = D * 2;
 8005c82:	4b1e      	ldr	r3, [pc, #120]	@ (8005cfc <PlayEffect+0x298>)
 8005c84:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <PlayEffect+0x2ac>)
 8005c86:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c88:	4b1c      	ldr	r3, [pc, #112]	@ (8005cfc <PlayEffect+0x298>)
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff fec9 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005c92:	2032      	movs	r0, #50	@ 0x32
 8005c94:	f003 f9be 	bl	8009014 <HAL_Delay>

		curNote = E * 2;
 8005c98:	4b18      	ldr	r3, [pc, #96]	@ (8005cfc <PlayEffect+0x298>)
 8005c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d14 <PlayEffect+0x2b0>)
 8005c9c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c9e:	4b17      	ldr	r3, [pc, #92]	@ (8005cfc <PlayEffect+0x298>)
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f7ff febe 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005ca8:	2032      	movs	r0, #50	@ 0x32
 8005caa:	f003 f9b3 	bl	8009014 <HAL_Delay>

		curNote = G * 2;
 8005cae:	4b13      	ldr	r3, [pc, #76]	@ (8005cfc <PlayEffect+0x298>)
 8005cb0:	22c4      	movs	r2, #196	@ 0xc4
 8005cb2:	00d2      	lsls	r2, r2, #3
 8005cb4:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005cb6:	4b11      	ldr	r3, [pc, #68]	@ (8005cfc <PlayEffect+0x298>)
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7ff feb2 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005cc0:	2032      	movs	r0, #50	@ 0x32
 8005cc2:	f003 f9a7 	bl	8009014 <HAL_Delay>

		curNote = G * 2;
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cfc <PlayEffect+0x298>)
 8005cc8:	22c4      	movs	r2, #196	@ 0xc4
 8005cca:	00d2      	lsls	r2, r2, #3
 8005ccc:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005cce:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <PlayEffect+0x298>)
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f7ff fea6 	bl	8005a24 <ChangeNote>
		HAL_Delay(50);
 8005cd8:	2032      	movs	r0, #50	@ 0x32
 8005cda:	f003 f99b 	bl	8009014 <HAL_Delay>

		break;
 8005cde:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005ce0:	4b04      	ldr	r3, [pc, #16]	@ (8005cf4 <PlayEffect+0x290>)
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f006 fa93 	bl	800c210 <HAL_TIM_PWM_Stop>
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	20001360 	.word	0x20001360
 8005cf8:	0801bfcc 	.word	0x0801bfcc
 8005cfc:	20000286 	.word	0x20000286
 8005d00:	0000020b 	.word	0x0000020b
 8005d04:	00000ae8 	.word	0x00000ae8
 8005d08:	000005ca 	.word	0x000005ca
 8005d0c:	00000416 	.word	0x00000416
 8005d10:	00000496 	.word	0x00000496
 8005d14:	00000526 	.word	0x00000526

08005d18 <HAL_GPIO_EXTI_Rising_Callback>:
//INTERRUPTS ARE CALLED BACK HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	0002      	movs	r2, r0
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	801a      	strh	r2, [r3, #0]
	 //Left=2048
	 else if(GPIO_PIN==2048)
	 {

	 }*/
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <PeripheralInit>:

//AURORA: Put custom functions here!
void PeripheralInit(void) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
	ST7735_Unselect();
 8005d30:	f7fe fbe1 	bl	80044f6 <ST7735_Unselect>
	ST7735_Init(1);
 8005d34:	2001      	movs	r0, #1
 8005d36:	f7fe fcf3 	bl	8004720 <ST7735_Init>

	fillScreen(BLACK);
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f7fe fa84 	bl	8004248 <fillScreen>
	buffer[0] = 'A';
 8005d40:	4b17      	ldr	r3, [pc, #92]	@ (8005da0 <PeripheralInit+0x74>)
 8005d42:	2241      	movs	r2, #65	@ 0x41
 8005d44:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'B';
 8005d46:	4b16      	ldr	r3, [pc, #88]	@ (8005da0 <PeripheralInit+0x74>)
 8005d48:	2242      	movs	r2, #66	@ 0x42
 8005d4a:	705a      	strb	r2, [r3, #1]
	TIM17->CCR1 = 5;
 8005d4c:	4b15      	ldr	r3, [pc, #84]	@ (8005da4 <PeripheralInit+0x78>)
 8005d4e:	2205      	movs	r2, #5
 8005d50:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->PSC = 64;
 8005d52:	4b14      	ldr	r3, [pc, #80]	@ (8005da4 <PeripheralInit+0x78>)
 8005d54:	2240      	movs	r2, #64	@ 0x40
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28
	//uint8_t ret=0;
	//_ADXL343_Init();

	//Pedometer Setup
	_ADXL343_WriteReg8(0x19, 0x02);
 8005d58:	2102      	movs	r1, #2
 8005d5a:	2019      	movs	r0, #25
 8005d5c:	f000 fe34 	bl	80069c8 <_ADXL343_WriteReg8>
	////wait

	_ADXL343_WriteReg8(0x7C, 0x01);
 8005d60:	2101      	movs	r1, #1
 8005d62:	207c      	movs	r0, #124	@ 0x7c
 8005d64:	f000 fe30 	bl	80069c8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1A, 0x38);
 8005d68:	2138      	movs	r1, #56	@ 0x38
 8005d6a:	201a      	movs	r0, #26
 8005d6c:	f000 fe2c 	bl	80069c8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1B, 0x04);
 8005d70:	2104      	movs	r1, #4
 8005d72:	201b      	movs	r0, #27
 8005d74:	f000 fe28 	bl	80069c8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1F, 0x80);
 8005d78:	2180      	movs	r1, #128	@ 0x80
 8005d7a:	201f      	movs	r0, #31
 8005d7c:	f000 fe24 	bl	80069c8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x21, 0x80);
 8005d80:	2180      	movs	r1, #128	@ 0x80
 8005d82:	2021      	movs	r0, #33	@ 0x21
 8005d84:	f000 fe20 	bl	80069c8 <_ADXL343_WriteReg8>

	//  //Step Counter
	_ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8005d88:	2101      	movs	r1, #1
 8005d8a:	2018      	movs	r0, #24
 8005d8c:	f000 fe1c 	bl	80069c8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8005d90:	2101      	movs	r1, #1
 8005d92:	2020      	movs	r0, #32
 8005d94:	f000 fe18 	bl	80069c8 <_ADXL343_WriteReg8>
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	20000440 	.word	0x20000440
 8005da4:	40014800 	.word	0x40014800

08005da8 <StructInit>:
//INITIALIZE GAME VALUES
void StructInit(void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
	steps = 0;
 8005dae:	4b7a      	ldr	r3, [pc, #488]	@ (8005f98 <StructInit+0x1f0>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
	uint32_t Address = 0x0803F800;
 8005db4:	4b79      	ldr	r3, [pc, #484]	@ (8005f9c <StructInit+0x1f4>)
 8005db6:	60fb      	str	r3, [r7, #12]
	if ((*(__IO uint64_t*) (Address)) == (uint64_t) 0x12345678) {
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4978      	ldr	r1, [pc, #480]	@ (8005fa0 <StructInit+0x1f8>)
 8005dc0:	428a      	cmp	r2, r1
 8005dc2:	d000      	beq.n	8005dc6 <StructInit+0x1e>
 8005dc4:	e0a7      	b.n	8005f16 <StructInit+0x16e>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d000      	beq.n	8005dcc <StructInit+0x24>
 8005dca:	e0a4      	b.n	8005f16 <StructInit+0x16e>
		Address += 8;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	60fb      	str	r3, [r7, #12]
		game.allSteps = (unsigned int) (*(__IO uint64_t*) (Address));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	0011      	movs	r1, r2
 8005dda:	4a72      	ldr	r2, [pc, #456]	@ (8005fa4 <StructInit+0x1fc>)
 8005ddc:	238c      	movs	r3, #140	@ 0x8c
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3308      	adds	r3, #8
 8005de6:	60fb      	str	r3, [r7, #12]
		game.stepsToday = (unsigned int) (*(__IO uint64_t*) (Address));
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	0011      	movs	r1, r2
 8005df0:	4a6c      	ldr	r2, [pc, #432]	@ (8005fa4 <StructInit+0x1fc>)
 8005df2:	2390      	movs	r3, #144	@ 0x90
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	60fb      	str	r3, [r7, #12]
		game.weeklySteps = (unsigned int) (*(__IO uint64_t*) (Address));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	0011      	movs	r1, r2
 8005e06:	4a67      	ldr	r2, [pc, #412]	@ (8005fa4 <StructInit+0x1fc>)
 8005e08:	238e      	movs	r3, #142	@ 0x8e
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3308      	adds	r3, #8
 8005e12:	60fb      	str	r3, [r7, #12]
		game.dailyGoal = (unsigned int) (*(__IO uint64_t*) (Address));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	0011      	movs	r1, r2
 8005e1c:	4a61      	ldr	r2, [pc, #388]	@ (8005fa4 <StructInit+0x1fc>)
 8005e1e:	2392      	movs	r3, #146	@ 0x92
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3308      	adds	r3, #8
 8005e28:	60fb      	str	r3, [r7, #12]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005e2a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa4 <StructInit+0x1fc>)
 8005e2c:	2392      	movs	r3, #146	@ 0x92
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	58d3      	ldr	r3, [r2, r3]
 8005e32:	4a5c      	ldr	r2, [pc, #368]	@ (8005fa4 <StructInit+0x1fc>)
 8005e34:	7c12      	ldrb	r2, [r2, #16]
 8005e36:	3201      	adds	r2, #1
 8005e38:	435a      	muls	r2, r3
 8005e3a:	0011      	movs	r1, r2
 8005e3c:	4a59      	ldr	r2, [pc, #356]	@ (8005fa4 <StructInit+0x1fc>)
 8005e3e:	2394      	movs	r3, #148	@ 0x94
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3308      	adds	r3, #8
 8005e48:	60fb      	str	r3, [r7, #12]
		game.evo = (unsigned char) (*(__IO uint64_t*) (Address));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	4b54      	ldr	r3, [pc, #336]	@ (8005fa4 <StructInit+0x1fc>)
 8005e54:	741a      	strb	r2, [r3, #16]
		Address += 8;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	60fb      	str	r3, [r7, #12]
		game.mood = (unsigned char) (*(__IO uint64_t*) (Address));
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa4 <StructInit+0x1fc>)
 8005e66:	745a      	strb	r2, [r3, #17]
		Address += 8;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	60fb      	str	r3, [r7, #12]
		game.numLocations = (unsigned int) (*(__IO uint64_t*) (Address));
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa4 <StructInit+0x1fc>)
 8005e76:	615a      	str	r2, [r3, #20]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	e010      	b.n	8005ea0 <StructInit+0xf8>
			Address += 1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
			game.uid[flashI] = (char) (*(__IO uint8_t*) (Address));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b2d8      	uxtb	r0, r3
 8005e8a:	4946      	ldr	r1, [pc, #280]	@ (8005fa4 <StructInit+0x1fc>)
 8005e8c:	2396      	movs	r3, #150	@ 0x96
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	188a      	adds	r2, r1, r2
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	1c02      	adds	r2, r0, #0
 8005e98:	701a      	strb	r2, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b1f      	cmp	r3, #31
 8005ea4:	ddeb      	ble.n	8005e7e <StructInit+0xd6>
		}
		for (int flashI = 0; flashI < 32; flashI++) {
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	e030      	b.n	8005f0e <StructInit+0x166>
			Address += 8;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lat =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	0013      	movs	r3, r2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7fb fcac 	bl	8001818 <__aeabi_i2f>
 8005ec0:	1c03      	adds	r3, r0, #0
 8005ec2:	4939      	ldr	r1, [pc, #228]	@ (8005fa8 <StructInit+0x200>)
 8005ec4:	1c18      	adds	r0, r3, #0
 8005ec6:	f7fa fee5 	bl	8000c94 <__aeabi_fdiv>
 8005eca:	1c03      	adds	r3, r0, #0
 8005ecc:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lat =
 8005ece:	4b35      	ldr	r3, [pc, #212]	@ (8005fa4 <StructInit+0x1fc>)
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	3203      	adds	r2, #3
 8005ed4:	00d2      	lsls	r2, r2, #3
 8005ed6:	50d1      	str	r1, [r2, r3]
			Address += 8;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3308      	adds	r3, #8
 8005edc:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lon =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	0013      	movs	r3, r2
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f7fb fc96 	bl	8001818 <__aeabi_i2f>
 8005eec:	1c03      	adds	r3, r0, #0
 8005eee:	492e      	ldr	r1, [pc, #184]	@ (8005fa8 <StructInit+0x200>)
 8005ef0:	1c18      	adds	r0, r3, #0
 8005ef2:	f7fa fecf 	bl	8000c94 <__aeabi_fdiv>
 8005ef6:	1c03      	adds	r3, r0, #0
 8005ef8:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lon =
 8005efa:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa4 <StructInit+0x1fc>)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3303      	adds	r3, #3
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	3304      	adds	r3, #4
 8005f06:	6019      	str	r1, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b1f      	cmp	r3, #31
 8005f12:	ddcb      	ble.n	8005eac <StructInit+0x104>
		//game.positions[0] = dummy;
		//game.positions[1] = dummy;
		//game.positions[2] = dummy;
		game.time.hours = 0;
	}
}
 8005f14:	e03c      	b.n	8005f90 <StructInit+0x1e8>
		game.evo = 0;
 8005f16:	4b23      	ldr	r3, [pc, #140]	@ (8005fa4 <StructInit+0x1fc>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	741a      	strb	r2, [r3, #16]
		game.uid[0] = 'h';
 8005f1c:	4a21      	ldr	r2, [pc, #132]	@ (8005fa4 <StructInit+0x1fc>)
 8005f1e:	2396      	movs	r3, #150	@ 0x96
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	2168      	movs	r1, #104	@ 0x68
 8005f24:	54d1      	strb	r1, [r2, r3]
		game.uid[1] = 'i';
 8005f26:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa4 <StructInit+0x1fc>)
 8005f28:	232e      	movs	r3, #46	@ 0x2e
 8005f2a:	33ff      	adds	r3, #255	@ 0xff
 8005f2c:	2169      	movs	r1, #105	@ 0x69
 8005f2e:	54d1      	strb	r1, [r2, r3]
		game.allSteps = 0;
 8005f30:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa4 <StructInit+0x1fc>)
 8005f32:	238c      	movs	r3, #140	@ 0x8c
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	2100      	movs	r1, #0
 8005f38:	50d1      	str	r1, [r2, r3]
		game.mood = 1;
 8005f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa4 <StructInit+0x1fc>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	745a      	strb	r2, [r3, #17]
		game.numLocations = 0;
 8005f40:	4b18      	ldr	r3, [pc, #96]	@ (8005fa4 <StructInit+0x1fc>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	615a      	str	r2, [r3, #20]
		game.stepsToday = 0;
 8005f46:	4a17      	ldr	r2, [pc, #92]	@ (8005fa4 <StructInit+0x1fc>)
 8005f48:	2390      	movs	r3, #144	@ 0x90
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	50d1      	str	r1, [r2, r3]
		game.weeklySteps = 0;
 8005f50:	4a14      	ldr	r2, [pc, #80]	@ (8005fa4 <StructInit+0x1fc>)
 8005f52:	238e      	movs	r3, #142	@ 0x8e
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	2100      	movs	r1, #0
 8005f58:	50d1      	str	r1, [r2, r3]
		game.dailyGoal = 50;
 8005f5a:	4a12      	ldr	r2, [pc, #72]	@ (8005fa4 <StructInit+0x1fc>)
 8005f5c:	2392      	movs	r3, #146	@ 0x92
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2132      	movs	r1, #50	@ 0x32
 8005f62:	50d1      	str	r1, [r2, r3]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005f64:	4a0f      	ldr	r2, [pc, #60]	@ (8005fa4 <StructInit+0x1fc>)
 8005f66:	2392      	movs	r3, #146	@ 0x92
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	58d3      	ldr	r3, [r2, r3]
 8005f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa4 <StructInit+0x1fc>)
 8005f6e:	7c12      	ldrb	r2, [r2, #16]
 8005f70:	3201      	adds	r2, #1
 8005f72:	435a      	muls	r2, r3
 8005f74:	0011      	movs	r1, r2
 8005f76:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa4 <StructInit+0x1fc>)
 8005f78:	2394      	movs	r3, #148	@ 0x94
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	50d1      	str	r1, [r2, r3]
		dummy.lat = 12.34567;
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <StructInit+0x204>)
 8005f80:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb0 <StructInit+0x208>)
 8005f82:	601a      	str	r2, [r3, #0]
		dummy.lon = -89.10111;
 8005f84:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <StructInit+0x204>)
 8005f86:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb4 <StructInit+0x20c>)
 8005f88:	605a      	str	r2, [r3, #4]
		game.time.hours = 0;
 8005f8a:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <StructInit+0x1fc>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	46c0      	nop			@ (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b004      	add	sp, #16
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	2000126c 	.word	0x2000126c
 8005f9c:	0803f800 	.word	0x0803f800
 8005fa0:	12345678 	.word	0x12345678
 8005fa4:	20000298 	.word	0x20000298
 8005fa8:	47c35000 	.word	0x47c35000
 8005fac:	200003e4 	.word	0x200003e4
 8005fb0:	414587dd 	.word	0x414587dd
 8005fb4:	c2b233c5 	.word	0xc2b233c5

08005fb8 <Evolve>:
//Method for displaying the evolution animation
void Evolve() {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
	if (game.evo < 2)
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <Evolve+0x30>)
 8005fbe:	7c1b      	ldrb	r3, [r3, #16]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d80d      	bhi.n	8005fe0 <Evolve+0x28>
	{
		effect = Evolution;
 8005fc4:	4b09      	ldr	r3, [pc, #36]	@ (8005fec <Evolve+0x34>)
 8005fc6:	2206      	movs	r2, #6
 8005fc8:	701a      	strb	r2, [r3, #0]
		PlayEffect(effect);
 8005fca:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <Evolve+0x34>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f7ff fd48 	bl	8005a64 <PlayEffect>
		game.evo += 1;
 8005fd4:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <Evolve+0x30>)
 8005fd6:	7c1b      	ldrb	r3, [r3, #16]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	4b02      	ldr	r3, [pc, #8]	@ (8005fe8 <Evolve+0x30>)
 8005fde:	741a      	strb	r2, [r3, #16]
	}
}
 8005fe0:	46c0      	nop			@ (mov r8, r8)
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	20000298 	.word	0x20000298
 8005fec:	20000288 	.word	0x20000288

08005ff0 <FlashErase>:
void FlashErase() {
 8005ff0:	b590      	push	{r4, r7, lr}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8005ff6:	2408      	movs	r4, #8
 8005ff8:	193b      	adds	r3, r7, r4
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	605a      	str	r2, [r3, #4]
	tryit.NbPages = 1;
 8005ffe:	193b      	adds	r3, r7, r4
 8006000:	2201      	movs	r2, #1
 8006002:	60da      	str	r2, [r3, #12]
	tryit.Page = 127;
 8006004:	193b      	adds	r3, r7, r4
 8006006:	227f      	movs	r2, #127	@ 0x7f
 8006008:	609a      	str	r2, [r3, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 800600a:	193b      	adds	r3, r7, r4
 800600c:	2202      	movs	r2, #2
 800600e:	601a      	str	r2, [r3, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 8006010:	f003 f966 	bl	80092e0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 8006014:	1d3a      	adds	r2, r7, #4
 8006016:	193b      	adds	r3, r7, r4
 8006018:	0011      	movs	r1, r2
 800601a:	0018      	movs	r0, r3
 800601c:	f003 fa14 	bl	8009448 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8006020:	f003 f982 	bl	8009328 <HAL_FLASH_Lock>
}
 8006024:	46c0      	nop			@ (mov r8, r8)
 8006026:	46bd      	mov	sp, r7
 8006028:	b007      	add	sp, #28
 800602a:	bd90      	pop	{r4, r7, pc}

0800602c <FlashWrite>:
void FlashWrite() {
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	4cce      	ldr	r4, [pc, #824]	@ (8006368 <FlashWrite+0x33c>)
 8006030:	44a5      	add	sp, r4
 8006032:	af00      	add	r7, sp, #0
	uint32_t Address = 0x0803F800;
 8006034:	4bcd      	ldr	r3, [pc, #820]	@ (800636c <FlashWrite+0x340>)
 8006036:	4cce      	ldr	r4, [pc, #824]	@ (8006370 <FlashWrite+0x344>)
 8006038:	2140      	movs	r1, #64	@ 0x40
 800603a:	1862      	adds	r2, r4, r1
 800603c:	19d2      	adds	r2, r2, r7
 800603e:	6013      	str	r3, [r2, #0]
	uint8_t flashBuffer[496] = "I am the very model of a modern major general.";
 8006040:	4bcc      	ldr	r3, [pc, #816]	@ (8006374 <FlashWrite+0x348>)
 8006042:	48cd      	ldr	r0, [pc, #820]	@ (8006378 <FlashWrite+0x34c>)
 8006044:	181b      	adds	r3, r3, r0
 8006046:	187a      	adds	r2, r7, r1
 8006048:	189c      	adds	r4, r3, r2
 800604a:	4bcc      	ldr	r3, [pc, #816]	@ (800637c <FlashWrite+0x350>)
 800604c:	0020      	movs	r0, r4
 800604e:	0019      	movs	r1, r3
 8006050:	232f      	movs	r3, #47	@ 0x2f
 8006052:	001a      	movs	r2, r3
 8006054:	f009 f839 	bl	800f0ca <memcpy>
 8006058:	232f      	movs	r3, #47	@ 0x2f
 800605a:	18e0      	adds	r0, r4, r3
 800605c:	23c2      	movs	r3, #194	@ 0xc2
 800605e:	33ff      	adds	r3, #255	@ 0xff
 8006060:	001a      	movs	r2, r3
 8006062:	2100      	movs	r1, #0
 8006064:	f008 ff9c 	bl	800efa0 <memset>
	uint64_t flashTestBuffer[496];
	uint64_t xyz = 0;
 8006068:	2200      	movs	r2, #0
 800606a:	2300      	movs	r3, #0
 800606c:	49c4      	ldr	r1, [pc, #784]	@ (8006380 <FlashWrite+0x354>)
 800606e:	2040      	movs	r0, #64	@ 0x40
 8006070:	1809      	adds	r1, r1, r0
 8006072:	19c9      	adds	r1, r1, r7
 8006074:	600a      	str	r2, [r1, #0]
 8006076:	604b      	str	r3, [r1, #4]
	int chunkI = 8;
 8006078:	2308      	movs	r3, #8
 800607a:	4ac2      	ldr	r2, [pc, #776]	@ (8006384 <FlashWrite+0x358>)
 800607c:	0001      	movs	r1, r0
 800607e:	1852      	adds	r2, r2, r1
 8006080:	19d2      	adds	r2, r2, r7
 8006082:	6013      	str	r3, [r2, #0]

	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8006084:	4bc0      	ldr	r3, [pc, #768]	@ (8006388 <FlashWrite+0x35c>)
 8006086:	48bc      	ldr	r0, [pc, #752]	@ (8006378 <FlashWrite+0x34c>)
 8006088:	181b      	adds	r3, r3, r0
 800608a:	187a      	adds	r2, r7, r1
 800608c:	189a      	adds	r2, r3, r2
 800608e:	2304      	movs	r3, #4
 8006090:	6053      	str	r3, [r2, #4]
	tryit.NbPages = 1;
 8006092:	4bbd      	ldr	r3, [pc, #756]	@ (8006388 <FlashWrite+0x35c>)
 8006094:	181b      	adds	r3, r3, r0
 8006096:	187a      	adds	r2, r7, r1
 8006098:	189a      	adds	r2, r3, r2
 800609a:	2301      	movs	r3, #1
 800609c:	60d3      	str	r3, [r2, #12]
	tryit.Page = 127;
 800609e:	4bba      	ldr	r3, [pc, #744]	@ (8006388 <FlashWrite+0x35c>)
 80060a0:	181b      	adds	r3, r3, r0
 80060a2:	187a      	adds	r2, r7, r1
 80060a4:	189a      	adds	r2, r3, r2
 80060a6:	237f      	movs	r3, #127	@ 0x7f
 80060a8:	6093      	str	r3, [r2, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 80060aa:	4bb7      	ldr	r3, [pc, #732]	@ (8006388 <FlashWrite+0x35c>)
 80060ac:	181b      	adds	r3, r3, r0
 80060ae:	000c      	movs	r4, r1
 80060b0:	187a      	adds	r2, r7, r1
 80060b2:	189a      	adds	r2, r3, r2
 80060b4:	2302      	movs	r3, #2
 80060b6:	6013      	str	r3, [r2, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 80060b8:	f003 f912 	bl	80092e0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 80060bc:	2344      	movs	r3, #68	@ 0x44
 80060be:	18fa      	adds	r2, r7, r3
 80060c0:	2308      	movs	r3, #8
 80060c2:	191b      	adds	r3, r3, r4
 80060c4:	19db      	adds	r3, r3, r7
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f003 f9bd 	bl	8009448 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80060ce:	4aaf      	ldr	r2, [pc, #700]	@ (800638c <FlashWrite+0x360>)
 80060d0:	2300      	movs	r3, #0
 80060d2:	4ca7      	ldr	r4, [pc, #668]	@ (8006370 <FlashWrite+0x344>)
 80060d4:	2040      	movs	r0, #64	@ 0x40
 80060d6:	1821      	adds	r1, r4, r0
 80060d8:	19c9      	adds	r1, r1, r7
 80060da:	6809      	ldr	r1, [r1, #0]
 80060dc:	2001      	movs	r0, #1
 80060de:	f003 f8b1 	bl	8009244 <HAL_FLASH_Program>
			(uint64_t) 0x12345678);
	Address += 8;
 80060e2:	0021      	movs	r1, r4
 80060e4:	2040      	movs	r0, #64	@ 0x40
 80060e6:	180b      	adds	r3, r1, r0
 80060e8:	19db      	adds	r3, r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3308      	adds	r3, #8
 80060ee:	180a      	adds	r2, r1, r0
 80060f0:	19d2      	adds	r2, r2, r7
 80060f2:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.allSteps);
 80060f4:	4aa6      	ldr	r2, [pc, #664]	@ (8006390 <FlashWrite+0x364>)
 80060f6:	238c      	movs	r3, #140	@ 0x8c
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80060fc:	001d      	movs	r5, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	001e      	movs	r6, r3
 8006102:	000c      	movs	r4, r1
 8006104:	180b      	adds	r3, r1, r0
 8006106:	19db      	adds	r3, r3, r7
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	002a      	movs	r2, r5
 800610c:	0033      	movs	r3, r6
 800610e:	2001      	movs	r0, #1
 8006110:	f003 f898 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 8006114:	0021      	movs	r1, r4
 8006116:	2040      	movs	r0, #64	@ 0x40
 8006118:	180b      	adds	r3, r1, r0
 800611a:	19db      	adds	r3, r3, r7
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	180a      	adds	r2, r1, r0
 8006122:	19d2      	adds	r2, r2, r7
 8006124:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.stepsToday);
 8006126:	4a9a      	ldr	r2, [pc, #616]	@ (8006390 <FlashWrite+0x364>)
 8006128:	2390      	movs	r3, #144	@ 0x90
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800612e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006130:	2300      	movs	r3, #0
 8006132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006134:	000c      	movs	r4, r1
 8006136:	0005      	movs	r5, r0
 8006138:	180b      	adds	r3, r1, r0
 800613a:	19db      	adds	r3, r3, r7
 800613c:	6819      	ldr	r1, [r3, #0]
 800613e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006142:	2001      	movs	r0, #1
 8006144:	f003 f87e 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 8006148:	0021      	movs	r1, r4
 800614a:	0028      	movs	r0, r5
 800614c:	180b      	adds	r3, r1, r0
 800614e:	19db      	adds	r3, r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3308      	adds	r3, #8
 8006154:	180a      	adds	r2, r1, r0
 8006156:	19d2      	adds	r2, r2, r7
 8006158:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklySteps);
 800615a:	4a8d      	ldr	r2, [pc, #564]	@ (8006390 <FlashWrite+0x364>)
 800615c:	238e      	movs	r3, #142	@ 0x8e
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8006162:	633b      	str	r3, [r7, #48]	@ 0x30
 8006164:	2300      	movs	r3, #0
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
 8006168:	000c      	movs	r4, r1
 800616a:	0005      	movs	r5, r0
 800616c:	180b      	adds	r3, r1, r0
 800616e:	19db      	adds	r3, r3, r7
 8006170:	6819      	ldr	r1, [r3, #0]
 8006172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006176:	2001      	movs	r0, #1
 8006178:	f003 f864 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 800617c:	0021      	movs	r1, r4
 800617e:	0028      	movs	r0, r5
 8006180:	180b      	adds	r3, r1, r0
 8006182:	19db      	adds	r3, r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3308      	adds	r3, #8
 8006188:	180a      	adds	r2, r1, r0
 800618a:	19d2      	adds	r2, r2, r7
 800618c:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.dailyGoal);
 800618e:	4a80      	ldr	r2, [pc, #512]	@ (8006390 <FlashWrite+0x364>)
 8006190:	2392      	movs	r3, #146	@ 0x92
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8006196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006198:	2300      	movs	r3, #0
 800619a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800619c:	000c      	movs	r4, r1
 800619e:	0005      	movs	r5, r0
 80061a0:	180b      	adds	r3, r1, r0
 80061a2:	19db      	adds	r3, r3, r7
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061aa:	2001      	movs	r0, #1
 80061ac:	f003 f84a 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 80061b0:	0021      	movs	r1, r4
 80061b2:	0028      	movs	r0, r5
 80061b4:	180b      	adds	r3, r1, r0
 80061b6:	19db      	adds	r3, r3, r7
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	180a      	adds	r2, r1, r0
 80061be:	19d2      	adds	r2, r2, r7
 80061c0:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklyGoal);
 80061c2:	4a73      	ldr	r2, [pc, #460]	@ (8006390 <FlashWrite+0x364>)
 80061c4:	2394      	movs	r3, #148	@ 0x94
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80061ca:	623b      	str	r3, [r7, #32]
 80061cc:	2300      	movs	r3, #0
 80061ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d0:	000c      	movs	r4, r1
 80061d2:	0005      	movs	r5, r0
 80061d4:	180b      	adds	r3, r1, r0
 80061d6:	19db      	adds	r3, r3, r7
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061de:	2001      	movs	r0, #1
 80061e0:	f003 f830 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 80061e4:	0022      	movs	r2, r4
 80061e6:	0028      	movs	r0, r5
 80061e8:	1813      	adds	r3, r2, r0
 80061ea:	19db      	adds	r3, r3, r7
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	1811      	adds	r1, r2, r0
 80061f2:	19c9      	adds	r1, r1, r7
 80061f4:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.evo);
 80061f6:	4b66      	ldr	r3, [pc, #408]	@ (8006390 <FlashWrite+0x364>)
 80061f8:	7c1b      	ldrb	r3, [r3, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	2300      	movs	r3, #0
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	0014      	movs	r4, r2
 8006202:	0005      	movs	r5, r0
 8006204:	1813      	adds	r3, r2, r0
 8006206:	19db      	adds	r3, r3, r7
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2001      	movs	r0, #1
 8006210:	f003 f818 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 8006214:	0022      	movs	r2, r4
 8006216:	0028      	movs	r0, r5
 8006218:	1813      	adds	r3, r2, r0
 800621a:	19db      	adds	r3, r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3308      	adds	r3, #8
 8006220:	1811      	adds	r1, r2, r0
 8006222:	19c9      	adds	r1, r1, r7
 8006224:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.mood);
 8006226:	4b5a      	ldr	r3, [pc, #360]	@ (8006390 <FlashWrite+0x364>)
 8006228:	7c5b      	ldrb	r3, [r3, #17]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	0014      	movs	r4, r2
 8006232:	0005      	movs	r5, r0
 8006234:	1813      	adds	r3, r2, r0
 8006236:	19db      	adds	r3, r3, r7
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2001      	movs	r0, #1
 8006240:	f003 f800 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 8006244:	0022      	movs	r2, r4
 8006246:	0028      	movs	r0, r5
 8006248:	1813      	adds	r3, r2, r0
 800624a:	19db      	adds	r3, r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	1811      	adds	r1, r2, r0
 8006252:	19c9      	adds	r1, r1, r7
 8006254:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.numLocations);
 8006256:	4b4e      	ldr	r3, [pc, #312]	@ (8006390 <FlashWrite+0x364>)
 8006258:	695b      	ldr	r3, [r3, #20]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800625a:	60bb      	str	r3, [r7, #8]
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	0014      	movs	r4, r2
 8006262:	0005      	movs	r5, r0
 8006264:	1813      	adds	r3, r2, r0
 8006266:	19db      	adds	r3, r3, r7
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2001      	movs	r0, #1
 8006270:	f002 ffe8 	bl	8009244 <HAL_FLASH_Program>
	Address += 8;
 8006274:	0022      	movs	r2, r4
 8006276:	0028      	movs	r0, r5
 8006278:	1813      	adds	r3, r2, r0
 800627a:	19db      	adds	r3, r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3308      	adds	r3, #8
 8006280:	1812      	adds	r2, r2, r0
 8006282:	19d2      	adds	r2, r2, r7
 8006284:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 8006286:	2300      	movs	r3, #0
 8006288:	4a42      	ldr	r2, [pc, #264]	@ (8006394 <FlashWrite+0x368>)
 800628a:	1812      	adds	r2, r2, r0
 800628c:	19d2      	adds	r2, r2, r7
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	e05c      	b.n	800634c <FlashWrite+0x320>
		xyz += (game.uid[flashI]) << ((8 - (chunkI)) * 8);
 8006292:	493f      	ldr	r1, [pc, #252]	@ (8006390 <FlashWrite+0x364>)
 8006294:	2396      	movs	r3, #150	@ 0x96
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4a3e      	ldr	r2, [pc, #248]	@ (8006394 <FlashWrite+0x368>)
 800629a:	2040      	movs	r0, #64	@ 0x40
 800629c:	1812      	adds	r2, r2, r0
 800629e:	19d2      	adds	r2, r2, r7
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	188a      	adds	r2, r1, r2
 80062a4:	18d3      	adds	r3, r2, r3
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	0019      	movs	r1, r3
 80062aa:	4c36      	ldr	r4, [pc, #216]	@ (8006384 <FlashWrite+0x358>)
 80062ac:	1823      	adds	r3, r4, r0
 80062ae:	19db      	adds	r3, r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2208      	movs	r2, #8
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4099      	lsls	r1, r3
 80062ba:	000b      	movs	r3, r1
 80062bc:	603b      	str	r3, [r7, #0]
 80062be:	17db      	asrs	r3, r3, #31
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	4d2f      	ldr	r5, [pc, #188]	@ (8006380 <FlashWrite+0x354>)
 80062c4:	0006      	movs	r6, r0
 80062c6:	182b      	adds	r3, r5, r0
 80062c8:	19db      	adds	r3, r3, r7
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	6838      	ldr	r0, [r7, #0]
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	1812      	adds	r2, r2, r0
 80062d4:	414b      	adcs	r3, r1
 80062d6:	0029      	movs	r1, r5
 80062d8:	1988      	adds	r0, r1, r6
 80062da:	19c0      	adds	r0, r0, r7
 80062dc:	6002      	str	r2, [r0, #0]
 80062de:	6043      	str	r3, [r0, #4]
		if (--chunkI == 0) {
 80062e0:	0030      	movs	r0, r6
 80062e2:	19a3      	adds	r3, r4, r6
 80062e4:	19db      	adds	r3, r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	1822      	adds	r2, r4, r0
 80062ec:	19d2      	adds	r2, r2, r7
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	1823      	adds	r3, r4, r0
 80062f2:	19db      	adds	r3, r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d11f      	bne.n	800633a <FlashWrite+0x30e>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, xyz);
 80062fa:	000d      	movs	r5, r1
 80062fc:	180b      	adds	r3, r1, r0
 80062fe:	19db      	adds	r3, r3, r7
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4e1a      	ldr	r6, [pc, #104]	@ (8006370 <FlashWrite+0x344>)
 8006306:	1831      	adds	r1, r6, r0
 8006308:	19c9      	adds	r1, r1, r7
 800630a:	6809      	ldr	r1, [r1, #0]
 800630c:	2001      	movs	r0, #1
 800630e:	f002 ff99 	bl	8009244 <HAL_FLASH_Program>
			chunkI = 8;
 8006312:	2308      	movs	r3, #8
 8006314:	2140      	movs	r1, #64	@ 0x40
 8006316:	1862      	adds	r2, r4, r1
 8006318:	19d2      	adds	r2, r2, r7
 800631a:	6013      	str	r3, [r2, #0]
			xyz = 0;
 800631c:	2200      	movs	r2, #0
 800631e:	2300      	movs	r3, #0
 8006320:	0008      	movs	r0, r1
 8006322:	1869      	adds	r1, r5, r1
 8006324:	19c9      	adds	r1, r1, r7
 8006326:	600a      	str	r2, [r1, #0]
 8006328:	604b      	str	r3, [r1, #4]
			Address += 8;
 800632a:	0002      	movs	r2, r0
 800632c:	18b3      	adds	r3, r6, r2
 800632e:	19db      	adds	r3, r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	18b2      	adds	r2, r6, r2
 8006336:	19d2      	adds	r2, r2, r7
 8006338:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 800633a:	4a16      	ldr	r2, [pc, #88]	@ (8006394 <FlashWrite+0x368>)
 800633c:	2140      	movs	r1, #64	@ 0x40
 800633e:	1853      	adds	r3, r2, r1
 8006340:	19db      	adds	r3, r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	1852      	adds	r2, r2, r1
 8006348:	19d2      	adds	r2, r2, r7
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4b11      	ldr	r3, [pc, #68]	@ (8006394 <FlashWrite+0x368>)
 800634e:	2140      	movs	r1, #64	@ 0x40
 8006350:	185b      	adds	r3, r3, r1
 8006352:	19db      	adds	r3, r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b1f      	cmp	r3, #31
 8006358:	dd9b      	ble.n	8006292 <FlashWrite+0x266>
		}
	}
	for (int flashI = 0; flashI < 32; flashI++) {
 800635a:	2300      	movs	r3, #0
 800635c:	4a0e      	ldr	r2, [pc, #56]	@ (8006398 <FlashWrite+0x36c>)
 800635e:	1852      	adds	r2, r2, r1
 8006360:	19d2      	adds	r2, r2, r7
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e065      	b.n	8006432 <FlashWrite+0x406>
 8006366:	46c0      	nop			@ (mov r8, r8)
 8006368:	ffffee14 	.word	0xffffee14
 800636c:	0803f800 	.word	0x0803f800
 8006370:	000011a4 	.word	0x000011a4
 8006374:	fffffdf4 	.word	0xfffffdf4
 8006378:	000011a8 	.word	0x000011a8
 800637c:	08011734 	.word	0x08011734
 8006380:	00001198 	.word	0x00001198
 8006384:	00001194 	.word	0x00001194
 8006388:	ffffee60 	.word	0xffffee60
 800638c:	12345678 	.word	0x12345678
 8006390:	20000298 	.word	0x20000298
 8006394:	00001190 	.word	0x00001190
 8006398:	0000118c 	.word	0x0000118c
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lat * 100000));
 800639c:	4b33      	ldr	r3, [pc, #204]	@ (800646c <FlashWrite+0x440>)
 800639e:	4d34      	ldr	r5, [pc, #208]	@ (8006470 <FlashWrite+0x444>)
 80063a0:	2640      	movs	r6, #64	@ 0x40
 80063a2:	19aa      	adds	r2, r5, r6
 80063a4:	19d2      	adds	r2, r2, r7
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	3203      	adds	r2, #3
 80063aa:	00d2      	lsls	r2, r2, #3
 80063ac:	58d3      	ldr	r3, [r2, r3]
 80063ae:	4931      	ldr	r1, [pc, #196]	@ (8006474 <FlashWrite+0x448>)
 80063b0:	1c18      	adds	r0, r3, #0
 80063b2:	f7fa fe3d 	bl	8001030 <__aeabi_fmul>
 80063b6:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80063b8:	1c18      	adds	r0, r3, #0
 80063ba:	f7fa f959 	bl	8000670 <__aeabi_f2ulz>
 80063be:	0002      	movs	r2, r0
 80063c0:	000b      	movs	r3, r1
 80063c2:	4c2d      	ldr	r4, [pc, #180]	@ (8006478 <FlashWrite+0x44c>)
 80063c4:	19a1      	adds	r1, r4, r6
 80063c6:	19c9      	adds	r1, r1, r7
 80063c8:	6809      	ldr	r1, [r1, #0]
 80063ca:	2001      	movs	r0, #1
 80063cc:	f002 ff3a 	bl	8009244 <HAL_FLASH_Program>
		Address += 8;
 80063d0:	19a3      	adds	r3, r4, r6
 80063d2:	19db      	adds	r3, r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	19a2      	adds	r2, r4, r6
 80063da:	19d2      	adds	r2, r2, r7
 80063dc:	6013      	str	r3, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lon * 100000));
 80063de:	4a23      	ldr	r2, [pc, #140]	@ (800646c <FlashWrite+0x440>)
 80063e0:	19ab      	adds	r3, r5, r6
 80063e2:	19db      	adds	r3, r3, r7
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3303      	adds	r3, #3
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	18d3      	adds	r3, r2, r3
 80063ec:	3304      	adds	r3, #4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4920      	ldr	r1, [pc, #128]	@ (8006474 <FlashWrite+0x448>)
 80063f2:	1c18      	adds	r0, r3, #0
 80063f4:	f7fa fe1c 	bl	8001030 <__aeabi_fmul>
 80063f8:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80063fa:	1c18      	adds	r0, r3, #0
 80063fc:	f7fa f938 	bl	8000670 <__aeabi_f2ulz>
 8006400:	0002      	movs	r2, r0
 8006402:	000b      	movs	r3, r1
 8006404:	19a1      	adds	r1, r4, r6
 8006406:	19c9      	adds	r1, r1, r7
 8006408:	6809      	ldr	r1, [r1, #0]
 800640a:	2001      	movs	r0, #1
 800640c:	f002 ff1a 	bl	8009244 <HAL_FLASH_Program>
		Address += 8;
 8006410:	0032      	movs	r2, r6
 8006412:	19a3      	adds	r3, r4, r6
 8006414:	19db      	adds	r3, r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	0016      	movs	r6, r2
 800641c:	18a2      	adds	r2, r4, r2
 800641e:	19d2      	adds	r2, r2, r7
 8006420:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 8006422:	0032      	movs	r2, r6
 8006424:	18ab      	adds	r3, r5, r2
 8006426:	19db      	adds	r3, r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	18aa      	adds	r2, r5, r2
 800642e:	19d2      	adds	r2, r2, r7
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <FlashWrite+0x444>)
 8006434:	2040      	movs	r0, #64	@ 0x40
 8006436:	181b      	adds	r3, r3, r0
 8006438:	19db      	adds	r3, r3, r7
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b1f      	cmp	r3, #31
 800643e:	ddad      	ble.n	800639c <FlashWrite+0x370>
	}
	Address = 0x0803F808;
 8006440:	4b0e      	ldr	r3, [pc, #56]	@ (800647c <FlashWrite+0x450>)
 8006442:	4a0d      	ldr	r2, [pc, #52]	@ (8006478 <FlashWrite+0x44c>)
 8006444:	1811      	adds	r1, r2, r0
 8006446:	19c9      	adds	r1, r1, r7
 8006448:	600b      	str	r3, [r1, #0]
	xyz = *(__IO uint64_t*) (Address);
 800644a:	1813      	adds	r3, r2, r0
 800644c:	19db      	adds	r3, r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	490a      	ldr	r1, [pc, #40]	@ (8006480 <FlashWrite+0x454>)
 8006456:	1809      	adds	r1, r1, r0
 8006458:	19c9      	adds	r1, r1, r7
 800645a:	600a      	str	r2, [r1, #0]
 800645c:	604b      	str	r3, [r1, #4]
	HAL_FLASH_Lock();
 800645e:	f002 ff63 	bl	8009328 <HAL_FLASH_Lock>
}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	46bd      	mov	sp, r7
 8006466:	4b07      	ldr	r3, [pc, #28]	@ (8006484 <FlashWrite+0x458>)
 8006468:	449d      	add	sp, r3
 800646a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800646c:	20000298 	.word	0x20000298
 8006470:	0000118c 	.word	0x0000118c
 8006474:	47c35000 	.word	0x47c35000
 8006478:	000011a4 	.word	0x000011a4
 800647c:	0803f808 	.word	0x0803f808
 8006480:	00001198 	.word	0x00001198
 8006484:	000011ec 	.word	0x000011ec

08006488 <AnimateCharacter>:
void AnimateCharacter(uint16_t palette[])
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b089      	sub	sp, #36	@ 0x24
 800648c:	af04      	add	r7, sp, #16
 800648e:	6078      	str	r0, [r7, #4]
	unsigned char walkingCheck;
	_ADXL343_ReadReg8(0x18, &walkingCheck, 1);
 8006490:	240e      	movs	r4, #14
 8006492:	193b      	adds	r3, r7, r4
 8006494:	2201      	movs	r2, #1
 8006496:	0019      	movs	r1, r3
 8006498:	2018      	movs	r0, #24
 800649a:	f000 fa63 	bl	8006964 <_ADXL343_ReadReg8>
	unsigned char walkingYes = walkingCheck>0;
 800649e:	193b      	adds	r3, r7, r4
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	1e5a      	subs	r2, r3, #1
 80064a4:	4193      	sbcs	r3, r2
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	230f      	movs	r3, #15
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	701a      	strb	r2, [r3, #0]
	switch(game.evo)
 80064ae:	4be3      	ldr	r3, [pc, #908]	@ (800683c <AnimateCharacter+0x3b4>)
 80064b0:	7c1b      	ldrb	r3, [r3, #16]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d100      	bne.n	80064b8 <AnimateCharacter+0x30>
 80064b6:	e151      	b.n	800675c <AnimateCharacter+0x2d4>
 80064b8:	dd00      	ble.n	80064bc <AnimateCharacter+0x34>
 80064ba:	e239      	b.n	8006930 <AnimateCharacter+0x4a8>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <AnimateCharacter+0x40>
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d100      	bne.n	80064c6 <AnimateCharacter+0x3e>
 80064c4:	e0af      	b.n	8006626 <AnimateCharacter+0x19e>
 80064c6:	e233      	b.n	8006930 <AnimateCharacter+0x4a8>
	{
	case 0:
		if(walkingYes>0)
 80064c8:	230f      	movs	r3, #15
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d05a      	beq.n	8006588 <AnimateCharacter+0x100>
		{
			frameCount = 5;
 80064d2:	4bdb      	ldr	r3, [pc, #876]	@ (8006840 <AnimateCharacter+0x3b8>)
 80064d4:	2205      	movs	r2, #5
 80064d6:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 80064d8:	4bda      	ldr	r3, [pc, #872]	@ (8006844 <AnimateCharacter+0x3bc>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b05      	cmp	r3, #5
 80064de:	d900      	bls.n	80064e2 <AnimateCharacter+0x5a>
 80064e0:	e0a1      	b.n	8006626 <AnimateCharacter+0x19e>
 80064e2:	009a      	lsls	r2, r3, #2
 80064e4:	4bd8      	ldr	r3, [pc, #864]	@ (8006848 <AnimateCharacter+0x3c0>)
 80064e6:	18d3      	adds	r3, r2, r3
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	469f      	mov	pc, r3
			{
			case 0:
				drawImage(imgEggWalking0, palette, 30, 30, 64, 64, 225);
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	48d7      	ldr	r0, [pc, #860]	@ (800684c <AnimateCharacter+0x3c4>)
 80064f0:	23e1      	movs	r3, #225	@ 0xe1
 80064f2:	9302      	str	r3, [sp, #8]
 80064f4:	2340      	movs	r3, #64	@ 0x40
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	2340      	movs	r3, #64	@ 0x40
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	231e      	movs	r3, #30
 80064fe:	221e      	movs	r2, #30
 8006500:	f7fd ff16 	bl	8004330 <drawImage>
				break;
 8006504:	e08f      	b.n	8006626 <AnimateCharacter+0x19e>
			case 1:
				drawImage(imgEggWalking1, palette, 30, 30, 64, 64, 212);
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	48d1      	ldr	r0, [pc, #836]	@ (8006850 <AnimateCharacter+0x3c8>)
 800650a:	23d4      	movs	r3, #212	@ 0xd4
 800650c:	9302      	str	r3, [sp, #8]
 800650e:	2340      	movs	r3, #64	@ 0x40
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	2340      	movs	r3, #64	@ 0x40
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	231e      	movs	r3, #30
 8006518:	221e      	movs	r2, #30
 800651a:	f7fd ff09 	bl	8004330 <drawImage>
				break;
 800651e:	e082      	b.n	8006626 <AnimateCharacter+0x19e>
			case 2:
				drawImage(imgEggWalking2, palette, 30, 30, 64, 64, 197);
 8006520:	6879      	ldr	r1, [r7, #4]
 8006522:	48cc      	ldr	r0, [pc, #816]	@ (8006854 <AnimateCharacter+0x3cc>)
 8006524:	23c5      	movs	r3, #197	@ 0xc5
 8006526:	9302      	str	r3, [sp, #8]
 8006528:	2340      	movs	r3, #64	@ 0x40
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	2340      	movs	r3, #64	@ 0x40
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	231e      	movs	r3, #30
 8006532:	221e      	movs	r2, #30
 8006534:	f7fd fefc 	bl	8004330 <drawImage>
				break;
 8006538:	e075      	b.n	8006626 <AnimateCharacter+0x19e>
			case 3:
				drawImage(imgEggWalking3, palette, 30, 30, 64, 64, 227);
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	48c6      	ldr	r0, [pc, #792]	@ (8006858 <AnimateCharacter+0x3d0>)
 800653e:	23e3      	movs	r3, #227	@ 0xe3
 8006540:	9302      	str	r3, [sp, #8]
 8006542:	2340      	movs	r3, #64	@ 0x40
 8006544:	9301      	str	r3, [sp, #4]
 8006546:	2340      	movs	r3, #64	@ 0x40
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	231e      	movs	r3, #30
 800654c:	221e      	movs	r2, #30
 800654e:	f7fd feef 	bl	8004330 <drawImage>
				break;
 8006552:	e068      	b.n	8006626 <AnimateCharacter+0x19e>
			case 4:
				drawImage(imgEggWalking4, palette, 30, 30, 64, 64, 241);
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	48c1      	ldr	r0, [pc, #772]	@ (800685c <AnimateCharacter+0x3d4>)
 8006558:	23f1      	movs	r3, #241	@ 0xf1
 800655a:	9302      	str	r3, [sp, #8]
 800655c:	2340      	movs	r3, #64	@ 0x40
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	2340      	movs	r3, #64	@ 0x40
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	231e      	movs	r3, #30
 8006566:	221e      	movs	r2, #30
 8006568:	f7fd fee2 	bl	8004330 <drawImage>
				break;
 800656c:	e05b      	b.n	8006626 <AnimateCharacter+0x19e>
			case 5:
				drawImage(imgEggWalking5, palette, 30, 30, 64, 64, 226);
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	48bb      	ldr	r0, [pc, #748]	@ (8006860 <AnimateCharacter+0x3d8>)
 8006572:	23e2      	movs	r3, #226	@ 0xe2
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	2340      	movs	r3, #64	@ 0x40
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	2340      	movs	r3, #64	@ 0x40
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	231e      	movs	r3, #30
 8006580:	221e      	movs	r2, #30
 8006582:	f7fd fed5 	bl	8004330 <drawImage>
				break;
 8006586:	e04e      	b.n	8006626 <AnimateCharacter+0x19e>
			}
		}
		else
		{
			frameCount = 4;
 8006588:	4bad      	ldr	r3, [pc, #692]	@ (8006840 <AnimateCharacter+0x3b8>)
 800658a:	2204      	movs	r2, #4
 800658c:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 800658e:	4bad      	ldr	r3, [pc, #692]	@ (8006844 <AnimateCharacter+0x3bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d900      	bls.n	8006598 <AnimateCharacter+0x110>
 8006596:	e1c8      	b.n	800692a <AnimateCharacter+0x4a2>
 8006598:	009a      	lsls	r2, r3, #2
 800659a:	4bb2      	ldr	r3, [pc, #712]	@ (8006864 <AnimateCharacter+0x3dc>)
 800659c:	18d3      	adds	r3, r2, r3
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	469f      	mov	pc, r3
					{
					case 0:
						drawImage(imgEggSitting0, palette, 30, 30, 64, 64, 226);
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	48b0      	ldr	r0, [pc, #704]	@ (8006868 <AnimateCharacter+0x3e0>)
 80065a6:	23e2      	movs	r3, #226	@ 0xe2
 80065a8:	9302      	str	r3, [sp, #8]
 80065aa:	2340      	movs	r3, #64	@ 0x40
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	2340      	movs	r3, #64	@ 0x40
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	231e      	movs	r3, #30
 80065b4:	221e      	movs	r2, #30
 80065b6:	f7fd febb 	bl	8004330 <drawImage>
						break;
 80065ba:	e033      	b.n	8006624 <AnimateCharacter+0x19c>
					case 1:
						drawImage(imgEggSitting1, palette, 30, 30, 64, 64, 227);
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	48ab      	ldr	r0, [pc, #684]	@ (800686c <AnimateCharacter+0x3e4>)
 80065c0:	23e3      	movs	r3, #227	@ 0xe3
 80065c2:	9302      	str	r3, [sp, #8]
 80065c4:	2340      	movs	r3, #64	@ 0x40
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	2340      	movs	r3, #64	@ 0x40
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	231e      	movs	r3, #30
 80065ce:	221e      	movs	r2, #30
 80065d0:	f7fd feae 	bl	8004330 <drawImage>
						break;
 80065d4:	e026      	b.n	8006624 <AnimateCharacter+0x19c>
					case 2:
						drawImage(imgEggSitting2, palette, 30, 30, 64, 64, 221);
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	48a5      	ldr	r0, [pc, #660]	@ (8006870 <AnimateCharacter+0x3e8>)
 80065da:	23dd      	movs	r3, #221	@ 0xdd
 80065dc:	9302      	str	r3, [sp, #8]
 80065de:	2340      	movs	r3, #64	@ 0x40
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	2340      	movs	r3, #64	@ 0x40
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	231e      	movs	r3, #30
 80065e8:	221e      	movs	r2, #30
 80065ea:	f7fd fea1 	bl	8004330 <drawImage>
						break;
 80065ee:	e019      	b.n	8006624 <AnimateCharacter+0x19c>
					case 3:
						drawImage(imgEggSitting3, palette, 30, 30, 64, 64, 217);
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	48a0      	ldr	r0, [pc, #640]	@ (8006874 <AnimateCharacter+0x3ec>)
 80065f4:	23d9      	movs	r3, #217	@ 0xd9
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	2340      	movs	r3, #64	@ 0x40
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	2340      	movs	r3, #64	@ 0x40
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	231e      	movs	r3, #30
 8006602:	221e      	movs	r2, #30
 8006604:	f7fd fe94 	bl	8004330 <drawImage>
						break;
 8006608:	e00c      	b.n	8006624 <AnimateCharacter+0x19c>
					case 4:
						drawImage(imgEggSitting4, palette, 30, 30, 64, 64, 221);
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	489a      	ldr	r0, [pc, #616]	@ (8006878 <AnimateCharacter+0x3f0>)
 800660e:	23dd      	movs	r3, #221	@ 0xdd
 8006610:	9302      	str	r3, [sp, #8]
 8006612:	2340      	movs	r3, #64	@ 0x40
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	2340      	movs	r3, #64	@ 0x40
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	231e      	movs	r3, #30
 800661c:	221e      	movs	r2, #30
 800661e:	f7fd fe87 	bl	8004330 <drawImage>
						break;
 8006622:	46c0      	nop			@ (mov r8, r8)
					}
					break;
 8006624:	e181      	b.n	800692a <AnimateCharacter+0x4a2>
		}

	case 1:
		if(walkingYes>0)
 8006626:	230f      	movs	r3, #15
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d06e      	beq.n	800670e <AnimateCharacter+0x286>
		{
			frameCount = 6;
 8006630:	4b83      	ldr	r3, [pc, #524]	@ (8006840 <AnimateCharacter+0x3b8>)
 8006632:	2206      	movs	r2, #6
 8006634:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 8006636:	4b83      	ldr	r3, [pc, #524]	@ (8006844 <AnimateCharacter+0x3bc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b06      	cmp	r3, #6
 800663c:	d900      	bls.n	8006640 <AnimateCharacter+0x1b8>
 800663e:	e08d      	b.n	800675c <AnimateCharacter+0x2d4>
 8006640:	009a      	lsls	r2, r3, #2
 8006642:	4b8e      	ldr	r3, [pc, #568]	@ (800687c <AnimateCharacter+0x3f4>)
 8006644:	18d3      	adds	r3, r2, r3
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	469f      	mov	pc, r3
			{
			case 0:
				drawImage(imgYoungWalking0, palette, 30, 30, 64, 64, 312);
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	488c      	ldr	r0, [pc, #560]	@ (8006880 <AnimateCharacter+0x3f8>)
 800664e:	239c      	movs	r3, #156	@ 0x9c
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	9302      	str	r3, [sp, #8]
 8006654:	2340      	movs	r3, #64	@ 0x40
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	2340      	movs	r3, #64	@ 0x40
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	231e      	movs	r3, #30
 800665e:	221e      	movs	r2, #30
 8006660:	f7fd fe66 	bl	8004330 <drawImage>
				break;
 8006664:	e07a      	b.n	800675c <AnimateCharacter+0x2d4>
			case 1:
				drawImage(imgYoungWalking1, palette, 30, 30, 64, 64, 314);
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4886      	ldr	r0, [pc, #536]	@ (8006884 <AnimateCharacter+0x3fc>)
 800666a:	239d      	movs	r3, #157	@ 0x9d
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	2340      	movs	r3, #64	@ 0x40
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	2340      	movs	r3, #64	@ 0x40
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	231e      	movs	r3, #30
 800667a:	221e      	movs	r2, #30
 800667c:	f7fd fe58 	bl	8004330 <drawImage>
				break;
 8006680:	e06c      	b.n	800675c <AnimateCharacter+0x2d4>
			case 2:
				drawImage(imgYoungWalking2, palette, 30, 30, 64, 64, 322);
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	4880      	ldr	r0, [pc, #512]	@ (8006888 <AnimateCharacter+0x400>)
 8006686:	23a1      	movs	r3, #161	@ 0xa1
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	9302      	str	r3, [sp, #8]
 800668c:	2340      	movs	r3, #64	@ 0x40
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	2340      	movs	r3, #64	@ 0x40
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	231e      	movs	r3, #30
 8006696:	221e      	movs	r2, #30
 8006698:	f7fd fe4a 	bl	8004330 <drawImage>
				break;
 800669c:	e05e      	b.n	800675c <AnimateCharacter+0x2d4>
			case 3:
				drawImage(imgYoungWalking3, palette, 30, 30, 64, 64, 323);
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	487a      	ldr	r0, [pc, #488]	@ (800688c <AnimateCharacter+0x404>)
 80066a2:	2344      	movs	r3, #68	@ 0x44
 80066a4:	33ff      	adds	r3, #255	@ 0xff
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	2340      	movs	r3, #64	@ 0x40
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	2340      	movs	r3, #64	@ 0x40
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	231e      	movs	r3, #30
 80066b2:	221e      	movs	r2, #30
 80066b4:	f7fd fe3c 	bl	8004330 <drawImage>
				break;
 80066b8:	e050      	b.n	800675c <AnimateCharacter+0x2d4>
			case 4:
				drawImage(imgYoungWalking4, palette, 30, 30, 64, 64, 322);
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4874      	ldr	r0, [pc, #464]	@ (8006890 <AnimateCharacter+0x408>)
 80066be:	23a1      	movs	r3, #161	@ 0xa1
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	9302      	str	r3, [sp, #8]
 80066c4:	2340      	movs	r3, #64	@ 0x40
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	2340      	movs	r3, #64	@ 0x40
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	231e      	movs	r3, #30
 80066ce:	221e      	movs	r2, #30
 80066d0:	f7fd fe2e 	bl	8004330 <drawImage>
				break;
 80066d4:	e042      	b.n	800675c <AnimateCharacter+0x2d4>
			case 5:
				drawImage(imgYoungWalking5, palette, 30, 30, 64, 64, 321);
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	486e      	ldr	r0, [pc, #440]	@ (8006894 <AnimateCharacter+0x40c>)
 80066da:	2342      	movs	r3, #66	@ 0x42
 80066dc:	33ff      	adds	r3, #255	@ 0xff
 80066de:	9302      	str	r3, [sp, #8]
 80066e0:	2340      	movs	r3, #64	@ 0x40
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	2340      	movs	r3, #64	@ 0x40
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	231e      	movs	r3, #30
 80066ea:	221e      	movs	r2, #30
 80066ec:	f7fd fe20 	bl	8004330 <drawImage>
				break;
 80066f0:	e034      	b.n	800675c <AnimateCharacter+0x2d4>
			case 6:
				drawImage(imgYoungWalking6, palette, 30, 30, 64, 64, 313);
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4868      	ldr	r0, [pc, #416]	@ (8006898 <AnimateCharacter+0x410>)
 80066f6:	233a      	movs	r3, #58	@ 0x3a
 80066f8:	33ff      	adds	r3, #255	@ 0xff
 80066fa:	9302      	str	r3, [sp, #8]
 80066fc:	2340      	movs	r3, #64	@ 0x40
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	2340      	movs	r3, #64	@ 0x40
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	231e      	movs	r3, #30
 8006706:	221e      	movs	r2, #30
 8006708:	f7fd fe12 	bl	8004330 <drawImage>
				break;
 800670c:	e026      	b.n	800675c <AnimateCharacter+0x2d4>
			}
		}
		else
		{
			frameCount=1;
 800670e:	4b4c      	ldr	r3, [pc, #304]	@ (8006840 <AnimateCharacter+0x3b8>)
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 8006714:	4b4b      	ldr	r3, [pc, #300]	@ (8006844 <AnimateCharacter+0x3bc>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <AnimateCharacter+0x29a>
 800671c:	2b01      	cmp	r3, #1
 800671e:	d00e      	beq.n	800673e <AnimateCharacter+0x2b6>
				break;
			case 1:
				drawImage(imgSitting1,palette,30,30,64,64,305);
				break;
			}
			break;
 8006720:	e106      	b.n	8006930 <AnimateCharacter+0x4a8>
				drawImage(imgSitting0, palette, 30,30,64,64,307);
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	485d      	ldr	r0, [pc, #372]	@ (800689c <AnimateCharacter+0x414>)
 8006726:	2334      	movs	r3, #52	@ 0x34
 8006728:	33ff      	adds	r3, #255	@ 0xff
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	2340      	movs	r3, #64	@ 0x40
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	231e      	movs	r3, #30
 8006736:	221e      	movs	r2, #30
 8006738:	f7fd fdfa 	bl	8004330 <drawImage>
				break;
 800673c:	e00d      	b.n	800675a <AnimateCharacter+0x2d2>
				drawImage(imgSitting1,palette,30,30,64,64,305);
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	4857      	ldr	r0, [pc, #348]	@ (80068a0 <AnimateCharacter+0x418>)
 8006742:	2332      	movs	r3, #50	@ 0x32
 8006744:	33ff      	adds	r3, #255	@ 0xff
 8006746:	9302      	str	r3, [sp, #8]
 8006748:	2340      	movs	r3, #64	@ 0x40
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	2340      	movs	r3, #64	@ 0x40
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	231e      	movs	r3, #30
 8006752:	221e      	movs	r2, #30
 8006754:	f7fd fdec 	bl	8004330 <drawImage>
				break;
 8006758:	46c0      	nop			@ (mov r8, r8)
			break;
 800675a:	e0e9      	b.n	8006930 <AnimateCharacter+0x4a8>
		}
	case 2:
		if(walkingYes>0)
 800675c:	230f      	movs	r3, #15
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d100      	bne.n	8006768 <AnimateCharacter+0x2e0>
 8006766:	e0b9      	b.n	80068dc <AnimateCharacter+0x454>
		{
			frameCount = 6;
 8006768:	4b35      	ldr	r3, [pc, #212]	@ (8006840 <AnimateCharacter+0x3b8>)
 800676a:	2206      	movs	r2, #6
 800676c:	601a      	str	r2, [r3, #0]
			switch (currentFrame){
 800676e:	4b35      	ldr	r3, [pc, #212]	@ (8006844 <AnimateCharacter+0x3bc>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b06      	cmp	r3, #6
 8006774:	d900      	bls.n	8006778 <AnimateCharacter+0x2f0>
 8006776:	e0da      	b.n	800692e <AnimateCharacter+0x4a6>
 8006778:	009a      	lsls	r2, r3, #2
 800677a:	4b4a      	ldr	r3, [pc, #296]	@ (80068a4 <AnimateCharacter+0x41c>)
 800677c:	18d3      	adds	r3, r2, r3
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	469f      	mov	pc, r3
			case 0:
				drawImage(imgAdultWalking0, palette, 20, 30, 80, 80, 568);
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4848      	ldr	r0, [pc, #288]	@ (80068a8 <AnimateCharacter+0x420>)
 8006786:	238e      	movs	r3, #142	@ 0x8e
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	9302      	str	r3, [sp, #8]
 800678c:	2350      	movs	r3, #80	@ 0x50
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	2350      	movs	r3, #80	@ 0x50
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	231e      	movs	r3, #30
 8006796:	2214      	movs	r2, #20
 8006798:	f7fd fdca 	bl	8004330 <drawImage>
				break;
 800679c:	e0c4      	b.n	8006928 <AnimateCharacter+0x4a0>
			case 1:
				drawImage(imgAdultWalking1, palette, 20, 30, 80, 80, 562);
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	4842      	ldr	r0, [pc, #264]	@ (80068ac <AnimateCharacter+0x424>)
 80067a2:	4b43      	ldr	r3, [pc, #268]	@ (80068b0 <AnimateCharacter+0x428>)
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	2350      	movs	r3, #80	@ 0x50
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	2350      	movs	r3, #80	@ 0x50
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	231e      	movs	r3, #30
 80067b0:	2214      	movs	r2, #20
 80067b2:	f7fd fdbd 	bl	8004330 <drawImage>
				break;
 80067b6:	e0b7      	b.n	8006928 <AnimateCharacter+0x4a0>
			case 2:
				drawImage(imgAdultWalking2, palette, 20, 30, 80, 80, 601);
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	483e      	ldr	r0, [pc, #248]	@ (80068b4 <AnimateCharacter+0x42c>)
 80067bc:	4b3e      	ldr	r3, [pc, #248]	@ (80068b8 <AnimateCharacter+0x430>)
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	2350      	movs	r3, #80	@ 0x50
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	2350      	movs	r3, #80	@ 0x50
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	231e      	movs	r3, #30
 80067ca:	2214      	movs	r2, #20
 80067cc:	f7fd fdb0 	bl	8004330 <drawImage>
				break;
 80067d0:	e0aa      	b.n	8006928 <AnimateCharacter+0x4a0>
			case 3:
				drawImage(imgAdultWalking3, palette, 20, 30, 80, 80, 585);
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	4839      	ldr	r0, [pc, #228]	@ (80068bc <AnimateCharacter+0x434>)
 80067d6:	4b3a      	ldr	r3, [pc, #232]	@ (80068c0 <AnimateCharacter+0x438>)
 80067d8:	9302      	str	r3, [sp, #8]
 80067da:	2350      	movs	r3, #80	@ 0x50
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	2350      	movs	r3, #80	@ 0x50
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	231e      	movs	r3, #30
 80067e4:	2214      	movs	r2, #20
 80067e6:	f7fd fda3 	bl	8004330 <drawImage>
				break;
 80067ea:	e09d      	b.n	8006928 <AnimateCharacter+0x4a0>
			case 4:
				drawImage(imgAdultWalking4, palette, 20, 30, 80, 80, 566);
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4835      	ldr	r0, [pc, #212]	@ (80068c4 <AnimateCharacter+0x43c>)
 80067f0:	4b35      	ldr	r3, [pc, #212]	@ (80068c8 <AnimateCharacter+0x440>)
 80067f2:	9302      	str	r3, [sp, #8]
 80067f4:	2350      	movs	r3, #80	@ 0x50
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	2350      	movs	r3, #80	@ 0x50
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	231e      	movs	r3, #30
 80067fe:	2214      	movs	r2, #20
 8006800:	f7fd fd96 	bl	8004330 <drawImage>
				break;
 8006804:	e090      	b.n	8006928 <AnimateCharacter+0x4a0>
			case 5:
				drawImage(imgAdultWalking5, palette, 20, 30, 80, 80, 581);
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	4830      	ldr	r0, [pc, #192]	@ (80068cc <AnimateCharacter+0x444>)
 800680a:	4b31      	ldr	r3, [pc, #196]	@ (80068d0 <AnimateCharacter+0x448>)
 800680c:	9302      	str	r3, [sp, #8]
 800680e:	2350      	movs	r3, #80	@ 0x50
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	2350      	movs	r3, #80	@ 0x50
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	231e      	movs	r3, #30
 8006818:	2214      	movs	r2, #20
 800681a:	f7fd fd89 	bl	8004330 <drawImage>
				break;
 800681e:	e083      	b.n	8006928 <AnimateCharacter+0x4a0>
			case 6:
				drawImage(imgAdultWalking6, palette, 20, 30, 80, 80, 563);
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	482c      	ldr	r0, [pc, #176]	@ (80068d4 <AnimateCharacter+0x44c>)
 8006824:	4b2c      	ldr	r3, [pc, #176]	@ (80068d8 <AnimateCharacter+0x450>)
 8006826:	9302      	str	r3, [sp, #8]
 8006828:	2350      	movs	r3, #80	@ 0x50
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	2350      	movs	r3, #80	@ 0x50
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	231e      	movs	r3, #30
 8006832:	2214      	movs	r2, #20
 8006834:	f7fd fd7c 	bl	8004330 <drawImage>
				break;
 8006838:	e076      	b.n	8006928 <AnimateCharacter+0x4a0>
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	20000298 	.word	0x20000298
 8006840:	20000294 	.word	0x20000294
 8006844:	20000290 	.word	0x20000290
 8006848:	0801bfe8 	.word	0x0801bfe8
 800684c:	080130c8 	.word	0x080130c8
 8006850:	0801344c 	.word	0x0801344c
 8006854:	0801379c 	.word	0x0801379c
 8006858:	08013ab0 	.word	0x08013ab0
 800685c:	08013e3c 	.word	0x08013e3c
 8006860:	08014200 	.word	0x08014200
 8006864:	0801c000 	.word	0x0801c000
 8006868:	08011f68 	.word	0x08011f68
 800686c:	080122f0 	.word	0x080122f0
 8006870:	0801267c 	.word	0x0801267c
 8006874:	080129f0 	.word	0x080129f0
 8006878:	08012d54 	.word	0x08012d54
 800687c:	0801c014 	.word	0x0801c014
 8006880:	08014588 	.word	0x08014588
 8006884:	08014a68 	.word	0x08014a68
 8006888:	08014f50 	.word	0x08014f50
 800688c:	08015458 	.word	0x08015458
 8006890:	08015964 	.word	0x08015964
 8006894:	08015e6c 	.word	0x08015e6c
 8006898:	08016370 	.word	0x08016370
 800689c:	08016854 	.word	0x08016854
 80068a0:	08016d20 	.word	0x08016d20
 80068a4:	0801c030 	.word	0x0801c030
 80068a8:	080180e4 	.word	0x080180e4
 80068ac:	080189c4 	.word	0x080189c4
 80068b0:	00000232 	.word	0x00000232
 80068b4:	0801928c 	.word	0x0801928c
 80068b8:	00000259 	.word	0x00000259
 80068bc:	08019bf0 	.word	0x08019bf0
 80068c0:	00000249 	.word	0x00000249
 80068c4:	0801a514 	.word	0x0801a514
 80068c8:	00000236 	.word	0x00000236
 80068cc:	0801adec 	.word	0x0801adec
 80068d0:	00000245 	.word	0x00000245
 80068d4:	0801b700 	.word	0x0801b700
 80068d8:	00000233 	.word	0x00000233
			}
		}
		else{
		frameCount=1;
 80068dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006954 <AnimateCharacter+0x4cc>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
		switch(currentFrame)
 80068e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <AnimateCharacter+0x4d0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <AnimateCharacter+0x468>
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d00e      	beq.n	800690c <AnimateCharacter+0x484>
			drawImage(imgAdultSitting1, palette, 20,30,80,80,479);
			break;
		}

		}
	break;
 80068ee:	e01e      	b.n	800692e <AnimateCharacter+0x4a6>
			drawImage(imgAdultSitting0, palette, 20,30,80,80,481);
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	481a      	ldr	r0, [pc, #104]	@ (800695c <AnimateCharacter+0x4d4>)
 80068f4:	23e2      	movs	r3, #226	@ 0xe2
 80068f6:	33ff      	adds	r3, #255	@ 0xff
 80068f8:	9302      	str	r3, [sp, #8]
 80068fa:	2350      	movs	r3, #80	@ 0x50
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	2350      	movs	r3, #80	@ 0x50
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	231e      	movs	r3, #30
 8006904:	2214      	movs	r2, #20
 8006906:	f7fd fd13 	bl	8004330 <drawImage>
			break;
 800690a:	e00d      	b.n	8006928 <AnimateCharacter+0x4a0>
			drawImage(imgAdultSitting1, palette, 20,30,80,80,479);
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4814      	ldr	r0, [pc, #80]	@ (8006960 <AnimateCharacter+0x4d8>)
 8006910:	23e0      	movs	r3, #224	@ 0xe0
 8006912:	33ff      	adds	r3, #255	@ 0xff
 8006914:	9302      	str	r3, [sp, #8]
 8006916:	2350      	movs	r3, #80	@ 0x50
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	2350      	movs	r3, #80	@ 0x50
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	231e      	movs	r3, #30
 8006920:	2214      	movs	r2, #20
 8006922:	f7fd fd05 	bl	8004330 <drawImage>
			break;
 8006926:	46c0      	nop			@ (mov r8, r8)
	break;
 8006928:	e001      	b.n	800692e <AnimateCharacter+0x4a6>
					break;
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	e000      	b.n	8006930 <AnimateCharacter+0x4a8>
	break;
 800692e:	46c0      	nop			@ (mov r8, r8)
	}
	currentFrame++;
 8006930:	4b09      	ldr	r3, [pc, #36]	@ (8006958 <AnimateCharacter+0x4d0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	4b08      	ldr	r3, [pc, #32]	@ (8006958 <AnimateCharacter+0x4d0>)
 8006938:	601a      	str	r2, [r3, #0]
	if(currentFrame>frameCount)
 800693a:	4b07      	ldr	r3, [pc, #28]	@ (8006958 <AnimateCharacter+0x4d0>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <AnimateCharacter+0x4cc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d902      	bls.n	800694c <AnimateCharacter+0x4c4>
		currentFrame = 0;
 8006946:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <AnimateCharacter+0x4d0>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
}
 800694c:	46c0      	nop			@ (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b005      	add	sp, #20
 8006952:	bd90      	pop	{r4, r7, pc}
 8006954:	20000294 	.word	0x20000294
 8006958:	20000290 	.word	0x20000290
 800695c:	080171e4 	.word	0x080171e4
 8006960:	08017968 	.word	0x08017968

08006964 <_ADXL343_ReadReg8>:
			animation[currentFrame].Size);
	return;
}

int _ADXL343_ReadReg8(unsigned char TargetRegister, unsigned char *TargetValue,
		uint8_t size) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af02      	add	r7, sp, #8
 800696a:	6039      	str	r1, [r7, #0]
 800696c:	0011      	movs	r1, r2
 800696e:	1dfb      	adds	r3, r7, #7
 8006970:	1c02      	adds	r2, r0, #0
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	1dbb      	adds	r3, r7, #6
 8006976:	1c0a      	adds	r2, r1, #0
 8006978:	701a      	strb	r2, [r3, #0]
	if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, &TargetRegister, 1, 1000)
 800697a:	1dfa      	adds	r2, r7, #7
 800697c:	4811      	ldr	r0, [pc, #68]	@ (80069c4 <_ADXL343_ReadReg8+0x60>)
 800697e:	23fa      	movs	r3, #250	@ 0xfa
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2301      	movs	r3, #1
 8006986:	2128      	movs	r1, #40	@ 0x28
 8006988:	f003 f88e 	bl	8009aa8 <HAL_I2C_Master_Transmit>
 800698c:	1e03      	subs	r3, r0, #0
 800698e:	d002      	beq.n	8006996 <_ADXL343_ReadReg8+0x32>
			== HAL_OK)
		return -1;
 8006990:	2301      	movs	r3, #1
 8006992:	425b      	negs	r3, r3
 8006994:	e011      	b.n	80069ba <_ADXL343_ReadReg8+0x56>

	if (!HAL_I2C_Master_Receive(&hi2c1, 0x14 << 1, TargetValue, size, 1000)
 8006996:	1dbb      	adds	r3, r7, #6
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b299      	uxth	r1, r3
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	4809      	ldr	r0, [pc, #36]	@ (80069c4 <_ADXL343_ReadReg8+0x60>)
 80069a0:	23fa      	movs	r3, #250	@ 0xfa
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	000b      	movs	r3, r1
 80069a8:	2128      	movs	r1, #40	@ 0x28
 80069aa:	f003 f9a7 	bl	8009cfc <HAL_I2C_Master_Receive>
 80069ae:	1e03      	subs	r3, r0, #0
 80069b0:	d002      	beq.n	80069b8 <_ADXL343_ReadReg8+0x54>
			== HAL_OK)
		return -2;
 80069b2:	2302      	movs	r3, #2
 80069b4:	425b      	negs	r3, r3
 80069b6:	e000      	b.n	80069ba <_ADXL343_ReadReg8+0x56>

	return 0;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b002      	add	sp, #8
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	2000127c 	.word	0x2000127c

080069c8 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8(unsigned char TargetRegister, unsigned char TargetValue) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	0002      	movs	r2, r0
 80069d0:	1dfb      	adds	r3, r7, #7
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	1dbb      	adds	r3, r7, #6
 80069d6:	1c0a      	adds	r2, r1, #0
 80069d8:	701a      	strb	r2, [r3, #0]
	unsigned char buff[2];
	buff[0] = TargetRegister;
 80069da:	210c      	movs	r1, #12
 80069dc:	187b      	adds	r3, r7, r1
 80069de:	1dfa      	adds	r2, r7, #7
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	701a      	strb	r2, [r3, #0]
	buff[1] = TargetValue;
 80069e4:	187b      	adds	r3, r7, r1
 80069e6:	1dba      	adds	r2, r7, #6
 80069e8:	7812      	ldrb	r2, [r2, #0]
 80069ea:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, buff, 2, 1000) == HAL_OK)
 80069ec:	187a      	adds	r2, r7, r1
 80069ee:	4809      	ldr	r0, [pc, #36]	@ (8006a14 <_ADXL343_WriteReg8+0x4c>)
 80069f0:	23fa      	movs	r3, #250	@ 0xfa
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	2302      	movs	r3, #2
 80069f8:	2128      	movs	r1, #40	@ 0x28
 80069fa:	f003 f855 	bl	8009aa8 <HAL_I2C_Master_Transmit>
 80069fe:	1e03      	subs	r3, r0, #0
 8006a00:	d102      	bne.n	8006a08 <_ADXL343_WriteReg8+0x40>
		return -1;
 8006a02:	2301      	movs	r3, #1
 8006a04:	425b      	negs	r3, r3
 8006a06:	e000      	b.n	8006a0a <_ADXL343_WriteReg8+0x42>

	return 0;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b004      	add	sp, #16
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	2000127c 	.word	0x2000127c

08006a18 <SendData>:
void SendData() {
 8006a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1a:	46c6      	mov	lr, r8
 8006a1c:	b500      	push	{lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer,
 8006a22:	4a59      	ldr	r2, [pc, #356]	@ (8006b88 <SendData+0x170>)
 8006a24:	238c      	movs	r3, #140	@ 0x8c
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	58d4      	ldr	r4, [r2, r3]
 8006a2a:	4a57      	ldr	r2, [pc, #348]	@ (8006b88 <SendData+0x170>)
 8006a2c:	238e      	movs	r3, #142	@ 0x8e
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	58d5      	ldr	r5, [r2, r3]
 8006a32:	4a55      	ldr	r2, [pc, #340]	@ (8006b88 <SendData+0x170>)
 8006a34:	2390      	movs	r3, #144	@ 0x90
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	58d3      	ldr	r3, [r2, r3]
 8006a3a:	4698      	mov	r8, r3
			"(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r",
			game.allSteps, game.weeklySteps, game.stepsToday, game.uid,
			game.mood, game.dailyGoal, game.evo);
 8006a3c:	4a52      	ldr	r2, [pc, #328]	@ (8006b88 <SendData+0x170>)
 8006a3e:	7c52      	ldrb	r2, [r2, #17]
	sprintf(sendBuffer,
 8006a40:	0016      	movs	r6, r2
 8006a42:	4951      	ldr	r1, [pc, #324]	@ (8006b88 <SendData+0x170>)
 8006a44:	2292      	movs	r2, #146	@ 0x92
 8006a46:	0052      	lsls	r2, r2, #1
 8006a48:	588a      	ldr	r2, [r1, r2]
			game.mood, game.dailyGoal, game.evo);
 8006a4a:	494f      	ldr	r1, [pc, #316]	@ (8006b88 <SendData+0x170>)
 8006a4c:	7c09      	ldrb	r1, [r1, #16]
	sprintf(sendBuffer,
 8006a4e:	468c      	mov	ip, r1
 8006a50:	494e      	ldr	r1, [pc, #312]	@ (8006b8c <SendData+0x174>)
 8006a52:	484f      	ldr	r0, [pc, #316]	@ (8006b90 <SendData+0x178>)
 8006a54:	4663      	mov	r3, ip
 8006a56:	9304      	str	r3, [sp, #16]
 8006a58:	9203      	str	r2, [sp, #12]
 8006a5a:	9602      	str	r6, [sp, #8]
 8006a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8006b94 <SendData+0x17c>)
 8006a5e:	9201      	str	r2, [sp, #4]
 8006a60:	4643      	mov	r3, r8
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	002b      	movs	r3, r5
 8006a66:	0022      	movs	r2, r4
 8006a68:	f008 fa2c 	bl	800eec4 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8006a6c:	4b48      	ldr	r3, [pc, #288]	@ (8006b90 <SendData+0x178>)
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7f9 fb54 	bl	800011c <strlen>
 8006a74:	0003      	movs	r3, r0
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	4945      	ldr	r1, [pc, #276]	@ (8006b90 <SendData+0x178>)
 8006a7a:	4847      	ldr	r0, [pc, #284]	@ (8006b98 <SendData+0x180>)
 8006a7c:	23c8      	movs	r3, #200	@ 0xc8
 8006a7e:	f006 f9c5 	bl	800ce0c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8006a82:	2300      	movs	r3, #0
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	e072      	b.n	8006b6e <SendData+0x156>
		HAL_Delay(5);
 8006a88:	2005      	movs	r0, #5
 8006a8a:	f002 fac3 	bl	8009014 <HAL_Delay>
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	e007      	b.n	8006aa4 <SendData+0x8c>
			sendBuffer[clrIndex] = 0;
 8006a94:	4a3e      	ldr	r2, [pc, #248]	@ (8006b90 <SendData+0x178>)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	18d3      	adds	r3, r2, r3
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	23c8      	movs	r3, #200	@ 0xc8
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d3f2      	bcc.n	8006a94 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
				((int) game.positions[posIndex].lat),
 8006aae:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <SendData+0x170>)
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	3203      	adds	r2, #3
 8006ab4:	00d2      	lsls	r2, r2, #3
 8006ab6:	58d3      	ldr	r3, [r2, r3]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006ab8:	1c18      	adds	r0, r3, #0
 8006aba:	f7fa fe8d 	bl	80017d8 <__aeabi_f2iz>
 8006abe:	0006      	movs	r6, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lat,
 8006ac0:	4b31      	ldr	r3, [pc, #196]	@ (8006b88 <SendData+0x170>)
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	3203      	adds	r2, #3
 8006ac6:	00d2      	lsls	r2, r2, #3
 8006ac8:	58d3      	ldr	r3, [r2, r3]
 8006aca:	1c18      	adds	r0, r3, #0
 8006acc:	f7fc feda 	bl	8003884 <__aeabi_f2d>
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	4b32      	ldr	r3, [pc, #200]	@ (8006b9c <SendData+0x184>)
 8006ad4:	f00a fb5e 	bl	8011194 <fmod>
								(double) 1)) * 10000)),
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4b31      	ldr	r3, [pc, #196]	@ (8006ba0 <SendData+0x188>)
 8006adc:	f7fb ff32 	bl	8002944 <__aeabi_dmul>
 8006ae0:	0002      	movs	r2, r0
 8006ae2:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lat,
 8006ae4:	0010      	movs	r0, r2
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	f7fc fe3e 	bl	8003768 <__aeabi_d2iz>
 8006aec:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006aee:	17da      	asrs	r2, r3, #31
 8006af0:	189c      	adds	r4, r3, r2
 8006af2:	4054      	eors	r4, r2
				((int) game.positions[posIndex].lon),
 8006af4:	4a24      	ldr	r2, [pc, #144]	@ (8006b88 <SendData+0x170>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3303      	adds	r3, #3
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	18d3      	adds	r3, r2, r3
 8006afe:	3304      	adds	r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006b02:	1c18      	adds	r0, r3, #0
 8006b04:	f7fa fe68 	bl	80017d8 <__aeabi_f2iz>
 8006b08:	0005      	movs	r5, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lon,
 8006b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8006b88 <SendData+0x170>)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3303      	adds	r3, #3
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	18d3      	adds	r3, r2, r3
 8006b14:	3304      	adds	r3, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	1c18      	adds	r0, r3, #0
 8006b1a:	f7fc feb3 	bl	8003884 <__aeabi_f2d>
 8006b1e:	2200      	movs	r2, #0
 8006b20:	4b1e      	ldr	r3, [pc, #120]	@ (8006b9c <SendData+0x184>)
 8006b22:	f00a fb37 	bl	8011194 <fmod>
								(double) 1)) * 10000)));
 8006b26:	2200      	movs	r2, #0
 8006b28:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba0 <SendData+0x188>)
 8006b2a:	f7fb ff0b 	bl	8002944 <__aeabi_dmul>
 8006b2e:	0002      	movs	r2, r0
 8006b30:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lon,
 8006b32:	0010      	movs	r0, r2
 8006b34:	0019      	movs	r1, r3
 8006b36:	f7fc fe17 	bl	8003768 <__aeabi_d2iz>
 8006b3a:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006b3c:	17da      	asrs	r2, r3, #31
 8006b3e:	189b      	adds	r3, r3, r2
 8006b40:	4053      	eors	r3, r2
 8006b42:	4918      	ldr	r1, [pc, #96]	@ (8006ba4 <SendData+0x18c>)
 8006b44:	4812      	ldr	r0, [pc, #72]	@ (8006b90 <SendData+0x178>)
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	9500      	str	r5, [sp, #0]
 8006b4a:	0023      	movs	r3, r4
 8006b4c:	0032      	movs	r2, r6
 8006b4e:	f008 f9b9 	bl	800eec4 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8006b52:	4b0f      	ldr	r3, [pc, #60]	@ (8006b90 <SendData+0x178>)
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7f9 fae1 	bl	800011c <strlen>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	490c      	ldr	r1, [pc, #48]	@ (8006b90 <SendData+0x178>)
 8006b60:	480d      	ldr	r0, [pc, #52]	@ (8006b98 <SendData+0x180>)
 8006b62:	23c8      	movs	r3, #200	@ 0xc8
 8006b64:	f006 f952 	bl	800ce0c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	4b06      	ldr	r3, [pc, #24]	@ (8006b88 <SendData+0x170>)
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d387      	bcc.n	8006a88 <SendData+0x70>

	}
}
 8006b78:	46c0      	nop			@ (mov r8, r8)
 8006b7a:	46c0      	nop			@ (mov r8, r8)
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	b002      	add	sp, #8
 8006b80:	bc80      	pop	{r7}
 8006b82:	46b8      	mov	r8, r7
 8006b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b86:	46c0      	nop			@ (mov r8, r8)
 8006b88:	20000298 	.word	0x20000298
 8006b8c:	08011764 	.word	0x08011764
 8006b90:	200004c0 	.word	0x200004c0
 8006b94:	200003c4 	.word	0x200003c4
 8006b98:	20001440 	.word	0x20001440
 8006b9c:	3ff00000 	.word	0x3ff00000
 8006ba0:	40c38800 	.word	0x40c38800
 8006ba4:	080117e4 	.word	0x080117e4

08006ba8 <ReceiveData>:
void ReceiveData() {
 8006ba8:	b5b0      	push	{r4, r5, r7, lr}
 8006baa:	4cda      	ldr	r4, [pc, #872]	@ (8006f14 <ReceiveData+0x36c>)
 8006bac:	44a5      	add	sp, r4
 8006bae:	af00      	add	r7, sp, #0
	int rI = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4ad9      	ldr	r2, [pc, #868]	@ (8006f18 <ReceiveData+0x370>)
 8006bb4:	18ba      	adds	r2, r7, r2
 8006bb6:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 8006bb8:	e197      	b.n	8006eea <ReceiveData+0x342>
		if (syncBuffer[rI] && syncBuffer[rI] == '\r') {
 8006bba:	4ad8      	ldr	r2, [pc, #864]	@ (8006f1c <ReceiveData+0x374>)
 8006bbc:	49d6      	ldr	r1, [pc, #856]	@ (8006f18 <ReceiveData+0x370>)
 8006bbe:	187b      	adds	r3, r7, r1
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	18d3      	adds	r3, r2, r3
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d100      	bne.n	8006bcc <ReceiveData+0x24>
 8006bca:	e188      	b.n	8006ede <ReceiveData+0x336>
 8006bcc:	4ad3      	ldr	r2, [pc, #844]	@ (8006f1c <ReceiveData+0x374>)
 8006bce:	187b      	adds	r3, r7, r1
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	18d3      	adds	r3, r2, r3
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	2b0d      	cmp	r3, #13
 8006bd8:	d000      	beq.n	8006bdc <ReceiveData+0x34>
 8006bda:	e180      	b.n	8006ede <ReceiveData+0x336>
			enum {
				MAX_FIELDS = 255
			};
			json_t pool[MAX_FIELDS];
			json_t const *parent = json_create(syncBuffer, pool, MAX_FIELDS);
 8006bdc:	0039      	movs	r1, r7
 8006bde:	4bcf      	ldr	r3, [pc, #828]	@ (8006f1c <ReceiveData+0x374>)
 8006be0:	22ff      	movs	r2, #255	@ 0xff
 8006be2:	0018      	movs	r0, r3
 8006be4:	f001 fcb6 	bl	8008554 <json_create>
 8006be8:	0003      	movs	r3, r0
 8006bea:	49cd      	ldr	r1, [pc, #820]	@ (8006f20 <ReceiveData+0x378>)
 8006bec:	187a      	adds	r2, r7, r1
 8006bee:	6013      	str	r3, [r2, #0]
			if (parent) {
 8006bf0:	187b      	adds	r3, r7, r1
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d100      	bne.n	8006bfa <ReceiveData+0x52>
 8006bf8:	e152      	b.n	8006ea0 <ReceiveData+0x2f8>
				int locI = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4ac9      	ldr	r2, [pc, #804]	@ (8006f24 <ReceiveData+0x37c>)
 8006bfe:	18ba      	adds	r2, r7, r2
 8006c00:	6013      	str	r3, [r2, #0]
				struct latLon tempLoc;
				char const *uidRxStr = json_getPropertyValue(parent, "uid");
 8006c02:	4ac9      	ldr	r2, [pc, #804]	@ (8006f28 <ReceiveData+0x380>)
 8006c04:	187b      	adds	r3, r7, r1
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	0011      	movs	r1, r2
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	f001 fc3e 	bl	800848c <json_getPropertyValue>
 8006c10:	0003      	movs	r3, r0
 8006c12:	4ac6      	ldr	r2, [pc, #792]	@ (8006f2c <ReceiveData+0x384>)
 8006c14:	18ba      	adds	r2, r7, r2
 8006c16:	6013      	str	r3, [r2, #0]
				//HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4ac5      	ldr	r2, [pc, #788]	@ (8006f30 <ReceiveData+0x388>)
 8006c1c:	18ba      	adds	r2, r7, r2
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	e015      	b.n	8006c4e <ReceiveData+0xa6>
					game.uid[strI] = uidRxStr[strI];
 8006c22:	4cc3      	ldr	r4, [pc, #780]	@ (8006f30 <ReceiveData+0x388>)
 8006c24:	193b      	adds	r3, r7, r4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4ac0      	ldr	r2, [pc, #768]	@ (8006f2c <ReceiveData+0x384>)
 8006c2a:	18ba      	adds	r2, r7, r2
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	18d3      	adds	r3, r2, r3
 8006c30:	7818      	ldrb	r0, [r3, #0]
 8006c32:	49c0      	ldr	r1, [pc, #768]	@ (8006f34 <ReceiveData+0x38c>)
 8006c34:	2396      	movs	r3, #150	@ 0x96
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	193a      	adds	r2, r7, r4
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	188a      	adds	r2, r1, r2
 8006c3e:	18d3      	adds	r3, r2, r3
 8006c40:	1c02      	adds	r2, r0, #0
 8006c42:	701a      	strb	r2, [r3, #0]
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8006c44:	193b      	adds	r3, r7, r4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	193a      	adds	r2, r7, r4
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	4bb7      	ldr	r3, [pc, #732]	@ (8006f2c <ReceiveData+0x384>)
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7f9 fa61 	bl	800011c <strlen>
 8006c5a:	0002      	movs	r2, r0
 8006c5c:	4bb4      	ldr	r3, [pc, #720]	@ (8006f30 <ReceiveData+0x388>)
 8006c5e:	18fb      	adds	r3, r7, r3
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d8dd      	bhi.n	8006c22 <ReceiveData+0x7a>
				game.allSteps = (unsigned int) json_getInteger(
 8006c66:	4ab4      	ldr	r2, [pc, #720]	@ (8006f38 <ReceiveData+0x390>)
 8006c68:	4cad      	ldr	r4, [pc, #692]	@ (8006f20 <ReceiveData+0x378>)
 8006c6a:	193b      	adds	r3, r7, r4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	0011      	movs	r1, r2
 8006c70:	0018      	movs	r0, r3
 8006c72:	f001 fbe8 	bl	8008446 <json_getProperty>
 8006c76:	0003      	movs	r3, r0
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f7fd ff21 	bl	8004ac0 <json_getInteger>
 8006c7e:	0002      	movs	r2, r0
 8006c80:	000b      	movs	r3, r1
 8006c82:	0011      	movs	r1, r2
 8006c84:	4aab      	ldr	r2, [pc, #684]	@ (8006f34 <ReceiveData+0x38c>)
 8006c86:	238c      	movs	r3, #140	@ 0x8c
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "lifeSteps"));
				game.dailyGoal = (unsigned int) json_getInteger(
 8006c8c:	4aab      	ldr	r2, [pc, #684]	@ (8006f3c <ReceiveData+0x394>)
 8006c8e:	193b      	adds	r3, r7, r4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	0011      	movs	r1, r2
 8006c94:	0018      	movs	r0, r3
 8006c96:	f001 fbd6 	bl	8008446 <json_getProperty>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f7fd ff0f 	bl	8004ac0 <json_getInteger>
 8006ca2:	0002      	movs	r2, r0
 8006ca4:	000b      	movs	r3, r1
 8006ca6:	0011      	movs	r1, r2
 8006ca8:	4aa2      	ldr	r2, [pc, #648]	@ (8006f34 <ReceiveData+0x38c>)
 8006caa:	2392      	movs	r3, #146	@ 0x92
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "difficulty"));
				game.evo = (unsigned int) json_getInteger(
 8006cb0:	4aa3      	ldr	r2, [pc, #652]	@ (8006f40 <ReceiveData+0x398>)
 8006cb2:	193b      	adds	r3, r7, r4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	0011      	movs	r1, r2
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f001 fbc4 	bl	8008446 <json_getProperty>
 8006cbe:	0003      	movs	r3, r0
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fd fefd 	bl	8004ac0 <json_getInteger>
 8006cc6:	0002      	movs	r2, r0
 8006cc8:	000b      	movs	r3, r1
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	4b99      	ldr	r3, [pc, #612]	@ (8006f34 <ReceiveData+0x38c>)
 8006cce:	741a      	strb	r2, [r3, #16]
						json_getProperty(parent, "evolution"));
				game.mood = (unsigned int) json_getInteger(
 8006cd0:	4a9c      	ldr	r2, [pc, #624]	@ (8006f44 <ReceiveData+0x39c>)
 8006cd2:	193b      	adds	r3, r7, r4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	0011      	movs	r1, r2
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f001 fbb4 	bl	8008446 <json_getProperty>
 8006cde:	0003      	movs	r3, r0
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7fd feed 	bl	8004ac0 <json_getInteger>
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	000b      	movs	r3, r1
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	4b91      	ldr	r3, [pc, #580]	@ (8006f34 <ReceiveData+0x38c>)
 8006cee:	745a      	strb	r2, [r3, #17]
						json_getProperty(parent, "friendship"));
				game.stepsToday = (unsigned int) json_getInteger(
 8006cf0:	4a95      	ldr	r2, [pc, #596]	@ (8006f48 <ReceiveData+0x3a0>)
 8006cf2:	193b      	adds	r3, r7, r4
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	0011      	movs	r1, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f001 fba4 	bl	8008446 <json_getProperty>
 8006cfe:	0003      	movs	r3, r0
 8006d00:	0018      	movs	r0, r3
 8006d02:	f7fd fedd 	bl	8004ac0 <json_getInteger>
 8006d06:	0002      	movs	r2, r0
 8006d08:	000b      	movs	r3, r1
 8006d0a:	0011      	movs	r1, r2
 8006d0c:	4a89      	ldr	r2, [pc, #548]	@ (8006f34 <ReceiveData+0x38c>)
 8006d0e:	2390      	movs	r3, #144	@ 0x90
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "dailySteps"));
				game.weeklySteps = (unsigned int) json_getInteger(
 8006d14:	4a8d      	ldr	r2, [pc, #564]	@ (8006f4c <ReceiveData+0x3a4>)
 8006d16:	193b      	adds	r3, r7, r4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	0011      	movs	r1, r2
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f001 fb92 	bl	8008446 <json_getProperty>
 8006d22:	0003      	movs	r3, r0
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7fd fecb 	bl	8004ac0 <json_getInteger>
 8006d2a:	0002      	movs	r2, r0
 8006d2c:	000b      	movs	r3, r1
 8006d2e:	0011      	movs	r1, r2
 8006d30:	4a80      	ldr	r2, [pc, #512]	@ (8006f34 <ReceiveData+0x38c>)
 8006d32:	238e      	movs	r3, #142	@ 0x8e
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "weeklySteps"));
				json_t const *location;
				json_t const *locations = json_getProperty(parent, "locations");
 8006d38:	4a85      	ldr	r2, [pc, #532]	@ (8006f50 <ReceiveData+0x3a8>)
 8006d3a:	193b      	adds	r3, r7, r4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	0011      	movs	r1, r2
 8006d40:	0018      	movs	r0, r3
 8006d42:	f001 fb80 	bl	8008446 <json_getProperty>
 8006d46:	0003      	movs	r3, r0
 8006d48:	4a82      	ldr	r2, [pc, #520]	@ (8006f54 <ReceiveData+0x3ac>)
 8006d4a:	18b9      	adds	r1, r7, r2
 8006d4c:	600b      	str	r3, [r1, #0]
				for (location = json_getChild(locations); location; location =
 8006d4e:	18bb      	adds	r3, r7, r2
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f7fd feaa 	bl	8004aac <json_getChild>
 8006d58:	0003      	movs	r3, r0
 8006d5a:	22a0      	movs	r2, #160	@ 0xa0
 8006d5c:	0152      	lsls	r2, r2, #5
 8006d5e:	18ba      	adds	r2, r7, r2
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	e07a      	b.n	8006e5a <ReceiveData+0x2b2>
						json_getSibling(location)) {
					tempLoc.lat = (float) json_getReal(
 8006d64:	4a7c      	ldr	r2, [pc, #496]	@ (8006f58 <ReceiveData+0x3b0>)
 8006d66:	25a0      	movs	r5, #160	@ 0xa0
 8006d68:	016d      	lsls	r5, r5, #5
 8006d6a:	197b      	adds	r3, r7, r5
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	0011      	movs	r1, r2
 8006d70:	0018      	movs	r0, r3
 8006d72:	f001 fb68 	bl	8008446 <json_getProperty>
 8006d76:	0003      	movs	r3, r0
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fd feb3 	bl	8004ae4 <json_getReal>
 8006d7e:	0002      	movs	r2, r0
 8006d80:	000b      	movs	r3, r1
 8006d82:	0010      	movs	r0, r2
 8006d84:	0019      	movs	r1, r3
 8006d86:	f7fc fdc5 	bl	8003914 <__aeabi_d2f>
 8006d8a:	1c02      	adds	r2, r0, #0
 8006d8c:	4c73      	ldr	r4, [pc, #460]	@ (8006f5c <ReceiveData+0x3b4>)
 8006d8e:	193b      	adds	r3, r7, r4
 8006d90:	601a      	str	r2, [r3, #0]
							json_getProperty(location, "lat"));
					tempLoc.lon = (float) json_getReal(
 8006d92:	4a73      	ldr	r2, [pc, #460]	@ (8006f60 <ReceiveData+0x3b8>)
 8006d94:	197b      	adds	r3, r7, r5
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f001 fb53 	bl	8008446 <json_getProperty>
 8006da0:	0003      	movs	r3, r0
 8006da2:	0018      	movs	r0, r3
 8006da4:	f7fd fe9e 	bl	8004ae4 <json_getReal>
 8006da8:	0002      	movs	r2, r0
 8006daa:	000b      	movs	r3, r1
 8006dac:	0010      	movs	r0, r2
 8006dae:	0019      	movs	r1, r3
 8006db0:	f7fc fdb0 	bl	8003914 <__aeabi_d2f>
 8006db4:	1c02      	adds	r2, r0, #0
 8006db6:	193b      	adds	r3, r7, r4
 8006db8:	605a      	str	r2, [r3, #4]
							json_getProperty(location, "lng"));
					if (fabs(tempLoc.lat) < .00001) {
 8006dba:	193b      	adds	r3, r7, r4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	1c18      	adds	r0, r3, #0
 8006dc4:	f7fc fd5e 	bl	8003884 <__aeabi_f2d>
 8006dc8:	4a66      	ldr	r2, [pc, #408]	@ (8006f64 <ReceiveData+0x3bc>)
 8006dca:	4b67      	ldr	r3, [pc, #412]	@ (8006f68 <ReceiveData+0x3c0>)
 8006dcc:	f7f9 fb4e 	bl	800046c <__aeabi_dcmplt>
 8006dd0:	1e03      	subs	r3, r0, #0
 8006dd2:	d027      	beq.n	8006e24 <ReceiveData+0x27c>

						tempLoc.lat = (float) json_getReal(
 8006dd4:	4a65      	ldr	r2, [pc, #404]	@ (8006f6c <ReceiveData+0x3c4>)
 8006dd6:	197b      	adds	r3, r7, r5
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	0011      	movs	r1, r2
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f001 fb32 	bl	8008446 <json_getProperty>
 8006de2:	0003      	movs	r3, r0
 8006de4:	0018      	movs	r0, r3
 8006de6:	f7fd fe7d 	bl	8004ae4 <json_getReal>
 8006dea:	0002      	movs	r2, r0
 8006dec:	000b      	movs	r3, r1
 8006dee:	0010      	movs	r0, r2
 8006df0:	0019      	movs	r1, r3
 8006df2:	f7fc fd8f 	bl	8003914 <__aeabi_d2f>
 8006df6:	1c02      	adds	r2, r0, #0
 8006df8:	193b      	adds	r3, r7, r4
 8006dfa:	601a      	str	r2, [r3, #0]
								json_getProperty(location, "Lat"));
						tempLoc.lon = (float) json_getReal(
 8006dfc:	4a5c      	ldr	r2, [pc, #368]	@ (8006f70 <ReceiveData+0x3c8>)
 8006dfe:	197b      	adds	r3, r7, r5
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	0011      	movs	r1, r2
 8006e04:	0018      	movs	r0, r3
 8006e06:	f001 fb1e 	bl	8008446 <json_getProperty>
 8006e0a:	0003      	movs	r3, r0
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7fd fe69 	bl	8004ae4 <json_getReal>
 8006e12:	0002      	movs	r2, r0
 8006e14:	000b      	movs	r3, r1
 8006e16:	0010      	movs	r0, r2
 8006e18:	0019      	movs	r1, r3
 8006e1a:	f7fc fd7b 	bl	8003914 <__aeabi_d2f>
 8006e1e:	1c02      	adds	r2, r0, #0
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	605a      	str	r2, [r3, #4]
								json_getProperty(location, "Lng"));
					}
					game.positions[locI] = tempLoc;
 8006e24:	4a43      	ldr	r2, [pc, #268]	@ (8006f34 <ReceiveData+0x38c>)
 8006e26:	4c3f      	ldr	r4, [pc, #252]	@ (8006f24 <ReceiveData+0x37c>)
 8006e28:	193b      	adds	r3, r7, r4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3303      	adds	r3, #3
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	494a      	ldr	r1, [pc, #296]	@ (8006f5c <ReceiveData+0x3b4>)
 8006e32:	1879      	adds	r1, r7, r1
 8006e34:	18d3      	adds	r3, r2, r3
 8006e36:	000a      	movs	r2, r1
 8006e38:	ca03      	ldmia	r2!, {r0, r1}
 8006e3a:	c303      	stmia	r3!, {r0, r1}
					locI++;
 8006e3c:	193b      	adds	r3, r7, r4
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	193a      	adds	r2, r7, r4
 8006e44:	6013      	str	r3, [r2, #0]
						json_getSibling(location)) {
 8006e46:	24a0      	movs	r4, #160	@ 0xa0
 8006e48:	0164      	lsls	r4, r4, #5
 8006e4a:	193b      	adds	r3, r7, r4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f7fd fe22 	bl	8004a98 <json_getSibling>
 8006e54:	0003      	movs	r3, r0
 8006e56:	193a      	adds	r2, r7, r4
 8006e58:	6013      	str	r3, [r2, #0]
				for (location = json_getChild(locations); location; location =
 8006e5a:	23a0      	movs	r3, #160	@ 0xa0
 8006e5c:	015b      	lsls	r3, r3, #5
 8006e5e:	18fb      	adds	r3, r7, r3
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d000      	beq.n	8006e68 <ReceiveData+0x2c0>
 8006e66:	e77d      	b.n	8006d64 <ReceiveData+0x1bc>
				}
				game.numLocations = locI;
 8006e68:	4b2e      	ldr	r3, [pc, #184]	@ (8006f24 <ReceiveData+0x37c>)
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4b31      	ldr	r3, [pc, #196]	@ (8006f34 <ReceiveData+0x38c>)
 8006e70:	615a      	str	r2, [r3, #20]
				for (locI = locI; locI < 32; locI++) {
 8006e72:	e010      	b.n	8006e96 <ReceiveData+0x2ee>
					memset(&game.positions[locI], 0,
 8006e74:	4c2b      	ldr	r4, [pc, #172]	@ (8006f24 <ReceiveData+0x37c>)
 8006e76:	193b      	adds	r3, r7, r4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3303      	adds	r3, #3
 8006e7c:	00da      	lsls	r2, r3, #3
 8006e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8006f34 <ReceiveData+0x38c>)
 8006e80:	18d3      	adds	r3, r2, r3
 8006e82:	2208      	movs	r2, #8
 8006e84:	2100      	movs	r1, #0
 8006e86:	0018      	movs	r0, r3
 8006e88:	f008 f88a 	bl	800efa0 <memset>
				for (locI = locI; locI < 32; locI++) {
 8006e8c:	193b      	adds	r3, r7, r4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	193a      	adds	r2, r7, r4
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	4b23      	ldr	r3, [pc, #140]	@ (8006f24 <ReceiveData+0x37c>)
 8006e98:	18fb      	adds	r3, r7, r3
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b1f      	cmp	r3, #31
 8006e9e:	dde9      	ble.n	8006e74 <ReceiveData+0x2cc>
							sizeof(game.positions[locI]));
				}
				//SendData();
			}
			for (ii = 0; ii <= rI; ii++)
 8006ea0:	4b34      	ldr	r3, [pc, #208]	@ (8006f74 <ReceiveData+0x3cc>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	801a      	strh	r2, [r3, #0]
 8006ea6:	e00d      	b.n	8006ec4 <ReceiveData+0x31c>
				syncBuffer[ii] = 0;
 8006ea8:	4b32      	ldr	r3, [pc, #200]	@ (8006f74 <ReceiveData+0x3cc>)
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	001a      	movs	r2, r3
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f1c <ReceiveData+0x374>)
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= rI; ii++)
 8006eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8006f74 <ReceiveData+0x3cc>)
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f74 <ReceiveData+0x3cc>)
 8006ec2:	801a      	strh	r2, [r3, #0]
 8006ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f74 <ReceiveData+0x3cc>)
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	001a      	movs	r2, r3
 8006ecc:	4912      	ldr	r1, [pc, #72]	@ (8006f18 <ReceiveData+0x370>)
 8006ece:	187b      	adds	r3, r7, r1
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	dae8      	bge.n	8006ea8 <ReceiveData+0x300>
			rI = 0;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	187a      	adds	r2, r7, r1
 8006eda:	6013      	str	r3, [r2, #0]
			break;
 8006edc:	e014      	b.n	8006f08 <ReceiveData+0x360>
		} else {
			rI++;
 8006ede:	4a0e      	ldr	r2, [pc, #56]	@ (8006f18 <ReceiveData+0x370>)
 8006ee0:	18bb      	adds	r3, r7, r2
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	18ba      	adds	r2, r7, r2
 8006ee8:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 8006eea:	4b0b      	ldr	r3, [pc, #44]	@ (8006f18 <ReceiveData+0x370>)
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <ReceiveData+0x374>)
 8006ef2:	18d1      	adds	r1, r2, r3
 8006ef4:	23fa      	movs	r3, #250	@ 0xfa
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	481f      	ldr	r0, [pc, #124]	@ (8006f78 <ReceiveData+0x3d0>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	f006 f82a 	bl	800cf54 <HAL_UART_Receive>
 8006f00:	1e03      	subs	r3, r0, #0
 8006f02:	d100      	bne.n	8006f06 <ReceiveData+0x35e>
 8006f04:	e659      	b.n	8006bba <ReceiveData+0x12>
		}
	}

}
 8006f06:	46c0      	nop			@ (mov r8, r8)
 8006f08:	46c0      	nop			@ (mov r8, r8)
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f7c <ReceiveData+0x3d4>)
 8006f0e:	449d      	add	sp, r3
 8006f10:	bdb0      	pop	{r4, r5, r7, pc}
 8006f12:	46c0      	nop			@ (mov r8, r8)
 8006f14:	ffffebf0 	.word	0xffffebf0
 8006f18:	0000140c 	.word	0x0000140c
 8006f1c:	20000650 	.word	0x20000650
 8006f20:	000013fc 	.word	0x000013fc
 8006f24:	00001408 	.word	0x00001408
 8006f28:	08011800 	.word	0x08011800
 8006f2c:	000013f8 	.word	0x000013f8
 8006f30:	00001404 	.word	0x00001404
 8006f34:	20000298 	.word	0x20000298
 8006f38:	08011804 	.word	0x08011804
 8006f3c:	08011810 	.word	0x08011810
 8006f40:	0801181c 	.word	0x0801181c
 8006f44:	08011828 	.word	0x08011828
 8006f48:	08011834 	.word	0x08011834
 8006f4c:	08011840 	.word	0x08011840
 8006f50:	0801184c 	.word	0x0801184c
 8006f54:	000013f4 	.word	0x000013f4
 8006f58:	08011858 	.word	0x08011858
 8006f5c:	000013ec 	.word	0x000013ec
 8006f60:	0801185c 	.word	0x0801185c
 8006f64:	88e368f1 	.word	0x88e368f1
 8006f68:	3ee4f8b5 	.word	0x3ee4f8b5
 8006f6c:	08011860 	.word	0x08011860
 8006f70:	08011864 	.word	0x08011864
 8006f74:	200003ec 	.word	0x200003ec
 8006f78:	20001440 	.word	0x20001440
 8006f7c:	00001410 	.word	0x00001410

08006f80 <CheckExp>:
int CheckExp(int threshold, int comparer) {
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	int value = (int) ((float) comparer
 8006f8a:	6838      	ldr	r0, [r7, #0]
 8006f8c:	f7fa fc44 	bl	8001818 <__aeabi_i2f>
 8006f90:	1c04      	adds	r4, r0, #0
			* (1.0f + ((float) game.numLocations) / expDivisor));
 8006f92:	4b1c      	ldr	r3, [pc, #112]	@ (8007004 <CheckExp+0x84>)
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	0018      	movs	r0, r3
 8006f98:	f7fa fc8e 	bl	80018b8 <__aeabi_ui2f>
 8006f9c:	1c03      	adds	r3, r0, #0
 8006f9e:	2281      	movs	r2, #129	@ 0x81
 8006fa0:	05d2      	lsls	r2, r2, #23
 8006fa2:	1c11      	adds	r1, r2, #0
 8006fa4:	1c18      	adds	r0, r3, #0
 8006fa6:	f7f9 fe75 	bl	8000c94 <__aeabi_fdiv>
 8006faa:	1c03      	adds	r3, r0, #0
 8006fac:	21fe      	movs	r1, #254	@ 0xfe
 8006fae:	0589      	lsls	r1, r1, #22
 8006fb0:	1c18      	adds	r0, r3, #0
 8006fb2:	f7f9 fc7d 	bl	80008b0 <__aeabi_fadd>
 8006fb6:	1c03      	adds	r3, r0, #0
 8006fb8:	1c19      	adds	r1, r3, #0
 8006fba:	1c20      	adds	r0, r4, #0
 8006fbc:	f7fa f838 	bl	8001030 <__aeabi_fmul>
 8006fc0:	1c03      	adds	r3, r0, #0
	int value = (int) ((float) comparer
 8006fc2:	1c18      	adds	r0, r3, #0
 8006fc4:	f7fa fc08 	bl	80017d8 <__aeabi_f2iz>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	60fb      	str	r3, [r7, #12]
	if (value < (threshold / 4))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da00      	bge.n	8006fd4 <CheckExp+0x54>
 8006fd2:	3303      	adds	r3, #3
 8006fd4:	109b      	asrs	r3, r3, #2
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	da02      	bge.n	8006fe4 <CheckExp+0x64>
		return -1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	425b      	negs	r3, r3
 8006fe2:	e00b      	b.n	8006ffc <CheckExp+0x7c>
	if (value < threshold)
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	da01      	bge.n	8006ff0 <CheckExp+0x70>
		return 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e005      	b.n	8006ffc <CheckExp+0x7c>
	if (value >= threshold)
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	db01      	blt.n	8006ffc <CheckExp+0x7c>
		return 1;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e7ff      	b.n	8006ffc <CheckExp+0x7c>
}
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b005      	add	sp, #20
 8007002:	bd90      	pop	{r4, r7, pc}
 8007004:	20000298 	.word	0x20000298

08007008 <GetLatLon>:
void GetLatLon() {
 8007008:	b5b0      	push	{r4, r5, r7, lr}
 800700a:	b08c      	sub	sp, #48	@ 0x30
 800700c:	af00      	add	r7, sp, #0
	int gpsI = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
	double gpsThreshold = 0.00383;
 8007016:	4a94      	ldr	r2, [pc, #592]	@ (8007268 <GetLatLon+0x260>)
 8007018:	4b94      	ldr	r3, [pc, #592]	@ (800726c <GetLatLon+0x264>)
 800701a:	623a      	str	r2, [r7, #32]
 800701c:	627b      	str	r3, [r7, #36]	@ 0x24
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 800701e:	e10a      	b.n	8007236 <GetLatLon+0x22e>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 8007020:	4b93      	ldr	r3, [pc, #588]	@ (8007270 <GetLatLon+0x268>)
 8007022:	2200      	movs	r2, #0
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	e00d      	b.n	8007044 <GetLatLon+0x3c>
				buffer[ii] = 0;
 8007028:	4b91      	ldr	r3, [pc, #580]	@ (8007270 <GetLatLon+0x268>)
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	001a      	movs	r2, r3
 8007030:	4b90      	ldr	r3, [pc, #576]	@ (8007274 <GetLatLon+0x26c>)
 8007032:	2100      	movs	r1, #0
 8007034:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8007036:	4b8e      	ldr	r3, [pc, #568]	@ (8007270 <GetLatLon+0x268>)
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	3301      	adds	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	4b8b      	ldr	r3, [pc, #556]	@ (8007270 <GetLatLon+0x268>)
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	4b8a      	ldr	r3, [pc, #552]	@ (8007270 <GetLatLon+0x268>)
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b7f      	cmp	r3, #127	@ 0x7f
 800704c:	d9ec      	bls.n	8007028 <GetLatLon+0x20>
			buffer[0] = '$';
 800704e:	4b89      	ldr	r3, [pc, #548]	@ (8007274 <GetLatLon+0x26c>)
 8007050:	2224      	movs	r2, #36	@ 0x24
 8007052:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 8007058:	4a86      	ldr	r2, [pc, #536]	@ (8007274 <GetLatLon+0x26c>)
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	18d3      	adds	r3, r2, r3
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b0a      	cmp	r3, #10
 8007062:	d000      	beq.n	8007066 <GetLatLon+0x5e>
 8007064:	e0e4      	b.n	8007230 <GetLatLon+0x228>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 8007066:	4a83      	ldr	r2, [pc, #524]	@ (8007274 <GetLatLon+0x26c>)
 8007068:	4b83      	ldr	r3, [pc, #524]	@ (8007278 <GetLatLon+0x270>)
 800706a:	0011      	movs	r1, r2
 800706c:	0018      	movs	r0, r3
 800706e:	f000 fe0d 	bl	8007c8c <minmea_parse_gga>
 8007072:	1e03      	subs	r3, r0, #0
 8007074:	d100      	bne.n	8007078 <GetLatLon+0x70>
 8007076:	e0c4      	b.n	8007202 <GetLatLon+0x1fa>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8007078:	4b80      	ldr	r3, [pc, #512]	@ (800727c <GetLatLon+0x274>)
 800707a:	0018      	movs	r0, r3
 800707c:	f7fd fcc8 	bl	8004a10 <minmea_tocoord>
 8007080:	1c02      	adds	r2, r0, #0
 8007082:	2508      	movs	r5, #8
 8007084:	197b      	adds	r3, r7, r5
 8007086:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8007088:	4b7d      	ldr	r3, [pc, #500]	@ (8007280 <GetLatLon+0x278>)
 800708a:	0018      	movs	r0, r3
 800708c:	f7fd fcc0 	bl	8004a10 <minmea_tocoord>
 8007090:	1c02      	adds	r2, r0, #0
 8007092:	197b      	adds	r3, r7, r5
 8007094:	605a      	str	r2, [r3, #4]
				game.time = ggaStruct.time;
 8007096:	4b7b      	ldr	r3, [pc, #492]	@ (8007284 <GetLatLon+0x27c>)
 8007098:	4a77      	ldr	r2, [pc, #476]	@ (8007278 <GetLatLon+0x270>)
 800709a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800709c:	c313      	stmia	r3!, {r0, r1, r4}
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	601a      	str	r2, [r3, #0]
				frameGot = 1;
 80070a2:	4b79      	ldr	r3, [pc, #484]	@ (8007288 <GetLatLon+0x280>)
 80070a4:	2201      	movs	r2, #1
 80070a6:	701a      	strb	r2, [r3, #0]
				posCheckI = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	62bb      	str	r3, [r7, #40]	@ 0x28
				if(isnan(pos.lat)||isnan(pos.lon)||pos.lon>400.0f||pos.lon<-400.0f||pos.lat>400.0f||pos.lon<-400.0f) return;
 80070ac:	002c      	movs	r4, r5
 80070ae:	193b      	adds	r3, r7, r4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	1c19      	adds	r1, r3, #0
 80070b4:	1c18      	adds	r0, r3, #0
 80070b6:	f7fa fb79 	bl	80017ac <__aeabi_fcmpun>
 80070ba:	1e03      	subs	r3, r0, #0
 80070bc:	d000      	beq.n	80070c0 <GetLatLon+0xb8>
 80070be:	e0cb      	b.n	8007258 <GetLatLon+0x250>
 80070c0:	193b      	adds	r3, r7, r4
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	1c19      	adds	r1, r3, #0
 80070c6:	1c18      	adds	r0, r3, #0
 80070c8:	f7fa fb70 	bl	80017ac <__aeabi_fcmpun>
 80070cc:	1e03      	subs	r3, r0, #0
 80070ce:	d000      	beq.n	80070d2 <GetLatLon+0xca>
 80070d0:	e0c2      	b.n	8007258 <GetLatLon+0x250>
 80070d2:	193b      	adds	r3, r7, r4
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	496d      	ldr	r1, [pc, #436]	@ (800728c <GetLatLon+0x284>)
 80070d8:	1c18      	adds	r0, r3, #0
 80070da:	f7f9 fa15 	bl	8000508 <__aeabi_fcmpgt>
 80070de:	1e03      	subs	r3, r0, #0
 80070e0:	d000      	beq.n	80070e4 <GetLatLon+0xdc>
 80070e2:	e0b9      	b.n	8007258 <GetLatLon+0x250>
 80070e4:	193b      	adds	r3, r7, r4
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4969      	ldr	r1, [pc, #420]	@ (8007290 <GetLatLon+0x288>)
 80070ea:	1c18      	adds	r0, r3, #0
 80070ec:	f7f9 f9f8 	bl	80004e0 <__aeabi_fcmplt>
 80070f0:	1e03      	subs	r3, r0, #0
 80070f2:	d000      	beq.n	80070f6 <GetLatLon+0xee>
 80070f4:	e0b0      	b.n	8007258 <GetLatLon+0x250>
 80070f6:	193b      	adds	r3, r7, r4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4964      	ldr	r1, [pc, #400]	@ (800728c <GetLatLon+0x284>)
 80070fc:	1c18      	adds	r0, r3, #0
 80070fe:	f7f9 fa03 	bl	8000508 <__aeabi_fcmpgt>
 8007102:	1e03      	subs	r3, r0, #0
 8007104:	d000      	beq.n	8007108 <GetLatLon+0x100>
 8007106:	e0a7      	b.n	8007258 <GetLatLon+0x250>
 8007108:	193b      	adds	r3, r7, r4
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4960      	ldr	r1, [pc, #384]	@ (8007290 <GetLatLon+0x288>)
 800710e:	1c18      	adds	r0, r3, #0
 8007110:	f7f9 f9e6 	bl	80004e0 <__aeabi_fcmplt>
 8007114:	1e03      	subs	r3, r0, #0
 8007116:	d000      	beq.n	800711a <GetLatLon+0x112>
 8007118:	e09e      	b.n	8007258 <GetLatLon+0x250>
				for (posCheckI = 0; posCheckI < game.numLocations;
 800711a:	2300      	movs	r3, #0
 800711c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800711e:	e053      	b.n	80071c8 <GetLatLon+0x1c0>
						posCheckI++) {
					tempPos = game.positions[posCheckI];
 8007120:	003a      	movs	r2, r7
 8007122:	4958      	ldr	r1, [pc, #352]	@ (8007284 <GetLatLon+0x27c>)
 8007124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007126:	3303      	adds	r3, #3
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	18cb      	adds	r3, r1, r3
 800712c:	cb03      	ldmia	r3!, {r0, r1}
 800712e:	c203      	stmia	r2!, {r0, r1}
						checkW = fabs(tempPos.lat - pos.lat);
 8007130:	003b      	movs	r3, r7
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	2408      	movs	r4, #8
 8007136:	193b      	adds	r3, r7, r4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	1c19      	adds	r1, r3, #0
 800713c:	1c10      	adds	r0, r2, #0
 800713e:	f7fa f8d1 	bl	80012e4 <__aeabi_fsub>
 8007142:	1c03      	adds	r3, r0, #0
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	1c18      	adds	r0, r3, #0
 800714a:	f7fc fb9b 	bl	8003884 <__aeabi_f2d>
 800714e:	0002      	movs	r2, r0
 8007150:	000b      	movs	r3, r1
 8007152:	61ba      	str	r2, [r7, #24]
 8007154:	61fb      	str	r3, [r7, #28]
						checkH = fabs(tempPos.lon - pos.lon);
 8007156:	003b      	movs	r3, r7
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	193b      	adds	r3, r7, r4
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	1c19      	adds	r1, r3, #0
 8007160:	1c10      	adds	r0, r2, #0
 8007162:	f7fa f8bf 	bl	80012e4 <__aeabi_fsub>
 8007166:	1c03      	adds	r3, r0, #0
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	1c18      	adds	r0, r3, #0
 800716e:	f7fc fb89 	bl	8003884 <__aeabi_f2d>
 8007172:	0002      	movs	r2, r0
 8007174:	000b      	movs	r3, r1
 8007176:	613a      	str	r2, [r7, #16]
 8007178:	617b      	str	r3, [r7, #20]
						if ((double)sqrt((checkW * checkW) + (checkH * checkH))
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	69b8      	ldr	r0, [r7, #24]
 8007180:	69f9      	ldr	r1, [r7, #28]
 8007182:	f7fb fbdf 	bl	8002944 <__aeabi_dmul>
 8007186:	0002      	movs	r2, r0
 8007188:	000b      	movs	r3, r1
 800718a:	0014      	movs	r4, r2
 800718c:	001d      	movs	r5, r3
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	6938      	ldr	r0, [r7, #16]
 8007194:	6979      	ldr	r1, [r7, #20]
 8007196:	f7fb fbd5 	bl	8002944 <__aeabi_dmul>
 800719a:	0002      	movs	r2, r0
 800719c:	000b      	movs	r3, r1
 800719e:	0020      	movs	r0, r4
 80071a0:	0029      	movs	r1, r5
 80071a2:	f7fa fbcf 	bl	8001944 <__aeabi_dadd>
 80071a6:	0002      	movs	r2, r0
 80071a8:	000b      	movs	r3, r1
 80071aa:	0010      	movs	r0, r2
 80071ac:	0019      	movs	r1, r3
 80071ae:	f00a f81a 	bl	80111e6 <sqrt>
 80071b2:	0002      	movs	r2, r0
 80071b4:	000b      	movs	r3, r1
 80071b6:	6a38      	ldr	r0, [r7, #32]
 80071b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071ba:	f7f9 f96b 	bl	8000494 <__aeabi_dcmpgt>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d14c      	bne.n	800725c <GetLatLon+0x254>
						posCheckI++) {
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	3301      	adds	r3, #1
 80071c6:	62bb      	str	r3, [r7, #40]	@ 0x28
				for (posCheckI = 0; posCheckI < game.numLocations;
 80071c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007284 <GetLatLon+0x27c>)
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d8a6      	bhi.n	8007120 <GetLatLon+0x118>
								< gpsThreshold)
							return;

					}
game.positions[game.numLocations] = pos;
 80071d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007284 <GetLatLon+0x27c>)
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007284 <GetLatLon+0x27c>)
 80071d8:	3303      	adds	r3, #3
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	2108      	movs	r1, #8
 80071de:	1879      	adds	r1, r7, r1
 80071e0:	18d3      	adds	r3, r2, r3
 80071e2:	000a      	movs	r2, r1
 80071e4:	ca03      	ldmia	r2!, {r0, r1}
 80071e6:	c303      	stmia	r3!, {r0, r1}
				game.numLocations++;
 80071e8:	4b26      	ldr	r3, [pc, #152]	@ (8007284 <GetLatLon+0x27c>)
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	4b25      	ldr	r3, [pc, #148]	@ (8007284 <GetLatLon+0x27c>)
 80071f0:	615a      	str	r2, [r3, #20]
				if (game.numLocations > 31)
 80071f2:	4b24      	ldr	r3, [pc, #144]	@ (8007284 <GetLatLon+0x27c>)
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	2b1f      	cmp	r3, #31
 80071f8:	d932      	bls.n	8007260 <GetLatLon+0x258>
					game.numLocations = 0;
 80071fa:	4b22      	ldr	r3, [pc, #136]	@ (8007284 <GetLatLon+0x27c>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	615a      	str	r2, [r3, #20]
				break;
 8007200:	e02e      	b.n	8007260 <GetLatLon+0x258>
				}
				for (ii = 0; ii <= 127; ii++)
 8007202:	4b1b      	ldr	r3, [pc, #108]	@ (8007270 <GetLatLon+0x268>)
 8007204:	2200      	movs	r2, #0
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e00d      	b.n	8007226 <GetLatLon+0x21e>
				buffer[ii] = 0;
 800720a:	4b19      	ldr	r3, [pc, #100]	@ (8007270 <GetLatLon+0x268>)
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	001a      	movs	r2, r3
 8007212:	4b18      	ldr	r3, [pc, #96]	@ (8007274 <GetLatLon+0x26c>)
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]
				for (ii = 0; ii <= 127; ii++)
 8007218:	4b15      	ldr	r3, [pc, #84]	@ (8007270 <GetLatLon+0x268>)
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	3301      	adds	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	4b13      	ldr	r3, [pc, #76]	@ (8007270 <GetLatLon+0x268>)
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	4b12      	ldr	r3, [pc, #72]	@ (8007270 <GetLatLon+0x268>)
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b7f      	cmp	r3, #127	@ 0x7f
 800722e:	d9ec      	bls.n	800720a <GetLatLon+0x202>
			}

			gpsI++;
 8007230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007232:	3301      	adds	r3, #1
 8007234:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8007236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007238:	4b0e      	ldr	r3, [pc, #56]	@ (8007274 <GetLatLon+0x26c>)
 800723a:	18d1      	adds	r1, r2, r3
 800723c:	23fa      	movs	r3, #250	@ 0xfa
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4814      	ldr	r0, [pc, #80]	@ (8007294 <GetLatLon+0x28c>)
 8007242:	2201      	movs	r2, #1
 8007244:	f005 fe86 	bl	800cf54 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 8007248:	4a0a      	ldr	r2, [pc, #40]	@ (8007274 <GetLatLon+0x26c>)
 800724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724c:	18d3      	adds	r3, r2, r3
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b24      	cmp	r3, #36	@ 0x24
 8007252:	d000      	beq.n	8007256 <GetLatLon+0x24e>
 8007254:	e700      	b.n	8007058 <GetLatLon+0x50>
 8007256:	e6e3      	b.n	8007020 <GetLatLon+0x18>
				if(isnan(pos.lat)||isnan(pos.lon)||pos.lon>400.0f||pos.lon<-400.0f||pos.lat>400.0f||pos.lon<-400.0f) return;
 8007258:	46c0      	nop			@ (mov r8, r8)
 800725a:	e002      	b.n	8007262 <GetLatLon+0x25a>
							return;
 800725c:	46c0      	nop			@ (mov r8, r8)
 800725e:	e000      	b.n	8007262 <GetLatLon+0x25a>
				break;
 8007260:	46c0      	nop			@ (mov r8, r8)
		}


	}
 8007262:	46bd      	mov	sp, r7
 8007264:	b00c      	add	sp, #48	@ 0x30
 8007266:	bdb0      	pop	{r4, r5, r7, pc}
 8007268:	97cc3a00 	.word	0x97cc3a00
 800726c:	3f6f6017 	.word	0x3f6f6017
 8007270:	200003ec 	.word	0x200003ec
 8007274:	20000440 	.word	0x20000440
 8007278:	200003f0 	.word	0x200003f0
 800727c:	20000400 	.word	0x20000400
 8007280:	20000408 	.word	0x20000408
 8007284:	20000298 	.word	0x20000298
 8007288:	2000043e 	.word	0x2000043e
 800728c:	43c80000 	.word	0x43c80000
 8007290:	c3c80000 	.word	0xc3c80000
 8007294:	200013ac 	.word	0x200013ac

08007298 <Emote>:

void Emote() {
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af04      	add	r7, sp, #16
	switch (game.evo) {
 800729e:	4b57      	ldr	r3, [pc, #348]	@ (80073fc <Emote+0x164>)
 80072a0:	7c1b      	ldrb	r3, [r3, #16]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d041      	beq.n	800732a <Emote+0x92>
 80072a6:	dd00      	ble.n	80072aa <Emote+0x12>
 80072a8:	e069      	b.n	800737e <Emote+0xe6>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <Emote+0x1c>
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d016      	beq.n	80072e0 <Emote+0x48>
 80072b2:	e064      	b.n	800737e <Emote+0xe6>
	case 0:
		if (game.time.seconds % 3 == 0) {
 80072b4:	4b51      	ldr	r3, [pc, #324]	@ (80073fc <Emote+0x164>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2103      	movs	r1, #3
 80072ba:	0018      	movs	r0, r3
 80072bc:	f7f9 f8ba 	bl	8000434 <__aeabi_idivmod>
 80072c0:	1e0b      	subs	r3, r1, #0
 80072c2:	d157      	bne.n	8007374 <Emote+0xdc>
			game.time.seconds++;
 80072c4:	4b4d      	ldr	r3, [pc, #308]	@ (80073fc <Emote+0x164>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	4b4c      	ldr	r3, [pc, #304]	@ (80073fc <Emote+0x164>)
 80072cc:	609a      	str	r2, [r3, #8]
			effect = EggNoise;
 80072ce:	4b4c      	ldr	r3, [pc, #304]	@ (8007400 <Emote+0x168>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	701a      	strb	r2, [r3, #0]
			PlayEffect(effect);
 80072d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007400 <Emote+0x168>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	0018      	movs	r0, r3
 80072da:	f7fe fbc3 	bl	8005a64 <PlayEffect>
		}
		break;
 80072de:	e049      	b.n	8007374 <Emote+0xdc>
	case 1:
		if (game.time.seconds % 3 == 0) {
 80072e0:	4b46      	ldr	r3, [pc, #280]	@ (80073fc <Emote+0x164>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2103      	movs	r1, #3
 80072e6:	0018      	movs	r0, r3
 80072e8:	f7f9 f8a4 	bl	8000434 <__aeabi_idivmod>
 80072ec:	1e0b      	subs	r3, r1, #0
 80072ee:	d143      	bne.n	8007378 <Emote+0xe0>
			game.time.seconds++;
 80072f0:	4b42      	ldr	r3, [pc, #264]	@ (80073fc <Emote+0x164>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	4b41      	ldr	r3, [pc, #260]	@ (80073fc <Emote+0x164>)
 80072f8:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 80072fa:	4b40      	ldr	r3, [pc, #256]	@ (80073fc <Emote+0x164>)
 80072fc:	7c5b      	ldrb	r3, [r3, #17]
 80072fe:	001a      	movs	r2, r3
 8007300:	2300      	movs	r3, #0
 8007302:	429a      	cmp	r2, r3
 8007304:	dd08      	ble.n	8007318 <Emote+0x80>
				effect = YoungNoiseHappy;
 8007306:	4b3e      	ldr	r3, [pc, #248]	@ (8007400 <Emote+0x168>)
 8007308:	2202      	movs	r2, #2
 800730a:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 800730c:	4b3c      	ldr	r3, [pc, #240]	@ (8007400 <Emote+0x168>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	0018      	movs	r0, r3
 8007312:	f7fe fba7 	bl	8005a64 <PlayEffect>
				effect = YoungNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 8007316:	e02f      	b.n	8007378 <Emote+0xe0>
				effect = YoungNoiseSad;
 8007318:	4b39      	ldr	r3, [pc, #228]	@ (8007400 <Emote+0x168>)
 800731a:	2203      	movs	r2, #3
 800731c:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 800731e:	4b38      	ldr	r3, [pc, #224]	@ (8007400 <Emote+0x168>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	0018      	movs	r0, r3
 8007324:	f7fe fb9e 	bl	8005a64 <PlayEffect>
		break;
 8007328:	e026      	b.n	8007378 <Emote+0xe0>
	case 2:
		if (game.time.seconds % 3 == 0) {
 800732a:	4b34      	ldr	r3, [pc, #208]	@ (80073fc <Emote+0x164>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2103      	movs	r1, #3
 8007330:	0018      	movs	r0, r3
 8007332:	f7f9 f87f 	bl	8000434 <__aeabi_idivmod>
 8007336:	1e0b      	subs	r3, r1, #0
 8007338:	d120      	bne.n	800737c <Emote+0xe4>
			game.time.seconds++;
 800733a:	4b30      	ldr	r3, [pc, #192]	@ (80073fc <Emote+0x164>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	4b2e      	ldr	r3, [pc, #184]	@ (80073fc <Emote+0x164>)
 8007342:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 8007344:	4b2d      	ldr	r3, [pc, #180]	@ (80073fc <Emote+0x164>)
 8007346:	7c5b      	ldrb	r3, [r3, #17]
 8007348:	001a      	movs	r2, r3
 800734a:	2300      	movs	r3, #0
 800734c:	429a      	cmp	r2, r3
 800734e:	dd08      	ble.n	8007362 <Emote+0xca>
				effect = AdultNoiseHappy;
 8007350:	4b2b      	ldr	r3, [pc, #172]	@ (8007400 <Emote+0x168>)
 8007352:	2204      	movs	r2, #4
 8007354:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8007356:	4b2a      	ldr	r3, [pc, #168]	@ (8007400 <Emote+0x168>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	0018      	movs	r0, r3
 800735c:	f7fe fb82 	bl	8005a64 <PlayEffect>
				effect = AdultNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 8007360:	e00c      	b.n	800737c <Emote+0xe4>
				effect = AdultNoiseSad;
 8007362:	4b27      	ldr	r3, [pc, #156]	@ (8007400 <Emote+0x168>)
 8007364:	2205      	movs	r2, #5
 8007366:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8007368:	4b25      	ldr	r3, [pc, #148]	@ (8007400 <Emote+0x168>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	0018      	movs	r0, r3
 800736e:	f7fe fb79 	bl	8005a64 <PlayEffect>
		break;
 8007372:	e003      	b.n	800737c <Emote+0xe4>
		break;
 8007374:	46c0      	nop			@ (mov r8, r8)
 8007376:	e002      	b.n	800737e <Emote+0xe6>
		break;
 8007378:	46c0      	nop			@ (mov r8, r8)
 800737a:	e000      	b.n	800737e <Emote+0xe6>
		break;
 800737c:	46c0      	nop			@ (mov r8, r8)
	}
	if (game.mood <= sadMood) {
 800737e:	4b1f      	ldr	r3, [pc, #124]	@ (80073fc <Emote+0x164>)
 8007380:	7c5b      	ldrb	r3, [r3, #17]
 8007382:	001a      	movs	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	429a      	cmp	r2, r3
 8007388:	dc0d      	bgt.n	80073a6 <Emote+0x10e>
		drawString(0, 10, "Mood :( ", WHITE, BLACK, 1, 1);
 800738a:	2301      	movs	r3, #1
 800738c:	425b      	negs	r3, r3
 800738e:	4a1d      	ldr	r2, [pc, #116]	@ (8007404 <Emote+0x16c>)
 8007390:	2101      	movs	r1, #1
 8007392:	9102      	str	r1, [sp, #8]
 8007394:	2101      	movs	r1, #1
 8007396:	9101      	str	r1, [sp, #4]
 8007398:	2100      	movs	r1, #0
 800739a:	9100      	str	r1, [sp, #0]
 800739c:	210a      	movs	r1, #10
 800739e:	2000      	movs	r0, #0
 80073a0:	f7fc fe0d 	bl	8003fbe <drawString>
	} else if (game.mood <= mehMood) {
		drawString(0, 10, "Mood :I ", WHITE, BLACK, 1, 1);
	} else if (game.mood >= happyMood) {
		drawString(0, 10, "Mood :) ", WHITE, BLACK, 1, 1);
	}
}
 80073a4:	e026      	b.n	80073f4 <Emote+0x15c>
	} else if (game.mood <= mehMood) {
 80073a6:	4b15      	ldr	r3, [pc, #84]	@ (80073fc <Emote+0x164>)
 80073a8:	7c5b      	ldrb	r3, [r3, #17]
 80073aa:	001a      	movs	r2, r3
 80073ac:	2301      	movs	r3, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	dc0d      	bgt.n	80073ce <Emote+0x136>
		drawString(0, 10, "Mood :I ", WHITE, BLACK, 1, 1);
 80073b2:	2301      	movs	r3, #1
 80073b4:	425b      	negs	r3, r3
 80073b6:	4a14      	ldr	r2, [pc, #80]	@ (8007408 <Emote+0x170>)
 80073b8:	2101      	movs	r1, #1
 80073ba:	9102      	str	r1, [sp, #8]
 80073bc:	2101      	movs	r1, #1
 80073be:	9101      	str	r1, [sp, #4]
 80073c0:	2100      	movs	r1, #0
 80073c2:	9100      	str	r1, [sp, #0]
 80073c4:	210a      	movs	r1, #10
 80073c6:	2000      	movs	r0, #0
 80073c8:	f7fc fdf9 	bl	8003fbe <drawString>
}
 80073cc:	e012      	b.n	80073f4 <Emote+0x15c>
	} else if (game.mood >= happyMood) {
 80073ce:	4b0b      	ldr	r3, [pc, #44]	@ (80073fc <Emote+0x164>)
 80073d0:	7c5b      	ldrb	r3, [r3, #17]
 80073d2:	001a      	movs	r2, r3
 80073d4:	2302      	movs	r3, #2
 80073d6:	429a      	cmp	r2, r3
 80073d8:	db0c      	blt.n	80073f4 <Emote+0x15c>
		drawString(0, 10, "Mood :) ", WHITE, BLACK, 1, 1);
 80073da:	2301      	movs	r3, #1
 80073dc:	425b      	negs	r3, r3
 80073de:	4a0b      	ldr	r2, [pc, #44]	@ (800740c <Emote+0x174>)
 80073e0:	2101      	movs	r1, #1
 80073e2:	9102      	str	r1, [sp, #8]
 80073e4:	2101      	movs	r1, #1
 80073e6:	9101      	str	r1, [sp, #4]
 80073e8:	2100      	movs	r1, #0
 80073ea:	9100      	str	r1, [sp, #0]
 80073ec:	210a      	movs	r1, #10
 80073ee:	2000      	movs	r0, #0
 80073f0:	f7fc fde5 	bl	8003fbe <drawString>
}
 80073f4:	46c0      	nop			@ (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	20000298 	.word	0x20000298
 8007400:	20000288 	.word	0x20000288
 8007404:	08011868 	.word	0x08011868
 8007408:	08011874 	.word	0x08011874
 800740c:	08011880 	.word	0x08011880

08007410 <GetJustLatLon>:
struct latLon GetJustLatLon() {
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b089      	sub	sp, #36	@ 0x24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	int gpsI = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8007420:	e057      	b.n	80074d2 <GetJustLatLon+0xc2>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 8007422:	4b36      	ldr	r3, [pc, #216]	@ (80074fc <GetJustLatLon+0xec>)
 8007424:	2200      	movs	r2, #0
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	e00d      	b.n	8007446 <GetJustLatLon+0x36>
				buffer[ii] = 0;
 800742a:	4b34      	ldr	r3, [pc, #208]	@ (80074fc <GetJustLatLon+0xec>)
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	001a      	movs	r2, r3
 8007432:	4b33      	ldr	r3, [pc, #204]	@ (8007500 <GetJustLatLon+0xf0>)
 8007434:	2100      	movs	r1, #0
 8007436:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8007438:	4b30      	ldr	r3, [pc, #192]	@ (80074fc <GetJustLatLon+0xec>)
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	3301      	adds	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	4b2e      	ldr	r3, [pc, #184]	@ (80074fc <GetJustLatLon+0xec>)
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	4b2d      	ldr	r3, [pc, #180]	@ (80074fc <GetJustLatLon+0xec>)
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b7f      	cmp	r3, #127	@ 0x7f
 800744e:	d9ec      	bls.n	800742a <GetJustLatLon+0x1a>
			buffer[0] = '$';
 8007450:	4b2b      	ldr	r3, [pc, #172]	@ (8007500 <GetJustLatLon+0xf0>)
 8007452:	2224      	movs	r2, #36	@ 0x24
 8007454:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 800745a:	4a29      	ldr	r2, [pc, #164]	@ (8007500 <GetJustLatLon+0xf0>)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	18d3      	adds	r3, r2, r3
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b0a      	cmp	r3, #10
 8007464:	d132      	bne.n	80074cc <GetJustLatLon+0xbc>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 8007466:	4a26      	ldr	r2, [pc, #152]	@ (8007500 <GetJustLatLon+0xf0>)
 8007468:	4b26      	ldr	r3, [pc, #152]	@ (8007504 <GetJustLatLon+0xf4>)
 800746a:	0011      	movs	r1, r2
 800746c:	0018      	movs	r0, r3
 800746e:	f000 fc0d 	bl	8007c8c <minmea_parse_gga>
 8007472:	1e03      	subs	r3, r0, #0
 8007474:	d013      	beq.n	800749e <GetJustLatLon+0x8e>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8007476:	4b24      	ldr	r3, [pc, #144]	@ (8007508 <GetJustLatLon+0xf8>)
 8007478:	0018      	movs	r0, r3
 800747a:	f7fd fac9 	bl	8004a10 <minmea_tocoord>
 800747e:	1c02      	adds	r2, r0, #0
 8007480:	2410      	movs	r4, #16
 8007482:	193b      	adds	r3, r7, r4
 8007484:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8007486:	4b21      	ldr	r3, [pc, #132]	@ (800750c <GetJustLatLon+0xfc>)
 8007488:	0018      	movs	r0, r3
 800748a:	f7fd fac1 	bl	8004a10 <minmea_tocoord>
 800748e:	1c02      	adds	r2, r0, #0
 8007490:	193b      	adds	r3, r7, r4
 8007492:	605a      	str	r2, [r3, #4]
				return pos;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	193a      	adds	r2, r7, r4
 8007498:	ca03      	ldmia	r2!, {r0, r1}
 800749a:	c303      	stmia	r3!, {r0, r1}
 800749c:	e029      	b.n	80074f2 <GetJustLatLon+0xe2>
				break;
			}

			for (ii = 0; ii <= 127; ii++)
 800749e:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <GetJustLatLon+0xec>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e00d      	b.n	80074c2 <GetJustLatLon+0xb2>
				buffer[ii] = 0;
 80074a6:	4b15      	ldr	r3, [pc, #84]	@ (80074fc <GetJustLatLon+0xec>)
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	001a      	movs	r2, r3
 80074ae:	4b14      	ldr	r3, [pc, #80]	@ (8007500 <GetJustLatLon+0xf0>)
 80074b0:	2100      	movs	r1, #0
 80074b2:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 80074b4:	4b11      	ldr	r3, [pc, #68]	@ (80074fc <GetJustLatLon+0xec>)
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3301      	adds	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <GetJustLatLon+0xec>)
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	4b0e      	ldr	r3, [pc, #56]	@ (80074fc <GetJustLatLon+0xec>)
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80074ca:	d9ec      	bls.n	80074a6 <GetJustLatLon+0x96>
		}
		gpsI++;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007500 <GetJustLatLon+0xf0>)
 80074d6:	18d1      	adds	r1, r2, r3
 80074d8:	23fa      	movs	r3, #250	@ 0xfa
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	480c      	ldr	r0, [pc, #48]	@ (8007510 <GetJustLatLon+0x100>)
 80074de:	2201      	movs	r2, #1
 80074e0:	f005 fd38 	bl	800cf54 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 80074e4:	4a06      	ldr	r2, [pc, #24]	@ (8007500 <GetJustLatLon+0xf0>)
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	18d3      	adds	r3, r2, r3
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b24      	cmp	r3, #36	@ 0x24
 80074ee:	d1b4      	bne.n	800745a <GetJustLatLon+0x4a>
 80074f0:	e797      	b.n	8007422 <GetJustLatLon+0x12>
				return pos;
 80074f2:	46c0      	nop			@ (mov r8, r8)

	}

}
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	46bd      	mov	sp, r7
 80074f8:	b009      	add	sp, #36	@ 0x24
 80074fa:	bd90      	pop	{r4, r7, pc}
 80074fc:	200003ec 	.word	0x200003ec
 8007500:	20000440 	.word	0x20000440
 8007504:	200003f0 	.word	0x200003f0
 8007508:	20000400 	.word	0x20000400
 800750c:	20000408 	.word	0x20000408
 8007510:	200013ac 	.word	0x200013ac

08007514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007518:	b672      	cpsid	i
}
 800751a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800751c:	46c0      	nop			@ (mov r8, r8)
 800751e:	e7fd      	b.n	800751c <Error_Handler+0x8>

08007520 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	0002      	movs	r2, r0
 8007528:	1dfb      	adds	r3, r7, #7
 800752a:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800752c:	1dfb      	adds	r3, r7, #7
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <minmea_isfield+0x48>)
 8007534:	18d3      	adds	r3, r2, r3
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	001a      	movs	r2, r3
 800753a:	2397      	movs	r3, #151	@ 0x97
 800753c:	4013      	ands	r3, r2
 800753e:	d009      	beq.n	8007554 <minmea_isfield+0x34>
 8007540:	1dfb      	adds	r3, r7, #7
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b2c      	cmp	r3, #44	@ 0x2c
 8007546:	d005      	beq.n	8007554 <minmea_isfield+0x34>
 8007548:	1dfb      	adds	r3, r7, #7
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b2a      	cmp	r3, #42	@ 0x2a
 800754e:	d001      	beq.n	8007554 <minmea_isfield+0x34>
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <minmea_isfield+0x36>
 8007554:	2300      	movs	r3, #0
 8007556:	1c1a      	adds	r2, r3, #0
 8007558:	2301      	movs	r3, #1
 800755a:	4013      	ands	r3, r2
 800755c:	b2db      	uxtb	r3, r3
}
 800755e:	0018      	movs	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	b002      	add	sp, #8
 8007564:	bd80      	pop	{r7, pc}
 8007566:	46c0      	nop			@ (mov r8, r8)
 8007568:	0801c468 	.word	0x0801c468

0800756c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 800756c:	b40e      	push	{r1, r2, r3}
 800756e:	b5b0      	push	{r4, r5, r7, lr}
 8007570:	b0a7      	sub	sp, #156	@ 0x9c
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
    bool result = false;
 8007576:	2397      	movs	r3, #151	@ 0x97
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 800757e:	2396      	movs	r3, #150	@ 0x96
 8007580:	18fb      	adds	r3, r7, r3
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8007586:	23a8      	movs	r3, #168	@ 0xa8
 8007588:	2208      	movs	r2, #8
 800758a:	189b      	adds	r3, r3, r2
 800758c:	19db      	adds	r3, r3, r7
 800758e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2290      	movs	r2, #144	@ 0x90
 8007594:	18ba      	adds	r2, r7, r2
 8007596:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8007598:	e345      	b.n	8007c26 <minmea_scan+0x6ba>
        char type = *format++;
 800759a:	21a4      	movs	r1, #164	@ 0xa4
 800759c:	2008      	movs	r0, #8
 800759e:	180b      	adds	r3, r1, r0
 80075a0:	19db      	adds	r3, r3, r7
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	1809      	adds	r1, r1, r0
 80075a8:	19c9      	adds	r1, r1, r7
 80075aa:	600a      	str	r2, [r1, #0]
 80075ac:	2143      	movs	r1, #67	@ 0x43
 80075ae:	187a      	adds	r2, r7, r1
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 80075b4:	187b      	adds	r3, r7, r1
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80075ba:	d104      	bne.n	80075c6 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 80075bc:	2396      	movs	r3, #150	@ 0x96
 80075be:	18fb      	adds	r3, r7, r3
 80075c0:	2201      	movs	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
            continue;
 80075c4:	e32f      	b.n	8007c26 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 80075c6:	2390      	movs	r3, #144	@ 0x90
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d108      	bne.n	80075e2 <minmea_scan+0x76>
 80075d0:	2396      	movs	r3, #150	@ 0x96
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2201      	movs	r2, #1
 80075d8:	4053      	eors	r3, r2
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d000      	beq.n	80075e2 <minmea_scan+0x76>
 80075e0:	e32f      	b.n	8007c42 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80075e2:	2343      	movs	r3, #67	@ 0x43
 80075e4:	18fb      	adds	r3, r7, r3
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	3b44      	subs	r3, #68	@ 0x44
 80075ea:	2b30      	cmp	r3, #48	@ 0x30
 80075ec:	d900      	bls.n	80075f0 <minmea_scan+0x84>
 80075ee:	e32a      	b.n	8007c46 <minmea_scan+0x6da>
 80075f0:	009a      	lsls	r2, r3, #2
 80075f2:	4bbd      	ldr	r3, [pc, #756]	@ (80078e8 <minmea_scan+0x37c>)
 80075f4:	18d3      	adds	r3, r2, r3
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 80075fa:	258f      	movs	r5, #143	@ 0x8f
 80075fc:	197b      	adds	r3, r7, r5
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8007602:	2490      	movs	r4, #144	@ 0x90
 8007604:	193b      	adds	r3, r7, r4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <minmea_scan+0xba>
 800760c:	193b      	adds	r3, r7, r4
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	0018      	movs	r0, r3
 8007614:	f7ff ff84 	bl	8007520 <minmea_isfield>
 8007618:	1e03      	subs	r3, r0, #0
 800761a:	d004      	beq.n	8007626 <minmea_scan+0xba>
                    value = *field;
 800761c:	197b      	adds	r3, r7, r5
 800761e:	193a      	adds	r2, r7, r4
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	7812      	ldrb	r2, [r2, #0]
 8007624:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8007626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	228f      	movs	r2, #143	@ 0x8f
 8007630:	18ba      	adds	r2, r7, r2
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	701a      	strb	r2, [r3, #0]
            } break;
 8007636:	e2db      	b.n	8007bf0 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	2288      	movs	r2, #136	@ 0x88
 800763c:	18ba      	adds	r2, r7, r2
 800763e:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8007640:	2490      	movs	r4, #144	@ 0x90
 8007642:	193b      	adds	r3, r7, r4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d022      	beq.n	8007690 <minmea_scan+0x124>
 800764a:	193b      	adds	r3, r7, r4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	0018      	movs	r0, r3
 8007652:	f7ff ff65 	bl	8007520 <minmea_isfield>
 8007656:	1e03      	subs	r3, r0, #0
 8007658:	d01a      	beq.n	8007690 <minmea_scan+0x124>
                    switch (*field) {
 800765a:	193b      	adds	r3, r7, r4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b57      	cmp	r3, #87	@ 0x57
 8007662:	d00f      	beq.n	8007684 <minmea_scan+0x118>
 8007664:	dd00      	ble.n	8007668 <minmea_scan+0xfc>
 8007666:	e2f0      	b.n	8007c4a <minmea_scan+0x6de>
 8007668:	2b53      	cmp	r3, #83	@ 0x53
 800766a:	d00b      	beq.n	8007684 <minmea_scan+0x118>
 800766c:	dd00      	ble.n	8007670 <minmea_scan+0x104>
 800766e:	e2ec      	b.n	8007c4a <minmea_scan+0x6de>
 8007670:	2b45      	cmp	r3, #69	@ 0x45
 8007672:	d002      	beq.n	800767a <minmea_scan+0x10e>
 8007674:	2b4e      	cmp	r3, #78	@ 0x4e
 8007676:	d000      	beq.n	800767a <minmea_scan+0x10e>
 8007678:	e2e7      	b.n	8007c4a <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 800767a:	2301      	movs	r3, #1
 800767c:	2288      	movs	r2, #136	@ 0x88
 800767e:	18ba      	adds	r2, r7, r2
 8007680:	6013      	str	r3, [r2, #0]
                            break;
 8007682:	e005      	b.n	8007690 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8007684:	2301      	movs	r3, #1
 8007686:	425b      	negs	r3, r3
 8007688:	2288      	movs	r2, #136	@ 0x88
 800768a:	18ba      	adds	r2, r7, r2
 800768c:	6013      	str	r3, [r2, #0]
                            break;
 800768e:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8007690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2288      	movs	r2, #136	@ 0x88
 800769a:	18ba      	adds	r2, r7, r2
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	601a      	str	r2, [r3, #0]
            } break;
 80076a0:	e2a6      	b.n	8007bf0 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	2284      	movs	r2, #132	@ 0x84
 80076a6:	18ba      	adds	r2, r7, r2
 80076a8:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	425b      	negs	r3, r3
 80076ae:	2280      	movs	r2, #128	@ 0x80
 80076b0:	18ba      	adds	r2, r7, r2
 80076b2:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80076b8:	2390      	movs	r3, #144	@ 0x90
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d100      	bne.n	80076c4 <minmea_scan+0x158>
 80076c2:	e088      	b.n	80077d6 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 80076c4:	e07d      	b.n	80077c2 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 80076c6:	2390      	movs	r3, #144	@ 0x90
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80076d0:	d10d      	bne.n	80076ee <minmea_scan+0x182>
 80076d2:	2284      	movs	r2, #132	@ 0x84
 80076d4:	18bb      	adds	r3, r7, r2
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d108      	bne.n	80076ee <minmea_scan+0x182>
 80076dc:	2380      	movs	r3, #128	@ 0x80
 80076de:	18fb      	adds	r3, r7, r3
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	d103      	bne.n	80076ee <minmea_scan+0x182>
                            sign = 1;
 80076e6:	2301      	movs	r3, #1
 80076e8:	18ba      	adds	r2, r7, r2
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	e063      	b.n	80077b6 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 80076ee:	2390      	movs	r3, #144	@ 0x90
 80076f0:	18fb      	adds	r3, r7, r3
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80076f8:	d10e      	bne.n	8007718 <minmea_scan+0x1ac>
 80076fa:	2284      	movs	r2, #132	@ 0x84
 80076fc:	18bb      	adds	r3, r7, r2
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d109      	bne.n	8007718 <minmea_scan+0x1ac>
 8007704:	2380      	movs	r3, #128	@ 0x80
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3301      	adds	r3, #1
 800770c:	d104      	bne.n	8007718 <minmea_scan+0x1ac>
                            sign = -1;
 800770e:	2301      	movs	r3, #1
 8007710:	425b      	negs	r3, r3
 8007712:	18ba      	adds	r2, r7, r2
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	e04e      	b.n	80077b6 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8007718:	2190      	movs	r1, #144	@ 0x90
 800771a:	187b      	adds	r3, r7, r1
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	4b72      	ldr	r3, [pc, #456]	@ (80078ec <minmea_scan+0x380>)
 8007724:	18d3      	adds	r3, r2, r3
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	001a      	movs	r2, r3
 800772a:	2304      	movs	r3, #4
 800772c:	4013      	ands	r3, r2
 800772e:	d035      	beq.n	800779c <minmea_scan+0x230>
                            int digit = *field - '0';
 8007730:	187b      	adds	r3, r7, r1
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	3b30      	subs	r3, #48	@ 0x30
 8007738:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 800773a:	2280      	movs	r2, #128	@ 0x80
 800773c:	18bb      	adds	r3, r7, r2
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	d102      	bne.n	800774a <minmea_scan+0x1de>
                                value = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	18ba      	adds	r2, r7, r2
 8007748:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800774a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774c:	4a68      	ldr	r2, [pc, #416]	@ (80078f0 <minmea_scan+0x384>)
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	210a      	movs	r1, #10
 8007752:	0018      	movs	r0, r3
 8007754:	f7f8 fd88 	bl	8000268 <__divsi3>
 8007758:	0003      	movs	r3, r0
 800775a:	001a      	movs	r2, r3
 800775c:	2380      	movs	r3, #128	@ 0x80
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4293      	cmp	r3, r2
 8007764:	dd04      	ble.n	8007770 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8007766:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d100      	bne.n	800776e <minmea_scan+0x202>
 800776c:	e26f      	b.n	8007c4e <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 800776e:	e032      	b.n	80077d6 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8007770:	2180      	movs	r1, #128	@ 0x80
 8007772:	187b      	adds	r3, r7, r1
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	0013      	movs	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	189b      	adds	r3, r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	001a      	movs	r2, r3
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	189b      	adds	r3, r3, r2
 8007784:	187a      	adds	r2, r7, r1
 8007786:	6013      	str	r3, [r2, #0]
                            if (scale)
 8007788:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d013      	beq.n	80077b6 <minmea_scan+0x24a>
                                scale *= 10;
 800778e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007790:	0013      	movs	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	189b      	adds	r3, r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800779a:	e00c      	b.n	80077b6 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 800779c:	2390      	movs	r3, #144	@ 0x90
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a6:	d000      	beq.n	80077aa <minmea_scan+0x23e>
 80077a8:	e253      	b.n	8007c52 <minmea_scan+0x6e6>
 80077aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d000      	beq.n	80077b2 <minmea_scan+0x246>
 80077b0:	e24f      	b.n	8007c52 <minmea_scan+0x6e6>
                            scale = 1;
 80077b2:	2301      	movs	r3, #1
 80077b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80077b6:	2290      	movs	r2, #144	@ 0x90
 80077b8:	18bb      	adds	r3, r7, r2
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3301      	adds	r3, #1
 80077be:	18ba      	adds	r2, r7, r2
 80077c0:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 80077c2:	2390      	movs	r3, #144	@ 0x90
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7ff fea8 	bl	8007520 <minmea_isfield>
 80077d0:	1e03      	subs	r3, r0, #0
 80077d2:	d000      	beq.n	80077d6 <minmea_scan+0x26a>
 80077d4:	e777      	b.n	80076c6 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80077d6:	2384      	movs	r3, #132	@ 0x84
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <minmea_scan+0x27a>
 80077e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <minmea_scan+0x286>
 80077e6:	2380      	movs	r3, #128	@ 0x80
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3301      	adds	r3, #1
 80077ee:	d100      	bne.n	80077f2 <minmea_scan+0x286>
 80077f0:	e231      	b.n	8007c56 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 80077f2:	2280      	movs	r2, #128	@ 0x80
 80077f4:	18bb      	adds	r3, r7, r2
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	d105      	bne.n	8007808 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	18ba      	adds	r2, r7, r2
 8007800:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007806:	e004      	b.n	8007812 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8007808:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 800780e:	2301      	movs	r3, #1
 8007810:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8007812:	2284      	movs	r2, #132	@ 0x84
 8007814:	18bb      	adds	r3, r7, r2
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d007      	beq.n	800782c <minmea_scan+0x2c0>
                    value *= sign;
 800781c:	2180      	movs	r1, #128	@ 0x80
 800781e:	187b      	adds	r3, r7, r1
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	18ba      	adds	r2, r7, r2
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	4353      	muls	r3, r2
 8007828:	187a      	adds	r2, r7, r1
 800782a:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 800782c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782e:	1d1a      	adds	r2, r3, #4
 8007830:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2280      	movs	r2, #128	@ 0x80
 8007836:	18ba      	adds	r2, r7, r2
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800783e:	605a      	str	r2, [r3, #4]
            } break;
 8007840:	e1d6      	b.n	8007bf0 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8007842:	2300      	movs	r3, #0
 8007844:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8007846:	2290      	movs	r2, #144	@ 0x90
 8007848:	18bb      	adds	r3, r7, r2
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d011      	beq.n	8007874 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8007850:	2320      	movs	r3, #32
 8007852:	18f9      	adds	r1, r7, r3
 8007854:	18bb      	adds	r3, r7, r2
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	220a      	movs	r2, #10
 800785a:	0018      	movs	r0, r3
 800785c:	f007 f9b2 	bl	800ebc4 <strtol>
 8007860:	0003      	movs	r3, r0
 8007862:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	0018      	movs	r0, r3
 800786a:	f7ff fe59 	bl	8007520 <minmea_isfield>
 800786e:	1e03      	subs	r3, r0, #0
 8007870:	d000      	beq.n	8007874 <minmea_scan+0x308>
 8007872:	e1f2      	b.n	8007c5a <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8007874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007876:	1d1a      	adds	r2, r3, #4
 8007878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800787e:	601a      	str	r2, [r3, #0]
            } break;
 8007880:	e1b6      	b.n	8007bf0 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	1d1a      	adds	r2, r3, #4
 8007886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 800788c:	2390      	movs	r3, #144	@ 0x90
 800788e:	18fb      	adds	r3, r7, r3
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d014      	beq.n	80078c0 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 8007896:	e00a      	b.n	80078ae <minmea_scan+0x342>
                        *buf++ = *field++;
 8007898:	2190      	movs	r1, #144	@ 0x90
 800789a:	187b      	adds	r3, r7, r1
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	1c53      	adds	r3, r2, #1
 80078a0:	1879      	adds	r1, r7, r1
 80078a2:	600b      	str	r3, [r1, #0]
 80078a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078a6:	1c59      	adds	r1, r3, #1
 80078a8:	6779      	str	r1, [r7, #116]	@ 0x74
 80078aa:	7812      	ldrb	r2, [r2, #0]
 80078ac:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80078ae:	2390      	movs	r3, #144	@ 0x90
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	0018      	movs	r0, r3
 80078b8:	f7ff fe32 	bl	8007520 <minmea_isfield>
 80078bc:	1e03      	subs	r3, r0, #0
 80078be:	d1eb      	bne.n	8007898 <minmea_scan+0x32c>
                }

                *buf = '\0';
 80078c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
            } break;
 80078c6:	e193      	b.n	8007bf0 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80078c8:	2290      	movs	r2, #144	@ 0x90
 80078ca:	18bb      	adds	r3, r7, r2
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d100      	bne.n	80078d4 <minmea_scan+0x368>
 80078d2:	e1c4      	b.n	8007c5e <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80078d4:	18bb      	adds	r3, r7, r2
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b24      	cmp	r3, #36	@ 0x24
 80078dc:	d000      	beq.n	80078e0 <minmea_scan+0x374>
 80078de:	e1c0      	b.n	8007c62 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80078e0:	2300      	movs	r3, #0
 80078e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80078e4:	e01c      	b.n	8007920 <minmea_scan+0x3b4>
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	0801c04c 	.word	0x0801c04c
 80078ec:	0801c468 	.word	0x0801c468
 80078f0:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 80078f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078f6:	3301      	adds	r3, #1
 80078f8:	001a      	movs	r2, r3
 80078fa:	2390      	movs	r3, #144	@ 0x90
 80078fc:	18fb      	adds	r3, r7, r3
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	189b      	adds	r3, r3, r2
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	0018      	movs	r0, r3
 8007906:	f7ff fe0b 	bl	8007520 <minmea_isfield>
 800790a:	0003      	movs	r3, r0
 800790c:	001a      	movs	r2, r3
 800790e:	2301      	movs	r3, #1
 8007910:	4053      	eors	r3, r2
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d000      	beq.n	800791a <minmea_scan+0x3ae>
 8007918:	e1a5      	b.n	8007c66 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 800791a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800791c:	3301      	adds	r3, #1
 800791e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007922:	2b04      	cmp	r3, #4
 8007924:	dde6      	ble.n	80078f4 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8007930:	2390      	movs	r3, #144	@ 0x90
 8007932:	18fb      	adds	r3, r7, r3
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800793a:	2205      	movs	r2, #5
 800793c:	0018      	movs	r0, r3
 800793e:	f007 fbc4 	bl	800f0ca <memcpy>
                buf[5] = '\0';
 8007942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007944:	3305      	adds	r3, #5
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
            } break;
 800794a:	e151      	b.n	8007bf0 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8007956:	2301      	movs	r3, #1
 8007958:	425b      	negs	r3, r3
 800795a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800795c:	2301      	movs	r3, #1
 800795e:	425b      	negs	r3, r3
 8007960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007962:	2301      	movs	r3, #1
 8007964:	425b      	negs	r3, r3
 8007966:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8007968:	2290      	movs	r2, #144	@ 0x90
 800796a:	18bb      	adds	r3, r7, r2
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d067      	beq.n	8007a42 <minmea_scan+0x4d6>
 8007972:	18bb      	adds	r3, r7, r2
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	0018      	movs	r0, r3
 800797a:	f7ff fdd1 	bl	8007520 <minmea_isfield>
 800797e:	1e03      	subs	r3, r0, #0
 8007980:	d05f      	beq.n	8007a42 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8007982:	2300      	movs	r3, #0
 8007984:	663b      	str	r3, [r7, #96]	@ 0x60
 8007986:	e011      	b.n	80079ac <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8007988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800798a:	2290      	movs	r2, #144	@ 0x90
 800798c:	18ba      	adds	r2, r7, r2
 800798e:	6812      	ldr	r2, [r2, #0]
 8007990:	18d3      	adds	r3, r2, r3
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	4bbb      	ldr	r3, [pc, #748]	@ (8007c84 <minmea_scan+0x718>)
 8007998:	18d3      	adds	r3, r2, r3
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	001a      	movs	r2, r3
 800799e:	2304      	movs	r3, #4
 80079a0:	4013      	ands	r3, r2
 80079a2:	d100      	bne.n	80079a6 <minmea_scan+0x43a>
 80079a4:	e161      	b.n	8007c6a <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80079a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079a8:	3301      	adds	r3, #1
 80079aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80079ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079ae:	2b05      	cmp	r3, #5
 80079b0:	ddea      	ble.n	8007988 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80079b2:	2490      	movs	r4, #144	@ 0x90
 80079b4:	193b      	adds	r3, r7, r4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781a      	ldrb	r2, [r3, #0]
 80079ba:	211c      	movs	r1, #28
 80079bc:	187b      	adds	r3, r7, r1
 80079be:	701a      	strb	r2, [r3, #0]
 80079c0:	193b      	adds	r3, r7, r4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	781a      	ldrb	r2, [r3, #0]
 80079c8:	187b      	adds	r3, r7, r1
 80079ca:	705a      	strb	r2, [r3, #1]
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	2200      	movs	r2, #0
 80079d0:	709a      	strb	r2, [r3, #2]
 80079d2:	187b      	adds	r3, r7, r1
 80079d4:	220a      	movs	r2, #10
 80079d6:	2100      	movs	r1, #0
 80079d8:	0018      	movs	r0, r3
 80079da:	f007 f8f3 	bl	800ebc4 <strtol>
 80079de:	0003      	movs	r3, r0
 80079e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80079e2:	193b      	adds	r3, r7, r4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3302      	adds	r3, #2
 80079e8:	781a      	ldrb	r2, [r3, #0]
 80079ea:	2118      	movs	r1, #24
 80079ec:	187b      	adds	r3, r7, r1
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	193b      	adds	r3, r7, r4
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3303      	adds	r3, #3
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	187b      	adds	r3, r7, r1
 80079fa:	705a      	strb	r2, [r3, #1]
 80079fc:	187b      	adds	r3, r7, r1
 80079fe:	2200      	movs	r2, #0
 8007a00:	709a      	strb	r2, [r3, #2]
 8007a02:	187b      	adds	r3, r7, r1
 8007a04:	220a      	movs	r2, #10
 8007a06:	2100      	movs	r1, #0
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f007 f8db 	bl	800ebc4 <strtol>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8007a12:	193b      	adds	r3, r7, r4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3304      	adds	r3, #4
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	2114      	movs	r1, #20
 8007a1c:	187b      	adds	r3, r7, r1
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	193b      	adds	r3, r7, r4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3305      	adds	r3, #5
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	187b      	adds	r3, r7, r1
 8007a2a:	705a      	strb	r2, [r3, #1]
 8007a2c:	187b      	adds	r3, r7, r1
 8007a2e:	2200      	movs	r2, #0
 8007a30:	709a      	strb	r2, [r3, #2]
 8007a32:	187b      	adds	r3, r7, r1
 8007a34:	220a      	movs	r2, #10
 8007a36:	2100      	movs	r1, #0
 8007a38:	0018      	movs	r0, r3
 8007a3a:	f007 f8c3 	bl	800ebc4 <strtol>
 8007a3e:	0003      	movs	r3, r0
 8007a40:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a46:	601a      	str	r2, [r3, #0]
                date->month = m;
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a4c:	605a      	str	r2, [r3, #4]
                date->year = y;
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a52:	609a      	str	r2, [r3, #8]
            } break;
 8007a54:	e0cc      	b.n	8007bf0 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	1d1a      	adds	r2, r3, #4
 8007a5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8007a60:	2301      	movs	r3, #1
 8007a62:	425b      	negs	r3, r3
 8007a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a66:	2301      	movs	r3, #1
 8007a68:	425b      	negs	r3, r3
 8007a6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	425b      	negs	r3, r3
 8007a70:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a72:	2301      	movs	r3, #1
 8007a74:	425b      	negs	r3, r3
 8007a76:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8007a78:	2290      	movs	r2, #144	@ 0x90
 8007a7a:	18bb      	adds	r3, r7, r2
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d100      	bne.n	8007a84 <minmea_scan+0x518>
 8007a82:	e0a7      	b.n	8007bd4 <minmea_scan+0x668>
 8007a84:	18bb      	adds	r3, r7, r2
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f7ff fd48 	bl	8007520 <minmea_isfield>
 8007a90:	1e03      	subs	r3, r0, #0
 8007a92:	d100      	bne.n	8007a96 <minmea_scan+0x52a>
 8007a94:	e09e      	b.n	8007bd4 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 8007a96:	2300      	movs	r3, #0
 8007a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a9a:	e011      	b.n	8007ac0 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a9e:	2290      	movs	r2, #144	@ 0x90
 8007aa0:	18ba      	adds	r2, r7, r2
 8007aa2:	6812      	ldr	r2, [r2, #0]
 8007aa4:	18d3      	adds	r3, r2, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	4b76      	ldr	r3, [pc, #472]	@ (8007c84 <minmea_scan+0x718>)
 8007aac:	18d3      	adds	r3, r2, r3
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	001a      	movs	r2, r3
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d100      	bne.n	8007aba <minmea_scan+0x54e>
 8007ab8:	e0d9      	b.n	8007c6e <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 8007aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007abc:	3301      	adds	r3, #1
 8007abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac2:	2b05      	cmp	r3, #5
 8007ac4:	ddea      	ble.n	8007a9c <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8007ac6:	2490      	movs	r4, #144	@ 0x90
 8007ac8:	193b      	adds	r3, r7, r4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781a      	ldrb	r2, [r3, #0]
 8007ace:	2110      	movs	r1, #16
 8007ad0:	187b      	adds	r3, r7, r1
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	193b      	adds	r3, r7, r4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	781a      	ldrb	r2, [r3, #0]
 8007adc:	187b      	adds	r3, r7, r1
 8007ade:	705a      	strb	r2, [r3, #1]
 8007ae0:	187b      	adds	r3, r7, r1
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	709a      	strb	r2, [r3, #2]
 8007ae6:	187b      	adds	r3, r7, r1
 8007ae8:	220a      	movs	r2, #10
 8007aea:	2100      	movs	r1, #0
 8007aec:	0018      	movs	r0, r3
 8007aee:	f007 f869 	bl	800ebc4 <strtol>
 8007af2:	0003      	movs	r3, r0
 8007af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8007af6:	193b      	adds	r3, r7, r4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3302      	adds	r3, #2
 8007afc:	781a      	ldrb	r2, [r3, #0]
 8007afe:	210c      	movs	r1, #12
 8007b00:	187b      	adds	r3, r7, r1
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	193b      	adds	r3, r7, r4
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3303      	adds	r3, #3
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	705a      	strb	r2, [r3, #1]
 8007b10:	187b      	adds	r3, r7, r1
 8007b12:	2200      	movs	r2, #0
 8007b14:	709a      	strb	r2, [r3, #2]
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	220a      	movs	r2, #10
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f007 f851 	bl	800ebc4 <strtol>
 8007b22:	0003      	movs	r3, r0
 8007b24:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8007b26:	193b      	adds	r3, r7, r4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	2108      	movs	r1, #8
 8007b30:	187b      	adds	r3, r7, r1
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	193b      	adds	r3, r7, r4
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3305      	adds	r3, #5
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	187b      	adds	r3, r7, r1
 8007b3e:	705a      	strb	r2, [r3, #1]
 8007b40:	187b      	adds	r3, r7, r1
 8007b42:	2200      	movs	r2, #0
 8007b44:	709a      	strb	r2, [r3, #2]
 8007b46:	187b      	adds	r3, r7, r1
 8007b48:	220a      	movs	r2, #10
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f007 f839 	bl	800ebc4 <strtol>
 8007b52:	0003      	movs	r3, r0
 8007b54:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8007b56:	193b      	adds	r3, r7, r4
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3306      	adds	r3, #6
 8007b5c:	193a      	adds	r2, r7, r4
 8007b5e:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8007b60:	193b      	adds	r3, r7, r4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	1939      	adds	r1, r7, r4
 8007b68:	600a      	str	r2, [r1, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b6e:	d12f      	bne.n	8007bd0 <minmea_scan+0x664>
                        int value = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8007b74:	4b44      	ldr	r3, [pc, #272]	@ (8007c88 <minmea_scan+0x71c>)
 8007b76:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8007b78:	e016      	b.n	8007ba8 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 8007b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b7c:	0013      	movs	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	189b      	adds	r3, r3, r2
 8007b82:	005b      	lsls	r3, r3, #1
 8007b84:	0019      	movs	r1, r3
 8007b86:	2090      	movs	r0, #144	@ 0x90
 8007b88:	183b      	adds	r3, r7, r0
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	1838      	adds	r0, r7, r0
 8007b90:	6002      	str	r2, [r0, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	3b30      	subs	r3, #48	@ 0x30
 8007b96:	18cb      	adds	r3, r1, r3
 8007b98:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 8007b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b9c:	210a      	movs	r1, #10
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f7f8 fb62 	bl	8000268 <__divsi3>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8007ba8:	2390      	movs	r3, #144	@ 0x90
 8007baa:	18fb      	adds	r3, r7, r3
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	4b34      	ldr	r3, [pc, #208]	@ (8007c84 <minmea_scan+0x718>)
 8007bb4:	18d3      	adds	r3, r2, r3
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	001a      	movs	r2, r3
 8007bba:	2304      	movs	r3, #4
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d002      	beq.n	8007bc6 <minmea_scan+0x65a>
 8007bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	dcd9      	bgt.n	8007b7a <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8007bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bca:	4353      	muls	r3, r2
 8007bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bce:	e001      	b.n	8007bd4 <minmea_scan+0x668>
                    } else {
                        u = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007bd8:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8007bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bde:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8007be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007be4:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8007be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007bea:	60da      	str	r2, [r3, #12]
            } break;
 8007bec:	e000      	b.n	8007bf0 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 8007bee:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8007bf0:	e002      	b.n	8007bf8 <minmea_scan+0x68c>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	607b      	str	r3, [r7, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7ff fc8f 	bl	8007520 <minmea_isfield>
 8007c02:	1e03      	subs	r3, r0, #0
 8007c04:	d1f5      	bne.n	8007bf2 <minmea_scan+0x686>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b2c      	cmp	r3, #44	@ 0x2c
 8007c0c:	d107      	bne.n	8007c1e <minmea_scan+0x6b2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3301      	adds	r3, #1
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2290      	movs	r2, #144	@ 0x90
 8007c18:	18ba      	adds	r2, r7, r2
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	e003      	b.n	8007c26 <minmea_scan+0x6ba>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	2290      	movs	r2, #144	@ 0x90
 8007c22:	18ba      	adds	r2, r7, r2
 8007c24:	6013      	str	r3, [r2, #0]
    while (*format) {
 8007c26:	23a4      	movs	r3, #164	@ 0xa4
 8007c28:	2208      	movs	r2, #8
 8007c2a:	189b      	adds	r3, r3, r2
 8007c2c:	19db      	adds	r3, r3, r7
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d000      	beq.n	8007c38 <minmea_scan+0x6cc>
 8007c36:	e4b0      	b.n	800759a <minmea_scan+0x2e>
    }

    result = true;
 8007c38:	2397      	movs	r3, #151	@ 0x97
 8007c3a:	18fb      	adds	r3, r7, r3
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	701a      	strb	r2, [r3, #0]
 8007c40:	e016      	b.n	8007c70 <minmea_scan+0x704>
            goto parse_error;
 8007c42:	46c0      	nop			@ (mov r8, r8)
 8007c44:	e014      	b.n	8007c70 <minmea_scan+0x704>
                goto parse_error;
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	e012      	b.n	8007c70 <minmea_scan+0x704>
                            goto parse_error;
 8007c4a:	46c0      	nop			@ (mov r8, r8)
 8007c4c:	e010      	b.n	8007c70 <minmea_scan+0x704>
                                    goto parse_error;
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	e00e      	b.n	8007c70 <minmea_scan+0x704>
                            goto parse_error;
 8007c52:	46c0      	nop			@ (mov r8, r8)
 8007c54:	e00c      	b.n	8007c70 <minmea_scan+0x704>
                    goto parse_error;
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	e00a      	b.n	8007c70 <minmea_scan+0x704>
                        goto parse_error;
 8007c5a:	46c0      	nop			@ (mov r8, r8)
 8007c5c:	e008      	b.n	8007c70 <minmea_scan+0x704>
                    goto parse_error;
 8007c5e:	46c0      	nop			@ (mov r8, r8)
 8007c60:	e006      	b.n	8007c70 <minmea_scan+0x704>
                    goto parse_error;
 8007c62:	46c0      	nop			@ (mov r8, r8)
 8007c64:	e004      	b.n	8007c70 <minmea_scan+0x704>
                        goto parse_error;
 8007c66:	46c0      	nop			@ (mov r8, r8)
 8007c68:	e002      	b.n	8007c70 <minmea_scan+0x704>
                            goto parse_error;
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	e000      	b.n	8007c70 <minmea_scan+0x704>
                            goto parse_error;
 8007c6e:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8007c70:	2397      	movs	r3, #151	@ 0x97
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	781b      	ldrb	r3, [r3, #0]
}
 8007c76:	0018      	movs	r0, r3
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	b027      	add	sp, #156	@ 0x9c
 8007c7c:	bcb0      	pop	{r4, r5, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	b003      	add	sp, #12
 8007c82:	4718      	bx	r3
 8007c84:	0801c468 	.word	0x0801c468
 8007c88:	000f4240 	.word	0x000f4240

08007c8c <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8007c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8e:	46de      	mov	lr, fp
 8007c90:	4657      	mov	r7, sl
 8007c92:	464e      	mov	r6, r9
 8007c94:	4645      	mov	r5, r8
 8007c96:	b5e0      	push	{r5, r6, r7, lr}
 8007c98:	b097      	sub	sp, #92	@ 0x5c
 8007c9a:	af0c      	add	r7, sp, #48	@ 0x30
 8007c9c:	6178      	str	r0, [r7, #20]
 8007c9e:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	3210      	adds	r2, #16
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	0019      	movs	r1, r3
 8007cae:	3118      	adds	r1, #24
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	001c      	movs	r4, r3
 8007cb4:	3420      	adds	r4, #32
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	001d      	movs	r5, r3
 8007cba:	3524      	adds	r5, #36	@ 0x24
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	001e      	movs	r6, r3
 8007cc0:	3628      	adds	r6, #40	@ 0x28
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2030      	movs	r0, #48	@ 0x30
 8007cc6:	4684      	mov	ip, r0
 8007cc8:	449c      	add	ip, r3
 8007cca:	4663      	mov	r3, ip
 8007ccc:	607b      	str	r3, [r7, #4]
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2038      	movs	r0, #56	@ 0x38
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	4498      	add	r8, r3
 8007cd6:	4643      	mov	r3, r8
 8007cd8:	603b      	str	r3, [r7, #0]
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	203c      	movs	r0, #60	@ 0x3c
 8007cde:	4681      	mov	r9, r0
 8007ce0:	4499      	add	r9, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2044      	movs	r0, #68	@ 0x44
 8007ce6:	4682      	mov	sl, r0
 8007ce8:	449a      	add	sl, r3
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	3348      	adds	r3, #72	@ 0x48
 8007cee:	2010      	movs	r0, #16
 8007cf0:	4683      	mov	fp, r0
 8007cf2:	2008      	movs	r0, #8
 8007cf4:	4684      	mov	ip, r0
 8007cf6:	2008      	movs	r0, #8
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	44b8      	add	r8, r7
 8007cfc:	44c4      	add	ip, r8
 8007cfe:	44e3      	add	fp, ip
 8007d00:	4658      	mov	r0, fp
 8007d02:	60b8      	str	r0, [r7, #8]
 8007d04:	482a      	ldr	r0, [pc, #168]	@ (8007db0 <minmea_parse_gga+0x124>)
 8007d06:	4683      	mov	fp, r0
 8007d08:	6938      	ldr	r0, [r7, #16]
 8007d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d0c:	4653      	mov	r3, sl
 8007d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d10:	464b      	mov	r3, r9
 8007d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	9307      	str	r3, [sp, #28]
 8007d1c:	9606      	str	r6, [sp, #24]
 8007d1e:	9505      	str	r5, [sp, #20]
 8007d20:	9404      	str	r4, [sp, #16]
 8007d22:	2408      	movs	r4, #8
 8007d24:	2508      	movs	r5, #8
 8007d26:	1963      	adds	r3, r4, r5
 8007d28:	2408      	movs	r4, #8
 8007d2a:	46a4      	mov	ip, r4
 8007d2c:	44bc      	add	ip, r7
 8007d2e:	4463      	add	r3, ip
 8007d30:	9303      	str	r3, [sp, #12]
 8007d32:	9102      	str	r1, [sp, #8]
 8007d34:	210c      	movs	r1, #12
 8007d36:	194b      	adds	r3, r1, r5
 8007d38:	2108      	movs	r1, #8
 8007d3a:	468c      	mov	ip, r1
 8007d3c:	44bc      	add	ip, r7
 8007d3e:	4463      	add	r3, ip
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	9200      	str	r2, [sp, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	4659      	mov	r1, fp
 8007d4a:	f7ff fc0f 	bl	800756c <minmea_scan>
 8007d4e:	0003      	movs	r3, r0
 8007d50:	001a      	movs	r2, r3
 8007d52:	2301      	movs	r3, #1
 8007d54:	4053      	eors	r3, r2
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e01d      	b.n	8007d9c <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8007d60:	2310      	movs	r3, #16
 8007d62:	2208      	movs	r2, #8
 8007d64:	189b      	adds	r3, r3, r2
 8007d66:	2208      	movs	r2, #8
 8007d68:	4694      	mov	ip, r2
 8007d6a:	44bc      	add	ip, r7
 8007d6c:	4463      	add	r3, ip
 8007d6e:	3302      	adds	r3, #2
 8007d70:	4a10      	ldr	r2, [pc, #64]	@ (8007db4 <minmea_parse_gga+0x128>)
 8007d72:	0011      	movs	r1, r2
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7f8 f9c7 	bl	8000108 <strcmp>
 8007d7a:	1e03      	subs	r3, r0, #0
 8007d7c:	d001      	beq.n	8007d82 <minmea_parse_gga+0xf6>
        return false;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e00c      	b.n	8007d9c <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	435a      	muls	r2, r3
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	435a      	muls	r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	619a      	str	r2, [r3, #24]

    return true;
 8007d9a:	2301      	movs	r3, #1
}
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	b00b      	add	sp, #44	@ 0x2c
 8007da2:	bcf0      	pop	{r4, r5, r6, r7}
 8007da4:	46bb      	mov	fp, r7
 8007da6:	46b2      	mov	sl, r6
 8007da8:	46a9      	mov	r9, r5
 8007daa:	46a0      	mov	r8, r4
 8007dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dae:	46c0      	nop			@ (mov r8, r8)
 8007db0:	080118bc 	.word	0x080118bc
 8007db4:	0801189c 	.word	0x0801189c

08007db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dbe:	4b11      	ldr	r3, [pc, #68]	@ (8007e04 <HAL_MspInit+0x4c>)
 8007dc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007dc2:	4b10      	ldr	r3, [pc, #64]	@ (8007e04 <HAL_MspInit+0x4c>)
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8007dca:	4b0e      	ldr	r3, [pc, #56]	@ (8007e04 <HAL_MspInit+0x4c>)
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	607b      	str	r3, [r7, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e04 <HAL_MspInit+0x4c>)
 8007dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dda:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <HAL_MspInit+0x4c>)
 8007ddc:	2180      	movs	r1, #128	@ 0x80
 8007dde:	0549      	lsls	r1, r1, #21
 8007de0:	430a      	orrs	r2, r1
 8007de2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007de4:	4b07      	ldr	r3, [pc, #28]	@ (8007e04 <HAL_MspInit+0x4c>)
 8007de6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007de8:	2380      	movs	r3, #128	@ 0x80
 8007dea:	055b      	lsls	r3, r3, #21
 8007dec:	4013      	ands	r3, r2
 8007dee:	603b      	str	r3, [r7, #0]
 8007df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007df2:	23c0      	movs	r3, #192	@ 0xc0
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	0018      	movs	r0, r3
 8007df8:	f001 f930 	bl	800905c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dfc:	46c0      	nop			@ (mov r8, r8)
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b002      	add	sp, #8
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40021000 	.word	0x40021000

08007e08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e08:	b590      	push	{r4, r7, lr}
 8007e0a:	b09d      	sub	sp, #116	@ 0x74
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e10:	235c      	movs	r3, #92	@ 0x5c
 8007e12:	18fb      	adds	r3, r7, r3
 8007e14:	0018      	movs	r0, r3
 8007e16:	2314      	movs	r3, #20
 8007e18:	001a      	movs	r2, r3
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	f007 f8c0 	bl	800efa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e20:	2410      	movs	r4, #16
 8007e22:	193b      	adds	r3, r7, r4
 8007e24:	0018      	movs	r0, r3
 8007e26:	234c      	movs	r3, #76	@ 0x4c
 8007e28:	001a      	movs	r2, r3
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	f007 f8b8 	bl	800efa0 <memset>
  if(hi2c->Instance==I2C1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a23      	ldr	r2, [pc, #140]	@ (8007ec4 <HAL_I2C_MspInit+0xbc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d13f      	bne.n	8007eba <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007e3a:	193b      	adds	r3, r7, r4
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007e40:	193b      	adds	r3, r7, r4
 8007e42:	2200      	movs	r2, #0
 8007e44:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e46:	193b      	adds	r3, r7, r4
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f003 f921 	bl	800b090 <HAL_RCCEx_PeriphCLKConfig>
 8007e4e:	1e03      	subs	r3, r0, #0
 8007e50:	d001      	beq.n	8007e56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007e52:	f7ff fb5f 	bl	8007514 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e56:	4b1c      	ldr	r3, [pc, #112]	@ (8007ec8 <HAL_I2C_MspInit+0xc0>)
 8007e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec8 <HAL_I2C_MspInit+0xc0>)
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	635a      	str	r2, [r3, #52]	@ 0x34
 8007e62:	4b19      	ldr	r3, [pc, #100]	@ (8007ec8 <HAL_I2C_MspInit+0xc0>)
 8007e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e66:	2201      	movs	r2, #1
 8007e68:	4013      	ands	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007e6e:	215c      	movs	r1, #92	@ 0x5c
 8007e70:	187b      	adds	r3, r7, r1
 8007e72:	22c0      	movs	r2, #192	@ 0xc0
 8007e74:	00d2      	lsls	r2, r2, #3
 8007e76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e78:	187b      	adds	r3, r7, r1
 8007e7a:	2212      	movs	r2, #18
 8007e7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7e:	187b      	adds	r3, r7, r1
 8007e80:	2200      	movs	r2, #0
 8007e82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	2200      	movs	r2, #0
 8007e88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007e8a:	187b      	adds	r3, r7, r1
 8007e8c:	2206      	movs	r2, #6
 8007e8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e90:	187a      	adds	r2, r7, r1
 8007e92:	23a0      	movs	r3, #160	@ 0xa0
 8007e94:	05db      	lsls	r3, r3, #23
 8007e96:	0011      	movs	r1, r2
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f001 fb85 	bl	80095a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <HAL_I2C_MspInit+0xc0>)
 8007ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ea2:	4b09      	ldr	r3, [pc, #36]	@ (8007ec8 <HAL_I2C_MspInit+0xc0>)
 8007ea4:	2180      	movs	r1, #128	@ 0x80
 8007ea6:	0389      	lsls	r1, r1, #14
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <HAL_I2C_MspInit+0xc0>)
 8007eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eb0:	2380      	movs	r3, #128	@ 0x80
 8007eb2:	039b      	lsls	r3, r3, #14
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]
 8007eb8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007eba:	46c0      	nop			@ (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b01d      	add	sp, #116	@ 0x74
 8007ec0:	bd90      	pop	{r4, r7, pc}
 8007ec2:	46c0      	nop			@ (mov r8, r8)
 8007ec4:	40005400 	.word	0x40005400
 8007ec8:	40021000 	.word	0x40021000

08007ecc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007ecc:	b590      	push	{r4, r7, lr}
 8007ece:	b097      	sub	sp, #92	@ 0x5c
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ed4:	240c      	movs	r4, #12
 8007ed6:	193b      	adds	r3, r7, r4
 8007ed8:	0018      	movs	r0, r3
 8007eda:	234c      	movs	r3, #76	@ 0x4c
 8007edc:	001a      	movs	r2, r3
 8007ede:	2100      	movs	r1, #0
 8007ee0:	f007 f85e 	bl	800efa0 <memset>
  if(hrtc->Instance==RTC)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a15      	ldr	r2, [pc, #84]	@ (8007f40 <HAL_RTC_MspInit+0x74>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d124      	bne.n	8007f38 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007eee:	193b      	adds	r3, r7, r4
 8007ef0:	2280      	movs	r2, #128	@ 0x80
 8007ef2:	0292      	lsls	r2, r2, #10
 8007ef4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007ef6:	193b      	adds	r3, r7, r4
 8007ef8:	2280      	movs	r2, #128	@ 0x80
 8007efa:	0092      	lsls	r2, r2, #2
 8007efc:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007efe:	193b      	adds	r3, r7, r4
 8007f00:	0018      	movs	r0, r3
 8007f02:	f003 f8c5 	bl	800b090 <HAL_RCCEx_PeriphCLKConfig>
 8007f06:	1e03      	subs	r3, r0, #0
 8007f08:	d001      	beq.n	8007f0e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007f0a:	f7ff fb03 	bl	8007514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f44 <HAL_RTC_MspInit+0x78>)
 8007f10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f12:	4b0c      	ldr	r3, [pc, #48]	@ (8007f44 <HAL_RTC_MspInit+0x78>)
 8007f14:	2180      	movs	r1, #128	@ 0x80
 8007f16:	0209      	lsls	r1, r1, #8
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007f1c:	4b09      	ldr	r3, [pc, #36]	@ (8007f44 <HAL_RTC_MspInit+0x78>)
 8007f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f20:	4b08      	ldr	r3, [pc, #32]	@ (8007f44 <HAL_RTC_MspInit+0x78>)
 8007f22:	2180      	movs	r1, #128	@ 0x80
 8007f24:	00c9      	lsls	r1, r1, #3
 8007f26:	430a      	orrs	r2, r1
 8007f28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f2a:	4b06      	ldr	r3, [pc, #24]	@ (8007f44 <HAL_RTC_MspInit+0x78>)
 8007f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f2e:	2380      	movs	r3, #128	@ 0x80
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	4013      	ands	r3, r2
 8007f34:	60bb      	str	r3, [r7, #8]
 8007f36:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007f38:	46c0      	nop			@ (mov r8, r8)
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b017      	add	sp, #92	@ 0x5c
 8007f3e:	bd90      	pop	{r4, r7, pc}
 8007f40:	40002800 	.word	0x40002800
 8007f44:	40021000 	.word	0x40021000

08007f48 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b08b      	sub	sp, #44	@ 0x2c
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f50:	2414      	movs	r4, #20
 8007f52:	193b      	adds	r3, r7, r4
 8007f54:	0018      	movs	r0, r3
 8007f56:	2314      	movs	r3, #20
 8007f58:	001a      	movs	r2, r3
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	f007 f820 	bl	800efa0 <memset>
  if(hspi->Instance==SPI1)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2c      	ldr	r2, [pc, #176]	@ (8008018 <HAL_SPI_MspInit+0xd0>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d151      	bne.n	800800e <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007f70:	2180      	movs	r1, #128	@ 0x80
 8007f72:	0149      	lsls	r1, r1, #5
 8007f74:	430a      	orrs	r2, r1
 8007f76:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f78:	4b28      	ldr	r3, [pc, #160]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f7c:	2380      	movs	r3, #128	@ 0x80
 8007f7e:	015b      	lsls	r3, r3, #5
 8007f80:	4013      	ands	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f86:	4b25      	ldr	r3, [pc, #148]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f8a:	4b24      	ldr	r3, [pc, #144]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	635a      	str	r2, [r3, #52]	@ 0x34
 8007f92:	4b22      	ldr	r3, [pc, #136]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f96:	2201      	movs	r2, #1
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007fa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007fa4:	2108      	movs	r1, #8
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8007faa:	4b1c      	ldr	r3, [pc, #112]	@ (800801c <HAL_SPI_MspInit+0xd4>)
 8007fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fae:	2208      	movs	r2, #8
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	60bb      	str	r3, [r7, #8]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007fb6:	193b      	adds	r3, r7, r4
 8007fb8:	2202      	movs	r2, #2
 8007fba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fbc:	193b      	adds	r3, r7, r4
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fc2:	193b      	adds	r3, r7, r4
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fc8:	193b      	adds	r3, r7, r4
 8007fca:	2200      	movs	r2, #0
 8007fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007fce:	193b      	adds	r3, r7, r4
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fd4:	193a      	adds	r2, r7, r4
 8007fd6:	23a0      	movs	r3, #160	@ 0xa0
 8007fd8:	05db      	lsls	r3, r3, #23
 8007fda:	0011      	movs	r1, r2
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f001 fae3 	bl	80095a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007fe2:	0021      	movs	r1, r4
 8007fe4:	187b      	adds	r3, r7, r1
 8007fe6:	2260      	movs	r2, #96	@ 0x60
 8007fe8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fea:	187b      	adds	r3, r7, r1
 8007fec:	2202      	movs	r2, #2
 8007fee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ff0:	187b      	adds	r3, r7, r1
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ff6:	187b      	adds	r3, r7, r1
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007ffc:	187b      	adds	r3, r7, r1
 8007ffe:	2201      	movs	r2, #1
 8008000:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008002:	187b      	adds	r3, r7, r1
 8008004:	4a06      	ldr	r2, [pc, #24]	@ (8008020 <HAL_SPI_MspInit+0xd8>)
 8008006:	0019      	movs	r1, r3
 8008008:	0010      	movs	r0, r2
 800800a:	f001 facd 	bl	80095a8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800800e:	46c0      	nop			@ (mov r8, r8)
 8008010:	46bd      	mov	sp, r7
 8008012:	b00b      	add	sp, #44	@ 0x2c
 8008014:	bd90      	pop	{r4, r7, pc}
 8008016:	46c0      	nop			@ (mov r8, r8)
 8008018:	40013000 	.word	0x40013000
 800801c:	40021000 	.word	0x40021000
 8008020:	50000c00 	.word	0x50000c00

08008024 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a0a      	ldr	r2, [pc, #40]	@ (800805c <HAL_TIM_Base_MspInit+0x38>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d10d      	bne.n	8008052 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008036:	4b0a      	ldr	r3, [pc, #40]	@ (8008060 <HAL_TIM_Base_MspInit+0x3c>)
 8008038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800803a:	4b09      	ldr	r3, [pc, #36]	@ (8008060 <HAL_TIM_Base_MspInit+0x3c>)
 800803c:	2180      	movs	r1, #128	@ 0x80
 800803e:	02c9      	lsls	r1, r1, #11
 8008040:	430a      	orrs	r2, r1
 8008042:	641a      	str	r2, [r3, #64]	@ 0x40
 8008044:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <HAL_TIM_Base_MspInit+0x3c>)
 8008046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008048:	2380      	movs	r3, #128	@ 0x80
 800804a:	02db      	lsls	r3, r3, #11
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8008052:	46c0      	nop			@ (mov r8, r8)
 8008054:	46bd      	mov	sp, r7
 8008056:	b004      	add	sp, #16
 8008058:	bd80      	pop	{r7, pc}
 800805a:	46c0      	nop			@ (mov r8, r8)
 800805c:	40014800 	.word	0x40014800
 8008060:	40021000 	.word	0x40021000

08008064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008064:	b590      	push	{r4, r7, lr}
 8008066:	b089      	sub	sp, #36	@ 0x24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800806c:	240c      	movs	r4, #12
 800806e:	193b      	adds	r3, r7, r4
 8008070:	0018      	movs	r0, r3
 8008072:	2314      	movs	r3, #20
 8008074:	001a      	movs	r2, r3
 8008076:	2100      	movs	r1, #0
 8008078:	f006 ff92 	bl	800efa0 <memset>
  if(htim->Instance==TIM17)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a14      	ldr	r2, [pc, #80]	@ (80080d4 <HAL_TIM_MspPostInit+0x70>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d122      	bne.n	80080cc <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008086:	4b14      	ldr	r3, [pc, #80]	@ (80080d8 <HAL_TIM_MspPostInit+0x74>)
 8008088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800808a:	4b13      	ldr	r3, [pc, #76]	@ (80080d8 <HAL_TIM_MspPostInit+0x74>)
 800808c:	2101      	movs	r1, #1
 800808e:	430a      	orrs	r2, r1
 8008090:	635a      	str	r2, [r3, #52]	@ 0x34
 8008092:	4b11      	ldr	r3, [pc, #68]	@ (80080d8 <HAL_TIM_MspPostInit+0x74>)
 8008094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008096:	2201      	movs	r2, #1
 8008098:	4013      	ands	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
 800809c:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800809e:	0021      	movs	r1, r4
 80080a0:	187b      	adds	r3, r7, r1
 80080a2:	2280      	movs	r2, #128	@ 0x80
 80080a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	2202      	movs	r2, #2
 80080aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080b2:	187b      	adds	r3, r7, r1
 80080b4:	2200      	movs	r2, #0
 80080b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	2205      	movs	r2, #5
 80080bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080be:	187a      	adds	r2, r7, r1
 80080c0:	23a0      	movs	r3, #160	@ 0xa0
 80080c2:	05db      	lsls	r3, r3, #23
 80080c4:	0011      	movs	r1, r2
 80080c6:	0018      	movs	r0, r3
 80080c8:	f001 fa6e 	bl	80095a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80080cc:	46c0      	nop			@ (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b009      	add	sp, #36	@ 0x24
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	40014800 	.word	0x40014800
 80080d8:	40021000 	.word	0x40021000

080080dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b09f      	sub	sp, #124	@ 0x7c
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080e4:	2364      	movs	r3, #100	@ 0x64
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	0018      	movs	r0, r3
 80080ea:	2314      	movs	r3, #20
 80080ec:	001a      	movs	r2, r3
 80080ee:	2100      	movs	r1, #0
 80080f0:	f006 ff56 	bl	800efa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080f4:	2418      	movs	r4, #24
 80080f6:	193b      	adds	r3, r7, r4
 80080f8:	0018      	movs	r0, r3
 80080fa:	234c      	movs	r3, #76	@ 0x4c
 80080fc:	001a      	movs	r2, r3
 80080fe:	2100      	movs	r1, #0
 8008100:	f006 ff4e 	bl	800efa0 <memset>
  if(huart->Instance==USART1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a45      	ldr	r2, [pc, #276]	@ (8008220 <HAL_UART_MspInit+0x144>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d13e      	bne.n	800818c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800810e:	193b      	adds	r3, r7, r4
 8008110:	2201      	movs	r2, #1
 8008112:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8008114:	193b      	adds	r3, r7, r4
 8008116:	2200      	movs	r2, #0
 8008118:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800811a:	193b      	adds	r3, r7, r4
 800811c:	0018      	movs	r0, r3
 800811e:	f002 ffb7 	bl	800b090 <HAL_RCCEx_PeriphCLKConfig>
 8008122:	1e03      	subs	r3, r0, #0
 8008124:	d001      	beq.n	800812a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008126:	f7ff f9f5 	bl	8007514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800812a:	4b3e      	ldr	r3, [pc, #248]	@ (8008224 <HAL_UART_MspInit+0x148>)
 800812c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800812e:	4b3d      	ldr	r3, [pc, #244]	@ (8008224 <HAL_UART_MspInit+0x148>)
 8008130:	2180      	movs	r1, #128	@ 0x80
 8008132:	01c9      	lsls	r1, r1, #7
 8008134:	430a      	orrs	r2, r1
 8008136:	641a      	str	r2, [r3, #64]	@ 0x40
 8008138:	4b3a      	ldr	r3, [pc, #232]	@ (8008224 <HAL_UART_MspInit+0x148>)
 800813a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800813c:	2380      	movs	r3, #128	@ 0x80
 800813e:	01db      	lsls	r3, r3, #7
 8008140:	4013      	ands	r3, r2
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008146:	4b37      	ldr	r3, [pc, #220]	@ (8008224 <HAL_UART_MspInit+0x148>)
 8008148:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800814a:	4b36      	ldr	r3, [pc, #216]	@ (8008224 <HAL_UART_MspInit+0x148>)
 800814c:	2104      	movs	r1, #4
 800814e:	430a      	orrs	r2, r1
 8008150:	635a      	str	r2, [r3, #52]	@ 0x34
 8008152:	4b34      	ldr	r3, [pc, #208]	@ (8008224 <HAL_UART_MspInit+0x148>)
 8008154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008156:	2204      	movs	r2, #4
 8008158:	4013      	ands	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800815e:	2164      	movs	r1, #100	@ 0x64
 8008160:	187b      	adds	r3, r7, r1
 8008162:	2230      	movs	r2, #48	@ 0x30
 8008164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008166:	187b      	adds	r3, r7, r1
 8008168:	2202      	movs	r2, #2
 800816a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816c:	187b      	adds	r3, r7, r1
 800816e:	2200      	movs	r2, #0
 8008170:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008172:	187b      	adds	r3, r7, r1
 8008174:	2200      	movs	r2, #0
 8008176:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8008178:	187b      	adds	r3, r7, r1
 800817a:	2201      	movs	r2, #1
 800817c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800817e:	187b      	adds	r3, r7, r1
 8008180:	4a29      	ldr	r2, [pc, #164]	@ (8008228 <HAL_UART_MspInit+0x14c>)
 8008182:	0019      	movs	r1, r3
 8008184:	0010      	movs	r0, r2
 8008186:	f001 fa0f 	bl	80095a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800818a:	e044      	b.n	8008216 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a26      	ldr	r2, [pc, #152]	@ (800822c <HAL_UART_MspInit+0x150>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d13f      	bne.n	8008216 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008196:	2118      	movs	r1, #24
 8008198:	187b      	adds	r3, r7, r1
 800819a:	2202      	movs	r2, #2
 800819c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800819e:	187b      	adds	r3, r7, r1
 80081a0:	2200      	movs	r2, #0
 80081a2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081a4:	187b      	adds	r3, r7, r1
 80081a6:	0018      	movs	r0, r3
 80081a8:	f002 ff72 	bl	800b090 <HAL_RCCEx_PeriphCLKConfig>
 80081ac:	1e03      	subs	r3, r0, #0
 80081ae:	d001      	beq.n	80081b4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80081b0:	f7ff f9b0 	bl	8007514 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80081b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008224 <HAL_UART_MspInit+0x148>)
 80081b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <HAL_UART_MspInit+0x148>)
 80081ba:	2180      	movs	r1, #128	@ 0x80
 80081bc:	0289      	lsls	r1, r1, #10
 80081be:	430a      	orrs	r2, r1
 80081c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80081c2:	4b18      	ldr	r3, [pc, #96]	@ (8008224 <HAL_UART_MspInit+0x148>)
 80081c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c6:	2380      	movs	r3, #128	@ 0x80
 80081c8:	029b      	lsls	r3, r3, #10
 80081ca:	4013      	ands	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081d0:	4b14      	ldr	r3, [pc, #80]	@ (8008224 <HAL_UART_MspInit+0x148>)
 80081d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081d4:	4b13      	ldr	r3, [pc, #76]	@ (8008224 <HAL_UART_MspInit+0x148>)
 80081d6:	2101      	movs	r1, #1
 80081d8:	430a      	orrs	r2, r1
 80081da:	635a      	str	r2, [r3, #52]	@ 0x34
 80081dc:	4b11      	ldr	r3, [pc, #68]	@ (8008224 <HAL_UART_MspInit+0x148>)
 80081de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e0:	2201      	movs	r2, #1
 80081e2:	4013      	ands	r3, r2
 80081e4:	60bb      	str	r3, [r7, #8]
 80081e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80081e8:	2164      	movs	r1, #100	@ 0x64
 80081ea:	187b      	adds	r3, r7, r1
 80081ec:	220c      	movs	r2, #12
 80081ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	2202      	movs	r2, #2
 80081f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f6:	187b      	adds	r3, r7, r1
 80081f8:	2200      	movs	r2, #0
 80081fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081fc:	187b      	adds	r3, r7, r1
 80081fe:	2200      	movs	r2, #0
 8008200:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008202:	187b      	adds	r3, r7, r1
 8008204:	2201      	movs	r2, #1
 8008206:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008208:	187a      	adds	r2, r7, r1
 800820a:	23a0      	movs	r3, #160	@ 0xa0
 800820c:	05db      	lsls	r3, r3, #23
 800820e:	0011      	movs	r1, r2
 8008210:	0018      	movs	r0, r3
 8008212:	f001 f9c9 	bl	80095a8 <HAL_GPIO_Init>
}
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	b01f      	add	sp, #124	@ 0x7c
 800821c:	bd90      	pop	{r4, r7, pc}
 800821e:	46c0      	nop			@ (mov r8, r8)
 8008220:	40013800 	.word	0x40013800
 8008224:	40021000 	.word	0x40021000
 8008228:	50000800 	.word	0x50000800
 800822c:	40004400 	.word	0x40004400

08008230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008234:	46c0      	nop			@ (mov r8, r8)
 8008236:	e7fd      	b.n	8008234 <NMI_Handler+0x4>

08008238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800823c:	46c0      	nop			@ (mov r8, r8)
 800823e:	e7fd      	b.n	800823c <HardFault_Handler+0x4>

08008240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008244:	46c0      	nop			@ (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800824e:	46c0      	nop			@ (mov r8, r8)
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008258:	f000 fec0 	bl	8008fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800825c:	46c0      	nop			@ (mov r8, r8)
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8008266:	2002      	movs	r0, #2
 8008268:	f001 fb44 	bl	80098f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800826c:	46c0      	nop			@ (mov r8, r8)
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8008276:	2004      	movs	r0, #4
 8008278:	f001 fb3c 	bl	80098f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800827c:	46c0      	nop			@ (mov r8, r8)
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8008286:	2380      	movs	r3, #128	@ 0x80
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	0018      	movs	r0, r3
 800828c:	f001 fb32 	bl	80098f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8008290:	46c0      	nop			@ (mov r8, r8)
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	af00      	add	r7, sp, #0
  return 1;
 800829a:	2301      	movs	r3, #1
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <_kill>:

int _kill(int pid, int sig)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80082ac:	f006 fee0 	bl	800f070 <__errno>
 80082b0:	0003      	movs	r3, r0
 80082b2:	2216      	movs	r2, #22
 80082b4:	601a      	str	r2, [r3, #0]
  return -1;
 80082b6:	2301      	movs	r3, #1
 80082b8:	425b      	negs	r3, r3
}
 80082ba:	0018      	movs	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	b002      	add	sp, #8
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <_exit>:

void _exit (int status)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80082ca:	2301      	movs	r3, #1
 80082cc:	425a      	negs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	0011      	movs	r1, r2
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7ff ffe5 	bl	80082a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80082d8:	46c0      	nop			@ (mov r8, r8)
 80082da:	e7fd      	b.n	80082d8 <_exit+0x16>

080082dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e00a      	b.n	8008304 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80082ee:	e000      	b.n	80082f2 <_read+0x16>
 80082f0:	bf00      	nop
 80082f2:	0001      	movs	r1, r0
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	1c5a      	adds	r2, r3, #1
 80082f8:	60ba      	str	r2, [r7, #8]
 80082fa:	b2ca      	uxtb	r2, r1
 80082fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	3301      	adds	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	429a      	cmp	r2, r3
 800830a:	dbf0      	blt.n	80082ee <_read+0x12>
  }

  return len;
 800830c:	687b      	ldr	r3, [r7, #4]
}
 800830e:	0018      	movs	r0, r3
 8008310:	46bd      	mov	sp, r7
 8008312:	b006      	add	sp, #24
 8008314:	bd80      	pop	{r7, pc}

08008316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b086      	sub	sp, #24
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	e009      	b.n	800833c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	60ba      	str	r2, [r7, #8]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	0018      	movs	r0, r3
 8008332:	e000      	b.n	8008336 <_write+0x20>
 8008334:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	3301      	adds	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	dbf1      	blt.n	8008328 <_write+0x12>
  }
  return len;
 8008344:	687b      	ldr	r3, [r7, #4]
}
 8008346:	0018      	movs	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	b006      	add	sp, #24
 800834c:	bd80      	pop	{r7, pc}

0800834e <_close>:

int _close(int file)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008356:	2301      	movs	r3, #1
 8008358:	425b      	negs	r3, r3
}
 800835a:	0018      	movs	r0, r3
 800835c:	46bd      	mov	sp, r7
 800835e:	b002      	add	sp, #8
 8008360:	bd80      	pop	{r7, pc}

08008362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b082      	sub	sp, #8
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2280      	movs	r2, #128	@ 0x80
 8008370:	0192      	lsls	r2, r2, #6
 8008372:	605a      	str	r2, [r3, #4]
  return 0;
 8008374:	2300      	movs	r3, #0
}
 8008376:	0018      	movs	r0, r3
 8008378:	46bd      	mov	sp, r7
 800837a:	b002      	add	sp, #8
 800837c:	bd80      	pop	{r7, pc}

0800837e <_isatty>:

int _isatty(int file)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008386:	2301      	movs	r3, #1
}
 8008388:	0018      	movs	r0, r3
 800838a:	46bd      	mov	sp, r7
 800838c:	b002      	add	sp, #8
 800838e:	bd80      	pop	{r7, pc}

08008390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800839c:	2300      	movs	r3, #0
}
 800839e:	0018      	movs	r0, r3
 80083a0:	46bd      	mov	sp, r7
 80083a2:	b004      	add	sp, #16
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083b0:	4a14      	ldr	r2, [pc, #80]	@ (8008404 <_sbrk+0x5c>)
 80083b2:	4b15      	ldr	r3, [pc, #84]	@ (8008408 <_sbrk+0x60>)
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083bc:	4b13      	ldr	r3, [pc, #76]	@ (800840c <_sbrk+0x64>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d102      	bne.n	80083ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083c4:	4b11      	ldr	r3, [pc, #68]	@ (800840c <_sbrk+0x64>)
 80083c6:	4a12      	ldr	r2, [pc, #72]	@ (8008410 <_sbrk+0x68>)
 80083c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083ca:	4b10      	ldr	r3, [pc, #64]	@ (800840c <_sbrk+0x64>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	18d3      	adds	r3, r2, r3
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d207      	bcs.n	80083e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083d8:	f006 fe4a 	bl	800f070 <__errno>
 80083dc:	0003      	movs	r3, r0
 80083de:	220c      	movs	r2, #12
 80083e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083e2:	2301      	movs	r3, #1
 80083e4:	425b      	negs	r3, r3
 80083e6:	e009      	b.n	80083fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083e8:	4b08      	ldr	r3, [pc, #32]	@ (800840c <_sbrk+0x64>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083ee:	4b07      	ldr	r3, [pc, #28]	@ (800840c <_sbrk+0x64>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	18d2      	adds	r2, r2, r3
 80083f6:	4b05      	ldr	r3, [pc, #20]	@ (800840c <_sbrk+0x64>)
 80083f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80083fa:	68fb      	ldr	r3, [r7, #12]
}
 80083fc:	0018      	movs	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	b006      	add	sp, #24
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20024000 	.word	0x20024000
 8008408:	00000400 	.word	0x00000400
 800840c:	200014d4 	.word	0x200014d4
 8008410:	20001648 	.word	0x20001648

08008414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008418:	46c0      	nop			@ (mov r8, r8)
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
    return property->u.value;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
}
 800842a:	0018      	movs	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	b002      	add	sp, #8
 8008430:	bd80      	pop	{r7, pc}

08008432 <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
    return json->type;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	7c1b      	ldrb	r3, [r3, #16]
}
 800843e:	0018      	movs	r0, r3
 8008440:	46bd      	mov	sp, r7
 8008442:	b002      	add	sp, #8
 8008444:	bd80      	pop	{r7, pc}

08008446 <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	e011      	b.n	800847c <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <json_getProperty+0x30>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	0011      	movs	r1, r2
 8008468:	0018      	movs	r0, r3
 800846a:	f7f7 fe4d 	bl	8000108 <strcmp>
 800846e:	1e03      	subs	r3, r0, #0
 8008470:	d101      	bne.n	8008476 <json_getProperty+0x30>
            return sibling;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	e006      	b.n	8008484 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1ea      	bne.n	8008458 <json_getProperty+0x12>
    return 0;
 8008482:	2300      	movs	r3, #0
}
 8008484:	0018      	movs	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	b004      	add	sp, #16
 800848a:	bd80      	pop	{r7, pc}

0800848c <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 800848c:	b5b0      	push	{r4, r5, r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f7ff ffd2 	bl	8008446 <json_getProperty>
 80084a2:	0003      	movs	r3, r0
 80084a4:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <json_getPropertyValue+0x24>
 80084ac:	2300      	movs	r3, #0
 80084ae:	e012      	b.n	80084d6 <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 80084b0:	250b      	movs	r5, #11
 80084b2:	197c      	adds	r4, r7, r5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	0018      	movs	r0, r3
 80084b8:	f7ff ffbb 	bl	8008432 <json_getType>
 80084bc:	0003      	movs	r3, r0
 80084be:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 80084c0:	197b      	adds	r3, r7, r5
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d801      	bhi.n	80084cc <json_getPropertyValue+0x40>
 80084c8:	2300      	movs	r3, #0
 80084ca:	e004      	b.n	80084d6 <json_getPropertyValue+0x4a>
	return json_getValue( field );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	0018      	movs	r0, r3
 80084d0:	f7ff ffa5 	bl	800841e <json_getValue>
 80084d4:	0003      	movs	r3, r0
}
 80084d6:	0018      	movs	r0, r3
 80084d8:	46bd      	mov	sp, r7
 80084da:	b004      	add	sp, #16
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 fc66 	bl	8008dbc <goBlank>
 80084f0:	0003      	movs	r3, r0
 80084f2:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <json_createWithPool+0x2c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b7b      	cmp	r3, #123	@ 0x7b
 8008500:	d005      	beq.n	800850e <json_createWithPool+0x30>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b5b      	cmp	r3, #91	@ 0x5b
 8008508:	d001      	beq.n	800850e <json_createWithPool+0x30>
 800850a:	2300      	movs	r3, #0
 800850c:	e01d      	b.n	800854a <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	0010      	movs	r0, r2
 8008516:	4798      	blx	r3
 8008518:	0003      	movs	r3, r0
 800851a:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2200      	movs	r2, #0
 800852c:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	0018      	movs	r0, r3
 8008536:	f000 faeb 	bl	8008b10 <objValue>
 800853a:	0003      	movs	r3, r0
 800853c:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <json_createWithPool+0x6a>
 8008544:	2300      	movs	r3, #0
 8008546:	e000      	b.n	800854a <json_createWithPool+0x6c>
    return obj;
 8008548:	68bb      	ldr	r3, [r7, #8]
}
 800854a:	0018      	movs	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	b004      	add	sp, #16
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	@ 0x28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 8008560:	2114      	movs	r1, #20
 8008562:	187b      	adds	r3, r7, r1
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 8008568:	187b      	adds	r3, r7, r1
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 800856e:	187b      	adds	r3, r7, r1
 8008570:	4a08      	ldr	r2, [pc, #32]	@ (8008594 <json_create+0x40>)
 8008572:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 8008574:	187b      	adds	r3, r7, r1
 8008576:	4a08      	ldr	r2, [pc, #32]	@ (8008598 <json_create+0x44>)
 8008578:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 800857a:	187b      	adds	r3, r7, r1
 800857c:	330c      	adds	r3, #12
 800857e:	001a      	movs	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	0011      	movs	r1, r2
 8008584:	0018      	movs	r0, r3
 8008586:	f7ff ffaa 	bl	80084de <json_createWithPool>
 800858a:	0003      	movs	r3, r0
}
 800858c:	0018      	movs	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	b00a      	add	sp, #40	@ 0x28
 8008592:	bd80      	pop	{r7, pc}
 8008594:	08008ce5 	.word	0x08008ce5
 8008598:	08008d05 	.word	0x08008d05

0800859c <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	0002      	movs	r2, r0
 80085a4:	1dfb      	adds	r3, r7, #7
 80085a6:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e011      	b.n	80085d2 <getEscape+0x36>
        if ( pair[i].ch == ch )
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <getEscape+0x48>)
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	0052      	lsls	r2, r2, #1
 80085b4:	5cd3      	ldrb	r3, [r2, r3]
 80085b6:	1dfa      	adds	r2, r7, #7
 80085b8:	7812      	ldrb	r2, [r2, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d106      	bne.n	80085cc <getEscape+0x30>
            return pair[i].code;
 80085be:	4a09      	ldr	r2, [pc, #36]	@ (80085e4 <getEscape+0x48>)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	18d3      	adds	r3, r2, r3
 80085c6:	3301      	adds	r3, #1
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	e006      	b.n	80085da <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b07      	cmp	r3, #7
 80085d6:	d9ea      	bls.n	80085ae <getEscape+0x12>
    return '\0';
 80085d8:	2300      	movs	r3, #0
}
 80085da:	0018      	movs	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	b004      	add	sp, #16
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	46c0      	nop			@ (mov r8, r8)
 80085e4:	0801c1f4 	.word	0x0801c1f4

080085e8 <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e010      	b.n	8008618 <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	18d3      	adds	r3, r2, r3
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <getCharFromUnicode+0x40>)
 8008602:	18d3      	adds	r3, r2, r3
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	001a      	movs	r2, r3
 8008608:	2344      	movs	r3, #68	@ 0x44
 800860a:	4013      	ands	r3, r2
 800860c:	d101      	bne.n	8008612 <getCharFromUnicode+0x2a>
            return '\0';
 800860e:	2300      	movs	r3, #0
 8008610:	e006      	b.n	8008620 <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b03      	cmp	r3, #3
 800861c:	d9eb      	bls.n	80085f6 <getCharFromUnicode+0xe>
    return '?';
 800861e:	233f      	movs	r3, #63	@ 0x3f
}
 8008620:	0018      	movs	r0, r3
 8008622:	46bd      	mov	sp, r7
 8008624:	b004      	add	sp, #16
 8008626:	bd80      	pop	{r7, pc}
 8008628:	0801c468 	.word	0x0801c468

0800862c <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 800862c:	b5b0      	push	{r4, r5, r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 800863c:	e04f      	b.n	80086de <parseString+0xb2>
        if ( *head == '\"' ) {
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b22      	cmp	r3, #34	@ 0x22
 8008644:	d107      	bne.n	8008656 <parseString+0x2a>
            *tail = '\0';
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	3301      	adds	r3, #1
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	e048      	b.n	80086e8 <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b5c      	cmp	r3, #92	@ 0x5c
 800865c:	d135      	bne.n	80086ca <parseString+0x9e>
            if ( *++head == 'u' ) {
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	3301      	adds	r3, #1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b75      	cmp	r3, #117	@ 0x75
 800866a:	d119      	bne.n	80086a0 <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	3301      	adds	r3, #1
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	250e      	movs	r5, #14
 8008674:	197c      	adds	r4, r7, r5
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	0018      	movs	r0, r3
 800867a:	f7ff ffb5 	bl	80085e8 <getCharFromUnicode>
 800867e:	0003      	movs	r3, r0
 8008680:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 8008682:	197b      	adds	r3, r7, r5
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <parseString+0x62>
 800868a:	2300      	movs	r3, #0
 800868c:	e02c      	b.n	80086e8 <parseString+0xbc>
                *tail = ch;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	220e      	movs	r2, #14
 8008692:	18ba      	adds	r2, r7, r2
 8008694:	7812      	ldrb	r2, [r2, #0]
 8008696:	701a      	strb	r2, [r3, #0]
                head += 3;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	3303      	adds	r3, #3
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e018      	b.n	80086d2 <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	250f      	movs	r5, #15
 80086a6:	197c      	adds	r4, r7, r5
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7ff ff77 	bl	800859c <getEscape>
 80086ae:	0003      	movs	r3, r0
 80086b0:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 80086b2:	197b      	adds	r3, r7, r5
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <parseString+0x92>
 80086ba:	2300      	movs	r3, #0
 80086bc:	e014      	b.n	80086e8 <parseString+0xbc>
                *tail = esc;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	220f      	movs	r2, #15
 80086c2:	18ba      	adds	r2, r7, r2
 80086c4:	7812      	ldrb	r2, [r2, #0]
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	e003      	b.n	80086d2 <parseString+0xa6>
            }
        }
        else *tail = *head;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	781a      	ldrb	r2, [r3, #0]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	3301      	adds	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3301      	adds	r3, #1
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1ab      	bne.n	800863e <parseString+0x12>
    }
    return 0;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	0018      	movs	r0, r3
 80086ea:	46bd      	mov	sp, r7
 80086ec:	b006      	add	sp, #24
 80086ee:	bdb0      	pop	{r4, r5, r7, pc}

080086f0 <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3301      	adds	r3, #1
 80086fe:	607b      	str	r3, [r7, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	0018      	movs	r0, r3
 800870a:	f7ff ff8f 	bl	800862c <parseString>
 800870e:	0003      	movs	r3, r0
 8008710:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <propertyName+0x2c>
 8008718:	2300      	movs	r3, #0
 800871a:	e017      	b.n	800874c <propertyName+0x5c>
    ptr = goBlank( ptr );
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	0018      	movs	r0, r3
 8008720:	f000 fb4c 	bl	8008dbc <goBlank>
 8008724:	0003      	movs	r3, r0
 8008726:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <propertyName+0x42>
 800872e:	2300      	movs	r3, #0
 8008730:	e00c      	b.n	800874c <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b3a      	cmp	r3, #58	@ 0x3a
 800873c:	d001      	beq.n	8008742 <propertyName+0x52>
 800873e:	2300      	movs	r3, #0
 8008740:	e004      	b.n	800874c <propertyName+0x5c>
    return goBlank( ptr );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	0018      	movs	r0, r3
 8008746:	f000 fb39 	bl	8008dbc <goBlank>
 800874a:	0003      	movs	r3, r0
}
 800874c:	0018      	movs	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	b002      	add	sp, #8
 8008752:	bd80      	pop	{r7, pc}

08008754 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3301      	adds	r3, #1
 800876c:	607b      	str	r3, [r7, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	0018      	movs	r0, r3
 8008772:	f7ff ff5b 	bl	800862c <parseString>
 8008776:	0003      	movs	r3, r0
 8008778:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <textValue+0x30>
 8008780:	2300      	movs	r3, #0
 8008782:	e003      	b.n	800878c <textValue+0x38>
    property->type = JSON_TEXT;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2202      	movs	r2, #2
 8008788:	741a      	strb	r2, [r3, #16]
    return ptr;
 800878a:	687b      	ldr	r3, [r7, #4]
}
 800878c:	0018      	movs	r0, r3
 800878e:	46bd      	mov	sp, r7
 8008790:	b002      	add	sp, #8
 8008792:	bd80      	pop	{r7, pc}

08008794 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
    while( *str )
 800879e:	e00b      	b.n	80087b8 <checkStr+0x24>
        if ( *ptr++ != *str++ )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	1c59      	adds	r1, r3, #1
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d001      	beq.n	80087b8 <checkStr+0x24>
            return 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e004      	b.n	80087c2 <checkStr+0x2e>
    while( *str )
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1ef      	bne.n	80087a0 <checkStr+0xc>
    return ptr;
 80087c0:	687b      	ldr	r3, [r7, #4]
}
 80087c2:	0018      	movs	r0, r3
 80087c4:	46bd      	mov	sp, r7
 80087c6:	b002      	add	sp, #8
 80087c8:	bd80      	pop	{r7, pc}

080087ca <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b084      	sub	sp, #16
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	001a      	movs	r2, r3
 80087d8:	1cfb      	adds	r3, r7, #3
 80087da:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	0011      	movs	r1, r2
 80087e2:	0018      	movs	r0, r3
 80087e4:	f7ff ffd6 	bl	8008794 <checkStr>
 80087e8:	0003      	movs	r3, r0
 80087ea:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <primitiveValue+0x40>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	0018      	movs	r0, r3
 80087f8:	f000 fb30 	bl	8008e5c <isEndOfPrimitive>
 80087fc:	0003      	movs	r3, r0
 80087fe:	001a      	movs	r2, r3
 8008800:	2301      	movs	r3, #1
 8008802:	4053      	eors	r3, r2
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <primitiveValue+0x44>
 800880a:	2300      	movs	r3, #0
 800880c:	e00a      	b.n	8008824 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	0018      	movs	r0, r3
 8008812:	f000 fb05 	bl	8008e20 <setToNull>
 8008816:	0003      	movs	r3, r0
 8008818:	60fb      	str	r3, [r7, #12]
    property->type = type;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	1cfa      	adds	r2, r7, #3
 800881e:	7812      	ldrb	r2, [r2, #0]
 8008820:	741a      	strb	r2, [r3, #16]
    return ptr;
 8008822:	68fb      	ldr	r3, [r7, #12]
}
 8008824:	0018      	movs	r0, r3
 8008826:	46bd      	mov	sp, r7
 8008828:	b004      	add	sp, #16
 800882a:	bd80      	pop	{r7, pc}

0800882c <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 8008836:	4a05      	ldr	r2, [pc, #20]	@ (800884c <trueValue+0x20>)
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	2303      	movs	r3, #3
 800883e:	f7ff ffc4 	bl	80087ca <primitiveValue>
 8008842:	0003      	movs	r3, r0
}
 8008844:	0018      	movs	r0, r3
 8008846:	46bd      	mov	sp, r7
 8008848:	b002      	add	sp, #8
 800884a:	bd80      	pop	{r7, pc}
 800884c:	08011904 	.word	0x08011904

08008850 <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 800885a:	4a05      	ldr	r2, [pc, #20]	@ (8008870 <falseValue+0x20>)
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	2303      	movs	r3, #3
 8008862:	f7ff ffb2 	bl	80087ca <primitiveValue>
 8008866:	0003      	movs	r3, r0
}
 8008868:	0018      	movs	r0, r3
 800886a:	46bd      	mov	sp, r7
 800886c:	b002      	add	sp, #8
 800886e:	bd80      	pop	{r7, pc}
 8008870:	0801190c 	.word	0x0801190c

08008874 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 800887e:	4a05      	ldr	r2, [pc, #20]	@ (8008894 <nullValue+0x20>)
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	2306      	movs	r3, #6
 8008886:	f7ff ffa0 	bl	80087ca <primitiveValue>
 800888a:	0003      	movs	r3, r0
}
 800888c:	0018      	movs	r0, r3
 800888e:	46bd      	mov	sp, r7
 8008890:	b002      	add	sp, #8
 8008892:	bd80      	pop	{r7, pc}
 8008894:	08011914 	.word	0x08011914

08008898 <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80088a6:	d003      	beq.n	80088b0 <expValue+0x18>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b2b      	cmp	r3, #43	@ 0x2b
 80088ae:	d102      	bne.n	80088b6 <expValue+0x1e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3301      	adds	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <expValue+0x54>)
 80088be:	18d3      	adds	r3, r2, r3
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	001a      	movs	r2, r3
 80088c4:	2304      	movs	r3, #4
 80088c6:	4013      	ands	r3, r2
 80088c8:	d101      	bne.n	80088ce <expValue+0x36>
 80088ca:	2300      	movs	r3, #0
 80088cc:	e009      	b.n	80088e2 <expValue+0x4a>
    ptr = goNum( ++ptr );
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3301      	adds	r3, #1
 80088d2:	607b      	str	r3, [r7, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	0018      	movs	r0, r3
 80088d8:	f000 fa82 	bl	8008de0 <goNum>
 80088dc:	0003      	movs	r3, r0
 80088de:	607b      	str	r3, [r7, #4]
    return ptr;
 80088e0:	687b      	ldr	r3, [r7, #4]
}
 80088e2:	0018      	movs	r0, r3
 80088e4:	46bd      	mov	sp, r7
 80088e6:	b002      	add	sp, #8
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	46c0      	nop			@ (mov r8, r8)
 80088ec:	0801c468 	.word	0x0801c468

080088f0 <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008938 <fraqValue+0x48>)
 8008900:	18d3      	adds	r3, r2, r3
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	001a      	movs	r2, r3
 8008906:	2304      	movs	r3, #4
 8008908:	4013      	ands	r3, r2
 800890a:	d101      	bne.n	8008910 <fraqValue+0x20>
 800890c:	2300      	movs	r3, #0
 800890e:	e00e      	b.n	800892e <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3301      	adds	r3, #1
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	0018      	movs	r0, r3
 800891a:	f000 fa61 	bl	8008de0 <goNum>
 800891e:	0003      	movs	r3, r0
 8008920:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <fraqValue+0x3c>
 8008928:	2300      	movs	r3, #0
 800892a:	e000      	b.n	800892e <fraqValue+0x3e>
    return ptr;
 800892c:	687b      	ldr	r3, [r7, #4]
}
 800892e:	0018      	movs	r0, r3
 8008930:	46bd      	mov	sp, r7
 8008932:	b002      	add	sp, #8
 8008934:	bd80      	pop	{r7, pc}
 8008936:	46c0      	nop			@ (mov r8, r8)
 8008938:	0801c468 	.word	0x0801c468

0800893c <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b2d      	cmp	r3, #45	@ 0x2d
 800894c:	d102      	bne.n	8008954 <numValue+0x18>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	3301      	adds	r3, #1
 8008952:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	4b5b      	ldr	r3, [pc, #364]	@ (8008ac8 <numValue+0x18c>)
 800895c:	18d3      	adds	r3, r2, r3
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	001a      	movs	r2, r3
 8008962:	2304      	movs	r3, #4
 8008964:	4013      	ands	r3, r2
 8008966:	d101      	bne.n	800896c <numValue+0x30>
 8008968:	2300      	movs	r3, #0
 800896a:	e0a8      	b.n	8008abe <numValue+0x182>
    if ( *ptr != '0' ) {
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b30      	cmp	r3, #48	@ 0x30
 8008972:	d00a      	beq.n	800898a <numValue+0x4e>
        ptr = goNum( ptr );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	0018      	movs	r0, r3
 8008978:	f000 fa32 	bl	8008de0 <goNum>
 800897c:	0003      	movs	r3, r0
 800897e:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d110      	bne.n	80089a8 <numValue+0x6c>
 8008986:	2300      	movs	r3, #0
 8008988:	e099      	b.n	8008abe <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3301      	adds	r3, #1
 800898e:	607b      	str	r3, [r7, #4]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	4b4c      	ldr	r3, [pc, #304]	@ (8008ac8 <numValue+0x18c>)
 8008998:	18d3      	adds	r3, r2, r3
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	001a      	movs	r2, r3
 800899e:	2304      	movs	r3, #4
 80089a0:	4013      	ands	r3, r2
 80089a2:	d001      	beq.n	80089a8 <numValue+0x6c>
 80089a4:	2300      	movs	r3, #0
 80089a6:	e08a      	b.n	8008abe <numValue+0x182>
    property->type = JSON_INTEGER;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2204      	movs	r2, #4
 80089ac:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80089b4:	d110      	bne.n	80089d8 <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3301      	adds	r3, #1
 80089ba:	607b      	str	r3, [r7, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	0018      	movs	r0, r3
 80089c0:	f7ff ff96 	bl	80088f0 <fraqValue>
 80089c4:	0003      	movs	r3, r0
 80089c6:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <numValue+0x96>
 80089ce:	2300      	movs	r3, #0
 80089d0:	e075      	b.n	8008abe <numValue+0x182>
        property->type = JSON_REAL;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2205      	movs	r2, #5
 80089d6:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b65      	cmp	r3, #101	@ 0x65
 80089de:	d003      	beq.n	80089e8 <numValue+0xac>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b45      	cmp	r3, #69	@ 0x45
 80089e6:	d110      	bne.n	8008a0a <numValue+0xce>
        ptr = expValue( ++ptr );
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3301      	adds	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	0018      	movs	r0, r3
 80089f2:	f7ff ff51 	bl	8008898 <expValue>
 80089f6:	0003      	movs	r3, r0
 80089f8:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <numValue+0xc8>
 8008a00:	2300      	movs	r3, #0
 8008a02:	e05c      	b.n	8008abe <numValue+0x182>
        property->type = JSON_REAL;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2205      	movs	r2, #5
 8008a08:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f000 fa24 	bl	8008e5c <isEndOfPrimitive>
 8008a14:	0003      	movs	r3, r0
 8008a16:	001a      	movs	r2, r3
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4053      	eors	r3, r2
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <numValue+0xea>
 8008a22:	2300      	movs	r3, #0
 8008a24:	e04b      	b.n	8008abe <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	7c1b      	ldrb	r3, [r3, #16]
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d140      	bne.n	8008ab0 <numValue+0x174>
        char const* value = property->u.value;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	201b      	movs	r0, #27
 8008a3a:	183b      	adds	r3, r7, r0
 8008a3c:	3a2d      	subs	r2, #45	@ 0x2d
 8008a3e:	4251      	negs	r1, r2
 8008a40:	414a      	adcs	r2, r1
 8008a42:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 8008a44:	183b      	adds	r3, r7, r0
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <numValue+0x114>
 8008a4c:	2314      	movs	r3, #20
 8008a4e:	e000      	b.n	8008a52 <numValue+0x116>
 8008a50:	2313      	movs	r3, #19
 8008a52:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d901      	bls.n	8008a68 <numValue+0x12c>
 8008a64:	2300      	movs	r3, #0
 8008a66:	e02a      	b.n	8008abe <numValue+0x182>
        if ( len == maxdigits ) {
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d11f      	bne.n	8008ab0 <numValue+0x174>
            char const tmp = *ptr;
 8008a70:	230f      	movs	r3, #15
 8008a72:	18fb      	adds	r3, r7, r3
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7812      	ldrb	r2, [r2, #0]
 8008a78:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 8008a80:	231b      	movs	r3, #27
 8008a82:	18fb      	adds	r3, r7, r3
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <numValue+0x152>
 8008a8a:	4b10      	ldr	r3, [pc, #64]	@ (8008acc <numValue+0x190>)
 8008a8c:	e000      	b.n	8008a90 <numValue+0x154>
 8008a8e:	4b10      	ldr	r3, [pc, #64]	@ (8008ad0 <numValue+0x194>)
 8008a90:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	0011      	movs	r1, r2
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f7f7 fb35 	bl	8000108 <strcmp>
 8008a9e:	1e03      	subs	r3, r0, #0
 8008aa0:	da01      	bge.n	8008aa6 <numValue+0x16a>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e00b      	b.n	8008abe <numValue+0x182>
            *ptr = tmp;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	220f      	movs	r2, #15
 8008aaa:	18ba      	adds	r2, r7, r2
 8008aac:	7812      	ldrb	r2, [r2, #0]
 8008aae:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f000 f9b4 	bl	8008e20 <setToNull>
 8008ab8:	0003      	movs	r3, r0
 8008aba:	607b      	str	r3, [r7, #4]
    return ptr;
 8008abc:	687b      	ldr	r3, [r7, #4]
}
 8008abe:	0018      	movs	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	b008      	add	sp, #32
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	46c0      	nop			@ (mov r8, r8)
 8008ac8:	0801c468 	.word	0x0801c468
 8008acc:	0801c204 	.word	0x0801c204
 8008ad0:	0801c21c 	.word	0x0801c21c

08008ad4 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <add+0x26>
	    obj->u.c.child = property;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 8008af8:	e006      	b.n	8008b08 <add+0x34>
	    obj->u.c.last_child->sibling = property;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	60da      	str	r2, [r3, #12]
}
 8008b08:	46c0      	nop			@ (mov r8, r8)
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b002      	add	sp, #8
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	3b7b      	subs	r3, #123	@ 0x7b
 8008b22:	1e5a      	subs	r2, r3, #1
 8008b24:	4193      	sbcs	r3, r2
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	001a      	movs	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2200      	movs	r2, #0
 8008b32:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
    ptr++;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f000 f93a 	bl	8008dbc <goBlank>
 8008b48:	0003      	movs	r3, r0
 8008b4a:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <objValue+0x46>
 8008b52:	2300      	movs	r3, #0
 8008b54:	e0c0      	b.n	8008cd8 <objValue+0x1c8>
        if ( *ptr == ',' ) {
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b2c      	cmp	r3, #44	@ 0x2c
 8008b5c:	d103      	bne.n	8008b66 <objValue+0x56>
            ++ptr;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
            continue;
 8008b64:	e0b7      	b.n	8008cd6 <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	7c1b      	ldrb	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <objValue+0x62>
 8008b6e:	227d      	movs	r2, #125	@ 0x7d
 8008b70:	e000      	b.n	8008b74 <objValue+0x64>
 8008b72:	225d      	movs	r2, #93	@ 0x5d
 8008b74:	211f      	movs	r1, #31
 8008b76:	187b      	adds	r3, r7, r1
 8008b78:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	187a      	adds	r2, r7, r1
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d116      	bne.n	8008bb4 <objValue+0xa4>
            *ptr = '\0';
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <objValue+0x92>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	e09a      	b.n	8008cd8 <objValue+0x1c8>
            obj->sibling = 0;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
            continue;
 8008bb2:	e090      	b.n	8008cd6 <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	0010      	movs	r0, r2
 8008bbc:	4798      	blx	r3
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <objValue+0xbc>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e085      	b.n	8008cd8 <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	7c1b      	ldrb	r3, [r3, #16]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d012      	beq.n	8008bfa <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b22      	cmp	r3, #34	@ 0x22
 8008bda:	d001      	beq.n	8008be0 <objValue+0xd0>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e07b      	b.n	8008cd8 <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	0011      	movs	r1, r2
 8008be6:	0018      	movs	r0, r3
 8008be8:	f7ff fd82 	bl	80086f0 <propertyName>
 8008bec:	0003      	movs	r3, r0
 8008bee:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <objValue+0xf0>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e06e      	b.n	8008cd8 <objValue+0x1c8>
        }
        else property->name = 0;
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	0011      	movs	r1, r2
 8008c06:	0018      	movs	r0, r3
 8008c08:	f7ff ff64 	bl	8008ad4 <add>
        property->u.value = ptr;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b22      	cmp	r3, #34	@ 0x22
 8008c18:	d02a      	beq.n	8008c70 <objValue+0x160>
 8008c1a:	db4d      	blt.n	8008cb8 <objValue+0x1a8>
 8008c1c:	2b7b      	cmp	r3, #123	@ 0x7b
 8008c1e:	dc4b      	bgt.n	8008cb8 <objValue+0x1a8>
 8008c20:	2b5b      	cmp	r3, #91	@ 0x5b
 8008c22:	db49      	blt.n	8008cb8 <objValue+0x1a8>
 8008c24:	3b5b      	subs	r3, #91	@ 0x5b
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	d846      	bhi.n	8008cb8 <objValue+0x1a8>
 8008c2a:	009a      	lsls	r2, r3, #2
 8008c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8008ce0 <objValue+0x1d0>)
 8008c2e:	18d3      	adds	r3, r2, r3
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2200      	movs	r2, #0
 8008c38:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	601a      	str	r2, [r3, #0]
                obj = property;
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]
                break;
 8008c50:	e03b      	b.n	8008cca <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2201      	movs	r2, #1
 8008c56:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	601a      	str	r2, [r3, #0]
                obj = property;
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
                break;
 8008c6e:	e02c      	b.n	8008cca <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	0011      	movs	r1, r2
 8008c76:	0018      	movs	r0, r3
 8008c78:	f7ff fd6c 	bl	8008754 <textValue>
 8008c7c:	0003      	movs	r3, r0
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	e023      	b.n	8008cca <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	0011      	movs	r1, r2
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f7ff fdcf 	bl	800882c <trueValue>
 8008c8e:	0003      	movs	r3, r0
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e01a      	b.n	8008cca <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	0011      	movs	r1, r2
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f7ff fdd8 	bl	8008850 <falseValue>
 8008ca0:	0003      	movs	r3, r0
 8008ca2:	60fb      	str	r3, [r7, #12]
 8008ca4:	e011      	b.n	8008cca <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	0011      	movs	r1, r2
 8008cac:	0018      	movs	r0, r3
 8008cae:	f7ff fde1 	bl	8008874 <nullValue>
 8008cb2:	0003      	movs	r3, r0
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	e008      	b.n	8008cca <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	0011      	movs	r1, r2
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	f7ff fe3c 	bl	800893c <numValue>
 8008cc4:	0003      	movs	r3, r0
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d000      	beq.n	8008cd2 <objValue+0x1c2>
 8008cd0:	e736      	b.n	8008b40 <objValue+0x30>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e000      	b.n	8008cd8 <objValue+0x1c8>
    for(;;) {
 8008cd6:	e733      	b.n	8008b40 <objValue+0x30>
    }
}
 8008cd8:	0018      	movs	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	b008      	add	sp, #32
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	0801c170 	.word	0x0801c170

08008ce4 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3b0c      	subs	r3, #12
 8008cf0:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	609a      	str	r2, [r3, #8]
    return spool->mem;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
}
 8008cfc:	0018      	movs	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	b004      	add	sp, #16
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3b0c      	subs	r3, #12
 8008d10:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689a      	ldr	r2, [r3, #8]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d301      	bcc.n	8008d22 <poolAlloc+0x1e>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e00b      	b.n	8008d3a <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6819      	ldr	r1, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	1c50      	adds	r0, r2, #1
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6098      	str	r0, [r3, #8]
 8008d30:	0013      	movs	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	189b      	adds	r3, r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	18cb      	adds	r3, r1, r3
}
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	b004      	add	sp, #16
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	0002      	movs	r2, r0
 8008d4a:	6039      	str	r1, [r7, #0]
 8008d4c:	1dfb      	adds	r3, r7, #7
 8008d4e:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 8008d50:	e009      	b.n	8008d66 <isOneOfThem+0x24>
        if ( ch == *set++ )
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	603a      	str	r2, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	1dfa      	adds	r2, r7, #7
 8008d5c:	7812      	ldrb	r2, [r2, #0]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d101      	bne.n	8008d66 <isOneOfThem+0x24>
            return true;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e004      	b.n	8008d70 <isOneOfThem+0x2e>
    while( *set != '\0' )
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1f1      	bne.n	8008d52 <isOneOfThem+0x10>
    return false;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	0018      	movs	r0, r3
 8008d72:	46bd      	mov	sp, r7
 8008d74:	b002      	add	sp, #8
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 8008d82:	e012      	b.n	8008daa <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	0011      	movs	r1, r2
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f7ff ffd8 	bl	8008d42 <isOneOfThem>
 8008d92:	0003      	movs	r3, r0
 8008d94:	001a      	movs	r2, r3
 8008d96:	2301      	movs	r3, #1
 8008d98:	4053      	eors	r3, r2
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <goWhile+0x2c>
            return str;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	e007      	b.n	8008db4 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3301      	adds	r3, #1
 8008da8:	607b      	str	r3, [r7, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e8      	bne.n	8008d84 <goWhile+0xc>
    }
    return 0;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	0018      	movs	r0, r3
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b002      	add	sp, #8
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8008dc4:	4a05      	ldr	r2, [pc, #20]	@ (8008ddc <goBlank+0x20>)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	0011      	movs	r1, r2
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f7ff ffd4 	bl	8008d78 <goWhile>
 8008dd0:	0003      	movs	r3, r0
}
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b002      	add	sp, #8
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	0801191c 	.word	0x0801191c

08008de0 <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8008de8:	e00e      	b.n	8008e08 <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <goNum+0x3c>)
 8008df2:	18d3      	adds	r3, r2, r3
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	001a      	movs	r2, r3
 8008df8:	2304      	movs	r3, #4
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	d101      	bne.n	8008e02 <goNum+0x22>
            return str;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	e007      	b.n	8008e12 <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3301      	adds	r3, #1
 8008e06:	607b      	str	r3, [r7, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1ec      	bne.n	8008dea <goNum+0xa>
    }
    return 0;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	0018      	movs	r0, r3
 8008e14:	46bd      	mov	sp, r7
 8008e16:	b002      	add	sp, #8
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	46c0      	nop			@ (mov r8, r8)
 8008e1c:	0801c468 	.word	0x0801c468

08008e20 <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8008e58 <setToNull+0x38>)
 8008e2e:	0011      	movs	r1, r2
 8008e30:	0018      	movs	r0, r3
 8008e32:	f7ff ff86 	bl	8008d42 <isOneOfThem>
 8008e36:	0003      	movs	r3, r0
 8008e38:	001a      	movs	r2, r3
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4053      	eors	r3, r2
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <setToNull+0x2e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	701a      	strb	r2, [r3, #0]
    return ch;
 8008e4e:	687b      	ldr	r3, [r7, #4]
}
 8008e50:	0018      	movs	r0, r3
 8008e52:	46bd      	mov	sp, r7
 8008e54:	b002      	add	sp, #8
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	08011924 	.word	0x08011924

08008e5c <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	0002      	movs	r2, r0
 8008e64:	1dfb      	adds	r3, r7, #7
 8008e66:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 8008e68:	1dfb      	adds	r3, r7, #7
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b2c      	cmp	r3, #44	@ 0x2c
 8008e6e:	d011      	beq.n	8008e94 <isEndOfPrimitive+0x38>
 8008e70:	4a0e      	ldr	r2, [pc, #56]	@ (8008eac <isEndOfPrimitive+0x50>)
 8008e72:	1dfb      	adds	r3, r7, #7
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	0011      	movs	r1, r2
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7ff ff62 	bl	8008d42 <isOneOfThem>
 8008e7e:	1e03      	subs	r3, r0, #0
 8008e80:	d108      	bne.n	8008e94 <isEndOfPrimitive+0x38>
 8008e82:	4a0b      	ldr	r2, [pc, #44]	@ (8008eb0 <isEndOfPrimitive+0x54>)
 8008e84:	1dfb      	adds	r3, r7, #7
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	0011      	movs	r1, r2
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f7ff ff59 	bl	8008d42 <isOneOfThem>
 8008e90:	1e03      	subs	r3, r0, #0
 8008e92:	d001      	beq.n	8008e98 <isEndOfPrimitive+0x3c>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <isEndOfPrimitive+0x3e>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	1c1a      	adds	r2, r3, #0
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	b2db      	uxtb	r3, r3
}
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b002      	add	sp, #8
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	46c0      	nop			@ (mov r8, r8)
 8008eac:	0801191c 	.word	0x0801191c
 8008eb0:	08011924 	.word	0x08011924

08008eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008eb4:	480d      	ldr	r0, [pc, #52]	@ (8008eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008eb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008eb8:	f7ff faac 	bl	8008414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ebc:	480c      	ldr	r0, [pc, #48]	@ (8008ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008ebe:	490d      	ldr	r1, [pc, #52]	@ (8008ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8008ef8 <LoopForever+0xe>)
  movs r3, #0
 8008ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ec4:	e002      	b.n	8008ecc <LoopCopyDataInit>

08008ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008eca:	3304      	adds	r3, #4

08008ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ed0:	d3f9      	bcc.n	8008ec6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8008efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8008f00 <LoopForever+0x16>)
  movs r3, #0
 8008ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ed8:	e001      	b.n	8008ede <LoopFillZerobss>

08008eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008edc:	3204      	adds	r2, #4

08008ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ee0:	d3fb      	bcc.n	8008eda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008ee2:	f006 f8cb 	bl	800f07c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008ee6:	f7fb fe0f 	bl	8004b08 <main>

08008eea <LoopForever>:

LoopForever:
  b LoopForever
 8008eea:	e7fe      	b.n	8008eea <LoopForever>
  ldr   r0, =_estack
 8008eec:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ef4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8008ef8:	0801c698 	.word	0x0801c698
  ldr r2, =_sbss
 8008efc:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8008f00:	20001644 	.word	0x20001644

08008f04 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008f04:	e7fe      	b.n	8008f04 <ADC1_COMP_IRQHandler>
	...

08008f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008f0e:	1dfb      	adds	r3, r7, #7
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008f14:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <HAL_Init+0x3c>)
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	4b0a      	ldr	r3, [pc, #40]	@ (8008f44 <HAL_Init+0x3c>)
 8008f1a:	2180      	movs	r1, #128	@ 0x80
 8008f1c:	0049      	lsls	r1, r1, #1
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f22:	2003      	movs	r0, #3
 8008f24:	f000 f810 	bl	8008f48 <HAL_InitTick>
 8008f28:	1e03      	subs	r3, r0, #0
 8008f2a:	d003      	beq.n	8008f34 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008f2c:	1dfb      	adds	r3, r7, #7
 8008f2e:	2201      	movs	r2, #1
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	e001      	b.n	8008f38 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008f34:	f7fe ff40 	bl	8007db8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008f38:	1dfb      	adds	r3, r7, #7
 8008f3a:	781b      	ldrb	r3, [r3, #0]
}
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b002      	add	sp, #8
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	40022000 	.word	0x40022000

08008f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008f50:	230f      	movs	r3, #15
 8008f52:	18fb      	adds	r3, r7, r3
 8008f54:	2200      	movs	r2, #0
 8008f56:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008f58:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd0 <HAL_InitTick+0x88>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d02b      	beq.n	8008fb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008f60:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd4 <HAL_InitTick+0x8c>)
 8008f62:	681c      	ldr	r4, [r3, #0]
 8008f64:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd0 <HAL_InitTick+0x88>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	0019      	movs	r1, r3
 8008f6a:	23fa      	movs	r3, #250	@ 0xfa
 8008f6c:	0098      	lsls	r0, r3, #2
 8008f6e:	f7f7 f8f1 	bl	8000154 <__udivsi3>
 8008f72:	0003      	movs	r3, r0
 8008f74:	0019      	movs	r1, r3
 8008f76:	0020      	movs	r0, r4
 8008f78:	f7f7 f8ec 	bl	8000154 <__udivsi3>
 8008f7c:	0003      	movs	r3, r0
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f000 f953 	bl	800922a <HAL_SYSTICK_Config>
 8008f84:	1e03      	subs	r3, r0, #0
 8008f86:	d112      	bne.n	8008fae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d80a      	bhi.n	8008fa4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	2301      	movs	r3, #1
 8008f92:	425b      	negs	r3, r3
 8008f94:	2200      	movs	r2, #0
 8008f96:	0018      	movs	r0, r3
 8008f98:	f000 f922 	bl	80091e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd8 <HAL_InitTick+0x90>)
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	e00d      	b.n	8008fc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008fa4:	230f      	movs	r3, #15
 8008fa6:	18fb      	adds	r3, r7, r3
 8008fa8:	2201      	movs	r2, #1
 8008faa:	701a      	strb	r2, [r3, #0]
 8008fac:	e008      	b.n	8008fc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008fae:	230f      	movs	r3, #15
 8008fb0:	18fb      	adds	r3, r7, r3
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	e003      	b.n	8008fc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008fb8:	230f      	movs	r3, #15
 8008fba:	18fb      	adds	r3, r7, r3
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008fc0:	230f      	movs	r3, #15
 8008fc2:	18fb      	adds	r3, r7, r3
 8008fc4:	781b      	ldrb	r3, [r3, #0]
}
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	b005      	add	sp, #20
 8008fcc:	bd90      	pop	{r4, r7, pc}
 8008fce:	46c0      	nop			@ (mov r8, r8)
 8008fd0:	2000000c 	.word	0x2000000c
 8008fd4:	20000004 	.word	0x20000004
 8008fd8:	20000008 	.word	0x20000008

08008fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008fe0:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <HAL_IncTick+0x1c>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	001a      	movs	r2, r3
 8008fe6:	4b05      	ldr	r3, [pc, #20]	@ (8008ffc <HAL_IncTick+0x20>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	18d2      	adds	r2, r2, r3
 8008fec:	4b03      	ldr	r3, [pc, #12]	@ (8008ffc <HAL_IncTick+0x20>)
 8008fee:	601a      	str	r2, [r3, #0]
}
 8008ff0:	46c0      	nop			@ (mov r8, r8)
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			@ (mov r8, r8)
 8008ff8:	2000000c 	.word	0x2000000c
 8008ffc:	200014d8 	.word	0x200014d8

08009000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	af00      	add	r7, sp, #0
  return uwTick;
 8009004:	4b02      	ldr	r3, [pc, #8]	@ (8009010 <HAL_GetTick+0x10>)
 8009006:	681b      	ldr	r3, [r3, #0]
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	46c0      	nop			@ (mov r8, r8)
 8009010:	200014d8 	.word	0x200014d8

08009014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800901c:	f7ff fff0 	bl	8009000 <HAL_GetTick>
 8009020:	0003      	movs	r3, r0
 8009022:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	3301      	adds	r3, #1
 800902c:	d005      	beq.n	800903a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800902e:	4b0a      	ldr	r3, [pc, #40]	@ (8009058 <HAL_Delay+0x44>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	001a      	movs	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	189b      	adds	r3, r3, r2
 8009038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800903a:	46c0      	nop			@ (mov r8, r8)
 800903c:	f7ff ffe0 	bl	8009000 <HAL_GetTick>
 8009040:	0002      	movs	r2, r0
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	429a      	cmp	r2, r3
 800904a:	d8f7      	bhi.n	800903c <HAL_Delay+0x28>
  {
  }
}
 800904c:	46c0      	nop			@ (mov r8, r8)
 800904e:	46c0      	nop			@ (mov r8, r8)
 8009050:	46bd      	mov	sp, r7
 8009052:	b004      	add	sp, #16
 8009054:	bd80      	pop	{r7, pc}
 8009056:	46c0      	nop			@ (mov r8, r8)
 8009058:	2000000c 	.word	0x2000000c

0800905c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8009064:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a06      	ldr	r2, [pc, #24]	@ (8009084 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800906a:	4013      	ands	r3, r2
 800906c:	0019      	movs	r1, r3
 800906e:	4b04      	ldr	r3, [pc, #16]	@ (8009080 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	430a      	orrs	r2, r1
 8009074:	601a      	str	r2, [r3, #0]
}
 8009076:	46c0      	nop			@ (mov r8, r8)
 8009078:	46bd      	mov	sp, r7
 800907a:	b002      	add	sp, #8
 800907c:	bd80      	pop	{r7, pc}
 800907e:	46c0      	nop			@ (mov r8, r8)
 8009080:	40010000 	.word	0x40010000
 8009084:	fffff9ff 	.word	0xfffff9ff

08009088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	0002      	movs	r2, r0
 8009090:	1dfb      	adds	r3, r7, #7
 8009092:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009094:	1dfb      	adds	r3, r7, #7
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b7f      	cmp	r3, #127	@ 0x7f
 800909a:	d809      	bhi.n	80090b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800909c:	1dfb      	adds	r3, r7, #7
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	001a      	movs	r2, r3
 80090a2:	231f      	movs	r3, #31
 80090a4:	401a      	ands	r2, r3
 80090a6:	4b04      	ldr	r3, [pc, #16]	@ (80090b8 <__NVIC_EnableIRQ+0x30>)
 80090a8:	2101      	movs	r1, #1
 80090aa:	4091      	lsls	r1, r2
 80090ac:	000a      	movs	r2, r1
 80090ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80090b0:	46c0      	nop			@ (mov r8, r8)
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b002      	add	sp, #8
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	e000e100 	.word	0xe000e100

080090bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090bc:	b590      	push	{r4, r7, lr}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	0002      	movs	r2, r0
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	1dfb      	adds	r3, r7, #7
 80090c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80090ca:	1dfb      	adds	r3, r7, #7
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80090d0:	d828      	bhi.n	8009124 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80090d2:	4a2f      	ldr	r2, [pc, #188]	@ (8009190 <__NVIC_SetPriority+0xd4>)
 80090d4:	1dfb      	adds	r3, r7, #7
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	b25b      	sxtb	r3, r3
 80090da:	089b      	lsrs	r3, r3, #2
 80090dc:	33c0      	adds	r3, #192	@ 0xc0
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	589b      	ldr	r3, [r3, r2]
 80090e2:	1dfa      	adds	r2, r7, #7
 80090e4:	7812      	ldrb	r2, [r2, #0]
 80090e6:	0011      	movs	r1, r2
 80090e8:	2203      	movs	r2, #3
 80090ea:	400a      	ands	r2, r1
 80090ec:	00d2      	lsls	r2, r2, #3
 80090ee:	21ff      	movs	r1, #255	@ 0xff
 80090f0:	4091      	lsls	r1, r2
 80090f2:	000a      	movs	r2, r1
 80090f4:	43d2      	mvns	r2, r2
 80090f6:	401a      	ands	r2, r3
 80090f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	019b      	lsls	r3, r3, #6
 80090fe:	22ff      	movs	r2, #255	@ 0xff
 8009100:	401a      	ands	r2, r3
 8009102:	1dfb      	adds	r3, r7, #7
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	0018      	movs	r0, r3
 8009108:	2303      	movs	r3, #3
 800910a:	4003      	ands	r3, r0
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009110:	481f      	ldr	r0, [pc, #124]	@ (8009190 <__NVIC_SetPriority+0xd4>)
 8009112:	1dfb      	adds	r3, r7, #7
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	b25b      	sxtb	r3, r3
 8009118:	089b      	lsrs	r3, r3, #2
 800911a:	430a      	orrs	r2, r1
 800911c:	33c0      	adds	r3, #192	@ 0xc0
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009122:	e031      	b.n	8009188 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009124:	4a1b      	ldr	r2, [pc, #108]	@ (8009194 <__NVIC_SetPriority+0xd8>)
 8009126:	1dfb      	adds	r3, r7, #7
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	0019      	movs	r1, r3
 800912c:	230f      	movs	r3, #15
 800912e:	400b      	ands	r3, r1
 8009130:	3b08      	subs	r3, #8
 8009132:	089b      	lsrs	r3, r3, #2
 8009134:	3306      	adds	r3, #6
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	18d3      	adds	r3, r2, r3
 800913a:	3304      	adds	r3, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	1dfa      	adds	r2, r7, #7
 8009140:	7812      	ldrb	r2, [r2, #0]
 8009142:	0011      	movs	r1, r2
 8009144:	2203      	movs	r2, #3
 8009146:	400a      	ands	r2, r1
 8009148:	00d2      	lsls	r2, r2, #3
 800914a:	21ff      	movs	r1, #255	@ 0xff
 800914c:	4091      	lsls	r1, r2
 800914e:	000a      	movs	r2, r1
 8009150:	43d2      	mvns	r2, r2
 8009152:	401a      	ands	r2, r3
 8009154:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	019b      	lsls	r3, r3, #6
 800915a:	22ff      	movs	r2, #255	@ 0xff
 800915c:	401a      	ands	r2, r3
 800915e:	1dfb      	adds	r3, r7, #7
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	0018      	movs	r0, r3
 8009164:	2303      	movs	r3, #3
 8009166:	4003      	ands	r3, r0
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800916c:	4809      	ldr	r0, [pc, #36]	@ (8009194 <__NVIC_SetPriority+0xd8>)
 800916e:	1dfb      	adds	r3, r7, #7
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	001c      	movs	r4, r3
 8009174:	230f      	movs	r3, #15
 8009176:	4023      	ands	r3, r4
 8009178:	3b08      	subs	r3, #8
 800917a:	089b      	lsrs	r3, r3, #2
 800917c:	430a      	orrs	r2, r1
 800917e:	3306      	adds	r3, #6
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	18c3      	adds	r3, r0, r3
 8009184:	3304      	adds	r3, #4
 8009186:	601a      	str	r2, [r3, #0]
}
 8009188:	46c0      	nop			@ (mov r8, r8)
 800918a:	46bd      	mov	sp, r7
 800918c:	b003      	add	sp, #12
 800918e:	bd90      	pop	{r4, r7, pc}
 8009190:	e000e100 	.word	0xe000e100
 8009194:	e000ed00 	.word	0xe000ed00

08009198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	1e5a      	subs	r2, r3, #1
 80091a4:	2380      	movs	r3, #128	@ 0x80
 80091a6:	045b      	lsls	r3, r3, #17
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d301      	bcc.n	80091b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091ac:	2301      	movs	r3, #1
 80091ae:	e010      	b.n	80091d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091b0:	4b0a      	ldr	r3, [pc, #40]	@ (80091dc <SysTick_Config+0x44>)
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	3a01      	subs	r2, #1
 80091b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091b8:	2301      	movs	r3, #1
 80091ba:	425b      	negs	r3, r3
 80091bc:	2103      	movs	r1, #3
 80091be:	0018      	movs	r0, r3
 80091c0:	f7ff ff7c 	bl	80090bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091c4:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <SysTick_Config+0x44>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091ca:	4b04      	ldr	r3, [pc, #16]	@ (80091dc <SysTick_Config+0x44>)
 80091cc:	2207      	movs	r2, #7
 80091ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	0018      	movs	r0, r3
 80091d4:	46bd      	mov	sp, r7
 80091d6:	b002      	add	sp, #8
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	46c0      	nop			@ (mov r8, r8)
 80091dc:	e000e010 	.word	0xe000e010

080091e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	210f      	movs	r1, #15
 80091ec:	187b      	adds	r3, r7, r1
 80091ee:	1c02      	adds	r2, r0, #0
 80091f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	187b      	adds	r3, r7, r1
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b25b      	sxtb	r3, r3
 80091fa:	0011      	movs	r1, r2
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7ff ff5d 	bl	80090bc <__NVIC_SetPriority>
}
 8009202:	46c0      	nop			@ (mov r8, r8)
 8009204:	46bd      	mov	sp, r7
 8009206:	b004      	add	sp, #16
 8009208:	bd80      	pop	{r7, pc}

0800920a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	0002      	movs	r2, r0
 8009212:	1dfb      	adds	r3, r7, #7
 8009214:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009216:	1dfb      	adds	r3, r7, #7
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	b25b      	sxtb	r3, r3
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff ff33 	bl	8009088 <__NVIC_EnableIRQ>
}
 8009222:	46c0      	nop			@ (mov r8, r8)
 8009224:	46bd      	mov	sp, r7
 8009226:	b002      	add	sp, #8
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	0018      	movs	r0, r3
 8009236:	f7ff ffaf 	bl	8009198 <SysTick_Config>
 800923a:	0003      	movs	r3, r0
}
 800923c:	0018      	movs	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	b002      	add	sp, #8
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009244:	b5b0      	push	{r4, r5, r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	603a      	str	r2, [r7, #0]
 8009250:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009252:	4b21      	ldr	r3, [pc, #132]	@ (80092d8 <HAL_FLASH_Program+0x94>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_FLASH_Program+0x1a>
 800925a:	2302      	movs	r3, #2
 800925c:	e038      	b.n	80092d0 <HAL_FLASH_Program+0x8c>
 800925e:	4b1e      	ldr	r3, [pc, #120]	@ (80092d8 <HAL_FLASH_Program+0x94>)
 8009260:	2201      	movs	r2, #1
 8009262:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009264:	4b1c      	ldr	r3, [pc, #112]	@ (80092d8 <HAL_FLASH_Program+0x94>)
 8009266:	2200      	movs	r2, #0
 8009268:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800926a:	2517      	movs	r5, #23
 800926c:	197c      	adds	r4, r7, r5
 800926e:	23fa      	movs	r3, #250	@ 0xfa
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	0018      	movs	r0, r3
 8009274:	f000 f87a 	bl	800936c <FLASH_WaitForLastOperation>
 8009278:	0003      	movs	r3, r0
 800927a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800927c:	197b      	adds	r3, r7, r5
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d11f      	bne.n	80092c4 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d106      	bne.n	8009298 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	0008      	movs	r0, r1
 8009292:	f000 f8b9 	bl	8009408 <FLASH_Program_DoubleWord>
 8009296:	e005      	b.n	80092a4 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	0011      	movs	r1, r2
 800929e:	0018      	movs	r0, r3
 80092a0:	f008 f9d2 	bl	8011648 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80092a4:	2317      	movs	r3, #23
 80092a6:	18fc      	adds	r4, r7, r3
 80092a8:	23fa      	movs	r3, #250	@ 0xfa
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	0018      	movs	r0, r3
 80092ae:	f000 f85d 	bl	800936c <FLASH_WaitForLastOperation>
 80092b2:	0003      	movs	r3, r0
 80092b4:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80092b6:	4b09      	ldr	r3, [pc, #36]	@ (80092dc <HAL_FLASH_Program+0x98>)
 80092b8:	695a      	ldr	r2, [r3, #20]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	43d9      	mvns	r1, r3
 80092be:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <HAL_FLASH_Program+0x98>)
 80092c0:	400a      	ands	r2, r1
 80092c2:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80092c4:	4b04      	ldr	r3, [pc, #16]	@ (80092d8 <HAL_FLASH_Program+0x94>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80092ca:	2317      	movs	r3, #23
 80092cc:	18fb      	adds	r3, r7, r3
 80092ce:	781b      	ldrb	r3, [r3, #0]
}
 80092d0:	0018      	movs	r0, r3
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b006      	add	sp, #24
 80092d6:	bdb0      	pop	{r4, r5, r7, pc}
 80092d8:	200014dc 	.word	0x200014dc
 80092dc:	40022000 	.word	0x40022000

080092e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80092e6:	1dfb      	adds	r3, r7, #7
 80092e8:	2200      	movs	r2, #0
 80092ea:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80092ec:	4b0b      	ldr	r3, [pc, #44]	@ (800931c <HAL_FLASH_Unlock+0x3c>)
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	da0c      	bge.n	800930e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80092f4:	4b09      	ldr	r3, [pc, #36]	@ (800931c <HAL_FLASH_Unlock+0x3c>)
 80092f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009320 <HAL_FLASH_Unlock+0x40>)
 80092f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80092fa:	4b08      	ldr	r3, [pc, #32]	@ (800931c <HAL_FLASH_Unlock+0x3c>)
 80092fc:	4a09      	ldr	r2, [pc, #36]	@ (8009324 <HAL_FLASH_Unlock+0x44>)
 80092fe:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009300:	4b06      	ldr	r3, [pc, #24]	@ (800931c <HAL_FLASH_Unlock+0x3c>)
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	da02      	bge.n	800930e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8009308:	1dfb      	adds	r3, r7, #7
 800930a:	2201      	movs	r2, #1
 800930c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800930e:	1dfb      	adds	r3, r7, #7
 8009310:	781b      	ldrb	r3, [r3, #0]
}
 8009312:	0018      	movs	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	b002      	add	sp, #8
 8009318:	bd80      	pop	{r7, pc}
 800931a:	46c0      	nop			@ (mov r8, r8)
 800931c:	40022000 	.word	0x40022000
 8009320:	45670123 	.word	0x45670123
 8009324:	cdef89ab 	.word	0xcdef89ab

08009328 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800932e:	1dfb      	adds	r3, r7, #7
 8009330:	2201      	movs	r2, #1
 8009332:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009334:	23fa      	movs	r3, #250	@ 0xfa
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	0018      	movs	r0, r3
 800933a:	f000 f817 	bl	800936c <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800933e:	4b0a      	ldr	r3, [pc, #40]	@ (8009368 <HAL_FLASH_Lock+0x40>)
 8009340:	695a      	ldr	r2, [r3, #20]
 8009342:	4b09      	ldr	r3, [pc, #36]	@ (8009368 <HAL_FLASH_Lock+0x40>)
 8009344:	2180      	movs	r1, #128	@ 0x80
 8009346:	0609      	lsls	r1, r1, #24
 8009348:	430a      	orrs	r2, r1
 800934a:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800934c:	4b06      	ldr	r3, [pc, #24]	@ (8009368 <HAL_FLASH_Lock+0x40>)
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	da02      	bge.n	800935a <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8009354:	1dfb      	adds	r3, r7, #7
 8009356:	2200      	movs	r2, #0
 8009358:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800935a:	1dfb      	adds	r3, r7, #7
 800935c:	781b      	ldrb	r3, [r3, #0]
}
 800935e:	0018      	movs	r0, r3
 8009360:	46bd      	mov	sp, r7
 8009362:	b002      	add	sp, #8
 8009364:	bd80      	pop	{r7, pc}
 8009366:	46c0      	nop			@ (mov r8, r8)
 8009368:	40022000 	.word	0x40022000

0800936c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8009374:	f7ff fe44 	bl	8009000 <HAL_GetTick>
 8009378:	0003      	movs	r3, r0
 800937a:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800937c:	23c0      	movs	r3, #192	@ 0xc0
 800937e:	029b      	lsls	r3, r3, #10
 8009380:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8009382:	e00c      	b.n	800939e <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3301      	adds	r3, #1
 8009388:	d009      	beq.n	800939e <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800938a:	f7ff fe39 	bl	8009000 <HAL_GetTick>
 800938e:	0002      	movs	r2, r0
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d801      	bhi.n	800939e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e028      	b.n	80093f0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800939e:	4b16      	ldr	r3, [pc, #88]	@ (80093f8 <FLASH_WaitForLastOperation+0x8c>)
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4013      	ands	r3, r2
 80093a6:	d1ed      	bne.n	8009384 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80093a8:	4b13      	ldr	r3, [pc, #76]	@ (80093f8 <FLASH_WaitForLastOperation+0x8c>)
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	4a13      	ldr	r2, [pc, #76]	@ (80093fc <FLASH_WaitForLastOperation+0x90>)
 80093ae:	4013      	ands	r3, r2
 80093b0:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80093b2:	4b11      	ldr	r3, [pc, #68]	@ (80093f8 <FLASH_WaitForLastOperation+0x8c>)
 80093b4:	4a12      	ldr	r2, [pc, #72]	@ (8009400 <FLASH_WaitForLastOperation+0x94>)
 80093b6:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d011      	beq.n	80093e2 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80093be:	4b11      	ldr	r3, [pc, #68]	@ (8009404 <FLASH_WaitForLastOperation+0x98>)
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e013      	b.n	80093f0 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3301      	adds	r3, #1
 80093cc:	d009      	beq.n	80093e2 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80093ce:	f7ff fe17 	bl	8009000 <HAL_GetTick>
 80093d2:	0002      	movs	r2, r0
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d801      	bhi.n	80093e2 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e006      	b.n	80093f0 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80093e2:	4b05      	ldr	r3, [pc, #20]	@ (80093f8 <FLASH_WaitForLastOperation+0x8c>)
 80093e4:	691a      	ldr	r2, [r3, #16]
 80093e6:	2380      	movs	r3, #128	@ 0x80
 80093e8:	02db      	lsls	r3, r3, #11
 80093ea:	4013      	ands	r3, r2
 80093ec:	d1ec      	bne.n	80093c8 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	0018      	movs	r0, r3
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b004      	add	sp, #16
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40022000 	.word	0x40022000
 80093fc:	0000c3fa 	.word	0x0000c3fa
 8009400:	0008c3fb 	.word	0x0008c3fb
 8009404:	200014dc 	.word	0x200014dc

08009408 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009408:	b5b0      	push	{r4, r5, r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	603a      	str	r2, [r7, #0]
 8009412:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009414:	4b0b      	ldr	r3, [pc, #44]	@ (8009444 <FLASH_Program_DoubleWord+0x3c>)
 8009416:	695a      	ldr	r2, [r3, #20]
 8009418:	4b0a      	ldr	r3, [pc, #40]	@ (8009444 <FLASH_Program_DoubleWord+0x3c>)
 800941a:	2101      	movs	r1, #1
 800941c:	430a      	orrs	r2, r1
 800941e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009426:	f3bf 8f6f 	isb	sy
}
 800942a:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	001c      	movs	r4, r3
 8009430:	2300      	movs	r3, #0
 8009432:	001d      	movs	r5, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3304      	adds	r3, #4
 8009438:	0022      	movs	r2, r4
 800943a:	601a      	str	r2, [r3, #0]
}
 800943c:	46c0      	nop			@ (mov r8, r8)
 800943e:	46bd      	mov	sp, r7
 8009440:	b004      	add	sp, #16
 8009442:	bdb0      	pop	{r4, r5, r7, pc}
 8009444:	40022000 	.word	0x40022000

08009448 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009448:	b5b0      	push	{r4, r5, r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009452:	4b33      	ldr	r3, [pc, #204]	@ (8009520 <HAL_FLASHEx_Erase+0xd8>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <HAL_FLASHEx_Erase+0x16>
 800945a:	2302      	movs	r3, #2
 800945c:	e05c      	b.n	8009518 <HAL_FLASHEx_Erase+0xd0>
 800945e:	4b30      	ldr	r3, [pc, #192]	@ (8009520 <HAL_FLASHEx_Erase+0xd8>)
 8009460:	2201      	movs	r2, #1
 8009462:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009464:	4b2e      	ldr	r3, [pc, #184]	@ (8009520 <HAL_FLASHEx_Erase+0xd8>)
 8009466:	2200      	movs	r2, #0
 8009468:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800946a:	250f      	movs	r5, #15
 800946c:	197c      	adds	r4, r7, r5
 800946e:	23fa      	movs	r3, #250	@ 0xfa
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	0018      	movs	r0, r3
 8009474:	f7ff ff7a 	bl	800936c <FLASH_WaitForLastOperation>
 8009478:	0003      	movs	r3, r0
 800947a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800947c:	002c      	movs	r4, r5
 800947e:	193b      	adds	r3, r7, r4
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d142      	bne.n	800950c <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b04      	cmp	r3, #4
 800948c:	d10d      	bne.n	80094aa <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	0018      	movs	r0, r3
 8009494:	f000 f848 	bl	8009528 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009498:	193c      	adds	r4, r7, r4
 800949a:	23fa      	movs	r3, #250	@ 0xfa
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	0018      	movs	r0, r3
 80094a0:	f7ff ff64 	bl	800936c <FLASH_WaitForLastOperation>
 80094a4:	0003      	movs	r3, r0
 80094a6:	7023      	strb	r3, [r4, #0]
 80094a8:	e030      	b.n	800950c <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2201      	movs	r2, #1
 80094ae:	4252      	negs	r2, r2
 80094b0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	60bb      	str	r3, [r7, #8]
 80094b8:	e01a      	b.n	80094f0 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	0011      	movs	r1, r2
 80094c2:	0018      	movs	r0, r3
 80094c4:	f000 f844 	bl	8009550 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80094c8:	250f      	movs	r5, #15
 80094ca:	197c      	adds	r4, r7, r5
 80094cc:	23fa      	movs	r3, #250	@ 0xfa
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	0018      	movs	r0, r3
 80094d2:	f7ff ff4b 	bl	800936c <FLASH_WaitForLastOperation>
 80094d6:	0003      	movs	r3, r0
 80094d8:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80094da:	197b      	adds	r3, r7, r5
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	601a      	str	r2, [r3, #0]
          break;
 80094e8:	e00a      	b.n	8009500 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	3301      	adds	r3, #1
 80094ee:	60bb      	str	r3, [r7, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	18d3      	adds	r3, r2, r3
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d3dc      	bcc.n	80094ba <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009500:	4b08      	ldr	r3, [pc, #32]	@ (8009524 <HAL_FLASHEx_Erase+0xdc>)
 8009502:	695a      	ldr	r2, [r3, #20]
 8009504:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <HAL_FLASHEx_Erase+0xdc>)
 8009506:	2102      	movs	r1, #2
 8009508:	438a      	bics	r2, r1
 800950a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800950c:	4b04      	ldr	r3, [pc, #16]	@ (8009520 <HAL_FLASHEx_Erase+0xd8>)
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009512:	230f      	movs	r3, #15
 8009514:	18fb      	adds	r3, r7, r3
 8009516:	781b      	ldrb	r3, [r3, #0]
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b004      	add	sp, #16
 800951e:	bdb0      	pop	{r4, r5, r7, pc}
 8009520:	200014dc 	.word	0x200014dc
 8009524:	40022000 	.word	0x40022000

08009528 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8009530:	4b06      	ldr	r3, [pc, #24]	@ (800954c <FLASH_MassErase+0x24>)
 8009532:	695a      	ldr	r2, [r3, #20]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	431a      	orrs	r2, r3
 8009538:	4b04      	ldr	r3, [pc, #16]	@ (800954c <FLASH_MassErase+0x24>)
 800953a:	2180      	movs	r1, #128	@ 0x80
 800953c:	0249      	lsls	r1, r1, #9
 800953e:	430a      	orrs	r2, r1
 8009540:	615a      	str	r2, [r3, #20]
}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b002      	add	sp, #8
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	40022000 	.word	0x40022000

08009550 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800955a:	4b0f      	ldr	r3, [pc, #60]	@ (8009598 <FLASH_PageErase+0x48>)
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	4a0f      	ldr	r2, [pc, #60]	@ (800959c <FLASH_PageErase+0x4c>)
 8009560:	4013      	ands	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b04      	cmp	r3, #4
 8009568:	d005      	beq.n	8009576 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2280      	movs	r2, #128	@ 0x80
 800956e:	0192      	lsls	r2, r2, #6
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	e003      	b.n	800957e <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4a09      	ldr	r2, [pc, #36]	@ (80095a0 <FLASH_PageErase+0x50>)
 800957a:	4013      	ands	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	00da      	lsls	r2, r3, #3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	431a      	orrs	r2, r3
 8009586:	4b04      	ldr	r3, [pc, #16]	@ (8009598 <FLASH_PageErase+0x48>)
 8009588:	4906      	ldr	r1, [pc, #24]	@ (80095a4 <FLASH_PageErase+0x54>)
 800958a:	430a      	orrs	r2, r1
 800958c:	615a      	str	r2, [r3, #20]
}
 800958e:	46c0      	nop			@ (mov r8, r8)
 8009590:	46bd      	mov	sp, r7
 8009592:	b004      	add	sp, #16
 8009594:	bd80      	pop	{r7, pc}
 8009596:	46c0      	nop			@ (mov r8, r8)
 8009598:	40022000 	.word	0x40022000
 800959c:	ffffe007 	.word	0xffffe007
 80095a0:	ffffdfff 	.word	0xffffdfff
 80095a4:	00010002 	.word	0x00010002

080095a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80095b6:	e14d      	b.n	8009854 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2101      	movs	r1, #1
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	4091      	lsls	r1, r2
 80095c2:	000a      	movs	r2, r1
 80095c4:	4013      	ands	r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d100      	bne.n	80095d0 <HAL_GPIO_Init+0x28>
 80095ce:	e13e      	b.n	800984e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	2203      	movs	r2, #3
 80095d6:	4013      	ands	r3, r2
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d005      	beq.n	80095e8 <HAL_GPIO_Init+0x40>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2203      	movs	r2, #3
 80095e2:	4013      	ands	r3, r2
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d130      	bne.n	800964a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	2203      	movs	r2, #3
 80095f4:	409a      	lsls	r2, r3
 80095f6:	0013      	movs	r3, r2
 80095f8:	43da      	mvns	r2, r3
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	4013      	ands	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	409a      	lsls	r2, r3
 800960a:	0013      	movs	r3, r2
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800961e:	2201      	movs	r2, #1
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	409a      	lsls	r2, r3
 8009624:	0013      	movs	r3, r2
 8009626:	43da      	mvns	r2, r3
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	4013      	ands	r3, r2
 800962c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	091b      	lsrs	r3, r3, #4
 8009634:	2201      	movs	r2, #1
 8009636:	401a      	ands	r2, r3
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	409a      	lsls	r2, r3
 800963c:	0013      	movs	r3, r2
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	2203      	movs	r2, #3
 8009650:	4013      	ands	r3, r2
 8009652:	2b03      	cmp	r3, #3
 8009654:	d017      	beq.n	8009686 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	2203      	movs	r2, #3
 8009662:	409a      	lsls	r2, r3
 8009664:	0013      	movs	r3, r2
 8009666:	43da      	mvns	r2, r3
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	4013      	ands	r3, r2
 800966c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	409a      	lsls	r2, r3
 8009678:	0013      	movs	r3, r2
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	4313      	orrs	r3, r2
 800967e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2203      	movs	r2, #3
 800968c:	4013      	ands	r3, r2
 800968e:	2b02      	cmp	r3, #2
 8009690:	d123      	bne.n	80096da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	08da      	lsrs	r2, r3, #3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3208      	adds	r2, #8
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	58d3      	ldr	r3, [r2, r3]
 800969e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	2207      	movs	r2, #7
 80096a4:	4013      	ands	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	220f      	movs	r2, #15
 80096aa:	409a      	lsls	r2, r3
 80096ac:	0013      	movs	r3, r2
 80096ae:	43da      	mvns	r2, r3
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	4013      	ands	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	691a      	ldr	r2, [r3, #16]
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2107      	movs	r1, #7
 80096be:	400b      	ands	r3, r1
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	409a      	lsls	r2, r3
 80096c4:	0013      	movs	r3, r2
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	08da      	lsrs	r2, r3, #3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3208      	adds	r2, #8
 80096d4:	0092      	lsls	r2, r2, #2
 80096d6:	6939      	ldr	r1, [r7, #16]
 80096d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	2203      	movs	r2, #3
 80096e6:	409a      	lsls	r2, r3
 80096e8:	0013      	movs	r3, r2
 80096ea:	43da      	mvns	r2, r3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	4013      	ands	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2203      	movs	r2, #3
 80096f8:	401a      	ands	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	005b      	lsls	r3, r3, #1
 80096fe:	409a      	lsls	r2, r3
 8009700:	0013      	movs	r3, r2
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	4313      	orrs	r3, r2
 8009706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	23c0      	movs	r3, #192	@ 0xc0
 8009714:	029b      	lsls	r3, r3, #10
 8009716:	4013      	ands	r3, r2
 8009718:	d100      	bne.n	800971c <HAL_GPIO_Init+0x174>
 800971a:	e098      	b.n	800984e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800971c:	4a53      	ldr	r2, [pc, #332]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	089b      	lsrs	r3, r3, #2
 8009722:	3318      	adds	r3, #24
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	589b      	ldr	r3, [r3, r2]
 8009728:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2203      	movs	r2, #3
 800972e:	4013      	ands	r3, r2
 8009730:	00db      	lsls	r3, r3, #3
 8009732:	220f      	movs	r2, #15
 8009734:	409a      	lsls	r2, r3
 8009736:	0013      	movs	r3, r2
 8009738:	43da      	mvns	r2, r3
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	4013      	ands	r3, r2
 800973e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	23a0      	movs	r3, #160	@ 0xa0
 8009744:	05db      	lsls	r3, r3, #23
 8009746:	429a      	cmp	r2, r3
 8009748:	d019      	beq.n	800977e <HAL_GPIO_Init+0x1d6>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a48      	ldr	r2, [pc, #288]	@ (8009870 <HAL_GPIO_Init+0x2c8>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d013      	beq.n	800977a <HAL_GPIO_Init+0x1d2>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a47      	ldr	r2, [pc, #284]	@ (8009874 <HAL_GPIO_Init+0x2cc>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00d      	beq.n	8009776 <HAL_GPIO_Init+0x1ce>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a46      	ldr	r2, [pc, #280]	@ (8009878 <HAL_GPIO_Init+0x2d0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d007      	beq.n	8009772 <HAL_GPIO_Init+0x1ca>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a45      	ldr	r2, [pc, #276]	@ (800987c <HAL_GPIO_Init+0x2d4>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d101      	bne.n	800976e <HAL_GPIO_Init+0x1c6>
 800976a:	2304      	movs	r3, #4
 800976c:	e008      	b.n	8009780 <HAL_GPIO_Init+0x1d8>
 800976e:	2305      	movs	r3, #5
 8009770:	e006      	b.n	8009780 <HAL_GPIO_Init+0x1d8>
 8009772:	2303      	movs	r3, #3
 8009774:	e004      	b.n	8009780 <HAL_GPIO_Init+0x1d8>
 8009776:	2302      	movs	r3, #2
 8009778:	e002      	b.n	8009780 <HAL_GPIO_Init+0x1d8>
 800977a:	2301      	movs	r3, #1
 800977c:	e000      	b.n	8009780 <HAL_GPIO_Init+0x1d8>
 800977e:	2300      	movs	r3, #0
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	2103      	movs	r1, #3
 8009784:	400a      	ands	r2, r1
 8009786:	00d2      	lsls	r2, r2, #3
 8009788:	4093      	lsls	r3, r2
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8009790:	4936      	ldr	r1, [pc, #216]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	089b      	lsrs	r3, r3, #2
 8009796:	3318      	adds	r3, #24
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800979e:	4b33      	ldr	r3, [pc, #204]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	43da      	mvns	r2, r3
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	4013      	ands	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	2380      	movs	r3, #128	@ 0x80
 80097b4:	035b      	lsls	r3, r3, #13
 80097b6:	4013      	ands	r3, r2
 80097b8:	d003      	beq.n	80097c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4313      	orrs	r3, r2
 80097c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80097c2:	4b2a      	ldr	r3, [pc, #168]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80097c8:	4b28      	ldr	r3, [pc, #160]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	43da      	mvns	r2, r3
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	4013      	ands	r3, r2
 80097d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	2380      	movs	r3, #128	@ 0x80
 80097de:	039b      	lsls	r3, r3, #14
 80097e0:	4013      	ands	r3, r2
 80097e2:	d003      	beq.n	80097ec <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80097e4:	693a      	ldr	r2, [r7, #16]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80097ec:	4b1f      	ldr	r3, [pc, #124]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80097f2:	4a1e      	ldr	r2, [pc, #120]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 80097f4:	2384      	movs	r3, #132	@ 0x84
 80097f6:	58d3      	ldr	r3, [r2, r3]
 80097f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	43da      	mvns	r2, r3
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	4013      	ands	r3, r2
 8009802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	2380      	movs	r3, #128	@ 0x80
 800980a:	029b      	lsls	r3, r3, #10
 800980c:	4013      	ands	r3, r2
 800980e:	d003      	beq.n	8009818 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4313      	orrs	r3, r2
 8009816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009818:	4914      	ldr	r1, [pc, #80]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 800981a:	2284      	movs	r2, #132	@ 0x84
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009820:	4a12      	ldr	r2, [pc, #72]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 8009822:	2380      	movs	r3, #128	@ 0x80
 8009824:	58d3      	ldr	r3, [r2, r3]
 8009826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	43da      	mvns	r2, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	4013      	ands	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	685a      	ldr	r2, [r3, #4]
 8009836:	2380      	movs	r3, #128	@ 0x80
 8009838:	025b      	lsls	r3, r3, #9
 800983a:	4013      	ands	r3, r2
 800983c:	d003      	beq.n	8009846 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009846:	4909      	ldr	r1, [pc, #36]	@ (800986c <HAL_GPIO_Init+0x2c4>)
 8009848:	2280      	movs	r2, #128	@ 0x80
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	3301      	adds	r3, #1
 8009852:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	40da      	lsrs	r2, r3
 800985c:	1e13      	subs	r3, r2, #0
 800985e:	d000      	beq.n	8009862 <HAL_GPIO_Init+0x2ba>
 8009860:	e6aa      	b.n	80095b8 <HAL_GPIO_Init+0x10>
  }
}
 8009862:	46c0      	nop			@ (mov r8, r8)
 8009864:	46c0      	nop			@ (mov r8, r8)
 8009866:	46bd      	mov	sp, r7
 8009868:	b006      	add	sp, #24
 800986a:	bd80      	pop	{r7, pc}
 800986c:	40021800 	.word	0x40021800
 8009870:	50000400 	.word	0x50000400
 8009874:	50000800 	.word	0x50000800
 8009878:	50000c00 	.word	0x50000c00
 800987c:	50001000 	.word	0x50001000

08009880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	000a      	movs	r2, r1
 800988a:	1cbb      	adds	r3, r7, #2
 800988c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	1cba      	adds	r2, r7, #2
 8009894:	8812      	ldrh	r2, [r2, #0]
 8009896:	4013      	ands	r3, r2
 8009898:	d004      	beq.n	80098a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800989a:	230f      	movs	r3, #15
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	2201      	movs	r2, #1
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	e003      	b.n	80098ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80098a4:	230f      	movs	r3, #15
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80098ac:	230f      	movs	r3, #15
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	781b      	ldrb	r3, [r3, #0]
}
 80098b2:	0018      	movs	r0, r3
 80098b4:	46bd      	mov	sp, r7
 80098b6:	b004      	add	sp, #16
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	0008      	movs	r0, r1
 80098c4:	0011      	movs	r1, r2
 80098c6:	1cbb      	adds	r3, r7, #2
 80098c8:	1c02      	adds	r2, r0, #0
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	1c7b      	adds	r3, r7, #1
 80098ce:	1c0a      	adds	r2, r1, #0
 80098d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098d2:	1c7b      	adds	r3, r7, #1
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d004      	beq.n	80098e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80098da:	1cbb      	adds	r3, r7, #2
 80098dc:	881a      	ldrh	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80098e2:	e003      	b.n	80098ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80098e4:	1cbb      	adds	r3, r7, #2
 80098e6:	881a      	ldrh	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80098ec:	46c0      	nop			@ (mov r8, r8)
 80098ee:	46bd      	mov	sp, r7
 80098f0:	b002      	add	sp, #8
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	0002      	movs	r2, r0
 80098fc:	1dbb      	adds	r3, r7, #6
 80098fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8009900:	4b10      	ldr	r3, [pc, #64]	@ (8009944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	1dba      	adds	r2, r7, #6
 8009906:	8812      	ldrh	r2, [r2, #0]
 8009908:	4013      	ands	r3, r2
 800990a:	d008      	beq.n	800991e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800990c:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800990e:	1dba      	adds	r2, r7, #6
 8009910:	8812      	ldrh	r2, [r2, #0]
 8009912:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009914:	1dbb      	adds	r3, r7, #6
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	0018      	movs	r0, r3
 800991a:	f7fc f9fd 	bl	8005d18 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800991e:	4b09      	ldr	r3, [pc, #36]	@ (8009944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	1dba      	adds	r2, r7, #6
 8009924:	8812      	ldrh	r2, [r2, #0]
 8009926:	4013      	ands	r3, r2
 8009928:	d008      	beq.n	800993c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800992a:	4b06      	ldr	r3, [pc, #24]	@ (8009944 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800992c:	1dba      	adds	r2, r7, #6
 800992e:	8812      	ldrh	r2, [r2, #0]
 8009930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009932:	1dbb      	adds	r3, r7, #6
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	0018      	movs	r0, r3
 8009938:	f000 f806 	bl	8009948 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800993c:	46c0      	nop			@ (mov r8, r8)
 800993e:	46bd      	mov	sp, r7
 8009940:	b002      	add	sp, #8
 8009942:	bd80      	pop	{r7, pc}
 8009944:	40021800 	.word	0x40021800

08009948 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	0002      	movs	r2, r0
 8009950:	1dbb      	adds	r3, r7, #6
 8009952:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8009954:	46c0      	nop			@ (mov r8, r8)
 8009956:	46bd      	mov	sp, r7
 8009958:	b002      	add	sp, #8
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e08f      	b.n	8009a8e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2241      	movs	r2, #65	@ 0x41
 8009972:	5c9b      	ldrb	r3, [r3, r2]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d107      	bne.n	800998a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2240      	movs	r2, #64	@ 0x40
 800997e:	2100      	movs	r1, #0
 8009980:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	0018      	movs	r0, r3
 8009986:	f7fe fa3f 	bl	8007e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2241      	movs	r2, #65	@ 0x41
 800998e:	2124      	movs	r1, #36	@ 0x24
 8009990:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2101      	movs	r1, #1
 800999e:	438a      	bics	r2, r1
 80099a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	493b      	ldr	r1, [pc, #236]	@ (8009a98 <HAL_I2C_Init+0x13c>)
 80099ac:	400a      	ands	r2, r1
 80099ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689a      	ldr	r2, [r3, #8]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4938      	ldr	r1, [pc, #224]	@ (8009a9c <HAL_I2C_Init+0x140>)
 80099bc:	400a      	ands	r2, r1
 80099be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d108      	bne.n	80099da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2180      	movs	r1, #128	@ 0x80
 80099d2:	0209      	lsls	r1, r1, #8
 80099d4:	430a      	orrs	r2, r1
 80099d6:	609a      	str	r2, [r3, #8]
 80099d8:	e007      	b.n	80099ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	689a      	ldr	r2, [r3, #8]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2184      	movs	r1, #132	@ 0x84
 80099e4:	0209      	lsls	r1, r1, #8
 80099e6:	430a      	orrs	r2, r1
 80099e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d109      	bne.n	8009a06 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2180      	movs	r1, #128	@ 0x80
 80099fe:	0109      	lsls	r1, r1, #4
 8009a00:	430a      	orrs	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]
 8009a04:	e007      	b.n	8009a16 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4923      	ldr	r1, [pc, #140]	@ (8009aa0 <HAL_I2C_Init+0x144>)
 8009a12:	400a      	ands	r2, r1
 8009a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4920      	ldr	r1, [pc, #128]	@ (8009aa4 <HAL_I2C_Init+0x148>)
 8009a22:	430a      	orrs	r2, r1
 8009a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	491a      	ldr	r1, [pc, #104]	@ (8009a9c <HAL_I2C_Init+0x140>)
 8009a32:	400a      	ands	r2, r1
 8009a34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	691a      	ldr	r2, [r3, #16]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	430a      	orrs	r2, r1
 8009a4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	69d9      	ldr	r1, [r3, #28]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2241      	movs	r2, #65	@ 0x41
 8009a7a:	2120      	movs	r1, #32
 8009a7c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2242      	movs	r2, #66	@ 0x42
 8009a88:	2100      	movs	r1, #0
 8009a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	0018      	movs	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b002      	add	sp, #8
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	46c0      	nop			@ (mov r8, r8)
 8009a98:	f0ffffff 	.word	0xf0ffffff
 8009a9c:	ffff7fff 	.word	0xffff7fff
 8009aa0:	fffff7ff 	.word	0xfffff7ff
 8009aa4:	02008000 	.word	0x02008000

08009aa8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009aa8:	b590      	push	{r4, r7, lr}
 8009aaa:	b089      	sub	sp, #36	@ 0x24
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	0008      	movs	r0, r1
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	0019      	movs	r1, r3
 8009ab6:	230a      	movs	r3, #10
 8009ab8:	18fb      	adds	r3, r7, r3
 8009aba:	1c02      	adds	r2, r0, #0
 8009abc:	801a      	strh	r2, [r3, #0]
 8009abe:	2308      	movs	r3, #8
 8009ac0:	18fb      	adds	r3, r7, r3
 8009ac2:	1c0a      	adds	r2, r1, #0
 8009ac4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2241      	movs	r2, #65	@ 0x41
 8009aca:	5c9b      	ldrb	r3, [r3, r2]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d000      	beq.n	8009ad4 <HAL_I2C_Master_Transmit+0x2c>
 8009ad2:	e10a      	b.n	8009cea <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2240      	movs	r2, #64	@ 0x40
 8009ad8:	5c9b      	ldrb	r3, [r3, r2]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_I2C_Master_Transmit+0x3a>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e104      	b.n	8009cec <HAL_I2C_Master_Transmit+0x244>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2240      	movs	r2, #64	@ 0x40
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009aea:	f7ff fa89 	bl	8009000 <HAL_GetTick>
 8009aee:	0003      	movs	r3, r0
 8009af0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009af2:	2380      	movs	r3, #128	@ 0x80
 8009af4:	0219      	lsls	r1, r3, #8
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	2319      	movs	r3, #25
 8009afe:	2201      	movs	r2, #1
 8009b00:	f000 fa26 	bl	8009f50 <I2C_WaitOnFlagUntilTimeout>
 8009b04:	1e03      	subs	r3, r0, #0
 8009b06:	d001      	beq.n	8009b0c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e0ef      	b.n	8009cec <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2241      	movs	r2, #65	@ 0x41
 8009b10:	2121      	movs	r1, #33	@ 0x21
 8009b12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2242      	movs	r2, #66	@ 0x42
 8009b18:	2110      	movs	r1, #16
 8009b1a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2208      	movs	r2, #8
 8009b2c:	18ba      	adds	r2, r7, r2
 8009b2e:	8812      	ldrh	r2, [r2, #0]
 8009b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	2bff      	cmp	r3, #255	@ 0xff
 8009b40:	d906      	bls.n	8009b50 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	22ff      	movs	r2, #255	@ 0xff
 8009b46:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009b48:	2380      	movs	r3, #128	@ 0x80
 8009b4a:	045b      	lsls	r3, r3, #17
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	e007      	b.n	8009b60 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009b5a:	2380      	movs	r3, #128	@ 0x80
 8009b5c:	049b      	lsls	r3, r3, #18
 8009b5e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d027      	beq.n	8009bb8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6c:	781a      	ldrb	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b90:	3b01      	subs	r3, #1
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	b2da      	uxtb	r2, r3
 8009ba2:	697c      	ldr	r4, [r7, #20]
 8009ba4:	230a      	movs	r3, #10
 8009ba6:	18fb      	adds	r3, r7, r3
 8009ba8:	8819      	ldrh	r1, [r3, #0]
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	4b51      	ldr	r3, [pc, #324]	@ (8009cf4 <HAL_I2C_Master_Transmit+0x24c>)
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	0023      	movs	r3, r4
 8009bb2:	f000 fc45 	bl	800a440 <I2C_TransferConfig>
 8009bb6:	e06f      	b.n	8009c98 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	697c      	ldr	r4, [r7, #20]
 8009bc0:	230a      	movs	r3, #10
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	8819      	ldrh	r1, [r3, #0]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8009cf4 <HAL_I2C_Master_Transmit+0x24c>)
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	0023      	movs	r3, r4
 8009bce:	f000 fc37 	bl	800a440 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009bd2:	e061      	b.n	8009c98 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	0018      	movs	r0, r3
 8009bdc:	f000 fa10 	bl	800a000 <I2C_WaitOnTXISFlagUntilTimeout>
 8009be0:	1e03      	subs	r3, r0, #0
 8009be2:	d001      	beq.n	8009be8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e081      	b.n	8009cec <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bec:	781a      	ldrb	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	3b01      	subs	r3, #1
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c10:	3b01      	subs	r3, #1
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d03a      	beq.n	8009c98 <HAL_I2C_Master_Transmit+0x1f0>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d136      	bne.n	8009c98 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	0013      	movs	r3, r2
 8009c34:	2200      	movs	r2, #0
 8009c36:	2180      	movs	r1, #128	@ 0x80
 8009c38:	f000 f98a 	bl	8009f50 <I2C_WaitOnFlagUntilTimeout>
 8009c3c:	1e03      	subs	r3, r0, #0
 8009c3e:	d001      	beq.n	8009c44 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e053      	b.n	8009cec <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	2bff      	cmp	r3, #255	@ 0xff
 8009c4c:	d911      	bls.n	8009c72 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	22ff      	movs	r2, #255	@ 0xff
 8009c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	2380      	movs	r3, #128	@ 0x80
 8009c5c:	045c      	lsls	r4, r3, #17
 8009c5e:	230a      	movs	r3, #10
 8009c60:	18fb      	adds	r3, r7, r3
 8009c62:	8819      	ldrh	r1, [r3, #0]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	2300      	movs	r3, #0
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	0023      	movs	r3, r4
 8009c6c:	f000 fbe8 	bl	800a440 <I2C_TransferConfig>
 8009c70:	e012      	b.n	8009c98 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	2380      	movs	r3, #128	@ 0x80
 8009c84:	049c      	lsls	r4, r3, #18
 8009c86:	230a      	movs	r3, #10
 8009c88:	18fb      	adds	r3, r7, r3
 8009c8a:	8819      	ldrh	r1, [r3, #0]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	0023      	movs	r3, r4
 8009c94:	f000 fbd4 	bl	800a440 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d198      	bne.n	8009bd4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f000 f9ef 	bl	800a08c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009cae:	1e03      	subs	r3, r0, #0
 8009cb0:	d001      	beq.n	8009cb6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e01a      	b.n	8009cec <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2220      	movs	r2, #32
 8009cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	490b      	ldr	r1, [pc, #44]	@ (8009cf8 <HAL_I2C_Master_Transmit+0x250>)
 8009cca:	400a      	ands	r2, r1
 8009ccc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2241      	movs	r2, #65	@ 0x41
 8009cd2:	2120      	movs	r1, #32
 8009cd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2242      	movs	r2, #66	@ 0x42
 8009cda:	2100      	movs	r1, #0
 8009cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2240      	movs	r2, #64	@ 0x40
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e000      	b.n	8009cec <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8009cea:	2302      	movs	r3, #2
  }
}
 8009cec:	0018      	movs	r0, r3
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	b007      	add	sp, #28
 8009cf2:	bd90      	pop	{r4, r7, pc}
 8009cf4:	80002000 	.word	0x80002000
 8009cf8:	fe00e800 	.word	0xfe00e800

08009cfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009cfc:	b590      	push	{r4, r7, lr}
 8009cfe:	b089      	sub	sp, #36	@ 0x24
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	0008      	movs	r0, r1
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	0019      	movs	r1, r3
 8009d0a:	230a      	movs	r3, #10
 8009d0c:	18fb      	adds	r3, r7, r3
 8009d0e:	1c02      	adds	r2, r0, #0
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	2308      	movs	r3, #8
 8009d14:	18fb      	adds	r3, r7, r3
 8009d16:	1c0a      	adds	r2, r1, #0
 8009d18:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2241      	movs	r2, #65	@ 0x41
 8009d1e:	5c9b      	ldrb	r3, [r3, r2]
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d000      	beq.n	8009d28 <HAL_I2C_Master_Receive+0x2c>
 8009d26:	e0e8      	b.n	8009efa <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2240      	movs	r2, #64	@ 0x40
 8009d2c:	5c9b      	ldrb	r3, [r3, r2]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_I2C_Master_Receive+0x3a>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e0e2      	b.n	8009efc <HAL_I2C_Master_Receive+0x200>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2240      	movs	r2, #64	@ 0x40
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009d3e:	f7ff f95f 	bl	8009000 <HAL_GetTick>
 8009d42:	0003      	movs	r3, r0
 8009d44:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009d46:	2380      	movs	r3, #128	@ 0x80
 8009d48:	0219      	lsls	r1, r3, #8
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	2319      	movs	r3, #25
 8009d52:	2201      	movs	r2, #1
 8009d54:	f000 f8fc 	bl	8009f50 <I2C_WaitOnFlagUntilTimeout>
 8009d58:	1e03      	subs	r3, r0, #0
 8009d5a:	d001      	beq.n	8009d60 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0cd      	b.n	8009efc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2241      	movs	r2, #65	@ 0x41
 8009d64:	2122      	movs	r1, #34	@ 0x22
 8009d66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2242      	movs	r2, #66	@ 0x42
 8009d6c:	2110      	movs	r1, #16
 8009d6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2208      	movs	r2, #8
 8009d80:	18ba      	adds	r2, r7, r2
 8009d82:	8812      	ldrh	r2, [r2, #0]
 8009d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2bff      	cmp	r3, #255	@ 0xff
 8009d94:	d911      	bls.n	8009dba <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	22ff      	movs	r2, #255	@ 0xff
 8009d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	2380      	movs	r3, #128	@ 0x80
 8009da4:	045c      	lsls	r4, r3, #17
 8009da6:	230a      	movs	r3, #10
 8009da8:	18fb      	adds	r3, r7, r3
 8009daa:	8819      	ldrh	r1, [r3, #0]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	4b55      	ldr	r3, [pc, #340]	@ (8009f04 <HAL_I2C_Master_Receive+0x208>)
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	0023      	movs	r3, r4
 8009db4:	f000 fb44 	bl	800a440 <I2C_TransferConfig>
 8009db8:	e076      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	2380      	movs	r3, #128	@ 0x80
 8009dcc:	049c      	lsls	r4, r3, #18
 8009dce:	230a      	movs	r3, #10
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	8819      	ldrh	r1, [r3, #0]
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8009f04 <HAL_I2C_Master_Receive+0x208>)
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	0023      	movs	r3, r4
 8009ddc:	f000 fb30 	bl	800a440 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009de0:	e062      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	0018      	movs	r0, r3
 8009dea:	f000 f993 	bl	800a114 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009dee:	1e03      	subs	r3, r0, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e082      	b.n	8009efc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3b01      	subs	r3, #1
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d03a      	beq.n	8009ea8 <HAL_I2C_Master_Receive+0x1ac>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d136      	bne.n	8009ea8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	0013      	movs	r3, r2
 8009e44:	2200      	movs	r2, #0
 8009e46:	2180      	movs	r1, #128	@ 0x80
 8009e48:	f000 f882 	bl	8009f50 <I2C_WaitOnFlagUntilTimeout>
 8009e4c:	1e03      	subs	r3, r0, #0
 8009e4e:	d001      	beq.n	8009e54 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e053      	b.n	8009efc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	2bff      	cmp	r3, #255	@ 0xff
 8009e5c:	d911      	bls.n	8009e82 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	22ff      	movs	r2, #255	@ 0xff
 8009e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	2380      	movs	r3, #128	@ 0x80
 8009e6c:	045c      	lsls	r4, r3, #17
 8009e6e:	230a      	movs	r3, #10
 8009e70:	18fb      	adds	r3, r7, r3
 8009e72:	8819      	ldrh	r1, [r3, #0]
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	2300      	movs	r3, #0
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	0023      	movs	r3, r4
 8009e7c:	f000 fae0 	bl	800a440 <I2C_TransferConfig>
 8009e80:	e012      	b.n	8009ea8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	2380      	movs	r3, #128	@ 0x80
 8009e94:	049c      	lsls	r4, r3, #18
 8009e96:	230a      	movs	r3, #10
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	8819      	ldrh	r1, [r3, #0]
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	0023      	movs	r3, r4
 8009ea4:	f000 facc 	bl	800a440 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d197      	bne.n	8009de2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	0018      	movs	r0, r3
 8009eba:	f000 f8e7 	bl	800a08c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ebe:	1e03      	subs	r3, r0, #0
 8009ec0:	d001      	beq.n	8009ec6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e01a      	b.n	8009efc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	490b      	ldr	r1, [pc, #44]	@ (8009f08 <HAL_I2C_Master_Receive+0x20c>)
 8009eda:	400a      	ands	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2241      	movs	r2, #65	@ 0x41
 8009ee2:	2120      	movs	r1, #32
 8009ee4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2242      	movs	r2, #66	@ 0x42
 8009eea:	2100      	movs	r1, #0
 8009eec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2240      	movs	r2, #64	@ 0x40
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e000      	b.n	8009efc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8009efa:	2302      	movs	r3, #2
  }
}
 8009efc:	0018      	movs	r0, r3
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b007      	add	sp, #28
 8009f02:	bd90      	pop	{r4, r7, pc}
 8009f04:	80002400 	.word	0x80002400
 8009f08:	fe00e800 	.word	0xfe00e800

08009f0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d103      	bne.n	8009f2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2200      	movs	r2, #0
 8009f28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	2201      	movs	r2, #1
 8009f32:	4013      	ands	r3, r2
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d007      	beq.n	8009f48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2101      	movs	r1, #1
 8009f44:	430a      	orrs	r2, r1
 8009f46:	619a      	str	r2, [r3, #24]
  }
}
 8009f48:	46c0      	nop			@ (mov r8, r8)
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	b002      	add	sp, #8
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	1dfb      	adds	r3, r7, #7
 8009f5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f60:	e03a      	b.n	8009fd8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	0018      	movs	r0, r3
 8009f6a:	f000 f971 	bl	800a250 <I2C_IsErrorOccurred>
 8009f6e:	1e03      	subs	r3, r0, #0
 8009f70:	d001      	beq.n	8009f76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e040      	b.n	8009ff8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	d02d      	beq.n	8009fd8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f7c:	f7ff f840 	bl	8009000 <HAL_GetTick>
 8009f80:	0002      	movs	r2, r0
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d302      	bcc.n	8009f92 <I2C_WaitOnFlagUntilTimeout+0x42>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d122      	bne.n	8009fd8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	425a      	negs	r2, r3
 8009fa2:	4153      	adcs	r3, r2
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	001a      	movs	r2, r3
 8009fa8:	1dfb      	adds	r3, r7, #7
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d113      	bne.n	8009fd8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb4:	2220      	movs	r2, #32
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2241      	movs	r2, #65	@ 0x41
 8009fc0:	2120      	movs	r1, #32
 8009fc2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2242      	movs	r2, #66	@ 0x42
 8009fc8:	2100      	movs	r1, #0
 8009fca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2240      	movs	r2, #64	@ 0x40
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e00f      	b.n	8009ff8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	425a      	negs	r2, r3
 8009fe8:	4153      	adcs	r3, r2
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	001a      	movs	r2, r3
 8009fee:	1dfb      	adds	r3, r7, #7
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d0b5      	beq.n	8009f62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	b004      	add	sp, #16
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a00c:	e032      	b.n	800a074 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	68b9      	ldr	r1, [r7, #8]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	0018      	movs	r0, r3
 800a016:	f000 f91b 	bl	800a250 <I2C_IsErrorOccurred>
 800a01a:	1e03      	subs	r3, r0, #0
 800a01c:	d001      	beq.n	800a022 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e030      	b.n	800a084 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	3301      	adds	r3, #1
 800a026:	d025      	beq.n	800a074 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a028:	f7fe ffea 	bl	8009000 <HAL_GetTick>
 800a02c:	0002      	movs	r2, r0
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	d302      	bcc.n	800a03e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d11a      	bne.n	800a074 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	2202      	movs	r2, #2
 800a046:	4013      	ands	r3, r2
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d013      	beq.n	800a074 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a050:	2220      	movs	r2, #32
 800a052:	431a      	orrs	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2241      	movs	r2, #65	@ 0x41
 800a05c:	2120      	movs	r1, #32
 800a05e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2242      	movs	r2, #66	@ 0x42
 800a064:	2100      	movs	r1, #0
 800a066:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2240      	movs	r2, #64	@ 0x40
 800a06c:	2100      	movs	r1, #0
 800a06e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e007      	b.n	800a084 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	2202      	movs	r2, #2
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d1c5      	bne.n	800a00e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	0018      	movs	r0, r3
 800a086:	46bd      	mov	sp, r7
 800a088:	b004      	add	sp, #16
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a098:	e02f      	b.n	800a0fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	f000 f8d5 	bl	800a250 <I2C_IsErrorOccurred>
 800a0a6:	1e03      	subs	r3, r0, #0
 800a0a8:	d001      	beq.n	800a0ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e02d      	b.n	800a10a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ae:	f7fe ffa7 	bl	8009000 <HAL_GetTick>
 800a0b2:	0002      	movs	r2, r0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d11a      	bne.n	800a0fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	2b20      	cmp	r3, #32
 800a0d0:	d013      	beq.n	800a0fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	431a      	orrs	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2241      	movs	r2, #65	@ 0x41
 800a0e2:	2120      	movs	r1, #32
 800a0e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2242      	movs	r2, #66	@ 0x42
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2240      	movs	r2, #64	@ 0x40
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e007      	b.n	800a10a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2220      	movs	r2, #32
 800a102:	4013      	ands	r3, r2
 800a104:	2b20      	cmp	r3, #32
 800a106:	d1c8      	bne.n	800a09a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	0018      	movs	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b004      	add	sp, #16
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a120:	2317      	movs	r3, #23
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	2200      	movs	r2, #0
 800a126:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a128:	e07b      	b.n	800a222 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	68b9      	ldr	r1, [r7, #8]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	0018      	movs	r0, r3
 800a132:	f000 f88d 	bl	800a250 <I2C_IsErrorOccurred>
 800a136:	1e03      	subs	r3, r0, #0
 800a138:	d003      	beq.n	800a142 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800a13a:	2317      	movs	r3, #23
 800a13c:	18fb      	adds	r3, r7, r3
 800a13e:	2201      	movs	r2, #1
 800a140:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	699b      	ldr	r3, [r3, #24]
 800a148:	2220      	movs	r2, #32
 800a14a:	4013      	ands	r3, r2
 800a14c:	2b20      	cmp	r3, #32
 800a14e:	d140      	bne.n	800a1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800a150:	2117      	movs	r1, #23
 800a152:	187b      	adds	r3, r7, r1
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d13b      	bne.n	800a1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	2204      	movs	r2, #4
 800a162:	4013      	ands	r3, r2
 800a164:	2b04      	cmp	r3, #4
 800a166:	d106      	bne.n	800a176 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a170:	187b      	adds	r3, r7, r1
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	2210      	movs	r2, #16
 800a17e:	4013      	ands	r3, r2
 800a180:	2b10      	cmp	r3, #16
 800a182:	d123      	bne.n	800a1cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2210      	movs	r2, #16
 800a18a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2204      	movs	r2, #4
 800a190:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2220      	movs	r2, #32
 800a198:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4929      	ldr	r1, [pc, #164]	@ (800a24c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800a1a6:	400a      	ands	r2, r1
 800a1a8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2241      	movs	r2, #65	@ 0x41
 800a1ae:	2120      	movs	r1, #32
 800a1b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2242      	movs	r2, #66	@ 0x42
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2240      	movs	r2, #64	@ 0x40
 800a1be:	2100      	movs	r1, #0
 800a1c0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800a1c2:	2317      	movs	r3, #23
 800a1c4:	18fb      	adds	r3, r7, r3
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	e002      	b.n	800a1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a1d2:	f7fe ff15 	bl	8009000 <HAL_GetTick>
 800a1d6:	0002      	movs	r2, r0
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d302      	bcc.n	800a1e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d11c      	bne.n	800a222 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800a1e8:	2017      	movs	r0, #23
 800a1ea:	183b      	adds	r3, r7, r0
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d117      	bne.n	800a222 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	2204      	movs	r2, #4
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d010      	beq.n	800a222 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a204:	2220      	movs	r2, #32
 800a206:	431a      	orrs	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2241      	movs	r2, #65	@ 0x41
 800a210:	2120      	movs	r1, #32
 800a212:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2240      	movs	r2, #64	@ 0x40
 800a218:	2100      	movs	r1, #0
 800a21a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800a21c:	183b      	adds	r3, r7, r0
 800a21e:	2201      	movs	r2, #1
 800a220:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	699b      	ldr	r3, [r3, #24]
 800a228:	2204      	movs	r2, #4
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d005      	beq.n	800a23c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800a230:	2317      	movs	r3, #23
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d100      	bne.n	800a23c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800a23a:	e776      	b.n	800a12a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800a23c:	2317      	movs	r3, #23
 800a23e:	18fb      	adds	r3, r7, r3
 800a240:	781b      	ldrb	r3, [r3, #0]
}
 800a242:	0018      	movs	r0, r3
 800a244:	46bd      	mov	sp, r7
 800a246:	b006      	add	sp, #24
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	46c0      	nop			@ (mov r8, r8)
 800a24c:	fe00e800 	.word	0xfe00e800

0800a250 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	@ 0x28
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a25c:	2327      	movs	r3, #39	@ 0x27
 800a25e:	18fb      	adds	r3, r7, r3
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2210      	movs	r2, #16
 800a278:	4013      	ands	r3, r2
 800a27a:	d100      	bne.n	800a27e <I2C_IsErrorOccurred+0x2e>
 800a27c:	e079      	b.n	800a372 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2210      	movs	r2, #16
 800a284:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a286:	e057      	b.n	800a338 <I2C_IsErrorOccurred+0xe8>
 800a288:	2227      	movs	r2, #39	@ 0x27
 800a28a:	18bb      	adds	r3, r7, r2
 800a28c:	18ba      	adds	r2, r7, r2
 800a28e:	7812      	ldrb	r2, [r2, #0]
 800a290:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	3301      	adds	r3, #1
 800a296:	d04f      	beq.n	800a338 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a298:	f7fe feb2 	bl	8009000 <HAL_GetTick>
 800a29c:	0002      	movs	r2, r0
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d302      	bcc.n	800a2ae <I2C_IsErrorOccurred+0x5e>
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d144      	bne.n	800a338 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	2380      	movs	r3, #128	@ 0x80
 800a2b6:	01db      	lsls	r3, r3, #7
 800a2b8:	4013      	ands	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a2bc:	2013      	movs	r0, #19
 800a2be:	183b      	adds	r3, r7, r0
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	2142      	movs	r1, #66	@ 0x42
 800a2c4:	5c52      	ldrb	r2, [r2, r1]
 800a2c6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699a      	ldr	r2, [r3, #24]
 800a2ce:	2380      	movs	r3, #128	@ 0x80
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	401a      	ands	r2, r3
 800a2d4:	2380      	movs	r3, #128	@ 0x80
 800a2d6:	021b      	lsls	r3, r3, #8
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d126      	bne.n	800a32a <I2C_IsErrorOccurred+0xda>
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	2380      	movs	r3, #128	@ 0x80
 800a2e0:	01db      	lsls	r3, r3, #7
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d021      	beq.n	800a32a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800a2e6:	183b      	adds	r3, r7, r0
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d01d      	beq.n	800a32a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2180      	movs	r1, #128	@ 0x80
 800a2fa:	01c9      	lsls	r1, r1, #7
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a300:	f7fe fe7e 	bl	8009000 <HAL_GetTick>
 800a304:	0003      	movs	r3, r0
 800a306:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a308:	e00f      	b.n	800a32a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a30a:	f7fe fe79 	bl	8009000 <HAL_GetTick>
 800a30e:	0002      	movs	r2, r0
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	2b19      	cmp	r3, #25
 800a316:	d908      	bls.n	800a32a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	2220      	movs	r2, #32
 800a31c:	4313      	orrs	r3, r2
 800a31e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a320:	2327      	movs	r3, #39	@ 0x27
 800a322:	18fb      	adds	r3, r7, r3
 800a324:	2201      	movs	r2, #1
 800a326:	701a      	strb	r2, [r3, #0]

              break;
 800a328:	e006      	b.n	800a338 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	2220      	movs	r2, #32
 800a332:	4013      	ands	r3, r2
 800a334:	2b20      	cmp	r3, #32
 800a336:	d1e8      	bne.n	800a30a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	2220      	movs	r2, #32
 800a340:	4013      	ands	r3, r2
 800a342:	2b20      	cmp	r3, #32
 800a344:	d004      	beq.n	800a350 <I2C_IsErrorOccurred+0x100>
 800a346:	2327      	movs	r3, #39	@ 0x27
 800a348:	18fb      	adds	r3, r7, r3
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d09b      	beq.n	800a288 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a350:	2327      	movs	r3, #39	@ 0x27
 800a352:	18fb      	adds	r3, r7, r3
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2220      	movs	r2, #32
 800a360:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	2204      	movs	r2, #4
 800a366:	4313      	orrs	r3, r2
 800a368:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a36a:	2327      	movs	r3, #39	@ 0x27
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	2201      	movs	r2, #1
 800a370:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	2380      	movs	r3, #128	@ 0x80
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	4013      	ands	r3, r2
 800a382:	d00c      	beq.n	800a39e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	2201      	movs	r2, #1
 800a388:	4313      	orrs	r3, r2
 800a38a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2280      	movs	r2, #128	@ 0x80
 800a392:	0052      	lsls	r2, r2, #1
 800a394:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a396:	2327      	movs	r3, #39	@ 0x27
 800a398:	18fb      	adds	r3, r7, r3
 800a39a:	2201      	movs	r2, #1
 800a39c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	2380      	movs	r3, #128	@ 0x80
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d00c      	beq.n	800a3c2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	2208      	movs	r2, #8
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2280      	movs	r2, #128	@ 0x80
 800a3b6:	00d2      	lsls	r2, r2, #3
 800a3b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a3ba:	2327      	movs	r3, #39	@ 0x27
 800a3bc:	18fb      	adds	r3, r7, r3
 800a3be:	2201      	movs	r2, #1
 800a3c0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	2380      	movs	r3, #128	@ 0x80
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	d00c      	beq.n	800a3e6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2280      	movs	r2, #128	@ 0x80
 800a3da:	0092      	lsls	r2, r2, #2
 800a3dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a3de:	2327      	movs	r3, #39	@ 0x27
 800a3e0:	18fb      	adds	r3, r7, r3
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800a3e6:	2327      	movs	r3, #39	@ 0x27
 800a3e8:	18fb      	adds	r3, r7, r3
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d01d      	beq.n	800a42c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f7ff fd8a 	bl	8009f0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	490e      	ldr	r1, [pc, #56]	@ (800a43c <I2C_IsErrorOccurred+0x1ec>)
 800a404:	400a      	ands	r2, r1
 800a406:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	431a      	orrs	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2241      	movs	r2, #65	@ 0x41
 800a418:	2120      	movs	r1, #32
 800a41a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2242      	movs	r2, #66	@ 0x42
 800a420:	2100      	movs	r1, #0
 800a422:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2240      	movs	r2, #64	@ 0x40
 800a428:	2100      	movs	r1, #0
 800a42a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a42c:	2327      	movs	r3, #39	@ 0x27
 800a42e:	18fb      	adds	r3, r7, r3
 800a430:	781b      	ldrb	r3, [r3, #0]
}
 800a432:	0018      	movs	r0, r3
 800a434:	46bd      	mov	sp, r7
 800a436:	b00a      	add	sp, #40	@ 0x28
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	46c0      	nop			@ (mov r8, r8)
 800a43c:	fe00e800 	.word	0xfe00e800

0800a440 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a440:	b590      	push	{r4, r7, lr}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	0008      	movs	r0, r1
 800a44a:	0011      	movs	r1, r2
 800a44c:	607b      	str	r3, [r7, #4]
 800a44e:	240a      	movs	r4, #10
 800a450:	193b      	adds	r3, r7, r4
 800a452:	1c02      	adds	r2, r0, #0
 800a454:	801a      	strh	r2, [r3, #0]
 800a456:	2009      	movs	r0, #9
 800a458:	183b      	adds	r3, r7, r0
 800a45a:	1c0a      	adds	r2, r1, #0
 800a45c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a45e:	193b      	adds	r3, r7, r4
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	059b      	lsls	r3, r3, #22
 800a464:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a466:	183b      	adds	r3, r7, r0
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	0419      	lsls	r1, r3, #16
 800a46c:	23ff      	movs	r3, #255	@ 0xff
 800a46e:	041b      	lsls	r3, r3, #16
 800a470:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a472:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	4313      	orrs	r3, r2
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	085b      	lsrs	r3, r3, #1
 800a480:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a48a:	0d51      	lsrs	r1, r2, #21
 800a48c:	2280      	movs	r2, #128	@ 0x80
 800a48e:	00d2      	lsls	r2, r2, #3
 800a490:	400a      	ands	r2, r1
 800a492:	4907      	ldr	r1, [pc, #28]	@ (800a4b0 <I2C_TransferConfig+0x70>)
 800a494:	430a      	orrs	r2, r1
 800a496:	43d2      	mvns	r2, r2
 800a498:	401a      	ands	r2, r3
 800a49a:	0011      	movs	r1, r2
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a4a6:	46c0      	nop			@ (mov r8, r8)
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	b007      	add	sp, #28
 800a4ac:	bd90      	pop	{r4, r7, pc}
 800a4ae:	46c0      	nop			@ (mov r8, r8)
 800a4b0:	03ff63ff 	.word	0x03ff63ff

0800a4b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2241      	movs	r2, #65	@ 0x41
 800a4c2:	5c9b      	ldrb	r3, [r3, r2]
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b20      	cmp	r3, #32
 800a4c8:	d138      	bne.n	800a53c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2240      	movs	r2, #64	@ 0x40
 800a4ce:	5c9b      	ldrb	r3, [r3, r2]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d101      	bne.n	800a4d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e032      	b.n	800a53e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2240      	movs	r2, #64	@ 0x40
 800a4dc:	2101      	movs	r1, #1
 800a4de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2241      	movs	r2, #65	@ 0x41
 800a4e4:	2124      	movs	r1, #36	@ 0x24
 800a4e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	438a      	bics	r2, r1
 800a4f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4911      	ldr	r1, [pc, #68]	@ (800a548 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800a504:	400a      	ands	r2, r1
 800a506:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6819      	ldr	r1, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2101      	movs	r1, #1
 800a524:	430a      	orrs	r2, r1
 800a526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2241      	movs	r2, #65	@ 0x41
 800a52c:	2120      	movs	r1, #32
 800a52e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2240      	movs	r2, #64	@ 0x40
 800a534:	2100      	movs	r1, #0
 800a536:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	e000      	b.n	800a53e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a53c:	2302      	movs	r3, #2
  }
}
 800a53e:	0018      	movs	r0, r3
 800a540:	46bd      	mov	sp, r7
 800a542:	b002      	add	sp, #8
 800a544:	bd80      	pop	{r7, pc}
 800a546:	46c0      	nop			@ (mov r8, r8)
 800a548:	ffffefff 	.word	0xffffefff

0800a54c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2241      	movs	r2, #65	@ 0x41
 800a55a:	5c9b      	ldrb	r3, [r3, r2]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b20      	cmp	r3, #32
 800a560:	d139      	bne.n	800a5d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2240      	movs	r2, #64	@ 0x40
 800a566:	5c9b      	ldrb	r3, [r3, r2]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a56c:	2302      	movs	r3, #2
 800a56e:	e033      	b.n	800a5d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2240      	movs	r2, #64	@ 0x40
 800a574:	2101      	movs	r1, #1
 800a576:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2241      	movs	r2, #65	@ 0x41
 800a57c:	2124      	movs	r1, #36	@ 0x24
 800a57e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2101      	movs	r1, #1
 800a58c:	438a      	bics	r2, r1
 800a58e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4a11      	ldr	r2, [pc, #68]	@ (800a5e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800a59c:	4013      	ands	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	021b      	lsls	r3, r3, #8
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2101      	movs	r1, #1
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2241      	movs	r2, #65	@ 0x41
 800a5c6:	2120      	movs	r1, #32
 800a5c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2240      	movs	r2, #64	@ 0x40
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e000      	b.n	800a5d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a5d6:	2302      	movs	r3, #2
  }
}
 800a5d8:	0018      	movs	r0, r3
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	b004      	add	sp, #16
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	fffff0ff 	.word	0xfffff0ff

0800a5e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a5ec:	4b19      	ldr	r3, [pc, #100]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a19      	ldr	r2, [pc, #100]	@ (800a658 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	0019      	movs	r1, r3
 800a5f6:	4b17      	ldr	r3, [pc, #92]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	2380      	movs	r3, #128	@ 0x80
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	429a      	cmp	r2, r3
 800a606:	d11f      	bne.n	800a648 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a608:	4b14      	ldr	r3, [pc, #80]	@ (800a65c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	0013      	movs	r3, r2
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	189b      	adds	r3, r3, r2
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	4912      	ldr	r1, [pc, #72]	@ (800a660 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a616:	0018      	movs	r0, r3
 800a618:	f7f5 fd9c 	bl	8000154 <__udivsi3>
 800a61c:	0003      	movs	r3, r0
 800a61e:	3301      	adds	r3, #1
 800a620:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a622:	e008      	b.n	800a636 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	e001      	b.n	800a636 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e009      	b.n	800a64a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a636:	4b07      	ldr	r3, [pc, #28]	@ (800a654 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a638:	695a      	ldr	r2, [r3, #20]
 800a63a:	2380      	movs	r3, #128	@ 0x80
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	401a      	ands	r2, r3
 800a640:	2380      	movs	r3, #128	@ 0x80
 800a642:	00db      	lsls	r3, r3, #3
 800a644:	429a      	cmp	r2, r3
 800a646:	d0ed      	beq.n	800a624 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	0018      	movs	r0, r3
 800a64c:	46bd      	mov	sp, r7
 800a64e:	b004      	add	sp, #16
 800a650:	bd80      	pop	{r7, pc}
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	40007000 	.word	0x40007000
 800a658:	fffff9ff 	.word	0xfffff9ff
 800a65c:	20000004 	.word	0x20000004
 800a660:	000f4240 	.word	0x000f4240

0800a664 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a668:	4b03      	ldr	r3, [pc, #12]	@ (800a678 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a66a:	689a      	ldr	r2, [r3, #8]
 800a66c:	23e0      	movs	r3, #224	@ 0xe0
 800a66e:	01db      	lsls	r3, r3, #7
 800a670:	4013      	ands	r3, r2
}
 800a672:	0018      	movs	r0, r3
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	40021000 	.word	0x40021000

0800a67c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	f000 fb50 	bl	800ad30 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2201      	movs	r2, #1
 800a696:	4013      	ands	r3, r2
 800a698:	d100      	bne.n	800a69c <HAL_RCC_OscConfig+0x20>
 800a69a:	e07c      	b.n	800a796 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a69c:	4bc3      	ldr	r3, [pc, #780]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	2238      	movs	r2, #56	@ 0x38
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a6a6:	4bc1      	ldr	r3, [pc, #772]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	2203      	movs	r2, #3
 800a6ac:	4013      	ands	r3, r2
 800a6ae:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	2b10      	cmp	r3, #16
 800a6b4:	d102      	bne.n	800a6bc <HAL_RCC_OscConfig+0x40>
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d002      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d10b      	bne.n	800a6da <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6c2:	4bba      	ldr	r3, [pc, #744]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	2380      	movs	r3, #128	@ 0x80
 800a6c8:	029b      	lsls	r3, r3, #10
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	d062      	beq.n	800a794 <HAL_RCC_OscConfig+0x118>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d15e      	bne.n	800a794 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e32a      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	2380      	movs	r3, #128	@ 0x80
 800a6e0:	025b      	lsls	r3, r3, #9
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d107      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x7a>
 800a6e6:	4bb1      	ldr	r3, [pc, #708]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	4bb0      	ldr	r3, [pc, #704]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a6ec:	2180      	movs	r1, #128	@ 0x80
 800a6ee:	0249      	lsls	r1, r1, #9
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e020      	b.n	800a738 <HAL_RCC_OscConfig+0xbc>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	23a0      	movs	r3, #160	@ 0xa0
 800a6fc:	02db      	lsls	r3, r3, #11
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d10e      	bne.n	800a720 <HAL_RCC_OscConfig+0xa4>
 800a702:	4baa      	ldr	r3, [pc, #680]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	4ba9      	ldr	r3, [pc, #676]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a708:	2180      	movs	r1, #128	@ 0x80
 800a70a:	02c9      	lsls	r1, r1, #11
 800a70c:	430a      	orrs	r2, r1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	4ba6      	ldr	r3, [pc, #664]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	4ba5      	ldr	r3, [pc, #660]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a716:	2180      	movs	r1, #128	@ 0x80
 800a718:	0249      	lsls	r1, r1, #9
 800a71a:	430a      	orrs	r2, r1
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	e00b      	b.n	800a738 <HAL_RCC_OscConfig+0xbc>
 800a720:	4ba2      	ldr	r3, [pc, #648]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	4ba1      	ldr	r3, [pc, #644]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a726:	49a2      	ldr	r1, [pc, #648]	@ (800a9b0 <HAL_RCC_OscConfig+0x334>)
 800a728:	400a      	ands	r2, r1
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	4b9f      	ldr	r3, [pc, #636]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	4b9e      	ldr	r3, [pc, #632]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a732:	49a0      	ldr	r1, [pc, #640]	@ (800a9b4 <HAL_RCC_OscConfig+0x338>)
 800a734:	400a      	ands	r2, r1
 800a736:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d014      	beq.n	800a76a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a740:	f7fe fc5e 	bl	8009000 <HAL_GetTick>
 800a744:	0003      	movs	r3, r0
 800a746:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a748:	e008      	b.n	800a75c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a74a:	f7fe fc59 	bl	8009000 <HAL_GetTick>
 800a74e:	0002      	movs	r2, r0
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	2b64      	cmp	r3, #100	@ 0x64
 800a756:	d901      	bls.n	800a75c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e2e9      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a75c:	4b93      	ldr	r3, [pc, #588]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	2380      	movs	r3, #128	@ 0x80
 800a762:	029b      	lsls	r3, r3, #10
 800a764:	4013      	ands	r3, r2
 800a766:	d0f0      	beq.n	800a74a <HAL_RCC_OscConfig+0xce>
 800a768:	e015      	b.n	800a796 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a76a:	f7fe fc49 	bl	8009000 <HAL_GetTick>
 800a76e:	0003      	movs	r3, r0
 800a770:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a774:	f7fe fc44 	bl	8009000 <HAL_GetTick>
 800a778:	0002      	movs	r2, r0
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b64      	cmp	r3, #100	@ 0x64
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e2d4      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a786:	4b89      	ldr	r3, [pc, #548]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	2380      	movs	r3, #128	@ 0x80
 800a78c:	029b      	lsls	r3, r3, #10
 800a78e:	4013      	ands	r3, r2
 800a790:	d1f0      	bne.n	800a774 <HAL_RCC_OscConfig+0xf8>
 800a792:	e000      	b.n	800a796 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a794:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2202      	movs	r2, #2
 800a79c:	4013      	ands	r3, r2
 800a79e:	d100      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x126>
 800a7a0:	e099      	b.n	800a8d6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7a2:	4b82      	ldr	r3, [pc, #520]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	2238      	movs	r2, #56	@ 0x38
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7ac:	4b7f      	ldr	r3, [pc, #508]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b10      	cmp	r3, #16
 800a7ba:	d102      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x146>
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d002      	beq.n	800a7c8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d135      	bne.n	800a834 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7c8:	4b78      	ldr	r3, [pc, #480]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	2380      	movs	r3, #128	@ 0x80
 800a7ce:	00db      	lsls	r3, r3, #3
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	d005      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x164>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d101      	bne.n	800a7e0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e2a7      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7e0:	4b72      	ldr	r3, [pc, #456]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	4a74      	ldr	r2, [pc, #464]	@ (800a9b8 <HAL_RCC_OscConfig+0x33c>)
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	0019      	movs	r1, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	021a      	lsls	r2, r3, #8
 800a7f0:	4b6e      	ldr	r3, [pc, #440]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d112      	bne.n	800a822 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a7fc:	4b6b      	ldr	r3, [pc, #428]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a6e      	ldr	r2, [pc, #440]	@ (800a9bc <HAL_RCC_OscConfig+0x340>)
 800a802:	4013      	ands	r3, r2
 800a804:	0019      	movs	r1, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	691a      	ldr	r2, [r3, #16]
 800a80a:	4b68      	ldr	r3, [pc, #416]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a80c:	430a      	orrs	r2, r1
 800a80e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a810:	4b66      	ldr	r3, [pc, #408]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	0adb      	lsrs	r3, r3, #11
 800a816:	2207      	movs	r2, #7
 800a818:	4013      	ands	r3, r2
 800a81a:	4a69      	ldr	r2, [pc, #420]	@ (800a9c0 <HAL_RCC_OscConfig+0x344>)
 800a81c:	40da      	lsrs	r2, r3
 800a81e:	4b69      	ldr	r3, [pc, #420]	@ (800a9c4 <HAL_RCC_OscConfig+0x348>)
 800a820:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a822:	4b69      	ldr	r3, [pc, #420]	@ (800a9c8 <HAL_RCC_OscConfig+0x34c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	0018      	movs	r0, r3
 800a828:	f7fe fb8e 	bl	8008f48 <HAL_InitTick>
 800a82c:	1e03      	subs	r3, r0, #0
 800a82e:	d051      	beq.n	800a8d4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e27d      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d030      	beq.n	800a89e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a83c:	4b5b      	ldr	r3, [pc, #364]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a5e      	ldr	r2, [pc, #376]	@ (800a9bc <HAL_RCC_OscConfig+0x340>)
 800a842:	4013      	ands	r3, r2
 800a844:	0019      	movs	r1, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691a      	ldr	r2, [r3, #16]
 800a84a:	4b58      	ldr	r3, [pc, #352]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a84c:	430a      	orrs	r2, r1
 800a84e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a850:	4b56      	ldr	r3, [pc, #344]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	4b55      	ldr	r3, [pc, #340]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a856:	2180      	movs	r1, #128	@ 0x80
 800a858:	0049      	lsls	r1, r1, #1
 800a85a:	430a      	orrs	r2, r1
 800a85c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a85e:	f7fe fbcf 	bl	8009000 <HAL_GetTick>
 800a862:	0003      	movs	r3, r0
 800a864:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a866:	e008      	b.n	800a87a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a868:	f7fe fbca 	bl	8009000 <HAL_GetTick>
 800a86c:	0002      	movs	r2, r0
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	2b02      	cmp	r3, #2
 800a874:	d901      	bls.n	800a87a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e25a      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a87a:	4b4c      	ldr	r3, [pc, #304]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	2380      	movs	r3, #128	@ 0x80
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	4013      	ands	r3, r2
 800a884:	d0f0      	beq.n	800a868 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a886:	4b49      	ldr	r3, [pc, #292]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	4a4b      	ldr	r2, [pc, #300]	@ (800a9b8 <HAL_RCC_OscConfig+0x33c>)
 800a88c:	4013      	ands	r3, r2
 800a88e:	0019      	movs	r1, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	021a      	lsls	r2, r3, #8
 800a896:	4b45      	ldr	r3, [pc, #276]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a898:	430a      	orrs	r2, r1
 800a89a:	605a      	str	r2, [r3, #4]
 800a89c:	e01b      	b.n	800a8d6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a89e:	4b43      	ldr	r3, [pc, #268]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b42      	ldr	r3, [pc, #264]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a8a4:	4949      	ldr	r1, [pc, #292]	@ (800a9cc <HAL_RCC_OscConfig+0x350>)
 800a8a6:	400a      	ands	r2, r1
 800a8a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8aa:	f7fe fba9 	bl	8009000 <HAL_GetTick>
 800a8ae:	0003      	movs	r3, r0
 800a8b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a8b2:	e008      	b.n	800a8c6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8b4:	f7fe fba4 	bl	8009000 <HAL_GetTick>
 800a8b8:	0002      	movs	r2, r0
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d901      	bls.n	800a8c6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e234      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a8c6:	4b39      	ldr	r3, [pc, #228]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	2380      	movs	r3, #128	@ 0x80
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	d1f0      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x238>
 800a8d2:	e000      	b.n	800a8d6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8d4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2208      	movs	r2, #8
 800a8dc:	4013      	ands	r3, r2
 800a8de:	d047      	beq.n	800a970 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a8e0:	4b32      	ldr	r3, [pc, #200]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	2238      	movs	r2, #56	@ 0x38
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	2b18      	cmp	r3, #24
 800a8ea:	d10a      	bne.n	800a902 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a8ec:	4b2f      	ldr	r3, [pc, #188]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a8ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	d03c      	beq.n	800a970 <HAL_RCC_OscConfig+0x2f4>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d138      	bne.n	800a970 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e216      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d019      	beq.n	800a93e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a90a:	4b28      	ldr	r3, [pc, #160]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a90c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a90e:	4b27      	ldr	r3, [pc, #156]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a910:	2101      	movs	r1, #1
 800a912:	430a      	orrs	r2, r1
 800a914:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a916:	f7fe fb73 	bl	8009000 <HAL_GetTick>
 800a91a:	0003      	movs	r3, r0
 800a91c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a91e:	e008      	b.n	800a932 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a920:	f7fe fb6e 	bl	8009000 <HAL_GetTick>
 800a924:	0002      	movs	r2, r0
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d901      	bls.n	800a932 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e1fe      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a932:	4b1e      	ldr	r3, [pc, #120]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a936:	2202      	movs	r2, #2
 800a938:	4013      	ands	r3, r2
 800a93a:	d0f1      	beq.n	800a920 <HAL_RCC_OscConfig+0x2a4>
 800a93c:	e018      	b.n	800a970 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a93e:	4b1b      	ldr	r3, [pc, #108]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a940:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a942:	4b1a      	ldr	r3, [pc, #104]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a944:	2101      	movs	r1, #1
 800a946:	438a      	bics	r2, r1
 800a948:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a94a:	f7fe fb59 	bl	8009000 <HAL_GetTick>
 800a94e:	0003      	movs	r3, r0
 800a950:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a954:	f7fe fb54 	bl	8009000 <HAL_GetTick>
 800a958:	0002      	movs	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e1e4      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a966:	4b11      	ldr	r3, [pc, #68]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a96a:	2202      	movs	r2, #2
 800a96c:	4013      	ands	r3, r2
 800a96e:	d1f1      	bne.n	800a954 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2204      	movs	r2, #4
 800a976:	4013      	ands	r3, r2
 800a978:	d100      	bne.n	800a97c <HAL_RCC_OscConfig+0x300>
 800a97a:	e0c7      	b.n	800ab0c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a97c:	231f      	movs	r3, #31
 800a97e:	18fb      	adds	r3, r7, r3
 800a980:	2200      	movs	r2, #0
 800a982:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a984:	4b09      	ldr	r3, [pc, #36]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	2238      	movs	r2, #56	@ 0x38
 800a98a:	4013      	ands	r3, r2
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	d11f      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a990:	4b06      	ldr	r3, [pc, #24]	@ (800a9ac <HAL_RCC_OscConfig+0x330>)
 800a992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a994:	2202      	movs	r2, #2
 800a996:	4013      	ands	r3, r2
 800a998:	d100      	bne.n	800a99c <HAL_RCC_OscConfig+0x320>
 800a99a:	e0b7      	b.n	800ab0c <HAL_RCC_OscConfig+0x490>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d000      	beq.n	800a9a6 <HAL_RCC_OscConfig+0x32a>
 800a9a4:	e0b2      	b.n	800ab0c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e1c2      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	40021000 	.word	0x40021000
 800a9b0:	fffeffff 	.word	0xfffeffff
 800a9b4:	fffbffff 	.word	0xfffbffff
 800a9b8:	ffff80ff 	.word	0xffff80ff
 800a9bc:	ffffc7ff 	.word	0xffffc7ff
 800a9c0:	00f42400 	.word	0x00f42400
 800a9c4:	20000004 	.word	0x20000004
 800a9c8:	20000008 	.word	0x20000008
 800a9cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a9d0:	4bb5      	ldr	r3, [pc, #724]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800a9d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9d4:	2380      	movs	r3, #128	@ 0x80
 800a9d6:	055b      	lsls	r3, r3, #21
 800a9d8:	4013      	ands	r3, r2
 800a9da:	d101      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x364>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e000      	b.n	800a9e2 <HAL_RCC_OscConfig+0x366>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d011      	beq.n	800aa0a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a9e6:	4bb0      	ldr	r3, [pc, #704]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800a9e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9ea:	4baf      	ldr	r3, [pc, #700]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800a9ec:	2180      	movs	r1, #128	@ 0x80
 800a9ee:	0549      	lsls	r1, r1, #21
 800a9f0:	430a      	orrs	r2, r1
 800a9f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a9f4:	4bac      	ldr	r3, [pc, #688]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800a9f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9f8:	2380      	movs	r3, #128	@ 0x80
 800a9fa:	055b      	lsls	r3, r3, #21
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800aa02:	231f      	movs	r3, #31
 800aa04:	18fb      	adds	r3, r7, r3
 800aa06:	2201      	movs	r2, #1
 800aa08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa0a:	4ba8      	ldr	r3, [pc, #672]	@ (800acac <HAL_RCC_OscConfig+0x630>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	2380      	movs	r3, #128	@ 0x80
 800aa10:	005b      	lsls	r3, r3, #1
 800aa12:	4013      	ands	r3, r2
 800aa14:	d11a      	bne.n	800aa4c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa16:	4ba5      	ldr	r3, [pc, #660]	@ (800acac <HAL_RCC_OscConfig+0x630>)
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	4ba4      	ldr	r3, [pc, #656]	@ (800acac <HAL_RCC_OscConfig+0x630>)
 800aa1c:	2180      	movs	r1, #128	@ 0x80
 800aa1e:	0049      	lsls	r1, r1, #1
 800aa20:	430a      	orrs	r2, r1
 800aa22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800aa24:	f7fe faec 	bl	8009000 <HAL_GetTick>
 800aa28:	0003      	movs	r3, r0
 800aa2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa2c:	e008      	b.n	800aa40 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa2e:	f7fe fae7 	bl	8009000 <HAL_GetTick>
 800aa32:	0002      	movs	r2, r0
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d901      	bls.n	800aa40 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e177      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa40:	4b9a      	ldr	r3, [pc, #616]	@ (800acac <HAL_RCC_OscConfig+0x630>)
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	2380      	movs	r3, #128	@ 0x80
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	4013      	ands	r3, r2
 800aa4a:	d0f0      	beq.n	800aa2e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d106      	bne.n	800aa62 <HAL_RCC_OscConfig+0x3e6>
 800aa54:	4b94      	ldr	r3, [pc, #592]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa58:	4b93      	ldr	r3, [pc, #588]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aa60:	e01c      	b.n	800aa9c <HAL_RCC_OscConfig+0x420>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d10c      	bne.n	800aa84 <HAL_RCC_OscConfig+0x408>
 800aa6a:	4b8f      	ldr	r3, [pc, #572]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa6e:	4b8e      	ldr	r3, [pc, #568]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa70:	2104      	movs	r1, #4
 800aa72:	430a      	orrs	r2, r1
 800aa74:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aa76:	4b8c      	ldr	r3, [pc, #560]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa7a:	4b8b      	ldr	r3, [pc, #556]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aa82:	e00b      	b.n	800aa9c <HAL_RCC_OscConfig+0x420>
 800aa84:	4b88      	ldr	r3, [pc, #544]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa88:	4b87      	ldr	r3, [pc, #540]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	438a      	bics	r2, r1
 800aa8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aa90:	4b85      	ldr	r3, [pc, #532]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa94:	4b84      	ldr	r3, [pc, #528]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aa96:	2104      	movs	r1, #4
 800aa98:	438a      	bics	r2, r1
 800aa9a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d014      	beq.n	800aace <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa4:	f7fe faac 	bl	8009000 <HAL_GetTick>
 800aaa8:	0003      	movs	r3, r0
 800aaaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aaac:	e009      	b.n	800aac2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaae:	f7fe faa7 	bl	8009000 <HAL_GetTick>
 800aab2:	0002      	movs	r2, r0
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	4a7d      	ldr	r2, [pc, #500]	@ (800acb0 <HAL_RCC_OscConfig+0x634>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e136      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aac2:	4b79      	ldr	r3, [pc, #484]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aac6:	2202      	movs	r2, #2
 800aac8:	4013      	ands	r3, r2
 800aaca:	d0f0      	beq.n	800aaae <HAL_RCC_OscConfig+0x432>
 800aacc:	e013      	b.n	800aaf6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aace:	f7fe fa97 	bl	8009000 <HAL_GetTick>
 800aad2:	0003      	movs	r3, r0
 800aad4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aad6:	e009      	b.n	800aaec <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aad8:	f7fe fa92 	bl	8009000 <HAL_GetTick>
 800aadc:	0002      	movs	r2, r0
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	4a73      	ldr	r2, [pc, #460]	@ (800acb0 <HAL_RCC_OscConfig+0x634>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e121      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aaec:	4b6e      	ldr	r3, [pc, #440]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800aaee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	d1f0      	bne.n	800aad8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800aaf6:	231f      	movs	r3, #31
 800aaf8:	18fb      	adds	r3, r7, r3
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d105      	bne.n	800ab0c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800ab00:	4b69      	ldr	r3, [pc, #420]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab04:	4b68      	ldr	r3, [pc, #416]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab06:	496b      	ldr	r1, [pc, #428]	@ (800acb4 <HAL_RCC_OscConfig+0x638>)
 800ab08:	400a      	ands	r2, r1
 800ab0a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2220      	movs	r2, #32
 800ab12:	4013      	ands	r3, r2
 800ab14:	d039      	beq.n	800ab8a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d01b      	beq.n	800ab56 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab1e:	4b62      	ldr	r3, [pc, #392]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b61      	ldr	r3, [pc, #388]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab24:	2180      	movs	r1, #128	@ 0x80
 800ab26:	03c9      	lsls	r1, r1, #15
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab2c:	f7fe fa68 	bl	8009000 <HAL_GetTick>
 800ab30:	0003      	movs	r3, r0
 800ab32:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ab34:	e008      	b.n	800ab48 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab36:	f7fe fa63 	bl	8009000 <HAL_GetTick>
 800ab3a:	0002      	movs	r2, r0
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d901      	bls.n	800ab48 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e0f3      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800ab48:	4b57      	ldr	r3, [pc, #348]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	2380      	movs	r3, #128	@ 0x80
 800ab4e:	041b      	lsls	r3, r3, #16
 800ab50:	4013      	ands	r3, r2
 800ab52:	d0f0      	beq.n	800ab36 <HAL_RCC_OscConfig+0x4ba>
 800ab54:	e019      	b.n	800ab8a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab56:	4b54      	ldr	r3, [pc, #336]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	4b53      	ldr	r3, [pc, #332]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab5c:	4956      	ldr	r1, [pc, #344]	@ (800acb8 <HAL_RCC_OscConfig+0x63c>)
 800ab5e:	400a      	ands	r2, r1
 800ab60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab62:	f7fe fa4d 	bl	8009000 <HAL_GetTick>
 800ab66:	0003      	movs	r3, r0
 800ab68:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ab6a:	e008      	b.n	800ab7e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab6c:	f7fe fa48 	bl	8009000 <HAL_GetTick>
 800ab70:	0002      	movs	r2, r0
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d901      	bls.n	800ab7e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e0d8      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800ab7e:	4b4a      	ldr	r3, [pc, #296]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	2380      	movs	r3, #128	@ 0x80
 800ab84:	041b      	lsls	r3, r3, #16
 800ab86:	4013      	ands	r3, r2
 800ab88:	d1f0      	bne.n	800ab6c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d100      	bne.n	800ab94 <HAL_RCC_OscConfig+0x518>
 800ab92:	e0cc      	b.n	800ad2e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab94:	4b44      	ldr	r3, [pc, #272]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2238      	movs	r2, #56	@ 0x38
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	2b10      	cmp	r3, #16
 800ab9e:	d100      	bne.n	800aba2 <HAL_RCC_OscConfig+0x526>
 800aba0:	e07b      	b.n	800ac9a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d156      	bne.n	800ac58 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abaa:	4b3f      	ldr	r3, [pc, #252]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	4b3e      	ldr	r3, [pc, #248]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800abb0:	4942      	ldr	r1, [pc, #264]	@ (800acbc <HAL_RCC_OscConfig+0x640>)
 800abb2:	400a      	ands	r2, r1
 800abb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abb6:	f7fe fa23 	bl	8009000 <HAL_GetTick>
 800abba:	0003      	movs	r3, r0
 800abbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abbe:	e008      	b.n	800abd2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abc0:	f7fe fa1e 	bl	8009000 <HAL_GetTick>
 800abc4:	0002      	movs	r2, r0
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d901      	bls.n	800abd2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800abce:	2303      	movs	r3, #3
 800abd0:	e0ae      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abd2:	4b35      	ldr	r3, [pc, #212]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	2380      	movs	r3, #128	@ 0x80
 800abd8:	049b      	lsls	r3, r3, #18
 800abda:	4013      	ands	r3, r2
 800abdc:	d1f0      	bne.n	800abc0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abde:	4b32      	ldr	r3, [pc, #200]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	4a37      	ldr	r2, [pc, #220]	@ (800acc0 <HAL_RCC_OscConfig+0x644>)
 800abe4:	4013      	ands	r3, r2
 800abe6:	0019      	movs	r1, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf0:	431a      	orrs	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abfe:	431a      	orrs	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac04:	431a      	orrs	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	4b26      	ldr	r3, [pc, #152]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac12:	4b25      	ldr	r3, [pc, #148]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	4b24      	ldr	r3, [pc, #144]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac18:	2180      	movs	r1, #128	@ 0x80
 800ac1a:	0449      	lsls	r1, r1, #17
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800ac20:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	4b20      	ldr	r3, [pc, #128]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac26:	2180      	movs	r1, #128	@ 0x80
 800ac28:	0549      	lsls	r1, r1, #21
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac2e:	f7fe f9e7 	bl	8009000 <HAL_GetTick>
 800ac32:	0003      	movs	r3, r0
 800ac34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac36:	e008      	b.n	800ac4a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac38:	f7fe f9e2 	bl	8009000 <HAL_GetTick>
 800ac3c:	0002      	movs	r2, r0
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d901      	bls.n	800ac4a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e072      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ac4a:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	2380      	movs	r3, #128	@ 0x80
 800ac50:	049b      	lsls	r3, r3, #18
 800ac52:	4013      	ands	r3, r2
 800ac54:	d0f0      	beq.n	800ac38 <HAL_RCC_OscConfig+0x5bc>
 800ac56:	e06a      	b.n	800ad2e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac58:	4b13      	ldr	r3, [pc, #76]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	4b12      	ldr	r3, [pc, #72]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac5e:	4917      	ldr	r1, [pc, #92]	@ (800acbc <HAL_RCC_OscConfig+0x640>)
 800ac60:	400a      	ands	r2, r1
 800ac62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac64:	f7fe f9cc 	bl	8009000 <HAL_GetTick>
 800ac68:	0003      	movs	r3, r0
 800ac6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac6c:	e008      	b.n	800ac80 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac6e:	f7fe f9c7 	bl	8009000 <HAL_GetTick>
 800ac72:	0002      	movs	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d901      	bls.n	800ac80 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e057      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac80:	4b09      	ldr	r3, [pc, #36]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	2380      	movs	r3, #128	@ 0x80
 800ac86:	049b      	lsls	r3, r3, #18
 800ac88:	4013      	ands	r3, r2
 800ac8a:	d1f0      	bne.n	800ac6e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800ac8c:	4b06      	ldr	r3, [pc, #24]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	4b05      	ldr	r3, [pc, #20]	@ (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ac92:	490c      	ldr	r1, [pc, #48]	@ (800acc4 <HAL_RCC_OscConfig+0x648>)
 800ac94:	400a      	ands	r2, r1
 800ac96:	60da      	str	r2, [r3, #12]
 800ac98:	e049      	b.n	800ad2e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d112      	bne.n	800acc8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e044      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
 800aca6:	46c0      	nop			@ (mov r8, r8)
 800aca8:	40021000 	.word	0x40021000
 800acac:	40007000 	.word	0x40007000
 800acb0:	00001388 	.word	0x00001388
 800acb4:	efffffff 	.word	0xefffffff
 800acb8:	ffbfffff 	.word	0xffbfffff
 800acbc:	feffffff 	.word	0xfeffffff
 800acc0:	11c1808c 	.word	0x11c1808c
 800acc4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800acc8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad38 <HAL_RCC_OscConfig+0x6bc>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2203      	movs	r2, #3
 800acd2:	401a      	ands	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd8:	429a      	cmp	r2, r3
 800acda:	d126      	bne.n	800ad2a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2270      	movs	r2, #112	@ 0x70
 800ace0:	401a      	ands	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d11f      	bne.n	800ad2a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	23fe      	movs	r3, #254	@ 0xfe
 800acee:	01db      	lsls	r3, r3, #7
 800acf0:	401a      	ands	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d116      	bne.n	800ad2a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	23f8      	movs	r3, #248	@ 0xf8
 800ad00:	039b      	lsls	r3, r3, #14
 800ad02:	401a      	ands	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d10e      	bne.n	800ad2a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	23e0      	movs	r3, #224	@ 0xe0
 800ad10:	051b      	lsls	r3, r3, #20
 800ad12:	401a      	ands	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d106      	bne.n	800ad2a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	0f5b      	lsrs	r3, r3, #29
 800ad20:	075a      	lsls	r2, r3, #29
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d001      	beq.n	800ad2e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	0018      	movs	r0, r3
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b008      	add	sp, #32
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	40021000 	.word	0x40021000

0800ad3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e0e9      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad50:	4b76      	ldr	r3, [pc, #472]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2207      	movs	r2, #7
 800ad56:	4013      	ands	r3, r2
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d91e      	bls.n	800ad9c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad5e:	4b73      	ldr	r3, [pc, #460]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2207      	movs	r2, #7
 800ad64:	4393      	bics	r3, r2
 800ad66:	0019      	movs	r1, r3
 800ad68:	4b70      	ldr	r3, [pc, #448]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ad70:	f7fe f946 	bl	8009000 <HAL_GetTick>
 800ad74:	0003      	movs	r3, r0
 800ad76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ad78:	e009      	b.n	800ad8e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad7a:	f7fe f941 	bl	8009000 <HAL_GetTick>
 800ad7e:	0002      	movs	r2, r0
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	4a6a      	ldr	r2, [pc, #424]	@ (800af30 <HAL_RCC_ClockConfig+0x1f4>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d901      	bls.n	800ad8e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e0ca      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ad8e:	4b67      	ldr	r3, [pc, #412]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2207      	movs	r2, #7
 800ad94:	4013      	ands	r3, r2
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d1ee      	bne.n	800ad7a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2202      	movs	r2, #2
 800ada2:	4013      	ands	r3, r2
 800ada4:	d015      	beq.n	800add2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2204      	movs	r2, #4
 800adac:	4013      	ands	r3, r2
 800adae:	d006      	beq.n	800adbe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800adb0:	4b60      	ldr	r3, [pc, #384]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	4b5f      	ldr	r3, [pc, #380]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800adb6:	21e0      	movs	r1, #224	@ 0xe0
 800adb8:	01c9      	lsls	r1, r1, #7
 800adba:	430a      	orrs	r2, r1
 800adbc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adbe:	4b5d      	ldr	r3, [pc, #372]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	4a5d      	ldr	r2, [pc, #372]	@ (800af38 <HAL_RCC_ClockConfig+0x1fc>)
 800adc4:	4013      	ands	r3, r2
 800adc6:	0019      	movs	r1, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689a      	ldr	r2, [r3, #8]
 800adcc:	4b59      	ldr	r3, [pc, #356]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800adce:	430a      	orrs	r2, r1
 800add0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2201      	movs	r2, #1
 800add8:	4013      	ands	r3, r2
 800adda:	d057      	beq.n	800ae8c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d107      	bne.n	800adf4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ade4:	4b53      	ldr	r3, [pc, #332]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	2380      	movs	r3, #128	@ 0x80
 800adea:	029b      	lsls	r3, r3, #10
 800adec:	4013      	ands	r3, r2
 800adee:	d12b      	bne.n	800ae48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e097      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d107      	bne.n	800ae0c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adfc:	4b4d      	ldr	r3, [pc, #308]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	2380      	movs	r3, #128	@ 0x80
 800ae02:	049b      	lsls	r3, r3, #18
 800ae04:	4013      	ands	r3, r2
 800ae06:	d11f      	bne.n	800ae48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e08b      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d107      	bne.n	800ae24 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae14:	4b47      	ldr	r3, [pc, #284]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	2380      	movs	r3, #128	@ 0x80
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	d113      	bne.n	800ae48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e07f      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	2b03      	cmp	r3, #3
 800ae2a:	d106      	bne.n	800ae3a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae2c:	4b41      	ldr	r3, [pc, #260]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800ae2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae30:	2202      	movs	r2, #2
 800ae32:	4013      	ands	r3, r2
 800ae34:	d108      	bne.n	800ae48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e074      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ae3a:	4b3e      	ldr	r3, [pc, #248]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800ae3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae3e:	2202      	movs	r2, #2
 800ae40:	4013      	ands	r3, r2
 800ae42:	d101      	bne.n	800ae48 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e06d      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae48:	4b3a      	ldr	r3, [pc, #232]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	2207      	movs	r2, #7
 800ae4e:	4393      	bics	r3, r2
 800ae50:	0019      	movs	r1, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	4b37      	ldr	r3, [pc, #220]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800ae58:	430a      	orrs	r2, r1
 800ae5a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae5c:	f7fe f8d0 	bl	8009000 <HAL_GetTick>
 800ae60:	0003      	movs	r3, r0
 800ae62:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae64:	e009      	b.n	800ae7a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae66:	f7fe f8cb 	bl	8009000 <HAL_GetTick>
 800ae6a:	0002      	movs	r2, r0
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	4a2f      	ldr	r2, [pc, #188]	@ (800af30 <HAL_RCC_ClockConfig+0x1f4>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d901      	bls.n	800ae7a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e054      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae7a:	4b2e      	ldr	r3, [pc, #184]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	2238      	movs	r2, #56	@ 0x38
 800ae80:	401a      	ands	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d1ec      	bne.n	800ae66 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae8c:	4b27      	ldr	r3, [pc, #156]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2207      	movs	r2, #7
 800ae92:	4013      	ands	r3, r2
 800ae94:	683a      	ldr	r2, [r7, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d21e      	bcs.n	800aed8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae9a:	4b24      	ldr	r3, [pc, #144]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2207      	movs	r2, #7
 800aea0:	4393      	bics	r3, r2
 800aea2:	0019      	movs	r1, r3
 800aea4:	4b21      	ldr	r3, [pc, #132]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aeac:	f7fe f8a8 	bl	8009000 <HAL_GetTick>
 800aeb0:	0003      	movs	r3, r0
 800aeb2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aeb4:	e009      	b.n	800aeca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aeb6:	f7fe f8a3 	bl	8009000 <HAL_GetTick>
 800aeba:	0002      	movs	r2, r0
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	4a1b      	ldr	r2, [pc, #108]	@ (800af30 <HAL_RCC_ClockConfig+0x1f4>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d901      	bls.n	800aeca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e02c      	b.n	800af24 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aeca:	4b18      	ldr	r3, [pc, #96]	@ (800af2c <HAL_RCC_ClockConfig+0x1f0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2207      	movs	r2, #7
 800aed0:	4013      	ands	r3, r2
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d1ee      	bne.n	800aeb6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2204      	movs	r2, #4
 800aede:	4013      	ands	r3, r2
 800aee0:	d009      	beq.n	800aef6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800aee2:	4b14      	ldr	r3, [pc, #80]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	4a15      	ldr	r2, [pc, #84]	@ (800af3c <HAL_RCC_ClockConfig+0x200>)
 800aee8:	4013      	ands	r3, r2
 800aeea:	0019      	movs	r1, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68da      	ldr	r2, [r3, #12]
 800aef0:	4b10      	ldr	r3, [pc, #64]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800aef2:	430a      	orrs	r2, r1
 800aef4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800aef6:	f000 f829 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800aefa:	0001      	movs	r1, r0
 800aefc:	4b0d      	ldr	r3, [pc, #52]	@ (800af34 <HAL_RCC_ClockConfig+0x1f8>)
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	0a1b      	lsrs	r3, r3, #8
 800af02:	220f      	movs	r2, #15
 800af04:	401a      	ands	r2, r3
 800af06:	4b0e      	ldr	r3, [pc, #56]	@ (800af40 <HAL_RCC_ClockConfig+0x204>)
 800af08:	0092      	lsls	r2, r2, #2
 800af0a:	58d3      	ldr	r3, [r2, r3]
 800af0c:	221f      	movs	r2, #31
 800af0e:	4013      	ands	r3, r2
 800af10:	000a      	movs	r2, r1
 800af12:	40da      	lsrs	r2, r3
 800af14:	4b0b      	ldr	r3, [pc, #44]	@ (800af44 <HAL_RCC_ClockConfig+0x208>)
 800af16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800af18:	4b0b      	ldr	r3, [pc, #44]	@ (800af48 <HAL_RCC_ClockConfig+0x20c>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	0018      	movs	r0, r3
 800af1e:	f7fe f813 	bl	8008f48 <HAL_InitTick>
 800af22:	0003      	movs	r3, r0
}
 800af24:	0018      	movs	r0, r3
 800af26:	46bd      	mov	sp, r7
 800af28:	b004      	add	sp, #16
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	40022000 	.word	0x40022000
 800af30:	00001388 	.word	0x00001388
 800af34:	40021000 	.word	0x40021000
 800af38:	fffff0ff 	.word	0xfffff0ff
 800af3c:	ffff8fff 	.word	0xffff8fff
 800af40:	0801c110 	.word	0x0801c110
 800af44:	20000004 	.word	0x20000004
 800af48:	20000008 	.word	0x20000008

0800af4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800af52:	4b3c      	ldr	r3, [pc, #240]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	2238      	movs	r2, #56	@ 0x38
 800af58:	4013      	ands	r3, r2
 800af5a:	d10f      	bne.n	800af7c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800af5c:	4b39      	ldr	r3, [pc, #228]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	0adb      	lsrs	r3, r3, #11
 800af62:	2207      	movs	r2, #7
 800af64:	4013      	ands	r3, r2
 800af66:	2201      	movs	r2, #1
 800af68:	409a      	lsls	r2, r3
 800af6a:	0013      	movs	r3, r2
 800af6c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	4835      	ldr	r0, [pc, #212]	@ (800b048 <HAL_RCC_GetSysClockFreq+0xfc>)
 800af72:	f7f5 f8ef 	bl	8000154 <__udivsi3>
 800af76:	0003      	movs	r3, r0
 800af78:	613b      	str	r3, [r7, #16]
 800af7a:	e05d      	b.n	800b038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800af7c:	4b31      	ldr	r3, [pc, #196]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	2238      	movs	r2, #56	@ 0x38
 800af82:	4013      	ands	r3, r2
 800af84:	2b08      	cmp	r3, #8
 800af86:	d102      	bne.n	800af8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800af88:	4b30      	ldr	r3, [pc, #192]	@ (800b04c <HAL_RCC_GetSysClockFreq+0x100>)
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	e054      	b.n	800b038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800af8e:	4b2d      	ldr	r3, [pc, #180]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	2238      	movs	r2, #56	@ 0x38
 800af94:	4013      	ands	r3, r2
 800af96:	2b10      	cmp	r3, #16
 800af98:	d138      	bne.n	800b00c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800af9a:	4b2a      	ldr	r3, [pc, #168]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	2203      	movs	r2, #3
 800afa0:	4013      	ands	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800afa4:	4b27      	ldr	r3, [pc, #156]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	091b      	lsrs	r3, r3, #4
 800afaa:	2207      	movs	r2, #7
 800afac:	4013      	ands	r3, r2
 800afae:	3301      	adds	r3, #1
 800afb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d10d      	bne.n	800afd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	4824      	ldr	r0, [pc, #144]	@ (800b04c <HAL_RCC_GetSysClockFreq+0x100>)
 800afbc:	f7f5 f8ca 	bl	8000154 <__udivsi3>
 800afc0:	0003      	movs	r3, r0
 800afc2:	0019      	movs	r1, r3
 800afc4:	4b1f      	ldr	r3, [pc, #124]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	0a1b      	lsrs	r3, r3, #8
 800afca:	227f      	movs	r2, #127	@ 0x7f
 800afcc:	4013      	ands	r3, r2
 800afce:	434b      	muls	r3, r1
 800afd0:	617b      	str	r3, [r7, #20]
        break;
 800afd2:	e00d      	b.n	800aff0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800afd4:	68b9      	ldr	r1, [r7, #8]
 800afd6:	481c      	ldr	r0, [pc, #112]	@ (800b048 <HAL_RCC_GetSysClockFreq+0xfc>)
 800afd8:	f7f5 f8bc 	bl	8000154 <__udivsi3>
 800afdc:	0003      	movs	r3, r0
 800afde:	0019      	movs	r1, r3
 800afe0:	4b18      	ldr	r3, [pc, #96]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	0a1b      	lsrs	r3, r3, #8
 800afe6:	227f      	movs	r2, #127	@ 0x7f
 800afe8:	4013      	ands	r3, r2
 800afea:	434b      	muls	r3, r1
 800afec:	617b      	str	r3, [r7, #20]
        break;
 800afee:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800aff0:	4b14      	ldr	r3, [pc, #80]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	0f5b      	lsrs	r3, r3, #29
 800aff6:	2207      	movs	r2, #7
 800aff8:	4013      	ands	r3, r2
 800affa:	3301      	adds	r3, #1
 800affc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	6978      	ldr	r0, [r7, #20]
 800b002:	f7f5 f8a7 	bl	8000154 <__udivsi3>
 800b006:	0003      	movs	r3, r0
 800b008:	613b      	str	r3, [r7, #16]
 800b00a:	e015      	b.n	800b038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b00c:	4b0d      	ldr	r3, [pc, #52]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	2238      	movs	r2, #56	@ 0x38
 800b012:	4013      	ands	r3, r2
 800b014:	2b20      	cmp	r3, #32
 800b016:	d103      	bne.n	800b020 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800b018:	2380      	movs	r3, #128	@ 0x80
 800b01a:	021b      	lsls	r3, r3, #8
 800b01c:	613b      	str	r3, [r7, #16]
 800b01e:	e00b      	b.n	800b038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b020:	4b08      	ldr	r3, [pc, #32]	@ (800b044 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	2238      	movs	r2, #56	@ 0x38
 800b026:	4013      	ands	r3, r2
 800b028:	2b18      	cmp	r3, #24
 800b02a:	d103      	bne.n	800b034 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800b02c:	23fa      	movs	r3, #250	@ 0xfa
 800b02e:	01db      	lsls	r3, r3, #7
 800b030:	613b      	str	r3, [r7, #16]
 800b032:	e001      	b.n	800b038 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b038:	693b      	ldr	r3, [r7, #16]
}
 800b03a:	0018      	movs	r0, r3
 800b03c:	46bd      	mov	sp, r7
 800b03e:	b006      	add	sp, #24
 800b040:	bd80      	pop	{r7, pc}
 800b042:	46c0      	nop			@ (mov r8, r8)
 800b044:	40021000 	.word	0x40021000
 800b048:	00f42400 	.word	0x00f42400
 800b04c:	007a1200 	.word	0x007a1200

0800b050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b054:	4b02      	ldr	r3, [pc, #8]	@ (800b060 <HAL_RCC_GetHCLKFreq+0x10>)
 800b056:	681b      	ldr	r3, [r3, #0]
}
 800b058:	0018      	movs	r0, r3
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	46c0      	nop			@ (mov r8, r8)
 800b060:	20000004 	.word	0x20000004

0800b064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b064:	b5b0      	push	{r4, r5, r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b068:	f7ff fff2 	bl	800b050 <HAL_RCC_GetHCLKFreq>
 800b06c:	0004      	movs	r4, r0
 800b06e:	f7ff faf9 	bl	800a664 <LL_RCC_GetAPB1Prescaler>
 800b072:	0003      	movs	r3, r0
 800b074:	0b1a      	lsrs	r2, r3, #12
 800b076:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b078:	0092      	lsls	r2, r2, #2
 800b07a:	58d3      	ldr	r3, [r2, r3]
 800b07c:	221f      	movs	r2, #31
 800b07e:	4013      	ands	r3, r2
 800b080:	40dc      	lsrs	r4, r3
 800b082:	0023      	movs	r3, r4
}
 800b084:	0018      	movs	r0, r3
 800b086:	46bd      	mov	sp, r7
 800b088:	bdb0      	pop	{r4, r5, r7, pc}
 800b08a:	46c0      	nop			@ (mov r8, r8)
 800b08c:	0801c150 	.word	0x0801c150

0800b090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800b098:	2313      	movs	r3, #19
 800b09a:	18fb      	adds	r3, r7, r3
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0a0:	2312      	movs	r3, #18
 800b0a2:	18fb      	adds	r3, r7, r3
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	2380      	movs	r3, #128	@ 0x80
 800b0ae:	029b      	lsls	r3, r3, #10
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	d100      	bne.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800b0b4:	e0ad      	b.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0b6:	2011      	movs	r0, #17
 800b0b8:	183b      	adds	r3, r7, r0
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0be:	4b47      	ldr	r3, [pc, #284]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0c2:	2380      	movs	r3, #128	@ 0x80
 800b0c4:	055b      	lsls	r3, r3, #21
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	d110      	bne.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0ca:	4b44      	ldr	r3, [pc, #272]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0ce:	4b43      	ldr	r3, [pc, #268]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0d0:	2180      	movs	r1, #128	@ 0x80
 800b0d2:	0549      	lsls	r1, r1, #21
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b0d8:	4b40      	ldr	r3, [pc, #256]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0dc:	2380      	movs	r3, #128	@ 0x80
 800b0de:	055b      	lsls	r3, r3, #21
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	60bb      	str	r3, [r7, #8]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0e6:	183b      	adds	r3, r7, r0
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0ec:	4b3c      	ldr	r3, [pc, #240]	@ (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	4b3b      	ldr	r3, [pc, #236]	@ (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b0f2:	2180      	movs	r1, #128	@ 0x80
 800b0f4:	0049      	lsls	r1, r1, #1
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0fa:	f7fd ff81 	bl	8009000 <HAL_GetTick>
 800b0fe:	0003      	movs	r3, r0
 800b100:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b102:	e00b      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b104:	f7fd ff7c 	bl	8009000 <HAL_GetTick>
 800b108:	0002      	movs	r2, r0
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d904      	bls.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800b112:	2313      	movs	r3, #19
 800b114:	18fb      	adds	r3, r7, r3
 800b116:	2203      	movs	r2, #3
 800b118:	701a      	strb	r2, [r3, #0]
        break;
 800b11a:	e005      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b11c:	4b30      	ldr	r3, [pc, #192]	@ (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	2380      	movs	r3, #128	@ 0x80
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	4013      	ands	r3, r2
 800b126:	d0ed      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800b128:	2313      	movs	r3, #19
 800b12a:	18fb      	adds	r3, r7, r3
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d15e      	bne.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b132:	4b2a      	ldr	r3, [pc, #168]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b134:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b136:	23c0      	movs	r3, #192	@ 0xc0
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4013      	ands	r3, r2
 800b13c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d019      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d014      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b14e:	4b23      	ldr	r3, [pc, #140]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b152:	4a24      	ldr	r2, [pc, #144]	@ (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800b154:	4013      	ands	r3, r2
 800b156:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b158:	4b20      	ldr	r3, [pc, #128]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b15a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b15c:	4b1f      	ldr	r3, [pc, #124]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b15e:	2180      	movs	r1, #128	@ 0x80
 800b160:	0249      	lsls	r1, r1, #9
 800b162:	430a      	orrs	r2, r1
 800b164:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b166:	4b1d      	ldr	r3, [pc, #116]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b168:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b16a:	4b1c      	ldr	r3, [pc, #112]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b16c:	491e      	ldr	r1, [pc, #120]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800b16e:	400a      	ands	r2, r1
 800b170:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b172:	4b1a      	ldr	r3, [pc, #104]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2201      	movs	r2, #1
 800b17c:	4013      	ands	r3, r2
 800b17e:	d016      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b180:	f7fd ff3e 	bl	8009000 <HAL_GetTick>
 800b184:	0003      	movs	r3, r0
 800b186:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b188:	e00c      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b18a:	f7fd ff39 	bl	8009000 <HAL_GetTick>
 800b18e:	0002      	movs	r2, r0
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	4a15      	ldr	r2, [pc, #84]	@ (800b1ec <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d904      	bls.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800b19a:	2313      	movs	r3, #19
 800b19c:	18fb      	adds	r3, r7, r3
 800b19e:	2203      	movs	r2, #3
 800b1a0:	701a      	strb	r2, [r3, #0]
            break;
 800b1a2:	e004      	b.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b1a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	d0ed      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800b1ae:	2313      	movs	r3, #19
 800b1b0:	18fb      	adds	r3, r7, r3
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10a      	bne.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1b8:	4b08      	ldr	r3, [pc, #32]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b1ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1bc:	4a09      	ldr	r2, [pc, #36]	@ (800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800b1be:	4013      	ands	r3, r2
 800b1c0:	0019      	movs	r1, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1c6:	4b05      	ldr	r3, [pc, #20]	@ (800b1dc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b1cc:	e016      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b1ce:	2312      	movs	r3, #18
 800b1d0:	18fb      	adds	r3, r7, r3
 800b1d2:	2213      	movs	r2, #19
 800b1d4:	18ba      	adds	r2, r7, r2
 800b1d6:	7812      	ldrb	r2, [r2, #0]
 800b1d8:	701a      	strb	r2, [r3, #0]
 800b1da:	e00f      	b.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800b1dc:	40021000 	.word	0x40021000
 800b1e0:	40007000 	.word	0x40007000
 800b1e4:	fffffcff 	.word	0xfffffcff
 800b1e8:	fffeffff 	.word	0xfffeffff
 800b1ec:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f0:	2312      	movs	r3, #18
 800b1f2:	18fb      	adds	r3, r7, r3
 800b1f4:	2213      	movs	r2, #19
 800b1f6:	18ba      	adds	r2, r7, r2
 800b1f8:	7812      	ldrb	r2, [r2, #0]
 800b1fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b1fc:	2311      	movs	r3, #17
 800b1fe:	18fb      	adds	r3, r7, r3
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d105      	bne.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b206:	4bb6      	ldr	r3, [pc, #728]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b20a:	4bb5      	ldr	r3, [pc, #724]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b20c:	49b5      	ldr	r1, [pc, #724]	@ (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800b20e:	400a      	ands	r2, r1
 800b210:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2201      	movs	r2, #1
 800b218:	4013      	ands	r3, r2
 800b21a:	d009      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b21c:	4bb0      	ldr	r3, [pc, #704]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b220:	2203      	movs	r2, #3
 800b222:	4393      	bics	r3, r2
 800b224:	0019      	movs	r1, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	4bad      	ldr	r3, [pc, #692]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b22c:	430a      	orrs	r2, r1
 800b22e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2202      	movs	r2, #2
 800b236:	4013      	ands	r3, r2
 800b238:	d009      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b23a:	4ba9      	ldr	r3, [pc, #676]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b23c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b23e:	220c      	movs	r2, #12
 800b240:	4393      	bics	r3, r2
 800b242:	0019      	movs	r1, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689a      	ldr	r2, [r3, #8]
 800b248:	4ba5      	ldr	r3, [pc, #660]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b24a:	430a      	orrs	r2, r1
 800b24c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2204      	movs	r2, #4
 800b254:	4013      	ands	r3, r2
 800b256:	d009      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b258:	4ba1      	ldr	r3, [pc, #644]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b25a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b25c:	2230      	movs	r2, #48	@ 0x30
 800b25e:	4393      	bics	r3, r2
 800b260:	0019      	movs	r1, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	4b9e      	ldr	r3, [pc, #632]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b268:	430a      	orrs	r2, r1
 800b26a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2210      	movs	r2, #16
 800b272:	4013      	ands	r3, r2
 800b274:	d009      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b276:	4b9a      	ldr	r3, [pc, #616]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27a:	4a9b      	ldr	r2, [pc, #620]	@ (800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	0019      	movs	r1, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	4b96      	ldr	r3, [pc, #600]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b286:	430a      	orrs	r2, r1
 800b288:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	2380      	movs	r3, #128	@ 0x80
 800b290:	015b      	lsls	r3, r3, #5
 800b292:	4013      	ands	r3, r2
 800b294:	d009      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800b296:	4b92      	ldr	r3, [pc, #584]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b29a:	4a94      	ldr	r2, [pc, #592]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b29c:	4013      	ands	r3, r2
 800b29e:	0019      	movs	r1, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	695a      	ldr	r2, [r3, #20]
 800b2a4:	4b8e      	ldr	r3, [pc, #568]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	2380      	movs	r3, #128	@ 0x80
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	d009      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2b6:	4b8a      	ldr	r3, [pc, #552]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2ba:	4a8d      	ldr	r2, [pc, #564]	@ (800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	0019      	movs	r1, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b2c4:	4b86      	ldr	r3, [pc, #536]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	2380      	movs	r3, #128	@ 0x80
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	d009      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2d6:	4b82      	ldr	r3, [pc, #520]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2da:	4a86      	ldr	r2, [pc, #536]	@ (800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800b2dc:	4013      	ands	r3, r2
 800b2de:	0019      	movs	r1, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e4:	4b7e      	ldr	r3, [pc, #504]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	d009      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b2f4:	4b7a      	ldr	r3, [pc, #488]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2f8:	4a7f      	ldr	r2, [pc, #508]	@ (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	0019      	movs	r1, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699a      	ldr	r2, [r3, #24]
 800b302:	4b77      	ldr	r3, [pc, #476]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b304:	430a      	orrs	r2, r1
 800b306:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2240      	movs	r2, #64	@ 0x40
 800b30e:	4013      	ands	r3, r2
 800b310:	d009      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b312:	4b73      	ldr	r3, [pc, #460]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b316:	4a79      	ldr	r2, [pc, #484]	@ (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b318:	4013      	ands	r3, r2
 800b31a:	0019      	movs	r1, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	69da      	ldr	r2, [r3, #28]
 800b320:	4b6f      	ldr	r3, [pc, #444]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b322:	430a      	orrs	r2, r1
 800b324:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	2380      	movs	r3, #128	@ 0x80
 800b32c:	01db      	lsls	r3, r3, #7
 800b32e:	4013      	ands	r3, r2
 800b330:	d015      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b332:	4b6b      	ldr	r3, [pc, #428]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	0899      	lsrs	r1, r3, #2
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b33e:	4b68      	ldr	r3, [pc, #416]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b340:	430a      	orrs	r2, r1
 800b342:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b348:	2380      	movs	r3, #128	@ 0x80
 800b34a:	05db      	lsls	r3, r3, #23
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d106      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b350:	4b63      	ldr	r3, [pc, #396]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	4b62      	ldr	r3, [pc, #392]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b356:	2180      	movs	r1, #128	@ 0x80
 800b358:	0249      	lsls	r1, r1, #9
 800b35a:	430a      	orrs	r2, r1
 800b35c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	2380      	movs	r3, #128	@ 0x80
 800b364:	031b      	lsls	r3, r3, #12
 800b366:	4013      	ands	r3, r2
 800b368:	d009      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b36a:	4b5d      	ldr	r3, [pc, #372]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b36e:	2240      	movs	r2, #64	@ 0x40
 800b370:	4393      	bics	r3, r2
 800b372:	0019      	movs	r1, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b378:	4b59      	ldr	r3, [pc, #356]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b37a:	430a      	orrs	r2, r1
 800b37c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	2380      	movs	r3, #128	@ 0x80
 800b384:	039b      	lsls	r3, r3, #14
 800b386:	4013      	ands	r3, r2
 800b388:	d016      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800b38a:	4b55      	ldr	r3, [pc, #340]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b38e:	4a5c      	ldr	r2, [pc, #368]	@ (800b500 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b390:	4013      	ands	r3, r2
 800b392:	0019      	movs	r1, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b398:	4b51      	ldr	r3, [pc, #324]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b39a:	430a      	orrs	r2, r1
 800b39c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3a2:	2380      	movs	r3, #128	@ 0x80
 800b3a4:	03db      	lsls	r3, r3, #15
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d106      	bne.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b3aa:	4b4d      	ldr	r3, [pc, #308]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3ac:	68da      	ldr	r2, [r3, #12]
 800b3ae:	4b4c      	ldr	r3, [pc, #304]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3b0:	2180      	movs	r1, #128	@ 0x80
 800b3b2:	0449      	lsls	r1, r1, #17
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	2380      	movs	r3, #128	@ 0x80
 800b3be:	03db      	lsls	r3, r3, #15
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	d016      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800b3c4:	4b46      	ldr	r3, [pc, #280]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3c8:	4a4e      	ldr	r2, [pc, #312]	@ (800b504 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	0019      	movs	r1, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3d2:	4b43      	ldr	r3, [pc, #268]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3dc:	2380      	movs	r3, #128	@ 0x80
 800b3de:	045b      	lsls	r3, r3, #17
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d106      	bne.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b3e4:	4b3e      	ldr	r3, [pc, #248]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3e6:	68da      	ldr	r2, [r3, #12]
 800b3e8:	4b3d      	ldr	r3, [pc, #244]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3ea:	2180      	movs	r1, #128	@ 0x80
 800b3ec:	0449      	lsls	r1, r1, #17
 800b3ee:	430a      	orrs	r2, r1
 800b3f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	2380      	movs	r3, #128	@ 0x80
 800b3f8:	011b      	lsls	r3, r3, #4
 800b3fa:	4013      	ands	r3, r2
 800b3fc:	d014      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800b3fe:	4b38      	ldr	r3, [pc, #224]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b402:	2203      	movs	r2, #3
 800b404:	4393      	bics	r3, r2
 800b406:	0019      	movs	r1, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a1a      	ldr	r2, [r3, #32]
 800b40c:	4b34      	ldr	r3, [pc, #208]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b40e:	430a      	orrs	r2, r1
 800b410:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d106      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b41a:	4b31      	ldr	r3, [pc, #196]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	4b30      	ldr	r3, [pc, #192]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b420:	2180      	movs	r1, #128	@ 0x80
 800b422:	0249      	lsls	r1, r1, #9
 800b424:	430a      	orrs	r2, r1
 800b426:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	2380      	movs	r3, #128	@ 0x80
 800b42e:	019b      	lsls	r3, r3, #6
 800b430:	4013      	ands	r3, r2
 800b432:	d014      	beq.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800b434:	4b2a      	ldr	r3, [pc, #168]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b438:	220c      	movs	r2, #12
 800b43a:	4393      	bics	r3, r2
 800b43c:	0019      	movs	r1, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b442:	4b27      	ldr	r3, [pc, #156]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b444:	430a      	orrs	r2, r1
 800b446:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d106      	bne.n	800b45e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b450:	4b23      	ldr	r3, [pc, #140]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b452:	68da      	ldr	r2, [r3, #12]
 800b454:	4b22      	ldr	r3, [pc, #136]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b456:	2180      	movs	r1, #128	@ 0x80
 800b458:	0249      	lsls	r1, r1, #9
 800b45a:	430a      	orrs	r2, r1
 800b45c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	2380      	movs	r3, #128	@ 0x80
 800b464:	045b      	lsls	r3, r3, #17
 800b466:	4013      	ands	r3, r2
 800b468:	d016      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b46a:	4b1d      	ldr	r3, [pc, #116]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b46c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b46e:	4a22      	ldr	r2, [pc, #136]	@ (800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b470:	4013      	ands	r3, r2
 800b472:	0019      	movs	r1, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b478:	4b19      	ldr	r3, [pc, #100]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b47a:	430a      	orrs	r2, r1
 800b47c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b482:	2380      	movs	r3, #128	@ 0x80
 800b484:	019b      	lsls	r3, r3, #6
 800b486:	429a      	cmp	r2, r3
 800b488:	d106      	bne.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b48a:	4b15      	ldr	r3, [pc, #84]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b48c:	68da      	ldr	r2, [r3, #12]
 800b48e:	4b14      	ldr	r3, [pc, #80]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b490:	2180      	movs	r1, #128	@ 0x80
 800b492:	0449      	lsls	r1, r1, #17
 800b494:	430a      	orrs	r2, r1
 800b496:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	2380      	movs	r3, #128	@ 0x80
 800b49e:	049b      	lsls	r3, r3, #18
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	d016      	beq.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b4a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b4a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4a8:	4a10      	ldr	r2, [pc, #64]	@ (800b4ec <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	0019      	movs	r1, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4bc:	2380      	movs	r3, #128	@ 0x80
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d106      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b4c4:	4b06      	ldr	r3, [pc, #24]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	4b05      	ldr	r3, [pc, #20]	@ (800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b4ca:	2180      	movs	r1, #128	@ 0x80
 800b4cc:	0449      	lsls	r1, r1, #17
 800b4ce:	430a      	orrs	r2, r1
 800b4d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800b4d2:	2312      	movs	r3, #18
 800b4d4:	18fb      	adds	r3, r7, r3
 800b4d6:	781b      	ldrb	r3, [r3, #0]
}
 800b4d8:	0018      	movs	r0, r3
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	b006      	add	sp, #24
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	40021000 	.word	0x40021000
 800b4e4:	efffffff 	.word	0xefffffff
 800b4e8:	fffff3ff 	.word	0xfffff3ff
 800b4ec:	fffffcff 	.word	0xfffffcff
 800b4f0:	fff3ffff 	.word	0xfff3ffff
 800b4f4:	ffcfffff 	.word	0xffcfffff
 800b4f8:	ffffcfff 	.word	0xffffcfff
 800b4fc:	ffff3fff 	.word	0xffff3fff
 800b500:	ffbfffff 	.word	0xffbfffff
 800b504:	feffffff 	.word	0xfeffffff

0800b508 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b508:	b5b0      	push	{r4, r5, r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b510:	230f      	movs	r3, #15
 800b512:	18fb      	adds	r3, r7, r3
 800b514:	2201      	movs	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d100      	bne.n	800b520 <HAL_RTC_Init+0x18>
 800b51e:	e08c      	b.n	800b63a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2229      	movs	r2, #41	@ 0x29
 800b524:	5c9b      	ldrb	r3, [r3, r2]
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10b      	bne.n	800b544 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2228      	movs	r2, #40	@ 0x28
 800b530:	2100      	movs	r1, #0
 800b532:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2288      	movs	r2, #136	@ 0x88
 800b538:	0212      	lsls	r2, r2, #8
 800b53a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	0018      	movs	r0, r3
 800b540:	f7fc fcc4 	bl	8007ecc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2229      	movs	r2, #41	@ 0x29
 800b548:	2102      	movs	r1, #2
 800b54a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	2210      	movs	r2, #16
 800b554:	4013      	ands	r3, r2
 800b556:	2b10      	cmp	r3, #16
 800b558:	d062      	beq.n	800b620 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	22ca      	movs	r2, #202	@ 0xca
 800b560:	625a      	str	r2, [r3, #36]	@ 0x24
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2253      	movs	r2, #83	@ 0x53
 800b568:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b56a:	250f      	movs	r5, #15
 800b56c:	197c      	adds	r4, r7, r5
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	0018      	movs	r0, r3
 800b572:	f000 f891 	bl	800b698 <RTC_EnterInitMode>
 800b576:	0003      	movs	r3, r0
 800b578:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800b57a:	0028      	movs	r0, r5
 800b57c:	183b      	adds	r3, r7, r0
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d12c      	bne.n	800b5de <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	699a      	ldr	r2, [r3, #24]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	492e      	ldr	r1, [pc, #184]	@ (800b648 <HAL_RTC_Init+0x140>)
 800b590:	400a      	ands	r2, r1
 800b592:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6999      	ldr	r1, [r3, #24]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6912      	ldr	r2, [r2, #16]
 800b5ba:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	6919      	ldr	r1, [r3, #16]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	041a      	lsls	r2, r3, #16
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b5d0:	183c      	adds	r4, r7, r0
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0018      	movs	r0, r3
 800b5d6:	f000 f8a1 	bl	800b71c <RTC_ExitInitMode>
 800b5da:	0003      	movs	r3, r0
 800b5dc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800b5de:	230f      	movs	r3, #15
 800b5e0:	18fb      	adds	r3, r7, r3
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d116      	bne.n	800b616 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	699a      	ldr	r2, [r3, #24]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	00d2      	lsls	r2, r2, #3
 800b5f4:	08d2      	lsrs	r2, r2, #3
 800b5f6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6999      	ldr	r1, [r3, #24]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	431a      	orrs	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	431a      	orrs	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	430a      	orrs	r2, r1
 800b614:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	22ff      	movs	r2, #255	@ 0xff
 800b61c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b61e:	e003      	b.n	800b628 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b620:	230f      	movs	r3, #15
 800b622:	18fb      	adds	r3, r7, r3
 800b624:	2200      	movs	r2, #0
 800b626:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b628:	230f      	movs	r3, #15
 800b62a:	18fb      	adds	r3, r7, r3
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d103      	bne.n	800b63a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2229      	movs	r2, #41	@ 0x29
 800b636:	2101      	movs	r1, #1
 800b638:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800b63a:	230f      	movs	r3, #15
 800b63c:	18fb      	adds	r3, r7, r3
 800b63e:	781b      	ldrb	r3, [r3, #0]
}
 800b640:	0018      	movs	r0, r3
 800b642:	46bd      	mov	sp, r7
 800b644:	b004      	add	sp, #16
 800b646:	bdb0      	pop	{r4, r5, r7, pc}
 800b648:	fb8fffbf 	.word	0xfb8fffbf

0800b64c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a0e      	ldr	r2, [pc, #56]	@ (800b694 <HAL_RTC_WaitForSynchro+0x48>)
 800b65a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b65c:	f7fd fcd0 	bl	8009000 <HAL_GetTick>
 800b660:	0003      	movs	r3, r0
 800b662:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b664:	e00a      	b.n	800b67c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b666:	f7fd fccb 	bl	8009000 <HAL_GetTick>
 800b66a:	0002      	movs	r2, r0
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	23fa      	movs	r3, #250	@ 0xfa
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	429a      	cmp	r2, r3
 800b676:	d901      	bls.n	800b67c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e006      	b.n	800b68a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	2220      	movs	r2, #32
 800b684:	4013      	ands	r3, r2
 800b686:	d0ee      	beq.n	800b666 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	0018      	movs	r0, r3
 800b68c:	46bd      	mov	sp, r7
 800b68e:	b004      	add	sp, #16
 800b690:	bd80      	pop	{r7, pc}
 800b692:	46c0      	nop			@ (mov r8, r8)
 800b694:	0001005f 	.word	0x0001005f

0800b698 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800b6a0:	230f      	movs	r3, #15
 800b6a2:	18fb      	adds	r3, r7, r3
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	2240      	movs	r2, #64	@ 0x40
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	d12c      	bne.n	800b70e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68da      	ldr	r2, [r3, #12]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2180      	movs	r1, #128	@ 0x80
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b6c4:	f7fd fc9c 	bl	8009000 <HAL_GetTick>
 800b6c8:	0003      	movs	r3, r0
 800b6ca:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b6cc:	e014      	b.n	800b6f8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b6ce:	f7fd fc97 	bl	8009000 <HAL_GetTick>
 800b6d2:	0002      	movs	r2, r0
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	200f      	movs	r0, #15
 800b6da:	183b      	adds	r3, r7, r0
 800b6dc:	1839      	adds	r1, r7, r0
 800b6de:	7809      	ldrb	r1, [r1, #0]
 800b6e0:	7019      	strb	r1, [r3, #0]
 800b6e2:	23fa      	movs	r3, #250	@ 0xfa
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d906      	bls.n	800b6f8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800b6ea:	183b      	adds	r3, r7, r0
 800b6ec:	2203      	movs	r2, #3
 800b6ee:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2229      	movs	r2, #41	@ 0x29
 800b6f4:	2103      	movs	r1, #3
 800b6f6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	2240      	movs	r2, #64	@ 0x40
 800b700:	4013      	ands	r3, r2
 800b702:	d104      	bne.n	800b70e <RTC_EnterInitMode+0x76>
 800b704:	230f      	movs	r3, #15
 800b706:	18fb      	adds	r3, r7, r3
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d1df      	bne.n	800b6ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b70e:	230f      	movs	r3, #15
 800b710:	18fb      	adds	r3, r7, r3
 800b712:	781b      	ldrb	r3, [r3, #0]
}
 800b714:	0018      	movs	r0, r3
 800b716:	46bd      	mov	sp, r7
 800b718:	b004      	add	sp, #16
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b71c:	b590      	push	{r4, r7, lr}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b724:	240f      	movs	r4, #15
 800b726:	193b      	adds	r3, r7, r4
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b72c:	4b1c      	ldr	r3, [pc, #112]	@ (800b7a0 <RTC_ExitInitMode+0x84>)
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	4b1b      	ldr	r3, [pc, #108]	@ (800b7a0 <RTC_ExitInitMode+0x84>)
 800b732:	2180      	movs	r1, #128	@ 0x80
 800b734:	438a      	bics	r2, r1
 800b736:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b738:	4b19      	ldr	r3, [pc, #100]	@ (800b7a0 <RTC_ExitInitMode+0x84>)
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	2220      	movs	r2, #32
 800b73e:	4013      	ands	r3, r2
 800b740:	d10d      	bne.n	800b75e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	0018      	movs	r0, r3
 800b746:	f7ff ff81 	bl	800b64c <HAL_RTC_WaitForSynchro>
 800b74a:	1e03      	subs	r3, r0, #0
 800b74c:	d021      	beq.n	800b792 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2229      	movs	r2, #41	@ 0x29
 800b752:	2103      	movs	r1, #3
 800b754:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b756:	193b      	adds	r3, r7, r4
 800b758:	2203      	movs	r2, #3
 800b75a:	701a      	strb	r2, [r3, #0]
 800b75c:	e019      	b.n	800b792 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b75e:	4b10      	ldr	r3, [pc, #64]	@ (800b7a0 <RTC_ExitInitMode+0x84>)
 800b760:	699a      	ldr	r2, [r3, #24]
 800b762:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a0 <RTC_ExitInitMode+0x84>)
 800b764:	2120      	movs	r1, #32
 800b766:	438a      	bics	r2, r1
 800b768:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	0018      	movs	r0, r3
 800b76e:	f7ff ff6d 	bl	800b64c <HAL_RTC_WaitForSynchro>
 800b772:	1e03      	subs	r3, r0, #0
 800b774:	d007      	beq.n	800b786 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2229      	movs	r2, #41	@ 0x29
 800b77a:	2103      	movs	r1, #3
 800b77c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b77e:	230f      	movs	r3, #15
 800b780:	18fb      	adds	r3, r7, r3
 800b782:	2203      	movs	r2, #3
 800b784:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b786:	4b06      	ldr	r3, [pc, #24]	@ (800b7a0 <RTC_ExitInitMode+0x84>)
 800b788:	699a      	ldr	r2, [r3, #24]
 800b78a:	4b05      	ldr	r3, [pc, #20]	@ (800b7a0 <RTC_ExitInitMode+0x84>)
 800b78c:	2120      	movs	r1, #32
 800b78e:	430a      	orrs	r2, r1
 800b790:	619a      	str	r2, [r3, #24]
  }

  return status;
 800b792:	230f      	movs	r3, #15
 800b794:	18fb      	adds	r3, r7, r3
 800b796:	781b      	ldrb	r3, [r3, #0]
}
 800b798:	0018      	movs	r0, r3
 800b79a:	46bd      	mov	sp, r7
 800b79c:	b005      	add	sp, #20
 800b79e:	bd90      	pop	{r4, r7, pc}
 800b7a0:	40002800 	.word	0x40002800

0800b7a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e0a8      	b.n	800b908 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d109      	bne.n	800b7d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685a      	ldr	r2, [r3, #4]
 800b7c2:	2382      	movs	r3, #130	@ 0x82
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d009      	beq.n	800b7de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	61da      	str	r2, [r3, #28]
 800b7d0:	e005      	b.n	800b7de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	225d      	movs	r2, #93	@ 0x5d
 800b7e8:	5c9b      	ldrb	r3, [r3, r2]
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d107      	bne.n	800b800 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	225c      	movs	r2, #92	@ 0x5c
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f7fc fba4 	bl	8007f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	225d      	movs	r2, #93	@ 0x5d
 800b804:	2102      	movs	r1, #2
 800b806:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2140      	movs	r1, #64	@ 0x40
 800b814:	438a      	bics	r2, r1
 800b816:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	23e0      	movs	r3, #224	@ 0xe0
 800b81e:	00db      	lsls	r3, r3, #3
 800b820:	429a      	cmp	r2, r3
 800b822:	d902      	bls.n	800b82a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b824:	2300      	movs	r3, #0
 800b826:	60fb      	str	r3, [r7, #12]
 800b828:	e002      	b.n	800b830 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b82a:	2380      	movs	r3, #128	@ 0x80
 800b82c:	015b      	lsls	r3, r3, #5
 800b82e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	23f0      	movs	r3, #240	@ 0xf0
 800b836:	011b      	lsls	r3, r3, #4
 800b838:	429a      	cmp	r2, r3
 800b83a:	d008      	beq.n	800b84e <HAL_SPI_Init+0xaa>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68da      	ldr	r2, [r3, #12]
 800b840:	23e0      	movs	r3, #224	@ 0xe0
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	429a      	cmp	r2, r3
 800b846:	d002      	beq.n	800b84e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	2382      	movs	r3, #130	@ 0x82
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	401a      	ands	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6899      	ldr	r1, [r3, #8]
 800b85c:	2384      	movs	r3, #132	@ 0x84
 800b85e:	021b      	lsls	r3, r3, #8
 800b860:	400b      	ands	r3, r1
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	2102      	movs	r1, #2
 800b86a:	400b      	ands	r3, r1
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	2101      	movs	r1, #1
 800b874:	400b      	ands	r3, r1
 800b876:	431a      	orrs	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6999      	ldr	r1, [r3, #24]
 800b87c:	2380      	movs	r3, #128	@ 0x80
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	400b      	ands	r3, r1
 800b882:	431a      	orrs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	2138      	movs	r1, #56	@ 0x38
 800b88a:	400b      	ands	r3, r1
 800b88c:	431a      	orrs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	2180      	movs	r1, #128	@ 0x80
 800b894:	400b      	ands	r3, r1
 800b896:	431a      	orrs	r2, r3
 800b898:	0011      	movs	r1, r2
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b89e:	2380      	movs	r3, #128	@ 0x80
 800b8a0:	019b      	lsls	r3, r3, #6
 800b8a2:	401a      	ands	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	0c1b      	lsrs	r3, r3, #16
 800b8b2:	2204      	movs	r2, #4
 800b8b4:	401a      	ands	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ba:	2110      	movs	r1, #16
 800b8bc:	400b      	ands	r3, r1
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8c4:	2108      	movs	r1, #8
 800b8c6:	400b      	ands	r3, r1
 800b8c8:	431a      	orrs	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68d9      	ldr	r1, [r3, #12]
 800b8ce:	23f0      	movs	r3, #240	@ 0xf0
 800b8d0:	011b      	lsls	r3, r3, #4
 800b8d2:	400b      	ands	r3, r1
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	0011      	movs	r1, r2
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	2380      	movs	r3, #128	@ 0x80
 800b8dc:	015b      	lsls	r3, r3, #5
 800b8de:	401a      	ands	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	430a      	orrs	r2, r1
 800b8e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	69da      	ldr	r2, [r3, #28]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4907      	ldr	r1, [pc, #28]	@ (800b910 <HAL_SPI_Init+0x16c>)
 800b8f4:	400a      	ands	r2, r1
 800b8f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	225d      	movs	r2, #93	@ 0x5d
 800b902:	2101      	movs	r1, #1
 800b904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	0018      	movs	r0, r3
 800b90a:	46bd      	mov	sp, r7
 800b90c:	b004      	add	sp, #16
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	fffff7ff 	.word	0xfffff7ff

0800b914 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b088      	sub	sp, #32
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	1dbb      	adds	r3, r7, #6
 800b922:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b924:	231f      	movs	r3, #31
 800b926:	18fb      	adds	r3, r7, r3
 800b928:	2200      	movs	r2, #0
 800b92a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	225c      	movs	r2, #92	@ 0x5c
 800b930:	5c9b      	ldrb	r3, [r3, r2]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d101      	bne.n	800b93a <HAL_SPI_Transmit+0x26>
 800b936:	2302      	movs	r3, #2
 800b938:	e147      	b.n	800bbca <HAL_SPI_Transmit+0x2b6>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	225c      	movs	r2, #92	@ 0x5c
 800b93e:	2101      	movs	r1, #1
 800b940:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b942:	f7fd fb5d 	bl	8009000 <HAL_GetTick>
 800b946:	0003      	movs	r3, r0
 800b948:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b94a:	2316      	movs	r3, #22
 800b94c:	18fb      	adds	r3, r7, r3
 800b94e:	1dba      	adds	r2, r7, #6
 800b950:	8812      	ldrh	r2, [r2, #0]
 800b952:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	225d      	movs	r2, #93	@ 0x5d
 800b958:	5c9b      	ldrb	r3, [r3, r2]
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d004      	beq.n	800b96a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b960:	231f      	movs	r3, #31
 800b962:	18fb      	adds	r3, r7, r3
 800b964:	2202      	movs	r2, #2
 800b966:	701a      	strb	r2, [r3, #0]
    goto error;
 800b968:	e128      	b.n	800bbbc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <HAL_SPI_Transmit+0x64>
 800b970:	1dbb      	adds	r3, r7, #6
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b978:	231f      	movs	r3, #31
 800b97a:	18fb      	adds	r3, r7, r3
 800b97c:	2201      	movs	r2, #1
 800b97e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b980:	e11c      	b.n	800bbbc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	225d      	movs	r2, #93	@ 0x5d
 800b986:	2103      	movs	r1, #3
 800b988:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	1dba      	adds	r2, r7, #6
 800b99a:	8812      	ldrh	r2, [r2, #0]
 800b99c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	1dba      	adds	r2, r7, #6
 800b9a2:	8812      	ldrh	r2, [r2, #0]
 800b9a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2244      	movs	r2, #68	@ 0x44
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2246      	movs	r2, #70	@ 0x46
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	689a      	ldr	r2, [r3, #8]
 800b9cc:	2380      	movs	r3, #128	@ 0x80
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d110      	bne.n	800b9f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2140      	movs	r1, #64	@ 0x40
 800b9e0:	438a      	bics	r2, r1
 800b9e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2180      	movs	r1, #128	@ 0x80
 800b9f0:	01c9      	lsls	r1, r1, #7
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2240      	movs	r2, #64	@ 0x40
 800b9fe:	4013      	ands	r3, r2
 800ba00:	2b40      	cmp	r3, #64	@ 0x40
 800ba02:	d007      	beq.n	800ba14 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2140      	movs	r1, #64	@ 0x40
 800ba10:	430a      	orrs	r2, r1
 800ba12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	68da      	ldr	r2, [r3, #12]
 800ba18:	23e0      	movs	r3, #224	@ 0xe0
 800ba1a:	00db      	lsls	r3, r3, #3
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d952      	bls.n	800bac6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d004      	beq.n	800ba32 <HAL_SPI_Transmit+0x11e>
 800ba28:	2316      	movs	r3, #22
 800ba2a:	18fb      	adds	r3, r7, r3
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d143      	bne.n	800baba <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba36:	881a      	ldrh	r2, [r3, #0]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba42:	1c9a      	adds	r2, r3, #2
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba4c:	b29b      	uxth	r3, r3
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ba56:	e030      	b.n	800baba <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	4013      	ands	r3, r2
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d112      	bne.n	800ba8c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba6a:	881a      	ldrh	r2, [r3, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba76:	1c9a      	adds	r2, r3, #2
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	3b01      	subs	r3, #1
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ba8a:	e016      	b.n	800baba <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba8c:	f7fd fab8 	bl	8009000 <HAL_GetTick>
 800ba90:	0002      	movs	r2, r0
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	683a      	ldr	r2, [r7, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d802      	bhi.n	800baa2 <HAL_SPI_Transmit+0x18e>
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	d102      	bne.n	800baa8 <HAL_SPI_Transmit+0x194>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d108      	bne.n	800baba <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800baa8:	231f      	movs	r3, #31
 800baaa:	18fb      	adds	r3, r7, r3
 800baac:	2203      	movs	r2, #3
 800baae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	225d      	movs	r2, #93	@ 0x5d
 800bab4:	2101      	movs	r1, #1
 800bab6:	5499      	strb	r1, [r3, r2]
          goto error;
 800bab8:	e080      	b.n	800bbbc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800babe:	b29b      	uxth	r3, r3
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1c9      	bne.n	800ba58 <HAL_SPI_Transmit+0x144>
 800bac4:	e053      	b.n	800bb6e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d004      	beq.n	800bad8 <HAL_SPI_Transmit+0x1c4>
 800bace:	2316      	movs	r3, #22
 800bad0:	18fb      	adds	r3, r7, r3
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d145      	bne.n	800bb64 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	330c      	adds	r3, #12
 800bae2:	7812      	ldrb	r2, [r2, #0]
 800bae4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800bafe:	e031      	b.n	800bb64 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	2202      	movs	r2, #2
 800bb08:	4013      	ands	r3, r2
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d113      	bne.n	800bb36 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	330c      	adds	r3, #12
 800bb18:	7812      	ldrb	r2, [r2, #0]
 800bb1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bb34:	e016      	b.n	800bb64 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb36:	f7fd fa63 	bl	8009000 <HAL_GetTick>
 800bb3a:	0002      	movs	r2, r0
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d802      	bhi.n	800bb4c <HAL_SPI_Transmit+0x238>
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	d102      	bne.n	800bb52 <HAL_SPI_Transmit+0x23e>
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d108      	bne.n	800bb64 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800bb52:	231f      	movs	r3, #31
 800bb54:	18fb      	adds	r3, r7, r3
 800bb56:	2203      	movs	r2, #3
 800bb58:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	225d      	movs	r2, #93	@ 0x5d
 800bb5e:	2101      	movs	r1, #1
 800bb60:	5499      	strb	r1, [r3, r2]
          goto error;
 800bb62:	e02b      	b.n	800bbbc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1c8      	bne.n	800bb00 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	0018      	movs	r0, r3
 800bb76:	f000 f95d 	bl	800be34 <SPI_EndRxTxTransaction>
 800bb7a:	1e03      	subs	r3, r0, #0
 800bb7c:	d002      	beq.n	800bb84 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2220      	movs	r2, #32
 800bb82:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	613b      	str	r3, [r7, #16]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d004      	beq.n	800bbb4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800bbaa:	231f      	movs	r3, #31
 800bbac:	18fb      	adds	r3, r7, r3
 800bbae:	2201      	movs	r2, #1
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	e003      	b.n	800bbbc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	225d      	movs	r2, #93	@ 0x5d
 800bbb8:	2101      	movs	r1, #1
 800bbba:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	225c      	movs	r2, #92	@ 0x5c
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800bbc4:	231f      	movs	r3, #31
 800bbc6:	18fb      	adds	r3, r7, r3
 800bbc8:	781b      	ldrb	r3, [r3, #0]
}
 800bbca:	0018      	movs	r0, r3
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	b008      	add	sp, #32
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	603b      	str	r3, [r7, #0]
 800bbe0:	1dfb      	adds	r3, r7, #7
 800bbe2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bbe4:	f7fd fa0c 	bl	8009000 <HAL_GetTick>
 800bbe8:	0002      	movs	r2, r0
 800bbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbec:	1a9b      	subs	r3, r3, r2
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	18d3      	adds	r3, r2, r3
 800bbf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bbf4:	f7fd fa04 	bl	8009000 <HAL_GetTick>
 800bbf8:	0003      	movs	r3, r0
 800bbfa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bbfc:	4b3a      	ldr	r3, [pc, #232]	@ (800bce8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	015b      	lsls	r3, r3, #5
 800bc02:	0d1b      	lsrs	r3, r3, #20
 800bc04:	69fa      	ldr	r2, [r7, #28]
 800bc06:	4353      	muls	r3, r2
 800bc08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc0a:	e058      	b.n	800bcbe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	d055      	beq.n	800bcbe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bc12:	f7fd f9f5 	bl	8009000 <HAL_GetTick>
 800bc16:	0002      	movs	r2, r0
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	69fa      	ldr	r2, [r7, #28]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d902      	bls.n	800bc28 <SPI_WaitFlagStateUntilTimeout+0x54>
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d142      	bne.n	800bcae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	21e0      	movs	r1, #224	@ 0xe0
 800bc34:	438a      	bics	r2, r1
 800bc36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	2382      	movs	r3, #130	@ 0x82
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d113      	bne.n	800bc6c <SPI_WaitFlagStateUntilTimeout+0x98>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	689a      	ldr	r2, [r3, #8]
 800bc48:	2380      	movs	r3, #128	@ 0x80
 800bc4a:	021b      	lsls	r3, r3, #8
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d005      	beq.n	800bc5c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	2380      	movs	r3, #128	@ 0x80
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d107      	bne.n	800bc6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2140      	movs	r1, #64	@ 0x40
 800bc68:	438a      	bics	r2, r1
 800bc6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc70:	2380      	movs	r3, #128	@ 0x80
 800bc72:	019b      	lsls	r3, r3, #6
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d110      	bne.n	800bc9a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	491a      	ldr	r1, [pc, #104]	@ (800bcec <SPI_WaitFlagStateUntilTimeout+0x118>)
 800bc84:	400a      	ands	r2, r1
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2180      	movs	r1, #128	@ 0x80
 800bc94:	0189      	lsls	r1, r1, #6
 800bc96:	430a      	orrs	r2, r1
 800bc98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	225d      	movs	r2, #93	@ 0x5d
 800bc9e:	2101      	movs	r1, #1
 800bca0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	225c      	movs	r2, #92	@ 0x5c
 800bca6:	2100      	movs	r1, #0
 800bca8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e017      	b.n	800bcde <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	689b      	ldr	r3, [r3, #8]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	425a      	negs	r2, r3
 800bcce:	4153      	adcs	r3, r2
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	001a      	movs	r2, r3
 800bcd4:	1dfb      	adds	r3, r7, #7
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d197      	bne.n	800bc0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	0018      	movs	r0, r3
 800bce0:	46bd      	mov	sp, r7
 800bce2:	b008      	add	sp, #32
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	46c0      	nop			@ (mov r8, r8)
 800bce8:	20000004 	.word	0x20000004
 800bcec:	ffffdfff 	.word	0xffffdfff

0800bcf0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08a      	sub	sp, #40	@ 0x28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
 800bcfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bcfe:	2317      	movs	r3, #23
 800bd00:	18fb      	adds	r3, r7, r3
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bd06:	f7fd f97b 	bl	8009000 <HAL_GetTick>
 800bd0a:	0002      	movs	r2, r0
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0e:	1a9b      	subs	r3, r3, r2
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	18d3      	adds	r3, r2, r3
 800bd14:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800bd16:	f7fd f973 	bl	8009000 <HAL_GetTick>
 800bd1a:	0003      	movs	r3, r0
 800bd1c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	330c      	adds	r3, #12
 800bd24:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bd26:	4b41      	ldr	r3, [pc, #260]	@ (800be2c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	0013      	movs	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	189b      	adds	r3, r3, r2
 800bd30:	00da      	lsls	r2, r3, #3
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	0d1b      	lsrs	r3, r3, #20
 800bd36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd38:	4353      	muls	r3, r2
 800bd3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bd3c:	e068      	b.n	800be10 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	23c0      	movs	r3, #192	@ 0xc0
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d10a      	bne.n	800bd5e <SPI_WaitFifoStateUntilTimeout+0x6e>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d107      	bne.n	800bd5e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	2117      	movs	r1, #23
 800bd56:	187b      	adds	r3, r7, r1
 800bd58:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bd5a:	187b      	adds	r3, r7, r1
 800bd5c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	3301      	adds	r3, #1
 800bd62:	d055      	beq.n	800be10 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd64:	f7fd f94c 	bl	8009000 <HAL_GetTick>
 800bd68:	0002      	movs	r2, r0
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d902      	bls.n	800bd7a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800bd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d142      	bne.n	800be00 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	21e0      	movs	r1, #224	@ 0xe0
 800bd86:	438a      	bics	r2, r1
 800bd88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	2382      	movs	r3, #130	@ 0x82
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d113      	bne.n	800bdbe <SPI_WaitFifoStateUntilTimeout+0xce>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	689a      	ldr	r2, [r3, #8]
 800bd9a:	2380      	movs	r3, #128	@ 0x80
 800bd9c:	021b      	lsls	r3, r3, #8
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d005      	beq.n	800bdae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	689a      	ldr	r2, [r3, #8]
 800bda6:	2380      	movs	r3, #128	@ 0x80
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d107      	bne.n	800bdbe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2140      	movs	r1, #64	@ 0x40
 800bdba:	438a      	bics	r2, r1
 800bdbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdc2:	2380      	movs	r3, #128	@ 0x80
 800bdc4:	019b      	lsls	r3, r3, #6
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d110      	bne.n	800bdec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4916      	ldr	r1, [pc, #88]	@ (800be30 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800bdd6:	400a      	ands	r2, r1
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2180      	movs	r1, #128	@ 0x80
 800bde6:	0189      	lsls	r1, r1, #6
 800bde8:	430a      	orrs	r2, r1
 800bdea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	225d      	movs	r2, #93	@ 0x5d
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	225c      	movs	r2, #92	@ 0x5c
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bdfc:	2303      	movs	r3, #3
 800bdfe:	e010      	b.n	800be22 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	4013      	ands	r3, r2
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d18e      	bne.n	800bd3e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	0018      	movs	r0, r3
 800be24:	46bd      	mov	sp, r7
 800be26:	b00a      	add	sp, #40	@ 0x28
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	46c0      	nop			@ (mov r8, r8)
 800be2c:	20000004 	.word	0x20000004
 800be30:	ffffdfff 	.word	0xffffdfff

0800be34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af02      	add	r7, sp, #8
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	23c0      	movs	r3, #192	@ 0xc0
 800be44:	0159      	lsls	r1, r3, #5
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	0013      	movs	r3, r2
 800be4e:	2200      	movs	r2, #0
 800be50:	f7ff ff4e 	bl	800bcf0 <SPI_WaitFifoStateUntilTimeout>
 800be54:	1e03      	subs	r3, r0, #0
 800be56:	d007      	beq.n	800be68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be5c:	2220      	movs	r2, #32
 800be5e:	431a      	orrs	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e027      	b.n	800beb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	0013      	movs	r3, r2
 800be72:	2200      	movs	r2, #0
 800be74:	2180      	movs	r1, #128	@ 0x80
 800be76:	f7ff fead 	bl	800bbd4 <SPI_WaitFlagStateUntilTimeout>
 800be7a:	1e03      	subs	r3, r0, #0
 800be7c:	d007      	beq.n	800be8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be82:	2220      	movs	r2, #32
 800be84:	431a      	orrs	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e014      	b.n	800beb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	23c0      	movs	r3, #192	@ 0xc0
 800be92:	00d9      	lsls	r1, r3, #3
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	0013      	movs	r3, r2
 800be9c:	2200      	movs	r2, #0
 800be9e:	f7ff ff27 	bl	800bcf0 <SPI_WaitFifoStateUntilTimeout>
 800bea2:	1e03      	subs	r3, r0, #0
 800bea4:	d007      	beq.n	800beb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beaa:	2220      	movs	r2, #32
 800beac:	431a      	orrs	r2, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800beb2:	2303      	movs	r3, #3
 800beb4:	e000      	b.n	800beb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b004      	add	sp, #16
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e04a      	b.n	800bf68 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	223d      	movs	r2, #61	@ 0x3d
 800bed6:	5c9b      	ldrb	r3, [r3, r2]
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d107      	bne.n	800beee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	223c      	movs	r2, #60	@ 0x3c
 800bee2:	2100      	movs	r1, #0
 800bee4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	0018      	movs	r0, r3
 800beea:	f7fc f89b 	bl	8008024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	223d      	movs	r2, #61	@ 0x3d
 800bef2:	2102      	movs	r1, #2
 800bef4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	3304      	adds	r3, #4
 800befe:	0019      	movs	r1, r3
 800bf00:	0010      	movs	r0, r2
 800bf02:	f000 fb11 	bl	800c528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2248      	movs	r2, #72	@ 0x48
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	223e      	movs	r2, #62	@ 0x3e
 800bf12:	2101      	movs	r1, #1
 800bf14:	5499      	strb	r1, [r3, r2]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	223f      	movs	r2, #63	@ 0x3f
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	5499      	strb	r1, [r3, r2]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2240      	movs	r2, #64	@ 0x40
 800bf22:	2101      	movs	r1, #1
 800bf24:	5499      	strb	r1, [r3, r2]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2241      	movs	r2, #65	@ 0x41
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	5499      	strb	r1, [r3, r2]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2242      	movs	r2, #66	@ 0x42
 800bf32:	2101      	movs	r1, #1
 800bf34:	5499      	strb	r1, [r3, r2]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2243      	movs	r2, #67	@ 0x43
 800bf3a:	2101      	movs	r1, #1
 800bf3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2244      	movs	r2, #68	@ 0x44
 800bf42:	2101      	movs	r1, #1
 800bf44:	5499      	strb	r1, [r3, r2]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2245      	movs	r2, #69	@ 0x45
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	5499      	strb	r1, [r3, r2]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2246      	movs	r2, #70	@ 0x46
 800bf52:	2101      	movs	r1, #1
 800bf54:	5499      	strb	r1, [r3, r2]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2247      	movs	r2, #71	@ 0x47
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	223d      	movs	r2, #61	@ 0x3d
 800bf62:	2101      	movs	r1, #1
 800bf64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	0018      	movs	r0, r3
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	b002      	add	sp, #8
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e04a      	b.n	800c018 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	223d      	movs	r2, #61	@ 0x3d
 800bf86:	5c9b      	ldrb	r3, [r3, r2]
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d107      	bne.n	800bf9e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	223c      	movs	r2, #60	@ 0x3c
 800bf92:	2100      	movs	r1, #0
 800bf94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f000 f841 	bl	800c020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	223d      	movs	r2, #61	@ 0x3d
 800bfa2:	2102      	movs	r1, #2
 800bfa4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3304      	adds	r3, #4
 800bfae:	0019      	movs	r1, r3
 800bfb0:	0010      	movs	r0, r2
 800bfb2:	f000 fab9 	bl	800c528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2248      	movs	r2, #72	@ 0x48
 800bfba:	2101      	movs	r1, #1
 800bfbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	223e      	movs	r2, #62	@ 0x3e
 800bfc2:	2101      	movs	r1, #1
 800bfc4:	5499      	strb	r1, [r3, r2]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	223f      	movs	r2, #63	@ 0x3f
 800bfca:	2101      	movs	r1, #1
 800bfcc:	5499      	strb	r1, [r3, r2]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2240      	movs	r2, #64	@ 0x40
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	5499      	strb	r1, [r3, r2]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2241      	movs	r2, #65	@ 0x41
 800bfda:	2101      	movs	r1, #1
 800bfdc:	5499      	strb	r1, [r3, r2]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2242      	movs	r2, #66	@ 0x42
 800bfe2:	2101      	movs	r1, #1
 800bfe4:	5499      	strb	r1, [r3, r2]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2243      	movs	r2, #67	@ 0x43
 800bfea:	2101      	movs	r1, #1
 800bfec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2244      	movs	r2, #68	@ 0x44
 800bff2:	2101      	movs	r1, #1
 800bff4:	5499      	strb	r1, [r3, r2]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2245      	movs	r2, #69	@ 0x45
 800bffa:	2101      	movs	r1, #1
 800bffc:	5499      	strb	r1, [r3, r2]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2246      	movs	r2, #70	@ 0x46
 800c002:	2101      	movs	r1, #1
 800c004:	5499      	strb	r1, [r3, r2]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2247      	movs	r2, #71	@ 0x47
 800c00a:	2101      	movs	r1, #1
 800c00c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	223d      	movs	r2, #61	@ 0x3d
 800c012:	2101      	movs	r1, #1
 800c014:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	0018      	movs	r0, r3
 800c01a:	46bd      	mov	sp, r7
 800c01c:	b002      	add	sp, #8
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c028:	46c0      	nop			@ (mov r8, r8)
 800c02a:	46bd      	mov	sp, r7
 800c02c:	b002      	add	sp, #8
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d108      	bne.n	800c052 <HAL_TIM_PWM_Start+0x22>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	223e      	movs	r2, #62	@ 0x3e
 800c044:	5c9b      	ldrb	r3, [r3, r2]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	3b01      	subs	r3, #1
 800c04a:	1e5a      	subs	r2, r3, #1
 800c04c:	4193      	sbcs	r3, r2
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	e037      	b.n	800c0c2 <HAL_TIM_PWM_Start+0x92>
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2b04      	cmp	r3, #4
 800c056:	d108      	bne.n	800c06a <HAL_TIM_PWM_Start+0x3a>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	223f      	movs	r2, #63	@ 0x3f
 800c05c:	5c9b      	ldrb	r3, [r3, r2]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	3b01      	subs	r3, #1
 800c062:	1e5a      	subs	r2, r3, #1
 800c064:	4193      	sbcs	r3, r2
 800c066:	b2db      	uxtb	r3, r3
 800c068:	e02b      	b.n	800c0c2 <HAL_TIM_PWM_Start+0x92>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2b08      	cmp	r3, #8
 800c06e:	d108      	bne.n	800c082 <HAL_TIM_PWM_Start+0x52>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2240      	movs	r2, #64	@ 0x40
 800c074:	5c9b      	ldrb	r3, [r3, r2]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	3b01      	subs	r3, #1
 800c07a:	1e5a      	subs	r2, r3, #1
 800c07c:	4193      	sbcs	r3, r2
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	e01f      	b.n	800c0c2 <HAL_TIM_PWM_Start+0x92>
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b0c      	cmp	r3, #12
 800c086:	d108      	bne.n	800c09a <HAL_TIM_PWM_Start+0x6a>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2241      	movs	r2, #65	@ 0x41
 800c08c:	5c9b      	ldrb	r3, [r3, r2]
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	3b01      	subs	r3, #1
 800c092:	1e5a      	subs	r2, r3, #1
 800c094:	4193      	sbcs	r3, r2
 800c096:	b2db      	uxtb	r3, r3
 800c098:	e013      	b.n	800c0c2 <HAL_TIM_PWM_Start+0x92>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b10      	cmp	r3, #16
 800c09e:	d108      	bne.n	800c0b2 <HAL_TIM_PWM_Start+0x82>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2242      	movs	r2, #66	@ 0x42
 800c0a4:	5c9b      	ldrb	r3, [r3, r2]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	1e5a      	subs	r2, r3, #1
 800c0ac:	4193      	sbcs	r3, r2
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	e007      	b.n	800c0c2 <HAL_TIM_PWM_Start+0x92>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2243      	movs	r2, #67	@ 0x43
 800c0b6:	5c9b      	ldrb	r3, [r3, r2]
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	1e5a      	subs	r2, r3, #1
 800c0be:	4193      	sbcs	r3, r2
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e090      	b.n	800c1ec <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d104      	bne.n	800c0da <HAL_TIM_PWM_Start+0xaa>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	223e      	movs	r2, #62	@ 0x3e
 800c0d4:	2102      	movs	r1, #2
 800c0d6:	5499      	strb	r1, [r3, r2]
 800c0d8:	e023      	b.n	800c122 <HAL_TIM_PWM_Start+0xf2>
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	d104      	bne.n	800c0ea <HAL_TIM_PWM_Start+0xba>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	223f      	movs	r2, #63	@ 0x3f
 800c0e4:	2102      	movs	r1, #2
 800c0e6:	5499      	strb	r1, [r3, r2]
 800c0e8:	e01b      	b.n	800c122 <HAL_TIM_PWM_Start+0xf2>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b08      	cmp	r3, #8
 800c0ee:	d104      	bne.n	800c0fa <HAL_TIM_PWM_Start+0xca>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2240      	movs	r2, #64	@ 0x40
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	5499      	strb	r1, [r3, r2]
 800c0f8:	e013      	b.n	800c122 <HAL_TIM_PWM_Start+0xf2>
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b0c      	cmp	r3, #12
 800c0fe:	d104      	bne.n	800c10a <HAL_TIM_PWM_Start+0xda>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2241      	movs	r2, #65	@ 0x41
 800c104:	2102      	movs	r1, #2
 800c106:	5499      	strb	r1, [r3, r2]
 800c108:	e00b      	b.n	800c122 <HAL_TIM_PWM_Start+0xf2>
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	2b10      	cmp	r3, #16
 800c10e:	d104      	bne.n	800c11a <HAL_TIM_PWM_Start+0xea>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2242      	movs	r2, #66	@ 0x42
 800c114:	2102      	movs	r1, #2
 800c116:	5499      	strb	r1, [r3, r2]
 800c118:	e003      	b.n	800c122 <HAL_TIM_PWM_Start+0xf2>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2243      	movs	r2, #67	@ 0x43
 800c11e:	2102      	movs	r1, #2
 800c120:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	2201      	movs	r2, #1
 800c12a:	0018      	movs	r0, r3
 800c12c:	f000 fd58 	bl	800cbe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a2f      	ldr	r2, [pc, #188]	@ (800c1f4 <HAL_TIM_PWM_Start+0x1c4>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d00e      	beq.n	800c158 <HAL_TIM_PWM_Start+0x128>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a2e      	ldr	r2, [pc, #184]	@ (800c1f8 <HAL_TIM_PWM_Start+0x1c8>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d009      	beq.n	800c158 <HAL_TIM_PWM_Start+0x128>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a2c      	ldr	r2, [pc, #176]	@ (800c1fc <HAL_TIM_PWM_Start+0x1cc>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d004      	beq.n	800c158 <HAL_TIM_PWM_Start+0x128>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	4a2b      	ldr	r2, [pc, #172]	@ (800c200 <HAL_TIM_PWM_Start+0x1d0>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d101      	bne.n	800c15c <HAL_TIM_PWM_Start+0x12c>
 800c158:	2301      	movs	r3, #1
 800c15a:	e000      	b.n	800c15e <HAL_TIM_PWM_Start+0x12e>
 800c15c:	2300      	movs	r3, #0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d008      	beq.n	800c174 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2180      	movs	r1, #128	@ 0x80
 800c16e:	0209      	lsls	r1, r1, #8
 800c170:	430a      	orrs	r2, r1
 800c172:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a1e      	ldr	r2, [pc, #120]	@ (800c1f4 <HAL_TIM_PWM_Start+0x1c4>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d014      	beq.n	800c1a8 <HAL_TIM_PWM_Start+0x178>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	2380      	movs	r3, #128	@ 0x80
 800c184:	05db      	lsls	r3, r3, #23
 800c186:	429a      	cmp	r2, r3
 800c188:	d00e      	beq.n	800c1a8 <HAL_TIM_PWM_Start+0x178>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a1d      	ldr	r2, [pc, #116]	@ (800c204 <HAL_TIM_PWM_Start+0x1d4>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d009      	beq.n	800c1a8 <HAL_TIM_PWM_Start+0x178>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a1b      	ldr	r2, [pc, #108]	@ (800c208 <HAL_TIM_PWM_Start+0x1d8>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d004      	beq.n	800c1a8 <HAL_TIM_PWM_Start+0x178>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a15      	ldr	r2, [pc, #84]	@ (800c1f8 <HAL_TIM_PWM_Start+0x1c8>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d116      	bne.n	800c1d6 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	4a17      	ldr	r2, [pc, #92]	@ (800c20c <HAL_TIM_PWM_Start+0x1dc>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b06      	cmp	r3, #6
 800c1b8:	d016      	beq.n	800c1e8 <HAL_TIM_PWM_Start+0x1b8>
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	2380      	movs	r3, #128	@ 0x80
 800c1be:	025b      	lsls	r3, r3, #9
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d011      	beq.n	800c1e8 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1d4:	e008      	b.n	800c1e8 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	430a      	orrs	r2, r1
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	e000      	b.n	800c1ea <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	0018      	movs	r0, r3
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	b004      	add	sp, #16
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	40012c00 	.word	0x40012c00
 800c1f8:	40014000 	.word	0x40014000
 800c1fc:	40014400 	.word	0x40014400
 800c200:	40014800 	.word	0x40014800
 800c204:	40000400 	.word	0x40000400
 800c208:	40000800 	.word	0x40000800
 800c20c:	00010007 	.word	0x00010007

0800c210 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	2200      	movs	r2, #0
 800c222:	0018      	movs	r0, r3
 800c224:	f000 fcdc 	bl	800cbe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a37      	ldr	r2, [pc, #220]	@ (800c30c <HAL_TIM_PWM_Stop+0xfc>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d00e      	beq.n	800c250 <HAL_TIM_PWM_Stop+0x40>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a36      	ldr	r2, [pc, #216]	@ (800c310 <HAL_TIM_PWM_Stop+0x100>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d009      	beq.n	800c250 <HAL_TIM_PWM_Stop+0x40>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a34      	ldr	r2, [pc, #208]	@ (800c314 <HAL_TIM_PWM_Stop+0x104>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d004      	beq.n	800c250 <HAL_TIM_PWM_Stop+0x40>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a33      	ldr	r2, [pc, #204]	@ (800c318 <HAL_TIM_PWM_Stop+0x108>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d101      	bne.n	800c254 <HAL_TIM_PWM_Stop+0x44>
 800c250:	2301      	movs	r3, #1
 800c252:	e000      	b.n	800c256 <HAL_TIM_PWM_Stop+0x46>
 800c254:	2300      	movs	r3, #0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d013      	beq.n	800c282 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	4a2e      	ldr	r2, [pc, #184]	@ (800c31c <HAL_TIM_PWM_Stop+0x10c>)
 800c262:	4013      	ands	r3, r2
 800c264:	d10d      	bne.n	800c282 <HAL_TIM_PWM_Stop+0x72>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	6a1b      	ldr	r3, [r3, #32]
 800c26c:	4a2c      	ldr	r2, [pc, #176]	@ (800c320 <HAL_TIM_PWM_Stop+0x110>)
 800c26e:	4013      	ands	r3, r2
 800c270:	d107      	bne.n	800c282 <HAL_TIM_PWM_Stop+0x72>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4929      	ldr	r1, [pc, #164]	@ (800c324 <HAL_TIM_PWM_Stop+0x114>)
 800c27e:	400a      	ands	r2, r1
 800c280:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	4a24      	ldr	r2, [pc, #144]	@ (800c31c <HAL_TIM_PWM_Stop+0x10c>)
 800c28a:	4013      	ands	r3, r2
 800c28c:	d10d      	bne.n	800c2aa <HAL_TIM_PWM_Stop+0x9a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	4a22      	ldr	r2, [pc, #136]	@ (800c320 <HAL_TIM_PWM_Stop+0x110>)
 800c296:	4013      	ands	r3, r2
 800c298:	d107      	bne.n	800c2aa <HAL_TIM_PWM_Stop+0x9a>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	438a      	bics	r2, r1
 800c2a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d104      	bne.n	800c2ba <HAL_TIM_PWM_Stop+0xaa>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	223e      	movs	r2, #62	@ 0x3e
 800c2b4:	2101      	movs	r1, #1
 800c2b6:	5499      	strb	r1, [r3, r2]
 800c2b8:	e023      	b.n	800c302 <HAL_TIM_PWM_Stop+0xf2>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	2b04      	cmp	r3, #4
 800c2be:	d104      	bne.n	800c2ca <HAL_TIM_PWM_Stop+0xba>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	223f      	movs	r2, #63	@ 0x3f
 800c2c4:	2101      	movs	r1, #1
 800c2c6:	5499      	strb	r1, [r3, r2]
 800c2c8:	e01b      	b.n	800c302 <HAL_TIM_PWM_Stop+0xf2>
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b08      	cmp	r3, #8
 800c2ce:	d104      	bne.n	800c2da <HAL_TIM_PWM_Stop+0xca>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2240      	movs	r2, #64	@ 0x40
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	5499      	strb	r1, [r3, r2]
 800c2d8:	e013      	b.n	800c302 <HAL_TIM_PWM_Stop+0xf2>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b0c      	cmp	r3, #12
 800c2de:	d104      	bne.n	800c2ea <HAL_TIM_PWM_Stop+0xda>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2241      	movs	r2, #65	@ 0x41
 800c2e4:	2101      	movs	r1, #1
 800c2e6:	5499      	strb	r1, [r3, r2]
 800c2e8:	e00b      	b.n	800c302 <HAL_TIM_PWM_Stop+0xf2>
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b10      	cmp	r3, #16
 800c2ee:	d104      	bne.n	800c2fa <HAL_TIM_PWM_Stop+0xea>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2242      	movs	r2, #66	@ 0x42
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	5499      	strb	r1, [r3, r2]
 800c2f8:	e003      	b.n	800c302 <HAL_TIM_PWM_Stop+0xf2>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2243      	movs	r2, #67	@ 0x43
 800c2fe:	2101      	movs	r1, #1
 800c300:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	0018      	movs	r0, r3
 800c306:	46bd      	mov	sp, r7
 800c308:	b002      	add	sp, #8
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	40012c00 	.word	0x40012c00
 800c310:	40014000 	.word	0x40014000
 800c314:	40014400 	.word	0x40014400
 800c318:	40014800 	.word	0x40014800
 800c31c:	00001111 	.word	0x00001111
 800c320:	00000444 	.word	0x00000444
 800c324:	ffff7fff 	.word	0xffff7fff

0800c328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c334:	2317      	movs	r3, #23
 800c336:	18fb      	adds	r3, r7, r3
 800c338:	2200      	movs	r2, #0
 800c33a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	223c      	movs	r2, #60	@ 0x3c
 800c340:	5c9b      	ldrb	r3, [r3, r2]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d101      	bne.n	800c34a <HAL_TIM_PWM_ConfigChannel+0x22>
 800c346:	2302      	movs	r3, #2
 800c348:	e0e5      	b.n	800c516 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	223c      	movs	r2, #60	@ 0x3c
 800c34e:	2101      	movs	r1, #1
 800c350:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b14      	cmp	r3, #20
 800c356:	d900      	bls.n	800c35a <HAL_TIM_PWM_ConfigChannel+0x32>
 800c358:	e0d1      	b.n	800c4fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	009a      	lsls	r2, r3, #2
 800c35e:	4b70      	ldr	r3, [pc, #448]	@ (800c520 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800c360:	18d3      	adds	r3, r2, r3
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	0011      	movs	r1, r2
 800c36e:	0018      	movs	r0, r3
 800c370:	f000 f972 	bl	800c658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	699a      	ldr	r2, [r3, #24]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2108      	movs	r1, #8
 800c380:	430a      	orrs	r2, r1
 800c382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	699a      	ldr	r2, [r3, #24]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2104      	movs	r1, #4
 800c390:	438a      	bics	r2, r1
 800c392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6999      	ldr	r1, [r3, #24]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	691a      	ldr	r2, [r3, #16]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	619a      	str	r2, [r3, #24]
      break;
 800c3a6:	e0af      	b.n	800c508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	0011      	movs	r1, r2
 800c3b0:	0018      	movs	r0, r3
 800c3b2:	f000 f9db 	bl	800c76c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	699a      	ldr	r2, [r3, #24]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2180      	movs	r1, #128	@ 0x80
 800c3c2:	0109      	lsls	r1, r1, #4
 800c3c4:	430a      	orrs	r2, r1
 800c3c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	699a      	ldr	r2, [r3, #24]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4954      	ldr	r1, [pc, #336]	@ (800c524 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c3d4:	400a      	ands	r2, r1
 800c3d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6999      	ldr	r1, [r3, #24]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	021a      	lsls	r2, r3, #8
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	430a      	orrs	r2, r1
 800c3ea:	619a      	str	r2, [r3, #24]
      break;
 800c3ec:	e08c      	b.n	800c508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	0011      	movs	r1, r2
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	f000 fa3c 	bl	800c874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	69da      	ldr	r2, [r3, #28]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2108      	movs	r1, #8
 800c408:	430a      	orrs	r2, r1
 800c40a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	69da      	ldr	r2, [r3, #28]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2104      	movs	r1, #4
 800c418:	438a      	bics	r2, r1
 800c41a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	69d9      	ldr	r1, [r3, #28]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	691a      	ldr	r2, [r3, #16]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	61da      	str	r2, [r3, #28]
      break;
 800c42e:	e06b      	b.n	800c508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	0011      	movs	r1, r2
 800c438:	0018      	movs	r0, r3
 800c43a:	f000 faa3 	bl	800c984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	69da      	ldr	r2, [r3, #28]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2180      	movs	r1, #128	@ 0x80
 800c44a:	0109      	lsls	r1, r1, #4
 800c44c:	430a      	orrs	r2, r1
 800c44e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	69da      	ldr	r2, [r3, #28]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4932      	ldr	r1, [pc, #200]	@ (800c524 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c45c:	400a      	ands	r2, r1
 800c45e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	69d9      	ldr	r1, [r3, #28]
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	021a      	lsls	r2, r3, #8
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	61da      	str	r2, [r3, #28]
      break;
 800c474:	e048      	b.n	800c508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	0011      	movs	r1, r2
 800c47e:	0018      	movs	r0, r3
 800c480:	f000 faea 	bl	800ca58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2108      	movs	r1, #8
 800c490:	430a      	orrs	r2, r1
 800c492:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2104      	movs	r1, #4
 800c4a0:	438a      	bics	r2, r1
 800c4a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	691a      	ldr	r2, [r3, #16]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c4b6:	e027      	b.n	800c508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	0011      	movs	r1, r2
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	f000 fb29 	bl	800cb18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2180      	movs	r1, #128	@ 0x80
 800c4d2:	0109      	lsls	r1, r1, #4
 800c4d4:	430a      	orrs	r2, r1
 800c4d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4910      	ldr	r1, [pc, #64]	@ (800c524 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c4e4:	400a      	ands	r2, r1
 800c4e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	021a      	lsls	r2, r3, #8
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c4fc:	e004      	b.n	800c508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c4fe:	2317      	movs	r3, #23
 800c500:	18fb      	adds	r3, r7, r3
 800c502:	2201      	movs	r2, #1
 800c504:	701a      	strb	r2, [r3, #0]
      break;
 800c506:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	223c      	movs	r2, #60	@ 0x3c
 800c50c:	2100      	movs	r1, #0
 800c50e:	5499      	strb	r1, [r3, r2]

  return status;
 800c510:	2317      	movs	r3, #23
 800c512:	18fb      	adds	r3, r7, r3
 800c514:	781b      	ldrb	r3, [r3, #0]
}
 800c516:	0018      	movs	r0, r3
 800c518:	46bd      	mov	sp, r7
 800c51a:	b006      	add	sp, #24
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	46c0      	nop			@ (mov r8, r8)
 800c520:	0801c230 	.word	0x0801c230
 800c524:	fffffbff 	.word	0xfffffbff

0800c528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a3f      	ldr	r2, [pc, #252]	@ (800c638 <TIM_Base_SetConfig+0x110>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d00c      	beq.n	800c55a <TIM_Base_SetConfig+0x32>
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	2380      	movs	r3, #128	@ 0x80
 800c544:	05db      	lsls	r3, r3, #23
 800c546:	429a      	cmp	r2, r3
 800c548:	d007      	beq.n	800c55a <TIM_Base_SetConfig+0x32>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a3b      	ldr	r2, [pc, #236]	@ (800c63c <TIM_Base_SetConfig+0x114>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d003      	beq.n	800c55a <TIM_Base_SetConfig+0x32>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a3a      	ldr	r2, [pc, #232]	@ (800c640 <TIM_Base_SetConfig+0x118>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d108      	bne.n	800c56c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2270      	movs	r2, #112	@ 0x70
 800c55e:	4393      	bics	r3, r2
 800c560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a32      	ldr	r2, [pc, #200]	@ (800c638 <TIM_Base_SetConfig+0x110>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d01c      	beq.n	800c5ae <TIM_Base_SetConfig+0x86>
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	2380      	movs	r3, #128	@ 0x80
 800c578:	05db      	lsls	r3, r3, #23
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d017      	beq.n	800c5ae <TIM_Base_SetConfig+0x86>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a2e      	ldr	r2, [pc, #184]	@ (800c63c <TIM_Base_SetConfig+0x114>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d013      	beq.n	800c5ae <TIM_Base_SetConfig+0x86>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a2d      	ldr	r2, [pc, #180]	@ (800c640 <TIM_Base_SetConfig+0x118>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d00f      	beq.n	800c5ae <TIM_Base_SetConfig+0x86>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a2c      	ldr	r2, [pc, #176]	@ (800c644 <TIM_Base_SetConfig+0x11c>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d00b      	beq.n	800c5ae <TIM_Base_SetConfig+0x86>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a2b      	ldr	r2, [pc, #172]	@ (800c648 <TIM_Base_SetConfig+0x120>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d007      	beq.n	800c5ae <TIM_Base_SetConfig+0x86>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c64c <TIM_Base_SetConfig+0x124>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d003      	beq.n	800c5ae <TIM_Base_SetConfig+0x86>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a29      	ldr	r2, [pc, #164]	@ (800c650 <TIM_Base_SetConfig+0x128>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d108      	bne.n	800c5c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	4a28      	ldr	r2, [pc, #160]	@ (800c654 <TIM_Base_SetConfig+0x12c>)
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2280      	movs	r2, #128	@ 0x80
 800c5c4:	4393      	bics	r3, r2
 800c5c6:	001a      	movs	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	695b      	ldr	r3, [r3, #20]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a13      	ldr	r2, [pc, #76]	@ (800c638 <TIM_Base_SetConfig+0x110>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d00b      	beq.n	800c606 <TIM_Base_SetConfig+0xde>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a15      	ldr	r2, [pc, #84]	@ (800c648 <TIM_Base_SetConfig+0x120>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d007      	beq.n	800c606 <TIM_Base_SetConfig+0xde>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a14      	ldr	r2, [pc, #80]	@ (800c64c <TIM_Base_SetConfig+0x124>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d003      	beq.n	800c606 <TIM_Base_SetConfig+0xde>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a13      	ldr	r2, [pc, #76]	@ (800c650 <TIM_Base_SetConfig+0x128>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d103      	bne.n	800c60e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	691a      	ldr	r2, [r3, #16]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	2201      	movs	r2, #1
 800c61a:	4013      	ands	r3, r2
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d106      	bne.n	800c62e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	2201      	movs	r2, #1
 800c626:	4393      	bics	r3, r2
 800c628:	001a      	movs	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	611a      	str	r2, [r3, #16]
  }
}
 800c62e:	46c0      	nop			@ (mov r8, r8)
 800c630:	46bd      	mov	sp, r7
 800c632:	b004      	add	sp, #16
 800c634:	bd80      	pop	{r7, pc}
 800c636:	46c0      	nop			@ (mov r8, r8)
 800c638:	40012c00 	.word	0x40012c00
 800c63c:	40000400 	.word	0x40000400
 800c640:	40000800 	.word	0x40000800
 800c644:	40002000 	.word	0x40002000
 800c648:	40014000 	.word	0x40014000
 800c64c:	40014400 	.word	0x40014400
 800c650:	40014800 	.word	0x40014800
 800c654:	fffffcff 	.word	0xfffffcff

0800c658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6a1b      	ldr	r3, [r3, #32]
 800c66c:	2201      	movs	r2, #1
 800c66e:	4393      	bics	r3, r2
 800c670:	001a      	movs	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4a32      	ldr	r2, [pc, #200]	@ (800c750 <TIM_OC1_SetConfig+0xf8>)
 800c686:	4013      	ands	r3, r2
 800c688:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2203      	movs	r2, #3
 800c68e:	4393      	bics	r3, r2
 800c690:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	4313      	orrs	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	4393      	bics	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a28      	ldr	r2, [pc, #160]	@ (800c754 <TIM_OC1_SetConfig+0xfc>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00b      	beq.n	800c6ce <TIM_OC1_SetConfig+0x76>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a27      	ldr	r2, [pc, #156]	@ (800c758 <TIM_OC1_SetConfig+0x100>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d007      	beq.n	800c6ce <TIM_OC1_SetConfig+0x76>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a26      	ldr	r2, [pc, #152]	@ (800c75c <TIM_OC1_SetConfig+0x104>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d003      	beq.n	800c6ce <TIM_OC1_SetConfig+0x76>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a25      	ldr	r2, [pc, #148]	@ (800c760 <TIM_OC1_SetConfig+0x108>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d10c      	bne.n	800c6e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	4393      	bics	r3, r2
 800c6d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	697a      	ldr	r2, [r7, #20]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	2204      	movs	r2, #4
 800c6e4:	4393      	bics	r3, r2
 800c6e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c754 <TIM_OC1_SetConfig+0xfc>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d00b      	beq.n	800c708 <TIM_OC1_SetConfig+0xb0>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a19      	ldr	r2, [pc, #100]	@ (800c758 <TIM_OC1_SetConfig+0x100>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d007      	beq.n	800c708 <TIM_OC1_SetConfig+0xb0>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a18      	ldr	r2, [pc, #96]	@ (800c75c <TIM_OC1_SetConfig+0x104>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d003      	beq.n	800c708 <TIM_OC1_SetConfig+0xb0>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a17      	ldr	r2, [pc, #92]	@ (800c760 <TIM_OC1_SetConfig+0x108>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d111      	bne.n	800c72c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	4a16      	ldr	r2, [pc, #88]	@ (800c764 <TIM_OC1_SetConfig+0x10c>)
 800c70c:	4013      	ands	r3, r2
 800c70e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	4a15      	ldr	r2, [pc, #84]	@ (800c768 <TIM_OC1_SetConfig+0x110>)
 800c714:	4013      	ands	r3, r2
 800c716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	4313      	orrs	r3, r2
 800c720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	4313      	orrs	r3, r2
 800c72a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	693a      	ldr	r2, [r7, #16]
 800c730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	621a      	str	r2, [r3, #32]
}
 800c746:	46c0      	nop			@ (mov r8, r8)
 800c748:	46bd      	mov	sp, r7
 800c74a:	b006      	add	sp, #24
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	46c0      	nop			@ (mov r8, r8)
 800c750:	fffeff8f 	.word	0xfffeff8f
 800c754:	40012c00 	.word	0x40012c00
 800c758:	40014000 	.word	0x40014000
 800c75c:	40014400 	.word	0x40014400
 800c760:	40014800 	.word	0x40014800
 800c764:	fffffeff 	.word	0xfffffeff
 800c768:	fffffdff 	.word	0xfffffdff

0800c76c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	2210      	movs	r2, #16
 800c782:	4393      	bics	r3, r2
 800c784:	001a      	movs	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	4a2e      	ldr	r2, [pc, #184]	@ (800c854 <TIM_OC2_SetConfig+0xe8>)
 800c79a:	4013      	ands	r3, r2
 800c79c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c858 <TIM_OC2_SetConfig+0xec>)
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	021b      	lsls	r3, r3, #8
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	2220      	movs	r2, #32
 800c7b6:	4393      	bics	r3, r2
 800c7b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	011b      	lsls	r3, r3, #4
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a24      	ldr	r2, [pc, #144]	@ (800c85c <TIM_OC2_SetConfig+0xf0>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d10d      	bne.n	800c7ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2280      	movs	r2, #128	@ 0x80
 800c7d2:	4393      	bics	r3, r2
 800c7d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	011b      	lsls	r3, r3, #4
 800c7dc:	697a      	ldr	r2, [r7, #20]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2240      	movs	r2, #64	@ 0x40
 800c7e6:	4393      	bics	r3, r2
 800c7e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a1b      	ldr	r2, [pc, #108]	@ (800c85c <TIM_OC2_SetConfig+0xf0>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d00b      	beq.n	800c80a <TIM_OC2_SetConfig+0x9e>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4a1a      	ldr	r2, [pc, #104]	@ (800c860 <TIM_OC2_SetConfig+0xf4>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d007      	beq.n	800c80a <TIM_OC2_SetConfig+0x9e>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a19      	ldr	r2, [pc, #100]	@ (800c864 <TIM_OC2_SetConfig+0xf8>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d003      	beq.n	800c80a <TIM_OC2_SetConfig+0x9e>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a18      	ldr	r2, [pc, #96]	@ (800c868 <TIM_OC2_SetConfig+0xfc>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d113      	bne.n	800c832 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	4a17      	ldr	r2, [pc, #92]	@ (800c86c <TIM_OC2_SetConfig+0x100>)
 800c80e:	4013      	ands	r3, r2
 800c810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	4a16      	ldr	r2, [pc, #88]	@ (800c870 <TIM_OC2_SetConfig+0x104>)
 800c816:	4013      	ands	r3, r2
 800c818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	693a      	ldr	r2, [r7, #16]
 800c822:	4313      	orrs	r3, r2
 800c824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	4313      	orrs	r3, r2
 800c830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	621a      	str	r2, [r3, #32]
}
 800c84c:	46c0      	nop			@ (mov r8, r8)
 800c84e:	46bd      	mov	sp, r7
 800c850:	b006      	add	sp, #24
 800c852:	bd80      	pop	{r7, pc}
 800c854:	feff8fff 	.word	0xfeff8fff
 800c858:	fffffcff 	.word	0xfffffcff
 800c85c:	40012c00 	.word	0x40012c00
 800c860:	40014000 	.word	0x40014000
 800c864:	40014400 	.word	0x40014400
 800c868:	40014800 	.word	0x40014800
 800c86c:	fffffbff 	.word	0xfffffbff
 800c870:	fffff7ff 	.word	0xfffff7ff

0800c874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a1b      	ldr	r3, [r3, #32]
 800c882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	4a33      	ldr	r2, [pc, #204]	@ (800c958 <TIM_OC3_SetConfig+0xe4>)
 800c88a:	401a      	ands	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	69db      	ldr	r3, [r3, #28]
 800c89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4a2f      	ldr	r2, [pc, #188]	@ (800c95c <TIM_OC3_SetConfig+0xe8>)
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2203      	movs	r2, #3
 800c8a8:	4393      	bics	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	4a29      	ldr	r2, [pc, #164]	@ (800c960 <TIM_OC3_SetConfig+0xec>)
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	021b      	lsls	r3, r3, #8
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a25      	ldr	r2, [pc, #148]	@ (800c964 <TIM_OC3_SetConfig+0xf0>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d10d      	bne.n	800c8ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	4a24      	ldr	r2, [pc, #144]	@ (800c968 <TIM_OC3_SetConfig+0xf4>)
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	021b      	lsls	r3, r3, #8
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	4a20      	ldr	r2, [pc, #128]	@ (800c96c <TIM_OC3_SetConfig+0xf8>)
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a1c      	ldr	r2, [pc, #112]	@ (800c964 <TIM_OC3_SetConfig+0xf0>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d00b      	beq.n	800c90e <TIM_OC3_SetConfig+0x9a>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c970 <TIM_OC3_SetConfig+0xfc>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d007      	beq.n	800c90e <TIM_OC3_SetConfig+0x9a>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a1c      	ldr	r2, [pc, #112]	@ (800c974 <TIM_OC3_SetConfig+0x100>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d003      	beq.n	800c90e <TIM_OC3_SetConfig+0x9a>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a1b      	ldr	r2, [pc, #108]	@ (800c978 <TIM_OC3_SetConfig+0x104>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d113      	bne.n	800c936 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	4a1a      	ldr	r2, [pc, #104]	@ (800c97c <TIM_OC3_SetConfig+0x108>)
 800c912:	4013      	ands	r3, r2
 800c914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	4a19      	ldr	r2, [pc, #100]	@ (800c980 <TIM_OC3_SetConfig+0x10c>)
 800c91a:	4013      	ands	r3, r2
 800c91c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	011b      	lsls	r3, r3, #4
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	4313      	orrs	r3, r2
 800c928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	011b      	lsls	r3, r3, #4
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	4313      	orrs	r3, r2
 800c934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	685a      	ldr	r2, [r3, #4]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	697a      	ldr	r2, [r7, #20]
 800c94e:	621a      	str	r2, [r3, #32]
}
 800c950:	46c0      	nop			@ (mov r8, r8)
 800c952:	46bd      	mov	sp, r7
 800c954:	b006      	add	sp, #24
 800c956:	bd80      	pop	{r7, pc}
 800c958:	fffffeff 	.word	0xfffffeff
 800c95c:	fffeff8f 	.word	0xfffeff8f
 800c960:	fffffdff 	.word	0xfffffdff
 800c964:	40012c00 	.word	0x40012c00
 800c968:	fffff7ff 	.word	0xfffff7ff
 800c96c:	fffffbff 	.word	0xfffffbff
 800c970:	40014000 	.word	0x40014000
 800c974:	40014400 	.word	0x40014400
 800c978:	40014800 	.word	0x40014800
 800c97c:	ffffefff 	.word	0xffffefff
 800c980:	ffffdfff 	.word	0xffffdfff

0800c984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	4a26      	ldr	r2, [pc, #152]	@ (800ca34 <TIM_OC4_SetConfig+0xb0>)
 800c99a:	401a      	ands	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4a22      	ldr	r2, [pc, #136]	@ (800ca38 <TIM_OC4_SetConfig+0xb4>)
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4a21      	ldr	r2, [pc, #132]	@ (800ca3c <TIM_OC4_SetConfig+0xb8>)
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	021b      	lsls	r3, r3, #8
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	4a1d      	ldr	r2, [pc, #116]	@ (800ca40 <TIM_OC4_SetConfig+0xbc>)
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	031b      	lsls	r3, r3, #12
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a19      	ldr	r2, [pc, #100]	@ (800ca44 <TIM_OC4_SetConfig+0xc0>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d00b      	beq.n	800c9fc <TIM_OC4_SetConfig+0x78>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a18      	ldr	r2, [pc, #96]	@ (800ca48 <TIM_OC4_SetConfig+0xc4>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d007      	beq.n	800c9fc <TIM_OC4_SetConfig+0x78>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a17      	ldr	r2, [pc, #92]	@ (800ca4c <TIM_OC4_SetConfig+0xc8>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d003      	beq.n	800c9fc <TIM_OC4_SetConfig+0x78>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a16      	ldr	r2, [pc, #88]	@ (800ca50 <TIM_OC4_SetConfig+0xcc>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d109      	bne.n	800ca10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	4a15      	ldr	r2, [pc, #84]	@ (800ca54 <TIM_OC4_SetConfig+0xd0>)
 800ca00:	4013      	ands	r3, r2
 800ca02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	695b      	ldr	r3, [r3, #20]
 800ca08:	019b      	lsls	r3, r3, #6
 800ca0a:	697a      	ldr	r2, [r7, #20]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	697a      	ldr	r2, [r7, #20]
 800ca14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	685a      	ldr	r2, [r3, #4]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	693a      	ldr	r2, [r7, #16]
 800ca28:	621a      	str	r2, [r3, #32]
}
 800ca2a:	46c0      	nop			@ (mov r8, r8)
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	b006      	add	sp, #24
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	46c0      	nop			@ (mov r8, r8)
 800ca34:	ffffefff 	.word	0xffffefff
 800ca38:	feff8fff 	.word	0xfeff8fff
 800ca3c:	fffffcff 	.word	0xfffffcff
 800ca40:	ffffdfff 	.word	0xffffdfff
 800ca44:	40012c00 	.word	0x40012c00
 800ca48:	40014000 	.word	0x40014000
 800ca4c:	40014400 	.word	0x40014400
 800ca50:	40014800 	.word	0x40014800
 800ca54:	ffffbfff 	.word	0xffffbfff

0800ca58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a1b      	ldr	r3, [r3, #32]
 800ca6c:	4a23      	ldr	r2, [pc, #140]	@ (800cafc <TIM_OC5_SetConfig+0xa4>)
 800ca6e:	401a      	ands	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4a1f      	ldr	r2, [pc, #124]	@ (800cb00 <TIM_OC5_SetConfig+0xa8>)
 800ca84:	4013      	ands	r3, r2
 800ca86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	4a1b      	ldr	r2, [pc, #108]	@ (800cb04 <TIM_OC5_SetConfig+0xac>)
 800ca96:	4013      	ands	r3, r2
 800ca98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	041b      	lsls	r3, r3, #16
 800caa0:	693a      	ldr	r2, [r7, #16]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a17      	ldr	r2, [pc, #92]	@ (800cb08 <TIM_OC5_SetConfig+0xb0>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d00b      	beq.n	800cac6 <TIM_OC5_SetConfig+0x6e>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a16      	ldr	r2, [pc, #88]	@ (800cb0c <TIM_OC5_SetConfig+0xb4>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d007      	beq.n	800cac6 <TIM_OC5_SetConfig+0x6e>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a15      	ldr	r2, [pc, #84]	@ (800cb10 <TIM_OC5_SetConfig+0xb8>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d003      	beq.n	800cac6 <TIM_OC5_SetConfig+0x6e>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a14      	ldr	r2, [pc, #80]	@ (800cb14 <TIM_OC5_SetConfig+0xbc>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d109      	bne.n	800cada <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	4a0c      	ldr	r2, [pc, #48]	@ (800cafc <TIM_OC5_SetConfig+0xa4>)
 800caca:	4013      	ands	r3, r2
 800cacc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	695b      	ldr	r3, [r3, #20]
 800cad2:	021b      	lsls	r3, r3, #8
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	621a      	str	r2, [r3, #32]
}
 800caf4:	46c0      	nop			@ (mov r8, r8)
 800caf6:	46bd      	mov	sp, r7
 800caf8:	b006      	add	sp, #24
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	fffeffff 	.word	0xfffeffff
 800cb00:	fffeff8f 	.word	0xfffeff8f
 800cb04:	fffdffff 	.word	0xfffdffff
 800cb08:	40012c00 	.word	0x40012c00
 800cb0c:	40014000 	.word	0x40014000
 800cb10:	40014400 	.word	0x40014400
 800cb14:	40014800 	.word	0x40014800

0800cb18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a1b      	ldr	r3, [r3, #32]
 800cb2c:	4a24      	ldr	r2, [pc, #144]	@ (800cbc0 <TIM_OC6_SetConfig+0xa8>)
 800cb2e:	401a      	ands	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4a20      	ldr	r2, [pc, #128]	@ (800cbc4 <TIM_OC6_SetConfig+0xac>)
 800cb44:	4013      	ands	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	021b      	lsls	r3, r3, #8
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	4a1c      	ldr	r2, [pc, #112]	@ (800cbc8 <TIM_OC6_SetConfig+0xb0>)
 800cb58:	4013      	ands	r3, r2
 800cb5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	051b      	lsls	r3, r3, #20
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a18      	ldr	r2, [pc, #96]	@ (800cbcc <TIM_OC6_SetConfig+0xb4>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d00b      	beq.n	800cb88 <TIM_OC6_SetConfig+0x70>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a17      	ldr	r2, [pc, #92]	@ (800cbd0 <TIM_OC6_SetConfig+0xb8>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d007      	beq.n	800cb88 <TIM_OC6_SetConfig+0x70>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a16      	ldr	r2, [pc, #88]	@ (800cbd4 <TIM_OC6_SetConfig+0xbc>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d003      	beq.n	800cb88 <TIM_OC6_SetConfig+0x70>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a15      	ldr	r2, [pc, #84]	@ (800cbd8 <TIM_OC6_SetConfig+0xc0>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d109      	bne.n	800cb9c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	4a14      	ldr	r2, [pc, #80]	@ (800cbdc <TIM_OC6_SetConfig+0xc4>)
 800cb8c:	4013      	ands	r3, r2
 800cb8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	695b      	ldr	r3, [r3, #20]
 800cb94:	029b      	lsls	r3, r3, #10
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	621a      	str	r2, [r3, #32]
}
 800cbb6:	46c0      	nop			@ (mov r8, r8)
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	b006      	add	sp, #24
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	46c0      	nop			@ (mov r8, r8)
 800cbc0:	ffefffff 	.word	0xffefffff
 800cbc4:	feff8fff 	.word	0xfeff8fff
 800cbc8:	ffdfffff 	.word	0xffdfffff
 800cbcc:	40012c00 	.word	0x40012c00
 800cbd0:	40014000 	.word	0x40014000
 800cbd4:	40014400 	.word	0x40014400
 800cbd8:	40014800 	.word	0x40014800
 800cbdc:	fffbffff 	.word	0xfffbffff

0800cbe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	221f      	movs	r2, #31
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	409a      	lsls	r2, r3
 800cbf6:	0013      	movs	r3, r2
 800cbf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	43d2      	mvns	r2, r2
 800cc02:	401a      	ands	r2, r3
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6a1a      	ldr	r2, [r3, #32]
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	211f      	movs	r1, #31
 800cc10:	400b      	ands	r3, r1
 800cc12:	6879      	ldr	r1, [r7, #4]
 800cc14:	4099      	lsls	r1, r3
 800cc16:	000b      	movs	r3, r1
 800cc18:	431a      	orrs	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	621a      	str	r2, [r3, #32]
}
 800cc1e:	46c0      	nop			@ (mov r8, r8)
 800cc20:	46bd      	mov	sp, r7
 800cc22:	b006      	add	sp, #24
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc32:	2300      	movs	r3, #0
 800cc34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	223c      	movs	r2, #60	@ 0x3c
 800cc3a:	5c9b      	ldrb	r3, [r3, r2]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d101      	bne.n	800cc44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc40:	2302      	movs	r3, #2
 800cc42:	e06f      	b.n	800cd24 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	223c      	movs	r2, #60	@ 0x3c
 800cc48:	2101      	movs	r1, #1
 800cc4a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	22ff      	movs	r2, #255	@ 0xff
 800cc50:	4393      	bics	r3, r2
 800cc52:	001a      	movs	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	4313      	orrs	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	4a33      	ldr	r2, [pc, #204]	@ (800cd2c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800cc60:	401a      	ands	r2, r3
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4a30      	ldr	r2, [pc, #192]	@ (800cd30 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800cc6e:	401a      	ands	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4a2e      	ldr	r2, [pc, #184]	@ (800cd34 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800cc7c:	401a      	ands	r2, r3
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4313      	orrs	r3, r2
 800cc84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	4a2b      	ldr	r2, [pc, #172]	@ (800cd38 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800cc8a:	401a      	ands	r2, r3
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4a29      	ldr	r2, [pc, #164]	@ (800cd3c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800cc98:	401a      	ands	r2, r3
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4a26      	ldr	r2, [pc, #152]	@ (800cd40 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800cca6:	401a      	ands	r2, r3
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccac:	4313      	orrs	r3, r2
 800ccae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4a24      	ldr	r2, [pc, #144]	@ (800cd44 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ccb4:	401a      	ands	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	041b      	lsls	r3, r3, #16
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	4a21      	ldr	r2, [pc, #132]	@ (800cd48 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ccc4:	401a      	ands	r2, r3
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a1e      	ldr	r2, [pc, #120]	@ (800cd4c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d11c      	bne.n	800cd12 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	4a1d      	ldr	r2, [pc, #116]	@ (800cd50 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800ccdc:	401a      	ands	r2, r3
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cce2:	051b      	lsls	r3, r3, #20
 800cce4:	4313      	orrs	r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4a1a      	ldr	r2, [pc, #104]	@ (800cd54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800ccec:	401a      	ands	r2, r3
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	4a17      	ldr	r2, [pc, #92]	@ (800cd58 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800ccfa:	401a      	ands	r2, r3
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd00:	4313      	orrs	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4a15      	ldr	r2, [pc, #84]	@ (800cd5c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800cd08:	401a      	ands	r2, r3
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	223c      	movs	r2, #60	@ 0x3c
 800cd1e:	2100      	movs	r1, #0
 800cd20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	0018      	movs	r0, r3
 800cd26:	46bd      	mov	sp, r7
 800cd28:	b004      	add	sp, #16
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	fffffcff 	.word	0xfffffcff
 800cd30:	fffffbff 	.word	0xfffffbff
 800cd34:	fffff7ff 	.word	0xfffff7ff
 800cd38:	ffffefff 	.word	0xffffefff
 800cd3c:	ffffdfff 	.word	0xffffdfff
 800cd40:	ffffbfff 	.word	0xffffbfff
 800cd44:	fff0ffff 	.word	0xfff0ffff
 800cd48:	efffffff 	.word	0xefffffff
 800cd4c:	40012c00 	.word	0x40012c00
 800cd50:	ff0fffff 	.word	0xff0fffff
 800cd54:	feffffff 	.word	0xfeffffff
 800cd58:	fdffffff 	.word	0xfdffffff
 800cd5c:	dfffffff 	.word	0xdfffffff

0800cd60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e046      	b.n	800ce00 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2288      	movs	r2, #136	@ 0x88
 800cd76:	589b      	ldr	r3, [r3, r2]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d107      	bne.n	800cd8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2284      	movs	r2, #132	@ 0x84
 800cd80:	2100      	movs	r1, #0
 800cd82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	0018      	movs	r0, r3
 800cd88:	f7fb f9a8 	bl	80080dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2288      	movs	r2, #136	@ 0x88
 800cd90:	2124      	movs	r1, #36	@ 0x24
 800cd92:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2101      	movs	r1, #1
 800cda0:	438a      	bics	r2, r1
 800cda2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	0018      	movs	r0, r3
 800cdb0:	f000 fd0c 	bl	800d7cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	0018      	movs	r0, r3
 800cdb8:	f000 f9b2 	bl	800d120 <UART_SetConfig>
 800cdbc:	0003      	movs	r3, r0
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d101      	bne.n	800cdc6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e01c      	b.n	800ce00 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	490d      	ldr	r1, [pc, #52]	@ (800ce08 <HAL_UART_Init+0xa8>)
 800cdd2:	400a      	ands	r2, r1
 800cdd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	689a      	ldr	r2, [r3, #8]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	212a      	movs	r1, #42	@ 0x2a
 800cde2:	438a      	bics	r2, r1
 800cde4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	f000 fd9b 	bl	800d934 <UART_CheckIdleState>
 800cdfe:	0003      	movs	r3, r0
}
 800ce00:	0018      	movs	r0, r3
 800ce02:	46bd      	mov	sp, r7
 800ce04:	b002      	add	sp, #8
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	ffffb7ff 	.word	0xffffb7ff

0800ce0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b08a      	sub	sp, #40	@ 0x28
 800ce10:	af02      	add	r7, sp, #8
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	603b      	str	r3, [r7, #0]
 800ce18:	1dbb      	adds	r3, r7, #6
 800ce1a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2288      	movs	r2, #136	@ 0x88
 800ce20:	589b      	ldr	r3, [r3, r2]
 800ce22:	2b20      	cmp	r3, #32
 800ce24:	d000      	beq.n	800ce28 <HAL_UART_Transmit+0x1c>
 800ce26:	e090      	b.n	800cf4a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d003      	beq.n	800ce36 <HAL_UART_Transmit+0x2a>
 800ce2e:	1dbb      	adds	r3, r7, #6
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	e088      	b.n	800cf4c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	689a      	ldr	r2, [r3, #8]
 800ce3e:	2380      	movs	r3, #128	@ 0x80
 800ce40:	015b      	lsls	r3, r3, #5
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d109      	bne.n	800ce5a <HAL_UART_Transmit+0x4e>
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d105      	bne.n	800ce5a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	2201      	movs	r2, #1
 800ce52:	4013      	ands	r3, r2
 800ce54:	d001      	beq.n	800ce5a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	e078      	b.n	800cf4c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2290      	movs	r2, #144	@ 0x90
 800ce5e:	2100      	movs	r1, #0
 800ce60:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2288      	movs	r2, #136	@ 0x88
 800ce66:	2121      	movs	r1, #33	@ 0x21
 800ce68:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce6a:	f7fc f8c9 	bl	8009000 <HAL_GetTick>
 800ce6e:	0003      	movs	r3, r0
 800ce70:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	1dba      	adds	r2, r7, #6
 800ce76:	2154      	movs	r1, #84	@ 0x54
 800ce78:	8812      	ldrh	r2, [r2, #0]
 800ce7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	1dba      	adds	r2, r7, #6
 800ce80:	2156      	movs	r1, #86	@ 0x56
 800ce82:	8812      	ldrh	r2, [r2, #0]
 800ce84:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	689a      	ldr	r2, [r3, #8]
 800ce8a:	2380      	movs	r3, #128	@ 0x80
 800ce8c:	015b      	lsls	r3, r3, #5
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d108      	bne.n	800cea4 <HAL_UART_Transmit+0x98>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d104      	bne.n	800cea4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	61bb      	str	r3, [r7, #24]
 800cea2:	e003      	b.n	800ceac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ceac:	e030      	b.n	800cf10 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	0013      	movs	r3, r2
 800ceb8:	2200      	movs	r2, #0
 800ceba:	2180      	movs	r1, #128	@ 0x80
 800cebc:	f000 fde4 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800cec0:	1e03      	subs	r3, r0, #0
 800cec2:	d005      	beq.n	800ced0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2288      	movs	r2, #136	@ 0x88
 800cec8:	2120      	movs	r1, #32
 800ceca:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cecc:	2303      	movs	r3, #3
 800cece:	e03d      	b.n	800cf4c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10b      	bne.n	800ceee <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	001a      	movs	r2, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	05d2      	lsls	r2, r2, #23
 800cee2:	0dd2      	lsrs	r2, r2, #23
 800cee4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	3302      	adds	r3, #2
 800ceea:	61bb      	str	r3, [r7, #24]
 800ceec:	e007      	b.n	800cefe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	781a      	ldrb	r2, [r3, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	3301      	adds	r3, #1
 800cefc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2256      	movs	r2, #86	@ 0x56
 800cf02:	5a9b      	ldrh	r3, [r3, r2]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	3b01      	subs	r3, #1
 800cf08:	b299      	uxth	r1, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2256      	movs	r2, #86	@ 0x56
 800cf0e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2256      	movs	r2, #86	@ 0x56
 800cf14:	5a9b      	ldrh	r3, [r3, r2]
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d1c8      	bne.n	800ceae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf1c:	697a      	ldr	r2, [r7, #20]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	0013      	movs	r3, r2
 800cf26:	2200      	movs	r2, #0
 800cf28:	2140      	movs	r1, #64	@ 0x40
 800cf2a:	f000 fdad 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800cf2e:	1e03      	subs	r3, r0, #0
 800cf30:	d005      	beq.n	800cf3e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2288      	movs	r2, #136	@ 0x88
 800cf36:	2120      	movs	r1, #32
 800cf38:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e006      	b.n	800cf4c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2288      	movs	r2, #136	@ 0x88
 800cf42:	2120      	movs	r1, #32
 800cf44:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	e000      	b.n	800cf4c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800cf4a:	2302      	movs	r3, #2
  }
}
 800cf4c:	0018      	movs	r0, r3
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	b008      	add	sp, #32
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	@ 0x28
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	603b      	str	r3, [r7, #0]
 800cf60:	1dbb      	adds	r3, r7, #6
 800cf62:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	228c      	movs	r2, #140	@ 0x8c
 800cf68:	589b      	ldr	r3, [r3, r2]
 800cf6a:	2b20      	cmp	r3, #32
 800cf6c:	d000      	beq.n	800cf70 <HAL_UART_Receive+0x1c>
 800cf6e:	e0d0      	b.n	800d112 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <HAL_UART_Receive+0x2a>
 800cf76:	1dbb      	adds	r3, r7, #6
 800cf78:	881b      	ldrh	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e0c8      	b.n	800d114 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	689a      	ldr	r2, [r3, #8]
 800cf86:	2380      	movs	r3, #128	@ 0x80
 800cf88:	015b      	lsls	r3, r3, #5
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d109      	bne.n	800cfa2 <HAL_UART_Receive+0x4e>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d105      	bne.n	800cfa2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	d001      	beq.n	800cfa2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e0b8      	b.n	800d114 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2290      	movs	r2, #144	@ 0x90
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	228c      	movs	r2, #140	@ 0x8c
 800cfae:	2122      	movs	r1, #34	@ 0x22
 800cfb0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfb8:	f7fc f822 	bl	8009000 <HAL_GetTick>
 800cfbc:	0003      	movs	r3, r0
 800cfbe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	1dba      	adds	r2, r7, #6
 800cfc4:	215c      	movs	r1, #92	@ 0x5c
 800cfc6:	8812      	ldrh	r2, [r2, #0]
 800cfc8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	1dba      	adds	r2, r7, #6
 800cfce:	215e      	movs	r1, #94	@ 0x5e
 800cfd0:	8812      	ldrh	r2, [r2, #0]
 800cfd2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	689a      	ldr	r2, [r3, #8]
 800cfd8:	2380      	movs	r3, #128	@ 0x80
 800cfda:	015b      	lsls	r3, r3, #5
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d10d      	bne.n	800cffc <HAL_UART_Receive+0xa8>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d104      	bne.n	800cff2 <HAL_UART_Receive+0x9e>
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2260      	movs	r2, #96	@ 0x60
 800cfec:	494b      	ldr	r1, [pc, #300]	@ (800d11c <HAL_UART_Receive+0x1c8>)
 800cfee:	5299      	strh	r1, [r3, r2]
 800cff0:	e02e      	b.n	800d050 <HAL_UART_Receive+0xfc>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2260      	movs	r2, #96	@ 0x60
 800cff6:	21ff      	movs	r1, #255	@ 0xff
 800cff8:	5299      	strh	r1, [r3, r2]
 800cffa:	e029      	b.n	800d050 <HAL_UART_Receive+0xfc>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10d      	bne.n	800d020 <HAL_UART_Receive+0xcc>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d104      	bne.n	800d016 <HAL_UART_Receive+0xc2>
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2260      	movs	r2, #96	@ 0x60
 800d010:	21ff      	movs	r1, #255	@ 0xff
 800d012:	5299      	strh	r1, [r3, r2]
 800d014:	e01c      	b.n	800d050 <HAL_UART_Receive+0xfc>
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2260      	movs	r2, #96	@ 0x60
 800d01a:	217f      	movs	r1, #127	@ 0x7f
 800d01c:	5299      	strh	r1, [r3, r2]
 800d01e:	e017      	b.n	800d050 <HAL_UART_Receive+0xfc>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	689a      	ldr	r2, [r3, #8]
 800d024:	2380      	movs	r3, #128	@ 0x80
 800d026:	055b      	lsls	r3, r3, #21
 800d028:	429a      	cmp	r2, r3
 800d02a:	d10d      	bne.n	800d048 <HAL_UART_Receive+0xf4>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d104      	bne.n	800d03e <HAL_UART_Receive+0xea>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2260      	movs	r2, #96	@ 0x60
 800d038:	217f      	movs	r1, #127	@ 0x7f
 800d03a:	5299      	strh	r1, [r3, r2]
 800d03c:	e008      	b.n	800d050 <HAL_UART_Receive+0xfc>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2260      	movs	r2, #96	@ 0x60
 800d042:	213f      	movs	r1, #63	@ 0x3f
 800d044:	5299      	strh	r1, [r3, r2]
 800d046:	e003      	b.n	800d050 <HAL_UART_Receive+0xfc>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2260      	movs	r2, #96	@ 0x60
 800d04c:	2100      	movs	r1, #0
 800d04e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800d050:	2312      	movs	r3, #18
 800d052:	18fb      	adds	r3, r7, r3
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	2160      	movs	r1, #96	@ 0x60
 800d058:	5a52      	ldrh	r2, [r2, r1]
 800d05a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	689a      	ldr	r2, [r3, #8]
 800d060:	2380      	movs	r3, #128	@ 0x80
 800d062:	015b      	lsls	r3, r3, #5
 800d064:	429a      	cmp	r2, r3
 800d066:	d108      	bne.n	800d07a <HAL_UART_Receive+0x126>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d104      	bne.n	800d07a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800d070:	2300      	movs	r3, #0
 800d072:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	61bb      	str	r3, [r7, #24]
 800d078:	e003      	b.n	800d082 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d07e:	2300      	movs	r3, #0
 800d080:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d082:	e03a      	b.n	800d0fa <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	0013      	movs	r3, r2
 800d08e:	2200      	movs	r2, #0
 800d090:	2120      	movs	r1, #32
 800d092:	f000 fcf9 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800d096:	1e03      	subs	r3, r0, #0
 800d098:	d005      	beq.n	800d0a6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	228c      	movs	r2, #140	@ 0x8c
 800d09e:	2120      	movs	r1, #32
 800d0a0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	e036      	b.n	800d114 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10e      	bne.n	800d0ca <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	2212      	movs	r2, #18
 800d0b6:	18ba      	adds	r2, r7, r2
 800d0b8:	8812      	ldrh	r2, [r2, #0]
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	3302      	adds	r3, #2
 800d0c6:	61bb      	str	r3, [r7, #24]
 800d0c8:	e00e      	b.n	800d0e8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d0:	b2db      	uxtb	r3, r3
 800d0d2:	2212      	movs	r2, #18
 800d0d4:	18ba      	adds	r2, r7, r2
 800d0d6:	8812      	ldrh	r2, [r2, #0]
 800d0d8:	b2d2      	uxtb	r2, r2
 800d0da:	4013      	ands	r3, r2
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	225e      	movs	r2, #94	@ 0x5e
 800d0ec:	5a9b      	ldrh	r3, [r3, r2]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	b299      	uxth	r1, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	225e      	movs	r2, #94	@ 0x5e
 800d0f8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	225e      	movs	r2, #94	@ 0x5e
 800d0fe:	5a9b      	ldrh	r3, [r3, r2]
 800d100:	b29b      	uxth	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1be      	bne.n	800d084 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	228c      	movs	r2, #140	@ 0x8c
 800d10a:	2120      	movs	r1, #32
 800d10c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	e000      	b.n	800d114 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800d112:	2302      	movs	r3, #2
  }
}
 800d114:	0018      	movs	r0, r3
 800d116:	46bd      	mov	sp, r7
 800d118:	b008      	add	sp, #32
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	000001ff 	.word	0x000001ff

0800d120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d120:	b5b0      	push	{r4, r5, r7, lr}
 800d122:	b090      	sub	sp, #64	@ 0x40
 800d124:	af00      	add	r7, sp, #0
 800d126:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d128:	231a      	movs	r3, #26
 800d12a:	2220      	movs	r2, #32
 800d12c:	189b      	adds	r3, r3, r2
 800d12e:	19db      	adds	r3, r3, r7
 800d130:	2200      	movs	r2, #0
 800d132:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	689a      	ldr	r2, [r3, #8]
 800d138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	431a      	orrs	r2, r3
 800d13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d140:	695b      	ldr	r3, [r3, #20]
 800d142:	431a      	orrs	r2, r3
 800d144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	4313      	orrs	r3, r2
 800d14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4ac1      	ldr	r2, [pc, #772]	@ (800d458 <UART_SetConfig+0x338>)
 800d154:	4013      	ands	r3, r2
 800d156:	0019      	movs	r1, r3
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d15e:	430b      	orrs	r3, r1
 800d160:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	4abc      	ldr	r2, [pc, #752]	@ (800d45c <UART_SetConfig+0x33c>)
 800d16a:	4013      	ands	r3, r2
 800d16c:	0018      	movs	r0, r3
 800d16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d170:	68d9      	ldr	r1, [r3, #12]
 800d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	0003      	movs	r3, r0
 800d178:	430b      	orrs	r3, r1
 800d17a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4ab6      	ldr	r2, [pc, #728]	@ (800d460 <UART_SetConfig+0x340>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d009      	beq.n	800d1a0 <UART_SetConfig+0x80>
 800d18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4ab4      	ldr	r2, [pc, #720]	@ (800d464 <UART_SetConfig+0x344>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d004      	beq.n	800d1a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d19c:	4313      	orrs	r3, r2
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	4ab0      	ldr	r2, [pc, #704]	@ (800d468 <UART_SetConfig+0x348>)
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	0019      	movs	r1, r3
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1b2:	430b      	orrs	r3, r1
 800d1b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1bc:	220f      	movs	r2, #15
 800d1be:	4393      	bics	r3, r2
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	0003      	movs	r3, r0
 800d1cc:	430b      	orrs	r3, r1
 800d1ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4aa5      	ldr	r2, [pc, #660]	@ (800d46c <UART_SetConfig+0x34c>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d131      	bne.n	800d23e <UART_SetConfig+0x11e>
 800d1da:	4ba5      	ldr	r3, [pc, #660]	@ (800d470 <UART_SetConfig+0x350>)
 800d1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1de:	2203      	movs	r2, #3
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	2b03      	cmp	r3, #3
 800d1e4:	d01d      	beq.n	800d222 <UART_SetConfig+0x102>
 800d1e6:	d823      	bhi.n	800d230 <UART_SetConfig+0x110>
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d00c      	beq.n	800d206 <UART_SetConfig+0xe6>
 800d1ec:	d820      	bhi.n	800d230 <UART_SetConfig+0x110>
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <UART_SetConfig+0xd8>
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d00e      	beq.n	800d214 <UART_SetConfig+0xf4>
 800d1f6:	e01b      	b.n	800d230 <UART_SetConfig+0x110>
 800d1f8:	231b      	movs	r3, #27
 800d1fa:	2220      	movs	r2, #32
 800d1fc:	189b      	adds	r3, r3, r2
 800d1fe:	19db      	adds	r3, r3, r7
 800d200:	2200      	movs	r2, #0
 800d202:	701a      	strb	r2, [r3, #0]
 800d204:	e154      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d206:	231b      	movs	r3, #27
 800d208:	2220      	movs	r2, #32
 800d20a:	189b      	adds	r3, r3, r2
 800d20c:	19db      	adds	r3, r3, r7
 800d20e:	2202      	movs	r2, #2
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e14d      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d214:	231b      	movs	r3, #27
 800d216:	2220      	movs	r2, #32
 800d218:	189b      	adds	r3, r3, r2
 800d21a:	19db      	adds	r3, r3, r7
 800d21c:	2204      	movs	r2, #4
 800d21e:	701a      	strb	r2, [r3, #0]
 800d220:	e146      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d222:	231b      	movs	r3, #27
 800d224:	2220      	movs	r2, #32
 800d226:	189b      	adds	r3, r3, r2
 800d228:	19db      	adds	r3, r3, r7
 800d22a:	2208      	movs	r2, #8
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	e13f      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d230:	231b      	movs	r3, #27
 800d232:	2220      	movs	r2, #32
 800d234:	189b      	adds	r3, r3, r2
 800d236:	19db      	adds	r3, r3, r7
 800d238:	2210      	movs	r2, #16
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	e138      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a8c      	ldr	r2, [pc, #560]	@ (800d474 <UART_SetConfig+0x354>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d131      	bne.n	800d2ac <UART_SetConfig+0x18c>
 800d248:	4b89      	ldr	r3, [pc, #548]	@ (800d470 <UART_SetConfig+0x350>)
 800d24a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d24c:	220c      	movs	r2, #12
 800d24e:	4013      	ands	r3, r2
 800d250:	2b0c      	cmp	r3, #12
 800d252:	d01d      	beq.n	800d290 <UART_SetConfig+0x170>
 800d254:	d823      	bhi.n	800d29e <UART_SetConfig+0x17e>
 800d256:	2b08      	cmp	r3, #8
 800d258:	d00c      	beq.n	800d274 <UART_SetConfig+0x154>
 800d25a:	d820      	bhi.n	800d29e <UART_SetConfig+0x17e>
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <UART_SetConfig+0x146>
 800d260:	2b04      	cmp	r3, #4
 800d262:	d00e      	beq.n	800d282 <UART_SetConfig+0x162>
 800d264:	e01b      	b.n	800d29e <UART_SetConfig+0x17e>
 800d266:	231b      	movs	r3, #27
 800d268:	2220      	movs	r2, #32
 800d26a:	189b      	adds	r3, r3, r2
 800d26c:	19db      	adds	r3, r3, r7
 800d26e:	2200      	movs	r2, #0
 800d270:	701a      	strb	r2, [r3, #0]
 800d272:	e11d      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d274:	231b      	movs	r3, #27
 800d276:	2220      	movs	r2, #32
 800d278:	189b      	adds	r3, r3, r2
 800d27a:	19db      	adds	r3, r3, r7
 800d27c:	2202      	movs	r2, #2
 800d27e:	701a      	strb	r2, [r3, #0]
 800d280:	e116      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d282:	231b      	movs	r3, #27
 800d284:	2220      	movs	r2, #32
 800d286:	189b      	adds	r3, r3, r2
 800d288:	19db      	adds	r3, r3, r7
 800d28a:	2204      	movs	r2, #4
 800d28c:	701a      	strb	r2, [r3, #0]
 800d28e:	e10f      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d290:	231b      	movs	r3, #27
 800d292:	2220      	movs	r2, #32
 800d294:	189b      	adds	r3, r3, r2
 800d296:	19db      	adds	r3, r3, r7
 800d298:	2208      	movs	r2, #8
 800d29a:	701a      	strb	r2, [r3, #0]
 800d29c:	e108      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d29e:	231b      	movs	r3, #27
 800d2a0:	2220      	movs	r2, #32
 800d2a2:	189b      	adds	r3, r3, r2
 800d2a4:	19db      	adds	r3, r3, r7
 800d2a6:	2210      	movs	r2, #16
 800d2a8:	701a      	strb	r2, [r3, #0]
 800d2aa:	e101      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a71      	ldr	r2, [pc, #452]	@ (800d478 <UART_SetConfig+0x358>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d131      	bne.n	800d31a <UART_SetConfig+0x1fa>
 800d2b6:	4b6e      	ldr	r3, [pc, #440]	@ (800d470 <UART_SetConfig+0x350>)
 800d2b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2ba:	2230      	movs	r2, #48	@ 0x30
 800d2bc:	4013      	ands	r3, r2
 800d2be:	2b30      	cmp	r3, #48	@ 0x30
 800d2c0:	d01d      	beq.n	800d2fe <UART_SetConfig+0x1de>
 800d2c2:	d823      	bhi.n	800d30c <UART_SetConfig+0x1ec>
 800d2c4:	2b20      	cmp	r3, #32
 800d2c6:	d00c      	beq.n	800d2e2 <UART_SetConfig+0x1c2>
 800d2c8:	d820      	bhi.n	800d30c <UART_SetConfig+0x1ec>
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <UART_SetConfig+0x1b4>
 800d2ce:	2b10      	cmp	r3, #16
 800d2d0:	d00e      	beq.n	800d2f0 <UART_SetConfig+0x1d0>
 800d2d2:	e01b      	b.n	800d30c <UART_SetConfig+0x1ec>
 800d2d4:	231b      	movs	r3, #27
 800d2d6:	2220      	movs	r2, #32
 800d2d8:	189b      	adds	r3, r3, r2
 800d2da:	19db      	adds	r3, r3, r7
 800d2dc:	2200      	movs	r2, #0
 800d2de:	701a      	strb	r2, [r3, #0]
 800d2e0:	e0e6      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d2e2:	231b      	movs	r3, #27
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	189b      	adds	r3, r3, r2
 800d2e8:	19db      	adds	r3, r3, r7
 800d2ea:	2202      	movs	r2, #2
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	e0df      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d2f0:	231b      	movs	r3, #27
 800d2f2:	2220      	movs	r2, #32
 800d2f4:	189b      	adds	r3, r3, r2
 800d2f6:	19db      	adds	r3, r3, r7
 800d2f8:	2204      	movs	r2, #4
 800d2fa:	701a      	strb	r2, [r3, #0]
 800d2fc:	e0d8      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d2fe:	231b      	movs	r3, #27
 800d300:	2220      	movs	r2, #32
 800d302:	189b      	adds	r3, r3, r2
 800d304:	19db      	adds	r3, r3, r7
 800d306:	2208      	movs	r2, #8
 800d308:	701a      	strb	r2, [r3, #0]
 800d30a:	e0d1      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d30c:	231b      	movs	r3, #27
 800d30e:	2220      	movs	r2, #32
 800d310:	189b      	adds	r3, r3, r2
 800d312:	19db      	adds	r3, r3, r7
 800d314:	2210      	movs	r2, #16
 800d316:	701a      	strb	r2, [r3, #0]
 800d318:	e0ca      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a57      	ldr	r2, [pc, #348]	@ (800d47c <UART_SetConfig+0x35c>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d106      	bne.n	800d332 <UART_SetConfig+0x212>
 800d324:	231b      	movs	r3, #27
 800d326:	2220      	movs	r2, #32
 800d328:	189b      	adds	r3, r3, r2
 800d32a:	19db      	adds	r3, r3, r7
 800d32c:	2200      	movs	r2, #0
 800d32e:	701a      	strb	r2, [r3, #0]
 800d330:	e0be      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a52      	ldr	r2, [pc, #328]	@ (800d480 <UART_SetConfig+0x360>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d106      	bne.n	800d34a <UART_SetConfig+0x22a>
 800d33c:	231b      	movs	r3, #27
 800d33e:	2220      	movs	r2, #32
 800d340:	189b      	adds	r3, r3, r2
 800d342:	19db      	adds	r3, r3, r7
 800d344:	2200      	movs	r2, #0
 800d346:	701a      	strb	r2, [r3, #0]
 800d348:	e0b2      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a4d      	ldr	r2, [pc, #308]	@ (800d484 <UART_SetConfig+0x364>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d106      	bne.n	800d362 <UART_SetConfig+0x242>
 800d354:	231b      	movs	r3, #27
 800d356:	2220      	movs	r2, #32
 800d358:	189b      	adds	r3, r3, r2
 800d35a:	19db      	adds	r3, r3, r7
 800d35c:	2200      	movs	r2, #0
 800d35e:	701a      	strb	r2, [r3, #0]
 800d360:	e0a6      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a3e      	ldr	r2, [pc, #248]	@ (800d460 <UART_SetConfig+0x340>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d13e      	bne.n	800d3ea <UART_SetConfig+0x2ca>
 800d36c:	4b40      	ldr	r3, [pc, #256]	@ (800d470 <UART_SetConfig+0x350>)
 800d36e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d370:	23c0      	movs	r3, #192	@ 0xc0
 800d372:	011b      	lsls	r3, r3, #4
 800d374:	4013      	ands	r3, r2
 800d376:	22c0      	movs	r2, #192	@ 0xc0
 800d378:	0112      	lsls	r2, r2, #4
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d027      	beq.n	800d3ce <UART_SetConfig+0x2ae>
 800d37e:	22c0      	movs	r2, #192	@ 0xc0
 800d380:	0112      	lsls	r2, r2, #4
 800d382:	4293      	cmp	r3, r2
 800d384:	d82a      	bhi.n	800d3dc <UART_SetConfig+0x2bc>
 800d386:	2280      	movs	r2, #128	@ 0x80
 800d388:	0112      	lsls	r2, r2, #4
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d011      	beq.n	800d3b2 <UART_SetConfig+0x292>
 800d38e:	2280      	movs	r2, #128	@ 0x80
 800d390:	0112      	lsls	r2, r2, #4
 800d392:	4293      	cmp	r3, r2
 800d394:	d822      	bhi.n	800d3dc <UART_SetConfig+0x2bc>
 800d396:	2b00      	cmp	r3, #0
 800d398:	d004      	beq.n	800d3a4 <UART_SetConfig+0x284>
 800d39a:	2280      	movs	r2, #128	@ 0x80
 800d39c:	00d2      	lsls	r2, r2, #3
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d00e      	beq.n	800d3c0 <UART_SetConfig+0x2a0>
 800d3a2:	e01b      	b.n	800d3dc <UART_SetConfig+0x2bc>
 800d3a4:	231b      	movs	r3, #27
 800d3a6:	2220      	movs	r2, #32
 800d3a8:	189b      	adds	r3, r3, r2
 800d3aa:	19db      	adds	r3, r3, r7
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	701a      	strb	r2, [r3, #0]
 800d3b0:	e07e      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d3b2:	231b      	movs	r3, #27
 800d3b4:	2220      	movs	r2, #32
 800d3b6:	189b      	adds	r3, r3, r2
 800d3b8:	19db      	adds	r3, r3, r7
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e077      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d3c0:	231b      	movs	r3, #27
 800d3c2:	2220      	movs	r2, #32
 800d3c4:	189b      	adds	r3, r3, r2
 800d3c6:	19db      	adds	r3, r3, r7
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	701a      	strb	r2, [r3, #0]
 800d3cc:	e070      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d3ce:	231b      	movs	r3, #27
 800d3d0:	2220      	movs	r2, #32
 800d3d2:	189b      	adds	r3, r3, r2
 800d3d4:	19db      	adds	r3, r3, r7
 800d3d6:	2208      	movs	r2, #8
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	e069      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d3dc:	231b      	movs	r3, #27
 800d3de:	2220      	movs	r2, #32
 800d3e0:	189b      	adds	r3, r3, r2
 800d3e2:	19db      	adds	r3, r3, r7
 800d3e4:	2210      	movs	r2, #16
 800d3e6:	701a      	strb	r2, [r3, #0]
 800d3e8:	e062      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a1d      	ldr	r2, [pc, #116]	@ (800d464 <UART_SetConfig+0x344>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d157      	bne.n	800d4a4 <UART_SetConfig+0x384>
 800d3f4:	4b1e      	ldr	r3, [pc, #120]	@ (800d470 <UART_SetConfig+0x350>)
 800d3f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3f8:	23c0      	movs	r3, #192	@ 0xc0
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	22c0      	movs	r2, #192	@ 0xc0
 800d400:	0092      	lsls	r2, r2, #2
 800d402:	4293      	cmp	r3, r2
 800d404:	d040      	beq.n	800d488 <UART_SetConfig+0x368>
 800d406:	22c0      	movs	r2, #192	@ 0xc0
 800d408:	0092      	lsls	r2, r2, #2
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d843      	bhi.n	800d496 <UART_SetConfig+0x376>
 800d40e:	2280      	movs	r2, #128	@ 0x80
 800d410:	0092      	lsls	r2, r2, #2
 800d412:	4293      	cmp	r3, r2
 800d414:	d011      	beq.n	800d43a <UART_SetConfig+0x31a>
 800d416:	2280      	movs	r2, #128	@ 0x80
 800d418:	0092      	lsls	r2, r2, #2
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d83b      	bhi.n	800d496 <UART_SetConfig+0x376>
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d004      	beq.n	800d42c <UART_SetConfig+0x30c>
 800d422:	2280      	movs	r2, #128	@ 0x80
 800d424:	0052      	lsls	r2, r2, #1
 800d426:	4293      	cmp	r3, r2
 800d428:	d00e      	beq.n	800d448 <UART_SetConfig+0x328>
 800d42a:	e034      	b.n	800d496 <UART_SetConfig+0x376>
 800d42c:	231b      	movs	r3, #27
 800d42e:	2220      	movs	r2, #32
 800d430:	189b      	adds	r3, r3, r2
 800d432:	19db      	adds	r3, r3, r7
 800d434:	2200      	movs	r2, #0
 800d436:	701a      	strb	r2, [r3, #0]
 800d438:	e03a      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d43a:	231b      	movs	r3, #27
 800d43c:	2220      	movs	r2, #32
 800d43e:	189b      	adds	r3, r3, r2
 800d440:	19db      	adds	r3, r3, r7
 800d442:	2202      	movs	r2, #2
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	e033      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d448:	231b      	movs	r3, #27
 800d44a:	2220      	movs	r2, #32
 800d44c:	189b      	adds	r3, r3, r2
 800d44e:	19db      	adds	r3, r3, r7
 800d450:	2204      	movs	r2, #4
 800d452:	701a      	strb	r2, [r3, #0]
 800d454:	e02c      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d456:	46c0      	nop			@ (mov r8, r8)
 800d458:	cfff69f3 	.word	0xcfff69f3
 800d45c:	ffffcfff 	.word	0xffffcfff
 800d460:	40008000 	.word	0x40008000
 800d464:	40008400 	.word	0x40008400
 800d468:	11fff4ff 	.word	0x11fff4ff
 800d46c:	40013800 	.word	0x40013800
 800d470:	40021000 	.word	0x40021000
 800d474:	40004400 	.word	0x40004400
 800d478:	40004800 	.word	0x40004800
 800d47c:	40004c00 	.word	0x40004c00
 800d480:	40005000 	.word	0x40005000
 800d484:	40013c00 	.word	0x40013c00
 800d488:	231b      	movs	r3, #27
 800d48a:	2220      	movs	r2, #32
 800d48c:	189b      	adds	r3, r3, r2
 800d48e:	19db      	adds	r3, r3, r7
 800d490:	2208      	movs	r2, #8
 800d492:	701a      	strb	r2, [r3, #0]
 800d494:	e00c      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d496:	231b      	movs	r3, #27
 800d498:	2220      	movs	r2, #32
 800d49a:	189b      	adds	r3, r3, r2
 800d49c:	19db      	adds	r3, r3, r7
 800d49e:	2210      	movs	r2, #16
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	e005      	b.n	800d4b0 <UART_SetConfig+0x390>
 800d4a4:	231b      	movs	r3, #27
 800d4a6:	2220      	movs	r2, #32
 800d4a8:	189b      	adds	r3, r3, r2
 800d4aa:	19db      	adds	r3, r3, r7
 800d4ac:	2210      	movs	r2, #16
 800d4ae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4ac1      	ldr	r2, [pc, #772]	@ (800d7bc <UART_SetConfig+0x69c>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d005      	beq.n	800d4c6 <UART_SetConfig+0x3a6>
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4ac0      	ldr	r2, [pc, #768]	@ (800d7c0 <UART_SetConfig+0x6a0>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d000      	beq.n	800d4c6 <UART_SetConfig+0x3a6>
 800d4c4:	e093      	b.n	800d5ee <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4c6:	231b      	movs	r3, #27
 800d4c8:	2220      	movs	r2, #32
 800d4ca:	189b      	adds	r3, r3, r2
 800d4cc:	19db      	adds	r3, r3, r7
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b08      	cmp	r3, #8
 800d4d2:	d015      	beq.n	800d500 <UART_SetConfig+0x3e0>
 800d4d4:	dc18      	bgt.n	800d508 <UART_SetConfig+0x3e8>
 800d4d6:	2b04      	cmp	r3, #4
 800d4d8:	d00d      	beq.n	800d4f6 <UART_SetConfig+0x3d6>
 800d4da:	dc15      	bgt.n	800d508 <UART_SetConfig+0x3e8>
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <UART_SetConfig+0x3c6>
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d005      	beq.n	800d4f0 <UART_SetConfig+0x3d0>
 800d4e4:	e010      	b.n	800d508 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4e6:	f7fd fdbd 	bl	800b064 <HAL_RCC_GetPCLK1Freq>
 800d4ea:	0003      	movs	r3, r0
 800d4ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4ee:	e014      	b.n	800d51a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4f0:	4bb4      	ldr	r3, [pc, #720]	@ (800d7c4 <UART_SetConfig+0x6a4>)
 800d4f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4f4:	e011      	b.n	800d51a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4f6:	f7fd fd29 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800d4fa:	0003      	movs	r3, r0
 800d4fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d4fe:	e00c      	b.n	800d51a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d500:	2380      	movs	r3, #128	@ 0x80
 800d502:	021b      	lsls	r3, r3, #8
 800d504:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d506:	e008      	b.n	800d51a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800d508:	2300      	movs	r3, #0
 800d50a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d50c:	231a      	movs	r3, #26
 800d50e:	2220      	movs	r2, #32
 800d510:	189b      	adds	r3, r3, r2
 800d512:	19db      	adds	r3, r3, r7
 800d514:	2201      	movs	r2, #1
 800d516:	701a      	strb	r2, [r3, #0]
        break;
 800d518:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d100      	bne.n	800d522 <UART_SetConfig+0x402>
 800d520:	e135      	b.n	800d78e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d526:	4ba8      	ldr	r3, [pc, #672]	@ (800d7c8 <UART_SetConfig+0x6a8>)
 800d528:	0052      	lsls	r2, r2, #1
 800d52a:	5ad3      	ldrh	r3, [r2, r3]
 800d52c:	0019      	movs	r1, r3
 800d52e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d530:	f7f2 fe10 	bl	8000154 <__udivsi3>
 800d534:	0003      	movs	r3, r0
 800d536:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	0013      	movs	r3, r2
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	189b      	adds	r3, r3, r2
 800d542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d544:	429a      	cmp	r2, r3
 800d546:	d305      	bcc.n	800d554 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d54e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d550:	429a      	cmp	r2, r3
 800d552:	d906      	bls.n	800d562 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800d554:	231a      	movs	r3, #26
 800d556:	2220      	movs	r2, #32
 800d558:	189b      	adds	r3, r3, r2
 800d55a:	19db      	adds	r3, r3, r7
 800d55c:	2201      	movs	r2, #1
 800d55e:	701a      	strb	r2, [r3, #0]
 800d560:	e044      	b.n	800d5ec <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d564:	61bb      	str	r3, [r7, #24]
 800d566:	2300      	movs	r3, #0
 800d568:	61fb      	str	r3, [r7, #28]
 800d56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d56e:	4b96      	ldr	r3, [pc, #600]	@ (800d7c8 <UART_SetConfig+0x6a8>)
 800d570:	0052      	lsls	r2, r2, #1
 800d572:	5ad3      	ldrh	r3, [r2, r3]
 800d574:	613b      	str	r3, [r7, #16]
 800d576:	2300      	movs	r3, #0
 800d578:	617b      	str	r3, [r7, #20]
 800d57a:	693a      	ldr	r2, [r7, #16]
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	69b8      	ldr	r0, [r7, #24]
 800d580:	69f9      	ldr	r1, [r7, #28]
 800d582:	f7f2 ffd5 	bl	8000530 <__aeabi_uldivmod>
 800d586:	0002      	movs	r2, r0
 800d588:	000b      	movs	r3, r1
 800d58a:	0e11      	lsrs	r1, r2, #24
 800d58c:	021d      	lsls	r5, r3, #8
 800d58e:	430d      	orrs	r5, r1
 800d590:	0214      	lsls	r4, r2, #8
 800d592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	085b      	lsrs	r3, r3, #1
 800d598:	60bb      	str	r3, [r7, #8]
 800d59a:	2300      	movs	r3, #0
 800d59c:	60fb      	str	r3, [r7, #12]
 800d59e:	68b8      	ldr	r0, [r7, #8]
 800d5a0:	68f9      	ldr	r1, [r7, #12]
 800d5a2:	1900      	adds	r0, r0, r4
 800d5a4:	4169      	adcs	r1, r5
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	603b      	str	r3, [r7, #0]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	607b      	str	r3, [r7, #4]
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f7f2 ffbc 	bl	8000530 <__aeabi_uldivmod>
 800d5b8:	0002      	movs	r2, r0
 800d5ba:	000b      	movs	r3, r1
 800d5bc:	0013      	movs	r3, r2
 800d5be:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d5c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5c2:	23c0      	movs	r3, #192	@ 0xc0
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d309      	bcc.n	800d5de <UART_SetConfig+0x4be>
 800d5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5cc:	2380      	movs	r3, #128	@ 0x80
 800d5ce:	035b      	lsls	r3, r3, #13
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d204      	bcs.n	800d5de <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5da:	60da      	str	r2, [r3, #12]
 800d5dc:	e006      	b.n	800d5ec <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800d5de:	231a      	movs	r3, #26
 800d5e0:	2220      	movs	r2, #32
 800d5e2:	189b      	adds	r3, r3, r2
 800d5e4:	19db      	adds	r3, r3, r7
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800d5ea:	e0d0      	b.n	800d78e <UART_SetConfig+0x66e>
 800d5ec:	e0cf      	b.n	800d78e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f0:	69da      	ldr	r2, [r3, #28]
 800d5f2:	2380      	movs	r3, #128	@ 0x80
 800d5f4:	021b      	lsls	r3, r3, #8
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d000      	beq.n	800d5fc <UART_SetConfig+0x4dc>
 800d5fa:	e070      	b.n	800d6de <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800d5fc:	231b      	movs	r3, #27
 800d5fe:	2220      	movs	r2, #32
 800d600:	189b      	adds	r3, r3, r2
 800d602:	19db      	adds	r3, r3, r7
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b08      	cmp	r3, #8
 800d608:	d015      	beq.n	800d636 <UART_SetConfig+0x516>
 800d60a:	dc18      	bgt.n	800d63e <UART_SetConfig+0x51e>
 800d60c:	2b04      	cmp	r3, #4
 800d60e:	d00d      	beq.n	800d62c <UART_SetConfig+0x50c>
 800d610:	dc15      	bgt.n	800d63e <UART_SetConfig+0x51e>
 800d612:	2b00      	cmp	r3, #0
 800d614:	d002      	beq.n	800d61c <UART_SetConfig+0x4fc>
 800d616:	2b02      	cmp	r3, #2
 800d618:	d005      	beq.n	800d626 <UART_SetConfig+0x506>
 800d61a:	e010      	b.n	800d63e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d61c:	f7fd fd22 	bl	800b064 <HAL_RCC_GetPCLK1Freq>
 800d620:	0003      	movs	r3, r0
 800d622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d624:	e014      	b.n	800d650 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d626:	4b67      	ldr	r3, [pc, #412]	@ (800d7c4 <UART_SetConfig+0x6a4>)
 800d628:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d62a:	e011      	b.n	800d650 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d62c:	f7fd fc8e 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800d630:	0003      	movs	r3, r0
 800d632:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d634:	e00c      	b.n	800d650 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d636:	2380      	movs	r3, #128	@ 0x80
 800d638:	021b      	lsls	r3, r3, #8
 800d63a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d63c:	e008      	b.n	800d650 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800d63e:	2300      	movs	r3, #0
 800d640:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d642:	231a      	movs	r3, #26
 800d644:	2220      	movs	r2, #32
 800d646:	189b      	adds	r3, r3, r2
 800d648:	19db      	adds	r3, r3, r7
 800d64a:	2201      	movs	r2, #1
 800d64c:	701a      	strb	r2, [r3, #0]
        break;
 800d64e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d652:	2b00      	cmp	r3, #0
 800d654:	d100      	bne.n	800d658 <UART_SetConfig+0x538>
 800d656:	e09a      	b.n	800d78e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d65c:	4b5a      	ldr	r3, [pc, #360]	@ (800d7c8 <UART_SetConfig+0x6a8>)
 800d65e:	0052      	lsls	r2, r2, #1
 800d660:	5ad3      	ldrh	r3, [r2, r3]
 800d662:	0019      	movs	r1, r3
 800d664:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d666:	f7f2 fd75 	bl	8000154 <__udivsi3>
 800d66a:	0003      	movs	r3, r0
 800d66c:	005a      	lsls	r2, r3, #1
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	085b      	lsrs	r3, r3, #1
 800d674:	18d2      	adds	r2, r2, r3
 800d676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	0019      	movs	r1, r3
 800d67c:	0010      	movs	r0, r2
 800d67e:	f7f2 fd69 	bl	8000154 <__udivsi3>
 800d682:	0003      	movs	r3, r0
 800d684:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	2b0f      	cmp	r3, #15
 800d68a:	d921      	bls.n	800d6d0 <UART_SetConfig+0x5b0>
 800d68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d68e:	2380      	movs	r3, #128	@ 0x80
 800d690:	025b      	lsls	r3, r3, #9
 800d692:	429a      	cmp	r2, r3
 800d694:	d21c      	bcs.n	800d6d0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	b29a      	uxth	r2, r3
 800d69a:	200e      	movs	r0, #14
 800d69c:	2420      	movs	r4, #32
 800d69e:	1903      	adds	r3, r0, r4
 800d6a0:	19db      	adds	r3, r3, r7
 800d6a2:	210f      	movs	r1, #15
 800d6a4:	438a      	bics	r2, r1
 800d6a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6aa:	085b      	lsrs	r3, r3, #1
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	2207      	movs	r2, #7
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	b299      	uxth	r1, r3
 800d6b4:	1903      	adds	r3, r0, r4
 800d6b6:	19db      	adds	r3, r3, r7
 800d6b8:	1902      	adds	r2, r0, r4
 800d6ba:	19d2      	adds	r2, r2, r7
 800d6bc:	8812      	ldrh	r2, [r2, #0]
 800d6be:	430a      	orrs	r2, r1
 800d6c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	1902      	adds	r2, r0, r4
 800d6c8:	19d2      	adds	r2, r2, r7
 800d6ca:	8812      	ldrh	r2, [r2, #0]
 800d6cc:	60da      	str	r2, [r3, #12]
 800d6ce:	e05e      	b.n	800d78e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d6d0:	231a      	movs	r3, #26
 800d6d2:	2220      	movs	r2, #32
 800d6d4:	189b      	adds	r3, r3, r2
 800d6d6:	19db      	adds	r3, r3, r7
 800d6d8:	2201      	movs	r2, #1
 800d6da:	701a      	strb	r2, [r3, #0]
 800d6dc:	e057      	b.n	800d78e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6de:	231b      	movs	r3, #27
 800d6e0:	2220      	movs	r2, #32
 800d6e2:	189b      	adds	r3, r3, r2
 800d6e4:	19db      	adds	r3, r3, r7
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d015      	beq.n	800d718 <UART_SetConfig+0x5f8>
 800d6ec:	dc18      	bgt.n	800d720 <UART_SetConfig+0x600>
 800d6ee:	2b04      	cmp	r3, #4
 800d6f0:	d00d      	beq.n	800d70e <UART_SetConfig+0x5ee>
 800d6f2:	dc15      	bgt.n	800d720 <UART_SetConfig+0x600>
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <UART_SetConfig+0x5de>
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d005      	beq.n	800d708 <UART_SetConfig+0x5e8>
 800d6fc:	e010      	b.n	800d720 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6fe:	f7fd fcb1 	bl	800b064 <HAL_RCC_GetPCLK1Freq>
 800d702:	0003      	movs	r3, r0
 800d704:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d706:	e014      	b.n	800d732 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d708:	4b2e      	ldr	r3, [pc, #184]	@ (800d7c4 <UART_SetConfig+0x6a4>)
 800d70a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d70c:	e011      	b.n	800d732 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d70e:	f7fd fc1d 	bl	800af4c <HAL_RCC_GetSysClockFreq>
 800d712:	0003      	movs	r3, r0
 800d714:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d716:	e00c      	b.n	800d732 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d718:	2380      	movs	r3, #128	@ 0x80
 800d71a:	021b      	lsls	r3, r3, #8
 800d71c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d71e:	e008      	b.n	800d732 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800d720:	2300      	movs	r3, #0
 800d722:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d724:	231a      	movs	r3, #26
 800d726:	2220      	movs	r2, #32
 800d728:	189b      	adds	r3, r3, r2
 800d72a:	19db      	adds	r3, r3, r7
 800d72c:	2201      	movs	r2, #1
 800d72e:	701a      	strb	r2, [r3, #0]
        break;
 800d730:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d734:	2b00      	cmp	r3, #0
 800d736:	d02a      	beq.n	800d78e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d73c:	4b22      	ldr	r3, [pc, #136]	@ (800d7c8 <UART_SetConfig+0x6a8>)
 800d73e:	0052      	lsls	r2, r2, #1
 800d740:	5ad3      	ldrh	r3, [r2, r3]
 800d742:	0019      	movs	r1, r3
 800d744:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d746:	f7f2 fd05 	bl	8000154 <__udivsi3>
 800d74a:	0003      	movs	r3, r0
 800d74c:	001a      	movs	r2, r3
 800d74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	085b      	lsrs	r3, r3, #1
 800d754:	18d2      	adds	r2, r2, r3
 800d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	0019      	movs	r1, r3
 800d75c:	0010      	movs	r0, r2
 800d75e:	f7f2 fcf9 	bl	8000154 <__udivsi3>
 800d762:	0003      	movs	r3, r0
 800d764:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d768:	2b0f      	cmp	r3, #15
 800d76a:	d90a      	bls.n	800d782 <UART_SetConfig+0x662>
 800d76c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d76e:	2380      	movs	r3, #128	@ 0x80
 800d770:	025b      	lsls	r3, r3, #9
 800d772:	429a      	cmp	r2, r3
 800d774:	d205      	bcs.n	800d782 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d778:	b29a      	uxth	r2, r3
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	60da      	str	r2, [r3, #12]
 800d780:	e005      	b.n	800d78e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d782:	231a      	movs	r3, #26
 800d784:	2220      	movs	r2, #32
 800d786:	189b      	adds	r3, r3, r2
 800d788:	19db      	adds	r3, r3, r7
 800d78a:	2201      	movs	r2, #1
 800d78c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d790:	226a      	movs	r2, #106	@ 0x6a
 800d792:	2101      	movs	r1, #1
 800d794:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d798:	2268      	movs	r2, #104	@ 0x68
 800d79a:	2101      	movs	r1, #1
 800d79c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d7aa:	231a      	movs	r3, #26
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	189b      	adds	r3, r3, r2
 800d7b0:	19db      	adds	r3, r3, r7
 800d7b2:	781b      	ldrb	r3, [r3, #0]
}
 800d7b4:	0018      	movs	r0, r3
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	b010      	add	sp, #64	@ 0x40
 800d7ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d7bc:	40008000 	.word	0x40008000
 800d7c0:	40008400 	.word	0x40008400
 800d7c4:	00f42400 	.word	0x00f42400
 800d7c8:	0801c284 	.word	0x0801c284

0800d7cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d8:	2208      	movs	r2, #8
 800d7da:	4013      	ands	r3, r2
 800d7dc:	d00b      	beq.n	800d7f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	4a4a      	ldr	r2, [pc, #296]	@ (800d910 <UART_AdvFeatureConfig+0x144>)
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	0019      	movs	r1, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	430a      	orrs	r2, r1
 800d7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	d00b      	beq.n	800d818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	4a43      	ldr	r2, [pc, #268]	@ (800d914 <UART_AdvFeatureConfig+0x148>)
 800d808:	4013      	ands	r3, r2
 800d80a:	0019      	movs	r1, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	430a      	orrs	r2, r1
 800d816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d81c:	2202      	movs	r2, #2
 800d81e:	4013      	ands	r3, r2
 800d820:	d00b      	beq.n	800d83a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	4a3b      	ldr	r2, [pc, #236]	@ (800d918 <UART_AdvFeatureConfig+0x14c>)
 800d82a:	4013      	ands	r3, r2
 800d82c:	0019      	movs	r1, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	430a      	orrs	r2, r1
 800d838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d83e:	2204      	movs	r2, #4
 800d840:	4013      	ands	r3, r2
 800d842:	d00b      	beq.n	800d85c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	4a34      	ldr	r2, [pc, #208]	@ (800d91c <UART_AdvFeatureConfig+0x150>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	0019      	movs	r1, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	430a      	orrs	r2, r1
 800d85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d860:	2210      	movs	r2, #16
 800d862:	4013      	ands	r3, r2
 800d864:	d00b      	beq.n	800d87e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	4a2c      	ldr	r2, [pc, #176]	@ (800d920 <UART_AdvFeatureConfig+0x154>)
 800d86e:	4013      	ands	r3, r2
 800d870:	0019      	movs	r1, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	430a      	orrs	r2, r1
 800d87c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d882:	2220      	movs	r2, #32
 800d884:	4013      	ands	r3, r2
 800d886:	d00b      	beq.n	800d8a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	4a25      	ldr	r2, [pc, #148]	@ (800d924 <UART_AdvFeatureConfig+0x158>)
 800d890:	4013      	ands	r3, r2
 800d892:	0019      	movs	r1, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	430a      	orrs	r2, r1
 800d89e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a4:	2240      	movs	r2, #64	@ 0x40
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	d01d      	beq.n	800d8e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d928 <UART_AdvFeatureConfig+0x15c>)
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	0019      	movs	r1, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	430a      	orrs	r2, r1
 800d8c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8c6:	2380      	movs	r3, #128	@ 0x80
 800d8c8:	035b      	lsls	r3, r3, #13
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d10b      	bne.n	800d8e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	4a15      	ldr	r2, [pc, #84]	@ (800d92c <UART_AdvFeatureConfig+0x160>)
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	0019      	movs	r1, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ea:	2280      	movs	r2, #128	@ 0x80
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	d00b      	beq.n	800d908 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	4a0e      	ldr	r2, [pc, #56]	@ (800d930 <UART_AdvFeatureConfig+0x164>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	0019      	movs	r1, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	430a      	orrs	r2, r1
 800d906:	605a      	str	r2, [r3, #4]
  }
}
 800d908:	46c0      	nop			@ (mov r8, r8)
 800d90a:	46bd      	mov	sp, r7
 800d90c:	b002      	add	sp, #8
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	ffff7fff 	.word	0xffff7fff
 800d914:	fffdffff 	.word	0xfffdffff
 800d918:	fffeffff 	.word	0xfffeffff
 800d91c:	fffbffff 	.word	0xfffbffff
 800d920:	ffffefff 	.word	0xffffefff
 800d924:	ffffdfff 	.word	0xffffdfff
 800d928:	ffefffff 	.word	0xffefffff
 800d92c:	ff9fffff 	.word	0xff9fffff
 800d930:	fff7ffff 	.word	0xfff7ffff

0800d934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b092      	sub	sp, #72	@ 0x48
 800d938:	af02      	add	r7, sp, #8
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2290      	movs	r2, #144	@ 0x90
 800d940:	2100      	movs	r1, #0
 800d942:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d944:	f7fb fb5c 	bl	8009000 <HAL_GetTick>
 800d948:	0003      	movs	r3, r0
 800d94a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2208      	movs	r2, #8
 800d954:	4013      	ands	r3, r2
 800d956:	2b08      	cmp	r3, #8
 800d958:	d12d      	bne.n	800d9b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d95a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d95c:	2280      	movs	r2, #128	@ 0x80
 800d95e:	0391      	lsls	r1, r2, #14
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	4a47      	ldr	r2, [pc, #284]	@ (800da80 <UART_CheckIdleState+0x14c>)
 800d964:	9200      	str	r2, [sp, #0]
 800d966:	2200      	movs	r2, #0
 800d968:	f000 f88e 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800d96c:	1e03      	subs	r3, r0, #0
 800d96e:	d022      	beq.n	800d9b6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d970:	f3ef 8310 	mrs	r3, PRIMASK
 800d974:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d97a:	2301      	movs	r3, #1
 800d97c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d980:	f383 8810 	msr	PRIMASK, r3
}
 800d984:	46c0      	nop			@ (mov r8, r8)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2180      	movs	r1, #128	@ 0x80
 800d992:	438a      	bics	r2, r1
 800d994:	601a      	str	r2, [r3, #0]
 800d996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99c:	f383 8810 	msr	PRIMASK, r3
}
 800d9a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2288      	movs	r2, #136	@ 0x88
 800d9a6:	2120      	movs	r1, #32
 800d9a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2284      	movs	r2, #132	@ 0x84
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	e060      	b.n	800da78 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2204      	movs	r2, #4
 800d9be:	4013      	ands	r3, r2
 800d9c0:	2b04      	cmp	r3, #4
 800d9c2:	d146      	bne.n	800da52 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c6:	2280      	movs	r2, #128	@ 0x80
 800d9c8:	03d1      	lsls	r1, r2, #15
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	4a2c      	ldr	r2, [pc, #176]	@ (800da80 <UART_CheckIdleState+0x14c>)
 800d9ce:	9200      	str	r2, [sp, #0]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f000 f859 	bl	800da88 <UART_WaitOnFlagUntilTimeout>
 800d9d6:	1e03      	subs	r3, r0, #0
 800d9d8:	d03b      	beq.n	800da52 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9da:	f3ef 8310 	mrs	r3, PRIMASK
 800d9de:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	f383 8810 	msr	PRIMASK, r3
}
 800d9ee:	46c0      	nop			@ (mov r8, r8)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4922      	ldr	r1, [pc, #136]	@ (800da84 <UART_CheckIdleState+0x150>)
 800d9fc:	400a      	ands	r2, r1
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	f383 8810 	msr	PRIMASK, r3
}
 800da0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da0c:	f3ef 8310 	mrs	r3, PRIMASK
 800da10:	61bb      	str	r3, [r7, #24]
  return(result);
 800da12:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da14:	633b      	str	r3, [r7, #48]	@ 0x30
 800da16:	2301      	movs	r3, #1
 800da18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	f383 8810 	msr	PRIMASK, r3
}
 800da20:	46c0      	nop			@ (mov r8, r8)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	689a      	ldr	r2, [r3, #8]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2101      	movs	r1, #1
 800da2e:	438a      	bics	r2, r1
 800da30:	609a      	str	r2, [r3, #8]
 800da32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	f383 8810 	msr	PRIMASK, r3
}
 800da3c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	228c      	movs	r2, #140	@ 0x8c
 800da42:	2120      	movs	r1, #32
 800da44:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2284      	movs	r2, #132	@ 0x84
 800da4a:	2100      	movs	r1, #0
 800da4c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da4e:	2303      	movs	r3, #3
 800da50:	e012      	b.n	800da78 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2288      	movs	r2, #136	@ 0x88
 800da56:	2120      	movs	r1, #32
 800da58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	228c      	movs	r2, #140	@ 0x8c
 800da5e:	2120      	movs	r1, #32
 800da60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2200      	movs	r2, #0
 800da66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2284      	movs	r2, #132	@ 0x84
 800da72:	2100      	movs	r1, #0
 800da74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	0018      	movs	r0, r3
 800da7a:	46bd      	mov	sp, r7
 800da7c:	b010      	add	sp, #64	@ 0x40
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	01ffffff 	.word	0x01ffffff
 800da84:	fffffedf 	.word	0xfffffedf

0800da88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	1dfb      	adds	r3, r7, #7
 800da96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da98:	e051      	b.n	800db3e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	3301      	adds	r3, #1
 800da9e:	d04e      	beq.n	800db3e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800daa0:	f7fb faae 	bl	8009000 <HAL_GetTick>
 800daa4:	0002      	movs	r2, r0
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	429a      	cmp	r2, r3
 800daae:	d302      	bcc.n	800dab6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d101      	bne.n	800daba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800dab6:	2303      	movs	r3, #3
 800dab8:	e051      	b.n	800db5e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2204      	movs	r2, #4
 800dac2:	4013      	ands	r3, r2
 800dac4:	d03b      	beq.n	800db3e <UART_WaitOnFlagUntilTimeout+0xb6>
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	2b80      	cmp	r3, #128	@ 0x80
 800daca:	d038      	beq.n	800db3e <UART_WaitOnFlagUntilTimeout+0xb6>
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b40      	cmp	r3, #64	@ 0x40
 800dad0:	d035      	beq.n	800db3e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	69db      	ldr	r3, [r3, #28]
 800dad8:	2208      	movs	r2, #8
 800dada:	4013      	ands	r3, r2
 800dadc:	2b08      	cmp	r3, #8
 800dade:	d111      	bne.n	800db04 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2208      	movs	r2, #8
 800dae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	0018      	movs	r0, r3
 800daec:	f000 f83c 	bl	800db68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2290      	movs	r2, #144	@ 0x90
 800daf4:	2108      	movs	r1, #8
 800daf6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2284      	movs	r2, #132	@ 0x84
 800dafc:	2100      	movs	r1, #0
 800dafe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e02c      	b.n	800db5e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	69da      	ldr	r2, [r3, #28]
 800db0a:	2380      	movs	r3, #128	@ 0x80
 800db0c:	011b      	lsls	r3, r3, #4
 800db0e:	401a      	ands	r2, r3
 800db10:	2380      	movs	r3, #128	@ 0x80
 800db12:	011b      	lsls	r3, r3, #4
 800db14:	429a      	cmp	r2, r3
 800db16:	d112      	bne.n	800db3e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2280      	movs	r2, #128	@ 0x80
 800db1e:	0112      	lsls	r2, r2, #4
 800db20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	0018      	movs	r0, r3
 800db26:	f000 f81f 	bl	800db68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2290      	movs	r2, #144	@ 0x90
 800db2e:	2120      	movs	r1, #32
 800db30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2284      	movs	r2, #132	@ 0x84
 800db36:	2100      	movs	r1, #0
 800db38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e00f      	b.n	800db5e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	69db      	ldr	r3, [r3, #28]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	4013      	ands	r3, r2
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	425a      	negs	r2, r3
 800db4e:	4153      	adcs	r3, r2
 800db50:	b2db      	uxtb	r3, r3
 800db52:	001a      	movs	r2, r3
 800db54:	1dfb      	adds	r3, r7, #7
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d09e      	beq.n	800da9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	0018      	movs	r0, r3
 800db60:	46bd      	mov	sp, r7
 800db62:	b004      	add	sp, #16
 800db64:	bd80      	pop	{r7, pc}
	...

0800db68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08e      	sub	sp, #56	@ 0x38
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db70:	f3ef 8310 	mrs	r3, PRIMASK
 800db74:	617b      	str	r3, [r7, #20]
  return(result);
 800db76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db78:	637b      	str	r3, [r7, #52]	@ 0x34
 800db7a:	2301      	movs	r3, #1
 800db7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	f383 8810 	msr	PRIMASK, r3
}
 800db84:	46c0      	nop			@ (mov r8, r8)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4926      	ldr	r1, [pc, #152]	@ (800dc2c <UART_EndRxTransfer+0xc4>)
 800db92:	400a      	ands	r2, r1
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	f383 8810 	msr	PRIMASK, r3
}
 800dba0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dba2:	f3ef 8310 	mrs	r3, PRIMASK
 800dba6:	623b      	str	r3, [r7, #32]
  return(result);
 800dba8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbac:	2301      	movs	r3, #1
 800dbae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb2:	f383 8810 	msr	PRIMASK, r3
}
 800dbb6:	46c0      	nop			@ (mov r8, r8)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	689a      	ldr	r2, [r3, #8]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	491b      	ldr	r1, [pc, #108]	@ (800dc30 <UART_EndRxTransfer+0xc8>)
 800dbc4:	400a      	ands	r2, r1
 800dbc6:	609a      	str	r2, [r3, #8]
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbce:	f383 8810 	msr	PRIMASK, r3
}
 800dbd2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d118      	bne.n	800dc0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbdc:	f3ef 8310 	mrs	r3, PRIMASK
 800dbe0:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbe2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f383 8810 	msr	PRIMASK, r3
}
 800dbf0:	46c0      	nop			@ (mov r8, r8)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2110      	movs	r1, #16
 800dbfe:	438a      	bics	r2, r1
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	f383 8810 	msr	PRIMASK, r3
}
 800dc0c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	228c      	movs	r2, #140	@ 0x8c
 800dc12:	2120      	movs	r1, #32
 800dc14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dc22:	46c0      	nop			@ (mov r8, r8)
 800dc24:	46bd      	mov	sp, r7
 800dc26:	b00e      	add	sp, #56	@ 0x38
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	46c0      	nop			@ (mov r8, r8)
 800dc2c:	fffffedf 	.word	0xfffffedf
 800dc30:	effffffe 	.word	0xeffffffe

0800dc34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2284      	movs	r2, #132	@ 0x84
 800dc40:	5c9b      	ldrb	r3, [r3, r2]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d101      	bne.n	800dc4a <HAL_UARTEx_DisableFifoMode+0x16>
 800dc46:	2302      	movs	r3, #2
 800dc48:	e027      	b.n	800dc9a <HAL_UARTEx_DisableFifoMode+0x66>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2284      	movs	r2, #132	@ 0x84
 800dc4e:	2101      	movs	r1, #1
 800dc50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2288      	movs	r2, #136	@ 0x88
 800dc56:	2124      	movs	r1, #36	@ 0x24
 800dc58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2101      	movs	r1, #1
 800dc6e:	438a      	bics	r2, r1
 800dc70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	4a0b      	ldr	r2, [pc, #44]	@ (800dca4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800dc76:	4013      	ands	r3, r2
 800dc78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2288      	movs	r2, #136	@ 0x88
 800dc8c:	2120      	movs	r1, #32
 800dc8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2284      	movs	r2, #132	@ 0x84
 800dc94:	2100      	movs	r1, #0
 800dc96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc98:	2300      	movs	r3, #0
}
 800dc9a:	0018      	movs	r0, r3
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	b004      	add	sp, #16
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	dfffffff 	.word	0xdfffffff

0800dca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2284      	movs	r2, #132	@ 0x84
 800dcb6:	5c9b      	ldrb	r3, [r3, r2]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d101      	bne.n	800dcc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dcbc:	2302      	movs	r3, #2
 800dcbe:	e02e      	b.n	800dd1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2284      	movs	r2, #132	@ 0x84
 800dcc4:	2101      	movs	r1, #1
 800dcc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2288      	movs	r2, #136	@ 0x88
 800dccc:	2124      	movs	r1, #36	@ 0x24
 800dcce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2101      	movs	r1, #1
 800dce4:	438a      	bics	r2, r1
 800dce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	00db      	lsls	r3, r3, #3
 800dcf0:	08d9      	lsrs	r1, r3, #3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	683a      	ldr	r2, [r7, #0]
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	0018      	movs	r0, r3
 800dd00:	f000 f854 	bl	800ddac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2288      	movs	r2, #136	@ 0x88
 800dd10:	2120      	movs	r1, #32
 800dd12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2284      	movs	r2, #132	@ 0x84
 800dd18:	2100      	movs	r1, #0
 800dd1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	0018      	movs	r0, r3
 800dd20:	46bd      	mov	sp, r7
 800dd22:	b004      	add	sp, #16
 800dd24:	bd80      	pop	{r7, pc}
	...

0800dd28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2284      	movs	r2, #132	@ 0x84
 800dd36:	5c9b      	ldrb	r3, [r3, r2]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d101      	bne.n	800dd40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd3c:	2302      	movs	r3, #2
 800dd3e:	e02f      	b.n	800dda0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2284      	movs	r2, #132	@ 0x84
 800dd44:	2101      	movs	r1, #1
 800dd46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2288      	movs	r2, #136	@ 0x88
 800dd4c:	2124      	movs	r1, #36	@ 0x24
 800dd4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	2101      	movs	r1, #1
 800dd64:	438a      	bics	r2, r1
 800dd66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	4a0e      	ldr	r2, [pc, #56]	@ (800dda8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800dd70:	4013      	ands	r3, r2
 800dd72:	0019      	movs	r1, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	0018      	movs	r0, r3
 800dd82:	f000 f813 	bl	800ddac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2288      	movs	r2, #136	@ 0x88
 800dd92:	2120      	movs	r1, #32
 800dd94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2284      	movs	r2, #132	@ 0x84
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	0018      	movs	r0, r3
 800dda2:	46bd      	mov	sp, r7
 800dda4:	b004      	add	sp, #16
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	f1ffffff 	.word	0xf1ffffff

0800ddac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ddac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddae:	b085      	sub	sp, #20
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d108      	bne.n	800ddce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	226a      	movs	r2, #106	@ 0x6a
 800ddc0:	2101      	movs	r1, #1
 800ddc2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2268      	movs	r2, #104	@ 0x68
 800ddc8:	2101      	movs	r1, #1
 800ddca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ddcc:	e043      	b.n	800de56 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ddce:	260f      	movs	r6, #15
 800ddd0:	19bb      	adds	r3, r7, r6
 800ddd2:	2208      	movs	r2, #8
 800ddd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ddd6:	200e      	movs	r0, #14
 800ddd8:	183b      	adds	r3, r7, r0
 800ddda:	2208      	movs	r2, #8
 800dddc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	0e5b      	lsrs	r3, r3, #25
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	240d      	movs	r4, #13
 800ddea:	193b      	adds	r3, r7, r4
 800ddec:	2107      	movs	r1, #7
 800ddee:	400a      	ands	r2, r1
 800ddf0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	0f5b      	lsrs	r3, r3, #29
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	250c      	movs	r5, #12
 800ddfe:	197b      	adds	r3, r7, r5
 800de00:	2107      	movs	r1, #7
 800de02:	400a      	ands	r2, r1
 800de04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de06:	183b      	adds	r3, r7, r0
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	197a      	adds	r2, r7, r5
 800de0c:	7812      	ldrb	r2, [r2, #0]
 800de0e:	4914      	ldr	r1, [pc, #80]	@ (800de60 <UARTEx_SetNbDataToProcess+0xb4>)
 800de10:	5c8a      	ldrb	r2, [r1, r2]
 800de12:	435a      	muls	r2, r3
 800de14:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800de16:	197b      	adds	r3, r7, r5
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	4a12      	ldr	r2, [pc, #72]	@ (800de64 <UARTEx_SetNbDataToProcess+0xb8>)
 800de1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de1e:	0019      	movs	r1, r3
 800de20:	f7f2 fa22 	bl	8000268 <__divsi3>
 800de24:	0003      	movs	r3, r0
 800de26:	b299      	uxth	r1, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	226a      	movs	r2, #106	@ 0x6a
 800de2c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de2e:	19bb      	adds	r3, r7, r6
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	193a      	adds	r2, r7, r4
 800de34:	7812      	ldrb	r2, [r2, #0]
 800de36:	490a      	ldr	r1, [pc, #40]	@ (800de60 <UARTEx_SetNbDataToProcess+0xb4>)
 800de38:	5c8a      	ldrb	r2, [r1, r2]
 800de3a:	435a      	muls	r2, r3
 800de3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800de3e:	193b      	adds	r3, r7, r4
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4a08      	ldr	r2, [pc, #32]	@ (800de64 <UARTEx_SetNbDataToProcess+0xb8>)
 800de44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de46:	0019      	movs	r1, r3
 800de48:	f7f2 fa0e 	bl	8000268 <__divsi3>
 800de4c:	0003      	movs	r3, r0
 800de4e:	b299      	uxth	r1, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2268      	movs	r2, #104	@ 0x68
 800de54:	5299      	strh	r1, [r3, r2]
}
 800de56:	46c0      	nop			@ (mov r8, r8)
 800de58:	46bd      	mov	sp, r7
 800de5a:	b005      	add	sp, #20
 800de5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de5e:	46c0      	nop			@ (mov r8, r8)
 800de60:	0801c29c 	.word	0x0801c29c
 800de64:	0801c2a4 	.word	0x0801c2a4

0800de68 <sulp>:
 800de68:	b570      	push	{r4, r5, r6, lr}
 800de6a:	0016      	movs	r6, r2
 800de6c:	000d      	movs	r5, r1
 800de6e:	f002 f92b 	bl	80100c8 <__ulp>
 800de72:	2e00      	cmp	r6, #0
 800de74:	d00d      	beq.n	800de92 <sulp+0x2a>
 800de76:	236b      	movs	r3, #107	@ 0x6b
 800de78:	006a      	lsls	r2, r5, #1
 800de7a:	0d52      	lsrs	r2, r2, #21
 800de7c:	1a9b      	subs	r3, r3, r2
 800de7e:	2b00      	cmp	r3, #0
 800de80:	dd07      	ble.n	800de92 <sulp+0x2a>
 800de82:	2400      	movs	r4, #0
 800de84:	4a03      	ldr	r2, [pc, #12]	@ (800de94 <sulp+0x2c>)
 800de86:	051b      	lsls	r3, r3, #20
 800de88:	189d      	adds	r5, r3, r2
 800de8a:	002b      	movs	r3, r5
 800de8c:	0022      	movs	r2, r4
 800de8e:	f7f4 fd59 	bl	8002944 <__aeabi_dmul>
 800de92:	bd70      	pop	{r4, r5, r6, pc}
 800de94:	3ff00000 	.word	0x3ff00000

0800de98 <_strtod_l>:
 800de98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de9a:	b0a3      	sub	sp, #140	@ 0x8c
 800de9c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800de9e:	2200      	movs	r2, #0
 800dea0:	2600      	movs	r6, #0
 800dea2:	2700      	movs	r7, #0
 800dea4:	9005      	str	r0, [sp, #20]
 800dea6:	9109      	str	r1, [sp, #36]	@ 0x24
 800dea8:	921e      	str	r2, [sp, #120]	@ 0x78
 800deaa:	911d      	str	r1, [sp, #116]	@ 0x74
 800deac:	780a      	ldrb	r2, [r1, #0]
 800deae:	2a2b      	cmp	r2, #43	@ 0x2b
 800deb0:	d053      	beq.n	800df5a <_strtod_l+0xc2>
 800deb2:	d83f      	bhi.n	800df34 <_strtod_l+0x9c>
 800deb4:	2a0d      	cmp	r2, #13
 800deb6:	d839      	bhi.n	800df2c <_strtod_l+0x94>
 800deb8:	2a08      	cmp	r2, #8
 800deba:	d839      	bhi.n	800df30 <_strtod_l+0x98>
 800debc:	2a00      	cmp	r2, #0
 800debe:	d042      	beq.n	800df46 <_strtod_l+0xae>
 800dec0:	2200      	movs	r2, #0
 800dec2:	9212      	str	r2, [sp, #72]	@ 0x48
 800dec4:	2100      	movs	r1, #0
 800dec6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800dec8:	910c      	str	r1, [sp, #48]	@ 0x30
 800deca:	782a      	ldrb	r2, [r5, #0]
 800decc:	2a30      	cmp	r2, #48	@ 0x30
 800dece:	d000      	beq.n	800ded2 <_strtod_l+0x3a>
 800ded0:	e083      	b.n	800dfda <_strtod_l+0x142>
 800ded2:	786a      	ldrb	r2, [r5, #1]
 800ded4:	3120      	adds	r1, #32
 800ded6:	438a      	bics	r2, r1
 800ded8:	2a58      	cmp	r2, #88	@ 0x58
 800deda:	d000      	beq.n	800dede <_strtod_l+0x46>
 800dedc:	e073      	b.n	800dfc6 <_strtod_l+0x12e>
 800dede:	9302      	str	r3, [sp, #8]
 800dee0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dee2:	4a9b      	ldr	r2, [pc, #620]	@ (800e150 <_strtod_l+0x2b8>)
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	ab1e      	add	r3, sp, #120	@ 0x78
 800dee8:	9300      	str	r3, [sp, #0]
 800deea:	9805      	ldr	r0, [sp, #20]
 800deec:	ab1f      	add	r3, sp, #124	@ 0x7c
 800deee:	a91d      	add	r1, sp, #116	@ 0x74
 800def0:	f001 f9ac 	bl	800f24c <__gethex>
 800def4:	230f      	movs	r3, #15
 800def6:	0002      	movs	r2, r0
 800def8:	401a      	ands	r2, r3
 800defa:	0004      	movs	r4, r0
 800defc:	9206      	str	r2, [sp, #24]
 800defe:	4218      	tst	r0, r3
 800df00:	d005      	beq.n	800df0e <_strtod_l+0x76>
 800df02:	2a06      	cmp	r2, #6
 800df04:	d12b      	bne.n	800df5e <_strtod_l+0xc6>
 800df06:	2300      	movs	r3, #0
 800df08:	3501      	adds	r5, #1
 800df0a:	951d      	str	r5, [sp, #116]	@ 0x74
 800df0c:	9312      	str	r3, [sp, #72]	@ 0x48
 800df0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <_strtod_l+0x82>
 800df14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d019      	beq.n	800df54 <_strtod_l+0xbc>
 800df20:	2380      	movs	r3, #128	@ 0x80
 800df22:	0030      	movs	r0, r6
 800df24:	061b      	lsls	r3, r3, #24
 800df26:	18f9      	adds	r1, r7, r3
 800df28:	b023      	add	sp, #140	@ 0x8c
 800df2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df2c:	2a20      	cmp	r2, #32
 800df2e:	d1c7      	bne.n	800dec0 <_strtod_l+0x28>
 800df30:	3101      	adds	r1, #1
 800df32:	e7ba      	b.n	800deaa <_strtod_l+0x12>
 800df34:	2a2d      	cmp	r2, #45	@ 0x2d
 800df36:	d1c3      	bne.n	800dec0 <_strtod_l+0x28>
 800df38:	3a2c      	subs	r2, #44	@ 0x2c
 800df3a:	9212      	str	r2, [sp, #72]	@ 0x48
 800df3c:	1c4a      	adds	r2, r1, #1
 800df3e:	921d      	str	r2, [sp, #116]	@ 0x74
 800df40:	784a      	ldrb	r2, [r1, #1]
 800df42:	2a00      	cmp	r2, #0
 800df44:	d1be      	bne.n	800dec4 <_strtod_l+0x2c>
 800df46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df48:	931d      	str	r3, [sp, #116]	@ 0x74
 800df4a:	2300      	movs	r3, #0
 800df4c:	9312      	str	r3, [sp, #72]	@ 0x48
 800df4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800df50:	2b00      	cmp	r3, #0
 800df52:	d1df      	bne.n	800df14 <_strtod_l+0x7c>
 800df54:	0030      	movs	r0, r6
 800df56:	0039      	movs	r1, r7
 800df58:	e7e6      	b.n	800df28 <_strtod_l+0x90>
 800df5a:	2200      	movs	r2, #0
 800df5c:	e7ed      	b.n	800df3a <_strtod_l+0xa2>
 800df5e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800df60:	2a00      	cmp	r2, #0
 800df62:	d007      	beq.n	800df74 <_strtod_l+0xdc>
 800df64:	2135      	movs	r1, #53	@ 0x35
 800df66:	a820      	add	r0, sp, #128	@ 0x80
 800df68:	f002 f9a4 	bl	80102b4 <__copybits>
 800df6c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800df6e:	9805      	ldr	r0, [sp, #20]
 800df70:	f001 fd66 	bl	800fa40 <_Bfree>
 800df74:	9806      	ldr	r0, [sp, #24]
 800df76:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800df78:	3801      	subs	r0, #1
 800df7a:	2804      	cmp	r0, #4
 800df7c:	d806      	bhi.n	800df8c <_strtod_l+0xf4>
 800df7e:	f7f2 f8d5 	bl	800012c <__gnu_thumb1_case_uqi>
 800df82:	0312      	.short	0x0312
 800df84:	1e1c      	.short	0x1e1c
 800df86:	12          	.byte	0x12
 800df87:	00          	.byte	0x00
 800df88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800df8a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800df8c:	05e4      	lsls	r4, r4, #23
 800df8e:	d502      	bpl.n	800df96 <_strtod_l+0xfe>
 800df90:	2380      	movs	r3, #128	@ 0x80
 800df92:	061b      	lsls	r3, r3, #24
 800df94:	431f      	orrs	r7, r3
 800df96:	4b6f      	ldr	r3, [pc, #444]	@ (800e154 <_strtod_l+0x2bc>)
 800df98:	423b      	tst	r3, r7
 800df9a:	d1b8      	bne.n	800df0e <_strtod_l+0x76>
 800df9c:	f001 f868 	bl	800f070 <__errno>
 800dfa0:	2322      	movs	r3, #34	@ 0x22
 800dfa2:	6003      	str	r3, [r0, #0]
 800dfa4:	e7b3      	b.n	800df0e <_strtod_l+0x76>
 800dfa6:	496c      	ldr	r1, [pc, #432]	@ (800e158 <_strtod_l+0x2c0>)
 800dfa8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dfaa:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dfac:	400a      	ands	r2, r1
 800dfae:	496b      	ldr	r1, [pc, #428]	@ (800e15c <_strtod_l+0x2c4>)
 800dfb0:	185b      	adds	r3, r3, r1
 800dfb2:	051b      	lsls	r3, r3, #20
 800dfb4:	431a      	orrs	r2, r3
 800dfb6:	0017      	movs	r7, r2
 800dfb8:	e7e8      	b.n	800df8c <_strtod_l+0xf4>
 800dfba:	4f66      	ldr	r7, [pc, #408]	@ (800e154 <_strtod_l+0x2bc>)
 800dfbc:	e7e6      	b.n	800df8c <_strtod_l+0xf4>
 800dfbe:	2601      	movs	r6, #1
 800dfc0:	4f67      	ldr	r7, [pc, #412]	@ (800e160 <_strtod_l+0x2c8>)
 800dfc2:	4276      	negs	r6, r6
 800dfc4:	e7e2      	b.n	800df8c <_strtod_l+0xf4>
 800dfc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dfc8:	1c5a      	adds	r2, r3, #1
 800dfca:	921d      	str	r2, [sp, #116]	@ 0x74
 800dfcc:	785b      	ldrb	r3, [r3, #1]
 800dfce:	2b30      	cmp	r3, #48	@ 0x30
 800dfd0:	d0f9      	beq.n	800dfc6 <_strtod_l+0x12e>
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d09b      	beq.n	800df0e <_strtod_l+0x76>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	930c      	str	r3, [sp, #48]	@ 0x30
 800dfda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dfdc:	220a      	movs	r2, #10
 800dfde:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfe4:	930d      	str	r3, [sp, #52]	@ 0x34
 800dfe6:	9308      	str	r3, [sp, #32]
 800dfe8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800dfea:	7804      	ldrb	r4, [r0, #0]
 800dfec:	0023      	movs	r3, r4
 800dfee:	3b30      	subs	r3, #48	@ 0x30
 800dff0:	b2d9      	uxtb	r1, r3
 800dff2:	2909      	cmp	r1, #9
 800dff4:	d927      	bls.n	800e046 <_strtod_l+0x1ae>
 800dff6:	2201      	movs	r2, #1
 800dff8:	495a      	ldr	r1, [pc, #360]	@ (800e164 <_strtod_l+0x2cc>)
 800dffa:	f000 ffd9 	bl	800efb0 <strncmp>
 800dffe:	2800      	cmp	r0, #0
 800e000:	d033      	beq.n	800e06a <_strtod_l+0x1d2>
 800e002:	2000      	movs	r0, #0
 800e004:	0023      	movs	r3, r4
 800e006:	4684      	mov	ip, r0
 800e008:	9a08      	ldr	r2, [sp, #32]
 800e00a:	900e      	str	r0, [sp, #56]	@ 0x38
 800e00c:	9206      	str	r2, [sp, #24]
 800e00e:	2220      	movs	r2, #32
 800e010:	0019      	movs	r1, r3
 800e012:	4391      	bics	r1, r2
 800e014:	000a      	movs	r2, r1
 800e016:	2100      	movs	r1, #0
 800e018:	9107      	str	r1, [sp, #28]
 800e01a:	2a45      	cmp	r2, #69	@ 0x45
 800e01c:	d000      	beq.n	800e020 <_strtod_l+0x188>
 800e01e:	e0cb      	b.n	800e1b8 <_strtod_l+0x320>
 800e020:	9b06      	ldr	r3, [sp, #24]
 800e022:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e024:	4303      	orrs	r3, r0
 800e026:	4313      	orrs	r3, r2
 800e028:	428b      	cmp	r3, r1
 800e02a:	d08c      	beq.n	800df46 <_strtod_l+0xae>
 800e02c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e02e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e030:	3301      	adds	r3, #1
 800e032:	931d      	str	r3, [sp, #116]	@ 0x74
 800e034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e036:	785b      	ldrb	r3, [r3, #1]
 800e038:	2b2b      	cmp	r3, #43	@ 0x2b
 800e03a:	d07b      	beq.n	800e134 <_strtod_l+0x29c>
 800e03c:	000c      	movs	r4, r1
 800e03e:	2b2d      	cmp	r3, #45	@ 0x2d
 800e040:	d17e      	bne.n	800e140 <_strtod_l+0x2a8>
 800e042:	2401      	movs	r4, #1
 800e044:	e077      	b.n	800e136 <_strtod_l+0x29e>
 800e046:	9908      	ldr	r1, [sp, #32]
 800e048:	2908      	cmp	r1, #8
 800e04a:	dc09      	bgt.n	800e060 <_strtod_l+0x1c8>
 800e04c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e04e:	4351      	muls	r1, r2
 800e050:	185b      	adds	r3, r3, r1
 800e052:	930d      	str	r3, [sp, #52]	@ 0x34
 800e054:	9b08      	ldr	r3, [sp, #32]
 800e056:	3001      	adds	r0, #1
 800e058:	3301      	adds	r3, #1
 800e05a:	9308      	str	r3, [sp, #32]
 800e05c:	901d      	str	r0, [sp, #116]	@ 0x74
 800e05e:	e7c3      	b.n	800dfe8 <_strtod_l+0x150>
 800e060:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e062:	4355      	muls	r5, r2
 800e064:	195b      	adds	r3, r3, r5
 800e066:	9310      	str	r3, [sp, #64]	@ 0x40
 800e068:	e7f4      	b.n	800e054 <_strtod_l+0x1bc>
 800e06a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	921d      	str	r2, [sp, #116]	@ 0x74
 800e070:	9a08      	ldr	r2, [sp, #32]
 800e072:	785b      	ldrb	r3, [r3, #1]
 800e074:	2a00      	cmp	r2, #0
 800e076:	d03e      	beq.n	800e0f6 <_strtod_l+0x25e>
 800e078:	900e      	str	r0, [sp, #56]	@ 0x38
 800e07a:	9206      	str	r2, [sp, #24]
 800e07c:	001a      	movs	r2, r3
 800e07e:	3a30      	subs	r2, #48	@ 0x30
 800e080:	2a09      	cmp	r2, #9
 800e082:	d912      	bls.n	800e0aa <_strtod_l+0x212>
 800e084:	2201      	movs	r2, #1
 800e086:	4694      	mov	ip, r2
 800e088:	e7c1      	b.n	800e00e <_strtod_l+0x176>
 800e08a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e08c:	3001      	adds	r0, #1
 800e08e:	1c5a      	adds	r2, r3, #1
 800e090:	921d      	str	r2, [sp, #116]	@ 0x74
 800e092:	785b      	ldrb	r3, [r3, #1]
 800e094:	2b30      	cmp	r3, #48	@ 0x30
 800e096:	d0f8      	beq.n	800e08a <_strtod_l+0x1f2>
 800e098:	001a      	movs	r2, r3
 800e09a:	3a31      	subs	r2, #49	@ 0x31
 800e09c:	2a08      	cmp	r2, #8
 800e09e:	d844      	bhi.n	800e12a <_strtod_l+0x292>
 800e0a0:	900e      	str	r0, [sp, #56]	@ 0x38
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e0a6:	9006      	str	r0, [sp, #24]
 800e0a8:	9213      	str	r2, [sp, #76]	@ 0x4c
 800e0aa:	001c      	movs	r4, r3
 800e0ac:	1c42      	adds	r2, r0, #1
 800e0ae:	3c30      	subs	r4, #48	@ 0x30
 800e0b0:	2b30      	cmp	r3, #48	@ 0x30
 800e0b2:	d01a      	beq.n	800e0ea <_strtod_l+0x252>
 800e0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0b6:	9906      	ldr	r1, [sp, #24]
 800e0b8:	189b      	adds	r3, r3, r2
 800e0ba:	930e      	str	r3, [sp, #56]	@ 0x38
 800e0bc:	230a      	movs	r3, #10
 800e0be:	469c      	mov	ip, r3
 800e0c0:	9d06      	ldr	r5, [sp, #24]
 800e0c2:	1c4b      	adds	r3, r1, #1
 800e0c4:	1b5d      	subs	r5, r3, r5
 800e0c6:	42aa      	cmp	r2, r5
 800e0c8:	dc17      	bgt.n	800e0fa <_strtod_l+0x262>
 800e0ca:	43c3      	mvns	r3, r0
 800e0cc:	9a06      	ldr	r2, [sp, #24]
 800e0ce:	17db      	asrs	r3, r3, #31
 800e0d0:	4003      	ands	r3, r0
 800e0d2:	18d1      	adds	r1, r2, r3
 800e0d4:	3201      	adds	r2, #1
 800e0d6:	18d3      	adds	r3, r2, r3
 800e0d8:	9306      	str	r3, [sp, #24]
 800e0da:	2908      	cmp	r1, #8
 800e0dc:	dc1c      	bgt.n	800e118 <_strtod_l+0x280>
 800e0de:	230a      	movs	r3, #10
 800e0e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e0e2:	4353      	muls	r3, r2
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	18e3      	adds	r3, r4, r3
 800e0e8:	930d      	str	r3, [sp, #52]	@ 0x34
 800e0ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0ec:	0010      	movs	r0, r2
 800e0ee:	1c59      	adds	r1, r3, #1
 800e0f0:	911d      	str	r1, [sp, #116]	@ 0x74
 800e0f2:	785b      	ldrb	r3, [r3, #1]
 800e0f4:	e7c2      	b.n	800e07c <_strtod_l+0x1e4>
 800e0f6:	9808      	ldr	r0, [sp, #32]
 800e0f8:	e7cc      	b.n	800e094 <_strtod_l+0x1fc>
 800e0fa:	2908      	cmp	r1, #8
 800e0fc:	dc05      	bgt.n	800e10a <_strtod_l+0x272>
 800e0fe:	4665      	mov	r5, ip
 800e100:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e102:	4369      	muls	r1, r5
 800e104:	910d      	str	r1, [sp, #52]	@ 0x34
 800e106:	0019      	movs	r1, r3
 800e108:	e7da      	b.n	800e0c0 <_strtod_l+0x228>
 800e10a:	2b10      	cmp	r3, #16
 800e10c:	dcfb      	bgt.n	800e106 <_strtod_l+0x26e>
 800e10e:	4661      	mov	r1, ip
 800e110:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e112:	434d      	muls	r5, r1
 800e114:	9510      	str	r5, [sp, #64]	@ 0x40
 800e116:	e7f6      	b.n	800e106 <_strtod_l+0x26e>
 800e118:	2200      	movs	r2, #0
 800e11a:	290f      	cmp	r1, #15
 800e11c:	dce5      	bgt.n	800e0ea <_strtod_l+0x252>
 800e11e:	230a      	movs	r3, #10
 800e120:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e122:	435d      	muls	r5, r3
 800e124:	1963      	adds	r3, r4, r5
 800e126:	9310      	str	r3, [sp, #64]	@ 0x40
 800e128:	e7df      	b.n	800e0ea <_strtod_l+0x252>
 800e12a:	2200      	movs	r2, #0
 800e12c:	920e      	str	r2, [sp, #56]	@ 0x38
 800e12e:	9206      	str	r2, [sp, #24]
 800e130:	3201      	adds	r2, #1
 800e132:	e7a8      	b.n	800e086 <_strtod_l+0x1ee>
 800e134:	2400      	movs	r4, #0
 800e136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e138:	3302      	adds	r3, #2
 800e13a:	931d      	str	r3, [sp, #116]	@ 0x74
 800e13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e13e:	789b      	ldrb	r3, [r3, #2]
 800e140:	001a      	movs	r2, r3
 800e142:	3a30      	subs	r2, #48	@ 0x30
 800e144:	2a09      	cmp	r2, #9
 800e146:	d913      	bls.n	800e170 <_strtod_l+0x2d8>
 800e148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e14a:	921d      	str	r2, [sp, #116]	@ 0x74
 800e14c:	2200      	movs	r2, #0
 800e14e:	e032      	b.n	800e1b6 <_strtod_l+0x31e>
 800e150:	0801c428 	.word	0x0801c428
 800e154:	7ff00000 	.word	0x7ff00000
 800e158:	ffefffff 	.word	0xffefffff
 800e15c:	00000433 	.word	0x00000433
 800e160:	7fffffff 	.word	0x7fffffff
 800e164:	0801c2ac 	.word	0x0801c2ac
 800e168:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e16a:	1c5a      	adds	r2, r3, #1
 800e16c:	921d      	str	r2, [sp, #116]	@ 0x74
 800e16e:	785b      	ldrb	r3, [r3, #1]
 800e170:	2b30      	cmp	r3, #48	@ 0x30
 800e172:	d0f9      	beq.n	800e168 <_strtod_l+0x2d0>
 800e174:	2200      	movs	r2, #0
 800e176:	9207      	str	r2, [sp, #28]
 800e178:	001a      	movs	r2, r3
 800e17a:	3a31      	subs	r2, #49	@ 0x31
 800e17c:	2a08      	cmp	r2, #8
 800e17e:	d81b      	bhi.n	800e1b8 <_strtod_l+0x320>
 800e180:	3b30      	subs	r3, #48	@ 0x30
 800e182:	001a      	movs	r2, r3
 800e184:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e186:	9307      	str	r3, [sp, #28]
 800e188:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e18a:	1c59      	adds	r1, r3, #1
 800e18c:	911d      	str	r1, [sp, #116]	@ 0x74
 800e18e:	785b      	ldrb	r3, [r3, #1]
 800e190:	001d      	movs	r5, r3
 800e192:	3d30      	subs	r5, #48	@ 0x30
 800e194:	2d09      	cmp	r5, #9
 800e196:	d93a      	bls.n	800e20e <_strtod_l+0x376>
 800e198:	9d07      	ldr	r5, [sp, #28]
 800e19a:	1b49      	subs	r1, r1, r5
 800e19c:	000d      	movs	r5, r1
 800e19e:	49b3      	ldr	r1, [pc, #716]	@ (800e46c <_strtod_l+0x5d4>)
 800e1a0:	9107      	str	r1, [sp, #28]
 800e1a2:	2d08      	cmp	r5, #8
 800e1a4:	dc03      	bgt.n	800e1ae <_strtod_l+0x316>
 800e1a6:	9207      	str	r2, [sp, #28]
 800e1a8:	428a      	cmp	r2, r1
 800e1aa:	dd00      	ble.n	800e1ae <_strtod_l+0x316>
 800e1ac:	9107      	str	r1, [sp, #28]
 800e1ae:	2c00      	cmp	r4, #0
 800e1b0:	d002      	beq.n	800e1b8 <_strtod_l+0x320>
 800e1b2:	9a07      	ldr	r2, [sp, #28]
 800e1b4:	4252      	negs	r2, r2
 800e1b6:	9207      	str	r2, [sp, #28]
 800e1b8:	9a06      	ldr	r2, [sp, #24]
 800e1ba:	2a00      	cmp	r2, #0
 800e1bc:	d14b      	bne.n	800e256 <_strtod_l+0x3be>
 800e1be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e1c0:	4310      	orrs	r0, r2
 800e1c2:	d000      	beq.n	800e1c6 <_strtod_l+0x32e>
 800e1c4:	e6a3      	b.n	800df0e <_strtod_l+0x76>
 800e1c6:	4662      	mov	r2, ip
 800e1c8:	2a00      	cmp	r2, #0
 800e1ca:	d000      	beq.n	800e1ce <_strtod_l+0x336>
 800e1cc:	e6bb      	b.n	800df46 <_strtod_l+0xae>
 800e1ce:	2b69      	cmp	r3, #105	@ 0x69
 800e1d0:	d025      	beq.n	800e21e <_strtod_l+0x386>
 800e1d2:	dc21      	bgt.n	800e218 <_strtod_l+0x380>
 800e1d4:	2b49      	cmp	r3, #73	@ 0x49
 800e1d6:	d022      	beq.n	800e21e <_strtod_l+0x386>
 800e1d8:	2b4e      	cmp	r3, #78	@ 0x4e
 800e1da:	d000      	beq.n	800e1de <_strtod_l+0x346>
 800e1dc:	e6b3      	b.n	800df46 <_strtod_l+0xae>
 800e1de:	49a4      	ldr	r1, [pc, #656]	@ (800e470 <_strtod_l+0x5d8>)
 800e1e0:	a81d      	add	r0, sp, #116	@ 0x74
 800e1e2:	f001 fa69 	bl	800f6b8 <__match>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d100      	bne.n	800e1ec <_strtod_l+0x354>
 800e1ea:	e6ac      	b.n	800df46 <_strtod_l+0xae>
 800e1ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b28      	cmp	r3, #40	@ 0x28
 800e1f2:	d12a      	bne.n	800e24a <_strtod_l+0x3b2>
 800e1f4:	499f      	ldr	r1, [pc, #636]	@ (800e474 <_strtod_l+0x5dc>)
 800e1f6:	aa20      	add	r2, sp, #128	@ 0x80
 800e1f8:	a81d      	add	r0, sp, #116	@ 0x74
 800e1fa:	f001 fa71 	bl	800f6e0 <__hexnan>
 800e1fe:	2805      	cmp	r0, #5
 800e200:	d123      	bne.n	800e24a <_strtod_l+0x3b2>
 800e202:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e204:	4a9c      	ldr	r2, [pc, #624]	@ (800e478 <_strtod_l+0x5e0>)
 800e206:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e208:	431a      	orrs	r2, r3
 800e20a:	0017      	movs	r7, r2
 800e20c:	e67f      	b.n	800df0e <_strtod_l+0x76>
 800e20e:	210a      	movs	r1, #10
 800e210:	434a      	muls	r2, r1
 800e212:	18d2      	adds	r2, r2, r3
 800e214:	3a30      	subs	r2, #48	@ 0x30
 800e216:	e7b7      	b.n	800e188 <_strtod_l+0x2f0>
 800e218:	2b6e      	cmp	r3, #110	@ 0x6e
 800e21a:	d0e0      	beq.n	800e1de <_strtod_l+0x346>
 800e21c:	e693      	b.n	800df46 <_strtod_l+0xae>
 800e21e:	4997      	ldr	r1, [pc, #604]	@ (800e47c <_strtod_l+0x5e4>)
 800e220:	a81d      	add	r0, sp, #116	@ 0x74
 800e222:	f001 fa49 	bl	800f6b8 <__match>
 800e226:	2800      	cmp	r0, #0
 800e228:	d100      	bne.n	800e22c <_strtod_l+0x394>
 800e22a:	e68c      	b.n	800df46 <_strtod_l+0xae>
 800e22c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e22e:	4994      	ldr	r1, [pc, #592]	@ (800e480 <_strtod_l+0x5e8>)
 800e230:	3b01      	subs	r3, #1
 800e232:	a81d      	add	r0, sp, #116	@ 0x74
 800e234:	931d      	str	r3, [sp, #116]	@ 0x74
 800e236:	f001 fa3f 	bl	800f6b8 <__match>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d102      	bne.n	800e244 <_strtod_l+0x3ac>
 800e23e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e240:	3301      	adds	r3, #1
 800e242:	931d      	str	r3, [sp, #116]	@ 0x74
 800e244:	2600      	movs	r6, #0
 800e246:	4f8c      	ldr	r7, [pc, #560]	@ (800e478 <_strtod_l+0x5e0>)
 800e248:	e661      	b.n	800df0e <_strtod_l+0x76>
 800e24a:	488e      	ldr	r0, [pc, #568]	@ (800e484 <_strtod_l+0x5ec>)
 800e24c:	f000 ff46 	bl	800f0dc <nan>
 800e250:	0006      	movs	r6, r0
 800e252:	000f      	movs	r7, r1
 800e254:	e65b      	b.n	800df0e <_strtod_l+0x76>
 800e256:	9b07      	ldr	r3, [sp, #28]
 800e258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e25a:	1a9b      	subs	r3, r3, r2
 800e25c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e25e:	9b08      	ldr	r3, [sp, #32]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d101      	bne.n	800e268 <_strtod_l+0x3d0>
 800e264:	9b06      	ldr	r3, [sp, #24]
 800e266:	9308      	str	r3, [sp, #32]
 800e268:	9c06      	ldr	r4, [sp, #24]
 800e26a:	2c10      	cmp	r4, #16
 800e26c:	dd00      	ble.n	800e270 <_strtod_l+0x3d8>
 800e26e:	2410      	movs	r4, #16
 800e270:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e272:	f7f5 fae3 	bl	800383c <__aeabi_ui2d>
 800e276:	9b06      	ldr	r3, [sp, #24]
 800e278:	0006      	movs	r6, r0
 800e27a:	000f      	movs	r7, r1
 800e27c:	2b09      	cmp	r3, #9
 800e27e:	dc13      	bgt.n	800e2a8 <_strtod_l+0x410>
 800e280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e282:	2b00      	cmp	r3, #0
 800e284:	d100      	bne.n	800e288 <_strtod_l+0x3f0>
 800e286:	e642      	b.n	800df0e <_strtod_l+0x76>
 800e288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	dc00      	bgt.n	800e290 <_strtod_l+0x3f8>
 800e28e:	e07e      	b.n	800e38e <_strtod_l+0x4f6>
 800e290:	2b16      	cmp	r3, #22
 800e292:	dc63      	bgt.n	800e35c <_strtod_l+0x4c4>
 800e294:	497c      	ldr	r1, [pc, #496]	@ (800e488 <_strtod_l+0x5f0>)
 800e296:	00db      	lsls	r3, r3, #3
 800e298:	18c9      	adds	r1, r1, r3
 800e29a:	0032      	movs	r2, r6
 800e29c:	6808      	ldr	r0, [r1, #0]
 800e29e:	6849      	ldr	r1, [r1, #4]
 800e2a0:	003b      	movs	r3, r7
 800e2a2:	f7f4 fb4f 	bl	8002944 <__aeabi_dmul>
 800e2a6:	e7d3      	b.n	800e250 <_strtod_l+0x3b8>
 800e2a8:	0022      	movs	r2, r4
 800e2aa:	4b77      	ldr	r3, [pc, #476]	@ (800e488 <_strtod_l+0x5f0>)
 800e2ac:	3a09      	subs	r2, #9
 800e2ae:	00d2      	lsls	r2, r2, #3
 800e2b0:	189b      	adds	r3, r3, r2
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	f7f4 fb45 	bl	8002944 <__aeabi_dmul>
 800e2ba:	0006      	movs	r6, r0
 800e2bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e2be:	000f      	movs	r7, r1
 800e2c0:	f7f5 fabc 	bl	800383c <__aeabi_ui2d>
 800e2c4:	000b      	movs	r3, r1
 800e2c6:	0002      	movs	r2, r0
 800e2c8:	0039      	movs	r1, r7
 800e2ca:	0030      	movs	r0, r6
 800e2cc:	f7f3 fb3a 	bl	8001944 <__aeabi_dadd>
 800e2d0:	9b06      	ldr	r3, [sp, #24]
 800e2d2:	0006      	movs	r6, r0
 800e2d4:	000f      	movs	r7, r1
 800e2d6:	2b0f      	cmp	r3, #15
 800e2d8:	ddd2      	ble.n	800e280 <_strtod_l+0x3e8>
 800e2da:	9b06      	ldr	r3, [sp, #24]
 800e2dc:	1b1c      	subs	r4, r3, r4
 800e2de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2e0:	18e4      	adds	r4, r4, r3
 800e2e2:	2c00      	cmp	r4, #0
 800e2e4:	dc00      	bgt.n	800e2e8 <_strtod_l+0x450>
 800e2e6:	e09b      	b.n	800e420 <_strtod_l+0x588>
 800e2e8:	220f      	movs	r2, #15
 800e2ea:	0023      	movs	r3, r4
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	4214      	tst	r4, r2
 800e2f0:	d00a      	beq.n	800e308 <_strtod_l+0x470>
 800e2f2:	4965      	ldr	r1, [pc, #404]	@ (800e488 <_strtod_l+0x5f0>)
 800e2f4:	00db      	lsls	r3, r3, #3
 800e2f6:	18c9      	adds	r1, r1, r3
 800e2f8:	0032      	movs	r2, r6
 800e2fa:	6808      	ldr	r0, [r1, #0]
 800e2fc:	6849      	ldr	r1, [r1, #4]
 800e2fe:	003b      	movs	r3, r7
 800e300:	f7f4 fb20 	bl	8002944 <__aeabi_dmul>
 800e304:	0006      	movs	r6, r0
 800e306:	000f      	movs	r7, r1
 800e308:	230f      	movs	r3, #15
 800e30a:	439c      	bics	r4, r3
 800e30c:	d073      	beq.n	800e3f6 <_strtod_l+0x55e>
 800e30e:	3326      	adds	r3, #38	@ 0x26
 800e310:	33ff      	adds	r3, #255	@ 0xff
 800e312:	429c      	cmp	r4, r3
 800e314:	dd4b      	ble.n	800e3ae <_strtod_l+0x516>
 800e316:	2300      	movs	r3, #0
 800e318:	9306      	str	r3, [sp, #24]
 800e31a:	9307      	str	r3, [sp, #28]
 800e31c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e31e:	9308      	str	r3, [sp, #32]
 800e320:	2322      	movs	r3, #34	@ 0x22
 800e322:	2600      	movs	r6, #0
 800e324:	9a05      	ldr	r2, [sp, #20]
 800e326:	4f54      	ldr	r7, [pc, #336]	@ (800e478 <_strtod_l+0x5e0>)
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e32c:	42b3      	cmp	r3, r6
 800e32e:	d100      	bne.n	800e332 <_strtod_l+0x49a>
 800e330:	e5ed      	b.n	800df0e <_strtod_l+0x76>
 800e332:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e334:	9805      	ldr	r0, [sp, #20]
 800e336:	f001 fb83 	bl	800fa40 <_Bfree>
 800e33a:	9908      	ldr	r1, [sp, #32]
 800e33c:	9805      	ldr	r0, [sp, #20]
 800e33e:	f001 fb7f 	bl	800fa40 <_Bfree>
 800e342:	9907      	ldr	r1, [sp, #28]
 800e344:	9805      	ldr	r0, [sp, #20]
 800e346:	f001 fb7b 	bl	800fa40 <_Bfree>
 800e34a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e34c:	9805      	ldr	r0, [sp, #20]
 800e34e:	f001 fb77 	bl	800fa40 <_Bfree>
 800e352:	9906      	ldr	r1, [sp, #24]
 800e354:	9805      	ldr	r0, [sp, #20]
 800e356:	f001 fb73 	bl	800fa40 <_Bfree>
 800e35a:	e5d8      	b.n	800df0e <_strtod_l+0x76>
 800e35c:	2325      	movs	r3, #37	@ 0x25
 800e35e:	9a06      	ldr	r2, [sp, #24]
 800e360:	1a9b      	subs	r3, r3, r2
 800e362:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e364:	4293      	cmp	r3, r2
 800e366:	dbb8      	blt.n	800e2da <_strtod_l+0x442>
 800e368:	240f      	movs	r4, #15
 800e36a:	9b06      	ldr	r3, [sp, #24]
 800e36c:	4d46      	ldr	r5, [pc, #280]	@ (800e488 <_strtod_l+0x5f0>)
 800e36e:	1ae4      	subs	r4, r4, r3
 800e370:	00e1      	lsls	r1, r4, #3
 800e372:	1869      	adds	r1, r5, r1
 800e374:	0032      	movs	r2, r6
 800e376:	6808      	ldr	r0, [r1, #0]
 800e378:	6849      	ldr	r1, [r1, #4]
 800e37a:	003b      	movs	r3, r7
 800e37c:	f7f4 fae2 	bl	8002944 <__aeabi_dmul>
 800e380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e382:	1b1c      	subs	r4, r3, r4
 800e384:	00e4      	lsls	r4, r4, #3
 800e386:	192d      	adds	r5, r5, r4
 800e388:	682a      	ldr	r2, [r5, #0]
 800e38a:	686b      	ldr	r3, [r5, #4]
 800e38c:	e789      	b.n	800e2a2 <_strtod_l+0x40a>
 800e38e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e390:	3316      	adds	r3, #22
 800e392:	dba2      	blt.n	800e2da <_strtod_l+0x442>
 800e394:	9907      	ldr	r1, [sp, #28]
 800e396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e398:	4b3b      	ldr	r3, [pc, #236]	@ (800e488 <_strtod_l+0x5f0>)
 800e39a:	1a52      	subs	r2, r2, r1
 800e39c:	00d2      	lsls	r2, r2, #3
 800e39e:	189b      	adds	r3, r3, r2
 800e3a0:	0030      	movs	r0, r6
 800e3a2:	681a      	ldr	r2, [r3, #0]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	0039      	movs	r1, r7
 800e3a8:	f7f3 fe92 	bl	80020d0 <__aeabi_ddiv>
 800e3ac:	e750      	b.n	800e250 <_strtod_l+0x3b8>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	0030      	movs	r0, r6
 800e3b2:	0039      	movs	r1, r7
 800e3b4:	4d35      	ldr	r5, [pc, #212]	@ (800e48c <_strtod_l+0x5f4>)
 800e3b6:	1124      	asrs	r4, r4, #4
 800e3b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3ba:	2c01      	cmp	r4, #1
 800e3bc:	dc1e      	bgt.n	800e3fc <_strtod_l+0x564>
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <_strtod_l+0x52e>
 800e3c2:	0006      	movs	r6, r0
 800e3c4:	000f      	movs	r7, r1
 800e3c6:	4b32      	ldr	r3, [pc, #200]	@ (800e490 <_strtod_l+0x5f8>)
 800e3c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ca:	18ff      	adds	r7, r7, r3
 800e3cc:	4b2f      	ldr	r3, [pc, #188]	@ (800e48c <_strtod_l+0x5f4>)
 800e3ce:	00d5      	lsls	r5, r2, #3
 800e3d0:	195d      	adds	r5, r3, r5
 800e3d2:	0032      	movs	r2, r6
 800e3d4:	6828      	ldr	r0, [r5, #0]
 800e3d6:	6869      	ldr	r1, [r5, #4]
 800e3d8:	003b      	movs	r3, r7
 800e3da:	f7f4 fab3 	bl	8002944 <__aeabi_dmul>
 800e3de:	4b26      	ldr	r3, [pc, #152]	@ (800e478 <_strtod_l+0x5e0>)
 800e3e0:	4a2c      	ldr	r2, [pc, #176]	@ (800e494 <_strtod_l+0x5fc>)
 800e3e2:	0006      	movs	r6, r0
 800e3e4:	400b      	ands	r3, r1
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d895      	bhi.n	800e316 <_strtod_l+0x47e>
 800e3ea:	4a2b      	ldr	r2, [pc, #172]	@ (800e498 <_strtod_l+0x600>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d913      	bls.n	800e418 <_strtod_l+0x580>
 800e3f0:	2601      	movs	r6, #1
 800e3f2:	4f2a      	ldr	r7, [pc, #168]	@ (800e49c <_strtod_l+0x604>)
 800e3f4:	4276      	negs	r6, r6
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3fa:	e086      	b.n	800e50a <_strtod_l+0x672>
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	4214      	tst	r4, r2
 800e400:	d004      	beq.n	800e40c <_strtod_l+0x574>
 800e402:	682a      	ldr	r2, [r5, #0]
 800e404:	686b      	ldr	r3, [r5, #4]
 800e406:	f7f4 fa9d 	bl	8002944 <__aeabi_dmul>
 800e40a:	2301      	movs	r3, #1
 800e40c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e40e:	1064      	asrs	r4, r4, #1
 800e410:	3201      	adds	r2, #1
 800e412:	9209      	str	r2, [sp, #36]	@ 0x24
 800e414:	3508      	adds	r5, #8
 800e416:	e7d0      	b.n	800e3ba <_strtod_l+0x522>
 800e418:	23d4      	movs	r3, #212	@ 0xd4
 800e41a:	049b      	lsls	r3, r3, #18
 800e41c:	18cf      	adds	r7, r1, r3
 800e41e:	e7ea      	b.n	800e3f6 <_strtod_l+0x55e>
 800e420:	2c00      	cmp	r4, #0
 800e422:	d0e8      	beq.n	800e3f6 <_strtod_l+0x55e>
 800e424:	4264      	negs	r4, r4
 800e426:	230f      	movs	r3, #15
 800e428:	0022      	movs	r2, r4
 800e42a:	401a      	ands	r2, r3
 800e42c:	421c      	tst	r4, r3
 800e42e:	d00a      	beq.n	800e446 <_strtod_l+0x5ae>
 800e430:	4b15      	ldr	r3, [pc, #84]	@ (800e488 <_strtod_l+0x5f0>)
 800e432:	00d2      	lsls	r2, r2, #3
 800e434:	189b      	adds	r3, r3, r2
 800e436:	0030      	movs	r0, r6
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	0039      	movs	r1, r7
 800e43e:	f7f3 fe47 	bl	80020d0 <__aeabi_ddiv>
 800e442:	0006      	movs	r6, r0
 800e444:	000f      	movs	r7, r1
 800e446:	1124      	asrs	r4, r4, #4
 800e448:	d0d5      	beq.n	800e3f6 <_strtod_l+0x55e>
 800e44a:	2c1f      	cmp	r4, #31
 800e44c:	dd28      	ble.n	800e4a0 <_strtod_l+0x608>
 800e44e:	2300      	movs	r3, #0
 800e450:	9306      	str	r3, [sp, #24]
 800e452:	9307      	str	r3, [sp, #28]
 800e454:	930d      	str	r3, [sp, #52]	@ 0x34
 800e456:	9308      	str	r3, [sp, #32]
 800e458:	2322      	movs	r3, #34	@ 0x22
 800e45a:	9a05      	ldr	r2, [sp, #20]
 800e45c:	2600      	movs	r6, #0
 800e45e:	6013      	str	r3, [r2, #0]
 800e460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e462:	2700      	movs	r7, #0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d000      	beq.n	800e46a <_strtod_l+0x5d2>
 800e468:	e763      	b.n	800e332 <_strtod_l+0x49a>
 800e46a:	e550      	b.n	800df0e <_strtod_l+0x76>
 800e46c:	00004e1f 	.word	0x00004e1f
 800e470:	0801c2b7 	.word	0x0801c2b7
 800e474:	0801c414 	.word	0x0801c414
 800e478:	7ff00000 	.word	0x7ff00000
 800e47c:	0801c2ae 	.word	0x0801c2ae
 800e480:	0801c2b1 	.word	0x0801c2b1
 800e484:	0801c411 	.word	0x0801c411
 800e488:	0801c5a0 	.word	0x0801c5a0
 800e48c:	0801c578 	.word	0x0801c578
 800e490:	fcb00000 	.word	0xfcb00000
 800e494:	7ca00000 	.word	0x7ca00000
 800e498:	7c900000 	.word	0x7c900000
 800e49c:	7fefffff 	.word	0x7fefffff
 800e4a0:	2310      	movs	r3, #16
 800e4a2:	0022      	movs	r2, r4
 800e4a4:	401a      	ands	r2, r3
 800e4a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4a8:	421c      	tst	r4, r3
 800e4aa:	d001      	beq.n	800e4b0 <_strtod_l+0x618>
 800e4ac:	335a      	adds	r3, #90	@ 0x5a
 800e4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4b0:	0030      	movs	r0, r6
 800e4b2:	0039      	movs	r1, r7
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	4dc0      	ldr	r5, [pc, #768]	@ (800e7b8 <_strtod_l+0x920>)
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	4214      	tst	r4, r2
 800e4bc:	d004      	beq.n	800e4c8 <_strtod_l+0x630>
 800e4be:	682a      	ldr	r2, [r5, #0]
 800e4c0:	686b      	ldr	r3, [r5, #4]
 800e4c2:	f7f4 fa3f 	bl	8002944 <__aeabi_dmul>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	1064      	asrs	r4, r4, #1
 800e4ca:	3508      	adds	r5, #8
 800e4cc:	2c00      	cmp	r4, #0
 800e4ce:	d1f3      	bne.n	800e4b8 <_strtod_l+0x620>
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <_strtod_l+0x640>
 800e4d4:	0006      	movs	r6, r0
 800e4d6:	000f      	movs	r7, r1
 800e4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00d      	beq.n	800e4fa <_strtod_l+0x662>
 800e4de:	236b      	movs	r3, #107	@ 0x6b
 800e4e0:	007a      	lsls	r2, r7, #1
 800e4e2:	0d52      	lsrs	r2, r2, #21
 800e4e4:	0039      	movs	r1, r7
 800e4e6:	1a9b      	subs	r3, r3, r2
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	dd06      	ble.n	800e4fa <_strtod_l+0x662>
 800e4ec:	2b1f      	cmp	r3, #31
 800e4ee:	dd5c      	ble.n	800e5aa <_strtod_l+0x712>
 800e4f0:	2600      	movs	r6, #0
 800e4f2:	2b34      	cmp	r3, #52	@ 0x34
 800e4f4:	dd52      	ble.n	800e59c <_strtod_l+0x704>
 800e4f6:	27dc      	movs	r7, #220	@ 0xdc
 800e4f8:	04bf      	lsls	r7, r7, #18
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	0030      	movs	r0, r6
 800e500:	0039      	movs	r1, r7
 800e502:	f7f1 ffad 	bl	8000460 <__aeabi_dcmpeq>
 800e506:	2800      	cmp	r0, #0
 800e508:	d1a1      	bne.n	800e44e <_strtod_l+0x5b6>
 800e50a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e50c:	9a08      	ldr	r2, [sp, #32]
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e512:	9b06      	ldr	r3, [sp, #24]
 800e514:	9805      	ldr	r0, [sp, #20]
 800e516:	f001 fafb 	bl	800fb10 <__s2b>
 800e51a:	900d      	str	r0, [sp, #52]	@ 0x34
 800e51c:	2800      	cmp	r0, #0
 800e51e:	d100      	bne.n	800e522 <_strtod_l+0x68a>
 800e520:	e6f9      	b.n	800e316 <_strtod_l+0x47e>
 800e522:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e524:	9907      	ldr	r1, [sp, #28]
 800e526:	43db      	mvns	r3, r3
 800e528:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e52a:	17db      	asrs	r3, r3, #31
 800e52c:	1a52      	subs	r2, r2, r1
 800e52e:	9214      	str	r2, [sp, #80]	@ 0x50
 800e530:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e532:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800e534:	17d2      	asrs	r2, r2, #31
 800e536:	4011      	ands	r1, r2
 800e538:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e53a:	9114      	str	r1, [sp, #80]	@ 0x50
 800e53c:	401a      	ands	r2, r3
 800e53e:	2300      	movs	r3, #0
 800e540:	921a      	str	r2, [sp, #104]	@ 0x68
 800e542:	9306      	str	r3, [sp, #24]
 800e544:	9307      	str	r3, [sp, #28]
 800e546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e548:	9805      	ldr	r0, [sp, #20]
 800e54a:	6859      	ldr	r1, [r3, #4]
 800e54c:	f001 fa34 	bl	800f9b8 <_Balloc>
 800e550:	9008      	str	r0, [sp, #32]
 800e552:	2800      	cmp	r0, #0
 800e554:	d100      	bne.n	800e558 <_strtod_l+0x6c0>
 800e556:	e6e3      	b.n	800e320 <_strtod_l+0x488>
 800e558:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e55a:	300c      	adds	r0, #12
 800e55c:	0019      	movs	r1, r3
 800e55e:	691a      	ldr	r2, [r3, #16]
 800e560:	310c      	adds	r1, #12
 800e562:	3202      	adds	r2, #2
 800e564:	0092      	lsls	r2, r2, #2
 800e566:	f000 fdb0 	bl	800f0ca <memcpy>
 800e56a:	ab20      	add	r3, sp, #128	@ 0x80
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	0032      	movs	r2, r6
 800e574:	003b      	movs	r3, r7
 800e576:	9805      	ldr	r0, [sp, #20]
 800e578:	9610      	str	r6, [sp, #64]	@ 0x40
 800e57a:	9711      	str	r7, [sp, #68]	@ 0x44
 800e57c:	f001 fe10 	bl	80101a0 <__d2b>
 800e580:	901e      	str	r0, [sp, #120]	@ 0x78
 800e582:	2800      	cmp	r0, #0
 800e584:	d100      	bne.n	800e588 <_strtod_l+0x6f0>
 800e586:	e6cb      	b.n	800e320 <_strtod_l+0x488>
 800e588:	2101      	movs	r1, #1
 800e58a:	9805      	ldr	r0, [sp, #20]
 800e58c:	f001 fb5c 	bl	800fc48 <__i2b>
 800e590:	9007      	str	r0, [sp, #28]
 800e592:	2800      	cmp	r0, #0
 800e594:	d10e      	bne.n	800e5b4 <_strtod_l+0x71c>
 800e596:	2300      	movs	r3, #0
 800e598:	9307      	str	r3, [sp, #28]
 800e59a:	e6c1      	b.n	800e320 <_strtod_l+0x488>
 800e59c:	234b      	movs	r3, #75	@ 0x4b
 800e59e:	1a9a      	subs	r2, r3, r2
 800e5a0:	3b4c      	subs	r3, #76	@ 0x4c
 800e5a2:	4093      	lsls	r3, r2
 800e5a4:	4019      	ands	r1, r3
 800e5a6:	000f      	movs	r7, r1
 800e5a8:	e7a7      	b.n	800e4fa <_strtod_l+0x662>
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	4252      	negs	r2, r2
 800e5ae:	409a      	lsls	r2, r3
 800e5b0:	4016      	ands	r6, r2
 800e5b2:	e7a2      	b.n	800e4fa <_strtod_l+0x662>
 800e5b4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e5b6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e5b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e5ba:	1ad4      	subs	r4, r2, r3
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	db01      	blt.n	800e5c4 <_strtod_l+0x72c>
 800e5c0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800e5c2:	195d      	adds	r5, r3, r5
 800e5c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e5c8:	1a5b      	subs	r3, r3, r1
 800e5ca:	2136      	movs	r1, #54	@ 0x36
 800e5cc:	189b      	adds	r3, r3, r2
 800e5ce:	1a8a      	subs	r2, r1, r2
 800e5d0:	497a      	ldr	r1, [pc, #488]	@ (800e7bc <_strtod_l+0x924>)
 800e5d2:	2001      	movs	r0, #1
 800e5d4:	468c      	mov	ip, r1
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	9115      	str	r1, [sp, #84]	@ 0x54
 800e5dc:	9016      	str	r0, [sp, #88]	@ 0x58
 800e5de:	4563      	cmp	r3, ip
 800e5e0:	da06      	bge.n	800e5f0 <_strtod_l+0x758>
 800e5e2:	4661      	mov	r1, ip
 800e5e4:	1ac9      	subs	r1, r1, r3
 800e5e6:	1a52      	subs	r2, r2, r1
 800e5e8:	291f      	cmp	r1, #31
 800e5ea:	dc3f      	bgt.n	800e66c <_strtod_l+0x7d4>
 800e5ec:	4088      	lsls	r0, r1
 800e5ee:	9016      	str	r0, [sp, #88]	@ 0x58
 800e5f0:	18ab      	adds	r3, r5, r2
 800e5f2:	930e      	str	r3, [sp, #56]	@ 0x38
 800e5f4:	18a4      	adds	r4, r4, r2
 800e5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5fa:	191c      	adds	r4, r3, r4
 800e5fc:	002b      	movs	r3, r5
 800e5fe:	4295      	cmp	r5, r2
 800e600:	dd00      	ble.n	800e604 <_strtod_l+0x76c>
 800e602:	0013      	movs	r3, r2
 800e604:	42a3      	cmp	r3, r4
 800e606:	dd00      	ble.n	800e60a <_strtod_l+0x772>
 800e608:	0023      	movs	r3, r4
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	dd04      	ble.n	800e618 <_strtod_l+0x780>
 800e60e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e610:	1ae4      	subs	r4, r4, r3
 800e612:	1ad2      	subs	r2, r2, r3
 800e614:	920e      	str	r2, [sp, #56]	@ 0x38
 800e616:	1aed      	subs	r5, r5, r3
 800e618:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	dd16      	ble.n	800e64c <_strtod_l+0x7b4>
 800e61e:	001a      	movs	r2, r3
 800e620:	9907      	ldr	r1, [sp, #28]
 800e622:	9805      	ldr	r0, [sp, #20]
 800e624:	f001 fbd2 	bl	800fdcc <__pow5mult>
 800e628:	9007      	str	r0, [sp, #28]
 800e62a:	2800      	cmp	r0, #0
 800e62c:	d0b3      	beq.n	800e596 <_strtod_l+0x6fe>
 800e62e:	0001      	movs	r1, r0
 800e630:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e632:	9805      	ldr	r0, [sp, #20]
 800e634:	f001 fb20 	bl	800fc78 <__multiply>
 800e638:	9013      	str	r0, [sp, #76]	@ 0x4c
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d100      	bne.n	800e640 <_strtod_l+0x7a8>
 800e63e:	e66f      	b.n	800e320 <_strtod_l+0x488>
 800e640:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e642:	9805      	ldr	r0, [sp, #20]
 800e644:	f001 f9fc 	bl	800fa40 <_Bfree>
 800e648:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e64a:	931e      	str	r3, [sp, #120]	@ 0x78
 800e64c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e64e:	2b00      	cmp	r3, #0
 800e650:	dc12      	bgt.n	800e678 <_strtod_l+0x7e0>
 800e652:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e654:	2b00      	cmp	r3, #0
 800e656:	dd18      	ble.n	800e68a <_strtod_l+0x7f2>
 800e658:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e65a:	9908      	ldr	r1, [sp, #32]
 800e65c:	9805      	ldr	r0, [sp, #20]
 800e65e:	f001 fbb5 	bl	800fdcc <__pow5mult>
 800e662:	9008      	str	r0, [sp, #32]
 800e664:	2800      	cmp	r0, #0
 800e666:	d110      	bne.n	800e68a <_strtod_l+0x7f2>
 800e668:	2300      	movs	r3, #0
 800e66a:	e658      	b.n	800e31e <_strtod_l+0x486>
 800e66c:	4954      	ldr	r1, [pc, #336]	@ (800e7c0 <_strtod_l+0x928>)
 800e66e:	1acb      	subs	r3, r1, r3
 800e670:	0001      	movs	r1, r0
 800e672:	4099      	lsls	r1, r3
 800e674:	9115      	str	r1, [sp, #84]	@ 0x54
 800e676:	e7ba      	b.n	800e5ee <_strtod_l+0x756>
 800e678:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e67a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e67c:	9805      	ldr	r0, [sp, #20]
 800e67e:	f001 fc01 	bl	800fe84 <__lshift>
 800e682:	901e      	str	r0, [sp, #120]	@ 0x78
 800e684:	2800      	cmp	r0, #0
 800e686:	d1e4      	bne.n	800e652 <_strtod_l+0x7ba>
 800e688:	e64a      	b.n	800e320 <_strtod_l+0x488>
 800e68a:	2c00      	cmp	r4, #0
 800e68c:	dd07      	ble.n	800e69e <_strtod_l+0x806>
 800e68e:	0022      	movs	r2, r4
 800e690:	9908      	ldr	r1, [sp, #32]
 800e692:	9805      	ldr	r0, [sp, #20]
 800e694:	f001 fbf6 	bl	800fe84 <__lshift>
 800e698:	9008      	str	r0, [sp, #32]
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d0e4      	beq.n	800e668 <_strtod_l+0x7d0>
 800e69e:	2d00      	cmp	r5, #0
 800e6a0:	dd08      	ble.n	800e6b4 <_strtod_l+0x81c>
 800e6a2:	002a      	movs	r2, r5
 800e6a4:	9907      	ldr	r1, [sp, #28]
 800e6a6:	9805      	ldr	r0, [sp, #20]
 800e6a8:	f001 fbec 	bl	800fe84 <__lshift>
 800e6ac:	9007      	str	r0, [sp, #28]
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	d100      	bne.n	800e6b4 <_strtod_l+0x81c>
 800e6b2:	e635      	b.n	800e320 <_strtod_l+0x488>
 800e6b4:	9a08      	ldr	r2, [sp, #32]
 800e6b6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e6b8:	9805      	ldr	r0, [sp, #20]
 800e6ba:	f001 fc6b 	bl	800ff94 <__mdiff>
 800e6be:	9006      	str	r0, [sp, #24]
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d100      	bne.n	800e6c6 <_strtod_l+0x82e>
 800e6c4:	e62c      	b.n	800e320 <_strtod_l+0x488>
 800e6c6:	68c3      	ldr	r3, [r0, #12]
 800e6c8:	9907      	ldr	r1, [sp, #28]
 800e6ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60c3      	str	r3, [r0, #12]
 800e6d0:	f001 fc44 	bl	800ff5c <__mcmp>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	da3b      	bge.n	800e750 <_strtod_l+0x8b8>
 800e6d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6da:	4333      	orrs	r3, r6
 800e6dc:	d167      	bne.n	800e7ae <_strtod_l+0x916>
 800e6de:	033b      	lsls	r3, r7, #12
 800e6e0:	d165      	bne.n	800e7ae <_strtod_l+0x916>
 800e6e2:	22d6      	movs	r2, #214	@ 0xd6
 800e6e4:	4b37      	ldr	r3, [pc, #220]	@ (800e7c4 <_strtod_l+0x92c>)
 800e6e6:	04d2      	lsls	r2, r2, #19
 800e6e8:	403b      	ands	r3, r7
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d95f      	bls.n	800e7ae <_strtod_l+0x916>
 800e6ee:	9b06      	ldr	r3, [sp, #24]
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d103      	bne.n	800e6fe <_strtod_l+0x866>
 800e6f6:	9b06      	ldr	r3, [sp, #24]
 800e6f8:	691b      	ldr	r3, [r3, #16]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	dd57      	ble.n	800e7ae <_strtod_l+0x916>
 800e6fe:	9906      	ldr	r1, [sp, #24]
 800e700:	2201      	movs	r2, #1
 800e702:	9805      	ldr	r0, [sp, #20]
 800e704:	f001 fbbe 	bl	800fe84 <__lshift>
 800e708:	9907      	ldr	r1, [sp, #28]
 800e70a:	9006      	str	r0, [sp, #24]
 800e70c:	f001 fc26 	bl	800ff5c <__mcmp>
 800e710:	2800      	cmp	r0, #0
 800e712:	dd4c      	ble.n	800e7ae <_strtod_l+0x916>
 800e714:	4b2b      	ldr	r3, [pc, #172]	@ (800e7c4 <_strtod_l+0x92c>)
 800e716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e718:	403b      	ands	r3, r7
 800e71a:	2a00      	cmp	r2, #0
 800e71c:	d074      	beq.n	800e808 <_strtod_l+0x970>
 800e71e:	22d6      	movs	r2, #214	@ 0xd6
 800e720:	04d2      	lsls	r2, r2, #19
 800e722:	4293      	cmp	r3, r2
 800e724:	d870      	bhi.n	800e808 <_strtod_l+0x970>
 800e726:	22dc      	movs	r2, #220	@ 0xdc
 800e728:	0492      	lsls	r2, r2, #18
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d800      	bhi.n	800e730 <_strtod_l+0x898>
 800e72e:	e693      	b.n	800e458 <_strtod_l+0x5c0>
 800e730:	0030      	movs	r0, r6
 800e732:	0039      	movs	r1, r7
 800e734:	4b24      	ldr	r3, [pc, #144]	@ (800e7c8 <_strtod_l+0x930>)
 800e736:	2200      	movs	r2, #0
 800e738:	f7f4 f904 	bl	8002944 <__aeabi_dmul>
 800e73c:	4b21      	ldr	r3, [pc, #132]	@ (800e7c4 <_strtod_l+0x92c>)
 800e73e:	0006      	movs	r6, r0
 800e740:	000f      	movs	r7, r1
 800e742:	420b      	tst	r3, r1
 800e744:	d000      	beq.n	800e748 <_strtod_l+0x8b0>
 800e746:	e5f4      	b.n	800e332 <_strtod_l+0x49a>
 800e748:	2322      	movs	r3, #34	@ 0x22
 800e74a:	9a05      	ldr	r2, [sp, #20]
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	e5f0      	b.n	800e332 <_strtod_l+0x49a>
 800e750:	970e      	str	r7, [sp, #56]	@ 0x38
 800e752:	2800      	cmp	r0, #0
 800e754:	d175      	bne.n	800e842 <_strtod_l+0x9aa>
 800e756:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e758:	033b      	lsls	r3, r7, #12
 800e75a:	0b1b      	lsrs	r3, r3, #12
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	d039      	beq.n	800e7d4 <_strtod_l+0x93c>
 800e760:	4a1a      	ldr	r2, [pc, #104]	@ (800e7cc <_strtod_l+0x934>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d138      	bne.n	800e7d8 <_strtod_l+0x940>
 800e766:	2101      	movs	r1, #1
 800e768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e76a:	4249      	negs	r1, r1
 800e76c:	0032      	movs	r2, r6
 800e76e:	0008      	movs	r0, r1
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00b      	beq.n	800e78c <_strtod_l+0x8f4>
 800e774:	24d4      	movs	r4, #212	@ 0xd4
 800e776:	4b13      	ldr	r3, [pc, #76]	@ (800e7c4 <_strtod_l+0x92c>)
 800e778:	0008      	movs	r0, r1
 800e77a:	403b      	ands	r3, r7
 800e77c:	04e4      	lsls	r4, r4, #19
 800e77e:	42a3      	cmp	r3, r4
 800e780:	d804      	bhi.n	800e78c <_strtod_l+0x8f4>
 800e782:	306c      	adds	r0, #108	@ 0x6c
 800e784:	0d1b      	lsrs	r3, r3, #20
 800e786:	1ac3      	subs	r3, r0, r3
 800e788:	4099      	lsls	r1, r3
 800e78a:	0008      	movs	r0, r1
 800e78c:	4282      	cmp	r2, r0
 800e78e:	d123      	bne.n	800e7d8 <_strtod_l+0x940>
 800e790:	4b0f      	ldr	r3, [pc, #60]	@ (800e7d0 <_strtod_l+0x938>)
 800e792:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e794:	4299      	cmp	r1, r3
 800e796:	d102      	bne.n	800e79e <_strtod_l+0x906>
 800e798:	3201      	adds	r2, #1
 800e79a:	d100      	bne.n	800e79e <_strtod_l+0x906>
 800e79c:	e5c0      	b.n	800e320 <_strtod_l+0x488>
 800e79e:	4b09      	ldr	r3, [pc, #36]	@ (800e7c4 <_strtod_l+0x92c>)
 800e7a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7a2:	2600      	movs	r6, #0
 800e7a4:	401a      	ands	r2, r3
 800e7a6:	0013      	movs	r3, r2
 800e7a8:	2280      	movs	r2, #128	@ 0x80
 800e7aa:	0352      	lsls	r2, r2, #13
 800e7ac:	189f      	adds	r7, r3, r2
 800e7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1bd      	bne.n	800e730 <_strtod_l+0x898>
 800e7b4:	e5bd      	b.n	800e332 <_strtod_l+0x49a>
 800e7b6:	46c0      	nop			@ (mov r8, r8)
 800e7b8:	0801c440 	.word	0x0801c440
 800e7bc:	fffffc02 	.word	0xfffffc02
 800e7c0:	fffffbe2 	.word	0xfffffbe2
 800e7c4:	7ff00000 	.word	0x7ff00000
 800e7c8:	39500000 	.word	0x39500000
 800e7cc:	000fffff 	.word	0x000fffff
 800e7d0:	7fefffff 	.word	0x7fefffff
 800e7d4:	4333      	orrs	r3, r6
 800e7d6:	d09d      	beq.n	800e714 <_strtod_l+0x87c>
 800e7d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d01c      	beq.n	800e818 <_strtod_l+0x980>
 800e7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e7e2:	4213      	tst	r3, r2
 800e7e4:	d0e3      	beq.n	800e7ae <_strtod_l+0x916>
 800e7e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e7e8:	0030      	movs	r0, r6
 800e7ea:	0039      	movs	r1, r7
 800e7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d016      	beq.n	800e820 <_strtod_l+0x988>
 800e7f2:	f7ff fb39 	bl	800de68 <sulp>
 800e7f6:	0002      	movs	r2, r0
 800e7f8:	000b      	movs	r3, r1
 800e7fa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e7fc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e7fe:	f7f3 f8a1 	bl	8001944 <__aeabi_dadd>
 800e802:	0006      	movs	r6, r0
 800e804:	000f      	movs	r7, r1
 800e806:	e7d2      	b.n	800e7ae <_strtod_l+0x916>
 800e808:	2601      	movs	r6, #1
 800e80a:	4a92      	ldr	r2, [pc, #584]	@ (800ea54 <_strtod_l+0xbbc>)
 800e80c:	4276      	negs	r6, r6
 800e80e:	189b      	adds	r3, r3, r2
 800e810:	4a91      	ldr	r2, [pc, #580]	@ (800ea58 <_strtod_l+0xbc0>)
 800e812:	431a      	orrs	r2, r3
 800e814:	0017      	movs	r7, r2
 800e816:	e7ca      	b.n	800e7ae <_strtod_l+0x916>
 800e818:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e81a:	4233      	tst	r3, r6
 800e81c:	d0c7      	beq.n	800e7ae <_strtod_l+0x916>
 800e81e:	e7e2      	b.n	800e7e6 <_strtod_l+0x94e>
 800e820:	f7ff fb22 	bl	800de68 <sulp>
 800e824:	0002      	movs	r2, r0
 800e826:	000b      	movs	r3, r1
 800e828:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e82a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e82c:	f7f4 fb70 	bl	8002f10 <__aeabi_dsub>
 800e830:	2200      	movs	r2, #0
 800e832:	2300      	movs	r3, #0
 800e834:	0006      	movs	r6, r0
 800e836:	000f      	movs	r7, r1
 800e838:	f7f1 fe12 	bl	8000460 <__aeabi_dcmpeq>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d0b6      	beq.n	800e7ae <_strtod_l+0x916>
 800e840:	e60a      	b.n	800e458 <_strtod_l+0x5c0>
 800e842:	9907      	ldr	r1, [sp, #28]
 800e844:	9806      	ldr	r0, [sp, #24]
 800e846:	f001 fd0b 	bl	8010260 <__ratio>
 800e84a:	2380      	movs	r3, #128	@ 0x80
 800e84c:	2200      	movs	r2, #0
 800e84e:	05db      	lsls	r3, r3, #23
 800e850:	0004      	movs	r4, r0
 800e852:	000d      	movs	r5, r1
 800e854:	f7f1 fe14 	bl	8000480 <__aeabi_dcmple>
 800e858:	2800      	cmp	r0, #0
 800e85a:	d06c      	beq.n	800e936 <_strtod_l+0xa9e>
 800e85c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d177      	bne.n	800e952 <_strtod_l+0xaba>
 800e862:	2e00      	cmp	r6, #0
 800e864:	d157      	bne.n	800e916 <_strtod_l+0xa7e>
 800e866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e868:	031b      	lsls	r3, r3, #12
 800e86a:	d15a      	bne.n	800e922 <_strtod_l+0xa8a>
 800e86c:	2200      	movs	r2, #0
 800e86e:	0020      	movs	r0, r4
 800e870:	0029      	movs	r1, r5
 800e872:	4b7a      	ldr	r3, [pc, #488]	@ (800ea5c <_strtod_l+0xbc4>)
 800e874:	f7f1 fdfa 	bl	800046c <__aeabi_dcmplt>
 800e878:	2800      	cmp	r0, #0
 800e87a:	d159      	bne.n	800e930 <_strtod_l+0xa98>
 800e87c:	0020      	movs	r0, r4
 800e87e:	0029      	movs	r1, r5
 800e880:	2200      	movs	r2, #0
 800e882:	4b77      	ldr	r3, [pc, #476]	@ (800ea60 <_strtod_l+0xbc8>)
 800e884:	f7f4 f85e 	bl	8002944 <__aeabi_dmul>
 800e888:	0004      	movs	r4, r0
 800e88a:	000d      	movs	r5, r1
 800e88c:	2380      	movs	r3, #128	@ 0x80
 800e88e:	061b      	lsls	r3, r3, #24
 800e890:	18eb      	adds	r3, r5, r3
 800e892:	940a      	str	r4, [sp, #40]	@ 0x28
 800e894:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e898:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e89a:	9216      	str	r2, [sp, #88]	@ 0x58
 800e89c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e89e:	4a71      	ldr	r2, [pc, #452]	@ (800ea64 <_strtod_l+0xbcc>)
 800e8a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8a2:	4013      	ands	r3, r2
 800e8a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e8a8:	4b6f      	ldr	r3, [pc, #444]	@ (800ea68 <_strtod_l+0xbd0>)
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d000      	beq.n	800e8b0 <_strtod_l+0xa18>
 800e8ae:	e087      	b.n	800e9c0 <_strtod_l+0xb28>
 800e8b0:	4a6e      	ldr	r2, [pc, #440]	@ (800ea6c <_strtod_l+0xbd4>)
 800e8b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8b4:	4694      	mov	ip, r2
 800e8b6:	4463      	add	r3, ip
 800e8b8:	001f      	movs	r7, r3
 800e8ba:	0030      	movs	r0, r6
 800e8bc:	0019      	movs	r1, r3
 800e8be:	f001 fc03 	bl	80100c8 <__ulp>
 800e8c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8c6:	f7f4 f83d 	bl	8002944 <__aeabi_dmul>
 800e8ca:	0032      	movs	r2, r6
 800e8cc:	003b      	movs	r3, r7
 800e8ce:	f7f3 f839 	bl	8001944 <__aeabi_dadd>
 800e8d2:	4a64      	ldr	r2, [pc, #400]	@ (800ea64 <_strtod_l+0xbcc>)
 800e8d4:	4b66      	ldr	r3, [pc, #408]	@ (800ea70 <_strtod_l+0xbd8>)
 800e8d6:	0006      	movs	r6, r0
 800e8d8:	400a      	ands	r2, r1
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d940      	bls.n	800e960 <_strtod_l+0xac8>
 800e8de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8e0:	4a64      	ldr	r2, [pc, #400]	@ (800ea74 <_strtod_l+0xbdc>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d103      	bne.n	800e8ee <_strtod_l+0xa56>
 800e8e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	d100      	bne.n	800e8ee <_strtod_l+0xa56>
 800e8ec:	e518      	b.n	800e320 <_strtod_l+0x488>
 800e8ee:	2601      	movs	r6, #1
 800e8f0:	4f60      	ldr	r7, [pc, #384]	@ (800ea74 <_strtod_l+0xbdc>)
 800e8f2:	4276      	negs	r6, r6
 800e8f4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e8f6:	9805      	ldr	r0, [sp, #20]
 800e8f8:	f001 f8a2 	bl	800fa40 <_Bfree>
 800e8fc:	9908      	ldr	r1, [sp, #32]
 800e8fe:	9805      	ldr	r0, [sp, #20]
 800e900:	f001 f89e 	bl	800fa40 <_Bfree>
 800e904:	9907      	ldr	r1, [sp, #28]
 800e906:	9805      	ldr	r0, [sp, #20]
 800e908:	f001 f89a 	bl	800fa40 <_Bfree>
 800e90c:	9906      	ldr	r1, [sp, #24]
 800e90e:	9805      	ldr	r0, [sp, #20]
 800e910:	f001 f896 	bl	800fa40 <_Bfree>
 800e914:	e617      	b.n	800e546 <_strtod_l+0x6ae>
 800e916:	2e01      	cmp	r6, #1
 800e918:	d103      	bne.n	800e922 <_strtod_l+0xa8a>
 800e91a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d100      	bne.n	800e922 <_strtod_l+0xa8a>
 800e920:	e59a      	b.n	800e458 <_strtod_l+0x5c0>
 800e922:	2300      	movs	r3, #0
 800e924:	4c54      	ldr	r4, [pc, #336]	@ (800ea78 <_strtod_l+0xbe0>)
 800e926:	4d4d      	ldr	r5, [pc, #308]	@ (800ea5c <_strtod_l+0xbc4>)
 800e928:	930a      	str	r3, [sp, #40]	@ 0x28
 800e92a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e92c:	2400      	movs	r4, #0
 800e92e:	e7b2      	b.n	800e896 <_strtod_l+0x9fe>
 800e930:	2400      	movs	r4, #0
 800e932:	4d4b      	ldr	r5, [pc, #300]	@ (800ea60 <_strtod_l+0xbc8>)
 800e934:	e7aa      	b.n	800e88c <_strtod_l+0x9f4>
 800e936:	0020      	movs	r0, r4
 800e938:	0029      	movs	r1, r5
 800e93a:	4b49      	ldr	r3, [pc, #292]	@ (800ea60 <_strtod_l+0xbc8>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	f7f4 f801 	bl	8002944 <__aeabi_dmul>
 800e942:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e944:	0004      	movs	r4, r0
 800e946:	000d      	movs	r5, r1
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d09f      	beq.n	800e88c <_strtod_l+0x9f4>
 800e94c:	940a      	str	r4, [sp, #40]	@ 0x28
 800e94e:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e950:	e7a1      	b.n	800e896 <_strtod_l+0x9fe>
 800e952:	2300      	movs	r3, #0
 800e954:	4c41      	ldr	r4, [pc, #260]	@ (800ea5c <_strtod_l+0xbc4>)
 800e956:	0025      	movs	r5, r4
 800e958:	930a      	str	r3, [sp, #40]	@ 0x28
 800e95a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e95c:	001c      	movs	r4, r3
 800e95e:	e79a      	b.n	800e896 <_strtod_l+0x9fe>
 800e960:	23d4      	movs	r3, #212	@ 0xd4
 800e962:	049b      	lsls	r3, r3, #18
 800e964:	18cf      	adds	r7, r1, r3
 800e966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e968:	9710      	str	r7, [sp, #64]	@ 0x40
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1c2      	bne.n	800e8f4 <_strtod_l+0xa5c>
 800e96e:	4b3d      	ldr	r3, [pc, #244]	@ (800ea64 <_strtod_l+0xbcc>)
 800e970:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e972:	403b      	ands	r3, r7
 800e974:	429a      	cmp	r2, r3
 800e976:	d1bd      	bne.n	800e8f4 <_strtod_l+0xa5c>
 800e978:	0020      	movs	r0, r4
 800e97a:	0029      	movs	r1, r5
 800e97c:	f7f1 fe5c 	bl	8000638 <__aeabi_d2lz>
 800e980:	f7f1 feb4 	bl	80006ec <__aeabi_l2d>
 800e984:	0002      	movs	r2, r0
 800e986:	000b      	movs	r3, r1
 800e988:	0020      	movs	r0, r4
 800e98a:	0029      	movs	r1, r5
 800e98c:	f7f4 fac0 	bl	8002f10 <__aeabi_dsub>
 800e990:	033c      	lsls	r4, r7, #12
 800e992:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e994:	0b24      	lsrs	r4, r4, #12
 800e996:	4334      	orrs	r4, r6
 800e998:	900e      	str	r0, [sp, #56]	@ 0x38
 800e99a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e99c:	4a37      	ldr	r2, [pc, #220]	@ (800ea7c <_strtod_l+0xbe4>)
 800e99e:	431c      	orrs	r4, r3
 800e9a0:	d052      	beq.n	800ea48 <_strtod_l+0xbb0>
 800e9a2:	4b37      	ldr	r3, [pc, #220]	@ (800ea80 <_strtod_l+0xbe8>)
 800e9a4:	f7f1 fd62 	bl	800046c <__aeabi_dcmplt>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d000      	beq.n	800e9ae <_strtod_l+0xb16>
 800e9ac:	e4c1      	b.n	800e332 <_strtod_l+0x49a>
 800e9ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e9b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e9b2:	4a34      	ldr	r2, [pc, #208]	@ (800ea84 <_strtod_l+0xbec>)
 800e9b4:	4b2a      	ldr	r3, [pc, #168]	@ (800ea60 <_strtod_l+0xbc8>)
 800e9b6:	f7f1 fd6d 	bl	8000494 <__aeabi_dcmpgt>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d09a      	beq.n	800e8f4 <_strtod_l+0xa5c>
 800e9be:	e4b8      	b.n	800e332 <_strtod_l+0x49a>
 800e9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d02a      	beq.n	800ea1c <_strtod_l+0xb84>
 800e9c6:	23d4      	movs	r3, #212	@ 0xd4
 800e9c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e9ca:	04db      	lsls	r3, r3, #19
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d825      	bhi.n	800ea1c <_strtod_l+0xb84>
 800e9d0:	0020      	movs	r0, r4
 800e9d2:	0029      	movs	r1, r5
 800e9d4:	4a2c      	ldr	r2, [pc, #176]	@ (800ea88 <_strtod_l+0xbf0>)
 800e9d6:	4b2d      	ldr	r3, [pc, #180]	@ (800ea8c <_strtod_l+0xbf4>)
 800e9d8:	f7f1 fd52 	bl	8000480 <__aeabi_dcmple>
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d016      	beq.n	800ea0e <_strtod_l+0xb76>
 800e9e0:	0020      	movs	r0, r4
 800e9e2:	0029      	movs	r1, r5
 800e9e4:	f7f1 fe0a 	bl	80005fc <__aeabi_d2uiz>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d100      	bne.n	800e9ee <_strtod_l+0xb56>
 800e9ec:	3001      	adds	r0, #1
 800e9ee:	f7f4 ff25 	bl	800383c <__aeabi_ui2d>
 800e9f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e9f4:	0004      	movs	r4, r0
 800e9f6:	000d      	movs	r5, r1
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d122      	bne.n	800ea42 <_strtod_l+0xbaa>
 800e9fc:	2380      	movs	r3, #128	@ 0x80
 800e9fe:	061b      	lsls	r3, r3, #24
 800ea00:	18cb      	adds	r3, r1, r3
 800ea02:	9018      	str	r0, [sp, #96]	@ 0x60
 800ea04:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea06:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ea08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea0a:	9216      	str	r2, [sp, #88]	@ 0x58
 800ea0c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ea0e:	22d6      	movs	r2, #214	@ 0xd6
 800ea10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea12:	04d2      	lsls	r2, r2, #19
 800ea14:	189b      	adds	r3, r3, r2
 800ea16:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ea18:	1a9b      	subs	r3, r3, r2
 800ea1a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ea1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ea1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ea20:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800ea22:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ea24:	f001 fb50 	bl	80100c8 <__ulp>
 800ea28:	0002      	movs	r2, r0
 800ea2a:	000b      	movs	r3, r1
 800ea2c:	0030      	movs	r0, r6
 800ea2e:	0039      	movs	r1, r7
 800ea30:	f7f3 ff88 	bl	8002944 <__aeabi_dmul>
 800ea34:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ea36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ea38:	f7f2 ff84 	bl	8001944 <__aeabi_dadd>
 800ea3c:	0006      	movs	r6, r0
 800ea3e:	000f      	movs	r7, r1
 800ea40:	e791      	b.n	800e966 <_strtod_l+0xace>
 800ea42:	9418      	str	r4, [sp, #96]	@ 0x60
 800ea44:	9519      	str	r5, [sp, #100]	@ 0x64
 800ea46:	e7de      	b.n	800ea06 <_strtod_l+0xb6e>
 800ea48:	4b11      	ldr	r3, [pc, #68]	@ (800ea90 <_strtod_l+0xbf8>)
 800ea4a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ea4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea4e:	f7f1 fd0d 	bl	800046c <__aeabi_dcmplt>
 800ea52:	e7b2      	b.n	800e9ba <_strtod_l+0xb22>
 800ea54:	fff00000 	.word	0xfff00000
 800ea58:	000fffff 	.word	0x000fffff
 800ea5c:	3ff00000 	.word	0x3ff00000
 800ea60:	3fe00000 	.word	0x3fe00000
 800ea64:	7ff00000 	.word	0x7ff00000
 800ea68:	7fe00000 	.word	0x7fe00000
 800ea6c:	fcb00000 	.word	0xfcb00000
 800ea70:	7c9fffff 	.word	0x7c9fffff
 800ea74:	7fefffff 	.word	0x7fefffff
 800ea78:	bff00000 	.word	0xbff00000
 800ea7c:	94a03595 	.word	0x94a03595
 800ea80:	3fdfffff 	.word	0x3fdfffff
 800ea84:	35afe535 	.word	0x35afe535
 800ea88:	ffc00000 	.word	0xffc00000
 800ea8c:	41dfffff 	.word	0x41dfffff
 800ea90:	3fcfffff 	.word	0x3fcfffff

0800ea94 <strtod>:
 800ea94:	b510      	push	{r4, lr}
 800ea96:	4c04      	ldr	r4, [pc, #16]	@ (800eaa8 <strtod+0x14>)
 800ea98:	000a      	movs	r2, r1
 800ea9a:	0001      	movs	r1, r0
 800ea9c:	4b03      	ldr	r3, [pc, #12]	@ (800eaac <strtod+0x18>)
 800ea9e:	6820      	ldr	r0, [r4, #0]
 800eaa0:	f7ff f9fa 	bl	800de98 <_strtod_l>
 800eaa4:	bd10      	pop	{r4, pc}
 800eaa6:	46c0      	nop			@ (mov r8, r8)
 800eaa8:	20000188 	.word	0x20000188
 800eaac:	2000001c 	.word	0x2000001c

0800eab0 <_strtol_l.isra.0>:
 800eab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eab2:	b085      	sub	sp, #20
 800eab4:	0017      	movs	r7, r2
 800eab6:	001e      	movs	r6, r3
 800eab8:	9003      	str	r0, [sp, #12]
 800eaba:	9101      	str	r1, [sp, #4]
 800eabc:	2b24      	cmp	r3, #36	@ 0x24
 800eabe:	d823      	bhi.n	800eb08 <_strtol_l.isra.0+0x58>
 800eac0:	000c      	movs	r4, r1
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d020      	beq.n	800eb08 <_strtol_l.isra.0+0x58>
 800eac6:	4b3d      	ldr	r3, [pc, #244]	@ (800ebbc <_strtol_l.isra.0+0x10c>)
 800eac8:	2208      	movs	r2, #8
 800eaca:	469c      	mov	ip, r3
 800eacc:	0023      	movs	r3, r4
 800eace:	4661      	mov	r1, ip
 800ead0:	781d      	ldrb	r5, [r3, #0]
 800ead2:	3401      	adds	r4, #1
 800ead4:	5d48      	ldrb	r0, [r1, r5]
 800ead6:	0001      	movs	r1, r0
 800ead8:	4011      	ands	r1, r2
 800eada:	4210      	tst	r0, r2
 800eadc:	d1f6      	bne.n	800eacc <_strtol_l.isra.0+0x1c>
 800eade:	2d2d      	cmp	r5, #45	@ 0x2d
 800eae0:	d119      	bne.n	800eb16 <_strtol_l.isra.0+0x66>
 800eae2:	7825      	ldrb	r5, [r4, #0]
 800eae4:	1c9c      	adds	r4, r3, #2
 800eae6:	2301      	movs	r3, #1
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	2210      	movs	r2, #16
 800eaec:	0033      	movs	r3, r6
 800eaee:	4393      	bics	r3, r2
 800eaf0:	d11d      	bne.n	800eb2e <_strtol_l.isra.0+0x7e>
 800eaf2:	2d30      	cmp	r5, #48	@ 0x30
 800eaf4:	d115      	bne.n	800eb22 <_strtol_l.isra.0+0x72>
 800eaf6:	2120      	movs	r1, #32
 800eaf8:	7823      	ldrb	r3, [r4, #0]
 800eafa:	438b      	bics	r3, r1
 800eafc:	2b58      	cmp	r3, #88	@ 0x58
 800eafe:	d110      	bne.n	800eb22 <_strtol_l.isra.0+0x72>
 800eb00:	7865      	ldrb	r5, [r4, #1]
 800eb02:	3402      	adds	r4, #2
 800eb04:	2610      	movs	r6, #16
 800eb06:	e012      	b.n	800eb2e <_strtol_l.isra.0+0x7e>
 800eb08:	f000 fab2 	bl	800f070 <__errno>
 800eb0c:	2316      	movs	r3, #22
 800eb0e:	6003      	str	r3, [r0, #0]
 800eb10:	2000      	movs	r0, #0
 800eb12:	b005      	add	sp, #20
 800eb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb16:	9100      	str	r1, [sp, #0]
 800eb18:	2d2b      	cmp	r5, #43	@ 0x2b
 800eb1a:	d1e6      	bne.n	800eaea <_strtol_l.isra.0+0x3a>
 800eb1c:	7825      	ldrb	r5, [r4, #0]
 800eb1e:	1c9c      	adds	r4, r3, #2
 800eb20:	e7e3      	b.n	800eaea <_strtol_l.isra.0+0x3a>
 800eb22:	2e00      	cmp	r6, #0
 800eb24:	d1ee      	bne.n	800eb04 <_strtol_l.isra.0+0x54>
 800eb26:	360a      	adds	r6, #10
 800eb28:	2d30      	cmp	r5, #48	@ 0x30
 800eb2a:	d100      	bne.n	800eb2e <_strtol_l.isra.0+0x7e>
 800eb2c:	3e02      	subs	r6, #2
 800eb2e:	4a24      	ldr	r2, [pc, #144]	@ (800ebc0 <_strtol_l.isra.0+0x110>)
 800eb30:	9b00      	ldr	r3, [sp, #0]
 800eb32:	4694      	mov	ip, r2
 800eb34:	4463      	add	r3, ip
 800eb36:	0031      	movs	r1, r6
 800eb38:	0018      	movs	r0, r3
 800eb3a:	9302      	str	r3, [sp, #8]
 800eb3c:	f7f1 fb90 	bl	8000260 <__aeabi_uidivmod>
 800eb40:	2200      	movs	r2, #0
 800eb42:	4684      	mov	ip, r0
 800eb44:	0010      	movs	r0, r2
 800eb46:	002b      	movs	r3, r5
 800eb48:	3b30      	subs	r3, #48	@ 0x30
 800eb4a:	2b09      	cmp	r3, #9
 800eb4c:	d811      	bhi.n	800eb72 <_strtol_l.isra.0+0xc2>
 800eb4e:	001d      	movs	r5, r3
 800eb50:	42ae      	cmp	r6, r5
 800eb52:	dd1d      	ble.n	800eb90 <_strtol_l.isra.0+0xe0>
 800eb54:	1c53      	adds	r3, r2, #1
 800eb56:	d009      	beq.n	800eb6c <_strtol_l.isra.0+0xbc>
 800eb58:	2201      	movs	r2, #1
 800eb5a:	4252      	negs	r2, r2
 800eb5c:	4584      	cmp	ip, r0
 800eb5e:	d305      	bcc.n	800eb6c <_strtol_l.isra.0+0xbc>
 800eb60:	d101      	bne.n	800eb66 <_strtol_l.isra.0+0xb6>
 800eb62:	42a9      	cmp	r1, r5
 800eb64:	db11      	blt.n	800eb8a <_strtol_l.isra.0+0xda>
 800eb66:	2201      	movs	r2, #1
 800eb68:	4370      	muls	r0, r6
 800eb6a:	1828      	adds	r0, r5, r0
 800eb6c:	7825      	ldrb	r5, [r4, #0]
 800eb6e:	3401      	adds	r4, #1
 800eb70:	e7e9      	b.n	800eb46 <_strtol_l.isra.0+0x96>
 800eb72:	002b      	movs	r3, r5
 800eb74:	3b41      	subs	r3, #65	@ 0x41
 800eb76:	2b19      	cmp	r3, #25
 800eb78:	d801      	bhi.n	800eb7e <_strtol_l.isra.0+0xce>
 800eb7a:	3d37      	subs	r5, #55	@ 0x37
 800eb7c:	e7e8      	b.n	800eb50 <_strtol_l.isra.0+0xa0>
 800eb7e:	002b      	movs	r3, r5
 800eb80:	3b61      	subs	r3, #97	@ 0x61
 800eb82:	2b19      	cmp	r3, #25
 800eb84:	d804      	bhi.n	800eb90 <_strtol_l.isra.0+0xe0>
 800eb86:	3d57      	subs	r5, #87	@ 0x57
 800eb88:	e7e2      	b.n	800eb50 <_strtol_l.isra.0+0xa0>
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	4252      	negs	r2, r2
 800eb8e:	e7ed      	b.n	800eb6c <_strtol_l.isra.0+0xbc>
 800eb90:	1c53      	adds	r3, r2, #1
 800eb92:	d108      	bne.n	800eba6 <_strtol_l.isra.0+0xf6>
 800eb94:	2322      	movs	r3, #34	@ 0x22
 800eb96:	9a03      	ldr	r2, [sp, #12]
 800eb98:	9802      	ldr	r0, [sp, #8]
 800eb9a:	6013      	str	r3, [r2, #0]
 800eb9c:	2f00      	cmp	r7, #0
 800eb9e:	d0b8      	beq.n	800eb12 <_strtol_l.isra.0+0x62>
 800eba0:	1e63      	subs	r3, r4, #1
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	e007      	b.n	800ebb6 <_strtol_l.isra.0+0x106>
 800eba6:	9b00      	ldr	r3, [sp, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d000      	beq.n	800ebae <_strtol_l.isra.0+0xfe>
 800ebac:	4240      	negs	r0, r0
 800ebae:	2f00      	cmp	r7, #0
 800ebb0:	d0af      	beq.n	800eb12 <_strtol_l.isra.0+0x62>
 800ebb2:	2a00      	cmp	r2, #0
 800ebb4:	d1f4      	bne.n	800eba0 <_strtol_l.isra.0+0xf0>
 800ebb6:	9b01      	ldr	r3, [sp, #4]
 800ebb8:	603b      	str	r3, [r7, #0]
 800ebba:	e7aa      	b.n	800eb12 <_strtol_l.isra.0+0x62>
 800ebbc:	0801c469 	.word	0x0801c469
 800ebc0:	7fffffff 	.word	0x7fffffff

0800ebc4 <strtol>:
 800ebc4:	b510      	push	{r4, lr}
 800ebc6:	4c04      	ldr	r4, [pc, #16]	@ (800ebd8 <strtol+0x14>)
 800ebc8:	0013      	movs	r3, r2
 800ebca:	000a      	movs	r2, r1
 800ebcc:	0001      	movs	r1, r0
 800ebce:	6820      	ldr	r0, [r4, #0]
 800ebd0:	f7ff ff6e 	bl	800eab0 <_strtol_l.isra.0>
 800ebd4:	bd10      	pop	{r4, pc}
 800ebd6:	46c0      	nop			@ (mov r8, r8)
 800ebd8:	20000188 	.word	0x20000188

0800ebdc <_strtoll_l.isra.0>:
 800ebdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebde:	b08d      	sub	sp, #52	@ 0x34
 800ebe0:	000c      	movs	r4, r1
 800ebe2:	9102      	str	r1, [sp, #8]
 800ebe4:	001e      	movs	r6, r3
 800ebe6:	2108      	movs	r1, #8
 800ebe8:	4f4c      	ldr	r7, [pc, #304]	@ (800ed1c <_strtoll_l.isra.0+0x140>)
 800ebea:	900a      	str	r0, [sp, #40]	@ 0x28
 800ebec:	9203      	str	r2, [sp, #12]
 800ebee:	0023      	movs	r3, r4
 800ebf0:	781a      	ldrb	r2, [r3, #0]
 800ebf2:	3401      	adds	r4, #1
 800ebf4:	5cbd      	ldrb	r5, [r7, r2]
 800ebf6:	0028      	movs	r0, r5
 800ebf8:	4008      	ands	r0, r1
 800ebfa:	420d      	tst	r5, r1
 800ebfc:	d1f7      	bne.n	800ebee <_strtoll_l.isra.0+0x12>
 800ebfe:	0015      	movs	r5, r2
 800ec00:	2a2d      	cmp	r2, #45	@ 0x2d
 800ec02:	d112      	bne.n	800ec2a <_strtoll_l.isra.0+0x4e>
 800ec04:	7825      	ldrb	r5, [r4, #0]
 800ec06:	1c9c      	adds	r4, r3, #2
 800ec08:	2301      	movs	r3, #1
 800ec0a:	9301      	str	r3, [sp, #4]
 800ec0c:	2210      	movs	r2, #16
 800ec0e:	0033      	movs	r3, r6
 800ec10:	4393      	bics	r3, r2
 800ec12:	d116      	bne.n	800ec42 <_strtoll_l.isra.0+0x66>
 800ec14:	2d30      	cmp	r5, #48	@ 0x30
 800ec16:	d10e      	bne.n	800ec36 <_strtoll_l.isra.0+0x5a>
 800ec18:	2120      	movs	r1, #32
 800ec1a:	7823      	ldrb	r3, [r4, #0]
 800ec1c:	438b      	bics	r3, r1
 800ec1e:	2b58      	cmp	r3, #88	@ 0x58
 800ec20:	d109      	bne.n	800ec36 <_strtoll_l.isra.0+0x5a>
 800ec22:	7865      	ldrb	r5, [r4, #1]
 800ec24:	3402      	adds	r4, #2
 800ec26:	2610      	movs	r6, #16
 800ec28:	e00b      	b.n	800ec42 <_strtoll_l.isra.0+0x66>
 800ec2a:	9001      	str	r0, [sp, #4]
 800ec2c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ec2e:	d1ed      	bne.n	800ec0c <_strtoll_l.isra.0+0x30>
 800ec30:	7825      	ldrb	r5, [r4, #0]
 800ec32:	1c9c      	adds	r4, r3, #2
 800ec34:	e7ea      	b.n	800ec0c <_strtoll_l.isra.0+0x30>
 800ec36:	2e00      	cmp	r6, #0
 800ec38:	d1f5      	bne.n	800ec26 <_strtoll_l.isra.0+0x4a>
 800ec3a:	360a      	adds	r6, #10
 800ec3c:	2d30      	cmp	r5, #48	@ 0x30
 800ec3e:	d100      	bne.n	800ec42 <_strtoll_l.isra.0+0x66>
 800ec40:	3e02      	subs	r6, #2
 800ec42:	2001      	movs	r0, #1
 800ec44:	2300      	movs	r3, #0
 800ec46:	4936      	ldr	r1, [pc, #216]	@ (800ed20 <_strtoll_l.isra.0+0x144>)
 800ec48:	9a01      	ldr	r2, [sp, #4]
 800ec4a:	4240      	negs	r0, r0
 800ec4c:	1812      	adds	r2, r2, r0
 800ec4e:	414b      	adcs	r3, r1
 800ec50:	9204      	str	r2, [sp, #16]
 800ec52:	9305      	str	r3, [sp, #20]
 800ec54:	9804      	ldr	r0, [sp, #16]
 800ec56:	9905      	ldr	r1, [sp, #20]
 800ec58:	17f3      	asrs	r3, r6, #31
 800ec5a:	0032      	movs	r2, r6
 800ec5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec5e:	f7f1 fc67 	bl	8000530 <__aeabi_uldivmod>
 800ec62:	2300      	movs	r3, #0
 800ec64:	000f      	movs	r7, r1
 800ec66:	9008      	str	r0, [sp, #32]
 800ec68:	2100      	movs	r1, #0
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec6e:	002a      	movs	r2, r5
 800ec70:	3a30      	subs	r2, #48	@ 0x30
 800ec72:	2a09      	cmp	r2, #9
 800ec74:	d823      	bhi.n	800ecbe <_strtoll_l.isra.0+0xe2>
 800ec76:	0015      	movs	r5, r2
 800ec78:	42ae      	cmp	r6, r5
 800ec7a:	dd2f      	ble.n	800ecdc <_strtoll_l.isra.0+0x100>
 800ec7c:	1c5a      	adds	r2, r3, #1
 800ec7e:	d01b      	beq.n	800ecb8 <_strtoll_l.isra.0+0xdc>
 800ec80:	42b9      	cmp	r1, r7
 800ec82:	d828      	bhi.n	800ecd6 <_strtoll_l.isra.0+0xfa>
 800ec84:	d102      	bne.n	800ec8c <_strtoll_l.isra.0+0xb0>
 800ec86:	9b08      	ldr	r3, [sp, #32]
 800ec88:	4298      	cmp	r0, r3
 800ec8a:	d824      	bhi.n	800ecd6 <_strtoll_l.isra.0+0xfa>
 800ec8c:	9b08      	ldr	r3, [sp, #32]
 800ec8e:	4283      	cmp	r3, r0
 800ec90:	d104      	bne.n	800ec9c <_strtoll_l.isra.0+0xc0>
 800ec92:	428f      	cmp	r7, r1
 800ec94:	d102      	bne.n	800ec9c <_strtoll_l.isra.0+0xc0>
 800ec96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec98:	42ab      	cmp	r3, r5
 800ec9a:	db1c      	blt.n	800ecd6 <_strtoll_l.isra.0+0xfa>
 800ec9c:	0002      	movs	r2, r0
 800ec9e:	000b      	movs	r3, r1
 800eca0:	0030      	movs	r0, r6
 800eca2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eca4:	f7f1 fc64 	bl	8000570 <__aeabi_lmul>
 800eca8:	17eb      	asrs	r3, r5, #31
 800ecaa:	9506      	str	r5, [sp, #24]
 800ecac:	9307      	str	r3, [sp, #28]
 800ecae:	9a06      	ldr	r2, [sp, #24]
 800ecb0:	9b07      	ldr	r3, [sp, #28]
 800ecb2:	1880      	adds	r0, r0, r2
 800ecb4:	4159      	adcs	r1, r3
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	7825      	ldrb	r5, [r4, #0]
 800ecba:	3401      	adds	r4, #1
 800ecbc:	e7d7      	b.n	800ec6e <_strtoll_l.isra.0+0x92>
 800ecbe:	002a      	movs	r2, r5
 800ecc0:	3a41      	subs	r2, #65	@ 0x41
 800ecc2:	2a19      	cmp	r2, #25
 800ecc4:	d801      	bhi.n	800ecca <_strtoll_l.isra.0+0xee>
 800ecc6:	3d37      	subs	r5, #55	@ 0x37
 800ecc8:	e7d6      	b.n	800ec78 <_strtoll_l.isra.0+0x9c>
 800ecca:	002a      	movs	r2, r5
 800eccc:	3a61      	subs	r2, #97	@ 0x61
 800ecce:	2a19      	cmp	r2, #25
 800ecd0:	d804      	bhi.n	800ecdc <_strtoll_l.isra.0+0x100>
 800ecd2:	3d57      	subs	r5, #87	@ 0x57
 800ecd4:	e7d0      	b.n	800ec78 <_strtoll_l.isra.0+0x9c>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	425b      	negs	r3, r3
 800ecda:	e7ed      	b.n	800ecb8 <_strtoll_l.isra.0+0xdc>
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	d109      	bne.n	800ecf4 <_strtoll_l.isra.0+0x118>
 800ece0:	9804      	ldr	r0, [sp, #16]
 800ece2:	9905      	ldr	r1, [sp, #20]
 800ece4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ece6:	3323      	adds	r3, #35	@ 0x23
 800ece8:	6013      	str	r3, [r2, #0]
 800ecea:	9b03      	ldr	r3, [sp, #12]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10e      	bne.n	800ed0e <_strtoll_l.isra.0+0x132>
 800ecf0:	b00d      	add	sp, #52	@ 0x34
 800ecf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf4:	9a01      	ldr	r2, [sp, #4]
 800ecf6:	2a00      	cmp	r2, #0
 800ecf8:	d004      	beq.n	800ed04 <_strtoll_l.isra.0+0x128>
 800ecfa:	0005      	movs	r5, r0
 800ecfc:	000e      	movs	r6, r1
 800ecfe:	2100      	movs	r1, #0
 800ed00:	4268      	negs	r0, r5
 800ed02:	41b1      	sbcs	r1, r6
 800ed04:	9a03      	ldr	r2, [sp, #12]
 800ed06:	2a00      	cmp	r2, #0
 800ed08:	d0f2      	beq.n	800ecf0 <_strtoll_l.isra.0+0x114>
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d001      	beq.n	800ed12 <_strtoll_l.isra.0+0x136>
 800ed0e:	1e63      	subs	r3, r4, #1
 800ed10:	9302      	str	r3, [sp, #8]
 800ed12:	9b03      	ldr	r3, [sp, #12]
 800ed14:	9a02      	ldr	r2, [sp, #8]
 800ed16:	601a      	str	r2, [r3, #0]
 800ed18:	e7ea      	b.n	800ecf0 <_strtoll_l.isra.0+0x114>
 800ed1a:	46c0      	nop			@ (mov r8, r8)
 800ed1c:	0801c469 	.word	0x0801c469
 800ed20:	7fffffff 	.word	0x7fffffff

0800ed24 <strtoll>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	4c04      	ldr	r4, [pc, #16]	@ (800ed38 <strtoll+0x14>)
 800ed28:	0013      	movs	r3, r2
 800ed2a:	000a      	movs	r2, r1
 800ed2c:	0001      	movs	r1, r0
 800ed2e:	6820      	ldr	r0, [r4, #0]
 800ed30:	f7ff ff54 	bl	800ebdc <_strtoll_l.isra.0>
 800ed34:	bd10      	pop	{r4, pc}
 800ed36:	46c0      	nop			@ (mov r8, r8)
 800ed38:	20000188 	.word	0x20000188

0800ed3c <std>:
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	b510      	push	{r4, lr}
 800ed40:	0004      	movs	r4, r0
 800ed42:	6003      	str	r3, [r0, #0]
 800ed44:	6043      	str	r3, [r0, #4]
 800ed46:	6083      	str	r3, [r0, #8]
 800ed48:	8181      	strh	r1, [r0, #12]
 800ed4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ed4c:	81c2      	strh	r2, [r0, #14]
 800ed4e:	6103      	str	r3, [r0, #16]
 800ed50:	6143      	str	r3, [r0, #20]
 800ed52:	6183      	str	r3, [r0, #24]
 800ed54:	0019      	movs	r1, r3
 800ed56:	2208      	movs	r2, #8
 800ed58:	305c      	adds	r0, #92	@ 0x5c
 800ed5a:	f000 f921 	bl	800efa0 <memset>
 800ed5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed8c <std+0x50>)
 800ed60:	6224      	str	r4, [r4, #32]
 800ed62:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed64:	4b0a      	ldr	r3, [pc, #40]	@ (800ed90 <std+0x54>)
 800ed66:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed68:	4b0a      	ldr	r3, [pc, #40]	@ (800ed94 <std+0x58>)
 800ed6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed98 <std+0x5c>)
 800ed6e:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed70:	4b0a      	ldr	r3, [pc, #40]	@ (800ed9c <std+0x60>)
 800ed72:	429c      	cmp	r4, r3
 800ed74:	d005      	beq.n	800ed82 <std+0x46>
 800ed76:	4b0a      	ldr	r3, [pc, #40]	@ (800eda0 <std+0x64>)
 800ed78:	429c      	cmp	r4, r3
 800ed7a:	d002      	beq.n	800ed82 <std+0x46>
 800ed7c:	4b09      	ldr	r3, [pc, #36]	@ (800eda4 <std+0x68>)
 800ed7e:	429c      	cmp	r4, r3
 800ed80:	d103      	bne.n	800ed8a <std+0x4e>
 800ed82:	0020      	movs	r0, r4
 800ed84:	3058      	adds	r0, #88	@ 0x58
 800ed86:	f000 f99d 	bl	800f0c4 <__retarget_lock_init_recursive>
 800ed8a:	bd10      	pop	{r4, pc}
 800ed8c:	0800ef09 	.word	0x0800ef09
 800ed90:	0800ef31 	.word	0x0800ef31
 800ed94:	0800ef69 	.word	0x0800ef69
 800ed98:	0800ef95 	.word	0x0800ef95
 800ed9c:	200014f8 	.word	0x200014f8
 800eda0:	20001560 	.word	0x20001560
 800eda4:	200015c8 	.word	0x200015c8

0800eda8 <stdio_exit_handler>:
 800eda8:	b510      	push	{r4, lr}
 800edaa:	4a03      	ldr	r2, [pc, #12]	@ (800edb8 <stdio_exit_handler+0x10>)
 800edac:	4903      	ldr	r1, [pc, #12]	@ (800edbc <stdio_exit_handler+0x14>)
 800edae:	4804      	ldr	r0, [pc, #16]	@ (800edc0 <stdio_exit_handler+0x18>)
 800edb0:	f000 f86c 	bl	800ee8c <_fwalk_sglue>
 800edb4:	bd10      	pop	{r4, pc}
 800edb6:	46c0      	nop			@ (mov r8, r8)
 800edb8:	20000010 	.word	0x20000010
 800edbc:	08010ca1 	.word	0x08010ca1
 800edc0:	2000018c 	.word	0x2000018c

0800edc4 <cleanup_stdio>:
 800edc4:	6841      	ldr	r1, [r0, #4]
 800edc6:	4b0b      	ldr	r3, [pc, #44]	@ (800edf4 <cleanup_stdio+0x30>)
 800edc8:	b510      	push	{r4, lr}
 800edca:	0004      	movs	r4, r0
 800edcc:	4299      	cmp	r1, r3
 800edce:	d001      	beq.n	800edd4 <cleanup_stdio+0x10>
 800edd0:	f001 ff66 	bl	8010ca0 <_fflush_r>
 800edd4:	68a1      	ldr	r1, [r4, #8]
 800edd6:	4b08      	ldr	r3, [pc, #32]	@ (800edf8 <cleanup_stdio+0x34>)
 800edd8:	4299      	cmp	r1, r3
 800edda:	d002      	beq.n	800ede2 <cleanup_stdio+0x1e>
 800eddc:	0020      	movs	r0, r4
 800edde:	f001 ff5f 	bl	8010ca0 <_fflush_r>
 800ede2:	68e1      	ldr	r1, [r4, #12]
 800ede4:	4b05      	ldr	r3, [pc, #20]	@ (800edfc <cleanup_stdio+0x38>)
 800ede6:	4299      	cmp	r1, r3
 800ede8:	d002      	beq.n	800edf0 <cleanup_stdio+0x2c>
 800edea:	0020      	movs	r0, r4
 800edec:	f001 ff58 	bl	8010ca0 <_fflush_r>
 800edf0:	bd10      	pop	{r4, pc}
 800edf2:	46c0      	nop			@ (mov r8, r8)
 800edf4:	200014f8 	.word	0x200014f8
 800edf8:	20001560 	.word	0x20001560
 800edfc:	200015c8 	.word	0x200015c8

0800ee00 <global_stdio_init.part.0>:
 800ee00:	b510      	push	{r4, lr}
 800ee02:	4b09      	ldr	r3, [pc, #36]	@ (800ee28 <global_stdio_init.part.0+0x28>)
 800ee04:	4a09      	ldr	r2, [pc, #36]	@ (800ee2c <global_stdio_init.part.0+0x2c>)
 800ee06:	2104      	movs	r1, #4
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	4809      	ldr	r0, [pc, #36]	@ (800ee30 <global_stdio_init.part.0+0x30>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f7ff ff95 	bl	800ed3c <std>
 800ee12:	2201      	movs	r2, #1
 800ee14:	2109      	movs	r1, #9
 800ee16:	4807      	ldr	r0, [pc, #28]	@ (800ee34 <global_stdio_init.part.0+0x34>)
 800ee18:	f7ff ff90 	bl	800ed3c <std>
 800ee1c:	2202      	movs	r2, #2
 800ee1e:	2112      	movs	r1, #18
 800ee20:	4805      	ldr	r0, [pc, #20]	@ (800ee38 <global_stdio_init.part.0+0x38>)
 800ee22:	f7ff ff8b 	bl	800ed3c <std>
 800ee26:	bd10      	pop	{r4, pc}
 800ee28:	20001630 	.word	0x20001630
 800ee2c:	0800eda9 	.word	0x0800eda9
 800ee30:	200014f8 	.word	0x200014f8
 800ee34:	20001560 	.word	0x20001560
 800ee38:	200015c8 	.word	0x200015c8

0800ee3c <__sfp_lock_acquire>:
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	4802      	ldr	r0, [pc, #8]	@ (800ee48 <__sfp_lock_acquire+0xc>)
 800ee40:	f000 f941 	bl	800f0c6 <__retarget_lock_acquire_recursive>
 800ee44:	bd10      	pop	{r4, pc}
 800ee46:	46c0      	nop			@ (mov r8, r8)
 800ee48:	20001639 	.word	0x20001639

0800ee4c <__sfp_lock_release>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	4802      	ldr	r0, [pc, #8]	@ (800ee58 <__sfp_lock_release+0xc>)
 800ee50:	f000 f93a 	bl	800f0c8 <__retarget_lock_release_recursive>
 800ee54:	bd10      	pop	{r4, pc}
 800ee56:	46c0      	nop			@ (mov r8, r8)
 800ee58:	20001639 	.word	0x20001639

0800ee5c <__sinit>:
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	0004      	movs	r4, r0
 800ee60:	f7ff ffec 	bl	800ee3c <__sfp_lock_acquire>
 800ee64:	6a23      	ldr	r3, [r4, #32]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d002      	beq.n	800ee70 <__sinit+0x14>
 800ee6a:	f7ff ffef 	bl	800ee4c <__sfp_lock_release>
 800ee6e:	bd10      	pop	{r4, pc}
 800ee70:	4b04      	ldr	r3, [pc, #16]	@ (800ee84 <__sinit+0x28>)
 800ee72:	6223      	str	r3, [r4, #32]
 800ee74:	4b04      	ldr	r3, [pc, #16]	@ (800ee88 <__sinit+0x2c>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1f6      	bne.n	800ee6a <__sinit+0xe>
 800ee7c:	f7ff ffc0 	bl	800ee00 <global_stdio_init.part.0>
 800ee80:	e7f3      	b.n	800ee6a <__sinit+0xe>
 800ee82:	46c0      	nop			@ (mov r8, r8)
 800ee84:	0800edc5 	.word	0x0800edc5
 800ee88:	20001630 	.word	0x20001630

0800ee8c <_fwalk_sglue>:
 800ee8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee8e:	0014      	movs	r4, r2
 800ee90:	2600      	movs	r6, #0
 800ee92:	9000      	str	r0, [sp, #0]
 800ee94:	9101      	str	r1, [sp, #4]
 800ee96:	68a5      	ldr	r5, [r4, #8]
 800ee98:	6867      	ldr	r7, [r4, #4]
 800ee9a:	3f01      	subs	r7, #1
 800ee9c:	d504      	bpl.n	800eea8 <_fwalk_sglue+0x1c>
 800ee9e:	6824      	ldr	r4, [r4, #0]
 800eea0:	2c00      	cmp	r4, #0
 800eea2:	d1f8      	bne.n	800ee96 <_fwalk_sglue+0xa>
 800eea4:	0030      	movs	r0, r6
 800eea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eea8:	89ab      	ldrh	r3, [r5, #12]
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d908      	bls.n	800eec0 <_fwalk_sglue+0x34>
 800eeae:	220e      	movs	r2, #14
 800eeb0:	5eab      	ldrsh	r3, [r5, r2]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	d004      	beq.n	800eec0 <_fwalk_sglue+0x34>
 800eeb6:	0029      	movs	r1, r5
 800eeb8:	9800      	ldr	r0, [sp, #0]
 800eeba:	9b01      	ldr	r3, [sp, #4]
 800eebc:	4798      	blx	r3
 800eebe:	4306      	orrs	r6, r0
 800eec0:	3568      	adds	r5, #104	@ 0x68
 800eec2:	e7ea      	b.n	800ee9a <_fwalk_sglue+0xe>

0800eec4 <siprintf>:
 800eec4:	b40e      	push	{r1, r2, r3}
 800eec6:	b510      	push	{r4, lr}
 800eec8:	2400      	movs	r4, #0
 800eeca:	490c      	ldr	r1, [pc, #48]	@ (800eefc <siprintf+0x38>)
 800eecc:	b09d      	sub	sp, #116	@ 0x74
 800eece:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eed0:	9002      	str	r0, [sp, #8]
 800eed2:	9006      	str	r0, [sp, #24]
 800eed4:	9107      	str	r1, [sp, #28]
 800eed6:	9104      	str	r1, [sp, #16]
 800eed8:	4809      	ldr	r0, [pc, #36]	@ (800ef00 <siprintf+0x3c>)
 800eeda:	490a      	ldr	r1, [pc, #40]	@ (800ef04 <siprintf+0x40>)
 800eedc:	cb04      	ldmia	r3!, {r2}
 800eede:	9105      	str	r1, [sp, #20]
 800eee0:	6800      	ldr	r0, [r0, #0]
 800eee2:	a902      	add	r1, sp, #8
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eee8:	f001 fa96 	bl	8010418 <_svfiprintf_r>
 800eeec:	9b02      	ldr	r3, [sp, #8]
 800eeee:	701c      	strb	r4, [r3, #0]
 800eef0:	b01d      	add	sp, #116	@ 0x74
 800eef2:	bc10      	pop	{r4}
 800eef4:	bc08      	pop	{r3}
 800eef6:	b003      	add	sp, #12
 800eef8:	4718      	bx	r3
 800eefa:	46c0      	nop			@ (mov r8, r8)
 800eefc:	7fffffff 	.word	0x7fffffff
 800ef00:	20000188 	.word	0x20000188
 800ef04:	ffff0208 	.word	0xffff0208

0800ef08 <__sread>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	000c      	movs	r4, r1
 800ef0c:	250e      	movs	r5, #14
 800ef0e:	5f49      	ldrsh	r1, [r1, r5]
 800ef10:	f000 f886 	bl	800f020 <_read_r>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	db03      	blt.n	800ef20 <__sread+0x18>
 800ef18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ef1a:	181b      	adds	r3, r3, r0
 800ef1c:	6563      	str	r3, [r4, #84]	@ 0x54
 800ef1e:	bd70      	pop	{r4, r5, r6, pc}
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	4a02      	ldr	r2, [pc, #8]	@ (800ef2c <__sread+0x24>)
 800ef24:	4013      	ands	r3, r2
 800ef26:	81a3      	strh	r3, [r4, #12]
 800ef28:	e7f9      	b.n	800ef1e <__sread+0x16>
 800ef2a:	46c0      	nop			@ (mov r8, r8)
 800ef2c:	ffffefff 	.word	0xffffefff

0800ef30 <__swrite>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	001f      	movs	r7, r3
 800ef34:	898b      	ldrh	r3, [r1, #12]
 800ef36:	0005      	movs	r5, r0
 800ef38:	000c      	movs	r4, r1
 800ef3a:	0016      	movs	r6, r2
 800ef3c:	05db      	lsls	r3, r3, #23
 800ef3e:	d505      	bpl.n	800ef4c <__swrite+0x1c>
 800ef40:	230e      	movs	r3, #14
 800ef42:	5ec9      	ldrsh	r1, [r1, r3]
 800ef44:	2200      	movs	r2, #0
 800ef46:	2302      	movs	r3, #2
 800ef48:	f000 f856 	bl	800eff8 <_lseek_r>
 800ef4c:	89a3      	ldrh	r3, [r4, #12]
 800ef4e:	4a05      	ldr	r2, [pc, #20]	@ (800ef64 <__swrite+0x34>)
 800ef50:	0028      	movs	r0, r5
 800ef52:	4013      	ands	r3, r2
 800ef54:	81a3      	strh	r3, [r4, #12]
 800ef56:	0032      	movs	r2, r6
 800ef58:	230e      	movs	r3, #14
 800ef5a:	5ee1      	ldrsh	r1, [r4, r3]
 800ef5c:	003b      	movs	r3, r7
 800ef5e:	f000 f873 	bl	800f048 <_write_r>
 800ef62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef64:	ffffefff 	.word	0xffffefff

0800ef68 <__sseek>:
 800ef68:	b570      	push	{r4, r5, r6, lr}
 800ef6a:	000c      	movs	r4, r1
 800ef6c:	250e      	movs	r5, #14
 800ef6e:	5f49      	ldrsh	r1, [r1, r5]
 800ef70:	f000 f842 	bl	800eff8 <_lseek_r>
 800ef74:	89a3      	ldrh	r3, [r4, #12]
 800ef76:	1c42      	adds	r2, r0, #1
 800ef78:	d103      	bne.n	800ef82 <__sseek+0x1a>
 800ef7a:	4a05      	ldr	r2, [pc, #20]	@ (800ef90 <__sseek+0x28>)
 800ef7c:	4013      	ands	r3, r2
 800ef7e:	81a3      	strh	r3, [r4, #12]
 800ef80:	bd70      	pop	{r4, r5, r6, pc}
 800ef82:	2280      	movs	r2, #128	@ 0x80
 800ef84:	0152      	lsls	r2, r2, #5
 800ef86:	4313      	orrs	r3, r2
 800ef88:	81a3      	strh	r3, [r4, #12]
 800ef8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef8c:	e7f8      	b.n	800ef80 <__sseek+0x18>
 800ef8e:	46c0      	nop			@ (mov r8, r8)
 800ef90:	ffffefff 	.word	0xffffefff

0800ef94 <__sclose>:
 800ef94:	b510      	push	{r4, lr}
 800ef96:	230e      	movs	r3, #14
 800ef98:	5ec9      	ldrsh	r1, [r1, r3]
 800ef9a:	f000 f81b 	bl	800efd4 <_close_r>
 800ef9e:	bd10      	pop	{r4, pc}

0800efa0 <memset>:
 800efa0:	0003      	movs	r3, r0
 800efa2:	1882      	adds	r2, r0, r2
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d100      	bne.n	800efaa <memset+0xa>
 800efa8:	4770      	bx	lr
 800efaa:	7019      	strb	r1, [r3, #0]
 800efac:	3301      	adds	r3, #1
 800efae:	e7f9      	b.n	800efa4 <memset+0x4>

0800efb0 <strncmp>:
 800efb0:	b530      	push	{r4, r5, lr}
 800efb2:	0005      	movs	r5, r0
 800efb4:	1e10      	subs	r0, r2, #0
 800efb6:	d00b      	beq.n	800efd0 <strncmp+0x20>
 800efb8:	2400      	movs	r4, #0
 800efba:	3a01      	subs	r2, #1
 800efbc:	5d2b      	ldrb	r3, [r5, r4]
 800efbe:	5d08      	ldrb	r0, [r1, r4]
 800efc0:	4283      	cmp	r3, r0
 800efc2:	d104      	bne.n	800efce <strncmp+0x1e>
 800efc4:	4294      	cmp	r4, r2
 800efc6:	d002      	beq.n	800efce <strncmp+0x1e>
 800efc8:	3401      	adds	r4, #1
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1f6      	bne.n	800efbc <strncmp+0xc>
 800efce:	1a18      	subs	r0, r3, r0
 800efd0:	bd30      	pop	{r4, r5, pc}
	...

0800efd4 <_close_r>:
 800efd4:	2300      	movs	r3, #0
 800efd6:	b570      	push	{r4, r5, r6, lr}
 800efd8:	4d06      	ldr	r5, [pc, #24]	@ (800eff4 <_close_r+0x20>)
 800efda:	0004      	movs	r4, r0
 800efdc:	0008      	movs	r0, r1
 800efde:	602b      	str	r3, [r5, #0]
 800efe0:	f7f9 f9b5 	bl	800834e <_close>
 800efe4:	1c43      	adds	r3, r0, #1
 800efe6:	d103      	bne.n	800eff0 <_close_r+0x1c>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d000      	beq.n	800eff0 <_close_r+0x1c>
 800efee:	6023      	str	r3, [r4, #0]
 800eff0:	bd70      	pop	{r4, r5, r6, pc}
 800eff2:	46c0      	nop			@ (mov r8, r8)
 800eff4:	20001634 	.word	0x20001634

0800eff8 <_lseek_r>:
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	0004      	movs	r4, r0
 800effc:	0008      	movs	r0, r1
 800effe:	0011      	movs	r1, r2
 800f000:	001a      	movs	r2, r3
 800f002:	2300      	movs	r3, #0
 800f004:	4d05      	ldr	r5, [pc, #20]	@ (800f01c <_lseek_r+0x24>)
 800f006:	602b      	str	r3, [r5, #0]
 800f008:	f7f9 f9c2 	bl	8008390 <_lseek>
 800f00c:	1c43      	adds	r3, r0, #1
 800f00e:	d103      	bne.n	800f018 <_lseek_r+0x20>
 800f010:	682b      	ldr	r3, [r5, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d000      	beq.n	800f018 <_lseek_r+0x20>
 800f016:	6023      	str	r3, [r4, #0]
 800f018:	bd70      	pop	{r4, r5, r6, pc}
 800f01a:	46c0      	nop			@ (mov r8, r8)
 800f01c:	20001634 	.word	0x20001634

0800f020 <_read_r>:
 800f020:	b570      	push	{r4, r5, r6, lr}
 800f022:	0004      	movs	r4, r0
 800f024:	0008      	movs	r0, r1
 800f026:	0011      	movs	r1, r2
 800f028:	001a      	movs	r2, r3
 800f02a:	2300      	movs	r3, #0
 800f02c:	4d05      	ldr	r5, [pc, #20]	@ (800f044 <_read_r+0x24>)
 800f02e:	602b      	str	r3, [r5, #0]
 800f030:	f7f9 f954 	bl	80082dc <_read>
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	d103      	bne.n	800f040 <_read_r+0x20>
 800f038:	682b      	ldr	r3, [r5, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d000      	beq.n	800f040 <_read_r+0x20>
 800f03e:	6023      	str	r3, [r4, #0]
 800f040:	bd70      	pop	{r4, r5, r6, pc}
 800f042:	46c0      	nop			@ (mov r8, r8)
 800f044:	20001634 	.word	0x20001634

0800f048 <_write_r>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	0004      	movs	r4, r0
 800f04c:	0008      	movs	r0, r1
 800f04e:	0011      	movs	r1, r2
 800f050:	001a      	movs	r2, r3
 800f052:	2300      	movs	r3, #0
 800f054:	4d05      	ldr	r5, [pc, #20]	@ (800f06c <_write_r+0x24>)
 800f056:	602b      	str	r3, [r5, #0]
 800f058:	f7f9 f95d 	bl	8008316 <_write>
 800f05c:	1c43      	adds	r3, r0, #1
 800f05e:	d103      	bne.n	800f068 <_write_r+0x20>
 800f060:	682b      	ldr	r3, [r5, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d000      	beq.n	800f068 <_write_r+0x20>
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	bd70      	pop	{r4, r5, r6, pc}
 800f06a:	46c0      	nop			@ (mov r8, r8)
 800f06c:	20001634 	.word	0x20001634

0800f070 <__errno>:
 800f070:	4b01      	ldr	r3, [pc, #4]	@ (800f078 <__errno+0x8>)
 800f072:	6818      	ldr	r0, [r3, #0]
 800f074:	4770      	bx	lr
 800f076:	46c0      	nop			@ (mov r8, r8)
 800f078:	20000188 	.word	0x20000188

0800f07c <__libc_init_array>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	2600      	movs	r6, #0
 800f080:	4c0c      	ldr	r4, [pc, #48]	@ (800f0b4 <__libc_init_array+0x38>)
 800f082:	4d0d      	ldr	r5, [pc, #52]	@ (800f0b8 <__libc_init_array+0x3c>)
 800f084:	1b64      	subs	r4, r4, r5
 800f086:	10a4      	asrs	r4, r4, #2
 800f088:	42a6      	cmp	r6, r4
 800f08a:	d109      	bne.n	800f0a0 <__libc_init_array+0x24>
 800f08c:	2600      	movs	r6, #0
 800f08e:	f002 facd 	bl	801162c <_init>
 800f092:	4c0a      	ldr	r4, [pc, #40]	@ (800f0bc <__libc_init_array+0x40>)
 800f094:	4d0a      	ldr	r5, [pc, #40]	@ (800f0c0 <__libc_init_array+0x44>)
 800f096:	1b64      	subs	r4, r4, r5
 800f098:	10a4      	asrs	r4, r4, #2
 800f09a:	42a6      	cmp	r6, r4
 800f09c:	d105      	bne.n	800f0aa <__libc_init_array+0x2e>
 800f09e:	bd70      	pop	{r4, r5, r6, pc}
 800f0a0:	00b3      	lsls	r3, r6, #2
 800f0a2:	58eb      	ldr	r3, [r5, r3]
 800f0a4:	4798      	blx	r3
 800f0a6:	3601      	adds	r6, #1
 800f0a8:	e7ee      	b.n	800f088 <__libc_init_array+0xc>
 800f0aa:	00b3      	lsls	r3, r6, #2
 800f0ac:	58eb      	ldr	r3, [r5, r3]
 800f0ae:	4798      	blx	r3
 800f0b0:	3601      	adds	r6, #1
 800f0b2:	e7f2      	b.n	800f09a <__libc_init_array+0x1e>
 800f0b4:	0801c690 	.word	0x0801c690
 800f0b8:	0801c690 	.word	0x0801c690
 800f0bc:	0801c694 	.word	0x0801c694
 800f0c0:	0801c690 	.word	0x0801c690

0800f0c4 <__retarget_lock_init_recursive>:
 800f0c4:	4770      	bx	lr

0800f0c6 <__retarget_lock_acquire_recursive>:
 800f0c6:	4770      	bx	lr

0800f0c8 <__retarget_lock_release_recursive>:
 800f0c8:	4770      	bx	lr

0800f0ca <memcpy>:
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	b510      	push	{r4, lr}
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d100      	bne.n	800f0d4 <memcpy+0xa>
 800f0d2:	bd10      	pop	{r4, pc}
 800f0d4:	5ccc      	ldrb	r4, [r1, r3]
 800f0d6:	54c4      	strb	r4, [r0, r3]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	e7f8      	b.n	800f0ce <memcpy+0x4>

0800f0dc <nan>:
 800f0dc:	2000      	movs	r0, #0
 800f0de:	4901      	ldr	r1, [pc, #4]	@ (800f0e4 <nan+0x8>)
 800f0e0:	4770      	bx	lr
 800f0e2:	46c0      	nop			@ (mov r8, r8)
 800f0e4:	7ff80000 	.word	0x7ff80000

0800f0e8 <_free_r>:
 800f0e8:	b570      	push	{r4, r5, r6, lr}
 800f0ea:	0005      	movs	r5, r0
 800f0ec:	1e0c      	subs	r4, r1, #0
 800f0ee:	d010      	beq.n	800f112 <_free_r+0x2a>
 800f0f0:	3c04      	subs	r4, #4
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	da00      	bge.n	800f0fa <_free_r+0x12>
 800f0f8:	18e4      	adds	r4, r4, r3
 800f0fa:	0028      	movs	r0, r5
 800f0fc:	f000 fc4c 	bl	800f998 <__malloc_lock>
 800f100:	4a1d      	ldr	r2, [pc, #116]	@ (800f178 <_free_r+0x90>)
 800f102:	6813      	ldr	r3, [r2, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d105      	bne.n	800f114 <_free_r+0x2c>
 800f108:	6063      	str	r3, [r4, #4]
 800f10a:	6014      	str	r4, [r2, #0]
 800f10c:	0028      	movs	r0, r5
 800f10e:	f000 fc4b 	bl	800f9a8 <__malloc_unlock>
 800f112:	bd70      	pop	{r4, r5, r6, pc}
 800f114:	42a3      	cmp	r3, r4
 800f116:	d908      	bls.n	800f12a <_free_r+0x42>
 800f118:	6820      	ldr	r0, [r4, #0]
 800f11a:	1821      	adds	r1, r4, r0
 800f11c:	428b      	cmp	r3, r1
 800f11e:	d1f3      	bne.n	800f108 <_free_r+0x20>
 800f120:	6819      	ldr	r1, [r3, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	1809      	adds	r1, r1, r0
 800f126:	6021      	str	r1, [r4, #0]
 800f128:	e7ee      	b.n	800f108 <_free_r+0x20>
 800f12a:	001a      	movs	r2, r3
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d001      	beq.n	800f136 <_free_r+0x4e>
 800f132:	42a3      	cmp	r3, r4
 800f134:	d9f9      	bls.n	800f12a <_free_r+0x42>
 800f136:	6811      	ldr	r1, [r2, #0]
 800f138:	1850      	adds	r0, r2, r1
 800f13a:	42a0      	cmp	r0, r4
 800f13c:	d10b      	bne.n	800f156 <_free_r+0x6e>
 800f13e:	6820      	ldr	r0, [r4, #0]
 800f140:	1809      	adds	r1, r1, r0
 800f142:	1850      	adds	r0, r2, r1
 800f144:	6011      	str	r1, [r2, #0]
 800f146:	4283      	cmp	r3, r0
 800f148:	d1e0      	bne.n	800f10c <_free_r+0x24>
 800f14a:	6818      	ldr	r0, [r3, #0]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	1841      	adds	r1, r0, r1
 800f150:	6011      	str	r1, [r2, #0]
 800f152:	6053      	str	r3, [r2, #4]
 800f154:	e7da      	b.n	800f10c <_free_r+0x24>
 800f156:	42a0      	cmp	r0, r4
 800f158:	d902      	bls.n	800f160 <_free_r+0x78>
 800f15a:	230c      	movs	r3, #12
 800f15c:	602b      	str	r3, [r5, #0]
 800f15e:	e7d5      	b.n	800f10c <_free_r+0x24>
 800f160:	6820      	ldr	r0, [r4, #0]
 800f162:	1821      	adds	r1, r4, r0
 800f164:	428b      	cmp	r3, r1
 800f166:	d103      	bne.n	800f170 <_free_r+0x88>
 800f168:	6819      	ldr	r1, [r3, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	1809      	adds	r1, r1, r0
 800f16e:	6021      	str	r1, [r4, #0]
 800f170:	6063      	str	r3, [r4, #4]
 800f172:	6054      	str	r4, [r2, #4]
 800f174:	e7ca      	b.n	800f10c <_free_r+0x24>
 800f176:	46c0      	nop			@ (mov r8, r8)
 800f178:	20001640 	.word	0x20001640

0800f17c <rshift>:
 800f17c:	0002      	movs	r2, r0
 800f17e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f180:	6904      	ldr	r4, [r0, #16]
 800f182:	b085      	sub	sp, #20
 800f184:	3214      	adds	r2, #20
 800f186:	114b      	asrs	r3, r1, #5
 800f188:	0016      	movs	r6, r2
 800f18a:	9302      	str	r3, [sp, #8]
 800f18c:	429c      	cmp	r4, r3
 800f18e:	dd31      	ble.n	800f1f4 <rshift+0x78>
 800f190:	261f      	movs	r6, #31
 800f192:	000f      	movs	r7, r1
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	00a5      	lsls	r5, r4, #2
 800f198:	18d3      	adds	r3, r2, r3
 800f19a:	4037      	ands	r7, r6
 800f19c:	1955      	adds	r5, r2, r5
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	9701      	str	r7, [sp, #4]
 800f1a2:	4231      	tst	r1, r6
 800f1a4:	d10d      	bne.n	800f1c2 <rshift+0x46>
 800f1a6:	0016      	movs	r6, r2
 800f1a8:	0019      	movs	r1, r3
 800f1aa:	428d      	cmp	r5, r1
 800f1ac:	d836      	bhi.n	800f21c <rshift+0xa0>
 800f1ae:	9b00      	ldr	r3, [sp, #0]
 800f1b0:	2600      	movs	r6, #0
 800f1b2:	3b03      	subs	r3, #3
 800f1b4:	429d      	cmp	r5, r3
 800f1b6:	d302      	bcc.n	800f1be <rshift+0x42>
 800f1b8:	9b02      	ldr	r3, [sp, #8]
 800f1ba:	1ae4      	subs	r4, r4, r3
 800f1bc:	00a6      	lsls	r6, r4, #2
 800f1be:	1996      	adds	r6, r2, r6
 800f1c0:	e018      	b.n	800f1f4 <rshift+0x78>
 800f1c2:	2120      	movs	r1, #32
 800f1c4:	9e01      	ldr	r6, [sp, #4]
 800f1c6:	9f01      	ldr	r7, [sp, #4]
 800f1c8:	1b89      	subs	r1, r1, r6
 800f1ca:	9e00      	ldr	r6, [sp, #0]
 800f1cc:	9103      	str	r1, [sp, #12]
 800f1ce:	ce02      	ldmia	r6!, {r1}
 800f1d0:	4694      	mov	ip, r2
 800f1d2:	40f9      	lsrs	r1, r7
 800f1d4:	42b5      	cmp	r5, r6
 800f1d6:	d816      	bhi.n	800f206 <rshift+0x8a>
 800f1d8:	9b00      	ldr	r3, [sp, #0]
 800f1da:	2600      	movs	r6, #0
 800f1dc:	3301      	adds	r3, #1
 800f1de:	429d      	cmp	r5, r3
 800f1e0:	d303      	bcc.n	800f1ea <rshift+0x6e>
 800f1e2:	9b02      	ldr	r3, [sp, #8]
 800f1e4:	1ae4      	subs	r4, r4, r3
 800f1e6:	00a6      	lsls	r6, r4, #2
 800f1e8:	3e04      	subs	r6, #4
 800f1ea:	1996      	adds	r6, r2, r6
 800f1ec:	6031      	str	r1, [r6, #0]
 800f1ee:	2900      	cmp	r1, #0
 800f1f0:	d000      	beq.n	800f1f4 <rshift+0x78>
 800f1f2:	3604      	adds	r6, #4
 800f1f4:	1ab1      	subs	r1, r6, r2
 800f1f6:	1089      	asrs	r1, r1, #2
 800f1f8:	6101      	str	r1, [r0, #16]
 800f1fa:	4296      	cmp	r6, r2
 800f1fc:	d101      	bne.n	800f202 <rshift+0x86>
 800f1fe:	2300      	movs	r3, #0
 800f200:	6143      	str	r3, [r0, #20]
 800f202:	b005      	add	sp, #20
 800f204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f206:	6837      	ldr	r7, [r6, #0]
 800f208:	9b03      	ldr	r3, [sp, #12]
 800f20a:	409f      	lsls	r7, r3
 800f20c:	430f      	orrs	r7, r1
 800f20e:	4661      	mov	r1, ip
 800f210:	c180      	stmia	r1!, {r7}
 800f212:	468c      	mov	ip, r1
 800f214:	9b01      	ldr	r3, [sp, #4]
 800f216:	ce02      	ldmia	r6!, {r1}
 800f218:	40d9      	lsrs	r1, r3
 800f21a:	e7db      	b.n	800f1d4 <rshift+0x58>
 800f21c:	c980      	ldmia	r1!, {r7}
 800f21e:	c680      	stmia	r6!, {r7}
 800f220:	e7c3      	b.n	800f1aa <rshift+0x2e>

0800f222 <__hexdig_fun>:
 800f222:	0002      	movs	r2, r0
 800f224:	3a30      	subs	r2, #48	@ 0x30
 800f226:	0003      	movs	r3, r0
 800f228:	2a09      	cmp	r2, #9
 800f22a:	d802      	bhi.n	800f232 <__hexdig_fun+0x10>
 800f22c:	3b20      	subs	r3, #32
 800f22e:	b2d8      	uxtb	r0, r3
 800f230:	4770      	bx	lr
 800f232:	0002      	movs	r2, r0
 800f234:	3a61      	subs	r2, #97	@ 0x61
 800f236:	2a05      	cmp	r2, #5
 800f238:	d801      	bhi.n	800f23e <__hexdig_fun+0x1c>
 800f23a:	3b47      	subs	r3, #71	@ 0x47
 800f23c:	e7f7      	b.n	800f22e <__hexdig_fun+0xc>
 800f23e:	001a      	movs	r2, r3
 800f240:	3a41      	subs	r2, #65	@ 0x41
 800f242:	2000      	movs	r0, #0
 800f244:	2a05      	cmp	r2, #5
 800f246:	d8f3      	bhi.n	800f230 <__hexdig_fun+0xe>
 800f248:	3b27      	subs	r3, #39	@ 0x27
 800f24a:	e7f0      	b.n	800f22e <__hexdig_fun+0xc>

0800f24c <__gethex>:
 800f24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f24e:	b089      	sub	sp, #36	@ 0x24
 800f250:	9307      	str	r3, [sp, #28]
 800f252:	680b      	ldr	r3, [r1, #0]
 800f254:	9201      	str	r2, [sp, #4]
 800f256:	9003      	str	r0, [sp, #12]
 800f258:	9106      	str	r1, [sp, #24]
 800f25a:	1c9a      	adds	r2, r3, #2
 800f25c:	0011      	movs	r1, r2
 800f25e:	3201      	adds	r2, #1
 800f260:	1e50      	subs	r0, r2, #1
 800f262:	7800      	ldrb	r0, [r0, #0]
 800f264:	2830      	cmp	r0, #48	@ 0x30
 800f266:	d0f9      	beq.n	800f25c <__gethex+0x10>
 800f268:	1acb      	subs	r3, r1, r3
 800f26a:	3b02      	subs	r3, #2
 800f26c:	9305      	str	r3, [sp, #20]
 800f26e:	9100      	str	r1, [sp, #0]
 800f270:	f7ff ffd7 	bl	800f222 <__hexdig_fun>
 800f274:	2300      	movs	r3, #0
 800f276:	001d      	movs	r5, r3
 800f278:	9302      	str	r3, [sp, #8]
 800f27a:	4298      	cmp	r0, r3
 800f27c:	d11e      	bne.n	800f2bc <__gethex+0x70>
 800f27e:	2201      	movs	r2, #1
 800f280:	49a6      	ldr	r1, [pc, #664]	@ (800f51c <__gethex+0x2d0>)
 800f282:	9800      	ldr	r0, [sp, #0]
 800f284:	f7ff fe94 	bl	800efb0 <strncmp>
 800f288:	0007      	movs	r7, r0
 800f28a:	42a8      	cmp	r0, r5
 800f28c:	d000      	beq.n	800f290 <__gethex+0x44>
 800f28e:	e06a      	b.n	800f366 <__gethex+0x11a>
 800f290:	9b00      	ldr	r3, [sp, #0]
 800f292:	7858      	ldrb	r0, [r3, #1]
 800f294:	1c5c      	adds	r4, r3, #1
 800f296:	f7ff ffc4 	bl	800f222 <__hexdig_fun>
 800f29a:	2301      	movs	r3, #1
 800f29c:	9302      	str	r3, [sp, #8]
 800f29e:	42a8      	cmp	r0, r5
 800f2a0:	d02f      	beq.n	800f302 <__gethex+0xb6>
 800f2a2:	9400      	str	r4, [sp, #0]
 800f2a4:	9b00      	ldr	r3, [sp, #0]
 800f2a6:	7818      	ldrb	r0, [r3, #0]
 800f2a8:	2830      	cmp	r0, #48	@ 0x30
 800f2aa:	d009      	beq.n	800f2c0 <__gethex+0x74>
 800f2ac:	f7ff ffb9 	bl	800f222 <__hexdig_fun>
 800f2b0:	4242      	negs	r2, r0
 800f2b2:	4142      	adcs	r2, r0
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	0025      	movs	r5, r4
 800f2b8:	9202      	str	r2, [sp, #8]
 800f2ba:	9305      	str	r3, [sp, #20]
 800f2bc:	9c00      	ldr	r4, [sp, #0]
 800f2be:	e004      	b.n	800f2ca <__gethex+0x7e>
 800f2c0:	9b00      	ldr	r3, [sp, #0]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	e7ed      	b.n	800f2a4 <__gethex+0x58>
 800f2c8:	3401      	adds	r4, #1
 800f2ca:	7820      	ldrb	r0, [r4, #0]
 800f2cc:	f7ff ffa9 	bl	800f222 <__hexdig_fun>
 800f2d0:	1e07      	subs	r7, r0, #0
 800f2d2:	d1f9      	bne.n	800f2c8 <__gethex+0x7c>
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	0020      	movs	r0, r4
 800f2d8:	4990      	ldr	r1, [pc, #576]	@ (800f51c <__gethex+0x2d0>)
 800f2da:	f7ff fe69 	bl	800efb0 <strncmp>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d10d      	bne.n	800f2fe <__gethex+0xb2>
 800f2e2:	2d00      	cmp	r5, #0
 800f2e4:	d106      	bne.n	800f2f4 <__gethex+0xa8>
 800f2e6:	3401      	adds	r4, #1
 800f2e8:	0025      	movs	r5, r4
 800f2ea:	7820      	ldrb	r0, [r4, #0]
 800f2ec:	f7ff ff99 	bl	800f222 <__hexdig_fun>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d102      	bne.n	800f2fa <__gethex+0xae>
 800f2f4:	1b2d      	subs	r5, r5, r4
 800f2f6:	00af      	lsls	r7, r5, #2
 800f2f8:	e003      	b.n	800f302 <__gethex+0xb6>
 800f2fa:	3401      	adds	r4, #1
 800f2fc:	e7f5      	b.n	800f2ea <__gethex+0x9e>
 800f2fe:	2d00      	cmp	r5, #0
 800f300:	d1f8      	bne.n	800f2f4 <__gethex+0xa8>
 800f302:	2220      	movs	r2, #32
 800f304:	7823      	ldrb	r3, [r4, #0]
 800f306:	0026      	movs	r6, r4
 800f308:	4393      	bics	r3, r2
 800f30a:	2b50      	cmp	r3, #80	@ 0x50
 800f30c:	d11d      	bne.n	800f34a <__gethex+0xfe>
 800f30e:	7863      	ldrb	r3, [r4, #1]
 800f310:	2b2b      	cmp	r3, #43	@ 0x2b
 800f312:	d02d      	beq.n	800f370 <__gethex+0x124>
 800f314:	2b2d      	cmp	r3, #45	@ 0x2d
 800f316:	d02f      	beq.n	800f378 <__gethex+0x12c>
 800f318:	2300      	movs	r3, #0
 800f31a:	1c66      	adds	r6, r4, #1
 800f31c:	9304      	str	r3, [sp, #16]
 800f31e:	7830      	ldrb	r0, [r6, #0]
 800f320:	f7ff ff7f 	bl	800f222 <__hexdig_fun>
 800f324:	1e43      	subs	r3, r0, #1
 800f326:	b2db      	uxtb	r3, r3
 800f328:	0005      	movs	r5, r0
 800f32a:	2b18      	cmp	r3, #24
 800f32c:	d82a      	bhi.n	800f384 <__gethex+0x138>
 800f32e:	7870      	ldrb	r0, [r6, #1]
 800f330:	f7ff ff77 	bl	800f222 <__hexdig_fun>
 800f334:	1e43      	subs	r3, r0, #1
 800f336:	b2db      	uxtb	r3, r3
 800f338:	3601      	adds	r6, #1
 800f33a:	3d10      	subs	r5, #16
 800f33c:	2b18      	cmp	r3, #24
 800f33e:	d91d      	bls.n	800f37c <__gethex+0x130>
 800f340:	9b04      	ldr	r3, [sp, #16]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d000      	beq.n	800f348 <__gethex+0xfc>
 800f346:	426d      	negs	r5, r5
 800f348:	197f      	adds	r7, r7, r5
 800f34a:	9b06      	ldr	r3, [sp, #24]
 800f34c:	601e      	str	r6, [r3, #0]
 800f34e:	9b02      	ldr	r3, [sp, #8]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d019      	beq.n	800f388 <__gethex+0x13c>
 800f354:	9b05      	ldr	r3, [sp, #20]
 800f356:	2606      	movs	r6, #6
 800f358:	425a      	negs	r2, r3
 800f35a:	4153      	adcs	r3, r2
 800f35c:	425b      	negs	r3, r3
 800f35e:	401e      	ands	r6, r3
 800f360:	0030      	movs	r0, r6
 800f362:	b009      	add	sp, #36	@ 0x24
 800f364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f366:	2301      	movs	r3, #1
 800f368:	2700      	movs	r7, #0
 800f36a:	9c00      	ldr	r4, [sp, #0]
 800f36c:	9302      	str	r3, [sp, #8]
 800f36e:	e7c8      	b.n	800f302 <__gethex+0xb6>
 800f370:	2300      	movs	r3, #0
 800f372:	9304      	str	r3, [sp, #16]
 800f374:	1ca6      	adds	r6, r4, #2
 800f376:	e7d2      	b.n	800f31e <__gethex+0xd2>
 800f378:	2301      	movs	r3, #1
 800f37a:	e7fa      	b.n	800f372 <__gethex+0x126>
 800f37c:	230a      	movs	r3, #10
 800f37e:	435d      	muls	r5, r3
 800f380:	182d      	adds	r5, r5, r0
 800f382:	e7d4      	b.n	800f32e <__gethex+0xe2>
 800f384:	0026      	movs	r6, r4
 800f386:	e7e0      	b.n	800f34a <__gethex+0xfe>
 800f388:	9b00      	ldr	r3, [sp, #0]
 800f38a:	9902      	ldr	r1, [sp, #8]
 800f38c:	1ae3      	subs	r3, r4, r3
 800f38e:	3b01      	subs	r3, #1
 800f390:	2b07      	cmp	r3, #7
 800f392:	dc0a      	bgt.n	800f3aa <__gethex+0x15e>
 800f394:	9803      	ldr	r0, [sp, #12]
 800f396:	f000 fb0f 	bl	800f9b8 <_Balloc>
 800f39a:	1e05      	subs	r5, r0, #0
 800f39c:	d108      	bne.n	800f3b0 <__gethex+0x164>
 800f39e:	002a      	movs	r2, r5
 800f3a0:	21e4      	movs	r1, #228	@ 0xe4
 800f3a2:	4b5f      	ldr	r3, [pc, #380]	@ (800f520 <__gethex+0x2d4>)
 800f3a4:	485f      	ldr	r0, [pc, #380]	@ (800f524 <__gethex+0x2d8>)
 800f3a6:	f001 fd77 	bl	8010e98 <__assert_func>
 800f3aa:	3101      	adds	r1, #1
 800f3ac:	105b      	asrs	r3, r3, #1
 800f3ae:	e7ef      	b.n	800f390 <__gethex+0x144>
 800f3b0:	0003      	movs	r3, r0
 800f3b2:	3314      	adds	r3, #20
 800f3b4:	9302      	str	r3, [sp, #8]
 800f3b6:	9305      	str	r3, [sp, #20]
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	001e      	movs	r6, r3
 800f3bc:	9304      	str	r3, [sp, #16]
 800f3be:	9b00      	ldr	r3, [sp, #0]
 800f3c0:	42a3      	cmp	r3, r4
 800f3c2:	d338      	bcc.n	800f436 <__gethex+0x1ea>
 800f3c4:	9c05      	ldr	r4, [sp, #20]
 800f3c6:	9b02      	ldr	r3, [sp, #8]
 800f3c8:	c440      	stmia	r4!, {r6}
 800f3ca:	1ae4      	subs	r4, r4, r3
 800f3cc:	10a4      	asrs	r4, r4, #2
 800f3ce:	0030      	movs	r0, r6
 800f3d0:	612c      	str	r4, [r5, #16]
 800f3d2:	f000 fbe9 	bl	800fba8 <__hi0bits>
 800f3d6:	9b01      	ldr	r3, [sp, #4]
 800f3d8:	0164      	lsls	r4, r4, #5
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	1a26      	subs	r6, r4, r0
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	429e      	cmp	r6, r3
 800f3e2:	dd52      	ble.n	800f48a <__gethex+0x23e>
 800f3e4:	1af6      	subs	r6, r6, r3
 800f3e6:	0031      	movs	r1, r6
 800f3e8:	0028      	movs	r0, r5
 800f3ea:	f000 ff84 	bl	80102f6 <__any_on>
 800f3ee:	1e04      	subs	r4, r0, #0
 800f3f0:	d00f      	beq.n	800f412 <__gethex+0x1c6>
 800f3f2:	2401      	movs	r4, #1
 800f3f4:	211f      	movs	r1, #31
 800f3f6:	0020      	movs	r0, r4
 800f3f8:	1e73      	subs	r3, r6, #1
 800f3fa:	4019      	ands	r1, r3
 800f3fc:	4088      	lsls	r0, r1
 800f3fe:	0001      	movs	r1, r0
 800f400:	115a      	asrs	r2, r3, #5
 800f402:	9802      	ldr	r0, [sp, #8]
 800f404:	0092      	lsls	r2, r2, #2
 800f406:	5812      	ldr	r2, [r2, r0]
 800f408:	420a      	tst	r2, r1
 800f40a:	d002      	beq.n	800f412 <__gethex+0x1c6>
 800f40c:	42a3      	cmp	r3, r4
 800f40e:	dc34      	bgt.n	800f47a <__gethex+0x22e>
 800f410:	2402      	movs	r4, #2
 800f412:	0031      	movs	r1, r6
 800f414:	0028      	movs	r0, r5
 800f416:	f7ff feb1 	bl	800f17c <rshift>
 800f41a:	19bf      	adds	r7, r7, r6
 800f41c:	9b01      	ldr	r3, [sp, #4]
 800f41e:	689b      	ldr	r3, [r3, #8]
 800f420:	42bb      	cmp	r3, r7
 800f422:	da42      	bge.n	800f4aa <__gethex+0x25e>
 800f424:	0029      	movs	r1, r5
 800f426:	9803      	ldr	r0, [sp, #12]
 800f428:	f000 fb0a 	bl	800fa40 <_Bfree>
 800f42c:	2300      	movs	r3, #0
 800f42e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f430:	26a3      	movs	r6, #163	@ 0xa3
 800f432:	6013      	str	r3, [r2, #0]
 800f434:	e794      	b.n	800f360 <__gethex+0x114>
 800f436:	3c01      	subs	r4, #1
 800f438:	7823      	ldrb	r3, [r4, #0]
 800f43a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f43c:	d012      	beq.n	800f464 <__gethex+0x218>
 800f43e:	9b04      	ldr	r3, [sp, #16]
 800f440:	2b20      	cmp	r3, #32
 800f442:	d104      	bne.n	800f44e <__gethex+0x202>
 800f444:	9b05      	ldr	r3, [sp, #20]
 800f446:	c340      	stmia	r3!, {r6}
 800f448:	2600      	movs	r6, #0
 800f44a:	9305      	str	r3, [sp, #20]
 800f44c:	9604      	str	r6, [sp, #16]
 800f44e:	7820      	ldrb	r0, [r4, #0]
 800f450:	f7ff fee7 	bl	800f222 <__hexdig_fun>
 800f454:	230f      	movs	r3, #15
 800f456:	4018      	ands	r0, r3
 800f458:	9b04      	ldr	r3, [sp, #16]
 800f45a:	4098      	lsls	r0, r3
 800f45c:	3304      	adds	r3, #4
 800f45e:	4306      	orrs	r6, r0
 800f460:	9304      	str	r3, [sp, #16]
 800f462:	e7ac      	b.n	800f3be <__gethex+0x172>
 800f464:	9b00      	ldr	r3, [sp, #0]
 800f466:	42a3      	cmp	r3, r4
 800f468:	d8e9      	bhi.n	800f43e <__gethex+0x1f2>
 800f46a:	2201      	movs	r2, #1
 800f46c:	0020      	movs	r0, r4
 800f46e:	492b      	ldr	r1, [pc, #172]	@ (800f51c <__gethex+0x2d0>)
 800f470:	f7ff fd9e 	bl	800efb0 <strncmp>
 800f474:	2800      	cmp	r0, #0
 800f476:	d1e2      	bne.n	800f43e <__gethex+0x1f2>
 800f478:	e7a1      	b.n	800f3be <__gethex+0x172>
 800f47a:	0028      	movs	r0, r5
 800f47c:	1eb1      	subs	r1, r6, #2
 800f47e:	f000 ff3a 	bl	80102f6 <__any_on>
 800f482:	2800      	cmp	r0, #0
 800f484:	d0c4      	beq.n	800f410 <__gethex+0x1c4>
 800f486:	2403      	movs	r4, #3
 800f488:	e7c3      	b.n	800f412 <__gethex+0x1c6>
 800f48a:	9b00      	ldr	r3, [sp, #0]
 800f48c:	2400      	movs	r4, #0
 800f48e:	429e      	cmp	r6, r3
 800f490:	dac4      	bge.n	800f41c <__gethex+0x1d0>
 800f492:	1b9e      	subs	r6, r3, r6
 800f494:	0029      	movs	r1, r5
 800f496:	0032      	movs	r2, r6
 800f498:	9803      	ldr	r0, [sp, #12]
 800f49a:	f000 fcf3 	bl	800fe84 <__lshift>
 800f49e:	0003      	movs	r3, r0
 800f4a0:	3314      	adds	r3, #20
 800f4a2:	0005      	movs	r5, r0
 800f4a4:	1bbf      	subs	r7, r7, r6
 800f4a6:	9302      	str	r3, [sp, #8]
 800f4a8:	e7b8      	b.n	800f41c <__gethex+0x1d0>
 800f4aa:	9b01      	ldr	r3, [sp, #4]
 800f4ac:	685e      	ldr	r6, [r3, #4]
 800f4ae:	42be      	cmp	r6, r7
 800f4b0:	dd6f      	ble.n	800f592 <__gethex+0x346>
 800f4b2:	9b00      	ldr	r3, [sp, #0]
 800f4b4:	1bf6      	subs	r6, r6, r7
 800f4b6:	42b3      	cmp	r3, r6
 800f4b8:	dc36      	bgt.n	800f528 <__gethex+0x2dc>
 800f4ba:	9b01      	ldr	r3, [sp, #4]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	2b02      	cmp	r3, #2
 800f4c0:	d024      	beq.n	800f50c <__gethex+0x2c0>
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	d026      	beq.n	800f514 <__gethex+0x2c8>
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d117      	bne.n	800f4fa <__gethex+0x2ae>
 800f4ca:	9b00      	ldr	r3, [sp, #0]
 800f4cc:	42b3      	cmp	r3, r6
 800f4ce:	d114      	bne.n	800f4fa <__gethex+0x2ae>
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d10b      	bne.n	800f4ec <__gethex+0x2a0>
 800f4d4:	9b01      	ldr	r3, [sp, #4]
 800f4d6:	9a07      	ldr	r2, [sp, #28]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	2662      	movs	r6, #98	@ 0x62
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	2301      	movs	r3, #1
 800f4e0:	9a02      	ldr	r2, [sp, #8]
 800f4e2:	612b      	str	r3, [r5, #16]
 800f4e4:	6013      	str	r3, [r2, #0]
 800f4e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4e8:	601d      	str	r5, [r3, #0]
 800f4ea:	e739      	b.n	800f360 <__gethex+0x114>
 800f4ec:	9900      	ldr	r1, [sp, #0]
 800f4ee:	0028      	movs	r0, r5
 800f4f0:	3901      	subs	r1, #1
 800f4f2:	f000 ff00 	bl	80102f6 <__any_on>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d1ec      	bne.n	800f4d4 <__gethex+0x288>
 800f4fa:	0029      	movs	r1, r5
 800f4fc:	9803      	ldr	r0, [sp, #12]
 800f4fe:	f000 fa9f 	bl	800fa40 <_Bfree>
 800f502:	2300      	movs	r3, #0
 800f504:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f506:	2650      	movs	r6, #80	@ 0x50
 800f508:	6013      	str	r3, [r2, #0]
 800f50a:	e729      	b.n	800f360 <__gethex+0x114>
 800f50c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1f3      	bne.n	800f4fa <__gethex+0x2ae>
 800f512:	e7df      	b.n	800f4d4 <__gethex+0x288>
 800f514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d1dc      	bne.n	800f4d4 <__gethex+0x288>
 800f51a:	e7ee      	b.n	800f4fa <__gethex+0x2ae>
 800f51c:	0801c2ac 	.word	0x0801c2ac
 800f520:	0801c2c2 	.word	0x0801c2c2
 800f524:	0801c2d3 	.word	0x0801c2d3
 800f528:	1e77      	subs	r7, r6, #1
 800f52a:	2c00      	cmp	r4, #0
 800f52c:	d12f      	bne.n	800f58e <__gethex+0x342>
 800f52e:	2f00      	cmp	r7, #0
 800f530:	d004      	beq.n	800f53c <__gethex+0x2f0>
 800f532:	0039      	movs	r1, r7
 800f534:	0028      	movs	r0, r5
 800f536:	f000 fede 	bl	80102f6 <__any_on>
 800f53a:	0004      	movs	r4, r0
 800f53c:	231f      	movs	r3, #31
 800f53e:	117a      	asrs	r2, r7, #5
 800f540:	401f      	ands	r7, r3
 800f542:	3b1e      	subs	r3, #30
 800f544:	40bb      	lsls	r3, r7
 800f546:	9902      	ldr	r1, [sp, #8]
 800f548:	0092      	lsls	r2, r2, #2
 800f54a:	5852      	ldr	r2, [r2, r1]
 800f54c:	421a      	tst	r2, r3
 800f54e:	d001      	beq.n	800f554 <__gethex+0x308>
 800f550:	2302      	movs	r3, #2
 800f552:	431c      	orrs	r4, r3
 800f554:	9b00      	ldr	r3, [sp, #0]
 800f556:	0031      	movs	r1, r6
 800f558:	1b9b      	subs	r3, r3, r6
 800f55a:	2602      	movs	r6, #2
 800f55c:	0028      	movs	r0, r5
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	f7ff fe0c 	bl	800f17c <rshift>
 800f564:	9b01      	ldr	r3, [sp, #4]
 800f566:	685f      	ldr	r7, [r3, #4]
 800f568:	2c00      	cmp	r4, #0
 800f56a:	d03f      	beq.n	800f5ec <__gethex+0x3a0>
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	2b02      	cmp	r3, #2
 800f572:	d010      	beq.n	800f596 <__gethex+0x34a>
 800f574:	2b03      	cmp	r3, #3
 800f576:	d012      	beq.n	800f59e <__gethex+0x352>
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d106      	bne.n	800f58a <__gethex+0x33e>
 800f57c:	07a2      	lsls	r2, r4, #30
 800f57e:	d504      	bpl.n	800f58a <__gethex+0x33e>
 800f580:	9a02      	ldr	r2, [sp, #8]
 800f582:	6812      	ldr	r2, [r2, #0]
 800f584:	4314      	orrs	r4, r2
 800f586:	421c      	tst	r4, r3
 800f588:	d10c      	bne.n	800f5a4 <__gethex+0x358>
 800f58a:	2310      	movs	r3, #16
 800f58c:	e02d      	b.n	800f5ea <__gethex+0x39e>
 800f58e:	2401      	movs	r4, #1
 800f590:	e7d4      	b.n	800f53c <__gethex+0x2f0>
 800f592:	2601      	movs	r6, #1
 800f594:	e7e8      	b.n	800f568 <__gethex+0x31c>
 800f596:	2301      	movs	r3, #1
 800f598:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f59a:	1a9b      	subs	r3, r3, r2
 800f59c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f59e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d0f2      	beq.n	800f58a <__gethex+0x33e>
 800f5a4:	692b      	ldr	r3, [r5, #16]
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	9302      	str	r3, [sp, #8]
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	9304      	str	r3, [sp, #16]
 800f5ae:	002b      	movs	r3, r5
 800f5b0:	9a04      	ldr	r2, [sp, #16]
 800f5b2:	3314      	adds	r3, #20
 800f5b4:	1899      	adds	r1, r3, r2
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	1c54      	adds	r4, r2, #1
 800f5ba:	d01c      	beq.n	800f5f6 <__gethex+0x3aa>
 800f5bc:	3201      	adds	r2, #1
 800f5be:	601a      	str	r2, [r3, #0]
 800f5c0:	002b      	movs	r3, r5
 800f5c2:	3314      	adds	r3, #20
 800f5c4:	2e02      	cmp	r6, #2
 800f5c6:	d13f      	bne.n	800f648 <__gethex+0x3fc>
 800f5c8:	9a01      	ldr	r2, [sp, #4]
 800f5ca:	9900      	ldr	r1, [sp, #0]
 800f5cc:	6812      	ldr	r2, [r2, #0]
 800f5ce:	3a01      	subs	r2, #1
 800f5d0:	428a      	cmp	r2, r1
 800f5d2:	d109      	bne.n	800f5e8 <__gethex+0x39c>
 800f5d4:	000a      	movs	r2, r1
 800f5d6:	201f      	movs	r0, #31
 800f5d8:	4010      	ands	r0, r2
 800f5da:	2201      	movs	r2, #1
 800f5dc:	4082      	lsls	r2, r0
 800f5de:	1149      	asrs	r1, r1, #5
 800f5e0:	0089      	lsls	r1, r1, #2
 800f5e2:	58cb      	ldr	r3, [r1, r3]
 800f5e4:	4213      	tst	r3, r2
 800f5e6:	d13d      	bne.n	800f664 <__gethex+0x418>
 800f5e8:	2320      	movs	r3, #32
 800f5ea:	431e      	orrs	r6, r3
 800f5ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5ee:	601d      	str	r5, [r3, #0]
 800f5f0:	9b07      	ldr	r3, [sp, #28]
 800f5f2:	601f      	str	r7, [r3, #0]
 800f5f4:	e6b4      	b.n	800f360 <__gethex+0x114>
 800f5f6:	c301      	stmia	r3!, {r0}
 800f5f8:	4299      	cmp	r1, r3
 800f5fa:	d8dc      	bhi.n	800f5b6 <__gethex+0x36a>
 800f5fc:	68ab      	ldr	r3, [r5, #8]
 800f5fe:	9a02      	ldr	r2, [sp, #8]
 800f600:	429a      	cmp	r2, r3
 800f602:	db18      	blt.n	800f636 <__gethex+0x3ea>
 800f604:	6869      	ldr	r1, [r5, #4]
 800f606:	9803      	ldr	r0, [sp, #12]
 800f608:	3101      	adds	r1, #1
 800f60a:	f000 f9d5 	bl	800f9b8 <_Balloc>
 800f60e:	1e04      	subs	r4, r0, #0
 800f610:	d104      	bne.n	800f61c <__gethex+0x3d0>
 800f612:	0022      	movs	r2, r4
 800f614:	2184      	movs	r1, #132	@ 0x84
 800f616:	4b1d      	ldr	r3, [pc, #116]	@ (800f68c <__gethex+0x440>)
 800f618:	481d      	ldr	r0, [pc, #116]	@ (800f690 <__gethex+0x444>)
 800f61a:	e6c4      	b.n	800f3a6 <__gethex+0x15a>
 800f61c:	0029      	movs	r1, r5
 800f61e:	692a      	ldr	r2, [r5, #16]
 800f620:	310c      	adds	r1, #12
 800f622:	3202      	adds	r2, #2
 800f624:	0092      	lsls	r2, r2, #2
 800f626:	300c      	adds	r0, #12
 800f628:	f7ff fd4f 	bl	800f0ca <memcpy>
 800f62c:	0029      	movs	r1, r5
 800f62e:	9803      	ldr	r0, [sp, #12]
 800f630:	f000 fa06 	bl	800fa40 <_Bfree>
 800f634:	0025      	movs	r5, r4
 800f636:	692b      	ldr	r3, [r5, #16]
 800f638:	1c5a      	adds	r2, r3, #1
 800f63a:	612a      	str	r2, [r5, #16]
 800f63c:	2201      	movs	r2, #1
 800f63e:	3304      	adds	r3, #4
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	18eb      	adds	r3, r5, r3
 800f644:	605a      	str	r2, [r3, #4]
 800f646:	e7bb      	b.n	800f5c0 <__gethex+0x374>
 800f648:	692a      	ldr	r2, [r5, #16]
 800f64a:	9902      	ldr	r1, [sp, #8]
 800f64c:	428a      	cmp	r2, r1
 800f64e:	dd0b      	ble.n	800f668 <__gethex+0x41c>
 800f650:	2101      	movs	r1, #1
 800f652:	0028      	movs	r0, r5
 800f654:	f7ff fd92 	bl	800f17c <rshift>
 800f658:	9b01      	ldr	r3, [sp, #4]
 800f65a:	3701      	adds	r7, #1
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	42bb      	cmp	r3, r7
 800f660:	da00      	bge.n	800f664 <__gethex+0x418>
 800f662:	e6df      	b.n	800f424 <__gethex+0x1d8>
 800f664:	2601      	movs	r6, #1
 800f666:	e7bf      	b.n	800f5e8 <__gethex+0x39c>
 800f668:	221f      	movs	r2, #31
 800f66a:	9c00      	ldr	r4, [sp, #0]
 800f66c:	9900      	ldr	r1, [sp, #0]
 800f66e:	4014      	ands	r4, r2
 800f670:	4211      	tst	r1, r2
 800f672:	d0f7      	beq.n	800f664 <__gethex+0x418>
 800f674:	9a04      	ldr	r2, [sp, #16]
 800f676:	189b      	adds	r3, r3, r2
 800f678:	3b04      	subs	r3, #4
 800f67a:	6818      	ldr	r0, [r3, #0]
 800f67c:	f000 fa94 	bl	800fba8 <__hi0bits>
 800f680:	2320      	movs	r3, #32
 800f682:	1b1b      	subs	r3, r3, r4
 800f684:	4298      	cmp	r0, r3
 800f686:	dbe3      	blt.n	800f650 <__gethex+0x404>
 800f688:	e7ec      	b.n	800f664 <__gethex+0x418>
 800f68a:	46c0      	nop			@ (mov r8, r8)
 800f68c:	0801c2c2 	.word	0x0801c2c2
 800f690:	0801c2d3 	.word	0x0801c2d3

0800f694 <L_shift>:
 800f694:	2308      	movs	r3, #8
 800f696:	b570      	push	{r4, r5, r6, lr}
 800f698:	2520      	movs	r5, #32
 800f69a:	1a9a      	subs	r2, r3, r2
 800f69c:	0092      	lsls	r2, r2, #2
 800f69e:	1aad      	subs	r5, r5, r2
 800f6a0:	6843      	ldr	r3, [r0, #4]
 800f6a2:	6804      	ldr	r4, [r0, #0]
 800f6a4:	001e      	movs	r6, r3
 800f6a6:	40ae      	lsls	r6, r5
 800f6a8:	40d3      	lsrs	r3, r2
 800f6aa:	4334      	orrs	r4, r6
 800f6ac:	6004      	str	r4, [r0, #0]
 800f6ae:	6043      	str	r3, [r0, #4]
 800f6b0:	3004      	adds	r0, #4
 800f6b2:	4288      	cmp	r0, r1
 800f6b4:	d3f4      	bcc.n	800f6a0 <L_shift+0xc>
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}

0800f6b8 <__match>:
 800f6b8:	b530      	push	{r4, r5, lr}
 800f6ba:	6803      	ldr	r3, [r0, #0]
 800f6bc:	780c      	ldrb	r4, [r1, #0]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	2c00      	cmp	r4, #0
 800f6c2:	d102      	bne.n	800f6ca <__match+0x12>
 800f6c4:	6003      	str	r3, [r0, #0]
 800f6c6:	2001      	movs	r0, #1
 800f6c8:	bd30      	pop	{r4, r5, pc}
 800f6ca:	781a      	ldrb	r2, [r3, #0]
 800f6cc:	0015      	movs	r5, r2
 800f6ce:	3d41      	subs	r5, #65	@ 0x41
 800f6d0:	2d19      	cmp	r5, #25
 800f6d2:	d800      	bhi.n	800f6d6 <__match+0x1e>
 800f6d4:	3220      	adds	r2, #32
 800f6d6:	3101      	adds	r1, #1
 800f6d8:	42a2      	cmp	r2, r4
 800f6da:	d0ef      	beq.n	800f6bc <__match+0x4>
 800f6dc:	2000      	movs	r0, #0
 800f6de:	e7f3      	b.n	800f6c8 <__match+0x10>

0800f6e0 <__hexnan>:
 800f6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6e2:	680b      	ldr	r3, [r1, #0]
 800f6e4:	b08b      	sub	sp, #44	@ 0x2c
 800f6e6:	9201      	str	r2, [sp, #4]
 800f6e8:	9901      	ldr	r1, [sp, #4]
 800f6ea:	115a      	asrs	r2, r3, #5
 800f6ec:	0092      	lsls	r2, r2, #2
 800f6ee:	188a      	adds	r2, r1, r2
 800f6f0:	9202      	str	r2, [sp, #8]
 800f6f2:	0019      	movs	r1, r3
 800f6f4:	221f      	movs	r2, #31
 800f6f6:	4011      	ands	r1, r2
 800f6f8:	9008      	str	r0, [sp, #32]
 800f6fa:	9106      	str	r1, [sp, #24]
 800f6fc:	4213      	tst	r3, r2
 800f6fe:	d002      	beq.n	800f706 <__hexnan+0x26>
 800f700:	9b02      	ldr	r3, [sp, #8]
 800f702:	3304      	adds	r3, #4
 800f704:	9302      	str	r3, [sp, #8]
 800f706:	9b02      	ldr	r3, [sp, #8]
 800f708:	2500      	movs	r5, #0
 800f70a:	1f1f      	subs	r7, r3, #4
 800f70c:	003e      	movs	r6, r7
 800f70e:	003c      	movs	r4, r7
 800f710:	9b08      	ldr	r3, [sp, #32]
 800f712:	603d      	str	r5, [r7, #0]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	9507      	str	r5, [sp, #28]
 800f718:	9305      	str	r3, [sp, #20]
 800f71a:	9503      	str	r5, [sp, #12]
 800f71c:	9b05      	ldr	r3, [sp, #20]
 800f71e:	3301      	adds	r3, #1
 800f720:	9309      	str	r3, [sp, #36]	@ 0x24
 800f722:	9b05      	ldr	r3, [sp, #20]
 800f724:	785b      	ldrb	r3, [r3, #1]
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d028      	beq.n	800f77e <__hexnan+0x9e>
 800f72c:	9804      	ldr	r0, [sp, #16]
 800f72e:	f7ff fd78 	bl	800f222 <__hexdig_fun>
 800f732:	2800      	cmp	r0, #0
 800f734:	d155      	bne.n	800f7e2 <__hexnan+0x102>
 800f736:	9b04      	ldr	r3, [sp, #16]
 800f738:	2b20      	cmp	r3, #32
 800f73a:	d819      	bhi.n	800f770 <__hexnan+0x90>
 800f73c:	9b03      	ldr	r3, [sp, #12]
 800f73e:	9a07      	ldr	r2, [sp, #28]
 800f740:	4293      	cmp	r3, r2
 800f742:	dd12      	ble.n	800f76a <__hexnan+0x8a>
 800f744:	42b4      	cmp	r4, r6
 800f746:	d206      	bcs.n	800f756 <__hexnan+0x76>
 800f748:	2d07      	cmp	r5, #7
 800f74a:	dc04      	bgt.n	800f756 <__hexnan+0x76>
 800f74c:	002a      	movs	r2, r5
 800f74e:	0031      	movs	r1, r6
 800f750:	0020      	movs	r0, r4
 800f752:	f7ff ff9f 	bl	800f694 <L_shift>
 800f756:	9b01      	ldr	r3, [sp, #4]
 800f758:	2508      	movs	r5, #8
 800f75a:	429c      	cmp	r4, r3
 800f75c:	d905      	bls.n	800f76a <__hexnan+0x8a>
 800f75e:	1f26      	subs	r6, r4, #4
 800f760:	2500      	movs	r5, #0
 800f762:	0034      	movs	r4, r6
 800f764:	9b03      	ldr	r3, [sp, #12]
 800f766:	6035      	str	r5, [r6, #0]
 800f768:	9307      	str	r3, [sp, #28]
 800f76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f76c:	9305      	str	r3, [sp, #20]
 800f76e:	e7d5      	b.n	800f71c <__hexnan+0x3c>
 800f770:	9b04      	ldr	r3, [sp, #16]
 800f772:	2b29      	cmp	r3, #41	@ 0x29
 800f774:	d15a      	bne.n	800f82c <__hexnan+0x14c>
 800f776:	9b05      	ldr	r3, [sp, #20]
 800f778:	9a08      	ldr	r2, [sp, #32]
 800f77a:	3302      	adds	r3, #2
 800f77c:	6013      	str	r3, [r2, #0]
 800f77e:	9b03      	ldr	r3, [sp, #12]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d053      	beq.n	800f82c <__hexnan+0x14c>
 800f784:	42b4      	cmp	r4, r6
 800f786:	d206      	bcs.n	800f796 <__hexnan+0xb6>
 800f788:	2d07      	cmp	r5, #7
 800f78a:	dc04      	bgt.n	800f796 <__hexnan+0xb6>
 800f78c:	002a      	movs	r2, r5
 800f78e:	0031      	movs	r1, r6
 800f790:	0020      	movs	r0, r4
 800f792:	f7ff ff7f 	bl	800f694 <L_shift>
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	429c      	cmp	r4, r3
 800f79a:	d936      	bls.n	800f80a <__hexnan+0x12a>
 800f79c:	001a      	movs	r2, r3
 800f79e:	0023      	movs	r3, r4
 800f7a0:	cb02      	ldmia	r3!, {r1}
 800f7a2:	c202      	stmia	r2!, {r1}
 800f7a4:	429f      	cmp	r7, r3
 800f7a6:	d2fb      	bcs.n	800f7a0 <__hexnan+0xc0>
 800f7a8:	9b02      	ldr	r3, [sp, #8]
 800f7aa:	1c62      	adds	r2, r4, #1
 800f7ac:	1ed9      	subs	r1, r3, #3
 800f7ae:	2304      	movs	r3, #4
 800f7b0:	4291      	cmp	r1, r2
 800f7b2:	d305      	bcc.n	800f7c0 <__hexnan+0xe0>
 800f7b4:	9b02      	ldr	r3, [sp, #8]
 800f7b6:	3b04      	subs	r3, #4
 800f7b8:	1b1b      	subs	r3, r3, r4
 800f7ba:	089b      	lsrs	r3, r3, #2
 800f7bc:	3301      	adds	r3, #1
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	9a01      	ldr	r2, [sp, #4]
 800f7c2:	18d3      	adds	r3, r2, r3
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	c304      	stmia	r3!, {r2}
 800f7c8:	429f      	cmp	r7, r3
 800f7ca:	d2fc      	bcs.n	800f7c6 <__hexnan+0xe6>
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d104      	bne.n	800f7dc <__hexnan+0xfc>
 800f7d2:	9b01      	ldr	r3, [sp, #4]
 800f7d4:	429f      	cmp	r7, r3
 800f7d6:	d127      	bne.n	800f828 <__hexnan+0x148>
 800f7d8:	2301      	movs	r3, #1
 800f7da:	603b      	str	r3, [r7, #0]
 800f7dc:	2005      	movs	r0, #5
 800f7de:	b00b      	add	sp, #44	@ 0x2c
 800f7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7e2:	9b03      	ldr	r3, [sp, #12]
 800f7e4:	3501      	adds	r5, #1
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	9303      	str	r3, [sp, #12]
 800f7ea:	2d08      	cmp	r5, #8
 800f7ec:	dd06      	ble.n	800f7fc <__hexnan+0x11c>
 800f7ee:	9b01      	ldr	r3, [sp, #4]
 800f7f0:	429c      	cmp	r4, r3
 800f7f2:	d9ba      	bls.n	800f76a <__hexnan+0x8a>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	2501      	movs	r5, #1
 800f7f8:	3c04      	subs	r4, #4
 800f7fa:	6023      	str	r3, [r4, #0]
 800f7fc:	220f      	movs	r2, #15
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	4010      	ands	r0, r2
 800f802:	011b      	lsls	r3, r3, #4
 800f804:	4303      	orrs	r3, r0
 800f806:	6023      	str	r3, [r4, #0]
 800f808:	e7af      	b.n	800f76a <__hexnan+0x8a>
 800f80a:	9b06      	ldr	r3, [sp, #24]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d0dd      	beq.n	800f7cc <__hexnan+0xec>
 800f810:	2320      	movs	r3, #32
 800f812:	9a06      	ldr	r2, [sp, #24]
 800f814:	9902      	ldr	r1, [sp, #8]
 800f816:	1a9b      	subs	r3, r3, r2
 800f818:	2201      	movs	r2, #1
 800f81a:	4252      	negs	r2, r2
 800f81c:	40da      	lsrs	r2, r3
 800f81e:	3904      	subs	r1, #4
 800f820:	680b      	ldr	r3, [r1, #0]
 800f822:	4013      	ands	r3, r2
 800f824:	600b      	str	r3, [r1, #0]
 800f826:	e7d1      	b.n	800f7cc <__hexnan+0xec>
 800f828:	3f04      	subs	r7, #4
 800f82a:	e7cf      	b.n	800f7cc <__hexnan+0xec>
 800f82c:	2004      	movs	r0, #4
 800f82e:	e7d6      	b.n	800f7de <__hexnan+0xfe>

0800f830 <sbrk_aligned>:
 800f830:	b570      	push	{r4, r5, r6, lr}
 800f832:	4e0f      	ldr	r6, [pc, #60]	@ (800f870 <sbrk_aligned+0x40>)
 800f834:	000d      	movs	r5, r1
 800f836:	6831      	ldr	r1, [r6, #0]
 800f838:	0004      	movs	r4, r0
 800f83a:	2900      	cmp	r1, #0
 800f83c:	d102      	bne.n	800f844 <sbrk_aligned+0x14>
 800f83e:	f001 fb0d 	bl	8010e5c <_sbrk_r>
 800f842:	6030      	str	r0, [r6, #0]
 800f844:	0029      	movs	r1, r5
 800f846:	0020      	movs	r0, r4
 800f848:	f001 fb08 	bl	8010e5c <_sbrk_r>
 800f84c:	1c43      	adds	r3, r0, #1
 800f84e:	d103      	bne.n	800f858 <sbrk_aligned+0x28>
 800f850:	2501      	movs	r5, #1
 800f852:	426d      	negs	r5, r5
 800f854:	0028      	movs	r0, r5
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	2303      	movs	r3, #3
 800f85a:	1cc5      	adds	r5, r0, #3
 800f85c:	439d      	bics	r5, r3
 800f85e:	42a8      	cmp	r0, r5
 800f860:	d0f8      	beq.n	800f854 <sbrk_aligned+0x24>
 800f862:	1a29      	subs	r1, r5, r0
 800f864:	0020      	movs	r0, r4
 800f866:	f001 faf9 	bl	8010e5c <_sbrk_r>
 800f86a:	3001      	adds	r0, #1
 800f86c:	d1f2      	bne.n	800f854 <sbrk_aligned+0x24>
 800f86e:	e7ef      	b.n	800f850 <sbrk_aligned+0x20>
 800f870:	2000163c 	.word	0x2000163c

0800f874 <_malloc_r>:
 800f874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f876:	2203      	movs	r2, #3
 800f878:	1ccb      	adds	r3, r1, #3
 800f87a:	4393      	bics	r3, r2
 800f87c:	3308      	adds	r3, #8
 800f87e:	0005      	movs	r5, r0
 800f880:	001f      	movs	r7, r3
 800f882:	2b0c      	cmp	r3, #12
 800f884:	d234      	bcs.n	800f8f0 <_malloc_r+0x7c>
 800f886:	270c      	movs	r7, #12
 800f888:	42b9      	cmp	r1, r7
 800f88a:	d833      	bhi.n	800f8f4 <_malloc_r+0x80>
 800f88c:	0028      	movs	r0, r5
 800f88e:	f000 f883 	bl	800f998 <__malloc_lock>
 800f892:	4e37      	ldr	r6, [pc, #220]	@ (800f970 <_malloc_r+0xfc>)
 800f894:	6833      	ldr	r3, [r6, #0]
 800f896:	001c      	movs	r4, r3
 800f898:	2c00      	cmp	r4, #0
 800f89a:	d12f      	bne.n	800f8fc <_malloc_r+0x88>
 800f89c:	0039      	movs	r1, r7
 800f89e:	0028      	movs	r0, r5
 800f8a0:	f7ff ffc6 	bl	800f830 <sbrk_aligned>
 800f8a4:	0004      	movs	r4, r0
 800f8a6:	1c43      	adds	r3, r0, #1
 800f8a8:	d15f      	bne.n	800f96a <_malloc_r+0xf6>
 800f8aa:	6834      	ldr	r4, [r6, #0]
 800f8ac:	9400      	str	r4, [sp, #0]
 800f8ae:	9b00      	ldr	r3, [sp, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d14a      	bne.n	800f94a <_malloc_r+0xd6>
 800f8b4:	2c00      	cmp	r4, #0
 800f8b6:	d052      	beq.n	800f95e <_malloc_r+0xea>
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	0028      	movs	r0, r5
 800f8bc:	18e3      	adds	r3, r4, r3
 800f8be:	9900      	ldr	r1, [sp, #0]
 800f8c0:	9301      	str	r3, [sp, #4]
 800f8c2:	f001 facb 	bl	8010e5c <_sbrk_r>
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	4283      	cmp	r3, r0
 800f8ca:	d148      	bne.n	800f95e <_malloc_r+0xea>
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	0028      	movs	r0, r5
 800f8d0:	1aff      	subs	r7, r7, r3
 800f8d2:	0039      	movs	r1, r7
 800f8d4:	f7ff ffac 	bl	800f830 <sbrk_aligned>
 800f8d8:	3001      	adds	r0, #1
 800f8da:	d040      	beq.n	800f95e <_malloc_r+0xea>
 800f8dc:	6823      	ldr	r3, [r4, #0]
 800f8de:	19db      	adds	r3, r3, r7
 800f8e0:	6023      	str	r3, [r4, #0]
 800f8e2:	6833      	ldr	r3, [r6, #0]
 800f8e4:	685a      	ldr	r2, [r3, #4]
 800f8e6:	2a00      	cmp	r2, #0
 800f8e8:	d133      	bne.n	800f952 <_malloc_r+0xde>
 800f8ea:	9b00      	ldr	r3, [sp, #0]
 800f8ec:	6033      	str	r3, [r6, #0]
 800f8ee:	e019      	b.n	800f924 <_malloc_r+0xb0>
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	dac9      	bge.n	800f888 <_malloc_r+0x14>
 800f8f4:	230c      	movs	r3, #12
 800f8f6:	602b      	str	r3, [r5, #0]
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f8fc:	6821      	ldr	r1, [r4, #0]
 800f8fe:	1bc9      	subs	r1, r1, r7
 800f900:	d420      	bmi.n	800f944 <_malloc_r+0xd0>
 800f902:	290b      	cmp	r1, #11
 800f904:	d90a      	bls.n	800f91c <_malloc_r+0xa8>
 800f906:	19e2      	adds	r2, r4, r7
 800f908:	6027      	str	r7, [r4, #0]
 800f90a:	42a3      	cmp	r3, r4
 800f90c:	d104      	bne.n	800f918 <_malloc_r+0xa4>
 800f90e:	6032      	str	r2, [r6, #0]
 800f910:	6863      	ldr	r3, [r4, #4]
 800f912:	6011      	str	r1, [r2, #0]
 800f914:	6053      	str	r3, [r2, #4]
 800f916:	e005      	b.n	800f924 <_malloc_r+0xb0>
 800f918:	605a      	str	r2, [r3, #4]
 800f91a:	e7f9      	b.n	800f910 <_malloc_r+0x9c>
 800f91c:	6862      	ldr	r2, [r4, #4]
 800f91e:	42a3      	cmp	r3, r4
 800f920:	d10e      	bne.n	800f940 <_malloc_r+0xcc>
 800f922:	6032      	str	r2, [r6, #0]
 800f924:	0028      	movs	r0, r5
 800f926:	f000 f83f 	bl	800f9a8 <__malloc_unlock>
 800f92a:	0020      	movs	r0, r4
 800f92c:	2207      	movs	r2, #7
 800f92e:	300b      	adds	r0, #11
 800f930:	1d23      	adds	r3, r4, #4
 800f932:	4390      	bics	r0, r2
 800f934:	1ac2      	subs	r2, r0, r3
 800f936:	4298      	cmp	r0, r3
 800f938:	d0df      	beq.n	800f8fa <_malloc_r+0x86>
 800f93a:	1a1b      	subs	r3, r3, r0
 800f93c:	50a3      	str	r3, [r4, r2]
 800f93e:	e7dc      	b.n	800f8fa <_malloc_r+0x86>
 800f940:	605a      	str	r2, [r3, #4]
 800f942:	e7ef      	b.n	800f924 <_malloc_r+0xb0>
 800f944:	0023      	movs	r3, r4
 800f946:	6864      	ldr	r4, [r4, #4]
 800f948:	e7a6      	b.n	800f898 <_malloc_r+0x24>
 800f94a:	9c00      	ldr	r4, [sp, #0]
 800f94c:	6863      	ldr	r3, [r4, #4]
 800f94e:	9300      	str	r3, [sp, #0]
 800f950:	e7ad      	b.n	800f8ae <_malloc_r+0x3a>
 800f952:	001a      	movs	r2, r3
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	42a3      	cmp	r3, r4
 800f958:	d1fb      	bne.n	800f952 <_malloc_r+0xde>
 800f95a:	2300      	movs	r3, #0
 800f95c:	e7da      	b.n	800f914 <_malloc_r+0xa0>
 800f95e:	230c      	movs	r3, #12
 800f960:	0028      	movs	r0, r5
 800f962:	602b      	str	r3, [r5, #0]
 800f964:	f000 f820 	bl	800f9a8 <__malloc_unlock>
 800f968:	e7c6      	b.n	800f8f8 <_malloc_r+0x84>
 800f96a:	6007      	str	r7, [r0, #0]
 800f96c:	e7da      	b.n	800f924 <_malloc_r+0xb0>
 800f96e:	46c0      	nop			@ (mov r8, r8)
 800f970:	20001640 	.word	0x20001640

0800f974 <__ascii_mbtowc>:
 800f974:	b082      	sub	sp, #8
 800f976:	2900      	cmp	r1, #0
 800f978:	d100      	bne.n	800f97c <__ascii_mbtowc+0x8>
 800f97a:	a901      	add	r1, sp, #4
 800f97c:	1e10      	subs	r0, r2, #0
 800f97e:	d006      	beq.n	800f98e <__ascii_mbtowc+0x1a>
 800f980:	2b00      	cmp	r3, #0
 800f982:	d006      	beq.n	800f992 <__ascii_mbtowc+0x1e>
 800f984:	7813      	ldrb	r3, [r2, #0]
 800f986:	600b      	str	r3, [r1, #0]
 800f988:	7810      	ldrb	r0, [r2, #0]
 800f98a:	1e43      	subs	r3, r0, #1
 800f98c:	4198      	sbcs	r0, r3
 800f98e:	b002      	add	sp, #8
 800f990:	4770      	bx	lr
 800f992:	2002      	movs	r0, #2
 800f994:	4240      	negs	r0, r0
 800f996:	e7fa      	b.n	800f98e <__ascii_mbtowc+0x1a>

0800f998 <__malloc_lock>:
 800f998:	b510      	push	{r4, lr}
 800f99a:	4802      	ldr	r0, [pc, #8]	@ (800f9a4 <__malloc_lock+0xc>)
 800f99c:	f7ff fb93 	bl	800f0c6 <__retarget_lock_acquire_recursive>
 800f9a0:	bd10      	pop	{r4, pc}
 800f9a2:	46c0      	nop			@ (mov r8, r8)
 800f9a4:	20001638 	.word	0x20001638

0800f9a8 <__malloc_unlock>:
 800f9a8:	b510      	push	{r4, lr}
 800f9aa:	4802      	ldr	r0, [pc, #8]	@ (800f9b4 <__malloc_unlock+0xc>)
 800f9ac:	f7ff fb8c 	bl	800f0c8 <__retarget_lock_release_recursive>
 800f9b0:	bd10      	pop	{r4, pc}
 800f9b2:	46c0      	nop			@ (mov r8, r8)
 800f9b4:	20001638 	.word	0x20001638

0800f9b8 <_Balloc>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	69c5      	ldr	r5, [r0, #28]
 800f9bc:	0006      	movs	r6, r0
 800f9be:	000c      	movs	r4, r1
 800f9c0:	2d00      	cmp	r5, #0
 800f9c2:	d10e      	bne.n	800f9e2 <_Balloc+0x2a>
 800f9c4:	2010      	movs	r0, #16
 800f9c6:	f001 fab3 	bl	8010f30 <malloc>
 800f9ca:	1e02      	subs	r2, r0, #0
 800f9cc:	61f0      	str	r0, [r6, #28]
 800f9ce:	d104      	bne.n	800f9da <_Balloc+0x22>
 800f9d0:	216b      	movs	r1, #107	@ 0x6b
 800f9d2:	4b19      	ldr	r3, [pc, #100]	@ (800fa38 <_Balloc+0x80>)
 800f9d4:	4819      	ldr	r0, [pc, #100]	@ (800fa3c <_Balloc+0x84>)
 800f9d6:	f001 fa5f 	bl	8010e98 <__assert_func>
 800f9da:	6045      	str	r5, [r0, #4]
 800f9dc:	6085      	str	r5, [r0, #8]
 800f9de:	6005      	str	r5, [r0, #0]
 800f9e0:	60c5      	str	r5, [r0, #12]
 800f9e2:	69f5      	ldr	r5, [r6, #28]
 800f9e4:	68eb      	ldr	r3, [r5, #12]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d013      	beq.n	800fa12 <_Balloc+0x5a>
 800f9ea:	69f3      	ldr	r3, [r6, #28]
 800f9ec:	00a2      	lsls	r2, r4, #2
 800f9ee:	68db      	ldr	r3, [r3, #12]
 800f9f0:	189b      	adds	r3, r3, r2
 800f9f2:	6818      	ldr	r0, [r3, #0]
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d118      	bne.n	800fa2a <_Balloc+0x72>
 800f9f8:	2101      	movs	r1, #1
 800f9fa:	000d      	movs	r5, r1
 800f9fc:	40a5      	lsls	r5, r4
 800f9fe:	1d6a      	adds	r2, r5, #5
 800fa00:	0030      	movs	r0, r6
 800fa02:	0092      	lsls	r2, r2, #2
 800fa04:	f001 fa66 	bl	8010ed4 <_calloc_r>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d00c      	beq.n	800fa26 <_Balloc+0x6e>
 800fa0c:	6044      	str	r4, [r0, #4]
 800fa0e:	6085      	str	r5, [r0, #8]
 800fa10:	e00d      	b.n	800fa2e <_Balloc+0x76>
 800fa12:	2221      	movs	r2, #33	@ 0x21
 800fa14:	2104      	movs	r1, #4
 800fa16:	0030      	movs	r0, r6
 800fa18:	f001 fa5c 	bl	8010ed4 <_calloc_r>
 800fa1c:	69f3      	ldr	r3, [r6, #28]
 800fa1e:	60e8      	str	r0, [r5, #12]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d1e1      	bne.n	800f9ea <_Balloc+0x32>
 800fa26:	2000      	movs	r0, #0
 800fa28:	bd70      	pop	{r4, r5, r6, pc}
 800fa2a:	6802      	ldr	r2, [r0, #0]
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	6103      	str	r3, [r0, #16]
 800fa32:	60c3      	str	r3, [r0, #12]
 800fa34:	e7f8      	b.n	800fa28 <_Balloc+0x70>
 800fa36:	46c0      	nop			@ (mov r8, r8)
 800fa38:	0801c333 	.word	0x0801c333
 800fa3c:	0801c34a 	.word	0x0801c34a

0800fa40 <_Bfree>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	69c6      	ldr	r6, [r0, #28]
 800fa44:	0005      	movs	r5, r0
 800fa46:	000c      	movs	r4, r1
 800fa48:	2e00      	cmp	r6, #0
 800fa4a:	d10e      	bne.n	800fa6a <_Bfree+0x2a>
 800fa4c:	2010      	movs	r0, #16
 800fa4e:	f001 fa6f 	bl	8010f30 <malloc>
 800fa52:	1e02      	subs	r2, r0, #0
 800fa54:	61e8      	str	r0, [r5, #28]
 800fa56:	d104      	bne.n	800fa62 <_Bfree+0x22>
 800fa58:	218f      	movs	r1, #143	@ 0x8f
 800fa5a:	4b09      	ldr	r3, [pc, #36]	@ (800fa80 <_Bfree+0x40>)
 800fa5c:	4809      	ldr	r0, [pc, #36]	@ (800fa84 <_Bfree+0x44>)
 800fa5e:	f001 fa1b 	bl	8010e98 <__assert_func>
 800fa62:	6046      	str	r6, [r0, #4]
 800fa64:	6086      	str	r6, [r0, #8]
 800fa66:	6006      	str	r6, [r0, #0]
 800fa68:	60c6      	str	r6, [r0, #12]
 800fa6a:	2c00      	cmp	r4, #0
 800fa6c:	d007      	beq.n	800fa7e <_Bfree+0x3e>
 800fa6e:	69eb      	ldr	r3, [r5, #28]
 800fa70:	6862      	ldr	r2, [r4, #4]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	0092      	lsls	r2, r2, #2
 800fa76:	189b      	adds	r3, r3, r2
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	6022      	str	r2, [r4, #0]
 800fa7c:	601c      	str	r4, [r3, #0]
 800fa7e:	bd70      	pop	{r4, r5, r6, pc}
 800fa80:	0801c333 	.word	0x0801c333
 800fa84:	0801c34a 	.word	0x0801c34a

0800fa88 <__multadd>:
 800fa88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa8a:	000f      	movs	r7, r1
 800fa8c:	9001      	str	r0, [sp, #4]
 800fa8e:	000c      	movs	r4, r1
 800fa90:	001e      	movs	r6, r3
 800fa92:	2000      	movs	r0, #0
 800fa94:	690d      	ldr	r5, [r1, #16]
 800fa96:	3714      	adds	r7, #20
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	3001      	adds	r0, #1
 800fa9c:	b299      	uxth	r1, r3
 800fa9e:	4351      	muls	r1, r2
 800faa0:	0c1b      	lsrs	r3, r3, #16
 800faa2:	4353      	muls	r3, r2
 800faa4:	1989      	adds	r1, r1, r6
 800faa6:	0c0e      	lsrs	r6, r1, #16
 800faa8:	199b      	adds	r3, r3, r6
 800faaa:	0c1e      	lsrs	r6, r3, #16
 800faac:	b289      	uxth	r1, r1
 800faae:	041b      	lsls	r3, r3, #16
 800fab0:	185b      	adds	r3, r3, r1
 800fab2:	c708      	stmia	r7!, {r3}
 800fab4:	4285      	cmp	r5, r0
 800fab6:	dcef      	bgt.n	800fa98 <__multadd+0x10>
 800fab8:	2e00      	cmp	r6, #0
 800faba:	d022      	beq.n	800fb02 <__multadd+0x7a>
 800fabc:	68a3      	ldr	r3, [r4, #8]
 800fabe:	42ab      	cmp	r3, r5
 800fac0:	dc19      	bgt.n	800faf6 <__multadd+0x6e>
 800fac2:	6861      	ldr	r1, [r4, #4]
 800fac4:	9801      	ldr	r0, [sp, #4]
 800fac6:	3101      	adds	r1, #1
 800fac8:	f7ff ff76 	bl	800f9b8 <_Balloc>
 800facc:	1e07      	subs	r7, r0, #0
 800face:	d105      	bne.n	800fadc <__multadd+0x54>
 800fad0:	003a      	movs	r2, r7
 800fad2:	21ba      	movs	r1, #186	@ 0xba
 800fad4:	4b0c      	ldr	r3, [pc, #48]	@ (800fb08 <__multadd+0x80>)
 800fad6:	480d      	ldr	r0, [pc, #52]	@ (800fb0c <__multadd+0x84>)
 800fad8:	f001 f9de 	bl	8010e98 <__assert_func>
 800fadc:	0021      	movs	r1, r4
 800fade:	6922      	ldr	r2, [r4, #16]
 800fae0:	310c      	adds	r1, #12
 800fae2:	3202      	adds	r2, #2
 800fae4:	0092      	lsls	r2, r2, #2
 800fae6:	300c      	adds	r0, #12
 800fae8:	f7ff faef 	bl	800f0ca <memcpy>
 800faec:	0021      	movs	r1, r4
 800faee:	9801      	ldr	r0, [sp, #4]
 800faf0:	f7ff ffa6 	bl	800fa40 <_Bfree>
 800faf4:	003c      	movs	r4, r7
 800faf6:	1d2b      	adds	r3, r5, #4
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	18e3      	adds	r3, r4, r3
 800fafc:	3501      	adds	r5, #1
 800fafe:	605e      	str	r6, [r3, #4]
 800fb00:	6125      	str	r5, [r4, #16]
 800fb02:	0020      	movs	r0, r4
 800fb04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb06:	46c0      	nop			@ (mov r8, r8)
 800fb08:	0801c2c2 	.word	0x0801c2c2
 800fb0c:	0801c34a 	.word	0x0801c34a

0800fb10 <__s2b>:
 800fb10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb12:	0007      	movs	r7, r0
 800fb14:	0018      	movs	r0, r3
 800fb16:	000c      	movs	r4, r1
 800fb18:	3008      	adds	r0, #8
 800fb1a:	2109      	movs	r1, #9
 800fb1c:	9301      	str	r3, [sp, #4]
 800fb1e:	0015      	movs	r5, r2
 800fb20:	f7f0 fba2 	bl	8000268 <__divsi3>
 800fb24:	2301      	movs	r3, #1
 800fb26:	2100      	movs	r1, #0
 800fb28:	4283      	cmp	r3, r0
 800fb2a:	db0a      	blt.n	800fb42 <__s2b+0x32>
 800fb2c:	0038      	movs	r0, r7
 800fb2e:	f7ff ff43 	bl	800f9b8 <_Balloc>
 800fb32:	1e01      	subs	r1, r0, #0
 800fb34:	d108      	bne.n	800fb48 <__s2b+0x38>
 800fb36:	000a      	movs	r2, r1
 800fb38:	4b19      	ldr	r3, [pc, #100]	@ (800fba0 <__s2b+0x90>)
 800fb3a:	481a      	ldr	r0, [pc, #104]	@ (800fba4 <__s2b+0x94>)
 800fb3c:	31d3      	adds	r1, #211	@ 0xd3
 800fb3e:	f001 f9ab 	bl	8010e98 <__assert_func>
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	3101      	adds	r1, #1
 800fb46:	e7ef      	b.n	800fb28 <__s2b+0x18>
 800fb48:	9b08      	ldr	r3, [sp, #32]
 800fb4a:	6143      	str	r3, [r0, #20]
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	6103      	str	r3, [r0, #16]
 800fb50:	2d09      	cmp	r5, #9
 800fb52:	dd18      	ble.n	800fb86 <__s2b+0x76>
 800fb54:	0023      	movs	r3, r4
 800fb56:	3309      	adds	r3, #9
 800fb58:	001e      	movs	r6, r3
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	1964      	adds	r4, r4, r5
 800fb5e:	7833      	ldrb	r3, [r6, #0]
 800fb60:	220a      	movs	r2, #10
 800fb62:	0038      	movs	r0, r7
 800fb64:	3b30      	subs	r3, #48	@ 0x30
 800fb66:	f7ff ff8f 	bl	800fa88 <__multadd>
 800fb6a:	3601      	adds	r6, #1
 800fb6c:	0001      	movs	r1, r0
 800fb6e:	42a6      	cmp	r6, r4
 800fb70:	d1f5      	bne.n	800fb5e <__s2b+0x4e>
 800fb72:	002c      	movs	r4, r5
 800fb74:	9b00      	ldr	r3, [sp, #0]
 800fb76:	3c08      	subs	r4, #8
 800fb78:	191c      	adds	r4, r3, r4
 800fb7a:	002e      	movs	r6, r5
 800fb7c:	9b01      	ldr	r3, [sp, #4]
 800fb7e:	429e      	cmp	r6, r3
 800fb80:	db04      	blt.n	800fb8c <__s2b+0x7c>
 800fb82:	0008      	movs	r0, r1
 800fb84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fb86:	2509      	movs	r5, #9
 800fb88:	340a      	adds	r4, #10
 800fb8a:	e7f6      	b.n	800fb7a <__s2b+0x6a>
 800fb8c:	1b63      	subs	r3, r4, r5
 800fb8e:	5d9b      	ldrb	r3, [r3, r6]
 800fb90:	220a      	movs	r2, #10
 800fb92:	0038      	movs	r0, r7
 800fb94:	3b30      	subs	r3, #48	@ 0x30
 800fb96:	f7ff ff77 	bl	800fa88 <__multadd>
 800fb9a:	3601      	adds	r6, #1
 800fb9c:	0001      	movs	r1, r0
 800fb9e:	e7ed      	b.n	800fb7c <__s2b+0x6c>
 800fba0:	0801c2c2 	.word	0x0801c2c2
 800fba4:	0801c34a 	.word	0x0801c34a

0800fba8 <__hi0bits>:
 800fba8:	2280      	movs	r2, #128	@ 0x80
 800fbaa:	0003      	movs	r3, r0
 800fbac:	0252      	lsls	r2, r2, #9
 800fbae:	2000      	movs	r0, #0
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d201      	bcs.n	800fbb8 <__hi0bits+0x10>
 800fbb4:	041b      	lsls	r3, r3, #16
 800fbb6:	3010      	adds	r0, #16
 800fbb8:	2280      	movs	r2, #128	@ 0x80
 800fbba:	0452      	lsls	r2, r2, #17
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d201      	bcs.n	800fbc4 <__hi0bits+0x1c>
 800fbc0:	3008      	adds	r0, #8
 800fbc2:	021b      	lsls	r3, r3, #8
 800fbc4:	2280      	movs	r2, #128	@ 0x80
 800fbc6:	0552      	lsls	r2, r2, #21
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d201      	bcs.n	800fbd0 <__hi0bits+0x28>
 800fbcc:	3004      	adds	r0, #4
 800fbce:	011b      	lsls	r3, r3, #4
 800fbd0:	2280      	movs	r2, #128	@ 0x80
 800fbd2:	05d2      	lsls	r2, r2, #23
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d201      	bcs.n	800fbdc <__hi0bits+0x34>
 800fbd8:	3002      	adds	r0, #2
 800fbda:	009b      	lsls	r3, r3, #2
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	db03      	blt.n	800fbe8 <__hi0bits+0x40>
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	4213      	tst	r3, r2
 800fbe4:	d100      	bne.n	800fbe8 <__hi0bits+0x40>
 800fbe6:	2020      	movs	r0, #32
 800fbe8:	4770      	bx	lr

0800fbea <__lo0bits>:
 800fbea:	6803      	ldr	r3, [r0, #0]
 800fbec:	0001      	movs	r1, r0
 800fbee:	2207      	movs	r2, #7
 800fbf0:	0018      	movs	r0, r3
 800fbf2:	4010      	ands	r0, r2
 800fbf4:	4213      	tst	r3, r2
 800fbf6:	d00d      	beq.n	800fc14 <__lo0bits+0x2a>
 800fbf8:	3a06      	subs	r2, #6
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	4213      	tst	r3, r2
 800fbfe:	d105      	bne.n	800fc0c <__lo0bits+0x22>
 800fc00:	3002      	adds	r0, #2
 800fc02:	4203      	tst	r3, r0
 800fc04:	d003      	beq.n	800fc0e <__lo0bits+0x24>
 800fc06:	40d3      	lsrs	r3, r2
 800fc08:	0010      	movs	r0, r2
 800fc0a:	600b      	str	r3, [r1, #0]
 800fc0c:	4770      	bx	lr
 800fc0e:	089b      	lsrs	r3, r3, #2
 800fc10:	600b      	str	r3, [r1, #0]
 800fc12:	e7fb      	b.n	800fc0c <__lo0bits+0x22>
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	2a00      	cmp	r2, #0
 800fc18:	d101      	bne.n	800fc1e <__lo0bits+0x34>
 800fc1a:	2010      	movs	r0, #16
 800fc1c:	0c1b      	lsrs	r3, r3, #16
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	2a00      	cmp	r2, #0
 800fc22:	d101      	bne.n	800fc28 <__lo0bits+0x3e>
 800fc24:	3008      	adds	r0, #8
 800fc26:	0a1b      	lsrs	r3, r3, #8
 800fc28:	071a      	lsls	r2, r3, #28
 800fc2a:	d101      	bne.n	800fc30 <__lo0bits+0x46>
 800fc2c:	3004      	adds	r0, #4
 800fc2e:	091b      	lsrs	r3, r3, #4
 800fc30:	079a      	lsls	r2, r3, #30
 800fc32:	d101      	bne.n	800fc38 <__lo0bits+0x4e>
 800fc34:	3002      	adds	r0, #2
 800fc36:	089b      	lsrs	r3, r3, #2
 800fc38:	07da      	lsls	r2, r3, #31
 800fc3a:	d4e9      	bmi.n	800fc10 <__lo0bits+0x26>
 800fc3c:	3001      	adds	r0, #1
 800fc3e:	085b      	lsrs	r3, r3, #1
 800fc40:	d1e6      	bne.n	800fc10 <__lo0bits+0x26>
 800fc42:	2020      	movs	r0, #32
 800fc44:	e7e2      	b.n	800fc0c <__lo0bits+0x22>
	...

0800fc48 <__i2b>:
 800fc48:	b510      	push	{r4, lr}
 800fc4a:	000c      	movs	r4, r1
 800fc4c:	2101      	movs	r1, #1
 800fc4e:	f7ff feb3 	bl	800f9b8 <_Balloc>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	d107      	bne.n	800fc66 <__i2b+0x1e>
 800fc56:	2146      	movs	r1, #70	@ 0x46
 800fc58:	4c05      	ldr	r4, [pc, #20]	@ (800fc70 <__i2b+0x28>)
 800fc5a:	0002      	movs	r2, r0
 800fc5c:	4b05      	ldr	r3, [pc, #20]	@ (800fc74 <__i2b+0x2c>)
 800fc5e:	0020      	movs	r0, r4
 800fc60:	31ff      	adds	r1, #255	@ 0xff
 800fc62:	f001 f919 	bl	8010e98 <__assert_func>
 800fc66:	2301      	movs	r3, #1
 800fc68:	6144      	str	r4, [r0, #20]
 800fc6a:	6103      	str	r3, [r0, #16]
 800fc6c:	bd10      	pop	{r4, pc}
 800fc6e:	46c0      	nop			@ (mov r8, r8)
 800fc70:	0801c34a 	.word	0x0801c34a
 800fc74:	0801c2c2 	.word	0x0801c2c2

0800fc78 <__multiply>:
 800fc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc7a:	0014      	movs	r4, r2
 800fc7c:	690a      	ldr	r2, [r1, #16]
 800fc7e:	6923      	ldr	r3, [r4, #16]
 800fc80:	000d      	movs	r5, r1
 800fc82:	b089      	sub	sp, #36	@ 0x24
 800fc84:	429a      	cmp	r2, r3
 800fc86:	db02      	blt.n	800fc8e <__multiply+0x16>
 800fc88:	0023      	movs	r3, r4
 800fc8a:	000c      	movs	r4, r1
 800fc8c:	001d      	movs	r5, r3
 800fc8e:	6927      	ldr	r7, [r4, #16]
 800fc90:	692e      	ldr	r6, [r5, #16]
 800fc92:	6861      	ldr	r1, [r4, #4]
 800fc94:	19bb      	adds	r3, r7, r6
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	68a3      	ldr	r3, [r4, #8]
 800fc9a:	19ba      	adds	r2, r7, r6
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	da00      	bge.n	800fca2 <__multiply+0x2a>
 800fca0:	3101      	adds	r1, #1
 800fca2:	f7ff fe89 	bl	800f9b8 <_Balloc>
 800fca6:	4684      	mov	ip, r0
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d106      	bne.n	800fcba <__multiply+0x42>
 800fcac:	21b1      	movs	r1, #177	@ 0xb1
 800fcae:	4662      	mov	r2, ip
 800fcb0:	4b44      	ldr	r3, [pc, #272]	@ (800fdc4 <__multiply+0x14c>)
 800fcb2:	4845      	ldr	r0, [pc, #276]	@ (800fdc8 <__multiply+0x150>)
 800fcb4:	0049      	lsls	r1, r1, #1
 800fcb6:	f001 f8ef 	bl	8010e98 <__assert_func>
 800fcba:	0002      	movs	r2, r0
 800fcbc:	19bb      	adds	r3, r7, r6
 800fcbe:	3214      	adds	r2, #20
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	18d3      	adds	r3, r2, r3
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	0013      	movs	r3, r2
 800fcca:	9801      	ldr	r0, [sp, #4]
 800fccc:	4283      	cmp	r3, r0
 800fcce:	d328      	bcc.n	800fd22 <__multiply+0xaa>
 800fcd0:	0023      	movs	r3, r4
 800fcd2:	00bf      	lsls	r7, r7, #2
 800fcd4:	3314      	adds	r3, #20
 800fcd6:	9304      	str	r3, [sp, #16]
 800fcd8:	3514      	adds	r5, #20
 800fcda:	19db      	adds	r3, r3, r7
 800fcdc:	00b6      	lsls	r6, r6, #2
 800fcde:	9302      	str	r3, [sp, #8]
 800fce0:	19ab      	adds	r3, r5, r6
 800fce2:	9307      	str	r3, [sp, #28]
 800fce4:	2304      	movs	r3, #4
 800fce6:	9305      	str	r3, [sp, #20]
 800fce8:	0023      	movs	r3, r4
 800fcea:	9902      	ldr	r1, [sp, #8]
 800fcec:	3315      	adds	r3, #21
 800fcee:	4299      	cmp	r1, r3
 800fcf0:	d305      	bcc.n	800fcfe <__multiply+0x86>
 800fcf2:	1b0c      	subs	r4, r1, r4
 800fcf4:	3c15      	subs	r4, #21
 800fcf6:	08a4      	lsrs	r4, r4, #2
 800fcf8:	3401      	adds	r4, #1
 800fcfa:	00a3      	lsls	r3, r4, #2
 800fcfc:	9305      	str	r3, [sp, #20]
 800fcfe:	9b07      	ldr	r3, [sp, #28]
 800fd00:	429d      	cmp	r5, r3
 800fd02:	d310      	bcc.n	800fd26 <__multiply+0xae>
 800fd04:	9b00      	ldr	r3, [sp, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	dd05      	ble.n	800fd16 <__multiply+0x9e>
 800fd0a:	9b01      	ldr	r3, [sp, #4]
 800fd0c:	3b04      	subs	r3, #4
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d052      	beq.n	800fdbc <__multiply+0x144>
 800fd16:	4663      	mov	r3, ip
 800fd18:	4660      	mov	r0, ip
 800fd1a:	9a00      	ldr	r2, [sp, #0]
 800fd1c:	611a      	str	r2, [r3, #16]
 800fd1e:	b009      	add	sp, #36	@ 0x24
 800fd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd22:	c302      	stmia	r3!, {r1}
 800fd24:	e7d1      	b.n	800fcca <__multiply+0x52>
 800fd26:	682c      	ldr	r4, [r5, #0]
 800fd28:	b2a4      	uxth	r4, r4
 800fd2a:	2c00      	cmp	r4, #0
 800fd2c:	d01f      	beq.n	800fd6e <__multiply+0xf6>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	0017      	movs	r7, r2
 800fd32:	9e04      	ldr	r6, [sp, #16]
 800fd34:	9303      	str	r3, [sp, #12]
 800fd36:	ce08      	ldmia	r6!, {r3}
 800fd38:	6839      	ldr	r1, [r7, #0]
 800fd3a:	9306      	str	r3, [sp, #24]
 800fd3c:	466b      	mov	r3, sp
 800fd3e:	8b1b      	ldrh	r3, [r3, #24]
 800fd40:	b288      	uxth	r0, r1
 800fd42:	4363      	muls	r3, r4
 800fd44:	181b      	adds	r3, r3, r0
 800fd46:	9803      	ldr	r0, [sp, #12]
 800fd48:	0c09      	lsrs	r1, r1, #16
 800fd4a:	181b      	adds	r3, r3, r0
 800fd4c:	9806      	ldr	r0, [sp, #24]
 800fd4e:	0c00      	lsrs	r0, r0, #16
 800fd50:	4360      	muls	r0, r4
 800fd52:	1840      	adds	r0, r0, r1
 800fd54:	0c19      	lsrs	r1, r3, #16
 800fd56:	1841      	adds	r1, r0, r1
 800fd58:	0c08      	lsrs	r0, r1, #16
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	0409      	lsls	r1, r1, #16
 800fd5e:	4319      	orrs	r1, r3
 800fd60:	9b02      	ldr	r3, [sp, #8]
 800fd62:	9003      	str	r0, [sp, #12]
 800fd64:	c702      	stmia	r7!, {r1}
 800fd66:	42b3      	cmp	r3, r6
 800fd68:	d8e5      	bhi.n	800fd36 <__multiply+0xbe>
 800fd6a:	9b05      	ldr	r3, [sp, #20]
 800fd6c:	50d0      	str	r0, [r2, r3]
 800fd6e:	682c      	ldr	r4, [r5, #0]
 800fd70:	0c24      	lsrs	r4, r4, #16
 800fd72:	d020      	beq.n	800fdb6 <__multiply+0x13e>
 800fd74:	2100      	movs	r1, #0
 800fd76:	0010      	movs	r0, r2
 800fd78:	6813      	ldr	r3, [r2, #0]
 800fd7a:	9e04      	ldr	r6, [sp, #16]
 800fd7c:	9103      	str	r1, [sp, #12]
 800fd7e:	6831      	ldr	r1, [r6, #0]
 800fd80:	6807      	ldr	r7, [r0, #0]
 800fd82:	b289      	uxth	r1, r1
 800fd84:	4361      	muls	r1, r4
 800fd86:	0c3f      	lsrs	r7, r7, #16
 800fd88:	19c9      	adds	r1, r1, r7
 800fd8a:	9f03      	ldr	r7, [sp, #12]
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	19c9      	adds	r1, r1, r7
 800fd90:	040f      	lsls	r7, r1, #16
 800fd92:	431f      	orrs	r7, r3
 800fd94:	6007      	str	r7, [r0, #0]
 800fd96:	ce80      	ldmia	r6!, {r7}
 800fd98:	6843      	ldr	r3, [r0, #4]
 800fd9a:	0c3f      	lsrs	r7, r7, #16
 800fd9c:	4367      	muls	r7, r4
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	0c09      	lsrs	r1, r1, #16
 800fda2:	18fb      	adds	r3, r7, r3
 800fda4:	185b      	adds	r3, r3, r1
 800fda6:	0c19      	lsrs	r1, r3, #16
 800fda8:	9103      	str	r1, [sp, #12]
 800fdaa:	9902      	ldr	r1, [sp, #8]
 800fdac:	3004      	adds	r0, #4
 800fdae:	42b1      	cmp	r1, r6
 800fdb0:	d8e5      	bhi.n	800fd7e <__multiply+0x106>
 800fdb2:	9905      	ldr	r1, [sp, #20]
 800fdb4:	5053      	str	r3, [r2, r1]
 800fdb6:	3504      	adds	r5, #4
 800fdb8:	3204      	adds	r2, #4
 800fdba:	e7a0      	b.n	800fcfe <__multiply+0x86>
 800fdbc:	9b00      	ldr	r3, [sp, #0]
 800fdbe:	3b01      	subs	r3, #1
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	e79f      	b.n	800fd04 <__multiply+0x8c>
 800fdc4:	0801c2c2 	.word	0x0801c2c2
 800fdc8:	0801c34a 	.word	0x0801c34a

0800fdcc <__pow5mult>:
 800fdcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdce:	2303      	movs	r3, #3
 800fdd0:	0015      	movs	r5, r2
 800fdd2:	0007      	movs	r7, r0
 800fdd4:	000e      	movs	r6, r1
 800fdd6:	401a      	ands	r2, r3
 800fdd8:	421d      	tst	r5, r3
 800fdda:	d008      	beq.n	800fdee <__pow5mult+0x22>
 800fddc:	4925      	ldr	r1, [pc, #148]	@ (800fe74 <__pow5mult+0xa8>)
 800fdde:	3a01      	subs	r2, #1
 800fde0:	0092      	lsls	r2, r2, #2
 800fde2:	5852      	ldr	r2, [r2, r1]
 800fde4:	2300      	movs	r3, #0
 800fde6:	0031      	movs	r1, r6
 800fde8:	f7ff fe4e 	bl	800fa88 <__multadd>
 800fdec:	0006      	movs	r6, r0
 800fdee:	10ad      	asrs	r5, r5, #2
 800fdf0:	d03d      	beq.n	800fe6e <__pow5mult+0xa2>
 800fdf2:	69fc      	ldr	r4, [r7, #28]
 800fdf4:	2c00      	cmp	r4, #0
 800fdf6:	d10f      	bne.n	800fe18 <__pow5mult+0x4c>
 800fdf8:	2010      	movs	r0, #16
 800fdfa:	f001 f899 	bl	8010f30 <malloc>
 800fdfe:	1e02      	subs	r2, r0, #0
 800fe00:	61f8      	str	r0, [r7, #28]
 800fe02:	d105      	bne.n	800fe10 <__pow5mult+0x44>
 800fe04:	21b4      	movs	r1, #180	@ 0xb4
 800fe06:	4b1c      	ldr	r3, [pc, #112]	@ (800fe78 <__pow5mult+0xac>)
 800fe08:	481c      	ldr	r0, [pc, #112]	@ (800fe7c <__pow5mult+0xb0>)
 800fe0a:	31ff      	adds	r1, #255	@ 0xff
 800fe0c:	f001 f844 	bl	8010e98 <__assert_func>
 800fe10:	6044      	str	r4, [r0, #4]
 800fe12:	6084      	str	r4, [r0, #8]
 800fe14:	6004      	str	r4, [r0, #0]
 800fe16:	60c4      	str	r4, [r0, #12]
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	689c      	ldr	r4, [r3, #8]
 800fe1c:	9301      	str	r3, [sp, #4]
 800fe1e:	2c00      	cmp	r4, #0
 800fe20:	d108      	bne.n	800fe34 <__pow5mult+0x68>
 800fe22:	0038      	movs	r0, r7
 800fe24:	4916      	ldr	r1, [pc, #88]	@ (800fe80 <__pow5mult+0xb4>)
 800fe26:	f7ff ff0f 	bl	800fc48 <__i2b>
 800fe2a:	9b01      	ldr	r3, [sp, #4]
 800fe2c:	0004      	movs	r4, r0
 800fe2e:	6098      	str	r0, [r3, #8]
 800fe30:	2300      	movs	r3, #0
 800fe32:	6003      	str	r3, [r0, #0]
 800fe34:	2301      	movs	r3, #1
 800fe36:	421d      	tst	r5, r3
 800fe38:	d00a      	beq.n	800fe50 <__pow5mult+0x84>
 800fe3a:	0031      	movs	r1, r6
 800fe3c:	0022      	movs	r2, r4
 800fe3e:	0038      	movs	r0, r7
 800fe40:	f7ff ff1a 	bl	800fc78 <__multiply>
 800fe44:	0031      	movs	r1, r6
 800fe46:	9001      	str	r0, [sp, #4]
 800fe48:	0038      	movs	r0, r7
 800fe4a:	f7ff fdf9 	bl	800fa40 <_Bfree>
 800fe4e:	9e01      	ldr	r6, [sp, #4]
 800fe50:	106d      	asrs	r5, r5, #1
 800fe52:	d00c      	beq.n	800fe6e <__pow5mult+0xa2>
 800fe54:	6820      	ldr	r0, [r4, #0]
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d107      	bne.n	800fe6a <__pow5mult+0x9e>
 800fe5a:	0022      	movs	r2, r4
 800fe5c:	0021      	movs	r1, r4
 800fe5e:	0038      	movs	r0, r7
 800fe60:	f7ff ff0a 	bl	800fc78 <__multiply>
 800fe64:	2300      	movs	r3, #0
 800fe66:	6020      	str	r0, [r4, #0]
 800fe68:	6003      	str	r3, [r0, #0]
 800fe6a:	0004      	movs	r4, r0
 800fe6c:	e7e2      	b.n	800fe34 <__pow5mult+0x68>
 800fe6e:	0030      	movs	r0, r6
 800fe70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fe72:	46c0      	nop			@ (mov r8, r8)
 800fe74:	0801c56c 	.word	0x0801c56c
 800fe78:	0801c333 	.word	0x0801c333
 800fe7c:	0801c34a 	.word	0x0801c34a
 800fe80:	00000271 	.word	0x00000271

0800fe84 <__lshift>:
 800fe84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe86:	000c      	movs	r4, r1
 800fe88:	0016      	movs	r6, r2
 800fe8a:	6923      	ldr	r3, [r4, #16]
 800fe8c:	1157      	asrs	r7, r2, #5
 800fe8e:	b085      	sub	sp, #20
 800fe90:	18fb      	adds	r3, r7, r3
 800fe92:	9301      	str	r3, [sp, #4]
 800fe94:	3301      	adds	r3, #1
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	6849      	ldr	r1, [r1, #4]
 800fe9a:	68a3      	ldr	r3, [r4, #8]
 800fe9c:	9002      	str	r0, [sp, #8]
 800fe9e:	9a00      	ldr	r2, [sp, #0]
 800fea0:	4293      	cmp	r3, r2
 800fea2:	db10      	blt.n	800fec6 <__lshift+0x42>
 800fea4:	9802      	ldr	r0, [sp, #8]
 800fea6:	f7ff fd87 	bl	800f9b8 <_Balloc>
 800feaa:	2300      	movs	r3, #0
 800feac:	0001      	movs	r1, r0
 800feae:	0005      	movs	r5, r0
 800feb0:	001a      	movs	r2, r3
 800feb2:	3114      	adds	r1, #20
 800feb4:	4298      	cmp	r0, r3
 800feb6:	d10c      	bne.n	800fed2 <__lshift+0x4e>
 800feb8:	21ef      	movs	r1, #239	@ 0xef
 800feba:	002a      	movs	r2, r5
 800febc:	4b25      	ldr	r3, [pc, #148]	@ (800ff54 <__lshift+0xd0>)
 800febe:	4826      	ldr	r0, [pc, #152]	@ (800ff58 <__lshift+0xd4>)
 800fec0:	0049      	lsls	r1, r1, #1
 800fec2:	f000 ffe9 	bl	8010e98 <__assert_func>
 800fec6:	3101      	adds	r1, #1
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	e7e8      	b.n	800fe9e <__lshift+0x1a>
 800fecc:	0098      	lsls	r0, r3, #2
 800fece:	500a      	str	r2, [r1, r0]
 800fed0:	3301      	adds	r3, #1
 800fed2:	42bb      	cmp	r3, r7
 800fed4:	dbfa      	blt.n	800fecc <__lshift+0x48>
 800fed6:	43fb      	mvns	r3, r7
 800fed8:	17db      	asrs	r3, r3, #31
 800feda:	401f      	ands	r7, r3
 800fedc:	00bf      	lsls	r7, r7, #2
 800fede:	0023      	movs	r3, r4
 800fee0:	201f      	movs	r0, #31
 800fee2:	19c9      	adds	r1, r1, r7
 800fee4:	0037      	movs	r7, r6
 800fee6:	6922      	ldr	r2, [r4, #16]
 800fee8:	3314      	adds	r3, #20
 800feea:	0092      	lsls	r2, r2, #2
 800feec:	189a      	adds	r2, r3, r2
 800feee:	4007      	ands	r7, r0
 800fef0:	4206      	tst	r6, r0
 800fef2:	d029      	beq.n	800ff48 <__lshift+0xc4>
 800fef4:	3001      	adds	r0, #1
 800fef6:	1bc0      	subs	r0, r0, r7
 800fef8:	9003      	str	r0, [sp, #12]
 800fefa:	468c      	mov	ip, r1
 800fefc:	2000      	movs	r0, #0
 800fefe:	681e      	ldr	r6, [r3, #0]
 800ff00:	40be      	lsls	r6, r7
 800ff02:	4306      	orrs	r6, r0
 800ff04:	4660      	mov	r0, ip
 800ff06:	c040      	stmia	r0!, {r6}
 800ff08:	4684      	mov	ip, r0
 800ff0a:	9e03      	ldr	r6, [sp, #12]
 800ff0c:	cb01      	ldmia	r3!, {r0}
 800ff0e:	40f0      	lsrs	r0, r6
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d8f4      	bhi.n	800fefe <__lshift+0x7a>
 800ff14:	0026      	movs	r6, r4
 800ff16:	3615      	adds	r6, #21
 800ff18:	2304      	movs	r3, #4
 800ff1a:	42b2      	cmp	r2, r6
 800ff1c:	d304      	bcc.n	800ff28 <__lshift+0xa4>
 800ff1e:	1b13      	subs	r3, r2, r4
 800ff20:	3b15      	subs	r3, #21
 800ff22:	089b      	lsrs	r3, r3, #2
 800ff24:	3301      	adds	r3, #1
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	50c8      	str	r0, [r1, r3]
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d002      	beq.n	800ff34 <__lshift+0xb0>
 800ff2e:	9b01      	ldr	r3, [sp, #4]
 800ff30:	3302      	adds	r3, #2
 800ff32:	9300      	str	r3, [sp, #0]
 800ff34:	9b00      	ldr	r3, [sp, #0]
 800ff36:	9802      	ldr	r0, [sp, #8]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	0021      	movs	r1, r4
 800ff3c:	612b      	str	r3, [r5, #16]
 800ff3e:	f7ff fd7f 	bl	800fa40 <_Bfree>
 800ff42:	0028      	movs	r0, r5
 800ff44:	b005      	add	sp, #20
 800ff46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff48:	cb01      	ldmia	r3!, {r0}
 800ff4a:	c101      	stmia	r1!, {r0}
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d8fb      	bhi.n	800ff48 <__lshift+0xc4>
 800ff50:	e7f0      	b.n	800ff34 <__lshift+0xb0>
 800ff52:	46c0      	nop			@ (mov r8, r8)
 800ff54:	0801c2c2 	.word	0x0801c2c2
 800ff58:	0801c34a 	.word	0x0801c34a

0800ff5c <__mcmp>:
 800ff5c:	b530      	push	{r4, r5, lr}
 800ff5e:	690b      	ldr	r3, [r1, #16]
 800ff60:	6904      	ldr	r4, [r0, #16]
 800ff62:	0002      	movs	r2, r0
 800ff64:	1ae0      	subs	r0, r4, r3
 800ff66:	429c      	cmp	r4, r3
 800ff68:	d10f      	bne.n	800ff8a <__mcmp+0x2e>
 800ff6a:	3214      	adds	r2, #20
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	3114      	adds	r1, #20
 800ff70:	0014      	movs	r4, r2
 800ff72:	18c9      	adds	r1, r1, r3
 800ff74:	18d2      	adds	r2, r2, r3
 800ff76:	3a04      	subs	r2, #4
 800ff78:	3904      	subs	r1, #4
 800ff7a:	6815      	ldr	r5, [r2, #0]
 800ff7c:	680b      	ldr	r3, [r1, #0]
 800ff7e:	429d      	cmp	r5, r3
 800ff80:	d004      	beq.n	800ff8c <__mcmp+0x30>
 800ff82:	2001      	movs	r0, #1
 800ff84:	429d      	cmp	r5, r3
 800ff86:	d200      	bcs.n	800ff8a <__mcmp+0x2e>
 800ff88:	3802      	subs	r0, #2
 800ff8a:	bd30      	pop	{r4, r5, pc}
 800ff8c:	4294      	cmp	r4, r2
 800ff8e:	d3f2      	bcc.n	800ff76 <__mcmp+0x1a>
 800ff90:	e7fb      	b.n	800ff8a <__mcmp+0x2e>
	...

0800ff94 <__mdiff>:
 800ff94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff96:	000c      	movs	r4, r1
 800ff98:	b087      	sub	sp, #28
 800ff9a:	9000      	str	r0, [sp, #0]
 800ff9c:	0011      	movs	r1, r2
 800ff9e:	0020      	movs	r0, r4
 800ffa0:	0017      	movs	r7, r2
 800ffa2:	f7ff ffdb 	bl	800ff5c <__mcmp>
 800ffa6:	1e05      	subs	r5, r0, #0
 800ffa8:	d110      	bne.n	800ffcc <__mdiff+0x38>
 800ffaa:	0001      	movs	r1, r0
 800ffac:	9800      	ldr	r0, [sp, #0]
 800ffae:	f7ff fd03 	bl	800f9b8 <_Balloc>
 800ffb2:	1e02      	subs	r2, r0, #0
 800ffb4:	d104      	bne.n	800ffc0 <__mdiff+0x2c>
 800ffb6:	4b40      	ldr	r3, [pc, #256]	@ (80100b8 <__mdiff+0x124>)
 800ffb8:	4840      	ldr	r0, [pc, #256]	@ (80100bc <__mdiff+0x128>)
 800ffba:	4941      	ldr	r1, [pc, #260]	@ (80100c0 <__mdiff+0x12c>)
 800ffbc:	f000 ff6c 	bl	8010e98 <__assert_func>
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	6145      	str	r5, [r0, #20]
 800ffc4:	6103      	str	r3, [r0, #16]
 800ffc6:	0010      	movs	r0, r2
 800ffc8:	b007      	add	sp, #28
 800ffca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffcc:	2600      	movs	r6, #0
 800ffce:	42b0      	cmp	r0, r6
 800ffd0:	da03      	bge.n	800ffda <__mdiff+0x46>
 800ffd2:	0023      	movs	r3, r4
 800ffd4:	003c      	movs	r4, r7
 800ffd6:	001f      	movs	r7, r3
 800ffd8:	3601      	adds	r6, #1
 800ffda:	6861      	ldr	r1, [r4, #4]
 800ffdc:	9800      	ldr	r0, [sp, #0]
 800ffde:	f7ff fceb 	bl	800f9b8 <_Balloc>
 800ffe2:	1e02      	subs	r2, r0, #0
 800ffe4:	d103      	bne.n	800ffee <__mdiff+0x5a>
 800ffe6:	4b34      	ldr	r3, [pc, #208]	@ (80100b8 <__mdiff+0x124>)
 800ffe8:	4834      	ldr	r0, [pc, #208]	@ (80100bc <__mdiff+0x128>)
 800ffea:	4936      	ldr	r1, [pc, #216]	@ (80100c4 <__mdiff+0x130>)
 800ffec:	e7e6      	b.n	800ffbc <__mdiff+0x28>
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	3414      	adds	r4, #20
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	009b      	lsls	r3, r3, #2
 800fff6:	18e3      	adds	r3, r4, r3
 800fff8:	0021      	movs	r1, r4
 800fffa:	9401      	str	r4, [sp, #4]
 800fffc:	003c      	movs	r4, r7
 800fffe:	9302      	str	r3, [sp, #8]
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	3414      	adds	r4, #20
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	18e3      	adds	r3, r4, r3
 8010008:	9303      	str	r3, [sp, #12]
 801000a:	0003      	movs	r3, r0
 801000c:	60c6      	str	r6, [r0, #12]
 801000e:	468c      	mov	ip, r1
 8010010:	2000      	movs	r0, #0
 8010012:	3314      	adds	r3, #20
 8010014:	9304      	str	r3, [sp, #16]
 8010016:	9305      	str	r3, [sp, #20]
 8010018:	4663      	mov	r3, ip
 801001a:	cb20      	ldmia	r3!, {r5}
 801001c:	b2a9      	uxth	r1, r5
 801001e:	000e      	movs	r6, r1
 8010020:	469c      	mov	ip, r3
 8010022:	cc08      	ldmia	r4!, {r3}
 8010024:	0c2d      	lsrs	r5, r5, #16
 8010026:	b299      	uxth	r1, r3
 8010028:	1a71      	subs	r1, r6, r1
 801002a:	1809      	adds	r1, r1, r0
 801002c:	0c1b      	lsrs	r3, r3, #16
 801002e:	1408      	asrs	r0, r1, #16
 8010030:	1aeb      	subs	r3, r5, r3
 8010032:	181b      	adds	r3, r3, r0
 8010034:	1418      	asrs	r0, r3, #16
 8010036:	b289      	uxth	r1, r1
 8010038:	041b      	lsls	r3, r3, #16
 801003a:	4319      	orrs	r1, r3
 801003c:	9b05      	ldr	r3, [sp, #20]
 801003e:	c302      	stmia	r3!, {r1}
 8010040:	9305      	str	r3, [sp, #20]
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	42a3      	cmp	r3, r4
 8010046:	d8e7      	bhi.n	8010018 <__mdiff+0x84>
 8010048:	0039      	movs	r1, r7
 801004a:	9c03      	ldr	r4, [sp, #12]
 801004c:	3115      	adds	r1, #21
 801004e:	2304      	movs	r3, #4
 8010050:	428c      	cmp	r4, r1
 8010052:	d304      	bcc.n	801005e <__mdiff+0xca>
 8010054:	1be3      	subs	r3, r4, r7
 8010056:	3b15      	subs	r3, #21
 8010058:	089b      	lsrs	r3, r3, #2
 801005a:	3301      	adds	r3, #1
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	9901      	ldr	r1, [sp, #4]
 8010060:	18cd      	adds	r5, r1, r3
 8010062:	9904      	ldr	r1, [sp, #16]
 8010064:	002e      	movs	r6, r5
 8010066:	18cb      	adds	r3, r1, r3
 8010068:	001f      	movs	r7, r3
 801006a:	9902      	ldr	r1, [sp, #8]
 801006c:	428e      	cmp	r6, r1
 801006e:	d311      	bcc.n	8010094 <__mdiff+0x100>
 8010070:	9c02      	ldr	r4, [sp, #8]
 8010072:	1ee9      	subs	r1, r5, #3
 8010074:	2000      	movs	r0, #0
 8010076:	428c      	cmp	r4, r1
 8010078:	d304      	bcc.n	8010084 <__mdiff+0xf0>
 801007a:	0021      	movs	r1, r4
 801007c:	3103      	adds	r1, #3
 801007e:	1b49      	subs	r1, r1, r5
 8010080:	0889      	lsrs	r1, r1, #2
 8010082:	0088      	lsls	r0, r1, #2
 8010084:	181b      	adds	r3, r3, r0
 8010086:	3b04      	subs	r3, #4
 8010088:	6819      	ldr	r1, [r3, #0]
 801008a:	2900      	cmp	r1, #0
 801008c:	d010      	beq.n	80100b0 <__mdiff+0x11c>
 801008e:	9b00      	ldr	r3, [sp, #0]
 8010090:	6113      	str	r3, [r2, #16]
 8010092:	e798      	b.n	800ffc6 <__mdiff+0x32>
 8010094:	4684      	mov	ip, r0
 8010096:	ce02      	ldmia	r6!, {r1}
 8010098:	b288      	uxth	r0, r1
 801009a:	4460      	add	r0, ip
 801009c:	1400      	asrs	r0, r0, #16
 801009e:	0c0c      	lsrs	r4, r1, #16
 80100a0:	1904      	adds	r4, r0, r4
 80100a2:	4461      	add	r1, ip
 80100a4:	1420      	asrs	r0, r4, #16
 80100a6:	b289      	uxth	r1, r1
 80100a8:	0424      	lsls	r4, r4, #16
 80100aa:	4321      	orrs	r1, r4
 80100ac:	c702      	stmia	r7!, {r1}
 80100ae:	e7dc      	b.n	801006a <__mdiff+0xd6>
 80100b0:	9900      	ldr	r1, [sp, #0]
 80100b2:	3901      	subs	r1, #1
 80100b4:	9100      	str	r1, [sp, #0]
 80100b6:	e7e6      	b.n	8010086 <__mdiff+0xf2>
 80100b8:	0801c2c2 	.word	0x0801c2c2
 80100bc:	0801c34a 	.word	0x0801c34a
 80100c0:	00000237 	.word	0x00000237
 80100c4:	00000245 	.word	0x00000245

080100c8 <__ulp>:
 80100c8:	b510      	push	{r4, lr}
 80100ca:	2400      	movs	r4, #0
 80100cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010100 <__ulp+0x38>)
 80100ce:	4a0d      	ldr	r2, [pc, #52]	@ (8010104 <__ulp+0x3c>)
 80100d0:	400b      	ands	r3, r1
 80100d2:	189b      	adds	r3, r3, r2
 80100d4:	42a3      	cmp	r3, r4
 80100d6:	dc06      	bgt.n	80100e6 <__ulp+0x1e>
 80100d8:	425b      	negs	r3, r3
 80100da:	151a      	asrs	r2, r3, #20
 80100dc:	2a13      	cmp	r2, #19
 80100de:	dc05      	bgt.n	80100ec <__ulp+0x24>
 80100e0:	2380      	movs	r3, #128	@ 0x80
 80100e2:	031b      	lsls	r3, r3, #12
 80100e4:	4113      	asrs	r3, r2
 80100e6:	0019      	movs	r1, r3
 80100e8:	0020      	movs	r0, r4
 80100ea:	bd10      	pop	{r4, pc}
 80100ec:	3a14      	subs	r2, #20
 80100ee:	2401      	movs	r4, #1
 80100f0:	2a1e      	cmp	r2, #30
 80100f2:	dc02      	bgt.n	80100fa <__ulp+0x32>
 80100f4:	2480      	movs	r4, #128	@ 0x80
 80100f6:	0624      	lsls	r4, r4, #24
 80100f8:	40d4      	lsrs	r4, r2
 80100fa:	2300      	movs	r3, #0
 80100fc:	e7f3      	b.n	80100e6 <__ulp+0x1e>
 80100fe:	46c0      	nop			@ (mov r8, r8)
 8010100:	7ff00000 	.word	0x7ff00000
 8010104:	fcc00000 	.word	0xfcc00000

08010108 <__b2d>:
 8010108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801010a:	0006      	movs	r6, r0
 801010c:	6903      	ldr	r3, [r0, #16]
 801010e:	3614      	adds	r6, #20
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	18f3      	adds	r3, r6, r3
 8010114:	1f1d      	subs	r5, r3, #4
 8010116:	682c      	ldr	r4, [r5, #0]
 8010118:	000f      	movs	r7, r1
 801011a:	0020      	movs	r0, r4
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	f7ff fd43 	bl	800fba8 <__hi0bits>
 8010122:	2220      	movs	r2, #32
 8010124:	1a12      	subs	r2, r2, r0
 8010126:	603a      	str	r2, [r7, #0]
 8010128:	0003      	movs	r3, r0
 801012a:	4a1c      	ldr	r2, [pc, #112]	@ (801019c <__b2d+0x94>)
 801012c:	280a      	cmp	r0, #10
 801012e:	dc15      	bgt.n	801015c <__b2d+0x54>
 8010130:	210b      	movs	r1, #11
 8010132:	0027      	movs	r7, r4
 8010134:	1a09      	subs	r1, r1, r0
 8010136:	40cf      	lsrs	r7, r1
 8010138:	433a      	orrs	r2, r7
 801013a:	468c      	mov	ip, r1
 801013c:	0011      	movs	r1, r2
 801013e:	2200      	movs	r2, #0
 8010140:	42ae      	cmp	r6, r5
 8010142:	d202      	bcs.n	801014a <__b2d+0x42>
 8010144:	9a01      	ldr	r2, [sp, #4]
 8010146:	3a08      	subs	r2, #8
 8010148:	6812      	ldr	r2, [r2, #0]
 801014a:	3315      	adds	r3, #21
 801014c:	409c      	lsls	r4, r3
 801014e:	4663      	mov	r3, ip
 8010150:	0027      	movs	r7, r4
 8010152:	40da      	lsrs	r2, r3
 8010154:	4317      	orrs	r7, r2
 8010156:	0038      	movs	r0, r7
 8010158:	b003      	add	sp, #12
 801015a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015c:	2700      	movs	r7, #0
 801015e:	42ae      	cmp	r6, r5
 8010160:	d202      	bcs.n	8010168 <__b2d+0x60>
 8010162:	9d01      	ldr	r5, [sp, #4]
 8010164:	3d08      	subs	r5, #8
 8010166:	682f      	ldr	r7, [r5, #0]
 8010168:	210b      	movs	r1, #11
 801016a:	4249      	negs	r1, r1
 801016c:	468c      	mov	ip, r1
 801016e:	449c      	add	ip, r3
 8010170:	2b0b      	cmp	r3, #11
 8010172:	d010      	beq.n	8010196 <__b2d+0x8e>
 8010174:	4661      	mov	r1, ip
 8010176:	2320      	movs	r3, #32
 8010178:	408c      	lsls	r4, r1
 801017a:	1a5b      	subs	r3, r3, r1
 801017c:	0039      	movs	r1, r7
 801017e:	40d9      	lsrs	r1, r3
 8010180:	430c      	orrs	r4, r1
 8010182:	4322      	orrs	r2, r4
 8010184:	0011      	movs	r1, r2
 8010186:	2200      	movs	r2, #0
 8010188:	42b5      	cmp	r5, r6
 801018a:	d901      	bls.n	8010190 <__b2d+0x88>
 801018c:	3d04      	subs	r5, #4
 801018e:	682a      	ldr	r2, [r5, #0]
 8010190:	4664      	mov	r4, ip
 8010192:	40a7      	lsls	r7, r4
 8010194:	e7dd      	b.n	8010152 <__b2d+0x4a>
 8010196:	4322      	orrs	r2, r4
 8010198:	0011      	movs	r1, r2
 801019a:	e7dc      	b.n	8010156 <__b2d+0x4e>
 801019c:	3ff00000 	.word	0x3ff00000

080101a0 <__d2b>:
 80101a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101a2:	2101      	movs	r1, #1
 80101a4:	0016      	movs	r6, r2
 80101a6:	001f      	movs	r7, r3
 80101a8:	f7ff fc06 	bl	800f9b8 <_Balloc>
 80101ac:	1e04      	subs	r4, r0, #0
 80101ae:	d105      	bne.n	80101bc <__d2b+0x1c>
 80101b0:	0022      	movs	r2, r4
 80101b2:	4b25      	ldr	r3, [pc, #148]	@ (8010248 <__d2b+0xa8>)
 80101b4:	4825      	ldr	r0, [pc, #148]	@ (801024c <__d2b+0xac>)
 80101b6:	4926      	ldr	r1, [pc, #152]	@ (8010250 <__d2b+0xb0>)
 80101b8:	f000 fe6e 	bl	8010e98 <__assert_func>
 80101bc:	033b      	lsls	r3, r7, #12
 80101be:	007d      	lsls	r5, r7, #1
 80101c0:	0b1b      	lsrs	r3, r3, #12
 80101c2:	0d6d      	lsrs	r5, r5, #21
 80101c4:	d002      	beq.n	80101cc <__d2b+0x2c>
 80101c6:	2280      	movs	r2, #128	@ 0x80
 80101c8:	0352      	lsls	r2, r2, #13
 80101ca:	4313      	orrs	r3, r2
 80101cc:	9301      	str	r3, [sp, #4]
 80101ce:	2e00      	cmp	r6, #0
 80101d0:	d025      	beq.n	801021e <__d2b+0x7e>
 80101d2:	4668      	mov	r0, sp
 80101d4:	9600      	str	r6, [sp, #0]
 80101d6:	f7ff fd08 	bl	800fbea <__lo0bits>
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	9900      	ldr	r1, [sp, #0]
 80101de:	2800      	cmp	r0, #0
 80101e0:	d01b      	beq.n	801021a <__d2b+0x7a>
 80101e2:	2220      	movs	r2, #32
 80101e4:	001e      	movs	r6, r3
 80101e6:	1a12      	subs	r2, r2, r0
 80101e8:	4096      	lsls	r6, r2
 80101ea:	0032      	movs	r2, r6
 80101ec:	40c3      	lsrs	r3, r0
 80101ee:	430a      	orrs	r2, r1
 80101f0:	6162      	str	r2, [r4, #20]
 80101f2:	9301      	str	r3, [sp, #4]
 80101f4:	9e01      	ldr	r6, [sp, #4]
 80101f6:	61a6      	str	r6, [r4, #24]
 80101f8:	1e73      	subs	r3, r6, #1
 80101fa:	419e      	sbcs	r6, r3
 80101fc:	3601      	adds	r6, #1
 80101fe:	6126      	str	r6, [r4, #16]
 8010200:	2d00      	cmp	r5, #0
 8010202:	d014      	beq.n	801022e <__d2b+0x8e>
 8010204:	2635      	movs	r6, #53	@ 0x35
 8010206:	4b13      	ldr	r3, [pc, #76]	@ (8010254 <__d2b+0xb4>)
 8010208:	18ed      	adds	r5, r5, r3
 801020a:	9b08      	ldr	r3, [sp, #32]
 801020c:	182d      	adds	r5, r5, r0
 801020e:	601d      	str	r5, [r3, #0]
 8010210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010212:	1a36      	subs	r6, r6, r0
 8010214:	601e      	str	r6, [r3, #0]
 8010216:	0020      	movs	r0, r4
 8010218:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801021a:	6161      	str	r1, [r4, #20]
 801021c:	e7ea      	b.n	80101f4 <__d2b+0x54>
 801021e:	a801      	add	r0, sp, #4
 8010220:	f7ff fce3 	bl	800fbea <__lo0bits>
 8010224:	9b01      	ldr	r3, [sp, #4]
 8010226:	2601      	movs	r6, #1
 8010228:	6163      	str	r3, [r4, #20]
 801022a:	3020      	adds	r0, #32
 801022c:	e7e7      	b.n	80101fe <__d2b+0x5e>
 801022e:	4b0a      	ldr	r3, [pc, #40]	@ (8010258 <__d2b+0xb8>)
 8010230:	18c0      	adds	r0, r0, r3
 8010232:	9b08      	ldr	r3, [sp, #32]
 8010234:	6018      	str	r0, [r3, #0]
 8010236:	4b09      	ldr	r3, [pc, #36]	@ (801025c <__d2b+0xbc>)
 8010238:	18f3      	adds	r3, r6, r3
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	18e3      	adds	r3, r4, r3
 801023e:	6958      	ldr	r0, [r3, #20]
 8010240:	f7ff fcb2 	bl	800fba8 <__hi0bits>
 8010244:	0176      	lsls	r6, r6, #5
 8010246:	e7e3      	b.n	8010210 <__d2b+0x70>
 8010248:	0801c2c2 	.word	0x0801c2c2
 801024c:	0801c34a 	.word	0x0801c34a
 8010250:	0000030f 	.word	0x0000030f
 8010254:	fffffbcd 	.word	0xfffffbcd
 8010258:	fffffbce 	.word	0xfffffbce
 801025c:	3fffffff 	.word	0x3fffffff

08010260 <__ratio>:
 8010260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010262:	b087      	sub	sp, #28
 8010264:	000f      	movs	r7, r1
 8010266:	a904      	add	r1, sp, #16
 8010268:	0006      	movs	r6, r0
 801026a:	f7ff ff4d 	bl	8010108 <__b2d>
 801026e:	9000      	str	r0, [sp, #0]
 8010270:	9101      	str	r1, [sp, #4]
 8010272:	9b00      	ldr	r3, [sp, #0]
 8010274:	9c01      	ldr	r4, [sp, #4]
 8010276:	0038      	movs	r0, r7
 8010278:	a905      	add	r1, sp, #20
 801027a:	9302      	str	r3, [sp, #8]
 801027c:	9403      	str	r4, [sp, #12]
 801027e:	f7ff ff43 	bl	8010108 <__b2d>
 8010282:	000d      	movs	r5, r1
 8010284:	0002      	movs	r2, r0
 8010286:	000b      	movs	r3, r1
 8010288:	6930      	ldr	r0, [r6, #16]
 801028a:	6939      	ldr	r1, [r7, #16]
 801028c:	9e04      	ldr	r6, [sp, #16]
 801028e:	1a40      	subs	r0, r0, r1
 8010290:	9905      	ldr	r1, [sp, #20]
 8010292:	0140      	lsls	r0, r0, #5
 8010294:	1a71      	subs	r1, r6, r1
 8010296:	1841      	adds	r1, r0, r1
 8010298:	0508      	lsls	r0, r1, #20
 801029a:	2900      	cmp	r1, #0
 801029c:	dd08      	ble.n	80102b0 <__ratio+0x50>
 801029e:	9901      	ldr	r1, [sp, #4]
 80102a0:	1841      	adds	r1, r0, r1
 80102a2:	9103      	str	r1, [sp, #12]
 80102a4:	9802      	ldr	r0, [sp, #8]
 80102a6:	9903      	ldr	r1, [sp, #12]
 80102a8:	f7f1 ff12 	bl	80020d0 <__aeabi_ddiv>
 80102ac:	b007      	add	sp, #28
 80102ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b0:	1a2b      	subs	r3, r5, r0
 80102b2:	e7f7      	b.n	80102a4 <__ratio+0x44>

080102b4 <__copybits>:
 80102b4:	b570      	push	{r4, r5, r6, lr}
 80102b6:	0014      	movs	r4, r2
 80102b8:	0005      	movs	r5, r0
 80102ba:	3901      	subs	r1, #1
 80102bc:	6913      	ldr	r3, [r2, #16]
 80102be:	1149      	asrs	r1, r1, #5
 80102c0:	3101      	adds	r1, #1
 80102c2:	0089      	lsls	r1, r1, #2
 80102c4:	3414      	adds	r4, #20
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	1841      	adds	r1, r0, r1
 80102ca:	18e3      	adds	r3, r4, r3
 80102cc:	42a3      	cmp	r3, r4
 80102ce:	d80d      	bhi.n	80102ec <__copybits+0x38>
 80102d0:	0014      	movs	r4, r2
 80102d2:	3411      	adds	r4, #17
 80102d4:	2500      	movs	r5, #0
 80102d6:	42a3      	cmp	r3, r4
 80102d8:	d303      	bcc.n	80102e2 <__copybits+0x2e>
 80102da:	1a9b      	subs	r3, r3, r2
 80102dc:	3b11      	subs	r3, #17
 80102de:	089b      	lsrs	r3, r3, #2
 80102e0:	009d      	lsls	r5, r3, #2
 80102e2:	2300      	movs	r3, #0
 80102e4:	1940      	adds	r0, r0, r5
 80102e6:	4281      	cmp	r1, r0
 80102e8:	d803      	bhi.n	80102f2 <__copybits+0x3e>
 80102ea:	bd70      	pop	{r4, r5, r6, pc}
 80102ec:	cc40      	ldmia	r4!, {r6}
 80102ee:	c540      	stmia	r5!, {r6}
 80102f0:	e7ec      	b.n	80102cc <__copybits+0x18>
 80102f2:	c008      	stmia	r0!, {r3}
 80102f4:	e7f7      	b.n	80102e6 <__copybits+0x32>

080102f6 <__any_on>:
 80102f6:	0002      	movs	r2, r0
 80102f8:	6900      	ldr	r0, [r0, #16]
 80102fa:	b510      	push	{r4, lr}
 80102fc:	3214      	adds	r2, #20
 80102fe:	114b      	asrs	r3, r1, #5
 8010300:	4298      	cmp	r0, r3
 8010302:	db13      	blt.n	801032c <__any_on+0x36>
 8010304:	dd0c      	ble.n	8010320 <__any_on+0x2a>
 8010306:	241f      	movs	r4, #31
 8010308:	0008      	movs	r0, r1
 801030a:	4020      	ands	r0, r4
 801030c:	4221      	tst	r1, r4
 801030e:	d007      	beq.n	8010320 <__any_on+0x2a>
 8010310:	0099      	lsls	r1, r3, #2
 8010312:	588c      	ldr	r4, [r1, r2]
 8010314:	0021      	movs	r1, r4
 8010316:	40c1      	lsrs	r1, r0
 8010318:	4081      	lsls	r1, r0
 801031a:	2001      	movs	r0, #1
 801031c:	428c      	cmp	r4, r1
 801031e:	d104      	bne.n	801032a <__any_on+0x34>
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	18d3      	adds	r3, r2, r3
 8010324:	4293      	cmp	r3, r2
 8010326:	d803      	bhi.n	8010330 <__any_on+0x3a>
 8010328:	2000      	movs	r0, #0
 801032a:	bd10      	pop	{r4, pc}
 801032c:	0003      	movs	r3, r0
 801032e:	e7f7      	b.n	8010320 <__any_on+0x2a>
 8010330:	3b04      	subs	r3, #4
 8010332:	6819      	ldr	r1, [r3, #0]
 8010334:	2900      	cmp	r1, #0
 8010336:	d0f5      	beq.n	8010324 <__any_on+0x2e>
 8010338:	2001      	movs	r0, #1
 801033a:	e7f6      	b.n	801032a <__any_on+0x34>

0801033c <__ascii_wctomb>:
 801033c:	0003      	movs	r3, r0
 801033e:	1e08      	subs	r0, r1, #0
 8010340:	d005      	beq.n	801034e <__ascii_wctomb+0x12>
 8010342:	2aff      	cmp	r2, #255	@ 0xff
 8010344:	d904      	bls.n	8010350 <__ascii_wctomb+0x14>
 8010346:	228a      	movs	r2, #138	@ 0x8a
 8010348:	2001      	movs	r0, #1
 801034a:	601a      	str	r2, [r3, #0]
 801034c:	4240      	negs	r0, r0
 801034e:	4770      	bx	lr
 8010350:	2001      	movs	r0, #1
 8010352:	700a      	strb	r2, [r1, #0]
 8010354:	e7fb      	b.n	801034e <__ascii_wctomb+0x12>
	...

08010358 <__ssputs_r>:
 8010358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801035a:	688e      	ldr	r6, [r1, #8]
 801035c:	b085      	sub	sp, #20
 801035e:	001f      	movs	r7, r3
 8010360:	000c      	movs	r4, r1
 8010362:	680b      	ldr	r3, [r1, #0]
 8010364:	9002      	str	r0, [sp, #8]
 8010366:	9203      	str	r2, [sp, #12]
 8010368:	42be      	cmp	r6, r7
 801036a:	d830      	bhi.n	80103ce <__ssputs_r+0x76>
 801036c:	210c      	movs	r1, #12
 801036e:	5e62      	ldrsh	r2, [r4, r1]
 8010370:	2190      	movs	r1, #144	@ 0x90
 8010372:	00c9      	lsls	r1, r1, #3
 8010374:	420a      	tst	r2, r1
 8010376:	d028      	beq.n	80103ca <__ssputs_r+0x72>
 8010378:	2003      	movs	r0, #3
 801037a:	6921      	ldr	r1, [r4, #16]
 801037c:	1a5b      	subs	r3, r3, r1
 801037e:	9301      	str	r3, [sp, #4]
 8010380:	6963      	ldr	r3, [r4, #20]
 8010382:	4343      	muls	r3, r0
 8010384:	9801      	ldr	r0, [sp, #4]
 8010386:	0fdd      	lsrs	r5, r3, #31
 8010388:	18ed      	adds	r5, r5, r3
 801038a:	1c7b      	adds	r3, r7, #1
 801038c:	181b      	adds	r3, r3, r0
 801038e:	106d      	asrs	r5, r5, #1
 8010390:	42ab      	cmp	r3, r5
 8010392:	d900      	bls.n	8010396 <__ssputs_r+0x3e>
 8010394:	001d      	movs	r5, r3
 8010396:	0552      	lsls	r2, r2, #21
 8010398:	d528      	bpl.n	80103ec <__ssputs_r+0x94>
 801039a:	0029      	movs	r1, r5
 801039c:	9802      	ldr	r0, [sp, #8]
 801039e:	f7ff fa69 	bl	800f874 <_malloc_r>
 80103a2:	1e06      	subs	r6, r0, #0
 80103a4:	d02c      	beq.n	8010400 <__ssputs_r+0xa8>
 80103a6:	9a01      	ldr	r2, [sp, #4]
 80103a8:	6921      	ldr	r1, [r4, #16]
 80103aa:	f7fe fe8e 	bl	800f0ca <memcpy>
 80103ae:	89a2      	ldrh	r2, [r4, #12]
 80103b0:	4b18      	ldr	r3, [pc, #96]	@ (8010414 <__ssputs_r+0xbc>)
 80103b2:	401a      	ands	r2, r3
 80103b4:	2380      	movs	r3, #128	@ 0x80
 80103b6:	4313      	orrs	r3, r2
 80103b8:	81a3      	strh	r3, [r4, #12]
 80103ba:	9b01      	ldr	r3, [sp, #4]
 80103bc:	6126      	str	r6, [r4, #16]
 80103be:	18f6      	adds	r6, r6, r3
 80103c0:	6026      	str	r6, [r4, #0]
 80103c2:	003e      	movs	r6, r7
 80103c4:	6165      	str	r5, [r4, #20]
 80103c6:	1aed      	subs	r5, r5, r3
 80103c8:	60a5      	str	r5, [r4, #8]
 80103ca:	42be      	cmp	r6, r7
 80103cc:	d900      	bls.n	80103d0 <__ssputs_r+0x78>
 80103ce:	003e      	movs	r6, r7
 80103d0:	0032      	movs	r2, r6
 80103d2:	9903      	ldr	r1, [sp, #12]
 80103d4:	6820      	ldr	r0, [r4, #0]
 80103d6:	f000 fd2f 	bl	8010e38 <memmove>
 80103da:	2000      	movs	r0, #0
 80103dc:	68a3      	ldr	r3, [r4, #8]
 80103de:	1b9b      	subs	r3, r3, r6
 80103e0:	60a3      	str	r3, [r4, #8]
 80103e2:	6823      	ldr	r3, [r4, #0]
 80103e4:	199b      	adds	r3, r3, r6
 80103e6:	6023      	str	r3, [r4, #0]
 80103e8:	b005      	add	sp, #20
 80103ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103ec:	002a      	movs	r2, r5
 80103ee:	9802      	ldr	r0, [sp, #8]
 80103f0:	f000 fda8 	bl	8010f44 <_realloc_r>
 80103f4:	1e06      	subs	r6, r0, #0
 80103f6:	d1e0      	bne.n	80103ba <__ssputs_r+0x62>
 80103f8:	6921      	ldr	r1, [r4, #16]
 80103fa:	9802      	ldr	r0, [sp, #8]
 80103fc:	f7fe fe74 	bl	800f0e8 <_free_r>
 8010400:	230c      	movs	r3, #12
 8010402:	2001      	movs	r0, #1
 8010404:	9a02      	ldr	r2, [sp, #8]
 8010406:	4240      	negs	r0, r0
 8010408:	6013      	str	r3, [r2, #0]
 801040a:	89a2      	ldrh	r2, [r4, #12]
 801040c:	3334      	adds	r3, #52	@ 0x34
 801040e:	4313      	orrs	r3, r2
 8010410:	81a3      	strh	r3, [r4, #12]
 8010412:	e7e9      	b.n	80103e8 <__ssputs_r+0x90>
 8010414:	fffffb7f 	.word	0xfffffb7f

08010418 <_svfiprintf_r>:
 8010418:	b5f0      	push	{r4, r5, r6, r7, lr}
 801041a:	b0a1      	sub	sp, #132	@ 0x84
 801041c:	9003      	str	r0, [sp, #12]
 801041e:	001d      	movs	r5, r3
 8010420:	898b      	ldrh	r3, [r1, #12]
 8010422:	000f      	movs	r7, r1
 8010424:	0016      	movs	r6, r2
 8010426:	061b      	lsls	r3, r3, #24
 8010428:	d511      	bpl.n	801044e <_svfiprintf_r+0x36>
 801042a:	690b      	ldr	r3, [r1, #16]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d10e      	bne.n	801044e <_svfiprintf_r+0x36>
 8010430:	2140      	movs	r1, #64	@ 0x40
 8010432:	f7ff fa1f 	bl	800f874 <_malloc_r>
 8010436:	6038      	str	r0, [r7, #0]
 8010438:	6138      	str	r0, [r7, #16]
 801043a:	2800      	cmp	r0, #0
 801043c:	d105      	bne.n	801044a <_svfiprintf_r+0x32>
 801043e:	230c      	movs	r3, #12
 8010440:	9a03      	ldr	r2, [sp, #12]
 8010442:	6013      	str	r3, [r2, #0]
 8010444:	2001      	movs	r0, #1
 8010446:	4240      	negs	r0, r0
 8010448:	e0cf      	b.n	80105ea <_svfiprintf_r+0x1d2>
 801044a:	2340      	movs	r3, #64	@ 0x40
 801044c:	617b      	str	r3, [r7, #20]
 801044e:	2300      	movs	r3, #0
 8010450:	ac08      	add	r4, sp, #32
 8010452:	6163      	str	r3, [r4, #20]
 8010454:	3320      	adds	r3, #32
 8010456:	7663      	strb	r3, [r4, #25]
 8010458:	3310      	adds	r3, #16
 801045a:	76a3      	strb	r3, [r4, #26]
 801045c:	9507      	str	r5, [sp, #28]
 801045e:	0035      	movs	r5, r6
 8010460:	782b      	ldrb	r3, [r5, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d001      	beq.n	801046a <_svfiprintf_r+0x52>
 8010466:	2b25      	cmp	r3, #37	@ 0x25
 8010468:	d148      	bne.n	80104fc <_svfiprintf_r+0xe4>
 801046a:	1bab      	subs	r3, r5, r6
 801046c:	9305      	str	r3, [sp, #20]
 801046e:	42b5      	cmp	r5, r6
 8010470:	d00b      	beq.n	801048a <_svfiprintf_r+0x72>
 8010472:	0032      	movs	r2, r6
 8010474:	0039      	movs	r1, r7
 8010476:	9803      	ldr	r0, [sp, #12]
 8010478:	f7ff ff6e 	bl	8010358 <__ssputs_r>
 801047c:	3001      	adds	r0, #1
 801047e:	d100      	bne.n	8010482 <_svfiprintf_r+0x6a>
 8010480:	e0ae      	b.n	80105e0 <_svfiprintf_r+0x1c8>
 8010482:	6963      	ldr	r3, [r4, #20]
 8010484:	9a05      	ldr	r2, [sp, #20]
 8010486:	189b      	adds	r3, r3, r2
 8010488:	6163      	str	r3, [r4, #20]
 801048a:	782b      	ldrb	r3, [r5, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d100      	bne.n	8010492 <_svfiprintf_r+0x7a>
 8010490:	e0a6      	b.n	80105e0 <_svfiprintf_r+0x1c8>
 8010492:	2201      	movs	r2, #1
 8010494:	2300      	movs	r3, #0
 8010496:	4252      	negs	r2, r2
 8010498:	6062      	str	r2, [r4, #4]
 801049a:	a904      	add	r1, sp, #16
 801049c:	3254      	adds	r2, #84	@ 0x54
 801049e:	1852      	adds	r2, r2, r1
 80104a0:	1c6e      	adds	r6, r5, #1
 80104a2:	6023      	str	r3, [r4, #0]
 80104a4:	60e3      	str	r3, [r4, #12]
 80104a6:	60a3      	str	r3, [r4, #8]
 80104a8:	7013      	strb	r3, [r2, #0]
 80104aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80104ac:	4b54      	ldr	r3, [pc, #336]	@ (8010600 <_svfiprintf_r+0x1e8>)
 80104ae:	2205      	movs	r2, #5
 80104b0:	0018      	movs	r0, r3
 80104b2:	7831      	ldrb	r1, [r6, #0]
 80104b4:	9305      	str	r3, [sp, #20]
 80104b6:	f000 fce3 	bl	8010e80 <memchr>
 80104ba:	1c75      	adds	r5, r6, #1
 80104bc:	2800      	cmp	r0, #0
 80104be:	d11f      	bne.n	8010500 <_svfiprintf_r+0xe8>
 80104c0:	6822      	ldr	r2, [r4, #0]
 80104c2:	06d3      	lsls	r3, r2, #27
 80104c4:	d504      	bpl.n	80104d0 <_svfiprintf_r+0xb8>
 80104c6:	2353      	movs	r3, #83	@ 0x53
 80104c8:	a904      	add	r1, sp, #16
 80104ca:	185b      	adds	r3, r3, r1
 80104cc:	2120      	movs	r1, #32
 80104ce:	7019      	strb	r1, [r3, #0]
 80104d0:	0713      	lsls	r3, r2, #28
 80104d2:	d504      	bpl.n	80104de <_svfiprintf_r+0xc6>
 80104d4:	2353      	movs	r3, #83	@ 0x53
 80104d6:	a904      	add	r1, sp, #16
 80104d8:	185b      	adds	r3, r3, r1
 80104da:	212b      	movs	r1, #43	@ 0x2b
 80104dc:	7019      	strb	r1, [r3, #0]
 80104de:	7833      	ldrb	r3, [r6, #0]
 80104e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80104e2:	d016      	beq.n	8010512 <_svfiprintf_r+0xfa>
 80104e4:	0035      	movs	r5, r6
 80104e6:	2100      	movs	r1, #0
 80104e8:	200a      	movs	r0, #10
 80104ea:	68e3      	ldr	r3, [r4, #12]
 80104ec:	782a      	ldrb	r2, [r5, #0]
 80104ee:	1c6e      	adds	r6, r5, #1
 80104f0:	3a30      	subs	r2, #48	@ 0x30
 80104f2:	2a09      	cmp	r2, #9
 80104f4:	d950      	bls.n	8010598 <_svfiprintf_r+0x180>
 80104f6:	2900      	cmp	r1, #0
 80104f8:	d111      	bne.n	801051e <_svfiprintf_r+0x106>
 80104fa:	e017      	b.n	801052c <_svfiprintf_r+0x114>
 80104fc:	3501      	adds	r5, #1
 80104fe:	e7af      	b.n	8010460 <_svfiprintf_r+0x48>
 8010500:	9b05      	ldr	r3, [sp, #20]
 8010502:	6822      	ldr	r2, [r4, #0]
 8010504:	1ac0      	subs	r0, r0, r3
 8010506:	2301      	movs	r3, #1
 8010508:	4083      	lsls	r3, r0
 801050a:	4313      	orrs	r3, r2
 801050c:	002e      	movs	r6, r5
 801050e:	6023      	str	r3, [r4, #0]
 8010510:	e7cc      	b.n	80104ac <_svfiprintf_r+0x94>
 8010512:	9b07      	ldr	r3, [sp, #28]
 8010514:	1d19      	adds	r1, r3, #4
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	9107      	str	r1, [sp, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	db01      	blt.n	8010522 <_svfiprintf_r+0x10a>
 801051e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010520:	e004      	b.n	801052c <_svfiprintf_r+0x114>
 8010522:	425b      	negs	r3, r3
 8010524:	60e3      	str	r3, [r4, #12]
 8010526:	2302      	movs	r3, #2
 8010528:	4313      	orrs	r3, r2
 801052a:	6023      	str	r3, [r4, #0]
 801052c:	782b      	ldrb	r3, [r5, #0]
 801052e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010530:	d10c      	bne.n	801054c <_svfiprintf_r+0x134>
 8010532:	786b      	ldrb	r3, [r5, #1]
 8010534:	2b2a      	cmp	r3, #42	@ 0x2a
 8010536:	d134      	bne.n	80105a2 <_svfiprintf_r+0x18a>
 8010538:	9b07      	ldr	r3, [sp, #28]
 801053a:	3502      	adds	r5, #2
 801053c:	1d1a      	adds	r2, r3, #4
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	9207      	str	r2, [sp, #28]
 8010542:	2b00      	cmp	r3, #0
 8010544:	da01      	bge.n	801054a <_svfiprintf_r+0x132>
 8010546:	2301      	movs	r3, #1
 8010548:	425b      	negs	r3, r3
 801054a:	9309      	str	r3, [sp, #36]	@ 0x24
 801054c:	4e2d      	ldr	r6, [pc, #180]	@ (8010604 <_svfiprintf_r+0x1ec>)
 801054e:	2203      	movs	r2, #3
 8010550:	0030      	movs	r0, r6
 8010552:	7829      	ldrb	r1, [r5, #0]
 8010554:	f000 fc94 	bl	8010e80 <memchr>
 8010558:	2800      	cmp	r0, #0
 801055a:	d006      	beq.n	801056a <_svfiprintf_r+0x152>
 801055c:	2340      	movs	r3, #64	@ 0x40
 801055e:	1b80      	subs	r0, r0, r6
 8010560:	4083      	lsls	r3, r0
 8010562:	6822      	ldr	r2, [r4, #0]
 8010564:	3501      	adds	r5, #1
 8010566:	4313      	orrs	r3, r2
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	7829      	ldrb	r1, [r5, #0]
 801056c:	2206      	movs	r2, #6
 801056e:	4826      	ldr	r0, [pc, #152]	@ (8010608 <_svfiprintf_r+0x1f0>)
 8010570:	1c6e      	adds	r6, r5, #1
 8010572:	7621      	strb	r1, [r4, #24]
 8010574:	f000 fc84 	bl	8010e80 <memchr>
 8010578:	2800      	cmp	r0, #0
 801057a:	d038      	beq.n	80105ee <_svfiprintf_r+0x1d6>
 801057c:	4b23      	ldr	r3, [pc, #140]	@ (801060c <_svfiprintf_r+0x1f4>)
 801057e:	2b00      	cmp	r3, #0
 8010580:	d122      	bne.n	80105c8 <_svfiprintf_r+0x1b0>
 8010582:	2207      	movs	r2, #7
 8010584:	9b07      	ldr	r3, [sp, #28]
 8010586:	3307      	adds	r3, #7
 8010588:	4393      	bics	r3, r2
 801058a:	3308      	adds	r3, #8
 801058c:	9307      	str	r3, [sp, #28]
 801058e:	6963      	ldr	r3, [r4, #20]
 8010590:	9a04      	ldr	r2, [sp, #16]
 8010592:	189b      	adds	r3, r3, r2
 8010594:	6163      	str	r3, [r4, #20]
 8010596:	e762      	b.n	801045e <_svfiprintf_r+0x46>
 8010598:	4343      	muls	r3, r0
 801059a:	0035      	movs	r5, r6
 801059c:	2101      	movs	r1, #1
 801059e:	189b      	adds	r3, r3, r2
 80105a0:	e7a4      	b.n	80104ec <_svfiprintf_r+0xd4>
 80105a2:	2300      	movs	r3, #0
 80105a4:	200a      	movs	r0, #10
 80105a6:	0019      	movs	r1, r3
 80105a8:	3501      	adds	r5, #1
 80105aa:	6063      	str	r3, [r4, #4]
 80105ac:	782a      	ldrb	r2, [r5, #0]
 80105ae:	1c6e      	adds	r6, r5, #1
 80105b0:	3a30      	subs	r2, #48	@ 0x30
 80105b2:	2a09      	cmp	r2, #9
 80105b4:	d903      	bls.n	80105be <_svfiprintf_r+0x1a6>
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d0c8      	beq.n	801054c <_svfiprintf_r+0x134>
 80105ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80105bc:	e7c6      	b.n	801054c <_svfiprintf_r+0x134>
 80105be:	4341      	muls	r1, r0
 80105c0:	0035      	movs	r5, r6
 80105c2:	2301      	movs	r3, #1
 80105c4:	1889      	adds	r1, r1, r2
 80105c6:	e7f1      	b.n	80105ac <_svfiprintf_r+0x194>
 80105c8:	aa07      	add	r2, sp, #28
 80105ca:	9200      	str	r2, [sp, #0]
 80105cc:	0021      	movs	r1, r4
 80105ce:	003a      	movs	r2, r7
 80105d0:	4b0f      	ldr	r3, [pc, #60]	@ (8010610 <_svfiprintf_r+0x1f8>)
 80105d2:	9803      	ldr	r0, [sp, #12]
 80105d4:	e000      	b.n	80105d8 <_svfiprintf_r+0x1c0>
 80105d6:	bf00      	nop
 80105d8:	9004      	str	r0, [sp, #16]
 80105da:	9b04      	ldr	r3, [sp, #16]
 80105dc:	3301      	adds	r3, #1
 80105de:	d1d6      	bne.n	801058e <_svfiprintf_r+0x176>
 80105e0:	89bb      	ldrh	r3, [r7, #12]
 80105e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80105e4:	065b      	lsls	r3, r3, #25
 80105e6:	d500      	bpl.n	80105ea <_svfiprintf_r+0x1d2>
 80105e8:	e72c      	b.n	8010444 <_svfiprintf_r+0x2c>
 80105ea:	b021      	add	sp, #132	@ 0x84
 80105ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ee:	aa07      	add	r2, sp, #28
 80105f0:	9200      	str	r2, [sp, #0]
 80105f2:	0021      	movs	r1, r4
 80105f4:	003a      	movs	r2, r7
 80105f6:	4b06      	ldr	r3, [pc, #24]	@ (8010610 <_svfiprintf_r+0x1f8>)
 80105f8:	9803      	ldr	r0, [sp, #12]
 80105fa:	f000 f9bf 	bl	801097c <_printf_i>
 80105fe:	e7eb      	b.n	80105d8 <_svfiprintf_r+0x1c0>
 8010600:	0801c3a3 	.word	0x0801c3a3
 8010604:	0801c3a9 	.word	0x0801c3a9
 8010608:	0801c3ad 	.word	0x0801c3ad
 801060c:	00000000 	.word	0x00000000
 8010610:	08010359 	.word	0x08010359

08010614 <__sfputc_r>:
 8010614:	6893      	ldr	r3, [r2, #8]
 8010616:	b510      	push	{r4, lr}
 8010618:	3b01      	subs	r3, #1
 801061a:	6093      	str	r3, [r2, #8]
 801061c:	2b00      	cmp	r3, #0
 801061e:	da04      	bge.n	801062a <__sfputc_r+0x16>
 8010620:	6994      	ldr	r4, [r2, #24]
 8010622:	42a3      	cmp	r3, r4
 8010624:	db07      	blt.n	8010636 <__sfputc_r+0x22>
 8010626:	290a      	cmp	r1, #10
 8010628:	d005      	beq.n	8010636 <__sfputc_r+0x22>
 801062a:	6813      	ldr	r3, [r2, #0]
 801062c:	1c58      	adds	r0, r3, #1
 801062e:	6010      	str	r0, [r2, #0]
 8010630:	7019      	strb	r1, [r3, #0]
 8010632:	0008      	movs	r0, r1
 8010634:	bd10      	pop	{r4, pc}
 8010636:	f000 fb5e 	bl	8010cf6 <__swbuf_r>
 801063a:	0001      	movs	r1, r0
 801063c:	e7f9      	b.n	8010632 <__sfputc_r+0x1e>

0801063e <__sfputs_r>:
 801063e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010640:	0006      	movs	r6, r0
 8010642:	000f      	movs	r7, r1
 8010644:	0014      	movs	r4, r2
 8010646:	18d5      	adds	r5, r2, r3
 8010648:	42ac      	cmp	r4, r5
 801064a:	d101      	bne.n	8010650 <__sfputs_r+0x12>
 801064c:	2000      	movs	r0, #0
 801064e:	e007      	b.n	8010660 <__sfputs_r+0x22>
 8010650:	7821      	ldrb	r1, [r4, #0]
 8010652:	003a      	movs	r2, r7
 8010654:	0030      	movs	r0, r6
 8010656:	f7ff ffdd 	bl	8010614 <__sfputc_r>
 801065a:	3401      	adds	r4, #1
 801065c:	1c43      	adds	r3, r0, #1
 801065e:	d1f3      	bne.n	8010648 <__sfputs_r+0xa>
 8010660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010664 <_vfiprintf_r>:
 8010664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010666:	b0a1      	sub	sp, #132	@ 0x84
 8010668:	000f      	movs	r7, r1
 801066a:	0015      	movs	r5, r2
 801066c:	001e      	movs	r6, r3
 801066e:	9003      	str	r0, [sp, #12]
 8010670:	2800      	cmp	r0, #0
 8010672:	d004      	beq.n	801067e <_vfiprintf_r+0x1a>
 8010674:	6a03      	ldr	r3, [r0, #32]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d101      	bne.n	801067e <_vfiprintf_r+0x1a>
 801067a:	f7fe fbef 	bl	800ee5c <__sinit>
 801067e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010680:	07db      	lsls	r3, r3, #31
 8010682:	d405      	bmi.n	8010690 <_vfiprintf_r+0x2c>
 8010684:	89bb      	ldrh	r3, [r7, #12]
 8010686:	059b      	lsls	r3, r3, #22
 8010688:	d402      	bmi.n	8010690 <_vfiprintf_r+0x2c>
 801068a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801068c:	f7fe fd1b 	bl	800f0c6 <__retarget_lock_acquire_recursive>
 8010690:	89bb      	ldrh	r3, [r7, #12]
 8010692:	071b      	lsls	r3, r3, #28
 8010694:	d502      	bpl.n	801069c <_vfiprintf_r+0x38>
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d113      	bne.n	80106c4 <_vfiprintf_r+0x60>
 801069c:	0039      	movs	r1, r7
 801069e:	9803      	ldr	r0, [sp, #12]
 80106a0:	f000 fb6c 	bl	8010d7c <__swsetup_r>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d00d      	beq.n	80106c4 <_vfiprintf_r+0x60>
 80106a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80106aa:	07db      	lsls	r3, r3, #31
 80106ac:	d503      	bpl.n	80106b6 <_vfiprintf_r+0x52>
 80106ae:	2001      	movs	r0, #1
 80106b0:	4240      	negs	r0, r0
 80106b2:	b021      	add	sp, #132	@ 0x84
 80106b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106b6:	89bb      	ldrh	r3, [r7, #12]
 80106b8:	059b      	lsls	r3, r3, #22
 80106ba:	d4f8      	bmi.n	80106ae <_vfiprintf_r+0x4a>
 80106bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80106be:	f7fe fd03 	bl	800f0c8 <__retarget_lock_release_recursive>
 80106c2:	e7f4      	b.n	80106ae <_vfiprintf_r+0x4a>
 80106c4:	2300      	movs	r3, #0
 80106c6:	ac08      	add	r4, sp, #32
 80106c8:	6163      	str	r3, [r4, #20]
 80106ca:	3320      	adds	r3, #32
 80106cc:	7663      	strb	r3, [r4, #25]
 80106ce:	3310      	adds	r3, #16
 80106d0:	76a3      	strb	r3, [r4, #26]
 80106d2:	9607      	str	r6, [sp, #28]
 80106d4:	002e      	movs	r6, r5
 80106d6:	7833      	ldrb	r3, [r6, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d001      	beq.n	80106e0 <_vfiprintf_r+0x7c>
 80106dc:	2b25      	cmp	r3, #37	@ 0x25
 80106de:	d148      	bne.n	8010772 <_vfiprintf_r+0x10e>
 80106e0:	1b73      	subs	r3, r6, r5
 80106e2:	9305      	str	r3, [sp, #20]
 80106e4:	42ae      	cmp	r6, r5
 80106e6:	d00b      	beq.n	8010700 <_vfiprintf_r+0x9c>
 80106e8:	002a      	movs	r2, r5
 80106ea:	0039      	movs	r1, r7
 80106ec:	9803      	ldr	r0, [sp, #12]
 80106ee:	f7ff ffa6 	bl	801063e <__sfputs_r>
 80106f2:	3001      	adds	r0, #1
 80106f4:	d100      	bne.n	80106f8 <_vfiprintf_r+0x94>
 80106f6:	e0ae      	b.n	8010856 <_vfiprintf_r+0x1f2>
 80106f8:	6963      	ldr	r3, [r4, #20]
 80106fa:	9a05      	ldr	r2, [sp, #20]
 80106fc:	189b      	adds	r3, r3, r2
 80106fe:	6163      	str	r3, [r4, #20]
 8010700:	7833      	ldrb	r3, [r6, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d100      	bne.n	8010708 <_vfiprintf_r+0xa4>
 8010706:	e0a6      	b.n	8010856 <_vfiprintf_r+0x1f2>
 8010708:	2201      	movs	r2, #1
 801070a:	2300      	movs	r3, #0
 801070c:	4252      	negs	r2, r2
 801070e:	6062      	str	r2, [r4, #4]
 8010710:	a904      	add	r1, sp, #16
 8010712:	3254      	adds	r2, #84	@ 0x54
 8010714:	1852      	adds	r2, r2, r1
 8010716:	1c75      	adds	r5, r6, #1
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	60e3      	str	r3, [r4, #12]
 801071c:	60a3      	str	r3, [r4, #8]
 801071e:	7013      	strb	r3, [r2, #0]
 8010720:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010722:	4b59      	ldr	r3, [pc, #356]	@ (8010888 <_vfiprintf_r+0x224>)
 8010724:	2205      	movs	r2, #5
 8010726:	0018      	movs	r0, r3
 8010728:	7829      	ldrb	r1, [r5, #0]
 801072a:	9305      	str	r3, [sp, #20]
 801072c:	f000 fba8 	bl	8010e80 <memchr>
 8010730:	1c6e      	adds	r6, r5, #1
 8010732:	2800      	cmp	r0, #0
 8010734:	d11f      	bne.n	8010776 <_vfiprintf_r+0x112>
 8010736:	6822      	ldr	r2, [r4, #0]
 8010738:	06d3      	lsls	r3, r2, #27
 801073a:	d504      	bpl.n	8010746 <_vfiprintf_r+0xe2>
 801073c:	2353      	movs	r3, #83	@ 0x53
 801073e:	a904      	add	r1, sp, #16
 8010740:	185b      	adds	r3, r3, r1
 8010742:	2120      	movs	r1, #32
 8010744:	7019      	strb	r1, [r3, #0]
 8010746:	0713      	lsls	r3, r2, #28
 8010748:	d504      	bpl.n	8010754 <_vfiprintf_r+0xf0>
 801074a:	2353      	movs	r3, #83	@ 0x53
 801074c:	a904      	add	r1, sp, #16
 801074e:	185b      	adds	r3, r3, r1
 8010750:	212b      	movs	r1, #43	@ 0x2b
 8010752:	7019      	strb	r1, [r3, #0]
 8010754:	782b      	ldrb	r3, [r5, #0]
 8010756:	2b2a      	cmp	r3, #42	@ 0x2a
 8010758:	d016      	beq.n	8010788 <_vfiprintf_r+0x124>
 801075a:	002e      	movs	r6, r5
 801075c:	2100      	movs	r1, #0
 801075e:	200a      	movs	r0, #10
 8010760:	68e3      	ldr	r3, [r4, #12]
 8010762:	7832      	ldrb	r2, [r6, #0]
 8010764:	1c75      	adds	r5, r6, #1
 8010766:	3a30      	subs	r2, #48	@ 0x30
 8010768:	2a09      	cmp	r2, #9
 801076a:	d950      	bls.n	801080e <_vfiprintf_r+0x1aa>
 801076c:	2900      	cmp	r1, #0
 801076e:	d111      	bne.n	8010794 <_vfiprintf_r+0x130>
 8010770:	e017      	b.n	80107a2 <_vfiprintf_r+0x13e>
 8010772:	3601      	adds	r6, #1
 8010774:	e7af      	b.n	80106d6 <_vfiprintf_r+0x72>
 8010776:	9b05      	ldr	r3, [sp, #20]
 8010778:	6822      	ldr	r2, [r4, #0]
 801077a:	1ac0      	subs	r0, r0, r3
 801077c:	2301      	movs	r3, #1
 801077e:	4083      	lsls	r3, r0
 8010780:	4313      	orrs	r3, r2
 8010782:	0035      	movs	r5, r6
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	e7cc      	b.n	8010722 <_vfiprintf_r+0xbe>
 8010788:	9b07      	ldr	r3, [sp, #28]
 801078a:	1d19      	adds	r1, r3, #4
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	9107      	str	r1, [sp, #28]
 8010790:	2b00      	cmp	r3, #0
 8010792:	db01      	blt.n	8010798 <_vfiprintf_r+0x134>
 8010794:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010796:	e004      	b.n	80107a2 <_vfiprintf_r+0x13e>
 8010798:	425b      	negs	r3, r3
 801079a:	60e3      	str	r3, [r4, #12]
 801079c:	2302      	movs	r3, #2
 801079e:	4313      	orrs	r3, r2
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	7833      	ldrb	r3, [r6, #0]
 80107a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80107a6:	d10c      	bne.n	80107c2 <_vfiprintf_r+0x15e>
 80107a8:	7873      	ldrb	r3, [r6, #1]
 80107aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80107ac:	d134      	bne.n	8010818 <_vfiprintf_r+0x1b4>
 80107ae:	9b07      	ldr	r3, [sp, #28]
 80107b0:	3602      	adds	r6, #2
 80107b2:	1d1a      	adds	r2, r3, #4
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	9207      	str	r2, [sp, #28]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	da01      	bge.n	80107c0 <_vfiprintf_r+0x15c>
 80107bc:	2301      	movs	r3, #1
 80107be:	425b      	negs	r3, r3
 80107c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80107c2:	4d32      	ldr	r5, [pc, #200]	@ (801088c <_vfiprintf_r+0x228>)
 80107c4:	2203      	movs	r2, #3
 80107c6:	0028      	movs	r0, r5
 80107c8:	7831      	ldrb	r1, [r6, #0]
 80107ca:	f000 fb59 	bl	8010e80 <memchr>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d006      	beq.n	80107e0 <_vfiprintf_r+0x17c>
 80107d2:	2340      	movs	r3, #64	@ 0x40
 80107d4:	1b40      	subs	r0, r0, r5
 80107d6:	4083      	lsls	r3, r0
 80107d8:	6822      	ldr	r2, [r4, #0]
 80107da:	3601      	adds	r6, #1
 80107dc:	4313      	orrs	r3, r2
 80107de:	6023      	str	r3, [r4, #0]
 80107e0:	7831      	ldrb	r1, [r6, #0]
 80107e2:	2206      	movs	r2, #6
 80107e4:	482a      	ldr	r0, [pc, #168]	@ (8010890 <_vfiprintf_r+0x22c>)
 80107e6:	1c75      	adds	r5, r6, #1
 80107e8:	7621      	strb	r1, [r4, #24]
 80107ea:	f000 fb49 	bl	8010e80 <memchr>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	d040      	beq.n	8010874 <_vfiprintf_r+0x210>
 80107f2:	4b28      	ldr	r3, [pc, #160]	@ (8010894 <_vfiprintf_r+0x230>)
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d122      	bne.n	801083e <_vfiprintf_r+0x1da>
 80107f8:	2207      	movs	r2, #7
 80107fa:	9b07      	ldr	r3, [sp, #28]
 80107fc:	3307      	adds	r3, #7
 80107fe:	4393      	bics	r3, r2
 8010800:	3308      	adds	r3, #8
 8010802:	9307      	str	r3, [sp, #28]
 8010804:	6963      	ldr	r3, [r4, #20]
 8010806:	9a04      	ldr	r2, [sp, #16]
 8010808:	189b      	adds	r3, r3, r2
 801080a:	6163      	str	r3, [r4, #20]
 801080c:	e762      	b.n	80106d4 <_vfiprintf_r+0x70>
 801080e:	4343      	muls	r3, r0
 8010810:	002e      	movs	r6, r5
 8010812:	2101      	movs	r1, #1
 8010814:	189b      	adds	r3, r3, r2
 8010816:	e7a4      	b.n	8010762 <_vfiprintf_r+0xfe>
 8010818:	2300      	movs	r3, #0
 801081a:	200a      	movs	r0, #10
 801081c:	0019      	movs	r1, r3
 801081e:	3601      	adds	r6, #1
 8010820:	6063      	str	r3, [r4, #4]
 8010822:	7832      	ldrb	r2, [r6, #0]
 8010824:	1c75      	adds	r5, r6, #1
 8010826:	3a30      	subs	r2, #48	@ 0x30
 8010828:	2a09      	cmp	r2, #9
 801082a:	d903      	bls.n	8010834 <_vfiprintf_r+0x1d0>
 801082c:	2b00      	cmp	r3, #0
 801082e:	d0c8      	beq.n	80107c2 <_vfiprintf_r+0x15e>
 8010830:	9109      	str	r1, [sp, #36]	@ 0x24
 8010832:	e7c6      	b.n	80107c2 <_vfiprintf_r+0x15e>
 8010834:	4341      	muls	r1, r0
 8010836:	002e      	movs	r6, r5
 8010838:	2301      	movs	r3, #1
 801083a:	1889      	adds	r1, r1, r2
 801083c:	e7f1      	b.n	8010822 <_vfiprintf_r+0x1be>
 801083e:	aa07      	add	r2, sp, #28
 8010840:	9200      	str	r2, [sp, #0]
 8010842:	0021      	movs	r1, r4
 8010844:	003a      	movs	r2, r7
 8010846:	4b14      	ldr	r3, [pc, #80]	@ (8010898 <_vfiprintf_r+0x234>)
 8010848:	9803      	ldr	r0, [sp, #12]
 801084a:	e000      	b.n	801084e <_vfiprintf_r+0x1ea>
 801084c:	bf00      	nop
 801084e:	9004      	str	r0, [sp, #16]
 8010850:	9b04      	ldr	r3, [sp, #16]
 8010852:	3301      	adds	r3, #1
 8010854:	d1d6      	bne.n	8010804 <_vfiprintf_r+0x1a0>
 8010856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010858:	07db      	lsls	r3, r3, #31
 801085a:	d405      	bmi.n	8010868 <_vfiprintf_r+0x204>
 801085c:	89bb      	ldrh	r3, [r7, #12]
 801085e:	059b      	lsls	r3, r3, #22
 8010860:	d402      	bmi.n	8010868 <_vfiprintf_r+0x204>
 8010862:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010864:	f7fe fc30 	bl	800f0c8 <__retarget_lock_release_recursive>
 8010868:	89bb      	ldrh	r3, [r7, #12]
 801086a:	065b      	lsls	r3, r3, #25
 801086c:	d500      	bpl.n	8010870 <_vfiprintf_r+0x20c>
 801086e:	e71e      	b.n	80106ae <_vfiprintf_r+0x4a>
 8010870:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010872:	e71e      	b.n	80106b2 <_vfiprintf_r+0x4e>
 8010874:	aa07      	add	r2, sp, #28
 8010876:	9200      	str	r2, [sp, #0]
 8010878:	0021      	movs	r1, r4
 801087a:	003a      	movs	r2, r7
 801087c:	4b06      	ldr	r3, [pc, #24]	@ (8010898 <_vfiprintf_r+0x234>)
 801087e:	9803      	ldr	r0, [sp, #12]
 8010880:	f000 f87c 	bl	801097c <_printf_i>
 8010884:	e7e3      	b.n	801084e <_vfiprintf_r+0x1ea>
 8010886:	46c0      	nop			@ (mov r8, r8)
 8010888:	0801c3a3 	.word	0x0801c3a3
 801088c:	0801c3a9 	.word	0x0801c3a9
 8010890:	0801c3ad 	.word	0x0801c3ad
 8010894:	00000000 	.word	0x00000000
 8010898:	0801063f 	.word	0x0801063f

0801089c <_printf_common>:
 801089c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801089e:	0016      	movs	r6, r2
 80108a0:	9301      	str	r3, [sp, #4]
 80108a2:	688a      	ldr	r2, [r1, #8]
 80108a4:	690b      	ldr	r3, [r1, #16]
 80108a6:	000c      	movs	r4, r1
 80108a8:	9000      	str	r0, [sp, #0]
 80108aa:	4293      	cmp	r3, r2
 80108ac:	da00      	bge.n	80108b0 <_printf_common+0x14>
 80108ae:	0013      	movs	r3, r2
 80108b0:	0022      	movs	r2, r4
 80108b2:	6033      	str	r3, [r6, #0]
 80108b4:	3243      	adds	r2, #67	@ 0x43
 80108b6:	7812      	ldrb	r2, [r2, #0]
 80108b8:	2a00      	cmp	r2, #0
 80108ba:	d001      	beq.n	80108c0 <_printf_common+0x24>
 80108bc:	3301      	adds	r3, #1
 80108be:	6033      	str	r3, [r6, #0]
 80108c0:	6823      	ldr	r3, [r4, #0]
 80108c2:	069b      	lsls	r3, r3, #26
 80108c4:	d502      	bpl.n	80108cc <_printf_common+0x30>
 80108c6:	6833      	ldr	r3, [r6, #0]
 80108c8:	3302      	adds	r3, #2
 80108ca:	6033      	str	r3, [r6, #0]
 80108cc:	6822      	ldr	r2, [r4, #0]
 80108ce:	2306      	movs	r3, #6
 80108d0:	0015      	movs	r5, r2
 80108d2:	401d      	ands	r5, r3
 80108d4:	421a      	tst	r2, r3
 80108d6:	d027      	beq.n	8010928 <_printf_common+0x8c>
 80108d8:	0023      	movs	r3, r4
 80108da:	3343      	adds	r3, #67	@ 0x43
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	1e5a      	subs	r2, r3, #1
 80108e0:	4193      	sbcs	r3, r2
 80108e2:	6822      	ldr	r2, [r4, #0]
 80108e4:	0692      	lsls	r2, r2, #26
 80108e6:	d430      	bmi.n	801094a <_printf_common+0xae>
 80108e8:	0022      	movs	r2, r4
 80108ea:	9901      	ldr	r1, [sp, #4]
 80108ec:	9800      	ldr	r0, [sp, #0]
 80108ee:	9d08      	ldr	r5, [sp, #32]
 80108f0:	3243      	adds	r2, #67	@ 0x43
 80108f2:	47a8      	blx	r5
 80108f4:	3001      	adds	r0, #1
 80108f6:	d025      	beq.n	8010944 <_printf_common+0xa8>
 80108f8:	2206      	movs	r2, #6
 80108fa:	6823      	ldr	r3, [r4, #0]
 80108fc:	2500      	movs	r5, #0
 80108fe:	4013      	ands	r3, r2
 8010900:	2b04      	cmp	r3, #4
 8010902:	d105      	bne.n	8010910 <_printf_common+0x74>
 8010904:	6833      	ldr	r3, [r6, #0]
 8010906:	68e5      	ldr	r5, [r4, #12]
 8010908:	1aed      	subs	r5, r5, r3
 801090a:	43eb      	mvns	r3, r5
 801090c:	17db      	asrs	r3, r3, #31
 801090e:	401d      	ands	r5, r3
 8010910:	68a3      	ldr	r3, [r4, #8]
 8010912:	6922      	ldr	r2, [r4, #16]
 8010914:	4293      	cmp	r3, r2
 8010916:	dd01      	ble.n	801091c <_printf_common+0x80>
 8010918:	1a9b      	subs	r3, r3, r2
 801091a:	18ed      	adds	r5, r5, r3
 801091c:	2600      	movs	r6, #0
 801091e:	42b5      	cmp	r5, r6
 8010920:	d120      	bne.n	8010964 <_printf_common+0xc8>
 8010922:	2000      	movs	r0, #0
 8010924:	e010      	b.n	8010948 <_printf_common+0xac>
 8010926:	3501      	adds	r5, #1
 8010928:	68e3      	ldr	r3, [r4, #12]
 801092a:	6832      	ldr	r2, [r6, #0]
 801092c:	1a9b      	subs	r3, r3, r2
 801092e:	42ab      	cmp	r3, r5
 8010930:	ddd2      	ble.n	80108d8 <_printf_common+0x3c>
 8010932:	0022      	movs	r2, r4
 8010934:	2301      	movs	r3, #1
 8010936:	9901      	ldr	r1, [sp, #4]
 8010938:	9800      	ldr	r0, [sp, #0]
 801093a:	9f08      	ldr	r7, [sp, #32]
 801093c:	3219      	adds	r2, #25
 801093e:	47b8      	blx	r7
 8010940:	3001      	adds	r0, #1
 8010942:	d1f0      	bne.n	8010926 <_printf_common+0x8a>
 8010944:	2001      	movs	r0, #1
 8010946:	4240      	negs	r0, r0
 8010948:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801094a:	2030      	movs	r0, #48	@ 0x30
 801094c:	18e1      	adds	r1, r4, r3
 801094e:	3143      	adds	r1, #67	@ 0x43
 8010950:	7008      	strb	r0, [r1, #0]
 8010952:	0021      	movs	r1, r4
 8010954:	1c5a      	adds	r2, r3, #1
 8010956:	3145      	adds	r1, #69	@ 0x45
 8010958:	7809      	ldrb	r1, [r1, #0]
 801095a:	18a2      	adds	r2, r4, r2
 801095c:	3243      	adds	r2, #67	@ 0x43
 801095e:	3302      	adds	r3, #2
 8010960:	7011      	strb	r1, [r2, #0]
 8010962:	e7c1      	b.n	80108e8 <_printf_common+0x4c>
 8010964:	0022      	movs	r2, r4
 8010966:	2301      	movs	r3, #1
 8010968:	9901      	ldr	r1, [sp, #4]
 801096a:	9800      	ldr	r0, [sp, #0]
 801096c:	9f08      	ldr	r7, [sp, #32]
 801096e:	321a      	adds	r2, #26
 8010970:	47b8      	blx	r7
 8010972:	3001      	adds	r0, #1
 8010974:	d0e6      	beq.n	8010944 <_printf_common+0xa8>
 8010976:	3601      	adds	r6, #1
 8010978:	e7d1      	b.n	801091e <_printf_common+0x82>
	...

0801097c <_printf_i>:
 801097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801097e:	b08b      	sub	sp, #44	@ 0x2c
 8010980:	9206      	str	r2, [sp, #24]
 8010982:	000a      	movs	r2, r1
 8010984:	3243      	adds	r2, #67	@ 0x43
 8010986:	9307      	str	r3, [sp, #28]
 8010988:	9005      	str	r0, [sp, #20]
 801098a:	9203      	str	r2, [sp, #12]
 801098c:	7e0a      	ldrb	r2, [r1, #24]
 801098e:	000c      	movs	r4, r1
 8010990:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010992:	2a78      	cmp	r2, #120	@ 0x78
 8010994:	d809      	bhi.n	80109aa <_printf_i+0x2e>
 8010996:	2a62      	cmp	r2, #98	@ 0x62
 8010998:	d80b      	bhi.n	80109b2 <_printf_i+0x36>
 801099a:	2a00      	cmp	r2, #0
 801099c:	d100      	bne.n	80109a0 <_printf_i+0x24>
 801099e:	e0ba      	b.n	8010b16 <_printf_i+0x19a>
 80109a0:	497a      	ldr	r1, [pc, #488]	@ (8010b8c <_printf_i+0x210>)
 80109a2:	9104      	str	r1, [sp, #16]
 80109a4:	2a58      	cmp	r2, #88	@ 0x58
 80109a6:	d100      	bne.n	80109aa <_printf_i+0x2e>
 80109a8:	e08e      	b.n	8010ac8 <_printf_i+0x14c>
 80109aa:	0025      	movs	r5, r4
 80109ac:	3542      	adds	r5, #66	@ 0x42
 80109ae:	702a      	strb	r2, [r5, #0]
 80109b0:	e022      	b.n	80109f8 <_printf_i+0x7c>
 80109b2:	0010      	movs	r0, r2
 80109b4:	3863      	subs	r0, #99	@ 0x63
 80109b6:	2815      	cmp	r0, #21
 80109b8:	d8f7      	bhi.n	80109aa <_printf_i+0x2e>
 80109ba:	f7ef fbc1 	bl	8000140 <__gnu_thumb1_case_shi>
 80109be:	0016      	.short	0x0016
 80109c0:	fff6001f 	.word	0xfff6001f
 80109c4:	fff6fff6 	.word	0xfff6fff6
 80109c8:	001ffff6 	.word	0x001ffff6
 80109cc:	fff6fff6 	.word	0xfff6fff6
 80109d0:	fff6fff6 	.word	0xfff6fff6
 80109d4:	0036009f 	.word	0x0036009f
 80109d8:	fff6007e 	.word	0xfff6007e
 80109dc:	00b0fff6 	.word	0x00b0fff6
 80109e0:	0036fff6 	.word	0x0036fff6
 80109e4:	fff6fff6 	.word	0xfff6fff6
 80109e8:	0082      	.short	0x0082
 80109ea:	0025      	movs	r5, r4
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	3542      	adds	r5, #66	@ 0x42
 80109f0:	1d11      	adds	r1, r2, #4
 80109f2:	6019      	str	r1, [r3, #0]
 80109f4:	6813      	ldr	r3, [r2, #0]
 80109f6:	702b      	strb	r3, [r5, #0]
 80109f8:	2301      	movs	r3, #1
 80109fa:	e09e      	b.n	8010b3a <_printf_i+0x1be>
 80109fc:	6818      	ldr	r0, [r3, #0]
 80109fe:	6809      	ldr	r1, [r1, #0]
 8010a00:	1d02      	adds	r2, r0, #4
 8010a02:	060d      	lsls	r5, r1, #24
 8010a04:	d50b      	bpl.n	8010a1e <_printf_i+0xa2>
 8010a06:	6806      	ldr	r6, [r0, #0]
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	2e00      	cmp	r6, #0
 8010a0c:	da03      	bge.n	8010a16 <_printf_i+0x9a>
 8010a0e:	232d      	movs	r3, #45	@ 0x2d
 8010a10:	9a03      	ldr	r2, [sp, #12]
 8010a12:	4276      	negs	r6, r6
 8010a14:	7013      	strb	r3, [r2, #0]
 8010a16:	4b5d      	ldr	r3, [pc, #372]	@ (8010b8c <_printf_i+0x210>)
 8010a18:	270a      	movs	r7, #10
 8010a1a:	9304      	str	r3, [sp, #16]
 8010a1c:	e018      	b.n	8010a50 <_printf_i+0xd4>
 8010a1e:	6806      	ldr	r6, [r0, #0]
 8010a20:	601a      	str	r2, [r3, #0]
 8010a22:	0649      	lsls	r1, r1, #25
 8010a24:	d5f1      	bpl.n	8010a0a <_printf_i+0x8e>
 8010a26:	b236      	sxth	r6, r6
 8010a28:	e7ef      	b.n	8010a0a <_printf_i+0x8e>
 8010a2a:	6808      	ldr	r0, [r1, #0]
 8010a2c:	6819      	ldr	r1, [r3, #0]
 8010a2e:	c940      	ldmia	r1!, {r6}
 8010a30:	0605      	lsls	r5, r0, #24
 8010a32:	d402      	bmi.n	8010a3a <_printf_i+0xbe>
 8010a34:	0640      	lsls	r0, r0, #25
 8010a36:	d500      	bpl.n	8010a3a <_printf_i+0xbe>
 8010a38:	b2b6      	uxth	r6, r6
 8010a3a:	6019      	str	r1, [r3, #0]
 8010a3c:	4b53      	ldr	r3, [pc, #332]	@ (8010b8c <_printf_i+0x210>)
 8010a3e:	270a      	movs	r7, #10
 8010a40:	9304      	str	r3, [sp, #16]
 8010a42:	2a6f      	cmp	r2, #111	@ 0x6f
 8010a44:	d100      	bne.n	8010a48 <_printf_i+0xcc>
 8010a46:	3f02      	subs	r7, #2
 8010a48:	0023      	movs	r3, r4
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	3343      	adds	r3, #67	@ 0x43
 8010a4e:	701a      	strb	r2, [r3, #0]
 8010a50:	6863      	ldr	r3, [r4, #4]
 8010a52:	60a3      	str	r3, [r4, #8]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	db06      	blt.n	8010a66 <_printf_i+0xea>
 8010a58:	2104      	movs	r1, #4
 8010a5a:	6822      	ldr	r2, [r4, #0]
 8010a5c:	9d03      	ldr	r5, [sp, #12]
 8010a5e:	438a      	bics	r2, r1
 8010a60:	6022      	str	r2, [r4, #0]
 8010a62:	4333      	orrs	r3, r6
 8010a64:	d00c      	beq.n	8010a80 <_printf_i+0x104>
 8010a66:	9d03      	ldr	r5, [sp, #12]
 8010a68:	0030      	movs	r0, r6
 8010a6a:	0039      	movs	r1, r7
 8010a6c:	f7ef fbf8 	bl	8000260 <__aeabi_uidivmod>
 8010a70:	9b04      	ldr	r3, [sp, #16]
 8010a72:	3d01      	subs	r5, #1
 8010a74:	5c5b      	ldrb	r3, [r3, r1]
 8010a76:	702b      	strb	r3, [r5, #0]
 8010a78:	0033      	movs	r3, r6
 8010a7a:	0006      	movs	r6, r0
 8010a7c:	429f      	cmp	r7, r3
 8010a7e:	d9f3      	bls.n	8010a68 <_printf_i+0xec>
 8010a80:	2f08      	cmp	r7, #8
 8010a82:	d109      	bne.n	8010a98 <_printf_i+0x11c>
 8010a84:	6823      	ldr	r3, [r4, #0]
 8010a86:	07db      	lsls	r3, r3, #31
 8010a88:	d506      	bpl.n	8010a98 <_printf_i+0x11c>
 8010a8a:	6862      	ldr	r2, [r4, #4]
 8010a8c:	6923      	ldr	r3, [r4, #16]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	dc02      	bgt.n	8010a98 <_printf_i+0x11c>
 8010a92:	2330      	movs	r3, #48	@ 0x30
 8010a94:	3d01      	subs	r5, #1
 8010a96:	702b      	strb	r3, [r5, #0]
 8010a98:	9b03      	ldr	r3, [sp, #12]
 8010a9a:	1b5b      	subs	r3, r3, r5
 8010a9c:	6123      	str	r3, [r4, #16]
 8010a9e:	9b07      	ldr	r3, [sp, #28]
 8010aa0:	0021      	movs	r1, r4
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	9805      	ldr	r0, [sp, #20]
 8010aa6:	9b06      	ldr	r3, [sp, #24]
 8010aa8:	aa09      	add	r2, sp, #36	@ 0x24
 8010aaa:	f7ff fef7 	bl	801089c <_printf_common>
 8010aae:	3001      	adds	r0, #1
 8010ab0:	d148      	bne.n	8010b44 <_printf_i+0x1c8>
 8010ab2:	2001      	movs	r0, #1
 8010ab4:	4240      	negs	r0, r0
 8010ab6:	b00b      	add	sp, #44	@ 0x2c
 8010ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aba:	2220      	movs	r2, #32
 8010abc:	6809      	ldr	r1, [r1, #0]
 8010abe:	430a      	orrs	r2, r1
 8010ac0:	6022      	str	r2, [r4, #0]
 8010ac2:	2278      	movs	r2, #120	@ 0x78
 8010ac4:	4932      	ldr	r1, [pc, #200]	@ (8010b90 <_printf_i+0x214>)
 8010ac6:	9104      	str	r1, [sp, #16]
 8010ac8:	0021      	movs	r1, r4
 8010aca:	3145      	adds	r1, #69	@ 0x45
 8010acc:	700a      	strb	r2, [r1, #0]
 8010ace:	6819      	ldr	r1, [r3, #0]
 8010ad0:	6822      	ldr	r2, [r4, #0]
 8010ad2:	c940      	ldmia	r1!, {r6}
 8010ad4:	0610      	lsls	r0, r2, #24
 8010ad6:	d402      	bmi.n	8010ade <_printf_i+0x162>
 8010ad8:	0650      	lsls	r0, r2, #25
 8010ada:	d500      	bpl.n	8010ade <_printf_i+0x162>
 8010adc:	b2b6      	uxth	r6, r6
 8010ade:	6019      	str	r1, [r3, #0]
 8010ae0:	07d3      	lsls	r3, r2, #31
 8010ae2:	d502      	bpl.n	8010aea <_printf_i+0x16e>
 8010ae4:	2320      	movs	r3, #32
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	2e00      	cmp	r6, #0
 8010aec:	d001      	beq.n	8010af2 <_printf_i+0x176>
 8010aee:	2710      	movs	r7, #16
 8010af0:	e7aa      	b.n	8010a48 <_printf_i+0xcc>
 8010af2:	2220      	movs	r2, #32
 8010af4:	6823      	ldr	r3, [r4, #0]
 8010af6:	4393      	bics	r3, r2
 8010af8:	6023      	str	r3, [r4, #0]
 8010afa:	e7f8      	b.n	8010aee <_printf_i+0x172>
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	680d      	ldr	r5, [r1, #0]
 8010b00:	1d10      	adds	r0, r2, #4
 8010b02:	6949      	ldr	r1, [r1, #20]
 8010b04:	6018      	str	r0, [r3, #0]
 8010b06:	6813      	ldr	r3, [r2, #0]
 8010b08:	062e      	lsls	r6, r5, #24
 8010b0a:	d501      	bpl.n	8010b10 <_printf_i+0x194>
 8010b0c:	6019      	str	r1, [r3, #0]
 8010b0e:	e002      	b.n	8010b16 <_printf_i+0x19a>
 8010b10:	066d      	lsls	r5, r5, #25
 8010b12:	d5fb      	bpl.n	8010b0c <_printf_i+0x190>
 8010b14:	8019      	strh	r1, [r3, #0]
 8010b16:	2300      	movs	r3, #0
 8010b18:	9d03      	ldr	r5, [sp, #12]
 8010b1a:	6123      	str	r3, [r4, #16]
 8010b1c:	e7bf      	b.n	8010a9e <_printf_i+0x122>
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	1d11      	adds	r1, r2, #4
 8010b22:	6019      	str	r1, [r3, #0]
 8010b24:	6815      	ldr	r5, [r2, #0]
 8010b26:	2100      	movs	r1, #0
 8010b28:	0028      	movs	r0, r5
 8010b2a:	6862      	ldr	r2, [r4, #4]
 8010b2c:	f000 f9a8 	bl	8010e80 <memchr>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	d001      	beq.n	8010b38 <_printf_i+0x1bc>
 8010b34:	1b40      	subs	r0, r0, r5
 8010b36:	6060      	str	r0, [r4, #4]
 8010b38:	6863      	ldr	r3, [r4, #4]
 8010b3a:	6123      	str	r3, [r4, #16]
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	9a03      	ldr	r2, [sp, #12]
 8010b40:	7013      	strb	r3, [r2, #0]
 8010b42:	e7ac      	b.n	8010a9e <_printf_i+0x122>
 8010b44:	002a      	movs	r2, r5
 8010b46:	6923      	ldr	r3, [r4, #16]
 8010b48:	9906      	ldr	r1, [sp, #24]
 8010b4a:	9805      	ldr	r0, [sp, #20]
 8010b4c:	9d07      	ldr	r5, [sp, #28]
 8010b4e:	47a8      	blx	r5
 8010b50:	3001      	adds	r0, #1
 8010b52:	d0ae      	beq.n	8010ab2 <_printf_i+0x136>
 8010b54:	6823      	ldr	r3, [r4, #0]
 8010b56:	079b      	lsls	r3, r3, #30
 8010b58:	d415      	bmi.n	8010b86 <_printf_i+0x20a>
 8010b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5c:	68e0      	ldr	r0, [r4, #12]
 8010b5e:	4298      	cmp	r0, r3
 8010b60:	daa9      	bge.n	8010ab6 <_printf_i+0x13a>
 8010b62:	0018      	movs	r0, r3
 8010b64:	e7a7      	b.n	8010ab6 <_printf_i+0x13a>
 8010b66:	0022      	movs	r2, r4
 8010b68:	2301      	movs	r3, #1
 8010b6a:	9906      	ldr	r1, [sp, #24]
 8010b6c:	9805      	ldr	r0, [sp, #20]
 8010b6e:	9e07      	ldr	r6, [sp, #28]
 8010b70:	3219      	adds	r2, #25
 8010b72:	47b0      	blx	r6
 8010b74:	3001      	adds	r0, #1
 8010b76:	d09c      	beq.n	8010ab2 <_printf_i+0x136>
 8010b78:	3501      	adds	r5, #1
 8010b7a:	68e3      	ldr	r3, [r4, #12]
 8010b7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b7e:	1a9b      	subs	r3, r3, r2
 8010b80:	42ab      	cmp	r3, r5
 8010b82:	dcf0      	bgt.n	8010b66 <_printf_i+0x1ea>
 8010b84:	e7e9      	b.n	8010b5a <_printf_i+0x1de>
 8010b86:	2500      	movs	r5, #0
 8010b88:	e7f7      	b.n	8010b7a <_printf_i+0x1fe>
 8010b8a:	46c0      	nop			@ (mov r8, r8)
 8010b8c:	0801c3b4 	.word	0x0801c3b4
 8010b90:	0801c3c5 	.word	0x0801c3c5

08010b94 <__sflush_r>:
 8010b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b96:	220c      	movs	r2, #12
 8010b98:	5e8b      	ldrsh	r3, [r1, r2]
 8010b9a:	0005      	movs	r5, r0
 8010b9c:	000c      	movs	r4, r1
 8010b9e:	071a      	lsls	r2, r3, #28
 8010ba0:	d456      	bmi.n	8010c50 <__sflush_r+0xbc>
 8010ba2:	684a      	ldr	r2, [r1, #4]
 8010ba4:	2a00      	cmp	r2, #0
 8010ba6:	dc02      	bgt.n	8010bae <__sflush_r+0x1a>
 8010ba8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8010baa:	2a00      	cmp	r2, #0
 8010bac:	dd4e      	ble.n	8010c4c <__sflush_r+0xb8>
 8010bae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010bb0:	2f00      	cmp	r7, #0
 8010bb2:	d04b      	beq.n	8010c4c <__sflush_r+0xb8>
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	2080      	movs	r0, #128	@ 0x80
 8010bb8:	682e      	ldr	r6, [r5, #0]
 8010bba:	602a      	str	r2, [r5, #0]
 8010bbc:	001a      	movs	r2, r3
 8010bbe:	0140      	lsls	r0, r0, #5
 8010bc0:	6a21      	ldr	r1, [r4, #32]
 8010bc2:	4002      	ands	r2, r0
 8010bc4:	4203      	tst	r3, r0
 8010bc6:	d033      	beq.n	8010c30 <__sflush_r+0x9c>
 8010bc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	075b      	lsls	r3, r3, #29
 8010bce:	d506      	bpl.n	8010bde <__sflush_r+0x4a>
 8010bd0:	6863      	ldr	r3, [r4, #4]
 8010bd2:	1ad2      	subs	r2, r2, r3
 8010bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d001      	beq.n	8010bde <__sflush_r+0x4a>
 8010bda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010bdc:	1ad2      	subs	r2, r2, r3
 8010bde:	2300      	movs	r3, #0
 8010be0:	0028      	movs	r0, r5
 8010be2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010be4:	6a21      	ldr	r1, [r4, #32]
 8010be6:	47b8      	blx	r7
 8010be8:	89a2      	ldrh	r2, [r4, #12]
 8010bea:	1c43      	adds	r3, r0, #1
 8010bec:	d106      	bne.n	8010bfc <__sflush_r+0x68>
 8010bee:	6829      	ldr	r1, [r5, #0]
 8010bf0:	291d      	cmp	r1, #29
 8010bf2:	d846      	bhi.n	8010c82 <__sflush_r+0xee>
 8010bf4:	4b29      	ldr	r3, [pc, #164]	@ (8010c9c <__sflush_r+0x108>)
 8010bf6:	40cb      	lsrs	r3, r1
 8010bf8:	07db      	lsls	r3, r3, #31
 8010bfa:	d542      	bpl.n	8010c82 <__sflush_r+0xee>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	6063      	str	r3, [r4, #4]
 8010c00:	6923      	ldr	r3, [r4, #16]
 8010c02:	6023      	str	r3, [r4, #0]
 8010c04:	04d2      	lsls	r2, r2, #19
 8010c06:	d505      	bpl.n	8010c14 <__sflush_r+0x80>
 8010c08:	1c43      	adds	r3, r0, #1
 8010c0a:	d102      	bne.n	8010c12 <__sflush_r+0x7e>
 8010c0c:	682b      	ldr	r3, [r5, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d100      	bne.n	8010c14 <__sflush_r+0x80>
 8010c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c16:	602e      	str	r6, [r5, #0]
 8010c18:	2900      	cmp	r1, #0
 8010c1a:	d017      	beq.n	8010c4c <__sflush_r+0xb8>
 8010c1c:	0023      	movs	r3, r4
 8010c1e:	3344      	adds	r3, #68	@ 0x44
 8010c20:	4299      	cmp	r1, r3
 8010c22:	d002      	beq.n	8010c2a <__sflush_r+0x96>
 8010c24:	0028      	movs	r0, r5
 8010c26:	f7fe fa5f 	bl	800f0e8 <_free_r>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c2e:	e00d      	b.n	8010c4c <__sflush_r+0xb8>
 8010c30:	2301      	movs	r3, #1
 8010c32:	0028      	movs	r0, r5
 8010c34:	47b8      	blx	r7
 8010c36:	0002      	movs	r2, r0
 8010c38:	1c43      	adds	r3, r0, #1
 8010c3a:	d1c6      	bne.n	8010bca <__sflush_r+0x36>
 8010c3c:	682b      	ldr	r3, [r5, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d0c3      	beq.n	8010bca <__sflush_r+0x36>
 8010c42:	2b1d      	cmp	r3, #29
 8010c44:	d001      	beq.n	8010c4a <__sflush_r+0xb6>
 8010c46:	2b16      	cmp	r3, #22
 8010c48:	d11a      	bne.n	8010c80 <__sflush_r+0xec>
 8010c4a:	602e      	str	r6, [r5, #0]
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	e01e      	b.n	8010c8e <__sflush_r+0xfa>
 8010c50:	690e      	ldr	r6, [r1, #16]
 8010c52:	2e00      	cmp	r6, #0
 8010c54:	d0fa      	beq.n	8010c4c <__sflush_r+0xb8>
 8010c56:	680f      	ldr	r7, [r1, #0]
 8010c58:	600e      	str	r6, [r1, #0]
 8010c5a:	1bba      	subs	r2, r7, r6
 8010c5c:	9201      	str	r2, [sp, #4]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	079b      	lsls	r3, r3, #30
 8010c62:	d100      	bne.n	8010c66 <__sflush_r+0xd2>
 8010c64:	694a      	ldr	r2, [r1, #20]
 8010c66:	60a2      	str	r2, [r4, #8]
 8010c68:	9b01      	ldr	r3, [sp, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	ddee      	ble.n	8010c4c <__sflush_r+0xb8>
 8010c6e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010c70:	0032      	movs	r2, r6
 8010c72:	001f      	movs	r7, r3
 8010c74:	0028      	movs	r0, r5
 8010c76:	9b01      	ldr	r3, [sp, #4]
 8010c78:	6a21      	ldr	r1, [r4, #32]
 8010c7a:	47b8      	blx	r7
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	dc07      	bgt.n	8010c90 <__sflush_r+0xfc>
 8010c80:	89a2      	ldrh	r2, [r4, #12]
 8010c82:	2340      	movs	r3, #64	@ 0x40
 8010c84:	2001      	movs	r0, #1
 8010c86:	4313      	orrs	r3, r2
 8010c88:	b21b      	sxth	r3, r3
 8010c8a:	81a3      	strh	r3, [r4, #12]
 8010c8c:	4240      	negs	r0, r0
 8010c8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010c90:	9b01      	ldr	r3, [sp, #4]
 8010c92:	1836      	adds	r6, r6, r0
 8010c94:	1a1b      	subs	r3, r3, r0
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	e7e6      	b.n	8010c68 <__sflush_r+0xd4>
 8010c9a:	46c0      	nop			@ (mov r8, r8)
 8010c9c:	20400001 	.word	0x20400001

08010ca0 <_fflush_r>:
 8010ca0:	690b      	ldr	r3, [r1, #16]
 8010ca2:	b570      	push	{r4, r5, r6, lr}
 8010ca4:	0005      	movs	r5, r0
 8010ca6:	000c      	movs	r4, r1
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d102      	bne.n	8010cb2 <_fflush_r+0x12>
 8010cac:	2500      	movs	r5, #0
 8010cae:	0028      	movs	r0, r5
 8010cb0:	bd70      	pop	{r4, r5, r6, pc}
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d004      	beq.n	8010cc0 <_fflush_r+0x20>
 8010cb6:	6a03      	ldr	r3, [r0, #32]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d101      	bne.n	8010cc0 <_fflush_r+0x20>
 8010cbc:	f7fe f8ce 	bl	800ee5c <__sinit>
 8010cc0:	220c      	movs	r2, #12
 8010cc2:	5ea3      	ldrsh	r3, [r4, r2]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d0f1      	beq.n	8010cac <_fflush_r+0xc>
 8010cc8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cca:	07d2      	lsls	r2, r2, #31
 8010ccc:	d404      	bmi.n	8010cd8 <_fflush_r+0x38>
 8010cce:	059b      	lsls	r3, r3, #22
 8010cd0:	d402      	bmi.n	8010cd8 <_fflush_r+0x38>
 8010cd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cd4:	f7fe f9f7 	bl	800f0c6 <__retarget_lock_acquire_recursive>
 8010cd8:	0028      	movs	r0, r5
 8010cda:	0021      	movs	r1, r4
 8010cdc:	f7ff ff5a 	bl	8010b94 <__sflush_r>
 8010ce0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ce2:	0005      	movs	r5, r0
 8010ce4:	07db      	lsls	r3, r3, #31
 8010ce6:	d4e2      	bmi.n	8010cae <_fflush_r+0xe>
 8010ce8:	89a3      	ldrh	r3, [r4, #12]
 8010cea:	059b      	lsls	r3, r3, #22
 8010cec:	d4df      	bmi.n	8010cae <_fflush_r+0xe>
 8010cee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cf0:	f7fe f9ea 	bl	800f0c8 <__retarget_lock_release_recursive>
 8010cf4:	e7db      	b.n	8010cae <_fflush_r+0xe>

08010cf6 <__swbuf_r>:
 8010cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cf8:	0006      	movs	r6, r0
 8010cfa:	000d      	movs	r5, r1
 8010cfc:	0014      	movs	r4, r2
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d004      	beq.n	8010d0c <__swbuf_r+0x16>
 8010d02:	6a03      	ldr	r3, [r0, #32]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <__swbuf_r+0x16>
 8010d08:	f7fe f8a8 	bl	800ee5c <__sinit>
 8010d0c:	69a3      	ldr	r3, [r4, #24]
 8010d0e:	60a3      	str	r3, [r4, #8]
 8010d10:	89a3      	ldrh	r3, [r4, #12]
 8010d12:	071b      	lsls	r3, r3, #28
 8010d14:	d502      	bpl.n	8010d1c <__swbuf_r+0x26>
 8010d16:	6923      	ldr	r3, [r4, #16]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d109      	bne.n	8010d30 <__swbuf_r+0x3a>
 8010d1c:	0021      	movs	r1, r4
 8010d1e:	0030      	movs	r0, r6
 8010d20:	f000 f82c 	bl	8010d7c <__swsetup_r>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d003      	beq.n	8010d30 <__swbuf_r+0x3a>
 8010d28:	2501      	movs	r5, #1
 8010d2a:	426d      	negs	r5, r5
 8010d2c:	0028      	movs	r0, r5
 8010d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d30:	6923      	ldr	r3, [r4, #16]
 8010d32:	6820      	ldr	r0, [r4, #0]
 8010d34:	b2ef      	uxtb	r7, r5
 8010d36:	1ac0      	subs	r0, r0, r3
 8010d38:	6963      	ldr	r3, [r4, #20]
 8010d3a:	b2ed      	uxtb	r5, r5
 8010d3c:	4283      	cmp	r3, r0
 8010d3e:	dc05      	bgt.n	8010d4c <__swbuf_r+0x56>
 8010d40:	0021      	movs	r1, r4
 8010d42:	0030      	movs	r0, r6
 8010d44:	f7ff ffac 	bl	8010ca0 <_fflush_r>
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	d1ed      	bne.n	8010d28 <__swbuf_r+0x32>
 8010d4c:	68a3      	ldr	r3, [r4, #8]
 8010d4e:	3001      	adds	r0, #1
 8010d50:	3b01      	subs	r3, #1
 8010d52:	60a3      	str	r3, [r4, #8]
 8010d54:	6823      	ldr	r3, [r4, #0]
 8010d56:	1c5a      	adds	r2, r3, #1
 8010d58:	6022      	str	r2, [r4, #0]
 8010d5a:	701f      	strb	r7, [r3, #0]
 8010d5c:	6963      	ldr	r3, [r4, #20]
 8010d5e:	4283      	cmp	r3, r0
 8010d60:	d004      	beq.n	8010d6c <__swbuf_r+0x76>
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	07db      	lsls	r3, r3, #31
 8010d66:	d5e1      	bpl.n	8010d2c <__swbuf_r+0x36>
 8010d68:	2d0a      	cmp	r5, #10
 8010d6a:	d1df      	bne.n	8010d2c <__swbuf_r+0x36>
 8010d6c:	0021      	movs	r1, r4
 8010d6e:	0030      	movs	r0, r6
 8010d70:	f7ff ff96 	bl	8010ca0 <_fflush_r>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	d0d9      	beq.n	8010d2c <__swbuf_r+0x36>
 8010d78:	e7d6      	b.n	8010d28 <__swbuf_r+0x32>
	...

08010d7c <__swsetup_r>:
 8010d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8010e34 <__swsetup_r+0xb8>)
 8010d7e:	b570      	push	{r4, r5, r6, lr}
 8010d80:	0005      	movs	r5, r0
 8010d82:	6818      	ldr	r0, [r3, #0]
 8010d84:	000c      	movs	r4, r1
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d004      	beq.n	8010d94 <__swsetup_r+0x18>
 8010d8a:	6a03      	ldr	r3, [r0, #32]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <__swsetup_r+0x18>
 8010d90:	f7fe f864 	bl	800ee5c <__sinit>
 8010d94:	220c      	movs	r2, #12
 8010d96:	5ea3      	ldrsh	r3, [r4, r2]
 8010d98:	071a      	lsls	r2, r3, #28
 8010d9a:	d423      	bmi.n	8010de4 <__swsetup_r+0x68>
 8010d9c:	06da      	lsls	r2, r3, #27
 8010d9e:	d407      	bmi.n	8010db0 <__swsetup_r+0x34>
 8010da0:	2209      	movs	r2, #9
 8010da2:	602a      	str	r2, [r5, #0]
 8010da4:	2240      	movs	r2, #64	@ 0x40
 8010da6:	2001      	movs	r0, #1
 8010da8:	4313      	orrs	r3, r2
 8010daa:	81a3      	strh	r3, [r4, #12]
 8010dac:	4240      	negs	r0, r0
 8010dae:	e03a      	b.n	8010e26 <__swsetup_r+0xaa>
 8010db0:	075b      	lsls	r3, r3, #29
 8010db2:	d513      	bpl.n	8010ddc <__swsetup_r+0x60>
 8010db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010db6:	2900      	cmp	r1, #0
 8010db8:	d008      	beq.n	8010dcc <__swsetup_r+0x50>
 8010dba:	0023      	movs	r3, r4
 8010dbc:	3344      	adds	r3, #68	@ 0x44
 8010dbe:	4299      	cmp	r1, r3
 8010dc0:	d002      	beq.n	8010dc8 <__swsetup_r+0x4c>
 8010dc2:	0028      	movs	r0, r5
 8010dc4:	f7fe f990 	bl	800f0e8 <_free_r>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	6363      	str	r3, [r4, #52]	@ 0x34
 8010dcc:	2224      	movs	r2, #36	@ 0x24
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	4393      	bics	r3, r2
 8010dd2:	81a3      	strh	r3, [r4, #12]
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	6063      	str	r3, [r4, #4]
 8010dd8:	6923      	ldr	r3, [r4, #16]
 8010dda:	6023      	str	r3, [r4, #0]
 8010ddc:	2308      	movs	r3, #8
 8010dde:	89a2      	ldrh	r2, [r4, #12]
 8010de0:	4313      	orrs	r3, r2
 8010de2:	81a3      	strh	r3, [r4, #12]
 8010de4:	6923      	ldr	r3, [r4, #16]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10b      	bne.n	8010e02 <__swsetup_r+0x86>
 8010dea:	21a0      	movs	r1, #160	@ 0xa0
 8010dec:	2280      	movs	r2, #128	@ 0x80
 8010dee:	89a3      	ldrh	r3, [r4, #12]
 8010df0:	0089      	lsls	r1, r1, #2
 8010df2:	0092      	lsls	r2, r2, #2
 8010df4:	400b      	ands	r3, r1
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d003      	beq.n	8010e02 <__swsetup_r+0x86>
 8010dfa:	0021      	movs	r1, r4
 8010dfc:	0028      	movs	r0, r5
 8010dfe:	f000 f90b 	bl	8011018 <__smakebuf_r>
 8010e02:	220c      	movs	r2, #12
 8010e04:	5ea3      	ldrsh	r3, [r4, r2]
 8010e06:	2101      	movs	r1, #1
 8010e08:	001a      	movs	r2, r3
 8010e0a:	400a      	ands	r2, r1
 8010e0c:	420b      	tst	r3, r1
 8010e0e:	d00b      	beq.n	8010e28 <__swsetup_r+0xac>
 8010e10:	2200      	movs	r2, #0
 8010e12:	60a2      	str	r2, [r4, #8]
 8010e14:	6962      	ldr	r2, [r4, #20]
 8010e16:	4252      	negs	r2, r2
 8010e18:	61a2      	str	r2, [r4, #24]
 8010e1a:	2000      	movs	r0, #0
 8010e1c:	6922      	ldr	r2, [r4, #16]
 8010e1e:	4282      	cmp	r2, r0
 8010e20:	d101      	bne.n	8010e26 <__swsetup_r+0xaa>
 8010e22:	061a      	lsls	r2, r3, #24
 8010e24:	d4be      	bmi.n	8010da4 <__swsetup_r+0x28>
 8010e26:	bd70      	pop	{r4, r5, r6, pc}
 8010e28:	0799      	lsls	r1, r3, #30
 8010e2a:	d400      	bmi.n	8010e2e <__swsetup_r+0xb2>
 8010e2c:	6962      	ldr	r2, [r4, #20]
 8010e2e:	60a2      	str	r2, [r4, #8]
 8010e30:	e7f3      	b.n	8010e1a <__swsetup_r+0x9e>
 8010e32:	46c0      	nop			@ (mov r8, r8)
 8010e34:	20000188 	.word	0x20000188

08010e38 <memmove>:
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	4288      	cmp	r0, r1
 8010e3c:	d902      	bls.n	8010e44 <memmove+0xc>
 8010e3e:	188b      	adds	r3, r1, r2
 8010e40:	4298      	cmp	r0, r3
 8010e42:	d308      	bcc.n	8010e56 <memmove+0x1e>
 8010e44:	2300      	movs	r3, #0
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d007      	beq.n	8010e5a <memmove+0x22>
 8010e4a:	5ccc      	ldrb	r4, [r1, r3]
 8010e4c:	54c4      	strb	r4, [r0, r3]
 8010e4e:	3301      	adds	r3, #1
 8010e50:	e7f9      	b.n	8010e46 <memmove+0xe>
 8010e52:	5c8b      	ldrb	r3, [r1, r2]
 8010e54:	5483      	strb	r3, [r0, r2]
 8010e56:	3a01      	subs	r2, #1
 8010e58:	d2fb      	bcs.n	8010e52 <memmove+0x1a>
 8010e5a:	bd10      	pop	{r4, pc}

08010e5c <_sbrk_r>:
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	b570      	push	{r4, r5, r6, lr}
 8010e60:	4d06      	ldr	r5, [pc, #24]	@ (8010e7c <_sbrk_r+0x20>)
 8010e62:	0004      	movs	r4, r0
 8010e64:	0008      	movs	r0, r1
 8010e66:	602b      	str	r3, [r5, #0]
 8010e68:	f7f7 fa9e 	bl	80083a8 <_sbrk>
 8010e6c:	1c43      	adds	r3, r0, #1
 8010e6e:	d103      	bne.n	8010e78 <_sbrk_r+0x1c>
 8010e70:	682b      	ldr	r3, [r5, #0]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d000      	beq.n	8010e78 <_sbrk_r+0x1c>
 8010e76:	6023      	str	r3, [r4, #0]
 8010e78:	bd70      	pop	{r4, r5, r6, pc}
 8010e7a:	46c0      	nop			@ (mov r8, r8)
 8010e7c:	20001634 	.word	0x20001634

08010e80 <memchr>:
 8010e80:	b2c9      	uxtb	r1, r1
 8010e82:	1882      	adds	r2, r0, r2
 8010e84:	4290      	cmp	r0, r2
 8010e86:	d101      	bne.n	8010e8c <memchr+0xc>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	4770      	bx	lr
 8010e8c:	7803      	ldrb	r3, [r0, #0]
 8010e8e:	428b      	cmp	r3, r1
 8010e90:	d0fb      	beq.n	8010e8a <memchr+0xa>
 8010e92:	3001      	adds	r0, #1
 8010e94:	e7f6      	b.n	8010e84 <memchr+0x4>
	...

08010e98 <__assert_func>:
 8010e98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010e9a:	0014      	movs	r4, r2
 8010e9c:	001a      	movs	r2, r3
 8010e9e:	4b09      	ldr	r3, [pc, #36]	@ (8010ec4 <__assert_func+0x2c>)
 8010ea0:	0005      	movs	r5, r0
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	000e      	movs	r6, r1
 8010ea6:	68d8      	ldr	r0, [r3, #12]
 8010ea8:	4b07      	ldr	r3, [pc, #28]	@ (8010ec8 <__assert_func+0x30>)
 8010eaa:	2c00      	cmp	r4, #0
 8010eac:	d101      	bne.n	8010eb2 <__assert_func+0x1a>
 8010eae:	4b07      	ldr	r3, [pc, #28]	@ (8010ecc <__assert_func+0x34>)
 8010eb0:	001c      	movs	r4, r3
 8010eb2:	4907      	ldr	r1, [pc, #28]	@ (8010ed0 <__assert_func+0x38>)
 8010eb4:	9301      	str	r3, [sp, #4]
 8010eb6:	9402      	str	r4, [sp, #8]
 8010eb8:	002b      	movs	r3, r5
 8010eba:	9600      	str	r6, [sp, #0]
 8010ebc:	f000 f872 	bl	8010fa4 <fiprintf>
 8010ec0:	f000 f910 	bl	80110e4 <abort>
 8010ec4:	20000188 	.word	0x20000188
 8010ec8:	0801c3d6 	.word	0x0801c3d6
 8010ecc:	0801c411 	.word	0x0801c411
 8010ed0:	0801c3e3 	.word	0x0801c3e3

08010ed4 <_calloc_r>:
 8010ed4:	b570      	push	{r4, r5, r6, lr}
 8010ed6:	0c0b      	lsrs	r3, r1, #16
 8010ed8:	0c15      	lsrs	r5, r2, #16
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d11e      	bne.n	8010f1c <_calloc_r+0x48>
 8010ede:	2d00      	cmp	r5, #0
 8010ee0:	d10c      	bne.n	8010efc <_calloc_r+0x28>
 8010ee2:	b289      	uxth	r1, r1
 8010ee4:	b294      	uxth	r4, r2
 8010ee6:	434c      	muls	r4, r1
 8010ee8:	0021      	movs	r1, r4
 8010eea:	f7fe fcc3 	bl	800f874 <_malloc_r>
 8010eee:	1e05      	subs	r5, r0, #0
 8010ef0:	d01b      	beq.n	8010f2a <_calloc_r+0x56>
 8010ef2:	0022      	movs	r2, r4
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	f7fe f853 	bl	800efa0 <memset>
 8010efa:	e016      	b.n	8010f2a <_calloc_r+0x56>
 8010efc:	1c2b      	adds	r3, r5, #0
 8010efe:	1c0c      	adds	r4, r1, #0
 8010f00:	b289      	uxth	r1, r1
 8010f02:	b292      	uxth	r2, r2
 8010f04:	434a      	muls	r2, r1
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	b2a1      	uxth	r1, r4
 8010f0a:	4359      	muls	r1, r3
 8010f0c:	0c14      	lsrs	r4, r2, #16
 8010f0e:	190c      	adds	r4, r1, r4
 8010f10:	0c23      	lsrs	r3, r4, #16
 8010f12:	d107      	bne.n	8010f24 <_calloc_r+0x50>
 8010f14:	0424      	lsls	r4, r4, #16
 8010f16:	b292      	uxth	r2, r2
 8010f18:	4314      	orrs	r4, r2
 8010f1a:	e7e5      	b.n	8010ee8 <_calloc_r+0x14>
 8010f1c:	2d00      	cmp	r5, #0
 8010f1e:	d101      	bne.n	8010f24 <_calloc_r+0x50>
 8010f20:	1c14      	adds	r4, r2, #0
 8010f22:	e7ed      	b.n	8010f00 <_calloc_r+0x2c>
 8010f24:	230c      	movs	r3, #12
 8010f26:	2500      	movs	r5, #0
 8010f28:	6003      	str	r3, [r0, #0]
 8010f2a:	0028      	movs	r0, r5
 8010f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010f30 <malloc>:
 8010f30:	b510      	push	{r4, lr}
 8010f32:	4b03      	ldr	r3, [pc, #12]	@ (8010f40 <malloc+0x10>)
 8010f34:	0001      	movs	r1, r0
 8010f36:	6818      	ldr	r0, [r3, #0]
 8010f38:	f7fe fc9c 	bl	800f874 <_malloc_r>
 8010f3c:	bd10      	pop	{r4, pc}
 8010f3e:	46c0      	nop			@ (mov r8, r8)
 8010f40:	20000188 	.word	0x20000188

08010f44 <_realloc_r>:
 8010f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f46:	0006      	movs	r6, r0
 8010f48:	000c      	movs	r4, r1
 8010f4a:	0015      	movs	r5, r2
 8010f4c:	2900      	cmp	r1, #0
 8010f4e:	d105      	bne.n	8010f5c <_realloc_r+0x18>
 8010f50:	0011      	movs	r1, r2
 8010f52:	f7fe fc8f 	bl	800f874 <_malloc_r>
 8010f56:	0004      	movs	r4, r0
 8010f58:	0020      	movs	r0, r4
 8010f5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010f5c:	2a00      	cmp	r2, #0
 8010f5e:	d103      	bne.n	8010f68 <_realloc_r+0x24>
 8010f60:	f7fe f8c2 	bl	800f0e8 <_free_r>
 8010f64:	002c      	movs	r4, r5
 8010f66:	e7f7      	b.n	8010f58 <_realloc_r+0x14>
 8010f68:	f000 f8c3 	bl	80110f2 <_malloc_usable_size_r>
 8010f6c:	0007      	movs	r7, r0
 8010f6e:	4285      	cmp	r5, r0
 8010f70:	d802      	bhi.n	8010f78 <_realloc_r+0x34>
 8010f72:	0843      	lsrs	r3, r0, #1
 8010f74:	42ab      	cmp	r3, r5
 8010f76:	d3ef      	bcc.n	8010f58 <_realloc_r+0x14>
 8010f78:	0029      	movs	r1, r5
 8010f7a:	0030      	movs	r0, r6
 8010f7c:	f7fe fc7a 	bl	800f874 <_malloc_r>
 8010f80:	9001      	str	r0, [sp, #4]
 8010f82:	2800      	cmp	r0, #0
 8010f84:	d101      	bne.n	8010f8a <_realloc_r+0x46>
 8010f86:	9c01      	ldr	r4, [sp, #4]
 8010f88:	e7e6      	b.n	8010f58 <_realloc_r+0x14>
 8010f8a:	002a      	movs	r2, r5
 8010f8c:	42bd      	cmp	r5, r7
 8010f8e:	d900      	bls.n	8010f92 <_realloc_r+0x4e>
 8010f90:	003a      	movs	r2, r7
 8010f92:	0021      	movs	r1, r4
 8010f94:	9801      	ldr	r0, [sp, #4]
 8010f96:	f7fe f898 	bl	800f0ca <memcpy>
 8010f9a:	0021      	movs	r1, r4
 8010f9c:	0030      	movs	r0, r6
 8010f9e:	f7fe f8a3 	bl	800f0e8 <_free_r>
 8010fa2:	e7f0      	b.n	8010f86 <_realloc_r+0x42>

08010fa4 <fiprintf>:
 8010fa4:	b40e      	push	{r1, r2, r3}
 8010fa6:	b517      	push	{r0, r1, r2, r4, lr}
 8010fa8:	4c05      	ldr	r4, [pc, #20]	@ (8010fc0 <fiprintf+0x1c>)
 8010faa:	ab05      	add	r3, sp, #20
 8010fac:	cb04      	ldmia	r3!, {r2}
 8010fae:	0001      	movs	r1, r0
 8010fb0:	6820      	ldr	r0, [r4, #0]
 8010fb2:	9301      	str	r3, [sp, #4]
 8010fb4:	f7ff fb56 	bl	8010664 <_vfiprintf_r>
 8010fb8:	bc1e      	pop	{r1, r2, r3, r4}
 8010fba:	bc08      	pop	{r3}
 8010fbc:	b003      	add	sp, #12
 8010fbe:	4718      	bx	r3
 8010fc0:	20000188 	.word	0x20000188

08010fc4 <__swhatbuf_r>:
 8010fc4:	b570      	push	{r4, r5, r6, lr}
 8010fc6:	000e      	movs	r6, r1
 8010fc8:	001d      	movs	r5, r3
 8010fca:	230e      	movs	r3, #14
 8010fcc:	5ec9      	ldrsh	r1, [r1, r3]
 8010fce:	0014      	movs	r4, r2
 8010fd0:	b096      	sub	sp, #88	@ 0x58
 8010fd2:	2900      	cmp	r1, #0
 8010fd4:	da0c      	bge.n	8010ff0 <__swhatbuf_r+0x2c>
 8010fd6:	89b2      	ldrh	r2, [r6, #12]
 8010fd8:	2380      	movs	r3, #128	@ 0x80
 8010fda:	0011      	movs	r1, r2
 8010fdc:	4019      	ands	r1, r3
 8010fde:	421a      	tst	r2, r3
 8010fe0:	d114      	bne.n	801100c <__swhatbuf_r+0x48>
 8010fe2:	2380      	movs	r3, #128	@ 0x80
 8010fe4:	00db      	lsls	r3, r3, #3
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	6029      	str	r1, [r5, #0]
 8010fea:	6023      	str	r3, [r4, #0]
 8010fec:	b016      	add	sp, #88	@ 0x58
 8010fee:	bd70      	pop	{r4, r5, r6, pc}
 8010ff0:	466a      	mov	r2, sp
 8010ff2:	f000 f853 	bl	801109c <_fstat_r>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	dbed      	blt.n	8010fd6 <__swhatbuf_r+0x12>
 8010ffa:	23f0      	movs	r3, #240	@ 0xf0
 8010ffc:	9901      	ldr	r1, [sp, #4]
 8010ffe:	021b      	lsls	r3, r3, #8
 8011000:	4019      	ands	r1, r3
 8011002:	4b04      	ldr	r3, [pc, #16]	@ (8011014 <__swhatbuf_r+0x50>)
 8011004:	18c9      	adds	r1, r1, r3
 8011006:	424b      	negs	r3, r1
 8011008:	4159      	adcs	r1, r3
 801100a:	e7ea      	b.n	8010fe2 <__swhatbuf_r+0x1e>
 801100c:	2100      	movs	r1, #0
 801100e:	2340      	movs	r3, #64	@ 0x40
 8011010:	e7e9      	b.n	8010fe6 <__swhatbuf_r+0x22>
 8011012:	46c0      	nop			@ (mov r8, r8)
 8011014:	ffffe000 	.word	0xffffe000

08011018 <__smakebuf_r>:
 8011018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801101a:	2602      	movs	r6, #2
 801101c:	898b      	ldrh	r3, [r1, #12]
 801101e:	0005      	movs	r5, r0
 8011020:	000c      	movs	r4, r1
 8011022:	b085      	sub	sp, #20
 8011024:	4233      	tst	r3, r6
 8011026:	d007      	beq.n	8011038 <__smakebuf_r+0x20>
 8011028:	0023      	movs	r3, r4
 801102a:	3347      	adds	r3, #71	@ 0x47
 801102c:	6023      	str	r3, [r4, #0]
 801102e:	6123      	str	r3, [r4, #16]
 8011030:	2301      	movs	r3, #1
 8011032:	6163      	str	r3, [r4, #20]
 8011034:	b005      	add	sp, #20
 8011036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011038:	ab03      	add	r3, sp, #12
 801103a:	aa02      	add	r2, sp, #8
 801103c:	f7ff ffc2 	bl	8010fc4 <__swhatbuf_r>
 8011040:	9f02      	ldr	r7, [sp, #8]
 8011042:	9001      	str	r0, [sp, #4]
 8011044:	0039      	movs	r1, r7
 8011046:	0028      	movs	r0, r5
 8011048:	f7fe fc14 	bl	800f874 <_malloc_r>
 801104c:	2800      	cmp	r0, #0
 801104e:	d108      	bne.n	8011062 <__smakebuf_r+0x4a>
 8011050:	220c      	movs	r2, #12
 8011052:	5ea3      	ldrsh	r3, [r4, r2]
 8011054:	059a      	lsls	r2, r3, #22
 8011056:	d4ed      	bmi.n	8011034 <__smakebuf_r+0x1c>
 8011058:	2203      	movs	r2, #3
 801105a:	4393      	bics	r3, r2
 801105c:	431e      	orrs	r6, r3
 801105e:	81a6      	strh	r6, [r4, #12]
 8011060:	e7e2      	b.n	8011028 <__smakebuf_r+0x10>
 8011062:	2380      	movs	r3, #128	@ 0x80
 8011064:	89a2      	ldrh	r2, [r4, #12]
 8011066:	6020      	str	r0, [r4, #0]
 8011068:	4313      	orrs	r3, r2
 801106a:	81a3      	strh	r3, [r4, #12]
 801106c:	9b03      	ldr	r3, [sp, #12]
 801106e:	6120      	str	r0, [r4, #16]
 8011070:	6167      	str	r7, [r4, #20]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00c      	beq.n	8011090 <__smakebuf_r+0x78>
 8011076:	0028      	movs	r0, r5
 8011078:	230e      	movs	r3, #14
 801107a:	5ee1      	ldrsh	r1, [r4, r3]
 801107c:	f000 f820 	bl	80110c0 <_isatty_r>
 8011080:	2800      	cmp	r0, #0
 8011082:	d005      	beq.n	8011090 <__smakebuf_r+0x78>
 8011084:	2303      	movs	r3, #3
 8011086:	89a2      	ldrh	r2, [r4, #12]
 8011088:	439a      	bics	r2, r3
 801108a:	3b02      	subs	r3, #2
 801108c:	4313      	orrs	r3, r2
 801108e:	81a3      	strh	r3, [r4, #12]
 8011090:	89a3      	ldrh	r3, [r4, #12]
 8011092:	9a01      	ldr	r2, [sp, #4]
 8011094:	4313      	orrs	r3, r2
 8011096:	81a3      	strh	r3, [r4, #12]
 8011098:	e7cc      	b.n	8011034 <__smakebuf_r+0x1c>
	...

0801109c <_fstat_r>:
 801109c:	2300      	movs	r3, #0
 801109e:	b570      	push	{r4, r5, r6, lr}
 80110a0:	4d06      	ldr	r5, [pc, #24]	@ (80110bc <_fstat_r+0x20>)
 80110a2:	0004      	movs	r4, r0
 80110a4:	0008      	movs	r0, r1
 80110a6:	0011      	movs	r1, r2
 80110a8:	602b      	str	r3, [r5, #0]
 80110aa:	f7f7 f95a 	bl	8008362 <_fstat>
 80110ae:	1c43      	adds	r3, r0, #1
 80110b0:	d103      	bne.n	80110ba <_fstat_r+0x1e>
 80110b2:	682b      	ldr	r3, [r5, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d000      	beq.n	80110ba <_fstat_r+0x1e>
 80110b8:	6023      	str	r3, [r4, #0]
 80110ba:	bd70      	pop	{r4, r5, r6, pc}
 80110bc:	20001634 	.word	0x20001634

080110c0 <_isatty_r>:
 80110c0:	2300      	movs	r3, #0
 80110c2:	b570      	push	{r4, r5, r6, lr}
 80110c4:	4d06      	ldr	r5, [pc, #24]	@ (80110e0 <_isatty_r+0x20>)
 80110c6:	0004      	movs	r4, r0
 80110c8:	0008      	movs	r0, r1
 80110ca:	602b      	str	r3, [r5, #0]
 80110cc:	f7f7 f957 	bl	800837e <_isatty>
 80110d0:	1c43      	adds	r3, r0, #1
 80110d2:	d103      	bne.n	80110dc <_isatty_r+0x1c>
 80110d4:	682b      	ldr	r3, [r5, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d000      	beq.n	80110dc <_isatty_r+0x1c>
 80110da:	6023      	str	r3, [r4, #0]
 80110dc:	bd70      	pop	{r4, r5, r6, pc}
 80110de:	46c0      	nop			@ (mov r8, r8)
 80110e0:	20001634 	.word	0x20001634

080110e4 <abort>:
 80110e4:	2006      	movs	r0, #6
 80110e6:	b510      	push	{r4, lr}
 80110e8:	f000 f834 	bl	8011154 <raise>
 80110ec:	2001      	movs	r0, #1
 80110ee:	f7f7 f8e8 	bl	80082c2 <_exit>

080110f2 <_malloc_usable_size_r>:
 80110f2:	1f0b      	subs	r3, r1, #4
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	1f18      	subs	r0, r3, #4
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	da01      	bge.n	8011100 <_malloc_usable_size_r+0xe>
 80110fc:	580b      	ldr	r3, [r1, r0]
 80110fe:	18c0      	adds	r0, r0, r3
 8011100:	4770      	bx	lr

08011102 <_raise_r>:
 8011102:	b570      	push	{r4, r5, r6, lr}
 8011104:	0004      	movs	r4, r0
 8011106:	000d      	movs	r5, r1
 8011108:	291f      	cmp	r1, #31
 801110a:	d904      	bls.n	8011116 <_raise_r+0x14>
 801110c:	2316      	movs	r3, #22
 801110e:	6003      	str	r3, [r0, #0]
 8011110:	2001      	movs	r0, #1
 8011112:	4240      	negs	r0, r0
 8011114:	bd70      	pop	{r4, r5, r6, pc}
 8011116:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011118:	2b00      	cmp	r3, #0
 801111a:	d004      	beq.n	8011126 <_raise_r+0x24>
 801111c:	008a      	lsls	r2, r1, #2
 801111e:	189b      	adds	r3, r3, r2
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	2a00      	cmp	r2, #0
 8011124:	d108      	bne.n	8011138 <_raise_r+0x36>
 8011126:	0020      	movs	r0, r4
 8011128:	f000 f830 	bl	801118c <_getpid_r>
 801112c:	002a      	movs	r2, r5
 801112e:	0001      	movs	r1, r0
 8011130:	0020      	movs	r0, r4
 8011132:	f000 f819 	bl	8011168 <_kill_r>
 8011136:	e7ed      	b.n	8011114 <_raise_r+0x12>
 8011138:	2a01      	cmp	r2, #1
 801113a:	d009      	beq.n	8011150 <_raise_r+0x4e>
 801113c:	1c51      	adds	r1, r2, #1
 801113e:	d103      	bne.n	8011148 <_raise_r+0x46>
 8011140:	2316      	movs	r3, #22
 8011142:	6003      	str	r3, [r0, #0]
 8011144:	2001      	movs	r0, #1
 8011146:	e7e5      	b.n	8011114 <_raise_r+0x12>
 8011148:	2100      	movs	r1, #0
 801114a:	0028      	movs	r0, r5
 801114c:	6019      	str	r1, [r3, #0]
 801114e:	4790      	blx	r2
 8011150:	2000      	movs	r0, #0
 8011152:	e7df      	b.n	8011114 <_raise_r+0x12>

08011154 <raise>:
 8011154:	b510      	push	{r4, lr}
 8011156:	4b03      	ldr	r3, [pc, #12]	@ (8011164 <raise+0x10>)
 8011158:	0001      	movs	r1, r0
 801115a:	6818      	ldr	r0, [r3, #0]
 801115c:	f7ff ffd1 	bl	8011102 <_raise_r>
 8011160:	bd10      	pop	{r4, pc}
 8011162:	46c0      	nop			@ (mov r8, r8)
 8011164:	20000188 	.word	0x20000188

08011168 <_kill_r>:
 8011168:	2300      	movs	r3, #0
 801116a:	b570      	push	{r4, r5, r6, lr}
 801116c:	4d06      	ldr	r5, [pc, #24]	@ (8011188 <_kill_r+0x20>)
 801116e:	0004      	movs	r4, r0
 8011170:	0008      	movs	r0, r1
 8011172:	0011      	movs	r1, r2
 8011174:	602b      	str	r3, [r5, #0]
 8011176:	f7f7 f894 	bl	80082a2 <_kill>
 801117a:	1c43      	adds	r3, r0, #1
 801117c:	d103      	bne.n	8011186 <_kill_r+0x1e>
 801117e:	682b      	ldr	r3, [r5, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d000      	beq.n	8011186 <_kill_r+0x1e>
 8011184:	6023      	str	r3, [r4, #0]
 8011186:	bd70      	pop	{r4, r5, r6, pc}
 8011188:	20001634 	.word	0x20001634

0801118c <_getpid_r>:
 801118c:	b510      	push	{r4, lr}
 801118e:	f7f7 f882 	bl	8008296 <_getpid>
 8011192:	bd10      	pop	{r4, pc}

08011194 <fmod>:
 8011194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011196:	0014      	movs	r4, r2
 8011198:	001d      	movs	r5, r3
 801119a:	9000      	str	r0, [sp, #0]
 801119c:	9101      	str	r1, [sp, #4]
 801119e:	f000 f92d 	bl	80113fc <__ieee754_fmod>
 80111a2:	0022      	movs	r2, r4
 80111a4:	0006      	movs	r6, r0
 80111a6:	000f      	movs	r7, r1
 80111a8:	9800      	ldr	r0, [sp, #0]
 80111aa:	9901      	ldr	r1, [sp, #4]
 80111ac:	002b      	movs	r3, r5
 80111ae:	f7f2 fab9 	bl	8003724 <__aeabi_dcmpun>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d113      	bne.n	80111de <fmod+0x4a>
 80111b6:	2200      	movs	r2, #0
 80111b8:	2300      	movs	r3, #0
 80111ba:	0020      	movs	r0, r4
 80111bc:	0029      	movs	r1, r5
 80111be:	f7ef f94f 	bl	8000460 <__aeabi_dcmpeq>
 80111c2:	2800      	cmp	r0, #0
 80111c4:	d00b      	beq.n	80111de <fmod+0x4a>
 80111c6:	f7fd ff53 	bl	800f070 <__errno>
 80111ca:	2321      	movs	r3, #33	@ 0x21
 80111cc:	2200      	movs	r2, #0
 80111ce:	6003      	str	r3, [r0, #0]
 80111d0:	2300      	movs	r3, #0
 80111d2:	0010      	movs	r0, r2
 80111d4:	0019      	movs	r1, r3
 80111d6:	f7f0 ff7b 	bl	80020d0 <__aeabi_ddiv>
 80111da:	0006      	movs	r6, r0
 80111dc:	000f      	movs	r7, r1
 80111de:	0030      	movs	r0, r6
 80111e0:	0039      	movs	r1, r7
 80111e2:	b003      	add	sp, #12
 80111e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080111e6 <sqrt>:
 80111e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111e8:	0004      	movs	r4, r0
 80111ea:	000d      	movs	r5, r1
 80111ec:	f000 f822 	bl	8011234 <__ieee754_sqrt>
 80111f0:	0022      	movs	r2, r4
 80111f2:	0006      	movs	r6, r0
 80111f4:	000f      	movs	r7, r1
 80111f6:	002b      	movs	r3, r5
 80111f8:	0020      	movs	r0, r4
 80111fa:	0029      	movs	r1, r5
 80111fc:	f7f2 fa92 	bl	8003724 <__aeabi_dcmpun>
 8011200:	2800      	cmp	r0, #0
 8011202:	d113      	bne.n	801122c <sqrt+0x46>
 8011204:	2200      	movs	r2, #0
 8011206:	2300      	movs	r3, #0
 8011208:	0020      	movs	r0, r4
 801120a:	0029      	movs	r1, r5
 801120c:	f7ef f92e 	bl	800046c <__aeabi_dcmplt>
 8011210:	2800      	cmp	r0, #0
 8011212:	d00b      	beq.n	801122c <sqrt+0x46>
 8011214:	f7fd ff2c 	bl	800f070 <__errno>
 8011218:	2321      	movs	r3, #33	@ 0x21
 801121a:	2200      	movs	r2, #0
 801121c:	6003      	str	r3, [r0, #0]
 801121e:	2300      	movs	r3, #0
 8011220:	0010      	movs	r0, r2
 8011222:	0019      	movs	r1, r3
 8011224:	f7f0 ff54 	bl	80020d0 <__aeabi_ddiv>
 8011228:	0006      	movs	r6, r0
 801122a:	000f      	movs	r7, r1
 801122c:	0030      	movs	r0, r6
 801122e:	0039      	movs	r1, r7
 8011230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011234 <__ieee754_sqrt>:
 8011234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011236:	000a      	movs	r2, r1
 8011238:	000d      	movs	r5, r1
 801123a:	496b      	ldr	r1, [pc, #428]	@ (80113e8 <__ieee754_sqrt+0x1b4>)
 801123c:	0004      	movs	r4, r0
 801123e:	0003      	movs	r3, r0
 8011240:	0008      	movs	r0, r1
 8011242:	b087      	sub	sp, #28
 8011244:	4028      	ands	r0, r5
 8011246:	4288      	cmp	r0, r1
 8011248:	d111      	bne.n	801126e <__ieee754_sqrt+0x3a>
 801124a:	0022      	movs	r2, r4
 801124c:	002b      	movs	r3, r5
 801124e:	0020      	movs	r0, r4
 8011250:	0029      	movs	r1, r5
 8011252:	f7f1 fb77 	bl	8002944 <__aeabi_dmul>
 8011256:	0002      	movs	r2, r0
 8011258:	000b      	movs	r3, r1
 801125a:	0020      	movs	r0, r4
 801125c:	0029      	movs	r1, r5
 801125e:	f7f0 fb71 	bl	8001944 <__aeabi_dadd>
 8011262:	0004      	movs	r4, r0
 8011264:	000d      	movs	r5, r1
 8011266:	0020      	movs	r0, r4
 8011268:	0029      	movs	r1, r5
 801126a:	b007      	add	sp, #28
 801126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801126e:	2d00      	cmp	r5, #0
 8011270:	dc11      	bgt.n	8011296 <__ieee754_sqrt+0x62>
 8011272:	0069      	lsls	r1, r5, #1
 8011274:	0849      	lsrs	r1, r1, #1
 8011276:	4321      	orrs	r1, r4
 8011278:	d0f5      	beq.n	8011266 <__ieee754_sqrt+0x32>
 801127a:	2000      	movs	r0, #0
 801127c:	4285      	cmp	r5, r0
 801127e:	d010      	beq.n	80112a2 <__ieee754_sqrt+0x6e>
 8011280:	0022      	movs	r2, r4
 8011282:	002b      	movs	r3, r5
 8011284:	0020      	movs	r0, r4
 8011286:	0029      	movs	r1, r5
 8011288:	f7f1 fe42 	bl	8002f10 <__aeabi_dsub>
 801128c:	0002      	movs	r2, r0
 801128e:	000b      	movs	r3, r1
 8011290:	f7f0 ff1e 	bl	80020d0 <__aeabi_ddiv>
 8011294:	e7e5      	b.n	8011262 <__ieee754_sqrt+0x2e>
 8011296:	1528      	asrs	r0, r5, #20
 8011298:	d115      	bne.n	80112c6 <__ieee754_sqrt+0x92>
 801129a:	2480      	movs	r4, #128	@ 0x80
 801129c:	2100      	movs	r1, #0
 801129e:	0364      	lsls	r4, r4, #13
 80112a0:	e007      	b.n	80112b2 <__ieee754_sqrt+0x7e>
 80112a2:	0ada      	lsrs	r2, r3, #11
 80112a4:	3815      	subs	r0, #21
 80112a6:	055b      	lsls	r3, r3, #21
 80112a8:	2a00      	cmp	r2, #0
 80112aa:	d0fa      	beq.n	80112a2 <__ieee754_sqrt+0x6e>
 80112ac:	e7f5      	b.n	801129a <__ieee754_sqrt+0x66>
 80112ae:	0052      	lsls	r2, r2, #1
 80112b0:	3101      	adds	r1, #1
 80112b2:	4222      	tst	r2, r4
 80112b4:	d0fb      	beq.n	80112ae <__ieee754_sqrt+0x7a>
 80112b6:	1e4c      	subs	r4, r1, #1
 80112b8:	1b00      	subs	r0, r0, r4
 80112ba:	2420      	movs	r4, #32
 80112bc:	001d      	movs	r5, r3
 80112be:	1a64      	subs	r4, r4, r1
 80112c0:	40e5      	lsrs	r5, r4
 80112c2:	408b      	lsls	r3, r1
 80112c4:	432a      	orrs	r2, r5
 80112c6:	4949      	ldr	r1, [pc, #292]	@ (80113ec <__ieee754_sqrt+0x1b8>)
 80112c8:	0312      	lsls	r2, r2, #12
 80112ca:	1844      	adds	r4, r0, r1
 80112cc:	2180      	movs	r1, #128	@ 0x80
 80112ce:	0b12      	lsrs	r2, r2, #12
 80112d0:	0349      	lsls	r1, r1, #13
 80112d2:	4311      	orrs	r1, r2
 80112d4:	07c0      	lsls	r0, r0, #31
 80112d6:	d403      	bmi.n	80112e0 <__ieee754_sqrt+0xac>
 80112d8:	0fda      	lsrs	r2, r3, #31
 80112da:	0049      	lsls	r1, r1, #1
 80112dc:	1851      	adds	r1, r2, r1
 80112de:	005b      	lsls	r3, r3, #1
 80112e0:	2500      	movs	r5, #0
 80112e2:	1062      	asrs	r2, r4, #1
 80112e4:	0049      	lsls	r1, r1, #1
 80112e6:	2480      	movs	r4, #128	@ 0x80
 80112e8:	9205      	str	r2, [sp, #20]
 80112ea:	0fda      	lsrs	r2, r3, #31
 80112ec:	1852      	adds	r2, r2, r1
 80112ee:	2016      	movs	r0, #22
 80112f0:	0029      	movs	r1, r5
 80112f2:	005b      	lsls	r3, r3, #1
 80112f4:	03a4      	lsls	r4, r4, #14
 80112f6:	190e      	adds	r6, r1, r4
 80112f8:	4296      	cmp	r6, r2
 80112fa:	dc02      	bgt.n	8011302 <__ieee754_sqrt+0xce>
 80112fc:	1931      	adds	r1, r6, r4
 80112fe:	1b92      	subs	r2, r2, r6
 8011300:	192d      	adds	r5, r5, r4
 8011302:	0fde      	lsrs	r6, r3, #31
 8011304:	0052      	lsls	r2, r2, #1
 8011306:	3801      	subs	r0, #1
 8011308:	1992      	adds	r2, r2, r6
 801130a:	005b      	lsls	r3, r3, #1
 801130c:	0864      	lsrs	r4, r4, #1
 801130e:	2800      	cmp	r0, #0
 8011310:	d1f1      	bne.n	80112f6 <__ieee754_sqrt+0xc2>
 8011312:	2620      	movs	r6, #32
 8011314:	2780      	movs	r7, #128	@ 0x80
 8011316:	0004      	movs	r4, r0
 8011318:	9604      	str	r6, [sp, #16]
 801131a:	063f      	lsls	r7, r7, #24
 801131c:	183e      	adds	r6, r7, r0
 801131e:	46b4      	mov	ip, r6
 8011320:	428a      	cmp	r2, r1
 8011322:	dc02      	bgt.n	801132a <__ieee754_sqrt+0xf6>
 8011324:	d114      	bne.n	8011350 <__ieee754_sqrt+0x11c>
 8011326:	429e      	cmp	r6, r3
 8011328:	d812      	bhi.n	8011350 <__ieee754_sqrt+0x11c>
 801132a:	4660      	mov	r0, ip
 801132c:	4666      	mov	r6, ip
 801132e:	19c0      	adds	r0, r0, r7
 8011330:	9100      	str	r1, [sp, #0]
 8011332:	2e00      	cmp	r6, #0
 8011334:	da03      	bge.n	801133e <__ieee754_sqrt+0x10a>
 8011336:	43c6      	mvns	r6, r0
 8011338:	0ff6      	lsrs	r6, r6, #31
 801133a:	198e      	adds	r6, r1, r6
 801133c:	9600      	str	r6, [sp, #0]
 801133e:	1a52      	subs	r2, r2, r1
 8011340:	4563      	cmp	r3, ip
 8011342:	4189      	sbcs	r1, r1
 8011344:	4249      	negs	r1, r1
 8011346:	1a52      	subs	r2, r2, r1
 8011348:	4661      	mov	r1, ip
 801134a:	1a5b      	subs	r3, r3, r1
 801134c:	9900      	ldr	r1, [sp, #0]
 801134e:	19e4      	adds	r4, r4, r7
 8011350:	0fde      	lsrs	r6, r3, #31
 8011352:	0052      	lsls	r2, r2, #1
 8011354:	1992      	adds	r2, r2, r6
 8011356:	9e04      	ldr	r6, [sp, #16]
 8011358:	005b      	lsls	r3, r3, #1
 801135a:	3e01      	subs	r6, #1
 801135c:	087f      	lsrs	r7, r7, #1
 801135e:	9604      	str	r6, [sp, #16]
 8011360:	2e00      	cmp	r6, #0
 8011362:	d1db      	bne.n	801131c <__ieee754_sqrt+0xe8>
 8011364:	431a      	orrs	r2, r3
 8011366:	d01f      	beq.n	80113a8 <__ieee754_sqrt+0x174>
 8011368:	4e21      	ldr	r6, [pc, #132]	@ (80113f0 <__ieee754_sqrt+0x1bc>)
 801136a:	4f22      	ldr	r7, [pc, #136]	@ (80113f4 <__ieee754_sqrt+0x1c0>)
 801136c:	6830      	ldr	r0, [r6, #0]
 801136e:	6871      	ldr	r1, [r6, #4]
 8011370:	683a      	ldr	r2, [r7, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	9200      	str	r2, [sp, #0]
 8011376:	9301      	str	r3, [sp, #4]
 8011378:	6832      	ldr	r2, [r6, #0]
 801137a:	6873      	ldr	r3, [r6, #4]
 801137c:	9202      	str	r2, [sp, #8]
 801137e:	9303      	str	r3, [sp, #12]
 8011380:	9a00      	ldr	r2, [sp, #0]
 8011382:	9b01      	ldr	r3, [sp, #4]
 8011384:	f7f1 fdc4 	bl	8002f10 <__aeabi_dsub>
 8011388:	0002      	movs	r2, r0
 801138a:	000b      	movs	r3, r1
 801138c:	9802      	ldr	r0, [sp, #8]
 801138e:	9903      	ldr	r1, [sp, #12]
 8011390:	f7ef f876 	bl	8000480 <__aeabi_dcmple>
 8011394:	2800      	cmp	r0, #0
 8011396:	d007      	beq.n	80113a8 <__ieee754_sqrt+0x174>
 8011398:	6830      	ldr	r0, [r6, #0]
 801139a:	6871      	ldr	r1, [r6, #4]
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	1c67      	adds	r7, r4, #1
 80113a2:	d10c      	bne.n	80113be <__ieee754_sqrt+0x18a>
 80113a4:	9c04      	ldr	r4, [sp, #16]
 80113a6:	3501      	adds	r5, #1
 80113a8:	4a13      	ldr	r2, [pc, #76]	@ (80113f8 <__ieee754_sqrt+0x1c4>)
 80113aa:	106b      	asrs	r3, r5, #1
 80113ac:	189b      	adds	r3, r3, r2
 80113ae:	9a05      	ldr	r2, [sp, #20]
 80113b0:	07ed      	lsls	r5, r5, #31
 80113b2:	0864      	lsrs	r4, r4, #1
 80113b4:	0512      	lsls	r2, r2, #20
 80113b6:	4325      	orrs	r5, r4
 80113b8:	0028      	movs	r0, r5
 80113ba:	18d1      	adds	r1, r2, r3
 80113bc:	e751      	b.n	8011262 <__ieee754_sqrt+0x2e>
 80113be:	f7f0 fac1 	bl	8001944 <__aeabi_dadd>
 80113c2:	6877      	ldr	r7, [r6, #4]
 80113c4:	6836      	ldr	r6, [r6, #0]
 80113c6:	0002      	movs	r2, r0
 80113c8:	000b      	movs	r3, r1
 80113ca:	0030      	movs	r0, r6
 80113cc:	0039      	movs	r1, r7
 80113ce:	f7ef f84d 	bl	800046c <__aeabi_dcmplt>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d004      	beq.n	80113e0 <__ieee754_sqrt+0x1ac>
 80113d6:	3402      	adds	r4, #2
 80113d8:	4263      	negs	r3, r4
 80113da:	4163      	adcs	r3, r4
 80113dc:	18ed      	adds	r5, r5, r3
 80113de:	e7e3      	b.n	80113a8 <__ieee754_sqrt+0x174>
 80113e0:	2301      	movs	r3, #1
 80113e2:	3401      	adds	r4, #1
 80113e4:	439c      	bics	r4, r3
 80113e6:	e7df      	b.n	80113a8 <__ieee754_sqrt+0x174>
 80113e8:	7ff00000 	.word	0x7ff00000
 80113ec:	fffffc01 	.word	0xfffffc01
 80113f0:	0801c670 	.word	0x0801c670
 80113f4:	0801c668 	.word	0x0801c668
 80113f8:	3fe00000 	.word	0x3fe00000

080113fc <__ieee754_fmod>:
 80113fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113fe:	b087      	sub	sp, #28
 8011400:	9200      	str	r2, [sp, #0]
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	9b01      	ldr	r3, [sp, #4]
 8011406:	9e00      	ldr	r6, [sp, #0]
 8011408:	005c      	lsls	r4, r3, #1
 801140a:	0863      	lsrs	r3, r4, #1
 801140c:	001c      	movs	r4, r3
 801140e:	469c      	mov	ip, r3
 8011410:	9604      	str	r6, [sp, #16]
 8011412:	4334      	orrs	r4, r6
 8011414:	d00d      	beq.n	8011432 <__ieee754_fmod+0x36>
 8011416:	4d7b      	ldr	r5, [pc, #492]	@ (8011604 <__ieee754_fmod+0x208>)
 8011418:	004c      	lsls	r4, r1, #1
 801141a:	9105      	str	r1, [sp, #20]
 801141c:	0864      	lsrs	r4, r4, #1
 801141e:	42ac      	cmp	r4, r5
 8011420:	d807      	bhi.n	8011432 <__ieee754_fmod+0x36>
 8011422:	4663      	mov	r3, ip
 8011424:	4275      	negs	r5, r6
 8011426:	4335      	orrs	r5, r6
 8011428:	0fed      	lsrs	r5, r5, #31
 801142a:	431d      	orrs	r5, r3
 801142c:	4b76      	ldr	r3, [pc, #472]	@ (8011608 <__ieee754_fmod+0x20c>)
 801142e:	429d      	cmp	r5, r3
 8011430:	d909      	bls.n	8011446 <__ieee754_fmod+0x4a>
 8011432:	9a00      	ldr	r2, [sp, #0]
 8011434:	9b01      	ldr	r3, [sp, #4]
 8011436:	f7f1 fa85 	bl	8002944 <__aeabi_dmul>
 801143a:	0002      	movs	r2, r0
 801143c:	000b      	movs	r3, r1
 801143e:	f7f0 fe47 	bl	80020d0 <__aeabi_ddiv>
 8011442:	b007      	add	sp, #28
 8011444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011446:	9b05      	ldr	r3, [sp, #20]
 8011448:	0007      	movs	r7, r0
 801144a:	0fdb      	lsrs	r3, r3, #31
 801144c:	07db      	lsls	r3, r3, #31
 801144e:	0005      	movs	r5, r0
 8011450:	9303      	str	r3, [sp, #12]
 8011452:	4564      	cmp	r4, ip
 8011454:	dc0a      	bgt.n	801146c <__ieee754_fmod+0x70>
 8011456:	dbf4      	blt.n	8011442 <__ieee754_fmod+0x46>
 8011458:	4286      	cmp	r6, r0
 801145a:	d8f2      	bhi.n	8011442 <__ieee754_fmod+0x46>
 801145c:	d106      	bne.n	801146c <__ieee754_fmod+0x70>
 801145e:	9a03      	ldr	r2, [sp, #12]
 8011460:	4b6a      	ldr	r3, [pc, #424]	@ (801160c <__ieee754_fmod+0x210>)
 8011462:	0f12      	lsrs	r2, r2, #28
 8011464:	189b      	adds	r3, r3, r2
 8011466:	6818      	ldr	r0, [r3, #0]
 8011468:	6859      	ldr	r1, [r3, #4]
 801146a:	e7ea      	b.n	8011442 <__ieee754_fmod+0x46>
 801146c:	9b05      	ldr	r3, [sp, #20]
 801146e:	4a66      	ldr	r2, [pc, #408]	@ (8011608 <__ieee754_fmod+0x20c>)
 8011470:	4213      	tst	r3, r2
 8011472:	d14e      	bne.n	8011512 <__ieee754_fmod+0x116>
 8011474:	2c00      	cmp	r4, #0
 8011476:	d145      	bne.n	8011504 <__ieee754_fmod+0x108>
 8011478:	0039      	movs	r1, r7
 801147a:	4865      	ldr	r0, [pc, #404]	@ (8011610 <__ieee754_fmod+0x214>)
 801147c:	2900      	cmp	r1, #0
 801147e:	dc3e      	bgt.n	80114fe <__ieee754_fmod+0x102>
 8011480:	4b61      	ldr	r3, [pc, #388]	@ (8011608 <__ieee754_fmod+0x20c>)
 8011482:	9a01      	ldr	r2, [sp, #4]
 8011484:	4213      	tst	r3, r2
 8011486:	d152      	bne.n	801152e <__ieee754_fmod+0x132>
 8011488:	4663      	mov	r3, ip
 801148a:	2b00      	cmp	r3, #0
 801148c:	d148      	bne.n	8011520 <__ieee754_fmod+0x124>
 801148e:	4960      	ldr	r1, [pc, #384]	@ (8011610 <__ieee754_fmod+0x214>)
 8011490:	2e00      	cmp	r6, #0
 8011492:	dc42      	bgt.n	801151a <__ieee754_fmod+0x11e>
 8011494:	4e5f      	ldr	r6, [pc, #380]	@ (8011614 <__ieee754_fmod+0x218>)
 8011496:	42b0      	cmp	r0, r6
 8011498:	db4e      	blt.n	8011538 <__ieee754_fmod+0x13c>
 801149a:	2480      	movs	r4, #128	@ 0x80
 801149c:	9b05      	ldr	r3, [sp, #20]
 801149e:	0364      	lsls	r4, r4, #13
 80114a0:	031f      	lsls	r7, r3, #12
 80114a2:	0b3f      	lsrs	r7, r7, #12
 80114a4:	433c      	orrs	r4, r7
 80114a6:	42b1      	cmp	r1, r6
 80114a8:	db5a      	blt.n	8011560 <__ieee754_fmod+0x164>
 80114aa:	2280      	movs	r2, #128	@ 0x80
 80114ac:	9b01      	ldr	r3, [sp, #4]
 80114ae:	0352      	lsls	r2, r2, #13
 80114b0:	031b      	lsls	r3, r3, #12
 80114b2:	0b1b      	lsrs	r3, r3, #12
 80114b4:	431a      	orrs	r2, r3
 80114b6:	4694      	mov	ip, r2
 80114b8:	1a40      	subs	r0, r0, r1
 80114ba:	4663      	mov	r3, ip
 80114bc:	9a04      	ldr	r2, [sp, #16]
 80114be:	1ae3      	subs	r3, r4, r3
 80114c0:	1aaa      	subs	r2, r5, r2
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d166      	bne.n	8011594 <__ieee754_fmod+0x198>
 80114c6:	9804      	ldr	r0, [sp, #16]
 80114c8:	4285      	cmp	r5, r0
 80114ca:	4180      	sbcs	r0, r0
 80114cc:	4240      	negs	r0, r0
 80114ce:	1a1b      	subs	r3, r3, r0
 80114d0:	d501      	bpl.n	80114d6 <__ieee754_fmod+0xda>
 80114d2:	002a      	movs	r2, r5
 80114d4:	0023      	movs	r3, r4
 80114d6:	0018      	movs	r0, r3
 80114d8:	4310      	orrs	r0, r2
 80114da:	d0c0      	beq.n	801145e <__ieee754_fmod+0x62>
 80114dc:	2080      	movs	r0, #128	@ 0x80
 80114de:	0340      	lsls	r0, r0, #13
 80114e0:	4283      	cmp	r3, r0
 80114e2:	db6c      	blt.n	80115be <__ieee754_fmod+0x1c2>
 80114e4:	42b1      	cmp	r1, r6
 80114e6:	db70      	blt.n	80115ca <__ieee754_fmod+0x1ce>
 80114e8:	484b      	ldr	r0, [pc, #300]	@ (8011618 <__ieee754_fmod+0x21c>)
 80114ea:	181b      	adds	r3, r3, r0
 80114ec:	9803      	ldr	r0, [sp, #12]
 80114ee:	4303      	orrs	r3, r0
 80114f0:	484a      	ldr	r0, [pc, #296]	@ (801161c <__ieee754_fmod+0x220>)
 80114f2:	1809      	adds	r1, r1, r0
 80114f4:	050c      	lsls	r4, r1, #20
 80114f6:	4323      	orrs	r3, r4
 80114f8:	0019      	movs	r1, r3
 80114fa:	0010      	movs	r0, r2
 80114fc:	e7a1      	b.n	8011442 <__ieee754_fmod+0x46>
 80114fe:	3801      	subs	r0, #1
 8011500:	0049      	lsls	r1, r1, #1
 8011502:	e7bb      	b.n	801147c <__ieee754_fmod+0x80>
 8011504:	4843      	ldr	r0, [pc, #268]	@ (8011614 <__ieee754_fmod+0x218>)
 8011506:	02e1      	lsls	r1, r4, #11
 8011508:	2900      	cmp	r1, #0
 801150a:	ddb9      	ble.n	8011480 <__ieee754_fmod+0x84>
 801150c:	3801      	subs	r0, #1
 801150e:	0049      	lsls	r1, r1, #1
 8011510:	e7fa      	b.n	8011508 <__ieee754_fmod+0x10c>
 8011512:	4b43      	ldr	r3, [pc, #268]	@ (8011620 <__ieee754_fmod+0x224>)
 8011514:	1520      	asrs	r0, r4, #20
 8011516:	18c0      	adds	r0, r0, r3
 8011518:	e7b2      	b.n	8011480 <__ieee754_fmod+0x84>
 801151a:	3901      	subs	r1, #1
 801151c:	0076      	lsls	r6, r6, #1
 801151e:	e7b7      	b.n	8011490 <__ieee754_fmod+0x94>
 8011520:	493c      	ldr	r1, [pc, #240]	@ (8011614 <__ieee754_fmod+0x218>)
 8011522:	02de      	lsls	r6, r3, #11
 8011524:	2e00      	cmp	r6, #0
 8011526:	ddb5      	ble.n	8011494 <__ieee754_fmod+0x98>
 8011528:	3901      	subs	r1, #1
 801152a:	0076      	lsls	r6, r6, #1
 801152c:	e7fa      	b.n	8011524 <__ieee754_fmod+0x128>
 801152e:	4663      	mov	r3, ip
 8011530:	1519      	asrs	r1, r3, #20
 8011532:	4b3b      	ldr	r3, [pc, #236]	@ (8011620 <__ieee754_fmod+0x224>)
 8011534:	18c9      	adds	r1, r1, r3
 8011536:	e7ad      	b.n	8011494 <__ieee754_fmod+0x98>
 8011538:	1a35      	subs	r5, r6, r0
 801153a:	2d1f      	cmp	r5, #31
 801153c:	dc0a      	bgt.n	8011554 <__ieee754_fmod+0x158>
 801153e:	40ac      	lsls	r4, r5
 8011540:	4b38      	ldr	r3, [pc, #224]	@ (8011624 <__ieee754_fmod+0x228>)
 8011542:	0022      	movs	r2, r4
 8011544:	18c4      	adds	r4, r0, r3
 8011546:	003b      	movs	r3, r7
 8011548:	40e3      	lsrs	r3, r4
 801154a:	40af      	lsls	r7, r5
 801154c:	001c      	movs	r4, r3
 801154e:	003d      	movs	r5, r7
 8011550:	4314      	orrs	r4, r2
 8011552:	e7a8      	b.n	80114a6 <__ieee754_fmod+0xaa>
 8011554:	4c34      	ldr	r4, [pc, #208]	@ (8011628 <__ieee754_fmod+0x22c>)
 8011556:	2500      	movs	r5, #0
 8011558:	1a24      	subs	r4, r4, r0
 801155a:	40a7      	lsls	r7, r4
 801155c:	003c      	movs	r4, r7
 801155e:	e7a2      	b.n	80114a6 <__ieee754_fmod+0xaa>
 8011560:	1a77      	subs	r7, r6, r1
 8011562:	2f1f      	cmp	r7, #31
 8011564:	dc0f      	bgt.n	8011586 <__ieee754_fmod+0x18a>
 8011566:	4663      	mov	r3, ip
 8011568:	4a2e      	ldr	r2, [pc, #184]	@ (8011624 <__ieee754_fmod+0x228>)
 801156a:	40bb      	lsls	r3, r7
 801156c:	4694      	mov	ip, r2
 801156e:	448c      	add	ip, r1
 8011570:	9304      	str	r3, [sp, #16]
 8011572:	4663      	mov	r3, ip
 8011574:	9a00      	ldr	r2, [sp, #0]
 8011576:	40da      	lsrs	r2, r3
 8011578:	9b04      	ldr	r3, [sp, #16]
 801157a:	431a      	orrs	r2, r3
 801157c:	9b00      	ldr	r3, [sp, #0]
 801157e:	4694      	mov	ip, r2
 8011580:	40bb      	lsls	r3, r7
 8011582:	9304      	str	r3, [sp, #16]
 8011584:	e798      	b.n	80114b8 <__ieee754_fmod+0xbc>
 8011586:	4b28      	ldr	r3, [pc, #160]	@ (8011628 <__ieee754_fmod+0x22c>)
 8011588:	9a00      	ldr	r2, [sp, #0]
 801158a:	1a5b      	subs	r3, r3, r1
 801158c:	409a      	lsls	r2, r3
 801158e:	2300      	movs	r3, #0
 8011590:	4694      	mov	ip, r2
 8011592:	e7f6      	b.n	8011582 <__ieee754_fmod+0x186>
 8011594:	9f04      	ldr	r7, [sp, #16]
 8011596:	42bd      	cmp	r5, r7
 8011598:	41bf      	sbcs	r7, r7
 801159a:	427f      	negs	r7, r7
 801159c:	1bdb      	subs	r3, r3, r7
 801159e:	d505      	bpl.n	80115ac <__ieee754_fmod+0x1b0>
 80115a0:	0feb      	lsrs	r3, r5, #31
 80115a2:	0064      	lsls	r4, r4, #1
 80115a4:	18e4      	adds	r4, r4, r3
 80115a6:	006d      	lsls	r5, r5, #1
 80115a8:	3801      	subs	r0, #1
 80115aa:	e786      	b.n	80114ba <__ieee754_fmod+0xbe>
 80115ac:	001c      	movs	r4, r3
 80115ae:	4314      	orrs	r4, r2
 80115b0:	d100      	bne.n	80115b4 <__ieee754_fmod+0x1b8>
 80115b2:	e754      	b.n	801145e <__ieee754_fmod+0x62>
 80115b4:	005b      	lsls	r3, r3, #1
 80115b6:	0fd4      	lsrs	r4, r2, #31
 80115b8:	191c      	adds	r4, r3, r4
 80115ba:	0055      	lsls	r5, r2, #1
 80115bc:	e7f4      	b.n	80115a8 <__ieee754_fmod+0x1ac>
 80115be:	0fd4      	lsrs	r4, r2, #31
 80115c0:	005b      	lsls	r3, r3, #1
 80115c2:	191b      	adds	r3, r3, r4
 80115c4:	0052      	lsls	r2, r2, #1
 80115c6:	3901      	subs	r1, #1
 80115c8:	e78a      	b.n	80114e0 <__ieee754_fmod+0xe4>
 80115ca:	1a76      	subs	r6, r6, r1
 80115cc:	2e14      	cmp	r6, #20
 80115ce:	dc0b      	bgt.n	80115e8 <__ieee754_fmod+0x1ec>
 80115d0:	40f2      	lsrs	r2, r6
 80115d2:	0010      	movs	r0, r2
 80115d4:	4a13      	ldr	r2, [pc, #76]	@ (8011624 <__ieee754_fmod+0x228>)
 80115d6:	1889      	adds	r1, r1, r2
 80115d8:	001a      	movs	r2, r3
 80115da:	408a      	lsls	r2, r1
 80115dc:	4133      	asrs	r3, r6
 80115de:	4302      	orrs	r2, r0
 80115e0:	9c03      	ldr	r4, [sp, #12]
 80115e2:	431c      	orrs	r4, r3
 80115e4:	0021      	movs	r1, r4
 80115e6:	e788      	b.n	80114fa <__ieee754_fmod+0xfe>
 80115e8:	2e1f      	cmp	r6, #31
 80115ea:	dc06      	bgt.n	80115fa <__ieee754_fmod+0x1fe>
 80115ec:	480d      	ldr	r0, [pc, #52]	@ (8011624 <__ieee754_fmod+0x228>)
 80115ee:	40f2      	lsrs	r2, r6
 80115f0:	1809      	adds	r1, r1, r0
 80115f2:	408b      	lsls	r3, r1
 80115f4:	431a      	orrs	r2, r3
 80115f6:	9b03      	ldr	r3, [sp, #12]
 80115f8:	e7f2      	b.n	80115e0 <__ieee754_fmod+0x1e4>
 80115fa:	4a0b      	ldr	r2, [pc, #44]	@ (8011628 <__ieee754_fmod+0x22c>)
 80115fc:	1a52      	subs	r2, r2, r1
 80115fe:	4113      	asrs	r3, r2
 8011600:	001a      	movs	r2, r3
 8011602:	e7f8      	b.n	80115f6 <__ieee754_fmod+0x1fa>
 8011604:	7fefffff 	.word	0x7fefffff
 8011608:	7ff00000 	.word	0x7ff00000
 801160c:	0801c678 	.word	0x0801c678
 8011610:	fffffbed 	.word	0xfffffbed
 8011614:	fffffc02 	.word	0xfffffc02
 8011618:	fff00000 	.word	0xfff00000
 801161c:	000003ff 	.word	0x000003ff
 8011620:	fffffc01 	.word	0xfffffc01
 8011624:	0000041e 	.word	0x0000041e
 8011628:	fffffbe2 	.word	0xfffffbe2

0801162c <_init>:
 801162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162e:	46c0      	nop			@ (mov r8, r8)
 8011630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011632:	bc08      	pop	{r3}
 8011634:	469e      	mov	lr, r3
 8011636:	4770      	bx	lr

08011638 <_fini>:
 8011638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163a:	46c0      	nop			@ (mov r8, r8)
 801163c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801163e:	bc08      	pop	{r3}
 8011640:	469e      	mov	lr, r3
 8011642:	4770      	bx	lr
 8011644:	0000      	movs	r0, r0
	...

08011648 <__FLASH_Program_Fast_veneer>:
 8011648:	b401      	push	{r0}
 801164a:	4802      	ldr	r0, [pc, #8]	@ (8011654 <__FLASH_Program_Fast_veneer+0xc>)
 801164c:	4684      	mov	ip, r0
 801164e:	bc01      	pop	{r0}
 8011650:	4760      	bx	ip
 8011652:	bf00      	nop
 8011654:	200001d9 	.word	0x200001d9

Disassembly of section .data:

20000000 <checkTime>:
20000000:	                                         ..

20000002 <currentMenu>:
20000002:	                                         .

20000003 <canChange>:
20000003:	                                         .

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <__sglue>:
20000010:	00000000 00000003 200014f8              ........... 

2000001c <__global_locale>:
2000001c:	00000043 00000000 00000000 00000000     C...............
	...
2000003c:	00000043 00000000 00000000 00000000     C...............
	...
2000005c:	00000043 00000000 00000000 00000000     C...............
	...
2000007c:	00000043 00000000 00000000 00000000     C...............
	...
2000009c:	00000043 00000000 00000000 00000000     C...............
	...
200000bc:	00000043 00000000 00000000 00000000     C...............
	...
200000dc:	00000043 00000000 00000000 00000000     C...............
	...
200000fc:	0801033d 0800f975 00000000 0801c468     =...u.......h...
2000010c:	0801c2ac 0801c411 0801c411 0801c411     ................
2000011c:	0801c411 0801c411 0801c411 0801c411     ................
2000012c:	0801c411 0801c411 ffffffff ffffffff     ................
2000013c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000164:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000188 <_impure_ptr>:
20000188:	2000018c                                ... 

2000018c <_impure_data>:
2000018c:	00000000 200014f8 20001560 200015c8     ....... `.. ... 
	...

200001d8 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200001d8:	b580      	push	{r7, lr}
200001da:	b088      	sub	sp, #32
200001dc:	af00      	add	r7, sp, #0
200001de:	6078      	str	r0, [r7, #4]
200001e0:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200001e2:	231f      	movs	r3, #31
200001e4:	18fb      	adds	r3, r7, r3
200001e6:	2200      	movs	r2, #0
200001e8:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200001ea:	687b      	ldr	r3, [r7, #4]
200001ec:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200001ee:	683b      	ldr	r3, [r7, #0]
200001f0:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200001f2:	4b1a      	ldr	r3, [pc, #104]	@ (2000025c <FLASH_Program_Fast+0x84>)
200001f4:	695a      	ldr	r2, [r3, #20]
200001f6:	4b19      	ldr	r3, [pc, #100]	@ (2000025c <FLASH_Program_Fast+0x84>)
200001f8:	2180      	movs	r1, #128	@ 0x80
200001fa:	02c9      	lsls	r1, r1, #11
200001fc:	430a      	orrs	r2, r1
200001fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000200:	f3ef 8310 	mrs	r3, PRIMASK
20000204:	60fb      	str	r3, [r7, #12]
  return(result);
20000206:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000020a:	b672      	cpsid	i
}
2000020c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000020e:	e00f      	b.n	20000230 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000210:	697a      	ldr	r2, [r7, #20]
20000212:	69bb      	ldr	r3, [r7, #24]
20000214:	6812      	ldr	r2, [r2, #0]
20000216:	601a      	str	r2, [r3, #0]
    src += 4U;
20000218:	697b      	ldr	r3, [r7, #20]
2000021a:	3304      	adds	r3, #4
2000021c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000021e:	69bb      	ldr	r3, [r7, #24]
20000220:	3304      	adds	r3, #4
20000222:	61bb      	str	r3, [r7, #24]
    index++;
20000224:	211f      	movs	r1, #31
20000226:	187b      	adds	r3, r7, r1
20000228:	781a      	ldrb	r2, [r3, #0]
2000022a:	187b      	adds	r3, r7, r1
2000022c:	3201      	adds	r2, #1
2000022e:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000230:	231f      	movs	r3, #31
20000232:	18fb      	adds	r3, r7, r3
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	2b3f      	cmp	r3, #63	@ 0x3f
20000238:	d9ea      	bls.n	20000210 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
2000023a:	46c0      	nop			@ (mov r8, r8)
2000023c:	4b07      	ldr	r3, [pc, #28]	@ (2000025c <FLASH_Program_Fast+0x84>)
2000023e:	691a      	ldr	r2, [r3, #16]
20000240:	23c0      	movs	r3, #192	@ 0xc0
20000242:	029b      	lsls	r3, r3, #10
20000244:	4013      	ands	r3, r2
20000246:	d1f9      	bne.n	2000023c <FLASH_Program_Fast+0x64>
20000248:	693b      	ldr	r3, [r7, #16]
2000024a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000024c:	68bb      	ldr	r3, [r7, #8]
2000024e:	f383 8810 	msr	PRIMASK, r3
}
20000252:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000254:	46c0      	nop			@ (mov r8, r8)
20000256:	46bd      	mov	sp, r7
20000258:	b008      	add	sp, #32
2000025a:	bd80      	pop	{r7, pc}
2000025c:	40022000 	.word	0x40022000
