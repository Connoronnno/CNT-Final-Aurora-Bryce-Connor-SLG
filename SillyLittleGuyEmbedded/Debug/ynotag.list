
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c598  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  0800c658  0800c658  0000d658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1e8  0800d1e8  0000fa24  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d1e8  0800d1e8  0000e1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1f0  0800d1f0  0000fa24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1f0  0800d1f0  0000e1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1f4  0800d1f4  0000e1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a24  20000000  0800d1f8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000a28  0800dc1c  0000fa28  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200010d0  0800dc1c  000100d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000fa24  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b729  00000000  00000000  0000fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003558  00000000  00000000  0002b175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0002e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f8  00000000  00000000  0002ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb68  00000000  00000000  00031340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea9b  00000000  00000000  00050ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb092  00000000  00000000  0006f943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a9d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000659c  00000000  00000000  0013aa18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00140fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a28 	.word	0x20000a28
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c63c 	.word	0x0800c63c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a2c 	.word	0x20000a2c
 8000100:	0800c63c 	.word	0x0800c63c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f002 f955 	bl	80026d8 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f002 f899 	bl	8002570 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f002 f947 	bl	80026d8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f002 f93d 	bl	80026d8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f8c3 	bl	80025f8 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f8b9 	bl	80025f8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	0008      	movs	r0, r1
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fccd 	bl	8000e3c <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fc55 	bl	8000d5c <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fcbf 	bl	8000e3c <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fcb5 	bl	8000e3c <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc63 	bl	8000dac <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc59 	bl	8000dac <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	0008      	movs	r0, r1
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	@ (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	@ (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f83c 	bl	80005b4 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			@ (mov r8, r8)

08000548 <__aeabi_f2uiz>:
 8000548:	219e      	movs	r1, #158	@ 0x9e
 800054a:	b510      	push	{r4, lr}
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	1c04      	adds	r4, r0, #0
 8000550:	f7ff ffd0 	bl	80004f4 <__aeabi_fcmpge>
 8000554:	2800      	cmp	r0, #0
 8000556:	d103      	bne.n	8000560 <__aeabi_f2uiz+0x18>
 8000558:	1c20      	adds	r0, r4, #0
 800055a:	f001 f875 	bl	8001648 <__aeabi_f2iz>
 800055e:	bd10      	pop	{r4, pc}
 8000560:	219e      	movs	r1, #158	@ 0x9e
 8000562:	1c20      	adds	r0, r4, #0
 8000564:	05c9      	lsls	r1, r1, #23
 8000566:	f000 fe0b 	bl	8001180 <__aeabi_fsub>
 800056a:	f001 f86d 	bl	8001648 <__aeabi_f2iz>
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	061b      	lsls	r3, r3, #24
 8000572:	469c      	mov	ip, r3
 8000574:	4460      	add	r0, ip
 8000576:	e7f2      	b.n	800055e <__aeabi_f2uiz+0x16>

08000578 <__aeabi_d2uiz>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	2200      	movs	r2, #0
 800057c:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <__aeabi_d2uiz+0x38>)
 800057e:	0004      	movs	r4, r0
 8000580:	000d      	movs	r5, r1
 8000582:	f7ff ff7d 	bl	8000480 <__aeabi_dcmpge>
 8000586:	2800      	cmp	r0, #0
 8000588:	d104      	bne.n	8000594 <__aeabi_d2uiz+0x1c>
 800058a:	0020      	movs	r0, r4
 800058c:	0029      	movs	r1, r5
 800058e:	f003 f823 	bl	80035d8 <__aeabi_d2iz>
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <__aeabi_d2uiz+0x38>)
 8000596:	2200      	movs	r2, #0
 8000598:	0020      	movs	r0, r4
 800059a:	0029      	movs	r1, r5
 800059c:	f002 fbf0 	bl	8002d80 <__aeabi_dsub>
 80005a0:	f003 f81a 	bl	80035d8 <__aeabi_d2iz>
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	469c      	mov	ip, r3
 80005aa:	4460      	add	r0, ip
 80005ac:	e7f1      	b.n	8000592 <__aeabi_d2uiz+0x1a>
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	41e00000 	.word	0x41e00000

080005b4 <__udivmoddi4>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	4657      	mov	r7, sl
 80005b8:	464e      	mov	r6, r9
 80005ba:	4645      	mov	r5, r8
 80005bc:	46de      	mov	lr, fp
 80005be:	b5e0      	push	{r5, r6, r7, lr}
 80005c0:	0004      	movs	r4, r0
 80005c2:	000d      	movs	r5, r1
 80005c4:	4692      	mov	sl, r2
 80005c6:	4699      	mov	r9, r3
 80005c8:	b083      	sub	sp, #12
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d830      	bhi.n	8000630 <__udivmoddi4+0x7c>
 80005ce:	d02d      	beq.n	800062c <__udivmoddi4+0x78>
 80005d0:	4649      	mov	r1, r9
 80005d2:	4650      	mov	r0, sl
 80005d4:	f003 f8c6 	bl	8003764 <__clzdi2>
 80005d8:	0029      	movs	r1, r5
 80005da:	0006      	movs	r6, r0
 80005dc:	0020      	movs	r0, r4
 80005de:	f003 f8c1 	bl	8003764 <__clzdi2>
 80005e2:	1a33      	subs	r3, r6, r0
 80005e4:	4698      	mov	r8, r3
 80005e6:	3b20      	subs	r3, #32
 80005e8:	d434      	bmi.n	8000654 <__udivmoddi4+0xa0>
 80005ea:	469b      	mov	fp, r3
 80005ec:	4653      	mov	r3, sl
 80005ee:	465a      	mov	r2, fp
 80005f0:	4093      	lsls	r3, r2
 80005f2:	4642      	mov	r2, r8
 80005f4:	001f      	movs	r7, r3
 80005f6:	4653      	mov	r3, sl
 80005f8:	4093      	lsls	r3, r2
 80005fa:	001e      	movs	r6, r3
 80005fc:	42af      	cmp	r7, r5
 80005fe:	d83b      	bhi.n	8000678 <__udivmoddi4+0xc4>
 8000600:	42af      	cmp	r7, r5
 8000602:	d100      	bne.n	8000606 <__udivmoddi4+0x52>
 8000604:	e079      	b.n	80006fa <__udivmoddi4+0x146>
 8000606:	465b      	mov	r3, fp
 8000608:	1ba4      	subs	r4, r4, r6
 800060a:	41bd      	sbcs	r5, r7
 800060c:	2b00      	cmp	r3, #0
 800060e:	da00      	bge.n	8000612 <__udivmoddi4+0x5e>
 8000610:	e076      	b.n	8000700 <__udivmoddi4+0x14c>
 8000612:	2200      	movs	r2, #0
 8000614:	2300      	movs	r3, #0
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2301      	movs	r3, #1
 800061c:	465a      	mov	r2, fp
 800061e:	4093      	lsls	r3, r2
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2301      	movs	r3, #1
 8000624:	4642      	mov	r2, r8
 8000626:	4093      	lsls	r3, r2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	e029      	b.n	8000680 <__udivmoddi4+0xcc>
 800062c:	4282      	cmp	r2, r0
 800062e:	d9cf      	bls.n	80005d0 <__udivmoddi4+0x1c>
 8000630:	2200      	movs	r2, #0
 8000632:	2300      	movs	r3, #0
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <__udivmoddi4+0x8e>
 800063e:	601c      	str	r4, [r3, #0]
 8000640:	605d      	str	r5, [r3, #4]
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	9901      	ldr	r1, [sp, #4]
 8000646:	b003      	add	sp, #12
 8000648:	bcf0      	pop	{r4, r5, r6, r7}
 800064a:	46bb      	mov	fp, r7
 800064c:	46b2      	mov	sl, r6
 800064e:	46a9      	mov	r9, r5
 8000650:	46a0      	mov	r8, r4
 8000652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000654:	4642      	mov	r2, r8
 8000656:	469b      	mov	fp, r3
 8000658:	2320      	movs	r3, #32
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	4652      	mov	r2, sl
 800065e:	40da      	lsrs	r2, r3
 8000660:	4641      	mov	r1, r8
 8000662:	0013      	movs	r3, r2
 8000664:	464a      	mov	r2, r9
 8000666:	408a      	lsls	r2, r1
 8000668:	0017      	movs	r7, r2
 800066a:	4642      	mov	r2, r8
 800066c:	431f      	orrs	r7, r3
 800066e:	4653      	mov	r3, sl
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d9c3      	bls.n	8000600 <__udivmoddi4+0x4c>
 8000678:	2200      	movs	r2, #0
 800067a:	2300      	movs	r3, #0
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	4643      	mov	r3, r8
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0d8      	beq.n	8000638 <__udivmoddi4+0x84>
 8000686:	07fb      	lsls	r3, r7, #31
 8000688:	0872      	lsrs	r2, r6, #1
 800068a:	431a      	orrs	r2, r3
 800068c:	4646      	mov	r6, r8
 800068e:	087b      	lsrs	r3, r7, #1
 8000690:	e00e      	b.n	80006b0 <__udivmoddi4+0xfc>
 8000692:	42ab      	cmp	r3, r5
 8000694:	d101      	bne.n	800069a <__udivmoddi4+0xe6>
 8000696:	42a2      	cmp	r2, r4
 8000698:	d80c      	bhi.n	80006b4 <__udivmoddi4+0x100>
 800069a:	1aa4      	subs	r4, r4, r2
 800069c:	419d      	sbcs	r5, r3
 800069e:	2001      	movs	r0, #1
 80006a0:	1924      	adds	r4, r4, r4
 80006a2:	416d      	adcs	r5, r5
 80006a4:	2100      	movs	r1, #0
 80006a6:	3e01      	subs	r6, #1
 80006a8:	1824      	adds	r4, r4, r0
 80006aa:	414d      	adcs	r5, r1
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d006      	beq.n	80006be <__udivmoddi4+0x10a>
 80006b0:	42ab      	cmp	r3, r5
 80006b2:	d9ee      	bls.n	8000692 <__udivmoddi4+0xde>
 80006b4:	3e01      	subs	r6, #1
 80006b6:	1924      	adds	r4, r4, r4
 80006b8:	416d      	adcs	r5, r5
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d1f8      	bne.n	80006b0 <__udivmoddi4+0xfc>
 80006be:	9800      	ldr	r0, [sp, #0]
 80006c0:	9901      	ldr	r1, [sp, #4]
 80006c2:	465b      	mov	r3, fp
 80006c4:	1900      	adds	r0, r0, r4
 80006c6:	4169      	adcs	r1, r5
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db24      	blt.n	8000716 <__udivmoddi4+0x162>
 80006cc:	002b      	movs	r3, r5
 80006ce:	465a      	mov	r2, fp
 80006d0:	4644      	mov	r4, r8
 80006d2:	40d3      	lsrs	r3, r2
 80006d4:	002a      	movs	r2, r5
 80006d6:	40e2      	lsrs	r2, r4
 80006d8:	001c      	movs	r4, r3
 80006da:	465b      	mov	r3, fp
 80006dc:	0015      	movs	r5, r2
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db2a      	blt.n	8000738 <__udivmoddi4+0x184>
 80006e2:	0026      	movs	r6, r4
 80006e4:	409e      	lsls	r6, r3
 80006e6:	0033      	movs	r3, r6
 80006e8:	0026      	movs	r6, r4
 80006ea:	4647      	mov	r7, r8
 80006ec:	40be      	lsls	r6, r7
 80006ee:	0032      	movs	r2, r6
 80006f0:	1a80      	subs	r0, r0, r2
 80006f2:	4199      	sbcs	r1, r3
 80006f4:	9000      	str	r0, [sp, #0]
 80006f6:	9101      	str	r1, [sp, #4]
 80006f8:	e79e      	b.n	8000638 <__udivmoddi4+0x84>
 80006fa:	42a3      	cmp	r3, r4
 80006fc:	d8bc      	bhi.n	8000678 <__udivmoddi4+0xc4>
 80006fe:	e782      	b.n	8000606 <__udivmoddi4+0x52>
 8000700:	4642      	mov	r2, r8
 8000702:	2320      	movs	r3, #32
 8000704:	2100      	movs	r1, #0
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	9100      	str	r1, [sp, #0]
 800070c:	9201      	str	r2, [sp, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	40da      	lsrs	r2, r3
 8000712:	9201      	str	r2, [sp, #4]
 8000714:	e785      	b.n	8000622 <__udivmoddi4+0x6e>
 8000716:	4642      	mov	r2, r8
 8000718:	2320      	movs	r3, #32
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	002a      	movs	r2, r5
 800071e:	4646      	mov	r6, r8
 8000720:	409a      	lsls	r2, r3
 8000722:	0023      	movs	r3, r4
 8000724:	40f3      	lsrs	r3, r6
 8000726:	4644      	mov	r4, r8
 8000728:	4313      	orrs	r3, r2
 800072a:	002a      	movs	r2, r5
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	465b      	mov	r3, fp
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	dad4      	bge.n	80006e2 <__udivmoddi4+0x12e>
 8000738:	4642      	mov	r2, r8
 800073a:	002f      	movs	r7, r5
 800073c:	2320      	movs	r3, #32
 800073e:	0026      	movs	r6, r4
 8000740:	4097      	lsls	r7, r2
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	40de      	lsrs	r6, r3
 8000746:	003b      	movs	r3, r7
 8000748:	4333      	orrs	r3, r6
 800074a:	e7cd      	b.n	80006e8 <__udivmoddi4+0x134>

0800074c <__aeabi_fadd>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	024b      	lsls	r3, r1, #9
 8000750:	0a5a      	lsrs	r2, r3, #9
 8000752:	4694      	mov	ip, r2
 8000754:	004a      	lsls	r2, r1, #1
 8000756:	0fc9      	lsrs	r1, r1, #31
 8000758:	46ce      	mov	lr, r9
 800075a:	4647      	mov	r7, r8
 800075c:	4689      	mov	r9, r1
 800075e:	0045      	lsls	r5, r0, #1
 8000760:	0246      	lsls	r6, r0, #9
 8000762:	0e2d      	lsrs	r5, r5, #24
 8000764:	0e12      	lsrs	r2, r2, #24
 8000766:	b580      	push	{r7, lr}
 8000768:	0999      	lsrs	r1, r3, #6
 800076a:	0a77      	lsrs	r7, r6, #9
 800076c:	0fc4      	lsrs	r4, r0, #31
 800076e:	09b6      	lsrs	r6, r6, #6
 8000770:	1aab      	subs	r3, r5, r2
 8000772:	454c      	cmp	r4, r9
 8000774:	d020      	beq.n	80007b8 <__aeabi_fadd+0x6c>
 8000776:	2b00      	cmp	r3, #0
 8000778:	dd0c      	ble.n	8000794 <__aeabi_fadd+0x48>
 800077a:	2a00      	cmp	r2, #0
 800077c:	d134      	bne.n	80007e8 <__aeabi_fadd+0x9c>
 800077e:	2900      	cmp	r1, #0
 8000780:	d02a      	beq.n	80007d8 <__aeabi_fadd+0x8c>
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	2b01      	cmp	r3, #1
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0x3e>
 8000788:	e08f      	b.n	80008aa <__aeabi_fadd+0x15e>
 800078a:	2bff      	cmp	r3, #255	@ 0xff
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x44>
 800078e:	e0cd      	b.n	800092c <__aeabi_fadd+0x1e0>
 8000790:	0013      	movs	r3, r2
 8000792:	e02f      	b.n	80007f4 <__aeabi_fadd+0xa8>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d060      	beq.n	800085a <__aeabi_fadd+0x10e>
 8000798:	1b53      	subs	r3, r2, r5
 800079a:	2d00      	cmp	r5, #0
 800079c:	d000      	beq.n	80007a0 <__aeabi_fadd+0x54>
 800079e:	e0ee      	b.n	800097e <__aeabi_fadd+0x232>
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_fadd+0x5a>
 80007a4:	e13e      	b.n	8000a24 <__aeabi_fadd+0x2d8>
 80007a6:	1e5c      	subs	r4, r3, #1
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d100      	bne.n	80007ae <__aeabi_fadd+0x62>
 80007ac:	e16b      	b.n	8000a86 <__aeabi_fadd+0x33a>
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x68>
 80007b2:	e0b9      	b.n	8000928 <__aeabi_fadd+0x1dc>
 80007b4:	0023      	movs	r3, r4
 80007b6:	e0e7      	b.n	8000988 <__aeabi_fadd+0x23c>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dc00      	bgt.n	80007be <__aeabi_fadd+0x72>
 80007bc:	e0a4      	b.n	8000908 <__aeabi_fadd+0x1bc>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d069      	beq.n	8000896 <__aeabi_fadd+0x14a>
 80007c2:	2dff      	cmp	r5, #255	@ 0xff
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x7c>
 80007c6:	e0b1      	b.n	800092c <__aeabi_fadd+0x1e0>
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	04d2      	lsls	r2, r2, #19
 80007cc:	4311      	orrs	r1, r2
 80007ce:	2b1b      	cmp	r3, #27
 80007d0:	dc00      	bgt.n	80007d4 <__aeabi_fadd+0x88>
 80007d2:	e0e9      	b.n	80009a8 <__aeabi_fadd+0x25c>
 80007d4:	002b      	movs	r3, r5
 80007d6:	3605      	adds	r6, #5
 80007d8:	08f7      	lsrs	r7, r6, #3
 80007da:	2bff      	cmp	r3, #255	@ 0xff
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fadd+0x94>
 80007de:	e0a5      	b.n	800092c <__aeabi_fadd+0x1e0>
 80007e0:	027a      	lsls	r2, r7, #9
 80007e2:	0a52      	lsrs	r2, r2, #9
 80007e4:	b2d8      	uxtb	r0, r3
 80007e6:	e030      	b.n	800084a <__aeabi_fadd+0xfe>
 80007e8:	2dff      	cmp	r5, #255	@ 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0xa2>
 80007ec:	e09e      	b.n	800092c <__aeabi_fadd+0x1e0>
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	04d2      	lsls	r2, r2, #19
 80007f2:	4311      	orrs	r1, r2
 80007f4:	2001      	movs	r0, #1
 80007f6:	2b1b      	cmp	r3, #27
 80007f8:	dc08      	bgt.n	800080c <__aeabi_fadd+0xc0>
 80007fa:	0008      	movs	r0, r1
 80007fc:	2220      	movs	r2, #32
 80007fe:	40d8      	lsrs	r0, r3
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	4099      	lsls	r1, r3
 8000804:	000b      	movs	r3, r1
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	4193      	sbcs	r3, r2
 800080a:	4318      	orrs	r0, r3
 800080c:	1a36      	subs	r6, r6, r0
 800080e:	0173      	lsls	r3, r6, #5
 8000810:	d400      	bmi.n	8000814 <__aeabi_fadd+0xc8>
 8000812:	e071      	b.n	80008f8 <__aeabi_fadd+0x1ac>
 8000814:	01b6      	lsls	r6, r6, #6
 8000816:	09b7      	lsrs	r7, r6, #6
 8000818:	0038      	movs	r0, r7
 800081a:	f002 ff85 	bl	8003728 <__clzsi2>
 800081e:	003b      	movs	r3, r7
 8000820:	3805      	subs	r0, #5
 8000822:	4083      	lsls	r3, r0
 8000824:	4285      	cmp	r5, r0
 8000826:	dd4d      	ble.n	80008c4 <__aeabi_fadd+0x178>
 8000828:	4eb4      	ldr	r6, [pc, #720]	@ (8000afc <__aeabi_fadd+0x3b0>)
 800082a:	1a2d      	subs	r5, r5, r0
 800082c:	401e      	ands	r6, r3
 800082e:	075a      	lsls	r2, r3, #29
 8000830:	d068      	beq.n	8000904 <__aeabi_fadd+0x1b8>
 8000832:	220f      	movs	r2, #15
 8000834:	4013      	ands	r3, r2
 8000836:	2b04      	cmp	r3, #4
 8000838:	d064      	beq.n	8000904 <__aeabi_fadd+0x1b8>
 800083a:	3604      	adds	r6, #4
 800083c:	0173      	lsls	r3, r6, #5
 800083e:	d561      	bpl.n	8000904 <__aeabi_fadd+0x1b8>
 8000840:	1c68      	adds	r0, r5, #1
 8000842:	2dfe      	cmp	r5, #254	@ 0xfe
 8000844:	d154      	bne.n	80008f0 <__aeabi_fadd+0x1a4>
 8000846:	20ff      	movs	r0, #255	@ 0xff
 8000848:	2200      	movs	r2, #0
 800084a:	05c0      	lsls	r0, r0, #23
 800084c:	4310      	orrs	r0, r2
 800084e:	07e4      	lsls	r4, r4, #31
 8000850:	4320      	orrs	r0, r4
 8000852:	bcc0      	pop	{r6, r7}
 8000854:	46b9      	mov	r9, r7
 8000856:	46b0      	mov	r8, r6
 8000858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800085a:	22fe      	movs	r2, #254	@ 0xfe
 800085c:	4690      	mov	r8, r2
 800085e:	1c68      	adds	r0, r5, #1
 8000860:	0002      	movs	r2, r0
 8000862:	4640      	mov	r0, r8
 8000864:	4210      	tst	r0, r2
 8000866:	d16b      	bne.n	8000940 <__aeabi_fadd+0x1f4>
 8000868:	2d00      	cmp	r5, #0
 800086a:	d000      	beq.n	800086e <__aeabi_fadd+0x122>
 800086c:	e0dd      	b.n	8000a2a <__aeabi_fadd+0x2de>
 800086e:	2e00      	cmp	r6, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x128>
 8000872:	e102      	b.n	8000a7a <__aeabi_fadd+0x32e>
 8000874:	2900      	cmp	r1, #0
 8000876:	d0b3      	beq.n	80007e0 <__aeabi_fadd+0x94>
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	1a77      	subs	r7, r6, r1
 800087c:	04d2      	lsls	r2, r2, #19
 800087e:	4217      	tst	r7, r2
 8000880:	d100      	bne.n	8000884 <__aeabi_fadd+0x138>
 8000882:	e136      	b.n	8000af2 <__aeabi_fadd+0x3a6>
 8000884:	464c      	mov	r4, r9
 8000886:	1b8e      	subs	r6, r1, r6
 8000888:	d061      	beq.n	800094e <__aeabi_fadd+0x202>
 800088a:	2001      	movs	r0, #1
 800088c:	4216      	tst	r6, r2
 800088e:	d130      	bne.n	80008f2 <__aeabi_fadd+0x1a6>
 8000890:	2300      	movs	r3, #0
 8000892:	08f7      	lsrs	r7, r6, #3
 8000894:	e7a4      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000896:	2900      	cmp	r1, #0
 8000898:	d09e      	beq.n	80007d8 <__aeabi_fadd+0x8c>
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	2b01      	cmp	r3, #1
 800089e:	d100      	bne.n	80008a2 <__aeabi_fadd+0x156>
 80008a0:	e0ca      	b.n	8000a38 <__aeabi_fadd+0x2ec>
 80008a2:	2bff      	cmp	r3, #255	@ 0xff
 80008a4:	d042      	beq.n	800092c <__aeabi_fadd+0x1e0>
 80008a6:	0013      	movs	r3, r2
 80008a8:	e791      	b.n	80007ce <__aeabi_fadd+0x82>
 80008aa:	1a71      	subs	r1, r6, r1
 80008ac:	014b      	lsls	r3, r1, #5
 80008ae:	d400      	bmi.n	80008b2 <__aeabi_fadd+0x166>
 80008b0:	e0d1      	b.n	8000a56 <__aeabi_fadd+0x30a>
 80008b2:	018f      	lsls	r7, r1, #6
 80008b4:	09bf      	lsrs	r7, r7, #6
 80008b6:	0038      	movs	r0, r7
 80008b8:	f002 ff36 	bl	8003728 <__clzsi2>
 80008bc:	003b      	movs	r3, r7
 80008be:	3805      	subs	r0, #5
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2501      	movs	r5, #1
 80008c4:	2220      	movs	r2, #32
 80008c6:	1b40      	subs	r0, r0, r5
 80008c8:	3001      	adds	r0, #1
 80008ca:	1a12      	subs	r2, r2, r0
 80008cc:	001e      	movs	r6, r3
 80008ce:	4093      	lsls	r3, r2
 80008d0:	40c6      	lsrs	r6, r0
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	4193      	sbcs	r3, r2
 80008d6:	431e      	orrs	r6, r3
 80008d8:	d039      	beq.n	800094e <__aeabi_fadd+0x202>
 80008da:	0773      	lsls	r3, r6, #29
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x194>
 80008de:	e11b      	b.n	8000b18 <__aeabi_fadd+0x3cc>
 80008e0:	230f      	movs	r3, #15
 80008e2:	2500      	movs	r5, #0
 80008e4:	4033      	ands	r3, r6
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d1a7      	bne.n	800083a <__aeabi_fadd+0xee>
 80008ea:	2001      	movs	r0, #1
 80008ec:	0172      	lsls	r2, r6, #5
 80008ee:	d57c      	bpl.n	80009ea <__aeabi_fadd+0x29e>
 80008f0:	b2c0      	uxtb	r0, r0
 80008f2:	01b2      	lsls	r2, r6, #6
 80008f4:	0a52      	lsrs	r2, r2, #9
 80008f6:	e7a8      	b.n	800084a <__aeabi_fadd+0xfe>
 80008f8:	0773      	lsls	r3, r6, #29
 80008fa:	d003      	beq.n	8000904 <__aeabi_fadd+0x1b8>
 80008fc:	230f      	movs	r3, #15
 80008fe:	4033      	ands	r3, r6
 8000900:	2b04      	cmp	r3, #4
 8000902:	d19a      	bne.n	800083a <__aeabi_fadd+0xee>
 8000904:	002b      	movs	r3, r5
 8000906:	e767      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d023      	beq.n	8000954 <__aeabi_fadd+0x208>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d17b      	bne.n	8000a0a <__aeabi_fadd+0x2be>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fadd+0x1cc>
 8000916:	e086      	b.n	8000a26 <__aeabi_fadd+0x2da>
 8000918:	1e5d      	subs	r5, r3, #1
 800091a:	2b01      	cmp	r3, #1
 800091c:	d100      	bne.n	8000920 <__aeabi_fadd+0x1d4>
 800091e:	e08b      	b.n	8000a38 <__aeabi_fadd+0x2ec>
 8000920:	2bff      	cmp	r3, #255	@ 0xff
 8000922:	d002      	beq.n	800092a <__aeabi_fadd+0x1de>
 8000924:	002b      	movs	r3, r5
 8000926:	e075      	b.n	8000a14 <__aeabi_fadd+0x2c8>
 8000928:	464c      	mov	r4, r9
 800092a:	4667      	mov	r7, ip
 800092c:	2f00      	cmp	r7, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x1e6>
 8000930:	e789      	b.n	8000846 <__aeabi_fadd+0xfa>
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	03d2      	lsls	r2, r2, #15
 8000936:	433a      	orrs	r2, r7
 8000938:	0252      	lsls	r2, r2, #9
 800093a:	20ff      	movs	r0, #255	@ 0xff
 800093c:	0a52      	lsrs	r2, r2, #9
 800093e:	e784      	b.n	800084a <__aeabi_fadd+0xfe>
 8000940:	1a77      	subs	r7, r6, r1
 8000942:	017b      	lsls	r3, r7, #5
 8000944:	d46b      	bmi.n	8000a1e <__aeabi_fadd+0x2d2>
 8000946:	2f00      	cmp	r7, #0
 8000948:	d000      	beq.n	800094c <__aeabi_fadd+0x200>
 800094a:	e765      	b.n	8000818 <__aeabi_fadd+0xcc>
 800094c:	2400      	movs	r4, #0
 800094e:	2000      	movs	r0, #0
 8000950:	2200      	movs	r2, #0
 8000952:	e77a      	b.n	800084a <__aeabi_fadd+0xfe>
 8000954:	22fe      	movs	r2, #254	@ 0xfe
 8000956:	1c6b      	adds	r3, r5, #1
 8000958:	421a      	tst	r2, r3
 800095a:	d149      	bne.n	80009f0 <__aeabi_fadd+0x2a4>
 800095c:	2d00      	cmp	r5, #0
 800095e:	d000      	beq.n	8000962 <__aeabi_fadd+0x216>
 8000960:	e09f      	b.n	8000aa2 <__aeabi_fadd+0x356>
 8000962:	2e00      	cmp	r6, #0
 8000964:	d100      	bne.n	8000968 <__aeabi_fadd+0x21c>
 8000966:	e0ba      	b.n	8000ade <__aeabi_fadd+0x392>
 8000968:	2900      	cmp	r1, #0
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0x222>
 800096c:	e0cf      	b.n	8000b0e <__aeabi_fadd+0x3c2>
 800096e:	1872      	adds	r2, r6, r1
 8000970:	0153      	lsls	r3, r2, #5
 8000972:	d400      	bmi.n	8000976 <__aeabi_fadd+0x22a>
 8000974:	e0cd      	b.n	8000b12 <__aeabi_fadd+0x3c6>
 8000976:	0192      	lsls	r2, r2, #6
 8000978:	2001      	movs	r0, #1
 800097a:	0a52      	lsrs	r2, r2, #9
 800097c:	e765      	b.n	800084a <__aeabi_fadd+0xfe>
 800097e:	2aff      	cmp	r2, #255	@ 0xff
 8000980:	d0d2      	beq.n	8000928 <__aeabi_fadd+0x1dc>
 8000982:	2080      	movs	r0, #128	@ 0x80
 8000984:	04c0      	lsls	r0, r0, #19
 8000986:	4306      	orrs	r6, r0
 8000988:	2001      	movs	r0, #1
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dc08      	bgt.n	80009a0 <__aeabi_fadd+0x254>
 800098e:	0030      	movs	r0, r6
 8000990:	2420      	movs	r4, #32
 8000992:	40d8      	lsrs	r0, r3
 8000994:	1ae3      	subs	r3, r4, r3
 8000996:	409e      	lsls	r6, r3
 8000998:	0033      	movs	r3, r6
 800099a:	1e5c      	subs	r4, r3, #1
 800099c:	41a3      	sbcs	r3, r4
 800099e:	4318      	orrs	r0, r3
 80009a0:	464c      	mov	r4, r9
 80009a2:	0015      	movs	r5, r2
 80009a4:	1a0e      	subs	r6, r1, r0
 80009a6:	e732      	b.n	800080e <__aeabi_fadd+0xc2>
 80009a8:	0008      	movs	r0, r1
 80009aa:	2220      	movs	r2, #32
 80009ac:	40d8      	lsrs	r0, r3
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	4099      	lsls	r1, r3
 80009b2:	000b      	movs	r3, r1
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	4193      	sbcs	r3, r2
 80009b8:	4303      	orrs	r3, r0
 80009ba:	18f6      	adds	r6, r6, r3
 80009bc:	0173      	lsls	r3, r6, #5
 80009be:	d59b      	bpl.n	80008f8 <__aeabi_fadd+0x1ac>
 80009c0:	3501      	adds	r5, #1
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fadd+0x27c>
 80009c6:	e73e      	b.n	8000846 <__aeabi_fadd+0xfa>
 80009c8:	2301      	movs	r3, #1
 80009ca:	494d      	ldr	r1, [pc, #308]	@ (8000b00 <__aeabi_fadd+0x3b4>)
 80009cc:	0872      	lsrs	r2, r6, #1
 80009ce:	4033      	ands	r3, r6
 80009d0:	400a      	ands	r2, r1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	0016      	movs	r6, r2
 80009d6:	0753      	lsls	r3, r2, #29
 80009d8:	d004      	beq.n	80009e4 <__aeabi_fadd+0x298>
 80009da:	230f      	movs	r3, #15
 80009dc:	4013      	ands	r3, r2
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fadd+0x298>
 80009e2:	e72a      	b.n	800083a <__aeabi_fadd+0xee>
 80009e4:	0173      	lsls	r3, r6, #5
 80009e6:	d500      	bpl.n	80009ea <__aeabi_fadd+0x29e>
 80009e8:	e72a      	b.n	8000840 <__aeabi_fadd+0xf4>
 80009ea:	002b      	movs	r3, r5
 80009ec:	08f7      	lsrs	r7, r6, #3
 80009ee:	e6f7      	b.n	80007e0 <__aeabi_fadd+0x94>
 80009f0:	2bff      	cmp	r3, #255	@ 0xff
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fadd+0x2aa>
 80009f4:	e727      	b.n	8000846 <__aeabi_fadd+0xfa>
 80009f6:	1871      	adds	r1, r6, r1
 80009f8:	0849      	lsrs	r1, r1, #1
 80009fa:	074a      	lsls	r2, r1, #29
 80009fc:	d02f      	beq.n	8000a5e <__aeabi_fadd+0x312>
 80009fe:	220f      	movs	r2, #15
 8000a00:	400a      	ands	r2, r1
 8000a02:	2a04      	cmp	r2, #4
 8000a04:	d02b      	beq.n	8000a5e <__aeabi_fadd+0x312>
 8000a06:	1d0e      	adds	r6, r1, #4
 8000a08:	e6e6      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a0a:	2aff      	cmp	r2, #255	@ 0xff
 8000a0c:	d08d      	beq.n	800092a <__aeabi_fadd+0x1de>
 8000a0e:	2080      	movs	r0, #128	@ 0x80
 8000a10:	04c0      	lsls	r0, r0, #19
 8000a12:	4306      	orrs	r6, r0
 8000a14:	2b1b      	cmp	r3, #27
 8000a16:	dd24      	ble.n	8000a62 <__aeabi_fadd+0x316>
 8000a18:	0013      	movs	r3, r2
 8000a1a:	1d4e      	adds	r6, r1, #5
 8000a1c:	e6dc      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a1e:	464c      	mov	r4, r9
 8000a20:	1b8f      	subs	r7, r1, r6
 8000a22:	e6f9      	b.n	8000818 <__aeabi_fadd+0xcc>
 8000a24:	464c      	mov	r4, r9
 8000a26:	000e      	movs	r6, r1
 8000a28:	e6d6      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d149      	bne.n	8000ac2 <__aeabi_fadd+0x376>
 8000a2e:	2900      	cmp	r1, #0
 8000a30:	d068      	beq.n	8000b04 <__aeabi_fadd+0x3b8>
 8000a32:	4667      	mov	r7, ip
 8000a34:	464c      	mov	r4, r9
 8000a36:	e77c      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000a38:	1870      	adds	r0, r6, r1
 8000a3a:	0143      	lsls	r3, r0, #5
 8000a3c:	d574      	bpl.n	8000b28 <__aeabi_fadd+0x3dc>
 8000a3e:	4930      	ldr	r1, [pc, #192]	@ (8000b00 <__aeabi_fadd+0x3b4>)
 8000a40:	0840      	lsrs	r0, r0, #1
 8000a42:	4001      	ands	r1, r0
 8000a44:	0743      	lsls	r3, r0, #29
 8000a46:	d009      	beq.n	8000a5c <__aeabi_fadd+0x310>
 8000a48:	230f      	movs	r3, #15
 8000a4a:	4003      	ands	r3, r0
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d005      	beq.n	8000a5c <__aeabi_fadd+0x310>
 8000a50:	2302      	movs	r3, #2
 8000a52:	1d0e      	adds	r6, r1, #4
 8000a54:	e6c0      	b.n	80007d8 <__aeabi_fadd+0x8c>
 8000a56:	2301      	movs	r3, #1
 8000a58:	08cf      	lsrs	r7, r1, #3
 8000a5a:	e6c1      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	08cf      	lsrs	r7, r1, #3
 8000a60:	e6be      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000a62:	2520      	movs	r5, #32
 8000a64:	0030      	movs	r0, r6
 8000a66:	40d8      	lsrs	r0, r3
 8000a68:	1aeb      	subs	r3, r5, r3
 8000a6a:	409e      	lsls	r6, r3
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	1e5d      	subs	r5, r3, #1
 8000a70:	41ab      	sbcs	r3, r5
 8000a72:	4303      	orrs	r3, r0
 8000a74:	0015      	movs	r5, r2
 8000a76:	185e      	adds	r6, r3, r1
 8000a78:	e7a0      	b.n	80009bc <__aeabi_fadd+0x270>
 8000a7a:	2900      	cmp	r1, #0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fadd+0x334>
 8000a7e:	e765      	b.n	800094c <__aeabi_fadd+0x200>
 8000a80:	464c      	mov	r4, r9
 8000a82:	4667      	mov	r7, ip
 8000a84:	e6ac      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000a86:	1b8f      	subs	r7, r1, r6
 8000a88:	017b      	lsls	r3, r7, #5
 8000a8a:	d52e      	bpl.n	8000aea <__aeabi_fadd+0x39e>
 8000a8c:	01bf      	lsls	r7, r7, #6
 8000a8e:	09bf      	lsrs	r7, r7, #6
 8000a90:	0038      	movs	r0, r7
 8000a92:	f002 fe49 	bl	8003728 <__clzsi2>
 8000a96:	003b      	movs	r3, r7
 8000a98:	3805      	subs	r0, #5
 8000a9a:	4083      	lsls	r3, r0
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	3501      	adds	r5, #1
 8000aa0:	e710      	b.n	80008c4 <__aeabi_fadd+0x178>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fadd+0x35c>
 8000aa6:	e740      	b.n	800092a <__aeabi_fadd+0x1de>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fadd+0x362>
 8000aac:	e741      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	429f      	cmp	r7, r3
 8000ab4:	d200      	bcs.n	8000ab8 <__aeabi_fadd+0x36c>
 8000ab6:	e73c      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ab8:	459c      	cmp	ip, r3
 8000aba:	d300      	bcc.n	8000abe <__aeabi_fadd+0x372>
 8000abc:	e739      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000abe:	4667      	mov	r7, ip
 8000ac0:	e737      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fadd+0x37c>
 8000ac6:	e734      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ac8:	2380      	movs	r3, #128	@ 0x80
 8000aca:	03db      	lsls	r3, r3, #15
 8000acc:	429f      	cmp	r7, r3
 8000ace:	d200      	bcs.n	8000ad2 <__aeabi_fadd+0x386>
 8000ad0:	e72f      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ad2:	459c      	cmp	ip, r3
 8000ad4:	d300      	bcc.n	8000ad8 <__aeabi_fadd+0x38c>
 8000ad6:	e72c      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ad8:	464c      	mov	r4, r9
 8000ada:	4667      	mov	r7, ip
 8000adc:	e729      	b.n	8000932 <__aeabi_fadd+0x1e6>
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_fadd+0x398>
 8000ae2:	e734      	b.n	800094e <__aeabi_fadd+0x202>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	08cf      	lsrs	r7, r1, #3
 8000ae8:	e67a      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000aea:	464c      	mov	r4, r9
 8000aec:	2301      	movs	r3, #1
 8000aee:	08ff      	lsrs	r7, r7, #3
 8000af0:	e676      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fadd+0x3ac>
 8000af6:	e729      	b.n	800094c <__aeabi_fadd+0x200>
 8000af8:	08ff      	lsrs	r7, r7, #3
 8000afa:	e671      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000afc:	fbffffff 	.word	0xfbffffff
 8000b00:	7dffffff 	.word	0x7dffffff
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	2400      	movs	r4, #0
 8000b08:	20ff      	movs	r0, #255	@ 0xff
 8000b0a:	03d2      	lsls	r2, r2, #15
 8000b0c:	e69d      	b.n	800084a <__aeabi_fadd+0xfe>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e666      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b12:	2300      	movs	r3, #0
 8000b14:	08d7      	lsrs	r7, r2, #3
 8000b16:	e663      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b18:	2001      	movs	r0, #1
 8000b1a:	0172      	lsls	r2, r6, #5
 8000b1c:	d500      	bpl.n	8000b20 <__aeabi_fadd+0x3d4>
 8000b1e:	e6e7      	b.n	80008f0 <__aeabi_fadd+0x1a4>
 8000b20:	0031      	movs	r1, r6
 8000b22:	2300      	movs	r3, #0
 8000b24:	08cf      	lsrs	r7, r1, #3
 8000b26:	e65b      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	08c7      	lsrs	r7, r0, #3
 8000b2c:	e658      	b.n	80007e0 <__aeabi_fadd+0x94>
 8000b2e:	46c0      	nop			@ (mov r8, r8)

08000b30 <__aeabi_fdiv>:
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b32:	4646      	mov	r6, r8
 8000b34:	464f      	mov	r7, r9
 8000b36:	46d6      	mov	lr, sl
 8000b38:	0245      	lsls	r5, r0, #9
 8000b3a:	b5c0      	push	{r6, r7, lr}
 8000b3c:	0fc3      	lsrs	r3, r0, #31
 8000b3e:	0047      	lsls	r7, r0, #1
 8000b40:	4698      	mov	r8, r3
 8000b42:	1c0e      	adds	r6, r1, #0
 8000b44:	0a6d      	lsrs	r5, r5, #9
 8000b46:	0e3f      	lsrs	r7, r7, #24
 8000b48:	d05b      	beq.n	8000c02 <__aeabi_fdiv+0xd2>
 8000b4a:	2fff      	cmp	r7, #255	@ 0xff
 8000b4c:	d021      	beq.n	8000b92 <__aeabi_fdiv+0x62>
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	00ed      	lsls	r5, r5, #3
 8000b52:	04db      	lsls	r3, r3, #19
 8000b54:	431d      	orrs	r5, r3
 8000b56:	2300      	movs	r3, #0
 8000b58:	4699      	mov	r9, r3
 8000b5a:	469a      	mov	sl, r3
 8000b5c:	3f7f      	subs	r7, #127	@ 0x7f
 8000b5e:	0274      	lsls	r4, r6, #9
 8000b60:	0073      	lsls	r3, r6, #1
 8000b62:	0a64      	lsrs	r4, r4, #9
 8000b64:	0e1b      	lsrs	r3, r3, #24
 8000b66:	0ff6      	lsrs	r6, r6, #31
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d020      	beq.n	8000bae <__aeabi_fdiv+0x7e>
 8000b6c:	2bff      	cmp	r3, #255	@ 0xff
 8000b6e:	d043      	beq.n	8000bf8 <__aeabi_fdiv+0xc8>
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	2000      	movs	r0, #0
 8000b74:	00e4      	lsls	r4, r4, #3
 8000b76:	04d2      	lsls	r2, r2, #19
 8000b78:	4314      	orrs	r4, r2
 8000b7a:	3b7f      	subs	r3, #127	@ 0x7f
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	1aff      	subs	r7, r7, r3
 8000b80:	464b      	mov	r3, r9
 8000b82:	4072      	eors	r2, r6
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d900      	bls.n	8000b8a <__aeabi_fdiv+0x5a>
 8000b88:	e09d      	b.n	8000cc6 <__aeabi_fdiv+0x196>
 8000b8a:	4971      	ldr	r1, [pc, #452]	@ (8000d50 <__aeabi_fdiv+0x220>)
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	58cb      	ldr	r3, [r1, r3]
 8000b90:	469f      	mov	pc, r3
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d15a      	bne.n	8000c4c <__aeabi_fdiv+0x11c>
 8000b96:	2308      	movs	r3, #8
 8000b98:	4699      	mov	r9, r3
 8000b9a:	3b06      	subs	r3, #6
 8000b9c:	0274      	lsls	r4, r6, #9
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	0073      	lsls	r3, r6, #1
 8000ba2:	27ff      	movs	r7, #255	@ 0xff
 8000ba4:	0a64      	lsrs	r4, r4, #9
 8000ba6:	0e1b      	lsrs	r3, r3, #24
 8000ba8:	0ff6      	lsrs	r6, r6, #31
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1de      	bne.n	8000b6c <__aeabi_fdiv+0x3c>
 8000bae:	2c00      	cmp	r4, #0
 8000bb0:	d13b      	bne.n	8000c2a <__aeabi_fdiv+0xfa>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	4642      	mov	r2, r8
 8000bb6:	4649      	mov	r1, r9
 8000bb8:	4072      	eors	r2, r6
 8000bba:	4319      	orrs	r1, r3
 8000bbc:	290e      	cmp	r1, #14
 8000bbe:	d818      	bhi.n	8000bf2 <__aeabi_fdiv+0xc2>
 8000bc0:	4864      	ldr	r0, [pc, #400]	@ (8000d54 <__aeabi_fdiv+0x224>)
 8000bc2:	0089      	lsls	r1, r1, #2
 8000bc4:	5841      	ldr	r1, [r0, r1]
 8000bc6:	468f      	mov	pc, r1
 8000bc8:	4653      	mov	r3, sl
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fdiv+0xa0>
 8000bce:	e0b8      	b.n	8000d42 <__aeabi_fdiv+0x212>
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d06e      	beq.n	8000cb2 <__aeabi_fdiv+0x182>
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	002c      	movs	r4, r5
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d140      	bne.n	8000c5e <__aeabi_fdiv+0x12e>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2400      	movs	r4, #0
 8000be0:	05c0      	lsls	r0, r0, #23
 8000be2:	4320      	orrs	r0, r4
 8000be4:	07d2      	lsls	r2, r2, #31
 8000be6:	4310      	orrs	r0, r2
 8000be8:	bce0      	pop	{r5, r6, r7}
 8000bea:	46ba      	mov	sl, r7
 8000bec:	46b1      	mov	r9, r6
 8000bee:	46a8      	mov	r8, r5
 8000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf2:	20ff      	movs	r0, #255	@ 0xff
 8000bf4:	2400      	movs	r4, #0
 8000bf6:	e7f3      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000bf8:	2c00      	cmp	r4, #0
 8000bfa:	d120      	bne.n	8000c3e <__aeabi_fdiv+0x10e>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	3fff      	subs	r7, #255	@ 0xff
 8000c00:	e7d8      	b.n	8000bb4 <__aeabi_fdiv+0x84>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d105      	bne.n	8000c12 <__aeabi_fdiv+0xe2>
 8000c06:	2304      	movs	r3, #4
 8000c08:	4699      	mov	r9, r3
 8000c0a:	3b03      	subs	r3, #3
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	469a      	mov	sl, r3
 8000c10:	e7a5      	b.n	8000b5e <__aeabi_fdiv+0x2e>
 8000c12:	0028      	movs	r0, r5
 8000c14:	f002 fd88 	bl	8003728 <__clzsi2>
 8000c18:	2776      	movs	r7, #118	@ 0x76
 8000c1a:	1f43      	subs	r3, r0, #5
 8000c1c:	409d      	lsls	r5, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	427f      	negs	r7, r7
 8000c22:	4699      	mov	r9, r3
 8000c24:	469a      	mov	sl, r3
 8000c26:	1a3f      	subs	r7, r7, r0
 8000c28:	e799      	b.n	8000b5e <__aeabi_fdiv+0x2e>
 8000c2a:	0020      	movs	r0, r4
 8000c2c:	f002 fd7c 	bl	8003728 <__clzsi2>
 8000c30:	1f43      	subs	r3, r0, #5
 8000c32:	409c      	lsls	r4, r3
 8000c34:	2376      	movs	r3, #118	@ 0x76
 8000c36:	425b      	negs	r3, r3
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	e79e      	b.n	8000b7c <__aeabi_fdiv+0x4c>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	464a      	mov	r2, r9
 8000c42:	431a      	orrs	r2, r3
 8000c44:	4691      	mov	r9, r2
 8000c46:	2003      	movs	r0, #3
 8000c48:	33fc      	adds	r3, #252	@ 0xfc
 8000c4a:	e797      	b.n	8000b7c <__aeabi_fdiv+0x4c>
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	4699      	mov	r9, r3
 8000c50:	3b09      	subs	r3, #9
 8000c52:	27ff      	movs	r7, #255	@ 0xff
 8000c54:	469a      	mov	sl, r3
 8000c56:	e782      	b.n	8000b5e <__aeabi_fdiv+0x2e>
 8000c58:	2803      	cmp	r0, #3
 8000c5a:	d02c      	beq.n	8000cb6 <__aeabi_fdiv+0x186>
 8000c5c:	0032      	movs	r2, r6
 8000c5e:	0038      	movs	r0, r7
 8000c60:	307f      	adds	r0, #127	@ 0x7f
 8000c62:	2800      	cmp	r0, #0
 8000c64:	dd47      	ble.n	8000cf6 <__aeabi_fdiv+0x1c6>
 8000c66:	0763      	lsls	r3, r4, #29
 8000c68:	d004      	beq.n	8000c74 <__aeabi_fdiv+0x144>
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	4023      	ands	r3, r4
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fdiv+0x144>
 8000c72:	3404      	adds	r4, #4
 8000c74:	0123      	lsls	r3, r4, #4
 8000c76:	d503      	bpl.n	8000c80 <__aeabi_fdiv+0x150>
 8000c78:	0038      	movs	r0, r7
 8000c7a:	4b37      	ldr	r3, [pc, #220]	@ (8000d58 <__aeabi_fdiv+0x228>)
 8000c7c:	3080      	adds	r0, #128	@ 0x80
 8000c7e:	401c      	ands	r4, r3
 8000c80:	28fe      	cmp	r0, #254	@ 0xfe
 8000c82:	dcb6      	bgt.n	8000bf2 <__aeabi_fdiv+0xc2>
 8000c84:	01a4      	lsls	r4, r4, #6
 8000c86:	0a64      	lsrs	r4, r4, #9
 8000c88:	b2c0      	uxtb	r0, r0
 8000c8a:	e7a9      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000c8c:	2480      	movs	r4, #128	@ 0x80
 8000c8e:	2200      	movs	r2, #0
 8000c90:	20ff      	movs	r0, #255	@ 0xff
 8000c92:	03e4      	lsls	r4, r4, #15
 8000c94:	e7a4      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	03db      	lsls	r3, r3, #15
 8000c9a:	421d      	tst	r5, r3
 8000c9c:	d001      	beq.n	8000ca2 <__aeabi_fdiv+0x172>
 8000c9e:	421c      	tst	r4, r3
 8000ca0:	d00b      	beq.n	8000cba <__aeabi_fdiv+0x18a>
 8000ca2:	2480      	movs	r4, #128	@ 0x80
 8000ca4:	03e4      	lsls	r4, r4, #15
 8000ca6:	432c      	orrs	r4, r5
 8000ca8:	0264      	lsls	r4, r4, #9
 8000caa:	4642      	mov	r2, r8
 8000cac:	20ff      	movs	r0, #255	@ 0xff
 8000cae:	0a64      	lsrs	r4, r4, #9
 8000cb0:	e796      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000cb2:	4646      	mov	r6, r8
 8000cb4:	002c      	movs	r4, r5
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	03db      	lsls	r3, r3, #15
 8000cba:	431c      	orrs	r4, r3
 8000cbc:	0264      	lsls	r4, r4, #9
 8000cbe:	0032      	movs	r2, r6
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	0a64      	lsrs	r4, r4, #9
 8000cc4:	e78c      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000cc6:	016d      	lsls	r5, r5, #5
 8000cc8:	0160      	lsls	r0, r4, #5
 8000cca:	4285      	cmp	r5, r0
 8000ccc:	d22d      	bcs.n	8000d2a <__aeabi_fdiv+0x1fa>
 8000cce:	231b      	movs	r3, #27
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	3f01      	subs	r7, #1
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	0029      	movs	r1, r5
 8000cd8:	0064      	lsls	r4, r4, #1
 8000cda:	006d      	lsls	r5, r5, #1
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	db01      	blt.n	8000ce4 <__aeabi_fdiv+0x1b4>
 8000ce0:	4285      	cmp	r5, r0
 8000ce2:	d301      	bcc.n	8000ce8 <__aeabi_fdiv+0x1b8>
 8000ce4:	1a2d      	subs	r5, r5, r0
 8000ce6:	4334      	orrs	r4, r6
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f3      	bne.n	8000cd6 <__aeabi_fdiv+0x1a6>
 8000cee:	1e6b      	subs	r3, r5, #1
 8000cf0:	419d      	sbcs	r5, r3
 8000cf2:	432c      	orrs	r4, r5
 8000cf4:	e7b3      	b.n	8000c5e <__aeabi_fdiv+0x12e>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	1a1b      	subs	r3, r3, r0
 8000cfa:	2b1b      	cmp	r3, #27
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_fdiv+0x1d0>
 8000cfe:	e76d      	b.n	8000bdc <__aeabi_fdiv+0xac>
 8000d00:	0021      	movs	r1, r4
 8000d02:	379e      	adds	r7, #158	@ 0x9e
 8000d04:	40d9      	lsrs	r1, r3
 8000d06:	40bc      	lsls	r4, r7
 8000d08:	000b      	movs	r3, r1
 8000d0a:	1e61      	subs	r1, r4, #1
 8000d0c:	418c      	sbcs	r4, r1
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	0759      	lsls	r1, r3, #29
 8000d12:	d004      	beq.n	8000d1e <__aeabi_fdiv+0x1ee>
 8000d14:	210f      	movs	r1, #15
 8000d16:	4019      	ands	r1, r3
 8000d18:	2904      	cmp	r1, #4
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_fdiv+0x1ee>
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	0159      	lsls	r1, r3, #5
 8000d20:	d413      	bmi.n	8000d4a <__aeabi_fdiv+0x21a>
 8000d22:	019b      	lsls	r3, r3, #6
 8000d24:	2000      	movs	r0, #0
 8000d26:	0a5c      	lsrs	r4, r3, #9
 8000d28:	e75a      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d2a:	231a      	movs	r3, #26
 8000d2c:	2401      	movs	r4, #1
 8000d2e:	1a2d      	subs	r5, r5, r0
 8000d30:	e7d0      	b.n	8000cd4 <__aeabi_fdiv+0x1a4>
 8000d32:	1e98      	subs	r0, r3, #2
 8000d34:	4243      	negs	r3, r0
 8000d36:	4158      	adcs	r0, r3
 8000d38:	4240      	negs	r0, r0
 8000d3a:	0032      	movs	r2, r6
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	b2c0      	uxtb	r0, r0
 8000d40:	e74e      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d42:	4642      	mov	r2, r8
 8000d44:	20ff      	movs	r0, #255	@ 0xff
 8000d46:	2400      	movs	r4, #0
 8000d48:	e74a      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	e747      	b.n	8000be0 <__aeabi_fdiv+0xb0>
 8000d50:	0800c8bc 	.word	0x0800c8bc
 8000d54:	0800c8fc 	.word	0x0800c8fc
 8000d58:	f7ffffff 	.word	0xf7ffffff

08000d5c <__eqsf2>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	0042      	lsls	r2, r0, #1
 8000d60:	024e      	lsls	r6, r1, #9
 8000d62:	004c      	lsls	r4, r1, #1
 8000d64:	0245      	lsls	r5, r0, #9
 8000d66:	0a6d      	lsrs	r5, r5, #9
 8000d68:	0e12      	lsrs	r2, r2, #24
 8000d6a:	0fc3      	lsrs	r3, r0, #31
 8000d6c:	0a76      	lsrs	r6, r6, #9
 8000d6e:	0e24      	lsrs	r4, r4, #24
 8000d70:	0fc9      	lsrs	r1, r1, #31
 8000d72:	2aff      	cmp	r2, #255	@ 0xff
 8000d74:	d010      	beq.n	8000d98 <__eqsf2+0x3c>
 8000d76:	2cff      	cmp	r4, #255	@ 0xff
 8000d78:	d00c      	beq.n	8000d94 <__eqsf2+0x38>
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	42a2      	cmp	r2, r4
 8000d7e:	d10a      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d80:	42b5      	cmp	r5, r6
 8000d82:	d108      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d00f      	beq.n	8000da8 <__eqsf2+0x4c>
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	d104      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d8c:	0028      	movs	r0, r5
 8000d8e:	1e43      	subs	r3, r0, #1
 8000d90:	4198      	sbcs	r0, r3
 8000d92:	e000      	b.n	8000d96 <__eqsf2+0x3a>
 8000d94:	2001      	movs	r0, #1
 8000d96:	bd70      	pop	{r4, r5, r6, pc}
 8000d98:	2001      	movs	r0, #1
 8000d9a:	2cff      	cmp	r4, #255	@ 0xff
 8000d9c:	d1fb      	bne.n	8000d96 <__eqsf2+0x3a>
 8000d9e:	4335      	orrs	r5, r6
 8000da0:	d1f9      	bne.n	8000d96 <__eqsf2+0x3a>
 8000da2:	404b      	eors	r3, r1
 8000da4:	0018      	movs	r0, r3
 8000da6:	e7f6      	b.n	8000d96 <__eqsf2+0x3a>
 8000da8:	2000      	movs	r0, #0
 8000daa:	e7f4      	b.n	8000d96 <__eqsf2+0x3a>

08000dac <__gesf2>:
 8000dac:	b530      	push	{r4, r5, lr}
 8000dae:	0042      	lsls	r2, r0, #1
 8000db0:	0244      	lsls	r4, r0, #9
 8000db2:	024d      	lsls	r5, r1, #9
 8000db4:	0fc3      	lsrs	r3, r0, #31
 8000db6:	0048      	lsls	r0, r1, #1
 8000db8:	0a64      	lsrs	r4, r4, #9
 8000dba:	0e12      	lsrs	r2, r2, #24
 8000dbc:	0a6d      	lsrs	r5, r5, #9
 8000dbe:	0e00      	lsrs	r0, r0, #24
 8000dc0:	0fc9      	lsrs	r1, r1, #31
 8000dc2:	2aff      	cmp	r2, #255	@ 0xff
 8000dc4:	d018      	beq.n	8000df8 <__gesf2+0x4c>
 8000dc6:	28ff      	cmp	r0, #255	@ 0xff
 8000dc8:	d00a      	beq.n	8000de0 <__gesf2+0x34>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	d11e      	bne.n	8000e0c <__gesf2+0x60>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d10a      	bne.n	8000de8 <__gesf2+0x3c>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d029      	beq.n	8000e2a <__gesf2+0x7e>
 8000dd6:	2c00      	cmp	r4, #0
 8000dd8:	d12d      	bne.n	8000e36 <__gesf2+0x8a>
 8000dda:	0048      	lsls	r0, r1, #1
 8000ddc:	3801      	subs	r0, #1
 8000dde:	bd30      	pop	{r4, r5, pc}
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d125      	bne.n	8000e30 <__gesf2+0x84>
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d101      	bne.n	8000dec <__gesf2+0x40>
 8000de8:	2c00      	cmp	r4, #0
 8000dea:	d0f6      	beq.n	8000dda <__gesf2+0x2e>
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d019      	beq.n	8000e24 <__gesf2+0x78>
 8000df0:	2001      	movs	r0, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	4318      	orrs	r0, r3
 8000df6:	e7f2      	b.n	8000dde <__gesf2+0x32>
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d119      	bne.n	8000e30 <__gesf2+0x84>
 8000dfc:	28ff      	cmp	r0, #255	@ 0xff
 8000dfe:	d1f7      	bne.n	8000df0 <__gesf2+0x44>
 8000e00:	2d00      	cmp	r5, #0
 8000e02:	d115      	bne.n	8000e30 <__gesf2+0x84>
 8000e04:	2000      	movs	r0, #0
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d1f2      	bne.n	8000df0 <__gesf2+0x44>
 8000e0a:	e7e8      	b.n	8000dde <__gesf2+0x32>
 8000e0c:	2800      	cmp	r0, #0
 8000e0e:	d0ef      	beq.n	8000df0 <__gesf2+0x44>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d1ed      	bne.n	8000df0 <__gesf2+0x44>
 8000e14:	4282      	cmp	r2, r0
 8000e16:	dceb      	bgt.n	8000df0 <__gesf2+0x44>
 8000e18:	db04      	blt.n	8000e24 <__gesf2+0x78>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d8e8      	bhi.n	8000df0 <__gesf2+0x44>
 8000e1e:	2000      	movs	r0, #0
 8000e20:	42ac      	cmp	r4, r5
 8000e22:	d2dc      	bcs.n	8000dde <__gesf2+0x32>
 8000e24:	0058      	lsls	r0, r3, #1
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7d9      	b.n	8000dde <__gesf2+0x32>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d0d7      	beq.n	8000dde <__gesf2+0x32>
 8000e2e:	e7df      	b.n	8000df0 <__gesf2+0x44>
 8000e30:	2002      	movs	r0, #2
 8000e32:	4240      	negs	r0, r0
 8000e34:	e7d3      	b.n	8000dde <__gesf2+0x32>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d1da      	bne.n	8000df0 <__gesf2+0x44>
 8000e3a:	e7ee      	b.n	8000e1a <__gesf2+0x6e>

08000e3c <__lesf2>:
 8000e3c:	b530      	push	{r4, r5, lr}
 8000e3e:	0042      	lsls	r2, r0, #1
 8000e40:	0244      	lsls	r4, r0, #9
 8000e42:	024d      	lsls	r5, r1, #9
 8000e44:	0fc3      	lsrs	r3, r0, #31
 8000e46:	0048      	lsls	r0, r1, #1
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	0e12      	lsrs	r2, r2, #24
 8000e4c:	0a6d      	lsrs	r5, r5, #9
 8000e4e:	0e00      	lsrs	r0, r0, #24
 8000e50:	0fc9      	lsrs	r1, r1, #31
 8000e52:	2aff      	cmp	r2, #255	@ 0xff
 8000e54:	d017      	beq.n	8000e86 <__lesf2+0x4a>
 8000e56:	28ff      	cmp	r0, #255	@ 0xff
 8000e58:	d00a      	beq.n	8000e70 <__lesf2+0x34>
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	d11b      	bne.n	8000e96 <__lesf2+0x5a>
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d10a      	bne.n	8000e78 <__lesf2+0x3c>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d01d      	beq.n	8000ea2 <__lesf2+0x66>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d12d      	bne.n	8000ec6 <__lesf2+0x8a>
 8000e6a:	0048      	lsls	r0, r1, #1
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e011      	b.n	8000e94 <__lesf2+0x58>
 8000e70:	2d00      	cmp	r5, #0
 8000e72:	d10e      	bne.n	8000e92 <__lesf2+0x56>
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d101      	bne.n	8000e7c <__lesf2+0x40>
 8000e78:	2c00      	cmp	r4, #0
 8000e7a:	d0f6      	beq.n	8000e6a <__lesf2+0x2e>
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d10c      	bne.n	8000e9a <__lesf2+0x5e>
 8000e80:	0058      	lsls	r0, r3, #1
 8000e82:	3801      	subs	r0, #1
 8000e84:	e006      	b.n	8000e94 <__lesf2+0x58>
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d103      	bne.n	8000e92 <__lesf2+0x56>
 8000e8a:	28ff      	cmp	r0, #255	@ 0xff
 8000e8c:	d105      	bne.n	8000e9a <__lesf2+0x5e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d015      	beq.n	8000ebe <__lesf2+0x82>
 8000e92:	2002      	movs	r0, #2
 8000e94:	bd30      	pop	{r4, r5, pc}
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d106      	bne.n	8000ea8 <__lesf2+0x6c>
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	4318      	orrs	r0, r3
 8000ea0:	e7f8      	b.n	8000e94 <__lesf2+0x58>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f6      	beq.n	8000e94 <__lesf2+0x58>
 8000ea6:	e7f8      	b.n	8000e9a <__lesf2+0x5e>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1f6      	bne.n	8000e9a <__lesf2+0x5e>
 8000eac:	4282      	cmp	r2, r0
 8000eae:	dcf4      	bgt.n	8000e9a <__lesf2+0x5e>
 8000eb0:	dbe6      	blt.n	8000e80 <__lesf2+0x44>
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	d8f1      	bhi.n	8000e9a <__lesf2+0x5e>
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	42ac      	cmp	r4, r5
 8000eba:	d2eb      	bcs.n	8000e94 <__lesf2+0x58>
 8000ebc:	e7e0      	b.n	8000e80 <__lesf2+0x44>
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d1ea      	bne.n	8000e9a <__lesf2+0x5e>
 8000ec4:	e7e6      	b.n	8000e94 <__lesf2+0x58>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d1e7      	bne.n	8000e9a <__lesf2+0x5e>
 8000eca:	e7f2      	b.n	8000eb2 <__lesf2+0x76>

08000ecc <__aeabi_fmul>:
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	464f      	mov	r7, r9
 8000ed0:	4646      	mov	r6, r8
 8000ed2:	46d6      	mov	lr, sl
 8000ed4:	0044      	lsls	r4, r0, #1
 8000ed6:	b5c0      	push	{r6, r7, lr}
 8000ed8:	0246      	lsls	r6, r0, #9
 8000eda:	1c0f      	adds	r7, r1, #0
 8000edc:	0a76      	lsrs	r6, r6, #9
 8000ede:	0e24      	lsrs	r4, r4, #24
 8000ee0:	0fc5      	lsrs	r5, r0, #31
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fmul+0x1c>
 8000ee6:	e0da      	b.n	800109e <__aeabi_fmul+0x1d2>
 8000ee8:	2cff      	cmp	r4, #255	@ 0xff
 8000eea:	d074      	beq.n	8000fd6 <__aeabi_fmul+0x10a>
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	00f6      	lsls	r6, r6, #3
 8000ef0:	04db      	lsls	r3, r3, #19
 8000ef2:	431e      	orrs	r6, r3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	469a      	mov	sl, r3
 8000efa:	3c7f      	subs	r4, #127	@ 0x7f
 8000efc:	027b      	lsls	r3, r7, #9
 8000efe:	0a5b      	lsrs	r3, r3, #9
 8000f00:	4698      	mov	r8, r3
 8000f02:	007b      	lsls	r3, r7, #1
 8000f04:	0e1b      	lsrs	r3, r3, #24
 8000f06:	0fff      	lsrs	r7, r7, #31
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d074      	beq.n	8000ff6 <__aeabi_fmul+0x12a>
 8000f0c:	2bff      	cmp	r3, #255	@ 0xff
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fmul+0x46>
 8000f10:	e08e      	b.n	8001030 <__aeabi_fmul+0x164>
 8000f12:	4642      	mov	r2, r8
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	00d2      	lsls	r2, r2, #3
 8000f18:	04c9      	lsls	r1, r1, #19
 8000f1a:	4311      	orrs	r1, r2
 8000f1c:	3b7f      	subs	r3, #127	@ 0x7f
 8000f1e:	002a      	movs	r2, r5
 8000f20:	18e4      	adds	r4, r4, r3
 8000f22:	464b      	mov	r3, r9
 8000f24:	407a      	eors	r2, r7
 8000f26:	4688      	mov	r8, r1
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	dc75      	bgt.n	800101a <__aeabi_fmul+0x14e>
 8000f2e:	464b      	mov	r3, r9
 8000f30:	2000      	movs	r0, #0
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	dd0f      	ble.n	8000f56 <__aeabi_fmul+0x8a>
 8000f36:	4649      	mov	r1, r9
 8000f38:	2301      	movs	r3, #1
 8000f3a:	408b      	lsls	r3, r1
 8000f3c:	21a6      	movs	r1, #166	@ 0xa6
 8000f3e:	00c9      	lsls	r1, r1, #3
 8000f40:	420b      	tst	r3, r1
 8000f42:	d169      	bne.n	8001018 <__aeabi_fmul+0x14c>
 8000f44:	2190      	movs	r1, #144	@ 0x90
 8000f46:	0089      	lsls	r1, r1, #2
 8000f48:	420b      	tst	r3, r1
 8000f4a:	d000      	beq.n	8000f4e <__aeabi_fmul+0x82>
 8000f4c:	e100      	b.n	8001150 <__aeabi_fmul+0x284>
 8000f4e:	2188      	movs	r1, #136	@ 0x88
 8000f50:	4219      	tst	r1, r3
 8000f52:	d000      	beq.n	8000f56 <__aeabi_fmul+0x8a>
 8000f54:	e0f5      	b.n	8001142 <__aeabi_fmul+0x276>
 8000f56:	4641      	mov	r1, r8
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c09      	lsrs	r1, r1, #16
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	0008      	movs	r0, r1
 8000f60:	0c35      	lsrs	r5, r6, #16
 8000f62:	0436      	lsls	r6, r6, #16
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	0c36      	lsrs	r6, r6, #16
 8000f68:	4370      	muls	r0, r6
 8000f6a:	4369      	muls	r1, r5
 8000f6c:	435e      	muls	r6, r3
 8000f6e:	435d      	muls	r5, r3
 8000f70:	1876      	adds	r6, r6, r1
 8000f72:	0c03      	lsrs	r3, r0, #16
 8000f74:	199b      	adds	r3, r3, r6
 8000f76:	4299      	cmp	r1, r3
 8000f78:	d903      	bls.n	8000f82 <__aeabi_fmul+0xb6>
 8000f7a:	2180      	movs	r1, #128	@ 0x80
 8000f7c:	0249      	lsls	r1, r1, #9
 8000f7e:	468c      	mov	ip, r1
 8000f80:	4465      	add	r5, ip
 8000f82:	0400      	lsls	r0, r0, #16
 8000f84:	0419      	lsls	r1, r3, #16
 8000f86:	0c00      	lsrs	r0, r0, #16
 8000f88:	1809      	adds	r1, r1, r0
 8000f8a:	018e      	lsls	r6, r1, #6
 8000f8c:	1e70      	subs	r0, r6, #1
 8000f8e:	4186      	sbcs	r6, r0
 8000f90:	0c1b      	lsrs	r3, r3, #16
 8000f92:	0e89      	lsrs	r1, r1, #26
 8000f94:	195b      	adds	r3, r3, r5
 8000f96:	430e      	orrs	r6, r1
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	d46c      	bmi.n	800107a <__aeabi_fmul+0x1ae>
 8000fa0:	0023      	movs	r3, r4
 8000fa2:	337f      	adds	r3, #127	@ 0x7f
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	dc00      	bgt.n	8000faa <__aeabi_fmul+0xde>
 8000fa8:	e0b1      	b.n	800110e <__aeabi_fmul+0x242>
 8000faa:	0015      	movs	r5, r2
 8000fac:	0771      	lsls	r1, r6, #29
 8000fae:	d00b      	beq.n	8000fc8 <__aeabi_fmul+0xfc>
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	4030      	ands	r0, r6
 8000fb6:	2804      	cmp	r0, #4
 8000fb8:	d006      	beq.n	8000fc8 <__aeabi_fmul+0xfc>
 8000fba:	3604      	adds	r6, #4
 8000fbc:	0132      	lsls	r2, r6, #4
 8000fbe:	d503      	bpl.n	8000fc8 <__aeabi_fmul+0xfc>
 8000fc0:	4b6e      	ldr	r3, [pc, #440]	@ (800117c <__aeabi_fmul+0x2b0>)
 8000fc2:	401e      	ands	r6, r3
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	3380      	adds	r3, #128	@ 0x80
 8000fc8:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fca:	dd00      	ble.n	8000fce <__aeabi_fmul+0x102>
 8000fcc:	e0bd      	b.n	800114a <__aeabi_fmul+0x27e>
 8000fce:	01b2      	lsls	r2, r6, #6
 8000fd0:	0a52      	lsrs	r2, r2, #9
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	e048      	b.n	8001068 <__aeabi_fmul+0x19c>
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fmul+0x110>
 8000fda:	e092      	b.n	8001102 <__aeabi_fmul+0x236>
 8000fdc:	2308      	movs	r3, #8
 8000fde:	4699      	mov	r9, r3
 8000fe0:	3b06      	subs	r3, #6
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	027b      	lsls	r3, r7, #9
 8000fe6:	0a5b      	lsrs	r3, r3, #9
 8000fe8:	4698      	mov	r8, r3
 8000fea:	007b      	lsls	r3, r7, #1
 8000fec:	24ff      	movs	r4, #255	@ 0xff
 8000fee:	0e1b      	lsrs	r3, r3, #24
 8000ff0:	0fff      	lsrs	r7, r7, #31
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d18a      	bne.n	8000f0c <__aeabi_fmul+0x40>
 8000ff6:	4642      	mov	r2, r8
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d164      	bne.n	80010c6 <__aeabi_fmul+0x1fa>
 8000ffc:	4649      	mov	r1, r9
 8000ffe:	3201      	adds	r2, #1
 8001000:	4311      	orrs	r1, r2
 8001002:	4689      	mov	r9, r1
 8001004:	290a      	cmp	r1, #10
 8001006:	dc08      	bgt.n	800101a <__aeabi_fmul+0x14e>
 8001008:	407d      	eors	r5, r7
 800100a:	2001      	movs	r0, #1
 800100c:	b2ea      	uxtb	r2, r5
 800100e:	2902      	cmp	r1, #2
 8001010:	dc91      	bgt.n	8000f36 <__aeabi_fmul+0x6a>
 8001012:	0015      	movs	r5, r2
 8001014:	2200      	movs	r2, #0
 8001016:	e027      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001018:	0015      	movs	r5, r2
 800101a:	4653      	mov	r3, sl
 800101c:	2b02      	cmp	r3, #2
 800101e:	d100      	bne.n	8001022 <__aeabi_fmul+0x156>
 8001020:	e093      	b.n	800114a <__aeabi_fmul+0x27e>
 8001022:	2b03      	cmp	r3, #3
 8001024:	d01a      	beq.n	800105c <__aeabi_fmul+0x190>
 8001026:	2b01      	cmp	r3, #1
 8001028:	d12c      	bne.n	8001084 <__aeabi_fmul+0x1b8>
 800102a:	2300      	movs	r3, #0
 800102c:	2200      	movs	r2, #0
 800102e:	e01b      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001030:	4643      	mov	r3, r8
 8001032:	34ff      	adds	r4, #255	@ 0xff
 8001034:	2b00      	cmp	r3, #0
 8001036:	d055      	beq.n	80010e4 <__aeabi_fmul+0x218>
 8001038:	2103      	movs	r1, #3
 800103a:	464b      	mov	r3, r9
 800103c:	430b      	orrs	r3, r1
 800103e:	0019      	movs	r1, r3
 8001040:	2b0a      	cmp	r3, #10
 8001042:	dc00      	bgt.n	8001046 <__aeabi_fmul+0x17a>
 8001044:	e092      	b.n	800116c <__aeabi_fmul+0x2a0>
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d000      	beq.n	800104c <__aeabi_fmul+0x180>
 800104a:	e08c      	b.n	8001166 <__aeabi_fmul+0x29a>
 800104c:	2280      	movs	r2, #128	@ 0x80
 800104e:	03d2      	lsls	r2, r2, #15
 8001050:	4216      	tst	r6, r2
 8001052:	d003      	beq.n	800105c <__aeabi_fmul+0x190>
 8001054:	4643      	mov	r3, r8
 8001056:	4213      	tst	r3, r2
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x190>
 800105a:	e07d      	b.n	8001158 <__aeabi_fmul+0x28c>
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	03d2      	lsls	r2, r2, #15
 8001060:	4332      	orrs	r2, r6
 8001062:	0252      	lsls	r2, r2, #9
 8001064:	0a52      	lsrs	r2, r2, #9
 8001066:	23ff      	movs	r3, #255	@ 0xff
 8001068:	05d8      	lsls	r0, r3, #23
 800106a:	07ed      	lsls	r5, r5, #31
 800106c:	4310      	orrs	r0, r2
 800106e:	4328      	orrs	r0, r5
 8001070:	bce0      	pop	{r5, r6, r7}
 8001072:	46ba      	mov	sl, r7
 8001074:	46b1      	mov	r9, r6
 8001076:	46a8      	mov	r8, r5
 8001078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107a:	2301      	movs	r3, #1
 800107c:	0015      	movs	r5, r2
 800107e:	0871      	lsrs	r1, r6, #1
 8001080:	401e      	ands	r6, r3
 8001082:	430e      	orrs	r6, r1
 8001084:	0023      	movs	r3, r4
 8001086:	3380      	adds	r3, #128	@ 0x80
 8001088:	1c61      	adds	r1, r4, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	dd41      	ble.n	8001112 <__aeabi_fmul+0x246>
 800108e:	0772      	lsls	r2, r6, #29
 8001090:	d094      	beq.n	8000fbc <__aeabi_fmul+0xf0>
 8001092:	220f      	movs	r2, #15
 8001094:	4032      	ands	r2, r6
 8001096:	2a04      	cmp	r2, #4
 8001098:	d000      	beq.n	800109c <__aeabi_fmul+0x1d0>
 800109a:	e78e      	b.n	8000fba <__aeabi_fmul+0xee>
 800109c:	e78e      	b.n	8000fbc <__aeabi_fmul+0xf0>
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d105      	bne.n	80010ae <__aeabi_fmul+0x1e2>
 80010a2:	2304      	movs	r3, #4
 80010a4:	4699      	mov	r9, r3
 80010a6:	3b03      	subs	r3, #3
 80010a8:	2400      	movs	r4, #0
 80010aa:	469a      	mov	sl, r3
 80010ac:	e726      	b.n	8000efc <__aeabi_fmul+0x30>
 80010ae:	0030      	movs	r0, r6
 80010b0:	f002 fb3a 	bl	8003728 <__clzsi2>
 80010b4:	2476      	movs	r4, #118	@ 0x76
 80010b6:	1f43      	subs	r3, r0, #5
 80010b8:	409e      	lsls	r6, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	4264      	negs	r4, r4
 80010be:	4699      	mov	r9, r3
 80010c0:	469a      	mov	sl, r3
 80010c2:	1a24      	subs	r4, r4, r0
 80010c4:	e71a      	b.n	8000efc <__aeabi_fmul+0x30>
 80010c6:	4640      	mov	r0, r8
 80010c8:	f002 fb2e 	bl	8003728 <__clzsi2>
 80010cc:	464b      	mov	r3, r9
 80010ce:	1a24      	subs	r4, r4, r0
 80010d0:	3c76      	subs	r4, #118	@ 0x76
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	dca1      	bgt.n	800101a <__aeabi_fmul+0x14e>
 80010d6:	4643      	mov	r3, r8
 80010d8:	3805      	subs	r0, #5
 80010da:	4083      	lsls	r3, r0
 80010dc:	407d      	eors	r5, r7
 80010de:	4698      	mov	r8, r3
 80010e0:	b2ea      	uxtb	r2, r5
 80010e2:	e724      	b.n	8000f2e <__aeabi_fmul+0x62>
 80010e4:	464a      	mov	r2, r9
 80010e6:	3302      	adds	r3, #2
 80010e8:	4313      	orrs	r3, r2
 80010ea:	002a      	movs	r2, r5
 80010ec:	407a      	eors	r2, r7
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	2b0a      	cmp	r3, #10
 80010f2:	dc92      	bgt.n	800101a <__aeabi_fmul+0x14e>
 80010f4:	4649      	mov	r1, r9
 80010f6:	0015      	movs	r5, r2
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d026      	beq.n	800114a <__aeabi_fmul+0x27e>
 80010fc:	4699      	mov	r9, r3
 80010fe:	2002      	movs	r0, #2
 8001100:	e719      	b.n	8000f36 <__aeabi_fmul+0x6a>
 8001102:	230c      	movs	r3, #12
 8001104:	4699      	mov	r9, r3
 8001106:	3b09      	subs	r3, #9
 8001108:	24ff      	movs	r4, #255	@ 0xff
 800110a:	469a      	mov	sl, r3
 800110c:	e6f6      	b.n	8000efc <__aeabi_fmul+0x30>
 800110e:	0015      	movs	r5, r2
 8001110:	0021      	movs	r1, r4
 8001112:	2201      	movs	r2, #1
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b1b      	cmp	r3, #27
 8001118:	dd00      	ble.n	800111c <__aeabi_fmul+0x250>
 800111a:	e786      	b.n	800102a <__aeabi_fmul+0x15e>
 800111c:	319e      	adds	r1, #158	@ 0x9e
 800111e:	0032      	movs	r2, r6
 8001120:	408e      	lsls	r6, r1
 8001122:	40da      	lsrs	r2, r3
 8001124:	1e73      	subs	r3, r6, #1
 8001126:	419e      	sbcs	r6, r3
 8001128:	4332      	orrs	r2, r6
 800112a:	0753      	lsls	r3, r2, #29
 800112c:	d004      	beq.n	8001138 <__aeabi_fmul+0x26c>
 800112e:	230f      	movs	r3, #15
 8001130:	4013      	ands	r3, r2
 8001132:	2b04      	cmp	r3, #4
 8001134:	d000      	beq.n	8001138 <__aeabi_fmul+0x26c>
 8001136:	3204      	adds	r2, #4
 8001138:	0153      	lsls	r3, r2, #5
 800113a:	d510      	bpl.n	800115e <__aeabi_fmul+0x292>
 800113c:	2301      	movs	r3, #1
 800113e:	2200      	movs	r2, #0
 8001140:	e792      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001142:	003d      	movs	r5, r7
 8001144:	4646      	mov	r6, r8
 8001146:	4682      	mov	sl, r0
 8001148:	e767      	b.n	800101a <__aeabi_fmul+0x14e>
 800114a:	23ff      	movs	r3, #255	@ 0xff
 800114c:	2200      	movs	r2, #0
 800114e:	e78b      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	2500      	movs	r5, #0
 8001154:	03d2      	lsls	r2, r2, #15
 8001156:	e786      	b.n	8001066 <__aeabi_fmul+0x19a>
 8001158:	003d      	movs	r5, r7
 800115a:	431a      	orrs	r2, r3
 800115c:	e783      	b.n	8001066 <__aeabi_fmul+0x19a>
 800115e:	0192      	lsls	r2, r2, #6
 8001160:	2300      	movs	r3, #0
 8001162:	0a52      	lsrs	r2, r2, #9
 8001164:	e780      	b.n	8001068 <__aeabi_fmul+0x19c>
 8001166:	003d      	movs	r5, r7
 8001168:	4646      	mov	r6, r8
 800116a:	e777      	b.n	800105c <__aeabi_fmul+0x190>
 800116c:	002a      	movs	r2, r5
 800116e:	2301      	movs	r3, #1
 8001170:	407a      	eors	r2, r7
 8001172:	408b      	lsls	r3, r1
 8001174:	2003      	movs	r0, #3
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	e6e9      	b.n	8000f4e <__aeabi_fmul+0x82>
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	f7ffffff 	.word	0xf7ffffff

08001180 <__aeabi_fsub>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	4647      	mov	r7, r8
 8001184:	46ce      	mov	lr, r9
 8001186:	0243      	lsls	r3, r0, #9
 8001188:	b580      	push	{r7, lr}
 800118a:	0a5f      	lsrs	r7, r3, #9
 800118c:	099b      	lsrs	r3, r3, #6
 800118e:	0045      	lsls	r5, r0, #1
 8001190:	004a      	lsls	r2, r1, #1
 8001192:	469c      	mov	ip, r3
 8001194:	024b      	lsls	r3, r1, #9
 8001196:	0fc4      	lsrs	r4, r0, #31
 8001198:	0fce      	lsrs	r6, r1, #31
 800119a:	0e2d      	lsrs	r5, r5, #24
 800119c:	0a58      	lsrs	r0, r3, #9
 800119e:	0e12      	lsrs	r2, r2, #24
 80011a0:	0999      	lsrs	r1, r3, #6
 80011a2:	2aff      	cmp	r2, #255	@ 0xff
 80011a4:	d06b      	beq.n	800127e <__aeabi_fsub+0xfe>
 80011a6:	2301      	movs	r3, #1
 80011a8:	405e      	eors	r6, r3
 80011aa:	1aab      	subs	r3, r5, r2
 80011ac:	42b4      	cmp	r4, r6
 80011ae:	d04b      	beq.n	8001248 <__aeabi_fsub+0xc8>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_fsub+0x36>
 80011b4:	e0ff      	b.n	80013b6 <__aeabi_fsub+0x236>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x3c>
 80011ba:	e088      	b.n	80012ce <__aeabi_fsub+0x14e>
 80011bc:	2dff      	cmp	r5, #255	@ 0xff
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x42>
 80011c0:	e0ef      	b.n	80013a2 <__aeabi_fsub+0x222>
 80011c2:	2280      	movs	r2, #128	@ 0x80
 80011c4:	04d2      	lsls	r2, r2, #19
 80011c6:	4311      	orrs	r1, r2
 80011c8:	2001      	movs	r0, #1
 80011ca:	2b1b      	cmp	r3, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0x60>
 80011ce:	0008      	movs	r0, r1
 80011d0:	2220      	movs	r2, #32
 80011d2:	40d8      	lsrs	r0, r3
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	4099      	lsls	r1, r3
 80011d8:	000b      	movs	r3, r1
 80011da:	1e5a      	subs	r2, r3, #1
 80011dc:	4193      	sbcs	r3, r2
 80011de:	4318      	orrs	r0, r3
 80011e0:	4663      	mov	r3, ip
 80011e2:	1a1b      	subs	r3, r3, r0
 80011e4:	469c      	mov	ip, r3
 80011e6:	4663      	mov	r3, ip
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	d400      	bmi.n	80011ee <__aeabi_fsub+0x6e>
 80011ec:	e0cd      	b.n	800138a <__aeabi_fsub+0x20a>
 80011ee:	4663      	mov	r3, ip
 80011f0:	019f      	lsls	r7, r3, #6
 80011f2:	09bf      	lsrs	r7, r7, #6
 80011f4:	0038      	movs	r0, r7
 80011f6:	f002 fa97 	bl	8003728 <__clzsi2>
 80011fa:	003b      	movs	r3, r7
 80011fc:	3805      	subs	r0, #5
 80011fe:	4083      	lsls	r3, r0
 8001200:	4285      	cmp	r5, r0
 8001202:	dc00      	bgt.n	8001206 <__aeabi_fsub+0x86>
 8001204:	e0a2      	b.n	800134c <__aeabi_fsub+0x1cc>
 8001206:	4ab7      	ldr	r2, [pc, #732]	@ (80014e4 <__aeabi_fsub+0x364>)
 8001208:	1a2d      	subs	r5, r5, r0
 800120a:	401a      	ands	r2, r3
 800120c:	4694      	mov	ip, r2
 800120e:	075a      	lsls	r2, r3, #29
 8001210:	d100      	bne.n	8001214 <__aeabi_fsub+0x94>
 8001212:	e0c3      	b.n	800139c <__aeabi_fsub+0x21c>
 8001214:	220f      	movs	r2, #15
 8001216:	4013      	ands	r3, r2
 8001218:	2b04      	cmp	r3, #4
 800121a:	d100      	bne.n	800121e <__aeabi_fsub+0x9e>
 800121c:	e0be      	b.n	800139c <__aeabi_fsub+0x21c>
 800121e:	2304      	movs	r3, #4
 8001220:	4698      	mov	r8, r3
 8001222:	44c4      	add	ip, r8
 8001224:	4663      	mov	r3, ip
 8001226:	015b      	lsls	r3, r3, #5
 8001228:	d400      	bmi.n	800122c <__aeabi_fsub+0xac>
 800122a:	e0b7      	b.n	800139c <__aeabi_fsub+0x21c>
 800122c:	1c68      	adds	r0, r5, #1
 800122e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0xb4>
 8001232:	e0a5      	b.n	8001380 <__aeabi_fsub+0x200>
 8001234:	20ff      	movs	r0, #255	@ 0xff
 8001236:	2200      	movs	r2, #0
 8001238:	05c0      	lsls	r0, r0, #23
 800123a:	4310      	orrs	r0, r2
 800123c:	07e4      	lsls	r4, r4, #31
 800123e:	4320      	orrs	r0, r4
 8001240:	bcc0      	pop	{r6, r7}
 8001242:	46b9      	mov	r9, r7
 8001244:	46b0      	mov	r8, r6
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001248:	2b00      	cmp	r3, #0
 800124a:	dc00      	bgt.n	800124e <__aeabi_fsub+0xce>
 800124c:	e1eb      	b.n	8001626 <__aeabi_fsub+0x4a6>
 800124e:	2a00      	cmp	r2, #0
 8001250:	d046      	beq.n	80012e0 <__aeabi_fsub+0x160>
 8001252:	2dff      	cmp	r5, #255	@ 0xff
 8001254:	d100      	bne.n	8001258 <__aeabi_fsub+0xd8>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x222>
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	04d2      	lsls	r2, r2, #19
 800125c:	4311      	orrs	r1, r2
 800125e:	2b1b      	cmp	r3, #27
 8001260:	dc00      	bgt.n	8001264 <__aeabi_fsub+0xe4>
 8001262:	e0fb      	b.n	800145c <__aeabi_fsub+0x2dc>
 8001264:	2305      	movs	r3, #5
 8001266:	4698      	mov	r8, r3
 8001268:	002b      	movs	r3, r5
 800126a:	44c4      	add	ip, r8
 800126c:	4662      	mov	r2, ip
 800126e:	08d7      	lsrs	r7, r2, #3
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d100      	bne.n	8001276 <__aeabi_fsub+0xf6>
 8001274:	e095      	b.n	80013a2 <__aeabi_fsub+0x222>
 8001276:	027a      	lsls	r2, r7, #9
 8001278:	0a52      	lsrs	r2, r2, #9
 800127a:	b2d8      	uxtb	r0, r3
 800127c:	e7dc      	b.n	8001238 <__aeabi_fsub+0xb8>
 800127e:	002b      	movs	r3, r5
 8001280:	3bff      	subs	r3, #255	@ 0xff
 8001282:	4699      	mov	r9, r3
 8001284:	2900      	cmp	r1, #0
 8001286:	d118      	bne.n	80012ba <__aeabi_fsub+0x13a>
 8001288:	2301      	movs	r3, #1
 800128a:	405e      	eors	r6, r3
 800128c:	42b4      	cmp	r4, r6
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x112>
 8001290:	e0ca      	b.n	8001428 <__aeabi_fsub+0x2a8>
 8001292:	464b      	mov	r3, r9
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02d      	beq.n	80012f4 <__aeabi_fsub+0x174>
 8001298:	2d00      	cmp	r5, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x11e>
 800129c:	e13c      	b.n	8001518 <__aeabi_fsub+0x398>
 800129e:	23ff      	movs	r3, #255	@ 0xff
 80012a0:	4664      	mov	r4, ip
 80012a2:	2c00      	cmp	r4, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x128>
 80012a6:	e15f      	b.n	8001568 <__aeabi_fsub+0x3e8>
 80012a8:	1e5d      	subs	r5, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_fsub+0x130>
 80012ae:	e174      	b.n	800159a <__aeabi_fsub+0x41a>
 80012b0:	0034      	movs	r4, r6
 80012b2:	2bff      	cmp	r3, #255	@ 0xff
 80012b4:	d074      	beq.n	80013a0 <__aeabi_fsub+0x220>
 80012b6:	002b      	movs	r3, r5
 80012b8:	e103      	b.n	80014c2 <__aeabi_fsub+0x342>
 80012ba:	42b4      	cmp	r4, r6
 80012bc:	d100      	bne.n	80012c0 <__aeabi_fsub+0x140>
 80012be:	e09c      	b.n	80013fa <__aeabi_fsub+0x27a>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d017      	beq.n	80012f4 <__aeabi_fsub+0x174>
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	d0ea      	beq.n	800129e <__aeabi_fsub+0x11e>
 80012c8:	0007      	movs	r7, r0
 80012ca:	0034      	movs	r4, r6
 80012cc:	e06c      	b.n	80013a8 <__aeabi_fsub+0x228>
 80012ce:	2900      	cmp	r1, #0
 80012d0:	d0cc      	beq.n	800126c <__aeabi_fsub+0xec>
 80012d2:	1e5a      	subs	r2, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d02b      	beq.n	8001330 <__aeabi_fsub+0x1b0>
 80012d8:	2bff      	cmp	r3, #255	@ 0xff
 80012da:	d062      	beq.n	80013a2 <__aeabi_fsub+0x222>
 80012dc:	0013      	movs	r3, r2
 80012de:	e773      	b.n	80011c8 <__aeabi_fsub+0x48>
 80012e0:	2900      	cmp	r1, #0
 80012e2:	d0c3      	beq.n	800126c <__aeabi_fsub+0xec>
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d100      	bne.n	80012ec <__aeabi_fsub+0x16c>
 80012ea:	e11e      	b.n	800152a <__aeabi_fsub+0x3aa>
 80012ec:	2bff      	cmp	r3, #255	@ 0xff
 80012ee:	d058      	beq.n	80013a2 <__aeabi_fsub+0x222>
 80012f0:	0013      	movs	r3, r2
 80012f2:	e7b4      	b.n	800125e <__aeabi_fsub+0xde>
 80012f4:	22fe      	movs	r2, #254	@ 0xfe
 80012f6:	1c6b      	adds	r3, r5, #1
 80012f8:	421a      	tst	r2, r3
 80012fa:	d10d      	bne.n	8001318 <__aeabi_fsub+0x198>
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d060      	beq.n	80013c2 <__aeabi_fsub+0x242>
 8001300:	4663      	mov	r3, ip
 8001302:	2b00      	cmp	r3, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_fsub+0x188>
 8001306:	e120      	b.n	800154a <__aeabi_fsub+0x3ca>
 8001308:	2900      	cmp	r1, #0
 800130a:	d000      	beq.n	800130e <__aeabi_fsub+0x18e>
 800130c:	e128      	b.n	8001560 <__aeabi_fsub+0x3e0>
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	2400      	movs	r4, #0
 8001312:	20ff      	movs	r0, #255	@ 0xff
 8001314:	03d2      	lsls	r2, r2, #15
 8001316:	e78f      	b.n	8001238 <__aeabi_fsub+0xb8>
 8001318:	4663      	mov	r3, ip
 800131a:	1a5f      	subs	r7, r3, r1
 800131c:	017b      	lsls	r3, r7, #5
 800131e:	d500      	bpl.n	8001322 <__aeabi_fsub+0x1a2>
 8001320:	e0fe      	b.n	8001520 <__aeabi_fsub+0x3a0>
 8001322:	2f00      	cmp	r7, #0
 8001324:	d000      	beq.n	8001328 <__aeabi_fsub+0x1a8>
 8001326:	e765      	b.n	80011f4 <__aeabi_fsub+0x74>
 8001328:	2400      	movs	r4, #0
 800132a:	2000      	movs	r0, #0
 800132c:	2200      	movs	r2, #0
 800132e:	e783      	b.n	8001238 <__aeabi_fsub+0xb8>
 8001330:	4663      	mov	r3, ip
 8001332:	1a59      	subs	r1, r3, r1
 8001334:	014b      	lsls	r3, r1, #5
 8001336:	d400      	bmi.n	800133a <__aeabi_fsub+0x1ba>
 8001338:	e119      	b.n	800156e <__aeabi_fsub+0x3ee>
 800133a:	018f      	lsls	r7, r1, #6
 800133c:	09bf      	lsrs	r7, r7, #6
 800133e:	0038      	movs	r0, r7
 8001340:	f002 f9f2 	bl	8003728 <__clzsi2>
 8001344:	003b      	movs	r3, r7
 8001346:	3805      	subs	r0, #5
 8001348:	4083      	lsls	r3, r0
 800134a:	2501      	movs	r5, #1
 800134c:	2220      	movs	r2, #32
 800134e:	1b40      	subs	r0, r0, r5
 8001350:	3001      	adds	r0, #1
 8001352:	1a12      	subs	r2, r2, r0
 8001354:	0019      	movs	r1, r3
 8001356:	4093      	lsls	r3, r2
 8001358:	40c1      	lsrs	r1, r0
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	4193      	sbcs	r3, r2
 800135e:	4319      	orrs	r1, r3
 8001360:	468c      	mov	ip, r1
 8001362:	1e0b      	subs	r3, r1, #0
 8001364:	d0e1      	beq.n	800132a <__aeabi_fsub+0x1aa>
 8001366:	075b      	lsls	r3, r3, #29
 8001368:	d100      	bne.n	800136c <__aeabi_fsub+0x1ec>
 800136a:	e152      	b.n	8001612 <__aeabi_fsub+0x492>
 800136c:	230f      	movs	r3, #15
 800136e:	2500      	movs	r5, #0
 8001370:	400b      	ands	r3, r1
 8001372:	2b04      	cmp	r3, #4
 8001374:	d000      	beq.n	8001378 <__aeabi_fsub+0x1f8>
 8001376:	e752      	b.n	800121e <__aeabi_fsub+0x9e>
 8001378:	2001      	movs	r0, #1
 800137a:	014a      	lsls	r2, r1, #5
 800137c:	d400      	bmi.n	8001380 <__aeabi_fsub+0x200>
 800137e:	e092      	b.n	80014a6 <__aeabi_fsub+0x326>
 8001380:	b2c0      	uxtb	r0, r0
 8001382:	4663      	mov	r3, ip
 8001384:	019a      	lsls	r2, r3, #6
 8001386:	0a52      	lsrs	r2, r2, #9
 8001388:	e756      	b.n	8001238 <__aeabi_fsub+0xb8>
 800138a:	4663      	mov	r3, ip
 800138c:	075b      	lsls	r3, r3, #29
 800138e:	d005      	beq.n	800139c <__aeabi_fsub+0x21c>
 8001390:	230f      	movs	r3, #15
 8001392:	4662      	mov	r2, ip
 8001394:	4013      	ands	r3, r2
 8001396:	2b04      	cmp	r3, #4
 8001398:	d000      	beq.n	800139c <__aeabi_fsub+0x21c>
 800139a:	e740      	b.n	800121e <__aeabi_fsub+0x9e>
 800139c:	002b      	movs	r3, r5
 800139e:	e765      	b.n	800126c <__aeabi_fsub+0xec>
 80013a0:	0007      	movs	r7, r0
 80013a2:	2f00      	cmp	r7, #0
 80013a4:	d100      	bne.n	80013a8 <__aeabi_fsub+0x228>
 80013a6:	e745      	b.n	8001234 <__aeabi_fsub+0xb4>
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	03d2      	lsls	r2, r2, #15
 80013ac:	433a      	orrs	r2, r7
 80013ae:	0252      	lsls	r2, r2, #9
 80013b0:	20ff      	movs	r0, #255	@ 0xff
 80013b2:	0a52      	lsrs	r2, r2, #9
 80013b4:	e740      	b.n	8001238 <__aeabi_fsub+0xb8>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d179      	bne.n	80014ae <__aeabi_fsub+0x32e>
 80013ba:	22fe      	movs	r2, #254	@ 0xfe
 80013bc:	1c6b      	adds	r3, r5, #1
 80013be:	421a      	tst	r2, r3
 80013c0:	d1aa      	bne.n	8001318 <__aeabi_fsub+0x198>
 80013c2:	4663      	mov	r3, ip
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_fsub+0x24a>
 80013c8:	e0f5      	b.n	80015b6 <__aeabi_fsub+0x436>
 80013ca:	2900      	cmp	r1, #0
 80013cc:	d100      	bne.n	80013d0 <__aeabi_fsub+0x250>
 80013ce:	e0d1      	b.n	8001574 <__aeabi_fsub+0x3f4>
 80013d0:	1a5f      	subs	r7, r3, r1
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	04db      	lsls	r3, r3, #19
 80013d6:	421f      	tst	r7, r3
 80013d8:	d100      	bne.n	80013dc <__aeabi_fsub+0x25c>
 80013da:	e10e      	b.n	80015fa <__aeabi_fsub+0x47a>
 80013dc:	4662      	mov	r2, ip
 80013de:	2401      	movs	r4, #1
 80013e0:	1a8a      	subs	r2, r1, r2
 80013e2:	4694      	mov	ip, r2
 80013e4:	2000      	movs	r0, #0
 80013e6:	4034      	ands	r4, r6
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d100      	bne.n	80013ee <__aeabi_fsub+0x26e>
 80013ec:	e724      	b.n	8001238 <__aeabi_fsub+0xb8>
 80013ee:	2001      	movs	r0, #1
 80013f0:	421a      	tst	r2, r3
 80013f2:	d1c6      	bne.n	8001382 <__aeabi_fsub+0x202>
 80013f4:	2300      	movs	r3, #0
 80013f6:	08d7      	lsrs	r7, r2, #3
 80013f8:	e73d      	b.n	8001276 <__aeabi_fsub+0xf6>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d017      	beq.n	800142e <__aeabi_fsub+0x2ae>
 80013fe:	2d00      	cmp	r5, #0
 8001400:	d000      	beq.n	8001404 <__aeabi_fsub+0x284>
 8001402:	e0af      	b.n	8001564 <__aeabi_fsub+0x3e4>
 8001404:	23ff      	movs	r3, #255	@ 0xff
 8001406:	4665      	mov	r5, ip
 8001408:	2d00      	cmp	r5, #0
 800140a:	d100      	bne.n	800140e <__aeabi_fsub+0x28e>
 800140c:	e0ad      	b.n	800156a <__aeabi_fsub+0x3ea>
 800140e:	1e5e      	subs	r6, r3, #1
 8001410:	2b01      	cmp	r3, #1
 8001412:	d100      	bne.n	8001416 <__aeabi_fsub+0x296>
 8001414:	e089      	b.n	800152a <__aeabi_fsub+0x3aa>
 8001416:	2bff      	cmp	r3, #255	@ 0xff
 8001418:	d0c2      	beq.n	80013a0 <__aeabi_fsub+0x220>
 800141a:	2e1b      	cmp	r6, #27
 800141c:	dc00      	bgt.n	8001420 <__aeabi_fsub+0x2a0>
 800141e:	e0ab      	b.n	8001578 <__aeabi_fsub+0x3f8>
 8001420:	1d4b      	adds	r3, r1, #5
 8001422:	469c      	mov	ip, r3
 8001424:	0013      	movs	r3, r2
 8001426:	e721      	b.n	800126c <__aeabi_fsub+0xec>
 8001428:	464b      	mov	r3, r9
 800142a:	2b00      	cmp	r3, #0
 800142c:	d170      	bne.n	8001510 <__aeabi_fsub+0x390>
 800142e:	22fe      	movs	r2, #254	@ 0xfe
 8001430:	1c6b      	adds	r3, r5, #1
 8001432:	421a      	tst	r2, r3
 8001434:	d15e      	bne.n	80014f4 <__aeabi_fsub+0x374>
 8001436:	2d00      	cmp	r5, #0
 8001438:	d000      	beq.n	800143c <__aeabi_fsub+0x2bc>
 800143a:	e0c3      	b.n	80015c4 <__aeabi_fsub+0x444>
 800143c:	4663      	mov	r3, ip
 800143e:	2b00      	cmp	r3, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x2c4>
 8001442:	e0d0      	b.n	80015e6 <__aeabi_fsub+0x466>
 8001444:	2900      	cmp	r1, #0
 8001446:	d100      	bne.n	800144a <__aeabi_fsub+0x2ca>
 8001448:	e094      	b.n	8001574 <__aeabi_fsub+0x3f4>
 800144a:	000a      	movs	r2, r1
 800144c:	4462      	add	r2, ip
 800144e:	0153      	lsls	r3, r2, #5
 8001450:	d400      	bmi.n	8001454 <__aeabi_fsub+0x2d4>
 8001452:	e0d8      	b.n	8001606 <__aeabi_fsub+0x486>
 8001454:	0192      	lsls	r2, r2, #6
 8001456:	2001      	movs	r0, #1
 8001458:	0a52      	lsrs	r2, r2, #9
 800145a:	e6ed      	b.n	8001238 <__aeabi_fsub+0xb8>
 800145c:	0008      	movs	r0, r1
 800145e:	2220      	movs	r2, #32
 8001460:	40d8      	lsrs	r0, r3
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	4099      	lsls	r1, r3
 8001466:	000b      	movs	r3, r1
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	4193      	sbcs	r3, r2
 800146c:	4303      	orrs	r3, r0
 800146e:	449c      	add	ip, r3
 8001470:	4663      	mov	r3, ip
 8001472:	015b      	lsls	r3, r3, #5
 8001474:	d589      	bpl.n	800138a <__aeabi_fsub+0x20a>
 8001476:	3501      	adds	r5, #1
 8001478:	2dff      	cmp	r5, #255	@ 0xff
 800147a:	d100      	bne.n	800147e <__aeabi_fsub+0x2fe>
 800147c:	e6da      	b.n	8001234 <__aeabi_fsub+0xb4>
 800147e:	4662      	mov	r2, ip
 8001480:	2301      	movs	r3, #1
 8001482:	4919      	ldr	r1, [pc, #100]	@ (80014e8 <__aeabi_fsub+0x368>)
 8001484:	4013      	ands	r3, r2
 8001486:	0852      	lsrs	r2, r2, #1
 8001488:	400a      	ands	r2, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	4694      	mov	ip, r2
 8001490:	075b      	lsls	r3, r3, #29
 8001492:	d004      	beq.n	800149e <__aeabi_fsub+0x31e>
 8001494:	230f      	movs	r3, #15
 8001496:	4013      	ands	r3, r2
 8001498:	2b04      	cmp	r3, #4
 800149a:	d000      	beq.n	800149e <__aeabi_fsub+0x31e>
 800149c:	e6bf      	b.n	800121e <__aeabi_fsub+0x9e>
 800149e:	4663      	mov	r3, ip
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	d500      	bpl.n	80014a6 <__aeabi_fsub+0x326>
 80014a4:	e6c2      	b.n	800122c <__aeabi_fsub+0xac>
 80014a6:	4663      	mov	r3, ip
 80014a8:	08df      	lsrs	r7, r3, #3
 80014aa:	002b      	movs	r3, r5
 80014ac:	e6e3      	b.n	8001276 <__aeabi_fsub+0xf6>
 80014ae:	1b53      	subs	r3, r2, r5
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_fsub+0x336>
 80014b4:	e6f4      	b.n	80012a0 <__aeabi_fsub+0x120>
 80014b6:	2080      	movs	r0, #128	@ 0x80
 80014b8:	4664      	mov	r4, ip
 80014ba:	04c0      	lsls	r0, r0, #19
 80014bc:	4304      	orrs	r4, r0
 80014be:	46a4      	mov	ip, r4
 80014c0:	0034      	movs	r4, r6
 80014c2:	2001      	movs	r0, #1
 80014c4:	2b1b      	cmp	r3, #27
 80014c6:	dc09      	bgt.n	80014dc <__aeabi_fsub+0x35c>
 80014c8:	2520      	movs	r5, #32
 80014ca:	4660      	mov	r0, ip
 80014cc:	40d8      	lsrs	r0, r3
 80014ce:	1aeb      	subs	r3, r5, r3
 80014d0:	4665      	mov	r5, ip
 80014d2:	409d      	lsls	r5, r3
 80014d4:	002b      	movs	r3, r5
 80014d6:	1e5d      	subs	r5, r3, #1
 80014d8:	41ab      	sbcs	r3, r5
 80014da:	4318      	orrs	r0, r3
 80014dc:	1a0b      	subs	r3, r1, r0
 80014de:	469c      	mov	ip, r3
 80014e0:	0015      	movs	r5, r2
 80014e2:	e680      	b.n	80011e6 <__aeabi_fsub+0x66>
 80014e4:	fbffffff 	.word	0xfbffffff
 80014e8:	7dffffff 	.word	0x7dffffff
 80014ec:	22fe      	movs	r2, #254	@ 0xfe
 80014ee:	1c6b      	adds	r3, r5, #1
 80014f0:	4213      	tst	r3, r2
 80014f2:	d0a3      	beq.n	800143c <__aeabi_fsub+0x2bc>
 80014f4:	2bff      	cmp	r3, #255	@ 0xff
 80014f6:	d100      	bne.n	80014fa <__aeabi_fsub+0x37a>
 80014f8:	e69c      	b.n	8001234 <__aeabi_fsub+0xb4>
 80014fa:	4461      	add	r1, ip
 80014fc:	0849      	lsrs	r1, r1, #1
 80014fe:	074a      	lsls	r2, r1, #29
 8001500:	d049      	beq.n	8001596 <__aeabi_fsub+0x416>
 8001502:	220f      	movs	r2, #15
 8001504:	400a      	ands	r2, r1
 8001506:	2a04      	cmp	r2, #4
 8001508:	d045      	beq.n	8001596 <__aeabi_fsub+0x416>
 800150a:	1d0a      	adds	r2, r1, #4
 800150c:	4694      	mov	ip, r2
 800150e:	e6ad      	b.n	800126c <__aeabi_fsub+0xec>
 8001510:	2d00      	cmp	r5, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x396>
 8001514:	e776      	b.n	8001404 <__aeabi_fsub+0x284>
 8001516:	e68d      	b.n	8001234 <__aeabi_fsub+0xb4>
 8001518:	0034      	movs	r4, r6
 800151a:	20ff      	movs	r0, #255	@ 0xff
 800151c:	2200      	movs	r2, #0
 800151e:	e68b      	b.n	8001238 <__aeabi_fsub+0xb8>
 8001520:	4663      	mov	r3, ip
 8001522:	2401      	movs	r4, #1
 8001524:	1acf      	subs	r7, r1, r3
 8001526:	4034      	ands	r4, r6
 8001528:	e664      	b.n	80011f4 <__aeabi_fsub+0x74>
 800152a:	4461      	add	r1, ip
 800152c:	014b      	lsls	r3, r1, #5
 800152e:	d56d      	bpl.n	800160c <__aeabi_fsub+0x48c>
 8001530:	0848      	lsrs	r0, r1, #1
 8001532:	4944      	ldr	r1, [pc, #272]	@ (8001644 <__aeabi_fsub+0x4c4>)
 8001534:	4001      	ands	r1, r0
 8001536:	0743      	lsls	r3, r0, #29
 8001538:	d02c      	beq.n	8001594 <__aeabi_fsub+0x414>
 800153a:	230f      	movs	r3, #15
 800153c:	4003      	ands	r3, r0
 800153e:	2b04      	cmp	r3, #4
 8001540:	d028      	beq.n	8001594 <__aeabi_fsub+0x414>
 8001542:	1d0b      	adds	r3, r1, #4
 8001544:	469c      	mov	ip, r3
 8001546:	2302      	movs	r3, #2
 8001548:	e690      	b.n	800126c <__aeabi_fsub+0xec>
 800154a:	2900      	cmp	r1, #0
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x3d0>
 800154e:	e72b      	b.n	80013a8 <__aeabi_fsub+0x228>
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	03db      	lsls	r3, r3, #15
 8001554:	429f      	cmp	r7, r3
 8001556:	d200      	bcs.n	800155a <__aeabi_fsub+0x3da>
 8001558:	e726      	b.n	80013a8 <__aeabi_fsub+0x228>
 800155a:	4298      	cmp	r0, r3
 800155c:	d300      	bcc.n	8001560 <__aeabi_fsub+0x3e0>
 800155e:	e723      	b.n	80013a8 <__aeabi_fsub+0x228>
 8001560:	2401      	movs	r4, #1
 8001562:	4034      	ands	r4, r6
 8001564:	0007      	movs	r7, r0
 8001566:	e71f      	b.n	80013a8 <__aeabi_fsub+0x228>
 8001568:	0034      	movs	r4, r6
 800156a:	468c      	mov	ip, r1
 800156c:	e67e      	b.n	800126c <__aeabi_fsub+0xec>
 800156e:	2301      	movs	r3, #1
 8001570:	08cf      	lsrs	r7, r1, #3
 8001572:	e680      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001574:	2300      	movs	r3, #0
 8001576:	e67e      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001578:	2020      	movs	r0, #32
 800157a:	4665      	mov	r5, ip
 800157c:	1b80      	subs	r0, r0, r6
 800157e:	4085      	lsls	r5, r0
 8001580:	4663      	mov	r3, ip
 8001582:	0028      	movs	r0, r5
 8001584:	40f3      	lsrs	r3, r6
 8001586:	1e45      	subs	r5, r0, #1
 8001588:	41a8      	sbcs	r0, r5
 800158a:	4303      	orrs	r3, r0
 800158c:	469c      	mov	ip, r3
 800158e:	0015      	movs	r5, r2
 8001590:	448c      	add	ip, r1
 8001592:	e76d      	b.n	8001470 <__aeabi_fsub+0x2f0>
 8001594:	2302      	movs	r3, #2
 8001596:	08cf      	lsrs	r7, r1, #3
 8001598:	e66d      	b.n	8001276 <__aeabi_fsub+0xf6>
 800159a:	1b0f      	subs	r7, r1, r4
 800159c:	017b      	lsls	r3, r7, #5
 800159e:	d528      	bpl.n	80015f2 <__aeabi_fsub+0x472>
 80015a0:	01bf      	lsls	r7, r7, #6
 80015a2:	09bf      	lsrs	r7, r7, #6
 80015a4:	0038      	movs	r0, r7
 80015a6:	f002 f8bf 	bl	8003728 <__clzsi2>
 80015aa:	003b      	movs	r3, r7
 80015ac:	3805      	subs	r0, #5
 80015ae:	4083      	lsls	r3, r0
 80015b0:	0034      	movs	r4, r6
 80015b2:	2501      	movs	r5, #1
 80015b4:	e6ca      	b.n	800134c <__aeabi_fsub+0x1cc>
 80015b6:	2900      	cmp	r1, #0
 80015b8:	d100      	bne.n	80015bc <__aeabi_fsub+0x43c>
 80015ba:	e6b5      	b.n	8001328 <__aeabi_fsub+0x1a8>
 80015bc:	2401      	movs	r4, #1
 80015be:	0007      	movs	r7, r0
 80015c0:	4034      	ands	r4, r6
 80015c2:	e658      	b.n	8001276 <__aeabi_fsub+0xf6>
 80015c4:	4663      	mov	r3, ip
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d100      	bne.n	80015cc <__aeabi_fsub+0x44c>
 80015ca:	e6e9      	b.n	80013a0 <__aeabi_fsub+0x220>
 80015cc:	2900      	cmp	r1, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_fsub+0x452>
 80015d0:	e6ea      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	03db      	lsls	r3, r3, #15
 80015d6:	429f      	cmp	r7, r3
 80015d8:	d200      	bcs.n	80015dc <__aeabi_fsub+0x45c>
 80015da:	e6e5      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015dc:	4298      	cmp	r0, r3
 80015de:	d300      	bcc.n	80015e2 <__aeabi_fsub+0x462>
 80015e0:	e6e2      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015e2:	0007      	movs	r7, r0
 80015e4:	e6e0      	b.n	80013a8 <__aeabi_fsub+0x228>
 80015e6:	2900      	cmp	r1, #0
 80015e8:	d100      	bne.n	80015ec <__aeabi_fsub+0x46c>
 80015ea:	e69e      	b.n	800132a <__aeabi_fsub+0x1aa>
 80015ec:	2300      	movs	r3, #0
 80015ee:	08cf      	lsrs	r7, r1, #3
 80015f0:	e641      	b.n	8001276 <__aeabi_fsub+0xf6>
 80015f2:	0034      	movs	r4, r6
 80015f4:	2301      	movs	r3, #1
 80015f6:	08ff      	lsrs	r7, r7, #3
 80015f8:	e63d      	b.n	8001276 <__aeabi_fsub+0xf6>
 80015fa:	2f00      	cmp	r7, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_fsub+0x480>
 80015fe:	e693      	b.n	8001328 <__aeabi_fsub+0x1a8>
 8001600:	2300      	movs	r3, #0
 8001602:	08ff      	lsrs	r7, r7, #3
 8001604:	e637      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001606:	2300      	movs	r3, #0
 8001608:	08d7      	lsrs	r7, r2, #3
 800160a:	e634      	b.n	8001276 <__aeabi_fsub+0xf6>
 800160c:	2301      	movs	r3, #1
 800160e:	08cf      	lsrs	r7, r1, #3
 8001610:	e631      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	000b      	movs	r3, r1
 8001616:	04d2      	lsls	r2, r2, #19
 8001618:	2001      	movs	r0, #1
 800161a:	4013      	ands	r3, r2
 800161c:	4211      	tst	r1, r2
 800161e:	d000      	beq.n	8001622 <__aeabi_fsub+0x4a2>
 8001620:	e6ae      	b.n	8001380 <__aeabi_fsub+0x200>
 8001622:	08cf      	lsrs	r7, r1, #3
 8001624:	e627      	b.n	8001276 <__aeabi_fsub+0xf6>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d100      	bne.n	800162c <__aeabi_fsub+0x4ac>
 800162a:	e75f      	b.n	80014ec <__aeabi_fsub+0x36c>
 800162c:	1b56      	subs	r6, r2, r5
 800162e:	2d00      	cmp	r5, #0
 8001630:	d101      	bne.n	8001636 <__aeabi_fsub+0x4b6>
 8001632:	0033      	movs	r3, r6
 8001634:	e6e7      	b.n	8001406 <__aeabi_fsub+0x286>
 8001636:	2380      	movs	r3, #128	@ 0x80
 8001638:	4660      	mov	r0, ip
 800163a:	04db      	lsls	r3, r3, #19
 800163c:	4318      	orrs	r0, r3
 800163e:	4684      	mov	ip, r0
 8001640:	e6eb      	b.n	800141a <__aeabi_fsub+0x29a>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	7dffffff 	.word	0x7dffffff

08001648 <__aeabi_f2iz>:
 8001648:	0241      	lsls	r1, r0, #9
 800164a:	0042      	lsls	r2, r0, #1
 800164c:	0fc3      	lsrs	r3, r0, #31
 800164e:	0a49      	lsrs	r1, r1, #9
 8001650:	2000      	movs	r0, #0
 8001652:	0e12      	lsrs	r2, r2, #24
 8001654:	2a7e      	cmp	r2, #126	@ 0x7e
 8001656:	dd03      	ble.n	8001660 <__aeabi_f2iz+0x18>
 8001658:	2a9d      	cmp	r2, #157	@ 0x9d
 800165a:	dd02      	ble.n	8001662 <__aeabi_f2iz+0x1a>
 800165c:	4a09      	ldr	r2, [pc, #36]	@ (8001684 <__aeabi_f2iz+0x3c>)
 800165e:	1898      	adds	r0, r3, r2
 8001660:	4770      	bx	lr
 8001662:	2080      	movs	r0, #128	@ 0x80
 8001664:	0400      	lsls	r0, r0, #16
 8001666:	4301      	orrs	r1, r0
 8001668:	2a95      	cmp	r2, #149	@ 0x95
 800166a:	dc07      	bgt.n	800167c <__aeabi_f2iz+0x34>
 800166c:	2096      	movs	r0, #150	@ 0x96
 800166e:	1a82      	subs	r2, r0, r2
 8001670:	40d1      	lsrs	r1, r2
 8001672:	4248      	negs	r0, r1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f3      	bne.n	8001660 <__aeabi_f2iz+0x18>
 8001678:	0008      	movs	r0, r1
 800167a:	e7f1      	b.n	8001660 <__aeabi_f2iz+0x18>
 800167c:	3a96      	subs	r2, #150	@ 0x96
 800167e:	4091      	lsls	r1, r2
 8001680:	e7f7      	b.n	8001672 <__aeabi_f2iz+0x2a>
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	7fffffff 	.word	0x7fffffff

08001688 <__aeabi_i2f>:
 8001688:	b570      	push	{r4, r5, r6, lr}
 800168a:	2800      	cmp	r0, #0
 800168c:	d012      	beq.n	80016b4 <__aeabi_i2f+0x2c>
 800168e:	17c3      	asrs	r3, r0, #31
 8001690:	18c5      	adds	r5, r0, r3
 8001692:	405d      	eors	r5, r3
 8001694:	0fc4      	lsrs	r4, r0, #31
 8001696:	0028      	movs	r0, r5
 8001698:	f002 f846 	bl	8003728 <__clzsi2>
 800169c:	239e      	movs	r3, #158	@ 0x9e
 800169e:	1a1b      	subs	r3, r3, r0
 80016a0:	2b96      	cmp	r3, #150	@ 0x96
 80016a2:	dc0f      	bgt.n	80016c4 <__aeabi_i2f+0x3c>
 80016a4:	2808      	cmp	r0, #8
 80016a6:	d038      	beq.n	800171a <__aeabi_i2f+0x92>
 80016a8:	3808      	subs	r0, #8
 80016aa:	4085      	lsls	r5, r0
 80016ac:	026d      	lsls	r5, r5, #9
 80016ae:	0a6d      	lsrs	r5, r5, #9
 80016b0:	b2d8      	uxtb	r0, r3
 80016b2:	e002      	b.n	80016ba <__aeabi_i2f+0x32>
 80016b4:	2400      	movs	r4, #0
 80016b6:	2000      	movs	r0, #0
 80016b8:	2500      	movs	r5, #0
 80016ba:	05c0      	lsls	r0, r0, #23
 80016bc:	4328      	orrs	r0, r5
 80016be:	07e4      	lsls	r4, r4, #31
 80016c0:	4320      	orrs	r0, r4
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	2b99      	cmp	r3, #153	@ 0x99
 80016c6:	dc14      	bgt.n	80016f2 <__aeabi_i2f+0x6a>
 80016c8:	1f42      	subs	r2, r0, #5
 80016ca:	4095      	lsls	r5, r2
 80016cc:	002a      	movs	r2, r5
 80016ce:	4915      	ldr	r1, [pc, #84]	@ (8001724 <__aeabi_i2f+0x9c>)
 80016d0:	4011      	ands	r1, r2
 80016d2:	0755      	lsls	r5, r2, #29
 80016d4:	d01c      	beq.n	8001710 <__aeabi_i2f+0x88>
 80016d6:	250f      	movs	r5, #15
 80016d8:	402a      	ands	r2, r5
 80016da:	2a04      	cmp	r2, #4
 80016dc:	d018      	beq.n	8001710 <__aeabi_i2f+0x88>
 80016de:	3104      	adds	r1, #4
 80016e0:	08ca      	lsrs	r2, r1, #3
 80016e2:	0149      	lsls	r1, r1, #5
 80016e4:	d515      	bpl.n	8001712 <__aeabi_i2f+0x8a>
 80016e6:	239f      	movs	r3, #159	@ 0x9f
 80016e8:	0252      	lsls	r2, r2, #9
 80016ea:	1a18      	subs	r0, r3, r0
 80016ec:	0a55      	lsrs	r5, r2, #9
 80016ee:	b2c0      	uxtb	r0, r0
 80016f0:	e7e3      	b.n	80016ba <__aeabi_i2f+0x32>
 80016f2:	2205      	movs	r2, #5
 80016f4:	0029      	movs	r1, r5
 80016f6:	1a12      	subs	r2, r2, r0
 80016f8:	40d1      	lsrs	r1, r2
 80016fa:	0002      	movs	r2, r0
 80016fc:	321b      	adds	r2, #27
 80016fe:	4095      	lsls	r5, r2
 8001700:	002a      	movs	r2, r5
 8001702:	1e55      	subs	r5, r2, #1
 8001704:	41aa      	sbcs	r2, r5
 8001706:	430a      	orrs	r2, r1
 8001708:	4906      	ldr	r1, [pc, #24]	@ (8001724 <__aeabi_i2f+0x9c>)
 800170a:	4011      	ands	r1, r2
 800170c:	0755      	lsls	r5, r2, #29
 800170e:	d1e2      	bne.n	80016d6 <__aeabi_i2f+0x4e>
 8001710:	08ca      	lsrs	r2, r1, #3
 8001712:	0252      	lsls	r2, r2, #9
 8001714:	0a55      	lsrs	r5, r2, #9
 8001716:	b2d8      	uxtb	r0, r3
 8001718:	e7cf      	b.n	80016ba <__aeabi_i2f+0x32>
 800171a:	026d      	lsls	r5, r5, #9
 800171c:	0a6d      	lsrs	r5, r5, #9
 800171e:	308e      	adds	r0, #142	@ 0x8e
 8001720:	e7cb      	b.n	80016ba <__aeabi_i2f+0x32>
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	fbffffff 	.word	0xfbffffff

08001728 <__aeabi_ui2f>:
 8001728:	b510      	push	{r4, lr}
 800172a:	1e04      	subs	r4, r0, #0
 800172c:	d00d      	beq.n	800174a <__aeabi_ui2f+0x22>
 800172e:	f001 fffb 	bl	8003728 <__clzsi2>
 8001732:	239e      	movs	r3, #158	@ 0x9e
 8001734:	1a1b      	subs	r3, r3, r0
 8001736:	2b96      	cmp	r3, #150	@ 0x96
 8001738:	dc0c      	bgt.n	8001754 <__aeabi_ui2f+0x2c>
 800173a:	2808      	cmp	r0, #8
 800173c:	d034      	beq.n	80017a8 <__aeabi_ui2f+0x80>
 800173e:	3808      	subs	r0, #8
 8001740:	4084      	lsls	r4, r0
 8001742:	0264      	lsls	r4, r4, #9
 8001744:	0a64      	lsrs	r4, r4, #9
 8001746:	b2d8      	uxtb	r0, r3
 8001748:	e001      	b.n	800174e <__aeabi_ui2f+0x26>
 800174a:	2000      	movs	r0, #0
 800174c:	2400      	movs	r4, #0
 800174e:	05c0      	lsls	r0, r0, #23
 8001750:	4320      	orrs	r0, r4
 8001752:	bd10      	pop	{r4, pc}
 8001754:	2b99      	cmp	r3, #153	@ 0x99
 8001756:	dc13      	bgt.n	8001780 <__aeabi_ui2f+0x58>
 8001758:	1f42      	subs	r2, r0, #5
 800175a:	4094      	lsls	r4, r2
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <__aeabi_ui2f+0x88>)
 800175e:	4022      	ands	r2, r4
 8001760:	0761      	lsls	r1, r4, #29
 8001762:	d01c      	beq.n	800179e <__aeabi_ui2f+0x76>
 8001764:	210f      	movs	r1, #15
 8001766:	4021      	ands	r1, r4
 8001768:	2904      	cmp	r1, #4
 800176a:	d018      	beq.n	800179e <__aeabi_ui2f+0x76>
 800176c:	3204      	adds	r2, #4
 800176e:	08d4      	lsrs	r4, r2, #3
 8001770:	0152      	lsls	r2, r2, #5
 8001772:	d515      	bpl.n	80017a0 <__aeabi_ui2f+0x78>
 8001774:	239f      	movs	r3, #159	@ 0x9f
 8001776:	0264      	lsls	r4, r4, #9
 8001778:	1a18      	subs	r0, r3, r0
 800177a:	0a64      	lsrs	r4, r4, #9
 800177c:	b2c0      	uxtb	r0, r0
 800177e:	e7e6      	b.n	800174e <__aeabi_ui2f+0x26>
 8001780:	0002      	movs	r2, r0
 8001782:	0021      	movs	r1, r4
 8001784:	321b      	adds	r2, #27
 8001786:	4091      	lsls	r1, r2
 8001788:	000a      	movs	r2, r1
 800178a:	1e51      	subs	r1, r2, #1
 800178c:	418a      	sbcs	r2, r1
 800178e:	2105      	movs	r1, #5
 8001790:	1a09      	subs	r1, r1, r0
 8001792:	40cc      	lsrs	r4, r1
 8001794:	4314      	orrs	r4, r2
 8001796:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <__aeabi_ui2f+0x88>)
 8001798:	4022      	ands	r2, r4
 800179a:	0761      	lsls	r1, r4, #29
 800179c:	d1e2      	bne.n	8001764 <__aeabi_ui2f+0x3c>
 800179e:	08d4      	lsrs	r4, r2, #3
 80017a0:	0264      	lsls	r4, r4, #9
 80017a2:	0a64      	lsrs	r4, r4, #9
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	e7d2      	b.n	800174e <__aeabi_ui2f+0x26>
 80017a8:	0264      	lsls	r4, r4, #9
 80017aa:	0a64      	lsrs	r4, r4, #9
 80017ac:	308e      	adds	r0, #142	@ 0x8e
 80017ae:	e7ce      	b.n	800174e <__aeabi_ui2f+0x26>
 80017b0:	fbffffff 	.word	0xfbffffff

080017b4 <__aeabi_dadd>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	464f      	mov	r7, r9
 80017b8:	4646      	mov	r6, r8
 80017ba:	46d6      	mov	lr, sl
 80017bc:	b5c0      	push	{r6, r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	9000      	str	r0, [sp, #0]
 80017c2:	9101      	str	r1, [sp, #4]
 80017c4:	030e      	lsls	r6, r1, #12
 80017c6:	004c      	lsls	r4, r1, #1
 80017c8:	0fcd      	lsrs	r5, r1, #31
 80017ca:	0a71      	lsrs	r1, r6, #9
 80017cc:	9e00      	ldr	r6, [sp, #0]
 80017ce:	005f      	lsls	r7, r3, #1
 80017d0:	0f76      	lsrs	r6, r6, #29
 80017d2:	430e      	orrs	r6, r1
 80017d4:	9900      	ldr	r1, [sp, #0]
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	4689      	mov	r9, r1
 80017de:	0319      	lsls	r1, r3, #12
 80017e0:	0d7b      	lsrs	r3, r7, #21
 80017e2:	4698      	mov	r8, r3
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	0a49      	lsrs	r1, r1, #9
 80017e8:	0fdb      	lsrs	r3, r3, #31
 80017ea:	469c      	mov	ip, r3
 80017ec:	9b00      	ldr	r3, [sp, #0]
 80017ee:	9a00      	ldr	r2, [sp, #0]
 80017f0:	0f5b      	lsrs	r3, r3, #29
 80017f2:	430b      	orrs	r3, r1
 80017f4:	4641      	mov	r1, r8
 80017f6:	0d64      	lsrs	r4, r4, #21
 80017f8:	00d2      	lsls	r2, r2, #3
 80017fa:	1a61      	subs	r1, r4, r1
 80017fc:	4565      	cmp	r5, ip
 80017fe:	d100      	bne.n	8001802 <__aeabi_dadd+0x4e>
 8001800:	e0a6      	b.n	8001950 <__aeabi_dadd+0x19c>
 8001802:	2900      	cmp	r1, #0
 8001804:	dd72      	ble.n	80018ec <__aeabi_dadd+0x138>
 8001806:	4647      	mov	r7, r8
 8001808:	2f00      	cmp	r7, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dadd+0x5a>
 800180c:	e0dd      	b.n	80019ca <__aeabi_dadd+0x216>
 800180e:	4fcc      	ldr	r7, [pc, #816]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001810:	42bc      	cmp	r4, r7
 8001812:	d100      	bne.n	8001816 <__aeabi_dadd+0x62>
 8001814:	e19a      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001816:	2701      	movs	r7, #1
 8001818:	2938      	cmp	r1, #56	@ 0x38
 800181a:	dc17      	bgt.n	800184c <__aeabi_dadd+0x98>
 800181c:	2780      	movs	r7, #128	@ 0x80
 800181e:	043f      	lsls	r7, r7, #16
 8001820:	433b      	orrs	r3, r7
 8001822:	291f      	cmp	r1, #31
 8001824:	dd00      	ble.n	8001828 <__aeabi_dadd+0x74>
 8001826:	e1dd      	b.n	8001be4 <__aeabi_dadd+0x430>
 8001828:	2720      	movs	r7, #32
 800182a:	1a78      	subs	r0, r7, r1
 800182c:	001f      	movs	r7, r3
 800182e:	4087      	lsls	r7, r0
 8001830:	46ba      	mov	sl, r7
 8001832:	0017      	movs	r7, r2
 8001834:	40cf      	lsrs	r7, r1
 8001836:	4684      	mov	ip, r0
 8001838:	0038      	movs	r0, r7
 800183a:	4657      	mov	r7, sl
 800183c:	4307      	orrs	r7, r0
 800183e:	4660      	mov	r0, ip
 8001840:	4082      	lsls	r2, r0
 8001842:	40cb      	lsrs	r3, r1
 8001844:	1e50      	subs	r0, r2, #1
 8001846:	4182      	sbcs	r2, r0
 8001848:	1af6      	subs	r6, r6, r3
 800184a:	4317      	orrs	r7, r2
 800184c:	464b      	mov	r3, r9
 800184e:	1bdf      	subs	r7, r3, r7
 8001850:	45b9      	cmp	r9, r7
 8001852:	4180      	sbcs	r0, r0
 8001854:	4240      	negs	r0, r0
 8001856:	1a36      	subs	r6, r6, r0
 8001858:	0233      	lsls	r3, r6, #8
 800185a:	d400      	bmi.n	800185e <__aeabi_dadd+0xaa>
 800185c:	e0ff      	b.n	8001a5e <__aeabi_dadd+0x2aa>
 800185e:	0276      	lsls	r6, r6, #9
 8001860:	0a76      	lsrs	r6, r6, #9
 8001862:	2e00      	cmp	r6, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0xb4>
 8001866:	e13c      	b.n	8001ae2 <__aeabi_dadd+0x32e>
 8001868:	0030      	movs	r0, r6
 800186a:	f001 ff5d 	bl	8003728 <__clzsi2>
 800186e:	0003      	movs	r3, r0
 8001870:	3b08      	subs	r3, #8
 8001872:	2120      	movs	r1, #32
 8001874:	0038      	movs	r0, r7
 8001876:	1aca      	subs	r2, r1, r3
 8001878:	40d0      	lsrs	r0, r2
 800187a:	409e      	lsls	r6, r3
 800187c:	0002      	movs	r2, r0
 800187e:	409f      	lsls	r7, r3
 8001880:	4332      	orrs	r2, r6
 8001882:	429c      	cmp	r4, r3
 8001884:	dd00      	ble.n	8001888 <__aeabi_dadd+0xd4>
 8001886:	e1a6      	b.n	8001bd6 <__aeabi_dadd+0x422>
 8001888:	1b18      	subs	r0, r3, r4
 800188a:	3001      	adds	r0, #1
 800188c:	1a09      	subs	r1, r1, r0
 800188e:	003e      	movs	r6, r7
 8001890:	408f      	lsls	r7, r1
 8001892:	40c6      	lsrs	r6, r0
 8001894:	1e7b      	subs	r3, r7, #1
 8001896:	419f      	sbcs	r7, r3
 8001898:	0013      	movs	r3, r2
 800189a:	408b      	lsls	r3, r1
 800189c:	4337      	orrs	r7, r6
 800189e:	431f      	orrs	r7, r3
 80018a0:	40c2      	lsrs	r2, r0
 80018a2:	003b      	movs	r3, r7
 80018a4:	0016      	movs	r6, r2
 80018a6:	2400      	movs	r4, #0
 80018a8:	4313      	orrs	r3, r2
 80018aa:	d100      	bne.n	80018ae <__aeabi_dadd+0xfa>
 80018ac:	e1df      	b.n	8001c6e <__aeabi_dadd+0x4ba>
 80018ae:	077b      	lsls	r3, r7, #29
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dadd+0x100>
 80018b2:	e332      	b.n	8001f1a <__aeabi_dadd+0x766>
 80018b4:	230f      	movs	r3, #15
 80018b6:	003a      	movs	r2, r7
 80018b8:	403b      	ands	r3, r7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d004      	beq.n	80018c8 <__aeabi_dadd+0x114>
 80018be:	1d3a      	adds	r2, r7, #4
 80018c0:	42ba      	cmp	r2, r7
 80018c2:	41bf      	sbcs	r7, r7
 80018c4:	427f      	negs	r7, r7
 80018c6:	19f6      	adds	r6, r6, r7
 80018c8:	0233      	lsls	r3, r6, #8
 80018ca:	d400      	bmi.n	80018ce <__aeabi_dadd+0x11a>
 80018cc:	e323      	b.n	8001f16 <__aeabi_dadd+0x762>
 80018ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80018d0:	3401      	adds	r4, #1
 80018d2:	429c      	cmp	r4, r3
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dadd+0x124>
 80018d6:	e0b4      	b.n	8001a42 <__aeabi_dadd+0x28e>
 80018d8:	4b9a      	ldr	r3, [pc, #616]	@ (8001b44 <__aeabi_dadd+0x390>)
 80018da:	0564      	lsls	r4, r4, #21
 80018dc:	401e      	ands	r6, r3
 80018de:	0d64      	lsrs	r4, r4, #21
 80018e0:	0777      	lsls	r7, r6, #29
 80018e2:	08d2      	lsrs	r2, r2, #3
 80018e4:	0276      	lsls	r6, r6, #9
 80018e6:	4317      	orrs	r7, r2
 80018e8:	0b36      	lsrs	r6, r6, #12
 80018ea:	e0ac      	b.n	8001a46 <__aeabi_dadd+0x292>
 80018ec:	2900      	cmp	r1, #0
 80018ee:	d100      	bne.n	80018f2 <__aeabi_dadd+0x13e>
 80018f0:	e07e      	b.n	80019f0 <__aeabi_dadd+0x23c>
 80018f2:	4641      	mov	r1, r8
 80018f4:	1b09      	subs	r1, r1, r4
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	d000      	beq.n	80018fc <__aeabi_dadd+0x148>
 80018fa:	e160      	b.n	8001bbe <__aeabi_dadd+0x40a>
 80018fc:	0034      	movs	r4, r6
 80018fe:	4648      	mov	r0, r9
 8001900:	4304      	orrs	r4, r0
 8001902:	d100      	bne.n	8001906 <__aeabi_dadd+0x152>
 8001904:	e1c9      	b.n	8001c9a <__aeabi_dadd+0x4e6>
 8001906:	1e4c      	subs	r4, r1, #1
 8001908:	2901      	cmp	r1, #1
 800190a:	d100      	bne.n	800190e <__aeabi_dadd+0x15a>
 800190c:	e22e      	b.n	8001d6c <__aeabi_dadd+0x5b8>
 800190e:	4d8c      	ldr	r5, [pc, #560]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001910:	42a9      	cmp	r1, r5
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x162>
 8001914:	e224      	b.n	8001d60 <__aeabi_dadd+0x5ac>
 8001916:	2701      	movs	r7, #1
 8001918:	2c38      	cmp	r4, #56	@ 0x38
 800191a:	dc11      	bgt.n	8001940 <__aeabi_dadd+0x18c>
 800191c:	0021      	movs	r1, r4
 800191e:	291f      	cmp	r1, #31
 8001920:	dd00      	ble.n	8001924 <__aeabi_dadd+0x170>
 8001922:	e20b      	b.n	8001d3c <__aeabi_dadd+0x588>
 8001924:	2420      	movs	r4, #32
 8001926:	0037      	movs	r7, r6
 8001928:	4648      	mov	r0, r9
 800192a:	1a64      	subs	r4, r4, r1
 800192c:	40a7      	lsls	r7, r4
 800192e:	40c8      	lsrs	r0, r1
 8001930:	4307      	orrs	r7, r0
 8001932:	4648      	mov	r0, r9
 8001934:	40a0      	lsls	r0, r4
 8001936:	40ce      	lsrs	r6, r1
 8001938:	1e44      	subs	r4, r0, #1
 800193a:	41a0      	sbcs	r0, r4
 800193c:	1b9b      	subs	r3, r3, r6
 800193e:	4307      	orrs	r7, r0
 8001940:	1bd7      	subs	r7, r2, r7
 8001942:	42ba      	cmp	r2, r7
 8001944:	4192      	sbcs	r2, r2
 8001946:	4252      	negs	r2, r2
 8001948:	4665      	mov	r5, ip
 800194a:	4644      	mov	r4, r8
 800194c:	1a9e      	subs	r6, r3, r2
 800194e:	e783      	b.n	8001858 <__aeabi_dadd+0xa4>
 8001950:	2900      	cmp	r1, #0
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dadd+0x1a2>
 8001954:	e09c      	b.n	8001a90 <__aeabi_dadd+0x2dc>
 8001956:	4647      	mov	r7, r8
 8001958:	2f00      	cmp	r7, #0
 800195a:	d167      	bne.n	8001a2c <__aeabi_dadd+0x278>
 800195c:	001f      	movs	r7, r3
 800195e:	4317      	orrs	r7, r2
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x1b0>
 8001962:	e0e4      	b.n	8001b2e <__aeabi_dadd+0x37a>
 8001964:	1e48      	subs	r0, r1, #1
 8001966:	2901      	cmp	r1, #1
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x1b8>
 800196a:	e19b      	b.n	8001ca4 <__aeabi_dadd+0x4f0>
 800196c:	4f74      	ldr	r7, [pc, #464]	@ (8001b40 <__aeabi_dadd+0x38c>)
 800196e:	42b9      	cmp	r1, r7
 8001970:	d100      	bne.n	8001974 <__aeabi_dadd+0x1c0>
 8001972:	e0eb      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001974:	2701      	movs	r7, #1
 8001976:	0001      	movs	r1, r0
 8001978:	2838      	cmp	r0, #56	@ 0x38
 800197a:	dc11      	bgt.n	80019a0 <__aeabi_dadd+0x1ec>
 800197c:	291f      	cmp	r1, #31
 800197e:	dd00      	ble.n	8001982 <__aeabi_dadd+0x1ce>
 8001980:	e1c7      	b.n	8001d12 <__aeabi_dadd+0x55e>
 8001982:	2720      	movs	r7, #32
 8001984:	1a78      	subs	r0, r7, r1
 8001986:	001f      	movs	r7, r3
 8001988:	4684      	mov	ip, r0
 800198a:	4087      	lsls	r7, r0
 800198c:	0010      	movs	r0, r2
 800198e:	40c8      	lsrs	r0, r1
 8001990:	4307      	orrs	r7, r0
 8001992:	4660      	mov	r0, ip
 8001994:	4082      	lsls	r2, r0
 8001996:	40cb      	lsrs	r3, r1
 8001998:	1e50      	subs	r0, r2, #1
 800199a:	4182      	sbcs	r2, r0
 800199c:	18f6      	adds	r6, r6, r3
 800199e:	4317      	orrs	r7, r2
 80019a0:	444f      	add	r7, r9
 80019a2:	454f      	cmp	r7, r9
 80019a4:	4180      	sbcs	r0, r0
 80019a6:	4240      	negs	r0, r0
 80019a8:	1836      	adds	r6, r6, r0
 80019aa:	0233      	lsls	r3, r6, #8
 80019ac:	d557      	bpl.n	8001a5e <__aeabi_dadd+0x2aa>
 80019ae:	4b64      	ldr	r3, [pc, #400]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80019b0:	3401      	adds	r4, #1
 80019b2:	429c      	cmp	r4, r3
 80019b4:	d045      	beq.n	8001a42 <__aeabi_dadd+0x28e>
 80019b6:	2101      	movs	r1, #1
 80019b8:	4b62      	ldr	r3, [pc, #392]	@ (8001b44 <__aeabi_dadd+0x390>)
 80019ba:	087a      	lsrs	r2, r7, #1
 80019bc:	401e      	ands	r6, r3
 80019be:	4039      	ands	r1, r7
 80019c0:	430a      	orrs	r2, r1
 80019c2:	07f7      	lsls	r7, r6, #31
 80019c4:	4317      	orrs	r7, r2
 80019c6:	0876      	lsrs	r6, r6, #1
 80019c8:	e771      	b.n	80018ae <__aeabi_dadd+0xfa>
 80019ca:	001f      	movs	r7, r3
 80019cc:	4317      	orrs	r7, r2
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x21e>
 80019d0:	e0ad      	b.n	8001b2e <__aeabi_dadd+0x37a>
 80019d2:	1e4f      	subs	r7, r1, #1
 80019d4:	46bc      	mov	ip, r7
 80019d6:	2901      	cmp	r1, #1
 80019d8:	d100      	bne.n	80019dc <__aeabi_dadd+0x228>
 80019da:	e182      	b.n	8001ce2 <__aeabi_dadd+0x52e>
 80019dc:	4f58      	ldr	r7, [pc, #352]	@ (8001b40 <__aeabi_dadd+0x38c>)
 80019de:	42b9      	cmp	r1, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dadd+0x230>
 80019e2:	e190      	b.n	8001d06 <__aeabi_dadd+0x552>
 80019e4:	4661      	mov	r1, ip
 80019e6:	2701      	movs	r7, #1
 80019e8:	2938      	cmp	r1, #56	@ 0x38
 80019ea:	dd00      	ble.n	80019ee <__aeabi_dadd+0x23a>
 80019ec:	e72e      	b.n	800184c <__aeabi_dadd+0x98>
 80019ee:	e718      	b.n	8001822 <__aeabi_dadd+0x6e>
 80019f0:	4f55      	ldr	r7, [pc, #340]	@ (8001b48 <__aeabi_dadd+0x394>)
 80019f2:	1c61      	adds	r1, r4, #1
 80019f4:	4239      	tst	r1, r7
 80019f6:	d000      	beq.n	80019fa <__aeabi_dadd+0x246>
 80019f8:	e0d0      	b.n	8001b9c <__aeabi_dadd+0x3e8>
 80019fa:	0031      	movs	r1, r6
 80019fc:	4648      	mov	r0, r9
 80019fe:	001f      	movs	r7, r3
 8001a00:	4301      	orrs	r1, r0
 8001a02:	4317      	orrs	r7, r2
 8001a04:	2c00      	cmp	r4, #0
 8001a06:	d000      	beq.n	8001a0a <__aeabi_dadd+0x256>
 8001a08:	e13d      	b.n	8001c86 <__aeabi_dadd+0x4d2>
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x25c>
 8001a0e:	e1bc      	b.n	8001d8a <__aeabi_dadd+0x5d6>
 8001a10:	2f00      	cmp	r7, #0
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x262>
 8001a14:	e1bf      	b.n	8001d96 <__aeabi_dadd+0x5e2>
 8001a16:	464b      	mov	r3, r9
 8001a18:	2100      	movs	r1, #0
 8001a1a:	08d8      	lsrs	r0, r3, #3
 8001a1c:	0777      	lsls	r7, r6, #29
 8001a1e:	4307      	orrs	r7, r0
 8001a20:	08f0      	lsrs	r0, r6, #3
 8001a22:	0306      	lsls	r6, r0, #12
 8001a24:	054c      	lsls	r4, r1, #21
 8001a26:	0b36      	lsrs	r6, r6, #12
 8001a28:	0d64      	lsrs	r4, r4, #21
 8001a2a:	e00c      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001a2c:	4f44      	ldr	r7, [pc, #272]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a2e:	42bc      	cmp	r4, r7
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dadd+0x280>
 8001a32:	e08b      	b.n	8001b4c <__aeabi_dadd+0x398>
 8001a34:	2701      	movs	r7, #1
 8001a36:	2938      	cmp	r1, #56	@ 0x38
 8001a38:	dcb2      	bgt.n	80019a0 <__aeabi_dadd+0x1ec>
 8001a3a:	2780      	movs	r7, #128	@ 0x80
 8001a3c:	043f      	lsls	r7, r7, #16
 8001a3e:	433b      	orrs	r3, r7
 8001a40:	e79c      	b.n	800197c <__aeabi_dadd+0x1c8>
 8001a42:	2600      	movs	r6, #0
 8001a44:	2700      	movs	r7, #0
 8001a46:	0524      	lsls	r4, r4, #20
 8001a48:	4334      	orrs	r4, r6
 8001a4a:	07ed      	lsls	r5, r5, #31
 8001a4c:	432c      	orrs	r4, r5
 8001a4e:	0038      	movs	r0, r7
 8001a50:	0021      	movs	r1, r4
 8001a52:	b002      	add	sp, #8
 8001a54:	bce0      	pop	{r5, r6, r7}
 8001a56:	46ba      	mov	sl, r7
 8001a58:	46b1      	mov	r9, r6
 8001a5a:	46a8      	mov	r8, r5
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	077b      	lsls	r3, r7, #29
 8001a60:	d004      	beq.n	8001a6c <__aeabi_dadd+0x2b8>
 8001a62:	230f      	movs	r3, #15
 8001a64:	403b      	ands	r3, r7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d000      	beq.n	8001a6c <__aeabi_dadd+0x2b8>
 8001a6a:	e728      	b.n	80018be <__aeabi_dadd+0x10a>
 8001a6c:	08f8      	lsrs	r0, r7, #3
 8001a6e:	4b34      	ldr	r3, [pc, #208]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a70:	0777      	lsls	r7, r6, #29
 8001a72:	4307      	orrs	r7, r0
 8001a74:	08f0      	lsrs	r0, r6, #3
 8001a76:	429c      	cmp	r4, r3
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dadd+0x2c8>
 8001a7a:	e24a      	b.n	8001f12 <__aeabi_dadd+0x75e>
 8001a7c:	003b      	movs	r3, r7
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	d059      	beq.n	8001b36 <__aeabi_dadd+0x382>
 8001a82:	2680      	movs	r6, #128	@ 0x80
 8001a84:	0336      	lsls	r6, r6, #12
 8001a86:	4306      	orrs	r6, r0
 8001a88:	0336      	lsls	r6, r6, #12
 8001a8a:	4c2d      	ldr	r4, [pc, #180]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001a8c:	0b36      	lsrs	r6, r6, #12
 8001a8e:	e7da      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001a90:	2900      	cmp	r1, #0
 8001a92:	d061      	beq.n	8001b58 <__aeabi_dadd+0x3a4>
 8001a94:	4641      	mov	r1, r8
 8001a96:	1b09      	subs	r1, r1, r4
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x2ea>
 8001a9c:	e0b9      	b.n	8001c12 <__aeabi_dadd+0x45e>
 8001a9e:	4c28      	ldr	r4, [pc, #160]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001aa0:	45a0      	cmp	r8, r4
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x2f2>
 8001aa4:	e1a5      	b.n	8001df2 <__aeabi_dadd+0x63e>
 8001aa6:	2701      	movs	r7, #1
 8001aa8:	2938      	cmp	r1, #56	@ 0x38
 8001aaa:	dc13      	bgt.n	8001ad4 <__aeabi_dadd+0x320>
 8001aac:	2480      	movs	r4, #128	@ 0x80
 8001aae:	0424      	lsls	r4, r4, #16
 8001ab0:	4326      	orrs	r6, r4
 8001ab2:	291f      	cmp	r1, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dadd+0x304>
 8001ab6:	e1c8      	b.n	8001e4a <__aeabi_dadd+0x696>
 8001ab8:	2420      	movs	r4, #32
 8001aba:	0037      	movs	r7, r6
 8001abc:	4648      	mov	r0, r9
 8001abe:	1a64      	subs	r4, r4, r1
 8001ac0:	40a7      	lsls	r7, r4
 8001ac2:	40c8      	lsrs	r0, r1
 8001ac4:	4307      	orrs	r7, r0
 8001ac6:	4648      	mov	r0, r9
 8001ac8:	40a0      	lsls	r0, r4
 8001aca:	40ce      	lsrs	r6, r1
 8001acc:	1e44      	subs	r4, r0, #1
 8001ace:	41a0      	sbcs	r0, r4
 8001ad0:	199b      	adds	r3, r3, r6
 8001ad2:	4307      	orrs	r7, r0
 8001ad4:	18bf      	adds	r7, r7, r2
 8001ad6:	4297      	cmp	r7, r2
 8001ad8:	4192      	sbcs	r2, r2
 8001ada:	4252      	negs	r2, r2
 8001adc:	4644      	mov	r4, r8
 8001ade:	18d6      	adds	r6, r2, r3
 8001ae0:	e763      	b.n	80019aa <__aeabi_dadd+0x1f6>
 8001ae2:	0038      	movs	r0, r7
 8001ae4:	f001 fe20 	bl	8003728 <__clzsi2>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	3318      	adds	r3, #24
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	dc00      	bgt.n	8001af2 <__aeabi_dadd+0x33e>
 8001af0:	e6bf      	b.n	8001872 <__aeabi_dadd+0xbe>
 8001af2:	003a      	movs	r2, r7
 8001af4:	3808      	subs	r0, #8
 8001af6:	4082      	lsls	r2, r0
 8001af8:	429c      	cmp	r4, r3
 8001afa:	dd00      	ble.n	8001afe <__aeabi_dadd+0x34a>
 8001afc:	e083      	b.n	8001c06 <__aeabi_dadd+0x452>
 8001afe:	1b1b      	subs	r3, r3, r4
 8001b00:	1c58      	adds	r0, r3, #1
 8001b02:	281f      	cmp	r0, #31
 8001b04:	dc00      	bgt.n	8001b08 <__aeabi_dadd+0x354>
 8001b06:	e1b4      	b.n	8001e72 <__aeabi_dadd+0x6be>
 8001b08:	0017      	movs	r7, r2
 8001b0a:	3b1f      	subs	r3, #31
 8001b0c:	40df      	lsrs	r7, r3
 8001b0e:	2820      	cmp	r0, #32
 8001b10:	d005      	beq.n	8001b1e <__aeabi_dadd+0x36a>
 8001b12:	2340      	movs	r3, #64	@ 0x40
 8001b14:	1a1b      	subs	r3, r3, r0
 8001b16:	409a      	lsls	r2, r3
 8001b18:	1e53      	subs	r3, r2, #1
 8001b1a:	419a      	sbcs	r2, r3
 8001b1c:	4317      	orrs	r7, r2
 8001b1e:	2400      	movs	r4, #0
 8001b20:	2f00      	cmp	r7, #0
 8001b22:	d00a      	beq.n	8001b3a <__aeabi_dadd+0x386>
 8001b24:	077b      	lsls	r3, r7, #29
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dadd+0x376>
 8001b28:	e6c4      	b.n	80018b4 <__aeabi_dadd+0x100>
 8001b2a:	0026      	movs	r6, r4
 8001b2c:	e79e      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001b2e:	464b      	mov	r3, r9
 8001b30:	000c      	movs	r4, r1
 8001b32:	08d8      	lsrs	r0, r3, #3
 8001b34:	e79b      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001b36:	2700      	movs	r7, #0
 8001b38:	4c01      	ldr	r4, [pc, #4]	@ (8001b40 <__aeabi_dadd+0x38c>)
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	e783      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001b3e:	46c0      	nop			@ (mov r8, r8)
 8001b40:	000007ff 	.word	0x000007ff
 8001b44:	ff7fffff 	.word	0xff7fffff
 8001b48:	000007fe 	.word	0x000007fe
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	0777      	lsls	r7, r6, #29
 8001b50:	08d8      	lsrs	r0, r3, #3
 8001b52:	4307      	orrs	r7, r0
 8001b54:	08f0      	lsrs	r0, r6, #3
 8001b56:	e791      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001b58:	4fcd      	ldr	r7, [pc, #820]	@ (8001e90 <__aeabi_dadd+0x6dc>)
 8001b5a:	1c61      	adds	r1, r4, #1
 8001b5c:	4239      	tst	r1, r7
 8001b5e:	d16b      	bne.n	8001c38 <__aeabi_dadd+0x484>
 8001b60:	0031      	movs	r1, r6
 8001b62:	4648      	mov	r0, r9
 8001b64:	4301      	orrs	r1, r0
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dadd+0x3b8>
 8001b6a:	e14b      	b.n	8001e04 <__aeabi_dadd+0x650>
 8001b6c:	001f      	movs	r7, r3
 8001b6e:	4317      	orrs	r7, r2
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d100      	bne.n	8001b76 <__aeabi_dadd+0x3c2>
 8001b74:	e181      	b.n	8001e7a <__aeabi_dadd+0x6c6>
 8001b76:	2f00      	cmp	r7, #0
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x3c8>
 8001b7a:	e74c      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001b7c:	444a      	add	r2, r9
 8001b7e:	454a      	cmp	r2, r9
 8001b80:	4180      	sbcs	r0, r0
 8001b82:	18f6      	adds	r6, r6, r3
 8001b84:	4240      	negs	r0, r0
 8001b86:	1836      	adds	r6, r6, r0
 8001b88:	0233      	lsls	r3, r6, #8
 8001b8a:	d500      	bpl.n	8001b8e <__aeabi_dadd+0x3da>
 8001b8c:	e1b0      	b.n	8001ef0 <__aeabi_dadd+0x73c>
 8001b8e:	0017      	movs	r7, r2
 8001b90:	4691      	mov	r9, r2
 8001b92:	4337      	orrs	r7, r6
 8001b94:	d000      	beq.n	8001b98 <__aeabi_dadd+0x3e4>
 8001b96:	e73e      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001b98:	2600      	movs	r6, #0
 8001b9a:	e754      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	1a89      	subs	r1, r1, r2
 8001ba0:	4688      	mov	r8, r1
 8001ba2:	45c1      	cmp	r9, r8
 8001ba4:	41bf      	sbcs	r7, r7
 8001ba6:	1af1      	subs	r1, r6, r3
 8001ba8:	427f      	negs	r7, r7
 8001baa:	1bc9      	subs	r1, r1, r7
 8001bac:	020f      	lsls	r7, r1, #8
 8001bae:	d461      	bmi.n	8001c74 <__aeabi_dadd+0x4c0>
 8001bb0:	4647      	mov	r7, r8
 8001bb2:	430f      	orrs	r7, r1
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dadd+0x404>
 8001bb6:	e0bd      	b.n	8001d34 <__aeabi_dadd+0x580>
 8001bb8:	000e      	movs	r6, r1
 8001bba:	4647      	mov	r7, r8
 8001bbc:	e651      	b.n	8001862 <__aeabi_dadd+0xae>
 8001bbe:	4cb5      	ldr	r4, [pc, #724]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001bc0:	45a0      	cmp	r8, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dadd+0x412>
 8001bc4:	e100      	b.n	8001dc8 <__aeabi_dadd+0x614>
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	2938      	cmp	r1, #56	@ 0x38
 8001bca:	dd00      	ble.n	8001bce <__aeabi_dadd+0x41a>
 8001bcc:	e6b8      	b.n	8001940 <__aeabi_dadd+0x18c>
 8001bce:	2480      	movs	r4, #128	@ 0x80
 8001bd0:	0424      	lsls	r4, r4, #16
 8001bd2:	4326      	orrs	r6, r4
 8001bd4:	e6a3      	b.n	800191e <__aeabi_dadd+0x16a>
 8001bd6:	4eb0      	ldr	r6, [pc, #704]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001bd8:	1ae4      	subs	r4, r4, r3
 8001bda:	4016      	ands	r6, r2
 8001bdc:	077b      	lsls	r3, r7, #29
 8001bde:	d000      	beq.n	8001be2 <__aeabi_dadd+0x42e>
 8001be0:	e73f      	b.n	8001a62 <__aeabi_dadd+0x2ae>
 8001be2:	e743      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001be4:	000f      	movs	r7, r1
 8001be6:	0018      	movs	r0, r3
 8001be8:	3f20      	subs	r7, #32
 8001bea:	40f8      	lsrs	r0, r7
 8001bec:	4684      	mov	ip, r0
 8001bee:	2920      	cmp	r1, #32
 8001bf0:	d003      	beq.n	8001bfa <__aeabi_dadd+0x446>
 8001bf2:	2740      	movs	r7, #64	@ 0x40
 8001bf4:	1a79      	subs	r1, r7, r1
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	1e53      	subs	r3, r2, #1
 8001bfc:	419a      	sbcs	r2, r3
 8001bfe:	4663      	mov	r3, ip
 8001c00:	0017      	movs	r7, r2
 8001c02:	431f      	orrs	r7, r3
 8001c04:	e622      	b.n	800184c <__aeabi_dadd+0x98>
 8001c06:	48a4      	ldr	r0, [pc, #656]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001c08:	1ae1      	subs	r1, r4, r3
 8001c0a:	4010      	ands	r0, r2
 8001c0c:	0747      	lsls	r7, r0, #29
 8001c0e:	08c0      	lsrs	r0, r0, #3
 8001c10:	e707      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001c12:	0034      	movs	r4, r6
 8001c14:	4648      	mov	r0, r9
 8001c16:	4304      	orrs	r4, r0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dadd+0x468>
 8001c1a:	e0fa      	b.n	8001e12 <__aeabi_dadd+0x65e>
 8001c1c:	1e4c      	subs	r4, r1, #1
 8001c1e:	2901      	cmp	r1, #1
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dadd+0x470>
 8001c22:	e0d7      	b.n	8001dd4 <__aeabi_dadd+0x620>
 8001c24:	4f9b      	ldr	r7, [pc, #620]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c26:	42b9      	cmp	r1, r7
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dadd+0x478>
 8001c2a:	e0e2      	b.n	8001df2 <__aeabi_dadd+0x63e>
 8001c2c:	2701      	movs	r7, #1
 8001c2e:	2c38      	cmp	r4, #56	@ 0x38
 8001c30:	dd00      	ble.n	8001c34 <__aeabi_dadd+0x480>
 8001c32:	e74f      	b.n	8001ad4 <__aeabi_dadd+0x320>
 8001c34:	0021      	movs	r1, r4
 8001c36:	e73c      	b.n	8001ab2 <__aeabi_dadd+0x2fe>
 8001c38:	4c96      	ldr	r4, [pc, #600]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c3a:	42a1      	cmp	r1, r4
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dadd+0x48c>
 8001c3e:	e0dd      	b.n	8001dfc <__aeabi_dadd+0x648>
 8001c40:	444a      	add	r2, r9
 8001c42:	454a      	cmp	r2, r9
 8001c44:	4180      	sbcs	r0, r0
 8001c46:	18f3      	adds	r3, r6, r3
 8001c48:	4240      	negs	r0, r0
 8001c4a:	1818      	adds	r0, r3, r0
 8001c4c:	07c7      	lsls	r7, r0, #31
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	4317      	orrs	r7, r2
 8001c52:	0846      	lsrs	r6, r0, #1
 8001c54:	0752      	lsls	r2, r2, #29
 8001c56:	d005      	beq.n	8001c64 <__aeabi_dadd+0x4b0>
 8001c58:	220f      	movs	r2, #15
 8001c5a:	000c      	movs	r4, r1
 8001c5c:	403a      	ands	r2, r7
 8001c5e:	2a04      	cmp	r2, #4
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dadd+0x4b0>
 8001c62:	e62c      	b.n	80018be <__aeabi_dadd+0x10a>
 8001c64:	0776      	lsls	r6, r6, #29
 8001c66:	08ff      	lsrs	r7, r7, #3
 8001c68:	4337      	orrs	r7, r6
 8001c6a:	0900      	lsrs	r0, r0, #4
 8001c6c:	e6d9      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001c6e:	2700      	movs	r7, #0
 8001c70:	2600      	movs	r6, #0
 8001c72:	e6e8      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001c74:	4649      	mov	r1, r9
 8001c76:	1a57      	subs	r7, r2, r1
 8001c78:	42ba      	cmp	r2, r7
 8001c7a:	4192      	sbcs	r2, r2
 8001c7c:	1b9e      	subs	r6, r3, r6
 8001c7e:	4252      	negs	r2, r2
 8001c80:	4665      	mov	r5, ip
 8001c82:	1ab6      	subs	r6, r6, r2
 8001c84:	e5ed      	b.n	8001862 <__aeabi_dadd+0xae>
 8001c86:	2900      	cmp	r1, #0
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dadd+0x4d8>
 8001c8a:	e0c6      	b.n	8001e1a <__aeabi_dadd+0x666>
 8001c8c:	2f00      	cmp	r7, #0
 8001c8e:	d167      	bne.n	8001d60 <__aeabi_dadd+0x5ac>
 8001c90:	2680      	movs	r6, #128	@ 0x80
 8001c92:	2500      	movs	r5, #0
 8001c94:	4c7f      	ldr	r4, [pc, #508]	@ (8001e94 <__aeabi_dadd+0x6e0>)
 8001c96:	0336      	lsls	r6, r6, #12
 8001c98:	e6d5      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001c9a:	4665      	mov	r5, ip
 8001c9c:	000c      	movs	r4, r1
 8001c9e:	001e      	movs	r6, r3
 8001ca0:	08d0      	lsrs	r0, r2, #3
 8001ca2:	e6e4      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001ca4:	444a      	add	r2, r9
 8001ca6:	454a      	cmp	r2, r9
 8001ca8:	4180      	sbcs	r0, r0
 8001caa:	18f3      	adds	r3, r6, r3
 8001cac:	4240      	negs	r0, r0
 8001cae:	1818      	adds	r0, r3, r0
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0203      	lsls	r3, r0, #8
 8001cb4:	d400      	bmi.n	8001cb8 <__aeabi_dadd+0x504>
 8001cb6:	e096      	b.n	8001de6 <__aeabi_dadd+0x632>
 8001cb8:	4b77      	ldr	r3, [pc, #476]	@ (8001e98 <__aeabi_dadd+0x6e4>)
 8001cba:	0849      	lsrs	r1, r1, #1
 8001cbc:	4018      	ands	r0, r3
 8001cbe:	07c3      	lsls	r3, r0, #31
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	0844      	lsrs	r4, r0, #1
 8001cc4:	0749      	lsls	r1, r1, #29
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dadd+0x516>
 8001cc8:	e129      	b.n	8001f1e <__aeabi_dadd+0x76a>
 8001cca:	220f      	movs	r2, #15
 8001ccc:	401a      	ands	r2, r3
 8001cce:	2a04      	cmp	r2, #4
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dadd+0x520>
 8001cd2:	e0ea      	b.n	8001eaa <__aeabi_dadd+0x6f6>
 8001cd4:	1d1f      	adds	r7, r3, #4
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	41b6      	sbcs	r6, r6
 8001cda:	4276      	negs	r6, r6
 8001cdc:	1936      	adds	r6, r6, r4
 8001cde:	2402      	movs	r4, #2
 8001ce0:	e6c4      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	1a8f      	subs	r7, r1, r2
 8001ce6:	45b9      	cmp	r9, r7
 8001ce8:	4180      	sbcs	r0, r0
 8001cea:	1af6      	subs	r6, r6, r3
 8001cec:	4240      	negs	r0, r0
 8001cee:	1a36      	subs	r6, r6, r0
 8001cf0:	0233      	lsls	r3, r6, #8
 8001cf2:	d406      	bmi.n	8001d02 <__aeabi_dadd+0x54e>
 8001cf4:	0773      	lsls	r3, r6, #29
 8001cf6:	08ff      	lsrs	r7, r7, #3
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	431f      	orrs	r7, r3
 8001cfc:	08f0      	lsrs	r0, r6, #3
 8001cfe:	e690      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001d00:	4665      	mov	r5, ip
 8001d02:	2401      	movs	r4, #1
 8001d04:	e5ab      	b.n	800185e <__aeabi_dadd+0xaa>
 8001d06:	464b      	mov	r3, r9
 8001d08:	0777      	lsls	r7, r6, #29
 8001d0a:	08d8      	lsrs	r0, r3, #3
 8001d0c:	4307      	orrs	r7, r0
 8001d0e:	08f0      	lsrs	r0, r6, #3
 8001d10:	e6b4      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001d12:	000f      	movs	r7, r1
 8001d14:	0018      	movs	r0, r3
 8001d16:	3f20      	subs	r7, #32
 8001d18:	40f8      	lsrs	r0, r7
 8001d1a:	4684      	mov	ip, r0
 8001d1c:	2920      	cmp	r1, #32
 8001d1e:	d003      	beq.n	8001d28 <__aeabi_dadd+0x574>
 8001d20:	2740      	movs	r7, #64	@ 0x40
 8001d22:	1a79      	subs	r1, r7, r1
 8001d24:	408b      	lsls	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	1e53      	subs	r3, r2, #1
 8001d2a:	419a      	sbcs	r2, r3
 8001d2c:	4663      	mov	r3, ip
 8001d2e:	0017      	movs	r7, r2
 8001d30:	431f      	orrs	r7, r3
 8001d32:	e635      	b.n	80019a0 <__aeabi_dadd+0x1ec>
 8001d34:	2500      	movs	r5, #0
 8001d36:	2400      	movs	r4, #0
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e684      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001d3c:	000c      	movs	r4, r1
 8001d3e:	0035      	movs	r5, r6
 8001d40:	3c20      	subs	r4, #32
 8001d42:	40e5      	lsrs	r5, r4
 8001d44:	2920      	cmp	r1, #32
 8001d46:	d005      	beq.n	8001d54 <__aeabi_dadd+0x5a0>
 8001d48:	2440      	movs	r4, #64	@ 0x40
 8001d4a:	1a61      	subs	r1, r4, r1
 8001d4c:	408e      	lsls	r6, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	4331      	orrs	r1, r6
 8001d52:	4689      	mov	r9, r1
 8001d54:	4648      	mov	r0, r9
 8001d56:	1e41      	subs	r1, r0, #1
 8001d58:	4188      	sbcs	r0, r1
 8001d5a:	0007      	movs	r7, r0
 8001d5c:	432f      	orrs	r7, r5
 8001d5e:	e5ef      	b.n	8001940 <__aeabi_dadd+0x18c>
 8001d60:	08d2      	lsrs	r2, r2, #3
 8001d62:	075f      	lsls	r7, r3, #29
 8001d64:	4665      	mov	r5, ip
 8001d66:	4317      	orrs	r7, r2
 8001d68:	08d8      	lsrs	r0, r3, #3
 8001d6a:	e687      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001d6c:	1a17      	subs	r7, r2, r0
 8001d6e:	42ba      	cmp	r2, r7
 8001d70:	4192      	sbcs	r2, r2
 8001d72:	1b9e      	subs	r6, r3, r6
 8001d74:	4252      	negs	r2, r2
 8001d76:	1ab6      	subs	r6, r6, r2
 8001d78:	0233      	lsls	r3, r6, #8
 8001d7a:	d4c1      	bmi.n	8001d00 <__aeabi_dadd+0x54c>
 8001d7c:	0773      	lsls	r3, r6, #29
 8001d7e:	08ff      	lsrs	r7, r7, #3
 8001d80:	4665      	mov	r5, ip
 8001d82:	2101      	movs	r1, #1
 8001d84:	431f      	orrs	r7, r3
 8001d86:	08f0      	lsrs	r0, r6, #3
 8001d88:	e64b      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001d8a:	2f00      	cmp	r7, #0
 8001d8c:	d07b      	beq.n	8001e86 <__aeabi_dadd+0x6d2>
 8001d8e:	4665      	mov	r5, ip
 8001d90:	001e      	movs	r6, r3
 8001d92:	4691      	mov	r9, r2
 8001d94:	e63f      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001d96:	1a81      	subs	r1, r0, r2
 8001d98:	4688      	mov	r8, r1
 8001d9a:	45c1      	cmp	r9, r8
 8001d9c:	41a4      	sbcs	r4, r4
 8001d9e:	1af1      	subs	r1, r6, r3
 8001da0:	4264      	negs	r4, r4
 8001da2:	1b09      	subs	r1, r1, r4
 8001da4:	2480      	movs	r4, #128	@ 0x80
 8001da6:	0424      	lsls	r4, r4, #16
 8001da8:	4221      	tst	r1, r4
 8001daa:	d077      	beq.n	8001e9c <__aeabi_dadd+0x6e8>
 8001dac:	1a10      	subs	r0, r2, r0
 8001dae:	4282      	cmp	r2, r0
 8001db0:	4192      	sbcs	r2, r2
 8001db2:	0007      	movs	r7, r0
 8001db4:	1b9e      	subs	r6, r3, r6
 8001db6:	4252      	negs	r2, r2
 8001db8:	1ab6      	subs	r6, r6, r2
 8001dba:	4337      	orrs	r7, r6
 8001dbc:	d000      	beq.n	8001dc0 <__aeabi_dadd+0x60c>
 8001dbe:	e0a0      	b.n	8001f02 <__aeabi_dadd+0x74e>
 8001dc0:	4665      	mov	r5, ip
 8001dc2:	2400      	movs	r4, #0
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	e63e      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001dc8:	075f      	lsls	r7, r3, #29
 8001dca:	08d2      	lsrs	r2, r2, #3
 8001dcc:	4665      	mov	r5, ip
 8001dce:	4317      	orrs	r7, r2
 8001dd0:	08d8      	lsrs	r0, r3, #3
 8001dd2:	e653      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001dd4:	1881      	adds	r1, r0, r2
 8001dd6:	4291      	cmp	r1, r2
 8001dd8:	4192      	sbcs	r2, r2
 8001dda:	18f0      	adds	r0, r6, r3
 8001ddc:	4252      	negs	r2, r2
 8001dde:	1880      	adds	r0, r0, r2
 8001de0:	0203      	lsls	r3, r0, #8
 8001de2:	d500      	bpl.n	8001de6 <__aeabi_dadd+0x632>
 8001de4:	e768      	b.n	8001cb8 <__aeabi_dadd+0x504>
 8001de6:	0747      	lsls	r7, r0, #29
 8001de8:	08c9      	lsrs	r1, r1, #3
 8001dea:	430f      	orrs	r7, r1
 8001dec:	08c0      	lsrs	r0, r0, #3
 8001dee:	2101      	movs	r1, #1
 8001df0:	e617      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001df2:	08d2      	lsrs	r2, r2, #3
 8001df4:	075f      	lsls	r7, r3, #29
 8001df6:	4317      	orrs	r7, r2
 8001df8:	08d8      	lsrs	r0, r3, #3
 8001dfa:	e63f      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001dfc:	000c      	movs	r4, r1
 8001dfe:	2600      	movs	r6, #0
 8001e00:	2700      	movs	r7, #0
 8001e02:	e620      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001e04:	2900      	cmp	r1, #0
 8001e06:	d156      	bne.n	8001eb6 <__aeabi_dadd+0x702>
 8001e08:	075f      	lsls	r7, r3, #29
 8001e0a:	08d2      	lsrs	r2, r2, #3
 8001e0c:	4317      	orrs	r7, r2
 8001e0e:	08d8      	lsrs	r0, r3, #3
 8001e10:	e634      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001e12:	000c      	movs	r4, r1
 8001e14:	001e      	movs	r6, r3
 8001e16:	08d0      	lsrs	r0, r2, #3
 8001e18:	e629      	b.n	8001a6e <__aeabi_dadd+0x2ba>
 8001e1a:	08c1      	lsrs	r1, r0, #3
 8001e1c:	0770      	lsls	r0, r6, #29
 8001e1e:	4301      	orrs	r1, r0
 8001e20:	08f0      	lsrs	r0, r6, #3
 8001e22:	2f00      	cmp	r7, #0
 8001e24:	d062      	beq.n	8001eec <__aeabi_dadd+0x738>
 8001e26:	2480      	movs	r4, #128	@ 0x80
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	4220      	tst	r0, r4
 8001e2c:	d007      	beq.n	8001e3e <__aeabi_dadd+0x68a>
 8001e2e:	08de      	lsrs	r6, r3, #3
 8001e30:	4226      	tst	r6, r4
 8001e32:	d104      	bne.n	8001e3e <__aeabi_dadd+0x68a>
 8001e34:	4665      	mov	r5, ip
 8001e36:	0030      	movs	r0, r6
 8001e38:	08d1      	lsrs	r1, r2, #3
 8001e3a:	075b      	lsls	r3, r3, #29
 8001e3c:	4319      	orrs	r1, r3
 8001e3e:	0f4f      	lsrs	r7, r1, #29
 8001e40:	00c9      	lsls	r1, r1, #3
 8001e42:	08c9      	lsrs	r1, r1, #3
 8001e44:	077f      	lsls	r7, r7, #29
 8001e46:	430f      	orrs	r7, r1
 8001e48:	e618      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001e4a:	000c      	movs	r4, r1
 8001e4c:	0030      	movs	r0, r6
 8001e4e:	3c20      	subs	r4, #32
 8001e50:	40e0      	lsrs	r0, r4
 8001e52:	4684      	mov	ip, r0
 8001e54:	2920      	cmp	r1, #32
 8001e56:	d005      	beq.n	8001e64 <__aeabi_dadd+0x6b0>
 8001e58:	2440      	movs	r4, #64	@ 0x40
 8001e5a:	1a61      	subs	r1, r4, r1
 8001e5c:	408e      	lsls	r6, r1
 8001e5e:	4649      	mov	r1, r9
 8001e60:	4331      	orrs	r1, r6
 8001e62:	4689      	mov	r9, r1
 8001e64:	4648      	mov	r0, r9
 8001e66:	1e41      	subs	r1, r0, #1
 8001e68:	4188      	sbcs	r0, r1
 8001e6a:	4661      	mov	r1, ip
 8001e6c:	0007      	movs	r7, r0
 8001e6e:	430f      	orrs	r7, r1
 8001e70:	e630      	b.n	8001ad4 <__aeabi_dadd+0x320>
 8001e72:	2120      	movs	r1, #32
 8001e74:	2700      	movs	r7, #0
 8001e76:	1a09      	subs	r1, r1, r0
 8001e78:	e50e      	b.n	8001898 <__aeabi_dadd+0xe4>
 8001e7a:	001e      	movs	r6, r3
 8001e7c:	2f00      	cmp	r7, #0
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dadd+0x6ce>
 8001e80:	e522      	b.n	80018c8 <__aeabi_dadd+0x114>
 8001e82:	2400      	movs	r4, #0
 8001e84:	e758      	b.n	8001d38 <__aeabi_dadd+0x584>
 8001e86:	2500      	movs	r5, #0
 8001e88:	2400      	movs	r4, #0
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	e5db      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	000007fe 	.word	0x000007fe
 8001e94:	000007ff 	.word	0x000007ff
 8001e98:	ff7fffff 	.word	0xff7fffff
 8001e9c:	4647      	mov	r7, r8
 8001e9e:	430f      	orrs	r7, r1
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dadd+0x6f0>
 8001ea2:	e747      	b.n	8001d34 <__aeabi_dadd+0x580>
 8001ea4:	000e      	movs	r6, r1
 8001ea6:	46c1      	mov	r9, r8
 8001ea8:	e5b5      	b.n	8001a16 <__aeabi_dadd+0x262>
 8001eaa:	08df      	lsrs	r7, r3, #3
 8001eac:	0764      	lsls	r4, r4, #29
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4327      	orrs	r7, r4
 8001eb2:	0900      	lsrs	r0, r0, #4
 8001eb4:	e5b5      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	08c0      	lsrs	r0, r0, #3
 8001eba:	0777      	lsls	r7, r6, #29
 8001ebc:	4307      	orrs	r7, r0
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	08f0      	lsrs	r0, r6, #3
 8001ec2:	2900      	cmp	r1, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dadd+0x714>
 8001ec6:	e5d9      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001ec8:	2180      	movs	r1, #128	@ 0x80
 8001eca:	0309      	lsls	r1, r1, #12
 8001ecc:	4208      	tst	r0, r1
 8001ece:	d007      	beq.n	8001ee0 <__aeabi_dadd+0x72c>
 8001ed0:	08dc      	lsrs	r4, r3, #3
 8001ed2:	420c      	tst	r4, r1
 8001ed4:	d104      	bne.n	8001ee0 <__aeabi_dadd+0x72c>
 8001ed6:	08d2      	lsrs	r2, r2, #3
 8001ed8:	075b      	lsls	r3, r3, #29
 8001eda:	431a      	orrs	r2, r3
 8001edc:	0017      	movs	r7, r2
 8001ede:	0020      	movs	r0, r4
 8001ee0:	0f7b      	lsrs	r3, r7, #29
 8001ee2:	00ff      	lsls	r7, r7, #3
 8001ee4:	08ff      	lsrs	r7, r7, #3
 8001ee6:	075b      	lsls	r3, r3, #29
 8001ee8:	431f      	orrs	r7, r3
 8001eea:	e5c7      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001eec:	000f      	movs	r7, r1
 8001eee:	e5c5      	b.n	8001a7c <__aeabi_dadd+0x2c8>
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <__aeabi_dadd+0x788>)
 8001ef2:	08d2      	lsrs	r2, r2, #3
 8001ef4:	4033      	ands	r3, r6
 8001ef6:	075f      	lsls	r7, r3, #29
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	2401      	movs	r4, #1
 8001efc:	4317      	orrs	r7, r2
 8001efe:	0b1e      	lsrs	r6, r3, #12
 8001f00:	e5a1      	b.n	8001a46 <__aeabi_dadd+0x292>
 8001f02:	4226      	tst	r6, r4
 8001f04:	d012      	beq.n	8001f2c <__aeabi_dadd+0x778>
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <__aeabi_dadd+0x788>)
 8001f08:	4665      	mov	r5, ip
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	2401      	movs	r4, #1
 8001f0e:	401e      	ands	r6, r3
 8001f10:	e4e6      	b.n	80018e0 <__aeabi_dadd+0x12c>
 8001f12:	0021      	movs	r1, r4
 8001f14:	e585      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f16:	0017      	movs	r7, r2
 8001f18:	e5a8      	b.n	8001a6c <__aeabi_dadd+0x2b8>
 8001f1a:	003a      	movs	r2, r7
 8001f1c:	e4d4      	b.n	80018c8 <__aeabi_dadd+0x114>
 8001f1e:	08db      	lsrs	r3, r3, #3
 8001f20:	0764      	lsls	r4, r4, #29
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0027      	movs	r7, r4
 8001f26:	2102      	movs	r1, #2
 8001f28:	0900      	lsrs	r0, r0, #4
 8001f2a:	e57a      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f2c:	08c0      	lsrs	r0, r0, #3
 8001f2e:	0777      	lsls	r7, r6, #29
 8001f30:	4307      	orrs	r7, r0
 8001f32:	4665      	mov	r5, ip
 8001f34:	2100      	movs	r1, #0
 8001f36:	08f0      	lsrs	r0, r6, #3
 8001f38:	e573      	b.n	8001a22 <__aeabi_dadd+0x26e>
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	ff7fffff 	.word	0xff7fffff

08001f40 <__aeabi_ddiv>:
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f42:	46de      	mov	lr, fp
 8001f44:	4645      	mov	r5, r8
 8001f46:	4657      	mov	r7, sl
 8001f48:	464e      	mov	r6, r9
 8001f4a:	b5e0      	push	{r5, r6, r7, lr}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	9200      	str	r2, [sp, #0]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	030b      	lsls	r3, r1, #12
 8001f54:	0b1b      	lsrs	r3, r3, #12
 8001f56:	469b      	mov	fp, r3
 8001f58:	0fca      	lsrs	r2, r1, #31
 8001f5a:	004b      	lsls	r3, r1, #1
 8001f5c:	0004      	movs	r4, r0
 8001f5e:	4680      	mov	r8, r0
 8001f60:	0d5b      	lsrs	r3, r3, #21
 8001f62:	9202      	str	r2, [sp, #8]
 8001f64:	d100      	bne.n	8001f68 <__aeabi_ddiv+0x28>
 8001f66:	e098      	b.n	800209a <__aeabi_ddiv+0x15a>
 8001f68:	4a7c      	ldr	r2, [pc, #496]	@ (800215c <__aeabi_ddiv+0x21c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d037      	beq.n	8001fde <__aeabi_ddiv+0x9e>
 8001f6e:	4659      	mov	r1, fp
 8001f70:	0f42      	lsrs	r2, r0, #29
 8001f72:	00c9      	lsls	r1, r1, #3
 8001f74:	430a      	orrs	r2, r1
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	0409      	lsls	r1, r1, #16
 8001f7a:	4311      	orrs	r1, r2
 8001f7c:	00c2      	lsls	r2, r0, #3
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4a77      	ldr	r2, [pc, #476]	@ (8002160 <__aeabi_ddiv+0x220>)
 8001f82:	4689      	mov	r9, r1
 8001f84:	4692      	mov	sl, r2
 8001f86:	449a      	add	sl, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	9e00      	ldr	r6, [sp, #0]
 8001f90:	9f01      	ldr	r7, [sp, #4]
 8001f92:	033b      	lsls	r3, r7, #12
 8001f94:	0b1b      	lsrs	r3, r3, #12
 8001f96:	469b      	mov	fp, r3
 8001f98:	007b      	lsls	r3, r7, #1
 8001f9a:	0030      	movs	r0, r6
 8001f9c:	0d5b      	lsrs	r3, r3, #21
 8001f9e:	0ffd      	lsrs	r5, r7, #31
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d059      	beq.n	8002058 <__aeabi_ddiv+0x118>
 8001fa4:	4a6d      	ldr	r2, [pc, #436]	@ (800215c <__aeabi_ddiv+0x21c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d048      	beq.n	800203c <__aeabi_ddiv+0xfc>
 8001faa:	4659      	mov	r1, fp
 8001fac:	0f72      	lsrs	r2, r6, #29
 8001fae:	00c9      	lsls	r1, r1, #3
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	0409      	lsls	r1, r1, #16
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	468b      	mov	fp, r1
 8001fba:	4969      	ldr	r1, [pc, #420]	@ (8002160 <__aeabi_ddiv+0x220>)
 8001fbc:	00f2      	lsls	r2, r6, #3
 8001fbe:	468c      	mov	ip, r1
 8001fc0:	4651      	mov	r1, sl
 8001fc2:	4463      	add	r3, ip
 8001fc4:	1acb      	subs	r3, r1, r3
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	9e02      	ldr	r6, [sp, #8]
 8001fcc:	406e      	eors	r6, r5
 8001fce:	b2f6      	uxtb	r6, r6
 8001fd0:	2c0f      	cmp	r4, #15
 8001fd2:	d900      	bls.n	8001fd6 <__aeabi_ddiv+0x96>
 8001fd4:	e0ce      	b.n	8002174 <__aeabi_ddiv+0x234>
 8001fd6:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <__aeabi_ddiv+0x224>)
 8001fd8:	00a4      	lsls	r4, r4, #2
 8001fda:	591b      	ldr	r3, [r3, r4]
 8001fdc:	469f      	mov	pc, r3
 8001fde:	465a      	mov	r2, fp
 8001fe0:	4302      	orrs	r2, r0
 8001fe2:	4691      	mov	r9, r2
 8001fe4:	d000      	beq.n	8001fe8 <__aeabi_ddiv+0xa8>
 8001fe6:	e090      	b.n	800210a <__aeabi_ddiv+0x1ca>
 8001fe8:	469a      	mov	sl, r3
 8001fea:	2302      	movs	r3, #2
 8001fec:	4690      	mov	r8, r2
 8001fee:	2408      	movs	r4, #8
 8001ff0:	9303      	str	r3, [sp, #12]
 8001ff2:	e7cc      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 8001ff4:	46cb      	mov	fp, r9
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	9d02      	ldr	r5, [sp, #8]
 8001ffa:	9903      	ldr	r1, [sp, #12]
 8001ffc:	2902      	cmp	r1, #2
 8001ffe:	d100      	bne.n	8002002 <__aeabi_ddiv+0xc2>
 8002000:	e1de      	b.n	80023c0 <__aeabi_ddiv+0x480>
 8002002:	2903      	cmp	r1, #3
 8002004:	d100      	bne.n	8002008 <__aeabi_ddiv+0xc8>
 8002006:	e08d      	b.n	8002124 <__aeabi_ddiv+0x1e4>
 8002008:	2901      	cmp	r1, #1
 800200a:	d000      	beq.n	800200e <__aeabi_ddiv+0xce>
 800200c:	e179      	b.n	8002302 <__aeabi_ddiv+0x3c2>
 800200e:	002e      	movs	r6, r5
 8002010:	2200      	movs	r2, #0
 8002012:	2300      	movs	r3, #0
 8002014:	2400      	movs	r4, #0
 8002016:	4690      	mov	r8, r2
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	4323      	orrs	r3, r4
 800201c:	07f6      	lsls	r6, r6, #31
 800201e:	4333      	orrs	r3, r6
 8002020:	4640      	mov	r0, r8
 8002022:	0019      	movs	r1, r3
 8002024:	b007      	add	sp, #28
 8002026:	bcf0      	pop	{r4, r5, r6, r7}
 8002028:	46bb      	mov	fp, r7
 800202a:	46b2      	mov	sl, r6
 800202c:	46a9      	mov	r9, r5
 800202e:	46a0      	mov	r8, r4
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	2200      	movs	r2, #0
 8002034:	2400      	movs	r4, #0
 8002036:	4690      	mov	r8, r2
 8002038:	4b48      	ldr	r3, [pc, #288]	@ (800215c <__aeabi_ddiv+0x21c>)
 800203a:	e7ed      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800203c:	465a      	mov	r2, fp
 800203e:	9b00      	ldr	r3, [sp, #0]
 8002040:	431a      	orrs	r2, r3
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <__aeabi_ddiv+0x228>)
 8002044:	469c      	mov	ip, r3
 8002046:	44e2      	add	sl, ip
 8002048:	2a00      	cmp	r2, #0
 800204a:	d159      	bne.n	8002100 <__aeabi_ddiv+0x1c0>
 800204c:	2302      	movs	r3, #2
 800204e:	431c      	orrs	r4, r3
 8002050:	2300      	movs	r3, #0
 8002052:	2102      	movs	r1, #2
 8002054:	469b      	mov	fp, r3
 8002056:	e7b8      	b.n	8001fca <__aeabi_ddiv+0x8a>
 8002058:	465a      	mov	r2, fp
 800205a:	9b00      	ldr	r3, [sp, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	d049      	beq.n	80020f4 <__aeabi_ddiv+0x1b4>
 8002060:	465b      	mov	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_ddiv+0x128>
 8002066:	e19c      	b.n	80023a2 <__aeabi_ddiv+0x462>
 8002068:	4658      	mov	r0, fp
 800206a:	f001 fb5d 	bl	8003728 <__clzsi2>
 800206e:	0002      	movs	r2, r0
 8002070:	0003      	movs	r3, r0
 8002072:	3a0b      	subs	r2, #11
 8002074:	271d      	movs	r7, #29
 8002076:	9e00      	ldr	r6, [sp, #0]
 8002078:	1aba      	subs	r2, r7, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4658      	mov	r0, fp
 800207e:	40d6      	lsrs	r6, r2
 8002080:	3908      	subs	r1, #8
 8002082:	4088      	lsls	r0, r1
 8002084:	0032      	movs	r2, r6
 8002086:	4302      	orrs	r2, r0
 8002088:	4693      	mov	fp, r2
 800208a:	9a00      	ldr	r2, [sp, #0]
 800208c:	408a      	lsls	r2, r1
 800208e:	4937      	ldr	r1, [pc, #220]	@ (800216c <__aeabi_ddiv+0x22c>)
 8002090:	4453      	add	r3, sl
 8002092:	468a      	mov	sl, r1
 8002094:	2100      	movs	r1, #0
 8002096:	449a      	add	sl, r3
 8002098:	e797      	b.n	8001fca <__aeabi_ddiv+0x8a>
 800209a:	465b      	mov	r3, fp
 800209c:	4303      	orrs	r3, r0
 800209e:	4699      	mov	r9, r3
 80020a0:	d021      	beq.n	80020e6 <__aeabi_ddiv+0x1a6>
 80020a2:	465b      	mov	r3, fp
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d100      	bne.n	80020aa <__aeabi_ddiv+0x16a>
 80020a8:	e169      	b.n	800237e <__aeabi_ddiv+0x43e>
 80020aa:	4658      	mov	r0, fp
 80020ac:	f001 fb3c 	bl	8003728 <__clzsi2>
 80020b0:	230b      	movs	r3, #11
 80020b2:	425b      	negs	r3, r3
 80020b4:	469c      	mov	ip, r3
 80020b6:	0002      	movs	r2, r0
 80020b8:	4484      	add	ip, r0
 80020ba:	4666      	mov	r6, ip
 80020bc:	231d      	movs	r3, #29
 80020be:	1b9b      	subs	r3, r3, r6
 80020c0:	0026      	movs	r6, r4
 80020c2:	0011      	movs	r1, r2
 80020c4:	4658      	mov	r0, fp
 80020c6:	40de      	lsrs	r6, r3
 80020c8:	3908      	subs	r1, #8
 80020ca:	4088      	lsls	r0, r1
 80020cc:	0033      	movs	r3, r6
 80020ce:	4303      	orrs	r3, r0
 80020d0:	4699      	mov	r9, r3
 80020d2:	0023      	movs	r3, r4
 80020d4:	408b      	lsls	r3, r1
 80020d6:	4698      	mov	r8, r3
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <__aeabi_ddiv+0x230>)
 80020da:	2400      	movs	r4, #0
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	469a      	mov	sl, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	9303      	str	r3, [sp, #12]
 80020e4:	e753      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4698      	mov	r8, r3
 80020ea:	469a      	mov	sl, r3
 80020ec:	3301      	adds	r3, #1
 80020ee:	2404      	movs	r4, #4
 80020f0:	9303      	str	r3, [sp, #12]
 80020f2:	e74c      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 80020f4:	2301      	movs	r3, #1
 80020f6:	431c      	orrs	r4, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	2101      	movs	r1, #1
 80020fc:	469b      	mov	fp, r3
 80020fe:	e764      	b.n	8001fca <__aeabi_ddiv+0x8a>
 8002100:	2303      	movs	r3, #3
 8002102:	0032      	movs	r2, r6
 8002104:	2103      	movs	r1, #3
 8002106:	431c      	orrs	r4, r3
 8002108:	e75f      	b.n	8001fca <__aeabi_ddiv+0x8a>
 800210a:	469a      	mov	sl, r3
 800210c:	2303      	movs	r3, #3
 800210e:	46d9      	mov	r9, fp
 8002110:	240c      	movs	r4, #12
 8002112:	9303      	str	r3, [sp, #12]
 8002114:	e73b      	b.n	8001f8e <__aeabi_ddiv+0x4e>
 8002116:	2300      	movs	r3, #0
 8002118:	2480      	movs	r4, #128	@ 0x80
 800211a:	4698      	mov	r8, r3
 800211c:	2600      	movs	r6, #0
 800211e:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002120:	0324      	lsls	r4, r4, #12
 8002122:	e779      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002124:	2480      	movs	r4, #128	@ 0x80
 8002126:	465b      	mov	r3, fp
 8002128:	0324      	lsls	r4, r4, #12
 800212a:	431c      	orrs	r4, r3
 800212c:	0324      	lsls	r4, r4, #12
 800212e:	002e      	movs	r6, r5
 8002130:	4690      	mov	r8, r2
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002134:	0b24      	lsrs	r4, r4, #12
 8002136:	e76f      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002138:	2480      	movs	r4, #128	@ 0x80
 800213a:	464b      	mov	r3, r9
 800213c:	0324      	lsls	r4, r4, #12
 800213e:	4223      	tst	r3, r4
 8002140:	d002      	beq.n	8002148 <__aeabi_ddiv+0x208>
 8002142:	465b      	mov	r3, fp
 8002144:	4223      	tst	r3, r4
 8002146:	d0f0      	beq.n	800212a <__aeabi_ddiv+0x1ea>
 8002148:	2480      	movs	r4, #128	@ 0x80
 800214a:	464b      	mov	r3, r9
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	431c      	orrs	r4, r3
 8002150:	0324      	lsls	r4, r4, #12
 8002152:	9e02      	ldr	r6, [sp, #8]
 8002154:	4b01      	ldr	r3, [pc, #4]	@ (800215c <__aeabi_ddiv+0x21c>)
 8002156:	0b24      	lsrs	r4, r4, #12
 8002158:	e75e      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	000007ff 	.word	0x000007ff
 8002160:	fffffc01 	.word	0xfffffc01
 8002164:	0800c938 	.word	0x0800c938
 8002168:	fffff801 	.word	0xfffff801
 800216c:	000003f3 	.word	0x000003f3
 8002170:	fffffc0d 	.word	0xfffffc0d
 8002174:	45cb      	cmp	fp, r9
 8002176:	d200      	bcs.n	800217a <__aeabi_ddiv+0x23a>
 8002178:	e0f8      	b.n	800236c <__aeabi_ddiv+0x42c>
 800217a:	d100      	bne.n	800217e <__aeabi_ddiv+0x23e>
 800217c:	e0f3      	b.n	8002366 <__aeabi_ddiv+0x426>
 800217e:	2301      	movs	r3, #1
 8002180:	425b      	negs	r3, r3
 8002182:	469c      	mov	ip, r3
 8002184:	4644      	mov	r4, r8
 8002186:	4648      	mov	r0, r9
 8002188:	2500      	movs	r5, #0
 800218a:	44e2      	add	sl, ip
 800218c:	465b      	mov	r3, fp
 800218e:	0e17      	lsrs	r7, r2, #24
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	431f      	orrs	r7, r3
 8002194:	0c19      	lsrs	r1, r3, #16
 8002196:	043b      	lsls	r3, r7, #16
 8002198:	0212      	lsls	r2, r2, #8
 800219a:	9700      	str	r7, [sp, #0]
 800219c:	0c1f      	lsrs	r7, r3, #16
 800219e:	4691      	mov	r9, r2
 80021a0:	9102      	str	r1, [sp, #8]
 80021a2:	9703      	str	r7, [sp, #12]
 80021a4:	f7fe f848 	bl	8000238 <__aeabi_uidivmod>
 80021a8:	0002      	movs	r2, r0
 80021aa:	437a      	muls	r2, r7
 80021ac:	040b      	lsls	r3, r1, #16
 80021ae:	0c21      	lsrs	r1, r4, #16
 80021b0:	4680      	mov	r8, r0
 80021b2:	4319      	orrs	r1, r3
 80021b4:	428a      	cmp	r2, r1
 80021b6:	d909      	bls.n	80021cc <__aeabi_ddiv+0x28c>
 80021b8:	9f00      	ldr	r7, [sp, #0]
 80021ba:	2301      	movs	r3, #1
 80021bc:	46bc      	mov	ip, r7
 80021be:	425b      	negs	r3, r3
 80021c0:	4461      	add	r1, ip
 80021c2:	469c      	mov	ip, r3
 80021c4:	44e0      	add	r8, ip
 80021c6:	428f      	cmp	r7, r1
 80021c8:	d800      	bhi.n	80021cc <__aeabi_ddiv+0x28c>
 80021ca:	e15c      	b.n	8002486 <__aeabi_ddiv+0x546>
 80021cc:	1a88      	subs	r0, r1, r2
 80021ce:	9902      	ldr	r1, [sp, #8]
 80021d0:	f7fe f832 	bl	8000238 <__aeabi_uidivmod>
 80021d4:	9a03      	ldr	r2, [sp, #12]
 80021d6:	0424      	lsls	r4, r4, #16
 80021d8:	4342      	muls	r2, r0
 80021da:	0409      	lsls	r1, r1, #16
 80021dc:	0c24      	lsrs	r4, r4, #16
 80021de:	0003      	movs	r3, r0
 80021e0:	430c      	orrs	r4, r1
 80021e2:	42a2      	cmp	r2, r4
 80021e4:	d906      	bls.n	80021f4 <__aeabi_ddiv+0x2b4>
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	468c      	mov	ip, r1
 80021ec:	4464      	add	r4, ip
 80021ee:	42a1      	cmp	r1, r4
 80021f0:	d800      	bhi.n	80021f4 <__aeabi_ddiv+0x2b4>
 80021f2:	e142      	b.n	800247a <__aeabi_ddiv+0x53a>
 80021f4:	1aa0      	subs	r0, r4, r2
 80021f6:	4642      	mov	r2, r8
 80021f8:	0412      	lsls	r2, r2, #16
 80021fa:	431a      	orrs	r2, r3
 80021fc:	4693      	mov	fp, r2
 80021fe:	464b      	mov	r3, r9
 8002200:	4659      	mov	r1, fp
 8002202:	0c1b      	lsrs	r3, r3, #16
 8002204:	001f      	movs	r7, r3
 8002206:	9304      	str	r3, [sp, #16]
 8002208:	040b      	lsls	r3, r1, #16
 800220a:	4649      	mov	r1, r9
 800220c:	0409      	lsls	r1, r1, #16
 800220e:	0c09      	lsrs	r1, r1, #16
 8002210:	000c      	movs	r4, r1
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	435c      	muls	r4, r3
 8002216:	0c12      	lsrs	r2, r2, #16
 8002218:	437b      	muls	r3, r7
 800221a:	4688      	mov	r8, r1
 800221c:	4351      	muls	r1, r2
 800221e:	437a      	muls	r2, r7
 8002220:	0c27      	lsrs	r7, r4, #16
 8002222:	46bc      	mov	ip, r7
 8002224:	185b      	adds	r3, r3, r1
 8002226:	4463      	add	r3, ip
 8002228:	4299      	cmp	r1, r3
 800222a:	d903      	bls.n	8002234 <__aeabi_ddiv+0x2f4>
 800222c:	2180      	movs	r1, #128	@ 0x80
 800222e:	0249      	lsls	r1, r1, #9
 8002230:	468c      	mov	ip, r1
 8002232:	4462      	add	r2, ip
 8002234:	0c19      	lsrs	r1, r3, #16
 8002236:	0424      	lsls	r4, r4, #16
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	0c24      	lsrs	r4, r4, #16
 800223c:	188a      	adds	r2, r1, r2
 800223e:	191c      	adds	r4, r3, r4
 8002240:	4290      	cmp	r0, r2
 8002242:	d302      	bcc.n	800224a <__aeabi_ddiv+0x30a>
 8002244:	d116      	bne.n	8002274 <__aeabi_ddiv+0x334>
 8002246:	42a5      	cmp	r5, r4
 8002248:	d214      	bcs.n	8002274 <__aeabi_ddiv+0x334>
 800224a:	465b      	mov	r3, fp
 800224c:	9f00      	ldr	r7, [sp, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	444d      	add	r5, r9
 8002252:	9305      	str	r3, [sp, #20]
 8002254:	454d      	cmp	r5, r9
 8002256:	419b      	sbcs	r3, r3
 8002258:	46bc      	mov	ip, r7
 800225a:	425b      	negs	r3, r3
 800225c:	4463      	add	r3, ip
 800225e:	18c0      	adds	r0, r0, r3
 8002260:	4287      	cmp	r7, r0
 8002262:	d300      	bcc.n	8002266 <__aeabi_ddiv+0x326>
 8002264:	e102      	b.n	800246c <__aeabi_ddiv+0x52c>
 8002266:	4282      	cmp	r2, r0
 8002268:	d900      	bls.n	800226c <__aeabi_ddiv+0x32c>
 800226a:	e129      	b.n	80024c0 <__aeabi_ddiv+0x580>
 800226c:	d100      	bne.n	8002270 <__aeabi_ddiv+0x330>
 800226e:	e124      	b.n	80024ba <__aeabi_ddiv+0x57a>
 8002270:	9b05      	ldr	r3, [sp, #20]
 8002272:	469b      	mov	fp, r3
 8002274:	1b2c      	subs	r4, r5, r4
 8002276:	42a5      	cmp	r5, r4
 8002278:	41ad      	sbcs	r5, r5
 800227a:	9b00      	ldr	r3, [sp, #0]
 800227c:	1a80      	subs	r0, r0, r2
 800227e:	426d      	negs	r5, r5
 8002280:	1b40      	subs	r0, r0, r5
 8002282:	4283      	cmp	r3, r0
 8002284:	d100      	bne.n	8002288 <__aeabi_ddiv+0x348>
 8002286:	e10f      	b.n	80024a8 <__aeabi_ddiv+0x568>
 8002288:	9902      	ldr	r1, [sp, #8]
 800228a:	f7fd ffd5 	bl	8000238 <__aeabi_uidivmod>
 800228e:	9a03      	ldr	r2, [sp, #12]
 8002290:	040b      	lsls	r3, r1, #16
 8002292:	4342      	muls	r2, r0
 8002294:	0c21      	lsrs	r1, r4, #16
 8002296:	0005      	movs	r5, r0
 8002298:	4319      	orrs	r1, r3
 800229a:	428a      	cmp	r2, r1
 800229c:	d900      	bls.n	80022a0 <__aeabi_ddiv+0x360>
 800229e:	e0cb      	b.n	8002438 <__aeabi_ddiv+0x4f8>
 80022a0:	1a88      	subs	r0, r1, r2
 80022a2:	9902      	ldr	r1, [sp, #8]
 80022a4:	f7fd ffc8 	bl	8000238 <__aeabi_uidivmod>
 80022a8:	9a03      	ldr	r2, [sp, #12]
 80022aa:	0424      	lsls	r4, r4, #16
 80022ac:	4342      	muls	r2, r0
 80022ae:	0409      	lsls	r1, r1, #16
 80022b0:	0c24      	lsrs	r4, r4, #16
 80022b2:	0003      	movs	r3, r0
 80022b4:	430c      	orrs	r4, r1
 80022b6:	42a2      	cmp	r2, r4
 80022b8:	d900      	bls.n	80022bc <__aeabi_ddiv+0x37c>
 80022ba:	e0ca      	b.n	8002452 <__aeabi_ddiv+0x512>
 80022bc:	4641      	mov	r1, r8
 80022be:	1aa4      	subs	r4, r4, r2
 80022c0:	042a      	lsls	r2, r5, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	9f04      	ldr	r7, [sp, #16]
 80022c6:	0413      	lsls	r3, r2, #16
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	4359      	muls	r1, r3
 80022cc:	4640      	mov	r0, r8
 80022ce:	437b      	muls	r3, r7
 80022d0:	469c      	mov	ip, r3
 80022d2:	0c15      	lsrs	r5, r2, #16
 80022d4:	4368      	muls	r0, r5
 80022d6:	0c0b      	lsrs	r3, r1, #16
 80022d8:	4484      	add	ip, r0
 80022da:	4463      	add	r3, ip
 80022dc:	437d      	muls	r5, r7
 80022de:	4298      	cmp	r0, r3
 80022e0:	d903      	bls.n	80022ea <__aeabi_ddiv+0x3aa>
 80022e2:	2080      	movs	r0, #128	@ 0x80
 80022e4:	0240      	lsls	r0, r0, #9
 80022e6:	4684      	mov	ip, r0
 80022e8:	4465      	add	r5, ip
 80022ea:	0c18      	lsrs	r0, r3, #16
 80022ec:	0409      	lsls	r1, r1, #16
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	0c09      	lsrs	r1, r1, #16
 80022f2:	1940      	adds	r0, r0, r5
 80022f4:	185b      	adds	r3, r3, r1
 80022f6:	4284      	cmp	r4, r0
 80022f8:	d327      	bcc.n	800234a <__aeabi_ddiv+0x40a>
 80022fa:	d023      	beq.n	8002344 <__aeabi_ddiv+0x404>
 80022fc:	2301      	movs	r3, #1
 80022fe:	0035      	movs	r5, r6
 8002300:	431a      	orrs	r2, r3
 8002302:	4b94      	ldr	r3, [pc, #592]	@ (8002554 <__aeabi_ddiv+0x614>)
 8002304:	4453      	add	r3, sl
 8002306:	2b00      	cmp	r3, #0
 8002308:	dd60      	ble.n	80023cc <__aeabi_ddiv+0x48c>
 800230a:	0751      	lsls	r1, r2, #29
 800230c:	d000      	beq.n	8002310 <__aeabi_ddiv+0x3d0>
 800230e:	e086      	b.n	800241e <__aeabi_ddiv+0x4de>
 8002310:	002e      	movs	r6, r5
 8002312:	08d1      	lsrs	r1, r2, #3
 8002314:	465a      	mov	r2, fp
 8002316:	01d2      	lsls	r2, r2, #7
 8002318:	d506      	bpl.n	8002328 <__aeabi_ddiv+0x3e8>
 800231a:	465a      	mov	r2, fp
 800231c:	4b8e      	ldr	r3, [pc, #568]	@ (8002558 <__aeabi_ddiv+0x618>)
 800231e:	401a      	ands	r2, r3
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	4693      	mov	fp, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4453      	add	r3, sl
 8002328:	4a8c      	ldr	r2, [pc, #560]	@ (800255c <__aeabi_ddiv+0x61c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	dd00      	ble.n	8002330 <__aeabi_ddiv+0x3f0>
 800232e:	e680      	b.n	8002032 <__aeabi_ddiv+0xf2>
 8002330:	465a      	mov	r2, fp
 8002332:	0752      	lsls	r2, r2, #29
 8002334:	430a      	orrs	r2, r1
 8002336:	4690      	mov	r8, r2
 8002338:	465a      	mov	r2, fp
 800233a:	055b      	lsls	r3, r3, #21
 800233c:	0254      	lsls	r4, r2, #9
 800233e:	0b24      	lsrs	r4, r4, #12
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	e669      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002344:	0035      	movs	r5, r6
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0db      	beq.n	8002302 <__aeabi_ddiv+0x3c2>
 800234a:	9d00      	ldr	r5, [sp, #0]
 800234c:	1e51      	subs	r1, r2, #1
 800234e:	46ac      	mov	ip, r5
 8002350:	4464      	add	r4, ip
 8002352:	42ac      	cmp	r4, r5
 8002354:	d200      	bcs.n	8002358 <__aeabi_ddiv+0x418>
 8002356:	e09e      	b.n	8002496 <__aeabi_ddiv+0x556>
 8002358:	4284      	cmp	r4, r0
 800235a:	d200      	bcs.n	800235e <__aeabi_ddiv+0x41e>
 800235c:	e0e1      	b.n	8002522 <__aeabi_ddiv+0x5e2>
 800235e:	d100      	bne.n	8002362 <__aeabi_ddiv+0x422>
 8002360:	e0ee      	b.n	8002540 <__aeabi_ddiv+0x600>
 8002362:	000a      	movs	r2, r1
 8002364:	e7ca      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 8002366:	4542      	cmp	r2, r8
 8002368:	d900      	bls.n	800236c <__aeabi_ddiv+0x42c>
 800236a:	e708      	b.n	800217e <__aeabi_ddiv+0x23e>
 800236c:	464b      	mov	r3, r9
 800236e:	07dc      	lsls	r4, r3, #31
 8002370:	0858      	lsrs	r0, r3, #1
 8002372:	4643      	mov	r3, r8
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	431c      	orrs	r4, r3
 8002378:	4643      	mov	r3, r8
 800237a:	07dd      	lsls	r5, r3, #31
 800237c:	e706      	b.n	800218c <__aeabi_ddiv+0x24c>
 800237e:	f001 f9d3 	bl	8003728 <__clzsi2>
 8002382:	2315      	movs	r3, #21
 8002384:	469c      	mov	ip, r3
 8002386:	4484      	add	ip, r0
 8002388:	0002      	movs	r2, r0
 800238a:	4663      	mov	r3, ip
 800238c:	3220      	adds	r2, #32
 800238e:	2b1c      	cmp	r3, #28
 8002390:	dc00      	bgt.n	8002394 <__aeabi_ddiv+0x454>
 8002392:	e692      	b.n	80020ba <__aeabi_ddiv+0x17a>
 8002394:	0023      	movs	r3, r4
 8002396:	3808      	subs	r0, #8
 8002398:	4083      	lsls	r3, r0
 800239a:	4699      	mov	r9, r3
 800239c:	2300      	movs	r3, #0
 800239e:	4698      	mov	r8, r3
 80023a0:	e69a      	b.n	80020d8 <__aeabi_ddiv+0x198>
 80023a2:	f001 f9c1 	bl	8003728 <__clzsi2>
 80023a6:	0002      	movs	r2, r0
 80023a8:	0003      	movs	r3, r0
 80023aa:	3215      	adds	r2, #21
 80023ac:	3320      	adds	r3, #32
 80023ae:	2a1c      	cmp	r2, #28
 80023b0:	dc00      	bgt.n	80023b4 <__aeabi_ddiv+0x474>
 80023b2:	e65f      	b.n	8002074 <__aeabi_ddiv+0x134>
 80023b4:	9900      	ldr	r1, [sp, #0]
 80023b6:	3808      	subs	r0, #8
 80023b8:	4081      	lsls	r1, r0
 80023ba:	2200      	movs	r2, #0
 80023bc:	468b      	mov	fp, r1
 80023be:	e666      	b.n	800208e <__aeabi_ddiv+0x14e>
 80023c0:	2200      	movs	r2, #0
 80023c2:	002e      	movs	r6, r5
 80023c4:	2400      	movs	r4, #0
 80023c6:	4690      	mov	r8, r2
 80023c8:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <__aeabi_ddiv+0x620>)
 80023ca:	e625      	b.n	8002018 <__aeabi_ddiv+0xd8>
 80023cc:	002e      	movs	r6, r5
 80023ce:	2101      	movs	r1, #1
 80023d0:	1ac9      	subs	r1, r1, r3
 80023d2:	2938      	cmp	r1, #56	@ 0x38
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_ddiv+0x498>
 80023d6:	e61b      	b.n	8002010 <__aeabi_ddiv+0xd0>
 80023d8:	291f      	cmp	r1, #31
 80023da:	dc7e      	bgt.n	80024da <__aeabi_ddiv+0x59a>
 80023dc:	4861      	ldr	r0, [pc, #388]	@ (8002564 <__aeabi_ddiv+0x624>)
 80023de:	0014      	movs	r4, r2
 80023e0:	4450      	add	r0, sl
 80023e2:	465b      	mov	r3, fp
 80023e4:	4082      	lsls	r2, r0
 80023e6:	4083      	lsls	r3, r0
 80023e8:	40cc      	lsrs	r4, r1
 80023ea:	1e50      	subs	r0, r2, #1
 80023ec:	4182      	sbcs	r2, r0
 80023ee:	4323      	orrs	r3, r4
 80023f0:	431a      	orrs	r2, r3
 80023f2:	465b      	mov	r3, fp
 80023f4:	40cb      	lsrs	r3, r1
 80023f6:	0751      	lsls	r1, r2, #29
 80023f8:	d009      	beq.n	800240e <__aeabi_ddiv+0x4ce>
 80023fa:	210f      	movs	r1, #15
 80023fc:	4011      	ands	r1, r2
 80023fe:	2904      	cmp	r1, #4
 8002400:	d005      	beq.n	800240e <__aeabi_ddiv+0x4ce>
 8002402:	1d11      	adds	r1, r2, #4
 8002404:	4291      	cmp	r1, r2
 8002406:	4192      	sbcs	r2, r2
 8002408:	4252      	negs	r2, r2
 800240a:	189b      	adds	r3, r3, r2
 800240c:	000a      	movs	r2, r1
 800240e:	0219      	lsls	r1, r3, #8
 8002410:	d400      	bmi.n	8002414 <__aeabi_ddiv+0x4d4>
 8002412:	e09b      	b.n	800254c <__aeabi_ddiv+0x60c>
 8002414:	2200      	movs	r2, #0
 8002416:	2301      	movs	r3, #1
 8002418:	2400      	movs	r4, #0
 800241a:	4690      	mov	r8, r2
 800241c:	e5fc      	b.n	8002018 <__aeabi_ddiv+0xd8>
 800241e:	210f      	movs	r1, #15
 8002420:	4011      	ands	r1, r2
 8002422:	2904      	cmp	r1, #4
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x4e8>
 8002426:	e773      	b.n	8002310 <__aeabi_ddiv+0x3d0>
 8002428:	1d11      	adds	r1, r2, #4
 800242a:	4291      	cmp	r1, r2
 800242c:	4192      	sbcs	r2, r2
 800242e:	4252      	negs	r2, r2
 8002430:	002e      	movs	r6, r5
 8002432:	08c9      	lsrs	r1, r1, #3
 8002434:	4493      	add	fp, r2
 8002436:	e76d      	b.n	8002314 <__aeabi_ddiv+0x3d4>
 8002438:	9b00      	ldr	r3, [sp, #0]
 800243a:	3d01      	subs	r5, #1
 800243c:	469c      	mov	ip, r3
 800243e:	4461      	add	r1, ip
 8002440:	428b      	cmp	r3, r1
 8002442:	d900      	bls.n	8002446 <__aeabi_ddiv+0x506>
 8002444:	e72c      	b.n	80022a0 <__aeabi_ddiv+0x360>
 8002446:	428a      	cmp	r2, r1
 8002448:	d800      	bhi.n	800244c <__aeabi_ddiv+0x50c>
 800244a:	e729      	b.n	80022a0 <__aeabi_ddiv+0x360>
 800244c:	1e85      	subs	r5, r0, #2
 800244e:	4461      	add	r1, ip
 8002450:	e726      	b.n	80022a0 <__aeabi_ddiv+0x360>
 8002452:	9900      	ldr	r1, [sp, #0]
 8002454:	3b01      	subs	r3, #1
 8002456:	468c      	mov	ip, r1
 8002458:	4464      	add	r4, ip
 800245a:	42a1      	cmp	r1, r4
 800245c:	d900      	bls.n	8002460 <__aeabi_ddiv+0x520>
 800245e:	e72d      	b.n	80022bc <__aeabi_ddiv+0x37c>
 8002460:	42a2      	cmp	r2, r4
 8002462:	d800      	bhi.n	8002466 <__aeabi_ddiv+0x526>
 8002464:	e72a      	b.n	80022bc <__aeabi_ddiv+0x37c>
 8002466:	1e83      	subs	r3, r0, #2
 8002468:	4464      	add	r4, ip
 800246a:	e727      	b.n	80022bc <__aeabi_ddiv+0x37c>
 800246c:	4287      	cmp	r7, r0
 800246e:	d000      	beq.n	8002472 <__aeabi_ddiv+0x532>
 8002470:	e6fe      	b.n	8002270 <__aeabi_ddiv+0x330>
 8002472:	45a9      	cmp	r9, r5
 8002474:	d900      	bls.n	8002478 <__aeabi_ddiv+0x538>
 8002476:	e6fb      	b.n	8002270 <__aeabi_ddiv+0x330>
 8002478:	e6f5      	b.n	8002266 <__aeabi_ddiv+0x326>
 800247a:	42a2      	cmp	r2, r4
 800247c:	d800      	bhi.n	8002480 <__aeabi_ddiv+0x540>
 800247e:	e6b9      	b.n	80021f4 <__aeabi_ddiv+0x2b4>
 8002480:	1e83      	subs	r3, r0, #2
 8002482:	4464      	add	r4, ip
 8002484:	e6b6      	b.n	80021f4 <__aeabi_ddiv+0x2b4>
 8002486:	428a      	cmp	r2, r1
 8002488:	d800      	bhi.n	800248c <__aeabi_ddiv+0x54c>
 800248a:	e69f      	b.n	80021cc <__aeabi_ddiv+0x28c>
 800248c:	46bc      	mov	ip, r7
 800248e:	1e83      	subs	r3, r0, #2
 8002490:	4698      	mov	r8, r3
 8002492:	4461      	add	r1, ip
 8002494:	e69a      	b.n	80021cc <__aeabi_ddiv+0x28c>
 8002496:	000a      	movs	r2, r1
 8002498:	4284      	cmp	r4, r0
 800249a:	d000      	beq.n	800249e <__aeabi_ddiv+0x55e>
 800249c:	e72e      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 800249e:	454b      	cmp	r3, r9
 80024a0:	d000      	beq.n	80024a4 <__aeabi_ddiv+0x564>
 80024a2:	e72b      	b.n	80022fc <__aeabi_ddiv+0x3bc>
 80024a4:	0035      	movs	r5, r6
 80024a6:	e72c      	b.n	8002302 <__aeabi_ddiv+0x3c2>
 80024a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002554 <__aeabi_ddiv+0x614>)
 80024aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002568 <__aeabi_ddiv+0x628>)
 80024ac:	4453      	add	r3, sl
 80024ae:	4592      	cmp	sl, r2
 80024b0:	db43      	blt.n	800253a <__aeabi_ddiv+0x5fa>
 80024b2:	2201      	movs	r2, #1
 80024b4:	2100      	movs	r1, #0
 80024b6:	4493      	add	fp, r2
 80024b8:	e72c      	b.n	8002314 <__aeabi_ddiv+0x3d4>
 80024ba:	42ac      	cmp	r4, r5
 80024bc:	d800      	bhi.n	80024c0 <__aeabi_ddiv+0x580>
 80024be:	e6d7      	b.n	8002270 <__aeabi_ddiv+0x330>
 80024c0:	2302      	movs	r3, #2
 80024c2:	425b      	negs	r3, r3
 80024c4:	469c      	mov	ip, r3
 80024c6:	9900      	ldr	r1, [sp, #0]
 80024c8:	444d      	add	r5, r9
 80024ca:	454d      	cmp	r5, r9
 80024cc:	419b      	sbcs	r3, r3
 80024ce:	44e3      	add	fp, ip
 80024d0:	468c      	mov	ip, r1
 80024d2:	425b      	negs	r3, r3
 80024d4:	4463      	add	r3, ip
 80024d6:	18c0      	adds	r0, r0, r3
 80024d8:	e6cc      	b.n	8002274 <__aeabi_ddiv+0x334>
 80024da:	201f      	movs	r0, #31
 80024dc:	4240      	negs	r0, r0
 80024de:	1ac3      	subs	r3, r0, r3
 80024e0:	4658      	mov	r0, fp
 80024e2:	40d8      	lsrs	r0, r3
 80024e4:	2920      	cmp	r1, #32
 80024e6:	d004      	beq.n	80024f2 <__aeabi_ddiv+0x5b2>
 80024e8:	4659      	mov	r1, fp
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <__aeabi_ddiv+0x62c>)
 80024ec:	4453      	add	r3, sl
 80024ee:	4099      	lsls	r1, r3
 80024f0:	430a      	orrs	r2, r1
 80024f2:	1e53      	subs	r3, r2, #1
 80024f4:	419a      	sbcs	r2, r3
 80024f6:	2307      	movs	r3, #7
 80024f8:	0019      	movs	r1, r3
 80024fa:	4302      	orrs	r2, r0
 80024fc:	2400      	movs	r4, #0
 80024fe:	4011      	ands	r1, r2
 8002500:	4213      	tst	r3, r2
 8002502:	d009      	beq.n	8002518 <__aeabi_ddiv+0x5d8>
 8002504:	3308      	adds	r3, #8
 8002506:	4013      	ands	r3, r2
 8002508:	2b04      	cmp	r3, #4
 800250a:	d01d      	beq.n	8002548 <__aeabi_ddiv+0x608>
 800250c:	1d13      	adds	r3, r2, #4
 800250e:	4293      	cmp	r3, r2
 8002510:	4189      	sbcs	r1, r1
 8002512:	001a      	movs	r2, r3
 8002514:	4249      	negs	r1, r1
 8002516:	0749      	lsls	r1, r1, #29
 8002518:	08d2      	lsrs	r2, r2, #3
 800251a:	430a      	orrs	r2, r1
 800251c:	4690      	mov	r8, r2
 800251e:	2300      	movs	r3, #0
 8002520:	e57a      	b.n	8002018 <__aeabi_ddiv+0xd8>
 8002522:	4649      	mov	r1, r9
 8002524:	9f00      	ldr	r7, [sp, #0]
 8002526:	004d      	lsls	r5, r1, #1
 8002528:	454d      	cmp	r5, r9
 800252a:	4189      	sbcs	r1, r1
 800252c:	46bc      	mov	ip, r7
 800252e:	4249      	negs	r1, r1
 8002530:	4461      	add	r1, ip
 8002532:	46a9      	mov	r9, r5
 8002534:	3a02      	subs	r2, #2
 8002536:	1864      	adds	r4, r4, r1
 8002538:	e7ae      	b.n	8002498 <__aeabi_ddiv+0x558>
 800253a:	2201      	movs	r2, #1
 800253c:	4252      	negs	r2, r2
 800253e:	e746      	b.n	80023ce <__aeabi_ddiv+0x48e>
 8002540:	4599      	cmp	r9, r3
 8002542:	d3ee      	bcc.n	8002522 <__aeabi_ddiv+0x5e2>
 8002544:	000a      	movs	r2, r1
 8002546:	e7aa      	b.n	800249e <__aeabi_ddiv+0x55e>
 8002548:	2100      	movs	r1, #0
 800254a:	e7e5      	b.n	8002518 <__aeabi_ddiv+0x5d8>
 800254c:	0759      	lsls	r1, r3, #29
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	0b1c      	lsrs	r4, r3, #12
 8002552:	e7e1      	b.n	8002518 <__aeabi_ddiv+0x5d8>
 8002554:	000003ff 	.word	0x000003ff
 8002558:	feffffff 	.word	0xfeffffff
 800255c:	000007fe 	.word	0x000007fe
 8002560:	000007ff 	.word	0x000007ff
 8002564:	0000041e 	.word	0x0000041e
 8002568:	fffffc02 	.word	0xfffffc02
 800256c:	0000043e 	.word	0x0000043e

08002570 <__eqdf2>:
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	4657      	mov	r7, sl
 8002574:	46de      	mov	lr, fp
 8002576:	464e      	mov	r6, r9
 8002578:	4645      	mov	r5, r8
 800257a:	b5e0      	push	{r5, r6, r7, lr}
 800257c:	000d      	movs	r5, r1
 800257e:	0004      	movs	r4, r0
 8002580:	0fe8      	lsrs	r0, r5, #31
 8002582:	4683      	mov	fp, r0
 8002584:	0309      	lsls	r1, r1, #12
 8002586:	0fd8      	lsrs	r0, r3, #31
 8002588:	0b09      	lsrs	r1, r1, #12
 800258a:	4682      	mov	sl, r0
 800258c:	4819      	ldr	r0, [pc, #100]	@ (80025f4 <__eqdf2+0x84>)
 800258e:	468c      	mov	ip, r1
 8002590:	031f      	lsls	r7, r3, #12
 8002592:	0069      	lsls	r1, r5, #1
 8002594:	005e      	lsls	r6, r3, #1
 8002596:	0d49      	lsrs	r1, r1, #21
 8002598:	0b3f      	lsrs	r7, r7, #12
 800259a:	0d76      	lsrs	r6, r6, #21
 800259c:	4281      	cmp	r1, r0
 800259e:	d018      	beq.n	80025d2 <__eqdf2+0x62>
 80025a0:	4286      	cmp	r6, r0
 80025a2:	d00f      	beq.n	80025c4 <__eqdf2+0x54>
 80025a4:	2001      	movs	r0, #1
 80025a6:	42b1      	cmp	r1, r6
 80025a8:	d10d      	bne.n	80025c6 <__eqdf2+0x56>
 80025aa:	45bc      	cmp	ip, r7
 80025ac:	d10b      	bne.n	80025c6 <__eqdf2+0x56>
 80025ae:	4294      	cmp	r4, r2
 80025b0:	d109      	bne.n	80025c6 <__eqdf2+0x56>
 80025b2:	45d3      	cmp	fp, sl
 80025b4:	d01c      	beq.n	80025f0 <__eqdf2+0x80>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d105      	bne.n	80025c6 <__eqdf2+0x56>
 80025ba:	4660      	mov	r0, ip
 80025bc:	4320      	orrs	r0, r4
 80025be:	1e43      	subs	r3, r0, #1
 80025c0:	4198      	sbcs	r0, r3
 80025c2:	e000      	b.n	80025c6 <__eqdf2+0x56>
 80025c4:	2001      	movs	r0, #1
 80025c6:	bcf0      	pop	{r4, r5, r6, r7}
 80025c8:	46bb      	mov	fp, r7
 80025ca:	46b2      	mov	sl, r6
 80025cc:	46a9      	mov	r9, r5
 80025ce:	46a0      	mov	r8, r4
 80025d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d2:	2001      	movs	r0, #1
 80025d4:	428e      	cmp	r6, r1
 80025d6:	d1f6      	bne.n	80025c6 <__eqdf2+0x56>
 80025d8:	4661      	mov	r1, ip
 80025da:	4339      	orrs	r1, r7
 80025dc:	000f      	movs	r7, r1
 80025de:	4317      	orrs	r7, r2
 80025e0:	4327      	orrs	r7, r4
 80025e2:	d1f0      	bne.n	80025c6 <__eqdf2+0x56>
 80025e4:	465b      	mov	r3, fp
 80025e6:	4652      	mov	r2, sl
 80025e8:	1a98      	subs	r0, r3, r2
 80025ea:	1e43      	subs	r3, r0, #1
 80025ec:	4198      	sbcs	r0, r3
 80025ee:	e7ea      	b.n	80025c6 <__eqdf2+0x56>
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7e8      	b.n	80025c6 <__eqdf2+0x56>
 80025f4:	000007ff 	.word	0x000007ff

080025f8 <__gedf2>:
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	4657      	mov	r7, sl
 80025fc:	464e      	mov	r6, r9
 80025fe:	4645      	mov	r5, r8
 8002600:	46de      	mov	lr, fp
 8002602:	b5e0      	push	{r5, r6, r7, lr}
 8002604:	000d      	movs	r5, r1
 8002606:	030e      	lsls	r6, r1, #12
 8002608:	0049      	lsls	r1, r1, #1
 800260a:	0d49      	lsrs	r1, r1, #21
 800260c:	468a      	mov	sl, r1
 800260e:	0fdf      	lsrs	r7, r3, #31
 8002610:	0fe9      	lsrs	r1, r5, #31
 8002612:	46bc      	mov	ip, r7
 8002614:	b083      	sub	sp, #12
 8002616:	4f2f      	ldr	r7, [pc, #188]	@ (80026d4 <__gedf2+0xdc>)
 8002618:	0004      	movs	r4, r0
 800261a:	4680      	mov	r8, r0
 800261c:	9101      	str	r1, [sp, #4]
 800261e:	0058      	lsls	r0, r3, #1
 8002620:	0319      	lsls	r1, r3, #12
 8002622:	4691      	mov	r9, r2
 8002624:	0b36      	lsrs	r6, r6, #12
 8002626:	0b09      	lsrs	r1, r1, #12
 8002628:	0d40      	lsrs	r0, r0, #21
 800262a:	45ba      	cmp	sl, r7
 800262c:	d01d      	beq.n	800266a <__gedf2+0x72>
 800262e:	42b8      	cmp	r0, r7
 8002630:	d00d      	beq.n	800264e <__gedf2+0x56>
 8002632:	4657      	mov	r7, sl
 8002634:	2f00      	cmp	r7, #0
 8002636:	d12a      	bne.n	800268e <__gedf2+0x96>
 8002638:	4334      	orrs	r4, r6
 800263a:	2800      	cmp	r0, #0
 800263c:	d124      	bne.n	8002688 <__gedf2+0x90>
 800263e:	430a      	orrs	r2, r1
 8002640:	d036      	beq.n	80026b0 <__gedf2+0xb8>
 8002642:	2c00      	cmp	r4, #0
 8002644:	d141      	bne.n	80026ca <__gedf2+0xd2>
 8002646:	4663      	mov	r3, ip
 8002648:	0058      	lsls	r0, r3, #1
 800264a:	3801      	subs	r0, #1
 800264c:	e015      	b.n	800267a <__gedf2+0x82>
 800264e:	4311      	orrs	r1, r2
 8002650:	d138      	bne.n	80026c4 <__gedf2+0xcc>
 8002652:	4653      	mov	r3, sl
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <__gedf2+0x64>
 8002658:	4326      	orrs	r6, r4
 800265a:	d0f4      	beq.n	8002646 <__gedf2+0x4e>
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	4563      	cmp	r3, ip
 8002660:	d107      	bne.n	8002672 <__gedf2+0x7a>
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	0058      	lsls	r0, r3, #1
 8002666:	3801      	subs	r0, #1
 8002668:	e007      	b.n	800267a <__gedf2+0x82>
 800266a:	4326      	orrs	r6, r4
 800266c:	d12a      	bne.n	80026c4 <__gedf2+0xcc>
 800266e:	4550      	cmp	r0, sl
 8002670:	d021      	beq.n	80026b6 <__gedf2+0xbe>
 8002672:	2001      	movs	r0, #1
 8002674:	9b01      	ldr	r3, [sp, #4]
 8002676:	425f      	negs	r7, r3
 8002678:	4338      	orrs	r0, r7
 800267a:	b003      	add	sp, #12
 800267c:	bcf0      	pop	{r4, r5, r6, r7}
 800267e:	46bb      	mov	fp, r7
 8002680:	46b2      	mov	sl, r6
 8002682:	46a9      	mov	r9, r5
 8002684:	46a0      	mov	r8, r4
 8002686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002688:	2c00      	cmp	r4, #0
 800268a:	d0dc      	beq.n	8002646 <__gedf2+0x4e>
 800268c:	e7e6      	b.n	800265c <__gedf2+0x64>
 800268e:	2800      	cmp	r0, #0
 8002690:	d0ef      	beq.n	8002672 <__gedf2+0x7a>
 8002692:	9b01      	ldr	r3, [sp, #4]
 8002694:	4563      	cmp	r3, ip
 8002696:	d1ec      	bne.n	8002672 <__gedf2+0x7a>
 8002698:	4582      	cmp	sl, r0
 800269a:	dcea      	bgt.n	8002672 <__gedf2+0x7a>
 800269c:	dbe1      	blt.n	8002662 <__gedf2+0x6a>
 800269e:	428e      	cmp	r6, r1
 80026a0:	d8e7      	bhi.n	8002672 <__gedf2+0x7a>
 80026a2:	d1de      	bne.n	8002662 <__gedf2+0x6a>
 80026a4:	45c8      	cmp	r8, r9
 80026a6:	d8e4      	bhi.n	8002672 <__gedf2+0x7a>
 80026a8:	2000      	movs	r0, #0
 80026aa:	45c8      	cmp	r8, r9
 80026ac:	d2e5      	bcs.n	800267a <__gedf2+0x82>
 80026ae:	e7d8      	b.n	8002662 <__gedf2+0x6a>
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	d0e2      	beq.n	800267a <__gedf2+0x82>
 80026b4:	e7dd      	b.n	8002672 <__gedf2+0x7a>
 80026b6:	4311      	orrs	r1, r2
 80026b8:	d104      	bne.n	80026c4 <__gedf2+0xcc>
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	4563      	cmp	r3, ip
 80026be:	d1d8      	bne.n	8002672 <__gedf2+0x7a>
 80026c0:	2000      	movs	r0, #0
 80026c2:	e7da      	b.n	800267a <__gedf2+0x82>
 80026c4:	2002      	movs	r0, #2
 80026c6:	4240      	negs	r0, r0
 80026c8:	e7d7      	b.n	800267a <__gedf2+0x82>
 80026ca:	9b01      	ldr	r3, [sp, #4]
 80026cc:	4563      	cmp	r3, ip
 80026ce:	d0e6      	beq.n	800269e <__gedf2+0xa6>
 80026d0:	e7cf      	b.n	8002672 <__gedf2+0x7a>
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	000007ff 	.word	0x000007ff

080026d8 <__ledf2>:
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	4657      	mov	r7, sl
 80026dc:	464e      	mov	r6, r9
 80026de:	4645      	mov	r5, r8
 80026e0:	46de      	mov	lr, fp
 80026e2:	b5e0      	push	{r5, r6, r7, lr}
 80026e4:	000d      	movs	r5, r1
 80026e6:	030e      	lsls	r6, r1, #12
 80026e8:	0049      	lsls	r1, r1, #1
 80026ea:	0d49      	lsrs	r1, r1, #21
 80026ec:	468a      	mov	sl, r1
 80026ee:	0fdf      	lsrs	r7, r3, #31
 80026f0:	0fe9      	lsrs	r1, r5, #31
 80026f2:	46bc      	mov	ip, r7
 80026f4:	b083      	sub	sp, #12
 80026f6:	4f2e      	ldr	r7, [pc, #184]	@ (80027b0 <__ledf2+0xd8>)
 80026f8:	0004      	movs	r4, r0
 80026fa:	4680      	mov	r8, r0
 80026fc:	9101      	str	r1, [sp, #4]
 80026fe:	0058      	lsls	r0, r3, #1
 8002700:	0319      	lsls	r1, r3, #12
 8002702:	4691      	mov	r9, r2
 8002704:	0b36      	lsrs	r6, r6, #12
 8002706:	0b09      	lsrs	r1, r1, #12
 8002708:	0d40      	lsrs	r0, r0, #21
 800270a:	45ba      	cmp	sl, r7
 800270c:	d01e      	beq.n	800274c <__ledf2+0x74>
 800270e:	42b8      	cmp	r0, r7
 8002710:	d00d      	beq.n	800272e <__ledf2+0x56>
 8002712:	4657      	mov	r7, sl
 8002714:	2f00      	cmp	r7, #0
 8002716:	d127      	bne.n	8002768 <__ledf2+0x90>
 8002718:	4334      	orrs	r4, r6
 800271a:	2800      	cmp	r0, #0
 800271c:	d133      	bne.n	8002786 <__ledf2+0xae>
 800271e:	430a      	orrs	r2, r1
 8002720:	d034      	beq.n	800278c <__ledf2+0xb4>
 8002722:	2c00      	cmp	r4, #0
 8002724:	d140      	bne.n	80027a8 <__ledf2+0xd0>
 8002726:	4663      	mov	r3, ip
 8002728:	0058      	lsls	r0, r3, #1
 800272a:	3801      	subs	r0, #1
 800272c:	e015      	b.n	800275a <__ledf2+0x82>
 800272e:	4311      	orrs	r1, r2
 8002730:	d112      	bne.n	8002758 <__ledf2+0x80>
 8002732:	4653      	mov	r3, sl
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <__ledf2+0x64>
 8002738:	4326      	orrs	r6, r4
 800273a:	d0f4      	beq.n	8002726 <__ledf2+0x4e>
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	4563      	cmp	r3, ip
 8002740:	d01d      	beq.n	800277e <__ledf2+0xa6>
 8002742:	2001      	movs	r0, #1
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	425f      	negs	r7, r3
 8002748:	4338      	orrs	r0, r7
 800274a:	e006      	b.n	800275a <__ledf2+0x82>
 800274c:	4326      	orrs	r6, r4
 800274e:	d103      	bne.n	8002758 <__ledf2+0x80>
 8002750:	4550      	cmp	r0, sl
 8002752:	d1f6      	bne.n	8002742 <__ledf2+0x6a>
 8002754:	4311      	orrs	r1, r2
 8002756:	d01c      	beq.n	8002792 <__ledf2+0xba>
 8002758:	2002      	movs	r0, #2
 800275a:	b003      	add	sp, #12
 800275c:	bcf0      	pop	{r4, r5, r6, r7}
 800275e:	46bb      	mov	fp, r7
 8002760:	46b2      	mov	sl, r6
 8002762:	46a9      	mov	r9, r5
 8002764:	46a0      	mov	r8, r4
 8002766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002768:	2800      	cmp	r0, #0
 800276a:	d0ea      	beq.n	8002742 <__ledf2+0x6a>
 800276c:	9b01      	ldr	r3, [sp, #4]
 800276e:	4563      	cmp	r3, ip
 8002770:	d1e7      	bne.n	8002742 <__ledf2+0x6a>
 8002772:	4582      	cmp	sl, r0
 8002774:	dce5      	bgt.n	8002742 <__ledf2+0x6a>
 8002776:	db02      	blt.n	800277e <__ledf2+0xa6>
 8002778:	428e      	cmp	r6, r1
 800277a:	d8e2      	bhi.n	8002742 <__ledf2+0x6a>
 800277c:	d00e      	beq.n	800279c <__ledf2+0xc4>
 800277e:	9b01      	ldr	r3, [sp, #4]
 8002780:	0058      	lsls	r0, r3, #1
 8002782:	3801      	subs	r0, #1
 8002784:	e7e9      	b.n	800275a <__ledf2+0x82>
 8002786:	2c00      	cmp	r4, #0
 8002788:	d0cd      	beq.n	8002726 <__ledf2+0x4e>
 800278a:	e7d7      	b.n	800273c <__ledf2+0x64>
 800278c:	2c00      	cmp	r4, #0
 800278e:	d0e4      	beq.n	800275a <__ledf2+0x82>
 8002790:	e7d7      	b.n	8002742 <__ledf2+0x6a>
 8002792:	9b01      	ldr	r3, [sp, #4]
 8002794:	2000      	movs	r0, #0
 8002796:	4563      	cmp	r3, ip
 8002798:	d0df      	beq.n	800275a <__ledf2+0x82>
 800279a:	e7d2      	b.n	8002742 <__ledf2+0x6a>
 800279c:	45c8      	cmp	r8, r9
 800279e:	d8d0      	bhi.n	8002742 <__ledf2+0x6a>
 80027a0:	2000      	movs	r0, #0
 80027a2:	45c8      	cmp	r8, r9
 80027a4:	d2d9      	bcs.n	800275a <__ledf2+0x82>
 80027a6:	e7ea      	b.n	800277e <__ledf2+0xa6>
 80027a8:	9b01      	ldr	r3, [sp, #4]
 80027aa:	4563      	cmp	r3, ip
 80027ac:	d0e4      	beq.n	8002778 <__ledf2+0xa0>
 80027ae:	e7c8      	b.n	8002742 <__ledf2+0x6a>
 80027b0:	000007ff 	.word	0x000007ff

080027b4 <__aeabi_dmul>:
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	4657      	mov	r7, sl
 80027b8:	464e      	mov	r6, r9
 80027ba:	46de      	mov	lr, fp
 80027bc:	4645      	mov	r5, r8
 80027be:	b5e0      	push	{r5, r6, r7, lr}
 80027c0:	001f      	movs	r7, r3
 80027c2:	030b      	lsls	r3, r1, #12
 80027c4:	0b1b      	lsrs	r3, r3, #12
 80027c6:	0016      	movs	r6, r2
 80027c8:	469a      	mov	sl, r3
 80027ca:	0fca      	lsrs	r2, r1, #31
 80027cc:	004b      	lsls	r3, r1, #1
 80027ce:	0004      	movs	r4, r0
 80027d0:	4691      	mov	r9, r2
 80027d2:	b085      	sub	sp, #20
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	d100      	bne.n	80027da <__aeabi_dmul+0x26>
 80027d8:	e1cf      	b.n	8002b7a <__aeabi_dmul+0x3c6>
 80027da:	4acd      	ldr	r2, [pc, #820]	@ (8002b10 <__aeabi_dmul+0x35c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d055      	beq.n	800288c <__aeabi_dmul+0xd8>
 80027e0:	4651      	mov	r1, sl
 80027e2:	0f42      	lsrs	r2, r0, #29
 80027e4:	00c9      	lsls	r1, r1, #3
 80027e6:	430a      	orrs	r2, r1
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	0409      	lsls	r1, r1, #16
 80027ec:	4311      	orrs	r1, r2
 80027ee:	00c2      	lsls	r2, r0, #3
 80027f0:	4690      	mov	r8, r2
 80027f2:	4ac8      	ldr	r2, [pc, #800]	@ (8002b14 <__aeabi_dmul+0x360>)
 80027f4:	468a      	mov	sl, r1
 80027f6:	4693      	mov	fp, r2
 80027f8:	449b      	add	fp, r3
 80027fa:	2300      	movs	r3, #0
 80027fc:	2500      	movs	r5, #0
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	033c      	lsls	r4, r7, #12
 8002802:	007b      	lsls	r3, r7, #1
 8002804:	0ffa      	lsrs	r2, r7, #31
 8002806:	9601      	str	r6, [sp, #4]
 8002808:	0b24      	lsrs	r4, r4, #12
 800280a:	0d5b      	lsrs	r3, r3, #21
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	d100      	bne.n	8002812 <__aeabi_dmul+0x5e>
 8002810:	e188      	b.n	8002b24 <__aeabi_dmul+0x370>
 8002812:	4abf      	ldr	r2, [pc, #764]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <__aeabi_dmul+0x66>
 8002818:	e092      	b.n	8002940 <__aeabi_dmul+0x18c>
 800281a:	4abe      	ldr	r2, [pc, #760]	@ (8002b14 <__aeabi_dmul+0x360>)
 800281c:	4694      	mov	ip, r2
 800281e:	4463      	add	r3, ip
 8002820:	449b      	add	fp, r3
 8002822:	2d0a      	cmp	r5, #10
 8002824:	dc42      	bgt.n	80028ac <__aeabi_dmul+0xf8>
 8002826:	00e4      	lsls	r4, r4, #3
 8002828:	0f73      	lsrs	r3, r6, #29
 800282a:	4323      	orrs	r3, r4
 800282c:	2480      	movs	r4, #128	@ 0x80
 800282e:	4649      	mov	r1, r9
 8002830:	0424      	lsls	r4, r4, #16
 8002832:	431c      	orrs	r4, r3
 8002834:	00f3      	lsls	r3, r6, #3
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	9b00      	ldr	r3, [sp, #0]
 800283a:	2000      	movs	r0, #0
 800283c:	4059      	eors	r1, r3
 800283e:	b2cb      	uxtb	r3, r1
 8002840:	9303      	str	r3, [sp, #12]
 8002842:	2d02      	cmp	r5, #2
 8002844:	dc00      	bgt.n	8002848 <__aeabi_dmul+0x94>
 8002846:	e094      	b.n	8002972 <__aeabi_dmul+0x1be>
 8002848:	2301      	movs	r3, #1
 800284a:	40ab      	lsls	r3, r5
 800284c:	001d      	movs	r5, r3
 800284e:	23a6      	movs	r3, #166	@ 0xa6
 8002850:	002a      	movs	r2, r5
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	401a      	ands	r2, r3
 8002856:	421d      	tst	r5, r3
 8002858:	d000      	beq.n	800285c <__aeabi_dmul+0xa8>
 800285a:	e229      	b.n	8002cb0 <__aeabi_dmul+0x4fc>
 800285c:	2390      	movs	r3, #144	@ 0x90
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	421d      	tst	r5, r3
 8002862:	d100      	bne.n	8002866 <__aeabi_dmul+0xb2>
 8002864:	e24d      	b.n	8002d02 <__aeabi_dmul+0x54e>
 8002866:	2300      	movs	r3, #0
 8002868:	2480      	movs	r4, #128	@ 0x80
 800286a:	4699      	mov	r9, r3
 800286c:	0324      	lsls	r4, r4, #12
 800286e:	4ba8      	ldr	r3, [pc, #672]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002870:	0010      	movs	r0, r2
 8002872:	464a      	mov	r2, r9
 8002874:	051b      	lsls	r3, r3, #20
 8002876:	4323      	orrs	r3, r4
 8002878:	07d2      	lsls	r2, r2, #31
 800287a:	4313      	orrs	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	b005      	add	sp, #20
 8002880:	bcf0      	pop	{r4, r5, r6, r7}
 8002882:	46bb      	mov	fp, r7
 8002884:	46b2      	mov	sl, r6
 8002886:	46a9      	mov	r9, r5
 8002888:	46a0      	mov	r8, r4
 800288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288c:	4652      	mov	r2, sl
 800288e:	4302      	orrs	r2, r0
 8002890:	4690      	mov	r8, r2
 8002892:	d000      	beq.n	8002896 <__aeabi_dmul+0xe2>
 8002894:	e1ac      	b.n	8002bf0 <__aeabi_dmul+0x43c>
 8002896:	469b      	mov	fp, r3
 8002898:	2302      	movs	r3, #2
 800289a:	4692      	mov	sl, r2
 800289c:	2508      	movs	r5, #8
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	e7ae      	b.n	8002800 <__aeabi_dmul+0x4c>
 80028a2:	9b00      	ldr	r3, [sp, #0]
 80028a4:	46a2      	mov	sl, r4
 80028a6:	4699      	mov	r9, r3
 80028a8:	9b01      	ldr	r3, [sp, #4]
 80028aa:	4698      	mov	r8, r3
 80028ac:	9b02      	ldr	r3, [sp, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d100      	bne.n	80028b4 <__aeabi_dmul+0x100>
 80028b2:	e1ca      	b.n	8002c4a <__aeabi_dmul+0x496>
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d100      	bne.n	80028ba <__aeabi_dmul+0x106>
 80028b8:	e192      	b.n	8002be0 <__aeabi_dmul+0x42c>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d110      	bne.n	80028e0 <__aeabi_dmul+0x12c>
 80028be:	2300      	movs	r3, #0
 80028c0:	2400      	movs	r4, #0
 80028c2:	2200      	movs	r2, #0
 80028c4:	e7d4      	b.n	8002870 <__aeabi_dmul+0xbc>
 80028c6:	2201      	movs	r2, #1
 80028c8:	087b      	lsrs	r3, r7, #1
 80028ca:	403a      	ands	r2, r7
 80028cc:	4313      	orrs	r3, r2
 80028ce:	4652      	mov	r2, sl
 80028d0:	07d2      	lsls	r2, r2, #31
 80028d2:	4313      	orrs	r3, r2
 80028d4:	4698      	mov	r8, r3
 80028d6:	4653      	mov	r3, sl
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	469a      	mov	sl, r3
 80028dc:	9b03      	ldr	r3, [sp, #12]
 80028de:	4699      	mov	r9, r3
 80028e0:	465b      	mov	r3, fp
 80028e2:	1c58      	adds	r0, r3, #1
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	445b      	add	r3, fp
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_dmul+0x13c>
 80028ee:	e1b1      	b.n	8002c54 <__aeabi_dmul+0x4a0>
 80028f0:	4642      	mov	r2, r8
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	d00b      	beq.n	800290e <__aeabi_dmul+0x15a>
 80028f6:	220f      	movs	r2, #15
 80028f8:	4641      	mov	r1, r8
 80028fa:	400a      	ands	r2, r1
 80028fc:	2a04      	cmp	r2, #4
 80028fe:	d006      	beq.n	800290e <__aeabi_dmul+0x15a>
 8002900:	4642      	mov	r2, r8
 8002902:	1d11      	adds	r1, r2, #4
 8002904:	4541      	cmp	r1, r8
 8002906:	4192      	sbcs	r2, r2
 8002908:	4688      	mov	r8, r1
 800290a:	4252      	negs	r2, r2
 800290c:	4492      	add	sl, r2
 800290e:	4652      	mov	r2, sl
 8002910:	01d2      	lsls	r2, r2, #7
 8002912:	d506      	bpl.n	8002922 <__aeabi_dmul+0x16e>
 8002914:	4652      	mov	r2, sl
 8002916:	4b80      	ldr	r3, [pc, #512]	@ (8002b18 <__aeabi_dmul+0x364>)
 8002918:	401a      	ands	r2, r3
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	4692      	mov	sl, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	18c3      	adds	r3, r0, r3
 8002922:	4a7e      	ldr	r2, [pc, #504]	@ (8002b1c <__aeabi_dmul+0x368>)
 8002924:	4293      	cmp	r3, r2
 8002926:	dd00      	ble.n	800292a <__aeabi_dmul+0x176>
 8002928:	e18f      	b.n	8002c4a <__aeabi_dmul+0x496>
 800292a:	4642      	mov	r2, r8
 800292c:	08d1      	lsrs	r1, r2, #3
 800292e:	4652      	mov	r2, sl
 8002930:	0752      	lsls	r2, r2, #29
 8002932:	430a      	orrs	r2, r1
 8002934:	4651      	mov	r1, sl
 8002936:	055b      	lsls	r3, r3, #21
 8002938:	024c      	lsls	r4, r1, #9
 800293a:	0b24      	lsrs	r4, r4, #12
 800293c:	0d5b      	lsrs	r3, r3, #21
 800293e:	e797      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002940:	4b73      	ldr	r3, [pc, #460]	@ (8002b10 <__aeabi_dmul+0x35c>)
 8002942:	4326      	orrs	r6, r4
 8002944:	469c      	mov	ip, r3
 8002946:	44e3      	add	fp, ip
 8002948:	2e00      	cmp	r6, #0
 800294a:	d100      	bne.n	800294e <__aeabi_dmul+0x19a>
 800294c:	e16f      	b.n	8002c2e <__aeabi_dmul+0x47a>
 800294e:	2303      	movs	r3, #3
 8002950:	4649      	mov	r1, r9
 8002952:	431d      	orrs	r5, r3
 8002954:	9b00      	ldr	r3, [sp, #0]
 8002956:	4059      	eors	r1, r3
 8002958:	b2cb      	uxtb	r3, r1
 800295a:	9303      	str	r3, [sp, #12]
 800295c:	2d0a      	cmp	r5, #10
 800295e:	dd00      	ble.n	8002962 <__aeabi_dmul+0x1ae>
 8002960:	e133      	b.n	8002bca <__aeabi_dmul+0x416>
 8002962:	2301      	movs	r3, #1
 8002964:	40ab      	lsls	r3, r5
 8002966:	001d      	movs	r5, r3
 8002968:	2303      	movs	r3, #3
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	2288      	movs	r2, #136	@ 0x88
 800296e:	422a      	tst	r2, r5
 8002970:	d197      	bne.n	80028a2 <__aeabi_dmul+0xee>
 8002972:	4642      	mov	r2, r8
 8002974:	4643      	mov	r3, r8
 8002976:	0412      	lsls	r2, r2, #16
 8002978:	0c12      	lsrs	r2, r2, #16
 800297a:	0016      	movs	r6, r2
 800297c:	9801      	ldr	r0, [sp, #4]
 800297e:	0c1d      	lsrs	r5, r3, #16
 8002980:	0c03      	lsrs	r3, r0, #16
 8002982:	0400      	lsls	r0, r0, #16
 8002984:	0c00      	lsrs	r0, r0, #16
 8002986:	4346      	muls	r6, r0
 8002988:	46b4      	mov	ip, r6
 800298a:	001e      	movs	r6, r3
 800298c:	436e      	muls	r6, r5
 800298e:	9600      	str	r6, [sp, #0]
 8002990:	0016      	movs	r6, r2
 8002992:	0007      	movs	r7, r0
 8002994:	435e      	muls	r6, r3
 8002996:	4661      	mov	r1, ip
 8002998:	46b0      	mov	r8, r6
 800299a:	436f      	muls	r7, r5
 800299c:	0c0e      	lsrs	r6, r1, #16
 800299e:	44b8      	add	r8, r7
 80029a0:	4446      	add	r6, r8
 80029a2:	42b7      	cmp	r7, r6
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x1fe>
 80029a6:	2180      	movs	r1, #128	@ 0x80
 80029a8:	0249      	lsls	r1, r1, #9
 80029aa:	4688      	mov	r8, r1
 80029ac:	9f00      	ldr	r7, [sp, #0]
 80029ae:	4447      	add	r7, r8
 80029b0:	9700      	str	r7, [sp, #0]
 80029b2:	4661      	mov	r1, ip
 80029b4:	0409      	lsls	r1, r1, #16
 80029b6:	0c09      	lsrs	r1, r1, #16
 80029b8:	0c37      	lsrs	r7, r6, #16
 80029ba:	0436      	lsls	r6, r6, #16
 80029bc:	468c      	mov	ip, r1
 80029be:	0031      	movs	r1, r6
 80029c0:	4461      	add	r1, ip
 80029c2:	9101      	str	r1, [sp, #4]
 80029c4:	0011      	movs	r1, r2
 80029c6:	0c26      	lsrs	r6, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	4361      	muls	r1, r4
 80029ce:	468c      	mov	ip, r1
 80029d0:	0021      	movs	r1, r4
 80029d2:	4369      	muls	r1, r5
 80029d4:	4689      	mov	r9, r1
 80029d6:	4661      	mov	r1, ip
 80029d8:	0c09      	lsrs	r1, r1, #16
 80029da:	4688      	mov	r8, r1
 80029dc:	4372      	muls	r2, r6
 80029de:	444a      	add	r2, r9
 80029e0:	4442      	add	r2, r8
 80029e2:	4375      	muls	r5, r6
 80029e4:	4591      	cmp	r9, r2
 80029e6:	d903      	bls.n	80029f0 <__aeabi_dmul+0x23c>
 80029e8:	2180      	movs	r1, #128	@ 0x80
 80029ea:	0249      	lsls	r1, r1, #9
 80029ec:	4688      	mov	r8, r1
 80029ee:	4445      	add	r5, r8
 80029f0:	0c11      	lsrs	r1, r2, #16
 80029f2:	4688      	mov	r8, r1
 80029f4:	4661      	mov	r1, ip
 80029f6:	0409      	lsls	r1, r1, #16
 80029f8:	0c09      	lsrs	r1, r1, #16
 80029fa:	468c      	mov	ip, r1
 80029fc:	0412      	lsls	r2, r2, #16
 80029fe:	4462      	add	r2, ip
 8002a00:	18b9      	adds	r1, r7, r2
 8002a02:	9102      	str	r1, [sp, #8]
 8002a04:	4651      	mov	r1, sl
 8002a06:	0c09      	lsrs	r1, r1, #16
 8002a08:	468c      	mov	ip, r1
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	040f      	lsls	r7, r1, #16
 8002a0e:	0c3f      	lsrs	r7, r7, #16
 8002a10:	0039      	movs	r1, r7
 8002a12:	4341      	muls	r1, r0
 8002a14:	4445      	add	r5, r8
 8002a16:	4688      	mov	r8, r1
 8002a18:	4661      	mov	r1, ip
 8002a1a:	4341      	muls	r1, r0
 8002a1c:	468a      	mov	sl, r1
 8002a1e:	4641      	mov	r1, r8
 8002a20:	4660      	mov	r0, ip
 8002a22:	0c09      	lsrs	r1, r1, #16
 8002a24:	4689      	mov	r9, r1
 8002a26:	4358      	muls	r0, r3
 8002a28:	437b      	muls	r3, r7
 8002a2a:	4453      	add	r3, sl
 8002a2c:	444b      	add	r3, r9
 8002a2e:	459a      	cmp	sl, r3
 8002a30:	d903      	bls.n	8002a3a <__aeabi_dmul+0x286>
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0249      	lsls	r1, r1, #9
 8002a36:	4689      	mov	r9, r1
 8002a38:	4448      	add	r0, r9
 8002a3a:	0c19      	lsrs	r1, r3, #16
 8002a3c:	4689      	mov	r9, r1
 8002a3e:	4641      	mov	r1, r8
 8002a40:	0409      	lsls	r1, r1, #16
 8002a42:	0c09      	lsrs	r1, r1, #16
 8002a44:	4688      	mov	r8, r1
 8002a46:	0039      	movs	r1, r7
 8002a48:	4361      	muls	r1, r4
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	4443      	add	r3, r8
 8002a4e:	4688      	mov	r8, r1
 8002a50:	4661      	mov	r1, ip
 8002a52:	434c      	muls	r4, r1
 8002a54:	4371      	muls	r1, r6
 8002a56:	468c      	mov	ip, r1
 8002a58:	4641      	mov	r1, r8
 8002a5a:	4377      	muls	r7, r6
 8002a5c:	0c0e      	lsrs	r6, r1, #16
 8002a5e:	193f      	adds	r7, r7, r4
 8002a60:	19f6      	adds	r6, r6, r7
 8002a62:	4448      	add	r0, r9
 8002a64:	42b4      	cmp	r4, r6
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x2bc>
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	0249      	lsls	r1, r1, #9
 8002a6c:	4689      	mov	r9, r1
 8002a6e:	44cc      	add	ip, r9
 8002a70:	9902      	ldr	r1, [sp, #8]
 8002a72:	9f00      	ldr	r7, [sp, #0]
 8002a74:	4689      	mov	r9, r1
 8002a76:	0431      	lsls	r1, r6, #16
 8002a78:	444f      	add	r7, r9
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	4297      	cmp	r7, r2
 8002a80:	4192      	sbcs	r2, r2
 8002a82:	040c      	lsls	r4, r1, #16
 8002a84:	0c24      	lsrs	r4, r4, #16
 8002a86:	444c      	add	r4, r9
 8002a88:	18ff      	adds	r7, r7, r3
 8002a8a:	4252      	negs	r2, r2
 8002a8c:	1964      	adds	r4, r4, r5
 8002a8e:	18a1      	adds	r1, r4, r2
 8002a90:	429f      	cmp	r7, r3
 8002a92:	419b      	sbcs	r3, r3
 8002a94:	4688      	mov	r8, r1
 8002a96:	4682      	mov	sl, r0
 8002a98:	425b      	negs	r3, r3
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4590      	cmp	r8, r2
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	42ac      	cmp	r4, r5
 8002aa2:	41a4      	sbcs	r4, r4
 8002aa4:	44c2      	add	sl, r8
 8002aa6:	44d1      	add	r9, sl
 8002aa8:	4252      	negs	r2, r2
 8002aaa:	4264      	negs	r4, r4
 8002aac:	4314      	orrs	r4, r2
 8002aae:	4599      	cmp	r9, r3
 8002ab0:	419b      	sbcs	r3, r3
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4192      	sbcs	r2, r2
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	4252      	negs	r2, r2
 8002aba:	4313      	orrs	r3, r2
 8002abc:	464a      	mov	r2, r9
 8002abe:	0c36      	lsrs	r6, r6, #16
 8002ac0:	19a4      	adds	r4, r4, r6
 8002ac2:	18e3      	adds	r3, r4, r3
 8002ac4:	4463      	add	r3, ip
 8002ac6:	025b      	lsls	r3, r3, #9
 8002ac8:	0dd2      	lsrs	r2, r2, #23
 8002aca:	431a      	orrs	r2, r3
 8002acc:	9901      	ldr	r1, [sp, #4]
 8002ace:	4692      	mov	sl, r2
 8002ad0:	027a      	lsls	r2, r7, #9
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	1e50      	subs	r0, r2, #1
 8002ad6:	4182      	sbcs	r2, r0
 8002ad8:	0dff      	lsrs	r7, r7, #23
 8002ada:	4317      	orrs	r7, r2
 8002adc:	464a      	mov	r2, r9
 8002ade:	0252      	lsls	r2, r2, #9
 8002ae0:	4317      	orrs	r7, r2
 8002ae2:	46b8      	mov	r8, r7
 8002ae4:	01db      	lsls	r3, r3, #7
 8002ae6:	d500      	bpl.n	8002aea <__aeabi_dmul+0x336>
 8002ae8:	e6ed      	b.n	80028c6 <__aeabi_dmul+0x112>
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <__aeabi_dmul+0x36c>)
 8002aec:	9a03      	ldr	r2, [sp, #12]
 8002aee:	445b      	add	r3, fp
 8002af0:	4691      	mov	r9, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	dc00      	bgt.n	8002af8 <__aeabi_dmul+0x344>
 8002af6:	e0ac      	b.n	8002c52 <__aeabi_dmul+0x49e>
 8002af8:	003a      	movs	r2, r7
 8002afa:	0752      	lsls	r2, r2, #29
 8002afc:	d100      	bne.n	8002b00 <__aeabi_dmul+0x34c>
 8002afe:	e710      	b.n	8002922 <__aeabi_dmul+0x16e>
 8002b00:	220f      	movs	r2, #15
 8002b02:	4658      	mov	r0, fp
 8002b04:	403a      	ands	r2, r7
 8002b06:	2a04      	cmp	r2, #4
 8002b08:	d000      	beq.n	8002b0c <__aeabi_dmul+0x358>
 8002b0a:	e6f9      	b.n	8002900 <__aeabi_dmul+0x14c>
 8002b0c:	e709      	b.n	8002922 <__aeabi_dmul+0x16e>
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	000007ff 	.word	0x000007ff
 8002b14:	fffffc01 	.word	0xfffffc01
 8002b18:	feffffff 	.word	0xfeffffff
 8002b1c:	000007fe 	.word	0x000007fe
 8002b20:	000003ff 	.word	0x000003ff
 8002b24:	0022      	movs	r2, r4
 8002b26:	4332      	orrs	r2, r6
 8002b28:	d06f      	beq.n	8002c0a <__aeabi_dmul+0x456>
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dmul+0x37c>
 8002b2e:	e0c2      	b.n	8002cb6 <__aeabi_dmul+0x502>
 8002b30:	0020      	movs	r0, r4
 8002b32:	f000 fdf9 	bl	8003728 <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3a0b      	subs	r2, #11
 8002b3c:	201d      	movs	r0, #29
 8002b3e:	1a82      	subs	r2, r0, r2
 8002b40:	0030      	movs	r0, r6
 8002b42:	0019      	movs	r1, r3
 8002b44:	40d0      	lsrs	r0, r2
 8002b46:	3908      	subs	r1, #8
 8002b48:	408c      	lsls	r4, r1
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	4322      	orrs	r2, r4
 8002b4e:	0034      	movs	r4, r6
 8002b50:	408c      	lsls	r4, r1
 8002b52:	4659      	mov	r1, fp
 8002b54:	1acb      	subs	r3, r1, r3
 8002b56:	4986      	ldr	r1, [pc, #536]	@ (8002d70 <__aeabi_dmul+0x5bc>)
 8002b58:	468b      	mov	fp, r1
 8002b5a:	449b      	add	fp, r3
 8002b5c:	2d0a      	cmp	r5, #10
 8002b5e:	dd00      	ble.n	8002b62 <__aeabi_dmul+0x3ae>
 8002b60:	e6a4      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002b62:	4649      	mov	r1, r9
 8002b64:	9b00      	ldr	r3, [sp, #0]
 8002b66:	9401      	str	r4, [sp, #4]
 8002b68:	4059      	eors	r1, r3
 8002b6a:	b2cb      	uxtb	r3, r1
 8002b6c:	0014      	movs	r4, r2
 8002b6e:	2000      	movs	r0, #0
 8002b70:	9303      	str	r3, [sp, #12]
 8002b72:	2d02      	cmp	r5, #2
 8002b74:	dd00      	ble.n	8002b78 <__aeabi_dmul+0x3c4>
 8002b76:	e667      	b.n	8002848 <__aeabi_dmul+0x94>
 8002b78:	e6fb      	b.n	8002972 <__aeabi_dmul+0x1be>
 8002b7a:	4653      	mov	r3, sl
 8002b7c:	4303      	orrs	r3, r0
 8002b7e:	4698      	mov	r8, r3
 8002b80:	d03c      	beq.n	8002bfc <__aeabi_dmul+0x448>
 8002b82:	4653      	mov	r3, sl
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dmul+0x3d6>
 8002b88:	e0a3      	b.n	8002cd2 <__aeabi_dmul+0x51e>
 8002b8a:	4650      	mov	r0, sl
 8002b8c:	f000 fdcc 	bl	8003728 <__clzsi2>
 8002b90:	230b      	movs	r3, #11
 8002b92:	425b      	negs	r3, r3
 8002b94:	469c      	mov	ip, r3
 8002b96:	0002      	movs	r2, r0
 8002b98:	4484      	add	ip, r0
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	4650      	mov	r0, sl
 8002b9e:	3908      	subs	r1, #8
 8002ba0:	4088      	lsls	r0, r1
 8002ba2:	231d      	movs	r3, #29
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	4660      	mov	r0, ip
 8002ba8:	1a1b      	subs	r3, r3, r0
 8002baa:	0020      	movs	r0, r4
 8002bac:	40d8      	lsrs	r0, r3
 8002bae:	0003      	movs	r3, r0
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4303      	orrs	r3, r0
 8002bb4:	469a      	mov	sl, r3
 8002bb6:	0023      	movs	r3, r4
 8002bb8:	408b      	lsls	r3, r1
 8002bba:	4698      	mov	r8, r3
 8002bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d70 <__aeabi_dmul+0x5bc>)
 8002bbe:	2500      	movs	r5, #0
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	469b      	mov	fp, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9302      	str	r3, [sp, #8]
 8002bc8:	e61a      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002bca:	2d0f      	cmp	r5, #15
 8002bcc:	d000      	beq.n	8002bd0 <__aeabi_dmul+0x41c>
 8002bce:	e0c9      	b.n	8002d64 <__aeabi_dmul+0x5b0>
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	4652      	mov	r2, sl
 8002bd4:	031b      	lsls	r3, r3, #12
 8002bd6:	421a      	tst	r2, r3
 8002bd8:	d002      	beq.n	8002be0 <__aeabi_dmul+0x42c>
 8002bda:	421c      	tst	r4, r3
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dmul+0x42c>
 8002bde:	e092      	b.n	8002d06 <__aeabi_dmul+0x552>
 8002be0:	2480      	movs	r4, #128	@ 0x80
 8002be2:	4653      	mov	r3, sl
 8002be4:	0324      	lsls	r4, r4, #12
 8002be6:	431c      	orrs	r4, r3
 8002be8:	0324      	lsls	r4, r4, #12
 8002bea:	4642      	mov	r2, r8
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	e63e      	b.n	800286e <__aeabi_dmul+0xba>
 8002bf0:	469b      	mov	fp, r3
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	250c      	movs	r5, #12
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	e601      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	469a      	mov	sl, r3
 8002c00:	469b      	mov	fp, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	2504      	movs	r5, #4
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	e5fa      	b.n	8002800 <__aeabi_dmul+0x4c>
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	430d      	orrs	r5, r1
 8002c0e:	2d0a      	cmp	r5, #10
 8002c10:	dd00      	ble.n	8002c14 <__aeabi_dmul+0x460>
 8002c12:	e64b      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002c14:	4649      	mov	r1, r9
 8002c16:	9800      	ldr	r0, [sp, #0]
 8002c18:	4041      	eors	r1, r0
 8002c1a:	b2c9      	uxtb	r1, r1
 8002c1c:	9103      	str	r1, [sp, #12]
 8002c1e:	2d02      	cmp	r5, #2
 8002c20:	dc00      	bgt.n	8002c24 <__aeabi_dmul+0x470>
 8002c22:	e096      	b.n	8002d52 <__aeabi_dmul+0x59e>
 8002c24:	2300      	movs	r3, #0
 8002c26:	2400      	movs	r4, #0
 8002c28:	2001      	movs	r0, #1
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	e60c      	b.n	8002848 <__aeabi_dmul+0x94>
 8002c2e:	4649      	mov	r1, r9
 8002c30:	2302      	movs	r3, #2
 8002c32:	9a00      	ldr	r2, [sp, #0]
 8002c34:	432b      	orrs	r3, r5
 8002c36:	4051      	eors	r1, r2
 8002c38:	b2ca      	uxtb	r2, r1
 8002c3a:	9203      	str	r2, [sp, #12]
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	dd00      	ble.n	8002c42 <__aeabi_dmul+0x48e>
 8002c40:	e634      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	d157      	bne.n	8002cf6 <__aeabi_dmul+0x542>
 8002c46:	9b03      	ldr	r3, [sp, #12]
 8002c48:	4699      	mov	r9, r3
 8002c4a:	2400      	movs	r4, #0
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4b49      	ldr	r3, [pc, #292]	@ (8002d74 <__aeabi_dmul+0x5c0>)
 8002c50:	e60e      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002c52:	4658      	mov	r0, fp
 8002c54:	2101      	movs	r1, #1
 8002c56:	1ac9      	subs	r1, r1, r3
 8002c58:	2938      	cmp	r1, #56	@ 0x38
 8002c5a:	dd00      	ble.n	8002c5e <__aeabi_dmul+0x4aa>
 8002c5c:	e62f      	b.n	80028be <__aeabi_dmul+0x10a>
 8002c5e:	291f      	cmp	r1, #31
 8002c60:	dd56      	ble.n	8002d10 <__aeabi_dmul+0x55c>
 8002c62:	221f      	movs	r2, #31
 8002c64:	4654      	mov	r4, sl
 8002c66:	4252      	negs	r2, r2
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	40dc      	lsrs	r4, r3
 8002c6c:	2920      	cmp	r1, #32
 8002c6e:	d007      	beq.n	8002c80 <__aeabi_dmul+0x4cc>
 8002c70:	4b41      	ldr	r3, [pc, #260]	@ (8002d78 <__aeabi_dmul+0x5c4>)
 8002c72:	4642      	mov	r2, r8
 8002c74:	469c      	mov	ip, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	4460      	add	r0, ip
 8002c7a:	4083      	lsls	r3, r0
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	4690      	mov	r8, r2
 8002c80:	4642      	mov	r2, r8
 8002c82:	2107      	movs	r1, #7
 8002c84:	1e53      	subs	r3, r2, #1
 8002c86:	419a      	sbcs	r2, r3
 8002c88:	000b      	movs	r3, r1
 8002c8a:	4322      	orrs	r2, r4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2400      	movs	r4, #0
 8002c90:	4211      	tst	r1, r2
 8002c92:	d009      	beq.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002c94:	230f      	movs	r3, #15
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d05d      	beq.n	8002d58 <__aeabi_dmul+0x5a4>
 8002c9c:	1d11      	adds	r1, r2, #4
 8002c9e:	4291      	cmp	r1, r2
 8002ca0:	419b      	sbcs	r3, r3
 8002ca2:	000a      	movs	r2, r1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	075b      	lsls	r3, r3, #29
 8002ca8:	08d2      	lsrs	r2, r2, #3
 8002caa:	431a      	orrs	r2, r3
 8002cac:	2300      	movs	r3, #0
 8002cae:	e5df      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	4699      	mov	r9, r3
 8002cb4:	e5fa      	b.n	80028ac <__aeabi_dmul+0xf8>
 8002cb6:	9801      	ldr	r0, [sp, #4]
 8002cb8:	f000 fd36 	bl	8003728 <__clzsi2>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	3215      	adds	r2, #21
 8002cc2:	3320      	adds	r3, #32
 8002cc4:	2a1c      	cmp	r2, #28
 8002cc6:	dc00      	bgt.n	8002cca <__aeabi_dmul+0x516>
 8002cc8:	e738      	b.n	8002b3c <__aeabi_dmul+0x388>
 8002cca:	9a01      	ldr	r2, [sp, #4]
 8002ccc:	3808      	subs	r0, #8
 8002cce:	4082      	lsls	r2, r0
 8002cd0:	e73f      	b.n	8002b52 <__aeabi_dmul+0x39e>
 8002cd2:	f000 fd29 	bl	8003728 <__clzsi2>
 8002cd6:	2315      	movs	r3, #21
 8002cd8:	469c      	mov	ip, r3
 8002cda:	4484      	add	ip, r0
 8002cdc:	0002      	movs	r2, r0
 8002cde:	4663      	mov	r3, ip
 8002ce0:	3220      	adds	r2, #32
 8002ce2:	2b1c      	cmp	r3, #28
 8002ce4:	dc00      	bgt.n	8002ce8 <__aeabi_dmul+0x534>
 8002ce6:	e758      	b.n	8002b9a <__aeabi_dmul+0x3e6>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4698      	mov	r8, r3
 8002cec:	0023      	movs	r3, r4
 8002cee:	3808      	subs	r0, #8
 8002cf0:	4083      	lsls	r3, r0
 8002cf2:	469a      	mov	sl, r3
 8002cf4:	e762      	b.n	8002bbc <__aeabi_dmul+0x408>
 8002cf6:	001d      	movs	r5, r3
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2400      	movs	r4, #0
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	e5a2      	b.n	8002848 <__aeabi_dmul+0x94>
 8002d02:	9002      	str	r0, [sp, #8]
 8002d04:	e632      	b.n	800296c <__aeabi_dmul+0x1b8>
 8002d06:	431c      	orrs	r4, r3
 8002d08:	9b00      	ldr	r3, [sp, #0]
 8002d0a:	9a01      	ldr	r2, [sp, #4]
 8002d0c:	4699      	mov	r9, r3
 8002d0e:	e5ae      	b.n	800286e <__aeabi_dmul+0xba>
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <__aeabi_dmul+0x5c8>)
 8002d12:	4652      	mov	r2, sl
 8002d14:	18c3      	adds	r3, r0, r3
 8002d16:	4640      	mov	r0, r8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	40c8      	lsrs	r0, r1
 8002d1c:	4302      	orrs	r2, r0
 8002d1e:	4640      	mov	r0, r8
 8002d20:	4098      	lsls	r0, r3
 8002d22:	0003      	movs	r3, r0
 8002d24:	1e58      	subs	r0, r3, #1
 8002d26:	4183      	sbcs	r3, r0
 8002d28:	4654      	mov	r4, sl
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	40cc      	lsrs	r4, r1
 8002d2e:	0753      	lsls	r3, r2, #29
 8002d30:	d009      	beq.n	8002d46 <__aeabi_dmul+0x592>
 8002d32:	230f      	movs	r3, #15
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d005      	beq.n	8002d46 <__aeabi_dmul+0x592>
 8002d3a:	1d13      	adds	r3, r2, #4
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	4192      	sbcs	r2, r2
 8002d40:	4252      	negs	r2, r2
 8002d42:	18a4      	adds	r4, r4, r2
 8002d44:	001a      	movs	r2, r3
 8002d46:	0223      	lsls	r3, r4, #8
 8002d48:	d508      	bpl.n	8002d5c <__aeabi_dmul+0x5a8>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	2200      	movs	r2, #0
 8002d50:	e58e      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002d52:	4689      	mov	r9, r1
 8002d54:	2400      	movs	r4, #0
 8002d56:	e58b      	b.n	8002870 <__aeabi_dmul+0xbc>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e7a5      	b.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002d5c:	0763      	lsls	r3, r4, #29
 8002d5e:	0264      	lsls	r4, r4, #9
 8002d60:	0b24      	lsrs	r4, r4, #12
 8002d62:	e7a1      	b.n	8002ca8 <__aeabi_dmul+0x4f4>
 8002d64:	9b00      	ldr	r3, [sp, #0]
 8002d66:	46a2      	mov	sl, r4
 8002d68:	4699      	mov	r9, r3
 8002d6a:	9b01      	ldr	r3, [sp, #4]
 8002d6c:	4698      	mov	r8, r3
 8002d6e:	e737      	b.n	8002be0 <__aeabi_dmul+0x42c>
 8002d70:	fffffc0d 	.word	0xfffffc0d
 8002d74:	000007ff 	.word	0x000007ff
 8002d78:	0000043e 	.word	0x0000043e
 8002d7c:	0000041e 	.word	0x0000041e

08002d80 <__aeabi_dsub>:
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	4657      	mov	r7, sl
 8002d84:	464e      	mov	r6, r9
 8002d86:	4645      	mov	r5, r8
 8002d88:	46de      	mov	lr, fp
 8002d8a:	b5e0      	push	{r5, r6, r7, lr}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	9000      	str	r0, [sp, #0]
 8002d90:	9101      	str	r1, [sp, #4]
 8002d92:	030c      	lsls	r4, r1, #12
 8002d94:	004d      	lsls	r5, r1, #1
 8002d96:	0fce      	lsrs	r6, r1, #31
 8002d98:	0a61      	lsrs	r1, r4, #9
 8002d9a:	9c00      	ldr	r4, [sp, #0]
 8002d9c:	005f      	lsls	r7, r3, #1
 8002d9e:	0f64      	lsrs	r4, r4, #29
 8002da0:	430c      	orrs	r4, r1
 8002da2:	9900      	ldr	r1, [sp, #0]
 8002da4:	9200      	str	r2, [sp, #0]
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	00c8      	lsls	r0, r1, #3
 8002daa:	0319      	lsls	r1, r3, #12
 8002dac:	0d7b      	lsrs	r3, r7, #21
 8002dae:	4699      	mov	r9, r3
 8002db0:	9b01      	ldr	r3, [sp, #4]
 8002db2:	4fcc      	ldr	r7, [pc, #816]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002db4:	0fdb      	lsrs	r3, r3, #31
 8002db6:	469c      	mov	ip, r3
 8002db8:	0a4b      	lsrs	r3, r1, #9
 8002dba:	9900      	ldr	r1, [sp, #0]
 8002dbc:	4680      	mov	r8, r0
 8002dbe:	0f49      	lsrs	r1, r1, #29
 8002dc0:	4319      	orrs	r1, r3
 8002dc2:	9b00      	ldr	r3, [sp, #0]
 8002dc4:	468b      	mov	fp, r1
 8002dc6:	00da      	lsls	r2, r3, #3
 8002dc8:	4692      	mov	sl, r2
 8002dca:	0d6d      	lsrs	r5, r5, #21
 8002dcc:	45b9      	cmp	r9, r7
 8002dce:	d100      	bne.n	8002dd2 <__aeabi_dsub+0x52>
 8002dd0:	e0bf      	b.n	8002f52 <__aeabi_dsub+0x1d2>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	4661      	mov	r1, ip
 8002dd6:	4059      	eors	r1, r3
 8002dd8:	464b      	mov	r3, r9
 8002dda:	468c      	mov	ip, r1
 8002ddc:	1aeb      	subs	r3, r5, r3
 8002dde:	428e      	cmp	r6, r1
 8002de0:	d075      	beq.n	8002ece <__aeabi_dsub+0x14e>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dc00      	bgt.n	8002de8 <__aeabi_dsub+0x68>
 8002de6:	e2a3      	b.n	8003330 <__aeabi_dsub+0x5b0>
 8002de8:	4649      	mov	r1, r9
 8002dea:	2900      	cmp	r1, #0
 8002dec:	d100      	bne.n	8002df0 <__aeabi_dsub+0x70>
 8002dee:	e0ce      	b.n	8002f8e <__aeabi_dsub+0x20e>
 8002df0:	42bd      	cmp	r5, r7
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x76>
 8002df4:	e200      	b.n	80031f8 <__aeabi_dsub+0x478>
 8002df6:	2701      	movs	r7, #1
 8002df8:	2b38      	cmp	r3, #56	@ 0x38
 8002dfa:	dc19      	bgt.n	8002e30 <__aeabi_dsub+0xb0>
 8002dfc:	2780      	movs	r7, #128	@ 0x80
 8002dfe:	4659      	mov	r1, fp
 8002e00:	043f      	lsls	r7, r7, #16
 8002e02:	4339      	orrs	r1, r7
 8002e04:	468b      	mov	fp, r1
 8002e06:	2b1f      	cmp	r3, #31
 8002e08:	dd00      	ble.n	8002e0c <__aeabi_dsub+0x8c>
 8002e0a:	e1fa      	b.n	8003202 <__aeabi_dsub+0x482>
 8002e0c:	2720      	movs	r7, #32
 8002e0e:	1af9      	subs	r1, r7, r3
 8002e10:	468c      	mov	ip, r1
 8002e12:	4659      	mov	r1, fp
 8002e14:	4667      	mov	r7, ip
 8002e16:	40b9      	lsls	r1, r7
 8002e18:	000f      	movs	r7, r1
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	40d9      	lsrs	r1, r3
 8002e1e:	430f      	orrs	r7, r1
 8002e20:	4661      	mov	r1, ip
 8002e22:	408a      	lsls	r2, r1
 8002e24:	1e51      	subs	r1, r2, #1
 8002e26:	418a      	sbcs	r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	40d9      	lsrs	r1, r3
 8002e2c:	4317      	orrs	r7, r2
 8002e2e:	1a64      	subs	r4, r4, r1
 8002e30:	1bc7      	subs	r7, r0, r7
 8002e32:	42b8      	cmp	r0, r7
 8002e34:	4180      	sbcs	r0, r0
 8002e36:	4240      	negs	r0, r0
 8002e38:	1a24      	subs	r4, r4, r0
 8002e3a:	0223      	lsls	r3, r4, #8
 8002e3c:	d400      	bmi.n	8002e40 <__aeabi_dsub+0xc0>
 8002e3e:	e140      	b.n	80030c2 <__aeabi_dsub+0x342>
 8002e40:	0264      	lsls	r4, r4, #9
 8002e42:	0a64      	lsrs	r4, r4, #9
 8002e44:	2c00      	cmp	r4, #0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0xca>
 8002e48:	e154      	b.n	80030f4 <__aeabi_dsub+0x374>
 8002e4a:	0020      	movs	r0, r4
 8002e4c:	f000 fc6c 	bl	8003728 <__clzsi2>
 8002e50:	0003      	movs	r3, r0
 8002e52:	3b08      	subs	r3, #8
 8002e54:	2120      	movs	r1, #32
 8002e56:	0038      	movs	r0, r7
 8002e58:	1aca      	subs	r2, r1, r3
 8002e5a:	40d0      	lsrs	r0, r2
 8002e5c:	409c      	lsls	r4, r3
 8002e5e:	0002      	movs	r2, r0
 8002e60:	409f      	lsls	r7, r3
 8002e62:	4322      	orrs	r2, r4
 8002e64:	429d      	cmp	r5, r3
 8002e66:	dd00      	ble.n	8002e6a <__aeabi_dsub+0xea>
 8002e68:	e1a6      	b.n	80031b8 <__aeabi_dsub+0x438>
 8002e6a:	1b58      	subs	r0, r3, r5
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	1a09      	subs	r1, r1, r0
 8002e70:	003c      	movs	r4, r7
 8002e72:	408f      	lsls	r7, r1
 8002e74:	40c4      	lsrs	r4, r0
 8002e76:	1e7b      	subs	r3, r7, #1
 8002e78:	419f      	sbcs	r7, r3
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	408b      	lsls	r3, r1
 8002e7e:	4327      	orrs	r7, r4
 8002e80:	431f      	orrs	r7, r3
 8002e82:	40c2      	lsrs	r2, r0
 8002e84:	003b      	movs	r3, r7
 8002e86:	0014      	movs	r4, r2
 8002e88:	2500      	movs	r5, #0
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <__aeabi_dsub+0x110>
 8002e8e:	e1f7      	b.n	8003280 <__aeabi_dsub+0x500>
 8002e90:	077b      	lsls	r3, r7, #29
 8002e92:	d100      	bne.n	8002e96 <__aeabi_dsub+0x116>
 8002e94:	e377      	b.n	8003586 <__aeabi_dsub+0x806>
 8002e96:	230f      	movs	r3, #15
 8002e98:	0038      	movs	r0, r7
 8002e9a:	403b      	ands	r3, r7
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d004      	beq.n	8002eaa <__aeabi_dsub+0x12a>
 8002ea0:	1d38      	adds	r0, r7, #4
 8002ea2:	42b8      	cmp	r0, r7
 8002ea4:	41bf      	sbcs	r7, r7
 8002ea6:	427f      	negs	r7, r7
 8002ea8:	19e4      	adds	r4, r4, r7
 8002eaa:	0223      	lsls	r3, r4, #8
 8002eac:	d400      	bmi.n	8002eb0 <__aeabi_dsub+0x130>
 8002eae:	e368      	b.n	8003582 <__aeabi_dsub+0x802>
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002eb2:	3501      	adds	r5, #1
 8002eb4:	429d      	cmp	r5, r3
 8002eb6:	d100      	bne.n	8002eba <__aeabi_dsub+0x13a>
 8002eb8:	e0f4      	b.n	80030a4 <__aeabi_dsub+0x324>
 8002eba:	4b8b      	ldr	r3, [pc, #556]	@ (80030e8 <__aeabi_dsub+0x368>)
 8002ebc:	056d      	lsls	r5, r5, #21
 8002ebe:	401c      	ands	r4, r3
 8002ec0:	0d6d      	lsrs	r5, r5, #21
 8002ec2:	0767      	lsls	r7, r4, #29
 8002ec4:	08c0      	lsrs	r0, r0, #3
 8002ec6:	0264      	lsls	r4, r4, #9
 8002ec8:	4307      	orrs	r7, r0
 8002eca:	0b24      	lsrs	r4, r4, #12
 8002ecc:	e0ec      	b.n	80030a8 <__aeabi_dsub+0x328>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	dc00      	bgt.n	8002ed4 <__aeabi_dsub+0x154>
 8002ed2:	e329      	b.n	8003528 <__aeabi_dsub+0x7a8>
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	2900      	cmp	r1, #0
 8002ed8:	d000      	beq.n	8002edc <__aeabi_dsub+0x15c>
 8002eda:	e0d6      	b.n	800308a <__aeabi_dsub+0x30a>
 8002edc:	4659      	mov	r1, fp
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	d100      	bne.n	8002ee4 <__aeabi_dsub+0x164>
 8002ee2:	e12e      	b.n	8003142 <__aeabi_dsub+0x3c2>
 8002ee4:	1e59      	subs	r1, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x16c>
 8002eea:	e1e6      	b.n	80032ba <__aeabi_dsub+0x53a>
 8002eec:	42bb      	cmp	r3, r7
 8002eee:	d100      	bne.n	8002ef2 <__aeabi_dsub+0x172>
 8002ef0:	e182      	b.n	80031f8 <__aeabi_dsub+0x478>
 8002ef2:	2701      	movs	r7, #1
 8002ef4:	000b      	movs	r3, r1
 8002ef6:	2938      	cmp	r1, #56	@ 0x38
 8002ef8:	dc14      	bgt.n	8002f24 <__aeabi_dsub+0x1a4>
 8002efa:	2b1f      	cmp	r3, #31
 8002efc:	dd00      	ble.n	8002f00 <__aeabi_dsub+0x180>
 8002efe:	e23c      	b.n	800337a <__aeabi_dsub+0x5fa>
 8002f00:	2720      	movs	r7, #32
 8002f02:	1af9      	subs	r1, r7, r3
 8002f04:	468c      	mov	ip, r1
 8002f06:	4659      	mov	r1, fp
 8002f08:	4667      	mov	r7, ip
 8002f0a:	40b9      	lsls	r1, r7
 8002f0c:	000f      	movs	r7, r1
 8002f0e:	0011      	movs	r1, r2
 8002f10:	40d9      	lsrs	r1, r3
 8002f12:	430f      	orrs	r7, r1
 8002f14:	4661      	mov	r1, ip
 8002f16:	408a      	lsls	r2, r1
 8002f18:	1e51      	subs	r1, r2, #1
 8002f1a:	418a      	sbcs	r2, r1
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	40d9      	lsrs	r1, r3
 8002f20:	4317      	orrs	r7, r2
 8002f22:	1864      	adds	r4, r4, r1
 8002f24:	183f      	adds	r7, r7, r0
 8002f26:	4287      	cmp	r7, r0
 8002f28:	4180      	sbcs	r0, r0
 8002f2a:	4240      	negs	r0, r0
 8002f2c:	1824      	adds	r4, r4, r0
 8002f2e:	0223      	lsls	r3, r4, #8
 8002f30:	d400      	bmi.n	8002f34 <__aeabi_dsub+0x1b4>
 8002f32:	e0c6      	b.n	80030c2 <__aeabi_dsub+0x342>
 8002f34:	4b6b      	ldr	r3, [pc, #428]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002f36:	3501      	adds	r5, #1
 8002f38:	429d      	cmp	r5, r3
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x1be>
 8002f3c:	e0b2      	b.n	80030a4 <__aeabi_dsub+0x324>
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4b69      	ldr	r3, [pc, #420]	@ (80030e8 <__aeabi_dsub+0x368>)
 8002f42:	087a      	lsrs	r2, r7, #1
 8002f44:	401c      	ands	r4, r3
 8002f46:	4039      	ands	r1, r7
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	07e7      	lsls	r7, r4, #31
 8002f4c:	4317      	orrs	r7, r2
 8002f4e:	0864      	lsrs	r4, r4, #1
 8002f50:	e79e      	b.n	8002e90 <__aeabi_dsub+0x110>
 8002f52:	4b66      	ldr	r3, [pc, #408]	@ (80030ec <__aeabi_dsub+0x36c>)
 8002f54:	4311      	orrs	r1, r2
 8002f56:	468a      	mov	sl, r1
 8002f58:	18eb      	adds	r3, r5, r3
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	d028      	beq.n	8002fb0 <__aeabi_dsub+0x230>
 8002f5e:	4566      	cmp	r6, ip
 8002f60:	d02c      	beq.n	8002fbc <__aeabi_dsub+0x23c>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d05b      	beq.n	800301e <__aeabi_dsub+0x29e>
 8002f66:	2d00      	cmp	r5, #0
 8002f68:	d100      	bne.n	8002f6c <__aeabi_dsub+0x1ec>
 8002f6a:	e12c      	b.n	80031c6 <__aeabi_dsub+0x446>
 8002f6c:	465b      	mov	r3, fp
 8002f6e:	4666      	mov	r6, ip
 8002f70:	075f      	lsls	r7, r3, #29
 8002f72:	08d2      	lsrs	r2, r2, #3
 8002f74:	4317      	orrs	r7, r2
 8002f76:	08dd      	lsrs	r5, r3, #3
 8002f78:	003b      	movs	r3, r7
 8002f7a:	432b      	orrs	r3, r5
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x200>
 8002f7e:	e0e2      	b.n	8003146 <__aeabi_dsub+0x3c6>
 8002f80:	2480      	movs	r4, #128	@ 0x80
 8002f82:	0324      	lsls	r4, r4, #12
 8002f84:	432c      	orrs	r4, r5
 8002f86:	0324      	lsls	r4, r4, #12
 8002f88:	4d56      	ldr	r5, [pc, #344]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002f8a:	0b24      	lsrs	r4, r4, #12
 8002f8c:	e08c      	b.n	80030a8 <__aeabi_dsub+0x328>
 8002f8e:	4659      	mov	r1, fp
 8002f90:	4311      	orrs	r1, r2
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x216>
 8002f94:	e0d5      	b.n	8003142 <__aeabi_dsub+0x3c2>
 8002f96:	1e59      	subs	r1, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d100      	bne.n	8002f9e <__aeabi_dsub+0x21e>
 8002f9c:	e1b9      	b.n	8003312 <__aeabi_dsub+0x592>
 8002f9e:	42bb      	cmp	r3, r7
 8002fa0:	d100      	bne.n	8002fa4 <__aeabi_dsub+0x224>
 8002fa2:	e1b1      	b.n	8003308 <__aeabi_dsub+0x588>
 8002fa4:	2701      	movs	r7, #1
 8002fa6:	000b      	movs	r3, r1
 8002fa8:	2938      	cmp	r1, #56	@ 0x38
 8002faa:	dd00      	ble.n	8002fae <__aeabi_dsub+0x22e>
 8002fac:	e740      	b.n	8002e30 <__aeabi_dsub+0xb0>
 8002fae:	e72a      	b.n	8002e06 <__aeabi_dsub+0x86>
 8002fb0:	4661      	mov	r1, ip
 8002fb2:	2701      	movs	r7, #1
 8002fb4:	4079      	eors	r1, r7
 8002fb6:	468c      	mov	ip, r1
 8002fb8:	4566      	cmp	r6, ip
 8002fba:	d1d2      	bne.n	8002f62 <__aeabi_dsub+0x1e2>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d100      	bne.n	8002fc2 <__aeabi_dsub+0x242>
 8002fc0:	e0c5      	b.n	800314e <__aeabi_dsub+0x3ce>
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	d000      	beq.n	8002fc8 <__aeabi_dsub+0x248>
 8002fc6:	e155      	b.n	8003274 <__aeabi_dsub+0x4f4>
 8002fc8:	464b      	mov	r3, r9
 8002fca:	0025      	movs	r5, r4
 8002fcc:	4305      	orrs	r5, r0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x252>
 8002fd0:	e212      	b.n	80033f8 <__aeabi_dsub+0x678>
 8002fd2:	1e59      	subs	r1, r3, #1
 8002fd4:	468c      	mov	ip, r1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x25c>
 8002fda:	e249      	b.n	8003470 <__aeabi_dsub+0x6f0>
 8002fdc:	4d41      	ldr	r5, [pc, #260]	@ (80030e4 <__aeabi_dsub+0x364>)
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x264>
 8002fe2:	e28f      	b.n	8003504 <__aeabi_dsub+0x784>
 8002fe4:	2701      	movs	r7, #1
 8002fe6:	2938      	cmp	r1, #56	@ 0x38
 8002fe8:	dc11      	bgt.n	800300e <__aeabi_dsub+0x28e>
 8002fea:	4663      	mov	r3, ip
 8002fec:	2b1f      	cmp	r3, #31
 8002fee:	dd00      	ble.n	8002ff2 <__aeabi_dsub+0x272>
 8002ff0:	e25b      	b.n	80034aa <__aeabi_dsub+0x72a>
 8002ff2:	4661      	mov	r1, ip
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	0027      	movs	r7, r4
 8002ff8:	1a5b      	subs	r3, r3, r1
 8002ffa:	0005      	movs	r5, r0
 8002ffc:	4098      	lsls	r0, r3
 8002ffe:	409f      	lsls	r7, r3
 8003000:	40cd      	lsrs	r5, r1
 8003002:	1e43      	subs	r3, r0, #1
 8003004:	4198      	sbcs	r0, r3
 8003006:	40cc      	lsrs	r4, r1
 8003008:	432f      	orrs	r7, r5
 800300a:	4307      	orrs	r7, r0
 800300c:	44a3      	add	fp, r4
 800300e:	18bf      	adds	r7, r7, r2
 8003010:	4297      	cmp	r7, r2
 8003012:	4192      	sbcs	r2, r2
 8003014:	4252      	negs	r2, r2
 8003016:	445a      	add	r2, fp
 8003018:	0014      	movs	r4, r2
 800301a:	464d      	mov	r5, r9
 800301c:	e787      	b.n	8002f2e <__aeabi_dsub+0x1ae>
 800301e:	4f34      	ldr	r7, [pc, #208]	@ (80030f0 <__aeabi_dsub+0x370>)
 8003020:	1c6b      	adds	r3, r5, #1
 8003022:	423b      	tst	r3, r7
 8003024:	d000      	beq.n	8003028 <__aeabi_dsub+0x2a8>
 8003026:	e0b6      	b.n	8003196 <__aeabi_dsub+0x416>
 8003028:	4659      	mov	r1, fp
 800302a:	0023      	movs	r3, r4
 800302c:	4311      	orrs	r1, r2
 800302e:	000f      	movs	r7, r1
 8003030:	4303      	orrs	r3, r0
 8003032:	2d00      	cmp	r5, #0
 8003034:	d000      	beq.n	8003038 <__aeabi_dsub+0x2b8>
 8003036:	e126      	b.n	8003286 <__aeabi_dsub+0x506>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <__aeabi_dsub+0x2be>
 800303c:	e1c0      	b.n	80033c0 <__aeabi_dsub+0x640>
 800303e:	2900      	cmp	r1, #0
 8003040:	d100      	bne.n	8003044 <__aeabi_dsub+0x2c4>
 8003042:	e0a1      	b.n	8003188 <__aeabi_dsub+0x408>
 8003044:	1a83      	subs	r3, r0, r2
 8003046:	4698      	mov	r8, r3
 8003048:	465b      	mov	r3, fp
 800304a:	4540      	cmp	r0, r8
 800304c:	41ad      	sbcs	r5, r5
 800304e:	1ae3      	subs	r3, r4, r3
 8003050:	426d      	negs	r5, r5
 8003052:	1b5b      	subs	r3, r3, r5
 8003054:	2580      	movs	r5, #128	@ 0x80
 8003056:	042d      	lsls	r5, r5, #16
 8003058:	422b      	tst	r3, r5
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x2de>
 800305c:	e14b      	b.n	80032f6 <__aeabi_dsub+0x576>
 800305e:	465b      	mov	r3, fp
 8003060:	1a10      	subs	r0, r2, r0
 8003062:	4282      	cmp	r2, r0
 8003064:	4192      	sbcs	r2, r2
 8003066:	1b1c      	subs	r4, r3, r4
 8003068:	0007      	movs	r7, r0
 800306a:	2601      	movs	r6, #1
 800306c:	4663      	mov	r3, ip
 800306e:	4252      	negs	r2, r2
 8003070:	1aa4      	subs	r4, r4, r2
 8003072:	4327      	orrs	r7, r4
 8003074:	401e      	ands	r6, r3
 8003076:	2f00      	cmp	r7, #0
 8003078:	d100      	bne.n	800307c <__aeabi_dsub+0x2fc>
 800307a:	e142      	b.n	8003302 <__aeabi_dsub+0x582>
 800307c:	422c      	tst	r4, r5
 800307e:	d100      	bne.n	8003082 <__aeabi_dsub+0x302>
 8003080:	e26d      	b.n	800355e <__aeabi_dsub+0x7de>
 8003082:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <__aeabi_dsub+0x368>)
 8003084:	2501      	movs	r5, #1
 8003086:	401c      	ands	r4, r3
 8003088:	e71b      	b.n	8002ec2 <__aeabi_dsub+0x142>
 800308a:	42bd      	cmp	r5, r7
 800308c:	d100      	bne.n	8003090 <__aeabi_dsub+0x310>
 800308e:	e13b      	b.n	8003308 <__aeabi_dsub+0x588>
 8003090:	2701      	movs	r7, #1
 8003092:	2b38      	cmp	r3, #56	@ 0x38
 8003094:	dd00      	ble.n	8003098 <__aeabi_dsub+0x318>
 8003096:	e745      	b.n	8002f24 <__aeabi_dsub+0x1a4>
 8003098:	2780      	movs	r7, #128	@ 0x80
 800309a:	4659      	mov	r1, fp
 800309c:	043f      	lsls	r7, r7, #16
 800309e:	4339      	orrs	r1, r7
 80030a0:	468b      	mov	fp, r1
 80030a2:	e72a      	b.n	8002efa <__aeabi_dsub+0x17a>
 80030a4:	2400      	movs	r4, #0
 80030a6:	2700      	movs	r7, #0
 80030a8:	052d      	lsls	r5, r5, #20
 80030aa:	4325      	orrs	r5, r4
 80030ac:	07f6      	lsls	r6, r6, #31
 80030ae:	4335      	orrs	r5, r6
 80030b0:	0038      	movs	r0, r7
 80030b2:	0029      	movs	r1, r5
 80030b4:	b003      	add	sp, #12
 80030b6:	bcf0      	pop	{r4, r5, r6, r7}
 80030b8:	46bb      	mov	fp, r7
 80030ba:	46b2      	mov	sl, r6
 80030bc:	46a9      	mov	r9, r5
 80030be:	46a0      	mov	r8, r4
 80030c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c2:	077b      	lsls	r3, r7, #29
 80030c4:	d004      	beq.n	80030d0 <__aeabi_dsub+0x350>
 80030c6:	230f      	movs	r3, #15
 80030c8:	403b      	ands	r3, r7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d000      	beq.n	80030d0 <__aeabi_dsub+0x350>
 80030ce:	e6e7      	b.n	8002ea0 <__aeabi_dsub+0x120>
 80030d0:	002b      	movs	r3, r5
 80030d2:	08f8      	lsrs	r0, r7, #3
 80030d4:	4a03      	ldr	r2, [pc, #12]	@ (80030e4 <__aeabi_dsub+0x364>)
 80030d6:	0767      	lsls	r7, r4, #29
 80030d8:	4307      	orrs	r7, r0
 80030da:	08e5      	lsrs	r5, r4, #3
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <__aeabi_dsub+0x362>
 80030e0:	e74a      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80030e2:	e0a5      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80030e4:	000007ff 	.word	0x000007ff
 80030e8:	ff7fffff 	.word	0xff7fffff
 80030ec:	fffff801 	.word	0xfffff801
 80030f0:	000007fe 	.word	0x000007fe
 80030f4:	0038      	movs	r0, r7
 80030f6:	f000 fb17 	bl	8003728 <__clzsi2>
 80030fa:	0003      	movs	r3, r0
 80030fc:	3318      	adds	r3, #24
 80030fe:	2b1f      	cmp	r3, #31
 8003100:	dc00      	bgt.n	8003104 <__aeabi_dsub+0x384>
 8003102:	e6a7      	b.n	8002e54 <__aeabi_dsub+0xd4>
 8003104:	003a      	movs	r2, r7
 8003106:	3808      	subs	r0, #8
 8003108:	4082      	lsls	r2, r0
 800310a:	429d      	cmp	r5, r3
 800310c:	dd00      	ble.n	8003110 <__aeabi_dsub+0x390>
 800310e:	e08a      	b.n	8003226 <__aeabi_dsub+0x4a6>
 8003110:	1b5b      	subs	r3, r3, r5
 8003112:	1c58      	adds	r0, r3, #1
 8003114:	281f      	cmp	r0, #31
 8003116:	dc00      	bgt.n	800311a <__aeabi_dsub+0x39a>
 8003118:	e1d8      	b.n	80034cc <__aeabi_dsub+0x74c>
 800311a:	0017      	movs	r7, r2
 800311c:	3b1f      	subs	r3, #31
 800311e:	40df      	lsrs	r7, r3
 8003120:	2820      	cmp	r0, #32
 8003122:	d005      	beq.n	8003130 <__aeabi_dsub+0x3b0>
 8003124:	2340      	movs	r3, #64	@ 0x40
 8003126:	1a1b      	subs	r3, r3, r0
 8003128:	409a      	lsls	r2, r3
 800312a:	1e53      	subs	r3, r2, #1
 800312c:	419a      	sbcs	r2, r3
 800312e:	4317      	orrs	r7, r2
 8003130:	2500      	movs	r5, #0
 8003132:	2f00      	cmp	r7, #0
 8003134:	d100      	bne.n	8003138 <__aeabi_dsub+0x3b8>
 8003136:	e0e5      	b.n	8003304 <__aeabi_dsub+0x584>
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	d000      	beq.n	800313e <__aeabi_dsub+0x3be>
 800313c:	e6ab      	b.n	8002e96 <__aeabi_dsub+0x116>
 800313e:	002c      	movs	r4, r5
 8003140:	e7c6      	b.n	80030d0 <__aeabi_dsub+0x350>
 8003142:	08c0      	lsrs	r0, r0, #3
 8003144:	e7c6      	b.n	80030d4 <__aeabi_dsub+0x354>
 8003146:	2700      	movs	r7, #0
 8003148:	2400      	movs	r4, #0
 800314a:	4dd1      	ldr	r5, [pc, #836]	@ (8003490 <__aeabi_dsub+0x710>)
 800314c:	e7ac      	b.n	80030a8 <__aeabi_dsub+0x328>
 800314e:	4fd1      	ldr	r7, [pc, #836]	@ (8003494 <__aeabi_dsub+0x714>)
 8003150:	1c6b      	adds	r3, r5, #1
 8003152:	423b      	tst	r3, r7
 8003154:	d171      	bne.n	800323a <__aeabi_dsub+0x4ba>
 8003156:	0023      	movs	r3, r4
 8003158:	4303      	orrs	r3, r0
 800315a:	2d00      	cmp	r5, #0
 800315c:	d000      	beq.n	8003160 <__aeabi_dsub+0x3e0>
 800315e:	e14e      	b.n	80033fe <__aeabi_dsub+0x67e>
 8003160:	4657      	mov	r7, sl
 8003162:	2b00      	cmp	r3, #0
 8003164:	d100      	bne.n	8003168 <__aeabi_dsub+0x3e8>
 8003166:	e1b5      	b.n	80034d4 <__aeabi_dsub+0x754>
 8003168:	2f00      	cmp	r7, #0
 800316a:	d00d      	beq.n	8003188 <__aeabi_dsub+0x408>
 800316c:	1883      	adds	r3, r0, r2
 800316e:	4283      	cmp	r3, r0
 8003170:	4180      	sbcs	r0, r0
 8003172:	445c      	add	r4, fp
 8003174:	4240      	negs	r0, r0
 8003176:	1824      	adds	r4, r4, r0
 8003178:	0222      	lsls	r2, r4, #8
 800317a:	d500      	bpl.n	800317e <__aeabi_dsub+0x3fe>
 800317c:	e1c8      	b.n	8003510 <__aeabi_dsub+0x790>
 800317e:	001f      	movs	r7, r3
 8003180:	4698      	mov	r8, r3
 8003182:	4327      	orrs	r7, r4
 8003184:	d100      	bne.n	8003188 <__aeabi_dsub+0x408>
 8003186:	e0bc      	b.n	8003302 <__aeabi_dsub+0x582>
 8003188:	4643      	mov	r3, r8
 800318a:	0767      	lsls	r7, r4, #29
 800318c:	08db      	lsrs	r3, r3, #3
 800318e:	431f      	orrs	r7, r3
 8003190:	08e5      	lsrs	r5, r4, #3
 8003192:	2300      	movs	r3, #0
 8003194:	e04c      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003196:	1a83      	subs	r3, r0, r2
 8003198:	4698      	mov	r8, r3
 800319a:	465b      	mov	r3, fp
 800319c:	4540      	cmp	r0, r8
 800319e:	41bf      	sbcs	r7, r7
 80031a0:	1ae3      	subs	r3, r4, r3
 80031a2:	427f      	negs	r7, r7
 80031a4:	1bdb      	subs	r3, r3, r7
 80031a6:	021f      	lsls	r7, r3, #8
 80031a8:	d47c      	bmi.n	80032a4 <__aeabi_dsub+0x524>
 80031aa:	4647      	mov	r7, r8
 80031ac:	431f      	orrs	r7, r3
 80031ae:	d100      	bne.n	80031b2 <__aeabi_dsub+0x432>
 80031b0:	e0a6      	b.n	8003300 <__aeabi_dsub+0x580>
 80031b2:	001c      	movs	r4, r3
 80031b4:	4647      	mov	r7, r8
 80031b6:	e645      	b.n	8002e44 <__aeabi_dsub+0xc4>
 80031b8:	4cb7      	ldr	r4, [pc, #732]	@ (8003498 <__aeabi_dsub+0x718>)
 80031ba:	1aed      	subs	r5, r5, r3
 80031bc:	4014      	ands	r4, r2
 80031be:	077b      	lsls	r3, r7, #29
 80031c0:	d000      	beq.n	80031c4 <__aeabi_dsub+0x444>
 80031c2:	e780      	b.n	80030c6 <__aeabi_dsub+0x346>
 80031c4:	e784      	b.n	80030d0 <__aeabi_dsub+0x350>
 80031c6:	464b      	mov	r3, r9
 80031c8:	0025      	movs	r5, r4
 80031ca:	4305      	orrs	r5, r0
 80031cc:	d066      	beq.n	800329c <__aeabi_dsub+0x51c>
 80031ce:	1e5f      	subs	r7, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d100      	bne.n	80031d6 <__aeabi_dsub+0x456>
 80031d4:	e0fc      	b.n	80033d0 <__aeabi_dsub+0x650>
 80031d6:	4dae      	ldr	r5, [pc, #696]	@ (8003490 <__aeabi_dsub+0x710>)
 80031d8:	42ab      	cmp	r3, r5
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x45e>
 80031dc:	e15e      	b.n	800349c <__aeabi_dsub+0x71c>
 80031de:	4666      	mov	r6, ip
 80031e0:	2f38      	cmp	r7, #56	@ 0x38
 80031e2:	dc00      	bgt.n	80031e6 <__aeabi_dsub+0x466>
 80031e4:	e0b4      	b.n	8003350 <__aeabi_dsub+0x5d0>
 80031e6:	2001      	movs	r0, #1
 80031e8:	1a17      	subs	r7, r2, r0
 80031ea:	42ba      	cmp	r2, r7
 80031ec:	4192      	sbcs	r2, r2
 80031ee:	465b      	mov	r3, fp
 80031f0:	4252      	negs	r2, r2
 80031f2:	464d      	mov	r5, r9
 80031f4:	1a9c      	subs	r4, r3, r2
 80031f6:	e620      	b.n	8002e3a <__aeabi_dsub+0xba>
 80031f8:	0767      	lsls	r7, r4, #29
 80031fa:	08c0      	lsrs	r0, r0, #3
 80031fc:	4307      	orrs	r7, r0
 80031fe:	08e5      	lsrs	r5, r4, #3
 8003200:	e6ba      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003202:	001f      	movs	r7, r3
 8003204:	4659      	mov	r1, fp
 8003206:	3f20      	subs	r7, #32
 8003208:	40f9      	lsrs	r1, r7
 800320a:	000f      	movs	r7, r1
 800320c:	2b20      	cmp	r3, #32
 800320e:	d005      	beq.n	800321c <__aeabi_dsub+0x49c>
 8003210:	2140      	movs	r1, #64	@ 0x40
 8003212:	1acb      	subs	r3, r1, r3
 8003214:	4659      	mov	r1, fp
 8003216:	4099      	lsls	r1, r3
 8003218:	430a      	orrs	r2, r1
 800321a:	4692      	mov	sl, r2
 800321c:	4653      	mov	r3, sl
 800321e:	1e5a      	subs	r2, r3, #1
 8003220:	4193      	sbcs	r3, r2
 8003222:	431f      	orrs	r7, r3
 8003224:	e604      	b.n	8002e30 <__aeabi_dsub+0xb0>
 8003226:	1aeb      	subs	r3, r5, r3
 8003228:	4d9b      	ldr	r5, [pc, #620]	@ (8003498 <__aeabi_dsub+0x718>)
 800322a:	4015      	ands	r5, r2
 800322c:	076f      	lsls	r7, r5, #29
 800322e:	08ed      	lsrs	r5, r5, #3
 8003230:	032c      	lsls	r4, r5, #12
 8003232:	055d      	lsls	r5, r3, #21
 8003234:	0b24      	lsrs	r4, r4, #12
 8003236:	0d6d      	lsrs	r5, r5, #21
 8003238:	e736      	b.n	80030a8 <__aeabi_dsub+0x328>
 800323a:	4d95      	ldr	r5, [pc, #596]	@ (8003490 <__aeabi_dsub+0x710>)
 800323c:	42ab      	cmp	r3, r5
 800323e:	d100      	bne.n	8003242 <__aeabi_dsub+0x4c2>
 8003240:	e0d6      	b.n	80033f0 <__aeabi_dsub+0x670>
 8003242:	1882      	adds	r2, r0, r2
 8003244:	0021      	movs	r1, r4
 8003246:	4282      	cmp	r2, r0
 8003248:	4180      	sbcs	r0, r0
 800324a:	4459      	add	r1, fp
 800324c:	4240      	negs	r0, r0
 800324e:	1808      	adds	r0, r1, r0
 8003250:	07c7      	lsls	r7, r0, #31
 8003252:	0852      	lsrs	r2, r2, #1
 8003254:	4317      	orrs	r7, r2
 8003256:	0844      	lsrs	r4, r0, #1
 8003258:	0752      	lsls	r2, r2, #29
 800325a:	d400      	bmi.n	800325e <__aeabi_dsub+0x4de>
 800325c:	e185      	b.n	800356a <__aeabi_dsub+0x7ea>
 800325e:	220f      	movs	r2, #15
 8003260:	001d      	movs	r5, r3
 8003262:	403a      	ands	r2, r7
 8003264:	2a04      	cmp	r2, #4
 8003266:	d000      	beq.n	800326a <__aeabi_dsub+0x4ea>
 8003268:	e61a      	b.n	8002ea0 <__aeabi_dsub+0x120>
 800326a:	08ff      	lsrs	r7, r7, #3
 800326c:	0764      	lsls	r4, r4, #29
 800326e:	4327      	orrs	r7, r4
 8003270:	0905      	lsrs	r5, r0, #4
 8003272:	e7dd      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003274:	465b      	mov	r3, fp
 8003276:	08d2      	lsrs	r2, r2, #3
 8003278:	075f      	lsls	r7, r3, #29
 800327a:	4317      	orrs	r7, r2
 800327c:	08dd      	lsrs	r5, r3, #3
 800327e:	e67b      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003280:	2700      	movs	r7, #0
 8003282:	2400      	movs	r4, #0
 8003284:	e710      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d000      	beq.n	800328c <__aeabi_dsub+0x50c>
 800328a:	e0d6      	b.n	800343a <__aeabi_dsub+0x6ba>
 800328c:	2900      	cmp	r1, #0
 800328e:	d000      	beq.n	8003292 <__aeabi_dsub+0x512>
 8003290:	e12f      	b.n	80034f2 <__aeabi_dsub+0x772>
 8003292:	2480      	movs	r4, #128	@ 0x80
 8003294:	2600      	movs	r6, #0
 8003296:	4d7e      	ldr	r5, [pc, #504]	@ (8003490 <__aeabi_dsub+0x710>)
 8003298:	0324      	lsls	r4, r4, #12
 800329a:	e705      	b.n	80030a8 <__aeabi_dsub+0x328>
 800329c:	4666      	mov	r6, ip
 800329e:	465c      	mov	r4, fp
 80032a0:	08d0      	lsrs	r0, r2, #3
 80032a2:	e717      	b.n	80030d4 <__aeabi_dsub+0x354>
 80032a4:	465b      	mov	r3, fp
 80032a6:	1a17      	subs	r7, r2, r0
 80032a8:	42ba      	cmp	r2, r7
 80032aa:	4192      	sbcs	r2, r2
 80032ac:	1b1c      	subs	r4, r3, r4
 80032ae:	2601      	movs	r6, #1
 80032b0:	4663      	mov	r3, ip
 80032b2:	4252      	negs	r2, r2
 80032b4:	1aa4      	subs	r4, r4, r2
 80032b6:	401e      	ands	r6, r3
 80032b8:	e5c4      	b.n	8002e44 <__aeabi_dsub+0xc4>
 80032ba:	1883      	adds	r3, r0, r2
 80032bc:	4283      	cmp	r3, r0
 80032be:	4180      	sbcs	r0, r0
 80032c0:	445c      	add	r4, fp
 80032c2:	4240      	negs	r0, r0
 80032c4:	1825      	adds	r5, r4, r0
 80032c6:	022a      	lsls	r2, r5, #8
 80032c8:	d400      	bmi.n	80032cc <__aeabi_dsub+0x54c>
 80032ca:	e0da      	b.n	8003482 <__aeabi_dsub+0x702>
 80032cc:	4a72      	ldr	r2, [pc, #456]	@ (8003498 <__aeabi_dsub+0x718>)
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	4015      	ands	r5, r2
 80032d2:	07ea      	lsls	r2, r5, #31
 80032d4:	431a      	orrs	r2, r3
 80032d6:	0869      	lsrs	r1, r5, #1
 80032d8:	075b      	lsls	r3, r3, #29
 80032da:	d400      	bmi.n	80032de <__aeabi_dsub+0x55e>
 80032dc:	e14a      	b.n	8003574 <__aeabi_dsub+0x7f4>
 80032de:	230f      	movs	r3, #15
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d100      	bne.n	80032e8 <__aeabi_dsub+0x568>
 80032e6:	e0fc      	b.n	80034e2 <__aeabi_dsub+0x762>
 80032e8:	1d17      	adds	r7, r2, #4
 80032ea:	4297      	cmp	r7, r2
 80032ec:	41a4      	sbcs	r4, r4
 80032ee:	4264      	negs	r4, r4
 80032f0:	2502      	movs	r5, #2
 80032f2:	1864      	adds	r4, r4, r1
 80032f4:	e6ec      	b.n	80030d0 <__aeabi_dsub+0x350>
 80032f6:	4647      	mov	r7, r8
 80032f8:	001c      	movs	r4, r3
 80032fa:	431f      	orrs	r7, r3
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x580>
 80032fe:	e743      	b.n	8003188 <__aeabi_dsub+0x408>
 8003300:	2600      	movs	r6, #0
 8003302:	2500      	movs	r5, #0
 8003304:	2400      	movs	r4, #0
 8003306:	e6cf      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003308:	08c0      	lsrs	r0, r0, #3
 800330a:	0767      	lsls	r7, r4, #29
 800330c:	4307      	orrs	r7, r0
 800330e:	08e5      	lsrs	r5, r4, #3
 8003310:	e632      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003312:	1a87      	subs	r7, r0, r2
 8003314:	465b      	mov	r3, fp
 8003316:	42b8      	cmp	r0, r7
 8003318:	4180      	sbcs	r0, r0
 800331a:	1ae4      	subs	r4, r4, r3
 800331c:	4240      	negs	r0, r0
 800331e:	1a24      	subs	r4, r4, r0
 8003320:	0223      	lsls	r3, r4, #8
 8003322:	d428      	bmi.n	8003376 <__aeabi_dsub+0x5f6>
 8003324:	0763      	lsls	r3, r4, #29
 8003326:	08ff      	lsrs	r7, r7, #3
 8003328:	431f      	orrs	r7, r3
 800332a:	08e5      	lsrs	r5, r4, #3
 800332c:	2301      	movs	r3, #1
 800332e:	e77f      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d100      	bne.n	8003336 <__aeabi_dsub+0x5b6>
 8003334:	e673      	b.n	800301e <__aeabi_dsub+0x29e>
 8003336:	464b      	mov	r3, r9
 8003338:	1b5f      	subs	r7, r3, r5
 800333a:	003b      	movs	r3, r7
 800333c:	2d00      	cmp	r5, #0
 800333e:	d100      	bne.n	8003342 <__aeabi_dsub+0x5c2>
 8003340:	e742      	b.n	80031c8 <__aeabi_dsub+0x448>
 8003342:	2f38      	cmp	r7, #56	@ 0x38
 8003344:	dd00      	ble.n	8003348 <__aeabi_dsub+0x5c8>
 8003346:	e0ec      	b.n	8003522 <__aeabi_dsub+0x7a2>
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	000e      	movs	r6, r1
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431c      	orrs	r4, r3
 8003350:	2f1f      	cmp	r7, #31
 8003352:	dc25      	bgt.n	80033a0 <__aeabi_dsub+0x620>
 8003354:	2520      	movs	r5, #32
 8003356:	0023      	movs	r3, r4
 8003358:	1bed      	subs	r5, r5, r7
 800335a:	0001      	movs	r1, r0
 800335c:	40a8      	lsls	r0, r5
 800335e:	40ab      	lsls	r3, r5
 8003360:	40f9      	lsrs	r1, r7
 8003362:	1e45      	subs	r5, r0, #1
 8003364:	41a8      	sbcs	r0, r5
 8003366:	430b      	orrs	r3, r1
 8003368:	40fc      	lsrs	r4, r7
 800336a:	4318      	orrs	r0, r3
 800336c:	465b      	mov	r3, fp
 800336e:	1b1b      	subs	r3, r3, r4
 8003370:	469b      	mov	fp, r3
 8003372:	e739      	b.n	80031e8 <__aeabi_dsub+0x468>
 8003374:	4666      	mov	r6, ip
 8003376:	2501      	movs	r5, #1
 8003378:	e562      	b.n	8002e40 <__aeabi_dsub+0xc0>
 800337a:	001f      	movs	r7, r3
 800337c:	4659      	mov	r1, fp
 800337e:	3f20      	subs	r7, #32
 8003380:	40f9      	lsrs	r1, r7
 8003382:	468c      	mov	ip, r1
 8003384:	2b20      	cmp	r3, #32
 8003386:	d005      	beq.n	8003394 <__aeabi_dsub+0x614>
 8003388:	2740      	movs	r7, #64	@ 0x40
 800338a:	4659      	mov	r1, fp
 800338c:	1afb      	subs	r3, r7, r3
 800338e:	4099      	lsls	r1, r3
 8003390:	430a      	orrs	r2, r1
 8003392:	4692      	mov	sl, r2
 8003394:	4657      	mov	r7, sl
 8003396:	1e7b      	subs	r3, r7, #1
 8003398:	419f      	sbcs	r7, r3
 800339a:	4663      	mov	r3, ip
 800339c:	431f      	orrs	r7, r3
 800339e:	e5c1      	b.n	8002f24 <__aeabi_dsub+0x1a4>
 80033a0:	003b      	movs	r3, r7
 80033a2:	0025      	movs	r5, r4
 80033a4:	3b20      	subs	r3, #32
 80033a6:	40dd      	lsrs	r5, r3
 80033a8:	2f20      	cmp	r7, #32
 80033aa:	d004      	beq.n	80033b6 <__aeabi_dsub+0x636>
 80033ac:	2340      	movs	r3, #64	@ 0x40
 80033ae:	1bdb      	subs	r3, r3, r7
 80033b0:	409c      	lsls	r4, r3
 80033b2:	4320      	orrs	r0, r4
 80033b4:	4680      	mov	r8, r0
 80033b6:	4640      	mov	r0, r8
 80033b8:	1e43      	subs	r3, r0, #1
 80033ba:	4198      	sbcs	r0, r3
 80033bc:	4328      	orrs	r0, r5
 80033be:	e713      	b.n	80031e8 <__aeabi_dsub+0x468>
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d09d      	beq.n	8003300 <__aeabi_dsub+0x580>
 80033c4:	2601      	movs	r6, #1
 80033c6:	4663      	mov	r3, ip
 80033c8:	465c      	mov	r4, fp
 80033ca:	4690      	mov	r8, r2
 80033cc:	401e      	ands	r6, r3
 80033ce:	e6db      	b.n	8003188 <__aeabi_dsub+0x408>
 80033d0:	1a17      	subs	r7, r2, r0
 80033d2:	465b      	mov	r3, fp
 80033d4:	42ba      	cmp	r2, r7
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	1b1c      	subs	r4, r3, r4
 80033da:	4252      	negs	r2, r2
 80033dc:	1aa4      	subs	r4, r4, r2
 80033de:	0223      	lsls	r3, r4, #8
 80033e0:	d4c8      	bmi.n	8003374 <__aeabi_dsub+0x5f4>
 80033e2:	0763      	lsls	r3, r4, #29
 80033e4:	08ff      	lsrs	r7, r7, #3
 80033e6:	431f      	orrs	r7, r3
 80033e8:	4666      	mov	r6, ip
 80033ea:	2301      	movs	r3, #1
 80033ec:	08e5      	lsrs	r5, r4, #3
 80033ee:	e71f      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80033f0:	001d      	movs	r5, r3
 80033f2:	2400      	movs	r4, #0
 80033f4:	2700      	movs	r7, #0
 80033f6:	e657      	b.n	80030a8 <__aeabi_dsub+0x328>
 80033f8:	465c      	mov	r4, fp
 80033fa:	08d0      	lsrs	r0, r2, #3
 80033fc:	e66a      	b.n	80030d4 <__aeabi_dsub+0x354>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d100      	bne.n	8003404 <__aeabi_dsub+0x684>
 8003402:	e737      	b.n	8003274 <__aeabi_dsub+0x4f4>
 8003404:	4653      	mov	r3, sl
 8003406:	08c0      	lsrs	r0, r0, #3
 8003408:	0767      	lsls	r7, r4, #29
 800340a:	4307      	orrs	r7, r0
 800340c:	08e5      	lsrs	r5, r4, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d100      	bne.n	8003414 <__aeabi_dsub+0x694>
 8003412:	e5b1      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	031b      	lsls	r3, r3, #12
 8003418:	421d      	tst	r5, r3
 800341a:	d008      	beq.n	800342e <__aeabi_dsub+0x6ae>
 800341c:	4659      	mov	r1, fp
 800341e:	08c8      	lsrs	r0, r1, #3
 8003420:	4218      	tst	r0, r3
 8003422:	d104      	bne.n	800342e <__aeabi_dsub+0x6ae>
 8003424:	08d2      	lsrs	r2, r2, #3
 8003426:	0749      	lsls	r1, r1, #29
 8003428:	430a      	orrs	r2, r1
 800342a:	0017      	movs	r7, r2
 800342c:	0005      	movs	r5, r0
 800342e:	0f7b      	lsrs	r3, r7, #29
 8003430:	00ff      	lsls	r7, r7, #3
 8003432:	08ff      	lsrs	r7, r7, #3
 8003434:	075b      	lsls	r3, r3, #29
 8003436:	431f      	orrs	r7, r3
 8003438:	e59e      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 800343a:	08c0      	lsrs	r0, r0, #3
 800343c:	0763      	lsls	r3, r4, #29
 800343e:	4318      	orrs	r0, r3
 8003440:	08e5      	lsrs	r5, r4, #3
 8003442:	2900      	cmp	r1, #0
 8003444:	d053      	beq.n	80034ee <__aeabi_dsub+0x76e>
 8003446:	2380      	movs	r3, #128	@ 0x80
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	421d      	tst	r5, r3
 800344c:	d00a      	beq.n	8003464 <__aeabi_dsub+0x6e4>
 800344e:	4659      	mov	r1, fp
 8003450:	08cc      	lsrs	r4, r1, #3
 8003452:	421c      	tst	r4, r3
 8003454:	d106      	bne.n	8003464 <__aeabi_dsub+0x6e4>
 8003456:	2601      	movs	r6, #1
 8003458:	4663      	mov	r3, ip
 800345a:	0025      	movs	r5, r4
 800345c:	08d0      	lsrs	r0, r2, #3
 800345e:	0749      	lsls	r1, r1, #29
 8003460:	4308      	orrs	r0, r1
 8003462:	401e      	ands	r6, r3
 8003464:	0f47      	lsrs	r7, r0, #29
 8003466:	00c0      	lsls	r0, r0, #3
 8003468:	08c0      	lsrs	r0, r0, #3
 800346a:	077f      	lsls	r7, r7, #29
 800346c:	4307      	orrs	r7, r0
 800346e:	e583      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003470:	1883      	adds	r3, r0, r2
 8003472:	4293      	cmp	r3, r2
 8003474:	4192      	sbcs	r2, r2
 8003476:	445c      	add	r4, fp
 8003478:	4252      	negs	r2, r2
 800347a:	18a5      	adds	r5, r4, r2
 800347c:	022a      	lsls	r2, r5, #8
 800347e:	d500      	bpl.n	8003482 <__aeabi_dsub+0x702>
 8003480:	e724      	b.n	80032cc <__aeabi_dsub+0x54c>
 8003482:	076f      	lsls	r7, r5, #29
 8003484:	08db      	lsrs	r3, r3, #3
 8003486:	431f      	orrs	r7, r3
 8003488:	08ed      	lsrs	r5, r5, #3
 800348a:	2301      	movs	r3, #1
 800348c:	e6d0      	b.n	8003230 <__aeabi_dsub+0x4b0>
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	000007ff 	.word	0x000007ff
 8003494:	000007fe 	.word	0x000007fe
 8003498:	ff7fffff 	.word	0xff7fffff
 800349c:	465b      	mov	r3, fp
 800349e:	08d2      	lsrs	r2, r2, #3
 80034a0:	075f      	lsls	r7, r3, #29
 80034a2:	4666      	mov	r6, ip
 80034a4:	4317      	orrs	r7, r2
 80034a6:	08dd      	lsrs	r5, r3, #3
 80034a8:	e566      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80034aa:	0025      	movs	r5, r4
 80034ac:	3b20      	subs	r3, #32
 80034ae:	40dd      	lsrs	r5, r3
 80034b0:	4663      	mov	r3, ip
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d005      	beq.n	80034c2 <__aeabi_dsub+0x742>
 80034b6:	2340      	movs	r3, #64	@ 0x40
 80034b8:	4661      	mov	r1, ip
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	409c      	lsls	r4, r3
 80034be:	4320      	orrs	r0, r4
 80034c0:	4680      	mov	r8, r0
 80034c2:	4647      	mov	r7, r8
 80034c4:	1e7b      	subs	r3, r7, #1
 80034c6:	419f      	sbcs	r7, r3
 80034c8:	432f      	orrs	r7, r5
 80034ca:	e5a0      	b.n	800300e <__aeabi_dsub+0x28e>
 80034cc:	2120      	movs	r1, #32
 80034ce:	2700      	movs	r7, #0
 80034d0:	1a09      	subs	r1, r1, r0
 80034d2:	e4d2      	b.n	8002e7a <__aeabi_dsub+0xfa>
 80034d4:	2f00      	cmp	r7, #0
 80034d6:	d100      	bne.n	80034da <__aeabi_dsub+0x75a>
 80034d8:	e713      	b.n	8003302 <__aeabi_dsub+0x582>
 80034da:	465c      	mov	r4, fp
 80034dc:	0017      	movs	r7, r2
 80034de:	2500      	movs	r5, #0
 80034e0:	e5f6      	b.n	80030d0 <__aeabi_dsub+0x350>
 80034e2:	08d7      	lsrs	r7, r2, #3
 80034e4:	0749      	lsls	r1, r1, #29
 80034e6:	2302      	movs	r3, #2
 80034e8:	430f      	orrs	r7, r1
 80034ea:	092d      	lsrs	r5, r5, #4
 80034ec:	e6a0      	b.n	8003230 <__aeabi_dsub+0x4b0>
 80034ee:	0007      	movs	r7, r0
 80034f0:	e542      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 80034f2:	465b      	mov	r3, fp
 80034f4:	2601      	movs	r6, #1
 80034f6:	075f      	lsls	r7, r3, #29
 80034f8:	08dd      	lsrs	r5, r3, #3
 80034fa:	4663      	mov	r3, ip
 80034fc:	08d2      	lsrs	r2, r2, #3
 80034fe:	4317      	orrs	r7, r2
 8003500:	401e      	ands	r6, r3
 8003502:	e539      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003504:	465b      	mov	r3, fp
 8003506:	08d2      	lsrs	r2, r2, #3
 8003508:	075f      	lsls	r7, r3, #29
 800350a:	4317      	orrs	r7, r2
 800350c:	08dd      	lsrs	r5, r3, #3
 800350e:	e533      	b.n	8002f78 <__aeabi_dsub+0x1f8>
 8003510:	4a1e      	ldr	r2, [pc, #120]	@ (800358c <__aeabi_dsub+0x80c>)
 8003512:	08db      	lsrs	r3, r3, #3
 8003514:	4022      	ands	r2, r4
 8003516:	0757      	lsls	r7, r2, #29
 8003518:	0252      	lsls	r2, r2, #9
 800351a:	2501      	movs	r5, #1
 800351c:	431f      	orrs	r7, r3
 800351e:	0b14      	lsrs	r4, r2, #12
 8003520:	e5c2      	b.n	80030a8 <__aeabi_dsub+0x328>
 8003522:	000e      	movs	r6, r1
 8003524:	2001      	movs	r0, #1
 8003526:	e65f      	b.n	80031e8 <__aeabi_dsub+0x468>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <__aeabi_dsub+0x7c8>
 800352c:	464b      	mov	r3, r9
 800352e:	1b5b      	subs	r3, r3, r5
 8003530:	469c      	mov	ip, r3
 8003532:	2d00      	cmp	r5, #0
 8003534:	d100      	bne.n	8003538 <__aeabi_dsub+0x7b8>
 8003536:	e548      	b.n	8002fca <__aeabi_dsub+0x24a>
 8003538:	2701      	movs	r7, #1
 800353a:	2b38      	cmp	r3, #56	@ 0x38
 800353c:	dd00      	ble.n	8003540 <__aeabi_dsub+0x7c0>
 800353e:	e566      	b.n	800300e <__aeabi_dsub+0x28e>
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	431c      	orrs	r4, r3
 8003546:	e550      	b.n	8002fea <__aeabi_dsub+0x26a>
 8003548:	1c6b      	adds	r3, r5, #1
 800354a:	4d11      	ldr	r5, [pc, #68]	@ (8003590 <__aeabi_dsub+0x810>)
 800354c:	422b      	tst	r3, r5
 800354e:	d000      	beq.n	8003552 <__aeabi_dsub+0x7d2>
 8003550:	e673      	b.n	800323a <__aeabi_dsub+0x4ba>
 8003552:	4659      	mov	r1, fp
 8003554:	0023      	movs	r3, r4
 8003556:	4311      	orrs	r1, r2
 8003558:	468a      	mov	sl, r1
 800355a:	4303      	orrs	r3, r0
 800355c:	e600      	b.n	8003160 <__aeabi_dsub+0x3e0>
 800355e:	0767      	lsls	r7, r4, #29
 8003560:	08c0      	lsrs	r0, r0, #3
 8003562:	2300      	movs	r3, #0
 8003564:	4307      	orrs	r7, r0
 8003566:	08e5      	lsrs	r5, r4, #3
 8003568:	e662      	b.n	8003230 <__aeabi_dsub+0x4b0>
 800356a:	0764      	lsls	r4, r4, #29
 800356c:	08ff      	lsrs	r7, r7, #3
 800356e:	4327      	orrs	r7, r4
 8003570:	0905      	lsrs	r5, r0, #4
 8003572:	e65d      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003574:	08d2      	lsrs	r2, r2, #3
 8003576:	0749      	lsls	r1, r1, #29
 8003578:	4311      	orrs	r1, r2
 800357a:	000f      	movs	r7, r1
 800357c:	2302      	movs	r3, #2
 800357e:	092d      	lsrs	r5, r5, #4
 8003580:	e656      	b.n	8003230 <__aeabi_dsub+0x4b0>
 8003582:	0007      	movs	r7, r0
 8003584:	e5a4      	b.n	80030d0 <__aeabi_dsub+0x350>
 8003586:	0038      	movs	r0, r7
 8003588:	e48f      	b.n	8002eaa <__aeabi_dsub+0x12a>
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	ff7fffff 	.word	0xff7fffff
 8003590:	000007fe 	.word	0x000007fe

08003594 <__aeabi_dcmpun>:
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	46c6      	mov	lr, r8
 8003598:	031e      	lsls	r6, r3, #12
 800359a:	0b36      	lsrs	r6, r6, #12
 800359c:	46b0      	mov	r8, r6
 800359e:	4e0d      	ldr	r6, [pc, #52]	@ (80035d4 <__aeabi_dcmpun+0x40>)
 80035a0:	030c      	lsls	r4, r1, #12
 80035a2:	004d      	lsls	r5, r1, #1
 80035a4:	005f      	lsls	r7, r3, #1
 80035a6:	b500      	push	{lr}
 80035a8:	0b24      	lsrs	r4, r4, #12
 80035aa:	0d6d      	lsrs	r5, r5, #21
 80035ac:	0d7f      	lsrs	r7, r7, #21
 80035ae:	42b5      	cmp	r5, r6
 80035b0:	d00b      	beq.n	80035ca <__aeabi_dcmpun+0x36>
 80035b2:	4908      	ldr	r1, [pc, #32]	@ (80035d4 <__aeabi_dcmpun+0x40>)
 80035b4:	2000      	movs	r0, #0
 80035b6:	428f      	cmp	r7, r1
 80035b8:	d104      	bne.n	80035c4 <__aeabi_dcmpun+0x30>
 80035ba:	4646      	mov	r6, r8
 80035bc:	4316      	orrs	r6, r2
 80035be:	0030      	movs	r0, r6
 80035c0:	1e43      	subs	r3, r0, #1
 80035c2:	4198      	sbcs	r0, r3
 80035c4:	bc80      	pop	{r7}
 80035c6:	46b8      	mov	r8, r7
 80035c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ca:	4304      	orrs	r4, r0
 80035cc:	2001      	movs	r0, #1
 80035ce:	2c00      	cmp	r4, #0
 80035d0:	d1f8      	bne.n	80035c4 <__aeabi_dcmpun+0x30>
 80035d2:	e7ee      	b.n	80035b2 <__aeabi_dcmpun+0x1e>
 80035d4:	000007ff 	.word	0x000007ff

080035d8 <__aeabi_d2iz>:
 80035d8:	000b      	movs	r3, r1
 80035da:	0002      	movs	r2, r0
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	4d16      	ldr	r5, [pc, #88]	@ (8003638 <__aeabi_d2iz+0x60>)
 80035e0:	030c      	lsls	r4, r1, #12
 80035e2:	b082      	sub	sp, #8
 80035e4:	0049      	lsls	r1, r1, #1
 80035e6:	2000      	movs	r0, #0
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	0b24      	lsrs	r4, r4, #12
 80035ee:	0d49      	lsrs	r1, r1, #21
 80035f0:	0fde      	lsrs	r6, r3, #31
 80035f2:	42a9      	cmp	r1, r5
 80035f4:	dd04      	ble.n	8003600 <__aeabi_d2iz+0x28>
 80035f6:	4811      	ldr	r0, [pc, #68]	@ (800363c <__aeabi_d2iz+0x64>)
 80035f8:	4281      	cmp	r1, r0
 80035fa:	dd03      	ble.n	8003604 <__aeabi_d2iz+0x2c>
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <__aeabi_d2iz+0x68>)
 80035fe:	18f0      	adds	r0, r6, r3
 8003600:	b002      	add	sp, #8
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	2080      	movs	r0, #128	@ 0x80
 8003606:	0340      	lsls	r0, r0, #13
 8003608:	4320      	orrs	r0, r4
 800360a:	4c0e      	ldr	r4, [pc, #56]	@ (8003644 <__aeabi_d2iz+0x6c>)
 800360c:	1a64      	subs	r4, r4, r1
 800360e:	2c1f      	cmp	r4, #31
 8003610:	dd08      	ble.n	8003624 <__aeabi_d2iz+0x4c>
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <__aeabi_d2iz+0x70>)
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	40d8      	lsrs	r0, r3
 8003618:	0003      	movs	r3, r0
 800361a:	4258      	negs	r0, r3
 800361c:	2e00      	cmp	r6, #0
 800361e:	d1ef      	bne.n	8003600 <__aeabi_d2iz+0x28>
 8003620:	0018      	movs	r0, r3
 8003622:	e7ed      	b.n	8003600 <__aeabi_d2iz+0x28>
 8003624:	4b09      	ldr	r3, [pc, #36]	@ (800364c <__aeabi_d2iz+0x74>)
 8003626:	9a00      	ldr	r2, [sp, #0]
 8003628:	469c      	mov	ip, r3
 800362a:	0003      	movs	r3, r0
 800362c:	4461      	add	r1, ip
 800362e:	408b      	lsls	r3, r1
 8003630:	40e2      	lsrs	r2, r4
 8003632:	4313      	orrs	r3, r2
 8003634:	e7f1      	b.n	800361a <__aeabi_d2iz+0x42>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	000003fe 	.word	0x000003fe
 800363c:	0000041d 	.word	0x0000041d
 8003640:	7fffffff 	.word	0x7fffffff
 8003644:	00000433 	.word	0x00000433
 8003648:	00000413 	.word	0x00000413
 800364c:	fffffbed 	.word	0xfffffbed

08003650 <__aeabi_ui2d>:
 8003650:	b510      	push	{r4, lr}
 8003652:	1e04      	subs	r4, r0, #0
 8003654:	d010      	beq.n	8003678 <__aeabi_ui2d+0x28>
 8003656:	f000 f867 	bl	8003728 <__clzsi2>
 800365a:	4b0e      	ldr	r3, [pc, #56]	@ (8003694 <__aeabi_ui2d+0x44>)
 800365c:	1a1b      	subs	r3, r3, r0
 800365e:	055b      	lsls	r3, r3, #21
 8003660:	0d5b      	lsrs	r3, r3, #21
 8003662:	280a      	cmp	r0, #10
 8003664:	dc0f      	bgt.n	8003686 <__aeabi_ui2d+0x36>
 8003666:	220b      	movs	r2, #11
 8003668:	0021      	movs	r1, r4
 800366a:	1a12      	subs	r2, r2, r0
 800366c:	40d1      	lsrs	r1, r2
 800366e:	3015      	adds	r0, #21
 8003670:	030a      	lsls	r2, r1, #12
 8003672:	4084      	lsls	r4, r0
 8003674:	0b12      	lsrs	r2, r2, #12
 8003676:	e001      	b.n	800367c <__aeabi_ui2d+0x2c>
 8003678:	2300      	movs	r3, #0
 800367a:	2200      	movs	r2, #0
 800367c:	051b      	lsls	r3, r3, #20
 800367e:	4313      	orrs	r3, r2
 8003680:	0020      	movs	r0, r4
 8003682:	0019      	movs	r1, r3
 8003684:	bd10      	pop	{r4, pc}
 8003686:	0022      	movs	r2, r4
 8003688:	380b      	subs	r0, #11
 800368a:	4082      	lsls	r2, r0
 800368c:	0312      	lsls	r2, r2, #12
 800368e:	2400      	movs	r4, #0
 8003690:	0b12      	lsrs	r2, r2, #12
 8003692:	e7f3      	b.n	800367c <__aeabi_ui2d+0x2c>
 8003694:	0000041e 	.word	0x0000041e

08003698 <__aeabi_f2d>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	0242      	lsls	r2, r0, #9
 800369c:	0043      	lsls	r3, r0, #1
 800369e:	0fc4      	lsrs	r4, r0, #31
 80036a0:	20fe      	movs	r0, #254	@ 0xfe
 80036a2:	0e1b      	lsrs	r3, r3, #24
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	0a55      	lsrs	r5, r2, #9
 80036a8:	4208      	tst	r0, r1
 80036aa:	d00c      	beq.n	80036c6 <__aeabi_f2d+0x2e>
 80036ac:	21e0      	movs	r1, #224	@ 0xe0
 80036ae:	0089      	lsls	r1, r1, #2
 80036b0:	468c      	mov	ip, r1
 80036b2:	076d      	lsls	r5, r5, #29
 80036b4:	0b12      	lsrs	r2, r2, #12
 80036b6:	4463      	add	r3, ip
 80036b8:	051b      	lsls	r3, r3, #20
 80036ba:	4313      	orrs	r3, r2
 80036bc:	07e4      	lsls	r4, r4, #31
 80036be:	4323      	orrs	r3, r4
 80036c0:	0028      	movs	r0, r5
 80036c2:	0019      	movs	r1, r3
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d114      	bne.n	80036f4 <__aeabi_f2d+0x5c>
 80036ca:	2d00      	cmp	r5, #0
 80036cc:	d01b      	beq.n	8003706 <__aeabi_f2d+0x6e>
 80036ce:	0028      	movs	r0, r5
 80036d0:	f000 f82a 	bl	8003728 <__clzsi2>
 80036d4:	280a      	cmp	r0, #10
 80036d6:	dc1c      	bgt.n	8003712 <__aeabi_f2d+0x7a>
 80036d8:	230b      	movs	r3, #11
 80036da:	002a      	movs	r2, r5
 80036dc:	1a1b      	subs	r3, r3, r0
 80036de:	40da      	lsrs	r2, r3
 80036e0:	0003      	movs	r3, r0
 80036e2:	3315      	adds	r3, #21
 80036e4:	409d      	lsls	r5, r3
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <__aeabi_f2d+0x88>)
 80036e8:	0312      	lsls	r2, r2, #12
 80036ea:	1a1b      	subs	r3, r3, r0
 80036ec:	055b      	lsls	r3, r3, #21
 80036ee:	0b12      	lsrs	r2, r2, #12
 80036f0:	0d5b      	lsrs	r3, r3, #21
 80036f2:	e7e1      	b.n	80036b8 <__aeabi_f2d+0x20>
 80036f4:	2d00      	cmp	r5, #0
 80036f6:	d009      	beq.n	800370c <__aeabi_f2d+0x74>
 80036f8:	0b13      	lsrs	r3, r2, #12
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	0312      	lsls	r2, r2, #12
 80036fe:	431a      	orrs	r2, r3
 8003700:	076d      	lsls	r5, r5, #29
 8003702:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <__aeabi_f2d+0x8c>)
 8003704:	e7d8      	b.n	80036b8 <__aeabi_f2d+0x20>
 8003706:	2300      	movs	r3, #0
 8003708:	2200      	movs	r2, #0
 800370a:	e7d5      	b.n	80036b8 <__aeabi_f2d+0x20>
 800370c:	2200      	movs	r2, #0
 800370e:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <__aeabi_f2d+0x8c>)
 8003710:	e7d2      	b.n	80036b8 <__aeabi_f2d+0x20>
 8003712:	0003      	movs	r3, r0
 8003714:	002a      	movs	r2, r5
 8003716:	3b0b      	subs	r3, #11
 8003718:	409a      	lsls	r2, r3
 800371a:	2500      	movs	r5, #0
 800371c:	e7e3      	b.n	80036e6 <__aeabi_f2d+0x4e>
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	00000389 	.word	0x00000389
 8003724:	000007ff 	.word	0x000007ff

08003728 <__clzsi2>:
 8003728:	211c      	movs	r1, #28
 800372a:	2301      	movs	r3, #1
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	4298      	cmp	r0, r3
 8003730:	d301      	bcc.n	8003736 <__clzsi2+0xe>
 8003732:	0c00      	lsrs	r0, r0, #16
 8003734:	3910      	subs	r1, #16
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	4298      	cmp	r0, r3
 800373a:	d301      	bcc.n	8003740 <__clzsi2+0x18>
 800373c:	0a00      	lsrs	r0, r0, #8
 800373e:	3908      	subs	r1, #8
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	4298      	cmp	r0, r3
 8003744:	d301      	bcc.n	800374a <__clzsi2+0x22>
 8003746:	0900      	lsrs	r0, r0, #4
 8003748:	3904      	subs	r1, #4
 800374a:	a202      	add	r2, pc, #8	@ (adr r2, 8003754 <__clzsi2+0x2c>)
 800374c:	5c10      	ldrb	r0, [r2, r0]
 800374e:	1840      	adds	r0, r0, r1
 8003750:	4770      	bx	lr
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	02020304 	.word	0x02020304
 8003758:	01010101 	.word	0x01010101
	...

08003764 <__clzdi2>:
 8003764:	b510      	push	{r4, lr}
 8003766:	2900      	cmp	r1, #0
 8003768:	d103      	bne.n	8003772 <__clzdi2+0xe>
 800376a:	f7ff ffdd 	bl	8003728 <__clzsi2>
 800376e:	3020      	adds	r0, #32
 8003770:	e002      	b.n	8003778 <__clzdi2+0x14>
 8003772:	0008      	movs	r0, r1
 8003774:	f7ff ffd8 	bl	8003728 <__clzsi2>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	46c0      	nop			@ (mov r8, r8)

0800377c <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	0004      	movs	r4, r0
 8003784:	0008      	movs	r0, r1
 8003786:	0011      	movs	r1, r2
 8003788:	1dbb      	adds	r3, r7, #6
 800378a:	1c22      	adds	r2, r4, #0
 800378c:	801a      	strh	r2, [r3, #0]
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	1c02      	adds	r2, r0, #0
 8003792:	801a      	strh	r2, [r3, #0]
 8003794:	1cbb      	adds	r3, r7, #2
 8003796:	1c0a      	adds	r2, r1, #0
 8003798:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	8818      	ldrh	r0, [r3, #0]
 800379e:	1dbb      	adds	r3, r7, #6
 80037a0:	8819      	ldrh	r1, [r3, #0]
 80037a2:	1cbb      	adds	r3, r7, #2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	001a      	movs	r2, r3
 80037a8:	f000 fee8 	bl	800457c <ST7735_DrawPixel>
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b003      	add	sp, #12
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80037b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b6:	46c6      	mov	lr, r8
 80037b8:	b500      	push	{lr}
 80037ba:	b090      	sub	sp, #64	@ 0x40
 80037bc:	af04      	add	r7, sp, #16
 80037be:	468c      	mov	ip, r1
 80037c0:	0016      	movs	r6, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	221e      	movs	r2, #30
 80037c6:	18ba      	adds	r2, r7, r2
 80037c8:	1c03      	adds	r3, r0, #0
 80037ca:	8013      	strh	r3, [r2, #0]
 80037cc:	231c      	movs	r3, #28
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	4662      	mov	r2, ip
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	201a      	movs	r0, #26
 80037d6:	183b      	adds	r3, r7, r0
 80037d8:	1c32      	adds	r2, r6, #0
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	2018      	movs	r0, #24
 80037de:	183b      	adds	r3, r7, r0
 80037e0:	1c0a      	adds	r2, r1, #0
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	466b      	mov	r3, sp
 80037e6:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 80037e8:	230c      	movs	r3, #12
 80037ea:	0001      	movs	r1, r0
 80037ec:	185e      	adds	r6, r3, r1
 80037ee:	19f2      	adds	r2, r6, r7
 80037f0:	2030      	movs	r0, #48	@ 0x30
 80037f2:	1846      	adds	r6, r0, r1
 80037f4:	19f3      	adds	r3, r6, r7
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 80037fa:	201a      	movs	r0, #26
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	2200      	movs	r2, #0
 8003800:	5e9b      	ldrsh	r3, [r3, r2]
 8003802:	187a      	adds	r2, r7, r1
 8003804:	2000      	movs	r0, #0
 8003806:	5e12      	ldrsh	r2, [r2, r0]
 8003808:	4353      	muls	r3, r2
 800380a:	1e5a      	subs	r2, r3, #1
 800380c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380e:	001a      	movs	r2, r3
 8003810:	60ba      	str	r2, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	60fa      	str	r2, [r7, #12]
 8003816:	68b8      	ldr	r0, [r7, #8]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	0002      	movs	r2, r0
 800381c:	0ed2      	lsrs	r2, r2, #27
 800381e:	000e      	movs	r6, r1
 8003820:	0176      	lsls	r6, r6, #5
 8003822:	617e      	str	r6, [r7, #20]
 8003824:	697e      	ldr	r6, [r7, #20]
 8003826:	4316      	orrs	r6, r2
 8003828:	617e      	str	r6, [r7, #20]
 800382a:	0002      	movs	r2, r0
 800382c:	0152      	lsls	r2, r2, #5
 800382e:	613a      	str	r2, [r7, #16]
 8003830:	001a      	movs	r2, r3
 8003832:	603a      	str	r2, [r7, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	0002      	movs	r2, r0
 800383e:	0ed2      	lsrs	r2, r2, #27
 8003840:	000e      	movs	r6, r1
 8003842:	0175      	lsls	r5, r6, #5
 8003844:	4315      	orrs	r5, r2
 8003846:	0002      	movs	r2, r0
 8003848:	0154      	lsls	r4, r2, #5
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	3307      	adds	r3, #7
 800384e:	08db      	lsrs	r3, r3, #3
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	466a      	mov	r2, sp
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	4695      	mov	sp, r2
 8003858:	ab04      	add	r3, sp, #16
 800385a:	3301      	adds	r3, #1
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	2200      	movs	r2, #0
 8003866:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8003868:	201a      	movs	r0, #26
 800386a:	183b      	adds	r3, r7, r0
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	2118      	movs	r1, #24
 8003870:	187a      	adds	r2, r7, r1
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	4353      	muls	r3, r2
 8003876:	b29a      	uxth	r2, r3
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 800387c:	221e      	movs	r2, #30
 800387e:	18bb      	adds	r3, r7, r2
 8003880:	881c      	ldrh	r4, [r3, #0]
 8003882:	231c      	movs	r3, #28
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	881d      	ldrh	r5, [r3, #0]
 8003888:	183b      	adds	r3, r7, r0
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	0008      	movs	r0, r1
 800388e:	187a      	adds	r2, r7, r1
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	210c      	movs	r1, #12
 8003894:	1809      	adds	r1, r1, r0
 8003896:	19c9      	adds	r1, r1, r7
 8003898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800389a:	2601      	movs	r6, #1
 800389c:	46b4      	mov	ip, r6
 800389e:	4666      	mov	r6, ip
 80038a0:	9602      	str	r6, [sp, #8]
 80038a2:	9201      	str	r2, [sp, #4]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	002b      	movs	r3, r5
 80038a8:	0022      	movs	r2, r4
 80038aa:	f000 fbc5 	bl	8004038 <drawImage>
 80038ae:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b00c      	add	sp, #48	@ 0x30
 80038b6:	bc80      	pop	{r7}
 80038b8:	46b8      	mov	r8, r7
 80038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038bc <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	0004      	movs	r4, r0
 80038c4:	0008      	movs	r0, r1
 80038c6:	0011      	movs	r1, r2
 80038c8:	1dbb      	adds	r3, r7, #6
 80038ca:	1c22      	adds	r2, r4, #0
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	1c02      	adds	r2, r0, #0
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	1cbb      	adds	r3, r7, #2
 80038d6:	1c0a      	adds	r2, r1, #0
 80038d8:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 80038da:	1cbb      	adds	r3, r7, #2
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	5e59      	ldrsh	r1, [r3, r1]
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	2000      	movs	r0, #0
 80038e8:	5e1b      	ldrsh	r3, [r3, r0]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff ff46 	bl	800377c <drawPixel>
}
 80038f0:	46c0      	nop			@ (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b003      	add	sp, #12
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80038f8:	b5b0      	push	{r4, r5, r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	0005      	movs	r5, r0
 8003900:	000c      	movs	r4, r1
 8003902:	0010      	movs	r0, r2
 8003904:	0019      	movs	r1, r3
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	1c2a      	adds	r2, r5, #0
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	1c22      	adds	r2, r4, #0
 8003910:	801a      	strh	r2, [r3, #0]
 8003912:	1cbb      	adds	r3, r7, #2
 8003914:	1c02      	adds	r2, r0, #0
 8003916:	801a      	strh	r2, [r3, #0]
 8003918:	003b      	movs	r3, r7
 800391a:	1c0a      	adds	r2, r1, #0
 800391c:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800391e:	003b      	movs	r3, r7
 8003920:	2200      	movs	r2, #0
 8003922:	5e9a      	ldrsh	r2, [r3, r2]
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	2100      	movs	r1, #0
 8003928:	5e5b      	ldrsh	r3, [r3, r1]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	17d9      	asrs	r1, r3, #31
 800392e:	185a      	adds	r2, r3, r1
 8003930:	404a      	eors	r2, r1
 8003932:	1cbb      	adds	r3, r7, #2
 8003934:	2100      	movs	r1, #0
 8003936:	5e59      	ldrsh	r1, [r3, r1]
 8003938:	1dbb      	adds	r3, r7, #6
 800393a:	2000      	movs	r0, #0
 800393c:	5e1b      	ldrsh	r3, [r3, r0]
 800393e:	1acb      	subs	r3, r1, r3
 8003940:	17d9      	asrs	r1, r3, #31
 8003942:	185b      	adds	r3, r3, r1
 8003944:	404b      	eors	r3, r1
 8003946:	2101      	movs	r1, #1
 8003948:	429a      	cmp	r2, r3
 800394a:	dc01      	bgt.n	8003950 <writeLine+0x58>
 800394c:	2300      	movs	r3, #0
 800394e:	1c19      	adds	r1, r3, #0
 8003950:	b2ca      	uxtb	r2, r1
 8003952:	211a      	movs	r1, #26
 8003954:	187b      	adds	r3, r7, r1
 8003956:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003958:	187b      	adds	r3, r7, r1
 800395a:	2200      	movs	r2, #0
 800395c:	5e9b      	ldrsh	r3, [r3, r2]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d019      	beq.n	8003996 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8003962:	2118      	movs	r1, #24
 8003964:	187b      	adds	r3, r7, r1
 8003966:	1dba      	adds	r2, r7, #6
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	1dbb      	adds	r3, r7, #6
 800396e:	1d3a      	adds	r2, r7, #4
 8003970:	8812      	ldrh	r2, [r2, #0]
 8003972:	801a      	strh	r2, [r3, #0]
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	187a      	adds	r2, r7, r1
 8003978:	8812      	ldrh	r2, [r2, #0]
 800397a:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 800397c:	2116      	movs	r1, #22
 800397e:	187b      	adds	r3, r7, r1
 8003980:	1cba      	adds	r2, r7, #2
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	801a      	strh	r2, [r3, #0]
 8003986:	1cbb      	adds	r3, r7, #2
 8003988:	003a      	movs	r2, r7
 800398a:	8812      	ldrh	r2, [r2, #0]
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	003b      	movs	r3, r7
 8003990:	187a      	adds	r2, r7, r1
 8003992:	8812      	ldrh	r2, [r2, #0]
 8003994:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003996:	1dba      	adds	r2, r7, #6
 8003998:	1cbb      	adds	r3, r7, #2
 800399a:	2100      	movs	r1, #0
 800399c:	5e52      	ldrsh	r2, [r2, r1]
 800399e:	2100      	movs	r1, #0
 80039a0:	5e5b      	ldrsh	r3, [r3, r1]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	dd19      	ble.n	80039da <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 80039a6:	2114      	movs	r1, #20
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	1dba      	adds	r2, r7, #6
 80039ac:	8812      	ldrh	r2, [r2, #0]
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	1dbb      	adds	r3, r7, #6
 80039b2:	1cba      	adds	r2, r7, #2
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	801a      	strh	r2, [r3, #0]
 80039b8:	1cbb      	adds	r3, r7, #2
 80039ba:	187a      	adds	r2, r7, r1
 80039bc:	8812      	ldrh	r2, [r2, #0]
 80039be:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 80039c0:	2112      	movs	r1, #18
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	1d3a      	adds	r2, r7, #4
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	003a      	movs	r2, r7
 80039ce:	8812      	ldrh	r2, [r2, #0]
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	003b      	movs	r3, r7
 80039d4:	187a      	adds	r2, r7, r1
 80039d6:	8812      	ldrh	r2, [r2, #0]
 80039d8:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80039da:	1cbb      	adds	r3, r7, #2
 80039dc:	881a      	ldrh	r2, [r3, #0]
 80039de:	1dbb      	adds	r3, r7, #6
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	2010      	movs	r0, #16
 80039e8:	183b      	adds	r3, r7, r0
 80039ea:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 80039ec:	003b      	movs	r3, r7
 80039ee:	2200      	movs	r2, #0
 80039f0:	5e9a      	ldrsh	r2, [r3, r2]
 80039f2:	1d3b      	adds	r3, r7, #4
 80039f4:	2100      	movs	r1, #0
 80039f6:	5e5b      	ldrsh	r3, [r3, r1]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	17d9      	asrs	r1, r3, #31
 80039fc:	185a      	adds	r2, r3, r1
 80039fe:	404a      	eors	r2, r1
 8003a00:	230e      	movs	r3, #14
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8003a06:	231e      	movs	r3, #30
 8003a08:	18fa      	adds	r2, r7, r3
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5e5b      	ldrsh	r3, [r3, r1]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da00      	bge.n	8003a16 <writeLine+0x11e>
 8003a14:	3301      	adds	r3, #1
 8003a16:	105b      	asrs	r3, r3, #1
 8003a18:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8003a1a:	1d3a      	adds	r2, r7, #4
 8003a1c:	003b      	movs	r3, r7
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5e52      	ldrsh	r2, [r2, r1]
 8003a22:	2100      	movs	r1, #0
 8003a24:	5e5b      	ldrsh	r3, [r3, r1]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	da04      	bge.n	8003a34 <writeLine+0x13c>
        ystep = 1;
 8003a2a:	231c      	movs	r3, #28
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2201      	movs	r2, #1
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	e04d      	b.n	8003ad0 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003a34:	231c      	movs	r3, #28
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4252      	negs	r2, r2
 8003a3c:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8003a3e:	e047      	b.n	8003ad0 <writeLine+0x1d8>
        if (steep) {
 8003a40:	231a      	movs	r3, #26
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	5e9b      	ldrsh	r3, [r3, r2]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003a4c:	2330      	movs	r3, #48	@ 0x30
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	881a      	ldrh	r2, [r3, #0]
 8003a52:	1dbb      	adds	r3, r7, #6
 8003a54:	2100      	movs	r1, #0
 8003a56:	5e59      	ldrsh	r1, [r3, r1]
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	5e1b      	ldrsh	r3, [r3, r0]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7ff ff2c 	bl	80038bc <writePixel>
 8003a64:	e00b      	b.n	8003a7e <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8003a66:	2330      	movs	r3, #48	@ 0x30
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5e59      	ldrsh	r1, [r3, r1]
 8003a72:	1dbb      	adds	r3, r7, #6
 8003a74:	2000      	movs	r0, #0
 8003a76:	5e1b      	ldrsh	r3, [r3, r0]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7ff ff1f 	bl	80038bc <writePixel>
        }
        err -= dy;
 8003a7e:	211e      	movs	r1, #30
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	230e      	movs	r3, #14
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	2200      	movs	r2, #0
 8003a96:	5e9b      	ldrsh	r3, [r3, r2]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da11      	bge.n	8003ac0 <writeLine+0x1c8>
            y0 += ystep;
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	231c      	movs	r3, #28
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	18d3      	adds	r3, r2, r3
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3301      	adds	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	1dbb      	adds	r3, r7, #6
 8003ace:	801a      	strh	r2, [r3, #0]
 8003ad0:	1dba      	adds	r2, r7, #6
 8003ad2:	1cbb      	adds	r3, r7, #2
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5e52      	ldrsh	r2, [r2, r1]
 8003ad8:	2100      	movs	r1, #0
 8003ada:	5e5b      	ldrsh	r3, [r3, r1]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	ddaf      	ble.n	8003a40 <writeLine+0x148>
        }
    }
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b008      	add	sp, #32
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}

08003aea <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003aea:	b5b0      	push	{r4, r5, r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af02      	add	r7, sp, #8
 8003af0:	0005      	movs	r5, r0
 8003af2:	000c      	movs	r4, r1
 8003af4:	0010      	movs	r0, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	1c2a      	adds	r2, r5, #0
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	1c22      	adds	r2, r4, #0
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	1cbb      	adds	r3, r7, #2
 8003b06:	1c02      	adds	r2, r0, #0
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	003b      	movs	r3, r7
 8003b0c:	1c0a      	adds	r2, r1, #0
 8003b0e:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8003b10:	1d3b      	adds	r3, r7, #4
 8003b12:	881a      	ldrh	r2, [r3, #0]
 8003b14:	1cbb      	adds	r3, r7, #2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b21c      	sxth	r4, r3
 8003b22:	1dbb      	adds	r3, r7, #6
 8003b24:	2200      	movs	r2, #0
 8003b26:	5e9a      	ldrsh	r2, [r3, r2]
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5e59      	ldrsh	r1, [r3, r1]
 8003b2e:	1dbb      	adds	r3, r7, #6
 8003b30:	2000      	movs	r0, #0
 8003b32:	5e18      	ldrsh	r0, [r3, r0]
 8003b34:	003b      	movs	r3, r7
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	0023      	movs	r3, r4
 8003b3c:	f7ff fedc 	bl	80038f8 <writeLine>
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bdb0      	pop	{r4, r5, r7, pc}

08003b48 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	0005      	movs	r5, r0
 8003b50:	000c      	movs	r4, r1
 8003b52:	0010      	movs	r0, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	1c2a      	adds	r2, r5, #0
 8003b5a:	801a      	strh	r2, [r3, #0]
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	1c22      	adds	r2, r4, #0
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	1cbb      	adds	r3, r7, #2
 8003b64:	1c02      	adds	r2, r0, #0
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	003b      	movs	r3, r7
 8003b6a:	1c0a      	adds	r2, r1, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003b6e:	1dbb      	adds	r3, r7, #6
 8003b70:	881a      	ldrh	r2, [r3, #0]
 8003b72:	1cbb      	adds	r3, r7, #2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	18d3      	adds	r3, r2, r3
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	2400      	movs	r4, #0
 8003b84:	5f1c      	ldrsh	r4, [r3, r4]
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5e59      	ldrsh	r1, [r3, r1]
 8003b8c:	1dbb      	adds	r3, r7, #6
 8003b8e:	2000      	movs	r0, #0
 8003b90:	5e18      	ldrsh	r0, [r3, r0]
 8003b92:	003b      	movs	r3, r7
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	0023      	movs	r3, r4
 8003b9a:	f7ff fead 	bl	80038f8 <writeLine>
}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b002      	add	sp, #8
 8003ba4:	bdb0      	pop	{r4, r5, r7, pc}

08003ba6 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003ba6:	b5b0      	push	{r4, r5, r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	0005      	movs	r5, r0
 8003bae:	000c      	movs	r4, r1
 8003bb0:	0010      	movs	r0, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	1dbb      	adds	r3, r7, #6
 8003bb6:	1c2a      	adds	r2, r5, #0
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	1c22      	adds	r2, r4, #0
 8003bbe:	801a      	strh	r2, [r3, #0]
 8003bc0:	1cbb      	adds	r3, r7, #2
 8003bc2:	1c02      	adds	r2, r0, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	003b      	movs	r3, r7
 8003bc8:	1c0a      	adds	r2, r1, #0
 8003bca:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003bcc:	1dba      	adds	r2, r7, #6
 8003bce:	1cbb      	adds	r3, r7, #2
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5e52      	ldrsh	r2, [r2, r1]
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5e5b      	ldrsh	r3, [r3, r1]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d12a      	bne.n	8003c32 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003bdc:	1d3a      	adds	r2, r7, #4
 8003bde:	003b      	movs	r3, r7
 8003be0:	2100      	movs	r1, #0
 8003be2:	5e52      	ldrsh	r2, [r2, r1]
 8003be4:	2100      	movs	r1, #0
 8003be6:	5e5b      	ldrsh	r3, [r3, r1]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	dd0c      	ble.n	8003c06 <drawLine+0x60>
 8003bec:	210c      	movs	r1, #12
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	1d3a      	adds	r2, r7, #4
 8003bf2:	8812      	ldrh	r2, [r2, #0]
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	003a      	movs	r2, r7
 8003bfa:	8812      	ldrh	r2, [r2, #0]
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	003b      	movs	r3, r7
 8003c00:	187a      	adds	r2, r7, r1
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003c06:	003b      	movs	r3, r7
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	b21a      	sxth	r2, r3
 8003c18:	2320      	movs	r3, #32
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	881c      	ldrh	r4, [r3, #0]
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	2100      	movs	r1, #0
 8003c22:	5e59      	ldrsh	r1, [r3, r1]
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	2000      	movs	r0, #0
 8003c28:	5e18      	ldrsh	r0, [r3, r0]
 8003c2a:	0023      	movs	r3, r4
 8003c2c:	f7ff ff5d 	bl	8003aea <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003c30:	e045      	b.n	8003cbe <drawLine+0x118>
    } else if(y0 == y1){
 8003c32:	1d3a      	adds	r2, r7, #4
 8003c34:	003b      	movs	r3, r7
 8003c36:	2100      	movs	r1, #0
 8003c38:	5e52      	ldrsh	r2, [r2, r1]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5e5b      	ldrsh	r3, [r3, r1]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d12a      	bne.n	8003c98 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003c42:	1dba      	adds	r2, r7, #6
 8003c44:	1cbb      	adds	r3, r7, #2
 8003c46:	2100      	movs	r1, #0
 8003c48:	5e52      	ldrsh	r2, [r2, r1]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5e5b      	ldrsh	r3, [r3, r1]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	dd0c      	ble.n	8003c6c <drawLine+0xc6>
 8003c52:	210e      	movs	r1, #14
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	1dba      	adds	r2, r7, #6
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	1cba      	adds	r2, r7, #2
 8003c60:	8812      	ldrh	r2, [r2, #0]
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	1cbb      	adds	r3, r7, #2
 8003c66:	187a      	adds	r2, r7, r1
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003c6c:	1cbb      	adds	r3, r7, #2
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	1dbb      	adds	r3, r7, #6
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b21a      	sxth	r2, r3
 8003c7e:	2320      	movs	r3, #32
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	881c      	ldrh	r4, [r3, #0]
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2100      	movs	r1, #0
 8003c88:	5e59      	ldrsh	r1, [r3, r1]
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	5e18      	ldrsh	r0, [r3, r0]
 8003c90:	0023      	movs	r3, r4
 8003c92:	f7ff ff59 	bl	8003b48 <drawFastHLine>
}
 8003c96:	e012      	b.n	8003cbe <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003c98:	003b      	movs	r3, r7
 8003c9a:	2400      	movs	r4, #0
 8003c9c:	5f1c      	ldrsh	r4, [r3, r4]
 8003c9e:	1cbb      	adds	r3, r7, #2
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	5e9a      	ldrsh	r2, [r3, r2]
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5e59      	ldrsh	r1, [r3, r1]
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	2000      	movs	r0, #0
 8003cae:	5e18      	ldrsh	r0, [r3, r0]
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	0023      	movs	r3, r4
 8003cba:	f7ff fe1d 	bl	80038f8 <writeLine>
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bdb0      	pop	{r4, r5, r7, pc}

08003cc6 <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc8:	b089      	sub	sp, #36	@ 0x24
 8003cca:	af02      	add	r7, sp, #8
 8003ccc:	0004      	movs	r4, r0
 8003cce:	0008      	movs	r0, r1
 8003cd0:	60ba      	str	r2, [r7, #8]
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	230e      	movs	r3, #14
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	1c22      	adds	r2, r4, #0
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	230c      	movs	r3, #12
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	1c02      	adds	r2, r0, #0
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	1dbb      	adds	r3, r7, #6
 8003ce6:	1c0a      	adds	r2, r1, #0
 8003ce8:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003cea:	2316      	movs	r3, #22
 8003cec:	18fb      	adds	r3, r7, r3
 8003cee:	2200      	movs	r2, #0
 8003cf0:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003cf2:	e03f      	b.n	8003d74 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003cf4:	2516      	movs	r5, #22
 8003cf6:	197b      	adds	r3, r7, r5
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	18d3      	adds	r3, r2, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	469c      	mov	ip, r3
 8003d02:	1dbb      	adds	r3, r7, #6
 8003d04:	2400      	movs	r4, #0
 8003d06:	5f1c      	ldrsh	r4, [r3, r4]
 8003d08:	230c      	movs	r3, #12
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5e59      	ldrsh	r1, [r3, r1]
 8003d10:	260e      	movs	r6, #14
 8003d12:	19bb      	adds	r3, r7, r6
 8003d14:	2000      	movs	r0, #0
 8003d16:	5e18      	ldrsh	r0, [r3, r0]
 8003d18:	232c      	movs	r3, #44	@ 0x2c
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	189b      	adds	r3, r3, r2
 8003d1e:	19db      	adds	r3, r3, r7
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	2328      	movs	r3, #40	@ 0x28
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	19db      	adds	r3, r3, r7
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	5e9b      	ldrsh	r3, [r3, r2]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	0023      	movs	r3, r4
 8003d32:	4662      	mov	r2, ip
 8003d34:	f000 f82c 	bl	8003d90 <drawChar>
		x+=(size*6)+spacing;
 8003d38:	232c      	movs	r3, #44	@ 0x2c
 8003d3a:	2108      	movs	r1, #8
 8003d3c:	185b      	adds	r3, r3, r1
 8003d3e:	19db      	adds	r3, r3, r7
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	1c1a      	adds	r2, r3, #0
 8003d46:	1c13      	adds	r3, r2, #0
 8003d48:	18db      	adds	r3, r3, r3
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	18db      	adds	r3, r3, r3
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	2330      	movs	r3, #48	@ 0x30
 8003d52:	185b      	adds	r3, r3, r1
 8003d54:	19db      	adds	r3, r3, r7
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	18d3      	adds	r3, r2, r3
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	19bb      	adds	r3, r7, r6
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	18d3      	adds	r3, r2, r3
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	19bb      	adds	r3, r7, r6
 8003d68:	801a      	strh	r2, [r3, #0]
		i++;
 8003d6a:	197b      	adds	r3, r7, r5
 8003d6c:	881a      	ldrh	r2, [r3, #0]
 8003d6e:	197b      	adds	r3, r7, r5
 8003d70:	3201      	adds	r2, #1
 8003d72:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8003d74:	2316      	movs	r3, #22
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	18d3      	adds	r3, r2, r3
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1b7      	bne.n	8003cf4 <drawString+0x2e>
	}
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b007      	add	sp, #28
 8003d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003d90 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003d90:	b5b0      	push	{r4, r5, r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	0005      	movs	r5, r0
 8003d98:	000c      	movs	r4, r1
 8003d9a:	0010      	movs	r0, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	1dbb      	adds	r3, r7, #6
 8003da0:	1c2a      	adds	r2, r5, #0
 8003da2:	801a      	strh	r2, [r3, #0]
 8003da4:	1d3b      	adds	r3, r7, #4
 8003da6:	1c22      	adds	r2, r4, #0
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	1cfb      	adds	r3, r7, #3
 8003dac:	1c02      	adds	r2, r0, #0
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	003b      	movs	r3, r7
 8003db2:	1c0a      	adds	r2, r1, #0
 8003db4:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e0bd      	b.n	8003f38 <drawChar+0x1a8>
    if ((i) == 5)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d104      	bne.n	8003dcc <drawChar+0x3c>
      line = 0x0;
 8003dc2:	2317      	movs	r3, #23
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e00b      	b.n	8003de4 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003dcc:	1cfb      	adds	r3, r7, #3
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	189a      	adds	r2, r3, r2
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	18d2      	adds	r2, r2, r3
 8003dda:	2317      	movs	r3, #23
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	495b      	ldr	r1, [pc, #364]	@ (8003f4c <drawChar+0x1bc>)
 8003de0:	5c8a      	ldrb	r2, [r1, r2]
 8003de2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e09f      	b.n	8003f2a <drawChar+0x19a>
      if (line & 0x1) {
 8003dea:	2317      	movs	r3, #23
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d043      	beq.n	8003e7e <drawChar+0xee>
        if (size == 1)
 8003df6:	232c      	movs	r3, #44	@ 0x2c
 8003df8:	18fb      	adds	r3, r7, r3
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d115      	bne.n	8003e2c <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	1dbb      	adds	r3, r7, #6
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	18d3      	adds	r3, r2, r3
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b218      	sxth	r0, r3
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b219      	sxth	r1, r3
 8003e20:	003b      	movs	r3, r7
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	001a      	movs	r2, r3
 8003e26:	f7ff fd49 	bl	80038bc <writePixel>
 8003e2a:	e075      	b.n	8003f18 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8003e2c:	212c      	movs	r1, #44	@ 0x2c
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	b292      	uxth	r2, r2
 8003e38:	4353      	muls	r3, r2
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	1dbb      	adds	r3, r7, #6
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	18d3      	adds	r3, r2, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	b218      	sxth	r0, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2207      	movs	r2, #7
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	000c      	movs	r4, r1
 8003e50:	187a      	adds	r2, r7, r1
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	b292      	uxth	r2, r2
 8003e56:	4353      	muls	r3, r2
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b219      	sxth	r1, r3
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b21a      	sxth	r2, r3
 8003e6a:	193b      	adds	r3, r7, r4
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	b21c      	sxth	r4, r3
 8003e70:	003b      	movs	r3, r7
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	0023      	movs	r3, r4
 8003e78:	f7ff fc9c 	bl	80037b4 <fillRect>
 8003e7c:	e04c      	b.n	8003f18 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003e7e:	2428      	movs	r4, #40	@ 0x28
 8003e80:	193b      	adds	r3, r7, r4
 8003e82:	0039      	movs	r1, r7
 8003e84:	2200      	movs	r2, #0
 8003e86:	5e9a      	ldrsh	r2, [r3, r2]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	5ecb      	ldrsh	r3, [r1, r3]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d043      	beq.n	8003f18 <drawChar+0x188>
        if (size == 1) // default size
 8003e90:	232c      	movs	r3, #44	@ 0x2c
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d115      	bne.n	8003ec6 <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	1dbb      	adds	r3, r7, #6
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b218      	sxth	r0, r3
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3307      	adds	r3, #7
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	b219      	sxth	r1, r3
 8003eba:	193b      	adds	r3, r7, r4
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	f7ff fcfc 	bl	80038bc <writePixel>
 8003ec4:	e028      	b.n	8003f18 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8003ec6:	212c      	movs	r1, #44	@ 0x2c
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	b292      	uxth	r2, r2
 8003ed2:	4353      	muls	r3, r2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	1dbb      	adds	r3, r7, #6
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	18d3      	adds	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b218      	sxth	r0, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	000c      	movs	r4, r1
 8003eea:	187a      	adds	r2, r7, r1
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	4353      	muls	r3, r2
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	18d3      	adds	r3, r2, r3
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	b219      	sxth	r1, r3
 8003efe:	193b      	adds	r3, r7, r4
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b21a      	sxth	r2, r3
 8003f04:	193b      	adds	r3, r7, r4
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b21c      	sxth	r4, r3
 8003f0a:	2328      	movs	r3, #40	@ 0x28
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	0023      	movs	r3, r4
 8003f14:	f7ff fc4e 	bl	80037b4 <fillRect>
        }
      }
      line >>= 1;
 8003f18:	2217      	movs	r2, #23
 8003f1a:	18bb      	adds	r3, r7, r2
 8003f1c:	18ba      	adds	r2, r7, r2
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	0852      	lsrs	r2, r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	dc00      	bgt.n	8003f32 <drawChar+0x1a2>
 8003f30:	e75b      	b.n	8003dea <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	3301      	adds	r3, #1
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	dc00      	bgt.n	8003f40 <drawChar+0x1b0>
 8003f3e:	e73d      	b.n	8003dbc <drawChar+0x2c>
    }
  }
}
 8003f40:	46c0      	nop			@ (mov r8, r8)
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b006      	add	sp, #24
 8003f48:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	0800c978 	.word	0x0800c978

08003f50 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b091      	sub	sp, #68	@ 0x44
 8003f54:	af04      	add	r7, sp, #16
 8003f56:	231e      	movs	r3, #30
 8003f58:	18f9      	adds	r1, r7, r3
 8003f5a:	8008      	strh	r0, [r1, #0]
 8003f5c:	4669      	mov	r1, sp
 8003f5e:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8003f60:	210c      	movs	r1, #12
 8003f62:	2318      	movs	r3, #24
 8003f64:	18cb      	adds	r3, r1, r3
 8003f66:	19d9      	adds	r1, r3, r7
 8003f68:	231e      	movs	r3, #30
 8003f6a:	18f8      	adds	r0, r7, r3
 8003f6c:	8800      	ldrh	r0, [r0, #0]
 8003f6e:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8003f70:	492f      	ldr	r1, [pc, #188]	@ (8004030 <fillScreen+0xe0>)
 8003f72:	2300      	movs	r3, #0
 8003f74:	5ec9      	ldrsh	r1, [r1, r3]
 8003f76:	0008      	movs	r0, r1
 8003f78:	492e      	ldr	r1, [pc, #184]	@ (8004034 <fillScreen+0xe4>)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	5ec9      	ldrsh	r1, [r1, r3]
 8003f7e:	4341      	muls	r1, r0
 8003f80:	1e48      	subs	r0, r1, #1
 8003f82:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003f84:	0008      	movs	r0, r1
 8003f86:	6138      	str	r0, [r7, #16]
 8003f88:	2000      	movs	r0, #0
 8003f8a:	6178      	str	r0, [r7, #20]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	0010      	movs	r0, r2
 8003f92:	0ec0      	lsrs	r0, r0, #27
 8003f94:	613a      	str	r2, [r7, #16]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	015d      	lsls	r5, r3, #5
 8003f9a:	4305      	orrs	r5, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015c      	lsls	r4, r3, #5
 8003fa0:	0008      	movs	r0, r1
 8003fa2:	6038      	str	r0, [r7, #0]
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	683c      	ldr	r4, [r7, #0]
 8003faa:	687d      	ldr	r5, [r7, #4]
 8003fac:	0023      	movs	r3, r4
 8003fae:	0ed8      	lsrs	r0, r3, #27
 8003fb0:	002b      	movs	r3, r5
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4303      	orrs	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	0023      	movs	r3, r4
 8003fbe:	015b      	lsls	r3, r3, #5
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	000b      	movs	r3, r1
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3307      	adds	r3, #7
 8003fc8:	08db      	lsrs	r3, r3, #3
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	466a      	mov	r2, sp
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	469d      	mov	sp, r3
 8003fd2:	ab04      	add	r3, sp, #16
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	2200      	movs	r2, #0
 8003fe0:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8003fe2:	4b13      	ldr	r3, [pc, #76]	@ (8004030 <fillScreen+0xe0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	5e9b      	ldrsh	r3, [r3, r2]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	4a12      	ldr	r2, [pc, #72]	@ (8004034 <fillScreen+0xe4>)
 8003fec:	2000      	movs	r0, #0
 8003fee:	5e12      	ldrsh	r2, [r2, r0]
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	4353      	muls	r3, r2
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <fillScreen+0xe0>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	5e9b      	ldrsh	r3, [r3, r2]
 8004000:	b29b      	uxth	r3, r3
 8004002:	4a0c      	ldr	r2, [pc, #48]	@ (8004034 <fillScreen+0xe4>)
 8004004:	2000      	movs	r0, #0
 8004006:	5e12      	ldrsh	r2, [r2, r0]
 8004008:	b292      	uxth	r2, r2
 800400a:	210c      	movs	r1, #12
 800400c:	2018      	movs	r0, #24
 800400e:	1809      	adds	r1, r1, r0
 8004010:	19c9      	adds	r1, r1, r7
 8004012:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004014:	2401      	movs	r4, #1
 8004016:	9402      	str	r4, [sp, #8]
 8004018:	9201      	str	r2, [sp, #4]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2300      	movs	r3, #0
 800401e:	2200      	movs	r2, #0
 8004020:	f000 f80a 	bl	8004038 <drawImage>
 8004024:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b00d      	add	sp, #52	@ 0x34
 800402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	20000a44 	.word	0x20000a44
 8004034:	20000a46 	.word	0x20000a46

08004038 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	46c6      	mov	lr, r8
 800403c:	b500      	push	{lr}
 800403e:	b092      	sub	sp, #72	@ 0x48
 8004040:	af02      	add	r7, sp, #8
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24
 8004044:	6239      	str	r1, [r7, #32]
 8004046:	0019      	movs	r1, r3
 8004048:	231e      	movs	r3, #30
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	231c      	movs	r3, #28
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	1c0a      	adds	r2, r1, #0
 8004054:	801a      	strh	r2, [r3, #0]
 8004056:	466b      	mov	r3, sp
 8004058:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 800405a:	2322      	movs	r3, #34	@ 0x22
 800405c:	2118      	movs	r1, #24
 800405e:	185b      	adds	r3, r3, r1
 8004060:	19db      	adds	r3, r3, r7
 8004062:	2200      	movs	r2, #0
 8004064:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8004066:	2340      	movs	r3, #64	@ 0x40
 8004068:	185b      	adds	r3, r3, r1
 800406a:	19db      	adds	r3, r3, r7
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	2244      	movs	r2, #68	@ 0x44
 8004070:	1852      	adds	r2, r2, r1
 8004072:	19d2      	adds	r2, r2, r7
 8004074:	8812      	ldrh	r2, [r2, #0]
 8004076:	4353      	muls	r3, r2
 8004078:	1e5a      	subs	r2, r3, #1
 800407a:	637a      	str	r2, [r7, #52]	@ 0x34
 800407c:	001a      	movs	r2, r3
 800407e:	60ba      	str	r2, [r7, #8]
 8004080:	2200      	movs	r2, #0
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	0002      	movs	r2, r0
 800408a:	0f12      	lsrs	r2, r2, #28
 800408c:	000e      	movs	r6, r1
 800408e:	0136      	lsls	r6, r6, #4
 8004090:	617e      	str	r6, [r7, #20]
 8004092:	697e      	ldr	r6, [r7, #20]
 8004094:	4316      	orrs	r6, r2
 8004096:	617e      	str	r6, [r7, #20]
 8004098:	0002      	movs	r2, r0
 800409a:	0112      	lsls	r2, r2, #4
 800409c:	613a      	str	r2, [r7, #16]
 800409e:	001a      	movs	r2, r3
 80040a0:	603a      	str	r2, [r7, #0]
 80040a2:	2200      	movs	r2, #0
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	0002      	movs	r2, r0
 80040ac:	0f12      	lsrs	r2, r2, #28
 80040ae:	000e      	movs	r6, r1
 80040b0:	0135      	lsls	r5, r6, #4
 80040b2:	4315      	orrs	r5, r2
 80040b4:	0002      	movs	r2, r0
 80040b6:	0114      	lsls	r4, r2, #4
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	3307      	adds	r3, #7
 80040bc:	08db      	lsrs	r3, r3, #3
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	466a      	mov	r2, sp
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	469d      	mov	sp, r3
 80040c6:	ab02      	add	r3, sp, #8
 80040c8:	3301      	adds	r3, #1
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 80040d0:	2326      	movs	r3, #38	@ 0x26
 80040d2:	2118      	movs	r1, #24
 80040d4:	185b      	adds	r3, r3, r1
 80040d6:	19db      	adds	r3, r3, r7
 80040d8:	2200      	movs	r2, #0
 80040da:	801a      	strh	r2, [r3, #0]
 80040dc:	e04d      	b.n	800417a <drawImage+0x142>
{
	ind = image[i][0];
 80040de:	2126      	movs	r1, #38	@ 0x26
 80040e0:	2018      	movs	r0, #24
 80040e2:	180b      	adds	r3, r1, r0
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ec:	18d2      	adds	r2, r2, r3
 80040ee:	2316      	movs	r3, #22
 80040f0:	181b      	adds	r3, r3, r0
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	8812      	ldrh	r2, [r2, #0]
 80040f6:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 80040f8:	180b      	adds	r3, r1, r0
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004102:	18d2      	adds	r2, r2, r3
 8004104:	2314      	movs	r3, #20
 8004106:	181b      	adds	r3, r3, r0
 8004108:	19db      	adds	r3, r3, r7
 800410a:	8852      	ldrh	r2, [r2, #2]
 800410c:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 800410e:	2324      	movs	r3, #36	@ 0x24
 8004110:	181b      	adds	r3, r3, r0
 8004112:	19db      	adds	r3, r3, r7
 8004114:	2200      	movs	r2, #0
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	e01c      	b.n	8004154 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 800411a:	2316      	movs	r3, #22
 800411c:	2418      	movs	r4, #24
 800411e:	191b      	adds	r3, r3, r4
 8004120:	19db      	adds	r3, r3, r7
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	18d2      	adds	r2, r2, r3
 800412a:	2122      	movs	r1, #34	@ 0x22
 800412c:	190b      	adds	r3, r1, r4
 800412e:	19db      	adds	r3, r3, r7
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	1909      	adds	r1, r1, r4
 8004134:	19c9      	adds	r1, r1, r7
 8004136:	1c58      	adds	r0, r3, #1
 8004138:	8008      	strh	r0, [r1, #0]
 800413a:	0018      	movs	r0, r3
 800413c:	8811      	ldrh	r1, [r2, #0]
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	0042      	lsls	r2, r0, #1
 8004142:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8004144:	2124      	movs	r1, #36	@ 0x24
 8004146:	190b      	adds	r3, r1, r4
 8004148:	19db      	adds	r3, r3, r7
 800414a:	881a      	ldrh	r2, [r3, #0]
 800414c:	190b      	adds	r3, r1, r4
 800414e:	19db      	adds	r3, r3, r7
 8004150:	3201      	adds	r2, #1
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	2324      	movs	r3, #36	@ 0x24
 8004156:	2018      	movs	r0, #24
 8004158:	181b      	adds	r3, r3, r0
 800415a:	19da      	adds	r2, r3, r7
 800415c:	2314      	movs	r3, #20
 800415e:	181b      	adds	r3, r3, r0
 8004160:	19db      	adds	r3, r3, r7
 8004162:	8812      	ldrh	r2, [r2, #0]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d3d7      	bcc.n	800411a <drawImage+0xe2>
for(i=0; i<c; i++)
 800416a:	2126      	movs	r1, #38	@ 0x26
 800416c:	180b      	adds	r3, r1, r0
 800416e:	19db      	adds	r3, r3, r7
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	180b      	adds	r3, r1, r0
 8004174:	19db      	adds	r3, r3, r7
 8004176:	3201      	adds	r2, #1
 8004178:	801a      	strh	r2, [r3, #0]
 800417a:	2326      	movs	r3, #38	@ 0x26
 800417c:	2118      	movs	r1, #24
 800417e:	185b      	adds	r3, r3, r1
 8004180:	19da      	adds	r2, r3, r7
 8004182:	2348      	movs	r3, #72	@ 0x48
 8004184:	185b      	adds	r3, r3, r1
 8004186:	19db      	adds	r3, r3, r7
 8004188:	8812      	ldrh	r2, [r2, #0]
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d3a6      	bcc.n	80040de <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8004190:	2344      	movs	r3, #68	@ 0x44
 8004192:	185b      	adds	r3, r3, r1
 8004194:	19db      	adds	r3, r3, r7
 8004196:	881c      	ldrh	r4, [r3, #0]
 8004198:	2340      	movs	r3, #64	@ 0x40
 800419a:	185b      	adds	r3, r3, r1
 800419c:	19db      	adds	r3, r3, r7
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	231e      	movs	r3, #30
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	8819      	ldrh	r1, [r3, #0]
 80041a6:	231c      	movs	r3, #28
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	8818      	ldrh	r0, [r3, #0]
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	0023      	movs	r3, r4
 80041b2:	f000 fa31 	bl	8004618 <ST7735_DrawImage>
 80041b6:	46c5      	mov	sp, r8
}
 80041b8:	46c0      	nop			@ (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b010      	add	sp, #64	@ 0x40
 80041be:	bc80      	pop	{r7}
 80041c0:	46b8      	mov	r8, r7
 80041c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041c4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80041c8:	23a0      	movs	r3, #160	@ 0xa0
 80041ca:	05db      	lsls	r3, r3, #23
 80041cc:	2200      	movs	r2, #0
 80041ce:	2120      	movs	r1, #32
 80041d0:	0018      	movs	r0, r3
 80041d2:	f003 f88c 	bl	80072ee <HAL_GPIO_WritePin>
}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <ST7735_Unselect>:

void ST7735_Unselect()
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80041e0:	23a0      	movs	r3, #160	@ 0xa0
 80041e2:	05db      	lsls	r3, r3, #23
 80041e4:	2201      	movs	r2, #1
 80041e6:	2120      	movs	r1, #32
 80041e8:	0018      	movs	r0, r3
 80041ea:	f003 f880 	bl	80072ee <HAL_GPIO_WritePin>
}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <ST7735_Reset>:

void ST7735_Reset()
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80041f8:	2380      	movs	r3, #128	@ 0x80
 80041fa:	0219      	lsls	r1, r3, #8
 80041fc:	23a0      	movs	r3, #160	@ 0xa0
 80041fe:	05db      	lsls	r3, r3, #23
 8004200:	2200      	movs	r2, #0
 8004202:	0018      	movs	r0, r3
 8004204:	f003 f873 	bl	80072ee <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004208:	2005      	movs	r0, #5
 800420a:	f002 fdf9 	bl	8006e00 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	0219      	lsls	r1, r3, #8
 8004212:	23a0      	movs	r3, #160	@ 0xa0
 8004214:	05db      	lsls	r3, r3, #23
 8004216:	2201      	movs	r2, #1
 8004218:	0018      	movs	r0, r3
 800421a:	f003 f868 	bl	80072ee <HAL_GPIO_WritePin>
}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	0002      	movs	r2, r0
 800422c:	1dfb      	adds	r3, r7, #7
 800422e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8004230:	23a0      	movs	r3, #160	@ 0xa0
 8004232:	05db      	lsls	r3, r3, #23
 8004234:	2200      	movs	r2, #0
 8004236:	2110      	movs	r1, #16
 8004238:	0018      	movs	r0, r3
 800423a:	f003 f858 	bl	80072ee <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800423e:	2301      	movs	r3, #1
 8004240:	425b      	negs	r3, r3
 8004242:	1df9      	adds	r1, r7, #7
 8004244:	4803      	ldr	r0, [pc, #12]	@ (8004254 <ST7735_WriteCommand+0x30>)
 8004246:	2201      	movs	r2, #1
 8004248:	f005 f9b4 	bl	80095b4 <HAL_SPI_Transmit>
}
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b002      	add	sp, #8
 8004252:	bd80      	pop	{r7, pc}
 8004254:	20000da8 	.word	0x20000da8

08004258 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8004262:	23a0      	movs	r3, #160	@ 0xa0
 8004264:	05db      	lsls	r3, r3, #23
 8004266:	2201      	movs	r2, #1
 8004268:	2110      	movs	r1, #16
 800426a:	0018      	movs	r0, r3
 800426c:	f003 f83f 	bl	80072ee <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b29a      	uxth	r2, r3
 8004274:	2301      	movs	r3, #1
 8004276:	425b      	negs	r3, r3
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4803      	ldr	r0, [pc, #12]	@ (8004288 <ST7735_WriteData+0x30>)
 800427c:	f005 f99a 	bl	80095b4 <HAL_SPI_Transmit>
}
 8004280:	46c0      	nop			@ (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000da8 	.word	0x20000da8

0800428c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	220f      	movs	r2, #15
 800429c:	18ba      	adds	r2, r7, r2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80042a2:	e04a      	b.n	800433a <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	210b      	movs	r1, #11
 80042ac:	187a      	adds	r2, r7, r1
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 80042b2:	187b      	adds	r3, r7, r1
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff ffb4 	bl	8004224 <ST7735_WriteCommand>

        numArgs = *addr++;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	200a      	movs	r0, #10
 80042c4:	183a      	adds	r2, r7, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80042ca:	183b      	adds	r3, r7, r0
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	230c      	movs	r3, #12
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	2180      	movs	r1, #128	@ 0x80
 80042d6:	400a      	ands	r2, r1
 80042d8:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	183a      	adds	r2, r7, r0
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	217f      	movs	r1, #127	@ 0x7f
 80042e2:	400a      	ands	r2, r1
 80042e4:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80042e6:	183b      	adds	r3, r7, r0
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80042ee:	0004      	movs	r4, r0
 80042f0:	183b      	adds	r3, r7, r0
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff ffad 	bl	8004258 <ST7735_WriteData>
            addr += numArgs;
 80042fe:	193b      	adds	r3, r7, r4
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	18d3      	adds	r3, r2, r3
 8004306:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8004308:	210c      	movs	r1, #12
 800430a:	187b      	adds	r3, r7, r1
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d013      	beq.n	800433a <DisplayInit+0xae>
            ms = *addr++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	187b      	adds	r3, r7, r1
 800431c:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800431e:	187b      	adds	r3, r7, r1
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2bff      	cmp	r3, #255	@ 0xff
 8004324:	d103      	bne.n	800432e <DisplayInit+0xa2>
 8004326:	187b      	adds	r3, r7, r1
 8004328:	22fa      	movs	r2, #250	@ 0xfa
 800432a:	0052      	lsls	r2, r2, #1
 800432c:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800432e:	230c      	movs	r3, #12
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	0018      	movs	r0, r3
 8004336:	f002 fd63 	bl	8006e00 <HAL_Delay>
    while(numCommands--) {
 800433a:	220f      	movs	r2, #15
 800433c:	18bb      	adds	r3, r7, r2
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	18ba      	adds	r2, r7, r2
 8004342:	1e59      	subs	r1, r3, #1
 8004344:	7011      	strb	r1, [r2, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ac      	bne.n	80042a4 <DisplayInit+0x18>
        }
    }
}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	46c0      	nop			@ (mov r8, r8)
 800434e:	46bd      	mov	sp, r7
 8004350:	b005      	add	sp, #20
 8004352:	bd90      	pop	{r4, r7, pc}

08004354 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	0005      	movs	r5, r0
 800435c:	000c      	movs	r4, r1
 800435e:	0010      	movs	r0, r2
 8004360:	0019      	movs	r1, r3
 8004362:	1dfb      	adds	r3, r7, #7
 8004364:	1c2a      	adds	r2, r5, #0
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	1dbb      	adds	r3, r7, #6
 800436a:	1c22      	adds	r2, r4, #0
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	1d7b      	adds	r3, r7, #5
 8004370:	1c02      	adds	r2, r0, #0
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	1c0a      	adds	r2, r1, #0
 8004378:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800437a:	202a      	movs	r0, #42	@ 0x2a
 800437c:	f7ff ff52 	bl	8004224 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8004380:	210c      	movs	r1, #12
 8004382:	187b      	adds	r3, r7, r1
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	4b1c      	ldr	r3, [pc, #112]	@ (80043fc <ST7735_SetAddressWindow+0xa8>)
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	1dfb      	adds	r3, r7, #7
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	18d3      	adds	r3, r2, r3
 8004392:	b2da      	uxtb	r2, r3
 8004394:	187b      	adds	r3, r7, r1
 8004396:	705a      	strb	r2, [r3, #1]
 8004398:	187b      	adds	r3, r7, r1
 800439a:	2200      	movs	r2, #0
 800439c:	709a      	strb	r2, [r3, #2]
 800439e:	4b17      	ldr	r3, [pc, #92]	@ (80043fc <ST7735_SetAddressWindow+0xa8>)
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	1d7b      	adds	r3, r7, #5
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	18d3      	adds	r3, r2, r3
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	187b      	adds	r3, r7, r1
 80043ac:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80043ae:	000c      	movs	r4, r1
 80043b0:	187b      	adds	r3, r7, r1
 80043b2:	2104      	movs	r1, #4
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff ff4f 	bl	8004258 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80043ba:	202b      	movs	r0, #43	@ 0x2b
 80043bc:	f7ff ff32 	bl	8004224 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80043c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004400 <ST7735_SetAddressWindow+0xac>)
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	1dbb      	adds	r3, r7, #6
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	18d3      	adds	r3, r2, r3
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	0021      	movs	r1, r4
 80043ce:	187b      	adds	r3, r7, r1
 80043d0:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <ST7735_SetAddressWindow+0xac>)
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	2104      	movs	r1, #4
 80043e6:	0018      	movs	r0, r3
 80043e8:	f7ff ff36 	bl	8004258 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80043ec:	202c      	movs	r0, #44	@ 0x2c
 80043ee:	f7ff ff19 	bl	8004224 <ST7735_WriteCommand>
}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b004      	add	sp, #16
 80043f8:	bdb0      	pop	{r4, r5, r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	20000a4b 	.word	0x20000a4b
 8004400:	20000a4c 	.word	0x20000a4c

08004404 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	0002      	movs	r2, r0
 800440c:	1dfb      	adds	r3, r7, #7
 800440e:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8004410:	f7ff fed8 	bl	80041c4 <ST7735_Select>
    ST7735_Reset();
 8004414:	f7ff feee 	bl	80041f4 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8004418:	4b0e      	ldr	r3, [pc, #56]	@ (8004454 <ST7735_Init+0x50>)
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff ff36 	bl	800428c <DisplayInit>
    DisplayInit(init_cmds2);
 8004420:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <ST7735_Init+0x54>)
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff ff32 	bl	800428c <DisplayInit>
    DisplayInit(init_cmds3);
 8004428:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <ST7735_Init+0x58>)
 800442a:	0018      	movs	r0, r3
 800442c:	f7ff ff2e 	bl	800428c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <ST7735_Init+0x5c>)
 8004432:	2200      	movs	r2, #0
 8004434:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <ST7735_Init+0x60>)
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800443c:	1dfb      	adds	r3, r7, #7
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	0018      	movs	r0, r3
 8004442:	f000 f811 	bl	8004468 <ST7735_SetRotation>
    ST7735_Unselect();
 8004446:	f7ff fec9 	bl	80041dc <ST7735_Unselect>

}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	46bd      	mov	sp, r7
 800444e:	b002      	add	sp, #8
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	0800ce74 	.word	0x0800ce74
 8004458:	0800ceac 	.word	0x0800ceac
 800445c:	0800cebc 	.word	0x0800cebc
 8004460:	20000a49 	.word	0x20000a49
 8004464:	20000a4a 	.word	0x20000a4a

08004468 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	0002      	movs	r2, r0
 8004470:	1dfb      	adds	r3, r7, #7
 8004472:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8004474:	230f      	movs	r3, #15
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 800447c:	1dfb      	adds	r3, r7, #7
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2203      	movs	r2, #3
 8004482:	4013      	ands	r3, r2
 8004484:	b2da      	uxtb	r2, r3
 8004486:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <ST7735_SetRotation+0xf8>)
 8004488:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800448a:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <ST7735_SetRotation+0xf8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b03      	cmp	r3, #3
 8004490:	d041      	beq.n	8004516 <ST7735_SetRotation+0xae>
 8004492:	dc53      	bgt.n	800453c <ST7735_SetRotation+0xd4>
 8004494:	2b02      	cmp	r3, #2
 8004496:	d02b      	beq.n	80044f0 <ST7735_SetRotation+0x88>
 8004498:	dc50      	bgt.n	800453c <ST7735_SetRotation+0xd4>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <ST7735_SetRotation+0x3c>
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d013      	beq.n	80044ca <ST7735_SetRotation+0x62>
 80044a2:	e04b      	b.n	800453c <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80044a4:	230f      	movs	r3, #15
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	22c0      	movs	r2, #192	@ 0xc0
 80044aa:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80044ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004564 <ST7735_SetRotation+0xfc>)
 80044ae:	22a0      	movs	r2, #160	@ 0xa0
 80044b0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80044b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <ST7735_SetRotation+0x100>)
 80044b4:	2280      	movs	r2, #128	@ 0x80
 80044b6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80044b8:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <ST7735_SetRotation+0x104>)
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <ST7735_SetRotation+0x108>)
 80044be:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80044c0:	4b2c      	ldr	r3, [pc, #176]	@ (8004574 <ST7735_SetRotation+0x10c>)
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004578 <ST7735_SetRotation+0x110>)
 80044c6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80044c8:	e038      	b.n	800453c <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80044ca:	230f      	movs	r3, #15
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	22a0      	movs	r2, #160	@ 0xa0
 80044d0:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80044d2:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <ST7735_SetRotation+0x100>)
 80044d4:	22a0      	movs	r2, #160	@ 0xa0
 80044d6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80044d8:	4b22      	ldr	r3, [pc, #136]	@ (8004564 <ST7735_SetRotation+0xfc>)
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80044de:	4b23      	ldr	r3, [pc, #140]	@ (800456c <ST7735_SetRotation+0x104>)
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <ST7735_SetRotation+0x110>)
 80044e4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80044e6:	4b23      	ldr	r3, [pc, #140]	@ (8004574 <ST7735_SetRotation+0x10c>)
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	4b21      	ldr	r3, [pc, #132]	@ (8004570 <ST7735_SetRotation+0x108>)
 80044ec:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80044ee:	e025      	b.n	800453c <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80044f0:	230f      	movs	r3, #15
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <ST7735_SetRotation+0xfc>)
 80044fa:	22a0      	movs	r2, #160	@ 0xa0
 80044fc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80044fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004568 <ST7735_SetRotation+0x100>)
 8004500:	2280      	movs	r2, #128	@ 0x80
 8004502:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8004504:	4b19      	ldr	r3, [pc, #100]	@ (800456c <ST7735_SetRotation+0x104>)
 8004506:	781a      	ldrb	r2, [r3, #0]
 8004508:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <ST7735_SetRotation+0x108>)
 800450a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800450c:	4b19      	ldr	r3, [pc, #100]	@ (8004574 <ST7735_SetRotation+0x10c>)
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <ST7735_SetRotation+0x110>)
 8004512:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004514:	e012      	b.n	800453c <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004516:	230f      	movs	r3, #15
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2260      	movs	r2, #96	@ 0x60
 800451c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <ST7735_SetRotation+0x100>)
 8004520:	22a0      	movs	r2, #160	@ 0xa0
 8004522:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004524:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <ST7735_SetRotation+0xfc>)
 8004526:	2280      	movs	r2, #128	@ 0x80
 8004528:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800452a:	4b10      	ldr	r3, [pc, #64]	@ (800456c <ST7735_SetRotation+0x104>)
 800452c:	781a      	ldrb	r2, [r3, #0]
 800452e:	4b12      	ldr	r3, [pc, #72]	@ (8004578 <ST7735_SetRotation+0x110>)
 8004530:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <ST7735_SetRotation+0x10c>)
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <ST7735_SetRotation+0x108>)
 8004538:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800453a:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 800453c:	f7ff fe42 	bl	80041c4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8004540:	2036      	movs	r0, #54	@ 0x36
 8004542:	f7ff fe6f 	bl	8004224 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8004546:	230f      	movs	r3, #15
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	2101      	movs	r1, #1
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff fe83 	bl	8004258 <ST7735_WriteData>
  ST7735_Unselect();
 8004552:	f7ff fe43 	bl	80041dc <ST7735_Unselect>
}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b004      	add	sp, #16
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	20000a48 	.word	0x20000a48
 8004564:	20000a46 	.word	0x20000a46
 8004568:	20000a44 	.word	0x20000a44
 800456c:	20000a49 	.word	0x20000a49
 8004570:	20000a4b 	.word	0x20000a4b
 8004574:	20000a4a 	.word	0x20000a4a
 8004578:	20000a4c 	.word	0x20000a4c

0800457c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	0004      	movs	r4, r0
 8004584:	0008      	movs	r0, r1
 8004586:	0011      	movs	r1, r2
 8004588:	1dbb      	adds	r3, r7, #6
 800458a:	1c22      	adds	r2, r4, #0
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	1c02      	adds	r2, r0, #0
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	1cbb      	adds	r3, r7, #2
 8004596:	1c0a      	adds	r2, r1, #0
 8004598:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 800459a:	1dbb      	adds	r3, r7, #6
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	4a1c      	ldr	r2, [pc, #112]	@ (8004610 <ST7735_DrawPixel+0x94>)
 80045a0:	2100      	movs	r1, #0
 80045a2:	5e52      	ldrsh	r2, [r2, r1]
 80045a4:	4293      	cmp	r3, r2
 80045a6:	da2f      	bge.n	8004608 <ST7735_DrawPixel+0x8c>
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	4a19      	ldr	r2, [pc, #100]	@ (8004614 <ST7735_DrawPixel+0x98>)
 80045ae:	2100      	movs	r1, #0
 80045b0:	5e52      	ldrsh	r2, [r2, r1]
 80045b2:	4293      	cmp	r3, r2
 80045b4:	da28      	bge.n	8004608 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 80045b6:	f7ff fe05 	bl	80041c4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80045ba:	1dbb      	adds	r3, r7, #6
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b2d9      	uxtb	r1, r3
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	3301      	adds	r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f7ff febb 	bl	8004354 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80045de:	1cbb      	adds	r3, r7, #2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	210c      	movs	r1, #12
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	1cbb      	adds	r3, r7, #2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80045f8:	187b      	adds	r3, r7, r1
 80045fa:	2102      	movs	r1, #2
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff fe2b 	bl	8004258 <ST7735_WriteData>

    ST7735_Unselect();
 8004602:	f7ff fdeb 	bl	80041dc <ST7735_Unselect>
 8004606:	e000      	b.n	800460a <ST7735_DrawPixel+0x8e>
        return;
 8004608:	46c0      	nop			@ (mov r8, r8)
}
 800460a:	46bd      	mov	sp, r7
 800460c:	b005      	add	sp, #20
 800460e:	bd90      	pop	{r4, r7, pc}
 8004610:	20000a44 	.word	0x20000a44
 8004614:	20000a46 	.word	0x20000a46

08004618 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004618:	b5b0      	push	{r4, r5, r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	0005      	movs	r5, r0
 8004620:	000c      	movs	r4, r1
 8004622:	0010      	movs	r0, r2
 8004624:	0019      	movs	r1, r3
 8004626:	1dbb      	adds	r3, r7, #6
 8004628:	1c2a      	adds	r2, r5, #0
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	1d3b      	adds	r3, r7, #4
 800462e:	1c22      	adds	r2, r4, #0
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	1cbb      	adds	r3, r7, #2
 8004634:	1c02      	adds	r2, r0, #0
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	003b      	movs	r3, r7
 800463a:	1c0a      	adds	r2, r1, #0
 800463c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 800463e:	1dbb      	adds	r3, r7, #6
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	4a2a      	ldr	r2, [pc, #168]	@ (80046ec <ST7735_DrawImage+0xd4>)
 8004644:	2100      	movs	r1, #0
 8004646:	5e52      	ldrsh	r2, [r2, r1]
 8004648:	4293      	cmp	r3, r2
 800464a:	da47      	bge.n	80046dc <ST7735_DrawImage+0xc4>
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	4a27      	ldr	r2, [pc, #156]	@ (80046f0 <ST7735_DrawImage+0xd8>)
 8004652:	2100      	movs	r1, #0
 8004654:	5e52      	ldrsh	r2, [r2, r1]
 8004656:	4293      	cmp	r3, r2
 8004658:	da40      	bge.n	80046dc <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 800465a:	1dbb      	adds	r3, r7, #6
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	1cbb      	adds	r3, r7, #2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	4a21      	ldr	r2, [pc, #132]	@ (80046ec <ST7735_DrawImage+0xd4>)
 8004666:	2100      	movs	r1, #0
 8004668:	5e52      	ldrsh	r2, [r2, r1]
 800466a:	4293      	cmp	r3, r2
 800466c:	dc38      	bgt.n	80046e0 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	003b      	movs	r3, r7
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	18d3      	adds	r3, r2, r3
 8004678:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <ST7735_DrawImage+0xd8>)
 800467a:	2100      	movs	r1, #0
 800467c:	5e52      	ldrsh	r2, [r2, r1]
 800467e:	4293      	cmp	r3, r2
 8004680:	dc30      	bgt.n	80046e4 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8004682:	f7ff fd9f 	bl	80041c4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004686:	1dbb      	adds	r3, r7, #6
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b2d8      	uxtb	r0, r3
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b2d9      	uxtb	r1, r3
 8004692:	1dbb      	adds	r3, r7, #6
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	1cbb      	adds	r3, r7, #2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	18d3      	adds	r3, r2, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b2dc      	uxtb	r4, r3
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	003b      	movs	r3, r7
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	18d3      	adds	r3, r2, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	0022      	movs	r2, r4
 80046bc:	f7ff fe4a 	bl	8004354 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80046c0:	1cbb      	adds	r3, r7, #2
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	003a      	movs	r2, r7
 80046c6:	8812      	ldrh	r2, [r2, #0]
 80046c8:	4353      	muls	r3, r2
 80046ca:	005a      	lsls	r2, r3, #1
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff fdc1 	bl	8004258 <ST7735_WriteData>
    ST7735_Unselect();
 80046d6:	f7ff fd81 	bl	80041dc <ST7735_Unselect>
 80046da:	e004      	b.n	80046e6 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	e002      	b.n	80046e6 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80046e0:	46c0      	nop			@ (mov r8, r8)
 80046e2:	e000      	b.n	80046e6 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 80046e4:	46c0      	nop			@ (mov r8, r8)
}
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b002      	add	sp, #8
 80046ea:	bdb0      	pop	{r4, r5, r7, pc}
 80046ec:	20000a44 	.word	0x20000a44
 80046f0:	20000a46 	.word	0x20000a46

080046f4 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80046f4:	b5b0      	push	{r4, r5, r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <minmea_tocoord+0x14>
        return NAN;
 8004704:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <minmea_tocoord+0x84>)
 8004706:	e033      	b.n	8004770 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2164      	movs	r1, #100	@ 0x64
 8004712:	434b      	muls	r3, r1
 8004714:	0019      	movs	r1, r3
 8004716:	0010      	movs	r0, r2
 8004718:	f7fb fd92 	bl	8000240 <__divsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2164      	movs	r1, #100	@ 0x64
 800472a:	434b      	muls	r3, r1
 800472c:	0019      	movs	r1, r3
 800472e:	0010      	movs	r0, r2
 8004730:	f7fb fe6c 	bl	800040c <__aeabi_idivmod>
 8004734:	000b      	movs	r3, r1
 8004736:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7fc ffa5 	bl	8001688 <__aeabi_i2f>
 800473e:	1c04      	adds	r4, r0, #0
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f7fc ffa1 	bl	8001688 <__aeabi_i2f>
 8004746:	1c05      	adds	r5, r0, #0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	0013      	movs	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	0018      	movs	r0, r3
 8004756:	f7fc ff97 	bl	8001688 <__aeabi_i2f>
 800475a:	1c03      	adds	r3, r0, #0
 800475c:	1c19      	adds	r1, r3, #0
 800475e:	1c28      	adds	r0, r5, #0
 8004760:	f7fc f9e6 	bl	8000b30 <__aeabi_fdiv>
 8004764:	1c03      	adds	r3, r0, #0
 8004766:	1c19      	adds	r1, r3, #0
 8004768:	1c20      	adds	r0, r4, #0
 800476a:	f7fb ffef 	bl	800074c <__aeabi_fadd>
 800476e:	1c03      	adds	r3, r0, #0
}
 8004770:	1c18      	adds	r0, r3, #0
 8004772:	46bd      	mov	sp, r7
 8004774:	b004      	add	sp, #16
 8004776:	bdb0      	pop	{r4, r5, r7, pc}
 8004778:	7fc00000 	.word	0x7fc00000

0800477c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b08e      	sub	sp, #56	@ 0x38
 8004780:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004782:	f002 fab7 	bl	8006cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004786:	f000 fd23 	bl	80051d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 800478a:	4bde      	ldr	r3, [pc, #888]	@ (8004b04 <main+0x388>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8004790:	4bdd      	ldr	r3, [pc, #884]	@ (8004b08 <main+0x38c>)
 8004792:	4ade      	ldr	r2, [pc, #888]	@ (8004b0c <main+0x390>)
 8004794:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8004796:	4bdc      	ldr	r3, [pc, #880]	@ (8004b08 <main+0x38c>)
 8004798:	2234      	movs	r2, #52	@ 0x34
 800479a:	32ff      	adds	r2, #255	@ 0xff
 800479c:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 800479e:	4bdc      	ldr	r3, [pc, #880]	@ (8004b10 <main+0x394>)
 80047a0:	4adc      	ldr	r2, [pc, #880]	@ (8004b14 <main+0x398>)
 80047a2:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 80047a4:	4bda      	ldr	r3, [pc, #872]	@ (8004b10 <main+0x394>)
 80047a6:	2232      	movs	r2, #50	@ 0x32
 80047a8:	32ff      	adds	r2, #255	@ 0xff
 80047aa:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 80047ac:	4bda      	ldr	r3, [pc, #872]	@ (8004b18 <main+0x39c>)
 80047ae:	4ad6      	ldr	r2, [pc, #856]	@ (8004b08 <main+0x38c>)
 80047b0:	ca03      	ldmia	r2!, {r0, r1}
 80047b2:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 80047b4:	4bd8      	ldr	r3, [pc, #864]	@ (8004b18 <main+0x39c>)
 80047b6:	4ad6      	ldr	r2, [pc, #856]	@ (8004b10 <main+0x394>)
 80047b8:	3308      	adds	r3, #8
 80047ba:	ca03      	ldmia	r2!, {r0, r1}
 80047bc:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 80047be:	4bd7      	ldr	r3, [pc, #860]	@ (8004b1c <main+0x3a0>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 80047c4:	4ad5      	ldr	r2, [pc, #852]	@ (8004b1c <main+0x3a0>)
 80047c6:	2396      	movs	r3, #150	@ 0x96
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2168      	movs	r1, #104	@ 0x68
 80047cc:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 80047ce:	4ad3      	ldr	r2, [pc, #844]	@ (8004b1c <main+0x3a0>)
 80047d0:	232e      	movs	r3, #46	@ 0x2e
 80047d2:	33ff      	adds	r3, #255	@ 0xff
 80047d4:	2169      	movs	r1, #105	@ 0x69
 80047d6:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 80047d8:	4ad0      	ldr	r2, [pc, #832]	@ (8004b1c <main+0x3a0>)
 80047da:	238c      	movs	r3, #140	@ 0x8c
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2100      	movs	r1, #0
 80047e0:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 80047e2:	4bce      	ldr	r3, [pc, #824]	@ (8004b1c <main+0x3a0>)
 80047e4:	2264      	movs	r2, #100	@ 0x64
 80047e6:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 80047e8:	4bcc      	ldr	r3, [pc, #816]	@ (8004b1c <main+0x3a0>)
 80047ea:	2203      	movs	r2, #3
 80047ec:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 80047ee:	4acb      	ldr	r2, [pc, #812]	@ (8004b1c <main+0x3a0>)
 80047f0:	2390      	movs	r3, #144	@ 0x90
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2100      	movs	r1, #0
 80047f6:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 80047f8:	4ac8      	ldr	r2, [pc, #800]	@ (8004b1c <main+0x3a0>)
 80047fa:	238e      	movs	r3, #142	@ 0x8e
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2100      	movs	r1, #0
 8004800:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 8004802:	4ac6      	ldr	r2, [pc, #792]	@ (8004b1c <main+0x3a0>)
 8004804:	2394      	movs	r3, #148	@ 0x94
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	49c5      	ldr	r1, [pc, #788]	@ (8004b20 <main+0x3a4>)
 800480a:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 800480c:	4bc5      	ldr	r3, [pc, #788]	@ (8004b24 <main+0x3a8>)
 800480e:	4ac6      	ldr	r2, [pc, #792]	@ (8004b28 <main+0x3ac>)
 8004810:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8004812:	4bc4      	ldr	r3, [pc, #784]	@ (8004b24 <main+0x3a8>)
 8004814:	4ac5      	ldr	r2, [pc, #788]	@ (8004b2c <main+0x3b0>)
 8004816:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 8004818:	4bc0      	ldr	r3, [pc, #768]	@ (8004b1c <main+0x3a0>)
 800481a:	4ac2      	ldr	r2, [pc, #776]	@ (8004b24 <main+0x3a8>)
 800481c:	3318      	adds	r3, #24
 800481e:	ca03      	ldmia	r2!, {r0, r1}
 8004820:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8004822:	4bbe      	ldr	r3, [pc, #760]	@ (8004b1c <main+0x3a0>)
 8004824:	4abf      	ldr	r2, [pc, #764]	@ (8004b24 <main+0x3a8>)
 8004826:	3320      	adds	r3, #32
 8004828:	ca03      	ldmia	r2!, {r0, r1}
 800482a:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 800482c:	4bbb      	ldr	r3, [pc, #748]	@ (8004b1c <main+0x3a0>)
 800482e:	4abd      	ldr	r2, [pc, #756]	@ (8004b24 <main+0x3a8>)
 8004830:	3328      	adds	r3, #40	@ 0x28
 8004832:	ca03      	ldmia	r2!, {r0, r1}
 8004834:	c303      	stmia	r3!, {r0, r1}
  game.time.hours=0;
 8004836:	4bb9      	ldr	r3, [pc, #740]	@ (8004b1c <main+0x3a0>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
  gpsThreshold = .0001;
 800483c:	4bbc      	ldr	r3, [pc, #752]	@ (8004b30 <main+0x3b4>)
 800483e:	4abd      	ldr	r2, [pc, #756]	@ (8004b34 <main+0x3b8>)
 8004840:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004842:	f000 fecb 	bl	80055dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8004846:	f000 fd25 	bl	8005294 <MX_I2C1_Init>
  MX_SPI1_Init();
 800484a:	f000 fd63 	bl	8005314 <MX_SPI1_Init>
  MX_TIM17_Init();
 800484e:	f000 fda1 	bl	8005394 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8004852:	f000 fe27 	bl	80054a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004856:	f000 fe73 	bl	8005540 <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 800485a:	f7ff fcbf 	bl	80041dc <ST7735_Unselect>
  ST7735_Init(1);
 800485e:	2001      	movs	r0, #1
 8004860:	f7ff fdd0 	bl	8004404 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8004864:	4bb4      	ldr	r3, [pc, #720]	@ (8004b38 <main+0x3bc>)
 8004866:	2241      	movs	r2, #65	@ 0x41
 8004868:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 800486a:	4bb3      	ldr	r3, [pc, #716]	@ (8004b38 <main+0x3bc>)
 800486c:	2242      	movs	r2, #66	@ 0x42
 800486e:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8004870:	4bb2      	ldr	r3, [pc, #712]	@ (8004b3c <main+0x3c0>)
 8004872:	2205      	movs	r2, #5
 8004874:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8004876:	4bb1      	ldr	r3, [pc, #708]	@ (8004b3c <main+0x3c0>)
 8004878:	2240      	movs	r2, #64	@ 0x40
 800487a:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 800487c:	2327      	movs	r3, #39	@ 0x27
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8004884:	2102      	movs	r1, #2
 8004886:	2019      	movs	r0, #25
 8004888:	f001 f918 	bl	8005abc <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 800488c:	2101      	movs	r1, #1
 800488e:	207c      	movs	r0, #124	@ 0x7c
 8004890:	f001 f914 	bl	8005abc <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8004894:	2138      	movs	r1, #56	@ 0x38
 8004896:	201a      	movs	r0, #26
 8004898:	f001 f910 	bl	8005abc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 800489c:	2104      	movs	r1, #4
 800489e:	201b      	movs	r0, #27
 80048a0:	f001 f90c 	bl	8005abc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 80048a4:	2180      	movs	r1, #128	@ 0x80
 80048a6:	201f      	movs	r0, #31
 80048a8:	f001 f908 	bl	8005abc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 80048ac:	2180      	movs	r1, #128	@ 0x80
 80048ae:	2021      	movs	r0, #33	@ 0x21
 80048b0:	f001 f904 	bl	8005abc <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 80048b4:	2101      	movs	r1, #1
 80048b6:	2018      	movs	r0, #24
 80048b8:	f001 f900 	bl	8005abc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 80048bc:	2101      	movs	r1, #1
 80048be:	2020      	movs	r0, #32
 80048c0:	f001 f8fc 	bl	8005abc <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7ff fb43 	bl	8003f50 <fillScreen>
  while (1)
  {
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 80048ca:	4b8e      	ldr	r3, [pc, #568]	@ (8004b04 <main+0x388>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	0019      	movs	r1, r3
 80048d0:	2015      	movs	r0, #21
 80048d2:	f001 f8c1 	bl	8005a58 <_ADXL343_ReadReg8>

	  //SendData();
	  //ReceiveData();
	  //_ADXL343_ReadReg8(0x00, &steps, 1);
	  if(checkTime){
 80048d6:	4b9a      	ldr	r3, [pc, #616]	@ (8004b40 <main+0x3c4>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02b      	beq.n	8004936 <main+0x1ba>
	  if(((game.time.minutes%dayLength)==0) && game.time.seconds>0){
 80048de:	4b8f      	ldr	r3, [pc, #572]	@ (8004b1c <main+0x3a0>)
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	4b98      	ldr	r3, [pc, #608]	@ (8004b44 <main+0x3c8>)
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	0019      	movs	r1, r3
 80048e8:	0010      	movs	r0, r2
 80048ea:	f7fb fd8f 	bl	800040c <__aeabi_idivmod>
 80048ee:	1e0b      	subs	r3, r1, #0
 80048f0:	d10b      	bne.n	800490a <main+0x18e>
 80048f2:	4b8a      	ldr	r3, [pc, #552]	@ (8004b1c <main+0x3a0>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dd07      	ble.n	800490a <main+0x18e>
		  game.stepsToday=0;
 80048fa:	4a88      	ldr	r2, [pc, #544]	@ (8004b1c <main+0x3a0>)
 80048fc:	2390      	movs	r3, #144	@ 0x90
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	2100      	movs	r1, #0
 8004902:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 8004904:	4b8e      	ldr	r3, [pc, #568]	@ (8004b40 <main+0x3c4>)
 8004906:	2200      	movs	r2, #0
 8004908:	801a      	strh	r2, [r3, #0]
	  }

	  if(((game.time.minutes%weekLength)==0) && game.time.seconds>0){
 800490a:	4b84      	ldr	r3, [pc, #528]	@ (8004b1c <main+0x3a0>)
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	4b8e      	ldr	r3, [pc, #568]	@ (8004b48 <main+0x3cc>)
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	0019      	movs	r1, r3
 8004914:	0010      	movs	r0, r2
 8004916:	f7fb fd79 	bl	800040c <__aeabi_idivmod>
 800491a:	1e0b      	subs	r3, r1, #0
 800491c:	d10b      	bne.n	8004936 <main+0x1ba>
 800491e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b1c <main+0x3a0>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	dd07      	ble.n	8004936 <main+0x1ba>
		  game.weeklySteps=0;
 8004926:	4a7d      	ldr	r2, [pc, #500]	@ (8004b1c <main+0x3a0>)
 8004928:	238e      	movs	r3, #142	@ 0x8e
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	2100      	movs	r1, #0
 800492e:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 8004930:	4b83      	ldr	r3, [pc, #524]	@ (8004b40 <main+0x3c4>)
 8004932:	2200      	movs	r2, #0
 8004934:	801a      	strh	r2, [r3, #0]
	  }
	  }
	  if((game.time.minutes%dayLength)==1) checkTime=1;
 8004936:	4b79      	ldr	r3, [pc, #484]	@ (8004b1c <main+0x3a0>)
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	4b82      	ldr	r3, [pc, #520]	@ (8004b44 <main+0x3c8>)
 800493c:	881b      	ldrh	r3, [r3, #0]
 800493e:	0019      	movs	r1, r3
 8004940:	0010      	movs	r0, r2
 8004942:	f7fb fd63 	bl	800040c <__aeabi_idivmod>
 8004946:	000b      	movs	r3, r1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d102      	bne.n	8004952 <main+0x1d6>
 800494c:	4b7c      	ldr	r3, [pc, #496]	@ (8004b40 <main+0x3c4>)
 800494e:	2201      	movs	r2, #1
 8004950:	801a      	strh	r2, [r3, #0]
	  if(steps!=0){
 8004952:	4b6c      	ldr	r3, [pc, #432]	@ (8004b04 <main+0x388>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d033      	beq.n	80049c2 <main+0x246>
	  game.stepsToday +=steps*game.numLocations;
 800495a:	4a70      	ldr	r2, [pc, #448]	@ (8004b1c <main+0x3a0>)
 800495c:	2390      	movs	r3, #144	@ 0x90
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	58d2      	ldr	r2, [r2, r3]
 8004962:	4b68      	ldr	r3, [pc, #416]	@ (8004b04 <main+0x388>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	0019      	movs	r1, r3
 8004968:	4b6c      	ldr	r3, [pc, #432]	@ (8004b1c <main+0x3a0>)
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	434b      	muls	r3, r1
 800496e:	18d1      	adds	r1, r2, r3
 8004970:	4a6a      	ldr	r2, [pc, #424]	@ (8004b1c <main+0x3a0>)
 8004972:	2390      	movs	r3, #144	@ 0x90
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps*game.numLocations;
 8004978:	4a68      	ldr	r2, [pc, #416]	@ (8004b1c <main+0x3a0>)
 800497a:	238e      	movs	r3, #142	@ 0x8e
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	58d2      	ldr	r2, [r2, r3]
 8004980:	4b60      	ldr	r3, [pc, #384]	@ (8004b04 <main+0x388>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	0019      	movs	r1, r3
 8004986:	4b65      	ldr	r3, [pc, #404]	@ (8004b1c <main+0x3a0>)
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	434b      	muls	r3, r1
 800498c:	18d1      	adds	r1, r2, r3
 800498e:	4a63      	ldr	r2, [pc, #396]	@ (8004b1c <main+0x3a0>)
 8004990:	238e      	movs	r3, #142	@ 0x8e
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	50d1      	str	r1, [r2, r3]
	  game.allSteps+=steps*game.numLocations;
 8004996:	4a61      	ldr	r2, [pc, #388]	@ (8004b1c <main+0x3a0>)
 8004998:	238c      	movs	r3, #140	@ 0x8c
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	58d2      	ldr	r2, [r2, r3]
 800499e:	4b59      	ldr	r3, [pc, #356]	@ (8004b04 <main+0x388>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	0019      	movs	r1, r3
 80049a4:	4b5d      	ldr	r3, [pc, #372]	@ (8004b1c <main+0x3a0>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	434b      	muls	r3, r1
 80049aa:	18d1      	adds	r1, r2, r3
 80049ac:	4a5b      	ldr	r2, [pc, #364]	@ (8004b1c <main+0x3a0>)
 80049ae:	238c      	movs	r3, #140	@ 0x8c
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	50d1      	str	r1, [r2, r3]
	  steps=0;
 80049b4:	4b53      	ldr	r3, [pc, #332]	@ (8004b04 <main+0x388>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
	  _ADXL343_WriteReg8(0x7E, 0xB1);
 80049ba:	21b1      	movs	r1, #177	@ 0xb1
 80049bc:	207e      	movs	r0, #126	@ 0x7e
 80049be:	f001 f87d 	bl	8005abc <_ADXL343_WriteReg8>
	  }
	  ++updateScreen;
 80049c2:	4b62      	ldr	r3, [pc, #392]	@ (8004b4c <main+0x3d0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	4b60      	ldr	r3, [pc, #384]	@ (8004b4c <main+0x3d0>)
 80049ca:	601a      	str	r2, [r3, #0]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 80049cc:	4b60      	ldr	r3, [pc, #384]	@ (8004b50 <main+0x3d4>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d100      	bne.n	80049d6 <main+0x25a>
 80049d4:	e2aa      	b.n	8004f2c <main+0x7b0>
 80049d6:	dd01      	ble.n	80049dc <main+0x260>
 80049d8:	f000 fbc9 	bl	800516e <main+0x9f2>
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d100      	bne.n	80049e2 <main+0x266>
 80049e0:	e23d      	b.n	8004e5e <main+0x6e2>
 80049e2:	dd01      	ble.n	80049e8 <main+0x26c>
 80049e4:	f000 fbc3 	bl	800516e <main+0x9f2>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d100      	bne.n	80049ee <main+0x272>
 80049ec:	e0c2      	b.n	8004b74 <main+0x3f8>
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d001      	beq.n	80049f6 <main+0x27a>
 80049f2:	f000 fbbc 	bl	800516e <main+0x9f2>
	  case Main:
		  if((totalFrames)%600==0) GetLatLon();
 80049f6:	4b57      	ldr	r3, [pc, #348]	@ (8004b54 <main+0x3d8>)
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	2296      	movs	r2, #150	@ 0x96
 80049fc:	0091      	lsls	r1, r2, #2
 80049fe:	0018      	movs	r0, r3
 8004a00:	f7fb fc1a 	bl	8000238 <__aeabi_uidivmod>
 8004a04:	000b      	movs	r3, r1
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <main+0x294>
 8004a0c:	f001 f87e 	bl	8005b0c <GetLatLon>
		  if(updateScreen>=5)
 8004a10:	4b4e      	ldr	r3, [pc, #312]	@ (8004b4c <main+0x3d0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d92a      	bls.n	8004a6e <main+0x2f2>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8004a18:	4b3f      	ldr	r3, [pc, #252]	@ (8004b18 <main+0x39c>)
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 ffe9 	bl	80059f4 <Animate>
			  updateScreen = 0;
 8004a22:	4b4a      	ldr	r3, [pc, #296]	@ (8004b4c <main+0x3d0>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
			  //Update steps
			  drawString(0,150,"-SILLY LITTLE GUY-",WHITE,BLACK,1,1);
 8004a28:	2301      	movs	r3, #1
 8004a2a:	425b      	negs	r3, r3
 8004a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b58 <main+0x3dc>)
 8004a2e:	2101      	movs	r1, #1
 8004a30:	9102      	str	r1, [sp, #8]
 8004a32:	2101      	movs	r1, #1
 8004a34:	9101      	str	r1, [sp, #4]
 8004a36:	2100      	movs	r1, #0
 8004a38:	9100      	str	r1, [sp, #0]
 8004a3a:	2196      	movs	r1, #150	@ 0x96
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7ff f942 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Steps: %d ", game.stepsToday);
 8004a42:	4a36      	ldr	r2, [pc, #216]	@ (8004b1c <main+0x3a0>)
 8004a44:	2390      	movs	r3, #144	@ 0x90
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	58d2      	ldr	r2, [r2, r3]
 8004a4a:	4944      	ldr	r1, [pc, #272]	@ (8004b5c <main+0x3e0>)
 8004a4c:	4b44      	ldr	r3, [pc, #272]	@ (8004b60 <main+0x3e4>)
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f007 f84c 	bl	800baec <siprintf>
			  drawString(0, 10, buffer2, WHITE, BLACK, 1, 1);
 8004a54:	2301      	movs	r3, #1
 8004a56:	425b      	negs	r3, r3
 8004a58:	4a41      	ldr	r2, [pc, #260]	@ (8004b60 <main+0x3e4>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	9102      	str	r1, [sp, #8]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	9101      	str	r1, [sp, #4]
 8004a62:	2100      	movs	r1, #0
 8004a64:	9100      	str	r1, [sp, #0]
 8004a66:	210a      	movs	r1, #10
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7ff f92c 	bl	8003cc6 <drawString>
		  }

		  //Interact with the SLG
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET)
 8004a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b64 <main+0x3e8>)
 8004a70:	2102      	movs	r1, #2
 8004a72:	0018      	movs	r0, r3
 8004a74:	f002 fc1e 	bl	80072b4 <HAL_GPIO_ReadPin>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d107      	bne.n	8004a8e <main+0x312>
		  {
			  effect = Evolution;
 8004a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b68 <main+0x3ec>)
 8004a80:	2206      	movs	r2, #6
 8004a82:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004a84:	4b38      	ldr	r3, [pc, #224]	@ (8004b68 <main+0x3ec>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 fe59 	bl	8005740 <PlayEffect>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ) {
 8004a8e:	4b37      	ldr	r3, [pc, #220]	@ (8004b6c <main+0x3f0>)
 8004a90:	2104      	movs	r1, #4
 8004a92:	0018      	movs	r0, r3
 8004a94:	f002 fc0e 	bl	80072b4 <HAL_GPIO_ReadPin>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d111      	bne.n	8004ac2 <main+0x346>
			  effect = MenuBeep;
 8004a9e:	4b32      	ldr	r3, [pc, #200]	@ (8004b68 <main+0x3ec>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004aa4:	4b30      	ldr	r3, [pc, #192]	@ (8004b68 <main+0x3ec>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f000 fe49 	bl	8005740 <PlayEffect>

			  currentMenu = Settings;
 8004aae:	4b28      	ldr	r3, [pc, #160]	@ (8004b50 <main+0x3d4>)
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8004b70 <main+0x3f4>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8004aba:	2000      	movs	r0, #0
 8004abc:	f7ff fa48 	bl	8003f50 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8004ac0:	e355      	b.n	800516e <main+0x9f2>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8004ac2:	2380      	movs	r3, #128	@ 0x80
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	23a0      	movs	r3, #160	@ 0xa0
 8004ac8:	05db      	lsls	r3, r3, #23
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f002 fbf1 	bl	80072b4 <HAL_GPIO_ReadPin>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d111      	bne.n	8004afc <main+0x380>
			  effect = MenuBeep;
 8004ad8:	4b23      	ldr	r3, [pc, #140]	@ (8004b68 <main+0x3ec>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004ade:	4b22      	ldr	r3, [pc, #136]	@ (8004b68 <main+0x3ec>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f000 fe2c 	bl	8005740 <PlayEffect>
			  currentMenu = StatsDisplay;
 8004ae8:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <main+0x3d4>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004aee:	4b20      	ldr	r3, [pc, #128]	@ (8004b70 <main+0x3f4>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8004af4:	2000      	movs	r0, #0
 8004af6:	f7ff fa2b 	bl	8003f50 <fillScreen>
		  break;
 8004afa:	e338      	b.n	800516e <main+0x9f2>
			  canChange = 1;
 8004afc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b70 <main+0x3f4>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
		  break;
 8004b02:	e334      	b.n	800516e <main+0x9f2>
 8004b04:	20000d18 	.word	0x20000d18
 8004b08:	20000c80 	.word	0x20000c80
 8004b0c:	20000008 	.word	0x20000008
 8004b10:	20000c88 	.word	0x20000c88
 8004b14:	200004d4 	.word	0x200004d4
 8004b18:	20000c90 	.word	0x20000c90
 8004b1c:	20000a54 	.word	0x20000a54
 8004b20:	00004e20 	.word	0x00004e20
 8004b24:	20000ba0 	.word	0x20000ba0
 8004b28:	414587dd 	.word	0x414587dd
 8004b2c:	c2b233c5 	.word	0xc2b233c5
 8004b30:	20000ca4 	.word	0x20000ca4
 8004b34:	38d1b717 	.word	0x38d1b717
 8004b38:	20000bfc 	.word	0x20000bfc
 8004b3c:	40014800 	.word	0x40014800
 8004b40:	20000000 	.word	0x20000000
 8004b44:	20000002 	.word	0x20000002
 8004b48:	20000004 	.word	0x20000004
 8004b4c:	20000c7c 	.word	0x20000c7c
 8004b50:	200009c4 	.word	0x200009c4
 8004b54:	20000bf8 	.word	0x20000bf8
 8004b58:	0800c658 	.word	0x0800c658
 8004b5c:	0800c66c 	.word	0x0800c66c
 8004b60:	20000cb4 	.word	0x20000cb4
 8004b64:	50000800 	.word	0x50000800
 8004b68:	20000a50 	.word	0x20000a50
 8004b6c:	50000400 	.word	0x50000400
 8004b70:	200009c5 	.word	0x200009c5
	  case StatsDisplay:

		  if(updateScreen>=5)
 8004b74:	4bd4      	ldr	r3, [pc, #848]	@ (8004ec8 <main+0x74c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d800      	bhi.n	8004b7e <main+0x402>
 8004b7c:	e151      	b.n	8004e22 <main+0x6a6>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004b7e:	2301      	movs	r3, #1
 8004b80:	425b      	negs	r3, r3
 8004b82:	4ad2      	ldr	r2, [pc, #840]	@ (8004ecc <main+0x750>)
 8004b84:	2101      	movs	r1, #1
 8004b86:	9102      	str	r1, [sp, #8]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	9101      	str	r1, [sp, #4]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	9100      	str	r1, [sp, #0]
 8004b90:	2196      	movs	r1, #150	@ 0x96
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7ff f897 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004b98:	4acd      	ldr	r2, [pc, #820]	@ (8004ed0 <main+0x754>)
 8004b9a:	2390      	movs	r3, #144	@ 0x90
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	58d2      	ldr	r2, [r2, r3]
 8004ba0:	49cc      	ldr	r1, [pc, #816]	@ (8004ed4 <main+0x758>)
 8004ba2:	4bcd      	ldr	r3, [pc, #820]	@ (8004ed8 <main+0x75c>)
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f006 ffa1 	bl	800baec <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004baa:	2301      	movs	r3, #1
 8004bac:	425b      	negs	r3, r3
 8004bae:	4aca      	ldr	r2, [pc, #808]	@ (8004ed8 <main+0x75c>)
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	9102      	str	r1, [sp, #8]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	9101      	str	r1, [sp, #4]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	9100      	str	r1, [sp, #0]
 8004bbc:	218c      	movs	r1, #140	@ 0x8c
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f7ff f881 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004bc4:	4ac2      	ldr	r2, [pc, #776]	@ (8004ed0 <main+0x754>)
 8004bc6:	238e      	movs	r3, #142	@ 0x8e
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	58d2      	ldr	r2, [r2, r3]
 8004bcc:	49c3      	ldr	r1, [pc, #780]	@ (8004edc <main+0x760>)
 8004bce:	4bc2      	ldr	r3, [pc, #776]	@ (8004ed8 <main+0x75c>)
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f006 ff8b 	bl	800baec <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	425b      	negs	r3, r3
 8004bda:	4abf      	ldr	r2, [pc, #764]	@ (8004ed8 <main+0x75c>)
 8004bdc:	2101      	movs	r1, #1
 8004bde:	9102      	str	r1, [sp, #8]
 8004be0:	2101      	movs	r1, #1
 8004be2:	9101      	str	r1, [sp, #4]
 8004be4:	2100      	movs	r1, #0
 8004be6:	9100      	str	r1, [sp, #0]
 8004be8:	2182      	movs	r1, #130	@ 0x82
 8004bea:	2000      	movs	r0, #0
 8004bec:	f7ff f86b 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 8004bf0:	4ab7      	ldr	r2, [pc, #732]	@ (8004ed0 <main+0x754>)
 8004bf2:	238c      	movs	r3, #140	@ 0x8c
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	58d2      	ldr	r2, [r2, r3]
 8004bf8:	49b9      	ldr	r1, [pc, #740]	@ (8004ee0 <main+0x764>)
 8004bfa:	4bb7      	ldr	r3, [pc, #732]	@ (8004ed8 <main+0x75c>)
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f006 ff75 	bl	800baec <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004c02:	2301      	movs	r3, #1
 8004c04:	425b      	negs	r3, r3
 8004c06:	4ab4      	ldr	r2, [pc, #720]	@ (8004ed8 <main+0x75c>)
 8004c08:	2101      	movs	r1, #1
 8004c0a:	9102      	str	r1, [sp, #8]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	9101      	str	r1, [sp, #4]
 8004c10:	2100      	movs	r1, #0
 8004c12:	9100      	str	r1, [sp, #0]
 8004c14:	2178      	movs	r1, #120	@ 0x78
 8004c16:	2000      	movs	r0, #0
 8004c18:	f7ff f855 	bl	8003cc6 <drawString>
			  drawString(0, 110, "POSITIONS", WHITE, BLACK, 1,1);
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	425b      	negs	r3, r3
 8004c20:	4ab0      	ldr	r2, [pc, #704]	@ (8004ee4 <main+0x768>)
 8004c22:	2101      	movs	r1, #1
 8004c24:	9102      	str	r1, [sp, #8]
 8004c26:	2101      	movs	r1, #1
 8004c28:	9101      	str	r1, [sp, #4]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	9100      	str	r1, [sp, #0]
 8004c2e:	216e      	movs	r1, #110	@ 0x6e
 8004c30:	2000      	movs	r0, #0
 8004c32:	f7ff f848 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004c36:	4ba6      	ldr	r3, [pc, #664]	@ (8004ed0 <main+0x754>)
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	49ab      	ldr	r1, [pc, #684]	@ (8004ee8 <main+0x76c>)
 8004c3c:	4ba6      	ldr	r3, [pc, #664]	@ (8004ed8 <main+0x75c>)
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f006 ff54 	bl	800baec <siprintf>
			  drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004c44:	2301      	movs	r3, #1
 8004c46:	425b      	negs	r3, r3
 8004c48:	4aa3      	ldr	r2, [pc, #652]	@ (8004ed8 <main+0x75c>)
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	9102      	str	r1, [sp, #8]
 8004c4e:	2101      	movs	r1, #1
 8004c50:	9101      	str	r1, [sp, #4]
 8004c52:	2100      	movs	r1, #0
 8004c54:	9100      	str	r1, [sp, #0]
 8004c56:	2164      	movs	r1, #100	@ 0x64
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7ff f834 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Old Lat: %d.%d", (int)(game.positions[game.numLocations-1].lat), abs((int)(((game.positions[game.numLocations-1].lat)*10000))%10000));
 8004c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ed0 <main+0x754>)
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	1e5a      	subs	r2, r3, #1
 8004c64:	4b9a      	ldr	r3, [pc, #616]	@ (8004ed0 <main+0x754>)
 8004c66:	3203      	adds	r2, #3
 8004c68:	00d2      	lsls	r2, r2, #3
 8004c6a:	58d3      	ldr	r3, [r2, r3]
 8004c6c:	1c18      	adds	r0, r3, #0
 8004c6e:	f7fc fceb 	bl	8001648 <__aeabi_f2iz>
 8004c72:	0004      	movs	r4, r0
 8004c74:	4b96      	ldr	r3, [pc, #600]	@ (8004ed0 <main+0x754>)
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	1e5a      	subs	r2, r3, #1
 8004c7a:	4b95      	ldr	r3, [pc, #596]	@ (8004ed0 <main+0x754>)
 8004c7c:	3203      	adds	r2, #3
 8004c7e:	00d2      	lsls	r2, r2, #3
 8004c80:	58d3      	ldr	r3, [r2, r3]
 8004c82:	499a      	ldr	r1, [pc, #616]	@ (8004eec <main+0x770>)
 8004c84:	1c18      	adds	r0, r3, #0
 8004c86:	f7fc f921 	bl	8000ecc <__aeabi_fmul>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	1c18      	adds	r0, r3, #0
 8004c8e:	f7fc fcdb 	bl	8001648 <__aeabi_f2iz>
 8004c92:	0003      	movs	r3, r0
 8004c94:	4996      	ldr	r1, [pc, #600]	@ (8004ef0 <main+0x774>)
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7fb fbb8 	bl	800040c <__aeabi_idivmod>
 8004c9c:	000b      	movs	r3, r1
 8004c9e:	17da      	asrs	r2, r3, #31
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	4053      	eors	r3, r2
 8004ca4:	4993      	ldr	r1, [pc, #588]	@ (8004ef4 <main+0x778>)
 8004ca6:	488c      	ldr	r0, [pc, #560]	@ (8004ed8 <main+0x75c>)
 8004ca8:	0022      	movs	r2, r4
 8004caa:	f006 ff1f 	bl	800baec <siprintf>
			  drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004cae:	2301      	movs	r3, #1
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	4a89      	ldr	r2, [pc, #548]	@ (8004ed8 <main+0x75c>)
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	9102      	str	r1, [sp, #8]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	9101      	str	r1, [sp, #4]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	9100      	str	r1, [sp, #0]
 8004cc0:	215a      	movs	r1, #90	@ 0x5a
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f7fe ffff 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Old Lon: %d.%d", (int)(game.positions[game.numLocations-1].lon), abs((int)(((game.positions[game.numLocations-1].lon)*10000))%10000));
 8004cc8:	4b81      	ldr	r3, [pc, #516]	@ (8004ed0 <main+0x754>)
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	4a80      	ldr	r2, [pc, #512]	@ (8004ed0 <main+0x754>)
 8004cd0:	3303      	adds	r3, #3
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	1c18      	adds	r0, r3, #0
 8004cdc:	f7fc fcb4 	bl	8001648 <__aeabi_f2iz>
 8004ce0:	0004      	movs	r4, r0
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed0 <main+0x754>)
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	4a79      	ldr	r2, [pc, #484]	@ (8004ed0 <main+0x754>)
 8004cea:	3303      	adds	r3, #3
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	18d3      	adds	r3, r2, r3
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	497d      	ldr	r1, [pc, #500]	@ (8004eec <main+0x770>)
 8004cf6:	1c18      	adds	r0, r3, #0
 8004cf8:	f7fc f8e8 	bl	8000ecc <__aeabi_fmul>
 8004cfc:	1c03      	adds	r3, r0, #0
 8004cfe:	1c18      	adds	r0, r3, #0
 8004d00:	f7fc fca2 	bl	8001648 <__aeabi_f2iz>
 8004d04:	0003      	movs	r3, r0
 8004d06:	497a      	ldr	r1, [pc, #488]	@ (8004ef0 <main+0x774>)
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7fb fb7f 	bl	800040c <__aeabi_idivmod>
 8004d0e:	000b      	movs	r3, r1
 8004d10:	17da      	asrs	r2, r3, #31
 8004d12:	189b      	adds	r3, r3, r2
 8004d14:	4053      	eors	r3, r2
 8004d16:	4978      	ldr	r1, [pc, #480]	@ (8004ef8 <main+0x77c>)
 8004d18:	486f      	ldr	r0, [pc, #444]	@ (8004ed8 <main+0x75c>)
 8004d1a:	0022      	movs	r2, r4
 8004d1c:	f006 fee6 	bl	800baec <siprintf>
			  drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004d20:	2301      	movs	r3, #1
 8004d22:	425b      	negs	r3, r3
 8004d24:	4a6c      	ldr	r2, [pc, #432]	@ (8004ed8 <main+0x75c>)
 8004d26:	2101      	movs	r1, #1
 8004d28:	9102      	str	r1, [sp, #8]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	9101      	str	r1, [sp, #4]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	9100      	str	r1, [sp, #0]
 8004d32:	2150      	movs	r1, #80	@ 0x50
 8004d34:	2000      	movs	r0, #0
 8004d36:	f7fe ffc6 	bl	8003cc6 <drawString>
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET){
 8004d3a:	4b70      	ldr	r3, [pc, #448]	@ (8004efc <main+0x780>)
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f002 fab8 	bl	80072b4 <HAL_GPIO_ReadPin>
 8004d44:	0003      	movs	r3, r0
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d168      	bne.n	8004e1c <main+0x6a0>
			  sprintf(buffer2, "Lat: %d.%d", (int)(GetJustLatLon().lat), abs(((int)((GetJustLatLon().lat)*10000))%10000));
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f001 f835 	bl	8005dbc <GetJustLatLon>
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	1c18      	adds	r0, r3, #0
 8004d58:	f7fc fc76 	bl	8001648 <__aeabi_f2iz>
 8004d5c:	0004      	movs	r4, r0
 8004d5e:	250c      	movs	r5, #12
 8004d60:	197b      	adds	r3, r7, r5
 8004d62:	0018      	movs	r0, r3
 8004d64:	f001 f82a 	bl	8005dbc <GetJustLatLon>
 8004d68:	197b      	adds	r3, r7, r5
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	495f      	ldr	r1, [pc, #380]	@ (8004eec <main+0x770>)
 8004d6e:	1c18      	adds	r0, r3, #0
 8004d70:	f7fc f8ac 	bl	8000ecc <__aeabi_fmul>
 8004d74:	1c03      	adds	r3, r0, #0
 8004d76:	1c18      	adds	r0, r3, #0
 8004d78:	f7fc fc66 	bl	8001648 <__aeabi_f2iz>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	495c      	ldr	r1, [pc, #368]	@ (8004ef0 <main+0x774>)
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7fb fb43 	bl	800040c <__aeabi_idivmod>
 8004d86:	000b      	movs	r3, r1
 8004d88:	17da      	asrs	r2, r3, #31
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	4053      	eors	r3, r2
 8004d8e:	495c      	ldr	r1, [pc, #368]	@ (8004f00 <main+0x784>)
 8004d90:	4851      	ldr	r0, [pc, #324]	@ (8004ed8 <main+0x75c>)
 8004d92:	0022      	movs	r2, r4
 8004d94:	f006 feaa 	bl	800baec <siprintf>
			  drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004d98:	2301      	movs	r3, #1
 8004d9a:	425b      	negs	r3, r3
 8004d9c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ed8 <main+0x75c>)
 8004d9e:	2101      	movs	r1, #1
 8004da0:	9102      	str	r1, [sp, #8]
 8004da2:	2101      	movs	r1, #1
 8004da4:	9101      	str	r1, [sp, #4]
 8004da6:	2100      	movs	r1, #0
 8004da8:	9100      	str	r1, [sp, #0]
 8004daa:	2146      	movs	r1, #70	@ 0x46
 8004dac:	2000      	movs	r0, #0
 8004dae:	f7fe ff8a 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "Lon: %d.%d", (int)(GetJustLatLon().lon), abs((int)(((GetJustLatLon().lon)*10000))%10000));
 8004db2:	2414      	movs	r4, #20
 8004db4:	193b      	adds	r3, r7, r4
 8004db6:	0018      	movs	r0, r3
 8004db8:	f001 f800 	bl	8005dbc <GetJustLatLon>
 8004dbc:	193b      	adds	r3, r7, r4
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	1c18      	adds	r0, r3, #0
 8004dc2:	f7fc fc41 	bl	8001648 <__aeabi_f2iz>
 8004dc6:	0004      	movs	r4, r0
 8004dc8:	251c      	movs	r5, #28
 8004dca:	197b      	adds	r3, r7, r5
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f000 fff5 	bl	8005dbc <GetJustLatLon>
 8004dd2:	197b      	adds	r3, r7, r5
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4945      	ldr	r1, [pc, #276]	@ (8004eec <main+0x770>)
 8004dd8:	1c18      	adds	r0, r3, #0
 8004dda:	f7fc f877 	bl	8000ecc <__aeabi_fmul>
 8004dde:	1c03      	adds	r3, r0, #0
 8004de0:	1c18      	adds	r0, r3, #0
 8004de2:	f7fc fc31 	bl	8001648 <__aeabi_f2iz>
 8004de6:	0003      	movs	r3, r0
 8004de8:	4941      	ldr	r1, [pc, #260]	@ (8004ef0 <main+0x774>)
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fb fb0e 	bl	800040c <__aeabi_idivmod>
 8004df0:	000b      	movs	r3, r1
 8004df2:	17da      	asrs	r2, r3, #31
 8004df4:	189b      	adds	r3, r3, r2
 8004df6:	4053      	eors	r3, r2
 8004df8:	4942      	ldr	r1, [pc, #264]	@ (8004f04 <main+0x788>)
 8004dfa:	4837      	ldr	r0, [pc, #220]	@ (8004ed8 <main+0x75c>)
 8004dfc:	0022      	movs	r2, r4
 8004dfe:	f006 fe75 	bl	800baec <siprintf>
			  drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 8004e02:	2301      	movs	r3, #1
 8004e04:	425b      	negs	r3, r3
 8004e06:	4a34      	ldr	r2, [pc, #208]	@ (8004ed8 <main+0x75c>)
 8004e08:	2101      	movs	r1, #1
 8004e0a:	9102      	str	r1, [sp, #8]
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	9101      	str	r1, [sp, #4]
 8004e10:	2100      	movs	r1, #0
 8004e12:	9100      	str	r1, [sp, #0]
 8004e14:	213c      	movs	r1, #60	@ 0x3c
 8004e16:	2000      	movs	r0, #0
 8004e18:	f7fe ff55 	bl	8003cc6 <drawString>
			  }

			  //drawString(0, 70, "PET", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 8004e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec8 <main+0x74c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ){
 8004e22:	4b39      	ldr	r3, [pc, #228]	@ (8004f08 <main+0x78c>)
 8004e24:	2104      	movs	r1, #4
 8004e26:	0018      	movs	r0, r3
 8004e28:	f002 fa44 	bl	80072b4 <HAL_GPIO_ReadPin>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d111      	bne.n	8004e56 <main+0x6da>
	  		effect = MenuBeep;
 8004e32:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <main+0x790>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
	  		PlayEffect(effect);
 8004e38:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <main+0x790>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f000 fc7f 	bl	8005740 <PlayEffect>

	  		currentMenu = Main;
 8004e42:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <main+0x794>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8004e48:	4b32      	ldr	r3, [pc, #200]	@ (8004f14 <main+0x798>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f7ff f87e 	bl	8003f50 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8004e54:	e18b      	b.n	800516e <main+0x9f2>
	  	      canChange = 1;
 8004e56:	4b2f      	ldr	r3, [pc, #188]	@ (8004f14 <main+0x798>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
	  	  break;
 8004e5c:	e187      	b.n	800516e <main+0x9f2>
	  case MusicTest:
		  //fillScreen(BLUE);
		  if((totalFrames++)%1000000==0){
 8004e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f18 <main+0x79c>)
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	b291      	uxth	r1, r2
 8004e66:	4a2c      	ldr	r2, [pc, #176]	@ (8004f18 <main+0x79c>)
 8004e68:	8011      	strh	r1, [r2, #0]
 8004e6a:	492c      	ldr	r1, [pc, #176]	@ (8004f1c <main+0x7a0>)
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7fb facd 	bl	800040c <__aeabi_idivmod>
 8004e72:	1e0b      	subs	r3, r1, #0
 8004e74:	d000      	beq.n	8004e78 <main+0x6fc>
 8004e76:	e179      	b.n	800516c <main+0x9f0>
			  freq = scale[toneIndex++%13];
 8004e78:	4b29      	ldr	r3, [pc, #164]	@ (8004f20 <main+0x7a4>)
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	b291      	uxth	r1, r2
 8004e82:	4a27      	ldr	r2, [pc, #156]	@ (8004f20 <main+0x7a4>)
 8004e84:	8011      	strh	r1, [r2, #0]
 8004e86:	210d      	movs	r1, #13
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fb f9d5 	bl	8000238 <__aeabi_uidivmod>
 8004e8e:	000b      	movs	r3, r1
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	001a      	movs	r2, r3
 8004e94:	4b23      	ldr	r3, [pc, #140]	@ (8004f24 <main+0x7a8>)
 8004e96:	0052      	lsls	r2, r2, #1
 8004e98:	5ad3      	ldrh	r3, [r2, r3]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f7fe fbd7 	bl	8003650 <__aeabi_ui2d>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	000b      	movs	r3, r1
 8004ea6:	4920      	ldr	r1, [pc, #128]	@ (8004f28 <main+0x7ac>)
 8004ea8:	600a      	str	r2, [r1, #0]
 8004eaa:	604b      	str	r3, [r1, #4]
			  ChangeNote(freq);
 8004eac:	4b1e      	ldr	r3, [pc, #120]	@ (8004f28 <main+0x7ac>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	f7fb fb5f 	bl	8000578 <__aeabi_d2uiz>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f000 fc1e 	bl	8005700 <ChangeNote>
		  }
		  break;
 8004ec4:	e152      	b.n	800516c <main+0x9f0>
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	20000c7c 	.word	0x20000c7c
 8004ecc:	0800c678 	.word	0x0800c678
 8004ed0:	20000a54 	.word	0x20000a54
 8004ed4:	0800c680 	.word	0x0800c680
 8004ed8:	20000cb4 	.word	0x20000cb4
 8004edc:	0800c68c 	.word	0x0800c68c
 8004ee0:	0800c69c 	.word	0x0800c69c
 8004ee4:	0800c6ac 	.word	0x0800c6ac
 8004ee8:	0800c6b8 	.word	0x0800c6b8
 8004eec:	461c4000 	.word	0x461c4000
 8004ef0:	00002710 	.word	0x00002710
 8004ef4:	0800c6c8 	.word	0x0800c6c8
 8004ef8:	0800c6d8 	.word	0x0800c6d8
 8004efc:	50000800 	.word	0x50000800
 8004f00:	0800c6e8 	.word	0x0800c6e8
 8004f04:	0800c6f4 	.word	0x0800c6f4
 8004f08:	50000400 	.word	0x50000400
 8004f0c:	20000a50 	.word	0x20000a50
 8004f10:	200009c4 	.word	0x200009c4
 8004f14:	200009c5 	.word	0x200009c5
 8004f18:	20000bf8 	.word	0x20000bf8
 8004f1c:	000f4240 	.word	0x000f4240
 8004f20:	20000cb0 	.word	0x20000cb0
 8004f24:	20000998 	.word	0x20000998
 8004f28:	20000ca8 	.word	0x20000ca8
		  //if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET)
		  //{
			  //SendData();
			  //ReceiveData();
		  //}
		  if(updateScreen>=2)
 8004f2c:	4b94      	ldr	r3, [pc, #592]	@ (8005180 <main+0xa04>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d800      	bhi.n	8004f36 <main+0x7ba>
 8004f34:	e0f5      	b.n	8005122 <main+0x9a6>
		  {
			  updateScreen = 0;
 8004f36:	4b92      	ldr	r3, [pc, #584]	@ (8005180 <main+0xa04>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
			  drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	425b      	negs	r3, r3
 8004f40:	4a90      	ldr	r2, [pc, #576]	@ (8005184 <main+0xa08>)
 8004f42:	2101      	movs	r1, #1
 8004f44:	9102      	str	r1, [sp, #8]
 8004f46:	2101      	movs	r1, #1
 8004f48:	9101      	str	r1, [sp, #4]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	9100      	str	r1, [sp, #0]
 8004f4e:	2196      	movs	r1, #150	@ 0x96
 8004f50:	2000      	movs	r0, #0
 8004f52:	f7fe feb8 	bl	8003cc6 <drawString>
			  sprintf(buffer2, "GOAL: %d ", game.challengeGoal);
 8004f56:	4a8c      	ldr	r2, [pc, #560]	@ (8005188 <main+0xa0c>)
 8004f58:	2394      	movs	r3, #148	@ 0x94
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	58d2      	ldr	r2, [r2, r3]
 8004f5e:	498b      	ldr	r1, [pc, #556]	@ (800518c <main+0xa10>)
 8004f60:	4b8b      	ldr	r3, [pc, #556]	@ (8005190 <main+0xa14>)
 8004f62:	0018      	movs	r0, r3
 8004f64:	f006 fdc2 	bl	800baec <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8004f68:	2301      	movs	r3, #1
 8004f6a:	425b      	negs	r3, r3
 8004f6c:	4a88      	ldr	r2, [pc, #544]	@ (8005190 <main+0xa14>)
 8004f6e:	2101      	movs	r1, #1
 8004f70:	9102      	str	r1, [sp, #8]
 8004f72:	2101      	movs	r1, #1
 8004f74:	9101      	str	r1, [sp, #4]
 8004f76:	2100      	movs	r1, #0
 8004f78:	9100      	str	r1, [sp, #0]
 8004f7a:	2182      	movs	r1, #130	@ 0x82
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fe fea2 	bl	8003cc6 <drawString>
			  drawString(0,110,"UPLOAD DATA",WHITE,BLACK,1,1);
 8004f82:	2301      	movs	r3, #1
 8004f84:	425b      	negs	r3, r3
 8004f86:	4a83      	ldr	r2, [pc, #524]	@ (8005194 <main+0xa18>)
 8004f88:	2101      	movs	r1, #1
 8004f8a:	9102      	str	r1, [sp, #8]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	9101      	str	r1, [sp, #4]
 8004f90:	2100      	movs	r1, #0
 8004f92:	9100      	str	r1, [sp, #0]
 8004f94:	216e      	movs	r1, #110	@ 0x6e
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7fe fe95 	bl	8003cc6 <drawString>
			  if(editDifficulty)
 8004f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8005198 <main+0xa1c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d063      	beq.n	800506c <main+0x8f0>
			  {
				  drawLine(0,125,128,125,WHITE);
 8004fa4:	4b7d      	ldr	r3, [pc, #500]	@ (800519c <main+0xa20>)
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	237d      	movs	r3, #125	@ 0x7d
 8004faa:	2280      	movs	r2, #128	@ 0x80
 8004fac:	217d      	movs	r1, #125	@ 0x7d
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7fe fdf9 	bl	8003ba6 <drawLine>
				  //GET OUT when the center button is pressed!
				  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8004fb4:	4b7a      	ldr	r3, [pc, #488]	@ (80051a0 <main+0xa24>)
 8004fb6:	2102      	movs	r1, #2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f002 f97b 	bl	80072b4 <HAL_GPIO_ReadPin>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d00b      	beq.n	8004fda <main+0x85e>
				  {
					  editDifficulty = 0;
 8004fc2:	4b75      	ldr	r3, [pc, #468]	@ (8005198 <main+0xa1c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
					  drawLine(0,125,128,125,BLACK);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	237d      	movs	r3, #125	@ 0x7d
 8004fce:	2280      	movs	r2, #128	@ 0x80
 8004fd0:	217d      	movs	r1, #125	@ 0x7d
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f7fe fde7 	bl	8003ba6 <drawLine>
 8004fd8:	e026      	b.n	8005028 <main+0x8ac>
				  }
				  //Right increments the goal
				  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 8004fda:	4b72      	ldr	r3, [pc, #456]	@ (80051a4 <main+0xa28>)
 8004fdc:	2104      	movs	r1, #4
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f002 f968 	bl	80072b4 <HAL_GPIO_ReadPin>
 8004fe4:	1e03      	subs	r3, r0, #0
 8004fe6:	d00b      	beq.n	8005000 <main+0x884>
				  {
					  game.challengeGoal += 1000;
 8004fe8:	4a67      	ldr	r2, [pc, #412]	@ (8005188 <main+0xa0c>)
 8004fea:	2394      	movs	r3, #148	@ 0x94
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	58d3      	ldr	r3, [r2, r3]
 8004ff0:	22fa      	movs	r2, #250	@ 0xfa
 8004ff2:	0092      	lsls	r2, r2, #2
 8004ff4:	1899      	adds	r1, r3, r2
 8004ff6:	4a64      	ldr	r2, [pc, #400]	@ (8005188 <main+0xa0c>)
 8004ff8:	2394      	movs	r3, #148	@ 0x94
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	50d1      	str	r1, [r2, r3]
 8004ffe:	e013      	b.n	8005028 <main+0x8ac>
				  }
				  //Left decrements the goal
				  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8005000:	2380      	movs	r3, #128	@ 0x80
 8005002:	011a      	lsls	r2, r3, #4
 8005004:	23a0      	movs	r3, #160	@ 0xa0
 8005006:	05db      	lsls	r3, r3, #23
 8005008:	0011      	movs	r1, r2
 800500a:	0018      	movs	r0, r3
 800500c:	f002 f952 	bl	80072b4 <HAL_GPIO_ReadPin>
 8005010:	1e03      	subs	r3, r0, #0
 8005012:	d009      	beq.n	8005028 <main+0x8ac>
				  {
					  game.challengeGoal -= 1000;
 8005014:	4a5c      	ldr	r2, [pc, #368]	@ (8005188 <main+0xa0c>)
 8005016:	2394      	movs	r3, #148	@ 0x94
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	58d3      	ldr	r3, [r2, r3]
 800501c:	4a62      	ldr	r2, [pc, #392]	@ (80051a8 <main+0xa2c>)
 800501e:	1899      	adds	r1, r3, r2
 8005020:	4a59      	ldr	r2, [pc, #356]	@ (8005188 <main+0xa0c>)
 8005022:	2394      	movs	r3, #148	@ 0x94
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	50d1      	str	r1, [r2, r3]
				  }

				  if(game.challengeGoal>=999000)
 8005028:	4a57      	ldr	r2, [pc, #348]	@ (8005188 <main+0xa0c>)
 800502a:	2394      	movs	r3, #148	@ 0x94
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	58d3      	ldr	r3, [r2, r3]
 8005030:	4a5e      	ldr	r2, [pc, #376]	@ (80051ac <main+0xa30>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d905      	bls.n	8005042 <main+0x8c6>
				  {
					  game.challengeGoal = 0;
 8005036:	4a54      	ldr	r2, [pc, #336]	@ (8005188 <main+0xa0c>)
 8005038:	2394      	movs	r3, #148	@ 0x94
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2100      	movs	r1, #0
 800503e:	50d1      	str	r1, [r2, r3]
 8005040:	e00a      	b.n	8005058 <main+0x8dc>
				  }
				  else if (game.challengeGoal<=0)
 8005042:	4a51      	ldr	r2, [pc, #324]	@ (8005188 <main+0xa0c>)
 8005044:	2394      	movs	r3, #148	@ 0x94
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	58d3      	ldr	r3, [r2, r3]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <main+0x8dc>
				  {
					  game.challengeGoal=999000;
 800504e:	4a4e      	ldr	r2, [pc, #312]	@ (8005188 <main+0xa0c>)
 8005050:	2394      	movs	r3, #148	@ 0x94
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4956      	ldr	r1, [pc, #344]	@ (80051b0 <main+0xa34>)
 8005056:	50d1      	str	r1, [r2, r3]
				  }
				  sprintf(buffer2, "DIFFICULTY: %d ", game.challengeGoal);
 8005058:	4a4b      	ldr	r2, [pc, #300]	@ (8005188 <main+0xa0c>)
 800505a:	2394      	movs	r3, #148	@ 0x94
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	58d2      	ldr	r2, [r2, r3]
 8005060:	4954      	ldr	r1, [pc, #336]	@ (80051b4 <main+0xa38>)
 8005062:	4b4b      	ldr	r3, [pc, #300]	@ (8005190 <main+0xa14>)
 8005064:	0018      	movs	r0, r3
 8005066:	f006 fd41 	bl	800baec <siprintf>
 800506a:	e05a      	b.n	8005122 <main+0x9a6>

			  }
			  else{
			  //Difficulty
			  if(currentSetting==0)
 800506c:	4b52      	ldr	r3, [pc, #328]	@ (80051b8 <main+0xa3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d110      	bne.n	8005096 <main+0x91a>
			  {
				  //Try to underline the option being selected
				  drawLine(0,125,20,125,WHITE);
 8005074:	4b49      	ldr	r3, [pc, #292]	@ (800519c <main+0xa20>)
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	237d      	movs	r3, #125	@ 0x7d
 800507a:	2214      	movs	r2, #20
 800507c:	217d      	movs	r1, #125	@ 0x7d
 800507e:	2000      	movs	r0, #0
 8005080:	f7fe fd91 	bl	8003ba6 <drawLine>
				  //Then erase the highlight under the other option not being selected
				  drawLine(0,105,20,105,BLACK);
 8005084:	2300      	movs	r3, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2369      	movs	r3, #105	@ 0x69
 800508a:	2214      	movs	r2, #20
 800508c:	2169      	movs	r1, #105	@ 0x69
 800508e:	2000      	movs	r0, #0
 8005090:	f7fe fd89 	bl	8003ba6 <drawLine>
 8005094:	e013      	b.n	80050be <main+0x942>
			  }
			  //Upload
			  else if(currentSetting==1)
 8005096:	4b48      	ldr	r3, [pc, #288]	@ (80051b8 <main+0xa3c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10f      	bne.n	80050be <main+0x942>
			  {
				  drawLine(0,105,20,105,WHITE);
 800509e:	4b3f      	ldr	r3, [pc, #252]	@ (800519c <main+0xa20>)
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	2369      	movs	r3, #105	@ 0x69
 80050a4:	2214      	movs	r2, #20
 80050a6:	2169      	movs	r1, #105	@ 0x69
 80050a8:	2000      	movs	r0, #0
 80050aa:	f7fe fd7c 	bl	8003ba6 <drawLine>
				  drawLine(0,125,20,125,BLACK);
 80050ae:	2300      	movs	r3, #0
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	237d      	movs	r3, #125	@ 0x7d
 80050b4:	2214      	movs	r2, #20
 80050b6:	217d      	movs	r1, #125	@ 0x7d
 80050b8:	2000      	movs	r0, #0
 80050ba:	f7fe fd74 	bl	8003ba6 <drawLine>
			  }
			  //IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 80050be:	4b39      	ldr	r3, [pc, #228]	@ (80051a4 <main+0xa28>)
 80050c0:	2104      	movs	r1, #4
 80050c2:	0018      	movs	r0, r3
 80050c4:	f002 f8f6 	bl	80072b4 <HAL_GPIO_ReadPin>
 80050c8:	0003      	movs	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d10c      	bne.n	80050e8 <main+0x96c>
			  {
				  ++currentSetting;
 80050ce:	4b3a      	ldr	r3, [pc, #232]	@ (80051b8 <main+0xa3c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	4b38      	ldr	r3, [pc, #224]	@ (80051b8 <main+0xa3c>)
 80050d6:	601a      	str	r2, [r3, #0]
				  if(currentSetting>1)
 80050d8:	4b37      	ldr	r3, [pc, #220]	@ (80051b8 <main+0xa3c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d920      	bls.n	8005122 <main+0x9a6>
					  currentSetting=0;
 80050e0:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <main+0xa3c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e01c      	b.n	8005122 <main+0x9a6>
			  }
			  //PD6=Center button
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==0)
 80050e8:	4b2d      	ldr	r3, [pc, #180]	@ (80051a0 <main+0xa24>)
 80050ea:	2102      	movs	r1, #2
 80050ec:	0018      	movs	r0, r3
 80050ee:	f002 f8e1 	bl	80072b4 <HAL_GPIO_ReadPin>
 80050f2:	1e03      	subs	r3, r0, #0
 80050f4:	d007      	beq.n	8005106 <main+0x98a>
 80050f6:	4b30      	ldr	r3, [pc, #192]	@ (80051b8 <main+0xa3c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <main+0x98a>
			  {
				  editDifficulty=1;
 80050fe:	4b26      	ldr	r3, [pc, #152]	@ (8005198 <main+0xa1c>)
 8005100:	2201      	movs	r2, #1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e00d      	b.n	8005122 <main+0x9a6>
			  }
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==1)
 8005106:	4b26      	ldr	r3, [pc, #152]	@ (80051a0 <main+0xa24>)
 8005108:	2102      	movs	r1, #2
 800510a:	0018      	movs	r0, r3
 800510c:	f002 f8d2 	bl	80072b4 <HAL_GPIO_ReadPin>
 8005110:	1e03      	subs	r3, r0, #0
 8005112:	d006      	beq.n	8005122 <main+0x9a6>
 8005114:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <main+0xa3c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d102      	bne.n	8005122 <main+0x9a6>
			  {
				  userUpload=1;
 800511c:	4b27      	ldr	r3, [pc, #156]	@ (80051bc <main+0xa40>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]
			  }
		  }
		  }

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET && !editDifficulty) {
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	011a      	lsls	r2, r3, #4
 8005126:	23a0      	movs	r3, #160	@ 0xa0
 8005128:	05db      	lsls	r3, r3, #23
 800512a:	0011      	movs	r1, r2
 800512c:	0018      	movs	r0, r3
 800512e:	f002 f8c1 	bl	80072b4 <HAL_GPIO_ReadPin>
 8005132:	0003      	movs	r3, r0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d115      	bne.n	8005164 <main+0x9e8>
 8005138:	4b17      	ldr	r3, [pc, #92]	@ (8005198 <main+0xa1c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d111      	bne.n	8005164 <main+0x9e8>
			  effect = MenuBeep;
 8005140:	4b1f      	ldr	r3, [pc, #124]	@ (80051c0 <main+0xa44>)
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8005146:	4b1e      	ldr	r3, [pc, #120]	@ (80051c0 <main+0xa44>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	0018      	movs	r0, r3
 800514c:	f000 faf8 	bl	8005740 <PlayEffect>

			  currentMenu = Main;
 8005150:	4b1c      	ldr	r3, [pc, #112]	@ (80051c4 <main+0xa48>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8005156:	4b1c      	ldr	r3, [pc, #112]	@ (80051c8 <main+0xa4c>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 800515c:	2000      	movs	r0, #0
 800515e:	f7fe fef7 	bl	8003f50 <fillScreen>
		  }
		  else
			  canChange = 1;
		  break;
 8005162:	e004      	b.n	800516e <main+0x9f2>
			  canChange = 1;
 8005164:	4b18      	ldr	r3, [pc, #96]	@ (80051c8 <main+0xa4c>)
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]
		  break;
 800516a:	e000      	b.n	800516e <main+0x9f2>
		  break;
 800516c:	46c0      	nop			@ (mov r8, r8)
		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);

		  break;*/

	  }
	  totalFrames++;
 800516e:	4b17      	ldr	r3, [pc, #92]	@ (80051cc <main+0xa50>)
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	4b15      	ldr	r3, [pc, #84]	@ (80051cc <main+0xa50>)
 8005178:	801a      	strh	r2, [r3, #0]
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 800517a:	f7ff fba6 	bl	80048ca <main+0x14e>
 800517e:	46c0      	nop			@ (mov r8, r8)
 8005180:	20000c7c 	.word	0x20000c7c
 8005184:	0800c700 	.word	0x0800c700
 8005188:	20000a54 	.word	0x20000a54
 800518c:	0800c70c 	.word	0x0800c70c
 8005190:	20000cb4 	.word	0x20000cb4
 8005194:	0800c718 	.word	0x0800c718
 8005198:	20000d20 	.word	0x20000d20
 800519c:	0000ffff 	.word	0x0000ffff
 80051a0:	50000800 	.word	0x50000800
 80051a4:	50000400 	.word	0x50000400
 80051a8:	fffffc18 	.word	0xfffffc18
 80051ac:	000f3e57 	.word	0x000f3e57
 80051b0:	000f3e58 	.word	0x000f3e58
 80051b4:	0800c724 	.word	0x0800c724
 80051b8:	20000d1c 	.word	0x20000d1c
 80051bc:	20000d24 	.word	0x20000d24
 80051c0:	20000a50 	.word	0x20000a50
 80051c4:	200009c4 	.word	0x200009c4
 80051c8:	200009c5 	.word	0x200009c5
 80051cc:	20000bf8 	.word	0x20000bf8

080051d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b095      	sub	sp, #84	@ 0x54
 80051d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051d6:	2414      	movs	r4, #20
 80051d8:	193b      	adds	r3, r7, r4
 80051da:	0018      	movs	r0, r3
 80051dc:	233c      	movs	r3, #60	@ 0x3c
 80051de:	001a      	movs	r2, r3
 80051e0:	2100      	movs	r1, #0
 80051e2:	f006 fca5 	bl	800bb30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	0018      	movs	r0, r3
 80051ea:	2310      	movs	r3, #16
 80051ec:	001a      	movs	r2, r3
 80051ee:	2100      	movs	r1, #0
 80051f0:	f006 fc9e 	bl	800bb30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f4:	2380      	movs	r3, #128	@ 0x80
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	0018      	movs	r0, r3
 80051fa:	f002 fed9 	bl	8007fb0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80051fe:	193b      	adds	r3, r7, r4
 8005200:	220a      	movs	r2, #10
 8005202:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005204:	193b      	adds	r3, r7, r4
 8005206:	2280      	movs	r2, #128	@ 0x80
 8005208:	0052      	lsls	r2, r2, #1
 800520a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800520c:	0021      	movs	r1, r4
 800520e:	187b      	adds	r3, r7, r1
 8005210:	2200      	movs	r2, #0
 8005212:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005214:	187b      	adds	r3, r7, r1
 8005216:	2240      	movs	r2, #64	@ 0x40
 8005218:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800521a:	187b      	adds	r3, r7, r1
 800521c:	2201      	movs	r2, #1
 800521e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005220:	187b      	adds	r3, r7, r1
 8005222:	2202      	movs	r2, #2
 8005224:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005226:	187b      	adds	r3, r7, r1
 8005228:	2202      	movs	r2, #2
 800522a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800522c:	187b      	adds	r3, r7, r1
 800522e:	2200      	movs	r2, #0
 8005230:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005232:	187b      	adds	r3, r7, r1
 8005234:	2208      	movs	r2, #8
 8005236:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005238:	187b      	adds	r3, r7, r1
 800523a:	2280      	movs	r2, #128	@ 0x80
 800523c:	0292      	lsls	r2, r2, #10
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005240:	187b      	adds	r3, r7, r1
 8005242:	2280      	movs	r2, #128	@ 0x80
 8005244:	0492      	lsls	r2, r2, #18
 8005246:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005248:	187b      	adds	r3, r7, r1
 800524a:	2280      	movs	r2, #128	@ 0x80
 800524c:	0592      	lsls	r2, r2, #22
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005250:	187b      	adds	r3, r7, r1
 8005252:	0018      	movs	r0, r3
 8005254:	f002 fef8 	bl	8008048 <HAL_RCC_OscConfig>
 8005258:	1e03      	subs	r3, r0, #0
 800525a:	d001      	beq.n	8005260 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800525c:	f000 fe6a 	bl	8005f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	2207      	movs	r2, #7
 8005264:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2202      	movs	r2, #2
 800526a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	2200      	movs	r2, #0
 8005270:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	2200      	movs	r2, #0
 8005276:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	2102      	movs	r1, #2
 800527c:	0018      	movs	r0, r3
 800527e:	f003 fa43 	bl	8008708 <HAL_RCC_ClockConfig>
 8005282:	1e03      	subs	r3, r0, #0
 8005284:	d001      	beq.n	800528a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005286:	f000 fe55 	bl	8005f34 <Error_Handler>
  }
}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b015      	add	sp, #84	@ 0x54
 8005290:	bd90      	pop	{r4, r7, pc}
	...

08005294 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <MX_I2C1_Init+0x74>)
 800529a:	4a1c      	ldr	r2, [pc, #112]	@ (800530c <MX_I2C1_Init+0x78>)
 800529c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800529e:	4b1a      	ldr	r3, [pc, #104]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <MX_I2C1_Init+0x7c>)
 80052a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80052a4:	4b18      	ldr	r3, [pc, #96]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052aa:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052b0:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80052b6:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80052bc:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052be:	2200      	movs	r2, #0
 80052c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052c2:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052d0:	0018      	movs	r0, r3
 80052d2:	f002 f829 	bl	8007328 <HAL_I2C_Init>
 80052d6:	1e03      	subs	r3, r0, #0
 80052d8:	d001      	beq.n	80052de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80052da:	f000 fe2b 	bl	8005f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80052de:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052e0:	2100      	movs	r1, #0
 80052e2:	0018      	movs	r0, r3
 80052e4:	f002 fdcc 	bl	8007e80 <HAL_I2CEx_ConfigAnalogFilter>
 80052e8:	1e03      	subs	r3, r0, #0
 80052ea:	d001      	beq.n	80052f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80052ec:	f000 fe22 	bl	8005f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <MX_I2C1_Init+0x74>)
 80052f2:	2100      	movs	r1, #0
 80052f4:	0018      	movs	r0, r3
 80052f6:	f002 fe0f 	bl	8007f18 <HAL_I2CEx_ConfigDigitalFilter>
 80052fa:	1e03      	subs	r3, r0, #0
 80052fc:	d001      	beq.n	8005302 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80052fe:	f000 fe19 	bl	8005f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005302:	46c0      	nop			@ (mov r8, r8)
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000d28 	.word	0x20000d28
 800530c:	40005400 	.word	0x40005400
 8005310:	10b17db5 	.word	0x10b17db5

08005314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005318:	4b1c      	ldr	r3, [pc, #112]	@ (800538c <MX_SPI1_Init+0x78>)
 800531a:	4a1d      	ldr	r2, [pc, #116]	@ (8005390 <MX_SPI1_Init+0x7c>)
 800531c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800531e:	4b1b      	ldr	r3, [pc, #108]	@ (800538c <MX_SPI1_Init+0x78>)
 8005320:	2282      	movs	r2, #130	@ 0x82
 8005322:	0052      	lsls	r2, r2, #1
 8005324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8005326:	4b19      	ldr	r3, [pc, #100]	@ (800538c <MX_SPI1_Init+0x78>)
 8005328:	2280      	movs	r2, #128	@ 0x80
 800532a:	0212      	lsls	r2, r2, #8
 800532c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800532e:	4b17      	ldr	r3, [pc, #92]	@ (800538c <MX_SPI1_Init+0x78>)
 8005330:	22e0      	movs	r2, #224	@ 0xe0
 8005332:	00d2      	lsls	r2, r2, #3
 8005334:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005336:	4b15      	ldr	r3, [pc, #84]	@ (800538c <MX_SPI1_Init+0x78>)
 8005338:	2200      	movs	r2, #0
 800533a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800533c:	4b13      	ldr	r3, [pc, #76]	@ (800538c <MX_SPI1_Init+0x78>)
 800533e:	2200      	movs	r2, #0
 8005340:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <MX_SPI1_Init+0x78>)
 8005344:	2280      	movs	r2, #128	@ 0x80
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <MX_SPI1_Init+0x78>)
 800534c:	2220      	movs	r2, #32
 800534e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005350:	4b0e      	ldr	r3, [pc, #56]	@ (800538c <MX_SPI1_Init+0x78>)
 8005352:	2200      	movs	r2, #0
 8005354:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <MX_SPI1_Init+0x78>)
 8005358:	2200      	movs	r2, #0
 800535a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535c:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <MX_SPI1_Init+0x78>)
 800535e:	2200      	movs	r2, #0
 8005360:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005362:	4b0a      	ldr	r3, [pc, #40]	@ (800538c <MX_SPI1_Init+0x78>)
 8005364:	2207      	movs	r2, #7
 8005366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005368:	4b08      	ldr	r3, [pc, #32]	@ (800538c <MX_SPI1_Init+0x78>)
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800536e:	4b07      	ldr	r3, [pc, #28]	@ (800538c <MX_SPI1_Init+0x78>)
 8005370:	2208      	movs	r2, #8
 8005372:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <MX_SPI1_Init+0x78>)
 8005376:	0018      	movs	r0, r3
 8005378:	f004 f864 	bl	8009444 <HAL_SPI_Init>
 800537c:	1e03      	subs	r3, r0, #0
 800537e:	d001      	beq.n	8005384 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8005380:	f000 fdd8 	bl	8005f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005384:	46c0      	nop			@ (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	20000da8 	.word	0x20000da8
 8005390:	40013000 	.word	0x40013000

08005394 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b094      	sub	sp, #80	@ 0x50
 8005398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800539a:	2334      	movs	r3, #52	@ 0x34
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	0018      	movs	r0, r3
 80053a0:	231c      	movs	r3, #28
 80053a2:	001a      	movs	r2, r3
 80053a4:	2100      	movs	r1, #0
 80053a6:	f006 fbc3 	bl	800bb30 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053aa:	003b      	movs	r3, r7
 80053ac:	0018      	movs	r0, r3
 80053ae:	2334      	movs	r3, #52	@ 0x34
 80053b0:	001a      	movs	r2, r3
 80053b2:	2100      	movs	r1, #0
 80053b4:	f006 fbbc 	bl	800bb30 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80053b8:	4b37      	ldr	r3, [pc, #220]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053ba:	4a38      	ldr	r2, [pc, #224]	@ (800549c <MX_TIM17_Init+0x108>)
 80053bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80053be:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c4:	4b34      	ldr	r3, [pc, #208]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80053ca:	4b33      	ldr	r3, [pc, #204]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053cc:	4a34      	ldr	r2, [pc, #208]	@ (80054a0 <MX_TIM17_Init+0x10c>)
 80053ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d0:	4b31      	ldr	r3, [pc, #196]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80053d6:	4b30      	ldr	r3, [pc, #192]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053d8:	2200      	movs	r2, #0
 80053da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053de:	2200      	movs	r2, #0
 80053e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80053e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053e4:	0018      	movs	r0, r3
 80053e6:	f004 fbbb 	bl	8009b60 <HAL_TIM_Base_Init>
 80053ea:	1e03      	subs	r3, r0, #0
 80053ec:	d001      	beq.n	80053f2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80053ee:	f000 fda1 	bl	8005f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80053f2:	4b29      	ldr	r3, [pc, #164]	@ (8005498 <MX_TIM17_Init+0x104>)
 80053f4:	0018      	movs	r0, r3
 80053f6:	f004 fc0b 	bl	8009c10 <HAL_TIM_PWM_Init>
 80053fa:	1e03      	subs	r3, r0, #0
 80053fc:	d001      	beq.n	8005402 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80053fe:	f000 fd99 	bl	8005f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005402:	2134      	movs	r1, #52	@ 0x34
 8005404:	187b      	adds	r3, r7, r1
 8005406:	2260      	movs	r2, #96	@ 0x60
 8005408:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800540a:	187b      	adds	r3, r7, r1
 800540c:	2200      	movs	r2, #0
 800540e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005410:	187b      	adds	r3, r7, r1
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005416:	187b      	adds	r3, r7, r1
 8005418:	2200      	movs	r2, #0
 800541a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800541c:	187b      	adds	r3, r7, r1
 800541e:	2200      	movs	r2, #0
 8005420:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005422:	187b      	adds	r3, r7, r1
 8005424:	2200      	movs	r2, #0
 8005426:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005428:	187b      	adds	r3, r7, r1
 800542a:	2200      	movs	r2, #0
 800542c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800542e:	1879      	adds	r1, r7, r1
 8005430:	4b19      	ldr	r3, [pc, #100]	@ (8005498 <MX_TIM17_Init+0x104>)
 8005432:	2200      	movs	r2, #0
 8005434:	0018      	movs	r0, r3
 8005436:	f004 fdc7 	bl	8009fc8 <HAL_TIM_PWM_ConfigChannel>
 800543a:	1e03      	subs	r3, r0, #0
 800543c:	d001      	beq.n	8005442 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800543e:	f000 fd79 	bl	8005f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005442:	003b      	movs	r3, r7
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005448:	003b      	movs	r3, r7
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800544e:	003b      	movs	r3, r7
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005454:	003b      	movs	r3, r7
 8005456:	2200      	movs	r2, #0
 8005458:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800545a:	003b      	movs	r3, r7
 800545c:	2200      	movs	r2, #0
 800545e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005460:	003b      	movs	r3, r7
 8005462:	2280      	movs	r2, #128	@ 0x80
 8005464:	0192      	lsls	r2, r2, #6
 8005466:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005468:	003b      	movs	r3, r7
 800546a:	2200      	movs	r2, #0
 800546c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800546e:	003b      	movs	r3, r7
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005474:	003a      	movs	r2, r7
 8005476:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <MX_TIM17_Init+0x104>)
 8005478:	0011      	movs	r1, r2
 800547a:	0018      	movs	r0, r3
 800547c:	f005 fa24 	bl	800a8c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005480:	1e03      	subs	r3, r0, #0
 8005482:	d001      	beq.n	8005488 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8005484:	f000 fd56 	bl	8005f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005488:	4b03      	ldr	r3, [pc, #12]	@ (8005498 <MX_TIM17_Init+0x104>)
 800548a:	0018      	movs	r0, r3
 800548c:	f001 fabc 	bl	8006a08 <HAL_TIM_MspPostInit>

}
 8005490:	46c0      	nop			@ (mov r8, r8)
 8005492:	46bd      	mov	sp, r7
 8005494:	b014      	add	sp, #80	@ 0x50
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000e0c 	.word	0x20000e0c
 800549c:	40014800 	.word	0x40014800
 80054a0:	0000ffff 	.word	0x0000ffff

080054a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054a8:	4b23      	ldr	r3, [pc, #140]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054aa:	4a24      	ldr	r2, [pc, #144]	@ (800553c <MX_USART1_UART_Init+0x98>)
 80054ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054b0:	2296      	movs	r2, #150	@ 0x96
 80054b2:	0192      	lsls	r2, r2, #6
 80054b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054be:	2200      	movs	r2, #0
 80054c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054ca:	220c      	movs	r2, #12
 80054cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054d4:	4b18      	ldr	r3, [pc, #96]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054da:	4b17      	ldr	r3, [pc, #92]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054dc:	2200      	movs	r2, #0
 80054de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054e0:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054e6:	4b14      	ldr	r3, [pc, #80]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054ec:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054ee:	0018      	movs	r0, r3
 80054f0:	f005 fa86 	bl	800aa00 <HAL_UART_Init>
 80054f4:	1e03      	subs	r3, r0, #0
 80054f6:	d001      	beq.n	80054fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80054f8:	f000 fd1c 	bl	8005f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 80054fe:	2100      	movs	r1, #0
 8005500:	0018      	movs	r0, r3
 8005502:	f006 f97d 	bl	800b800 <HAL_UARTEx_SetTxFifoThreshold>
 8005506:	1e03      	subs	r3, r0, #0
 8005508:	d001      	beq.n	800550e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800550a:	f000 fd13 	bl	8005f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800550e:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 8005510:	2100      	movs	r1, #0
 8005512:	0018      	movs	r0, r3
 8005514:	f006 f9b4 	bl	800b880 <HAL_UARTEx_SetRxFifoThreshold>
 8005518:	1e03      	subs	r3, r0, #0
 800551a:	d001      	beq.n	8005520 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800551c:	f000 fd0a 	bl	8005f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <MX_USART1_UART_Init+0x94>)
 8005522:	0018      	movs	r0, r3
 8005524:	f006 f932 	bl	800b78c <HAL_UARTEx_DisableFifoMode>
 8005528:	1e03      	subs	r3, r0, #0
 800552a:	d001      	beq.n	8005530 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800552c:	f000 fd02 	bl	8005f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005530:	46c0      	nop			@ (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	20000e58 	.word	0x20000e58
 800553c:	40013800 	.word	0x40013800

08005540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005544:	4b23      	ldr	r3, [pc, #140]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 8005546:	4a24      	ldr	r2, [pc, #144]	@ (80055d8 <MX_USART2_UART_Init+0x98>)
 8005548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800554a:	4b22      	ldr	r3, [pc, #136]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 800554c:	22e1      	movs	r2, #225	@ 0xe1
 800554e:	0252      	lsls	r2, r2, #9
 8005550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005552:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 8005554:	2200      	movs	r2, #0
 8005556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005558:	4b1e      	ldr	r3, [pc, #120]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 800555a:	2200      	movs	r2, #0
 800555c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800555e:	4b1d      	ldr	r3, [pc, #116]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 8005560:	2200      	movs	r2, #0
 8005562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005564:	4b1b      	ldr	r3, [pc, #108]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 8005566:	220c      	movs	r2, #12
 8005568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800556a:	4b1a      	ldr	r3, [pc, #104]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 800556c:	2200      	movs	r2, #0
 800556e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005570:	4b18      	ldr	r3, [pc, #96]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 8005572:	2200      	movs	r2, #0
 8005574:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005576:	4b17      	ldr	r3, [pc, #92]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 8005578:	2200      	movs	r2, #0
 800557a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800557c:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 800557e:	2200      	movs	r2, #0
 8005580:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005582:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 8005584:	2200      	movs	r2, #0
 8005586:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005588:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 800558a:	0018      	movs	r0, r3
 800558c:	f005 fa38 	bl	800aa00 <HAL_UART_Init>
 8005590:	1e03      	subs	r3, r0, #0
 8005592:	d001      	beq.n	8005598 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005594:	f000 fcce 	bl	8005f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005598:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 800559a:	2100      	movs	r1, #0
 800559c:	0018      	movs	r0, r3
 800559e:	f006 f92f 	bl	800b800 <HAL_UARTEx_SetTxFifoThreshold>
 80055a2:	1e03      	subs	r3, r0, #0
 80055a4:	d001      	beq.n	80055aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80055a6:	f000 fcc5 	bl	8005f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055aa:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 80055ac:	2100      	movs	r1, #0
 80055ae:	0018      	movs	r0, r3
 80055b0:	f006 f966 	bl	800b880 <HAL_UARTEx_SetRxFifoThreshold>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d001      	beq.n	80055bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80055b8:	f000 fcbc 	bl	8005f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <MX_USART2_UART_Init+0x94>)
 80055be:	0018      	movs	r0, r3
 80055c0:	f006 f8e4 	bl	800b78c <HAL_UARTEx_DisableFifoMode>
 80055c4:	1e03      	subs	r3, r0, #0
 80055c6:	d001      	beq.n	80055cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80055c8:	f000 fcb4 	bl	8005f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	20000eec 	.word	0x20000eec
 80055d8:	40004400 	.word	0x40004400

080055dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b08b      	sub	sp, #44	@ 0x2c
 80055e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e2:	2414      	movs	r4, #20
 80055e4:	193b      	adds	r3, r7, r4
 80055e6:	0018      	movs	r0, r3
 80055e8:	2314      	movs	r3, #20
 80055ea:	001a      	movs	r2, r3
 80055ec:	2100      	movs	r1, #0
 80055ee:	f006 fa9f 	bl	800bb30 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055f2:	4b3f      	ldr	r3, [pc, #252]	@ (80056f0 <MX_GPIO_Init+0x114>)
 80055f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055f6:	4b3e      	ldr	r3, [pc, #248]	@ (80056f0 <MX_GPIO_Init+0x114>)
 80055f8:	2104      	movs	r1, #4
 80055fa:	430a      	orrs	r2, r1
 80055fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80055fe:	4b3c      	ldr	r3, [pc, #240]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005602:	2204      	movs	r2, #4
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
 8005608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800560a:	4b39      	ldr	r3, [pc, #228]	@ (80056f0 <MX_GPIO_Init+0x114>)
 800560c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800560e:	4b38      	ldr	r3, [pc, #224]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005610:	2101      	movs	r1, #1
 8005612:	430a      	orrs	r2, r1
 8005614:	635a      	str	r2, [r3, #52]	@ 0x34
 8005616:	4b36      	ldr	r3, [pc, #216]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	2201      	movs	r2, #1
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005622:	4b33      	ldr	r3, [pc, #204]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005626:	4b32      	ldr	r3, [pc, #200]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005628:	2102      	movs	r1, #2
 800562a:	430a      	orrs	r2, r1
 800562c:	635a      	str	r2, [r3, #52]	@ 0x34
 800562e:	4b30      	ldr	r3, [pc, #192]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005632:	2202      	movs	r2, #2
 8005634:	4013      	ands	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800563a:	4b2d      	ldr	r3, [pc, #180]	@ (80056f0 <MX_GPIO_Init+0x114>)
 800563c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800563e:	4b2c      	ldr	r3, [pc, #176]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005640:	2108      	movs	r1, #8
 8005642:	430a      	orrs	r2, r1
 8005644:	635a      	str	r2, [r3, #52]	@ 0x34
 8005646:	4b2a      	ldr	r3, [pc, #168]	@ (80056f0 <MX_GPIO_Init+0x114>)
 8005648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564a:	2208      	movs	r2, #8
 800564c:	4013      	ands	r3, r2
 800564e:	607b      	str	r3, [r7, #4]
 8005650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8005652:	4928      	ldr	r1, [pc, #160]	@ (80056f4 <MX_GPIO_Init+0x118>)
 8005654:	23a0      	movs	r3, #160	@ 0xa0
 8005656:	05db      	lsls	r3, r3, #23
 8005658:	2200      	movs	r2, #0
 800565a:	0018      	movs	r0, r3
 800565c:	f001 fe47 	bl	80072ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005660:	193b      	adds	r3, r7, r4
 8005662:	2202      	movs	r2, #2
 8005664:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005666:	193b      	adds	r3, r7, r4
 8005668:	2200      	movs	r2, #0
 800566a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566c:	193b      	adds	r3, r7, r4
 800566e:	2200      	movs	r2, #0
 8005670:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005672:	193b      	adds	r3, r7, r4
 8005674:	4a20      	ldr	r2, [pc, #128]	@ (80056f8 <MX_GPIO_Init+0x11c>)
 8005676:	0019      	movs	r1, r3
 8005678:	0010      	movs	r0, r2
 800567a:	f001 fcaf 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 800567e:	193b      	adds	r3, r7, r4
 8005680:	4a1c      	ldr	r2, [pc, #112]	@ (80056f4 <MX_GPIO_Init+0x118>)
 8005682:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005684:	193b      	adds	r3, r7, r4
 8005686:	2201      	movs	r2, #1
 8005688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568a:	193b      	adds	r3, r7, r4
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005690:	193b      	adds	r3, r7, r4
 8005692:	2200      	movs	r2, #0
 8005694:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005696:	193a      	adds	r2, r7, r4
 8005698:	23a0      	movs	r3, #160	@ 0xa0
 800569a:	05db      	lsls	r3, r3, #23
 800569c:	0011      	movs	r1, r2
 800569e:	0018      	movs	r0, r3
 80056a0:	f001 fc9c 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056a4:	193b      	adds	r3, r7, r4
 80056a6:	2204      	movs	r2, #4
 80056a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056aa:	193b      	adds	r3, r7, r4
 80056ac:	2200      	movs	r2, #0
 80056ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b0:	193b      	adds	r3, r7, r4
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b6:	193b      	adds	r3, r7, r4
 80056b8:	4a10      	ldr	r2, [pc, #64]	@ (80056fc <MX_GPIO_Init+0x120>)
 80056ba:	0019      	movs	r1, r3
 80056bc:	0010      	movs	r0, r2
 80056be:	f001 fc8d 	bl	8006fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056c2:	0021      	movs	r1, r4
 80056c4:	187b      	adds	r3, r7, r1
 80056c6:	2280      	movs	r2, #128	@ 0x80
 80056c8:	0112      	lsls	r2, r2, #4
 80056ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056cc:	187b      	adds	r3, r7, r1
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d2:	187b      	adds	r3, r7, r1
 80056d4:	2200      	movs	r2, #0
 80056d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d8:	187a      	adds	r2, r7, r1
 80056da:	23a0      	movs	r3, #160	@ 0xa0
 80056dc:	05db      	lsls	r3, r3, #23
 80056de:	0011      	movs	r1, r2
 80056e0:	0018      	movs	r0, r3
 80056e2:	f001 fc7b 	bl	8006fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b00b      	add	sp, #44	@ 0x2c
 80056ec:	bd90      	pop	{r4, r7, pc}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	40021000 	.word	0x40021000
 80056f4:	00008030 	.word	0x00008030
 80056f8:	50000800 	.word	0x50000800
 80056fc:	50000400 	.word	0x50000400

08005700 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	0002      	movs	r2, r0
 8005708:	1dbb      	adds	r3, r7, #6
 800570a:	801a      	strh	r2, [r3, #0]
    TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 800570c:	1dbb      	adds	r3, r7, #6
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	0018      	movs	r0, r3
 8005712:	f7fc f809 	bl	8001728 <__aeabi_ui2f>
 8005716:	1c03      	adds	r3, r0, #0
 8005718:	1c19      	adds	r1, r3, #0
 800571a:	4807      	ldr	r0, [pc, #28]	@ (8005738 <ChangeNote+0x38>)
 800571c:	f7fb fa08 	bl	8000b30 <__aeabi_fdiv>
 8005720:	1c03      	adds	r3, r0, #0
 8005722:	4c06      	ldr	r4, [pc, #24]	@ (800573c <ChangeNote+0x3c>)
 8005724:	1c18      	adds	r0, r3, #0
 8005726:	f7fa ff0f 	bl	8000548 <__aeabi_f2uiz>
 800572a:	0003      	movs	r3, r0
 800572c:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	46bd      	mov	sp, r7
 8005732:	b003      	add	sp, #12
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	4970f780 	.word	0x4970f780
 800573c:	40014800 	.word	0x40014800

08005740 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	0002      	movs	r2, r0
 8005748:	1dfb      	adds	r3, r7, #7
 800574a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800574c:	4ba0      	ldr	r3, [pc, #640]	@ (80059d0 <PlayEffect+0x290>)
 800574e:	2100      	movs	r1, #0
 8005750:	0018      	movs	r0, r3
 8005752:	f004 fabd 	bl	8009cd0 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 8005756:	2005      	movs	r0, #5
 8005758:	f001 fb52 	bl	8006e00 <HAL_Delay>
    switch(effect){
 800575c:	1dfb      	adds	r3, r7, #7
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d900      	bls.n	8005766 <PlayEffect+0x26>
 8005764:	e12a      	b.n	80059bc <PlayEffect+0x27c>
 8005766:	009a      	lsls	r2, r3, #2
 8005768:	4b9a      	ldr	r3, [pc, #616]	@ (80059d4 <PlayEffect+0x294>)
 800576a:	18d3      	adds	r3, r2, r3
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	469f      	mov	pc, r3
        case MenuBeep:

        	curNote = G*3;
 8005770:	4b99      	ldr	r3, [pc, #612]	@ (80059d8 <PlayEffect+0x298>)
 8005772:	2293      	movs	r2, #147	@ 0x93
 8005774:	0112      	lsls	r2, r2, #4
 8005776:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005778:	4b97      	ldr	r3, [pc, #604]	@ (80059d8 <PlayEffect+0x298>)
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	0018      	movs	r0, r3
 800577e:	f7ff ffbf 	bl	8005700 <ChangeNote>
        	HAL_Delay(25);
 8005782:	2019      	movs	r0, #25
 8005784:	f001 fb3c 	bl	8006e00 <HAL_Delay>

        	curNote = G*2;
 8005788:	4b93      	ldr	r3, [pc, #588]	@ (80059d8 <PlayEffect+0x298>)
 800578a:	22c4      	movs	r2, #196	@ 0xc4
 800578c:	00d2      	lsls	r2, r2, #3
 800578e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005790:	4b91      	ldr	r3, [pc, #580]	@ (80059d8 <PlayEffect+0x298>)
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff ffb3 	bl	8005700 <ChangeNote>
        	HAL_Delay(25);
 800579a:	2019      	movs	r0, #25
 800579c:	f001 fb30 	bl	8006e00 <HAL_Delay>

            break;
 80057a0:	e10c      	b.n	80059bc <PlayEffect+0x27c>
        case EggNoise:

        	curNote = A;
 80057a2:	4b8d      	ldr	r3, [pc, #564]	@ (80059d8 <PlayEffect+0x298>)
 80057a4:	22dc      	movs	r2, #220	@ 0xdc
 80057a6:	0052      	lsls	r2, r2, #1
 80057a8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80057aa:	4b8b      	ldr	r3, [pc, #556]	@ (80059d8 <PlayEffect+0x298>)
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	0018      	movs	r0, r3
 80057b0:	f7ff ffa6 	bl	8005700 <ChangeNote>
        	HAL_Delay(20);
 80057b4:	2014      	movs	r0, #20
 80057b6:	f001 fb23 	bl	8006e00 <HAL_Delay>

        	curNote = C;
 80057ba:	4b87      	ldr	r3, [pc, #540]	@ (80059d8 <PlayEffect+0x298>)
 80057bc:	4a87      	ldr	r2, [pc, #540]	@ (80059dc <PlayEffect+0x29c>)
 80057be:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80057c0:	4b85      	ldr	r3, [pc, #532]	@ (80059d8 <PlayEffect+0x298>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7ff ff9b 	bl	8005700 <ChangeNote>
        	HAL_Delay(20);
 80057ca:	2014      	movs	r0, #20
 80057cc:	f001 fb18 	bl	8006e00 <HAL_Delay>

        	curNote = A;
 80057d0:	4b81      	ldr	r3, [pc, #516]	@ (80059d8 <PlayEffect+0x298>)
 80057d2:	22dc      	movs	r2, #220	@ 0xdc
 80057d4:	0052      	lsls	r2, r2, #1
 80057d6:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80057d8:	4b7f      	ldr	r3, [pc, #508]	@ (80059d8 <PlayEffect+0x298>)
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	0018      	movs	r0, r3
 80057de:	f7ff ff8f 	bl	8005700 <ChangeNote>
        	HAL_Delay(20);
 80057e2:	2014      	movs	r0, #20
 80057e4:	f001 fb0c 	bl	8006e00 <HAL_Delay>

        	curNote = C;
 80057e8:	4b7b      	ldr	r3, [pc, #492]	@ (80059d8 <PlayEffect+0x298>)
 80057ea:	4a7c      	ldr	r2, [pc, #496]	@ (80059dc <PlayEffect+0x29c>)
 80057ec:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80057ee:	4b7a      	ldr	r3, [pc, #488]	@ (80059d8 <PlayEffect+0x298>)
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7ff ff84 	bl	8005700 <ChangeNote>
        	HAL_Delay(20);
 80057f8:	2014      	movs	r0, #20
 80057fa:	f001 fb01 	bl	8006e00 <HAL_Delay>

            break;
 80057fe:	e0dd      	b.n	80059bc <PlayEffect+0x27c>
        case YoungNoiseHappy:

        	curNote = F*4;
 8005800:	4b75      	ldr	r3, [pc, #468]	@ (80059d8 <PlayEffect+0x298>)
 8005802:	4a77      	ldr	r2, [pc, #476]	@ (80059e0 <PlayEffect+0x2a0>)
 8005804:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005806:	4b74      	ldr	r3, [pc, #464]	@ (80059d8 <PlayEffect+0x298>)
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	0018      	movs	r0, r3
 800580c:	f7ff ff78 	bl	8005700 <ChangeNote>
        	HAL_Delay(35);
 8005810:	2023      	movs	r0, #35	@ 0x23
 8005812:	f001 faf5 	bl	8006e00 <HAL_Delay>

        	curNote = B*4;
 8005816:	4b70      	ldr	r3, [pc, #448]	@ (80059d8 <PlayEffect+0x298>)
 8005818:	22f7      	movs	r2, #247	@ 0xf7
 800581a:	00d2      	lsls	r2, r2, #3
 800581c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800581e:	4b6e      	ldr	r3, [pc, #440]	@ (80059d8 <PlayEffect+0x298>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff ff6c 	bl	8005700 <ChangeNote>
        	HAL_Delay(15);
 8005828:	200f      	movs	r0, #15
 800582a:	f001 fae9 	bl	8006e00 <HAL_Delay>

            break;
 800582e:	e0c5      	b.n	80059bc <PlayEffect+0x27c>
        case YoungNoiseSad:

        	curNote = B*4;
 8005830:	4b69      	ldr	r3, [pc, #420]	@ (80059d8 <PlayEffect+0x298>)
 8005832:	22f7      	movs	r2, #247	@ 0xf7
 8005834:	00d2      	lsls	r2, r2, #3
 8005836:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005838:	4b67      	ldr	r3, [pc, #412]	@ (80059d8 <PlayEffect+0x298>)
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff ff5f 	bl	8005700 <ChangeNote>
        	HAL_Delay(35);
 8005842:	2023      	movs	r0, #35	@ 0x23
 8005844:	f001 fadc 	bl	8006e00 <HAL_Delay>

        	curNote = B*3;
 8005848:	4b63      	ldr	r3, [pc, #396]	@ (80059d8 <PlayEffect+0x298>)
 800584a:	4a66      	ldr	r2, [pc, #408]	@ (80059e4 <PlayEffect+0x2a4>)
 800584c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800584e:	4b62      	ldr	r3, [pc, #392]	@ (80059d8 <PlayEffect+0x298>)
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	0018      	movs	r0, r3
 8005854:	f7ff ff54 	bl	8005700 <ChangeNote>
        	HAL_Delay(15);
 8005858:	200f      	movs	r0, #15
 800585a:	f001 fad1 	bl	8006e00 <HAL_Delay>

            break;
 800585e:	e0ad      	b.n	80059bc <PlayEffect+0x27c>
        case AdultNoiseHappy:

        	curNote = F/4;
 8005860:	4b5d      	ldr	r3, [pc, #372]	@ (80059d8 <PlayEffect+0x298>)
 8005862:	22ae      	movs	r2, #174	@ 0xae
 8005864:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005866:	4b5c      	ldr	r3, [pc, #368]	@ (80059d8 <PlayEffect+0x298>)
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	0018      	movs	r0, r3
 800586c:	f7ff ff48 	bl	8005700 <ChangeNote>
        	HAL_Delay(35);
 8005870:	2023      	movs	r0, #35	@ 0x23
 8005872:	f001 fac5 	bl	8006e00 <HAL_Delay>

        	curNote = B/4;
 8005876:	4b58      	ldr	r3, [pc, #352]	@ (80059d8 <PlayEffect+0x298>)
 8005878:	227b      	movs	r2, #123	@ 0x7b
 800587a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800587c:	4b56      	ldr	r3, [pc, #344]	@ (80059d8 <PlayEffect+0x298>)
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff ff3d 	bl	8005700 <ChangeNote>
        	HAL_Delay(15);
 8005886:	200f      	movs	r0, #15
 8005888:	f001 faba 	bl	8006e00 <HAL_Delay>

            break;
 800588c:	e096      	b.n	80059bc <PlayEffect+0x27c>
        case AdultNoiseSad:

        	curNote = C/4;
 800588e:	4b52      	ldr	r3, [pc, #328]	@ (80059d8 <PlayEffect+0x298>)
 8005890:	2282      	movs	r2, #130	@ 0x82
 8005892:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005894:	4b50      	ldr	r3, [pc, #320]	@ (80059d8 <PlayEffect+0x298>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff ff31 	bl	8005700 <ChangeNote>
        	HAL_Delay(35);
 800589e:	2023      	movs	r0, #35	@ 0x23
 80058a0:	f001 faae 	bl	8006e00 <HAL_Delay>

        	curNote = A/4;
 80058a4:	4b4c      	ldr	r3, [pc, #304]	@ (80059d8 <PlayEffect+0x298>)
 80058a6:	226e      	movs	r2, #110	@ 0x6e
 80058a8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058aa:	4b4b      	ldr	r3, [pc, #300]	@ (80059d8 <PlayEffect+0x298>)
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7ff ff26 	bl	8005700 <ChangeNote>
        	HAL_Delay(15);
 80058b4:	200f      	movs	r0, #15
 80058b6:	f001 faa3 	bl	8006e00 <HAL_Delay>

        	break;
 80058ba:	e07f      	b.n	80059bc <PlayEffect+0x27c>
        case Evolution:

        	curNote = A*2;
 80058bc:	4b46      	ldr	r3, [pc, #280]	@ (80059d8 <PlayEffect+0x298>)
 80058be:	22dc      	movs	r2, #220	@ 0xdc
 80058c0:	0092      	lsls	r2, r2, #2
 80058c2:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058c4:	4b44      	ldr	r3, [pc, #272]	@ (80059d8 <PlayEffect+0x298>)
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff ff19 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 80058ce:	2032      	movs	r0, #50	@ 0x32
 80058d0:	f001 fa96 	bl	8006e00 <HAL_Delay>

        	curNote = B*2;
 80058d4:	4b40      	ldr	r3, [pc, #256]	@ (80059d8 <PlayEffect+0x298>)
 80058d6:	22f7      	movs	r2, #247	@ 0xf7
 80058d8:	0092      	lsls	r2, r2, #2
 80058da:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058dc:	4b3e      	ldr	r3, [pc, #248]	@ (80059d8 <PlayEffect+0x298>)
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f7ff ff0d 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 80058e6:	2032      	movs	r0, #50	@ 0x32
 80058e8:	f001 fa8a 	bl	8006e00 <HAL_Delay>

        	curNote = C*2;
 80058ec:	4b3a      	ldr	r3, [pc, #232]	@ (80059d8 <PlayEffect+0x298>)
 80058ee:	4a3e      	ldr	r2, [pc, #248]	@ (80059e8 <PlayEffect+0x2a8>)
 80058f0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058f2:	4b39      	ldr	r3, [pc, #228]	@ (80059d8 <PlayEffect+0x298>)
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	0018      	movs	r0, r3
 80058f8:	f7ff ff02 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 80058fc:	2032      	movs	r0, #50	@ 0x32
 80058fe:	f001 fa7f 	bl	8006e00 <HAL_Delay>

        	curNote = A*2;
 8005902:	4b35      	ldr	r3, [pc, #212]	@ (80059d8 <PlayEffect+0x298>)
 8005904:	22dc      	movs	r2, #220	@ 0xdc
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800590a:	4b33      	ldr	r3, [pc, #204]	@ (80059d8 <PlayEffect+0x298>)
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	0018      	movs	r0, r3
 8005910:	f7ff fef6 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 8005914:	2032      	movs	r0, #50	@ 0x32
 8005916:	f001 fa73 	bl	8006e00 <HAL_Delay>

        	curNote = C*2;
 800591a:	4b2f      	ldr	r3, [pc, #188]	@ (80059d8 <PlayEffect+0x298>)
 800591c:	4a32      	ldr	r2, [pc, #200]	@ (80059e8 <PlayEffect+0x2a8>)
 800591e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005920:	4b2d      	ldr	r3, [pc, #180]	@ (80059d8 <PlayEffect+0x298>)
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	0018      	movs	r0, r3
 8005926:	f7ff feeb 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 800592a:	2032      	movs	r0, #50	@ 0x32
 800592c:	f001 fa68 	bl	8006e00 <HAL_Delay>

        	curNote = D*2;
 8005930:	4b29      	ldr	r3, [pc, #164]	@ (80059d8 <PlayEffect+0x298>)
 8005932:	4a2e      	ldr	r2, [pc, #184]	@ (80059ec <PlayEffect+0x2ac>)
 8005934:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005936:	4b28      	ldr	r3, [pc, #160]	@ (80059d8 <PlayEffect+0x298>)
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	0018      	movs	r0, r3
 800593c:	f7ff fee0 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 8005940:	2032      	movs	r0, #50	@ 0x32
 8005942:	f001 fa5d 	bl	8006e00 <HAL_Delay>

        	curNote = B*2;
 8005946:	4b24      	ldr	r3, [pc, #144]	@ (80059d8 <PlayEffect+0x298>)
 8005948:	22f7      	movs	r2, #247	@ 0xf7
 800594a:	0092      	lsls	r2, r2, #2
 800594c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800594e:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <PlayEffect+0x298>)
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	0018      	movs	r0, r3
 8005954:	f7ff fed4 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 8005958:	2032      	movs	r0, #50	@ 0x32
 800595a:	f001 fa51 	bl	8006e00 <HAL_Delay>

        	curNote = D*2;
 800595e:	4b1e      	ldr	r3, [pc, #120]	@ (80059d8 <PlayEffect+0x298>)
 8005960:	4a22      	ldr	r2, [pc, #136]	@ (80059ec <PlayEffect+0x2ac>)
 8005962:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005964:	4b1c      	ldr	r3, [pc, #112]	@ (80059d8 <PlayEffect+0x298>)
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	0018      	movs	r0, r3
 800596a:	f7ff fec9 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 800596e:	2032      	movs	r0, #50	@ 0x32
 8005970:	f001 fa46 	bl	8006e00 <HAL_Delay>

        	curNote = E*2;
 8005974:	4b18      	ldr	r3, [pc, #96]	@ (80059d8 <PlayEffect+0x298>)
 8005976:	4a1e      	ldr	r2, [pc, #120]	@ (80059f0 <PlayEffect+0x2b0>)
 8005978:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800597a:	4b17      	ldr	r3, [pc, #92]	@ (80059d8 <PlayEffect+0x298>)
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	0018      	movs	r0, r3
 8005980:	f7ff febe 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 8005984:	2032      	movs	r0, #50	@ 0x32
 8005986:	f001 fa3b 	bl	8006e00 <HAL_Delay>

        	curNote = G*2;
 800598a:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <PlayEffect+0x298>)
 800598c:	22c4      	movs	r2, #196	@ 0xc4
 800598e:	00d2      	lsls	r2, r2, #3
 8005990:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005992:	4b11      	ldr	r3, [pc, #68]	@ (80059d8 <PlayEffect+0x298>)
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	0018      	movs	r0, r3
 8005998:	f7ff feb2 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 800599c:	2032      	movs	r0, #50	@ 0x32
 800599e:	f001 fa2f 	bl	8006e00 <HAL_Delay>

        	curNote = G*2;
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <PlayEffect+0x298>)
 80059a4:	22c4      	movs	r2, #196	@ 0xc4
 80059a6:	00d2      	lsls	r2, r2, #3
 80059a8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059aa:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <PlayEffect+0x298>)
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f7ff fea6 	bl	8005700 <ChangeNote>
        	HAL_Delay(50);
 80059b4:	2032      	movs	r0, #50	@ 0x32
 80059b6:	f001 fa23 	bl	8006e00 <HAL_Delay>

        	break;
 80059ba:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80059bc:	4b04      	ldr	r3, [pc, #16]	@ (80059d0 <PlayEffect+0x290>)
 80059be:	2100      	movs	r1, #0
 80059c0:	0018      	movs	r0, r3
 80059c2:	f004 fa75 	bl	8009eb0 <HAL_TIM_PWM_Stop>
}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b002      	add	sp, #8
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			@ (mov r8, r8)
 80059d0:	20000e0c 	.word	0x20000e0c
 80059d4:	0800cee8 	.word	0x0800cee8
 80059d8:	20000a4e 	.word	0x20000a4e
 80059dc:	0000020b 	.word	0x0000020b
 80059e0:	00000ae8 	.word	0x00000ae8
 80059e4:	000005ca 	.word	0x000005ca
 80059e8:	00000416 	.word	0x00000416
 80059ec:	00000496 	.word	0x00000496
 80059f0:	00000526 	.word	0x00000526

080059f4 <Animate>:

//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af04      	add	r7, sp, #16
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
	++currentFrame;
 80059fe:	4b14      	ldr	r3, [pc, #80]	@ (8005a50 <Animate+0x5c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	4b12      	ldr	r3, [pc, #72]	@ (8005a50 <Animate+0x5c>)
 8005a06:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8005a08:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <Animate+0x5c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d202      	bcs.n	8005a18 <Animate+0x24>
	{
		currentFrame = 0;
 8005a12:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <Animate+0x5c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 30, 40, 64, 64, animation[currentFrame].Size);
 8005a18:	4b0d      	ldr	r3, [pc, #52]	@ (8005a50 <Animate+0x5c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	18d3      	adds	r3, r2, r3
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <Animate+0x5c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	18d3      	adds	r3, r2, r3
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4908      	ldr	r1, [pc, #32]	@ (8005a54 <Animate+0x60>)
 8005a34:	9302      	str	r3, [sp, #8]
 8005a36:	2340      	movs	r3, #64	@ 0x40
 8005a38:	9301      	str	r3, [sp, #4]
 8005a3a:	2340      	movs	r3, #64	@ 0x40
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2328      	movs	r3, #40	@ 0x28
 8005a40:	221e      	movs	r2, #30
 8005a42:	f7fe faf9 	bl	8004038 <drawImage>
	return;
 8005a46:	46c0      	nop			@ (mov r8, r8)
}
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	b002      	add	sp, #8
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	20000ca0 	.word	0x20000ca0
 8005a54:	200009b4 	.word	0x200009b4

08005a58 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	6039      	str	r1, [r7, #0]
 8005a60:	0011      	movs	r1, r2
 8005a62:	1dfb      	adds	r3, r7, #7
 8005a64:	1c02      	adds	r2, r0, #0
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	1dbb      	adds	r3, r7, #6
 8005a6a:	1c0a      	adds	r2, r1, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8005a6e:	1dfa      	adds	r2, r7, #7
 8005a70:	4811      	ldr	r0, [pc, #68]	@ (8005ab8 <_ADXL343_ReadReg8+0x60>)
 8005a72:	23fa      	movs	r3, #250	@ 0xfa
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	2301      	movs	r3, #1
 8005a7a:	2128      	movs	r1, #40	@ 0x28
 8005a7c:	f001 fcfa 	bl	8007474 <HAL_I2C_Master_Transmit>
 8005a80:	1e03      	subs	r3, r0, #0
 8005a82:	d002      	beq.n	8005a8a <_ADXL343_ReadReg8+0x32>
      return -1;
 8005a84:	2301      	movs	r3, #1
 8005a86:	425b      	negs	r3, r3
 8005a88:	e011      	b.n	8005aae <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8005a8a:	1dbb      	adds	r3, r7, #6
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	b299      	uxth	r1, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	4809      	ldr	r0, [pc, #36]	@ (8005ab8 <_ADXL343_ReadReg8+0x60>)
 8005a94:	23fa      	movs	r3, #250	@ 0xfa
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	000b      	movs	r3, r1
 8005a9c:	2128      	movs	r1, #40	@ 0x28
 8005a9e:	f001 fe13 	bl	80076c8 <HAL_I2C_Master_Receive>
 8005aa2:	1e03      	subs	r3, r0, #0
 8005aa4:	d002      	beq.n	8005aac <_ADXL343_ReadReg8+0x54>
    return -2;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	425b      	negs	r3, r3
 8005aaa:	e000      	b.n	8005aae <_ADXL343_ReadReg8+0x56>

  return 0;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b002      	add	sp, #8
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	20000d28 	.word	0x20000d28

08005abc <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	0002      	movs	r2, r0
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	1dbb      	adds	r3, r7, #6
 8005aca:	1c0a      	adds	r2, r1, #0
 8005acc:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8005ace:	210c      	movs	r1, #12
 8005ad0:	187b      	adds	r3, r7, r1
 8005ad2:	1dfa      	adds	r2, r7, #7
 8005ad4:	7812      	ldrb	r2, [r2, #0]
 8005ad6:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	1dba      	adds	r2, r7, #6
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 1000)==HAL_OK)
 8005ae0:	187a      	adds	r2, r7, r1
 8005ae2:	4809      	ldr	r0, [pc, #36]	@ (8005b08 <_ADXL343_WriteReg8+0x4c>)
 8005ae4:	23fa      	movs	r3, #250	@ 0xfa
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	2302      	movs	r3, #2
 8005aec:	2128      	movs	r1, #40	@ 0x28
 8005aee:	f001 fcc1 	bl	8007474 <HAL_I2C_Master_Transmit>
 8005af2:	1e03      	subs	r3, r0, #0
 8005af4:	d102      	bne.n	8005afc <_ADXL343_WriteReg8+0x40>
      return -1;
 8005af6:	2301      	movs	r3, #1
 8005af8:	425b      	negs	r3, r3
 8005afa:	e000      	b.n	8005afe <_ADXL343_WriteReg8+0x42>

  return 0;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			@ (mov r8, r8)
 8005b08:	20000d28 	.word	0x20000d28

08005b0c <GetLatLon>:
	}
}

}
void GetLatLon()
{
 8005b0c:	b5b0      	push	{r4, r5, r7, lr}
 8005b0e:	b08a      	sub	sp, #40	@ 0x28
 8005b10:	af00      	add	r7, sp, #0
	int gpsI=0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	623b      	str	r3, [r7, #32]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005b1a:	e122      	b.n	8005d62 <GetLatLon+0x256>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8005d90 <GetLatLon+0x284>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e00d      	b.n	8005b40 <GetLatLon+0x34>
 8005b24:	4b9a      	ldr	r3, [pc, #616]	@ (8005d90 <GetLatLon+0x284>)
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	4b99      	ldr	r3, [pc, #612]	@ (8005d94 <GetLatLon+0x288>)
 8005b2e:	2100      	movs	r1, #0
 8005b30:	5499      	strb	r1, [r3, r2]
 8005b32:	4b97      	ldr	r3, [pc, #604]	@ (8005d90 <GetLatLon+0x284>)
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3301      	adds	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	4b94      	ldr	r3, [pc, #592]	@ (8005d90 <GetLatLon+0x284>)
 8005b3e:	801a      	strh	r2, [r3, #0]
 8005b40:	4b93      	ldr	r3, [pc, #588]	@ (8005d90 <GetLatLon+0x284>)
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b48:	d9ec      	bls.n	8005b24 <GetLatLon+0x18>
								buffer[0]='$';
 8005b4a:	4b92      	ldr	r3, [pc, #584]	@ (8005d94 <GetLatLon+0x288>)
 8005b4c:	2224      	movs	r2, #36	@ 0x24
 8005b4e:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8005b54:	4a8f      	ldr	r2, [pc, #572]	@ (8005d94 <GetLatLon+0x288>)
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	18d3      	adds	r3, r2, r3
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b0a      	cmp	r3, #10
 8005b5e:	d000      	beq.n	8005b62 <GetLatLon+0x56>
 8005b60:	e0fc      	b.n	8005d5c <GetLatLon+0x250>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8005b62:	4a8c      	ldr	r2, [pc, #560]	@ (8005d94 <GetLatLon+0x288>)
 8005b64:	4b8c      	ldr	r3, [pc, #560]	@ (8005d98 <GetLatLon+0x28c>)
 8005b66:	0011      	movs	r1, r2
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 fd9f 	bl	80066ac <minmea_parse_gga>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d100      	bne.n	8005b74 <GetLatLon+0x68>
 8005b72:	e0dc      	b.n	8005d2e <GetLatLon+0x222>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8005b74:	4b89      	ldr	r3, [pc, #548]	@ (8005d9c <GetLatLon+0x290>)
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7fe fdbc 	bl	80046f4 <minmea_tocoord>
 8005b7c:	1c02      	adds	r2, r0, #0
 8005b7e:	2408      	movs	r4, #8
 8005b80:	193b      	adds	r3, r7, r4
 8005b82:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8005b84:	4b86      	ldr	r3, [pc, #536]	@ (8005da0 <GetLatLon+0x294>)
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7fe fdb4 	bl	80046f4 <minmea_tocoord>
 8005b8c:	1c02      	adds	r2, r0, #0
 8005b8e:	193b      	adds	r3, r7, r4
 8005b90:	605a      	str	r2, [r3, #4]
			  							  				      game.time = ggaStruct.time;
 8005b92:	4b84      	ldr	r3, [pc, #528]	@ (8005da4 <GetLatLon+0x298>)
 8005b94:	4a80      	ldr	r2, [pc, #512]	@ (8005d98 <GetLatLon+0x28c>)
 8005b96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005b98:	c313      	stmia	r3!, {r0, r1, r4}
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	601a      	str	r2, [r3, #0]
			  							  				      frameGot=1;
 8005b9e:	4b82      	ldr	r3, [pc, #520]	@ (8005da8 <GetLatLon+0x29c>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
			  							  				  posCheckI=0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	623b      	str	r3, [r7, #32]
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	e0a1      	b.n	8005cf2 <GetLatLon+0x1e6>
			  							  				  			  				      {

			  							  				  			  				    	  tempPos = game.positions[posCheckI];
 8005bae:	003a      	movs	r2, r7
 8005bb0:	497c      	ldr	r1, [pc, #496]	@ (8005da4 <GetLatLon+0x298>)
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	3303      	adds	r3, #3
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	18cb      	adds	r3, r1, r3
 8005bba:	cb03      	ldmia	r3!, {r0, r1}
 8005bbc:	c203      	stmia	r2!, {r0, r1}
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005bbe:	003b      	movs	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	497a      	ldr	r1, [pc, #488]	@ (8005dac <GetLatLon+0x2a0>)
 8005bc4:	1c18      	adds	r0, r3, #0
 8005bc6:	f7fa fc8b 	bl	80004e0 <__aeabi_fcmpgt>
 8005bca:	1e03      	subs	r3, r0, #0
 8005bcc:	d108      	bne.n	8005be0 <GetLatLon+0xd4>
 8005bce:	003b      	movs	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4977      	ldr	r1, [pc, #476]	@ (8005db0 <GetLatLon+0x2a4>)
 8005bd4:	1c18      	adds	r0, r3, #0
 8005bd6:	f7fa fc6f 	bl	80004b8 <__aeabi_fcmplt>
 8005bda:	1e03      	subs	r3, r0, #0
 8005bdc:	d100      	bne.n	8005be0 <GetLatLon+0xd4>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;

			  							  				  			  				    	  }
			  							  				  			  				    	  else return;
 8005bde:	e0d4      	b.n	8005d8a <GetLatLon+0x27e>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005be0:	003b      	movs	r3, r7
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	4971      	ldr	r1, [pc, #452]	@ (8005dac <GetLatLon+0x2a0>)
 8005be6:	1c18      	adds	r0, r3, #0
 8005be8:	f7fa fc7a 	bl	80004e0 <__aeabi_fcmpgt>
 8005bec:	1e03      	subs	r3, r0, #0
 8005bee:	d108      	bne.n	8005c02 <GetLatLon+0xf6>
 8005bf0:	003b      	movs	r3, r7
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	496e      	ldr	r1, [pc, #440]	@ (8005db0 <GetLatLon+0x2a4>)
 8005bf6:	1c18      	adds	r0, r3, #0
 8005bf8:	f7fa fc5e 	bl	80004b8 <__aeabi_fcmplt>
 8005bfc:	1e03      	subs	r3, r0, #0
 8005bfe:	d100      	bne.n	8005c02 <GetLatLon+0xf6>
			  							  				  			  				    	  else return;
 8005c00:	e0c3      	b.n	8005d8a <GetLatLon+0x27e>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005c02:	2408      	movs	r4, #8
 8005c04:	193b      	adds	r3, r7, r4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4968      	ldr	r1, [pc, #416]	@ (8005dac <GetLatLon+0x2a0>)
 8005c0a:	1c18      	adds	r0, r3, #0
 8005c0c:	f7fa fc68 	bl	80004e0 <__aeabi_fcmpgt>
 8005c10:	1e03      	subs	r3, r0, #0
 8005c12:	d108      	bne.n	8005c26 <GetLatLon+0x11a>
 8005c14:	193b      	adds	r3, r7, r4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4965      	ldr	r1, [pc, #404]	@ (8005db0 <GetLatLon+0x2a4>)
 8005c1a:	1c18      	adds	r0, r3, #0
 8005c1c:	f7fa fc4c 	bl	80004b8 <__aeabi_fcmplt>
 8005c20:	1e03      	subs	r3, r0, #0
 8005c22:	d100      	bne.n	8005c26 <GetLatLon+0x11a>
			  							  				  			  				    	  else return;
 8005c24:	e0b1      	b.n	8005d8a <GetLatLon+0x27e>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005c26:	2408      	movs	r4, #8
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	495f      	ldr	r1, [pc, #380]	@ (8005dac <GetLatLon+0x2a0>)
 8005c2e:	1c18      	adds	r0, r3, #0
 8005c30:	f7fa fc56 	bl	80004e0 <__aeabi_fcmpgt>
 8005c34:	1e03      	subs	r3, r0, #0
 8005c36:	d108      	bne.n	8005c4a <GetLatLon+0x13e>
 8005c38:	193b      	adds	r3, r7, r4
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	495c      	ldr	r1, [pc, #368]	@ (8005db0 <GetLatLon+0x2a4>)
 8005c3e:	1c18      	adds	r0, r3, #0
 8005c40:	f7fa fc3a 	bl	80004b8 <__aeabi_fcmplt>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d100      	bne.n	8005c4a <GetLatLon+0x13e>
			  							  				  			  				    	  else return;
 8005c48:	e09f      	b.n	8005d8a <GetLatLon+0x27e>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
 8005c4a:	003b      	movs	r3, r7
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	2408      	movs	r4, #8
 8005c50:	193b      	adds	r3, r7, r4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	1c19      	adds	r1, r3, #0
 8005c56:	1c10      	adds	r0, r2, #0
 8005c58:	f7fb fa92 	bl	8001180 <__aeabi_fsub>
 8005c5c:	1c03      	adds	r3, r0, #0
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	1c18      	adds	r0, r3, #0
 8005c64:	f7fd fd18 	bl	8003698 <__aeabi_f2d>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	000b      	movs	r3, r1
 8005c6c:	61ba      	str	r2, [r7, #24]
 8005c6e:	61fb      	str	r3, [r7, #28]
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
 8005c70:	003b      	movs	r3, r7
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	193b      	adds	r3, r7, r4
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	1c19      	adds	r1, r3, #0
 8005c7a:	1c10      	adds	r0, r2, #0
 8005c7c:	f7fb fa80 	bl	8001180 <__aeabi_fsub>
 8005c80:	1c03      	adds	r3, r0, #0
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	1c18      	adds	r0, r3, #0
 8005c88:	f7fd fd06 	bl	8003698 <__aeabi_f2d>
 8005c8c:	0002      	movs	r2, r0
 8005c8e:	000b      	movs	r3, r1
 8005c90:	613a      	str	r2, [r7, #16]
 8005c92:	617b      	str	r3, [r7, #20]
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	69b8      	ldr	r0, [r7, #24]
 8005c9a:	69f9      	ldr	r1, [r7, #28]
 8005c9c:	f7fc fd8a 	bl	80027b4 <__aeabi_dmul>
 8005ca0:	0002      	movs	r2, r0
 8005ca2:	000b      	movs	r3, r1
 8005ca4:	0014      	movs	r4, r2
 8005ca6:	001d      	movs	r5, r3
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	6938      	ldr	r0, [r7, #16]
 8005cae:	6979      	ldr	r1, [r7, #20]
 8005cb0:	f7fc fd80 	bl	80027b4 <__aeabi_dmul>
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	000b      	movs	r3, r1
 8005cb8:	0020      	movs	r0, r4
 8005cba:	0029      	movs	r1, r5
 8005cbc:	f7fb fd7a 	bl	80017b4 <__aeabi_dadd>
 8005cc0:	0002      	movs	r2, r0
 8005cc2:	000b      	movs	r3, r1
 8005cc4:	0010      	movs	r0, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	f006 fbad 	bl	800c426 <sqrt>
 8005ccc:	0004      	movs	r4, r0
 8005cce:	000d      	movs	r5, r1
 8005cd0:	4b38      	ldr	r3, [pc, #224]	@ (8005db4 <GetLatLon+0x2a8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	1c18      	adds	r0, r3, #0
 8005cd6:	f7fd fcdf 	bl	8003698 <__aeabi_f2d>
 8005cda:	0002      	movs	r2, r0
 8005cdc:	000b      	movs	r3, r1
 8005cde:	0020      	movs	r0, r4
 8005ce0:	0029      	movs	r1, r5
 8005ce2:	f7fa fbaf 	bl	8000444 <__aeabi_dcmplt>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d14c      	bne.n	8005d84 <GetLatLon+0x278>
 8005cea:	46c0      	nop			@ (mov r8, r8)
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	623b      	str	r3, [r7, #32]
 8005cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8005da4 <GetLatLon+0x298>)
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d900      	bls.n	8005cfe <GetLatLon+0x1f2>
 8005cfc:	e757      	b.n	8005bae <GetLatLon+0xa2>

			  							  				  			  				      }
			  							  				game.positions[game.numLocations] = pos;
 8005cfe:	4b29      	ldr	r3, [pc, #164]	@ (8005da4 <GetLatLon+0x298>)
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	4a28      	ldr	r2, [pc, #160]	@ (8005da4 <GetLatLon+0x298>)
 8005d04:	3303      	adds	r3, #3
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	2108      	movs	r1, #8
 8005d0a:	1879      	adds	r1, r7, r1
 8005d0c:	18d3      	adds	r3, r2, r3
 8005d0e:	000a      	movs	r2, r1
 8005d10:	ca03      	ldmia	r2!, {r0, r1}
 8005d12:	c303      	stmia	r3!, {r0, r1}
			  							  				game.numLocations++;
 8005d14:	4b23      	ldr	r3, [pc, #140]	@ (8005da4 <GetLatLon+0x298>)
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	4b22      	ldr	r3, [pc, #136]	@ (8005da4 <GetLatLon+0x298>)
 8005d1c:	615a      	str	r2, [r3, #20]
			  							  				if(game.numLocations>31)game.numLocations=0;
 8005d1e:	4b21      	ldr	r3, [pc, #132]	@ (8005da4 <GetLatLon+0x298>)
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	2b1f      	cmp	r3, #31
 8005d24:	d930      	bls.n	8005d88 <GetLatLon+0x27c>
 8005d26:	4b1f      	ldr	r3, [pc, #124]	@ (8005da4 <GetLatLon+0x298>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	615a      	str	r2, [r3, #20]
			  							  				      break;
 8005d2c:	e02c      	b.n	8005d88 <GetLatLon+0x27c>
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005d2e:	4b18      	ldr	r3, [pc, #96]	@ (8005d90 <GetLatLon+0x284>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	e00d      	b.n	8005d52 <GetLatLon+0x246>
 8005d36:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <GetLatLon+0x284>)
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <GetLatLon+0x288>)
 8005d40:	2100      	movs	r1, #0
 8005d42:	5499      	strb	r1, [r3, r2]
 8005d44:	4b12      	ldr	r3, [pc, #72]	@ (8005d90 <GetLatLon+0x284>)
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <GetLatLon+0x284>)
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	4b0f      	ldr	r3, [pc, #60]	@ (8005d90 <GetLatLon+0x284>)
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d5a:	d9ec      	bls.n	8005d36 <GetLatLon+0x22a>
			  				  }
			  			  gpsI++;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	3301      	adds	r3, #1
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d64:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <GetLatLon+0x288>)
 8005d66:	18d1      	adds	r1, r2, r3
 8005d68:	23fa      	movs	r3, #250	@ 0xfa
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4812      	ldr	r0, [pc, #72]	@ (8005db8 <GetLatLon+0x2ac>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f004 fe9c 	bl	800aaac <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8005d74:	4a07      	ldr	r2, [pc, #28]	@ (8005d94 <GetLatLon+0x288>)
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b24      	cmp	r3, #36	@ 0x24
 8005d7e:	d000      	beq.n	8005d82 <GetLatLon+0x276>
 8005d80:	e6e8      	b.n	8005b54 <GetLatLon+0x48>
 8005d82:	e6cb      	b.n	8005b1c <GetLatLon+0x10>
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8005d84:	46c0      	nop			@ (mov r8, r8)
 8005d86:	e000      	b.n	8005d8a <GetLatLon+0x27e>
			  							  				      break;
 8005d88:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b00a      	add	sp, #40	@ 0x28
 8005d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d90:	20000ba8 	.word	0x20000ba8
 8005d94:	20000bfc 	.word	0x20000bfc
 8005d98:	20000bac 	.word	0x20000bac
 8005d9c:	20000bbc 	.word	0x20000bbc
 8005da0:	20000bc4 	.word	0x20000bc4
 8005da4:	20000a54 	.word	0x20000a54
 8005da8:	20000bfa 	.word	0x20000bfa
 8005dac:	358637bd 	.word	0x358637bd
 8005db0:	b58637bd 	.word	0xb58637bd
 8005db4:	20000ca4 	.word	0x20000ca4
 8005db8:	20000e58 	.word	0x20000e58

08005dbc <GetJustLatLon>:
struct latLon GetJustLatLon()
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b089      	sub	sp, #36	@ 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	int gpsI=0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005dcc:	e057      	b.n	8005e7e <GetJustLatLon+0xc2>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005dce:	4b36      	ldr	r3, [pc, #216]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e00d      	b.n	8005df2 <GetJustLatLon+0x36>
 8005dd6:	4b34      	ldr	r3, [pc, #208]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	001a      	movs	r2, r3
 8005dde:	4b33      	ldr	r3, [pc, #204]	@ (8005eac <GetJustLatLon+0xf0>)
 8005de0:	2100      	movs	r1, #0
 8005de2:	5499      	strb	r1, [r3, r2]
 8005de4:	4b30      	ldr	r3, [pc, #192]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3301      	adds	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dfa:	d9ec      	bls.n	8005dd6 <GetJustLatLon+0x1a>
								buffer[0]='$';
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8005eac <GetJustLatLon+0xf0>)
 8005dfe:	2224      	movs	r2, #36	@ 0x24
 8005e00:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8005e06:	4a29      	ldr	r2, [pc, #164]	@ (8005eac <GetJustLatLon+0xf0>)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b0a      	cmp	r3, #10
 8005e10:	d132      	bne.n	8005e78 <GetJustLatLon+0xbc>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8005e12:	4a26      	ldr	r2, [pc, #152]	@ (8005eac <GetJustLatLon+0xf0>)
 8005e14:	4b26      	ldr	r3, [pc, #152]	@ (8005eb0 <GetJustLatLon+0xf4>)
 8005e16:	0011      	movs	r1, r2
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f000 fc47 	bl	80066ac <minmea_parse_gga>
 8005e1e:	1e03      	subs	r3, r0, #0
 8005e20:	d013      	beq.n	8005e4a <GetJustLatLon+0x8e>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8005e22:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <GetJustLatLon+0xf8>)
 8005e24:	0018      	movs	r0, r3
 8005e26:	f7fe fc65 	bl	80046f4 <minmea_tocoord>
 8005e2a:	1c02      	adds	r2, r0, #0
 8005e2c:	2410      	movs	r4, #16
 8005e2e:	193b      	adds	r3, r7, r4
 8005e30:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8005e32:	4b21      	ldr	r3, [pc, #132]	@ (8005eb8 <GetJustLatLon+0xfc>)
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7fe fc5d 	bl	80046f4 <minmea_tocoord>
 8005e3a:	1c02      	adds	r2, r0, #0
 8005e3c:	193b      	adds	r3, r7, r4
 8005e3e:	605a      	str	r2, [r3, #4]
			  							  				      return pos;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	193a      	adds	r2, r7, r4
 8005e44:	ca03      	ldmia	r2!, {r0, r1}
 8005e46:	c303      	stmia	r3!, {r0, r1}
 8005e48:	e029      	b.n	8005e9e <GetJustLatLon+0xe2>
			  							  				      break;
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005e4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	e00d      	b.n	8005e6e <GetJustLatLon+0xb2>
 8005e52:	4b15      	ldr	r3, [pc, #84]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	001a      	movs	r2, r3
 8005e5a:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <GetJustLatLon+0xf0>)
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	5499      	strb	r1, [r3, r2]
 8005e60:	4b11      	ldr	r3, [pc, #68]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3301      	adds	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <GetJustLatLon+0xec>)
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e76:	d9ec      	bls.n	8005e52 <GetJustLatLon+0x96>
			  				  }
			  			  gpsI++;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	61fb      	str	r3, [r7, #28]
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <GetJustLatLon+0xf0>)
 8005e82:	18d1      	adds	r1, r2, r3
 8005e84:	23fa      	movs	r3, #250	@ 0xfa
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	480c      	ldr	r0, [pc, #48]	@ (8005ebc <GetJustLatLon+0x100>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f004 fe0e 	bl	800aaac <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8005e90:	4a06      	ldr	r2, [pc, #24]	@ (8005eac <GetJustLatLon+0xf0>)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b24      	cmp	r3, #36	@ 0x24
 8005e9a:	d1b4      	bne.n	8005e06 <GetJustLatLon+0x4a>
 8005e9c:	e797      	b.n	8005dce <GetJustLatLon+0x12>
			  							  				      return pos;
 8005e9e:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b009      	add	sp, #36	@ 0x24
 8005ea6:	bd90      	pop	{r4, r7, pc}
 8005ea8:	20000ba8 	.word	0x20000ba8
 8005eac:	20000bfc 	.word	0x20000bfc
 8005eb0:	20000bac 	.word	0x20000bac
 8005eb4:	20000bbc 	.word	0x20000bbc
 8005eb8:	20000bc4 	.word	0x20000bc4
 8005ebc:	20000e58 	.word	0x20000e58

08005ec0 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b091      	sub	sp, #68	@ 0x44
 8005ec4:	af04      	add	r7, sp, #16
 8005ec6:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	005a      	lsls	r2, r3, #1
 8005ecc:	2408      	movs	r4, #8
 8005ece:	1939      	adds	r1, r7, r4
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f003 f93e 	bl	8009154 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8005ed8:	0022      	movs	r2, r4
 8005eda:	18bb      	adds	r3, r7, r2
 8005edc:	789b      	ldrb	r3, [r3, #2]
 8005ede:	2b3a      	cmp	r3, #58	@ 0x3a
 8005ee0:	d903      	bls.n	8005eea <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8005ee2:	18bb      	adds	r3, r7, r2
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	709a      	strb	r2, [r3, #2]
 8005ee8:	e006      	b.n	8005ef8 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8005eea:	2108      	movs	r1, #8
 8005eec:	187b      	adds	r3, r7, r1
 8005eee:	789b      	ldrb	r3, [r3, #2]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8005ef8:	46c0      	nop			@ (mov r8, r8)
 8005efa:	2308      	movs	r3, #8
 8005efc:	18f9      	adds	r1, r7, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	0018      	movs	r0, r3
 8005f04:	f002 ffe6 	bl	8008ed4 <HAL_RTC_SetAlarm_IT>
 8005f08:	1e03      	subs	r3, r0, #0
 8005f0a:	d1f6      	bne.n	8005efa <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8005f0c:	4a07      	ldr	r2, [pc, #28]	@ (8005f2c <HAL_RTC_AlarmAEventCallback+0x6c>)
 8005f0e:	2301      	movs	r3, #1
 8005f10:	9302      	str	r3, [sp, #8]
 8005f12:	2301      	movs	r3, #1
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <HAL_RTC_AlarmAEventCallback+0x70>)
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	211e      	movs	r1, #30
 8005f1e:	201e      	movs	r0, #30
 8005f20:	f7fd fed1 	bl	8003cc6 <drawString>
}
 8005f24:	46c0      	nop			@ (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b00d      	add	sp, #52	@ 0x34
 8005f2a:	bd90      	pop	{r4, r7, pc}
 8005f2c:	0800c838 	.word	0x0800c838
 8005f30:	ffffe007 	.word	0xffffe007

08005f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005f38:	b672      	cpsid	i
}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005f3c:	46c0      	nop			@ (mov r8, r8)
 8005f3e:	e7fd      	b.n	8005f3c <Error_Handler+0x8>

08005f40 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	0002      	movs	r2, r0
 8005f48:	1dfb      	adds	r3, r7, #7
 8005f4a:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8005f4c:	1dfb      	adds	r3, r7, #7
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <minmea_isfield+0x48>)
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	001a      	movs	r2, r3
 8005f5a:	2397      	movs	r3, #151	@ 0x97
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <minmea_isfield+0x34>
 8005f60:	1dfb      	adds	r3, r7, #7
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b2c      	cmp	r3, #44	@ 0x2c
 8005f66:	d005      	beq.n	8005f74 <minmea_isfield+0x34>
 8005f68:	1dfb      	adds	r3, r7, #7
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f6e:	d001      	beq.n	8005f74 <minmea_isfield+0x34>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <minmea_isfield+0x36>
 8005f74:	2300      	movs	r3, #0
 8005f76:	1c1a      	adds	r2, r3, #0
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b2db      	uxtb	r3, r3
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b002      	add	sp, #8
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	0800d0a4 	.word	0x0800d0a4

08005f8c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8005f8c:	b40e      	push	{r1, r2, r3}
 8005f8e:	b5b0      	push	{r4, r5, r7, lr}
 8005f90:	b0a7      	sub	sp, #156	@ 0x9c
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
    bool result = false;
 8005f96:	2397      	movs	r3, #151	@ 0x97
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8005f9e:	2396      	movs	r3, #150	@ 0x96
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8005fa6:	23a8      	movs	r3, #168	@ 0xa8
 8005fa8:	2208      	movs	r2, #8
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	19db      	adds	r3, r3, r7
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2290      	movs	r2, #144	@ 0x90
 8005fb4:	18ba      	adds	r2, r7, r2
 8005fb6:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8005fb8:	e345      	b.n	8006646 <minmea_scan+0x6ba>
        char type = *format++;
 8005fba:	21a4      	movs	r1, #164	@ 0xa4
 8005fbc:	2008      	movs	r0, #8
 8005fbe:	180b      	adds	r3, r1, r0
 8005fc0:	19db      	adds	r3, r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	1809      	adds	r1, r1, r0
 8005fc8:	19c9      	adds	r1, r1, r7
 8005fca:	600a      	str	r2, [r1, #0]
 8005fcc:	2143      	movs	r1, #67	@ 0x43
 8005fce:	187a      	adds	r2, r7, r1
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8005fd4:	187b      	adds	r3, r7, r1
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b3b      	cmp	r3, #59	@ 0x3b
 8005fda:	d104      	bne.n	8005fe6 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8005fdc:	2396      	movs	r3, #150	@ 0x96
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
            continue;
 8005fe4:	e32f      	b.n	8006646 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8005fe6:	2390      	movs	r3, #144	@ 0x90
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d108      	bne.n	8006002 <minmea_scan+0x76>
 8005ff0:	2396      	movs	r3, #150	@ 0x96
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4053      	eors	r3, r2
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d000      	beq.n	8006002 <minmea_scan+0x76>
 8006000:	e32f      	b.n	8006662 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8006002:	2343      	movs	r3, #67	@ 0x43
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	3b44      	subs	r3, #68	@ 0x44
 800600a:	2b30      	cmp	r3, #48	@ 0x30
 800600c:	d900      	bls.n	8006010 <minmea_scan+0x84>
 800600e:	e32a      	b.n	8006666 <minmea_scan+0x6da>
 8006010:	009a      	lsls	r2, r3, #2
 8006012:	4bbd      	ldr	r3, [pc, #756]	@ (8006308 <minmea_scan+0x37c>)
 8006014:	18d3      	adds	r3, r2, r3
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 800601a:	258f      	movs	r5, #143	@ 0x8f
 800601c:	197b      	adds	r3, r7, r5
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8006022:	2490      	movs	r4, #144	@ 0x90
 8006024:	193b      	adds	r3, r7, r4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <minmea_scan+0xba>
 800602c:	193b      	adds	r3, r7, r4
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	0018      	movs	r0, r3
 8006034:	f7ff ff84 	bl	8005f40 <minmea_isfield>
 8006038:	1e03      	subs	r3, r0, #0
 800603a:	d004      	beq.n	8006046 <minmea_scan+0xba>
                    value = *field;
 800603c:	197b      	adds	r3, r7, r5
 800603e:	193a      	adds	r2, r7, r4
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	7812      	ldrb	r2, [r2, #0]
 8006044:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	1d1a      	adds	r2, r3, #4
 800604a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	228f      	movs	r2, #143	@ 0x8f
 8006050:	18ba      	adds	r2, r7, r2
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	701a      	strb	r2, [r3, #0]
            } break;
 8006056:	e2db      	b.n	8006610 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	2288      	movs	r2, #136	@ 0x88
 800605c:	18ba      	adds	r2, r7, r2
 800605e:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8006060:	2490      	movs	r4, #144	@ 0x90
 8006062:	193b      	adds	r3, r7, r4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d022      	beq.n	80060b0 <minmea_scan+0x124>
 800606a:	193b      	adds	r3, r7, r4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	0018      	movs	r0, r3
 8006072:	f7ff ff65 	bl	8005f40 <minmea_isfield>
 8006076:	1e03      	subs	r3, r0, #0
 8006078:	d01a      	beq.n	80060b0 <minmea_scan+0x124>
                    switch (*field) {
 800607a:	193b      	adds	r3, r7, r4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b57      	cmp	r3, #87	@ 0x57
 8006082:	d00f      	beq.n	80060a4 <minmea_scan+0x118>
 8006084:	dd00      	ble.n	8006088 <minmea_scan+0xfc>
 8006086:	e2f0      	b.n	800666a <minmea_scan+0x6de>
 8006088:	2b53      	cmp	r3, #83	@ 0x53
 800608a:	d00b      	beq.n	80060a4 <minmea_scan+0x118>
 800608c:	dd00      	ble.n	8006090 <minmea_scan+0x104>
 800608e:	e2ec      	b.n	800666a <minmea_scan+0x6de>
 8006090:	2b45      	cmp	r3, #69	@ 0x45
 8006092:	d002      	beq.n	800609a <minmea_scan+0x10e>
 8006094:	2b4e      	cmp	r3, #78	@ 0x4e
 8006096:	d000      	beq.n	800609a <minmea_scan+0x10e>
 8006098:	e2e7      	b.n	800666a <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 800609a:	2301      	movs	r3, #1
 800609c:	2288      	movs	r2, #136	@ 0x88
 800609e:	18ba      	adds	r2, r7, r2
 80060a0:	6013      	str	r3, [r2, #0]
                            break;
 80060a2:	e005      	b.n	80060b0 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 80060a4:	2301      	movs	r3, #1
 80060a6:	425b      	negs	r3, r3
 80060a8:	2288      	movs	r2, #136	@ 0x88
 80060aa:	18ba      	adds	r2, r7, r2
 80060ac:	6013      	str	r3, [r2, #0]
                            break;
 80060ae:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80060b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2288      	movs	r2, #136	@ 0x88
 80060ba:	18ba      	adds	r2, r7, r2
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	601a      	str	r2, [r3, #0]
            } break;
 80060c0:	e2a6      	b.n	8006610 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	2284      	movs	r2, #132	@ 0x84
 80060c6:	18ba      	adds	r2, r7, r2
 80060c8:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80060ca:	2301      	movs	r3, #1
 80060cc:	425b      	negs	r3, r3
 80060ce:	2280      	movs	r2, #128	@ 0x80
 80060d0:	18ba      	adds	r2, r7, r2
 80060d2:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80060d8:	2390      	movs	r3, #144	@ 0x90
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d100      	bne.n	80060e4 <minmea_scan+0x158>
 80060e2:	e088      	b.n	80061f6 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 80060e4:	e07d      	b.n	80061e2 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 80060e6:	2390      	movs	r3, #144	@ 0x90
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80060f0:	d10d      	bne.n	800610e <minmea_scan+0x182>
 80060f2:	2284      	movs	r2, #132	@ 0x84
 80060f4:	18bb      	adds	r3, r7, r2
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <minmea_scan+0x182>
 80060fc:	2380      	movs	r3, #128	@ 0x80
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	d103      	bne.n	800610e <minmea_scan+0x182>
                            sign = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	18ba      	adds	r2, r7, r2
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e063      	b.n	80061d6 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 800610e:	2390      	movs	r3, #144	@ 0x90
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b2d      	cmp	r3, #45	@ 0x2d
 8006118:	d10e      	bne.n	8006138 <minmea_scan+0x1ac>
 800611a:	2284      	movs	r2, #132	@ 0x84
 800611c:	18bb      	adds	r3, r7, r2
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <minmea_scan+0x1ac>
 8006124:	2380      	movs	r3, #128	@ 0x80
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	d104      	bne.n	8006138 <minmea_scan+0x1ac>
                            sign = -1;
 800612e:	2301      	movs	r3, #1
 8006130:	425b      	negs	r3, r3
 8006132:	18ba      	adds	r2, r7, r2
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e04e      	b.n	80061d6 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8006138:	2190      	movs	r1, #144	@ 0x90
 800613a:	187b      	adds	r3, r7, r1
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	4b72      	ldr	r3, [pc, #456]	@ (800630c <minmea_scan+0x380>)
 8006144:	18d3      	adds	r3, r2, r3
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	001a      	movs	r2, r3
 800614a:	2304      	movs	r3, #4
 800614c:	4013      	ands	r3, r2
 800614e:	d035      	beq.n	80061bc <minmea_scan+0x230>
                            int digit = *field - '0';
 8006150:	187b      	adds	r3, r7, r1
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	3b30      	subs	r3, #48	@ 0x30
 8006158:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 800615a:	2280      	movs	r2, #128	@ 0x80
 800615c:	18bb      	adds	r3, r7, r2
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	d102      	bne.n	800616a <minmea_scan+0x1de>
                                value = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	18ba      	adds	r2, r7, r2
 8006168:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616c:	4a68      	ldr	r2, [pc, #416]	@ (8006310 <minmea_scan+0x384>)
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	210a      	movs	r1, #10
 8006172:	0018      	movs	r0, r3
 8006174:	f7fa f864 	bl	8000240 <__divsi3>
 8006178:	0003      	movs	r3, r0
 800617a:	001a      	movs	r2, r3
 800617c:	2380      	movs	r3, #128	@ 0x80
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4293      	cmp	r3, r2
 8006184:	dd04      	ble.n	8006190 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8006186:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d100      	bne.n	800618e <minmea_scan+0x202>
 800618c:	e26f      	b.n	800666e <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 800618e:	e032      	b.n	80061f6 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8006190:	2180      	movs	r1, #128	@ 0x80
 8006192:	187b      	adds	r3, r7, r1
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	0013      	movs	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	189b      	adds	r3, r3, r2
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	001a      	movs	r2, r3
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	189b      	adds	r3, r3, r2
 80061a4:	187a      	adds	r2, r7, r1
 80061a6:	6013      	str	r3, [r2, #0]
                            if (scale)
 80061a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d013      	beq.n	80061d6 <minmea_scan+0x24a>
                                scale *= 10;
 80061ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80061b0:	0013      	movs	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	189b      	adds	r3, r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061ba:	e00c      	b.n	80061d6 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 80061bc:	2390      	movs	r3, #144	@ 0x90
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80061c6:	d000      	beq.n	80061ca <minmea_scan+0x23e>
 80061c8:	e253      	b.n	8006672 <minmea_scan+0x6e6>
 80061ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d000      	beq.n	80061d2 <minmea_scan+0x246>
 80061d0:	e24f      	b.n	8006672 <minmea_scan+0x6e6>
                            scale = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80061d6:	2290      	movs	r2, #144	@ 0x90
 80061d8:	18bb      	adds	r3, r7, r2
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	18ba      	adds	r2, r7, r2
 80061e0:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 80061e2:	2390      	movs	r3, #144	@ 0x90
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7ff fea8 	bl	8005f40 <minmea_isfield>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d000      	beq.n	80061f6 <minmea_scan+0x26a>
 80061f4:	e777      	b.n	80060e6 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80061f6:	2384      	movs	r3, #132	@ 0x84
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <minmea_scan+0x27a>
 8006200:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <minmea_scan+0x286>
 8006206:	2380      	movs	r3, #128	@ 0x80
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	d100      	bne.n	8006212 <minmea_scan+0x286>
 8006210:	e231      	b.n	8006676 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 8006212:	2280      	movs	r2, #128	@ 0x80
 8006214:	18bb      	adds	r3, r7, r2
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	d105      	bne.n	8006228 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	18ba      	adds	r2, r7, r2
 8006220:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006226:	e004      	b.n	8006232 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8006228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 800622e:	2301      	movs	r3, #1
 8006230:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8006232:	2284      	movs	r2, #132	@ 0x84
 8006234:	18bb      	adds	r3, r7, r2
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <minmea_scan+0x2c0>
                    value *= sign;
 800623c:	2180      	movs	r1, #128	@ 0x80
 800623e:	187b      	adds	r3, r7, r1
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	18ba      	adds	r2, r7, r2
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	4353      	muls	r3, r2
 8006248:	187a      	adds	r2, r7, r1
 800624a:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 800624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2280      	movs	r2, #128	@ 0x80
 8006256:	18ba      	adds	r2, r7, r2
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800625e:	605a      	str	r2, [r3, #4]
            } break;
 8006260:	e1d6      	b.n	8006610 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8006266:	2290      	movs	r2, #144	@ 0x90
 8006268:	18bb      	adds	r3, r7, r2
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d011      	beq.n	8006294 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8006270:	2320      	movs	r3, #32
 8006272:	18f9      	adds	r1, r7, r3
 8006274:	18bb      	adds	r3, r7, r2
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	220a      	movs	r2, #10
 800627a:	0018      	movs	r0, r3
 800627c:	f005 fc2a 	bl	800bad4 <strtol>
 8006280:	0003      	movs	r3, r0
 8006282:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	0018      	movs	r0, r3
 800628a:	f7ff fe59 	bl	8005f40 <minmea_isfield>
 800628e:	1e03      	subs	r3, r0, #0
 8006290:	d000      	beq.n	8006294 <minmea_scan+0x308>
 8006292:	e1f2      	b.n	800667a <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	1d1a      	adds	r2, r3, #4
 8006298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800629e:	601a      	str	r2, [r3, #0]
            } break;
 80062a0:	e1b6      	b.n	8006610 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 80062ac:	2390      	movs	r3, #144	@ 0x90
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d014      	beq.n	80062e0 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 80062b6:	e00a      	b.n	80062ce <minmea_scan+0x342>
                        *buf++ = *field++;
 80062b8:	2190      	movs	r1, #144	@ 0x90
 80062ba:	187b      	adds	r3, r7, r1
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	1c53      	adds	r3, r2, #1
 80062c0:	1879      	adds	r1, r7, r1
 80062c2:	600b      	str	r3, [r1, #0]
 80062c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062c6:	1c59      	adds	r1, r3, #1
 80062c8:	6779      	str	r1, [r7, #116]	@ 0x74
 80062ca:	7812      	ldrb	r2, [r2, #0]
 80062cc:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80062ce:	2390      	movs	r3, #144	@ 0x90
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7ff fe32 	bl	8005f40 <minmea_isfield>
 80062dc:	1e03      	subs	r3, r0, #0
 80062de:	d1eb      	bne.n	80062b8 <minmea_scan+0x32c>
                }

                *buf = '\0';
 80062e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
            } break;
 80062e6:	e193      	b.n	8006610 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80062e8:	2290      	movs	r2, #144	@ 0x90
 80062ea:	18bb      	adds	r3, r7, r2
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d100      	bne.n	80062f4 <minmea_scan+0x368>
 80062f2:	e1c4      	b.n	800667e <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80062f4:	18bb      	adds	r3, r7, r2
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b24      	cmp	r3, #36	@ 0x24
 80062fc:	d000      	beq.n	8006300 <minmea_scan+0x374>
 80062fe:	e1c0      	b.n	8006682 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 8006300:	2300      	movs	r3, #0
 8006302:	673b      	str	r3, [r7, #112]	@ 0x70
 8006304:	e01c      	b.n	8006340 <minmea_scan+0x3b4>
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	0800cf04 	.word	0x0800cf04
 800630c:	0800d0a4 	.word	0x0800d0a4
 8006310:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8006314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006316:	3301      	adds	r3, #1
 8006318:	001a      	movs	r2, r3
 800631a:	2390      	movs	r3, #144	@ 0x90
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	189b      	adds	r3, r3, r2
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	0018      	movs	r0, r3
 8006326:	f7ff fe0b 	bl	8005f40 <minmea_isfield>
 800632a:	0003      	movs	r3, r0
 800632c:	001a      	movs	r2, r3
 800632e:	2301      	movs	r3, #1
 8006330:	4053      	eors	r3, r2
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d000      	beq.n	800633a <minmea_scan+0x3ae>
 8006338:	e1a5      	b.n	8006686 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 800633a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800633c:	3301      	adds	r3, #1
 800633e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006340:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006342:	2b04      	cmp	r3, #4
 8006344:	dde6      	ble.n	8006314 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8006346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8006350:	2390      	movs	r3, #144	@ 0x90
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635a:	2205      	movs	r2, #5
 800635c:	0018      	movs	r0, r3
 800635e:	f005 fc1b 	bl	800bb98 <memcpy>
                buf[5] = '\0';
 8006362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006364:	3305      	adds	r3, #5
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
            } break;
 800636a:	e151      	b.n	8006610 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636e:	1d1a      	adds	r2, r3, #4
 8006370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8006376:	2301      	movs	r3, #1
 8006378:	425b      	negs	r3, r3
 800637a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800637c:	2301      	movs	r3, #1
 800637e:	425b      	negs	r3, r3
 8006380:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006382:	2301      	movs	r3, #1
 8006384:	425b      	negs	r3, r3
 8006386:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8006388:	2290      	movs	r2, #144	@ 0x90
 800638a:	18bb      	adds	r3, r7, r2
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d067      	beq.n	8006462 <minmea_scan+0x4d6>
 8006392:	18bb      	adds	r3, r7, r2
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	0018      	movs	r0, r3
 800639a:	f7ff fdd1 	bl	8005f40 <minmea_isfield>
 800639e:	1e03      	subs	r3, r0, #0
 80063a0:	d05f      	beq.n	8006462 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 80063a2:	2300      	movs	r3, #0
 80063a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80063a6:	e011      	b.n	80063cc <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 80063a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063aa:	2290      	movs	r2, #144	@ 0x90
 80063ac:	18ba      	adds	r2, r7, r2
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	4bbb      	ldr	r3, [pc, #748]	@ (80066a4 <minmea_scan+0x718>)
 80063b8:	18d3      	adds	r3, r2, r3
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	001a      	movs	r2, r3
 80063be:	2304      	movs	r3, #4
 80063c0:	4013      	ands	r3, r2
 80063c2:	d100      	bne.n	80063c6 <minmea_scan+0x43a>
 80063c4:	e161      	b.n	800668a <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80063c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063c8:	3301      	adds	r3, #1
 80063ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80063cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	ddea      	ble.n	80063a8 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80063d2:	2490      	movs	r4, #144	@ 0x90
 80063d4:	193b      	adds	r3, r7, r4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	211c      	movs	r1, #28
 80063dc:	187b      	adds	r3, r7, r1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	193b      	adds	r3, r7, r4
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	781a      	ldrb	r2, [r3, #0]
 80063e8:	187b      	adds	r3, r7, r1
 80063ea:	705a      	strb	r2, [r3, #1]
 80063ec:	187b      	adds	r3, r7, r1
 80063ee:	2200      	movs	r2, #0
 80063f0:	709a      	strb	r2, [r3, #2]
 80063f2:	187b      	adds	r3, r7, r1
 80063f4:	220a      	movs	r2, #10
 80063f6:	2100      	movs	r1, #0
 80063f8:	0018      	movs	r0, r3
 80063fa:	f005 fb6b 	bl	800bad4 <strtol>
 80063fe:	0003      	movs	r3, r0
 8006400:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8006402:	193b      	adds	r3, r7, r4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3302      	adds	r3, #2
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	2118      	movs	r1, #24
 800640c:	187b      	adds	r3, r7, r1
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	193b      	adds	r3, r7, r4
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3303      	adds	r3, #3
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	187b      	adds	r3, r7, r1
 800641a:	705a      	strb	r2, [r3, #1]
 800641c:	187b      	adds	r3, r7, r1
 800641e:	2200      	movs	r2, #0
 8006420:	709a      	strb	r2, [r3, #2]
 8006422:	187b      	adds	r3, r7, r1
 8006424:	220a      	movs	r2, #10
 8006426:	2100      	movs	r1, #0
 8006428:	0018      	movs	r0, r3
 800642a:	f005 fb53 	bl	800bad4 <strtol>
 800642e:	0003      	movs	r3, r0
 8006430:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8006432:	193b      	adds	r3, r7, r4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3304      	adds	r3, #4
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	2114      	movs	r1, #20
 800643c:	187b      	adds	r3, r7, r1
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	193b      	adds	r3, r7, r4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3305      	adds	r3, #5
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	187b      	adds	r3, r7, r1
 800644a:	705a      	strb	r2, [r3, #1]
 800644c:	187b      	adds	r3, r7, r1
 800644e:	2200      	movs	r2, #0
 8006450:	709a      	strb	r2, [r3, #2]
 8006452:	187b      	adds	r3, r7, r1
 8006454:	220a      	movs	r2, #10
 8006456:	2100      	movs	r1, #0
 8006458:	0018      	movs	r0, r3
 800645a:	f005 fb3b 	bl	800bad4 <strtol>
 800645e:	0003      	movs	r3, r0
 8006460:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006466:	601a      	str	r2, [r3, #0]
                date->month = m;
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800646c:	605a      	str	r2, [r3, #4]
                date->year = y;
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006472:	609a      	str	r2, [r3, #8]
            } break;
 8006474:	e0cc      	b.n	8006610 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	1d1a      	adds	r2, r3, #4
 800647a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8006480:	2301      	movs	r3, #1
 8006482:	425b      	negs	r3, r3
 8006484:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006486:	2301      	movs	r3, #1
 8006488:	425b      	negs	r3, r3
 800648a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800648c:	2301      	movs	r3, #1
 800648e:	425b      	negs	r3, r3
 8006490:	657b      	str	r3, [r7, #84]	@ 0x54
 8006492:	2301      	movs	r3, #1
 8006494:	425b      	negs	r3, r3
 8006496:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8006498:	2290      	movs	r2, #144	@ 0x90
 800649a:	18bb      	adds	r3, r7, r2
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d100      	bne.n	80064a4 <minmea_scan+0x518>
 80064a2:	e0a7      	b.n	80065f4 <minmea_scan+0x668>
 80064a4:	18bb      	adds	r3, r7, r2
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7ff fd48 	bl	8005f40 <minmea_isfield>
 80064b0:	1e03      	subs	r3, r0, #0
 80064b2:	d100      	bne.n	80064b6 <minmea_scan+0x52a>
 80064b4:	e09e      	b.n	80065f4 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064ba:	e011      	b.n	80064e0 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 80064bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064be:	2290      	movs	r2, #144	@ 0x90
 80064c0:	18ba      	adds	r2, r7, r2
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	18d3      	adds	r3, r2, r3
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	4b76      	ldr	r3, [pc, #472]	@ (80066a4 <minmea_scan+0x718>)
 80064cc:	18d3      	adds	r3, r2, r3
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	001a      	movs	r2, r3
 80064d2:	2304      	movs	r3, #4
 80064d4:	4013      	ands	r3, r2
 80064d6:	d100      	bne.n	80064da <minmea_scan+0x54e>
 80064d8:	e0d9      	b.n	800668e <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 80064da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064dc:	3301      	adds	r3, #1
 80064de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e2:	2b05      	cmp	r3, #5
 80064e4:	ddea      	ble.n	80064bc <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80064e6:	2490      	movs	r4, #144	@ 0x90
 80064e8:	193b      	adds	r3, r7, r4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	2110      	movs	r1, #16
 80064f0:	187b      	adds	r3, r7, r1
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	193b      	adds	r3, r7, r4
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3301      	adds	r3, #1
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	187b      	adds	r3, r7, r1
 80064fe:	705a      	strb	r2, [r3, #1]
 8006500:	187b      	adds	r3, r7, r1
 8006502:	2200      	movs	r2, #0
 8006504:	709a      	strb	r2, [r3, #2]
 8006506:	187b      	adds	r3, r7, r1
 8006508:	220a      	movs	r2, #10
 800650a:	2100      	movs	r1, #0
 800650c:	0018      	movs	r0, r3
 800650e:	f005 fae1 	bl	800bad4 <strtol>
 8006512:	0003      	movs	r3, r0
 8006514:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8006516:	193b      	adds	r3, r7, r4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3302      	adds	r3, #2
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	210c      	movs	r1, #12
 8006520:	187b      	adds	r3, r7, r1
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	193b      	adds	r3, r7, r4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3303      	adds	r3, #3
 800652a:	781a      	ldrb	r2, [r3, #0]
 800652c:	187b      	adds	r3, r7, r1
 800652e:	705a      	strb	r2, [r3, #1]
 8006530:	187b      	adds	r3, r7, r1
 8006532:	2200      	movs	r2, #0
 8006534:	709a      	strb	r2, [r3, #2]
 8006536:	187b      	adds	r3, r7, r1
 8006538:	220a      	movs	r2, #10
 800653a:	2100      	movs	r1, #0
 800653c:	0018      	movs	r0, r3
 800653e:	f005 fac9 	bl	800bad4 <strtol>
 8006542:	0003      	movs	r3, r0
 8006544:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8006546:	193b      	adds	r3, r7, r4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3304      	adds	r3, #4
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	2108      	movs	r1, #8
 8006550:	187b      	adds	r3, r7, r1
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	193b      	adds	r3, r7, r4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3305      	adds	r3, #5
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	187b      	adds	r3, r7, r1
 800655e:	705a      	strb	r2, [r3, #1]
 8006560:	187b      	adds	r3, r7, r1
 8006562:	2200      	movs	r2, #0
 8006564:	709a      	strb	r2, [r3, #2]
 8006566:	187b      	adds	r3, r7, r1
 8006568:	220a      	movs	r2, #10
 800656a:	2100      	movs	r1, #0
 800656c:	0018      	movs	r0, r3
 800656e:	f005 fab1 	bl	800bad4 <strtol>
 8006572:	0003      	movs	r3, r0
 8006574:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8006576:	193b      	adds	r3, r7, r4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3306      	adds	r3, #6
 800657c:	193a      	adds	r2, r7, r4
 800657e:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8006580:	193b      	adds	r3, r7, r4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	1939      	adds	r1, r7, r4
 8006588:	600a      	str	r2, [r1, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b2e      	cmp	r3, #46	@ 0x2e
 800658e:	d12f      	bne.n	80065f0 <minmea_scan+0x664>
                        int value = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8006594:	4b44      	ldr	r3, [pc, #272]	@ (80066a8 <minmea_scan+0x71c>)
 8006596:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8006598:	e016      	b.n	80065c8 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 800659a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800659c:	0013      	movs	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	189b      	adds	r3, r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	0019      	movs	r1, r3
 80065a6:	2090      	movs	r0, #144	@ 0x90
 80065a8:	183b      	adds	r3, r7, r0
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	1838      	adds	r0, r7, r0
 80065b0:	6002      	str	r2, [r0, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	3b30      	subs	r3, #48	@ 0x30
 80065b6:	18cb      	adds	r3, r1, r3
 80065b8:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 80065ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065bc:	210a      	movs	r1, #10
 80065be:	0018      	movs	r0, r3
 80065c0:	f7f9 fe3e 	bl	8000240 <__divsi3>
 80065c4:	0003      	movs	r3, r0
 80065c6:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80065c8:	2390      	movs	r3, #144	@ 0x90
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	4b34      	ldr	r3, [pc, #208]	@ (80066a4 <minmea_scan+0x718>)
 80065d4:	18d3      	adds	r3, r2, r3
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	001a      	movs	r2, r3
 80065da:	2304      	movs	r3, #4
 80065dc:	4013      	ands	r3, r2
 80065de:	d002      	beq.n	80065e6 <minmea_scan+0x65a>
 80065e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	dcd9      	bgt.n	800659a <minmea_scan+0x60e>
                        }
                        u = value * scale;
 80065e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ea:	4353      	muls	r3, r2
 80065ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80065ee:	e001      	b.n	80065f4 <minmea_scan+0x668>
                    } else {
                        u = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 80065f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80065f8:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 80065fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065fe:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8006600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006602:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006604:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8006606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006608:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800660a:	60da      	str	r2, [r3, #12]
            } break;
 800660c:	e000      	b.n	8006610 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 800660e:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8006610:	e002      	b.n	8006618 <minmea_scan+0x68c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3301      	adds	r3, #1
 8006616:	607b      	str	r3, [r7, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	0018      	movs	r0, r3
 800661e:	f7ff fc8f 	bl	8005f40 <minmea_isfield>
 8006622:	1e03      	subs	r3, r0, #0
 8006624:	d1f5      	bne.n	8006612 <minmea_scan+0x686>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b2c      	cmp	r3, #44	@ 0x2c
 800662c:	d107      	bne.n	800663e <minmea_scan+0x6b2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3301      	adds	r3, #1
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2290      	movs	r2, #144	@ 0x90
 8006638:	18ba      	adds	r2, r7, r2
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	e003      	b.n	8006646 <minmea_scan+0x6ba>
 800663e:	2300      	movs	r3, #0
 8006640:	2290      	movs	r2, #144	@ 0x90
 8006642:	18ba      	adds	r2, r7, r2
 8006644:	6013      	str	r3, [r2, #0]
    while (*format) {
 8006646:	23a4      	movs	r3, #164	@ 0xa4
 8006648:	2208      	movs	r2, #8
 800664a:	189b      	adds	r3, r3, r2
 800664c:	19db      	adds	r3, r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d000      	beq.n	8006658 <minmea_scan+0x6cc>
 8006656:	e4b0      	b.n	8005fba <minmea_scan+0x2e>
    }

    result = true;
 8006658:	2397      	movs	r3, #151	@ 0x97
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e016      	b.n	8006690 <minmea_scan+0x704>
            goto parse_error;
 8006662:	46c0      	nop			@ (mov r8, r8)
 8006664:	e014      	b.n	8006690 <minmea_scan+0x704>
                goto parse_error;
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	e012      	b.n	8006690 <minmea_scan+0x704>
                            goto parse_error;
 800666a:	46c0      	nop			@ (mov r8, r8)
 800666c:	e010      	b.n	8006690 <minmea_scan+0x704>
                                    goto parse_error;
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	e00e      	b.n	8006690 <minmea_scan+0x704>
                            goto parse_error;
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	e00c      	b.n	8006690 <minmea_scan+0x704>
                    goto parse_error;
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	e00a      	b.n	8006690 <minmea_scan+0x704>
                        goto parse_error;
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	e008      	b.n	8006690 <minmea_scan+0x704>
                    goto parse_error;
 800667e:	46c0      	nop			@ (mov r8, r8)
 8006680:	e006      	b.n	8006690 <minmea_scan+0x704>
                    goto parse_error;
 8006682:	46c0      	nop			@ (mov r8, r8)
 8006684:	e004      	b.n	8006690 <minmea_scan+0x704>
                        goto parse_error;
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	e002      	b.n	8006690 <minmea_scan+0x704>
                            goto parse_error;
 800668a:	46c0      	nop			@ (mov r8, r8)
 800668c:	e000      	b.n	8006690 <minmea_scan+0x704>
                            goto parse_error;
 800668e:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8006690:	2397      	movs	r3, #151	@ 0x97
 8006692:	18fb      	adds	r3, r7, r3
 8006694:	781b      	ldrb	r3, [r3, #0]
}
 8006696:	0018      	movs	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	b027      	add	sp, #156	@ 0x9c
 800669c:	bcb0      	pop	{r4, r5, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	b003      	add	sp, #12
 80066a2:	4718      	bx	r3
 80066a4:	0800d0a4 	.word	0x0800d0a4
 80066a8:	000f4240 	.word	0x000f4240

080066ac <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 80066ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ae:	46de      	mov	lr, fp
 80066b0:	4657      	mov	r7, sl
 80066b2:	464e      	mov	r6, r9
 80066b4:	4645      	mov	r5, r8
 80066b6:	b5e0      	push	{r5, r6, r7, lr}
 80066b8:	b097      	sub	sp, #92	@ 0x5c
 80066ba:	af0c      	add	r7, sp, #48	@ 0x30
 80066bc:	6178      	str	r0, [r7, #20]
 80066be:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	001a      	movs	r2, r3
 80066c8:	3210      	adds	r2, #16
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	0019      	movs	r1, r3
 80066ce:	3118      	adds	r1, #24
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	001c      	movs	r4, r3
 80066d4:	3420      	adds	r4, #32
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	001d      	movs	r5, r3
 80066da:	3524      	adds	r5, #36	@ 0x24
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	001e      	movs	r6, r3
 80066e0:	3628      	adds	r6, #40	@ 0x28
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2030      	movs	r0, #48	@ 0x30
 80066e6:	4684      	mov	ip, r0
 80066e8:	449c      	add	ip, r3
 80066ea:	4663      	mov	r3, ip
 80066ec:	607b      	str	r3, [r7, #4]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2038      	movs	r0, #56	@ 0x38
 80066f2:	4680      	mov	r8, r0
 80066f4:	4498      	add	r8, r3
 80066f6:	4643      	mov	r3, r8
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	203c      	movs	r0, #60	@ 0x3c
 80066fe:	4681      	mov	r9, r0
 8006700:	4499      	add	r9, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2044      	movs	r0, #68	@ 0x44
 8006706:	4682      	mov	sl, r0
 8006708:	449a      	add	sl, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3348      	adds	r3, #72	@ 0x48
 800670e:	2010      	movs	r0, #16
 8006710:	4683      	mov	fp, r0
 8006712:	2008      	movs	r0, #8
 8006714:	4684      	mov	ip, r0
 8006716:	2008      	movs	r0, #8
 8006718:	4680      	mov	r8, r0
 800671a:	44b8      	add	r8, r7
 800671c:	44c4      	add	ip, r8
 800671e:	44e3      	add	fp, ip
 8006720:	4658      	mov	r0, fp
 8006722:	60b8      	str	r0, [r7, #8]
 8006724:	482a      	ldr	r0, [pc, #168]	@ (80067d0 <minmea_parse_gga+0x124>)
 8006726:	4683      	mov	fp, r0
 8006728:	6938      	ldr	r0, [r7, #16]
 800672a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800672c:	4653      	mov	r3, sl
 800672e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006730:	464b      	mov	r3, r9
 8006732:	9309      	str	r3, [sp, #36]	@ 0x24
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	9308      	str	r3, [sp, #32]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	9307      	str	r3, [sp, #28]
 800673c:	9606      	str	r6, [sp, #24]
 800673e:	9505      	str	r5, [sp, #20]
 8006740:	9404      	str	r4, [sp, #16]
 8006742:	2408      	movs	r4, #8
 8006744:	2508      	movs	r5, #8
 8006746:	1963      	adds	r3, r4, r5
 8006748:	2408      	movs	r4, #8
 800674a:	46a4      	mov	ip, r4
 800674c:	44bc      	add	ip, r7
 800674e:	4463      	add	r3, ip
 8006750:	9303      	str	r3, [sp, #12]
 8006752:	9102      	str	r1, [sp, #8]
 8006754:	210c      	movs	r1, #12
 8006756:	194b      	adds	r3, r1, r5
 8006758:	2108      	movs	r1, #8
 800675a:	468c      	mov	ip, r1
 800675c:	44bc      	add	ip, r7
 800675e:	4463      	add	r3, ip
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	9200      	str	r2, [sp, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	4659      	mov	r1, fp
 800676a:	f7ff fc0f 	bl	8005f8c <minmea_scan>
 800676e:	0003      	movs	r3, r0
 8006770:	001a      	movs	r2, r3
 8006772:	2301      	movs	r3, #1
 8006774:	4053      	eors	r3, r2
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 800677c:	2300      	movs	r3, #0
 800677e:	e01d      	b.n	80067bc <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8006780:	2310      	movs	r3, #16
 8006782:	2208      	movs	r2, #8
 8006784:	189b      	adds	r3, r3, r2
 8006786:	2208      	movs	r2, #8
 8006788:	4694      	mov	ip, r2
 800678a:	44bc      	add	ip, r7
 800678c:	4463      	add	r3, ip
 800678e:	3302      	adds	r3, #2
 8006790:	4a10      	ldr	r2, [pc, #64]	@ (80067d4 <minmea_parse_gga+0x128>)
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f7f9 fcb5 	bl	8000104 <strcmp>
 800679a:	1e03      	subs	r3, r0, #0
 800679c:	d001      	beq.n	80067a2 <minmea_parse_gga+0xf6>
        return false;
 800679e:	2300      	movs	r3, #0
 80067a0:	e00c      	b.n	80067bc <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	435a      	muls	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	435a      	muls	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	619a      	str	r2, [r3, #24]

    return true;
 80067ba:	2301      	movs	r3, #1
}
 80067bc:	0018      	movs	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	b00b      	add	sp, #44	@ 0x2c
 80067c2:	bcf0      	pop	{r4, r5, r6, r7}
 80067c4:	46bb      	mov	fp, r7
 80067c6:	46b2      	mov	sl, r6
 80067c8:	46a9      	mov	r9, r5
 80067ca:	46a0      	mov	r8, r4
 80067cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067ce:	46c0      	nop			@ (mov r8, r8)
 80067d0:	0800c874 	.word	0x0800c874
 80067d4:	0800c854 	.word	0x0800c854

080067d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067de:	4b11      	ldr	r3, [pc, #68]	@ (8006824 <HAL_MspInit+0x4c>)
 80067e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067e2:	4b10      	ldr	r3, [pc, #64]	@ (8006824 <HAL_MspInit+0x4c>)
 80067e4:	2101      	movs	r1, #1
 80067e6:	430a      	orrs	r2, r1
 80067e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80067ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006824 <HAL_MspInit+0x4c>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	2201      	movs	r2, #1
 80067f0:	4013      	ands	r3, r2
 80067f2:	607b      	str	r3, [r7, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <HAL_MspInit+0x4c>)
 80067f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006824 <HAL_MspInit+0x4c>)
 80067fc:	2180      	movs	r1, #128	@ 0x80
 80067fe:	0549      	lsls	r1, r1, #21
 8006800:	430a      	orrs	r2, r1
 8006802:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006804:	4b07      	ldr	r3, [pc, #28]	@ (8006824 <HAL_MspInit+0x4c>)
 8006806:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006808:	2380      	movs	r3, #128	@ 0x80
 800680a:	055b      	lsls	r3, r3, #21
 800680c:	4013      	ands	r3, r2
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8006812:	23c0      	movs	r3, #192	@ 0xc0
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	0018      	movs	r0, r3
 8006818:	f000 fb16 	bl	8006e48 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800681c:	46c0      	nop			@ (mov r8, r8)
 800681e:	46bd      	mov	sp, r7
 8006820:	b002      	add	sp, #8
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40021000 	.word	0x40021000

08006828 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006828:	b590      	push	{r4, r7, lr}
 800682a:	b09d      	sub	sp, #116	@ 0x74
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006830:	235c      	movs	r3, #92	@ 0x5c
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	0018      	movs	r0, r3
 8006836:	2314      	movs	r3, #20
 8006838:	001a      	movs	r2, r3
 800683a:	2100      	movs	r1, #0
 800683c:	f005 f978 	bl	800bb30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006840:	2410      	movs	r4, #16
 8006842:	193b      	adds	r3, r7, r4
 8006844:	0018      	movs	r0, r3
 8006846:	234c      	movs	r3, #76	@ 0x4c
 8006848:	001a      	movs	r2, r3
 800684a:	2100      	movs	r1, #0
 800684c:	f005 f970 	bl	800bb30 <memset>
  if(hi2c->Instance==I2C1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a23      	ldr	r2, [pc, #140]	@ (80068e4 <HAL_I2C_MspInit+0xbc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d13f      	bne.n	80068da <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800685a:	193b      	adds	r3, r7, r4
 800685c:	2220      	movs	r2, #32
 800685e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006860:	193b      	adds	r3, r7, r4
 8006862:	2200      	movs	r2, #0
 8006864:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006866:	193b      	adds	r3, r7, r4
 8006868:	0018      	movs	r0, r3
 800686a:	f002 f8f7 	bl	8008a5c <HAL_RCCEx_PeriphCLKConfig>
 800686e:	1e03      	subs	r3, r0, #0
 8006870:	d001      	beq.n	8006876 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006872:	f7ff fb5f 	bl	8005f34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006876:	4b1c      	ldr	r3, [pc, #112]	@ (80068e8 <HAL_I2C_MspInit+0xc0>)
 8006878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800687a:	4b1b      	ldr	r3, [pc, #108]	@ (80068e8 <HAL_I2C_MspInit+0xc0>)
 800687c:	2101      	movs	r1, #1
 800687e:	430a      	orrs	r2, r1
 8006880:	635a      	str	r2, [r3, #52]	@ 0x34
 8006882:	4b19      	ldr	r3, [pc, #100]	@ (80068e8 <HAL_I2C_MspInit+0xc0>)
 8006884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006886:	2201      	movs	r2, #1
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800688e:	215c      	movs	r1, #92	@ 0x5c
 8006890:	187b      	adds	r3, r7, r1
 8006892:	22c0      	movs	r2, #192	@ 0xc0
 8006894:	00d2      	lsls	r2, r2, #3
 8006896:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006898:	187b      	adds	r3, r7, r1
 800689a:	2212      	movs	r2, #18
 800689c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689e:	187b      	adds	r3, r7, r1
 80068a0:	2200      	movs	r2, #0
 80068a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	2200      	movs	r2, #0
 80068a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80068aa:	187b      	adds	r3, r7, r1
 80068ac:	2206      	movs	r2, #6
 80068ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b0:	187a      	adds	r2, r7, r1
 80068b2:	23a0      	movs	r3, #160	@ 0xa0
 80068b4:	05db      	lsls	r3, r3, #23
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f000 fb8f 	bl	8006fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80068be:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <HAL_I2C_MspInit+0xc0>)
 80068c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068c2:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <HAL_I2C_MspInit+0xc0>)
 80068c4:	2180      	movs	r1, #128	@ 0x80
 80068c6:	0389      	lsls	r1, r1, #14
 80068c8:	430a      	orrs	r2, r1
 80068ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80068cc:	4b06      	ldr	r3, [pc, #24]	@ (80068e8 <HAL_I2C_MspInit+0xc0>)
 80068ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	039b      	lsls	r3, r3, #14
 80068d4:	4013      	ands	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
 80068d8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	46bd      	mov	sp, r7
 80068de:	b01d      	add	sp, #116	@ 0x74
 80068e0:	bd90      	pop	{r4, r7, pc}
 80068e2:	46c0      	nop			@ (mov r8, r8)
 80068e4:	40005400 	.word	0x40005400
 80068e8:	40021000 	.word	0x40021000

080068ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80068ec:	b590      	push	{r4, r7, lr}
 80068ee:	b08b      	sub	sp, #44	@ 0x2c
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f4:	2414      	movs	r4, #20
 80068f6:	193b      	adds	r3, r7, r4
 80068f8:	0018      	movs	r0, r3
 80068fa:	2314      	movs	r3, #20
 80068fc:	001a      	movs	r2, r3
 80068fe:	2100      	movs	r1, #0
 8006900:	f005 f916 	bl	800bb30 <memset>
  if(hspi->Instance==SPI1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a2c      	ldr	r2, [pc, #176]	@ (80069bc <HAL_SPI_MspInit+0xd0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d151      	bne.n	80069b2 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800690e:	4b2c      	ldr	r3, [pc, #176]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 8006910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006912:	4b2b      	ldr	r3, [pc, #172]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 8006914:	2180      	movs	r1, #128	@ 0x80
 8006916:	0149      	lsls	r1, r1, #5
 8006918:	430a      	orrs	r2, r1
 800691a:	641a      	str	r2, [r3, #64]	@ 0x40
 800691c:	4b28      	ldr	r3, [pc, #160]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 800691e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006920:	2380      	movs	r3, #128	@ 0x80
 8006922:	015b      	lsls	r3, r3, #5
 8006924:	4013      	ands	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800692a:	4b25      	ldr	r3, [pc, #148]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 800692c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800692e:	4b24      	ldr	r3, [pc, #144]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 8006930:	2101      	movs	r1, #1
 8006932:	430a      	orrs	r2, r1
 8006934:	635a      	str	r2, [r3, #52]	@ 0x34
 8006936:	4b22      	ldr	r3, [pc, #136]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 8006938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693a:	2201      	movs	r2, #1
 800693c:	4013      	ands	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006942:	4b1f      	ldr	r3, [pc, #124]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 8006944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006946:	4b1e      	ldr	r3, [pc, #120]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 8006948:	2108      	movs	r1, #8
 800694a:	430a      	orrs	r2, r1
 800694c:	635a      	str	r2, [r3, #52]	@ 0x34
 800694e:	4b1c      	ldr	r3, [pc, #112]	@ (80069c0 <HAL_SPI_MspInit+0xd4>)
 8006950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006952:	2208      	movs	r2, #8
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800695a:	193b      	adds	r3, r7, r4
 800695c:	2202      	movs	r2, #2
 800695e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006960:	193b      	adds	r3, r7, r4
 8006962:	2202      	movs	r2, #2
 8006964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006966:	193b      	adds	r3, r7, r4
 8006968:	2200      	movs	r2, #0
 800696a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800696c:	193b      	adds	r3, r7, r4
 800696e:	2200      	movs	r2, #0
 8006970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006972:	193b      	adds	r3, r7, r4
 8006974:	2200      	movs	r2, #0
 8006976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006978:	193a      	adds	r2, r7, r4
 800697a:	23a0      	movs	r3, #160	@ 0xa0
 800697c:	05db      	lsls	r3, r3, #23
 800697e:	0011      	movs	r1, r2
 8006980:	0018      	movs	r0, r3
 8006982:	f000 fb2b 	bl	8006fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006986:	0021      	movs	r1, r4
 8006988:	187b      	adds	r3, r7, r1
 800698a:	2260      	movs	r2, #96	@ 0x60
 800698c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800698e:	187b      	adds	r3, r7, r1
 8006990:	2202      	movs	r2, #2
 8006992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006994:	187b      	adds	r3, r7, r1
 8006996:	2200      	movs	r2, #0
 8006998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800699a:	187b      	adds	r3, r7, r1
 800699c:	2200      	movs	r2, #0
 800699e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 80069a0:	187b      	adds	r3, r7, r1
 80069a2:	2201      	movs	r2, #1
 80069a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069a6:	187b      	adds	r3, r7, r1
 80069a8:	4a06      	ldr	r2, [pc, #24]	@ (80069c4 <HAL_SPI_MspInit+0xd8>)
 80069aa:	0019      	movs	r1, r3
 80069ac:	0010      	movs	r0, r2
 80069ae:	f000 fb15 	bl	8006fdc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80069b2:	46c0      	nop			@ (mov r8, r8)
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b00b      	add	sp, #44	@ 0x2c
 80069b8:	bd90      	pop	{r4, r7, pc}
 80069ba:	46c0      	nop			@ (mov r8, r8)
 80069bc:	40013000 	.word	0x40013000
 80069c0:	40021000 	.word	0x40021000
 80069c4:	50000c00 	.word	0x50000c00

080069c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006a00 <HAL_TIM_Base_MspInit+0x38>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10d      	bne.n	80069f6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80069da:	4b0a      	ldr	r3, [pc, #40]	@ (8006a04 <HAL_TIM_Base_MspInit+0x3c>)
 80069dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069de:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <HAL_TIM_Base_MspInit+0x3c>)
 80069e0:	2180      	movs	r1, #128	@ 0x80
 80069e2:	02c9      	lsls	r1, r1, #11
 80069e4:	430a      	orrs	r2, r1
 80069e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80069e8:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_TIM_Base_MspInit+0x3c>)
 80069ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ec:	2380      	movs	r3, #128	@ 0x80
 80069ee:	02db      	lsls	r3, r3, #11
 80069f0:	4013      	ands	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b004      	add	sp, #16
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			@ (mov r8, r8)
 8006a00:	40014800 	.word	0x40014800
 8006a04:	40021000 	.word	0x40021000

08006a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006a08:	b590      	push	{r4, r7, lr}
 8006a0a:	b089      	sub	sp, #36	@ 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a10:	240c      	movs	r4, #12
 8006a12:	193b      	adds	r3, r7, r4
 8006a14:	0018      	movs	r0, r3
 8006a16:	2314      	movs	r3, #20
 8006a18:	001a      	movs	r2, r3
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	f005 f888 	bl	800bb30 <memset>
  if(htim->Instance==TIM17)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a14      	ldr	r2, [pc, #80]	@ (8006a78 <HAL_TIM_MspPostInit+0x70>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d122      	bne.n	8006a70 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a2a:	4b14      	ldr	r3, [pc, #80]	@ (8006a7c <HAL_TIM_MspPostInit+0x74>)
 8006a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a2e:	4b13      	ldr	r3, [pc, #76]	@ (8006a7c <HAL_TIM_MspPostInit+0x74>)
 8006a30:	2101      	movs	r1, #1
 8006a32:	430a      	orrs	r2, r1
 8006a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8006a36:	4b11      	ldr	r3, [pc, #68]	@ (8006a7c <HAL_TIM_MspPostInit+0x74>)
 8006a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	60bb      	str	r3, [r7, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006a42:	0021      	movs	r1, r4
 8006a44:	187b      	adds	r3, r7, r1
 8006a46:	2280      	movs	r2, #128	@ 0x80
 8006a48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a50:	187b      	adds	r3, r7, r1
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a56:	187b      	adds	r3, r7, r1
 8006a58:	2200      	movs	r2, #0
 8006a5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8006a5c:	187b      	adds	r3, r7, r1
 8006a5e:	2205      	movs	r2, #5
 8006a60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a62:	187a      	adds	r2, r7, r1
 8006a64:	23a0      	movs	r3, #160	@ 0xa0
 8006a66:	05db      	lsls	r3, r3, #23
 8006a68:	0011      	movs	r1, r2
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f000 fab6 	bl	8006fdc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8006a70:	46c0      	nop			@ (mov r8, r8)
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b009      	add	sp, #36	@ 0x24
 8006a76:	bd90      	pop	{r4, r7, pc}
 8006a78:	40014800 	.word	0x40014800
 8006a7c:	40021000 	.word	0x40021000

08006a80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b09f      	sub	sp, #124	@ 0x7c
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a88:	2364      	movs	r3, #100	@ 0x64
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	2314      	movs	r3, #20
 8006a90:	001a      	movs	r2, r3
 8006a92:	2100      	movs	r1, #0
 8006a94:	f005 f84c 	bl	800bb30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a98:	2418      	movs	r4, #24
 8006a9a:	193b      	adds	r3, r7, r4
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	234c      	movs	r3, #76	@ 0x4c
 8006aa0:	001a      	movs	r2, r3
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	f005 f844 	bl	800bb30 <memset>
  if(huart->Instance==USART1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a45      	ldr	r2, [pc, #276]	@ (8006bc4 <HAL_UART_MspInit+0x144>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d13e      	bne.n	8006b30 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006ab2:	193b      	adds	r3, r7, r4
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006ab8:	193b      	adds	r3, r7, r4
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006abe:	193b      	adds	r3, r7, r4
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f001 ffcb 	bl	8008a5c <HAL_RCCEx_PeriphCLKConfig>
 8006ac6:	1e03      	subs	r3, r0, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006aca:	f7ff fa33 	bl	8005f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ace:	4b3e      	ldr	r3, [pc, #248]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006ad4:	2180      	movs	r1, #128	@ 0x80
 8006ad6:	01c9      	lsls	r1, r1, #7
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	641a      	str	r2, [r3, #64]	@ 0x40
 8006adc:	4b3a      	ldr	r3, [pc, #232]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006ade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ae0:	2380      	movs	r3, #128	@ 0x80
 8006ae2:	01db      	lsls	r3, r3, #7
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aea:	4b37      	ldr	r3, [pc, #220]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aee:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006af0:	2104      	movs	r1, #4
 8006af2:	430a      	orrs	r2, r1
 8006af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006af6:	4b34      	ldr	r3, [pc, #208]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afa:	2204      	movs	r2, #4
 8006afc:	4013      	ands	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006b02:	2164      	movs	r1, #100	@ 0x64
 8006b04:	187b      	adds	r3, r7, r1
 8006b06:	2230      	movs	r2, #48	@ 0x30
 8006b08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	2200      	movs	r2, #0
 8006b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b16:	187b      	adds	r3, r7, r1
 8006b18:	2200      	movs	r2, #0
 8006b1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006b1c:	187b      	adds	r3, r7, r1
 8006b1e:	2201      	movs	r2, #1
 8006b20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b22:	187b      	adds	r3, r7, r1
 8006b24:	4a29      	ldr	r2, [pc, #164]	@ (8006bcc <HAL_UART_MspInit+0x14c>)
 8006b26:	0019      	movs	r1, r3
 8006b28:	0010      	movs	r0, r2
 8006b2a:	f000 fa57 	bl	8006fdc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8006b2e:	e044      	b.n	8006bba <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a26      	ldr	r2, [pc, #152]	@ (8006bd0 <HAL_UART_MspInit+0x150>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d13f      	bne.n	8006bba <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006b3a:	2118      	movs	r1, #24
 8006b3c:	187b      	adds	r3, r7, r1
 8006b3e:	2202      	movs	r2, #2
 8006b40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006b42:	187b      	adds	r3, r7, r1
 8006b44:	2200      	movs	r2, #0
 8006b46:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b48:	187b      	adds	r3, r7, r1
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f001 ff86 	bl	8008a5c <HAL_RCCEx_PeriphCLKConfig>
 8006b50:	1e03      	subs	r3, r0, #0
 8006b52:	d001      	beq.n	8006b58 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8006b54:	f7ff f9ee 	bl	8005f34 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b58:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006b5e:	2180      	movs	r1, #128	@ 0x80
 8006b60:	0289      	lsls	r1, r1, #10
 8006b62:	430a      	orrs	r2, r1
 8006b64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006b66:	4b18      	ldr	r3, [pc, #96]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b6a:	2380      	movs	r3, #128	@ 0x80
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	4013      	ands	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b74:	4b14      	ldr	r3, [pc, #80]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b78:	4b13      	ldr	r3, [pc, #76]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b80:	4b11      	ldr	r3, [pc, #68]	@ (8006bc8 <HAL_UART_MspInit+0x148>)
 8006b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b84:	2201      	movs	r2, #1
 8006b86:	4013      	ands	r3, r2
 8006b88:	60bb      	str	r3, [r7, #8]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006b8c:	2164      	movs	r1, #100	@ 0x64
 8006b8e:	187b      	adds	r3, r7, r1
 8006b90:	220c      	movs	r2, #12
 8006b92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b94:	187b      	adds	r3, r7, r1
 8006b96:	2202      	movs	r2, #2
 8006b98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b9a:	187b      	adds	r3, r7, r1
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba0:	187b      	adds	r3, r7, r1
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006ba6:	187b      	adds	r3, r7, r1
 8006ba8:	2201      	movs	r2, #1
 8006baa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bac:	187a      	adds	r2, r7, r1
 8006bae:	23a0      	movs	r3, #160	@ 0xa0
 8006bb0:	05db      	lsls	r3, r3, #23
 8006bb2:	0011      	movs	r1, r2
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 fa11 	bl	8006fdc <HAL_GPIO_Init>
}
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b01f      	add	sp, #124	@ 0x7c
 8006bc0:	bd90      	pop	{r4, r7, pc}
 8006bc2:	46c0      	nop			@ (mov r8, r8)
 8006bc4:	40013800 	.word	0x40013800
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	50000800 	.word	0x50000800
 8006bd0:	40004400 	.word	0x40004400

08006bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006bd8:	46c0      	nop			@ (mov r8, r8)
 8006bda:	e7fd      	b.n	8006bd8 <NMI_Handler+0x4>

08006bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006be0:	46c0      	nop			@ (mov r8, r8)
 8006be2:	e7fd      	b.n	8006be0 <HardFault_Handler+0x4>

08006be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006be8:	46c0      	nop			@ (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006bf2:	46c0      	nop			@ (mov r8, r8)
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006bfc:	f000 f8e4 	bl	8006dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c00:	46c0      	nop			@ (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006c0c:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <RTC_TAMP_IRQHandler+0x1c>)
 8006c0e:	0018      	movs	r0, r3
 8006c10:	f002 fb66 	bl	80092e0 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006c14:	4b03      	ldr	r3, [pc, #12]	@ (8006c24 <RTC_TAMP_IRQHandler+0x1c>)
 8006c16:	0018      	movs	r0, r3
 8006c18:	f002 fbe5 	bl	80093e6 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8006c1c:	46c0      	nop			@ (mov r8, r8)
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			@ (mov r8, r8)
 8006c24:	20000d7c 	.word	0x20000d7c

08006c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c30:	4a14      	ldr	r2, [pc, #80]	@ (8006c84 <_sbrk+0x5c>)
 8006c32:	4b15      	ldr	r3, [pc, #84]	@ (8006c88 <_sbrk+0x60>)
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c3c:	4b13      	ldr	r3, [pc, #76]	@ (8006c8c <_sbrk+0x64>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c44:	4b11      	ldr	r3, [pc, #68]	@ (8006c8c <_sbrk+0x64>)
 8006c46:	4a12      	ldr	r2, [pc, #72]	@ (8006c90 <_sbrk+0x68>)
 8006c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c4a:	4b10      	ldr	r3, [pc, #64]	@ (8006c8c <_sbrk+0x64>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	18d3      	adds	r3, r2, r3
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d207      	bcs.n	8006c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c58:	f004 ff72 	bl	800bb40 <__errno>
 8006c5c:	0003      	movs	r3, r0
 8006c5e:	220c      	movs	r2, #12
 8006c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c62:	2301      	movs	r3, #1
 8006c64:	425b      	negs	r3, r3
 8006c66:	e009      	b.n	8006c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c68:	4b08      	ldr	r3, [pc, #32]	@ (8006c8c <_sbrk+0x64>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c6e:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <_sbrk+0x64>)
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	18d2      	adds	r2, r2, r3
 8006c76:	4b05      	ldr	r3, [pc, #20]	@ (8006c8c <_sbrk+0x64>)
 8006c78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
}
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b006      	add	sp, #24
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20024000 	.word	0x20024000
 8006c88:	00000400 	.word	0x00000400
 8006c8c:	20000f80 	.word	0x20000f80
 8006c90:	200010d0 	.word	0x200010d0

08006c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c98:	46c0      	nop			@ (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ca0:	480d      	ldr	r0, [pc, #52]	@ (8006cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006ca2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ca4:	f7ff fff6 	bl	8006c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ca8:	480c      	ldr	r0, [pc, #48]	@ (8006cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8006caa:	490d      	ldr	r1, [pc, #52]	@ (8006ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006cac:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce4 <LoopForever+0xe>)
  movs r3, #0
 8006cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cb0:	e002      	b.n	8006cb8 <LoopCopyDataInit>

08006cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cb6:	3304      	adds	r3, #4

08006cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cbc:	d3f9      	bcc.n	8006cb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8006cec <LoopForever+0x16>)
  movs r3, #0
 8006cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cc4:	e001      	b.n	8006cca <LoopFillZerobss>

08006cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cc8:	3204      	adds	r2, #4

08006cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ccc:	d3fb      	bcc.n	8006cc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006cce:	f004 ff3d 	bl	800bb4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006cd2:	f7fd fd53 	bl	800477c <main>

08006cd6 <LoopForever>:

LoopForever:
  b LoopForever
 8006cd6:	e7fe      	b.n	8006cd6 <LoopForever>
  ldr   r0, =_estack
 8006cd8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8006cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ce0:	20000a24 	.word	0x20000a24
  ldr r2, =_sidata
 8006ce4:	0800d1f8 	.word	0x0800d1f8
  ldr r2, =_sbss
 8006ce8:	20000a28 	.word	0x20000a28
  ldr r4, =_ebss
 8006cec:	200010d0 	.word	0x200010d0

08006cf0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006cf0:	e7fe      	b.n	8006cf0 <ADC1_COMP_IRQHandler>
	...

08006cf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006cfa:	1dfb      	adds	r3, r7, #7
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <HAL_Init+0x3c>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <HAL_Init+0x3c>)
 8006d06:	2180      	movs	r1, #128	@ 0x80
 8006d08:	0049      	lsls	r1, r1, #1
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006d0e:	2003      	movs	r0, #3
 8006d10:	f000 f810 	bl	8006d34 <HAL_InitTick>
 8006d14:	1e03      	subs	r3, r0, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006d18:	1dfb      	adds	r3, r7, #7
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e001      	b.n	8006d24 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006d20:	f7ff fd5a 	bl	80067d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006d24:	1dfb      	adds	r3, r7, #7
 8006d26:	781b      	ldrb	r3, [r3, #0]
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40022000 	.word	0x40022000

08006d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006d3c:	230f      	movs	r3, #15
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006d44:	4b1d      	ldr	r3, [pc, #116]	@ (8006dbc <HAL_InitTick+0x88>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d02b      	beq.n	8006da4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc0 <HAL_InitTick+0x8c>)
 8006d4e:	681c      	ldr	r4, [r3, #0]
 8006d50:	4b1a      	ldr	r3, [pc, #104]	@ (8006dbc <HAL_InitTick+0x88>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	0019      	movs	r1, r3
 8006d56:	23fa      	movs	r3, #250	@ 0xfa
 8006d58:	0098      	lsls	r0, r3, #2
 8006d5a:	f7f9 f9e7 	bl	800012c <__udivsi3>
 8006d5e:	0003      	movs	r3, r0
 8006d60:	0019      	movs	r1, r3
 8006d62:	0020      	movs	r0, r4
 8006d64:	f7f9 f9e2 	bl	800012c <__udivsi3>
 8006d68:	0003      	movs	r3, r0
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f000 f929 	bl	8006fc2 <HAL_SYSTICK_Config>
 8006d70:	1e03      	subs	r3, r0, #0
 8006d72:	d112      	bne.n	8006d9a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d80a      	bhi.n	8006d90 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	425b      	negs	r3, r3
 8006d80:	2200      	movs	r2, #0
 8006d82:	0018      	movs	r0, r3
 8006d84:	f000 f908 	bl	8006f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <HAL_InitTick+0x90>)
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e00d      	b.n	8006dac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006d90:	230f      	movs	r3, #15
 8006d92:	18fb      	adds	r3, r7, r3
 8006d94:	2201      	movs	r2, #1
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	e008      	b.n	8006dac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006d9a:	230f      	movs	r3, #15
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	2201      	movs	r2, #1
 8006da0:	701a      	strb	r2, [r3, #0]
 8006da2:	e003      	b.n	8006dac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006da4:	230f      	movs	r3, #15
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006dac:	230f      	movs	r3, #15
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	781b      	ldrb	r3, [r3, #0]
}
 8006db2:	0018      	movs	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b005      	add	sp, #20
 8006db8:	bd90      	pop	{r4, r7, pc}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	200009d0 	.word	0x200009d0
 8006dc0:	200009c8 	.word	0x200009c8
 8006dc4:	200009cc 	.word	0x200009cc

08006dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_IncTick+0x1c>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	001a      	movs	r2, r3
 8006dd2:	4b05      	ldr	r3, [pc, #20]	@ (8006de8 <HAL_IncTick+0x20>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	18d2      	adds	r2, r2, r3
 8006dd8:	4b03      	ldr	r3, [pc, #12]	@ (8006de8 <HAL_IncTick+0x20>)
 8006dda:	601a      	str	r2, [r3, #0]
}
 8006ddc:	46c0      	nop			@ (mov r8, r8)
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	46c0      	nop			@ (mov r8, r8)
 8006de4:	200009d0 	.word	0x200009d0
 8006de8:	20000f84 	.word	0x20000f84

08006dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  return uwTick;
 8006df0:	4b02      	ldr	r3, [pc, #8]	@ (8006dfc <HAL_GetTick+0x10>)
 8006df2:	681b      	ldr	r3, [r3, #0]
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	46c0      	nop			@ (mov r8, r8)
 8006dfc:	20000f84 	.word	0x20000f84

08006e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e08:	f7ff fff0 	bl	8006dec <HAL_GetTick>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	d005      	beq.n	8006e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <HAL_Delay+0x44>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	001a      	movs	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	f7ff ffe0 	bl	8006dec <HAL_GetTick>
 8006e2c:	0002      	movs	r2, r0
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d8f7      	bhi.n	8006e28 <HAL_Delay+0x28>
  {
  }
}
 8006e38:	46c0      	nop			@ (mov r8, r8)
 8006e3a:	46c0      	nop			@ (mov r8, r8)
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b004      	add	sp, #16
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	46c0      	nop			@ (mov r8, r8)
 8006e44:	200009d0 	.word	0x200009d0

08006e48 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006e50:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a06      	ldr	r2, [pc, #24]	@ (8006e70 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	0019      	movs	r1, r3
 8006e5a:	4b04      	ldr	r3, [pc, #16]	@ (8006e6c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	601a      	str	r2, [r3, #0]
}
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	46bd      	mov	sp, r7
 8006e66:	b002      	add	sp, #8
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	fffff9ff 	.word	0xfffff9ff

08006e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	6039      	str	r1, [r7, #0]
 8006e7e:	1dfb      	adds	r3, r7, #7
 8006e80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e82:	1dfb      	adds	r3, r7, #7
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e88:	d828      	bhi.n	8006edc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8006f48 <__NVIC_SetPriority+0xd4>)
 8006e8c:	1dfb      	adds	r3, r7, #7
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	b25b      	sxtb	r3, r3
 8006e92:	089b      	lsrs	r3, r3, #2
 8006e94:	33c0      	adds	r3, #192	@ 0xc0
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	589b      	ldr	r3, [r3, r2]
 8006e9a:	1dfa      	adds	r2, r7, #7
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	0011      	movs	r1, r2
 8006ea0:	2203      	movs	r2, #3
 8006ea2:	400a      	ands	r2, r1
 8006ea4:	00d2      	lsls	r2, r2, #3
 8006ea6:	21ff      	movs	r1, #255	@ 0xff
 8006ea8:	4091      	lsls	r1, r2
 8006eaa:	000a      	movs	r2, r1
 8006eac:	43d2      	mvns	r2, r2
 8006eae:	401a      	ands	r2, r3
 8006eb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	401a      	ands	r2, r3
 8006eba:	1dfb      	adds	r3, r7, #7
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	4003      	ands	r3, r0
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ec8:	481f      	ldr	r0, [pc, #124]	@ (8006f48 <__NVIC_SetPriority+0xd4>)
 8006eca:	1dfb      	adds	r3, r7, #7
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	089b      	lsrs	r3, r3, #2
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	33c0      	adds	r3, #192	@ 0xc0
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006eda:	e031      	b.n	8006f40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006edc:	4a1b      	ldr	r2, [pc, #108]	@ (8006f4c <__NVIC_SetPriority+0xd8>)
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	230f      	movs	r3, #15
 8006ee6:	400b      	ands	r3, r1
 8006ee8:	3b08      	subs	r3, #8
 8006eea:	089b      	lsrs	r3, r3, #2
 8006eec:	3306      	adds	r3, #6
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	18d3      	adds	r3, r2, r3
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	1dfa      	adds	r2, r7, #7
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	0011      	movs	r1, r2
 8006efc:	2203      	movs	r2, #3
 8006efe:	400a      	ands	r2, r1
 8006f00:	00d2      	lsls	r2, r2, #3
 8006f02:	21ff      	movs	r1, #255	@ 0xff
 8006f04:	4091      	lsls	r1, r2
 8006f06:	000a      	movs	r2, r1
 8006f08:	43d2      	mvns	r2, r2
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	019b      	lsls	r3, r3, #6
 8006f12:	22ff      	movs	r2, #255	@ 0xff
 8006f14:	401a      	ands	r2, r3
 8006f16:	1dfb      	adds	r3, r7, #7
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	4003      	ands	r3, r0
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f24:	4809      	ldr	r0, [pc, #36]	@ (8006f4c <__NVIC_SetPriority+0xd8>)
 8006f26:	1dfb      	adds	r3, r7, #7
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	001c      	movs	r4, r3
 8006f2c:	230f      	movs	r3, #15
 8006f2e:	4023      	ands	r3, r4
 8006f30:	3b08      	subs	r3, #8
 8006f32:	089b      	lsrs	r3, r3, #2
 8006f34:	430a      	orrs	r2, r1
 8006f36:	3306      	adds	r3, #6
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	18c3      	adds	r3, r0, r3
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	601a      	str	r2, [r3, #0]
}
 8006f40:	46c0      	nop			@ (mov r8, r8)
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b003      	add	sp, #12
 8006f46:	bd90      	pop	{r4, r7, pc}
 8006f48:	e000e100 	.word	0xe000e100
 8006f4c:	e000ed00 	.word	0xe000ed00

08006f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1e5a      	subs	r2, r3, #1
 8006f5c:	2380      	movs	r3, #128	@ 0x80
 8006f5e:	045b      	lsls	r3, r3, #17
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d301      	bcc.n	8006f68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f64:	2301      	movs	r3, #1
 8006f66:	e010      	b.n	8006f8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f68:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <SysTick_Config+0x44>)
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	3a01      	subs	r2, #1
 8006f6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f70:	2301      	movs	r3, #1
 8006f72:	425b      	negs	r3, r3
 8006f74:	2103      	movs	r1, #3
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7ff ff7c 	bl	8006e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f7c:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <SysTick_Config+0x44>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f82:	4b04      	ldr	r3, [pc, #16]	@ (8006f94 <SysTick_Config+0x44>)
 8006f84:	2207      	movs	r2, #7
 8006f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b002      	add	sp, #8
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	46c0      	nop			@ (mov r8, r8)
 8006f94:	e000e010 	.word	0xe000e010

08006f98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	210f      	movs	r1, #15
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	1c02      	adds	r2, r0, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	187b      	adds	r3, r7, r1
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	0011      	movs	r1, r2
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f7ff ff5d 	bl	8006e74 <__NVIC_SetPriority>
}
 8006fba:	46c0      	nop			@ (mov r8, r8)
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b004      	add	sp, #16
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f7ff ffbf 	bl	8006f50 <SysTick_Config>
 8006fd2:	0003      	movs	r3, r0
}
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b002      	add	sp, #8
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fea:	e14d      	b.n	8007288 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4091      	lsls	r1, r2
 8006ff6:	000a      	movs	r2, r1
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d100      	bne.n	8007004 <HAL_GPIO_Init+0x28>
 8007002:	e13e      	b.n	8007282 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	2203      	movs	r2, #3
 800700a:	4013      	ands	r3, r2
 800700c:	2b01      	cmp	r3, #1
 800700e:	d005      	beq.n	800701c <HAL_GPIO_Init+0x40>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2203      	movs	r2, #3
 8007016:	4013      	ands	r3, r2
 8007018:	2b02      	cmp	r3, #2
 800701a:	d130      	bne.n	800707e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	2203      	movs	r2, #3
 8007028:	409a      	lsls	r2, r3
 800702a:	0013      	movs	r3, r2
 800702c:	43da      	mvns	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4013      	ands	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	409a      	lsls	r2, r3
 800703e:	0013      	movs	r3, r2
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007052:	2201      	movs	r2, #1
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	409a      	lsls	r2, r3
 8007058:	0013      	movs	r3, r2
 800705a:	43da      	mvns	r2, r3
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4013      	ands	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	091b      	lsrs	r3, r3, #4
 8007068:	2201      	movs	r2, #1
 800706a:	401a      	ands	r2, r3
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	409a      	lsls	r2, r3
 8007070:	0013      	movs	r3, r2
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2203      	movs	r2, #3
 8007084:	4013      	ands	r3, r2
 8007086:	2b03      	cmp	r3, #3
 8007088:	d017      	beq.n	80070ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	2203      	movs	r2, #3
 8007096:	409a      	lsls	r2, r3
 8007098:	0013      	movs	r3, r2
 800709a:	43da      	mvns	r2, r3
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4013      	ands	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	409a      	lsls	r2, r3
 80070ac:	0013      	movs	r3, r2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2203      	movs	r2, #3
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d123      	bne.n	800710e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	08da      	lsrs	r2, r3, #3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3208      	adds	r2, #8
 80070ce:	0092      	lsls	r2, r2, #2
 80070d0:	58d3      	ldr	r3, [r2, r3]
 80070d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2207      	movs	r2, #7
 80070d8:	4013      	ands	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	220f      	movs	r2, #15
 80070de:	409a      	lsls	r2, r3
 80070e0:	0013      	movs	r3, r2
 80070e2:	43da      	mvns	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4013      	ands	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2107      	movs	r1, #7
 80070f2:	400b      	ands	r3, r1
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	409a      	lsls	r2, r3
 80070f8:	0013      	movs	r3, r2
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	08da      	lsrs	r2, r3, #3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3208      	adds	r2, #8
 8007108:	0092      	lsls	r2, r2, #2
 800710a:	6939      	ldr	r1, [r7, #16]
 800710c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	2203      	movs	r2, #3
 800711a:	409a      	lsls	r2, r3
 800711c:	0013      	movs	r3, r2
 800711e:	43da      	mvns	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4013      	ands	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2203      	movs	r2, #3
 800712c:	401a      	ands	r2, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	409a      	lsls	r2, r3
 8007134:	0013      	movs	r3, r2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	23c0      	movs	r3, #192	@ 0xc0
 8007148:	029b      	lsls	r3, r3, #10
 800714a:	4013      	ands	r3, r2
 800714c:	d100      	bne.n	8007150 <HAL_GPIO_Init+0x174>
 800714e:	e098      	b.n	8007282 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007150:	4a53      	ldr	r2, [pc, #332]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	089b      	lsrs	r3, r3, #2
 8007156:	3318      	adds	r3, #24
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	589b      	ldr	r3, [r3, r2]
 800715c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2203      	movs	r2, #3
 8007162:	4013      	ands	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	220f      	movs	r2, #15
 8007168:	409a      	lsls	r2, r3
 800716a:	0013      	movs	r3, r2
 800716c:	43da      	mvns	r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4013      	ands	r3, r2
 8007172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	23a0      	movs	r3, #160	@ 0xa0
 8007178:	05db      	lsls	r3, r3, #23
 800717a:	429a      	cmp	r2, r3
 800717c:	d019      	beq.n	80071b2 <HAL_GPIO_Init+0x1d6>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a48      	ldr	r2, [pc, #288]	@ (80072a4 <HAL_GPIO_Init+0x2c8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <HAL_GPIO_Init+0x1d2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a47      	ldr	r2, [pc, #284]	@ (80072a8 <HAL_GPIO_Init+0x2cc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00d      	beq.n	80071aa <HAL_GPIO_Init+0x1ce>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a46      	ldr	r2, [pc, #280]	@ (80072ac <HAL_GPIO_Init+0x2d0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d007      	beq.n	80071a6 <HAL_GPIO_Init+0x1ca>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a45      	ldr	r2, [pc, #276]	@ (80072b0 <HAL_GPIO_Init+0x2d4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d101      	bne.n	80071a2 <HAL_GPIO_Init+0x1c6>
 800719e:	2304      	movs	r3, #4
 80071a0:	e008      	b.n	80071b4 <HAL_GPIO_Init+0x1d8>
 80071a2:	2305      	movs	r3, #5
 80071a4:	e006      	b.n	80071b4 <HAL_GPIO_Init+0x1d8>
 80071a6:	2303      	movs	r3, #3
 80071a8:	e004      	b.n	80071b4 <HAL_GPIO_Init+0x1d8>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e002      	b.n	80071b4 <HAL_GPIO_Init+0x1d8>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <HAL_GPIO_Init+0x1d8>
 80071b2:	2300      	movs	r3, #0
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	2103      	movs	r1, #3
 80071b8:	400a      	ands	r2, r1
 80071ba:	00d2      	lsls	r2, r2, #3
 80071bc:	4093      	lsls	r3, r2
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80071c4:	4936      	ldr	r1, [pc, #216]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	089b      	lsrs	r3, r3, #2
 80071ca:	3318      	adds	r3, #24
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80071d2:	4b33      	ldr	r3, [pc, #204]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	43da      	mvns	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	4013      	ands	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	2380      	movs	r3, #128	@ 0x80
 80071e8:	035b      	lsls	r3, r3, #13
 80071ea:	4013      	ands	r3, r2
 80071ec:	d003      	beq.n	80071f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80071f6:	4b2a      	ldr	r3, [pc, #168]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80071fc:	4b28      	ldr	r3, [pc, #160]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	43da      	mvns	r2, r3
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	4013      	ands	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	2380      	movs	r3, #128	@ 0x80
 8007212:	039b      	lsls	r3, r3, #14
 8007214:	4013      	ands	r3, r2
 8007216:	d003      	beq.n	8007220 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007220:	4b1f      	ldr	r3, [pc, #124]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007226:	4a1e      	ldr	r2, [pc, #120]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 8007228:	2384      	movs	r3, #132	@ 0x84
 800722a:	58d3      	ldr	r3, [r2, r3]
 800722c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	43da      	mvns	r2, r3
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4013      	ands	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	2380      	movs	r3, #128	@ 0x80
 800723e:	029b      	lsls	r3, r3, #10
 8007240:	4013      	ands	r3, r2
 8007242:	d003      	beq.n	800724c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800724c:	4914      	ldr	r1, [pc, #80]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 800724e:	2284      	movs	r2, #132	@ 0x84
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007254:	4a12      	ldr	r2, [pc, #72]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 8007256:	2380      	movs	r3, #128	@ 0x80
 8007258:	58d3      	ldr	r3, [r2, r3]
 800725a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	43da      	mvns	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4013      	ands	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	2380      	movs	r3, #128	@ 0x80
 800726c:	025b      	lsls	r3, r3, #9
 800726e:	4013      	ands	r3, r2
 8007270:	d003      	beq.n	800727a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800727a:	4909      	ldr	r1, [pc, #36]	@ (80072a0 <HAL_GPIO_Init+0x2c4>)
 800727c:	2280      	movs	r2, #128	@ 0x80
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	3301      	adds	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	40da      	lsrs	r2, r3
 8007290:	1e13      	subs	r3, r2, #0
 8007292:	d000      	beq.n	8007296 <HAL_GPIO_Init+0x2ba>
 8007294:	e6aa      	b.n	8006fec <HAL_GPIO_Init+0x10>
  }
}
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	46c0      	nop			@ (mov r8, r8)
 800729a:	46bd      	mov	sp, r7
 800729c:	b006      	add	sp, #24
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40021800 	.word	0x40021800
 80072a4:	50000400 	.word	0x50000400
 80072a8:	50000800 	.word	0x50000800
 80072ac:	50000c00 	.word	0x50000c00
 80072b0:	50001000 	.word	0x50001000

080072b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	000a      	movs	r2, r1
 80072be:	1cbb      	adds	r3, r7, #2
 80072c0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	1cba      	adds	r2, r7, #2
 80072c8:	8812      	ldrh	r2, [r2, #0]
 80072ca:	4013      	ands	r3, r2
 80072cc:	d004      	beq.n	80072d8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80072ce:	230f      	movs	r3, #15
 80072d0:	18fb      	adds	r3, r7, r3
 80072d2:	2201      	movs	r2, #1
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	e003      	b.n	80072e0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072d8:	230f      	movs	r3, #15
 80072da:	18fb      	adds	r3, r7, r3
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80072e0:	230f      	movs	r3, #15
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	781b      	ldrb	r3, [r3, #0]
}
 80072e6:	0018      	movs	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	b004      	add	sp, #16
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	0008      	movs	r0, r1
 80072f8:	0011      	movs	r1, r2
 80072fa:	1cbb      	adds	r3, r7, #2
 80072fc:	1c02      	adds	r2, r0, #0
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	1c7b      	adds	r3, r7, #1
 8007302:	1c0a      	adds	r2, r1, #0
 8007304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007306:	1c7b      	adds	r3, r7, #1
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800730e:	1cbb      	adds	r3, r7, #2
 8007310:	881a      	ldrh	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007316:	e003      	b.n	8007320 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007318:	1cbb      	adds	r3, r7, #2
 800731a:	881a      	ldrh	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007320:	46c0      	nop			@ (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	b002      	add	sp, #8
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e08f      	b.n	800745a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2241      	movs	r2, #65	@ 0x41
 800733e:	5c9b      	ldrb	r3, [r3, r2]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d107      	bne.n	8007356 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2240      	movs	r2, #64	@ 0x40
 800734a:	2100      	movs	r1, #0
 800734c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0018      	movs	r0, r3
 8007352:	f7ff fa69 	bl	8006828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2241      	movs	r2, #65	@ 0x41
 800735a:	2124      	movs	r1, #36	@ 0x24
 800735c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2101      	movs	r1, #1
 800736a:	438a      	bics	r2, r1
 800736c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	493b      	ldr	r1, [pc, #236]	@ (8007464 <HAL_I2C_Init+0x13c>)
 8007378:	400a      	ands	r2, r1
 800737a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4938      	ldr	r1, [pc, #224]	@ (8007468 <HAL_I2C_Init+0x140>)
 8007388:	400a      	ands	r2, r1
 800738a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d108      	bne.n	80073a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2180      	movs	r1, #128	@ 0x80
 800739e:	0209      	lsls	r1, r1, #8
 80073a0:	430a      	orrs	r2, r1
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	e007      	b.n	80073b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2184      	movs	r1, #132	@ 0x84
 80073b0:	0209      	lsls	r1, r1, #8
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d109      	bne.n	80073d2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2180      	movs	r1, #128	@ 0x80
 80073ca:	0109      	lsls	r1, r1, #4
 80073cc:	430a      	orrs	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]
 80073d0:	e007      	b.n	80073e2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4923      	ldr	r1, [pc, #140]	@ (800746c <HAL_I2C_Init+0x144>)
 80073de:	400a      	ands	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4920      	ldr	r1, [pc, #128]	@ (8007470 <HAL_I2C_Init+0x148>)
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	491a      	ldr	r1, [pc, #104]	@ (8007468 <HAL_I2C_Init+0x140>)
 80073fe:	400a      	ands	r2, r1
 8007400:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	431a      	orrs	r2, r3
 800740c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	69d9      	ldr	r1, [r3, #28]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2101      	movs	r1, #1
 8007438:	430a      	orrs	r2, r1
 800743a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2241      	movs	r2, #65	@ 0x41
 8007446:	2120      	movs	r1, #32
 8007448:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2242      	movs	r2, #66	@ 0x42
 8007454:	2100      	movs	r1, #0
 8007456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	0018      	movs	r0, r3
 800745c:	46bd      	mov	sp, r7
 800745e:	b002      	add	sp, #8
 8007460:	bd80      	pop	{r7, pc}
 8007462:	46c0      	nop			@ (mov r8, r8)
 8007464:	f0ffffff 	.word	0xf0ffffff
 8007468:	ffff7fff 	.word	0xffff7fff
 800746c:	fffff7ff 	.word	0xfffff7ff
 8007470:	02008000 	.word	0x02008000

08007474 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b089      	sub	sp, #36	@ 0x24
 8007478:	af02      	add	r7, sp, #8
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	0008      	movs	r0, r1
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	0019      	movs	r1, r3
 8007482:	230a      	movs	r3, #10
 8007484:	18fb      	adds	r3, r7, r3
 8007486:	1c02      	adds	r2, r0, #0
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	2308      	movs	r3, #8
 800748c:	18fb      	adds	r3, r7, r3
 800748e:	1c0a      	adds	r2, r1, #0
 8007490:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2241      	movs	r2, #65	@ 0x41
 8007496:	5c9b      	ldrb	r3, [r3, r2]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b20      	cmp	r3, #32
 800749c:	d000      	beq.n	80074a0 <HAL_I2C_Master_Transmit+0x2c>
 800749e:	e10a      	b.n	80076b6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2240      	movs	r2, #64	@ 0x40
 80074a4:	5c9b      	ldrb	r3, [r3, r2]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_I2C_Master_Transmit+0x3a>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e104      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x244>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2240      	movs	r2, #64	@ 0x40
 80074b2:	2101      	movs	r1, #1
 80074b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074b6:	f7ff fc99 	bl	8006dec <HAL_GetTick>
 80074ba:	0003      	movs	r3, r0
 80074bc:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074be:	2380      	movs	r3, #128	@ 0x80
 80074c0:	0219      	lsls	r1, r3, #8
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2319      	movs	r3, #25
 80074ca:	2201      	movs	r2, #1
 80074cc:	f000 fa26 	bl	800791c <I2C_WaitOnFlagUntilTimeout>
 80074d0:	1e03      	subs	r3, r0, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0ef      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2241      	movs	r2, #65	@ 0x41
 80074dc:	2121      	movs	r1, #33	@ 0x21
 80074de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2242      	movs	r2, #66	@ 0x42
 80074e4:	2110      	movs	r1, #16
 80074e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2208      	movs	r2, #8
 80074f8:	18ba      	adds	r2, r7, r2
 80074fa:	8812      	ldrh	r2, [r2, #0]
 80074fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	2bff      	cmp	r3, #255	@ 0xff
 800750c:	d906      	bls.n	800751c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	22ff      	movs	r2, #255	@ 0xff
 8007512:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007514:	2380      	movs	r3, #128	@ 0x80
 8007516:	045b      	lsls	r3, r3, #17
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	e007      	b.n	800752c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007526:	2380      	movs	r3, #128	@ 0x80
 8007528:	049b      	lsls	r3, r3, #18
 800752a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007530:	2b00      	cmp	r3, #0
 8007532:	d027      	beq.n	8007584 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	781a      	ldrb	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007568:	b2db      	uxtb	r3, r3
 800756a:	3301      	adds	r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	697c      	ldr	r4, [r7, #20]
 8007570:	230a      	movs	r3, #10
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	8819      	ldrh	r1, [r3, #0]
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	4b51      	ldr	r3, [pc, #324]	@ (80076c0 <HAL_I2C_Master_Transmit+0x24c>)
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	0023      	movs	r3, r4
 800757e:	f000 fc45 	bl	8007e0c <I2C_TransferConfig>
 8007582:	e06f      	b.n	8007664 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007588:	b2da      	uxtb	r2, r3
 800758a:	697c      	ldr	r4, [r7, #20]
 800758c:	230a      	movs	r3, #10
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	8819      	ldrh	r1, [r3, #0]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	4b4a      	ldr	r3, [pc, #296]	@ (80076c0 <HAL_I2C_Master_Transmit+0x24c>)
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	0023      	movs	r3, r4
 800759a:	f000 fc37 	bl	8007e0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800759e:	e061      	b.n	8007664 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	0018      	movs	r0, r3
 80075a8:	f000 fa10 	bl	80079cc <I2C_WaitOnTXISFlagUntilTimeout>
 80075ac:	1e03      	subs	r3, r0, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e081      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	781a      	ldrb	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d03a      	beq.n	8007664 <HAL_I2C_Master_Transmit+0x1f0>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d136      	bne.n	8007664 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	0013      	movs	r3, r2
 8007600:	2200      	movs	r2, #0
 8007602:	2180      	movs	r1, #128	@ 0x80
 8007604:	f000 f98a 	bl	800791c <I2C_WaitOnFlagUntilTimeout>
 8007608:	1e03      	subs	r3, r0, #0
 800760a:	d001      	beq.n	8007610 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e053      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	2bff      	cmp	r3, #255	@ 0xff
 8007618:	d911      	bls.n	800763e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	22ff      	movs	r2, #255	@ 0xff
 800761e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007624:	b2da      	uxtb	r2, r3
 8007626:	2380      	movs	r3, #128	@ 0x80
 8007628:	045c      	lsls	r4, r3, #17
 800762a:	230a      	movs	r3, #10
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	8819      	ldrh	r1, [r3, #0]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	0023      	movs	r3, r4
 8007638:	f000 fbe8 	bl	8007e0c <I2C_TransferConfig>
 800763c:	e012      	b.n	8007664 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764c:	b2da      	uxtb	r2, r3
 800764e:	2380      	movs	r3, #128	@ 0x80
 8007650:	049c      	lsls	r4, r3, #18
 8007652:	230a      	movs	r3, #10
 8007654:	18fb      	adds	r3, r7, r3
 8007656:	8819      	ldrh	r1, [r3, #0]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	2300      	movs	r3, #0
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	0023      	movs	r3, r4
 8007660:	f000 fbd4 	bl	8007e0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d198      	bne.n	80075a0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	0018      	movs	r0, r3
 8007676:	f000 f9ef 	bl	8007a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800767a:	1e03      	subs	r3, r0, #0
 800767c:	d001      	beq.n	8007682 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e01a      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2220      	movs	r2, #32
 8007688:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	490b      	ldr	r1, [pc, #44]	@ (80076c4 <HAL_I2C_Master_Transmit+0x250>)
 8007696:	400a      	ands	r2, r1
 8007698:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2241      	movs	r2, #65	@ 0x41
 800769e:	2120      	movs	r1, #32
 80076a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2242      	movs	r2, #66	@ 0x42
 80076a6:	2100      	movs	r1, #0
 80076a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2240      	movs	r2, #64	@ 0x40
 80076ae:	2100      	movs	r1, #0
 80076b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e000      	b.n	80076b8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
  }
}
 80076b8:	0018      	movs	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	b007      	add	sp, #28
 80076be:	bd90      	pop	{r4, r7, pc}
 80076c0:	80002000 	.word	0x80002000
 80076c4:	fe00e800 	.word	0xfe00e800

080076c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b089      	sub	sp, #36	@ 0x24
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	0008      	movs	r0, r1
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	0019      	movs	r1, r3
 80076d6:	230a      	movs	r3, #10
 80076d8:	18fb      	adds	r3, r7, r3
 80076da:	1c02      	adds	r2, r0, #0
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	2308      	movs	r3, #8
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	1c0a      	adds	r2, r1, #0
 80076e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2241      	movs	r2, #65	@ 0x41
 80076ea:	5c9b      	ldrb	r3, [r3, r2]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d000      	beq.n	80076f4 <HAL_I2C_Master_Receive+0x2c>
 80076f2:	e0e8      	b.n	80078c6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2240      	movs	r2, #64	@ 0x40
 80076f8:	5c9b      	ldrb	r3, [r3, r2]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_I2C_Master_Receive+0x3a>
 80076fe:	2302      	movs	r3, #2
 8007700:	e0e2      	b.n	80078c8 <HAL_I2C_Master_Receive+0x200>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2240      	movs	r2, #64	@ 0x40
 8007706:	2101      	movs	r1, #1
 8007708:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800770a:	f7ff fb6f 	bl	8006dec <HAL_GetTick>
 800770e:	0003      	movs	r3, r0
 8007710:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007712:	2380      	movs	r3, #128	@ 0x80
 8007714:	0219      	lsls	r1, r3, #8
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	2319      	movs	r3, #25
 800771e:	2201      	movs	r2, #1
 8007720:	f000 f8fc 	bl	800791c <I2C_WaitOnFlagUntilTimeout>
 8007724:	1e03      	subs	r3, r0, #0
 8007726:	d001      	beq.n	800772c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0cd      	b.n	80078c8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2241      	movs	r2, #65	@ 0x41
 8007730:	2122      	movs	r1, #34	@ 0x22
 8007732:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2242      	movs	r2, #66	@ 0x42
 8007738:	2110      	movs	r1, #16
 800773a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2208      	movs	r2, #8
 800774c:	18ba      	adds	r2, r7, r2
 800774e:	8812      	ldrh	r2, [r2, #0]
 8007750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800775c:	b29b      	uxth	r3, r3
 800775e:	2bff      	cmp	r3, #255	@ 0xff
 8007760:	d911      	bls.n	8007786 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	22ff      	movs	r2, #255	@ 0xff
 8007766:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776c:	b2da      	uxtb	r2, r3
 800776e:	2380      	movs	r3, #128	@ 0x80
 8007770:	045c      	lsls	r4, r3, #17
 8007772:	230a      	movs	r3, #10
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	8819      	ldrh	r1, [r3, #0]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	4b55      	ldr	r3, [pc, #340]	@ (80078d0 <HAL_I2C_Master_Receive+0x208>)
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	0023      	movs	r3, r4
 8007780:	f000 fb44 	bl	8007e0c <I2C_TransferConfig>
 8007784:	e076      	b.n	8007874 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007794:	b2da      	uxtb	r2, r3
 8007796:	2380      	movs	r3, #128	@ 0x80
 8007798:	049c      	lsls	r4, r3, #18
 800779a:	230a      	movs	r3, #10
 800779c:	18fb      	adds	r3, r7, r3
 800779e:	8819      	ldrh	r1, [r3, #0]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	4b4b      	ldr	r3, [pc, #300]	@ (80078d0 <HAL_I2C_Master_Receive+0x208>)
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	0023      	movs	r3, r4
 80077a8:	f000 fb30 	bl	8007e0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80077ac:	e062      	b.n	8007874 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f000 f993 	bl	8007ae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077ba:	1e03      	subs	r3, r0, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e082      	b.n	80078c8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d03a      	beq.n	8007874 <HAL_I2C_Master_Receive+0x1ac>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d136      	bne.n	8007874 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	0013      	movs	r3, r2
 8007810:	2200      	movs	r2, #0
 8007812:	2180      	movs	r1, #128	@ 0x80
 8007814:	f000 f882 	bl	800791c <I2C_WaitOnFlagUntilTimeout>
 8007818:	1e03      	subs	r3, r0, #0
 800781a:	d001      	beq.n	8007820 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e053      	b.n	80078c8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	2bff      	cmp	r3, #255	@ 0xff
 8007828:	d911      	bls.n	800784e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	22ff      	movs	r2, #255	@ 0xff
 800782e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007834:	b2da      	uxtb	r2, r3
 8007836:	2380      	movs	r3, #128	@ 0x80
 8007838:	045c      	lsls	r4, r3, #17
 800783a:	230a      	movs	r3, #10
 800783c:	18fb      	adds	r3, r7, r3
 800783e:	8819      	ldrh	r1, [r3, #0]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	2300      	movs	r3, #0
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	0023      	movs	r3, r4
 8007848:	f000 fae0 	bl	8007e0c <I2C_TransferConfig>
 800784c:	e012      	b.n	8007874 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800785c:	b2da      	uxtb	r2, r3
 800785e:	2380      	movs	r3, #128	@ 0x80
 8007860:	049c      	lsls	r4, r3, #18
 8007862:	230a      	movs	r3, #10
 8007864:	18fb      	adds	r3, r7, r3
 8007866:	8819      	ldrh	r1, [r3, #0]
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	2300      	movs	r3, #0
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	0023      	movs	r3, r4
 8007870:	f000 facc 	bl	8007e0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d197      	bne.n	80077ae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	0018      	movs	r0, r3
 8007886:	f000 f8e7 	bl	8007a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800788a:	1e03      	subs	r3, r0, #0
 800788c:	d001      	beq.n	8007892 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e01a      	b.n	80078c8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2220      	movs	r2, #32
 8007898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	490b      	ldr	r1, [pc, #44]	@ (80078d4 <HAL_I2C_Master_Receive+0x20c>)
 80078a6:	400a      	ands	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2241      	movs	r2, #65	@ 0x41
 80078ae:	2120      	movs	r1, #32
 80078b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2242      	movs	r2, #66	@ 0x42
 80078b6:	2100      	movs	r1, #0
 80078b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2240      	movs	r2, #64	@ 0x40
 80078be:	2100      	movs	r1, #0
 80078c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e000      	b.n	80078c8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80078c6:	2302      	movs	r3, #2
  }
}
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b007      	add	sp, #28
 80078ce:	bd90      	pop	{r4, r7, pc}
 80078d0:	80002400 	.word	0x80002400
 80078d4:	fe00e800 	.word	0xfe00e800

080078d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	2202      	movs	r2, #2
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d103      	bne.n	80078f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2201      	movs	r2, #1
 80078fe:	4013      	ands	r3, r2
 8007900:	2b01      	cmp	r3, #1
 8007902:	d007      	beq.n	8007914 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2101      	movs	r1, #1
 8007910:	430a      	orrs	r2, r1
 8007912:	619a      	str	r2, [r3, #24]
  }
}
 8007914:	46c0      	nop			@ (mov r8, r8)
 8007916:	46bd      	mov	sp, r7
 8007918:	b002      	add	sp, #8
 800791a:	bd80      	pop	{r7, pc}

0800791c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	1dfb      	adds	r3, r7, #7
 800792a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800792c:	e03a      	b.n	80079a4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	0018      	movs	r0, r3
 8007936:	f000 f971 	bl	8007c1c <I2C_IsErrorOccurred>
 800793a:	1e03      	subs	r3, r0, #0
 800793c:	d001      	beq.n	8007942 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e040      	b.n	80079c4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	3301      	adds	r3, #1
 8007946:	d02d      	beq.n	80079a4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007948:	f7ff fa50 	bl	8006dec <HAL_GetTick>
 800794c:	0002      	movs	r2, r0
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d302      	bcc.n	800795e <I2C_WaitOnFlagUntilTimeout+0x42>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d122      	bne.n	80079a4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	425a      	negs	r2, r3
 800796e:	4153      	adcs	r3, r2
 8007970:	b2db      	uxtb	r3, r3
 8007972:	001a      	movs	r2, r3
 8007974:	1dfb      	adds	r3, r7, #7
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d113      	bne.n	80079a4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007980:	2220      	movs	r2, #32
 8007982:	431a      	orrs	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2241      	movs	r2, #65	@ 0x41
 800798c:	2120      	movs	r1, #32
 800798e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2242      	movs	r2, #66	@ 0x42
 8007994:	2100      	movs	r1, #0
 8007996:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2240      	movs	r2, #64	@ 0x40
 800799c:	2100      	movs	r1, #0
 800799e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e00f      	b.n	80079c4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	4013      	ands	r3, r2
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	425a      	negs	r2, r3
 80079b4:	4153      	adcs	r3, r2
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	001a      	movs	r2, r3
 80079ba:	1dfb      	adds	r3, r7, #7
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d0b5      	beq.n	800792e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	0018      	movs	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b004      	add	sp, #16
 80079ca:	bd80      	pop	{r7, pc}

080079cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079d8:	e032      	b.n	8007a40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f000 f91b 	bl	8007c1c <I2C_IsErrorOccurred>
 80079e6:	1e03      	subs	r3, r0, #0
 80079e8:	d001      	beq.n	80079ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e030      	b.n	8007a50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	3301      	adds	r3, #1
 80079f2:	d025      	beq.n	8007a40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f4:	f7ff f9fa 	bl	8006dec <HAL_GetTick>
 80079f8:	0002      	movs	r2, r0
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d302      	bcc.n	8007a0a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d11a      	bne.n	8007a40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	2202      	movs	r2, #2
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d013      	beq.n	8007a40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2241      	movs	r2, #65	@ 0x41
 8007a28:	2120      	movs	r1, #32
 8007a2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2242      	movs	r2, #66	@ 0x42
 8007a30:	2100      	movs	r1, #0
 8007a32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2240      	movs	r2, #64	@ 0x40
 8007a38:	2100      	movs	r1, #0
 8007a3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e007      	b.n	8007a50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2202      	movs	r2, #2
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d1c5      	bne.n	80079da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	0018      	movs	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	b004      	add	sp, #16
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a64:	e02f      	b.n	8007ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	f000 f8d5 	bl	8007c1c <I2C_IsErrorOccurred>
 8007a72:	1e03      	subs	r3, r0, #0
 8007a74:	d001      	beq.n	8007a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e02d      	b.n	8007ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a7a:	f7ff f9b7 	bl	8006dec <HAL_GetTick>
 8007a7e:	0002      	movs	r2, r0
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d302      	bcc.n	8007a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d11a      	bne.n	8007ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	2220      	movs	r2, #32
 8007a98:	4013      	ands	r3, r2
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	d013      	beq.n	8007ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2241      	movs	r2, #65	@ 0x41
 8007aae:	2120      	movs	r1, #32
 8007ab0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2242      	movs	r2, #66	@ 0x42
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2240      	movs	r2, #64	@ 0x40
 8007abe:	2100      	movs	r1, #0
 8007ac0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e007      	b.n	8007ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	2220      	movs	r2, #32
 8007ace:	4013      	ands	r3, r2
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d1c8      	bne.n	8007a66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	b004      	add	sp, #16
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2317      	movs	r3, #23
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	2200      	movs	r2, #0
 8007af2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007af4:	e07b      	b.n	8007bee <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	0018      	movs	r0, r3
 8007afe:	f000 f88d 	bl	8007c1c <I2C_IsErrorOccurred>
 8007b02:	1e03      	subs	r3, r0, #0
 8007b04:	d003      	beq.n	8007b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8007b06:	2317      	movs	r3, #23
 8007b08:	18fb      	adds	r3, r7, r3
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2220      	movs	r2, #32
 8007b16:	4013      	ands	r3, r2
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d140      	bne.n	8007b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8007b1c:	2117      	movs	r1, #23
 8007b1e:	187b      	adds	r3, r7, r1
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d13b      	bne.n	8007b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d106      	bne.n	8007b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007b3c:	187b      	adds	r3, r7, r1
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b10      	cmp	r3, #16
 8007b4e:	d123      	bne.n	8007b98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2210      	movs	r2, #16
 8007b56:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2220      	movs	r2, #32
 8007b64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4929      	ldr	r1, [pc, #164]	@ (8007c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8007b72:	400a      	ands	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2241      	movs	r2, #65	@ 0x41
 8007b7a:	2120      	movs	r1, #32
 8007b7c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2242      	movs	r2, #66	@ 0x42
 8007b82:	2100      	movs	r1, #0
 8007b84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2240      	movs	r2, #64	@ 0x40
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007b8e:	2317      	movs	r3, #23
 8007b90:	18fb      	adds	r3, r7, r3
 8007b92:	2201      	movs	r2, #1
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	e002      	b.n	8007b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007b9e:	f7ff f925 	bl	8006dec <HAL_GetTick>
 8007ba2:	0002      	movs	r2, r0
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d302      	bcc.n	8007bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d11c      	bne.n	8007bee <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8007bb4:	2017      	movs	r0, #23
 8007bb6:	183b      	adds	r3, r7, r0
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d117      	bne.n	8007bee <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d010      	beq.n	8007bee <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2241      	movs	r2, #65	@ 0x41
 8007bdc:	2120      	movs	r1, #32
 8007bde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2240      	movs	r2, #64	@ 0x40
 8007be4:	2100      	movs	r1, #0
 8007be6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007be8:	183b      	adds	r3, r7, r0
 8007bea:	2201      	movs	r2, #1
 8007bec:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d005      	beq.n	8007c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007bfc:	2317      	movs	r3, #23
 8007bfe:	18fb      	adds	r3, r7, r3
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d100      	bne.n	8007c08 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007c06:	e776      	b.n	8007af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8007c08:	2317      	movs	r3, #23
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	781b      	ldrb	r3, [r3, #0]
}
 8007c0e:	0018      	movs	r0, r3
 8007c10:	46bd      	mov	sp, r7
 8007c12:	b006      	add	sp, #24
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	46c0      	nop			@ (mov r8, r8)
 8007c18:	fe00e800 	.word	0xfe00e800

08007c1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	@ 0x28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c28:	2327      	movs	r3, #39	@ 0x27
 8007c2a:	18fb      	adds	r3, r7, r3
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2210      	movs	r2, #16
 8007c44:	4013      	ands	r3, r2
 8007c46:	d100      	bne.n	8007c4a <I2C_IsErrorOccurred+0x2e>
 8007c48:	e079      	b.n	8007d3e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2210      	movs	r2, #16
 8007c50:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c52:	e057      	b.n	8007d04 <I2C_IsErrorOccurred+0xe8>
 8007c54:	2227      	movs	r2, #39	@ 0x27
 8007c56:	18bb      	adds	r3, r7, r2
 8007c58:	18ba      	adds	r2, r7, r2
 8007c5a:	7812      	ldrb	r2, [r2, #0]
 8007c5c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	3301      	adds	r3, #1
 8007c62:	d04f      	beq.n	8007d04 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c64:	f7ff f8c2 	bl	8006dec <HAL_GetTick>
 8007c68:	0002      	movs	r2, r0
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d302      	bcc.n	8007c7a <I2C_IsErrorOccurred+0x5e>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d144      	bne.n	8007d04 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	2380      	movs	r3, #128	@ 0x80
 8007c82:	01db      	lsls	r3, r3, #7
 8007c84:	4013      	ands	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007c88:	2013      	movs	r0, #19
 8007c8a:	183b      	adds	r3, r7, r0
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	2142      	movs	r1, #66	@ 0x42
 8007c90:	5c52      	ldrb	r2, [r2, r1]
 8007c92:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	401a      	ands	r2, r3
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d126      	bne.n	8007cf6 <I2C_IsErrorOccurred+0xda>
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	2380      	movs	r3, #128	@ 0x80
 8007cac:	01db      	lsls	r3, r3, #7
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d021      	beq.n	8007cf6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007cb2:	183b      	adds	r3, r7, r0
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d01d      	beq.n	8007cf6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2180      	movs	r1, #128	@ 0x80
 8007cc6:	01c9      	lsls	r1, r1, #7
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ccc:	f7ff f88e 	bl	8006dec <HAL_GetTick>
 8007cd0:	0003      	movs	r3, r0
 8007cd2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cd4:	e00f      	b.n	8007cf6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007cd6:	f7ff f889 	bl	8006dec <HAL_GetTick>
 8007cda:	0002      	movs	r2, r0
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b19      	cmp	r3, #25
 8007ce2:	d908      	bls.n	8007cf6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007cec:	2327      	movs	r3, #39	@ 0x27
 8007cee:	18fb      	adds	r3, r7, r3
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	701a      	strb	r2, [r3, #0]

              break;
 8007cf4:	e006      	b.n	8007d04 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d1e8      	bne.n	8007cd6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d004      	beq.n	8007d1c <I2C_IsErrorOccurred+0x100>
 8007d12:	2327      	movs	r3, #39	@ 0x27
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d09b      	beq.n	8007c54 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d1c:	2327      	movs	r3, #39	@ 0x27
 8007d1e:	18fb      	adds	r3, r7, r3
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	2204      	movs	r2, #4
 8007d32:	4313      	orrs	r3, r2
 8007d34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d36:	2327      	movs	r3, #39	@ 0x27
 8007d38:	18fb      	adds	r3, r7, r3
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	2380      	movs	r3, #128	@ 0x80
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d00c      	beq.n	8007d6a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	2201      	movs	r2, #1
 8007d54:	4313      	orrs	r3, r2
 8007d56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2280      	movs	r2, #128	@ 0x80
 8007d5e:	0052      	lsls	r2, r2, #1
 8007d60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d62:	2327      	movs	r3, #39	@ 0x27
 8007d64:	18fb      	adds	r3, r7, r3
 8007d66:	2201      	movs	r2, #1
 8007d68:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	2380      	movs	r3, #128	@ 0x80
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4013      	ands	r3, r2
 8007d72:	d00c      	beq.n	8007d8e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	2208      	movs	r2, #8
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2280      	movs	r2, #128	@ 0x80
 8007d82:	00d2      	lsls	r2, r2, #3
 8007d84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d86:	2327      	movs	r3, #39	@ 0x27
 8007d88:	18fb      	adds	r3, r7, r3
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	2380      	movs	r3, #128	@ 0x80
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4013      	ands	r3, r2
 8007d96:	d00c      	beq.n	8007db2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2280      	movs	r2, #128	@ 0x80
 8007da6:	0092      	lsls	r2, r2, #2
 8007da8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007daa:	2327      	movs	r3, #39	@ 0x27
 8007dac:	18fb      	adds	r3, r7, r3
 8007dae:	2201      	movs	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007db2:	2327      	movs	r3, #39	@ 0x27
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d01d      	beq.n	8007df8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f7ff fd8a 	bl	80078d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	490e      	ldr	r1, [pc, #56]	@ (8007e08 <I2C_IsErrorOccurred+0x1ec>)
 8007dd0:	400a      	ands	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2241      	movs	r2, #65	@ 0x41
 8007de4:	2120      	movs	r1, #32
 8007de6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2242      	movs	r2, #66	@ 0x42
 8007dec:	2100      	movs	r1, #0
 8007dee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2240      	movs	r2, #64	@ 0x40
 8007df4:	2100      	movs	r1, #0
 8007df6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007df8:	2327      	movs	r3, #39	@ 0x27
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	781b      	ldrb	r3, [r3, #0]
}
 8007dfe:	0018      	movs	r0, r3
 8007e00:	46bd      	mov	sp, r7
 8007e02:	b00a      	add	sp, #40	@ 0x28
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	46c0      	nop			@ (mov r8, r8)
 8007e08:	fe00e800 	.word	0xfe00e800

08007e0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	0008      	movs	r0, r1
 8007e16:	0011      	movs	r1, r2
 8007e18:	607b      	str	r3, [r7, #4]
 8007e1a:	240a      	movs	r4, #10
 8007e1c:	193b      	adds	r3, r7, r4
 8007e1e:	1c02      	adds	r2, r0, #0
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	2009      	movs	r0, #9
 8007e24:	183b      	adds	r3, r7, r0
 8007e26:	1c0a      	adds	r2, r1, #0
 8007e28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e2a:	193b      	adds	r3, r7, r4
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	059b      	lsls	r3, r3, #22
 8007e30:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e32:	183b      	adds	r3, r7, r0
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	0419      	lsls	r1, r3, #16
 8007e38:	23ff      	movs	r3, #255	@ 0xff
 8007e3a:	041b      	lsls	r3, r3, #16
 8007e3c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e3e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e46:	4313      	orrs	r3, r2
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e56:	0d51      	lsrs	r1, r2, #21
 8007e58:	2280      	movs	r2, #128	@ 0x80
 8007e5a:	00d2      	lsls	r2, r2, #3
 8007e5c:	400a      	ands	r2, r1
 8007e5e:	4907      	ldr	r1, [pc, #28]	@ (8007e7c <I2C_TransferConfig+0x70>)
 8007e60:	430a      	orrs	r2, r1
 8007e62:	43d2      	mvns	r2, r2
 8007e64:	401a      	ands	r2, r3
 8007e66:	0011      	movs	r1, r2
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e72:	46c0      	nop			@ (mov r8, r8)
 8007e74:	46bd      	mov	sp, r7
 8007e76:	b007      	add	sp, #28
 8007e78:	bd90      	pop	{r4, r7, pc}
 8007e7a:	46c0      	nop			@ (mov r8, r8)
 8007e7c:	03ff63ff 	.word	0x03ff63ff

08007e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2241      	movs	r2, #65	@ 0x41
 8007e8e:	5c9b      	ldrb	r3, [r3, r2]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b20      	cmp	r3, #32
 8007e94:	d138      	bne.n	8007f08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2240      	movs	r2, #64	@ 0x40
 8007e9a:	5c9b      	ldrb	r3, [r3, r2]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e032      	b.n	8007f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2240      	movs	r2, #64	@ 0x40
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2241      	movs	r2, #65	@ 0x41
 8007eb0:	2124      	movs	r1, #36	@ 0x24
 8007eb2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	438a      	bics	r2, r1
 8007ec2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4911      	ldr	r1, [pc, #68]	@ (8007f14 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007ed0:	400a      	ands	r2, r1
 8007ed2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2101      	movs	r1, #1
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2241      	movs	r2, #65	@ 0x41
 8007ef8:	2120      	movs	r1, #32
 8007efa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2240      	movs	r2, #64	@ 0x40
 8007f00:	2100      	movs	r1, #0
 8007f02:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e000      	b.n	8007f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f08:	2302      	movs	r3, #2
  }
}
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	b002      	add	sp, #8
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	46c0      	nop			@ (mov r8, r8)
 8007f14:	ffffefff 	.word	0xffffefff

08007f18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2241      	movs	r2, #65	@ 0x41
 8007f26:	5c9b      	ldrb	r3, [r3, r2]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d139      	bne.n	8007fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2240      	movs	r2, #64	@ 0x40
 8007f32:	5c9b      	ldrb	r3, [r3, r2]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e033      	b.n	8007fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2240      	movs	r2, #64	@ 0x40
 8007f40:	2101      	movs	r1, #1
 8007f42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2241      	movs	r2, #65	@ 0x41
 8007f48:	2124      	movs	r1, #36	@ 0x24
 8007f4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2101      	movs	r1, #1
 8007f58:	438a      	bics	r2, r1
 8007f5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a11      	ldr	r2, [pc, #68]	@ (8007fac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2101      	movs	r1, #1
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2241      	movs	r2, #65	@ 0x41
 8007f92:	2120      	movs	r1, #32
 8007f94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2240      	movs	r2, #64	@ 0x40
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e000      	b.n	8007fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fa2:	2302      	movs	r3, #2
  }
}
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	b004      	add	sp, #16
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	fffff0ff 	.word	0xfffff0ff

08007fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007fb8:	4b19      	ldr	r3, [pc, #100]	@ (8008020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	0019      	movs	r1, r3
 8007fc2:	4b17      	ldr	r3, [pc, #92]	@ (8008020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d11f      	bne.n	8008014 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007fd4:	4b14      	ldr	r3, [pc, #80]	@ (8008028 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	0013      	movs	r3, r2
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	189b      	adds	r3, r3, r2
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	4912      	ldr	r1, [pc, #72]	@ (800802c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f7f8 f8a2 	bl	800012c <__udivsi3>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007fee:	e008      	b.n	8008002 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	e001      	b.n	8008002 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e009      	b.n	8008016 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008002:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008004:	695a      	ldr	r2, [r3, #20]
 8008006:	2380      	movs	r3, #128	@ 0x80
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	401a      	ands	r2, r3
 800800c:	2380      	movs	r3, #128	@ 0x80
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	429a      	cmp	r2, r3
 8008012:	d0ed      	beq.n	8007ff0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	0018      	movs	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	b004      	add	sp, #16
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			@ (mov r8, r8)
 8008020:	40007000 	.word	0x40007000
 8008024:	fffff9ff 	.word	0xfffff9ff
 8008028:	200009c8 	.word	0x200009c8
 800802c:	000f4240 	.word	0x000f4240

08008030 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008034:	4b03      	ldr	r3, [pc, #12]	@ (8008044 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	23e0      	movs	r3, #224	@ 0xe0
 800803a:	01db      	lsls	r3, r3, #7
 800803c:	4013      	ands	r3, r2
}
 800803e:	0018      	movs	r0, r3
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	40021000 	.word	0x40021000

08008048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f000 fb50 	bl	80086fc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2201      	movs	r2, #1
 8008062:	4013      	ands	r3, r2
 8008064:	d100      	bne.n	8008068 <HAL_RCC_OscConfig+0x20>
 8008066:	e07c      	b.n	8008162 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008068:	4bc3      	ldr	r3, [pc, #780]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2238      	movs	r2, #56	@ 0x38
 800806e:	4013      	ands	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008072:	4bc1      	ldr	r3, [pc, #772]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	2203      	movs	r2, #3
 8008078:	4013      	ands	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b10      	cmp	r3, #16
 8008080:	d102      	bne.n	8008088 <HAL_RCC_OscConfig+0x40>
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b03      	cmp	r3, #3
 8008086:	d002      	beq.n	800808e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2b08      	cmp	r3, #8
 800808c:	d10b      	bne.n	80080a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800808e:	4bba      	ldr	r3, [pc, #744]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	2380      	movs	r3, #128	@ 0x80
 8008094:	029b      	lsls	r3, r3, #10
 8008096:	4013      	ands	r3, r2
 8008098:	d062      	beq.n	8008160 <HAL_RCC_OscConfig+0x118>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d15e      	bne.n	8008160 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e32a      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	2380      	movs	r3, #128	@ 0x80
 80080ac:	025b      	lsls	r3, r3, #9
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d107      	bne.n	80080c2 <HAL_RCC_OscConfig+0x7a>
 80080b2:	4bb1      	ldr	r3, [pc, #708]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4bb0      	ldr	r3, [pc, #704]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080b8:	2180      	movs	r1, #128	@ 0x80
 80080ba:	0249      	lsls	r1, r1, #9
 80080bc:	430a      	orrs	r2, r1
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e020      	b.n	8008104 <HAL_RCC_OscConfig+0xbc>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	23a0      	movs	r3, #160	@ 0xa0
 80080c8:	02db      	lsls	r3, r3, #11
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d10e      	bne.n	80080ec <HAL_RCC_OscConfig+0xa4>
 80080ce:	4baa      	ldr	r3, [pc, #680]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4ba9      	ldr	r3, [pc, #676]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080d4:	2180      	movs	r1, #128	@ 0x80
 80080d6:	02c9      	lsls	r1, r1, #11
 80080d8:	430a      	orrs	r2, r1
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	4ba6      	ldr	r3, [pc, #664]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4ba5      	ldr	r3, [pc, #660]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080e2:	2180      	movs	r1, #128	@ 0x80
 80080e4:	0249      	lsls	r1, r1, #9
 80080e6:	430a      	orrs	r2, r1
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	e00b      	b.n	8008104 <HAL_RCC_OscConfig+0xbc>
 80080ec:	4ba2      	ldr	r3, [pc, #648]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	4ba1      	ldr	r3, [pc, #644]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080f2:	49a2      	ldr	r1, [pc, #648]	@ (800837c <HAL_RCC_OscConfig+0x334>)
 80080f4:	400a      	ands	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	4b9f      	ldr	r3, [pc, #636]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	4b9e      	ldr	r3, [pc, #632]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80080fe:	49a0      	ldr	r1, [pc, #640]	@ (8008380 <HAL_RCC_OscConfig+0x338>)
 8008100:	400a      	ands	r2, r1
 8008102:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d014      	beq.n	8008136 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fe fe6e 	bl	8006dec <HAL_GetTick>
 8008110:	0003      	movs	r3, r0
 8008112:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008116:	f7fe fe69 	bl	8006dec <HAL_GetTick>
 800811a:	0002      	movs	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b64      	cmp	r3, #100	@ 0x64
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e2e9      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008128:	4b93      	ldr	r3, [pc, #588]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	2380      	movs	r3, #128	@ 0x80
 800812e:	029b      	lsls	r3, r3, #10
 8008130:	4013      	ands	r3, r2
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0xce>
 8008134:	e015      	b.n	8008162 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008136:	f7fe fe59 	bl	8006dec <HAL_GetTick>
 800813a:	0003      	movs	r3, r0
 800813c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008140:	f7fe fe54 	bl	8006dec <HAL_GetTick>
 8008144:	0002      	movs	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b64      	cmp	r3, #100	@ 0x64
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e2d4      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008152:	4b89      	ldr	r3, [pc, #548]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	2380      	movs	r3, #128	@ 0x80
 8008158:	029b      	lsls	r3, r3, #10
 800815a:	4013      	ands	r3, r2
 800815c:	d1f0      	bne.n	8008140 <HAL_RCC_OscConfig+0xf8>
 800815e:	e000      	b.n	8008162 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008160:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2202      	movs	r2, #2
 8008168:	4013      	ands	r3, r2
 800816a:	d100      	bne.n	800816e <HAL_RCC_OscConfig+0x126>
 800816c:	e099      	b.n	80082a2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800816e:	4b82      	ldr	r3, [pc, #520]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2238      	movs	r2, #56	@ 0x38
 8008174:	4013      	ands	r3, r2
 8008176:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008178:	4b7f      	ldr	r3, [pc, #508]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	2203      	movs	r2, #3
 800817e:	4013      	ands	r3, r2
 8008180:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b10      	cmp	r3, #16
 8008186:	d102      	bne.n	800818e <HAL_RCC_OscConfig+0x146>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d002      	beq.n	8008194 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d135      	bne.n	8008200 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008194:	4b78      	ldr	r3, [pc, #480]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	2380      	movs	r3, #128	@ 0x80
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4013      	ands	r3, r2
 800819e:	d005      	beq.n	80081ac <HAL_RCC_OscConfig+0x164>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e2a7      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ac:	4b72      	ldr	r3, [pc, #456]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4a74      	ldr	r2, [pc, #464]	@ (8008384 <HAL_RCC_OscConfig+0x33c>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	0019      	movs	r1, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	021a      	lsls	r2, r3, #8
 80081bc:	4b6e      	ldr	r3, [pc, #440]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d112      	bne.n	80081ee <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80081c8:	4b6b      	ldr	r3, [pc, #428]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a6e      	ldr	r2, [pc, #440]	@ (8008388 <HAL_RCC_OscConfig+0x340>)
 80081ce:	4013      	ands	r3, r2
 80081d0:	0019      	movs	r1, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	4b68      	ldr	r3, [pc, #416]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80081dc:	4b66      	ldr	r3, [pc, #408]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	0adb      	lsrs	r3, r3, #11
 80081e2:	2207      	movs	r2, #7
 80081e4:	4013      	ands	r3, r2
 80081e6:	4a69      	ldr	r2, [pc, #420]	@ (800838c <HAL_RCC_OscConfig+0x344>)
 80081e8:	40da      	lsrs	r2, r3
 80081ea:	4b69      	ldr	r3, [pc, #420]	@ (8008390 <HAL_RCC_OscConfig+0x348>)
 80081ec:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80081ee:	4b69      	ldr	r3, [pc, #420]	@ (8008394 <HAL_RCC_OscConfig+0x34c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	0018      	movs	r0, r3
 80081f4:	f7fe fd9e 	bl	8006d34 <HAL_InitTick>
 80081f8:	1e03      	subs	r3, r0, #0
 80081fa:	d051      	beq.n	80082a0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e27d      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d030      	beq.n	800826a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008208:	4b5b      	ldr	r3, [pc, #364]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a5e      	ldr	r2, [pc, #376]	@ (8008388 <HAL_RCC_OscConfig+0x340>)
 800820e:	4013      	ands	r3, r2
 8008210:	0019      	movs	r1, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	4b58      	ldr	r3, [pc, #352]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008218:	430a      	orrs	r2, r1
 800821a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800821c:	4b56      	ldr	r3, [pc, #344]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4b55      	ldr	r3, [pc, #340]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008222:	2180      	movs	r1, #128	@ 0x80
 8008224:	0049      	lsls	r1, r1, #1
 8008226:	430a      	orrs	r2, r1
 8008228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822a:	f7fe fddf 	bl	8006dec <HAL_GetTick>
 800822e:	0003      	movs	r3, r0
 8008230:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008232:	e008      	b.n	8008246 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008234:	f7fe fdda 	bl	8006dec <HAL_GetTick>
 8008238:	0002      	movs	r2, r0
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e25a      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008246:	4b4c      	ldr	r3, [pc, #304]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	2380      	movs	r3, #128	@ 0x80
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4013      	ands	r3, r2
 8008250:	d0f0      	beq.n	8008234 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008252:	4b49      	ldr	r3, [pc, #292]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4a4b      	ldr	r2, [pc, #300]	@ (8008384 <HAL_RCC_OscConfig+0x33c>)
 8008258:	4013      	ands	r3, r2
 800825a:	0019      	movs	r1, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	021a      	lsls	r2, r3, #8
 8008262:	4b45      	ldr	r3, [pc, #276]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008264:	430a      	orrs	r2, r1
 8008266:	605a      	str	r2, [r3, #4]
 8008268:	e01b      	b.n	80082a2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800826a:	4b43      	ldr	r3, [pc, #268]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b42      	ldr	r3, [pc, #264]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008270:	4949      	ldr	r1, [pc, #292]	@ (8008398 <HAL_RCC_OscConfig+0x350>)
 8008272:	400a      	ands	r2, r1
 8008274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008276:	f7fe fdb9 	bl	8006dec <HAL_GetTick>
 800827a:	0003      	movs	r3, r0
 800827c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008280:	f7fe fdb4 	bl	8006dec <HAL_GetTick>
 8008284:	0002      	movs	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e234      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008292:	4b39      	ldr	r3, [pc, #228]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	2380      	movs	r3, #128	@ 0x80
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	4013      	ands	r3, r2
 800829c:	d1f0      	bne.n	8008280 <HAL_RCC_OscConfig+0x238>
 800829e:	e000      	b.n	80082a2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082a0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2208      	movs	r2, #8
 80082a8:	4013      	ands	r3, r2
 80082aa:	d047      	beq.n	800833c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80082ac:	4b32      	ldr	r3, [pc, #200]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2238      	movs	r2, #56	@ 0x38
 80082b2:	4013      	ands	r3, r2
 80082b4:	2b18      	cmp	r3, #24
 80082b6:	d10a      	bne.n	80082ce <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80082b8:	4b2f      	ldr	r3, [pc, #188]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80082ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082bc:	2202      	movs	r2, #2
 80082be:	4013      	ands	r3, r2
 80082c0:	d03c      	beq.n	800833c <HAL_RCC_OscConfig+0x2f4>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d138      	bne.n	800833c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e216      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d019      	beq.n	800830a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80082d6:	4b28      	ldr	r3, [pc, #160]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80082d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80082da:	4b27      	ldr	r3, [pc, #156]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 80082dc:	2101      	movs	r1, #1
 80082de:	430a      	orrs	r2, r1
 80082e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e2:	f7fe fd83 	bl	8006dec <HAL_GetTick>
 80082e6:	0003      	movs	r3, r0
 80082e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082ec:	f7fe fd7e 	bl	8006dec <HAL_GetTick>
 80082f0:	0002      	movs	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e1fe      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80082fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008302:	2202      	movs	r2, #2
 8008304:	4013      	ands	r3, r2
 8008306:	d0f1      	beq.n	80082ec <HAL_RCC_OscConfig+0x2a4>
 8008308:	e018      	b.n	800833c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800830a:	4b1b      	ldr	r3, [pc, #108]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800830c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800830e:	4b1a      	ldr	r3, [pc, #104]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008310:	2101      	movs	r1, #1
 8008312:	438a      	bics	r2, r1
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008316:	f7fe fd69 	bl	8006dec <HAL_GetTick>
 800831a:	0003      	movs	r3, r0
 800831c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008320:	f7fe fd64 	bl	8006dec <HAL_GetTick>
 8008324:	0002      	movs	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e1e4      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008332:	4b11      	ldr	r3, [pc, #68]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008336:	2202      	movs	r2, #2
 8008338:	4013      	ands	r3, r2
 800833a:	d1f1      	bne.n	8008320 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2204      	movs	r2, #4
 8008342:	4013      	ands	r3, r2
 8008344:	d100      	bne.n	8008348 <HAL_RCC_OscConfig+0x300>
 8008346:	e0c7      	b.n	80084d8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008348:	231f      	movs	r3, #31
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008350:	4b09      	ldr	r3, [pc, #36]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	2238      	movs	r2, #56	@ 0x38
 8008356:	4013      	ands	r3, r2
 8008358:	2b20      	cmp	r3, #32
 800835a:	d11f      	bne.n	800839c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800835c:	4b06      	ldr	r3, [pc, #24]	@ (8008378 <HAL_RCC_OscConfig+0x330>)
 800835e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008360:	2202      	movs	r2, #2
 8008362:	4013      	ands	r3, r2
 8008364:	d100      	bne.n	8008368 <HAL_RCC_OscConfig+0x320>
 8008366:	e0b7      	b.n	80084d8 <HAL_RCC_OscConfig+0x490>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d000      	beq.n	8008372 <HAL_RCC_OscConfig+0x32a>
 8008370:	e0b2      	b.n	80084d8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e1c2      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
 8008376:	46c0      	nop			@ (mov r8, r8)
 8008378:	40021000 	.word	0x40021000
 800837c:	fffeffff 	.word	0xfffeffff
 8008380:	fffbffff 	.word	0xfffbffff
 8008384:	ffff80ff 	.word	0xffff80ff
 8008388:	ffffc7ff 	.word	0xffffc7ff
 800838c:	00f42400 	.word	0x00f42400
 8008390:	200009c8 	.word	0x200009c8
 8008394:	200009cc 	.word	0x200009cc
 8008398:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800839c:	4bb5      	ldr	r3, [pc, #724]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800839e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083a0:	2380      	movs	r3, #128	@ 0x80
 80083a2:	055b      	lsls	r3, r3, #21
 80083a4:	4013      	ands	r3, r2
 80083a6:	d101      	bne.n	80083ac <HAL_RCC_OscConfig+0x364>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <HAL_RCC_OscConfig+0x366>
 80083ac:	2300      	movs	r3, #0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d011      	beq.n	80083d6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80083b2:	4bb0      	ldr	r3, [pc, #704]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80083b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083b6:	4baf      	ldr	r3, [pc, #700]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80083b8:	2180      	movs	r1, #128	@ 0x80
 80083ba:	0549      	lsls	r1, r1, #21
 80083bc:	430a      	orrs	r2, r1
 80083be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80083c0:	4bac      	ldr	r3, [pc, #688]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80083c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083c4:	2380      	movs	r3, #128	@ 0x80
 80083c6:	055b      	lsls	r3, r3, #21
 80083c8:	4013      	ands	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80083ce:	231f      	movs	r3, #31
 80083d0:	18fb      	adds	r3, r7, r3
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083d6:	4ba8      	ldr	r3, [pc, #672]	@ (8008678 <HAL_RCC_OscConfig+0x630>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	2380      	movs	r3, #128	@ 0x80
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4013      	ands	r3, r2
 80083e0:	d11a      	bne.n	8008418 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083e2:	4ba5      	ldr	r3, [pc, #660]	@ (8008678 <HAL_RCC_OscConfig+0x630>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	4ba4      	ldr	r3, [pc, #656]	@ (8008678 <HAL_RCC_OscConfig+0x630>)
 80083e8:	2180      	movs	r1, #128	@ 0x80
 80083ea:	0049      	lsls	r1, r1, #1
 80083ec:	430a      	orrs	r2, r1
 80083ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80083f0:	f7fe fcfc 	bl	8006dec <HAL_GetTick>
 80083f4:	0003      	movs	r3, r0
 80083f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083fa:	f7fe fcf7 	bl	8006dec <HAL_GetTick>
 80083fe:	0002      	movs	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e177      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800840c:	4b9a      	ldr	r3, [pc, #616]	@ (8008678 <HAL_RCC_OscConfig+0x630>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	2380      	movs	r3, #128	@ 0x80
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	4013      	ands	r3, r2
 8008416:	d0f0      	beq.n	80083fa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d106      	bne.n	800842e <HAL_RCC_OscConfig+0x3e6>
 8008420:	4b94      	ldr	r3, [pc, #592]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008424:	4b93      	ldr	r3, [pc, #588]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008426:	2101      	movs	r1, #1
 8008428:	430a      	orrs	r2, r1
 800842a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800842c:	e01c      	b.n	8008468 <HAL_RCC_OscConfig+0x420>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b05      	cmp	r3, #5
 8008434:	d10c      	bne.n	8008450 <HAL_RCC_OscConfig+0x408>
 8008436:	4b8f      	ldr	r3, [pc, #572]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800843a:	4b8e      	ldr	r3, [pc, #568]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800843c:	2104      	movs	r1, #4
 800843e:	430a      	orrs	r2, r1
 8008440:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008442:	4b8c      	ldr	r3, [pc, #560]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008444:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008446:	4b8b      	ldr	r3, [pc, #556]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008448:	2101      	movs	r1, #1
 800844a:	430a      	orrs	r2, r1
 800844c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800844e:	e00b      	b.n	8008468 <HAL_RCC_OscConfig+0x420>
 8008450:	4b88      	ldr	r3, [pc, #544]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008452:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008454:	4b87      	ldr	r3, [pc, #540]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008456:	2101      	movs	r1, #1
 8008458:	438a      	bics	r2, r1
 800845a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800845c:	4b85      	ldr	r3, [pc, #532]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800845e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008460:	4b84      	ldr	r3, [pc, #528]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008462:	2104      	movs	r1, #4
 8008464:	438a      	bics	r2, r1
 8008466:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d014      	beq.n	800849a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008470:	f7fe fcbc 	bl	8006dec <HAL_GetTick>
 8008474:	0003      	movs	r3, r0
 8008476:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008478:	e009      	b.n	800848e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800847a:	f7fe fcb7 	bl	8006dec <HAL_GetTick>
 800847e:	0002      	movs	r2, r0
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	4a7d      	ldr	r2, [pc, #500]	@ (800867c <HAL_RCC_OscConfig+0x634>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e136      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800848e:	4b79      	ldr	r3, [pc, #484]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008492:	2202      	movs	r2, #2
 8008494:	4013      	ands	r3, r2
 8008496:	d0f0      	beq.n	800847a <HAL_RCC_OscConfig+0x432>
 8008498:	e013      	b.n	80084c2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849a:	f7fe fca7 	bl	8006dec <HAL_GetTick>
 800849e:	0003      	movs	r3, r0
 80084a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084a2:	e009      	b.n	80084b8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a4:	f7fe fca2 	bl	8006dec <HAL_GetTick>
 80084a8:	0002      	movs	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	4a73      	ldr	r2, [pc, #460]	@ (800867c <HAL_RCC_OscConfig+0x634>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e121      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084b8:	4b6e      	ldr	r3, [pc, #440]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80084ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084bc:	2202      	movs	r2, #2
 80084be:	4013      	ands	r3, r2
 80084c0:	d1f0      	bne.n	80084a4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80084c2:	231f      	movs	r3, #31
 80084c4:	18fb      	adds	r3, r7, r3
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d105      	bne.n	80084d8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80084cc:	4b69      	ldr	r3, [pc, #420]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80084ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084d0:	4b68      	ldr	r3, [pc, #416]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80084d2:	496b      	ldr	r1, [pc, #428]	@ (8008680 <HAL_RCC_OscConfig+0x638>)
 80084d4:	400a      	ands	r2, r1
 80084d6:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2220      	movs	r2, #32
 80084de:	4013      	ands	r3, r2
 80084e0:	d039      	beq.n	8008556 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01b      	beq.n	8008522 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80084ea:	4b62      	ldr	r3, [pc, #392]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b61      	ldr	r3, [pc, #388]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80084f0:	2180      	movs	r1, #128	@ 0x80
 80084f2:	03c9      	lsls	r1, r1, #15
 80084f4:	430a      	orrs	r2, r1
 80084f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f8:	f7fe fc78 	bl	8006dec <HAL_GetTick>
 80084fc:	0003      	movs	r3, r0
 80084fe:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008500:	e008      	b.n	8008514 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008502:	f7fe fc73 	bl	8006dec <HAL_GetTick>
 8008506:	0002      	movs	r2, r0
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e0f3      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008514:	4b57      	ldr	r3, [pc, #348]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	2380      	movs	r3, #128	@ 0x80
 800851a:	041b      	lsls	r3, r3, #16
 800851c:	4013      	ands	r3, r2
 800851e:	d0f0      	beq.n	8008502 <HAL_RCC_OscConfig+0x4ba>
 8008520:	e019      	b.n	8008556 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008522:	4b54      	ldr	r3, [pc, #336]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b53      	ldr	r3, [pc, #332]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008528:	4956      	ldr	r1, [pc, #344]	@ (8008684 <HAL_RCC_OscConfig+0x63c>)
 800852a:	400a      	ands	r2, r1
 800852c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852e:	f7fe fc5d 	bl	8006dec <HAL_GetTick>
 8008532:	0003      	movs	r3, r0
 8008534:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008538:	f7fe fc58 	bl	8006dec <HAL_GetTick>
 800853c:	0002      	movs	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e0d8      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800854a:	4b4a      	ldr	r3, [pc, #296]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	2380      	movs	r3, #128	@ 0x80
 8008550:	041b      	lsls	r3, r3, #16
 8008552:	4013      	ands	r3, r2
 8008554:	d1f0      	bne.n	8008538 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d100      	bne.n	8008560 <HAL_RCC_OscConfig+0x518>
 800855e:	e0cc      	b.n	80086fa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008560:	4b44      	ldr	r3, [pc, #272]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	2238      	movs	r2, #56	@ 0x38
 8008566:	4013      	ands	r3, r2
 8008568:	2b10      	cmp	r3, #16
 800856a:	d100      	bne.n	800856e <HAL_RCC_OscConfig+0x526>
 800856c:	e07b      	b.n	8008666 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d156      	bne.n	8008624 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008576:	4b3f      	ldr	r3, [pc, #252]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	4b3e      	ldr	r3, [pc, #248]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800857c:	4942      	ldr	r1, [pc, #264]	@ (8008688 <HAL_RCC_OscConfig+0x640>)
 800857e:	400a      	ands	r2, r1
 8008580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008582:	f7fe fc33 	bl	8006dec <HAL_GetTick>
 8008586:	0003      	movs	r3, r0
 8008588:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800858c:	f7fe fc2e 	bl	8006dec <HAL_GetTick>
 8008590:	0002      	movs	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e0ae      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800859e:	4b35      	ldr	r3, [pc, #212]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	2380      	movs	r3, #128	@ 0x80
 80085a4:	049b      	lsls	r3, r3, #18
 80085a6:	4013      	ands	r3, r2
 80085a8:	d1f0      	bne.n	800858c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085aa:	4b32      	ldr	r3, [pc, #200]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	4a37      	ldr	r2, [pc, #220]	@ (800868c <HAL_RCC_OscConfig+0x644>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	0019      	movs	r1, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	431a      	orrs	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d0:	431a      	orrs	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d6:	431a      	orrs	r2, r3
 80085d8:	4b26      	ldr	r3, [pc, #152]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80085da:	430a      	orrs	r2, r1
 80085dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085de:	4b25      	ldr	r3, [pc, #148]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b24      	ldr	r3, [pc, #144]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80085e4:	2180      	movs	r1, #128	@ 0x80
 80085e6:	0449      	lsls	r1, r1, #17
 80085e8:	430a      	orrs	r2, r1
 80085ea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80085ec:	4b21      	ldr	r3, [pc, #132]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	4b20      	ldr	r3, [pc, #128]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 80085f2:	2180      	movs	r1, #128	@ 0x80
 80085f4:	0549      	lsls	r1, r1, #21
 80085f6:	430a      	orrs	r2, r1
 80085f8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fa:	f7fe fbf7 	bl	8006dec <HAL_GetTick>
 80085fe:	0003      	movs	r3, r0
 8008600:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008602:	e008      	b.n	8008616 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008604:	f7fe fbf2 	bl	8006dec <HAL_GetTick>
 8008608:	0002      	movs	r2, r0
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e072      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008616:	4b17      	ldr	r3, [pc, #92]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	2380      	movs	r3, #128	@ 0x80
 800861c:	049b      	lsls	r3, r3, #18
 800861e:	4013      	ands	r3, r2
 8008620:	d0f0      	beq.n	8008604 <HAL_RCC_OscConfig+0x5bc>
 8008622:	e06a      	b.n	80086fa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008624:	4b13      	ldr	r3, [pc, #76]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	4b12      	ldr	r3, [pc, #72]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800862a:	4917      	ldr	r1, [pc, #92]	@ (8008688 <HAL_RCC_OscConfig+0x640>)
 800862c:	400a      	ands	r2, r1
 800862e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008630:	f7fe fbdc 	bl	8006dec <HAL_GetTick>
 8008634:	0003      	movs	r3, r0
 8008636:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008638:	e008      	b.n	800864c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800863a:	f7fe fbd7 	bl	8006dec <HAL_GetTick>
 800863e:	0002      	movs	r2, r0
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b02      	cmp	r3, #2
 8008646:	d901      	bls.n	800864c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e057      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800864c:	4b09      	ldr	r3, [pc, #36]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	2380      	movs	r3, #128	@ 0x80
 8008652:	049b      	lsls	r3, r3, #18
 8008654:	4013      	ands	r3, r2
 8008656:	d1f0      	bne.n	800863a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008658:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	4b05      	ldr	r3, [pc, #20]	@ (8008674 <HAL_RCC_OscConfig+0x62c>)
 800865e:	490c      	ldr	r1, [pc, #48]	@ (8008690 <HAL_RCC_OscConfig+0x648>)
 8008660:	400a      	ands	r2, r1
 8008662:	60da      	str	r2, [r3, #12]
 8008664:	e049      	b.n	80086fa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d112      	bne.n	8008694 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e044      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
 8008672:	46c0      	nop			@ (mov r8, r8)
 8008674:	40021000 	.word	0x40021000
 8008678:	40007000 	.word	0x40007000
 800867c:	00001388 	.word	0x00001388
 8008680:	efffffff 	.word	0xefffffff
 8008684:	ffbfffff 	.word	0xffbfffff
 8008688:	feffffff 	.word	0xfeffffff
 800868c:	11c1808c 	.word	0x11c1808c
 8008690:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008694:	4b1b      	ldr	r3, [pc, #108]	@ (8008704 <HAL_RCC_OscConfig+0x6bc>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2203      	movs	r2, #3
 800869e:	401a      	ands	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d126      	bne.n	80086f6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2270      	movs	r2, #112	@ 0x70
 80086ac:	401a      	ands	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d11f      	bne.n	80086f6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	23fe      	movs	r3, #254	@ 0xfe
 80086ba:	01db      	lsls	r3, r3, #7
 80086bc:	401a      	ands	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d116      	bne.n	80086f6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	23f8      	movs	r3, #248	@ 0xf8
 80086cc:	039b      	lsls	r3, r3, #14
 80086ce:	401a      	ands	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d10e      	bne.n	80086f6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	23e0      	movs	r3, #224	@ 0xe0
 80086dc:	051b      	lsls	r3, r3, #20
 80086de:	401a      	ands	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d106      	bne.n	80086f6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	0f5b      	lsrs	r3, r3, #29
 80086ec:	075a      	lsls	r2, r3, #29
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d001      	beq.n	80086fa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	0018      	movs	r0, r3
 80086fe:	46bd      	mov	sp, r7
 8008700:	b008      	add	sp, #32
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40021000 	.word	0x40021000

08008708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e0e9      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800871c:	4b76      	ldr	r3, [pc, #472]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2207      	movs	r2, #7
 8008722:	4013      	ands	r3, r2
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d91e      	bls.n	8008768 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800872a:	4b73      	ldr	r3, [pc, #460]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2207      	movs	r2, #7
 8008730:	4393      	bics	r3, r2
 8008732:	0019      	movs	r1, r3
 8008734:	4b70      	ldr	r3, [pc, #448]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800873c:	f7fe fb56 	bl	8006dec <HAL_GetTick>
 8008740:	0003      	movs	r3, r0
 8008742:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008744:	e009      	b.n	800875a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008746:	f7fe fb51 	bl	8006dec <HAL_GetTick>
 800874a:	0002      	movs	r2, r0
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	4a6a      	ldr	r2, [pc, #424]	@ (80088fc <HAL_RCC_ClockConfig+0x1f4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d901      	bls.n	800875a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e0ca      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800875a:	4b67      	ldr	r3, [pc, #412]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2207      	movs	r2, #7
 8008760:	4013      	ands	r3, r2
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d1ee      	bne.n	8008746 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2202      	movs	r2, #2
 800876e:	4013      	ands	r3, r2
 8008770:	d015      	beq.n	800879e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2204      	movs	r2, #4
 8008778:	4013      	ands	r3, r2
 800877a:	d006      	beq.n	800878a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800877c:	4b60      	ldr	r3, [pc, #384]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	4b5f      	ldr	r3, [pc, #380]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 8008782:	21e0      	movs	r1, #224	@ 0xe0
 8008784:	01c9      	lsls	r1, r1, #7
 8008786:	430a      	orrs	r2, r1
 8008788:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800878a:	4b5d      	ldr	r3, [pc, #372]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4a5d      	ldr	r2, [pc, #372]	@ (8008904 <HAL_RCC_ClockConfig+0x1fc>)
 8008790:	4013      	ands	r3, r2
 8008792:	0019      	movs	r1, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	4b59      	ldr	r3, [pc, #356]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 800879a:	430a      	orrs	r2, r1
 800879c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2201      	movs	r2, #1
 80087a4:	4013      	ands	r3, r2
 80087a6:	d057      	beq.n	8008858 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d107      	bne.n	80087c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087b0:	4b53      	ldr	r3, [pc, #332]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	2380      	movs	r3, #128	@ 0x80
 80087b6:	029b      	lsls	r3, r3, #10
 80087b8:	4013      	ands	r3, r2
 80087ba:	d12b      	bne.n	8008814 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e097      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d107      	bne.n	80087d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	2380      	movs	r3, #128	@ 0x80
 80087ce:	049b      	lsls	r3, r3, #18
 80087d0:	4013      	ands	r3, r2
 80087d2:	d11f      	bne.n	8008814 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e08b      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d107      	bne.n	80087f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087e0:	4b47      	ldr	r3, [pc, #284]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	2380      	movs	r3, #128	@ 0x80
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	4013      	ands	r3, r2
 80087ea:	d113      	bne.n	8008814 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e07f      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d106      	bne.n	8008806 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087f8:	4b41      	ldr	r3, [pc, #260]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 80087fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087fc:	2202      	movs	r2, #2
 80087fe:	4013      	ands	r3, r2
 8008800:	d108      	bne.n	8008814 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e074      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008806:	4b3e      	ldr	r3, [pc, #248]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 8008808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800880a:	2202      	movs	r2, #2
 800880c:	4013      	ands	r3, r2
 800880e:	d101      	bne.n	8008814 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e06d      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008814:	4b3a      	ldr	r3, [pc, #232]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	2207      	movs	r2, #7
 800881a:	4393      	bics	r3, r2
 800881c:	0019      	movs	r1, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	4b37      	ldr	r3, [pc, #220]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 8008824:	430a      	orrs	r2, r1
 8008826:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008828:	f7fe fae0 	bl	8006dec <HAL_GetTick>
 800882c:	0003      	movs	r3, r0
 800882e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008830:	e009      	b.n	8008846 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008832:	f7fe fadb 	bl	8006dec <HAL_GetTick>
 8008836:	0002      	movs	r2, r0
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	4a2f      	ldr	r2, [pc, #188]	@ (80088fc <HAL_RCC_ClockConfig+0x1f4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e054      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008846:	4b2e      	ldr	r3, [pc, #184]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	2238      	movs	r2, #56	@ 0x38
 800884c:	401a      	ands	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	429a      	cmp	r2, r3
 8008856:	d1ec      	bne.n	8008832 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008858:	4b27      	ldr	r3, [pc, #156]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2207      	movs	r2, #7
 800885e:	4013      	ands	r3, r2
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d21e      	bcs.n	80088a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008866:	4b24      	ldr	r3, [pc, #144]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2207      	movs	r2, #7
 800886c:	4393      	bics	r3, r2
 800886e:	0019      	movs	r1, r3
 8008870:	4b21      	ldr	r3, [pc, #132]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008878:	f7fe fab8 	bl	8006dec <HAL_GetTick>
 800887c:	0003      	movs	r3, r0
 800887e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008880:	e009      	b.n	8008896 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008882:	f7fe fab3 	bl	8006dec <HAL_GetTick>
 8008886:	0002      	movs	r2, r0
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	4a1b      	ldr	r2, [pc, #108]	@ (80088fc <HAL_RCC_ClockConfig+0x1f4>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e02c      	b.n	80088f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008896:	4b18      	ldr	r3, [pc, #96]	@ (80088f8 <HAL_RCC_ClockConfig+0x1f0>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2207      	movs	r2, #7
 800889c:	4013      	ands	r3, r2
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d1ee      	bne.n	8008882 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2204      	movs	r2, #4
 80088aa:	4013      	ands	r3, r2
 80088ac:	d009      	beq.n	80088c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80088ae:	4b14      	ldr	r3, [pc, #80]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	4a15      	ldr	r2, [pc, #84]	@ (8008908 <HAL_RCC_ClockConfig+0x200>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	0019      	movs	r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	4b10      	ldr	r3, [pc, #64]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 80088be:	430a      	orrs	r2, r1
 80088c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80088c2:	f000 f829 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 80088c6:	0001      	movs	r1, r0
 80088c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008900 <HAL_RCC_ClockConfig+0x1f8>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	220f      	movs	r2, #15
 80088d0:	401a      	ands	r2, r3
 80088d2:	4b0e      	ldr	r3, [pc, #56]	@ (800890c <HAL_RCC_ClockConfig+0x204>)
 80088d4:	0092      	lsls	r2, r2, #2
 80088d6:	58d3      	ldr	r3, [r2, r3]
 80088d8:	221f      	movs	r2, #31
 80088da:	4013      	ands	r3, r2
 80088dc:	000a      	movs	r2, r1
 80088de:	40da      	lsrs	r2, r3
 80088e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <HAL_RCC_ClockConfig+0x208>)
 80088e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80088e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008914 <HAL_RCC_ClockConfig+0x20c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	0018      	movs	r0, r3
 80088ea:	f7fe fa23 	bl	8006d34 <HAL_InitTick>
 80088ee:	0003      	movs	r3, r0
}
 80088f0:	0018      	movs	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b004      	add	sp, #16
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	40022000 	.word	0x40022000
 80088fc:	00001388 	.word	0x00001388
 8008900:	40021000 	.word	0x40021000
 8008904:	fffff0ff 	.word	0xfffff0ff
 8008908:	ffff8fff 	.word	0xffff8fff
 800890c:	0800cfc8 	.word	0x0800cfc8
 8008910:	200009c8 	.word	0x200009c8
 8008914:	200009cc 	.word	0x200009cc

08008918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800891e:	4b3c      	ldr	r3, [pc, #240]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2238      	movs	r2, #56	@ 0x38
 8008924:	4013      	ands	r3, r2
 8008926:	d10f      	bne.n	8008948 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008928:	4b39      	ldr	r3, [pc, #228]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	0adb      	lsrs	r3, r3, #11
 800892e:	2207      	movs	r2, #7
 8008930:	4013      	ands	r3, r2
 8008932:	2201      	movs	r2, #1
 8008934:	409a      	lsls	r2, r3
 8008936:	0013      	movs	r3, r2
 8008938:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	4835      	ldr	r0, [pc, #212]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0xfc>)
 800893e:	f7f7 fbf5 	bl	800012c <__udivsi3>
 8008942:	0003      	movs	r3, r0
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	e05d      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008948:	4b31      	ldr	r3, [pc, #196]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	2238      	movs	r2, #56	@ 0x38
 800894e:	4013      	ands	r3, r2
 8008950:	2b08      	cmp	r3, #8
 8008952:	d102      	bne.n	800895a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008954:	4b30      	ldr	r3, [pc, #192]	@ (8008a18 <HAL_RCC_GetSysClockFreq+0x100>)
 8008956:	613b      	str	r3, [r7, #16]
 8008958:	e054      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800895a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2238      	movs	r2, #56	@ 0x38
 8008960:	4013      	ands	r3, r2
 8008962:	2b10      	cmp	r3, #16
 8008964:	d138      	bne.n	80089d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008966:	4b2a      	ldr	r3, [pc, #168]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	2203      	movs	r2, #3
 800896c:	4013      	ands	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008970:	4b27      	ldr	r3, [pc, #156]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	091b      	lsrs	r3, r3, #4
 8008976:	2207      	movs	r2, #7
 8008978:	4013      	ands	r3, r2
 800897a:	3301      	adds	r3, #1
 800897c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b03      	cmp	r3, #3
 8008982:	d10d      	bne.n	80089a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	4824      	ldr	r0, [pc, #144]	@ (8008a18 <HAL_RCC_GetSysClockFreq+0x100>)
 8008988:	f7f7 fbd0 	bl	800012c <__udivsi3>
 800898c:	0003      	movs	r3, r0
 800898e:	0019      	movs	r1, r3
 8008990:	4b1f      	ldr	r3, [pc, #124]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	0a1b      	lsrs	r3, r3, #8
 8008996:	227f      	movs	r2, #127	@ 0x7f
 8008998:	4013      	ands	r3, r2
 800899a:	434b      	muls	r3, r1
 800899c:	617b      	str	r3, [r7, #20]
        break;
 800899e:	e00d      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	481c      	ldr	r0, [pc, #112]	@ (8008a14 <HAL_RCC_GetSysClockFreq+0xfc>)
 80089a4:	f7f7 fbc2 	bl	800012c <__udivsi3>
 80089a8:	0003      	movs	r3, r0
 80089aa:	0019      	movs	r1, r3
 80089ac:	4b18      	ldr	r3, [pc, #96]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	0a1b      	lsrs	r3, r3, #8
 80089b2:	227f      	movs	r2, #127	@ 0x7f
 80089b4:	4013      	ands	r3, r2
 80089b6:	434b      	muls	r3, r1
 80089b8:	617b      	str	r3, [r7, #20]
        break;
 80089ba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80089bc:	4b14      	ldr	r3, [pc, #80]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	0f5b      	lsrs	r3, r3, #29
 80089c2:	2207      	movs	r2, #7
 80089c4:	4013      	ands	r3, r2
 80089c6:	3301      	adds	r3, #1
 80089c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	6978      	ldr	r0, [r7, #20]
 80089ce:	f7f7 fbad 	bl	800012c <__udivsi3>
 80089d2:	0003      	movs	r3, r0
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	e015      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80089d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2238      	movs	r2, #56	@ 0x38
 80089de:	4013      	ands	r3, r2
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d103      	bne.n	80089ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80089e4:	2380      	movs	r3, #128	@ 0x80
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	e00b      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80089ec:	4b08      	ldr	r3, [pc, #32]	@ (8008a10 <HAL_RCC_GetSysClockFreq+0xf8>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2238      	movs	r2, #56	@ 0x38
 80089f2:	4013      	ands	r3, r2
 80089f4:	2b18      	cmp	r3, #24
 80089f6:	d103      	bne.n	8008a00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80089f8:	23fa      	movs	r3, #250	@ 0xfa
 80089fa:	01db      	lsls	r3, r3, #7
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	e001      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008a04:	693b      	ldr	r3, [r7, #16]
}
 8008a06:	0018      	movs	r0, r3
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	b006      	add	sp, #24
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	46c0      	nop			@ (mov r8, r8)
 8008a10:	40021000 	.word	0x40021000
 8008a14:	00f42400 	.word	0x00f42400
 8008a18:	007a1200 	.word	0x007a1200

08008a1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a20:	4b02      	ldr	r3, [pc, #8]	@ (8008a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8008a22:	681b      	ldr	r3, [r3, #0]
}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	46c0      	nop			@ (mov r8, r8)
 8008a2c:	200009c8 	.word	0x200009c8

08008a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a30:	b5b0      	push	{r4, r5, r7, lr}
 8008a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008a34:	f7ff fff2 	bl	8008a1c <HAL_RCC_GetHCLKFreq>
 8008a38:	0004      	movs	r4, r0
 8008a3a:	f7ff faf9 	bl	8008030 <LL_RCC_GetAPB1Prescaler>
 8008a3e:	0003      	movs	r3, r0
 8008a40:	0b1a      	lsrs	r2, r3, #12
 8008a42:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a44:	0092      	lsls	r2, r2, #2
 8008a46:	58d3      	ldr	r3, [r2, r3]
 8008a48:	221f      	movs	r2, #31
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	40dc      	lsrs	r4, r3
 8008a4e:	0023      	movs	r3, r4
}
 8008a50:	0018      	movs	r0, r3
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bdb0      	pop	{r4, r5, r7, pc}
 8008a56:	46c0      	nop			@ (mov r8, r8)
 8008a58:	0800d008 	.word	0x0800d008

08008a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008a64:	2313      	movs	r3, #19
 8008a66:	18fb      	adds	r3, r7, r3
 8008a68:	2200      	movs	r2, #0
 8008a6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a6c:	2312      	movs	r3, #18
 8008a6e:	18fb      	adds	r3, r7, r3
 8008a70:	2200      	movs	r2, #0
 8008a72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	2380      	movs	r3, #128	@ 0x80
 8008a7a:	029b      	lsls	r3, r3, #10
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d100      	bne.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008a80:	e0ad      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a82:	2011      	movs	r0, #17
 8008a84:	183b      	adds	r3, r7, r0
 8008a86:	2200      	movs	r2, #0
 8008a88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a8a:	4b47      	ldr	r3, [pc, #284]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a8e:	2380      	movs	r3, #128	@ 0x80
 8008a90:	055b      	lsls	r3, r3, #21
 8008a92:	4013      	ands	r3, r2
 8008a94:	d110      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a96:	4b44      	ldr	r3, [pc, #272]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a9a:	4b43      	ldr	r3, [pc, #268]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008a9c:	2180      	movs	r1, #128	@ 0x80
 8008a9e:	0549      	lsls	r1, r1, #21
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008aa4:	4b40      	ldr	r3, [pc, #256]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008aa8:	2380      	movs	r3, #128	@ 0x80
 8008aaa:	055b      	lsls	r3, r3, #21
 8008aac:	4013      	ands	r3, r2
 8008aae:	60bb      	str	r3, [r7, #8]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ab2:	183b      	adds	r3, r7, r0
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ab8:	4b3c      	ldr	r3, [pc, #240]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	4b3b      	ldr	r3, [pc, #236]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008abe:	2180      	movs	r1, #128	@ 0x80
 8008ac0:	0049      	lsls	r1, r1, #1
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ac6:	f7fe f991 	bl	8006dec <HAL_GetTick>
 8008aca:	0003      	movs	r3, r0
 8008acc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ace:	e00b      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ad0:	f7fe f98c 	bl	8006dec <HAL_GetTick>
 8008ad4:	0002      	movs	r2, r0
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d904      	bls.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008ade:	2313      	movs	r3, #19
 8008ae0:	18fb      	adds	r3, r7, r3
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	701a      	strb	r2, [r3, #0]
        break;
 8008ae6:	e005      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ae8:	4b30      	ldr	r3, [pc, #192]	@ (8008bac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	2380      	movs	r3, #128	@ 0x80
 8008aee:	005b      	lsls	r3, r3, #1
 8008af0:	4013      	ands	r3, r2
 8008af2:	d0ed      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008af4:	2313      	movs	r3, #19
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d15e      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008afe:	4b2a      	ldr	r3, [pc, #168]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b02:	23c0      	movs	r3, #192	@ 0xc0
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4013      	ands	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d019      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d014      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b1a:	4b23      	ldr	r3, [pc, #140]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b1e:	4a24      	ldr	r2, [pc, #144]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b24:	4b20      	ldr	r3, [pc, #128]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b28:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b2a:	2180      	movs	r1, #128	@ 0x80
 8008b2c:	0249      	lsls	r1, r1, #9
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b32:	4b1d      	ldr	r3, [pc, #116]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008b36:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b38:	491e      	ldr	r1, [pc, #120]	@ (8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8008b3a:	400a      	ands	r2, r1
 8008b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2201      	movs	r2, #1
 8008b48:	4013      	ands	r3, r2
 8008b4a:	d016      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b4c:	f7fe f94e 	bl	8006dec <HAL_GetTick>
 8008b50:	0003      	movs	r3, r0
 8008b52:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b54:	e00c      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b56:	f7fe f949 	bl	8006dec <HAL_GetTick>
 8008b5a:	0002      	movs	r2, r0
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	4a15      	ldr	r2, [pc, #84]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d904      	bls.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008b66:	2313      	movs	r3, #19
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	701a      	strb	r2, [r3, #0]
            break;
 8008b6e:	e004      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b70:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b74:	2202      	movs	r2, #2
 8008b76:	4013      	ands	r3, r2
 8008b78:	d0ed      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008b7a:	2313      	movs	r3, #19
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b84:	4b08      	ldr	r3, [pc, #32]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b88:	4a09      	ldr	r2, [pc, #36]	@ (8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	0019      	movs	r1, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b92:	4b05      	ldr	r3, [pc, #20]	@ (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8008b94:	430a      	orrs	r2, r1
 8008b96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008b98:	e016      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b9a:	2312      	movs	r3, #18
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	2213      	movs	r2, #19
 8008ba0:	18ba      	adds	r2, r7, r2
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	e00f      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	40007000 	.word	0x40007000
 8008bb0:	fffffcff 	.word	0xfffffcff
 8008bb4:	fffeffff 	.word	0xfffeffff
 8008bb8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbc:	2312      	movs	r3, #18
 8008bbe:	18fb      	adds	r3, r7, r3
 8008bc0:	2213      	movs	r2, #19
 8008bc2:	18ba      	adds	r2, r7, r2
 8008bc4:	7812      	ldrb	r2, [r2, #0]
 8008bc6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bc8:	2311      	movs	r3, #17
 8008bca:	18fb      	adds	r3, r7, r3
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d105      	bne.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bd2:	4bb6      	ldr	r3, [pc, #728]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bd6:	4bb5      	ldr	r3, [pc, #724]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bd8:	49b5      	ldr	r1, [pc, #724]	@ (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8008bda:	400a      	ands	r2, r1
 8008bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2201      	movs	r2, #1
 8008be4:	4013      	ands	r3, r2
 8008be6:	d009      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008be8:	4bb0      	ldr	r3, [pc, #704]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bec:	2203      	movs	r2, #3
 8008bee:	4393      	bics	r3, r2
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	4bad      	ldr	r3, [pc, #692]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2202      	movs	r2, #2
 8008c02:	4013      	ands	r3, r2
 8008c04:	d009      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c06:	4ba9      	ldr	r3, [pc, #676]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0a:	220c      	movs	r2, #12
 8008c0c:	4393      	bics	r3, r2
 8008c0e:	0019      	movs	r1, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	4ba5      	ldr	r3, [pc, #660]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c16:	430a      	orrs	r2, r1
 8008c18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2204      	movs	r2, #4
 8008c20:	4013      	ands	r3, r2
 8008c22:	d009      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c24:	4ba1      	ldr	r3, [pc, #644]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c28:	2230      	movs	r2, #48	@ 0x30
 8008c2a:	4393      	bics	r3, r2
 8008c2c:	0019      	movs	r1, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	4b9e      	ldr	r3, [pc, #632]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c34:	430a      	orrs	r2, r1
 8008c36:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2210      	movs	r2, #16
 8008c3e:	4013      	ands	r3, r2
 8008c40:	d009      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c42:	4b9a      	ldr	r3, [pc, #616]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c46:	4a9b      	ldr	r2, [pc, #620]	@ (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	4b96      	ldr	r3, [pc, #600]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c52:	430a      	orrs	r2, r1
 8008c54:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	2380      	movs	r3, #128	@ 0x80
 8008c5c:	015b      	lsls	r3, r3, #5
 8008c5e:	4013      	ands	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8008c62:	4b92      	ldr	r3, [pc, #584]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c66:	4a94      	ldr	r2, [pc, #592]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008c68:	4013      	ands	r3, r2
 8008c6a:	0019      	movs	r1, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	4b8e      	ldr	r3, [pc, #568]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c72:	430a      	orrs	r2, r1
 8008c74:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	2380      	movs	r3, #128	@ 0x80
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4013      	ands	r3, r2
 8008c80:	d009      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c82:	4b8a      	ldr	r3, [pc, #552]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c86:	4a8d      	ldr	r2, [pc, #564]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	0019      	movs	r1, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c90:	4b86      	ldr	r3, [pc, #536]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008c92:	430a      	orrs	r2, r1
 8008c94:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	2380      	movs	r3, #128	@ 0x80
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	d009      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ca2:	4b82      	ldr	r3, [pc, #520]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca6:	4a86      	ldr	r2, [pc, #536]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	0019      	movs	r1, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	d009      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008cc0:	4b7a      	ldr	r3, [pc, #488]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc4:	4a7f      	ldr	r2, [pc, #508]	@ (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	0019      	movs	r1, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699a      	ldr	r2, [r3, #24]
 8008cce:	4b77      	ldr	r3, [pc, #476]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2240      	movs	r2, #64	@ 0x40
 8008cda:	4013      	ands	r3, r2
 8008cdc:	d009      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008cde:	4b73      	ldr	r3, [pc, #460]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce2:	4a79      	ldr	r2, [pc, #484]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	0019      	movs	r1, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69da      	ldr	r2, [r3, #28]
 8008cec:	4b6f      	ldr	r3, [pc, #444]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	2380      	movs	r3, #128	@ 0x80
 8008cf8:	01db      	lsls	r3, r3, #7
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	d015      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	0899      	lsrs	r1, r3, #2
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d0a:	4b68      	ldr	r3, [pc, #416]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d14:	2380      	movs	r3, #128	@ 0x80
 8008d16:	05db      	lsls	r3, r3, #23
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d106      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008d1c:	4b63      	ldr	r3, [pc, #396]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	4b62      	ldr	r3, [pc, #392]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d22:	2180      	movs	r1, #128	@ 0x80
 8008d24:	0249      	lsls	r1, r1, #9
 8008d26:	430a      	orrs	r2, r1
 8008d28:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	2380      	movs	r3, #128	@ 0x80
 8008d30:	031b      	lsls	r3, r3, #12
 8008d32:	4013      	ands	r3, r2
 8008d34:	d009      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d36:	4b5d      	ldr	r3, [pc, #372]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d3a:	2240      	movs	r2, #64	@ 0x40
 8008d3c:	4393      	bics	r3, r2
 8008d3e:	0019      	movs	r1, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d44:	4b59      	ldr	r3, [pc, #356]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d46:	430a      	orrs	r2, r1
 8008d48:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	2380      	movs	r3, #128	@ 0x80
 8008d50:	039b      	lsls	r3, r3, #14
 8008d52:	4013      	ands	r3, r2
 8008d54:	d016      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008d56:	4b55      	ldr	r3, [pc, #340]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8008ecc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	0019      	movs	r1, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d64:	4b51      	ldr	r3, [pc, #324]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d66:	430a      	orrs	r2, r1
 8008d68:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d6e:	2380      	movs	r3, #128	@ 0x80
 8008d70:	03db      	lsls	r3, r3, #15
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d106      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008d76:	4b4d      	ldr	r3, [pc, #308]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	4b4c      	ldr	r3, [pc, #304]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d7c:	2180      	movs	r1, #128	@ 0x80
 8008d7e:	0449      	lsls	r1, r1, #17
 8008d80:	430a      	orrs	r2, r1
 8008d82:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	2380      	movs	r3, #128	@ 0x80
 8008d8a:	03db      	lsls	r3, r3, #15
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	d016      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008d90:	4b46      	ldr	r3, [pc, #280]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d94:	4a4e      	ldr	r2, [pc, #312]	@ (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	0019      	movs	r1, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d9e:	4b43      	ldr	r3, [pc, #268]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008da0:	430a      	orrs	r2, r1
 8008da2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008da8:	2380      	movs	r3, #128	@ 0x80
 8008daa:	045b      	lsls	r3, r3, #17
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d106      	bne.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008db0:	4b3e      	ldr	r3, [pc, #248]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	4b3d      	ldr	r3, [pc, #244]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008db6:	2180      	movs	r1, #128	@ 0x80
 8008db8:	0449      	lsls	r1, r1, #17
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	2380      	movs	r3, #128	@ 0x80
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	d014      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008dca:	4b38      	ldr	r3, [pc, #224]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dce:	2203      	movs	r2, #3
 8008dd0:	4393      	bics	r3, r2
 8008dd2:	0019      	movs	r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a1a      	ldr	r2, [r3, #32]
 8008dd8:	4b34      	ldr	r3, [pc, #208]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d106      	bne.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008de6:	4b31      	ldr	r3, [pc, #196]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	4b30      	ldr	r3, [pc, #192]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dec:	2180      	movs	r1, #128	@ 0x80
 8008dee:	0249      	lsls	r1, r1, #9
 8008df0:	430a      	orrs	r2, r1
 8008df2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	2380      	movs	r3, #128	@ 0x80
 8008dfa:	019b      	lsls	r3, r3, #6
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	d014      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008e00:	4b2a      	ldr	r3, [pc, #168]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e04:	220c      	movs	r2, #12
 8008e06:	4393      	bics	r3, r2
 8008e08:	0019      	movs	r1, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e0e:	4b27      	ldr	r3, [pc, #156]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e10:	430a      	orrs	r2, r1
 8008e12:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d106      	bne.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008e1c:	4b23      	ldr	r3, [pc, #140]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	4b22      	ldr	r3, [pc, #136]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e22:	2180      	movs	r1, #128	@ 0x80
 8008e24:	0249      	lsls	r1, r1, #9
 8008e26:	430a      	orrs	r2, r1
 8008e28:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	2380      	movs	r3, #128	@ 0x80
 8008e30:	045b      	lsls	r3, r3, #17
 8008e32:	4013      	ands	r3, r2
 8008e34:	d016      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e36:	4b1d      	ldr	r3, [pc, #116]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3a:	4a22      	ldr	r2, [pc, #136]	@ (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	0019      	movs	r1, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e44:	4b19      	ldr	r3, [pc, #100]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e46:	430a      	orrs	r2, r1
 8008e48:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e4e:	2380      	movs	r3, #128	@ 0x80
 8008e50:	019b      	lsls	r3, r3, #6
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d106      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008e56:	4b15      	ldr	r3, [pc, #84]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e5c:	2180      	movs	r1, #128	@ 0x80
 8008e5e:	0449      	lsls	r1, r1, #17
 8008e60:	430a      	orrs	r2, r1
 8008e62:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	2380      	movs	r3, #128	@ 0x80
 8008e6a:	049b      	lsls	r3, r3, #18
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	d016      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e70:	4b0e      	ldr	r3, [pc, #56]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e74:	4a10      	ldr	r2, [pc, #64]	@ (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	0019      	movs	r1, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e80:	430a      	orrs	r2, r1
 8008e82:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e88:	2380      	movs	r3, #128	@ 0x80
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d106      	bne.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008e90:	4b06      	ldr	r3, [pc, #24]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e92:	68da      	ldr	r2, [r3, #12]
 8008e94:	4b05      	ldr	r3, [pc, #20]	@ (8008eac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e96:	2180      	movs	r1, #128	@ 0x80
 8008e98:	0449      	lsls	r1, r1, #17
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008e9e:	2312      	movs	r3, #18
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	781b      	ldrb	r3, [r3, #0]
}
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	b006      	add	sp, #24
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	efffffff 	.word	0xefffffff
 8008eb4:	fffff3ff 	.word	0xfffff3ff
 8008eb8:	fffffcff 	.word	0xfffffcff
 8008ebc:	fff3ffff 	.word	0xfff3ffff
 8008ec0:	ffcfffff 	.word	0xffcfffff
 8008ec4:	ffffcfff 	.word	0xffffcfff
 8008ec8:	ffff3fff 	.word	0xffff3fff
 8008ecc:	ffbfffff 	.word	0xffbfffff
 8008ed0:	feffffff 	.word	0xfeffffff

08008ed4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008ed4:	b590      	push	{r4, r7, lr}
 8008ed6:	b089      	sub	sp, #36	@ 0x24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2228      	movs	r2, #40	@ 0x28
 8008ee4:	5c9b      	ldrb	r3, [r3, r2]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d101      	bne.n	8008eee <HAL_RTC_SetAlarm_IT+0x1a>
 8008eea:	2302      	movs	r3, #2
 8008eec:	e127      	b.n	800913e <HAL_RTC_SetAlarm_IT+0x26a>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2228      	movs	r2, #40	@ 0x28
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2229      	movs	r2, #41	@ 0x29
 8008efa:	2102      	movs	r1, #2
 8008efc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d136      	bne.n	8008f72 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	2240      	movs	r2, #64	@ 0x40
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	d102      	bne.n	8008f16 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f000 fa1e 	bl	800935c <RTC_ByteToBcd2>
 8008f20:	0003      	movs	r3, r0
 8008f22:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	0018      	movs	r0, r3
 8008f2a:	f000 fa17 	bl	800935c <RTC_ByteToBcd2>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f32:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	789b      	ldrb	r3, [r3, #2]
 8008f38:	0018      	movs	r0, r3
 8008f3a:	f000 fa0f 	bl	800935c <RTC_ByteToBcd2>
 8008f3e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f40:	0022      	movs	r2, r4
 8008f42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	78db      	ldrb	r3, [r3, #3]
 8008f48:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2220      	movs	r2, #32
 8008f52:	5c9b      	ldrb	r3, [r3, r2]
 8008f54:	0018      	movs	r0, r3
 8008f56:	f000 fa01 	bl	800935c <RTC_ByteToBcd2>
 8008f5a:	0003      	movs	r3, r0
 8008f5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008f5e:	0022      	movs	r2, r4
 8008f60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008f66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	61fb      	str	r3, [r7, #28]
 8008f70:	e022      	b.n	8008fb8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2240      	movs	r2, #64	@ 0x40
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	d102      	bne.n	8008f84 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f90:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	78db      	ldrb	r3, [r3, #3]
 8008f9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008f9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2120      	movs	r1, #32
 8008fa4:	5c5b      	ldrb	r3, [r3, r1]
 8008fa6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008fa8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008fae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	22ca      	movs	r2, #202	@ 0xca
 8008fca:	625a      	str	r2, [r3, #36]	@ 0x24
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2253      	movs	r2, #83	@ 0x53
 8008fd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fd8:	2380      	movs	r3, #128	@ 0x80
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d14c      	bne.n	800907a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	699a      	ldr	r2, [r3, #24]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4957      	ldr	r1, [pc, #348]	@ (8009148 <HAL_RTC_SetAlarm_IT+0x274>)
 8008fec:	400a      	ands	r2, r1
 8008fee:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8009000:	f7fd fef4 	bl	8006dec <HAL_GetTick>
 8009004:	0003      	movs	r3, r0
 8009006:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009008:	e016      	b.n	8009038 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800900a:	f7fd feef 	bl	8006dec <HAL_GetTick>
 800900e:	0002      	movs	r2, r0
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	1ad2      	subs	r2, r2, r3
 8009014:	23fa      	movs	r3, #250	@ 0xfa
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	429a      	cmp	r2, r3
 800901a:	d90d      	bls.n	8009038 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	22ff      	movs	r2, #255	@ 0xff
 8009022:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2229      	movs	r2, #41	@ 0x29
 8009028:	2103      	movs	r1, #3
 800902a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2228      	movs	r2, #40	@ 0x28
 8009030:	2100      	movs	r1, #0
 8009032:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e082      	b.n	800913e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	4013      	ands	r3, r2
 8009042:	d0e2      	beq.n	800900a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	699a      	ldr	r2, [r3, #24]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2180      	movs	r1, #128	@ 0x80
 8009060:	0049      	lsls	r1, r1, #1
 8009062:	430a      	orrs	r2, r1
 8009064:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	699a      	ldr	r2, [r3, #24]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2180      	movs	r1, #128	@ 0x80
 8009072:	0149      	lsls	r1, r1, #5
 8009074:	430a      	orrs	r2, r1
 8009076:	619a      	str	r2, [r3, #24]
 8009078:	e04b      	b.n	8009112 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	699a      	ldr	r2, [r3, #24]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4931      	ldr	r1, [pc, #196]	@ (800914c <HAL_RTC_SetAlarm_IT+0x278>)
 8009086:	400a      	ands	r2, r1
 8009088:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2102      	movs	r1, #2
 8009096:	430a      	orrs	r2, r1
 8009098:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800909a:	f7fd fea7 	bl	8006dec <HAL_GetTick>
 800909e:	0003      	movs	r3, r0
 80090a0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80090a2:	e016      	b.n	80090d2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090a4:	f7fd fea2 	bl	8006dec <HAL_GetTick>
 80090a8:	0002      	movs	r2, r0
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	1ad2      	subs	r2, r2, r3
 80090ae:	23fa      	movs	r3, #250	@ 0xfa
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d90d      	bls.n	80090d2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	22ff      	movs	r2, #255	@ 0xff
 80090bc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2229      	movs	r2, #41	@ 0x29
 80090c2:	2103      	movs	r1, #3
 80090c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2228      	movs	r2, #40	@ 0x28
 80090ca:	2100      	movs	r1, #0
 80090cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e035      	b.n	800913e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2202      	movs	r2, #2
 80090da:	4013      	ands	r3, r2
 80090dc:	d0e2      	beq.n	80090a4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	699a      	ldr	r2, [r3, #24]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2180      	movs	r1, #128	@ 0x80
 80090fa:	0089      	lsls	r1, r1, #2
 80090fc:	430a      	orrs	r2, r1
 80090fe:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699a      	ldr	r2, [r3, #24]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2180      	movs	r1, #128	@ 0x80
 800910c:	0189      	lsls	r1, r1, #6
 800910e:	430a      	orrs	r2, r1
 8009110:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009112:	4a0f      	ldr	r2, [pc, #60]	@ (8009150 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009114:	2380      	movs	r3, #128	@ 0x80
 8009116:	58d3      	ldr	r3, [r2, r3]
 8009118:	490d      	ldr	r1, [pc, #52]	@ (8009150 <HAL_RTC_SetAlarm_IT+0x27c>)
 800911a:	2280      	movs	r2, #128	@ 0x80
 800911c:	0312      	lsls	r2, r2, #12
 800911e:	4313      	orrs	r3, r2
 8009120:	2280      	movs	r2, #128	@ 0x80
 8009122:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	22ff      	movs	r2, #255	@ 0xff
 800912a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2229      	movs	r2, #41	@ 0x29
 8009130:	2101      	movs	r1, #1
 8009132:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2228      	movs	r2, #40	@ 0x28
 8009138:	2100      	movs	r1, #0
 800913a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	0018      	movs	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	b009      	add	sp, #36	@ 0x24
 8009144:	bd90      	pop	{r4, r7, pc}
 8009146:	46c0      	nop			@ (mov r8, r8)
 8009148:	fffffeff 	.word	0xfffffeff
 800914c:	fffffdff 	.word	0xfffffdff
 8009150:	40021800 	.word	0x40021800

08009154 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	2380      	movs	r3, #128	@ 0x80
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	429a      	cmp	r2, r3
 800916a:	d144      	bne.n	80091f6 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2280      	movs	r2, #128	@ 0x80
 8009170:	0052      	lsls	r2, r2, #1
 8009172:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009182:	045b      	lsls	r3, r3, #17
 8009184:	0c5b      	lsrs	r3, r3, #17
 8009186:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	0c1b      	lsrs	r3, r3, #16
 800918c:	b2db      	uxtb	r3, r3
 800918e:	223f      	movs	r2, #63	@ 0x3f
 8009190:	4013      	ands	r3, r2
 8009192:	b2da      	uxtb	r2, r3
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	b2db      	uxtb	r3, r3
 800919e:	227f      	movs	r2, #127	@ 0x7f
 80091a0:	4013      	ands	r3, r2
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	227f      	movs	r2, #127	@ 0x7f
 80091ae:	4013      	ands	r3, r2
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	0d9b      	lsrs	r3, r3, #22
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2201      	movs	r2, #1
 80091be:	4013      	ands	r3, r2
 80091c0:	b2da      	uxtb	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	0e1b      	lsrs	r3, r3, #24
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	223f      	movs	r2, #63	@ 0x3f
 80091d4:	4013      	ands	r3, r2
 80091d6:	b2d9      	uxtb	r1, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2220      	movs	r2, #32
 80091dc:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	2380      	movs	r3, #128	@ 0x80
 80091e2:	05db      	lsls	r3, r3, #23
 80091e4:	401a      	ands	r2, r3
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	4a3b      	ldr	r2, [pc, #236]	@ (80092dc <HAL_RTC_GetAlarm+0x188>)
 80091ee:	401a      	ands	r2, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	615a      	str	r2, [r3, #20]
 80091f4:	e043      	b.n	800927e <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2280      	movs	r2, #128	@ 0x80
 80091fa:	0092      	lsls	r2, r2, #2
 80091fc:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009204:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800920c:	045b      	lsls	r3, r3, #17
 800920e:	0c5b      	lsrs	r3, r3, #17
 8009210:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	0c1b      	lsrs	r3, r3, #16
 8009216:	b2db      	uxtb	r3, r3
 8009218:	223f      	movs	r2, #63	@ 0x3f
 800921a:	4013      	ands	r3, r2
 800921c:	b2da      	uxtb	r2, r3
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	0a1b      	lsrs	r3, r3, #8
 8009226:	b2db      	uxtb	r3, r3
 8009228:	227f      	movs	r2, #127	@ 0x7f
 800922a:	4013      	ands	r3, r2
 800922c:	b2da      	uxtb	r2, r3
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	b2db      	uxtb	r3, r3
 8009236:	227f      	movs	r2, #127	@ 0x7f
 8009238:	4013      	ands	r3, r2
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	0d9b      	lsrs	r3, r3, #22
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2201      	movs	r2, #1
 8009248:	4013      	ands	r3, r2
 800924a:	b2da      	uxtb	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	0e1b      	lsrs	r3, r3, #24
 800925a:	b2db      	uxtb	r3, r3
 800925c:	223f      	movs	r2, #63	@ 0x3f
 800925e:	4013      	ands	r3, r2
 8009260:	b2d9      	uxtb	r1, r3
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2220      	movs	r2, #32
 8009266:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	2380      	movs	r3, #128	@ 0x80
 800926c:	05db      	lsls	r3, r3, #23
 800926e:	401a      	ands	r2, r3
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	4a19      	ldr	r2, [pc, #100]	@ (80092dc <HAL_RTC_GetAlarm+0x188>)
 8009278:	401a      	ands	r2, r3
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d125      	bne.n	80092d0 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	0018      	movs	r0, r3
 800928a:	f000 f88f 	bl	80093ac <RTC_Bcd2ToByte>
 800928e:	0003      	movs	r3, r0
 8009290:	001a      	movs	r2, r3
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	0018      	movs	r0, r3
 800929c:	f000 f886 	bl	80093ac <RTC_Bcd2ToByte>
 80092a0:	0003      	movs	r3, r0
 80092a2:	001a      	movs	r2, r3
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	789b      	ldrb	r3, [r3, #2]
 80092ac:	0018      	movs	r0, r3
 80092ae:	f000 f87d 	bl	80093ac <RTC_Bcd2ToByte>
 80092b2:	0003      	movs	r3, r0
 80092b4:	001a      	movs	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2220      	movs	r2, #32
 80092be:	5c9b      	ldrb	r3, [r3, r2]
 80092c0:	0018      	movs	r0, r3
 80092c2:	f000 f873 	bl	80093ac <RTC_Bcd2ToByte>
 80092c6:	0003      	movs	r3, r0
 80092c8:	0019      	movs	r1, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2220      	movs	r2, #32
 80092ce:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	0018      	movs	r0, r3
 80092d4:	46bd      	mov	sp, r7
 80092d6:	b006      	add	sp, #24
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	46c0      	nop			@ (mov r8, r8)
 80092dc:	80808080 	.word	0x80808080

080092e0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	2380      	movs	r3, #128	@ 0x80
 80092f0:	015b      	lsls	r3, r3, #5
 80092f2:	4013      	ands	r3, r2
 80092f4:	d011      	beq.n	800931a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092fc:	2201      	movs	r2, #1
 80092fe:	4013      	ands	r3, r2
 8009300:	d00b      	beq.n	800931a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2101      	movs	r1, #1
 800930e:	430a      	orrs	r2, r1
 8009310:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	0018      	movs	r0, r3
 8009316:	f7fc fdd3 	bl	8005ec0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	699a      	ldr	r2, [r3, #24]
 8009320:	2380      	movs	r3, #128	@ 0x80
 8009322:	019b      	lsls	r3, r3, #6
 8009324:	4013      	ands	r3, r2
 8009326:	d011      	beq.n	800934c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932e:	2202      	movs	r2, #2
 8009330:	4013      	ands	r3, r2
 8009332:	d00b      	beq.n	800934c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2102      	movs	r1, #2
 8009340:	430a      	orrs	r2, r1
 8009342:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	0018      	movs	r0, r3
 8009348:	f000 f873 	bl	8009432 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2229      	movs	r2, #41	@ 0x29
 8009350:	2101      	movs	r1, #1
 8009352:	5499      	strb	r1, [r3, r2]
}
 8009354:	46c0      	nop			@ (mov r8, r8)
 8009356:	46bd      	mov	sp, r7
 8009358:	b002      	add	sp, #8
 800935a:	bd80      	pop	{r7, pc}

0800935c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	0002      	movs	r2, r0
 8009364:	1dfb      	adds	r3, r7, #7
 8009366:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800936c:	230b      	movs	r3, #11
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	1dfa      	adds	r2, r7, #7
 8009372:	7812      	ldrb	r2, [r2, #0]
 8009374:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8009376:	e008      	b.n	800938a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3301      	adds	r3, #1
 800937c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800937e:	220b      	movs	r2, #11
 8009380:	18bb      	adds	r3, r7, r2
 8009382:	18ba      	adds	r2, r7, r2
 8009384:	7812      	ldrb	r2, [r2, #0]
 8009386:	3a0a      	subs	r2, #10
 8009388:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800938a:	210b      	movs	r1, #11
 800938c:	187b      	adds	r3, r7, r1
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	2b09      	cmp	r3, #9
 8009392:	d8f1      	bhi.n	8009378 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	011b      	lsls	r3, r3, #4
 800939a:	b2da      	uxtb	r2, r3
 800939c:	187b      	adds	r3, r7, r1
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	b2db      	uxtb	r3, r3
}
 80093a4:	0018      	movs	r0, r3
 80093a6:	46bd      	mov	sp, r7
 80093a8:	b004      	add	sp, #16
 80093aa:	bd80      	pop	{r7, pc}

080093ac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	0002      	movs	r2, r0
 80093b4:	1dfb      	adds	r3, r7, #7
 80093b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80093b8:	1dfb      	adds	r3, r7, #7
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	091b      	lsrs	r3, r3, #4
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	001a      	movs	r2, r3
 80093c2:	0013      	movs	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	189b      	adds	r3, r3, r2
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	1dfb      	adds	r3, r7, #7
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	210f      	movs	r1, #15
 80093d6:	400b      	ands	r3, r1
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	18d3      	adds	r3, r2, r3
 80093dc:	b2db      	uxtb	r3, r3
}
 80093de:	0018      	movs	r0, r3
 80093e0:	46bd      	mov	sp, r7
 80093e2:	b004      	add	sp, #16
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f4:	2204      	movs	r2, #4
 80093f6:	4013      	ands	r3, r2
 80093f8:	d00b      	beq.n	8009412 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2104      	movs	r1, #4
 8009406:	430a      	orrs	r2, r1
 8009408:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	0018      	movs	r0, r3
 800940e:	f000 f808 	bl	8009422 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2229      	movs	r2, #41	@ 0x29
 8009416:	2101      	movs	r1, #1
 8009418:	5499      	strb	r1, [r3, r2]
}
 800941a:	46c0      	nop			@ (mov r8, r8)
 800941c:	46bd      	mov	sp, r7
 800941e:	b002      	add	sp, #8
 8009420:	bd80      	pop	{r7, pc}

08009422 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800942a:	46c0      	nop			@ (mov r8, r8)
 800942c:	46bd      	mov	sp, r7
 800942e:	b002      	add	sp, #8
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800943a:	46c0      	nop			@ (mov r8, r8)
 800943c:	46bd      	mov	sp, r7
 800943e:	b002      	add	sp, #8
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e0a8      	b.n	80095a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	2382      	movs	r3, #130	@ 0x82
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	429a      	cmp	r2, r3
 8009468:	d009      	beq.n	800947e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	61da      	str	r2, [r3, #28]
 8009470:	e005      	b.n	800947e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	225d      	movs	r2, #93	@ 0x5d
 8009488:	5c9b      	ldrb	r3, [r3, r2]
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b00      	cmp	r3, #0
 800948e:	d107      	bne.n	80094a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	225c      	movs	r2, #92	@ 0x5c
 8009494:	2100      	movs	r1, #0
 8009496:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	0018      	movs	r0, r3
 800949c:	f7fd fa26 	bl	80068ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	225d      	movs	r2, #93	@ 0x5d
 80094a4:	2102      	movs	r1, #2
 80094a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2140      	movs	r1, #64	@ 0x40
 80094b4:	438a      	bics	r2, r1
 80094b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	23e0      	movs	r3, #224	@ 0xe0
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d902      	bls.n	80094ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	e002      	b.n	80094d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80094ca:	2380      	movs	r3, #128	@ 0x80
 80094cc:	015b      	lsls	r3, r3, #5
 80094ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68da      	ldr	r2, [r3, #12]
 80094d4:	23f0      	movs	r3, #240	@ 0xf0
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	429a      	cmp	r2, r3
 80094da:	d008      	beq.n	80094ee <HAL_SPI_Init+0xaa>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68da      	ldr	r2, [r3, #12]
 80094e0:	23e0      	movs	r3, #224	@ 0xe0
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d002      	beq.n	80094ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	2382      	movs	r3, #130	@ 0x82
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	401a      	ands	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6899      	ldr	r1, [r3, #8]
 80094fc:	2384      	movs	r3, #132	@ 0x84
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	400b      	ands	r3, r1
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	2102      	movs	r1, #2
 800950a:	400b      	ands	r3, r1
 800950c:	431a      	orrs	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	2101      	movs	r1, #1
 8009514:	400b      	ands	r3, r1
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6999      	ldr	r1, [r3, #24]
 800951c:	2380      	movs	r3, #128	@ 0x80
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	400b      	ands	r3, r1
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	2138      	movs	r1, #56	@ 0x38
 800952a:	400b      	ands	r3, r1
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	2180      	movs	r1, #128	@ 0x80
 8009534:	400b      	ands	r3, r1
 8009536:	431a      	orrs	r2, r3
 8009538:	0011      	movs	r1, r2
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800953e:	2380      	movs	r3, #128	@ 0x80
 8009540:	019b      	lsls	r3, r3, #6
 8009542:	401a      	ands	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	0c1b      	lsrs	r3, r3, #16
 8009552:	2204      	movs	r2, #4
 8009554:	401a      	ands	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955a:	2110      	movs	r1, #16
 800955c:	400b      	ands	r3, r1
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009564:	2108      	movs	r1, #8
 8009566:	400b      	ands	r3, r1
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68d9      	ldr	r1, [r3, #12]
 800956e:	23f0      	movs	r3, #240	@ 0xf0
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	400b      	ands	r3, r1
 8009574:	431a      	orrs	r2, r3
 8009576:	0011      	movs	r1, r2
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	2380      	movs	r3, #128	@ 0x80
 800957c:	015b      	lsls	r3, r3, #5
 800957e:	401a      	ands	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	430a      	orrs	r2, r1
 8009586:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	69da      	ldr	r2, [r3, #28]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4907      	ldr	r1, [pc, #28]	@ (80095b0 <HAL_SPI_Init+0x16c>)
 8009594:	400a      	ands	r2, r1
 8009596:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	225d      	movs	r2, #93	@ 0x5d
 80095a2:	2101      	movs	r1, #1
 80095a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	0018      	movs	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	b004      	add	sp, #16
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	fffff7ff 	.word	0xfffff7ff

080095b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	1dbb      	adds	r3, r7, #6
 80095c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095c4:	231f      	movs	r3, #31
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	2200      	movs	r2, #0
 80095ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	225c      	movs	r2, #92	@ 0x5c
 80095d0:	5c9b      	ldrb	r3, [r3, r2]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <HAL_SPI_Transmit+0x26>
 80095d6:	2302      	movs	r3, #2
 80095d8:	e147      	b.n	800986a <HAL_SPI_Transmit+0x2b6>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	225c      	movs	r2, #92	@ 0x5c
 80095de:	2101      	movs	r1, #1
 80095e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095e2:	f7fd fc03 	bl	8006dec <HAL_GetTick>
 80095e6:	0003      	movs	r3, r0
 80095e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80095ea:	2316      	movs	r3, #22
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	1dba      	adds	r2, r7, #6
 80095f0:	8812      	ldrh	r2, [r2, #0]
 80095f2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	225d      	movs	r2, #93	@ 0x5d
 80095f8:	5c9b      	ldrb	r3, [r3, r2]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d004      	beq.n	800960a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009600:	231f      	movs	r3, #31
 8009602:	18fb      	adds	r3, r7, r3
 8009604:	2202      	movs	r2, #2
 8009606:	701a      	strb	r2, [r3, #0]
    goto error;
 8009608:	e128      	b.n	800985c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_SPI_Transmit+0x64>
 8009610:	1dbb      	adds	r3, r7, #6
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d104      	bne.n	8009622 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009618:	231f      	movs	r3, #31
 800961a:	18fb      	adds	r3, r7, r3
 800961c:	2201      	movs	r2, #1
 800961e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009620:	e11c      	b.n	800985c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	225d      	movs	r2, #93	@ 0x5d
 8009626:	2103      	movs	r1, #3
 8009628:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	1dba      	adds	r2, r7, #6
 800963a:	8812      	ldrh	r2, [r2, #0]
 800963c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	1dba      	adds	r2, r7, #6
 8009642:	8812      	ldrh	r2, [r2, #0]
 8009644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2244      	movs	r2, #68	@ 0x44
 8009650:	2100      	movs	r1, #0
 8009652:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2246      	movs	r2, #70	@ 0x46
 8009658:	2100      	movs	r1, #0
 800965a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	2380      	movs	r3, #128	@ 0x80
 800966e:	021b      	lsls	r3, r3, #8
 8009670:	429a      	cmp	r2, r3
 8009672:	d110      	bne.n	8009696 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2140      	movs	r1, #64	@ 0x40
 8009680:	438a      	bics	r2, r1
 8009682:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2180      	movs	r1, #128	@ 0x80
 8009690:	01c9      	lsls	r1, r1, #7
 8009692:	430a      	orrs	r2, r1
 8009694:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2240      	movs	r2, #64	@ 0x40
 800969e:	4013      	ands	r3, r2
 80096a0:	2b40      	cmp	r3, #64	@ 0x40
 80096a2:	d007      	beq.n	80096b4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2140      	movs	r1, #64	@ 0x40
 80096b0:	430a      	orrs	r2, r1
 80096b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68da      	ldr	r2, [r3, #12]
 80096b8:	23e0      	movs	r3, #224	@ 0xe0
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	429a      	cmp	r2, r3
 80096be:	d952      	bls.n	8009766 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <HAL_SPI_Transmit+0x11e>
 80096c8:	2316      	movs	r3, #22
 80096ca:	18fb      	adds	r3, r7, r3
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d143      	bne.n	800975a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d6:	881a      	ldrh	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e2:	1c9a      	adds	r2, r3, #2
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b01      	subs	r3, #1
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80096f6:	e030      	b.n	800975a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	2202      	movs	r2, #2
 8009700:	4013      	ands	r3, r2
 8009702:	2b02      	cmp	r3, #2
 8009704:	d112      	bne.n	800972c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970a:	881a      	ldrh	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009716:	1c9a      	adds	r2, r3, #2
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b29a      	uxth	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800972a:	e016      	b.n	800975a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800972c:	f7fd fb5e 	bl	8006dec <HAL_GetTick>
 8009730:	0002      	movs	r2, r0
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	429a      	cmp	r2, r3
 800973a:	d802      	bhi.n	8009742 <HAL_SPI_Transmit+0x18e>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	3301      	adds	r3, #1
 8009740:	d102      	bne.n	8009748 <HAL_SPI_Transmit+0x194>
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d108      	bne.n	800975a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8009748:	231f      	movs	r3, #31
 800974a:	18fb      	adds	r3, r7, r3
 800974c:	2203      	movs	r2, #3
 800974e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	225d      	movs	r2, #93	@ 0x5d
 8009754:	2101      	movs	r1, #1
 8009756:	5499      	strb	r1, [r3, r2]
          goto error;
 8009758:	e080      	b.n	800985c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800975e:	b29b      	uxth	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1c9      	bne.n	80096f8 <HAL_SPI_Transmit+0x144>
 8009764:	e053      	b.n	800980e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <HAL_SPI_Transmit+0x1c4>
 800976e:	2316      	movs	r3, #22
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d145      	bne.n	8009804 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978a:	1c5a      	adds	r2, r3, #1
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009794:	b29b      	uxth	r3, r3
 8009796:	3b01      	subs	r3, #1
 8009798:	b29a      	uxth	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800979e:	e031      	b.n	8009804 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	2202      	movs	r2, #2
 80097a8:	4013      	ands	r3, r2
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d113      	bne.n	80097d6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	330c      	adds	r3, #12
 80097b8:	7812      	ldrb	r2, [r2, #0]
 80097ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097d4:	e016      	b.n	8009804 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097d6:	f7fd fb09 	bl	8006dec <HAL_GetTick>
 80097da:	0002      	movs	r2, r0
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d802      	bhi.n	80097ec <HAL_SPI_Transmit+0x238>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	d102      	bne.n	80097f2 <HAL_SPI_Transmit+0x23e>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d108      	bne.n	8009804 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80097f2:	231f      	movs	r3, #31
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	2203      	movs	r2, #3
 80097f8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	225d      	movs	r2, #93	@ 0x5d
 80097fe:	2101      	movs	r1, #1
 8009800:	5499      	strb	r1, [r3, r2]
          goto error;
 8009802:	e02b      	b.n	800985c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009808:	b29b      	uxth	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1c8      	bne.n	80097a0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	0018      	movs	r0, r3
 8009816:	f000 f95d 	bl	8009ad4 <SPI_EndRxTxTransaction>
 800981a:	1e03      	subs	r3, r0, #0
 800981c:	d002      	beq.n	8009824 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2220      	movs	r2, #32
 8009822:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800982c:	2300      	movs	r3, #0
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	613b      	str	r3, [r7, #16]
 8009840:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009846:	2b00      	cmp	r3, #0
 8009848:	d004      	beq.n	8009854 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800984a:	231f      	movs	r3, #31
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	2201      	movs	r2, #1
 8009850:	701a      	strb	r2, [r3, #0]
 8009852:	e003      	b.n	800985c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	225d      	movs	r2, #93	@ 0x5d
 8009858:	2101      	movs	r1, #1
 800985a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	225c      	movs	r2, #92	@ 0x5c
 8009860:	2100      	movs	r1, #0
 8009862:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009864:	231f      	movs	r3, #31
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	781b      	ldrb	r3, [r3, #0]
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b008      	add	sp, #32
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	1dfb      	adds	r3, r7, #7
 8009882:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009884:	f7fd fab2 	bl	8006dec <HAL_GetTick>
 8009888:	0002      	movs	r2, r0
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	18d3      	adds	r3, r2, r3
 8009892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009894:	f7fd faaa 	bl	8006dec <HAL_GetTick>
 8009898:	0003      	movs	r3, r0
 800989a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800989c:	4b3a      	ldr	r3, [pc, #232]	@ (8009988 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	015b      	lsls	r3, r3, #5
 80098a2:	0d1b      	lsrs	r3, r3, #20
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	4353      	muls	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098aa:	e058      	b.n	800995e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	3301      	adds	r3, #1
 80098b0:	d055      	beq.n	800995e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098b2:	f7fd fa9b 	bl	8006dec <HAL_GetTick>
 80098b6:	0002      	movs	r2, r0
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	69fa      	ldr	r2, [r7, #28]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d902      	bls.n	80098c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d142      	bne.n	800994e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	21e0      	movs	r1, #224	@ 0xe0
 80098d4:	438a      	bics	r2, r1
 80098d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	2382      	movs	r3, #130	@ 0x82
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d113      	bne.n	800990c <SPI_WaitFlagStateUntilTimeout+0x98>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	2380      	movs	r3, #128	@ 0x80
 80098ea:	021b      	lsls	r3, r3, #8
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d005      	beq.n	80098fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689a      	ldr	r2, [r3, #8]
 80098f4:	2380      	movs	r3, #128	@ 0x80
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d107      	bne.n	800990c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2140      	movs	r1, #64	@ 0x40
 8009908:	438a      	bics	r2, r1
 800990a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009910:	2380      	movs	r3, #128	@ 0x80
 8009912:	019b      	lsls	r3, r3, #6
 8009914:	429a      	cmp	r2, r3
 8009916:	d110      	bne.n	800993a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	491a      	ldr	r1, [pc, #104]	@ (800998c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009924:	400a      	ands	r2, r1
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2180      	movs	r1, #128	@ 0x80
 8009934:	0189      	lsls	r1, r1, #6
 8009936:	430a      	orrs	r2, r1
 8009938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	225d      	movs	r2, #93	@ 0x5d
 800993e:	2101      	movs	r1, #1
 8009940:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	225c      	movs	r2, #92	@ 0x5c
 8009946:	2100      	movs	r1, #0
 8009948:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e017      	b.n	800997e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	3b01      	subs	r3, #1
 800995c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	4013      	ands	r3, r2
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	425a      	negs	r2, r3
 800996e:	4153      	adcs	r3, r2
 8009970:	b2db      	uxtb	r3, r3
 8009972:	001a      	movs	r2, r3
 8009974:	1dfb      	adds	r3, r7, #7
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d197      	bne.n	80098ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	0018      	movs	r0, r3
 8009980:	46bd      	mov	sp, r7
 8009982:	b008      	add	sp, #32
 8009984:	bd80      	pop	{r7, pc}
 8009986:	46c0      	nop			@ (mov r8, r8)
 8009988:	200009c8 	.word	0x200009c8
 800998c:	ffffdfff 	.word	0xffffdfff

08009990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08a      	sub	sp, #40	@ 0x28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800999e:	2317      	movs	r3, #23
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80099a6:	f7fd fa21 	bl	8006dec <HAL_GetTick>
 80099aa:	0002      	movs	r2, r0
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	18d3      	adds	r3, r2, r3
 80099b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80099b6:	f7fd fa19 	bl	8006dec <HAL_GetTick>
 80099ba:	0003      	movs	r3, r0
 80099bc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	330c      	adds	r3, #12
 80099c4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099c6:	4b41      	ldr	r3, [pc, #260]	@ (8009acc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	0013      	movs	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	189b      	adds	r3, r3, r2
 80099d0:	00da      	lsls	r2, r3, #3
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	0d1b      	lsrs	r3, r3, #20
 80099d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d8:	4353      	muls	r3, r2
 80099da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80099dc:	e068      	b.n	8009ab0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	23c0      	movs	r3, #192	@ 0xc0
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d10a      	bne.n	80099fe <SPI_WaitFifoStateUntilTimeout+0x6e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d107      	bne.n	80099fe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	2117      	movs	r1, #23
 80099f6:	187b      	adds	r3, r7, r1
 80099f8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80099fa:	187b      	adds	r3, r7, r1
 80099fc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	d055      	beq.n	8009ab0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a04:	f7fd f9f2 	bl	8006dec <HAL_GetTick>
 8009a08:	0002      	movs	r2, r0
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d902      	bls.n	8009a1a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d142      	bne.n	8009aa0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	21e0      	movs	r1, #224	@ 0xe0
 8009a26:	438a      	bics	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	2382      	movs	r3, #130	@ 0x82
 8009a30:	005b      	lsls	r3, r3, #1
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d113      	bne.n	8009a5e <SPI_WaitFifoStateUntilTimeout+0xce>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	2380      	movs	r3, #128	@ 0x80
 8009a3c:	021b      	lsls	r3, r3, #8
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d005      	beq.n	8009a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689a      	ldr	r2, [r3, #8]
 8009a46:	2380      	movs	r3, #128	@ 0x80
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d107      	bne.n	8009a5e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2140      	movs	r1, #64	@ 0x40
 8009a5a:	438a      	bics	r2, r1
 8009a5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a62:	2380      	movs	r3, #128	@ 0x80
 8009a64:	019b      	lsls	r3, r3, #6
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d110      	bne.n	8009a8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4916      	ldr	r1, [pc, #88]	@ (8009ad0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009a76:	400a      	ands	r2, r1
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2180      	movs	r1, #128	@ 0x80
 8009a86:	0189      	lsls	r1, r1, #6
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	225d      	movs	r2, #93	@ 0x5d
 8009a90:	2101      	movs	r1, #1
 8009a92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	225c      	movs	r2, #92	@ 0x5c
 8009a98:	2100      	movs	r1, #0
 8009a9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e010      	b.n	8009ac2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d18e      	bne.n	80099de <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	b00a      	add	sp, #40	@ 0x28
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	46c0      	nop			@ (mov r8, r8)
 8009acc:	200009c8 	.word	0x200009c8
 8009ad0:	ffffdfff 	.word	0xffffdfff

08009ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	23c0      	movs	r3, #192	@ 0xc0
 8009ae4:	0159      	lsls	r1, r3, #5
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	0013      	movs	r3, r2
 8009aee:	2200      	movs	r2, #0
 8009af0:	f7ff ff4e 	bl	8009990 <SPI_WaitFifoStateUntilTimeout>
 8009af4:	1e03      	subs	r3, r0, #0
 8009af6:	d007      	beq.n	8009b08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009afc:	2220      	movs	r2, #32
 8009afe:	431a      	orrs	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e027      	b.n	8009b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	0013      	movs	r3, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	2180      	movs	r1, #128	@ 0x80
 8009b16:	f7ff fead 	bl	8009874 <SPI_WaitFlagStateUntilTimeout>
 8009b1a:	1e03      	subs	r3, r0, #0
 8009b1c:	d007      	beq.n	8009b2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b22:	2220      	movs	r2, #32
 8009b24:	431a      	orrs	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e014      	b.n	8009b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	23c0      	movs	r3, #192	@ 0xc0
 8009b32:	00d9      	lsls	r1, r3, #3
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	0013      	movs	r3, r2
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f7ff ff27 	bl	8009990 <SPI_WaitFifoStateUntilTimeout>
 8009b42:	1e03      	subs	r3, r0, #0
 8009b44:	d007      	beq.n	8009b56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b4a:	2220      	movs	r2, #32
 8009b4c:	431a      	orrs	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e000      	b.n	8009b58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	0018      	movs	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b004      	add	sp, #16
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e04a      	b.n	8009c08 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	223d      	movs	r2, #61	@ 0x3d
 8009b76:	5c9b      	ldrb	r3, [r3, r2]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d107      	bne.n	8009b8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	223c      	movs	r2, #60	@ 0x3c
 8009b82:	2100      	movs	r1, #0
 8009b84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	0018      	movs	r0, r3
 8009b8a:	f7fc ff1d 	bl	80069c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	223d      	movs	r2, #61	@ 0x3d
 8009b92:	2102      	movs	r1, #2
 8009b94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	0019      	movs	r1, r3
 8009ba0:	0010      	movs	r0, r2
 8009ba2:	f000 fb11 	bl	800a1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2248      	movs	r2, #72	@ 0x48
 8009baa:	2101      	movs	r1, #1
 8009bac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	223e      	movs	r2, #62	@ 0x3e
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	5499      	strb	r1, [r3, r2]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	223f      	movs	r2, #63	@ 0x3f
 8009bba:	2101      	movs	r1, #1
 8009bbc:	5499      	strb	r1, [r3, r2]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2240      	movs	r2, #64	@ 0x40
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	5499      	strb	r1, [r3, r2]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2241      	movs	r2, #65	@ 0x41
 8009bca:	2101      	movs	r1, #1
 8009bcc:	5499      	strb	r1, [r3, r2]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2242      	movs	r2, #66	@ 0x42
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	5499      	strb	r1, [r3, r2]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2243      	movs	r2, #67	@ 0x43
 8009bda:	2101      	movs	r1, #1
 8009bdc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2244      	movs	r2, #68	@ 0x44
 8009be2:	2101      	movs	r1, #1
 8009be4:	5499      	strb	r1, [r3, r2]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2245      	movs	r2, #69	@ 0x45
 8009bea:	2101      	movs	r1, #1
 8009bec:	5499      	strb	r1, [r3, r2]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2246      	movs	r2, #70	@ 0x46
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	5499      	strb	r1, [r3, r2]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2247      	movs	r2, #71	@ 0x47
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	223d      	movs	r2, #61	@ 0x3d
 8009c02:	2101      	movs	r1, #1
 8009c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	0018      	movs	r0, r3
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	b002      	add	sp, #8
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e04a      	b.n	8009cb8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	223d      	movs	r2, #61	@ 0x3d
 8009c26:	5c9b      	ldrb	r3, [r3, r2]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d107      	bne.n	8009c3e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	223c      	movs	r2, #60	@ 0x3c
 8009c32:	2100      	movs	r1, #0
 8009c34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f000 f841 	bl	8009cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	223d      	movs	r2, #61	@ 0x3d
 8009c42:	2102      	movs	r1, #2
 8009c44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	0019      	movs	r1, r3
 8009c50:	0010      	movs	r0, r2
 8009c52:	f000 fab9 	bl	800a1c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2248      	movs	r2, #72	@ 0x48
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	223e      	movs	r2, #62	@ 0x3e
 8009c62:	2101      	movs	r1, #1
 8009c64:	5499      	strb	r1, [r3, r2]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	223f      	movs	r2, #63	@ 0x3f
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	5499      	strb	r1, [r3, r2]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2240      	movs	r2, #64	@ 0x40
 8009c72:	2101      	movs	r1, #1
 8009c74:	5499      	strb	r1, [r3, r2]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2241      	movs	r2, #65	@ 0x41
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	5499      	strb	r1, [r3, r2]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2242      	movs	r2, #66	@ 0x42
 8009c82:	2101      	movs	r1, #1
 8009c84:	5499      	strb	r1, [r3, r2]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2243      	movs	r2, #67	@ 0x43
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2244      	movs	r2, #68	@ 0x44
 8009c92:	2101      	movs	r1, #1
 8009c94:	5499      	strb	r1, [r3, r2]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2245      	movs	r2, #69	@ 0x45
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	5499      	strb	r1, [r3, r2]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2246      	movs	r2, #70	@ 0x46
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	5499      	strb	r1, [r3, r2]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2247      	movs	r2, #71	@ 0x47
 8009caa:	2101      	movs	r1, #1
 8009cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	223d      	movs	r2, #61	@ 0x3d
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	0018      	movs	r0, r3
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	b002      	add	sp, #8
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009cc8:	46c0      	nop			@ (mov r8, r8)
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	b002      	add	sp, #8
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d108      	bne.n	8009cf2 <HAL_TIM_PWM_Start+0x22>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	223e      	movs	r2, #62	@ 0x3e
 8009ce4:	5c9b      	ldrb	r3, [r3, r2]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	1e5a      	subs	r2, r3, #1
 8009cec:	4193      	sbcs	r3, r2
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	e037      	b.n	8009d62 <HAL_TIM_PWM_Start+0x92>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d108      	bne.n	8009d0a <HAL_TIM_PWM_Start+0x3a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	223f      	movs	r2, #63	@ 0x3f
 8009cfc:	5c9b      	ldrb	r3, [r3, r2]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	1e5a      	subs	r2, r3, #1
 8009d04:	4193      	sbcs	r3, r2
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	e02b      	b.n	8009d62 <HAL_TIM_PWM_Start+0x92>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b08      	cmp	r3, #8
 8009d0e:	d108      	bne.n	8009d22 <HAL_TIM_PWM_Start+0x52>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2240      	movs	r2, #64	@ 0x40
 8009d14:	5c9b      	ldrb	r3, [r3, r2]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	1e5a      	subs	r2, r3, #1
 8009d1c:	4193      	sbcs	r3, r2
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	e01f      	b.n	8009d62 <HAL_TIM_PWM_Start+0x92>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	d108      	bne.n	8009d3a <HAL_TIM_PWM_Start+0x6a>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2241      	movs	r2, #65	@ 0x41
 8009d2c:	5c9b      	ldrb	r3, [r3, r2]
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	3b01      	subs	r3, #1
 8009d32:	1e5a      	subs	r2, r3, #1
 8009d34:	4193      	sbcs	r3, r2
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	e013      	b.n	8009d62 <HAL_TIM_PWM_Start+0x92>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b10      	cmp	r3, #16
 8009d3e:	d108      	bne.n	8009d52 <HAL_TIM_PWM_Start+0x82>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2242      	movs	r2, #66	@ 0x42
 8009d44:	5c9b      	ldrb	r3, [r3, r2]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	1e5a      	subs	r2, r3, #1
 8009d4c:	4193      	sbcs	r3, r2
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	e007      	b.n	8009d62 <HAL_TIM_PWM_Start+0x92>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2243      	movs	r2, #67	@ 0x43
 8009d56:	5c9b      	ldrb	r3, [r3, r2]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	1e5a      	subs	r2, r3, #1
 8009d5e:	4193      	sbcs	r3, r2
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e090      	b.n	8009e8c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <HAL_TIM_PWM_Start+0xaa>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	223e      	movs	r2, #62	@ 0x3e
 8009d74:	2102      	movs	r1, #2
 8009d76:	5499      	strb	r1, [r3, r2]
 8009d78:	e023      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xf2>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d104      	bne.n	8009d8a <HAL_TIM_PWM_Start+0xba>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	223f      	movs	r2, #63	@ 0x3f
 8009d84:	2102      	movs	r1, #2
 8009d86:	5499      	strb	r1, [r3, r2]
 8009d88:	e01b      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xf2>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	d104      	bne.n	8009d9a <HAL_TIM_PWM_Start+0xca>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2240      	movs	r2, #64	@ 0x40
 8009d94:	2102      	movs	r1, #2
 8009d96:	5499      	strb	r1, [r3, r2]
 8009d98:	e013      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xf2>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b0c      	cmp	r3, #12
 8009d9e:	d104      	bne.n	8009daa <HAL_TIM_PWM_Start+0xda>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2241      	movs	r2, #65	@ 0x41
 8009da4:	2102      	movs	r1, #2
 8009da6:	5499      	strb	r1, [r3, r2]
 8009da8:	e00b      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xf2>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d104      	bne.n	8009dba <HAL_TIM_PWM_Start+0xea>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2242      	movs	r2, #66	@ 0x42
 8009db4:	2102      	movs	r1, #2
 8009db6:	5499      	strb	r1, [r3, r2]
 8009db8:	e003      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xf2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2243      	movs	r2, #67	@ 0x43
 8009dbe:	2102      	movs	r1, #2
 8009dc0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f000 fd58 	bl	800a880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8009e94 <HAL_TIM_PWM_Start+0x1c4>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00e      	beq.n	8009df8 <HAL_TIM_PWM_Start+0x128>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a2e      	ldr	r2, [pc, #184]	@ (8009e98 <HAL_TIM_PWM_Start+0x1c8>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d009      	beq.n	8009df8 <HAL_TIM_PWM_Start+0x128>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a2c      	ldr	r2, [pc, #176]	@ (8009e9c <HAL_TIM_PWM_Start+0x1cc>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d004      	beq.n	8009df8 <HAL_TIM_PWM_Start+0x128>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a2b      	ldr	r2, [pc, #172]	@ (8009ea0 <HAL_TIM_PWM_Start+0x1d0>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d101      	bne.n	8009dfc <HAL_TIM_PWM_Start+0x12c>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e000      	b.n	8009dfe <HAL_TIM_PWM_Start+0x12e>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d008      	beq.n	8009e14 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2180      	movs	r1, #128	@ 0x80
 8009e0e:	0209      	lsls	r1, r1, #8
 8009e10:	430a      	orrs	r2, r1
 8009e12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a1e      	ldr	r2, [pc, #120]	@ (8009e94 <HAL_TIM_PWM_Start+0x1c4>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d014      	beq.n	8009e48 <HAL_TIM_PWM_Start+0x178>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	2380      	movs	r3, #128	@ 0x80
 8009e24:	05db      	lsls	r3, r3, #23
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d00e      	beq.n	8009e48 <HAL_TIM_PWM_Start+0x178>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <HAL_TIM_PWM_Start+0x1d4>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d009      	beq.n	8009e48 <HAL_TIM_PWM_Start+0x178>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <HAL_TIM_PWM_Start+0x1d8>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d004      	beq.n	8009e48 <HAL_TIM_PWM_Start+0x178>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a15      	ldr	r2, [pc, #84]	@ (8009e98 <HAL_TIM_PWM_Start+0x1c8>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d116      	bne.n	8009e76 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	4a17      	ldr	r2, [pc, #92]	@ (8009eac <HAL_TIM_PWM_Start+0x1dc>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b06      	cmp	r3, #6
 8009e58:	d016      	beq.n	8009e88 <HAL_TIM_PWM_Start+0x1b8>
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	2380      	movs	r3, #128	@ 0x80
 8009e5e:	025b      	lsls	r3, r3, #9
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d011      	beq.n	8009e88 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2101      	movs	r1, #1
 8009e70:	430a      	orrs	r2, r1
 8009e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e74:	e008      	b.n	8009e88 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2101      	movs	r1, #1
 8009e82:	430a      	orrs	r2, r1
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	e000      	b.n	8009e8a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e88:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	b004      	add	sp, #16
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	40012c00 	.word	0x40012c00
 8009e98:	40014000 	.word	0x40014000
 8009e9c:	40014400 	.word	0x40014400
 8009ea0:	40014800 	.word	0x40014800
 8009ea4:	40000400 	.word	0x40000400
 8009ea8:	40000800 	.word	0x40000800
 8009eac:	00010007 	.word	0x00010007

08009eb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f000 fcdc 	bl	800a880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a37      	ldr	r2, [pc, #220]	@ (8009fac <HAL_TIM_PWM_Stop+0xfc>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d00e      	beq.n	8009ef0 <HAL_TIM_PWM_Stop+0x40>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a36      	ldr	r2, [pc, #216]	@ (8009fb0 <HAL_TIM_PWM_Stop+0x100>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d009      	beq.n	8009ef0 <HAL_TIM_PWM_Stop+0x40>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a34      	ldr	r2, [pc, #208]	@ (8009fb4 <HAL_TIM_PWM_Stop+0x104>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d004      	beq.n	8009ef0 <HAL_TIM_PWM_Stop+0x40>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a33      	ldr	r2, [pc, #204]	@ (8009fb8 <HAL_TIM_PWM_Stop+0x108>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIM_PWM_Stop+0x44>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <HAL_TIM_PWM_Stop+0x46>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d013      	beq.n	8009f22 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6a1b      	ldr	r3, [r3, #32]
 8009f00:	4a2e      	ldr	r2, [pc, #184]	@ (8009fbc <HAL_TIM_PWM_Stop+0x10c>)
 8009f02:	4013      	ands	r3, r2
 8009f04:	d10d      	bne.n	8009f22 <HAL_TIM_PWM_Stop+0x72>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	4a2c      	ldr	r2, [pc, #176]	@ (8009fc0 <HAL_TIM_PWM_Stop+0x110>)
 8009f0e:	4013      	ands	r3, r2
 8009f10:	d107      	bne.n	8009f22 <HAL_TIM_PWM_Stop+0x72>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4929      	ldr	r1, [pc, #164]	@ (8009fc4 <HAL_TIM_PWM_Stop+0x114>)
 8009f1e:	400a      	ands	r2, r1
 8009f20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	4a24      	ldr	r2, [pc, #144]	@ (8009fbc <HAL_TIM_PWM_Stop+0x10c>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	d10d      	bne.n	8009f4a <HAL_TIM_PWM_Stop+0x9a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	4a22      	ldr	r2, [pc, #136]	@ (8009fc0 <HAL_TIM_PWM_Stop+0x110>)
 8009f36:	4013      	ands	r3, r2
 8009f38:	d107      	bne.n	8009f4a <HAL_TIM_PWM_Stop+0x9a>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2101      	movs	r1, #1
 8009f46:	438a      	bics	r2, r1
 8009f48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d104      	bne.n	8009f5a <HAL_TIM_PWM_Stop+0xaa>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	223e      	movs	r2, #62	@ 0x3e
 8009f54:	2101      	movs	r1, #1
 8009f56:	5499      	strb	r1, [r3, r2]
 8009f58:	e023      	b.n	8009fa2 <HAL_TIM_PWM_Stop+0xf2>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d104      	bne.n	8009f6a <HAL_TIM_PWM_Stop+0xba>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	223f      	movs	r2, #63	@ 0x3f
 8009f64:	2101      	movs	r1, #1
 8009f66:	5499      	strb	r1, [r3, r2]
 8009f68:	e01b      	b.n	8009fa2 <HAL_TIM_PWM_Stop+0xf2>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d104      	bne.n	8009f7a <HAL_TIM_PWM_Stop+0xca>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2240      	movs	r2, #64	@ 0x40
 8009f74:	2101      	movs	r1, #1
 8009f76:	5499      	strb	r1, [r3, r2]
 8009f78:	e013      	b.n	8009fa2 <HAL_TIM_PWM_Stop+0xf2>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b0c      	cmp	r3, #12
 8009f7e:	d104      	bne.n	8009f8a <HAL_TIM_PWM_Stop+0xda>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2241      	movs	r2, #65	@ 0x41
 8009f84:	2101      	movs	r1, #1
 8009f86:	5499      	strb	r1, [r3, r2]
 8009f88:	e00b      	b.n	8009fa2 <HAL_TIM_PWM_Stop+0xf2>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d104      	bne.n	8009f9a <HAL_TIM_PWM_Stop+0xea>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2242      	movs	r2, #66	@ 0x42
 8009f94:	2101      	movs	r1, #1
 8009f96:	5499      	strb	r1, [r3, r2]
 8009f98:	e003      	b.n	8009fa2 <HAL_TIM_PWM_Stop+0xf2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2243      	movs	r2, #67	@ 0x43
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	b002      	add	sp, #8
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	40012c00 	.word	0x40012c00
 8009fb0:	40014000 	.word	0x40014000
 8009fb4:	40014400 	.word	0x40014400
 8009fb8:	40014800 	.word	0x40014800
 8009fbc:	00001111 	.word	0x00001111
 8009fc0:	00000444 	.word	0x00000444
 8009fc4:	ffff7fff 	.word	0xffff7fff

08009fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fd4:	2317      	movs	r3, #23
 8009fd6:	18fb      	adds	r3, r7, r3
 8009fd8:	2200      	movs	r2, #0
 8009fda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	223c      	movs	r2, #60	@ 0x3c
 8009fe0:	5c9b      	ldrb	r3, [r3, r2]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_TIM_PWM_ConfigChannel+0x22>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e0e5      	b.n	800a1b6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	223c      	movs	r2, #60	@ 0x3c
 8009fee:	2101      	movs	r1, #1
 8009ff0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b14      	cmp	r3, #20
 8009ff6:	d900      	bls.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x32>
 8009ff8:	e0d1      	b.n	800a19e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	009a      	lsls	r2, r3, #2
 8009ffe:	4b70      	ldr	r3, [pc, #448]	@ (800a1c0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a000:	18d3      	adds	r3, r2, r3
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	0011      	movs	r1, r2
 800a00e:	0018      	movs	r0, r3
 800a010:	f000 f972 	bl	800a2f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699a      	ldr	r2, [r3, #24]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2108      	movs	r1, #8
 800a020:	430a      	orrs	r2, r1
 800a022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699a      	ldr	r2, [r3, #24]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2104      	movs	r1, #4
 800a030:	438a      	bics	r2, r1
 800a032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6999      	ldr	r1, [r3, #24]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	619a      	str	r2, [r3, #24]
      break;
 800a046:	e0af      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	0011      	movs	r1, r2
 800a050:	0018      	movs	r0, r3
 800a052:	f000 f9db 	bl	800a40c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	699a      	ldr	r2, [r3, #24]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2180      	movs	r1, #128	@ 0x80
 800a062:	0109      	lsls	r1, r1, #4
 800a064:	430a      	orrs	r2, r1
 800a066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	699a      	ldr	r2, [r3, #24]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4954      	ldr	r1, [pc, #336]	@ (800a1c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a074:	400a      	ands	r2, r1
 800a076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6999      	ldr	r1, [r3, #24]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	021a      	lsls	r2, r3, #8
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	430a      	orrs	r2, r1
 800a08a:	619a      	str	r2, [r3, #24]
      break;
 800a08c:	e08c      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	0011      	movs	r1, r2
 800a096:	0018      	movs	r0, r3
 800a098:	f000 fa3c 	bl	800a514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69da      	ldr	r2, [r3, #28]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2108      	movs	r1, #8
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	69da      	ldr	r2, [r3, #28]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2104      	movs	r1, #4
 800a0b8:	438a      	bics	r2, r1
 800a0ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	69d9      	ldr	r1, [r3, #28]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	691a      	ldr	r2, [r3, #16]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	61da      	str	r2, [r3, #28]
      break;
 800a0ce:	e06b      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	0011      	movs	r1, r2
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f000 faa3 	bl	800a624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	69da      	ldr	r2, [r3, #28]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2180      	movs	r1, #128	@ 0x80
 800a0ea:	0109      	lsls	r1, r1, #4
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69da      	ldr	r2, [r3, #28]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4932      	ldr	r1, [pc, #200]	@ (800a1c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a0fc:	400a      	ands	r2, r1
 800a0fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	69d9      	ldr	r1, [r3, #28]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	021a      	lsls	r2, r3, #8
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	430a      	orrs	r2, r1
 800a112:	61da      	str	r2, [r3, #28]
      break;
 800a114:	e048      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	0011      	movs	r1, r2
 800a11e:	0018      	movs	r0, r3
 800a120:	f000 faea 	bl	800a6f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2108      	movs	r1, #8
 800a130:	430a      	orrs	r2, r1
 800a132:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2104      	movs	r1, #4
 800a140:	438a      	bics	r2, r1
 800a142:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691a      	ldr	r2, [r3, #16]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a156:	e027      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	0011      	movs	r1, r2
 800a160:	0018      	movs	r0, r3
 800a162:	f000 fb29 	bl	800a7b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2180      	movs	r1, #128	@ 0x80
 800a172:	0109      	lsls	r1, r1, #4
 800a174:	430a      	orrs	r2, r1
 800a176:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4910      	ldr	r1, [pc, #64]	@ (800a1c4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a184:	400a      	ands	r2, r1
 800a186:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	021a      	lsls	r2, r3, #8
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	430a      	orrs	r2, r1
 800a19a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a19c:	e004      	b.n	800a1a8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a19e:	2317      	movs	r3, #23
 800a1a0:	18fb      	adds	r3, r7, r3
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	701a      	strb	r2, [r3, #0]
      break;
 800a1a6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	223c      	movs	r2, #60	@ 0x3c
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	5499      	strb	r1, [r3, r2]

  return status;
 800a1b0:	2317      	movs	r3, #23
 800a1b2:	18fb      	adds	r3, r7, r3
 800a1b4:	781b      	ldrb	r3, [r3, #0]
}
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b006      	add	sp, #24
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	46c0      	nop			@ (mov r8, r8)
 800a1c0:	0800d028 	.word	0x0800d028
 800a1c4:	fffffbff 	.word	0xfffffbff

0800a1c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a3f      	ldr	r2, [pc, #252]	@ (800a2d8 <TIM_Base_SetConfig+0x110>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00c      	beq.n	800a1fa <TIM_Base_SetConfig+0x32>
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	2380      	movs	r3, #128	@ 0x80
 800a1e4:	05db      	lsls	r3, r3, #23
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d007      	beq.n	800a1fa <TIM_Base_SetConfig+0x32>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a3b      	ldr	r2, [pc, #236]	@ (800a2dc <TIM_Base_SetConfig+0x114>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d003      	beq.n	800a1fa <TIM_Base_SetConfig+0x32>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a3a      	ldr	r2, [pc, #232]	@ (800a2e0 <TIM_Base_SetConfig+0x118>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d108      	bne.n	800a20c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2270      	movs	r2, #112	@ 0x70
 800a1fe:	4393      	bics	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	4313      	orrs	r3, r2
 800a20a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a32      	ldr	r2, [pc, #200]	@ (800a2d8 <TIM_Base_SetConfig+0x110>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d01c      	beq.n	800a24e <TIM_Base_SetConfig+0x86>
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	2380      	movs	r3, #128	@ 0x80
 800a218:	05db      	lsls	r3, r3, #23
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d017      	beq.n	800a24e <TIM_Base_SetConfig+0x86>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a2e      	ldr	r2, [pc, #184]	@ (800a2dc <TIM_Base_SetConfig+0x114>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <TIM_Base_SetConfig+0x86>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a2d      	ldr	r2, [pc, #180]	@ (800a2e0 <TIM_Base_SetConfig+0x118>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00f      	beq.n	800a24e <TIM_Base_SetConfig+0x86>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a2c      	ldr	r2, [pc, #176]	@ (800a2e4 <TIM_Base_SetConfig+0x11c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00b      	beq.n	800a24e <TIM_Base_SetConfig+0x86>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a2b      	ldr	r2, [pc, #172]	@ (800a2e8 <TIM_Base_SetConfig+0x120>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d007      	beq.n	800a24e <TIM_Base_SetConfig+0x86>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a2a      	ldr	r2, [pc, #168]	@ (800a2ec <TIM_Base_SetConfig+0x124>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_Base_SetConfig+0x86>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a29      	ldr	r2, [pc, #164]	@ (800a2f0 <TIM_Base_SetConfig+0x128>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d108      	bne.n	800a260 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4a28      	ldr	r2, [pc, #160]	@ (800a2f4 <TIM_Base_SetConfig+0x12c>)
 800a252:	4013      	ands	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2280      	movs	r2, #128	@ 0x80
 800a264:	4393      	bics	r3, r2
 800a266:	001a      	movs	r2, r3
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a13      	ldr	r2, [pc, #76]	@ (800a2d8 <TIM_Base_SetConfig+0x110>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00b      	beq.n	800a2a6 <TIM_Base_SetConfig+0xde>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a15      	ldr	r2, [pc, #84]	@ (800a2e8 <TIM_Base_SetConfig+0x120>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d007      	beq.n	800a2a6 <TIM_Base_SetConfig+0xde>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a14      	ldr	r2, [pc, #80]	@ (800a2ec <TIM_Base_SetConfig+0x124>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d003      	beq.n	800a2a6 <TIM_Base_SetConfig+0xde>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a13      	ldr	r2, [pc, #76]	@ (800a2f0 <TIM_Base_SetConfig+0x128>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d103      	bne.n	800a2ae <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	691a      	ldr	r2, [r3, #16]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d106      	bne.n	800a2ce <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	4393      	bics	r3, r2
 800a2c8:	001a      	movs	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	611a      	str	r2, [r3, #16]
  }
}
 800a2ce:	46c0      	nop			@ (mov r8, r8)
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	b004      	add	sp, #16
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	46c0      	nop			@ (mov r8, r8)
 800a2d8:	40012c00 	.word	0x40012c00
 800a2dc:	40000400 	.word	0x40000400
 800a2e0:	40000800 	.word	0x40000800
 800a2e4:	40002000 	.word	0x40002000
 800a2e8:	40014000 	.word	0x40014000
 800a2ec:	40014400 	.word	0x40014400
 800a2f0:	40014800 	.word	0x40014800
 800a2f4:	fffffcff 	.word	0xfffffcff

0800a2f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	2201      	movs	r2, #1
 800a30e:	4393      	bics	r3, r2
 800a310:	001a      	movs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4a32      	ldr	r2, [pc, #200]	@ (800a3f0 <TIM_OC1_SetConfig+0xf8>)
 800a326:	4013      	ands	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2203      	movs	r2, #3
 800a32e:	4393      	bics	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	4313      	orrs	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2202      	movs	r2, #2
 800a340:	4393      	bics	r3, r2
 800a342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a28      	ldr	r2, [pc, #160]	@ (800a3f4 <TIM_OC1_SetConfig+0xfc>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d00b      	beq.n	800a36e <TIM_OC1_SetConfig+0x76>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a27      	ldr	r2, [pc, #156]	@ (800a3f8 <TIM_OC1_SetConfig+0x100>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d007      	beq.n	800a36e <TIM_OC1_SetConfig+0x76>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a26      	ldr	r2, [pc, #152]	@ (800a3fc <TIM_OC1_SetConfig+0x104>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d003      	beq.n	800a36e <TIM_OC1_SetConfig+0x76>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a25      	ldr	r2, [pc, #148]	@ (800a400 <TIM_OC1_SetConfig+0x108>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d10c      	bne.n	800a388 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2208      	movs	r2, #8
 800a372:	4393      	bics	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2204      	movs	r2, #4
 800a384:	4393      	bics	r3, r2
 800a386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a1a      	ldr	r2, [pc, #104]	@ (800a3f4 <TIM_OC1_SetConfig+0xfc>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d00b      	beq.n	800a3a8 <TIM_OC1_SetConfig+0xb0>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a19      	ldr	r2, [pc, #100]	@ (800a3f8 <TIM_OC1_SetConfig+0x100>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d007      	beq.n	800a3a8 <TIM_OC1_SetConfig+0xb0>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a18      	ldr	r2, [pc, #96]	@ (800a3fc <TIM_OC1_SetConfig+0x104>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d003      	beq.n	800a3a8 <TIM_OC1_SetConfig+0xb0>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a17      	ldr	r2, [pc, #92]	@ (800a400 <TIM_OC1_SetConfig+0x108>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d111      	bne.n	800a3cc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	4a16      	ldr	r2, [pc, #88]	@ (800a404 <TIM_OC1_SetConfig+0x10c>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	4a15      	ldr	r2, [pc, #84]	@ (800a408 <TIM_OC1_SetConfig+0x110>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	695b      	ldr	r3, [r3, #20]
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	621a      	str	r2, [r3, #32]
}
 800a3e6:	46c0      	nop			@ (mov r8, r8)
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	b006      	add	sp, #24
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	46c0      	nop			@ (mov r8, r8)
 800a3f0:	fffeff8f 	.word	0xfffeff8f
 800a3f4:	40012c00 	.word	0x40012c00
 800a3f8:	40014000 	.word	0x40014000
 800a3fc:	40014400 	.word	0x40014400
 800a400:	40014800 	.word	0x40014800
 800a404:	fffffeff 	.word	0xfffffeff
 800a408:	fffffdff 	.word	0xfffffdff

0800a40c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	2210      	movs	r2, #16
 800a422:	4393      	bics	r3, r2
 800a424:	001a      	movs	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4a2e      	ldr	r2, [pc, #184]	@ (800a4f4 <TIM_OC2_SetConfig+0xe8>)
 800a43a:	4013      	ands	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4a2d      	ldr	r2, [pc, #180]	@ (800a4f8 <TIM_OC2_SetConfig+0xec>)
 800a442:	4013      	ands	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	021b      	lsls	r3, r3, #8
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2220      	movs	r2, #32
 800a456:	4393      	bics	r3, r2
 800a458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a24      	ldr	r2, [pc, #144]	@ (800a4fc <TIM_OC2_SetConfig+0xf0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d10d      	bne.n	800a48a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2280      	movs	r2, #128	@ 0x80
 800a472:	4393      	bics	r3, r2
 800a474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2240      	movs	r2, #64	@ 0x40
 800a486:	4393      	bics	r3, r2
 800a488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4fc <TIM_OC2_SetConfig+0xf0>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d00b      	beq.n	800a4aa <TIM_OC2_SetConfig+0x9e>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a1a      	ldr	r2, [pc, #104]	@ (800a500 <TIM_OC2_SetConfig+0xf4>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d007      	beq.n	800a4aa <TIM_OC2_SetConfig+0x9e>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a19      	ldr	r2, [pc, #100]	@ (800a504 <TIM_OC2_SetConfig+0xf8>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d003      	beq.n	800a4aa <TIM_OC2_SetConfig+0x9e>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a18      	ldr	r2, [pc, #96]	@ (800a508 <TIM_OC2_SetConfig+0xfc>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d113      	bne.n	800a4d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	4a17      	ldr	r2, [pc, #92]	@ (800a50c <TIM_OC2_SetConfig+0x100>)
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	4a16      	ldr	r2, [pc, #88]	@ (800a510 <TIM_OC2_SetConfig+0x104>)
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	621a      	str	r2, [r3, #32]
}
 800a4ec:	46c0      	nop			@ (mov r8, r8)
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	b006      	add	sp, #24
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	feff8fff 	.word	0xfeff8fff
 800a4f8:	fffffcff 	.word	0xfffffcff
 800a4fc:	40012c00 	.word	0x40012c00
 800a500:	40014000 	.word	0x40014000
 800a504:	40014400 	.word	0x40014400
 800a508:	40014800 	.word	0x40014800
 800a50c:	fffffbff 	.word	0xfffffbff
 800a510:	fffff7ff 	.word	0xfffff7ff

0800a514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	4a33      	ldr	r2, [pc, #204]	@ (800a5f8 <TIM_OC3_SetConfig+0xe4>)
 800a52a:	401a      	ands	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a2f      	ldr	r2, [pc, #188]	@ (800a5fc <TIM_OC3_SetConfig+0xe8>)
 800a540:	4013      	ands	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2203      	movs	r2, #3
 800a548:	4393      	bics	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	4a29      	ldr	r2, [pc, #164]	@ (800a600 <TIM_OC3_SetConfig+0xec>)
 800a55a:	4013      	ands	r3, r2
 800a55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a25      	ldr	r2, [pc, #148]	@ (800a604 <TIM_OC3_SetConfig+0xf0>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d10d      	bne.n	800a58e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	4a24      	ldr	r2, [pc, #144]	@ (800a608 <TIM_OC3_SetConfig+0xf4>)
 800a576:	4013      	ands	r3, r2
 800a578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	697a      	ldr	r2, [r7, #20]
 800a582:	4313      	orrs	r3, r2
 800a584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	4a20      	ldr	r2, [pc, #128]	@ (800a60c <TIM_OC3_SetConfig+0xf8>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a1c      	ldr	r2, [pc, #112]	@ (800a604 <TIM_OC3_SetConfig+0xf0>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d00b      	beq.n	800a5ae <TIM_OC3_SetConfig+0x9a>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <TIM_OC3_SetConfig+0xfc>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d007      	beq.n	800a5ae <TIM_OC3_SetConfig+0x9a>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1c      	ldr	r2, [pc, #112]	@ (800a614 <TIM_OC3_SetConfig+0x100>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_OC3_SetConfig+0x9a>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a618 <TIM_OC3_SetConfig+0x104>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d113      	bne.n	800a5d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a61c <TIM_OC3_SetConfig+0x108>)
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	4a19      	ldr	r2, [pc, #100]	@ (800a620 <TIM_OC3_SetConfig+0x10c>)
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	011b      	lsls	r3, r3, #4
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	699b      	ldr	r3, [r3, #24]
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685a      	ldr	r2, [r3, #4]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	621a      	str	r2, [r3, #32]
}
 800a5f0:	46c0      	nop			@ (mov r8, r8)
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	b006      	add	sp, #24
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	fffffeff 	.word	0xfffffeff
 800a5fc:	fffeff8f 	.word	0xfffeff8f
 800a600:	fffffdff 	.word	0xfffffdff
 800a604:	40012c00 	.word	0x40012c00
 800a608:	fffff7ff 	.word	0xfffff7ff
 800a60c:	fffffbff 	.word	0xfffffbff
 800a610:	40014000 	.word	0x40014000
 800a614:	40014400 	.word	0x40014400
 800a618:	40014800 	.word	0x40014800
 800a61c:	ffffefff 	.word	0xffffefff
 800a620:	ffffdfff 	.word	0xffffdfff

0800a624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	4a26      	ldr	r2, [pc, #152]	@ (800a6d4 <TIM_OC4_SetConfig+0xb0>)
 800a63a:	401a      	ands	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4a22      	ldr	r2, [pc, #136]	@ (800a6d8 <TIM_OC4_SetConfig+0xb4>)
 800a650:	4013      	ands	r3, r2
 800a652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4a21      	ldr	r2, [pc, #132]	@ (800a6dc <TIM_OC4_SetConfig+0xb8>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4313      	orrs	r3, r2
 800a666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	4a1d      	ldr	r2, [pc, #116]	@ (800a6e0 <TIM_OC4_SetConfig+0xbc>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	031b      	lsls	r3, r3, #12
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	4313      	orrs	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a19      	ldr	r2, [pc, #100]	@ (800a6e4 <TIM_OC4_SetConfig+0xc0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d00b      	beq.n	800a69c <TIM_OC4_SetConfig+0x78>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a18      	ldr	r2, [pc, #96]	@ (800a6e8 <TIM_OC4_SetConfig+0xc4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d007      	beq.n	800a69c <TIM_OC4_SetConfig+0x78>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a17      	ldr	r2, [pc, #92]	@ (800a6ec <TIM_OC4_SetConfig+0xc8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_OC4_SetConfig+0x78>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a16      	ldr	r2, [pc, #88]	@ (800a6f0 <TIM_OC4_SetConfig+0xcc>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d109      	bne.n	800a6b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	4a15      	ldr	r2, [pc, #84]	@ (800a6f4 <TIM_OC4_SetConfig+0xd0>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	019b      	lsls	r3, r3, #6
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	697a      	ldr	r2, [r7, #20]
 800a6b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	621a      	str	r2, [r3, #32]
}
 800a6ca:	46c0      	nop			@ (mov r8, r8)
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	b006      	add	sp, #24
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	46c0      	nop			@ (mov r8, r8)
 800a6d4:	ffffefff 	.word	0xffffefff
 800a6d8:	feff8fff 	.word	0xfeff8fff
 800a6dc:	fffffcff 	.word	0xfffffcff
 800a6e0:	ffffdfff 	.word	0xffffdfff
 800a6e4:	40012c00 	.word	0x40012c00
 800a6e8:	40014000 	.word	0x40014000
 800a6ec:	40014400 	.word	0x40014400
 800a6f0:	40014800 	.word	0x40014800
 800a6f4:	ffffbfff 	.word	0xffffbfff

0800a6f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	4a23      	ldr	r2, [pc, #140]	@ (800a79c <TIM_OC5_SetConfig+0xa4>)
 800a70e:	401a      	ands	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4a1f      	ldr	r2, [pc, #124]	@ (800a7a0 <TIM_OC5_SetConfig+0xa8>)
 800a724:	4013      	ands	r3, r2
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	4a1b      	ldr	r2, [pc, #108]	@ (800a7a4 <TIM_OC5_SetConfig+0xac>)
 800a736:	4013      	ands	r3, r2
 800a738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	041b      	lsls	r3, r3, #16
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a17      	ldr	r2, [pc, #92]	@ (800a7a8 <TIM_OC5_SetConfig+0xb0>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00b      	beq.n	800a766 <TIM_OC5_SetConfig+0x6e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a16      	ldr	r2, [pc, #88]	@ (800a7ac <TIM_OC5_SetConfig+0xb4>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d007      	beq.n	800a766 <TIM_OC5_SetConfig+0x6e>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a15      	ldr	r2, [pc, #84]	@ (800a7b0 <TIM_OC5_SetConfig+0xb8>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d003      	beq.n	800a766 <TIM_OC5_SetConfig+0x6e>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a14      	ldr	r2, [pc, #80]	@ (800a7b4 <TIM_OC5_SetConfig+0xbc>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d109      	bne.n	800a77a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	4a0c      	ldr	r2, [pc, #48]	@ (800a79c <TIM_OC5_SetConfig+0xa4>)
 800a76a:	4013      	ands	r3, r2
 800a76c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	021b      	lsls	r3, r3, #8
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	4313      	orrs	r3, r2
 800a778:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	621a      	str	r2, [r3, #32]
}
 800a794:	46c0      	nop			@ (mov r8, r8)
 800a796:	46bd      	mov	sp, r7
 800a798:	b006      	add	sp, #24
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	fffeffff 	.word	0xfffeffff
 800a7a0:	fffeff8f 	.word	0xfffeff8f
 800a7a4:	fffdffff 	.word	0xfffdffff
 800a7a8:	40012c00 	.word	0x40012c00
 800a7ac:	40014000 	.word	0x40014000
 800a7b0:	40014400 	.word	0x40014400
 800a7b4:	40014800 	.word	0x40014800

0800a7b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b086      	sub	sp, #24
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	4a24      	ldr	r2, [pc, #144]	@ (800a860 <TIM_OC6_SetConfig+0xa8>)
 800a7ce:	401a      	ands	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4a20      	ldr	r2, [pc, #128]	@ (800a864 <TIM_OC6_SetConfig+0xac>)
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	4a1c      	ldr	r2, [pc, #112]	@ (800a868 <TIM_OC6_SetConfig+0xb0>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	051b      	lsls	r3, r3, #20
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	4313      	orrs	r3, r2
 800a806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a18      	ldr	r2, [pc, #96]	@ (800a86c <TIM_OC6_SetConfig+0xb4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00b      	beq.n	800a828 <TIM_OC6_SetConfig+0x70>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a17      	ldr	r2, [pc, #92]	@ (800a870 <TIM_OC6_SetConfig+0xb8>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d007      	beq.n	800a828 <TIM_OC6_SetConfig+0x70>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a16      	ldr	r2, [pc, #88]	@ (800a874 <TIM_OC6_SetConfig+0xbc>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_OC6_SetConfig+0x70>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a15      	ldr	r2, [pc, #84]	@ (800a878 <TIM_OC6_SetConfig+0xc0>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d109      	bne.n	800a83c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	4a14      	ldr	r2, [pc, #80]	@ (800a87c <TIM_OC6_SetConfig+0xc4>)
 800a82c:	4013      	ands	r3, r2
 800a82e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	029b      	lsls	r3, r3, #10
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	621a      	str	r2, [r3, #32]
}
 800a856:	46c0      	nop			@ (mov r8, r8)
 800a858:	46bd      	mov	sp, r7
 800a85a:	b006      	add	sp, #24
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	46c0      	nop			@ (mov r8, r8)
 800a860:	ffefffff 	.word	0xffefffff
 800a864:	feff8fff 	.word	0xfeff8fff
 800a868:	ffdfffff 	.word	0xffdfffff
 800a86c:	40012c00 	.word	0x40012c00
 800a870:	40014000 	.word	0x40014000
 800a874:	40014400 	.word	0x40014400
 800a878:	40014800 	.word	0x40014800
 800a87c:	fffbffff 	.word	0xfffbffff

0800a880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	221f      	movs	r2, #31
 800a890:	4013      	ands	r3, r2
 800a892:	2201      	movs	r2, #1
 800a894:	409a      	lsls	r2, r3
 800a896:	0013      	movs	r3, r2
 800a898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	43d2      	mvns	r2, r2
 800a8a2:	401a      	ands	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6a1a      	ldr	r2, [r3, #32]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	211f      	movs	r1, #31
 800a8b0:	400b      	ands	r3, r1
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4099      	lsls	r1, r3
 800a8b6:	000b      	movs	r3, r1
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	621a      	str	r2, [r3, #32]
}
 800a8be:	46c0      	nop			@ (mov r8, r8)
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	b006      	add	sp, #24
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	223c      	movs	r2, #60	@ 0x3c
 800a8da:	5c9b      	ldrb	r3, [r3, r2]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d101      	bne.n	800a8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	e06f      	b.n	800a9c4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	223c      	movs	r2, #60	@ 0x3c
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	22ff      	movs	r2, #255	@ 0xff
 800a8f0:	4393      	bics	r3, r2
 800a8f2:	001a      	movs	r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4a33      	ldr	r2, [pc, #204]	@ (800a9cc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800a900:	401a      	ands	r2, r3
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	4313      	orrs	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4a30      	ldr	r2, [pc, #192]	@ (800a9d0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800a90e:	401a      	ands	r2, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	4313      	orrs	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4a2e      	ldr	r2, [pc, #184]	@ (800a9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800a91c:	401a      	ands	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4a2b      	ldr	r2, [pc, #172]	@ (800a9d8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a92a:	401a      	ands	r2, r3
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	4313      	orrs	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4a29      	ldr	r2, [pc, #164]	@ (800a9dc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a938:	401a      	ands	r2, r3
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	4313      	orrs	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4a26      	ldr	r2, [pc, #152]	@ (800a9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a946:	401a      	ands	r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4a24      	ldr	r2, [pc, #144]	@ (800a9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a954:	401a      	ands	r2, r3
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	041b      	lsls	r3, r3, #16
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a21      	ldr	r2, [pc, #132]	@ (800a9e8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a964:	401a      	ands	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a1e      	ldr	r2, [pc, #120]	@ (800a9ec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d11c      	bne.n	800a9b2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a97c:	401a      	ands	r2, r3
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a982:	051b      	lsls	r3, r3, #20
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4a1a      	ldr	r2, [pc, #104]	@ (800a9f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a98c:	401a      	ands	r2, r3
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4a17      	ldr	r2, [pc, #92]	@ (800a9f8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a99a:	401a      	ands	r2, r3
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4a15      	ldr	r2, [pc, #84]	@ (800a9fc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a9a8:	401a      	ands	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	223c      	movs	r2, #60	@ 0x3c
 800a9be:	2100      	movs	r1, #0
 800a9c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	b004      	add	sp, #16
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	fffffcff 	.word	0xfffffcff
 800a9d0:	fffffbff 	.word	0xfffffbff
 800a9d4:	fffff7ff 	.word	0xfffff7ff
 800a9d8:	ffffefff 	.word	0xffffefff
 800a9dc:	ffffdfff 	.word	0xffffdfff
 800a9e0:	ffffbfff 	.word	0xffffbfff
 800a9e4:	fff0ffff 	.word	0xfff0ffff
 800a9e8:	efffffff 	.word	0xefffffff
 800a9ec:	40012c00 	.word	0x40012c00
 800a9f0:	ff0fffff 	.word	0xff0fffff
 800a9f4:	feffffff 	.word	0xfeffffff
 800a9f8:	fdffffff 	.word	0xfdffffff
 800a9fc:	dfffffff 	.word	0xdfffffff

0800aa00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e046      	b.n	800aaa0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2288      	movs	r2, #136	@ 0x88
 800aa16:	589b      	ldr	r3, [r3, r2]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d107      	bne.n	800aa2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2284      	movs	r2, #132	@ 0x84
 800aa20:	2100      	movs	r1, #0
 800aa22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	0018      	movs	r0, r3
 800aa28:	f7fc f82a 	bl	8006a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2288      	movs	r2, #136	@ 0x88
 800aa30:	2124      	movs	r1, #36	@ 0x24
 800aa32:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2101      	movs	r1, #1
 800aa40:	438a      	bics	r2, r1
 800aa42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	0018      	movs	r0, r3
 800aa50:	f000 fc68 	bl	800b324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	0018      	movs	r0, r3
 800aa58:	f000 f90e 	bl	800ac78 <UART_SetConfig>
 800aa5c:	0003      	movs	r3, r0
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d101      	bne.n	800aa66 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e01c      	b.n	800aaa0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	490d      	ldr	r1, [pc, #52]	@ (800aaa8 <HAL_UART_Init+0xa8>)
 800aa72:	400a      	ands	r2, r1
 800aa74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	212a      	movs	r1, #42	@ 0x2a
 800aa82:	438a      	bics	r2, r1
 800aa84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2101      	movs	r1, #1
 800aa92:	430a      	orrs	r2, r1
 800aa94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	0018      	movs	r0, r3
 800aa9a:	f000 fcf7 	bl	800b48c <UART_CheckIdleState>
 800aa9e:	0003      	movs	r3, r0
}
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	b002      	add	sp, #8
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	ffffb7ff 	.word	0xffffb7ff

0800aaac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	@ 0x28
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	1dbb      	adds	r3, r7, #6
 800aaba:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	228c      	movs	r2, #140	@ 0x8c
 800aac0:	589b      	ldr	r3, [r3, r2]
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d000      	beq.n	800aac8 <HAL_UART_Receive+0x1c>
 800aac6:	e0d0      	b.n	800ac6a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <HAL_UART_Receive+0x2a>
 800aace:	1dbb      	adds	r3, r7, #6
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d101      	bne.n	800aada <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e0c8      	b.n	800ac6c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	689a      	ldr	r2, [r3, #8]
 800aade:	2380      	movs	r3, #128	@ 0x80
 800aae0:	015b      	lsls	r3, r3, #5
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d109      	bne.n	800aafa <HAL_UART_Receive+0x4e>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	d001      	beq.n	800aafa <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e0b8      	b.n	800ac6c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2290      	movs	r2, #144	@ 0x90
 800aafe:	2100      	movs	r1, #0
 800ab00:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	228c      	movs	r2, #140	@ 0x8c
 800ab06:	2122      	movs	r1, #34	@ 0x22
 800ab08:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ab10:	f7fc f96c 	bl	8006dec <HAL_GetTick>
 800ab14:	0003      	movs	r3, r0
 800ab16:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	1dba      	adds	r2, r7, #6
 800ab1c:	215c      	movs	r1, #92	@ 0x5c
 800ab1e:	8812      	ldrh	r2, [r2, #0]
 800ab20:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	1dba      	adds	r2, r7, #6
 800ab26:	215e      	movs	r1, #94	@ 0x5e
 800ab28:	8812      	ldrh	r2, [r2, #0]
 800ab2a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	2380      	movs	r3, #128	@ 0x80
 800ab32:	015b      	lsls	r3, r3, #5
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d10d      	bne.n	800ab54 <HAL_UART_Receive+0xa8>
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d104      	bne.n	800ab4a <HAL_UART_Receive+0x9e>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2260      	movs	r2, #96	@ 0x60
 800ab44:	494b      	ldr	r1, [pc, #300]	@ (800ac74 <HAL_UART_Receive+0x1c8>)
 800ab46:	5299      	strh	r1, [r3, r2]
 800ab48:	e02e      	b.n	800aba8 <HAL_UART_Receive+0xfc>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2260      	movs	r2, #96	@ 0x60
 800ab4e:	21ff      	movs	r1, #255	@ 0xff
 800ab50:	5299      	strh	r1, [r3, r2]
 800ab52:	e029      	b.n	800aba8 <HAL_UART_Receive+0xfc>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10d      	bne.n	800ab78 <HAL_UART_Receive+0xcc>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d104      	bne.n	800ab6e <HAL_UART_Receive+0xc2>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2260      	movs	r2, #96	@ 0x60
 800ab68:	21ff      	movs	r1, #255	@ 0xff
 800ab6a:	5299      	strh	r1, [r3, r2]
 800ab6c:	e01c      	b.n	800aba8 <HAL_UART_Receive+0xfc>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2260      	movs	r2, #96	@ 0x60
 800ab72:	217f      	movs	r1, #127	@ 0x7f
 800ab74:	5299      	strh	r1, [r3, r2]
 800ab76:	e017      	b.n	800aba8 <HAL_UART_Receive+0xfc>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	2380      	movs	r3, #128	@ 0x80
 800ab7e:	055b      	lsls	r3, r3, #21
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d10d      	bne.n	800aba0 <HAL_UART_Receive+0xf4>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d104      	bne.n	800ab96 <HAL_UART_Receive+0xea>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2260      	movs	r2, #96	@ 0x60
 800ab90:	217f      	movs	r1, #127	@ 0x7f
 800ab92:	5299      	strh	r1, [r3, r2]
 800ab94:	e008      	b.n	800aba8 <HAL_UART_Receive+0xfc>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2260      	movs	r2, #96	@ 0x60
 800ab9a:	213f      	movs	r1, #63	@ 0x3f
 800ab9c:	5299      	strh	r1, [r3, r2]
 800ab9e:	e003      	b.n	800aba8 <HAL_UART_Receive+0xfc>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2260      	movs	r2, #96	@ 0x60
 800aba4:	2100      	movs	r1, #0
 800aba6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800aba8:	2312      	movs	r3, #18
 800abaa:	18fb      	adds	r3, r7, r3
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	2160      	movs	r1, #96	@ 0x60
 800abb0:	5a52      	ldrh	r2, [r2, r1]
 800abb2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	689a      	ldr	r2, [r3, #8]
 800abb8:	2380      	movs	r3, #128	@ 0x80
 800abba:	015b      	lsls	r3, r3, #5
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d108      	bne.n	800abd2 <HAL_UART_Receive+0x126>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d104      	bne.n	800abd2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	61bb      	str	r3, [r7, #24]
 800abd0:	e003      	b.n	800abda <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abd6:	2300      	movs	r3, #0
 800abd8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800abda:	e03a      	b.n	800ac52 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	0013      	movs	r3, r2
 800abe6:	2200      	movs	r2, #0
 800abe8:	2120      	movs	r1, #32
 800abea:	f000 fcf9 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800abee:	1e03      	subs	r3, r0, #0
 800abf0:	d005      	beq.n	800abfe <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	228c      	movs	r2, #140	@ 0x8c
 800abf6:	2120      	movs	r1, #32
 800abf8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e036      	b.n	800ac6c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10e      	bne.n	800ac22 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	2212      	movs	r2, #18
 800ac0e:	18ba      	adds	r2, r7, r2
 800ac10:	8812      	ldrh	r2, [r2, #0]
 800ac12:	4013      	ands	r3, r2
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	61bb      	str	r3, [r7, #24]
 800ac20:	e00e      	b.n	800ac40 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2212      	movs	r2, #18
 800ac2c:	18ba      	adds	r2, r7, r2
 800ac2e:	8812      	ldrh	r2, [r2, #0]
 800ac30:	b2d2      	uxtb	r2, r2
 800ac32:	4013      	ands	r3, r2
 800ac34:	b2da      	uxtb	r2, r3
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	225e      	movs	r2, #94	@ 0x5e
 800ac44:	5a9b      	ldrh	r3, [r3, r2]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b299      	uxth	r1, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	225e      	movs	r2, #94	@ 0x5e
 800ac50:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	225e      	movs	r2, #94	@ 0x5e
 800ac56:	5a9b      	ldrh	r3, [r3, r2]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1be      	bne.n	800abdc <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	228c      	movs	r2, #140	@ 0x8c
 800ac62:	2120      	movs	r1, #32
 800ac64:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e000      	b.n	800ac6c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800ac6a:	2302      	movs	r3, #2
  }
}
 800ac6c:	0018      	movs	r0, r3
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b008      	add	sp, #32
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	000001ff 	.word	0x000001ff

0800ac78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac78:	b5b0      	push	{r4, r5, r7, lr}
 800ac7a:	b090      	sub	sp, #64	@ 0x40
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac80:	231a      	movs	r3, #26
 800ac82:	2220      	movs	r2, #32
 800ac84:	189b      	adds	r3, r3, r2
 800ac86:	19db      	adds	r3, r3, r7
 800ac88:	2200      	movs	r2, #0
 800ac8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	431a      	orrs	r2, r3
 800ac96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4ac1      	ldr	r2, [pc, #772]	@ (800afb0 <UART_SetConfig+0x338>)
 800acac:	4013      	ands	r3, r2
 800acae:	0019      	movs	r1, r3
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb6:	430b      	orrs	r3, r1
 800acb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	4abc      	ldr	r2, [pc, #752]	@ (800afb4 <UART_SetConfig+0x33c>)
 800acc2:	4013      	ands	r3, r2
 800acc4:	0018      	movs	r0, r3
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	68d9      	ldr	r1, [r3, #12]
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	0003      	movs	r3, r0
 800acd0:	430b      	orrs	r3, r1
 800acd2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4ab6      	ldr	r2, [pc, #728]	@ (800afb8 <UART_SetConfig+0x340>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d009      	beq.n	800acf8 <UART_SetConfig+0x80>
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4ab4      	ldr	r2, [pc, #720]	@ (800afbc <UART_SetConfig+0x344>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d004      	beq.n	800acf8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800acf4:	4313      	orrs	r3, r2
 800acf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	4ab0      	ldr	r2, [pc, #704]	@ (800afc0 <UART_SetConfig+0x348>)
 800ad00:	4013      	ands	r3, r2
 800ad02:	0019      	movs	r1, r3
 800ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad0a:	430b      	orrs	r3, r1
 800ad0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad14:	220f      	movs	r2, #15
 800ad16:	4393      	bics	r3, r2
 800ad18:	0018      	movs	r0, r3
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	0003      	movs	r3, r0
 800ad24:	430b      	orrs	r3, r1
 800ad26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4aa5      	ldr	r2, [pc, #660]	@ (800afc4 <UART_SetConfig+0x34c>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d131      	bne.n	800ad96 <UART_SetConfig+0x11e>
 800ad32:	4ba5      	ldr	r3, [pc, #660]	@ (800afc8 <UART_SetConfig+0x350>)
 800ad34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad36:	2203      	movs	r2, #3
 800ad38:	4013      	ands	r3, r2
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d01d      	beq.n	800ad7a <UART_SetConfig+0x102>
 800ad3e:	d823      	bhi.n	800ad88 <UART_SetConfig+0x110>
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d00c      	beq.n	800ad5e <UART_SetConfig+0xe6>
 800ad44:	d820      	bhi.n	800ad88 <UART_SetConfig+0x110>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <UART_SetConfig+0xd8>
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d00e      	beq.n	800ad6c <UART_SetConfig+0xf4>
 800ad4e:	e01b      	b.n	800ad88 <UART_SetConfig+0x110>
 800ad50:	231b      	movs	r3, #27
 800ad52:	2220      	movs	r2, #32
 800ad54:	189b      	adds	r3, r3, r2
 800ad56:	19db      	adds	r3, r3, r7
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
 800ad5c:	e154      	b.n	800b008 <UART_SetConfig+0x390>
 800ad5e:	231b      	movs	r3, #27
 800ad60:	2220      	movs	r2, #32
 800ad62:	189b      	adds	r3, r3, r2
 800ad64:	19db      	adds	r3, r3, r7
 800ad66:	2202      	movs	r2, #2
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	e14d      	b.n	800b008 <UART_SetConfig+0x390>
 800ad6c:	231b      	movs	r3, #27
 800ad6e:	2220      	movs	r2, #32
 800ad70:	189b      	adds	r3, r3, r2
 800ad72:	19db      	adds	r3, r3, r7
 800ad74:	2204      	movs	r2, #4
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	e146      	b.n	800b008 <UART_SetConfig+0x390>
 800ad7a:	231b      	movs	r3, #27
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	189b      	adds	r3, r3, r2
 800ad80:	19db      	adds	r3, r3, r7
 800ad82:	2208      	movs	r2, #8
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e13f      	b.n	800b008 <UART_SetConfig+0x390>
 800ad88:	231b      	movs	r3, #27
 800ad8a:	2220      	movs	r2, #32
 800ad8c:	189b      	adds	r3, r3, r2
 800ad8e:	19db      	adds	r3, r3, r7
 800ad90:	2210      	movs	r2, #16
 800ad92:	701a      	strb	r2, [r3, #0]
 800ad94:	e138      	b.n	800b008 <UART_SetConfig+0x390>
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a8c      	ldr	r2, [pc, #560]	@ (800afcc <UART_SetConfig+0x354>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d131      	bne.n	800ae04 <UART_SetConfig+0x18c>
 800ada0:	4b89      	ldr	r3, [pc, #548]	@ (800afc8 <UART_SetConfig+0x350>)
 800ada2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ada4:	220c      	movs	r2, #12
 800ada6:	4013      	ands	r3, r2
 800ada8:	2b0c      	cmp	r3, #12
 800adaa:	d01d      	beq.n	800ade8 <UART_SetConfig+0x170>
 800adac:	d823      	bhi.n	800adf6 <UART_SetConfig+0x17e>
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d00c      	beq.n	800adcc <UART_SetConfig+0x154>
 800adb2:	d820      	bhi.n	800adf6 <UART_SetConfig+0x17e>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <UART_SetConfig+0x146>
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d00e      	beq.n	800adda <UART_SetConfig+0x162>
 800adbc:	e01b      	b.n	800adf6 <UART_SetConfig+0x17e>
 800adbe:	231b      	movs	r3, #27
 800adc0:	2220      	movs	r2, #32
 800adc2:	189b      	adds	r3, r3, r2
 800adc4:	19db      	adds	r3, r3, r7
 800adc6:	2200      	movs	r2, #0
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	e11d      	b.n	800b008 <UART_SetConfig+0x390>
 800adcc:	231b      	movs	r3, #27
 800adce:	2220      	movs	r2, #32
 800add0:	189b      	adds	r3, r3, r2
 800add2:	19db      	adds	r3, r3, r7
 800add4:	2202      	movs	r2, #2
 800add6:	701a      	strb	r2, [r3, #0]
 800add8:	e116      	b.n	800b008 <UART_SetConfig+0x390>
 800adda:	231b      	movs	r3, #27
 800addc:	2220      	movs	r2, #32
 800adde:	189b      	adds	r3, r3, r2
 800ade0:	19db      	adds	r3, r3, r7
 800ade2:	2204      	movs	r2, #4
 800ade4:	701a      	strb	r2, [r3, #0]
 800ade6:	e10f      	b.n	800b008 <UART_SetConfig+0x390>
 800ade8:	231b      	movs	r3, #27
 800adea:	2220      	movs	r2, #32
 800adec:	189b      	adds	r3, r3, r2
 800adee:	19db      	adds	r3, r3, r7
 800adf0:	2208      	movs	r2, #8
 800adf2:	701a      	strb	r2, [r3, #0]
 800adf4:	e108      	b.n	800b008 <UART_SetConfig+0x390>
 800adf6:	231b      	movs	r3, #27
 800adf8:	2220      	movs	r2, #32
 800adfa:	189b      	adds	r3, r3, r2
 800adfc:	19db      	adds	r3, r3, r7
 800adfe:	2210      	movs	r2, #16
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	e101      	b.n	800b008 <UART_SetConfig+0x390>
 800ae04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a71      	ldr	r2, [pc, #452]	@ (800afd0 <UART_SetConfig+0x358>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d131      	bne.n	800ae72 <UART_SetConfig+0x1fa>
 800ae0e:	4b6e      	ldr	r3, [pc, #440]	@ (800afc8 <UART_SetConfig+0x350>)
 800ae10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae12:	2230      	movs	r2, #48	@ 0x30
 800ae14:	4013      	ands	r3, r2
 800ae16:	2b30      	cmp	r3, #48	@ 0x30
 800ae18:	d01d      	beq.n	800ae56 <UART_SetConfig+0x1de>
 800ae1a:	d823      	bhi.n	800ae64 <UART_SetConfig+0x1ec>
 800ae1c:	2b20      	cmp	r3, #32
 800ae1e:	d00c      	beq.n	800ae3a <UART_SetConfig+0x1c2>
 800ae20:	d820      	bhi.n	800ae64 <UART_SetConfig+0x1ec>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d002      	beq.n	800ae2c <UART_SetConfig+0x1b4>
 800ae26:	2b10      	cmp	r3, #16
 800ae28:	d00e      	beq.n	800ae48 <UART_SetConfig+0x1d0>
 800ae2a:	e01b      	b.n	800ae64 <UART_SetConfig+0x1ec>
 800ae2c:	231b      	movs	r3, #27
 800ae2e:	2220      	movs	r2, #32
 800ae30:	189b      	adds	r3, r3, r2
 800ae32:	19db      	adds	r3, r3, r7
 800ae34:	2200      	movs	r2, #0
 800ae36:	701a      	strb	r2, [r3, #0]
 800ae38:	e0e6      	b.n	800b008 <UART_SetConfig+0x390>
 800ae3a:	231b      	movs	r3, #27
 800ae3c:	2220      	movs	r2, #32
 800ae3e:	189b      	adds	r3, r3, r2
 800ae40:	19db      	adds	r3, r3, r7
 800ae42:	2202      	movs	r2, #2
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	e0df      	b.n	800b008 <UART_SetConfig+0x390>
 800ae48:	231b      	movs	r3, #27
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	189b      	adds	r3, r3, r2
 800ae4e:	19db      	adds	r3, r3, r7
 800ae50:	2204      	movs	r2, #4
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	e0d8      	b.n	800b008 <UART_SetConfig+0x390>
 800ae56:	231b      	movs	r3, #27
 800ae58:	2220      	movs	r2, #32
 800ae5a:	189b      	adds	r3, r3, r2
 800ae5c:	19db      	adds	r3, r3, r7
 800ae5e:	2208      	movs	r2, #8
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	e0d1      	b.n	800b008 <UART_SetConfig+0x390>
 800ae64:	231b      	movs	r3, #27
 800ae66:	2220      	movs	r2, #32
 800ae68:	189b      	adds	r3, r3, r2
 800ae6a:	19db      	adds	r3, r3, r7
 800ae6c:	2210      	movs	r2, #16
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	e0ca      	b.n	800b008 <UART_SetConfig+0x390>
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a57      	ldr	r2, [pc, #348]	@ (800afd4 <UART_SetConfig+0x35c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d106      	bne.n	800ae8a <UART_SetConfig+0x212>
 800ae7c:	231b      	movs	r3, #27
 800ae7e:	2220      	movs	r2, #32
 800ae80:	189b      	adds	r3, r3, r2
 800ae82:	19db      	adds	r3, r3, r7
 800ae84:	2200      	movs	r2, #0
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	e0be      	b.n	800b008 <UART_SetConfig+0x390>
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a52      	ldr	r2, [pc, #328]	@ (800afd8 <UART_SetConfig+0x360>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d106      	bne.n	800aea2 <UART_SetConfig+0x22a>
 800ae94:	231b      	movs	r3, #27
 800ae96:	2220      	movs	r2, #32
 800ae98:	189b      	adds	r3, r3, r2
 800ae9a:	19db      	adds	r3, r3, r7
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	701a      	strb	r2, [r3, #0]
 800aea0:	e0b2      	b.n	800b008 <UART_SetConfig+0x390>
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a4d      	ldr	r2, [pc, #308]	@ (800afdc <UART_SetConfig+0x364>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d106      	bne.n	800aeba <UART_SetConfig+0x242>
 800aeac:	231b      	movs	r3, #27
 800aeae:	2220      	movs	r2, #32
 800aeb0:	189b      	adds	r3, r3, r2
 800aeb2:	19db      	adds	r3, r3, r7
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	701a      	strb	r2, [r3, #0]
 800aeb8:	e0a6      	b.n	800b008 <UART_SetConfig+0x390>
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a3e      	ldr	r2, [pc, #248]	@ (800afb8 <UART_SetConfig+0x340>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d13e      	bne.n	800af42 <UART_SetConfig+0x2ca>
 800aec4:	4b40      	ldr	r3, [pc, #256]	@ (800afc8 <UART_SetConfig+0x350>)
 800aec6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aec8:	23c0      	movs	r3, #192	@ 0xc0
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	4013      	ands	r3, r2
 800aece:	22c0      	movs	r2, #192	@ 0xc0
 800aed0:	0112      	lsls	r2, r2, #4
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d027      	beq.n	800af26 <UART_SetConfig+0x2ae>
 800aed6:	22c0      	movs	r2, #192	@ 0xc0
 800aed8:	0112      	lsls	r2, r2, #4
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d82a      	bhi.n	800af34 <UART_SetConfig+0x2bc>
 800aede:	2280      	movs	r2, #128	@ 0x80
 800aee0:	0112      	lsls	r2, r2, #4
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d011      	beq.n	800af0a <UART_SetConfig+0x292>
 800aee6:	2280      	movs	r2, #128	@ 0x80
 800aee8:	0112      	lsls	r2, r2, #4
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d822      	bhi.n	800af34 <UART_SetConfig+0x2bc>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d004      	beq.n	800aefc <UART_SetConfig+0x284>
 800aef2:	2280      	movs	r2, #128	@ 0x80
 800aef4:	00d2      	lsls	r2, r2, #3
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00e      	beq.n	800af18 <UART_SetConfig+0x2a0>
 800aefa:	e01b      	b.n	800af34 <UART_SetConfig+0x2bc>
 800aefc:	231b      	movs	r3, #27
 800aefe:	2220      	movs	r2, #32
 800af00:	189b      	adds	r3, r3, r2
 800af02:	19db      	adds	r3, r3, r7
 800af04:	2200      	movs	r2, #0
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	e07e      	b.n	800b008 <UART_SetConfig+0x390>
 800af0a:	231b      	movs	r3, #27
 800af0c:	2220      	movs	r2, #32
 800af0e:	189b      	adds	r3, r3, r2
 800af10:	19db      	adds	r3, r3, r7
 800af12:	2202      	movs	r2, #2
 800af14:	701a      	strb	r2, [r3, #0]
 800af16:	e077      	b.n	800b008 <UART_SetConfig+0x390>
 800af18:	231b      	movs	r3, #27
 800af1a:	2220      	movs	r2, #32
 800af1c:	189b      	adds	r3, r3, r2
 800af1e:	19db      	adds	r3, r3, r7
 800af20:	2204      	movs	r2, #4
 800af22:	701a      	strb	r2, [r3, #0]
 800af24:	e070      	b.n	800b008 <UART_SetConfig+0x390>
 800af26:	231b      	movs	r3, #27
 800af28:	2220      	movs	r2, #32
 800af2a:	189b      	adds	r3, r3, r2
 800af2c:	19db      	adds	r3, r3, r7
 800af2e:	2208      	movs	r2, #8
 800af30:	701a      	strb	r2, [r3, #0]
 800af32:	e069      	b.n	800b008 <UART_SetConfig+0x390>
 800af34:	231b      	movs	r3, #27
 800af36:	2220      	movs	r2, #32
 800af38:	189b      	adds	r3, r3, r2
 800af3a:	19db      	adds	r3, r3, r7
 800af3c:	2210      	movs	r2, #16
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	e062      	b.n	800b008 <UART_SetConfig+0x390>
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a1d      	ldr	r2, [pc, #116]	@ (800afbc <UART_SetConfig+0x344>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d157      	bne.n	800affc <UART_SetConfig+0x384>
 800af4c:	4b1e      	ldr	r3, [pc, #120]	@ (800afc8 <UART_SetConfig+0x350>)
 800af4e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af50:	23c0      	movs	r3, #192	@ 0xc0
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4013      	ands	r3, r2
 800af56:	22c0      	movs	r2, #192	@ 0xc0
 800af58:	0092      	lsls	r2, r2, #2
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d040      	beq.n	800afe0 <UART_SetConfig+0x368>
 800af5e:	22c0      	movs	r2, #192	@ 0xc0
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	4293      	cmp	r3, r2
 800af64:	d843      	bhi.n	800afee <UART_SetConfig+0x376>
 800af66:	2280      	movs	r2, #128	@ 0x80
 800af68:	0092      	lsls	r2, r2, #2
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d011      	beq.n	800af92 <UART_SetConfig+0x31a>
 800af6e:	2280      	movs	r2, #128	@ 0x80
 800af70:	0092      	lsls	r2, r2, #2
 800af72:	4293      	cmp	r3, r2
 800af74:	d83b      	bhi.n	800afee <UART_SetConfig+0x376>
 800af76:	2b00      	cmp	r3, #0
 800af78:	d004      	beq.n	800af84 <UART_SetConfig+0x30c>
 800af7a:	2280      	movs	r2, #128	@ 0x80
 800af7c:	0052      	lsls	r2, r2, #1
 800af7e:	4293      	cmp	r3, r2
 800af80:	d00e      	beq.n	800afa0 <UART_SetConfig+0x328>
 800af82:	e034      	b.n	800afee <UART_SetConfig+0x376>
 800af84:	231b      	movs	r3, #27
 800af86:	2220      	movs	r2, #32
 800af88:	189b      	adds	r3, r3, r2
 800af8a:	19db      	adds	r3, r3, r7
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
 800af90:	e03a      	b.n	800b008 <UART_SetConfig+0x390>
 800af92:	231b      	movs	r3, #27
 800af94:	2220      	movs	r2, #32
 800af96:	189b      	adds	r3, r3, r2
 800af98:	19db      	adds	r3, r3, r7
 800af9a:	2202      	movs	r2, #2
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	e033      	b.n	800b008 <UART_SetConfig+0x390>
 800afa0:	231b      	movs	r3, #27
 800afa2:	2220      	movs	r2, #32
 800afa4:	189b      	adds	r3, r3, r2
 800afa6:	19db      	adds	r3, r3, r7
 800afa8:	2204      	movs	r2, #4
 800afaa:	701a      	strb	r2, [r3, #0]
 800afac:	e02c      	b.n	800b008 <UART_SetConfig+0x390>
 800afae:	46c0      	nop			@ (mov r8, r8)
 800afb0:	cfff69f3 	.word	0xcfff69f3
 800afb4:	ffffcfff 	.word	0xffffcfff
 800afb8:	40008000 	.word	0x40008000
 800afbc:	40008400 	.word	0x40008400
 800afc0:	11fff4ff 	.word	0x11fff4ff
 800afc4:	40013800 	.word	0x40013800
 800afc8:	40021000 	.word	0x40021000
 800afcc:	40004400 	.word	0x40004400
 800afd0:	40004800 	.word	0x40004800
 800afd4:	40004c00 	.word	0x40004c00
 800afd8:	40005000 	.word	0x40005000
 800afdc:	40013c00 	.word	0x40013c00
 800afe0:	231b      	movs	r3, #27
 800afe2:	2220      	movs	r2, #32
 800afe4:	189b      	adds	r3, r3, r2
 800afe6:	19db      	adds	r3, r3, r7
 800afe8:	2208      	movs	r2, #8
 800afea:	701a      	strb	r2, [r3, #0]
 800afec:	e00c      	b.n	800b008 <UART_SetConfig+0x390>
 800afee:	231b      	movs	r3, #27
 800aff0:	2220      	movs	r2, #32
 800aff2:	189b      	adds	r3, r3, r2
 800aff4:	19db      	adds	r3, r3, r7
 800aff6:	2210      	movs	r2, #16
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	e005      	b.n	800b008 <UART_SetConfig+0x390>
 800affc:	231b      	movs	r3, #27
 800affe:	2220      	movs	r2, #32
 800b000:	189b      	adds	r3, r3, r2
 800b002:	19db      	adds	r3, r3, r7
 800b004:	2210      	movs	r2, #16
 800b006:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4ac1      	ldr	r2, [pc, #772]	@ (800b314 <UART_SetConfig+0x69c>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d005      	beq.n	800b01e <UART_SetConfig+0x3a6>
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4ac0      	ldr	r2, [pc, #768]	@ (800b318 <UART_SetConfig+0x6a0>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d000      	beq.n	800b01e <UART_SetConfig+0x3a6>
 800b01c:	e093      	b.n	800b146 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b01e:	231b      	movs	r3, #27
 800b020:	2220      	movs	r2, #32
 800b022:	189b      	adds	r3, r3, r2
 800b024:	19db      	adds	r3, r3, r7
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b08      	cmp	r3, #8
 800b02a:	d015      	beq.n	800b058 <UART_SetConfig+0x3e0>
 800b02c:	dc18      	bgt.n	800b060 <UART_SetConfig+0x3e8>
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d00d      	beq.n	800b04e <UART_SetConfig+0x3d6>
 800b032:	dc15      	bgt.n	800b060 <UART_SetConfig+0x3e8>
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <UART_SetConfig+0x3c6>
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d005      	beq.n	800b048 <UART_SetConfig+0x3d0>
 800b03c:	e010      	b.n	800b060 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b03e:	f7fd fcf7 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800b042:	0003      	movs	r3, r0
 800b044:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b046:	e014      	b.n	800b072 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b048:	4bb4      	ldr	r3, [pc, #720]	@ (800b31c <UART_SetConfig+0x6a4>)
 800b04a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b04c:	e011      	b.n	800b072 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b04e:	f7fd fc63 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 800b052:	0003      	movs	r3, r0
 800b054:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b056:	e00c      	b.n	800b072 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b058:	2380      	movs	r3, #128	@ 0x80
 800b05a:	021b      	lsls	r3, r3, #8
 800b05c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b05e:	e008      	b.n	800b072 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800b064:	231a      	movs	r3, #26
 800b066:	2220      	movs	r2, #32
 800b068:	189b      	adds	r3, r3, r2
 800b06a:	19db      	adds	r3, r3, r7
 800b06c:	2201      	movs	r2, #1
 800b06e:	701a      	strb	r2, [r3, #0]
        break;
 800b070:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b074:	2b00      	cmp	r3, #0
 800b076:	d100      	bne.n	800b07a <UART_SetConfig+0x402>
 800b078:	e135      	b.n	800b2e6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b07e:	4ba8      	ldr	r3, [pc, #672]	@ (800b320 <UART_SetConfig+0x6a8>)
 800b080:	0052      	lsls	r2, r2, #1
 800b082:	5ad3      	ldrh	r3, [r2, r3]
 800b084:	0019      	movs	r1, r3
 800b086:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b088:	f7f5 f850 	bl	800012c <__udivsi3>
 800b08c:	0003      	movs	r3, r0
 800b08e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	0013      	movs	r3, r2
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	189b      	adds	r3, r3, r2
 800b09a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d305      	bcc.n	800b0ac <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d906      	bls.n	800b0ba <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800b0ac:	231a      	movs	r3, #26
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	189b      	adds	r3, r3, r2
 800b0b2:	19db      	adds	r3, r3, r7
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	e044      	b.n	800b144 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	2300      	movs	r3, #0
 800b0c0:	61fb      	str	r3, [r7, #28]
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0c6:	4b96      	ldr	r3, [pc, #600]	@ (800b320 <UART_SetConfig+0x6a8>)
 800b0c8:	0052      	lsls	r2, r2, #1
 800b0ca:	5ad3      	ldrh	r3, [r2, r3]
 800b0cc:	613b      	str	r3, [r7, #16]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	69b8      	ldr	r0, [r7, #24]
 800b0d8:	69f9      	ldr	r1, [r7, #28]
 800b0da:	f7f5 fa15 	bl	8000508 <__aeabi_uldivmod>
 800b0de:	0002      	movs	r2, r0
 800b0e0:	000b      	movs	r3, r1
 800b0e2:	0e11      	lsrs	r1, r2, #24
 800b0e4:	021d      	lsls	r5, r3, #8
 800b0e6:	430d      	orrs	r5, r1
 800b0e8:	0214      	lsls	r4, r2, #8
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	60bb      	str	r3, [r7, #8]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	68b8      	ldr	r0, [r7, #8]
 800b0f8:	68f9      	ldr	r1, [r7, #12]
 800b0fa:	1900      	adds	r0, r0, r4
 800b0fc:	4169      	adcs	r1, r5
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	2300      	movs	r3, #0
 800b106:	607b      	str	r3, [r7, #4]
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f7f5 f9fc 	bl	8000508 <__aeabi_uldivmod>
 800b110:	0002      	movs	r2, r0
 800b112:	000b      	movs	r3, r1
 800b114:	0013      	movs	r3, r2
 800b116:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b11a:	23c0      	movs	r3, #192	@ 0xc0
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	429a      	cmp	r2, r3
 800b120:	d309      	bcc.n	800b136 <UART_SetConfig+0x4be>
 800b122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b124:	2380      	movs	r3, #128	@ 0x80
 800b126:	035b      	lsls	r3, r3, #13
 800b128:	429a      	cmp	r2, r3
 800b12a:	d204      	bcs.n	800b136 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800b12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b132:	60da      	str	r2, [r3, #12]
 800b134:	e006      	b.n	800b144 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800b136:	231a      	movs	r3, #26
 800b138:	2220      	movs	r2, #32
 800b13a:	189b      	adds	r3, r3, r2
 800b13c:	19db      	adds	r3, r3, r7
 800b13e:	2201      	movs	r2, #1
 800b140:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800b142:	e0d0      	b.n	800b2e6 <UART_SetConfig+0x66e>
 800b144:	e0cf      	b.n	800b2e6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b148:	69da      	ldr	r2, [r3, #28]
 800b14a:	2380      	movs	r3, #128	@ 0x80
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	429a      	cmp	r2, r3
 800b150:	d000      	beq.n	800b154 <UART_SetConfig+0x4dc>
 800b152:	e070      	b.n	800b236 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800b154:	231b      	movs	r3, #27
 800b156:	2220      	movs	r2, #32
 800b158:	189b      	adds	r3, r3, r2
 800b15a:	19db      	adds	r3, r3, r7
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b08      	cmp	r3, #8
 800b160:	d015      	beq.n	800b18e <UART_SetConfig+0x516>
 800b162:	dc18      	bgt.n	800b196 <UART_SetConfig+0x51e>
 800b164:	2b04      	cmp	r3, #4
 800b166:	d00d      	beq.n	800b184 <UART_SetConfig+0x50c>
 800b168:	dc15      	bgt.n	800b196 <UART_SetConfig+0x51e>
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <UART_SetConfig+0x4fc>
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d005      	beq.n	800b17e <UART_SetConfig+0x506>
 800b172:	e010      	b.n	800b196 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b174:	f7fd fc5c 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800b178:	0003      	movs	r3, r0
 800b17a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b17c:	e014      	b.n	800b1a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b17e:	4b67      	ldr	r3, [pc, #412]	@ (800b31c <UART_SetConfig+0x6a4>)
 800b180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b182:	e011      	b.n	800b1a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b184:	f7fd fbc8 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 800b188:	0003      	movs	r3, r0
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b18c:	e00c      	b.n	800b1a8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b18e:	2380      	movs	r3, #128	@ 0x80
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b194:	e008      	b.n	800b1a8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800b19a:	231a      	movs	r3, #26
 800b19c:	2220      	movs	r2, #32
 800b19e:	189b      	adds	r3, r3, r2
 800b1a0:	19db      	adds	r3, r3, r7
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	701a      	strb	r2, [r3, #0]
        break;
 800b1a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d100      	bne.n	800b1b0 <UART_SetConfig+0x538>
 800b1ae:	e09a      	b.n	800b2e6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1b4:	4b5a      	ldr	r3, [pc, #360]	@ (800b320 <UART_SetConfig+0x6a8>)
 800b1b6:	0052      	lsls	r2, r2, #1
 800b1b8:	5ad3      	ldrh	r3, [r2, r3]
 800b1ba:	0019      	movs	r1, r3
 800b1bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b1be:	f7f4 ffb5 	bl	800012c <__udivsi3>
 800b1c2:	0003      	movs	r3, r0
 800b1c4:	005a      	lsls	r2, r3, #1
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	085b      	lsrs	r3, r3, #1
 800b1cc:	18d2      	adds	r2, r2, r3
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	0019      	movs	r1, r3
 800b1d4:	0010      	movs	r0, r2
 800b1d6:	f7f4 ffa9 	bl	800012c <__udivsi3>
 800b1da:	0003      	movs	r3, r0
 800b1dc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	2b0f      	cmp	r3, #15
 800b1e2:	d921      	bls.n	800b228 <UART_SetConfig+0x5b0>
 800b1e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1e6:	2380      	movs	r3, #128	@ 0x80
 800b1e8:	025b      	lsls	r3, r3, #9
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d21c      	bcs.n	800b228 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	200e      	movs	r0, #14
 800b1f4:	2420      	movs	r4, #32
 800b1f6:	1903      	adds	r3, r0, r4
 800b1f8:	19db      	adds	r3, r3, r7
 800b1fa:	210f      	movs	r1, #15
 800b1fc:	438a      	bics	r2, r1
 800b1fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b202:	085b      	lsrs	r3, r3, #1
 800b204:	b29b      	uxth	r3, r3
 800b206:	2207      	movs	r2, #7
 800b208:	4013      	ands	r3, r2
 800b20a:	b299      	uxth	r1, r3
 800b20c:	1903      	adds	r3, r0, r4
 800b20e:	19db      	adds	r3, r3, r7
 800b210:	1902      	adds	r2, r0, r4
 800b212:	19d2      	adds	r2, r2, r7
 800b214:	8812      	ldrh	r2, [r2, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	1902      	adds	r2, r0, r4
 800b220:	19d2      	adds	r2, r2, r7
 800b222:	8812      	ldrh	r2, [r2, #0]
 800b224:	60da      	str	r2, [r3, #12]
 800b226:	e05e      	b.n	800b2e6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800b228:	231a      	movs	r3, #26
 800b22a:	2220      	movs	r2, #32
 800b22c:	189b      	adds	r3, r3, r2
 800b22e:	19db      	adds	r3, r3, r7
 800b230:	2201      	movs	r2, #1
 800b232:	701a      	strb	r2, [r3, #0]
 800b234:	e057      	b.n	800b2e6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b236:	231b      	movs	r3, #27
 800b238:	2220      	movs	r2, #32
 800b23a:	189b      	adds	r3, r3, r2
 800b23c:	19db      	adds	r3, r3, r7
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	2b08      	cmp	r3, #8
 800b242:	d015      	beq.n	800b270 <UART_SetConfig+0x5f8>
 800b244:	dc18      	bgt.n	800b278 <UART_SetConfig+0x600>
 800b246:	2b04      	cmp	r3, #4
 800b248:	d00d      	beq.n	800b266 <UART_SetConfig+0x5ee>
 800b24a:	dc15      	bgt.n	800b278 <UART_SetConfig+0x600>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <UART_SetConfig+0x5de>
 800b250:	2b02      	cmp	r3, #2
 800b252:	d005      	beq.n	800b260 <UART_SetConfig+0x5e8>
 800b254:	e010      	b.n	800b278 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b256:	f7fd fbeb 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800b25a:	0003      	movs	r3, r0
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b25e:	e014      	b.n	800b28a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b260:	4b2e      	ldr	r3, [pc, #184]	@ (800b31c <UART_SetConfig+0x6a4>)
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b264:	e011      	b.n	800b28a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b266:	f7fd fb57 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 800b26a:	0003      	movs	r3, r0
 800b26c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b26e:	e00c      	b.n	800b28a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b270:	2380      	movs	r3, #128	@ 0x80
 800b272:	021b      	lsls	r3, r3, #8
 800b274:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b276:	e008      	b.n	800b28a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800b27c:	231a      	movs	r3, #26
 800b27e:	2220      	movs	r2, #32
 800b280:	189b      	adds	r3, r3, r2
 800b282:	19db      	adds	r3, r3, r7
 800b284:	2201      	movs	r2, #1
 800b286:	701a      	strb	r2, [r3, #0]
        break;
 800b288:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800b28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d02a      	beq.n	800b2e6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b294:	4b22      	ldr	r3, [pc, #136]	@ (800b320 <UART_SetConfig+0x6a8>)
 800b296:	0052      	lsls	r2, r2, #1
 800b298:	5ad3      	ldrh	r3, [r2, r3]
 800b29a:	0019      	movs	r1, r3
 800b29c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b29e:	f7f4 ff45 	bl	800012c <__udivsi3>
 800b2a2:	0003      	movs	r3, r0
 800b2a4:	001a      	movs	r2, r3
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	18d2      	adds	r2, r2, r3
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	0019      	movs	r1, r3
 800b2b4:	0010      	movs	r0, r2
 800b2b6:	f7f4 ff39 	bl	800012c <__udivsi3>
 800b2ba:	0003      	movs	r3, r0
 800b2bc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c0:	2b0f      	cmp	r3, #15
 800b2c2:	d90a      	bls.n	800b2da <UART_SetConfig+0x662>
 800b2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c6:	2380      	movs	r3, #128	@ 0x80
 800b2c8:	025b      	lsls	r3, r3, #9
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d205      	bcs.n	800b2da <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	60da      	str	r2, [r3, #12]
 800b2d8:	e005      	b.n	800b2e6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800b2da:	231a      	movs	r3, #26
 800b2dc:	2220      	movs	r2, #32
 800b2de:	189b      	adds	r3, r3, r2
 800b2e0:	19db      	adds	r3, r3, r7
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e8:	226a      	movs	r2, #106	@ 0x6a
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f0:	2268      	movs	r2, #104	@ 0x68
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	2200      	movs	r2, #0
 800b300:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b302:	231a      	movs	r3, #26
 800b304:	2220      	movs	r2, #32
 800b306:	189b      	adds	r3, r3, r2
 800b308:	19db      	adds	r3, r3, r7
 800b30a:	781b      	ldrb	r3, [r3, #0]
}
 800b30c:	0018      	movs	r0, r3
 800b30e:	46bd      	mov	sp, r7
 800b310:	b010      	add	sp, #64	@ 0x40
 800b312:	bdb0      	pop	{r4, r5, r7, pc}
 800b314:	40008000 	.word	0x40008000
 800b318:	40008400 	.word	0x40008400
 800b31c:	00f42400 	.word	0x00f42400
 800b320:	0800d07c 	.word	0x0800d07c

0800b324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b330:	2208      	movs	r2, #8
 800b332:	4013      	ands	r3, r2
 800b334:	d00b      	beq.n	800b34e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	4a4a      	ldr	r2, [pc, #296]	@ (800b468 <UART_AdvFeatureConfig+0x144>)
 800b33e:	4013      	ands	r3, r2
 800b340:	0019      	movs	r1, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	430a      	orrs	r2, r1
 800b34c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b352:	2201      	movs	r2, #1
 800b354:	4013      	ands	r3, r2
 800b356:	d00b      	beq.n	800b370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4a43      	ldr	r2, [pc, #268]	@ (800b46c <UART_AdvFeatureConfig+0x148>)
 800b360:	4013      	ands	r3, r2
 800b362:	0019      	movs	r1, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	430a      	orrs	r2, r1
 800b36e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b374:	2202      	movs	r2, #2
 800b376:	4013      	ands	r3, r2
 800b378:	d00b      	beq.n	800b392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	4a3b      	ldr	r2, [pc, #236]	@ (800b470 <UART_AdvFeatureConfig+0x14c>)
 800b382:	4013      	ands	r3, r2
 800b384:	0019      	movs	r1, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	430a      	orrs	r2, r1
 800b390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b396:	2204      	movs	r2, #4
 800b398:	4013      	ands	r3, r2
 800b39a:	d00b      	beq.n	800b3b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	4a34      	ldr	r2, [pc, #208]	@ (800b474 <UART_AdvFeatureConfig+0x150>)
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	0019      	movs	r1, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	d00b      	beq.n	800b3d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	4a2c      	ldr	r2, [pc, #176]	@ (800b478 <UART_AdvFeatureConfig+0x154>)
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	0019      	movs	r1, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3da:	2220      	movs	r2, #32
 800b3dc:	4013      	ands	r3, r2
 800b3de:	d00b      	beq.n	800b3f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	4a25      	ldr	r2, [pc, #148]	@ (800b47c <UART_AdvFeatureConfig+0x158>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	0019      	movs	r1, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fc:	2240      	movs	r2, #64	@ 0x40
 800b3fe:	4013      	ands	r3, r2
 800b400:	d01d      	beq.n	800b43e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	4a1d      	ldr	r2, [pc, #116]	@ (800b480 <UART_AdvFeatureConfig+0x15c>)
 800b40a:	4013      	ands	r3, r2
 800b40c:	0019      	movs	r1, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b41e:	2380      	movs	r3, #128	@ 0x80
 800b420:	035b      	lsls	r3, r3, #13
 800b422:	429a      	cmp	r2, r3
 800b424:	d10b      	bne.n	800b43e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	4a15      	ldr	r2, [pc, #84]	@ (800b484 <UART_AdvFeatureConfig+0x160>)
 800b42e:	4013      	ands	r3, r2
 800b430:	0019      	movs	r1, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b442:	2280      	movs	r2, #128	@ 0x80
 800b444:	4013      	ands	r3, r2
 800b446:	d00b      	beq.n	800b460 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4a0e      	ldr	r2, [pc, #56]	@ (800b488 <UART_AdvFeatureConfig+0x164>)
 800b450:	4013      	ands	r3, r2
 800b452:	0019      	movs	r1, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	430a      	orrs	r2, r1
 800b45e:	605a      	str	r2, [r3, #4]
  }
}
 800b460:	46c0      	nop			@ (mov r8, r8)
 800b462:	46bd      	mov	sp, r7
 800b464:	b002      	add	sp, #8
 800b466:	bd80      	pop	{r7, pc}
 800b468:	ffff7fff 	.word	0xffff7fff
 800b46c:	fffdffff 	.word	0xfffdffff
 800b470:	fffeffff 	.word	0xfffeffff
 800b474:	fffbffff 	.word	0xfffbffff
 800b478:	ffffefff 	.word	0xffffefff
 800b47c:	ffffdfff 	.word	0xffffdfff
 800b480:	ffefffff 	.word	0xffefffff
 800b484:	ff9fffff 	.word	0xff9fffff
 800b488:	fff7ffff 	.word	0xfff7ffff

0800b48c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b092      	sub	sp, #72	@ 0x48
 800b490:	af02      	add	r7, sp, #8
 800b492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2290      	movs	r2, #144	@ 0x90
 800b498:	2100      	movs	r1, #0
 800b49a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b49c:	f7fb fca6 	bl	8006dec <HAL_GetTick>
 800b4a0:	0003      	movs	r3, r0
 800b4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	2b08      	cmp	r3, #8
 800b4b0:	d12d      	bne.n	800b50e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4b4:	2280      	movs	r2, #128	@ 0x80
 800b4b6:	0391      	lsls	r1, r2, #14
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	4a47      	ldr	r2, [pc, #284]	@ (800b5d8 <UART_CheckIdleState+0x14c>)
 800b4bc:	9200      	str	r2, [sp, #0]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f000 f88e 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800b4c4:	1e03      	subs	r3, r0, #0
 800b4c6:	d022      	beq.n	800b50e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d8:	f383 8810 	msr	PRIMASK, r3
}
 800b4dc:	46c0      	nop			@ (mov r8, r8)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2180      	movs	r1, #128	@ 0x80
 800b4ea:	438a      	bics	r2, r1
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f4:	f383 8810 	msr	PRIMASK, r3
}
 800b4f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2288      	movs	r2, #136	@ 0x88
 800b4fe:	2120      	movs	r1, #32
 800b500:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2284      	movs	r2, #132	@ 0x84
 800b506:	2100      	movs	r1, #0
 800b508:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e060      	b.n	800b5d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2204      	movs	r2, #4
 800b516:	4013      	ands	r3, r2
 800b518:	2b04      	cmp	r3, #4
 800b51a:	d146      	bne.n	800b5aa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b51e:	2280      	movs	r2, #128	@ 0x80
 800b520:	03d1      	lsls	r1, r2, #15
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4a2c      	ldr	r2, [pc, #176]	@ (800b5d8 <UART_CheckIdleState+0x14c>)
 800b526:	9200      	str	r2, [sp, #0]
 800b528:	2200      	movs	r2, #0
 800b52a:	f000 f859 	bl	800b5e0 <UART_WaitOnFlagUntilTimeout>
 800b52e:	1e03      	subs	r3, r0, #0
 800b530:	d03b      	beq.n	800b5aa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b532:	f3ef 8310 	mrs	r3, PRIMASK
 800b536:	60fb      	str	r3, [r7, #12]
  return(result);
 800b538:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b53c:	2301      	movs	r3, #1
 800b53e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f383 8810 	msr	PRIMASK, r3
}
 800b546:	46c0      	nop			@ (mov r8, r8)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4922      	ldr	r1, [pc, #136]	@ (800b5dc <UART_CheckIdleState+0x150>)
 800b554:	400a      	ands	r2, r1
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f383 8810 	msr	PRIMASK, r3
}
 800b562:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b564:	f3ef 8310 	mrs	r3, PRIMASK
 800b568:	61bb      	str	r3, [r7, #24]
  return(result);
 800b56a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b56c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b56e:	2301      	movs	r3, #1
 800b570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	f383 8810 	msr	PRIMASK, r3
}
 800b578:	46c0      	nop			@ (mov r8, r8)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2101      	movs	r1, #1
 800b586:	438a      	bics	r2, r1
 800b588:	609a      	str	r2, [r3, #8]
 800b58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	f383 8810 	msr	PRIMASK, r3
}
 800b594:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	228c      	movs	r2, #140	@ 0x8c
 800b59a:	2120      	movs	r1, #32
 800b59c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2284      	movs	r2, #132	@ 0x84
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	e012      	b.n	800b5d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2288      	movs	r2, #136	@ 0x88
 800b5ae:	2120      	movs	r1, #32
 800b5b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	228c      	movs	r2, #140	@ 0x8c
 800b5b6:	2120      	movs	r1, #32
 800b5b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2284      	movs	r2, #132	@ 0x84
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	b010      	add	sp, #64	@ 0x40
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	01ffffff 	.word	0x01ffffff
 800b5dc:	fffffedf 	.word	0xfffffedf

0800b5e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	1dfb      	adds	r3, r7, #7
 800b5ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f0:	e051      	b.n	800b696 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	d04e      	beq.n	800b696 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5f8:	f7fb fbf8 	bl	8006dec <HAL_GetTick>
 800b5fc:	0002      	movs	r2, r0
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	69ba      	ldr	r2, [r7, #24]
 800b604:	429a      	cmp	r2, r3
 800b606:	d302      	bcc.n	800b60e <UART_WaitOnFlagUntilTimeout+0x2e>
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b60e:	2303      	movs	r3, #3
 800b610:	e051      	b.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2204      	movs	r2, #4
 800b61a:	4013      	ands	r3, r2
 800b61c:	d03b      	beq.n	800b696 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b80      	cmp	r3, #128	@ 0x80
 800b622:	d038      	beq.n	800b696 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b40      	cmp	r3, #64	@ 0x40
 800b628:	d035      	beq.n	800b696 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	2208      	movs	r2, #8
 800b632:	4013      	ands	r3, r2
 800b634:	2b08      	cmp	r3, #8
 800b636:	d111      	bne.n	800b65c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2208      	movs	r2, #8
 800b63e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	0018      	movs	r0, r3
 800b644:	f000 f83c 	bl	800b6c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2290      	movs	r2, #144	@ 0x90
 800b64c:	2108      	movs	r1, #8
 800b64e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2284      	movs	r2, #132	@ 0x84
 800b654:	2100      	movs	r1, #0
 800b656:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e02c      	b.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	69da      	ldr	r2, [r3, #28]
 800b662:	2380      	movs	r3, #128	@ 0x80
 800b664:	011b      	lsls	r3, r3, #4
 800b666:	401a      	ands	r2, r3
 800b668:	2380      	movs	r3, #128	@ 0x80
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d112      	bne.n	800b696 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2280      	movs	r2, #128	@ 0x80
 800b676:	0112      	lsls	r2, r2, #4
 800b678:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	0018      	movs	r0, r3
 800b67e:	f000 f81f 	bl	800b6c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2290      	movs	r2, #144	@ 0x90
 800b686:	2120      	movs	r1, #32
 800b688:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2284      	movs	r2, #132	@ 0x84
 800b68e:	2100      	movs	r1, #0
 800b690:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e00f      	b.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	69db      	ldr	r3, [r3, #28]
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	4013      	ands	r3, r2
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	425a      	negs	r2, r3
 800b6a6:	4153      	adcs	r3, r2
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	001a      	movs	r2, r3
 800b6ac:	1dfb      	adds	r3, r7, #7
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d09e      	beq.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	0018      	movs	r0, r3
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	b004      	add	sp, #16
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08e      	sub	sp, #56	@ 0x38
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b6cc:	617b      	str	r3, [r7, #20]
  return(result);
 800b6ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	f383 8810 	msr	PRIMASK, r3
}
 800b6dc:	46c0      	nop			@ (mov r8, r8)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4926      	ldr	r1, [pc, #152]	@ (800b784 <UART_EndRxTransfer+0xc4>)
 800b6ea:	400a      	ands	r2, r1
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	f383 8810 	msr	PRIMASK, r3
}
 800b6f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b6fe:	623b      	str	r3, [r7, #32]
  return(result);
 800b700:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b702:	633b      	str	r3, [r7, #48]	@ 0x30
 800b704:	2301      	movs	r3, #1
 800b706:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70a:	f383 8810 	msr	PRIMASK, r3
}
 800b70e:	46c0      	nop			@ (mov r8, r8)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689a      	ldr	r2, [r3, #8]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	491b      	ldr	r1, [pc, #108]	@ (800b788 <UART_EndRxTransfer+0xc8>)
 800b71c:	400a      	ands	r2, r1
 800b71e:	609a      	str	r2, [r3, #8]
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b726:	f383 8810 	msr	PRIMASK, r3
}
 800b72a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b730:	2b01      	cmp	r3, #1
 800b732:	d118      	bne.n	800b766 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b734:	f3ef 8310 	mrs	r3, PRIMASK
 800b738:	60bb      	str	r3, [r7, #8]
  return(result);
 800b73a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b73e:	2301      	movs	r3, #1
 800b740:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f383 8810 	msr	PRIMASK, r3
}
 800b748:	46c0      	nop			@ (mov r8, r8)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2110      	movs	r1, #16
 800b756:	438a      	bics	r2, r1
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	f383 8810 	msr	PRIMASK, r3
}
 800b764:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	228c      	movs	r2, #140	@ 0x8c
 800b76a:	2120      	movs	r1, #32
 800b76c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b77a:	46c0      	nop			@ (mov r8, r8)
 800b77c:	46bd      	mov	sp, r7
 800b77e:	b00e      	add	sp, #56	@ 0x38
 800b780:	bd80      	pop	{r7, pc}
 800b782:	46c0      	nop			@ (mov r8, r8)
 800b784:	fffffedf 	.word	0xfffffedf
 800b788:	effffffe 	.word	0xeffffffe

0800b78c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2284      	movs	r2, #132	@ 0x84
 800b798:	5c9b      	ldrb	r3, [r3, r2]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e027      	b.n	800b7f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2284      	movs	r2, #132	@ 0x84
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2288      	movs	r2, #136	@ 0x88
 800b7ae:	2124      	movs	r1, #36	@ 0x24
 800b7b0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	438a      	bics	r2, r1
 800b7c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	4a0b      	ldr	r2, [pc, #44]	@ (800b7fc <HAL_UARTEx_DisableFifoMode+0x70>)
 800b7ce:	4013      	ands	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2288      	movs	r2, #136	@ 0x88
 800b7e4:	2120      	movs	r1, #32
 800b7e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2284      	movs	r2, #132	@ 0x84
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	b004      	add	sp, #16
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	46c0      	nop			@ (mov r8, r8)
 800b7fc:	dfffffff 	.word	0xdfffffff

0800b800 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2284      	movs	r2, #132	@ 0x84
 800b80e:	5c9b      	ldrb	r3, [r3, r2]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d101      	bne.n	800b818 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b814:	2302      	movs	r3, #2
 800b816:	e02e      	b.n	800b876 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2284      	movs	r2, #132	@ 0x84
 800b81c:	2101      	movs	r1, #1
 800b81e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2288      	movs	r2, #136	@ 0x88
 800b824:	2124      	movs	r1, #36	@ 0x24
 800b826:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2101      	movs	r1, #1
 800b83c:	438a      	bics	r2, r1
 800b83e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	08d9      	lsrs	r1, r3, #3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	0018      	movs	r0, r3
 800b858:	f000 f854 	bl	800b904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2288      	movs	r2, #136	@ 0x88
 800b868:	2120      	movs	r1, #32
 800b86a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2284      	movs	r2, #132	@ 0x84
 800b870:	2100      	movs	r1, #0
 800b872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	0018      	movs	r0, r3
 800b878:	46bd      	mov	sp, r7
 800b87a:	b004      	add	sp, #16
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2284      	movs	r2, #132	@ 0x84
 800b88e:	5c9b      	ldrb	r3, [r3, r2]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d101      	bne.n	800b898 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b894:	2302      	movs	r3, #2
 800b896:	e02f      	b.n	800b8f8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2284      	movs	r2, #132	@ 0x84
 800b89c:	2101      	movs	r1, #1
 800b89e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2288      	movs	r2, #136	@ 0x88
 800b8a4:	2124      	movs	r1, #36	@ 0x24
 800b8a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2101      	movs	r1, #1
 800b8bc:	438a      	bics	r2, r1
 800b8be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	4a0e      	ldr	r2, [pc, #56]	@ (800b900 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	0019      	movs	r1, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	0018      	movs	r0, r3
 800b8da:	f000 f813 	bl	800b904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2288      	movs	r2, #136	@ 0x88
 800b8ea:	2120      	movs	r1, #32
 800b8ec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2284      	movs	r2, #132	@ 0x84
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	b004      	add	sp, #16
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	f1ffffff 	.word	0xf1ffffff

0800b904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b910:	2b00      	cmp	r3, #0
 800b912:	d108      	bne.n	800b926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	226a      	movs	r2, #106	@ 0x6a
 800b918:	2101      	movs	r1, #1
 800b91a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2268      	movs	r2, #104	@ 0x68
 800b920:	2101      	movs	r1, #1
 800b922:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b924:	e043      	b.n	800b9ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b926:	260f      	movs	r6, #15
 800b928:	19bb      	adds	r3, r7, r6
 800b92a:	2208      	movs	r2, #8
 800b92c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b92e:	200e      	movs	r0, #14
 800b930:	183b      	adds	r3, r7, r0
 800b932:	2208      	movs	r2, #8
 800b934:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	0e5b      	lsrs	r3, r3, #25
 800b93e:	b2da      	uxtb	r2, r3
 800b940:	240d      	movs	r4, #13
 800b942:	193b      	adds	r3, r7, r4
 800b944:	2107      	movs	r1, #7
 800b946:	400a      	ands	r2, r1
 800b948:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	0f5b      	lsrs	r3, r3, #29
 800b952:	b2da      	uxtb	r2, r3
 800b954:	250c      	movs	r5, #12
 800b956:	197b      	adds	r3, r7, r5
 800b958:	2107      	movs	r1, #7
 800b95a:	400a      	ands	r2, r1
 800b95c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b95e:	183b      	adds	r3, r7, r0
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	197a      	adds	r2, r7, r5
 800b964:	7812      	ldrb	r2, [r2, #0]
 800b966:	4914      	ldr	r1, [pc, #80]	@ (800b9b8 <UARTEx_SetNbDataToProcess+0xb4>)
 800b968:	5c8a      	ldrb	r2, [r1, r2]
 800b96a:	435a      	muls	r2, r3
 800b96c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800b96e:	197b      	adds	r3, r7, r5
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	4a12      	ldr	r2, [pc, #72]	@ (800b9bc <UARTEx_SetNbDataToProcess+0xb8>)
 800b974:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b976:	0019      	movs	r1, r3
 800b978:	f7f4 fc62 	bl	8000240 <__divsi3>
 800b97c:	0003      	movs	r3, r0
 800b97e:	b299      	uxth	r1, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	226a      	movs	r2, #106	@ 0x6a
 800b984:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b986:	19bb      	adds	r3, r7, r6
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	193a      	adds	r2, r7, r4
 800b98c:	7812      	ldrb	r2, [r2, #0]
 800b98e:	490a      	ldr	r1, [pc, #40]	@ (800b9b8 <UARTEx_SetNbDataToProcess+0xb4>)
 800b990:	5c8a      	ldrb	r2, [r1, r2]
 800b992:	435a      	muls	r2, r3
 800b994:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800b996:	193b      	adds	r3, r7, r4
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	4a08      	ldr	r2, [pc, #32]	@ (800b9bc <UARTEx_SetNbDataToProcess+0xb8>)
 800b99c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b99e:	0019      	movs	r1, r3
 800b9a0:	f7f4 fc4e 	bl	8000240 <__divsi3>
 800b9a4:	0003      	movs	r3, r0
 800b9a6:	b299      	uxth	r1, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2268      	movs	r2, #104	@ 0x68
 800b9ac:	5299      	strh	r1, [r3, r2]
}
 800b9ae:	46c0      	nop			@ (mov r8, r8)
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	b005      	add	sp, #20
 800b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b6:	46c0      	nop			@ (mov r8, r8)
 800b9b8:	0800d094 	.word	0x0800d094
 800b9bc:	0800d09c 	.word	0x0800d09c

0800b9c0 <_strtol_l.isra.0>:
 800b9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	0017      	movs	r7, r2
 800b9c6:	001e      	movs	r6, r3
 800b9c8:	9003      	str	r0, [sp, #12]
 800b9ca:	9101      	str	r1, [sp, #4]
 800b9cc:	2b24      	cmp	r3, #36	@ 0x24
 800b9ce:	d823      	bhi.n	800ba18 <_strtol_l.isra.0+0x58>
 800b9d0:	000c      	movs	r4, r1
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d020      	beq.n	800ba18 <_strtol_l.isra.0+0x58>
 800b9d6:	4b3d      	ldr	r3, [pc, #244]	@ (800bacc <_strtol_l.isra.0+0x10c>)
 800b9d8:	2208      	movs	r2, #8
 800b9da:	469c      	mov	ip, r3
 800b9dc:	0023      	movs	r3, r4
 800b9de:	4661      	mov	r1, ip
 800b9e0:	781d      	ldrb	r5, [r3, #0]
 800b9e2:	3401      	adds	r4, #1
 800b9e4:	5d48      	ldrb	r0, [r1, r5]
 800b9e6:	0001      	movs	r1, r0
 800b9e8:	4011      	ands	r1, r2
 800b9ea:	4210      	tst	r0, r2
 800b9ec:	d1f6      	bne.n	800b9dc <_strtol_l.isra.0+0x1c>
 800b9ee:	2d2d      	cmp	r5, #45	@ 0x2d
 800b9f0:	d119      	bne.n	800ba26 <_strtol_l.isra.0+0x66>
 800b9f2:	7825      	ldrb	r5, [r4, #0]
 800b9f4:	1c9c      	adds	r4, r3, #2
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	2210      	movs	r2, #16
 800b9fc:	0033      	movs	r3, r6
 800b9fe:	4393      	bics	r3, r2
 800ba00:	d11d      	bne.n	800ba3e <_strtol_l.isra.0+0x7e>
 800ba02:	2d30      	cmp	r5, #48	@ 0x30
 800ba04:	d115      	bne.n	800ba32 <_strtol_l.isra.0+0x72>
 800ba06:	2120      	movs	r1, #32
 800ba08:	7823      	ldrb	r3, [r4, #0]
 800ba0a:	438b      	bics	r3, r1
 800ba0c:	2b58      	cmp	r3, #88	@ 0x58
 800ba0e:	d110      	bne.n	800ba32 <_strtol_l.isra.0+0x72>
 800ba10:	7865      	ldrb	r5, [r4, #1]
 800ba12:	3402      	adds	r4, #2
 800ba14:	2610      	movs	r6, #16
 800ba16:	e012      	b.n	800ba3e <_strtol_l.isra.0+0x7e>
 800ba18:	f000 f892 	bl	800bb40 <__errno>
 800ba1c:	2316      	movs	r3, #22
 800ba1e:	6003      	str	r3, [r0, #0]
 800ba20:	2000      	movs	r0, #0
 800ba22:	b005      	add	sp, #20
 800ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba26:	9100      	str	r1, [sp, #0]
 800ba28:	2d2b      	cmp	r5, #43	@ 0x2b
 800ba2a:	d1e6      	bne.n	800b9fa <_strtol_l.isra.0+0x3a>
 800ba2c:	7825      	ldrb	r5, [r4, #0]
 800ba2e:	1c9c      	adds	r4, r3, #2
 800ba30:	e7e3      	b.n	800b9fa <_strtol_l.isra.0+0x3a>
 800ba32:	2e00      	cmp	r6, #0
 800ba34:	d1ee      	bne.n	800ba14 <_strtol_l.isra.0+0x54>
 800ba36:	360a      	adds	r6, #10
 800ba38:	2d30      	cmp	r5, #48	@ 0x30
 800ba3a:	d100      	bne.n	800ba3e <_strtol_l.isra.0+0x7e>
 800ba3c:	3e02      	subs	r6, #2
 800ba3e:	4a24      	ldr	r2, [pc, #144]	@ (800bad0 <_strtol_l.isra.0+0x110>)
 800ba40:	9b00      	ldr	r3, [sp, #0]
 800ba42:	4694      	mov	ip, r2
 800ba44:	4463      	add	r3, ip
 800ba46:	0031      	movs	r1, r6
 800ba48:	0018      	movs	r0, r3
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	f7f4 fbf4 	bl	8000238 <__aeabi_uidivmod>
 800ba50:	2200      	movs	r2, #0
 800ba52:	4684      	mov	ip, r0
 800ba54:	0010      	movs	r0, r2
 800ba56:	002b      	movs	r3, r5
 800ba58:	3b30      	subs	r3, #48	@ 0x30
 800ba5a:	2b09      	cmp	r3, #9
 800ba5c:	d811      	bhi.n	800ba82 <_strtol_l.isra.0+0xc2>
 800ba5e:	001d      	movs	r5, r3
 800ba60:	42ae      	cmp	r6, r5
 800ba62:	dd1d      	ble.n	800baa0 <_strtol_l.isra.0+0xe0>
 800ba64:	1c53      	adds	r3, r2, #1
 800ba66:	d009      	beq.n	800ba7c <_strtol_l.isra.0+0xbc>
 800ba68:	2201      	movs	r2, #1
 800ba6a:	4252      	negs	r2, r2
 800ba6c:	4584      	cmp	ip, r0
 800ba6e:	d305      	bcc.n	800ba7c <_strtol_l.isra.0+0xbc>
 800ba70:	d101      	bne.n	800ba76 <_strtol_l.isra.0+0xb6>
 800ba72:	42a9      	cmp	r1, r5
 800ba74:	db11      	blt.n	800ba9a <_strtol_l.isra.0+0xda>
 800ba76:	2201      	movs	r2, #1
 800ba78:	4370      	muls	r0, r6
 800ba7a:	1828      	adds	r0, r5, r0
 800ba7c:	7825      	ldrb	r5, [r4, #0]
 800ba7e:	3401      	adds	r4, #1
 800ba80:	e7e9      	b.n	800ba56 <_strtol_l.isra.0+0x96>
 800ba82:	002b      	movs	r3, r5
 800ba84:	3b41      	subs	r3, #65	@ 0x41
 800ba86:	2b19      	cmp	r3, #25
 800ba88:	d801      	bhi.n	800ba8e <_strtol_l.isra.0+0xce>
 800ba8a:	3d37      	subs	r5, #55	@ 0x37
 800ba8c:	e7e8      	b.n	800ba60 <_strtol_l.isra.0+0xa0>
 800ba8e:	002b      	movs	r3, r5
 800ba90:	3b61      	subs	r3, #97	@ 0x61
 800ba92:	2b19      	cmp	r3, #25
 800ba94:	d804      	bhi.n	800baa0 <_strtol_l.isra.0+0xe0>
 800ba96:	3d57      	subs	r5, #87	@ 0x57
 800ba98:	e7e2      	b.n	800ba60 <_strtol_l.isra.0+0xa0>
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	4252      	negs	r2, r2
 800ba9e:	e7ed      	b.n	800ba7c <_strtol_l.isra.0+0xbc>
 800baa0:	1c53      	adds	r3, r2, #1
 800baa2:	d108      	bne.n	800bab6 <_strtol_l.isra.0+0xf6>
 800baa4:	2322      	movs	r3, #34	@ 0x22
 800baa6:	9a03      	ldr	r2, [sp, #12]
 800baa8:	9802      	ldr	r0, [sp, #8]
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	2f00      	cmp	r7, #0
 800baae:	d0b8      	beq.n	800ba22 <_strtol_l.isra.0+0x62>
 800bab0:	1e63      	subs	r3, r4, #1
 800bab2:	9301      	str	r3, [sp, #4]
 800bab4:	e007      	b.n	800bac6 <_strtol_l.isra.0+0x106>
 800bab6:	9b00      	ldr	r3, [sp, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d000      	beq.n	800babe <_strtol_l.isra.0+0xfe>
 800babc:	4240      	negs	r0, r0
 800babe:	2f00      	cmp	r7, #0
 800bac0:	d0af      	beq.n	800ba22 <_strtol_l.isra.0+0x62>
 800bac2:	2a00      	cmp	r2, #0
 800bac4:	d1f4      	bne.n	800bab0 <_strtol_l.isra.0+0xf0>
 800bac6:	9b01      	ldr	r3, [sp, #4]
 800bac8:	603b      	str	r3, [r7, #0]
 800baca:	e7aa      	b.n	800ba22 <_strtol_l.isra.0+0x62>
 800bacc:	0800d0a5 	.word	0x0800d0a5
 800bad0:	7fffffff 	.word	0x7fffffff

0800bad4 <strtol>:
 800bad4:	b510      	push	{r4, lr}
 800bad6:	4c04      	ldr	r4, [pc, #16]	@ (800bae8 <strtol+0x14>)
 800bad8:	0013      	movs	r3, r2
 800bada:	000a      	movs	r2, r1
 800badc:	0001      	movs	r1, r0
 800bade:	6820      	ldr	r0, [r4, #0]
 800bae0:	f7ff ff6e 	bl	800b9c0 <_strtol_l.isra.0>
 800bae4:	bd10      	pop	{r4, pc}
 800bae6:	46c0      	nop			@ (mov r8, r8)
 800bae8:	200009d4 	.word	0x200009d4

0800baec <siprintf>:
 800baec:	b40e      	push	{r1, r2, r3}
 800baee:	b510      	push	{r4, lr}
 800baf0:	2400      	movs	r4, #0
 800baf2:	490c      	ldr	r1, [pc, #48]	@ (800bb24 <siprintf+0x38>)
 800baf4:	b09d      	sub	sp, #116	@ 0x74
 800baf6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800baf8:	9002      	str	r0, [sp, #8]
 800bafa:	9006      	str	r0, [sp, #24]
 800bafc:	9107      	str	r1, [sp, #28]
 800bafe:	9104      	str	r1, [sp, #16]
 800bb00:	4809      	ldr	r0, [pc, #36]	@ (800bb28 <siprintf+0x3c>)
 800bb02:	490a      	ldr	r1, [pc, #40]	@ (800bb2c <siprintf+0x40>)
 800bb04:	cb04      	ldmia	r3!, {r2}
 800bb06:	9105      	str	r1, [sp, #20]
 800bb08:	6800      	ldr	r0, [r0, #0]
 800bb0a:	a902      	add	r1, sp, #8
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bb10:	f000 f9a8 	bl	800be64 <_svfiprintf_r>
 800bb14:	9b02      	ldr	r3, [sp, #8]
 800bb16:	701c      	strb	r4, [r3, #0]
 800bb18:	b01d      	add	sp, #116	@ 0x74
 800bb1a:	bc10      	pop	{r4}
 800bb1c:	bc08      	pop	{r3}
 800bb1e:	b003      	add	sp, #12
 800bb20:	4718      	bx	r3
 800bb22:	46c0      	nop			@ (mov r8, r8)
 800bb24:	7fffffff 	.word	0x7fffffff
 800bb28:	200009d4 	.word	0x200009d4
 800bb2c:	ffff0208 	.word	0xffff0208

0800bb30 <memset>:
 800bb30:	0003      	movs	r3, r0
 800bb32:	1882      	adds	r2, r0, r2
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d100      	bne.n	800bb3a <memset+0xa>
 800bb38:	4770      	bx	lr
 800bb3a:	7019      	strb	r1, [r3, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	e7f9      	b.n	800bb34 <memset+0x4>

0800bb40 <__errno>:
 800bb40:	4b01      	ldr	r3, [pc, #4]	@ (800bb48 <__errno+0x8>)
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	4770      	bx	lr
 800bb46:	46c0      	nop			@ (mov r8, r8)
 800bb48:	200009d4 	.word	0x200009d4

0800bb4c <__libc_init_array>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	2600      	movs	r6, #0
 800bb50:	4c0c      	ldr	r4, [pc, #48]	@ (800bb84 <__libc_init_array+0x38>)
 800bb52:	4d0d      	ldr	r5, [pc, #52]	@ (800bb88 <__libc_init_array+0x3c>)
 800bb54:	1b64      	subs	r4, r4, r5
 800bb56:	10a4      	asrs	r4, r4, #2
 800bb58:	42a6      	cmp	r6, r4
 800bb5a:	d109      	bne.n	800bb70 <__libc_init_array+0x24>
 800bb5c:	2600      	movs	r6, #0
 800bb5e:	f000 fd6d 	bl	800c63c <_init>
 800bb62:	4c0a      	ldr	r4, [pc, #40]	@ (800bb8c <__libc_init_array+0x40>)
 800bb64:	4d0a      	ldr	r5, [pc, #40]	@ (800bb90 <__libc_init_array+0x44>)
 800bb66:	1b64      	subs	r4, r4, r5
 800bb68:	10a4      	asrs	r4, r4, #2
 800bb6a:	42a6      	cmp	r6, r4
 800bb6c:	d105      	bne.n	800bb7a <__libc_init_array+0x2e>
 800bb6e:	bd70      	pop	{r4, r5, r6, pc}
 800bb70:	00b3      	lsls	r3, r6, #2
 800bb72:	58eb      	ldr	r3, [r5, r3]
 800bb74:	4798      	blx	r3
 800bb76:	3601      	adds	r6, #1
 800bb78:	e7ee      	b.n	800bb58 <__libc_init_array+0xc>
 800bb7a:	00b3      	lsls	r3, r6, #2
 800bb7c:	58eb      	ldr	r3, [r5, r3]
 800bb7e:	4798      	blx	r3
 800bb80:	3601      	adds	r6, #1
 800bb82:	e7f2      	b.n	800bb6a <__libc_init_array+0x1e>
 800bb84:	0800d1f0 	.word	0x0800d1f0
 800bb88:	0800d1f0 	.word	0x0800d1f0
 800bb8c:	0800d1f4 	.word	0x0800d1f4
 800bb90:	0800d1f0 	.word	0x0800d1f0

0800bb94 <__retarget_lock_acquire_recursive>:
 800bb94:	4770      	bx	lr

0800bb96 <__retarget_lock_release_recursive>:
 800bb96:	4770      	bx	lr

0800bb98 <memcpy>:
 800bb98:	2300      	movs	r3, #0
 800bb9a:	b510      	push	{r4, lr}
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d100      	bne.n	800bba2 <memcpy+0xa>
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	5ccc      	ldrb	r4, [r1, r3]
 800bba4:	54c4      	strb	r4, [r0, r3]
 800bba6:	3301      	adds	r3, #1
 800bba8:	e7f8      	b.n	800bb9c <memcpy+0x4>
	...

0800bbac <_free_r>:
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	0005      	movs	r5, r0
 800bbb0:	1e0c      	subs	r4, r1, #0
 800bbb2:	d010      	beq.n	800bbd6 <_free_r+0x2a>
 800bbb4:	3c04      	subs	r4, #4
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	da00      	bge.n	800bbbe <_free_r+0x12>
 800bbbc:	18e4      	adds	r4, r4, r3
 800bbbe:	0028      	movs	r0, r5
 800bbc0:	f000 f8e0 	bl	800bd84 <__malloc_lock>
 800bbc4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc3c <_free_r+0x90>)
 800bbc6:	6813      	ldr	r3, [r2, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d105      	bne.n	800bbd8 <_free_r+0x2c>
 800bbcc:	6063      	str	r3, [r4, #4]
 800bbce:	6014      	str	r4, [r2, #0]
 800bbd0:	0028      	movs	r0, r5
 800bbd2:	f000 f8df 	bl	800bd94 <__malloc_unlock>
 800bbd6:	bd70      	pop	{r4, r5, r6, pc}
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	d908      	bls.n	800bbee <_free_r+0x42>
 800bbdc:	6820      	ldr	r0, [r4, #0]
 800bbde:	1821      	adds	r1, r4, r0
 800bbe0:	428b      	cmp	r3, r1
 800bbe2:	d1f3      	bne.n	800bbcc <_free_r+0x20>
 800bbe4:	6819      	ldr	r1, [r3, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	1809      	adds	r1, r1, r0
 800bbea:	6021      	str	r1, [r4, #0]
 800bbec:	e7ee      	b.n	800bbcc <_free_r+0x20>
 800bbee:	001a      	movs	r2, r3
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <_free_r+0x4e>
 800bbf6:	42a3      	cmp	r3, r4
 800bbf8:	d9f9      	bls.n	800bbee <_free_r+0x42>
 800bbfa:	6811      	ldr	r1, [r2, #0]
 800bbfc:	1850      	adds	r0, r2, r1
 800bbfe:	42a0      	cmp	r0, r4
 800bc00:	d10b      	bne.n	800bc1a <_free_r+0x6e>
 800bc02:	6820      	ldr	r0, [r4, #0]
 800bc04:	1809      	adds	r1, r1, r0
 800bc06:	1850      	adds	r0, r2, r1
 800bc08:	6011      	str	r1, [r2, #0]
 800bc0a:	4283      	cmp	r3, r0
 800bc0c:	d1e0      	bne.n	800bbd0 <_free_r+0x24>
 800bc0e:	6818      	ldr	r0, [r3, #0]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	1841      	adds	r1, r0, r1
 800bc14:	6011      	str	r1, [r2, #0]
 800bc16:	6053      	str	r3, [r2, #4]
 800bc18:	e7da      	b.n	800bbd0 <_free_r+0x24>
 800bc1a:	42a0      	cmp	r0, r4
 800bc1c:	d902      	bls.n	800bc24 <_free_r+0x78>
 800bc1e:	230c      	movs	r3, #12
 800bc20:	602b      	str	r3, [r5, #0]
 800bc22:	e7d5      	b.n	800bbd0 <_free_r+0x24>
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	1821      	adds	r1, r4, r0
 800bc28:	428b      	cmp	r3, r1
 800bc2a:	d103      	bne.n	800bc34 <_free_r+0x88>
 800bc2c:	6819      	ldr	r1, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	1809      	adds	r1, r1, r0
 800bc32:	6021      	str	r1, [r4, #0]
 800bc34:	6063      	str	r3, [r4, #4]
 800bc36:	6054      	str	r4, [r2, #4]
 800bc38:	e7ca      	b.n	800bbd0 <_free_r+0x24>
 800bc3a:	46c0      	nop			@ (mov r8, r8)
 800bc3c:	200010cc 	.word	0x200010cc

0800bc40 <sbrk_aligned>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	4e0f      	ldr	r6, [pc, #60]	@ (800bc80 <sbrk_aligned+0x40>)
 800bc44:	000d      	movs	r5, r1
 800bc46:	6831      	ldr	r1, [r6, #0]
 800bc48:	0004      	movs	r4, r0
 800bc4a:	2900      	cmp	r1, #0
 800bc4c:	d102      	bne.n	800bc54 <sbrk_aligned+0x14>
 800bc4e:	f000 fb95 	bl	800c37c <_sbrk_r>
 800bc52:	6030      	str	r0, [r6, #0]
 800bc54:	0029      	movs	r1, r5
 800bc56:	0020      	movs	r0, r4
 800bc58:	f000 fb90 	bl	800c37c <_sbrk_r>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d103      	bne.n	800bc68 <sbrk_aligned+0x28>
 800bc60:	2501      	movs	r5, #1
 800bc62:	426d      	negs	r5, r5
 800bc64:	0028      	movs	r0, r5
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	2303      	movs	r3, #3
 800bc6a:	1cc5      	adds	r5, r0, #3
 800bc6c:	439d      	bics	r5, r3
 800bc6e:	42a8      	cmp	r0, r5
 800bc70:	d0f8      	beq.n	800bc64 <sbrk_aligned+0x24>
 800bc72:	1a29      	subs	r1, r5, r0
 800bc74:	0020      	movs	r0, r4
 800bc76:	f000 fb81 	bl	800c37c <_sbrk_r>
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	d1f2      	bne.n	800bc64 <sbrk_aligned+0x24>
 800bc7e:	e7ef      	b.n	800bc60 <sbrk_aligned+0x20>
 800bc80:	200010c8 	.word	0x200010c8

0800bc84 <_malloc_r>:
 800bc84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc86:	2203      	movs	r2, #3
 800bc88:	1ccb      	adds	r3, r1, #3
 800bc8a:	4393      	bics	r3, r2
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	0005      	movs	r5, r0
 800bc90:	001f      	movs	r7, r3
 800bc92:	2b0c      	cmp	r3, #12
 800bc94:	d234      	bcs.n	800bd00 <_malloc_r+0x7c>
 800bc96:	270c      	movs	r7, #12
 800bc98:	42b9      	cmp	r1, r7
 800bc9a:	d833      	bhi.n	800bd04 <_malloc_r+0x80>
 800bc9c:	0028      	movs	r0, r5
 800bc9e:	f000 f871 	bl	800bd84 <__malloc_lock>
 800bca2:	4e37      	ldr	r6, [pc, #220]	@ (800bd80 <_malloc_r+0xfc>)
 800bca4:	6833      	ldr	r3, [r6, #0]
 800bca6:	001c      	movs	r4, r3
 800bca8:	2c00      	cmp	r4, #0
 800bcaa:	d12f      	bne.n	800bd0c <_malloc_r+0x88>
 800bcac:	0039      	movs	r1, r7
 800bcae:	0028      	movs	r0, r5
 800bcb0:	f7ff ffc6 	bl	800bc40 <sbrk_aligned>
 800bcb4:	0004      	movs	r4, r0
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	d15f      	bne.n	800bd7a <_malloc_r+0xf6>
 800bcba:	6834      	ldr	r4, [r6, #0]
 800bcbc:	9400      	str	r4, [sp, #0]
 800bcbe:	9b00      	ldr	r3, [sp, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d14a      	bne.n	800bd5a <_malloc_r+0xd6>
 800bcc4:	2c00      	cmp	r4, #0
 800bcc6:	d052      	beq.n	800bd6e <_malloc_r+0xea>
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	0028      	movs	r0, r5
 800bccc:	18e3      	adds	r3, r4, r3
 800bcce:	9900      	ldr	r1, [sp, #0]
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	f000 fb53 	bl	800c37c <_sbrk_r>
 800bcd6:	9b01      	ldr	r3, [sp, #4]
 800bcd8:	4283      	cmp	r3, r0
 800bcda:	d148      	bne.n	800bd6e <_malloc_r+0xea>
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	0028      	movs	r0, r5
 800bce0:	1aff      	subs	r7, r7, r3
 800bce2:	0039      	movs	r1, r7
 800bce4:	f7ff ffac 	bl	800bc40 <sbrk_aligned>
 800bce8:	3001      	adds	r0, #1
 800bcea:	d040      	beq.n	800bd6e <_malloc_r+0xea>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	19db      	adds	r3, r3, r7
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	6833      	ldr	r3, [r6, #0]
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	2a00      	cmp	r2, #0
 800bcf8:	d133      	bne.n	800bd62 <_malloc_r+0xde>
 800bcfa:	9b00      	ldr	r3, [sp, #0]
 800bcfc:	6033      	str	r3, [r6, #0]
 800bcfe:	e019      	b.n	800bd34 <_malloc_r+0xb0>
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dac9      	bge.n	800bc98 <_malloc_r+0x14>
 800bd04:	230c      	movs	r3, #12
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	2000      	movs	r0, #0
 800bd0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd0c:	6821      	ldr	r1, [r4, #0]
 800bd0e:	1bc9      	subs	r1, r1, r7
 800bd10:	d420      	bmi.n	800bd54 <_malloc_r+0xd0>
 800bd12:	290b      	cmp	r1, #11
 800bd14:	d90a      	bls.n	800bd2c <_malloc_r+0xa8>
 800bd16:	19e2      	adds	r2, r4, r7
 800bd18:	6027      	str	r7, [r4, #0]
 800bd1a:	42a3      	cmp	r3, r4
 800bd1c:	d104      	bne.n	800bd28 <_malloc_r+0xa4>
 800bd1e:	6032      	str	r2, [r6, #0]
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	6011      	str	r1, [r2, #0]
 800bd24:	6053      	str	r3, [r2, #4]
 800bd26:	e005      	b.n	800bd34 <_malloc_r+0xb0>
 800bd28:	605a      	str	r2, [r3, #4]
 800bd2a:	e7f9      	b.n	800bd20 <_malloc_r+0x9c>
 800bd2c:	6862      	ldr	r2, [r4, #4]
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	d10e      	bne.n	800bd50 <_malloc_r+0xcc>
 800bd32:	6032      	str	r2, [r6, #0]
 800bd34:	0028      	movs	r0, r5
 800bd36:	f000 f82d 	bl	800bd94 <__malloc_unlock>
 800bd3a:	0020      	movs	r0, r4
 800bd3c:	2207      	movs	r2, #7
 800bd3e:	300b      	adds	r0, #11
 800bd40:	1d23      	adds	r3, r4, #4
 800bd42:	4390      	bics	r0, r2
 800bd44:	1ac2      	subs	r2, r0, r3
 800bd46:	4298      	cmp	r0, r3
 800bd48:	d0df      	beq.n	800bd0a <_malloc_r+0x86>
 800bd4a:	1a1b      	subs	r3, r3, r0
 800bd4c:	50a3      	str	r3, [r4, r2]
 800bd4e:	e7dc      	b.n	800bd0a <_malloc_r+0x86>
 800bd50:	605a      	str	r2, [r3, #4]
 800bd52:	e7ef      	b.n	800bd34 <_malloc_r+0xb0>
 800bd54:	0023      	movs	r3, r4
 800bd56:	6864      	ldr	r4, [r4, #4]
 800bd58:	e7a6      	b.n	800bca8 <_malloc_r+0x24>
 800bd5a:	9c00      	ldr	r4, [sp, #0]
 800bd5c:	6863      	ldr	r3, [r4, #4]
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	e7ad      	b.n	800bcbe <_malloc_r+0x3a>
 800bd62:	001a      	movs	r2, r3
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	42a3      	cmp	r3, r4
 800bd68:	d1fb      	bne.n	800bd62 <_malloc_r+0xde>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e7da      	b.n	800bd24 <_malloc_r+0xa0>
 800bd6e:	230c      	movs	r3, #12
 800bd70:	0028      	movs	r0, r5
 800bd72:	602b      	str	r3, [r5, #0]
 800bd74:	f000 f80e 	bl	800bd94 <__malloc_unlock>
 800bd78:	e7c6      	b.n	800bd08 <_malloc_r+0x84>
 800bd7a:	6007      	str	r7, [r0, #0]
 800bd7c:	e7da      	b.n	800bd34 <_malloc_r+0xb0>
 800bd7e:	46c0      	nop			@ (mov r8, r8)
 800bd80:	200010cc 	.word	0x200010cc

0800bd84 <__malloc_lock>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	4802      	ldr	r0, [pc, #8]	@ (800bd90 <__malloc_lock+0xc>)
 800bd88:	f7ff ff04 	bl	800bb94 <__retarget_lock_acquire_recursive>
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	46c0      	nop			@ (mov r8, r8)
 800bd90:	200010c4 	.word	0x200010c4

0800bd94 <__malloc_unlock>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	4802      	ldr	r0, [pc, #8]	@ (800bda0 <__malloc_unlock+0xc>)
 800bd98:	f7ff fefd 	bl	800bb96 <__retarget_lock_release_recursive>
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	46c0      	nop			@ (mov r8, r8)
 800bda0:	200010c4 	.word	0x200010c4

0800bda4 <__ssputs_r>:
 800bda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bda6:	688e      	ldr	r6, [r1, #8]
 800bda8:	b085      	sub	sp, #20
 800bdaa:	001f      	movs	r7, r3
 800bdac:	000c      	movs	r4, r1
 800bdae:	680b      	ldr	r3, [r1, #0]
 800bdb0:	9002      	str	r0, [sp, #8]
 800bdb2:	9203      	str	r2, [sp, #12]
 800bdb4:	42be      	cmp	r6, r7
 800bdb6:	d830      	bhi.n	800be1a <__ssputs_r+0x76>
 800bdb8:	210c      	movs	r1, #12
 800bdba:	5e62      	ldrsh	r2, [r4, r1]
 800bdbc:	2190      	movs	r1, #144	@ 0x90
 800bdbe:	00c9      	lsls	r1, r1, #3
 800bdc0:	420a      	tst	r2, r1
 800bdc2:	d028      	beq.n	800be16 <__ssputs_r+0x72>
 800bdc4:	2003      	movs	r0, #3
 800bdc6:	6921      	ldr	r1, [r4, #16]
 800bdc8:	1a5b      	subs	r3, r3, r1
 800bdca:	9301      	str	r3, [sp, #4]
 800bdcc:	6963      	ldr	r3, [r4, #20]
 800bdce:	4343      	muls	r3, r0
 800bdd0:	9801      	ldr	r0, [sp, #4]
 800bdd2:	0fdd      	lsrs	r5, r3, #31
 800bdd4:	18ed      	adds	r5, r5, r3
 800bdd6:	1c7b      	adds	r3, r7, #1
 800bdd8:	181b      	adds	r3, r3, r0
 800bdda:	106d      	asrs	r5, r5, #1
 800bddc:	42ab      	cmp	r3, r5
 800bdde:	d900      	bls.n	800bde2 <__ssputs_r+0x3e>
 800bde0:	001d      	movs	r5, r3
 800bde2:	0552      	lsls	r2, r2, #21
 800bde4:	d528      	bpl.n	800be38 <__ssputs_r+0x94>
 800bde6:	0029      	movs	r1, r5
 800bde8:	9802      	ldr	r0, [sp, #8]
 800bdea:	f7ff ff4b 	bl	800bc84 <_malloc_r>
 800bdee:	1e06      	subs	r6, r0, #0
 800bdf0:	d02c      	beq.n	800be4c <__ssputs_r+0xa8>
 800bdf2:	9a01      	ldr	r2, [sp, #4]
 800bdf4:	6921      	ldr	r1, [r4, #16]
 800bdf6:	f7ff fecf 	bl	800bb98 <memcpy>
 800bdfa:	89a2      	ldrh	r2, [r4, #12]
 800bdfc:	4b18      	ldr	r3, [pc, #96]	@ (800be60 <__ssputs_r+0xbc>)
 800bdfe:	401a      	ands	r2, r3
 800be00:	2380      	movs	r3, #128	@ 0x80
 800be02:	4313      	orrs	r3, r2
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	6126      	str	r6, [r4, #16]
 800be0a:	18f6      	adds	r6, r6, r3
 800be0c:	6026      	str	r6, [r4, #0]
 800be0e:	003e      	movs	r6, r7
 800be10:	6165      	str	r5, [r4, #20]
 800be12:	1aed      	subs	r5, r5, r3
 800be14:	60a5      	str	r5, [r4, #8]
 800be16:	42be      	cmp	r6, r7
 800be18:	d900      	bls.n	800be1c <__ssputs_r+0x78>
 800be1a:	003e      	movs	r6, r7
 800be1c:	0032      	movs	r2, r6
 800be1e:	9903      	ldr	r1, [sp, #12]
 800be20:	6820      	ldr	r0, [r4, #0]
 800be22:	f000 fa99 	bl	800c358 <memmove>
 800be26:	2000      	movs	r0, #0
 800be28:	68a3      	ldr	r3, [r4, #8]
 800be2a:	1b9b      	subs	r3, r3, r6
 800be2c:	60a3      	str	r3, [r4, #8]
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	199b      	adds	r3, r3, r6
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	b005      	add	sp, #20
 800be36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be38:	002a      	movs	r2, r5
 800be3a:	9802      	ldr	r0, [sp, #8]
 800be3c:	f000 fabb 	bl	800c3b6 <_realloc_r>
 800be40:	1e06      	subs	r6, r0, #0
 800be42:	d1e0      	bne.n	800be06 <__ssputs_r+0x62>
 800be44:	6921      	ldr	r1, [r4, #16]
 800be46:	9802      	ldr	r0, [sp, #8]
 800be48:	f7ff feb0 	bl	800bbac <_free_r>
 800be4c:	230c      	movs	r3, #12
 800be4e:	2001      	movs	r0, #1
 800be50:	9a02      	ldr	r2, [sp, #8]
 800be52:	4240      	negs	r0, r0
 800be54:	6013      	str	r3, [r2, #0]
 800be56:	89a2      	ldrh	r2, [r4, #12]
 800be58:	3334      	adds	r3, #52	@ 0x34
 800be5a:	4313      	orrs	r3, r2
 800be5c:	81a3      	strh	r3, [r4, #12]
 800be5e:	e7e9      	b.n	800be34 <__ssputs_r+0x90>
 800be60:	fffffb7f 	.word	0xfffffb7f

0800be64 <_svfiprintf_r>:
 800be64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be66:	b0a1      	sub	sp, #132	@ 0x84
 800be68:	9003      	str	r0, [sp, #12]
 800be6a:	001d      	movs	r5, r3
 800be6c:	898b      	ldrh	r3, [r1, #12]
 800be6e:	000f      	movs	r7, r1
 800be70:	0016      	movs	r6, r2
 800be72:	061b      	lsls	r3, r3, #24
 800be74:	d511      	bpl.n	800be9a <_svfiprintf_r+0x36>
 800be76:	690b      	ldr	r3, [r1, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10e      	bne.n	800be9a <_svfiprintf_r+0x36>
 800be7c:	2140      	movs	r1, #64	@ 0x40
 800be7e:	f7ff ff01 	bl	800bc84 <_malloc_r>
 800be82:	6038      	str	r0, [r7, #0]
 800be84:	6138      	str	r0, [r7, #16]
 800be86:	2800      	cmp	r0, #0
 800be88:	d105      	bne.n	800be96 <_svfiprintf_r+0x32>
 800be8a:	230c      	movs	r3, #12
 800be8c:	9a03      	ldr	r2, [sp, #12]
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	2001      	movs	r0, #1
 800be92:	4240      	negs	r0, r0
 800be94:	e0cf      	b.n	800c036 <_svfiprintf_r+0x1d2>
 800be96:	2340      	movs	r3, #64	@ 0x40
 800be98:	617b      	str	r3, [r7, #20]
 800be9a:	2300      	movs	r3, #0
 800be9c:	ac08      	add	r4, sp, #32
 800be9e:	6163      	str	r3, [r4, #20]
 800bea0:	3320      	adds	r3, #32
 800bea2:	7663      	strb	r3, [r4, #25]
 800bea4:	3310      	adds	r3, #16
 800bea6:	76a3      	strb	r3, [r4, #26]
 800bea8:	9507      	str	r5, [sp, #28]
 800beaa:	0035      	movs	r5, r6
 800beac:	782b      	ldrb	r3, [r5, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <_svfiprintf_r+0x52>
 800beb2:	2b25      	cmp	r3, #37	@ 0x25
 800beb4:	d148      	bne.n	800bf48 <_svfiprintf_r+0xe4>
 800beb6:	1bab      	subs	r3, r5, r6
 800beb8:	9305      	str	r3, [sp, #20]
 800beba:	42b5      	cmp	r5, r6
 800bebc:	d00b      	beq.n	800bed6 <_svfiprintf_r+0x72>
 800bebe:	0032      	movs	r2, r6
 800bec0:	0039      	movs	r1, r7
 800bec2:	9803      	ldr	r0, [sp, #12]
 800bec4:	f7ff ff6e 	bl	800bda4 <__ssputs_r>
 800bec8:	3001      	adds	r0, #1
 800beca:	d100      	bne.n	800bece <_svfiprintf_r+0x6a>
 800becc:	e0ae      	b.n	800c02c <_svfiprintf_r+0x1c8>
 800bece:	6963      	ldr	r3, [r4, #20]
 800bed0:	9a05      	ldr	r2, [sp, #20]
 800bed2:	189b      	adds	r3, r3, r2
 800bed4:	6163      	str	r3, [r4, #20]
 800bed6:	782b      	ldrb	r3, [r5, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d100      	bne.n	800bede <_svfiprintf_r+0x7a>
 800bedc:	e0a6      	b.n	800c02c <_svfiprintf_r+0x1c8>
 800bede:	2201      	movs	r2, #1
 800bee0:	2300      	movs	r3, #0
 800bee2:	4252      	negs	r2, r2
 800bee4:	6062      	str	r2, [r4, #4]
 800bee6:	a904      	add	r1, sp, #16
 800bee8:	3254      	adds	r2, #84	@ 0x54
 800beea:	1852      	adds	r2, r2, r1
 800beec:	1c6e      	adds	r6, r5, #1
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	60e3      	str	r3, [r4, #12]
 800bef2:	60a3      	str	r3, [r4, #8]
 800bef4:	7013      	strb	r3, [r2, #0]
 800bef6:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bef8:	4b54      	ldr	r3, [pc, #336]	@ (800c04c <_svfiprintf_r+0x1e8>)
 800befa:	2205      	movs	r2, #5
 800befc:	0018      	movs	r0, r3
 800befe:	7831      	ldrb	r1, [r6, #0]
 800bf00:	9305      	str	r3, [sp, #20]
 800bf02:	f000 fa4d 	bl	800c3a0 <memchr>
 800bf06:	1c75      	adds	r5, r6, #1
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d11f      	bne.n	800bf4c <_svfiprintf_r+0xe8>
 800bf0c:	6822      	ldr	r2, [r4, #0]
 800bf0e:	06d3      	lsls	r3, r2, #27
 800bf10:	d504      	bpl.n	800bf1c <_svfiprintf_r+0xb8>
 800bf12:	2353      	movs	r3, #83	@ 0x53
 800bf14:	a904      	add	r1, sp, #16
 800bf16:	185b      	adds	r3, r3, r1
 800bf18:	2120      	movs	r1, #32
 800bf1a:	7019      	strb	r1, [r3, #0]
 800bf1c:	0713      	lsls	r3, r2, #28
 800bf1e:	d504      	bpl.n	800bf2a <_svfiprintf_r+0xc6>
 800bf20:	2353      	movs	r3, #83	@ 0x53
 800bf22:	a904      	add	r1, sp, #16
 800bf24:	185b      	adds	r3, r3, r1
 800bf26:	212b      	movs	r1, #43	@ 0x2b
 800bf28:	7019      	strb	r1, [r3, #0]
 800bf2a:	7833      	ldrb	r3, [r6, #0]
 800bf2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf2e:	d016      	beq.n	800bf5e <_svfiprintf_r+0xfa>
 800bf30:	0035      	movs	r5, r6
 800bf32:	2100      	movs	r1, #0
 800bf34:	200a      	movs	r0, #10
 800bf36:	68e3      	ldr	r3, [r4, #12]
 800bf38:	782a      	ldrb	r2, [r5, #0]
 800bf3a:	1c6e      	adds	r6, r5, #1
 800bf3c:	3a30      	subs	r2, #48	@ 0x30
 800bf3e:	2a09      	cmp	r2, #9
 800bf40:	d950      	bls.n	800bfe4 <_svfiprintf_r+0x180>
 800bf42:	2900      	cmp	r1, #0
 800bf44:	d111      	bne.n	800bf6a <_svfiprintf_r+0x106>
 800bf46:	e017      	b.n	800bf78 <_svfiprintf_r+0x114>
 800bf48:	3501      	adds	r5, #1
 800bf4a:	e7af      	b.n	800beac <_svfiprintf_r+0x48>
 800bf4c:	9b05      	ldr	r3, [sp, #20]
 800bf4e:	6822      	ldr	r2, [r4, #0]
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	2301      	movs	r3, #1
 800bf54:	4083      	lsls	r3, r0
 800bf56:	4313      	orrs	r3, r2
 800bf58:	002e      	movs	r6, r5
 800bf5a:	6023      	str	r3, [r4, #0]
 800bf5c:	e7cc      	b.n	800bef8 <_svfiprintf_r+0x94>
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	1d19      	adds	r1, r3, #4
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	9107      	str	r1, [sp, #28]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	db01      	blt.n	800bf6e <_svfiprintf_r+0x10a>
 800bf6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf6c:	e004      	b.n	800bf78 <_svfiprintf_r+0x114>
 800bf6e:	425b      	negs	r3, r3
 800bf70:	60e3      	str	r3, [r4, #12]
 800bf72:	2302      	movs	r3, #2
 800bf74:	4313      	orrs	r3, r2
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	782b      	ldrb	r3, [r5, #0]
 800bf7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf7c:	d10c      	bne.n	800bf98 <_svfiprintf_r+0x134>
 800bf7e:	786b      	ldrb	r3, [r5, #1]
 800bf80:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf82:	d134      	bne.n	800bfee <_svfiprintf_r+0x18a>
 800bf84:	9b07      	ldr	r3, [sp, #28]
 800bf86:	3502      	adds	r5, #2
 800bf88:	1d1a      	adds	r2, r3, #4
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	9207      	str	r2, [sp, #28]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	da01      	bge.n	800bf96 <_svfiprintf_r+0x132>
 800bf92:	2301      	movs	r3, #1
 800bf94:	425b      	negs	r3, r3
 800bf96:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf98:	4e2d      	ldr	r6, [pc, #180]	@ (800c050 <_svfiprintf_r+0x1ec>)
 800bf9a:	2203      	movs	r2, #3
 800bf9c:	0030      	movs	r0, r6
 800bf9e:	7829      	ldrb	r1, [r5, #0]
 800bfa0:	f000 f9fe 	bl	800c3a0 <memchr>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d006      	beq.n	800bfb6 <_svfiprintf_r+0x152>
 800bfa8:	2340      	movs	r3, #64	@ 0x40
 800bfaa:	1b80      	subs	r0, r0, r6
 800bfac:	4083      	lsls	r3, r0
 800bfae:	6822      	ldr	r2, [r4, #0]
 800bfb0:	3501      	adds	r5, #1
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	6023      	str	r3, [r4, #0]
 800bfb6:	7829      	ldrb	r1, [r5, #0]
 800bfb8:	2206      	movs	r2, #6
 800bfba:	4826      	ldr	r0, [pc, #152]	@ (800c054 <_svfiprintf_r+0x1f0>)
 800bfbc:	1c6e      	adds	r6, r5, #1
 800bfbe:	7621      	strb	r1, [r4, #24]
 800bfc0:	f000 f9ee 	bl	800c3a0 <memchr>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d038      	beq.n	800c03a <_svfiprintf_r+0x1d6>
 800bfc8:	4b23      	ldr	r3, [pc, #140]	@ (800c058 <_svfiprintf_r+0x1f4>)
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d122      	bne.n	800c014 <_svfiprintf_r+0x1b0>
 800bfce:	2207      	movs	r2, #7
 800bfd0:	9b07      	ldr	r3, [sp, #28]
 800bfd2:	3307      	adds	r3, #7
 800bfd4:	4393      	bics	r3, r2
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	9307      	str	r3, [sp, #28]
 800bfda:	6963      	ldr	r3, [r4, #20]
 800bfdc:	9a04      	ldr	r2, [sp, #16]
 800bfde:	189b      	adds	r3, r3, r2
 800bfe0:	6163      	str	r3, [r4, #20]
 800bfe2:	e762      	b.n	800beaa <_svfiprintf_r+0x46>
 800bfe4:	4343      	muls	r3, r0
 800bfe6:	0035      	movs	r5, r6
 800bfe8:	2101      	movs	r1, #1
 800bfea:	189b      	adds	r3, r3, r2
 800bfec:	e7a4      	b.n	800bf38 <_svfiprintf_r+0xd4>
 800bfee:	2300      	movs	r3, #0
 800bff0:	200a      	movs	r0, #10
 800bff2:	0019      	movs	r1, r3
 800bff4:	3501      	adds	r5, #1
 800bff6:	6063      	str	r3, [r4, #4]
 800bff8:	782a      	ldrb	r2, [r5, #0]
 800bffa:	1c6e      	adds	r6, r5, #1
 800bffc:	3a30      	subs	r2, #48	@ 0x30
 800bffe:	2a09      	cmp	r2, #9
 800c000:	d903      	bls.n	800c00a <_svfiprintf_r+0x1a6>
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0c8      	beq.n	800bf98 <_svfiprintf_r+0x134>
 800c006:	9109      	str	r1, [sp, #36]	@ 0x24
 800c008:	e7c6      	b.n	800bf98 <_svfiprintf_r+0x134>
 800c00a:	4341      	muls	r1, r0
 800c00c:	0035      	movs	r5, r6
 800c00e:	2301      	movs	r3, #1
 800c010:	1889      	adds	r1, r1, r2
 800c012:	e7f1      	b.n	800bff8 <_svfiprintf_r+0x194>
 800c014:	aa07      	add	r2, sp, #28
 800c016:	9200      	str	r2, [sp, #0]
 800c018:	0021      	movs	r1, r4
 800c01a:	003a      	movs	r2, r7
 800c01c:	4b0f      	ldr	r3, [pc, #60]	@ (800c05c <_svfiprintf_r+0x1f8>)
 800c01e:	9803      	ldr	r0, [sp, #12]
 800c020:	e000      	b.n	800c024 <_svfiprintf_r+0x1c0>
 800c022:	bf00      	nop
 800c024:	9004      	str	r0, [sp, #16]
 800c026:	9b04      	ldr	r3, [sp, #16]
 800c028:	3301      	adds	r3, #1
 800c02a:	d1d6      	bne.n	800bfda <_svfiprintf_r+0x176>
 800c02c:	89bb      	ldrh	r3, [r7, #12]
 800c02e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c030:	065b      	lsls	r3, r3, #25
 800c032:	d500      	bpl.n	800c036 <_svfiprintf_r+0x1d2>
 800c034:	e72c      	b.n	800be90 <_svfiprintf_r+0x2c>
 800c036:	b021      	add	sp, #132	@ 0x84
 800c038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c03a:	aa07      	add	r2, sp, #28
 800c03c:	9200      	str	r2, [sp, #0]
 800c03e:	0021      	movs	r1, r4
 800c040:	003a      	movs	r2, r7
 800c042:	4b06      	ldr	r3, [pc, #24]	@ (800c05c <_svfiprintf_r+0x1f8>)
 800c044:	9803      	ldr	r0, [sp, #12]
 800c046:	f000 f87b 	bl	800c140 <_printf_i>
 800c04a:	e7eb      	b.n	800c024 <_svfiprintf_r+0x1c0>
 800c04c:	0800d1a5 	.word	0x0800d1a5
 800c050:	0800d1ab 	.word	0x0800d1ab
 800c054:	0800d1af 	.word	0x0800d1af
 800c058:	00000000 	.word	0x00000000
 800c05c:	0800bda5 	.word	0x0800bda5

0800c060 <_printf_common>:
 800c060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c062:	0016      	movs	r6, r2
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	688a      	ldr	r2, [r1, #8]
 800c068:	690b      	ldr	r3, [r1, #16]
 800c06a:	000c      	movs	r4, r1
 800c06c:	9000      	str	r0, [sp, #0]
 800c06e:	4293      	cmp	r3, r2
 800c070:	da00      	bge.n	800c074 <_printf_common+0x14>
 800c072:	0013      	movs	r3, r2
 800c074:	0022      	movs	r2, r4
 800c076:	6033      	str	r3, [r6, #0]
 800c078:	3243      	adds	r2, #67	@ 0x43
 800c07a:	7812      	ldrb	r2, [r2, #0]
 800c07c:	2a00      	cmp	r2, #0
 800c07e:	d001      	beq.n	800c084 <_printf_common+0x24>
 800c080:	3301      	adds	r3, #1
 800c082:	6033      	str	r3, [r6, #0]
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	069b      	lsls	r3, r3, #26
 800c088:	d502      	bpl.n	800c090 <_printf_common+0x30>
 800c08a:	6833      	ldr	r3, [r6, #0]
 800c08c:	3302      	adds	r3, #2
 800c08e:	6033      	str	r3, [r6, #0]
 800c090:	6822      	ldr	r2, [r4, #0]
 800c092:	2306      	movs	r3, #6
 800c094:	0015      	movs	r5, r2
 800c096:	401d      	ands	r5, r3
 800c098:	421a      	tst	r2, r3
 800c09a:	d027      	beq.n	800c0ec <_printf_common+0x8c>
 800c09c:	0023      	movs	r3, r4
 800c09e:	3343      	adds	r3, #67	@ 0x43
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	1e5a      	subs	r2, r3, #1
 800c0a4:	4193      	sbcs	r3, r2
 800c0a6:	6822      	ldr	r2, [r4, #0]
 800c0a8:	0692      	lsls	r2, r2, #26
 800c0aa:	d430      	bmi.n	800c10e <_printf_common+0xae>
 800c0ac:	0022      	movs	r2, r4
 800c0ae:	9901      	ldr	r1, [sp, #4]
 800c0b0:	9800      	ldr	r0, [sp, #0]
 800c0b2:	9d08      	ldr	r5, [sp, #32]
 800c0b4:	3243      	adds	r2, #67	@ 0x43
 800c0b6:	47a8      	blx	r5
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d025      	beq.n	800c108 <_printf_common+0xa8>
 800c0bc:	2206      	movs	r2, #6
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	2500      	movs	r5, #0
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	2b04      	cmp	r3, #4
 800c0c6:	d105      	bne.n	800c0d4 <_printf_common+0x74>
 800c0c8:	6833      	ldr	r3, [r6, #0]
 800c0ca:	68e5      	ldr	r5, [r4, #12]
 800c0cc:	1aed      	subs	r5, r5, r3
 800c0ce:	43eb      	mvns	r3, r5
 800c0d0:	17db      	asrs	r3, r3, #31
 800c0d2:	401d      	ands	r5, r3
 800c0d4:	68a3      	ldr	r3, [r4, #8]
 800c0d6:	6922      	ldr	r2, [r4, #16]
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	dd01      	ble.n	800c0e0 <_printf_common+0x80>
 800c0dc:	1a9b      	subs	r3, r3, r2
 800c0de:	18ed      	adds	r5, r5, r3
 800c0e0:	2600      	movs	r6, #0
 800c0e2:	42b5      	cmp	r5, r6
 800c0e4:	d120      	bne.n	800c128 <_printf_common+0xc8>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e010      	b.n	800c10c <_printf_common+0xac>
 800c0ea:	3501      	adds	r5, #1
 800c0ec:	68e3      	ldr	r3, [r4, #12]
 800c0ee:	6832      	ldr	r2, [r6, #0]
 800c0f0:	1a9b      	subs	r3, r3, r2
 800c0f2:	42ab      	cmp	r3, r5
 800c0f4:	ddd2      	ble.n	800c09c <_printf_common+0x3c>
 800c0f6:	0022      	movs	r2, r4
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	9901      	ldr	r1, [sp, #4]
 800c0fc:	9800      	ldr	r0, [sp, #0]
 800c0fe:	9f08      	ldr	r7, [sp, #32]
 800c100:	3219      	adds	r2, #25
 800c102:	47b8      	blx	r7
 800c104:	3001      	adds	r0, #1
 800c106:	d1f0      	bne.n	800c0ea <_printf_common+0x8a>
 800c108:	2001      	movs	r0, #1
 800c10a:	4240      	negs	r0, r0
 800c10c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c10e:	2030      	movs	r0, #48	@ 0x30
 800c110:	18e1      	adds	r1, r4, r3
 800c112:	3143      	adds	r1, #67	@ 0x43
 800c114:	7008      	strb	r0, [r1, #0]
 800c116:	0021      	movs	r1, r4
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	3145      	adds	r1, #69	@ 0x45
 800c11c:	7809      	ldrb	r1, [r1, #0]
 800c11e:	18a2      	adds	r2, r4, r2
 800c120:	3243      	adds	r2, #67	@ 0x43
 800c122:	3302      	adds	r3, #2
 800c124:	7011      	strb	r1, [r2, #0]
 800c126:	e7c1      	b.n	800c0ac <_printf_common+0x4c>
 800c128:	0022      	movs	r2, r4
 800c12a:	2301      	movs	r3, #1
 800c12c:	9901      	ldr	r1, [sp, #4]
 800c12e:	9800      	ldr	r0, [sp, #0]
 800c130:	9f08      	ldr	r7, [sp, #32]
 800c132:	321a      	adds	r2, #26
 800c134:	47b8      	blx	r7
 800c136:	3001      	adds	r0, #1
 800c138:	d0e6      	beq.n	800c108 <_printf_common+0xa8>
 800c13a:	3601      	adds	r6, #1
 800c13c:	e7d1      	b.n	800c0e2 <_printf_common+0x82>
	...

0800c140 <_printf_i>:
 800c140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c142:	b08b      	sub	sp, #44	@ 0x2c
 800c144:	9206      	str	r2, [sp, #24]
 800c146:	000a      	movs	r2, r1
 800c148:	3243      	adds	r2, #67	@ 0x43
 800c14a:	9307      	str	r3, [sp, #28]
 800c14c:	9005      	str	r0, [sp, #20]
 800c14e:	9203      	str	r2, [sp, #12]
 800c150:	7e0a      	ldrb	r2, [r1, #24]
 800c152:	000c      	movs	r4, r1
 800c154:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c156:	2a78      	cmp	r2, #120	@ 0x78
 800c158:	d809      	bhi.n	800c16e <_printf_i+0x2e>
 800c15a:	2a62      	cmp	r2, #98	@ 0x62
 800c15c:	d80b      	bhi.n	800c176 <_printf_i+0x36>
 800c15e:	2a00      	cmp	r2, #0
 800c160:	d100      	bne.n	800c164 <_printf_i+0x24>
 800c162:	e0ba      	b.n	800c2da <_printf_i+0x19a>
 800c164:	497a      	ldr	r1, [pc, #488]	@ (800c350 <_printf_i+0x210>)
 800c166:	9104      	str	r1, [sp, #16]
 800c168:	2a58      	cmp	r2, #88	@ 0x58
 800c16a:	d100      	bne.n	800c16e <_printf_i+0x2e>
 800c16c:	e08e      	b.n	800c28c <_printf_i+0x14c>
 800c16e:	0025      	movs	r5, r4
 800c170:	3542      	adds	r5, #66	@ 0x42
 800c172:	702a      	strb	r2, [r5, #0]
 800c174:	e022      	b.n	800c1bc <_printf_i+0x7c>
 800c176:	0010      	movs	r0, r2
 800c178:	3863      	subs	r0, #99	@ 0x63
 800c17a:	2815      	cmp	r0, #21
 800c17c:	d8f7      	bhi.n	800c16e <_printf_i+0x2e>
 800c17e:	f7f3 ffcb 	bl	8000118 <__gnu_thumb1_case_shi>
 800c182:	0016      	.short	0x0016
 800c184:	fff6001f 	.word	0xfff6001f
 800c188:	fff6fff6 	.word	0xfff6fff6
 800c18c:	001ffff6 	.word	0x001ffff6
 800c190:	fff6fff6 	.word	0xfff6fff6
 800c194:	fff6fff6 	.word	0xfff6fff6
 800c198:	0036009f 	.word	0x0036009f
 800c19c:	fff6007e 	.word	0xfff6007e
 800c1a0:	00b0fff6 	.word	0x00b0fff6
 800c1a4:	0036fff6 	.word	0x0036fff6
 800c1a8:	fff6fff6 	.word	0xfff6fff6
 800c1ac:	0082      	.short	0x0082
 800c1ae:	0025      	movs	r5, r4
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	3542      	adds	r5, #66	@ 0x42
 800c1b4:	1d11      	adds	r1, r2, #4
 800c1b6:	6019      	str	r1, [r3, #0]
 800c1b8:	6813      	ldr	r3, [r2, #0]
 800c1ba:	702b      	strb	r3, [r5, #0]
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e09e      	b.n	800c2fe <_printf_i+0x1be>
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	6809      	ldr	r1, [r1, #0]
 800c1c4:	1d02      	adds	r2, r0, #4
 800c1c6:	060d      	lsls	r5, r1, #24
 800c1c8:	d50b      	bpl.n	800c1e2 <_printf_i+0xa2>
 800c1ca:	6806      	ldr	r6, [r0, #0]
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	da03      	bge.n	800c1da <_printf_i+0x9a>
 800c1d2:	232d      	movs	r3, #45	@ 0x2d
 800c1d4:	9a03      	ldr	r2, [sp, #12]
 800c1d6:	4276      	negs	r6, r6
 800c1d8:	7013      	strb	r3, [r2, #0]
 800c1da:	4b5d      	ldr	r3, [pc, #372]	@ (800c350 <_printf_i+0x210>)
 800c1dc:	270a      	movs	r7, #10
 800c1de:	9304      	str	r3, [sp, #16]
 800c1e0:	e018      	b.n	800c214 <_printf_i+0xd4>
 800c1e2:	6806      	ldr	r6, [r0, #0]
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	0649      	lsls	r1, r1, #25
 800c1e8:	d5f1      	bpl.n	800c1ce <_printf_i+0x8e>
 800c1ea:	b236      	sxth	r6, r6
 800c1ec:	e7ef      	b.n	800c1ce <_printf_i+0x8e>
 800c1ee:	6808      	ldr	r0, [r1, #0]
 800c1f0:	6819      	ldr	r1, [r3, #0]
 800c1f2:	c940      	ldmia	r1!, {r6}
 800c1f4:	0605      	lsls	r5, r0, #24
 800c1f6:	d402      	bmi.n	800c1fe <_printf_i+0xbe>
 800c1f8:	0640      	lsls	r0, r0, #25
 800c1fa:	d500      	bpl.n	800c1fe <_printf_i+0xbe>
 800c1fc:	b2b6      	uxth	r6, r6
 800c1fe:	6019      	str	r1, [r3, #0]
 800c200:	4b53      	ldr	r3, [pc, #332]	@ (800c350 <_printf_i+0x210>)
 800c202:	270a      	movs	r7, #10
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	2a6f      	cmp	r2, #111	@ 0x6f
 800c208:	d100      	bne.n	800c20c <_printf_i+0xcc>
 800c20a:	3f02      	subs	r7, #2
 800c20c:	0023      	movs	r3, r4
 800c20e:	2200      	movs	r2, #0
 800c210:	3343      	adds	r3, #67	@ 0x43
 800c212:	701a      	strb	r2, [r3, #0]
 800c214:	6863      	ldr	r3, [r4, #4]
 800c216:	60a3      	str	r3, [r4, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	db06      	blt.n	800c22a <_printf_i+0xea>
 800c21c:	2104      	movs	r1, #4
 800c21e:	6822      	ldr	r2, [r4, #0]
 800c220:	9d03      	ldr	r5, [sp, #12]
 800c222:	438a      	bics	r2, r1
 800c224:	6022      	str	r2, [r4, #0]
 800c226:	4333      	orrs	r3, r6
 800c228:	d00c      	beq.n	800c244 <_printf_i+0x104>
 800c22a:	9d03      	ldr	r5, [sp, #12]
 800c22c:	0030      	movs	r0, r6
 800c22e:	0039      	movs	r1, r7
 800c230:	f7f4 f802 	bl	8000238 <__aeabi_uidivmod>
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	3d01      	subs	r5, #1
 800c238:	5c5b      	ldrb	r3, [r3, r1]
 800c23a:	702b      	strb	r3, [r5, #0]
 800c23c:	0033      	movs	r3, r6
 800c23e:	0006      	movs	r6, r0
 800c240:	429f      	cmp	r7, r3
 800c242:	d9f3      	bls.n	800c22c <_printf_i+0xec>
 800c244:	2f08      	cmp	r7, #8
 800c246:	d109      	bne.n	800c25c <_printf_i+0x11c>
 800c248:	6823      	ldr	r3, [r4, #0]
 800c24a:	07db      	lsls	r3, r3, #31
 800c24c:	d506      	bpl.n	800c25c <_printf_i+0x11c>
 800c24e:	6862      	ldr	r2, [r4, #4]
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	429a      	cmp	r2, r3
 800c254:	dc02      	bgt.n	800c25c <_printf_i+0x11c>
 800c256:	2330      	movs	r3, #48	@ 0x30
 800c258:	3d01      	subs	r5, #1
 800c25a:	702b      	strb	r3, [r5, #0]
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	1b5b      	subs	r3, r3, r5
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	9b07      	ldr	r3, [sp, #28]
 800c264:	0021      	movs	r1, r4
 800c266:	9300      	str	r3, [sp, #0]
 800c268:	9805      	ldr	r0, [sp, #20]
 800c26a:	9b06      	ldr	r3, [sp, #24]
 800c26c:	aa09      	add	r2, sp, #36	@ 0x24
 800c26e:	f7ff fef7 	bl	800c060 <_printf_common>
 800c272:	3001      	adds	r0, #1
 800c274:	d148      	bne.n	800c308 <_printf_i+0x1c8>
 800c276:	2001      	movs	r0, #1
 800c278:	4240      	negs	r0, r0
 800c27a:	b00b      	add	sp, #44	@ 0x2c
 800c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c27e:	2220      	movs	r2, #32
 800c280:	6809      	ldr	r1, [r1, #0]
 800c282:	430a      	orrs	r2, r1
 800c284:	6022      	str	r2, [r4, #0]
 800c286:	2278      	movs	r2, #120	@ 0x78
 800c288:	4932      	ldr	r1, [pc, #200]	@ (800c354 <_printf_i+0x214>)
 800c28a:	9104      	str	r1, [sp, #16]
 800c28c:	0021      	movs	r1, r4
 800c28e:	3145      	adds	r1, #69	@ 0x45
 800c290:	700a      	strb	r2, [r1, #0]
 800c292:	6819      	ldr	r1, [r3, #0]
 800c294:	6822      	ldr	r2, [r4, #0]
 800c296:	c940      	ldmia	r1!, {r6}
 800c298:	0610      	lsls	r0, r2, #24
 800c29a:	d402      	bmi.n	800c2a2 <_printf_i+0x162>
 800c29c:	0650      	lsls	r0, r2, #25
 800c29e:	d500      	bpl.n	800c2a2 <_printf_i+0x162>
 800c2a0:	b2b6      	uxth	r6, r6
 800c2a2:	6019      	str	r1, [r3, #0]
 800c2a4:	07d3      	lsls	r3, r2, #31
 800c2a6:	d502      	bpl.n	800c2ae <_printf_i+0x16e>
 800c2a8:	2320      	movs	r3, #32
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	2e00      	cmp	r6, #0
 800c2b0:	d001      	beq.n	800c2b6 <_printf_i+0x176>
 800c2b2:	2710      	movs	r7, #16
 800c2b4:	e7aa      	b.n	800c20c <_printf_i+0xcc>
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	4393      	bics	r3, r2
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	e7f8      	b.n	800c2b2 <_printf_i+0x172>
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	680d      	ldr	r5, [r1, #0]
 800c2c4:	1d10      	adds	r0, r2, #4
 800c2c6:	6949      	ldr	r1, [r1, #20]
 800c2c8:	6018      	str	r0, [r3, #0]
 800c2ca:	6813      	ldr	r3, [r2, #0]
 800c2cc:	062e      	lsls	r6, r5, #24
 800c2ce:	d501      	bpl.n	800c2d4 <_printf_i+0x194>
 800c2d0:	6019      	str	r1, [r3, #0]
 800c2d2:	e002      	b.n	800c2da <_printf_i+0x19a>
 800c2d4:	066d      	lsls	r5, r5, #25
 800c2d6:	d5fb      	bpl.n	800c2d0 <_printf_i+0x190>
 800c2d8:	8019      	strh	r1, [r3, #0]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	9d03      	ldr	r5, [sp, #12]
 800c2de:	6123      	str	r3, [r4, #16]
 800c2e0:	e7bf      	b.n	800c262 <_printf_i+0x122>
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	1d11      	adds	r1, r2, #4
 800c2e6:	6019      	str	r1, [r3, #0]
 800c2e8:	6815      	ldr	r5, [r2, #0]
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	0028      	movs	r0, r5
 800c2ee:	6862      	ldr	r2, [r4, #4]
 800c2f0:	f000 f856 	bl	800c3a0 <memchr>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d001      	beq.n	800c2fc <_printf_i+0x1bc>
 800c2f8:	1b40      	subs	r0, r0, r5
 800c2fa:	6060      	str	r0, [r4, #4]
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	6123      	str	r3, [r4, #16]
 800c300:	2300      	movs	r3, #0
 800c302:	9a03      	ldr	r2, [sp, #12]
 800c304:	7013      	strb	r3, [r2, #0]
 800c306:	e7ac      	b.n	800c262 <_printf_i+0x122>
 800c308:	002a      	movs	r2, r5
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	9906      	ldr	r1, [sp, #24]
 800c30e:	9805      	ldr	r0, [sp, #20]
 800c310:	9d07      	ldr	r5, [sp, #28]
 800c312:	47a8      	blx	r5
 800c314:	3001      	adds	r0, #1
 800c316:	d0ae      	beq.n	800c276 <_printf_i+0x136>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	079b      	lsls	r3, r3, #30
 800c31c:	d415      	bmi.n	800c34a <_printf_i+0x20a>
 800c31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c320:	68e0      	ldr	r0, [r4, #12]
 800c322:	4298      	cmp	r0, r3
 800c324:	daa9      	bge.n	800c27a <_printf_i+0x13a>
 800c326:	0018      	movs	r0, r3
 800c328:	e7a7      	b.n	800c27a <_printf_i+0x13a>
 800c32a:	0022      	movs	r2, r4
 800c32c:	2301      	movs	r3, #1
 800c32e:	9906      	ldr	r1, [sp, #24]
 800c330:	9805      	ldr	r0, [sp, #20]
 800c332:	9e07      	ldr	r6, [sp, #28]
 800c334:	3219      	adds	r2, #25
 800c336:	47b0      	blx	r6
 800c338:	3001      	adds	r0, #1
 800c33a:	d09c      	beq.n	800c276 <_printf_i+0x136>
 800c33c:	3501      	adds	r5, #1
 800c33e:	68e3      	ldr	r3, [r4, #12]
 800c340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c342:	1a9b      	subs	r3, r3, r2
 800c344:	42ab      	cmp	r3, r5
 800c346:	dcf0      	bgt.n	800c32a <_printf_i+0x1ea>
 800c348:	e7e9      	b.n	800c31e <_printf_i+0x1de>
 800c34a:	2500      	movs	r5, #0
 800c34c:	e7f7      	b.n	800c33e <_printf_i+0x1fe>
 800c34e:	46c0      	nop			@ (mov r8, r8)
 800c350:	0800d1b6 	.word	0x0800d1b6
 800c354:	0800d1c7 	.word	0x0800d1c7

0800c358 <memmove>:
 800c358:	b510      	push	{r4, lr}
 800c35a:	4288      	cmp	r0, r1
 800c35c:	d902      	bls.n	800c364 <memmove+0xc>
 800c35e:	188b      	adds	r3, r1, r2
 800c360:	4298      	cmp	r0, r3
 800c362:	d308      	bcc.n	800c376 <memmove+0x1e>
 800c364:	2300      	movs	r3, #0
 800c366:	429a      	cmp	r2, r3
 800c368:	d007      	beq.n	800c37a <memmove+0x22>
 800c36a:	5ccc      	ldrb	r4, [r1, r3]
 800c36c:	54c4      	strb	r4, [r0, r3]
 800c36e:	3301      	adds	r3, #1
 800c370:	e7f9      	b.n	800c366 <memmove+0xe>
 800c372:	5c8b      	ldrb	r3, [r1, r2]
 800c374:	5483      	strb	r3, [r0, r2]
 800c376:	3a01      	subs	r2, #1
 800c378:	d2fb      	bcs.n	800c372 <memmove+0x1a>
 800c37a:	bd10      	pop	{r4, pc}

0800c37c <_sbrk_r>:
 800c37c:	2300      	movs	r3, #0
 800c37e:	b570      	push	{r4, r5, r6, lr}
 800c380:	4d06      	ldr	r5, [pc, #24]	@ (800c39c <_sbrk_r+0x20>)
 800c382:	0004      	movs	r4, r0
 800c384:	0008      	movs	r0, r1
 800c386:	602b      	str	r3, [r5, #0]
 800c388:	f7fa fc4e 	bl	8006c28 <_sbrk>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d103      	bne.n	800c398 <_sbrk_r+0x1c>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d000      	beq.n	800c398 <_sbrk_r+0x1c>
 800c396:	6023      	str	r3, [r4, #0]
 800c398:	bd70      	pop	{r4, r5, r6, pc}
 800c39a:	46c0      	nop			@ (mov r8, r8)
 800c39c:	200010c0 	.word	0x200010c0

0800c3a0 <memchr>:
 800c3a0:	b2c9      	uxtb	r1, r1
 800c3a2:	1882      	adds	r2, r0, r2
 800c3a4:	4290      	cmp	r0, r2
 800c3a6:	d101      	bne.n	800c3ac <memchr+0xc>
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	4770      	bx	lr
 800c3ac:	7803      	ldrb	r3, [r0, #0]
 800c3ae:	428b      	cmp	r3, r1
 800c3b0:	d0fb      	beq.n	800c3aa <memchr+0xa>
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	e7f6      	b.n	800c3a4 <memchr+0x4>

0800c3b6 <_realloc_r>:
 800c3b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3b8:	0006      	movs	r6, r0
 800c3ba:	000c      	movs	r4, r1
 800c3bc:	0015      	movs	r5, r2
 800c3be:	2900      	cmp	r1, #0
 800c3c0:	d105      	bne.n	800c3ce <_realloc_r+0x18>
 800c3c2:	0011      	movs	r1, r2
 800c3c4:	f7ff fc5e 	bl	800bc84 <_malloc_r>
 800c3c8:	0004      	movs	r4, r0
 800c3ca:	0020      	movs	r0, r4
 800c3cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	d103      	bne.n	800c3da <_realloc_r+0x24>
 800c3d2:	f7ff fbeb 	bl	800bbac <_free_r>
 800c3d6:	002c      	movs	r4, r5
 800c3d8:	e7f7      	b.n	800c3ca <_realloc_r+0x14>
 800c3da:	f000 f81c 	bl	800c416 <_malloc_usable_size_r>
 800c3de:	0007      	movs	r7, r0
 800c3e0:	4285      	cmp	r5, r0
 800c3e2:	d802      	bhi.n	800c3ea <_realloc_r+0x34>
 800c3e4:	0843      	lsrs	r3, r0, #1
 800c3e6:	42ab      	cmp	r3, r5
 800c3e8:	d3ef      	bcc.n	800c3ca <_realloc_r+0x14>
 800c3ea:	0029      	movs	r1, r5
 800c3ec:	0030      	movs	r0, r6
 800c3ee:	f7ff fc49 	bl	800bc84 <_malloc_r>
 800c3f2:	9001      	str	r0, [sp, #4]
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d101      	bne.n	800c3fc <_realloc_r+0x46>
 800c3f8:	9c01      	ldr	r4, [sp, #4]
 800c3fa:	e7e6      	b.n	800c3ca <_realloc_r+0x14>
 800c3fc:	002a      	movs	r2, r5
 800c3fe:	42bd      	cmp	r5, r7
 800c400:	d900      	bls.n	800c404 <_realloc_r+0x4e>
 800c402:	003a      	movs	r2, r7
 800c404:	0021      	movs	r1, r4
 800c406:	9801      	ldr	r0, [sp, #4]
 800c408:	f7ff fbc6 	bl	800bb98 <memcpy>
 800c40c:	0021      	movs	r1, r4
 800c40e:	0030      	movs	r0, r6
 800c410:	f7ff fbcc 	bl	800bbac <_free_r>
 800c414:	e7f0      	b.n	800c3f8 <_realloc_r+0x42>

0800c416 <_malloc_usable_size_r>:
 800c416:	1f0b      	subs	r3, r1, #4
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	1f18      	subs	r0, r3, #4
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	da01      	bge.n	800c424 <_malloc_usable_size_r+0xe>
 800c420:	580b      	ldr	r3, [r1, r0]
 800c422:	18c0      	adds	r0, r0, r3
 800c424:	4770      	bx	lr

0800c426 <sqrt>:
 800c426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c428:	0004      	movs	r4, r0
 800c42a:	000d      	movs	r5, r1
 800c42c:	f000 f822 	bl	800c474 <__ieee754_sqrt>
 800c430:	0022      	movs	r2, r4
 800c432:	0006      	movs	r6, r0
 800c434:	000f      	movs	r7, r1
 800c436:	002b      	movs	r3, r5
 800c438:	0020      	movs	r0, r4
 800c43a:	0029      	movs	r1, r5
 800c43c:	f7f7 f8aa 	bl	8003594 <__aeabi_dcmpun>
 800c440:	2800      	cmp	r0, #0
 800c442:	d113      	bne.n	800c46c <sqrt+0x46>
 800c444:	2200      	movs	r2, #0
 800c446:	2300      	movs	r3, #0
 800c448:	0020      	movs	r0, r4
 800c44a:	0029      	movs	r1, r5
 800c44c:	f7f3 fffa 	bl	8000444 <__aeabi_dcmplt>
 800c450:	2800      	cmp	r0, #0
 800c452:	d00b      	beq.n	800c46c <sqrt+0x46>
 800c454:	f7ff fb74 	bl	800bb40 <__errno>
 800c458:	2321      	movs	r3, #33	@ 0x21
 800c45a:	2200      	movs	r2, #0
 800c45c:	6003      	str	r3, [r0, #0]
 800c45e:	2300      	movs	r3, #0
 800c460:	0010      	movs	r0, r2
 800c462:	0019      	movs	r1, r3
 800c464:	f7f5 fd6c 	bl	8001f40 <__aeabi_ddiv>
 800c468:	0006      	movs	r6, r0
 800c46a:	000f      	movs	r7, r1
 800c46c:	0030      	movs	r0, r6
 800c46e:	0039      	movs	r1, r7
 800c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c474 <__ieee754_sqrt>:
 800c474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c476:	000a      	movs	r2, r1
 800c478:	000d      	movs	r5, r1
 800c47a:	496b      	ldr	r1, [pc, #428]	@ (800c628 <__ieee754_sqrt+0x1b4>)
 800c47c:	0004      	movs	r4, r0
 800c47e:	0003      	movs	r3, r0
 800c480:	0008      	movs	r0, r1
 800c482:	b087      	sub	sp, #28
 800c484:	4028      	ands	r0, r5
 800c486:	4288      	cmp	r0, r1
 800c488:	d111      	bne.n	800c4ae <__ieee754_sqrt+0x3a>
 800c48a:	0022      	movs	r2, r4
 800c48c:	002b      	movs	r3, r5
 800c48e:	0020      	movs	r0, r4
 800c490:	0029      	movs	r1, r5
 800c492:	f7f6 f98f 	bl	80027b4 <__aeabi_dmul>
 800c496:	0002      	movs	r2, r0
 800c498:	000b      	movs	r3, r1
 800c49a:	0020      	movs	r0, r4
 800c49c:	0029      	movs	r1, r5
 800c49e:	f7f5 f989 	bl	80017b4 <__aeabi_dadd>
 800c4a2:	0004      	movs	r4, r0
 800c4a4:	000d      	movs	r5, r1
 800c4a6:	0020      	movs	r0, r4
 800c4a8:	0029      	movs	r1, r5
 800c4aa:	b007      	add	sp, #28
 800c4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ae:	2d00      	cmp	r5, #0
 800c4b0:	dc11      	bgt.n	800c4d6 <__ieee754_sqrt+0x62>
 800c4b2:	0069      	lsls	r1, r5, #1
 800c4b4:	0849      	lsrs	r1, r1, #1
 800c4b6:	4321      	orrs	r1, r4
 800c4b8:	d0f5      	beq.n	800c4a6 <__ieee754_sqrt+0x32>
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	4285      	cmp	r5, r0
 800c4be:	d010      	beq.n	800c4e2 <__ieee754_sqrt+0x6e>
 800c4c0:	0022      	movs	r2, r4
 800c4c2:	002b      	movs	r3, r5
 800c4c4:	0020      	movs	r0, r4
 800c4c6:	0029      	movs	r1, r5
 800c4c8:	f7f6 fc5a 	bl	8002d80 <__aeabi_dsub>
 800c4cc:	0002      	movs	r2, r0
 800c4ce:	000b      	movs	r3, r1
 800c4d0:	f7f5 fd36 	bl	8001f40 <__aeabi_ddiv>
 800c4d4:	e7e5      	b.n	800c4a2 <__ieee754_sqrt+0x2e>
 800c4d6:	1528      	asrs	r0, r5, #20
 800c4d8:	d115      	bne.n	800c506 <__ieee754_sqrt+0x92>
 800c4da:	2480      	movs	r4, #128	@ 0x80
 800c4dc:	2100      	movs	r1, #0
 800c4de:	0364      	lsls	r4, r4, #13
 800c4e0:	e007      	b.n	800c4f2 <__ieee754_sqrt+0x7e>
 800c4e2:	0ada      	lsrs	r2, r3, #11
 800c4e4:	3815      	subs	r0, #21
 800c4e6:	055b      	lsls	r3, r3, #21
 800c4e8:	2a00      	cmp	r2, #0
 800c4ea:	d0fa      	beq.n	800c4e2 <__ieee754_sqrt+0x6e>
 800c4ec:	e7f5      	b.n	800c4da <__ieee754_sqrt+0x66>
 800c4ee:	0052      	lsls	r2, r2, #1
 800c4f0:	3101      	adds	r1, #1
 800c4f2:	4222      	tst	r2, r4
 800c4f4:	d0fb      	beq.n	800c4ee <__ieee754_sqrt+0x7a>
 800c4f6:	1e4c      	subs	r4, r1, #1
 800c4f8:	1b00      	subs	r0, r0, r4
 800c4fa:	2420      	movs	r4, #32
 800c4fc:	001d      	movs	r5, r3
 800c4fe:	1a64      	subs	r4, r4, r1
 800c500:	40e5      	lsrs	r5, r4
 800c502:	408b      	lsls	r3, r1
 800c504:	432a      	orrs	r2, r5
 800c506:	4949      	ldr	r1, [pc, #292]	@ (800c62c <__ieee754_sqrt+0x1b8>)
 800c508:	0312      	lsls	r2, r2, #12
 800c50a:	1844      	adds	r4, r0, r1
 800c50c:	2180      	movs	r1, #128	@ 0x80
 800c50e:	0b12      	lsrs	r2, r2, #12
 800c510:	0349      	lsls	r1, r1, #13
 800c512:	4311      	orrs	r1, r2
 800c514:	07c0      	lsls	r0, r0, #31
 800c516:	d403      	bmi.n	800c520 <__ieee754_sqrt+0xac>
 800c518:	0fda      	lsrs	r2, r3, #31
 800c51a:	0049      	lsls	r1, r1, #1
 800c51c:	1851      	adds	r1, r2, r1
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	2500      	movs	r5, #0
 800c522:	1062      	asrs	r2, r4, #1
 800c524:	0049      	lsls	r1, r1, #1
 800c526:	2480      	movs	r4, #128	@ 0x80
 800c528:	9205      	str	r2, [sp, #20]
 800c52a:	0fda      	lsrs	r2, r3, #31
 800c52c:	1852      	adds	r2, r2, r1
 800c52e:	2016      	movs	r0, #22
 800c530:	0029      	movs	r1, r5
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	03a4      	lsls	r4, r4, #14
 800c536:	190e      	adds	r6, r1, r4
 800c538:	4296      	cmp	r6, r2
 800c53a:	dc02      	bgt.n	800c542 <__ieee754_sqrt+0xce>
 800c53c:	1931      	adds	r1, r6, r4
 800c53e:	1b92      	subs	r2, r2, r6
 800c540:	192d      	adds	r5, r5, r4
 800c542:	0fde      	lsrs	r6, r3, #31
 800c544:	0052      	lsls	r2, r2, #1
 800c546:	3801      	subs	r0, #1
 800c548:	1992      	adds	r2, r2, r6
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	0864      	lsrs	r4, r4, #1
 800c54e:	2800      	cmp	r0, #0
 800c550:	d1f1      	bne.n	800c536 <__ieee754_sqrt+0xc2>
 800c552:	2620      	movs	r6, #32
 800c554:	2780      	movs	r7, #128	@ 0x80
 800c556:	0004      	movs	r4, r0
 800c558:	9604      	str	r6, [sp, #16]
 800c55a:	063f      	lsls	r7, r7, #24
 800c55c:	183e      	adds	r6, r7, r0
 800c55e:	46b4      	mov	ip, r6
 800c560:	428a      	cmp	r2, r1
 800c562:	dc02      	bgt.n	800c56a <__ieee754_sqrt+0xf6>
 800c564:	d114      	bne.n	800c590 <__ieee754_sqrt+0x11c>
 800c566:	429e      	cmp	r6, r3
 800c568:	d812      	bhi.n	800c590 <__ieee754_sqrt+0x11c>
 800c56a:	4660      	mov	r0, ip
 800c56c:	4666      	mov	r6, ip
 800c56e:	19c0      	adds	r0, r0, r7
 800c570:	9100      	str	r1, [sp, #0]
 800c572:	2e00      	cmp	r6, #0
 800c574:	da03      	bge.n	800c57e <__ieee754_sqrt+0x10a>
 800c576:	43c6      	mvns	r6, r0
 800c578:	0ff6      	lsrs	r6, r6, #31
 800c57a:	198e      	adds	r6, r1, r6
 800c57c:	9600      	str	r6, [sp, #0]
 800c57e:	1a52      	subs	r2, r2, r1
 800c580:	4563      	cmp	r3, ip
 800c582:	4189      	sbcs	r1, r1
 800c584:	4249      	negs	r1, r1
 800c586:	1a52      	subs	r2, r2, r1
 800c588:	4661      	mov	r1, ip
 800c58a:	1a5b      	subs	r3, r3, r1
 800c58c:	9900      	ldr	r1, [sp, #0]
 800c58e:	19e4      	adds	r4, r4, r7
 800c590:	0fde      	lsrs	r6, r3, #31
 800c592:	0052      	lsls	r2, r2, #1
 800c594:	1992      	adds	r2, r2, r6
 800c596:	9e04      	ldr	r6, [sp, #16]
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	3e01      	subs	r6, #1
 800c59c:	087f      	lsrs	r7, r7, #1
 800c59e:	9604      	str	r6, [sp, #16]
 800c5a0:	2e00      	cmp	r6, #0
 800c5a2:	d1db      	bne.n	800c55c <__ieee754_sqrt+0xe8>
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	d01f      	beq.n	800c5e8 <__ieee754_sqrt+0x174>
 800c5a8:	4e21      	ldr	r6, [pc, #132]	@ (800c630 <__ieee754_sqrt+0x1bc>)
 800c5aa:	4f22      	ldr	r7, [pc, #136]	@ (800c634 <__ieee754_sqrt+0x1c0>)
 800c5ac:	6830      	ldr	r0, [r6, #0]
 800c5ae:	6871      	ldr	r1, [r6, #4]
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	9200      	str	r2, [sp, #0]
 800c5b6:	9301      	str	r3, [sp, #4]
 800c5b8:	6832      	ldr	r2, [r6, #0]
 800c5ba:	6873      	ldr	r3, [r6, #4]
 800c5bc:	9202      	str	r2, [sp, #8]
 800c5be:	9303      	str	r3, [sp, #12]
 800c5c0:	9a00      	ldr	r2, [sp, #0]
 800c5c2:	9b01      	ldr	r3, [sp, #4]
 800c5c4:	f7f6 fbdc 	bl	8002d80 <__aeabi_dsub>
 800c5c8:	0002      	movs	r2, r0
 800c5ca:	000b      	movs	r3, r1
 800c5cc:	9802      	ldr	r0, [sp, #8]
 800c5ce:	9903      	ldr	r1, [sp, #12]
 800c5d0:	f7f3 ff42 	bl	8000458 <__aeabi_dcmple>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d007      	beq.n	800c5e8 <__ieee754_sqrt+0x174>
 800c5d8:	6830      	ldr	r0, [r6, #0]
 800c5da:	6871      	ldr	r1, [r6, #4]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	1c67      	adds	r7, r4, #1
 800c5e2:	d10c      	bne.n	800c5fe <__ieee754_sqrt+0x18a>
 800c5e4:	9c04      	ldr	r4, [sp, #16]
 800c5e6:	3501      	adds	r5, #1
 800c5e8:	4a13      	ldr	r2, [pc, #76]	@ (800c638 <__ieee754_sqrt+0x1c4>)
 800c5ea:	106b      	asrs	r3, r5, #1
 800c5ec:	189b      	adds	r3, r3, r2
 800c5ee:	9a05      	ldr	r2, [sp, #20]
 800c5f0:	07ed      	lsls	r5, r5, #31
 800c5f2:	0864      	lsrs	r4, r4, #1
 800c5f4:	0512      	lsls	r2, r2, #20
 800c5f6:	4325      	orrs	r5, r4
 800c5f8:	0028      	movs	r0, r5
 800c5fa:	18d1      	adds	r1, r2, r3
 800c5fc:	e751      	b.n	800c4a2 <__ieee754_sqrt+0x2e>
 800c5fe:	f7f5 f8d9 	bl	80017b4 <__aeabi_dadd>
 800c602:	6877      	ldr	r7, [r6, #4]
 800c604:	6836      	ldr	r6, [r6, #0]
 800c606:	0002      	movs	r2, r0
 800c608:	000b      	movs	r3, r1
 800c60a:	0030      	movs	r0, r6
 800c60c:	0039      	movs	r1, r7
 800c60e:	f7f3 ff19 	bl	8000444 <__aeabi_dcmplt>
 800c612:	2800      	cmp	r0, #0
 800c614:	d004      	beq.n	800c620 <__ieee754_sqrt+0x1ac>
 800c616:	3402      	adds	r4, #2
 800c618:	4263      	negs	r3, r4
 800c61a:	4163      	adcs	r3, r4
 800c61c:	18ed      	adds	r5, r5, r3
 800c61e:	e7e3      	b.n	800c5e8 <__ieee754_sqrt+0x174>
 800c620:	2301      	movs	r3, #1
 800c622:	3401      	adds	r4, #1
 800c624:	439c      	bics	r4, r3
 800c626:	e7df      	b.n	800c5e8 <__ieee754_sqrt+0x174>
 800c628:	7ff00000 	.word	0x7ff00000
 800c62c:	fffffc01 	.word	0xfffffc01
 800c630:	0800d1e0 	.word	0x0800d1e0
 800c634:	0800d1d8 	.word	0x0800d1d8
 800c638:	3fe00000 	.word	0x3fe00000

0800c63c <_init>:
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63e:	46c0      	nop			@ (mov r8, r8)
 800c640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c642:	bc08      	pop	{r3}
 800c644:	469e      	mov	lr, r3
 800c646:	4770      	bx	lr

0800c648 <_fini>:
 800c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64a:	46c0      	nop			@ (mov r8, r8)
 800c64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64e:	bc08      	pop	{r3}
 800c650:	469e      	mov	lr, r3
 800c652:	4770      	bx	lr
